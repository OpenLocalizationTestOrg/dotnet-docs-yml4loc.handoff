{"nodes":[{"content":"Provides an abstract base class that Elliptic Curve Diffie-Hellman (ECDH) algorithm implementations can derive from. This class provides the basic set of operations that all ECDH implementations must support.","nodes":[{"pos":[0,208],"content":"Provides an abstract base class that Elliptic Curve Diffie-Hellman (ECDH) algorithm implementations can derive from. This class provides the basic set of operations that all ECDH implementations must support.","nodes":[{"content":"Provides an abstract base class that Elliptic Curve Diffie-Hellman (ECDH) algorithm implementations can derive from. This class provides the basic set of operations that all ECDH implementations must support.","pos":[0,208],"nodes":[{"content":"Provides an abstract base class that Elliptic Curve Diffie-Hellman (ECDH) algorithm implementations can derive from.","pos":[0,116]},{"content":"This class provides the basic set of operations that all ECDH implementations must support.","pos":[117,208]}]}]}],"pos":[2391,2600],"yaml":true},{"content":"This class serves as the abstract base class for ECDH implementations.","nodes":[{"pos":[0,70],"content":"This class serves as the abstract base class for ECDH implementations.","nodes":[{"content":"This class serves as the abstract base class for ECDH implementations.","pos":[0,70]}]}],"pos":[2611,2682],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.ECDiffieHellman\"></xref> class.","nodes":[{"pos":[0,106],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.ECDiffieHellman\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.ECDiffieHellman\"></xref> class."}],"pos":[4907,5014],"yaml":true},{"content":"This constructor is called by classes that derive from the <xref:System.Security.Cryptography.ECDiffieHellman> class. The <xref:System.Security.Cryptography.ECDiffieHellmanCng> class is the only implementation that is currently included in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]. For information about how to create a new implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm, see the <xref:System.Security.Cryptography.ECDiffieHellman.Create%2A> method.","nodes":[{"pos":[0,488],"content":"This constructor is called by classes that derive from the <xref:System.Security.Cryptography.ECDiffieHellman> class. The <xref:System.Security.Cryptography.ECDiffieHellmanCng> class is the only implementation that is currently included in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]. For information about how to create a new implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm, see the <xref:System.Security.Cryptography.ECDiffieHellman.Create%2A> method.","nodes":[{"content":"This constructor is called by classes that derive from the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.ECDiffieHellman&gt;</ph> class.","pos":[0,117],"source":"This constructor is called by classes that derive from the <xref:System.Security.Cryptography.ECDiffieHellman> class."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.ECDiffieHellmanCng&gt;</ph> class is the only implementation that is currently included in the <ph id=\"ph2\">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>.","pos":[118,298],"source":" The <xref:System.Security.Cryptography.ECDiffieHellmanCng> class is the only implementation that is currently included in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]."},{"content":"For information about how to create a new implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm, see the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.ECDiffieHellman.Create%2A&gt;</ph> method.","pos":[299,488],"source":" For information about how to create a new implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm, see the <xref:System.Security.Cryptography.ECDiffieHellman.Create%2A> method."}]}],"pos":[5025,5514],"yaml":true,"extradata":"MT"},{"content":"Creates a new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.","nodes":[{"pos":[0,107],"content":"Creates a new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.","nodes":[{"content":"Creates a new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.","pos":[0,107]}]}],"pos":[6654,6762],"yaml":true},{"content":"A new instance of the default implementation of this class.","nodes":[{"pos":[0,59],"content":"A new instance of the default implementation of this class.","nodes":[{"content":"A new instance of the default implementation of this class.","pos":[0,59]}]}],"pos":[6962,7022],"yaml":true},{"content":"Creates a new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm with a new public/private key-pair generated over the specified curve.","nodes":[{"pos":[0,177],"content":"Creates a new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm with a new public/private key-pair generated over the specified curve.","nodes":[{"content":"Creates a new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm with a new public/private key-pair generated over the specified curve.","pos":[0,177]}]}],"pos":[8226,8404],"yaml":true},{"content":"curve must validate (that is, it must return true when passed to the <xref:System.Security.Cryptography.ECCurve.Validate%2A?displayProperty=fullName> method.  \n  \n Characteristic-2 curves are not supported on Windows.","nodes":[{"pos":[0,157],"content":"curve must validate (that is, it must return true when passed to the <xref:System.Security.Cryptography.ECCurve.Validate%2A?displayProperty=fullName> method.","nodes":[{"content":"curve must validate (that is, it must return true when passed to the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.ECCurve.Validate%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,157],"source":"curve must validate (that is, it must return true when passed to the <xref:System.Security.Cryptography.ECCurve.Validate%2A?displayProperty=fullName> method."}]},{"pos":[164,217],"content":"Characteristic-2 curves are not supported on Windows.","nodes":[{"content":"Characteristic-2 curves are not supported on Windows.","pos":[0,53]}]}],"pos":[8415,8637],"yaml":true,"extradata":"MT"},{"content":"The curve to use to generate a new public/private key-pair.","nodes":[{"pos":[0,59],"content":"The curve to use to generate a new public/private key-pair.","nodes":[{"content":"The curve to use to generate a new public/private key-pair.","pos":[0,59]}]}],"pos":[8872,8932],"yaml":true},{"content":"A new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.","nodes":[{"pos":[0,99],"content":"A new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.","nodes":[{"content":"A new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.","pos":[0,99]}]}],"pos":[9020,9120],"yaml":true},{"content":"<code>curve</code> does not validate.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;curve&lt;/code&gt;</ph> does not validate.","source":"<code>curve</code> does not validate."}],"pos":[9347,9385],"yaml":true},{"content":"Creates a new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm with the key described by the specified  <xref href=\"System.Security.Cryptography.ECParameters\"></xref> object.","nodes":[{"pos":[0,218],"content":"Creates a new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm with the key described by the specified  <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.ECParameters\"&gt;&lt;/xref&gt;</ph> object.","source":"Creates a new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm with the key described by the specified  <xref href=\"System.Security.Cryptography.ECParameters\"></xref> object."}],"pos":[10194,10413],"yaml":true},{"content":"`parameters` must validate (that is, it must return `true`) when passed to the <xref:System.Security.Cryptography.ECParameters.Validate%2A?displayProperty=fullName> method. Parameters over implicit curves are not supported.  \n  \n Characteristic-2 curves are not supported on Windows.","nodes":[{"pos":[0,223],"content":"`parameters` must validate (that is, it must return `true`) when passed to the <xref:System.Security.Cryptography.ECParameters.Validate%2A?displayProperty=fullName> method. Parameters over implicit curves are not supported.","nodes":[{"content":"<ph id=\"ph1\">`parameters`</ph> must validate (that is, it must return <ph id=\"ph2\">`true`</ph>) when passed to the <ph id=\"ph3\">&lt;xref:System.Security.Cryptography.ECParameters.Validate%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,172],"source":"`parameters` must validate (that is, it must return `true`) when passed to the <xref:System.Security.Cryptography.ECParameters.Validate%2A?displayProperty=fullName> method."},{"content":"Parameters over implicit curves are not supported.","pos":[173,223]}]},{"pos":[230,283],"content":"Characteristic-2 curves are not supported on Windows.","nodes":[{"content":"Characteristic-2 curves are not supported on Windows.","pos":[0,53]}]}],"pos":[10424,10712],"yaml":true,"extradata":"MT"},{"content":"The parameters  for the elliptic curve cryptography (ECC) algorithm.","nodes":[{"pos":[0,68],"content":"The parameters  for the elliptic curve cryptography (ECC) algorithm.","nodes":[{"content":"The parameters  for the elliptic curve cryptography (ECC) algorithm.","pos":[0,68]}]}],"pos":[10967,11036],"yaml":true},{"content":"A new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.","nodes":[{"pos":[0,99],"content":"A new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.","nodes":[{"content":"A new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.","pos":[0,99]}]}],"pos":[11124,11224],"yaml":true},{"content":"<code>parameters</code> does not validate.","nodes":[{"pos":[0,42],"content":"<ph id=\"ph1\">&lt;code&gt;parameters&lt;/code&gt;</ph> does not validate.","source":"<code>parameters</code> does not validate."}],"pos":[11451,11494],"yaml":true},{"content":"Creates a new instance of the specified implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.","nodes":[{"pos":[0,109],"content":"Creates a new instance of the specified implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.","nodes":[{"content":"Creates a new instance of the specified implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.","pos":[0,109]}]}],"pos":[12201,12311],"yaml":true},{"content":"If you develop your own implementation of an <xref:System.Security.Cryptography.ECDiffieHellman> object, you can use the <xref:System.Security.Cryptography.ECDiffieHellman.Create%28System.String%29> method overload to create a custom `algorithm` string that specifies your implementation.  \n  \n The `algorithm` parameter specifies the name of an implementation of the ECDH algorithm. The following strings all refer to the same implementation, which is the only implementation currently supported in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]:  \n  \n-   \"ECDH\"  \n  \n-   \"ECDiffieHellman\"  \n  \n-   \"ECDiffieHellmanCng\"  \n  \n-   \"System.Security.Cryptography.ECDiffieHellmanCng\"  \n  \n You can also provide the name of a custom ECDH implementation for the `algorithm` parameter. If you do that, the <xref:System.Security.Cryptography.CryptoConfig> object will use it to determine whether an ECDH object can be created.","nodes":[{"pos":[0,288],"content":"If you develop your own implementation of an <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.ECDiffieHellman&gt;</ph> object, you can use the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.ECDiffieHellman.Create%28System.String%29&gt;</ph> method overload to create a custom <ph id=\"ph3\">`algorithm`</ph> string that specifies your implementation.","source":"If you develop your own implementation of an <xref:System.Security.Cryptography.ECDiffieHellman> object, you can use the <xref:System.Security.Cryptography.ECDiffieHellman.Create%28System.String%29> method overload to create a custom `algorithm` string that specifies your implementation."},{"pos":[295,558],"content":"The `algorithm` parameter specifies the name of an implementation of the ECDH algorithm. The following strings all refer to the same implementation, which is the only implementation currently supported in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]:","nodes":[{"content":"The <ph id=\"ph1\">`algorithm`</ph> parameter specifies the name of an implementation of the ECDH algorithm.","pos":[0,88],"source":"The `algorithm` parameter specifies the name of an implementation of the ECDH algorithm."},{"content":"The following strings all refer to the same implementation, which is the only implementation currently supported in the <ph id=\"ph1\">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>:","pos":[89,263],"source":" The following strings all refer to the same implementation, which is the only implementation currently supported in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]:"}]},{"pos":[568,574],"content":"\"ECDH\"","nodes":[{"content":"\"ECDH\"","pos":[0,6]}]},{"pos":[584,601],"content":"\"ECDiffieHellman\"","nodes":[{"content":"\"ECDiffieHellman\"","pos":[0,17]}]},{"pos":[611,631],"content":"\"ECDiffieHellmanCng\"","nodes":[{"content":"\"ECDiffieHellmanCng\"","pos":[0,20]}]},{"pos":[641,690],"content":"\"System.Security.Cryptography.ECDiffieHellmanCng\"","nodes":[{"content":"\"System.Security.Cryptography.ECDiffieHellmanCng\"","pos":[0,49]}]},{"pos":[697,929],"content":"You can also provide the name of a custom ECDH implementation for the `algorithm` parameter. If you do that, the <xref:System.Security.Cryptography.CryptoConfig> object will use it to determine whether an ECDH object can be created.","nodes":[{"content":"You can also provide the name of a custom ECDH implementation for the <ph id=\"ph1\">`algorithm`</ph> parameter.","pos":[0,92],"source":"You can also provide the name of a custom ECDH implementation for the `algorithm` parameter."},{"content":"If you do that, the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.CryptoConfig&gt;</ph> object will use it to determine whether an ECDH object can be created.","pos":[93,232],"source":" If you do that, the <xref:System.Security.Cryptography.CryptoConfig> object will use it to determine whether an ECDH object can be created."}]}],"pos":[12322,13274],"yaml":true,"extradata":"MT"},{"content":"The name of an implementation of the ECDH algorithm.","nodes":[{"pos":[0,52],"content":"The name of an implementation of the ECDH algorithm.","nodes":[{"content":"The name of an implementation of the ECDH algorithm.","pos":[0,52]}]}],"pos":[13464,13517],"yaml":true},{"content":"A new instance of the specified implementation of this class. If the specified algorithm name does not map to an ECDH implementation, this method returns `null`.","nodes":[{"pos":[0,161],"content":"A new instance of the specified implementation of this class. If the specified algorithm name does not map to an ECDH implementation, this method returns `null`.","nodes":[{"content":"A new instance of the specified implementation of this class.","pos":[0,61]},{"content":"If the specified algorithm name does not map to an ECDH implementation, this method returns <ph id=\"ph1\">`null`</ph>.","pos":[62,161],"source":" If the specified algorithm name does not map to an ECDH implementation, this method returns `null`."}]}],"pos":[13605,13767],"yaml":true},{"content":"The <code>algorithm</code> parameter is `null`.","nodes":[{"pos":[0,47],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">algorithm</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>algorithm</code> parameter is `null`."}],"pos":[13948,13996],"yaml":true},{"content":"Derives bytes that can be used as a key using a hash function, given another party's public key and hash algorithm's name.","nodes":[{"pos":[0,122],"content":"Derives bytes that can be used as a key using a hash function, given another party's public key and hash algorithm's name.","nodes":[{"content":"Derives bytes that can be used as a key using a hash function, given another party's public key and hash algorithm's name.","pos":[0,122]}]}],"pos":[15484,15607],"yaml":true},{"content":"This overload calls the <xref:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash%2A> method passing `null` as the prepend and append values.","nodes":[{"pos":[0,152],"content":"This overload calls the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash%2A&gt;</ph> method passing <ph id=\"ph2\">`null`</ph> as the prepend and append values.","source":"This overload calls the <xref:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash%2A> method passing `null` as the prepend and append values."}],"pos":[15618,15771],"yaml":true,"extradata":"MT"},{"content":"The other party's public key.","nodes":[{"pos":[0,29],"content":"The other party's public key.","nodes":[{"content":"The other party's public key.","pos":[0,29]}]}],"pos":[16096,16126],"yaml":true},{"content":"The hash algorithm  to use to derive the key material.","nodes":[{"pos":[0,54],"content":"The hash algorithm  to use to derive the key material.","nodes":[{"content":"The hash algorithm  to use to derive the key material.","pos":[0,54]}]}],"pos":[16228,16283],"yaml":true},{"content":"The key material from the key exchange with the other party’s public key.","nodes":[{"pos":[0,73],"content":"The key material from the key exchange with the other party’s public key.","nodes":[{"content":"The key material from the key exchange with the other party’s public key.","pos":[0,73]}]}],"pos":[16340,16414],"yaml":true},{"content":"When implemented in a derived class, derives bytes that can be used as a key using a hash function, given another party's public key, hash algorithm's name, a prepend value and an append value.","nodes":[{"pos":[0,193],"content":"When implemented in a derived class, derives bytes that can be used as a key using a hash function, given another party's public key, hash algorithm's name, a prepend value and an append value.","nodes":[{"content":"When implemented in a derived class, derives bytes that can be used as a key using a hash function, given another party's public key, hash algorithm's name, a prepend value and an append value.","pos":[0,193]}]}],"pos":[17905,18099],"yaml":true},{"content":"The other party's public key.","nodes":[{"pos":[0,29],"content":"The other party's public key.","nodes":[{"content":"The other party's public key.","pos":[0,29]}]}],"pos":[18475,18505],"yaml":true},{"content":"The hash algorithm  to use to derive the key material.","nodes":[{"pos":[0,54],"content":"The hash algorithm  to use to derive the key material.","nodes":[{"content":"The hash algorithm  to use to derive the key material.","pos":[0,54]}]}],"pos":[18607,18662],"yaml":true},{"content":"A value to prepend to the derived secret before hashing.","nodes":[{"pos":[0,56],"content":"A value to prepend to the derived secret before hashing.","nodes":[{"content":"A value to prepend to the derived secret before hashing.","pos":[0,56]}]}],"pos":[18731,18788],"yaml":true},{"content":"A value to append to the derived secret before hashing.","nodes":[{"pos":[0,55],"content":"A value to append to the derived secret before hashing.","nodes":[{"content":"A value to append to the derived secret before hashing.","pos":[0,55]}]}],"pos":[18856,18912],"yaml":true},{"content":"The key material from the key exchange with the other party’s public key.","nodes":[{"pos":[0,73],"content":"The key material from the key exchange with the other party’s public key.","nodes":[{"content":"The key material from the key exchange with the other party’s public key.","pos":[0,73]}]}],"pos":[18969,19043],"yaml":true},{"content":"A derived class must override this method.","nodes":[{"pos":[0,42],"content":"A derived class must override this method.","nodes":[{"content":"A derived class must override this method.","pos":[0,42]}]}],"pos":[19239,19282],"yaml":true},{"content":"When implemented in a derived class, derives bytes that can be used as a key using a Hash-based Message Authentication Code (HMAC).","nodes":[{"pos":[0,131],"content":"When implemented in a derived class, derives bytes that can be used as a key using a Hash-based Message Authentication Code (HMAC).","nodes":[{"content":"When implemented in a derived class, derives bytes that can be used as a key using a Hash-based Message Authentication Code (HMAC).","pos":[0,131]}]}],"pos":[20746,20878],"yaml":true},{"content":"The other party's public key.","nodes":[{"pos":[0,29],"content":"The other party's public key.","nodes":[{"content":"The other party's public key.","pos":[0,29]}]}],"pos":[21270,21300],"yaml":true},{"content":"The hash algorithm to use to derive the key material.","nodes":[{"pos":[0,53],"content":"The hash algorithm to use to derive the key material.","nodes":[{"content":"The hash algorithm to use to derive the key material.","pos":[0,53]}]}],"pos":[21402,21456],"yaml":true},{"content":"The key for the HMAC.","nodes":[{"pos":[0,21],"content":"The key for the HMAC.","nodes":[{"content":"The key for the HMAC.","pos":[0,21]}]}],"pos":[21519,21541],"yaml":true},{"content":"A value to prepend to the derived secret before hashing.","nodes":[{"pos":[0,56],"content":"A value to prepend to the derived secret before hashing.","nodes":[{"content":"A value to prepend to the derived secret before hashing.","pos":[0,56]}]}],"pos":[21610,21667],"yaml":true},{"content":"A value to append to the derived secret before hashing.","nodes":[{"pos":[0,55],"content":"A value to append to the derived secret before hashing.","nodes":[{"content":"A value to append to the derived secret before hashing.","pos":[0,55]}]}],"pos":[21735,21791],"yaml":true},{"content":"The key material from the key exchange with the other party’s public key.","nodes":[{"pos":[0,73],"content":"The key material from the key exchange with the other party’s public key.","nodes":[{"content":"The key material from the key exchange with the other party’s public key.","pos":[0,73]}]}],"pos":[21848,21922],"yaml":true},{"content":"A derived class must override this method.","nodes":[{"pos":[0,42],"content":"A derived class must override this method.","nodes":[{"content":"A derived class must override this method.","pos":[0,42]}]}],"pos":[22118,22161],"yaml":true},{"content":"Derives bytes that can be used as a key using a Hash-based Message Authentication Code (HMAC).","nodes":[{"pos":[0,94],"content":"Derives bytes that can be used as a key using a Hash-based Message Authentication Code (HMAC).","nodes":[{"content":"Derives bytes that can be used as a key using a Hash-based Message Authentication Code (HMAC).","pos":[0,94]}]}],"pos":[23493,23588],"yaml":true},{"content":"This overload calls the <xref:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac%2A> method passing `null` as the prepend and append values.","nodes":[{"pos":[0,152],"content":"This overload calls the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac%2A&gt;</ph> method passing <ph id=\"ph2\">`null`</ph> as the prepend and append values.","source":"This overload calls the <xref:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac%2A> method passing `null` as the prepend and append values."}],"pos":[23599,23752],"yaml":true,"extradata":"MT"},{"content":"The other party's public key.","nodes":[{"pos":[0,29],"content":"The other party's public key.","nodes":[{"content":"The other party's public key.","pos":[0,29]}]}],"pos":[24093,24123],"yaml":true},{"content":"The hash algorithm to use to derive the key material.","nodes":[{"pos":[0,53],"content":"The hash algorithm to use to derive the key material.","nodes":[{"content":"The hash algorithm to use to derive the key material.","pos":[0,53]}]}],"pos":[24225,24279],"yaml":true},{"content":"The key for the HMAC.","nodes":[{"pos":[0,21],"content":"The key for the HMAC.","nodes":[{"content":"The key for the HMAC.","pos":[0,21]}]}],"pos":[24342,24364],"yaml":true},{"content":"The key material from the key exchange with the other party’s public key.","nodes":[{"pos":[0,73],"content":"The key material from the key exchange with the other party’s public key.","nodes":[{"content":"The key material from the key exchange with the other party’s public key.","pos":[0,73]}]}],"pos":[24421,24495],"yaml":true},{"content":"Derives bytes that can be used as a key, given another party's public key.","nodes":[{"pos":[0,74],"content":"Derives bytes that can be used as a key, given another party's public key.","nodes":[{"content":"Derives bytes that can be used as a key, given another party's public key.","pos":[0,74]}]}],"pos":[25656,25731],"yaml":true},{"content":"For more information about public keys, see the <xref:System.Security.Cryptography.ECDiffieHellmanPublicKey> class.","nodes":[{"pos":[0,115],"content":"For more information about public keys, see the <xref:System.Security.Cryptography.ECDiffieHellmanPublicKey> class.","nodes":[{"content":"For more information about public keys, see the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.ECDiffieHellmanPublicKey&gt;</ph> class.","pos":[0,115],"source":"For more information about public keys, see the <xref:System.Security.Cryptography.ECDiffieHellmanPublicKey> class."}]}],"pos":[25742,25858],"yaml":true,"extradata":"MT"},{"content":"The other party's public key.","nodes":[{"pos":[0,29],"content":"The other party's public key.","nodes":[{"content":"The other party's public key.","pos":[0,29]}]}],"pos":[26129,26159],"yaml":true},{"content":"The key material from the key exchange with the other party’s public key.","nodes":[{"pos":[0,73],"content":"The key material from the key exchange with the other party’s public key.","nodes":[{"content":"The key material from the key exchange with the other party’s public key.","pos":[0,73]}]}],"pos":[26216,26290],"yaml":true},{"content":"When implemented in a derived class, derives bytes that can be used as a key using a Transport Layer Security (TLS) Pseudo-Random Function (PRF) derivation algorithm.","nodes":[{"pos":[0,166],"content":"When implemented in a derived class, derives bytes that can be used as a key using a Transport Layer Security (TLS) Pseudo-Random Function (PRF) derivation algorithm.","nodes":[{"content":"When implemented in a derived class, derives bytes that can be used as a key using a Transport Layer Security (TLS) Pseudo-Random Function (PRF) derivation algorithm.","pos":[0,166]}]}],"pos":[27775,27942],"yaml":true},{"content":"The other party's public key.","nodes":[{"pos":[0,29],"content":"The other party's public key.","nodes":[{"content":"The other party's public key.","pos":[0,29]}]}],"pos":[28241,28271],"yaml":true},{"content":"The ASCII-encoded PRF label.","nodes":[{"pos":[0,28],"content":"The ASCII-encoded PRF label.","nodes":[{"content":"The ASCII-encoded PRF label.","pos":[0,28]}]}],"pos":[28335,28364],"yaml":true},{"content":"The 64-byte PRF seed.","nodes":[{"pos":[0,21],"content":"The 64-byte PRF seed.","nodes":[{"content":"The 64-byte PRF seed.","pos":[0,21]}]}],"pos":[28427,28449],"yaml":true},{"content":"The key material from the key exchange with the other party’s public key.","nodes":[{"pos":[0,73],"content":"The key material from the key exchange with the other party’s public key.","nodes":[{"content":"The key material from the key exchange with the other party’s public key.","pos":[0,73]}]}],"pos":[28506,28580],"yaml":true},{"content":"A derived class must override this method.","nodes":[{"pos":[0,42],"content":"A derived class must override this method.","nodes":[{"content":"A derived class must override this method.","pos":[0,42]}]}],"pos":[28771,28814],"yaml":true},{"content":"When overridden in a derived class, exports either the public or the public and private key information using the explicit curve form from a working <xref href=\"System.Security.Cryptography.ECDiffieHellman\"></xref> key to an <xref href=\"System.Security.Cryptography.ECParameters\"></xref> structure so that it can be passed to the <xref href=\"System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)\"></xref> method.","nodes":[{"pos":[0,463],"content":"When overridden in a derived class, exports either the public or the public and private key information using the explicit curve form from a working <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.ECDiffieHellman\"&gt;&lt;/xref&gt;</ph> key to an <ph id=\"ph2\">&lt;xref href=\"System.Security.Cryptography.ECParameters\"&gt;&lt;/xref&gt;</ph> structure so that it can be passed to the <ph id=\"ph3\">&lt;xref href=\"System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)\"&gt;&lt;/xref&gt;</ph> method.","source":"When overridden in a derived class, exports either the public or the public and private key information using the explicit curve form from a working <xref href=\"System.Security.Cryptography.ECDiffieHellman\"></xref> key to an <xref href=\"System.Security.Cryptography.ECParameters\"></xref> structure so that it can be passed to the <xref href=\"System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)\"></xref> method."}],"pos":[29756,30220],"yaml":true},{"content":"`true` to include private parameters; otherwise, `false`.","nodes":[{"pos":[0,57],"content":"<ph id=\"ph1\">`true`</ph> to include private parameters; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to include private parameters; otherwise, `false`."}],"pos":[30455,30515],"yaml":true},{"content":"An object that represents the point on the curve for this key, using the explicit curve format.","nodes":[{"pos":[0,95],"content":"An object that represents the point on the curve for this key, using the explicit curve format.","nodes":[{"content":"An object that represents the point on the curve for this key, using the explicit curve format.","pos":[0,95]}]}],"pos":[30600,30696],"yaml":true},{"content":"A derived class must override this method.","nodes":[{"pos":[0,42],"content":"A derived class must override this method.","nodes":[{"content":"A derived class must override this method.","pos":[0,42]}]}],"pos":[30899,30942],"yaml":true},{"content":"When overridden in a derived class, exports either the public or the public and private key information from a working <xref href=\"System.Security.Cryptography.ECDiffieHellman\"></xref> key to an <xref href=\"System.Security.Cryptography.ECParameters\"></xref> structure so that it can be passed to the <xref href=\"System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)\"></xref> method.","nodes":[{"pos":[0,433],"content":"When overridden in a derived class, exports either the public or the public and private key information from a working <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.ECDiffieHellman\"&gt;&lt;/xref&gt;</ph> key to an <ph id=\"ph2\">&lt;xref href=\"System.Security.Cryptography.ECParameters\"&gt;&lt;/xref&gt;</ph> structure so that it can be passed to the <ph id=\"ph3\">&lt;xref href=\"System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)\"&gt;&lt;/xref&gt;</ph> method.","source":"When overridden in a derived class, exports either the public or the public and private key information from a working <xref href=\"System.Security.Cryptography.ECDiffieHellman\"></xref> key to an <xref href=\"System.Security.Cryptography.ECParameters\"></xref> structure so that it can be passed to the <xref href=\"System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)\"></xref> method."}],"pos":[31715,32149],"yaml":true},{"content":"If the curve has a name, the <xref:System.Security.Cryptography.ECParameters.Curve> property contains named curve parameters; otherwise, it will contain explicit parameters.","nodes":[{"pos":[0,173],"content":"If the curve has a name, the <xref:System.Security.Cryptography.ECParameters.Curve> property contains named curve parameters; otherwise, it will contain explicit parameters.","nodes":[{"content":"If the curve has a name, the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.ECParameters.Curve&gt;</ph> property contains named curve parameters; otherwise, it will contain explicit parameters.","pos":[0,173],"source":"If the curve has a name, the <xref:System.Security.Cryptography.ECParameters.Curve> property contains named curve parameters; otherwise, it will contain explicit parameters."}]}],"pos":[32160,32334],"yaml":true,"extradata":"MT"},{"content":"`true` to include private parameters; otehrwise,  `false` to include public parameters only.","nodes":[{"pos":[0,92],"content":"<ph id=\"ph1\">`true`</ph> to include private parameters; otehrwise,  <ph id=\"ph2\">`false`</ph> to include public parameters only.","source":"`true` to include private parameters; otehrwise,  `false` to include public parameters only."}],"pos":[32561,32656],"yaml":true},{"content":"An object that represents the point on the curve for this key. It can be passed to the <xref href=\"System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)\"></xref> method.","nodes":[{"pos":[0,220],"content":"An object that represents the point on the curve for this key. It can be passed to the <xref href=\"System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)\"></xref> method.","nodes":[{"content":"An object that represents the point on the curve for this key.","pos":[0,62]},{"content":"It can be passed to the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)\"&gt;&lt;/xref&gt;</ph> method.","pos":[63,220],"source":" It can be passed to the <xref href=\"System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)\"></xref> method."}]}],"pos":[32741,32962],"yaml":true},{"content":"A derived class must override this method.","nodes":[{"pos":[0,42],"content":"A derived class must override this method.","nodes":[{"content":"A derived class must override this method.","pos":[0,42]}]}],"pos":[33157,33200],"yaml":true},{"content":"When overridden in a derived class, generates a new ephemeral public/private key pair for the specified curve.","nodes":[{"pos":[0,110],"content":"When overridden in a derived class, generates a new ephemeral public/private key pair for the specified curve.","nodes":[{"content":"When overridden in a derived class, generates a new ephemeral public/private key pair for the specified curve.","pos":[0,110]}]}],"pos":[34009,34120],"yaml":true},{"content":"`curve` must validate (that is, it must return `true`) when passed to the <xref:System.Security.Cryptography.ECCurve.Validate%2A?displayProperty=fullName> method) and must not be implicit.  \n  \n Characteristic-2 curves are not supported on Windows.","nodes":[{"pos":[0,188],"content":"<ph id=\"ph1\">`curve`</ph> must validate (that is, it must return <ph id=\"ph2\">`true`</ph>) when passed to the <ph id=\"ph3\">&lt;xref:System.Security.Cryptography.ECCurve.Validate%2A?displayProperty=fullName&gt;</ph> method) and must not be implicit.","source":"`curve` must validate (that is, it must return `true`) when passed to the <xref:System.Security.Cryptography.ECCurve.Validate%2A?displayProperty=fullName> method) and must not be implicit."},{"pos":[195,248],"content":"Characteristic-2 curves are not supported on Windows.","nodes":[{"content":"Characteristic-2 curves are not supported on Windows.","pos":[0,53]}]}],"pos":[34131,34384],"yaml":true,"extradata":"MT"},{"content":"The curve used to generate an ephemeral public/private key pair.","nodes":[{"pos":[0,64],"content":"The curve used to generate an ephemeral public/private key pair.","nodes":[{"content":"The curve used to generate an ephemeral public/private key pair.","pos":[0,64]}]}],"pos":[34585,34650],"yaml":true},{"content":"<code>curve</code> does not validate.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;curve&lt;/code&gt;</ph> does not validate.","source":"<code>curve</code> does not validate."}],"pos":[34882,34920],"yaml":true},{"content":"A derived class must override this method.","nodes":[{"pos":[0,42],"content":"A derived class must override this method.","nodes":[{"content":"A derived class must override this method.","pos":[0,42]}]}],"pos":[35026,35069],"yaml":true},{"content":"When overridden in a derived class, imports the specified parameters for an <xref href=\"System.Security.Cryptography.ECCurve\"></xref> as an ephemeral key into the current <xref href=\"System.Security.Cryptography.ECDiffieHellman\"></xref> object.","nodes":[{"pos":[0,244],"content":"When overridden in a derived class, imports the specified parameters for an <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.ECCurve\"&gt;&lt;/xref&gt;</ph> as an ephemeral key into the current <ph id=\"ph2\">&lt;xref href=\"System.Security.Cryptography.ECDiffieHellman\"&gt;&lt;/xref&gt;</ph> object.","source":"When overridden in a derived class, imports the specified parameters for an <xref href=\"System.Security.Cryptography.ECCurve\"></xref> as an ephemeral key into the current <xref href=\"System.Security.Cryptography.ECDiffieHellman\"></xref> object."}],"pos":[35938,36183],"yaml":true},{"content":"`parameters` must validate (that is, it must return `true`) when passed to the <xref:System.Security.Cryptography.ECParameters.Validate%2A?displayProperty=fullName> method. Parameters over implicit curves are not supported.  \n  \n Characteristic-2 curves are not supported on Windows.","nodes":[{"pos":[0,223],"content":"`parameters` must validate (that is, it must return `true`) when passed to the <xref:System.Security.Cryptography.ECParameters.Validate%2A?displayProperty=fullName> method. Parameters over implicit curves are not supported.","nodes":[{"content":"<ph id=\"ph1\">`parameters`</ph> must validate (that is, it must return <ph id=\"ph2\">`true`</ph>) when passed to the <ph id=\"ph3\">&lt;xref:System.Security.Cryptography.ECParameters.Validate%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,172],"source":"`parameters` must validate (that is, it must return `true`) when passed to the <xref:System.Security.Cryptography.ECParameters.Validate%2A?displayProperty=fullName> method."},{"content":"Parameters over implicit curves are not supported.","pos":[173,223]}]},{"pos":[230,283],"content":"Characteristic-2 curves are not supported on Windows.","nodes":[{"content":"Characteristic-2 curves are not supported on Windows.","pos":[0,53]}]}],"pos":[36194,36482],"yaml":true,"extradata":"MT"},{"content":"The curve's parameters to import.","nodes":[{"pos":[0,33],"content":"The curve's parameters to import.","nodes":[{"content":"The curve's parameters to import.","pos":[0,33]}]}],"pos":[36708,36742],"yaml":true},{"content":"<code>parameters</code> does not validate.","nodes":[{"pos":[0,42],"content":"<ph id=\"ph1\">&lt;code&gt;parameters&lt;/code&gt;</ph> does not validate.","source":"<code>parameters</code> does not validate."}],"pos":[36979,37022],"yaml":true},{"content":"A derived class must override this method.","nodes":[{"pos":[0,42],"content":"A derived class must override this method.","nodes":[{"content":"A derived class must override this method.","pos":[0,42]}]}],"pos":[37128,37171],"yaml":true},{"content":"Gets the name of the key exchange algorithm.","nodes":[{"pos":[0,44],"content":"Gets the name of the key exchange algorithm.","nodes":[{"content":"Gets the name of the key exchange algorithm.","pos":[0,44]}]}],"pos":[37895,37940],"yaml":true},{"content":"The default (non-overridden) implementation of this property returns the string \"ECDiffieHellman\".  \n  \n This property is inherited from the <xref:System.Security.Cryptography.AsymmetricAlgorithm> base class.","nodes":[{"pos":[0,98],"content":"The default (non-overridden) implementation of this property returns the string \"ECDiffieHellman\".","nodes":[{"content":"The default (non-overridden) implementation of this property returns the string \"ECDiffieHellman\".","pos":[0,98]}]},{"pos":[105,208],"content":"This property is inherited from the <xref:System.Security.Cryptography.AsymmetricAlgorithm> base class.","nodes":[{"content":"This property is inherited from the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.AsymmetricAlgorithm&gt;</ph> base class.","pos":[0,103],"source":"This property is inherited from the <xref:System.Security.Cryptography.AsymmetricAlgorithm> base class."}]}],"pos":[37951,38166],"yaml":true,"extradata":"MT"},{"content":"The name of the key exchange algorithm.","nodes":[{"pos":[0,39],"content":"The name of the key exchange algorithm.","nodes":[{"content":"The name of the key exchange algorithm.","pos":[0,39]}]}],"pos":[38299,38339],"yaml":true},{"content":"Gets the public key that is being used by the current Elliptic Curve Diffie-Hellman (ECDH) instance.","nodes":[{"pos":[0,100],"content":"Gets the public key that is being used by the current Elliptic Curve Diffie-Hellman (ECDH) instance.","nodes":[{"content":"Gets the public key that is being used by the current Elliptic Curve Diffie-Hellman (ECDH) instance.","pos":[0,100]}]}],"pos":[39436,39537],"yaml":true},{"content":"The public part of the ECDH key pair that is being used by this <xref href=\"System.Security.Cryptography.ECDiffieHellman\"></xref> instance.","nodes":[{"pos":[0,139],"content":"The public part of the ECDH key pair that is being used by this <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.ECDiffieHellman\"&gt;&lt;/xref&gt;</ph> instance.","source":"The public part of the ECDH key pair that is being used by this <xref href=\"System.Security.Cryptography.ECDiffieHellman\"></xref> instance."}],"pos":[39746,39886],"yaml":true},{"content":"Gets the name of the signature algorithm.","nodes":[{"pos":[0,41],"content":"Gets the name of the signature algorithm.","nodes":[{"content":"Gets the name of the signature algorithm.","pos":[0,41]}]}],"pos":[41026,41068],"yaml":true},{"content":"This property is inherited from the <xref:System.Security.Cryptography.AsymmetricAlgorithm> base class.  \n  \n The Elliptic Curve Diffie-Hellman (ECDH) algorithm is used for key derivation, not digital signature generation. Therefore, this property returns `null`.","nodes":[{"pos":[0,103],"content":"This property is inherited from the <xref:System.Security.Cryptography.AsymmetricAlgorithm> base class.","nodes":[{"content":"This property is inherited from the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.AsymmetricAlgorithm&gt;</ph> base class.","pos":[0,103],"source":"This property is inherited from the <xref:System.Security.Cryptography.AsymmetricAlgorithm> base class."}]},{"pos":[110,263],"content":"The Elliptic Curve Diffie-Hellman (ECDH) algorithm is used for key derivation, not digital signature generation. Therefore, this property returns `null`.","nodes":[{"content":"The Elliptic Curve Diffie-Hellman (ECDH) algorithm is used for key derivation, not digital signature generation.","pos":[0,112]},{"content":"Therefore, this property returns <ph id=\"ph1\">`null`</ph>.","pos":[113,153],"source":" Therefore, this property returns `null`."}]}],"pos":[41079,41347],"yaml":true,"extradata":"MT"},{"content":"Always `null`.","nodes":[{"pos":[0,14],"content":"Always <ph id=\"ph1\">`null`</ph>.","source":"Always `null`."}],"pos":[41478,41493],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.ECDiffieHellman\n  commentId: T:System.Security.Cryptography.ECDiffieHellman\n  id: ECDiffieHellman\n  children:\n  - System.Security.Cryptography.ECDiffieHellman.#ctor\n  - System.Security.Cryptography.ECDiffieHellman.Create\n  - System.Security.Cryptography.ECDiffieHellman.Create(System.Security.Cryptography.ECCurve)\n  - System.Security.Cryptography.ECDiffieHellman.Create(System.Security.Cryptography.ECParameters)\n  - System.Security.Cryptography.ECDiffieHellman.Create(System.String)\n  - System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])\n  - System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])\n  - System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[])\n  - System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)\n  - System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])\n  - System.Security.Cryptography.ECDiffieHellman.ExportExplicitParameters(System.Boolean)\n  - System.Security.Cryptography.ECDiffieHellman.ExportParameters(System.Boolean)\n  - System.Security.Cryptography.ECDiffieHellman.GenerateKey(System.Security.Cryptography.ECCurve)\n  - System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)\n  - System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm\n  - System.Security.Cryptography.ECDiffieHellman.PublicKey\n  - System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm\n  langs:\n  - csharp\n  name: ECDiffieHellman\n  nameWithType: ECDiffieHellman\n  fullName: System.Security.Cryptography.ECDiffieHellman\n  type: Class\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Provides an abstract base class that Elliptic Curve Diffie-Hellman (ECDH) algorithm implementations can derive from. This class provides the basic set of operations that all ECDH implementations must support.\n  remarks: This class serves as the abstract base class for ECDH implementations.\n  syntax:\n    content: 'public abstract class ECDiffieHellman : System.Security.Cryptography.AsymmetricAlgorithm'\n  inheritance:\n  - System.Object\n  - System.Security.Cryptography.AsymmetricAlgorithm\n  derivedClasses:\n  - System.Security.Cryptography.ECDiffieHellmanCng\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Security.Cryptography.AsymmetricAlgorithm.Clear\n  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)\n  - System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(System.String)\n  - System.Security.Cryptography.AsymmetricAlgorithm.KeySize\n  - System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue\n  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes\n  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue\n  - System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(System.Boolean)\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDiffieHellman.#ctor\n  commentId: M:System.Security.Cryptography.ECDiffieHellman.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.ECDiffieHellman\n  langs:\n  - csharp\n  name: ECDiffieHellman()\n  nameWithType: ECDiffieHellman.ECDiffieHellman()\n  fullName: ECDiffieHellman.ECDiffieHellman()\n  type: Constructor\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.ECDiffieHellman\"></xref> class.\n  remarks: This constructor is called by classes that derive from the <xref:System.Security.Cryptography.ECDiffieHellman> class. The <xref:System.Security.Cryptography.ECDiffieHellmanCng> class is the only implementation that is currently included in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]. For information about how to create a new implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm, see the <xref:System.Security.Cryptography.ECDiffieHellman.Create%2A> method.\n  syntax:\n    content: protected ECDiffieHellman ();\n    parameters: []\n  overload: System.Security.Cryptography.ECDiffieHellman.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDiffieHellman.Create\n  commentId: M:System.Security.Cryptography.ECDiffieHellman.Create\n  id: Create\n  parent: System.Security.Cryptography.ECDiffieHellman\n  langs:\n  - csharp\n  name: Create()\n  nameWithType: ECDiffieHellman.Create()\n  fullName: ECDiffieHellman.Create()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Creates a new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.\n  syntax:\n    content: public static System.Security.Cryptography.ECDiffieHellman Create ();\n    parameters: []\n    return:\n      type: System.Security.Cryptography.ECDiffieHellman\n      description: A new instance of the default implementation of this class.\n  overload: System.Security.Cryptography.ECDiffieHellman.Create*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDiffieHellman.Create(System.Security.Cryptography.ECCurve)\n  commentId: M:System.Security.Cryptography.ECDiffieHellman.Create(System.Security.Cryptography.ECCurve)\n  id: Create(System.Security.Cryptography.ECCurve)\n  parent: System.Security.Cryptography.ECDiffieHellman\n  langs:\n  - csharp\n  name: Create(ECCurve)\n  nameWithType: ECDiffieHellman.Create(ECCurve)\n  fullName: ECDiffieHellman.Create(ECCurve)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Creates a new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm with a new public/private key-pair generated over the specified curve.\n  remarks: \"curve must validate (that is, it must return true when passed to the <xref:System.Security.Cryptography.ECCurve.Validate%2A?displayProperty=fullName> method.  \\n  \\n Characteristic-2 curves are not supported on Windows.\"\n  syntax:\n    content: public static System.Security.Cryptography.ECDiffieHellman Create (System.Security.Cryptography.ECCurve curve);\n    parameters:\n    - id: curve\n      type: System.Security.Cryptography.ECCurve\n      description: The curve to use to generate a new public/private key-pair.\n    return:\n      type: System.Security.Cryptography.ECDiffieHellman\n      description: A new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.\n  overload: System.Security.Cryptography.ECDiffieHellman.Create*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: <code>curve</code> does not validate.\n  version:\n  - netframework-4.7\n  monikers:\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDiffieHellman.Create(System.Security.Cryptography.ECParameters)\n  commentId: M:System.Security.Cryptography.ECDiffieHellman.Create(System.Security.Cryptography.ECParameters)\n  id: Create(System.Security.Cryptography.ECParameters)\n  parent: System.Security.Cryptography.ECDiffieHellman\n  langs:\n  - csharp\n  name: Create(ECParameters)\n  nameWithType: ECDiffieHellman.Create(ECParameters)\n  fullName: ECDiffieHellman.Create(ECParameters)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Creates a new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm with the key described by the specified  <xref href=\"System.Security.Cryptography.ECParameters\"></xref> object.\n  remarks: \"`parameters` must validate (that is, it must return `true`) when passed to the <xref:System.Security.Cryptography.ECParameters.Validate%2A?displayProperty=fullName> method. Parameters over implicit curves are not supported.  \\n  \\n Characteristic-2 curves are not supported on Windows.\"\n  syntax:\n    content: public static System.Security.Cryptography.ECDiffieHellman Create (System.Security.Cryptography.ECParameters parameters);\n    parameters:\n    - id: parameters\n      type: System.Security.Cryptography.ECParameters\n      description: The parameters  for the elliptic curve cryptography (ECC) algorithm.\n    return:\n      type: System.Security.Cryptography.ECDiffieHellman\n      description: A new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.\n  overload: System.Security.Cryptography.ECDiffieHellman.Create*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: <code>parameters</code> does not validate.\n  version:\n  - netframework-4.7\n  monikers:\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDiffieHellman.Create(System.String)\n  commentId: M:System.Security.Cryptography.ECDiffieHellman.Create(System.String)\n  id: Create(System.String)\n  parent: System.Security.Cryptography.ECDiffieHellman\n  langs:\n  - csharp\n  name: Create(String)\n  nameWithType: ECDiffieHellman.Create(String)\n  fullName: ECDiffieHellman.Create(String)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Creates a new instance of the specified implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.\n  remarks: \"If you develop your own implementation of an <xref:System.Security.Cryptography.ECDiffieHellman> object, you can use the <xref:System.Security.Cryptography.ECDiffieHellman.Create%28System.String%29> method overload to create a custom `algorithm` string that specifies your implementation.  \\n  \\n The `algorithm` parameter specifies the name of an implementation of the ECDH algorithm. The following strings all refer to the same implementation, which is the only implementation currently supported in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]:  \\n  \\n-   \\\"ECDH\\\"  \\n  \\n-   \\\"ECDiffieHellman\\\"  \\n  \\n-   \\\"ECDiffieHellmanCng\\\"  \\n  \\n-   \\\"System.Security.Cryptography.ECDiffieHellmanCng\\\"  \\n  \\n You can also provide the name of a custom ECDH implementation for the `algorithm` parameter. If you do that, the <xref:System.Security.Cryptography.CryptoConfig> object will use it to determine whether an ECDH object can be created.\"\n  syntax:\n    content: public static System.Security.Cryptography.ECDiffieHellman Create (string algorithm);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: The name of an implementation of the ECDH algorithm.\n    return:\n      type: System.Security.Cryptography.ECDiffieHellman\n      description: A new instance of the specified implementation of this class. If the specified algorithm name does not map to an ECDH implementation, this method returns `null`.\n  overload: System.Security.Cryptography.ECDiffieHellman.Create*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>algorithm</code> parameter is `null`.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName)\n  commentId: M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName)\n  id: DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDiffieHellman\n  langs:\n  - csharp\n  name: DeriveKeyFromHash(ECDiffieHellmanPublicKey, HashAlgorithmName)\n  nameWithType: ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey, HashAlgorithmName)\n  fullName: ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey, HashAlgorithmName)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Derives bytes that can be used as a key using a hash function, given another party's public key and hash algorithm's name.\n  remarks: This overload calls the <xref:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash%2A> method passing `null` as the prepend and append values.\n  syntax:\n    content: public byte[] DeriveKeyFromHash (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: otherPartyPublicKey\n      type: System.Security.Cryptography.ECDiffieHellmanPublicKey\n      description: The other party's public key.\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: The hash algorithm  to use to derive the key material.\n    return:\n      type: System.Byte[]\n      description: The key material from the key exchange with the other party’s public key.\n  overload: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash*\n  exceptions: []\n  version:\n  - netframework-4.6.2\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.6.2\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])\n  commentId: M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])\n  id: DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.ECDiffieHellman\n  langs:\n  - csharp\n  name: DeriveKeyFromHash(ECDiffieHellmanPublicKey, HashAlgorithmName, Byte[], Byte[])\n  nameWithType: ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey, HashAlgorithmName, Byte[], Byte[])\n  fullName: ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey, HashAlgorithmName, Byte[], Byte[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: When implemented in a derived class, derives bytes that can be used as a key using a hash function, given another party's public key, hash algorithm's name, a prepend value and an append value.\n  syntax:\n    content: public virtual byte[] DeriveKeyFromHash (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] secretPrepend, byte[] secretAppend);\n    parameters:\n    - id: otherPartyPublicKey\n      type: System.Security.Cryptography.ECDiffieHellmanPublicKey\n      description: The other party's public key.\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: The hash algorithm  to use to derive the key material.\n    - id: secretPrepend\n      type: System.Byte[]\n      description: A value to prepend to the derived secret before hashing.\n    - id: secretAppend\n      type: System.Byte[]\n      description: A value to append to the derived secret before hashing.\n    return:\n      type: System.Byte[]\n      description: The key material from the key exchange with the other party’s public key.\n  overload: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: A derived class must override this method.\n  version:\n  - netframework-4.6.2\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.6.2\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])\n  commentId: M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])\n  id: DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.ECDiffieHellman\n  langs:\n  - csharp\n  name: DeriveKeyFromHmac(ECDiffieHellmanPublicKey, HashAlgorithmName, Byte[], Byte[], Byte[])\n  nameWithType: ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey, HashAlgorithmName, Byte[], Byte[], Byte[])\n  fullName: ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey, HashAlgorithmName, Byte[], Byte[], Byte[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: When implemented in a derived class, derives bytes that can be used as a key using a Hash-based Message Authentication Code (HMAC).\n  syntax:\n    content: public virtual byte[] DeriveKeyFromHmac (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] hmacKey, byte[] secretPrepend, byte[] secretAppend);\n    parameters:\n    - id: otherPartyPublicKey\n      type: System.Security.Cryptography.ECDiffieHellmanPublicKey\n      description: The other party's public key.\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: The hash algorithm to use to derive the key material.\n    - id: hmacKey\n      type: System.Byte[]\n      description: The key for the HMAC.\n    - id: secretPrepend\n      type: System.Byte[]\n      description: A value to prepend to the derived secret before hashing.\n    - id: secretAppend\n      type: System.Byte[]\n      description: A value to append to the derived secret before hashing.\n    return:\n      type: System.Byte[]\n      description: The key material from the key exchange with the other party’s public key.\n  overload: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: A derived class must override this method.\n  version:\n  - netframework-4.6.2\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.6.2\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[])\n  commentId: M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[])\n  id: DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[])\n  parent: System.Security.Cryptography.ECDiffieHellman\n  langs:\n  - csharp\n  name: DeriveKeyFromHmac(ECDiffieHellmanPublicKey, HashAlgorithmName, Byte[])\n  nameWithType: ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey, HashAlgorithmName, Byte[])\n  fullName: ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey, HashAlgorithmName, Byte[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Derives bytes that can be used as a key using a Hash-based Message Authentication Code (HMAC).\n  remarks: This overload calls the <xref:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac%2A> method passing `null` as the prepend and append values.\n  syntax:\n    content: public byte[] DeriveKeyFromHmac (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] hmacKey);\n    parameters:\n    - id: otherPartyPublicKey\n      type: System.Security.Cryptography.ECDiffieHellmanPublicKey\n      description: The other party's public key.\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: The hash algorithm to use to derive the key material.\n    - id: hmacKey\n      type: System.Byte[]\n      description: The key for the HMAC.\n    return:\n      type: System.Byte[]\n      description: The key material from the key exchange with the other party’s public key.\n  overload: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac*\n  exceptions: []\n  version:\n  - netframework-4.6.2\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.6.2\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)\n  commentId: M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)\n  id: DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)\n  parent: System.Security.Cryptography.ECDiffieHellman\n  langs:\n  - csharp\n  name: DeriveKeyMaterial(ECDiffieHellmanPublicKey)\n  nameWithType: ECDiffieHellman.DeriveKeyMaterial(ECDiffieHellmanPublicKey)\n  fullName: ECDiffieHellman.DeriveKeyMaterial(ECDiffieHellmanPublicKey)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Derives bytes that can be used as a key, given another party's public key.\n  remarks: For more information about public keys, see the <xref:System.Security.Cryptography.ECDiffieHellmanPublicKey> class.\n  syntax:\n    content: public virtual byte[] DeriveKeyMaterial (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey);\n    parameters:\n    - id: otherPartyPublicKey\n      type: System.Security.Cryptography.ECDiffieHellmanPublicKey\n      description: The other party's public key.\n    return:\n      type: System.Byte[]\n      description: The key material from the key exchange with the other party’s public key.\n  overload: System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])\n  commentId: M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])\n  id: DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.ECDiffieHellman\n  langs:\n  - csharp\n  name: DeriveKeyTls(ECDiffieHellmanPublicKey, Byte[], Byte[])\n  nameWithType: ECDiffieHellman.DeriveKeyTls(ECDiffieHellmanPublicKey, Byte[], Byte[])\n  fullName: ECDiffieHellman.DeriveKeyTls(ECDiffieHellmanPublicKey, Byte[], Byte[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: When implemented in a derived class, derives bytes that can be used as a key using a Transport Layer Security (TLS) Pseudo-Random Function (PRF) derivation algorithm.\n  syntax:\n    content: public virtual byte[] DeriveKeyTls (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, byte[] prfLabel, byte[] prfSeed);\n    parameters:\n    - id: otherPartyPublicKey\n      type: System.Security.Cryptography.ECDiffieHellmanPublicKey\n      description: The other party's public key.\n    - id: prfLabel\n      type: System.Byte[]\n      description: The ASCII-encoded PRF label.\n    - id: prfSeed\n      type: System.Byte[]\n      description: The 64-byte PRF seed.\n    return:\n      type: System.Byte[]\n      description: The key material from the key exchange with the other party’s public key.\n  overload: System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: A derived class must override this method.\n  version:\n  - netframework-4.6.2\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.6.2\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDiffieHellman.ExportExplicitParameters(System.Boolean)\n  commentId: M:System.Security.Cryptography.ECDiffieHellman.ExportExplicitParameters(System.Boolean)\n  id: ExportExplicitParameters(System.Boolean)\n  parent: System.Security.Cryptography.ECDiffieHellman\n  langs:\n  - csharp\n  name: ExportExplicitParameters(Boolean)\n  nameWithType: ECDiffieHellman.ExportExplicitParameters(Boolean)\n  fullName: ECDiffieHellman.ExportExplicitParameters(Boolean)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, exports either the public or the public and private key information using the explicit curve form from a working <xref href=\"System.Security.Cryptography.ECDiffieHellman\"></xref> key to an <xref href=\"System.Security.Cryptography.ECParameters\"></xref> structure so that it can be passed to the <xref href=\"System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)\"></xref> method.\n  syntax:\n    content: public virtual System.Security.Cryptography.ECParameters ExportExplicitParameters (bool includePrivateParameters);\n    parameters:\n    - id: includePrivateParameters\n      type: System.Boolean\n      description: '`true` to include private parameters; otherwise, `false`.'\n    return:\n      type: System.Security.Cryptography.ECParameters\n      description: An object that represents the point on the curve for this key, using the explicit curve format.\n  overload: System.Security.Cryptography.ECDiffieHellman.ExportExplicitParameters*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: A derived class must override this method.\n  version:\n  - netframework-4.7\n  monikers:\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDiffieHellman.ExportParameters(System.Boolean)\n  commentId: M:System.Security.Cryptography.ECDiffieHellman.ExportParameters(System.Boolean)\n  id: ExportParameters(System.Boolean)\n  parent: System.Security.Cryptography.ECDiffieHellman\n  langs:\n  - csharp\n  name: ExportParameters(Boolean)\n  nameWithType: ECDiffieHellman.ExportParameters(Boolean)\n  fullName: ECDiffieHellman.ExportParameters(Boolean)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, exports either the public or the public and private key information from a working <xref href=\"System.Security.Cryptography.ECDiffieHellman\"></xref> key to an <xref href=\"System.Security.Cryptography.ECParameters\"></xref> structure so that it can be passed to the <xref href=\"System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)\"></xref> method.\n  remarks: If the curve has a name, the <xref:System.Security.Cryptography.ECParameters.Curve> property contains named curve parameters; otherwise, it will contain explicit parameters.\n  syntax:\n    content: public virtual System.Security.Cryptography.ECParameters ExportParameters (bool includePrivateParameters);\n    parameters:\n    - id: includePrivateParameters\n      type: System.Boolean\n      description: '`true` to include private parameters; otehrwise,  `false` to include public parameters only.'\n    return:\n      type: System.Security.Cryptography.ECParameters\n      description: An object that represents the point on the curve for this key. It can be passed to the <xref href=\"System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)\"></xref> method.\n  overload: System.Security.Cryptography.ECDiffieHellman.ExportParameters*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: A derived class must override this method.\n  version:\n  - netframework-4.7\n  monikers:\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDiffieHellman.GenerateKey(System.Security.Cryptography.ECCurve)\n  commentId: M:System.Security.Cryptography.ECDiffieHellman.GenerateKey(System.Security.Cryptography.ECCurve)\n  id: GenerateKey(System.Security.Cryptography.ECCurve)\n  parent: System.Security.Cryptography.ECDiffieHellman\n  langs:\n  - csharp\n  name: GenerateKey(ECCurve)\n  nameWithType: ECDiffieHellman.GenerateKey(ECCurve)\n  fullName: ECDiffieHellman.GenerateKey(ECCurve)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, generates a new ephemeral public/private key pair for the specified curve.\n  remarks: \"`curve` must validate (that is, it must return `true`) when passed to the <xref:System.Security.Cryptography.ECCurve.Validate%2A?displayProperty=fullName> method) and must not be implicit.  \\n  \\n Characteristic-2 curves are not supported on Windows.\"\n  syntax:\n    content: public virtual void GenerateKey (System.Security.Cryptography.ECCurve curve);\n    parameters:\n    - id: curve\n      type: System.Security.Cryptography.ECCurve\n      description: The curve used to generate an ephemeral public/private key pair.\n  overload: System.Security.Cryptography.ECDiffieHellman.GenerateKey*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: <code>curve</code> does not validate.\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: A derived class must override this method.\n  version:\n  - netframework-4.7\n  monikers:\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)\n  commentId: M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)\n  id: ImportParameters(System.Security.Cryptography.ECParameters)\n  parent: System.Security.Cryptography.ECDiffieHellman\n  langs:\n  - csharp\n  name: ImportParameters(ECParameters)\n  nameWithType: ECDiffieHellman.ImportParameters(ECParameters)\n  fullName: ECDiffieHellman.ImportParameters(ECParameters)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, imports the specified parameters for an <xref href=\"System.Security.Cryptography.ECCurve\"></xref> as an ephemeral key into the current <xref href=\"System.Security.Cryptography.ECDiffieHellman\"></xref> object.\n  remarks: \"`parameters` must validate (that is, it must return `true`) when passed to the <xref:System.Security.Cryptography.ECParameters.Validate%2A?displayProperty=fullName> method. Parameters over implicit curves are not supported.  \\n  \\n Characteristic-2 curves are not supported on Windows.\"\n  syntax:\n    content: public virtual void ImportParameters (System.Security.Cryptography.ECParameters parameters);\n    parameters:\n    - id: parameters\n      type: System.Security.Cryptography.ECParameters\n      description: The curve's parameters to import.\n  overload: System.Security.Cryptography.ECDiffieHellman.ImportParameters*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: <code>parameters</code> does not validate.\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: A derived class must override this method.\n  version:\n  - netframework-4.7\n  monikers:\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm\n  commentId: P:System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm\n  id: KeyExchangeAlgorithm\n  parent: System.Security.Cryptography.ECDiffieHellman\n  langs:\n  - csharp\n  name: KeyExchangeAlgorithm\n  nameWithType: ECDiffieHellman.KeyExchangeAlgorithm\n  fullName: ECDiffieHellman.KeyExchangeAlgorithm\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Gets the name of the key exchange algorithm.\n  remarks: \"The default (non-overridden) implementation of this property returns the string \\\"ECDiffieHellman\\\".  \\n  \\n This property is inherited from the <xref:System.Security.Cryptography.AsymmetricAlgorithm> base class.\"\n  syntax:\n    content: public override string KeyExchangeAlgorithm { get; }\n    return:\n      type: System.String\n      description: The name of the key exchange algorithm.\n  overload: System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDiffieHellman.PublicKey\n  commentId: P:System.Security.Cryptography.ECDiffieHellman.PublicKey\n  id: PublicKey\n  parent: System.Security.Cryptography.ECDiffieHellman\n  langs:\n  - csharp\n  name: PublicKey\n  nameWithType: ECDiffieHellman.PublicKey\n  fullName: ECDiffieHellman.PublicKey\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Gets the public key that is being used by the current Elliptic Curve Diffie-Hellman (ECDH) instance.\n  syntax:\n    content: public abstract System.Security.Cryptography.ECDiffieHellmanPublicKey PublicKey { get; }\n    return:\n      type: System.Security.Cryptography.ECDiffieHellmanPublicKey\n      description: The public part of the ECDH key pair that is being used by this <xref href=\"System.Security.Cryptography.ECDiffieHellman\"></xref> instance.\n  overload: System.Security.Cryptography.ECDiffieHellman.PublicKey*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm\n  commentId: P:System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm\n  id: SignatureAlgorithm\n  parent: System.Security.Cryptography.ECDiffieHellman\n  langs:\n  - csharp\n  name: SignatureAlgorithm\n  nameWithType: ECDiffieHellman.SignatureAlgorithm\n  fullName: ECDiffieHellman.SignatureAlgorithm\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Gets the name of the signature algorithm.\n  remarks: \"This property is inherited from the <xref:System.Security.Cryptography.AsymmetricAlgorithm> base class.  \\n  \\n The Elliptic Curve Diffie-Hellman (ECDH) algorithm is used for key derivation, not digital signature generation. Therefore, this property returns `null`.\"\n  syntax:\n    content: public override string SignatureAlgorithm { get; }\n    return:\n      type: System.String\n      description: Always `null`.\n  overload: System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Security.Cryptography.AsymmetricAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: AsymmetricAlgorithm\n  nameWithType: AsymmetricAlgorithm\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm\n- uid: System.Security.Cryptography.CryptographicException\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CryptographicException\n  nameWithType: CryptographicException\n  fullName: System.Security.Cryptography.CryptographicException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.NotImplementedException\n  parent: System\n  isExternal: false\n  name: NotImplementedException\n  nameWithType: NotImplementedException\n  fullName: System.NotImplementedException\n- uid: System.Security.Cryptography.ECDiffieHellman.#ctor\n  parent: System.Security.Cryptography.ECDiffieHellman\n  isExternal: false\n  name: ECDiffieHellman()\n  nameWithType: ECDiffieHellman.ECDiffieHellman()\n  fullName: ECDiffieHellman.ECDiffieHellman()\n- uid: System.Security.Cryptography.ECDiffieHellman.Create\n  parent: System.Security.Cryptography.ECDiffieHellman\n  isExternal: false\n  name: Create()\n  nameWithType: ECDiffieHellman.Create()\n  fullName: ECDiffieHellman.Create()\n- uid: System.Security.Cryptography.ECDiffieHellman\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ECDiffieHellman\n  nameWithType: ECDiffieHellman\n  fullName: System.Security.Cryptography.ECDiffieHellman\n- uid: System.Security.Cryptography.ECDiffieHellman.Create(System.Security.Cryptography.ECCurve)\n  parent: System.Security.Cryptography.ECDiffieHellman\n  isExternal: false\n  name: Create(ECCurve)\n  nameWithType: ECDiffieHellman.Create(ECCurve)\n  fullName: ECDiffieHellman.Create(ECCurve)\n- uid: System.Security.Cryptography.ECCurve\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ECCurve\n  nameWithType: ECCurve\n  fullName: System.Security.Cryptography.ECCurve\n- uid: System.Security.Cryptography.ECDiffieHellman.Create(System.Security.Cryptography.ECParameters)\n  parent: System.Security.Cryptography.ECDiffieHellman\n  isExternal: false\n  name: Create(ECParameters)\n  nameWithType: ECDiffieHellman.Create(ECParameters)\n  fullName: ECDiffieHellman.Create(ECParameters)\n- uid: System.Security.Cryptography.ECParameters\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ECParameters\n  nameWithType: ECParameters\n  fullName: System.Security.Cryptography.ECParameters\n- uid: System.Security.Cryptography.ECDiffieHellman.Create(System.String)\n  parent: System.Security.Cryptography.ECDiffieHellman\n  isExternal: false\n  name: Create(String)\n  nameWithType: ECDiffieHellman.Create(String)\n  fullName: ECDiffieHellman.Create(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDiffieHellman\n  isExternal: false\n  name: DeriveKeyFromHash(ECDiffieHellmanPublicKey, HashAlgorithmName)\n  nameWithType: ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey, HashAlgorithmName)\n  fullName: ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey, HashAlgorithmName)\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.Cryptography.ECDiffieHellmanPublicKey\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ECDiffieHellmanPublicKey\n  nameWithType: ECDiffieHellmanPublicKey\n  fullName: System.Security.Cryptography.ECDiffieHellmanPublicKey\n- uid: System.Security.Cryptography.HashAlgorithmName\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithmName\n  nameWithType: HashAlgorithmName\n  fullName: System.Security.Cryptography.HashAlgorithmName\n- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.ECDiffieHellman\n  isExternal: false\n  name: DeriveKeyFromHash(ECDiffieHellmanPublicKey, HashAlgorithmName, Byte[], Byte[])\n  nameWithType: ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey, HashAlgorithmName, Byte[], Byte[])\n  fullName: ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey, HashAlgorithmName, Byte[], Byte[])\n- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.ECDiffieHellman\n  isExternal: false\n  name: DeriveKeyFromHmac(ECDiffieHellmanPublicKey, HashAlgorithmName, Byte[], Byte[], Byte[])\n  nameWithType: ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey, HashAlgorithmName, Byte[], Byte[], Byte[])\n  fullName: ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey, HashAlgorithmName, Byte[], Byte[], Byte[])\n- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[])\n  parent: System.Security.Cryptography.ECDiffieHellman\n  isExternal: false\n  name: DeriveKeyFromHmac(ECDiffieHellmanPublicKey, HashAlgorithmName, Byte[])\n  nameWithType: ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey, HashAlgorithmName, Byte[])\n  fullName: ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey, HashAlgorithmName, Byte[])\n- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)\n  parent: System.Security.Cryptography.ECDiffieHellman\n  isExternal: false\n  name: DeriveKeyMaterial(ECDiffieHellmanPublicKey)\n  nameWithType: ECDiffieHellman.DeriveKeyMaterial(ECDiffieHellmanPublicKey)\n  fullName: ECDiffieHellman.DeriveKeyMaterial(ECDiffieHellmanPublicKey)\n- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.ECDiffieHellman\n  isExternal: false\n  name: DeriveKeyTls(ECDiffieHellmanPublicKey, Byte[], Byte[])\n  nameWithType: ECDiffieHellman.DeriveKeyTls(ECDiffieHellmanPublicKey, Byte[], Byte[])\n  fullName: ECDiffieHellman.DeriveKeyTls(ECDiffieHellmanPublicKey, Byte[], Byte[])\n- uid: System.Security.Cryptography.ECDiffieHellman.ExportExplicitParameters(System.Boolean)\n  parent: System.Security.Cryptography.ECDiffieHellman\n  isExternal: false\n  name: ExportExplicitParameters(Boolean)\n  nameWithType: ECDiffieHellman.ExportExplicitParameters(Boolean)\n  fullName: ECDiffieHellman.ExportExplicitParameters(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.ECDiffieHellman.ExportParameters(System.Boolean)\n  parent: System.Security.Cryptography.ECDiffieHellman\n  isExternal: false\n  name: ExportParameters(Boolean)\n  nameWithType: ECDiffieHellman.ExportParameters(Boolean)\n  fullName: ECDiffieHellman.ExportParameters(Boolean)\n- uid: System.Security.Cryptography.ECDiffieHellman.GenerateKey(System.Security.Cryptography.ECCurve)\n  parent: System.Security.Cryptography.ECDiffieHellman\n  isExternal: false\n  name: GenerateKey(ECCurve)\n  nameWithType: ECDiffieHellman.GenerateKey(ECCurve)\n  fullName: ECDiffieHellman.GenerateKey(ECCurve)\n- uid: System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)\n  parent: System.Security.Cryptography.ECDiffieHellman\n  isExternal: false\n  name: ImportParameters(ECParameters)\n  nameWithType: ECDiffieHellman.ImportParameters(ECParameters)\n  fullName: ECDiffieHellman.ImportParameters(ECParameters)\n- uid: System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm\n  parent: System.Security.Cryptography.ECDiffieHellman\n  isExternal: false\n  name: KeyExchangeAlgorithm\n  nameWithType: ECDiffieHellman.KeyExchangeAlgorithm\n  fullName: ECDiffieHellman.KeyExchangeAlgorithm\n- uid: System.Security.Cryptography.ECDiffieHellman.PublicKey\n  parent: System.Security.Cryptography.ECDiffieHellman\n  isExternal: false\n  name: PublicKey\n  nameWithType: ECDiffieHellman.PublicKey\n  fullName: ECDiffieHellman.PublicKey\n- uid: System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm\n  parent: System.Security.Cryptography.ECDiffieHellman\n  isExternal: false\n  name: SignatureAlgorithm\n  nameWithType: ECDiffieHellman.SignatureAlgorithm\n  fullName: ECDiffieHellman.SignatureAlgorithm\n- uid: System.Security.Cryptography.ECDiffieHellman.#ctor*\n  parent: System.Security.Cryptography.ECDiffieHellman\n  isExternal: false\n  name: ECDiffieHellman\n  nameWithType: ECDiffieHellman.ECDiffieHellman\n  fullName: ECDiffieHellman.ECDiffieHellman\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml\n- uid: System.Security.Cryptography.ECDiffieHellman.Create*\n  parent: System.Security.Cryptography.ECDiffieHellman\n  isExternal: false\n  name: Create\n  nameWithType: ECDiffieHellman.Create\n  fullName: ECDiffieHellman.Create\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml\n- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash*\n  parent: System.Security.Cryptography.ECDiffieHellman\n  isExternal: false\n  name: DeriveKeyFromHash\n  nameWithType: ECDiffieHellman.DeriveKeyFromHash\n  fullName: ECDiffieHellman.DeriveKeyFromHash\n  monikers:\n  - netframework-4.6.2\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml\n- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac*\n  parent: System.Security.Cryptography.ECDiffieHellman\n  isExternal: false\n  name: DeriveKeyFromHmac\n  nameWithType: ECDiffieHellman.DeriveKeyFromHmac\n  fullName: ECDiffieHellman.DeriveKeyFromHmac\n  monikers:\n  - netframework-4.6.2\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml\n- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial*\n  parent: System.Security.Cryptography.ECDiffieHellman\n  isExternal: false\n  name: DeriveKeyMaterial\n  nameWithType: ECDiffieHellman.DeriveKeyMaterial\n  fullName: ECDiffieHellman.DeriveKeyMaterial\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml\n- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls*\n  parent: System.Security.Cryptography.ECDiffieHellman\n  isExternal: false\n  name: DeriveKeyTls\n  nameWithType: ECDiffieHellman.DeriveKeyTls\n  fullName: ECDiffieHellman.DeriveKeyTls\n  monikers:\n  - netframework-4.6.2\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml\n- uid: System.Security.Cryptography.ECDiffieHellman.ExportExplicitParameters*\n  parent: System.Security.Cryptography.ECDiffieHellman\n  isExternal: false\n  name: ExportExplicitParameters\n  nameWithType: ECDiffieHellman.ExportExplicitParameters\n  fullName: ECDiffieHellman.ExportExplicitParameters\n  monikers:\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml\n- uid: System.Security.Cryptography.ECDiffieHellman.ExportParameters*\n  parent: System.Security.Cryptography.ECDiffieHellman\n  isExternal: false\n  name: ExportParameters\n  nameWithType: ECDiffieHellman.ExportParameters\n  fullName: ECDiffieHellman.ExportParameters\n  monikers:\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml\n- uid: System.Security.Cryptography.ECDiffieHellman.GenerateKey*\n  parent: System.Security.Cryptography.ECDiffieHellman\n  isExternal: false\n  name: GenerateKey\n  nameWithType: ECDiffieHellman.GenerateKey\n  fullName: ECDiffieHellman.GenerateKey\n  monikers:\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml\n- uid: System.Security.Cryptography.ECDiffieHellman.ImportParameters*\n  parent: System.Security.Cryptography.ECDiffieHellman\n  isExternal: false\n  name: ImportParameters\n  nameWithType: ECDiffieHellman.ImportParameters\n  fullName: ECDiffieHellman.ImportParameters\n  monikers:\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml\n- uid: System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm*\n  parent: System.Security.Cryptography.ECDiffieHellman\n  isExternal: false\n  name: KeyExchangeAlgorithm\n  nameWithType: ECDiffieHellman.KeyExchangeAlgorithm\n  fullName: ECDiffieHellman.KeyExchangeAlgorithm\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml\n- uid: System.Security.Cryptography.ECDiffieHellman.PublicKey*\n  parent: System.Security.Cryptography.ECDiffieHellman\n  isExternal: false\n  name: PublicKey\n  nameWithType: ECDiffieHellman.PublicKey\n  fullName: ECDiffieHellman.PublicKey\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml\n- uid: System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm*\n  parent: System.Security.Cryptography.ECDiffieHellman\n  isExternal: false\n  name: SignatureAlgorithm\n  nameWithType: ECDiffieHellman.SignatureAlgorithm\n  fullName: ECDiffieHellman.SignatureAlgorithm\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.Clear\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: Clear()\n  nameWithType: AsymmetricAlgorithm.Clear()\n  fullName: AsymmetricAlgorithm.Clear()\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: Dispose()\n  nameWithType: AsymmetricAlgorithm.Dispose()\n  fullName: AsymmetricAlgorithm.Dispose()\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: AsymmetricAlgorithm.Dispose(Boolean)\n  fullName: AsymmetricAlgorithm.Dispose(Boolean)\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(System.String)\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: FromXmlString(String)\n  nameWithType: AsymmetricAlgorithm.FromXmlString(String)\n  fullName: AsymmetricAlgorithm.FromXmlString(String)\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySize\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: KeySize\n  nameWithType: AsymmetricAlgorithm.KeySize\n  fullName: AsymmetricAlgorithm.KeySize\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: KeySizeValue\n  nameWithType: AsymmetricAlgorithm.KeySizeValue\n  fullName: AsymmetricAlgorithm.KeySizeValue\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: LegalKeySizes\n  nameWithType: AsymmetricAlgorithm.LegalKeySizes\n  fullName: AsymmetricAlgorithm.LegalKeySizes\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: LegalKeySizesValue\n  nameWithType: AsymmetricAlgorithm.LegalKeySizesValue\n  fullName: AsymmetricAlgorithm.LegalKeySizesValue\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(System.Boolean)\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: ToXmlString(Boolean)\n  nameWithType: AsymmetricAlgorithm.ToXmlString(Boolean)\n  fullName: AsymmetricAlgorithm.ToXmlString(Boolean)\n"}