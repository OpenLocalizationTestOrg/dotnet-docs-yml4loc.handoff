{"nodes":[{"content":"Allows an object to control its own serialization and deserialization.","nodes":[{"pos":[0,70],"content":"Allows an object to control its own serialization and deserialization.","nodes":[{"content":"Allows an object to control its own serialization and deserialization.","pos":[0,70]}]}],"pos":[635,706],"yaml":true},{"content":"Any class that might be serialized must be marked with the <xref:System.SerializableAttribute>. If a class needs to control its serialization process, it can implement the <xref:System.Runtime.Serialization.ISerializable> interface. The <xref:System.Runtime.Serialization.Formatter> calls the <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> at serialization time and populates the supplied <xref:System.Runtime.Serialization.SerializationInfo> with all the data required to represent the object. The <xref:System.Runtime.Serialization.Formatter> creates a <xref:System.Runtime.Serialization.SerializationInfo> with the type of the object in the graph. Objects that need to send proxies for themselves can use the <xref:System.Runtime.Serialization.SerializationInfo.FullTypeName%2A> and <xref:System.Runtime.Serialization.SerializationInfo.AssemblyName%2A> methods on <xref:System.Runtime.Serialization.SerializationInfo> to change the transmitted information.  \n  \n In the case of class inheritance, it is possible to serialize a class that derives from a base class that implements <xref:System.Runtime.Serialization.ISerializable>. In this case, the derived class should call the base class implementation of <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> inside its implementation of <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>. Otherwise, the data from the base class will not be serialized.  \n  \n The <xref:System.Runtime.Serialization.ISerializable> interface implies a constructor with the signature constructor (<xref:System.Runtime.Serialization.SerializationInfo> information, <xref:System.Runtime.Serialization.StreamingContext> context). At deserialization time, the current constructor is called only after the data in the <xref:System.Runtime.Serialization.SerializationInfo> has been deserialized by the formatter. In general, this constructor should be protected if the class is not sealed.  \n  \n The order in which objects are deserialized cannot be guaranteed. For example, if one type references a type that has not been deserialized yet, an exception will occur. If you are creating types that have such dependencies, you can work around the problem by implementing the `IDeserializationCallback` interface and the `OnDeserialization` method.  \n  \n The serialization architecture handles object types that extend <xref:System.MarshalByRefObject> the same as types that extend <xref:System.Object>. These types can be marked with the <xref:System.SerializableAttribute> and implement the <xref:System.Runtime.Serialization.ISerializable> interface as any other object type. Their object state will be captured and persisted onto the stream.  \n  \n When these types are being used through <xref:System.Runtime.Remoting>, the remoting infrastructure provides a surrogate that preempts typical serialization and instead serializes a proxy to the <xref:System.MarshalByRefObject>. A surrogate is a helper that knows how to serialize and deserialize objects of a particular type. The proxy, invisible to the user in most cases, will be of type <xref:System.Runtime.Remoting.ObjRef>.  \n  \n As a general design pattern, it would be unusual for a class to be both marked with the serializable attribute and extend <xref:System.MarshalByRefObject>. Developers should think carefully about the possible serialization and remoting scenarios when combining these two characteristics. One example where this might be applicable is with a <xref:System.IO.MemoryStream>. While the base class of <xref:System.IO.MemoryStream> (<xref:System.IO.Stream>) extends from <xref:System.MarshalByRefObject>, it is possible to capture the state of a <xref:System.IO.MemoryStream> and restore it at will. It might, therefore, be meaningful to serialize the state of this stream into a database and restore it at some later point in time. However, when used through remoting, an object of this type would be proxied.  \n  \n For more information about serialization of classes that extend <xref:System.MarshalByRefObject>, see <xref:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector>. For more information about implementing <xref:System.Runtime.Serialization.ISerializable>, see [Custom Serialization](~/docs/framework/serialization/custom-serialization.md).","nodes":[{"pos":[0,979],"content":"Any class that might be serialized must be marked with the <xref:System.SerializableAttribute>. If a class needs to control its serialization process, it can implement the <xref:System.Runtime.Serialization.ISerializable> interface. The <xref:System.Runtime.Serialization.Formatter> calls the <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> at serialization time and populates the supplied <xref:System.Runtime.Serialization.SerializationInfo> with all the data required to represent the object. The <xref:System.Runtime.Serialization.Formatter> creates a <xref:System.Runtime.Serialization.SerializationInfo> with the type of the object in the graph. Objects that need to send proxies for themselves can use the <xref:System.Runtime.Serialization.SerializationInfo.FullTypeName%2A> and <xref:System.Runtime.Serialization.SerializationInfo.AssemblyName%2A> methods on <xref:System.Runtime.Serialization.SerializationInfo> to change the transmitted information.","nodes":[{"content":"Any class that might be serialized must be marked with the <xref:System.SerializableAttribute>. If a class needs to control its serialization process, it can implement the <xref:System.Runtime.Serialization.ISerializable> interface. The <xref:System.Runtime.Serialization.Formatter> calls the <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> at serialization time and populates the supplied <xref:System.Runtime.Serialization.SerializationInfo> with all the data required to represent the object. The <xref:System.Runtime.Serialization.Formatter> creates a <xref:System.Runtime.Serialization.SerializationInfo> with the type of the object in the graph. Objects that need to send proxies for themselves can use the <xref:System.Runtime.Serialization.SerializationInfo.FullTypeName%2A> and <xref:System.Runtime.Serialization.SerializationInfo.AssemblyName%2A> methods on <xref:System.Runtime.Serialization.SerializationInfo> to change the transmitted information.","pos":[0,979],"nodes":[{"content":"Any class that might be serialized must be marked with the <ph id=\"ph1\">&lt;xref:System.SerializableAttribute&gt;</ph>.","pos":[0,95],"source":"Any class that might be serialized must be marked with the <xref:System.SerializableAttribute>."},{"content":"If a class needs to control its serialization process, it can implement the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph> interface.","pos":[96,232],"source":" If a class needs to control its serialization process, it can implement the <xref:System.Runtime.Serialization.ISerializable> interface."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.Formatter&gt;</ph> calls the <ph id=\"ph2\">&lt;xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A&gt;</ph> at serialization time and populates the supplied <ph id=\"ph3\">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> with all the data required to represent the object.","pos":[233,514],"source":" The <xref:System.Runtime.Serialization.Formatter> calls the <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> at serialization time and populates the supplied <xref:System.Runtime.Serialization.SerializationInfo> with all the data required to represent the object."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.Formatter&gt;</ph> creates a <ph id=\"ph2\">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> with the type of the object in the graph.","pos":[515,670],"source":" The <xref:System.Runtime.Serialization.Formatter> creates a <xref:System.Runtime.Serialization.SerializationInfo> with the type of the object in the graph."},{"content":"Objects that need to send proxies for themselves can use the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.SerializationInfo.FullTypeName%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Runtime.Serialization.SerializationInfo.AssemblyName%2A&gt;</ph> methods on <ph id=\"ph3\">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> to change the transmitted information.","pos":[671,979],"source":" Objects that need to send proxies for themselves can use the <xref:System.Runtime.Serialization.SerializationInfo.FullTypeName%2A> and <xref:System.Runtime.Serialization.SerializationInfo.AssemblyName%2A> methods on <xref:System.Runtime.Serialization.SerializationInfo> to change the transmitted information."}]}]},{"pos":[986,1458],"content":"In the case of class inheritance, it is possible to serialize a class that derives from a base class that implements <xref:System.Runtime.Serialization.ISerializable>. In this case, the derived class should call the base class implementation of <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> inside its implementation of <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>. Otherwise, the data from the base class will not be serialized.","nodes":[{"content":"In the case of class inheritance, it is possible to serialize a class that derives from a base class that implements <xref:System.Runtime.Serialization.ISerializable>. In this case, the derived class should call the base class implementation of <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> inside its implementation of <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>. Otherwise, the data from the base class will not be serialized.","pos":[0,472],"nodes":[{"content":"In the case of class inheritance, it is possible to serialize a class that derives from a base class that implements <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph>.","pos":[0,167],"source":"In the case of class inheritance, it is possible to serialize a class that derives from a base class that implements <xref:System.Runtime.Serialization.ISerializable>."},{"content":"In this case, the derived class should call the base class implementation of <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A&gt;</ph> inside its implementation of <ph id=\"ph2\">&lt;xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A&gt;</ph>.","pos":[168,408],"source":" In this case, the derived class should call the base class implementation of <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> inside its implementation of <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>."},{"content":"Otherwise, the data from the base class will not be serialized.","pos":[409,472]}]}]},{"pos":[1465,1969],"content":"The <xref:System.Runtime.Serialization.ISerializable> interface implies a constructor with the signature constructor (<xref:System.Runtime.Serialization.SerializationInfo> information, <xref:System.Runtime.Serialization.StreamingContext> context). At deserialization time, the current constructor is called only after the data in the <xref:System.Runtime.Serialization.SerializationInfo> has been deserialized by the formatter. In general, this constructor should be protected if the class is not sealed.","nodes":[{"content":"The <xref:System.Runtime.Serialization.ISerializable> interface implies a constructor with the signature constructor (<xref:System.Runtime.Serialization.SerializationInfo> information, <xref:System.Runtime.Serialization.StreamingContext> context). At deserialization time, the current constructor is called only after the data in the <xref:System.Runtime.Serialization.SerializationInfo> has been deserialized by the formatter. In general, this constructor should be protected if the class is not sealed.","pos":[0,504],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph> interface implies a constructor with the signature constructor (<ph id=\"ph2\">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> information, <ph id=\"ph3\">&lt;xref:System.Runtime.Serialization.StreamingContext&gt;</ph> context).","pos":[0,247],"source":"The <xref:System.Runtime.Serialization.ISerializable> interface implies a constructor with the signature constructor (<xref:System.Runtime.Serialization.SerializationInfo> information, <xref:System.Runtime.Serialization.StreamingContext> context)."},{"content":"At deserialization time, the current constructor is called only after the data in the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> has been deserialized by the formatter.","pos":[248,427],"source":" At deserialization time, the current constructor is called only after the data in the <xref:System.Runtime.Serialization.SerializationInfo> has been deserialized by the formatter."},{"content":"In general, this constructor should be protected if the class is not sealed.","pos":[428,504]}]}]},{"pos":[1976,2325],"content":"The order in which objects are deserialized cannot be guaranteed. For example, if one type references a type that has not been deserialized yet, an exception will occur. If you are creating types that have such dependencies, you can work around the problem by implementing the `IDeserializationCallback` interface and the `OnDeserialization` method.","nodes":[{"content":"The order in which objects are deserialized cannot be guaranteed.","pos":[0,65]},{"content":"For example, if one type references a type that has not been deserialized yet, an exception will occur.","pos":[66,169]},{"content":"If you are creating types that have such dependencies, you can work around the problem by implementing the <ph id=\"ph1\">`IDeserializationCallback`</ph> interface and the <ph id=\"ph2\">`OnDeserialization`</ph> method.","pos":[170,349],"source":" If you are creating types that have such dependencies, you can work around the problem by implementing the `IDeserializationCallback` interface and the `OnDeserialization` method."}]},{"pos":[2332,2722],"content":"The serialization architecture handles object types that extend <xref:System.MarshalByRefObject> the same as types that extend <xref:System.Object>. These types can be marked with the <xref:System.SerializableAttribute> and implement the <xref:System.Runtime.Serialization.ISerializable> interface as any other object type. Their object state will be captured and persisted onto the stream.","nodes":[{"content":"The serialization architecture handles object types that extend <xref:System.MarshalByRefObject> the same as types that extend <xref:System.Object>. These types can be marked with the <xref:System.SerializableAttribute> and implement the <xref:System.Runtime.Serialization.ISerializable> interface as any other object type. Their object state will be captured and persisted onto the stream.","pos":[0,390],"nodes":[{"content":"The serialization architecture handles object types that extend <ph id=\"ph1\">&lt;xref:System.MarshalByRefObject&gt;</ph> the same as types that extend <ph id=\"ph2\">&lt;xref:System.Object&gt;</ph>.","pos":[0,148],"source":"The serialization architecture handles object types that extend <xref:System.MarshalByRefObject> the same as types that extend <xref:System.Object>."},{"content":"These types can be marked with the <ph id=\"ph1\">&lt;xref:System.SerializableAttribute&gt;</ph> and implement the <ph id=\"ph2\">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph> interface as any other object type.","pos":[149,323],"source":" These types can be marked with the <xref:System.SerializableAttribute> and implement the <xref:System.Runtime.Serialization.ISerializable> interface as any other object type."},{"content":"Their object state will be captured and persisted onto the stream.","pos":[324,390]}]}]},{"pos":[2729,3158],"content":"When these types are being used through <xref:System.Runtime.Remoting>, the remoting infrastructure provides a surrogate that preempts typical serialization and instead serializes a proxy to the <xref:System.MarshalByRefObject>. A surrogate is a helper that knows how to serialize and deserialize objects of a particular type. The proxy, invisible to the user in most cases, will be of type <xref:System.Runtime.Remoting.ObjRef>.","nodes":[{"content":"When these types are being used through <xref:System.Runtime.Remoting>, the remoting infrastructure provides a surrogate that preempts typical serialization and instead serializes a proxy to the <xref:System.MarshalByRefObject>. A surrogate is a helper that knows how to serialize and deserialize objects of a particular type. The proxy, invisible to the user in most cases, will be of type <xref:System.Runtime.Remoting.ObjRef>.","pos":[0,429],"nodes":[{"content":"When these types are being used through <ph id=\"ph1\">&lt;xref:System.Runtime.Remoting&gt;</ph>, the remoting infrastructure provides a surrogate that preempts typical serialization and instead serializes a proxy to the <ph id=\"ph2\">&lt;xref:System.MarshalByRefObject&gt;</ph>.","pos":[0,228],"source":"When these types are being used through <xref:System.Runtime.Remoting>, the remoting infrastructure provides a surrogate that preempts typical serialization and instead serializes a proxy to the <xref:System.MarshalByRefObject>."},{"content":"A surrogate is a helper that knows how to serialize and deserialize objects of a particular type.","pos":[229,326]},{"content":"The proxy, invisible to the user in most cases, will be of type <ph id=\"ph1\">&lt;xref:System.Runtime.Remoting.ObjRef&gt;</ph>.","pos":[327,429],"source":" The proxy, invisible to the user in most cases, will be of type <xref:System.Runtime.Remoting.ObjRef>."}]}]},{"pos":[3165,3969],"content":"As a general design pattern, it would be unusual for a class to be both marked with the serializable attribute and extend <xref:System.MarshalByRefObject>. Developers should think carefully about the possible serialization and remoting scenarios when combining these two characteristics. One example where this might be applicable is with a <xref:System.IO.MemoryStream>. While the base class of <xref:System.IO.MemoryStream> (<xref:System.IO.Stream>) extends from <xref:System.MarshalByRefObject>, it is possible to capture the state of a <xref:System.IO.MemoryStream> and restore it at will. It might, therefore, be meaningful to serialize the state of this stream into a database and restore it at some later point in time. However, when used through remoting, an object of this type would be proxied.","nodes":[{"content":"As a general design pattern, it would be unusual for a class to be both marked with the serializable attribute and extend <xref:System.MarshalByRefObject>. Developers should think carefully about the possible serialization and remoting scenarios when combining these two characteristics. One example where this might be applicable is with a <xref:System.IO.MemoryStream>. While the base class of <xref:System.IO.MemoryStream> (<xref:System.IO.Stream>) extends from <xref:System.MarshalByRefObject>, it is possible to capture the state of a <xref:System.IO.MemoryStream> and restore it at will. It might, therefore, be meaningful to serialize the state of this stream into a database and restore it at some later point in time. However, when used through remoting, an object of this type would be proxied.","pos":[0,804],"nodes":[{"content":"As a general design pattern, it would be unusual for a class to be both marked with the serializable attribute and extend <ph id=\"ph1\">&lt;xref:System.MarshalByRefObject&gt;</ph>.","pos":[0,155],"source":"As a general design pattern, it would be unusual for a class to be both marked with the serializable attribute and extend <xref:System.MarshalByRefObject>."},{"content":"Developers should think carefully about the possible serialization and remoting scenarios when combining these two characteristics.","pos":[156,287]},{"content":"One example where this might be applicable is with a <ph id=\"ph1\">&lt;xref:System.IO.MemoryStream&gt;</ph>.","pos":[288,371],"source":" One example where this might be applicable is with a <xref:System.IO.MemoryStream>."},{"content":"While the base class of <ph id=\"ph1\">&lt;xref:System.IO.MemoryStream&gt;</ph> (<ph id=\"ph2\">&lt;xref:System.IO.Stream&gt;</ph>) extends from <ph id=\"ph3\">&lt;xref:System.MarshalByRefObject&gt;</ph>, it is possible to capture the state of a <ph id=\"ph4\">&lt;xref:System.IO.MemoryStream&gt;</ph> and restore it at will.","pos":[372,593],"source":" While the base class of <xref:System.IO.MemoryStream> (<xref:System.IO.Stream>) extends from <xref:System.MarshalByRefObject>, it is possible to capture the state of a <xref:System.IO.MemoryStream> and restore it at will."},{"content":"It might, therefore, be meaningful to serialize the state of this stream into a database and restore it at some later point in time.","pos":[594,726]},{"content":"However, when used through remoting, an object of this type would be proxied.","pos":[727,804]}]}]},{"pos":[3976,4320],"content":"For more information about serialization of classes that extend <xref:System.MarshalByRefObject>, see <xref:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector>. For more information about implementing <xref:System.Runtime.Serialization.ISerializable>, see [Custom Serialization](~/docs/framework/serialization/custom-serialization.md).","nodes":[{"content":"For more information about serialization of classes that extend <ph id=\"ph1\">&lt;xref:System.MarshalByRefObject&gt;</ph>, see <ph id=\"ph2\">&lt;xref:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector&gt;</ph>.","pos":[0,169],"source":"For more information about serialization of classes that extend <xref:System.MarshalByRefObject>, see <xref:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector>."},{"content":"For more information about implementing <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph>, see <bpt id=\"p1\">[</bpt>Custom Serialization<ept id=\"p1\">](~/docs/framework/serialization/custom-serialization.md)</ept>.","pos":[170,344],"source":" For more information about implementing <xref:System.Runtime.Serialization.ISerializable>, see [Custom Serialization](~/docs/framework/serialization/custom-serialization.md)."}]}],"pos":[717,5054],"yaml":true,"extradata":"MT"},{"content":"Populates a <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> with the data needed to serialize the target object.","nodes":[{"pos":[0,132],"content":"Populates a <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;&lt;/xref&gt;</ph> with the data needed to serialize the target object.","source":"Populates a <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> with the data needed to serialize the target object."}],"pos":[11427,11560],"yaml":true},{"content":"Any objects that are included in the <xref:System.Runtime.Serialization.SerializationInfo> are automatically tracked and serialized by the formatter.  \n  \n Code that calls <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> requires the <xref:System.Security.Permissions.SecurityPermission> for providing serialization services. Associated enumeration: <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName>.  \n  \n> [!NOTE]\n>  It is not guaranteed that this method will be called only once per object instance during serialization. Therefore, the method should be implemented in such a way that its behavior will be the same regardless of the number of times it is called.","nodes":[{"pos":[0,149],"content":"Any objects that are included in the <xref:System.Runtime.Serialization.SerializationInfo> are automatically tracked and serialized by the formatter.","nodes":[{"content":"Any objects that are included in the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> are automatically tracked and serialized by the formatter.","pos":[0,149],"source":"Any objects that are included in the <xref:System.Runtime.Serialization.SerializationInfo> are automatically tracked and serialized by the formatter."}]},{"pos":[156,451],"content":"Code that calls <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> requires the <xref:System.Security.Permissions.SecurityPermission> for providing serialization services. Associated enumeration: <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName>.","nodes":[{"content":"Code that calls <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> requires the <xref:System.Security.Permissions.SecurityPermission> for providing serialization services. Associated enumeration: <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName>.","pos":[0,295],"nodes":[{"content":"Code that calls <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A&gt;</ph> requires the <ph id=\"ph2\">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> for providing serialization services.","pos":[0,187],"source":"Code that calls <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> requires the <xref:System.Security.Permissions.SecurityPermission> for providing serialization services."},{"content":"Associated enumeration: <ph id=\"ph1\">&lt;xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt;</ph>.","pos":[188,295],"source":" Associated enumeration: <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName>."}]}]},{"pos":[459,715],"content":"[!NOTE]\n It is not guaranteed that this method will be called only once per object instance during serialization. Therefore, the method should be implemented in such a way that its behavior will be the same regardless of the number of times it is called.","leadings":["","> "],"nodes":[{"content":" It is not guaranteed that this method will be called only once per object instance during serialization. Therefore, the method should be implemented in such a way that its behavior will be the same regardless of the number of times it is called.","pos":[8,254],"nodes":[{"content":"It is not guaranteed that this method will be called only once per object instance during serialization.","pos":[1,105]},{"content":"Therefore, the method should be implemented in such a way that its behavior will be the same regardless of the number of times it is called.","pos":[106,246]}]}]}],"pos":[11571,12294],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> to populate with data.","nodes":[{"pos":[0,94],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;&lt;/xref&gt;</ph> to populate with data.","source":"The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> to populate with data."}],"pos":[13577,13672],"yaml":true},{"content":"The destination (see <xref href=\"System.Runtime.Serialization.StreamingContext\"></xref>) for this serialization.","nodes":[{"pos":[0,112],"content":"The destination (see <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Serialization.StreamingContext\"&gt;&lt;/xref&gt;</ph>) for this serialization.","source":"The destination (see <xref href=\"System.Runtime.Serialization.StreamingContext\"></xref>) for this serialization."}],"pos":[13767,13880],"yaml":true},{"content":"The caller does not have the required permission.","nodes":[{"pos":[0,49],"content":"The caller does not have the required permission.","nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]}],"pos":[14076,14126],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Runtime.Serialization.ISerializable\n  commentId: T:System.Runtime.Serialization.ISerializable\n  id: ISerializable\n  children:\n  - System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  langs:\n  - csharp\n  name: ISerializable\n  nameWithType: ISerializable\n  fullName: System.Runtime.Serialization.ISerializable\n  type: Interface\n  assemblies:\n  - System.Runtime.Serialization.Formatters\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Runtime.Serialization\n  summary: Allows an object to control its own serialization and deserialization.\n  remarks: \"Any class that might be serialized must be marked with the <xref:System.SerializableAttribute>. If a class needs to control its serialization process, it can implement the <xref:System.Runtime.Serialization.ISerializable> interface. The <xref:System.Runtime.Serialization.Formatter> calls the <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> at serialization time and populates the supplied <xref:System.Runtime.Serialization.SerializationInfo> with all the data required to represent the object. The <xref:System.Runtime.Serialization.Formatter> creates a <xref:System.Runtime.Serialization.SerializationInfo> with the type of the object in the graph. Objects that need to send proxies for themselves can use the <xref:System.Runtime.Serialization.SerializationInfo.FullTypeName%2A> and <xref:System.Runtime.Serialization.SerializationInfo.AssemblyName%2A> methods on <xref:System.Runtime.Serialization.SerializationInfo> to change the transmitted information.  \\n  \\n In the case of class inheritance, it is possible to serialize a class that derives from a base class that implements <xref:System.Runtime.Serialization.ISerializable>. In this case, the derived class should call the base class implementation of <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> inside its implementation of <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>. Otherwise, the data from the base class will not be serialized.  \\n  \\n The <xref:System.Runtime.Serialization.ISerializable> interface implies a constructor with the signature constructor (<xref:System.Runtime.Serialization.SerializationInfo> information, <xref:System.Runtime.Serialization.StreamingContext> context). At deserialization time, the current constructor is called only after the data in the <xref:System.Runtime.Serialization.SerializationInfo> has been deserialized by the formatter. In general, this constructor should be protected if the class is not sealed.  \\n  \\n The order in which objects are deserialized cannot be guaranteed. For example, if one type references a type that has not been deserialized yet, an exception will occur. If you are creating types that have such dependencies, you can work around the problem by implementing the `IDeserializationCallback` interface and the `OnDeserialization` method.  \\n  \\n The serialization architecture handles object types that extend <xref:System.MarshalByRefObject> the same as types that extend <xref:System.Object>. These types can be marked with the <xref:System.SerializableAttribute> and implement the <xref:System.Runtime.Serialization.ISerializable> interface as any other object type. Their object state will be captured and persisted onto the stream.  \\n  \\n When these types are being used through <xref:System.Runtime.Remoting>, the remoting infrastructure provides a surrogate that preempts typical serialization and instead serializes a proxy to the <xref:System.MarshalByRefObject>. A surrogate is a helper that knows how to serialize and deserialize objects of a particular type. The proxy, invisible to the user in most cases, will be of type <xref:System.Runtime.Remoting.ObjRef>.  \\n  \\n As a general design pattern, it would be unusual for a class to be both marked with the serializable attribute and extend <xref:System.MarshalByRefObject>. Developers should think carefully about the possible serialization and remoting scenarios when combining these two characteristics. One example where this might be applicable is with a <xref:System.IO.MemoryStream>. While the base class of <xref:System.IO.MemoryStream> (<xref:System.IO.Stream>) extends from <xref:System.MarshalByRefObject>, it is possible to capture the state of a <xref:System.IO.MemoryStream> and restore it at will. It might, therefore, be meaningful to serialize the state of this stream into a database and restore it at some later point in time. However, when used through remoting, an object of this type would be proxied.  \\n  \\n For more information about serialization of classes that extend <xref:System.MarshalByRefObject>, see <xref:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector>. For more information about implementing <xref:System.Runtime.Serialization.ISerializable>, see [Custom Serialization](~/docs/framework/serialization/custom-serialization.md).\"\n  example:\n  - \"The following code example demonstrates the use of the <xref:System.Runtime.Serialization.ISerializable> interface to define custom serialization behavior for a class.  \\n  \\n [!code-cpp[ISerializable Interface Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/ISerializable Interface Example/CPP/iobjectreference.cpp#1)]\\n [!code-csharp[ISerializable Interface Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/ISerializable Interface Example/CS/iobjectreference.cs#1)]\\n [!code-vb[ISerializable Interface Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ISerializable Interface Example/VB/iobjectreference.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public interface ISerializable\n  derivedClasses:\n  - Microsoft.VisualBasic.Collection\n  - System.ActivationContext\n  - System.ApplicationIdentity\n  - System.DateTime\n  - System.DateTimeOffset\n  - System.DBNull\n  - System.Delegate\n  - System.Exception\n  - System.IntPtr\n  - System.OperatingSystem\n  - System.RuntimeFieldHandle\n  - System.RuntimeMethodHandle\n  - System.RuntimeTypeHandle\n  - System.TimeZoneInfo.AdjustmentRule\n  - System.TimeZoneInfo.TransitionTime\n  - System.TimeZoneInfo\n  - System.UIntPtr\n  - System.Uri\n  - System.WeakReference\n  - System.WeakReference`1\n  - System.Collections.Comparer\n  - System.Collections.Hashtable\n  - System.Collections.Generic.Dictionary`2\n  - System.Collections.Generic.HashSet`1\n  - System.Collections.Generic.LinkedList`1.Enumerator\n  - System.Collections.Generic.LinkedList`1\n  - System.Collections.Generic.SortedSet`1.Enumerator\n  - System.Collections.Generic.SortedSet`1\n  - System.Collections.Specialized.NameObjectCollectionBase\n  - System.Collections.Specialized.OrderedDictionary\n  - System.Data.DataSet\n  - System.Data.DataTable\n  - System.Data.SqlTypes.SqlBytes\n  - System.Data.SqlTypes.SqlChars\n  - System.Diagnostics.EventLogEntry\n  - System.Diagnostics.Eventing.Reader.EventBookmark\n  - System.Drawing.Font\n  - System.Drawing.Icon\n  - System.Drawing.Image\n  - System.Drawing.Design.ToolboxItem\n  - System.Drawing.Design.ToolboxItemContainer\n  - System.IdentityModel.Tokens.BootstrapContext\n  - System.IO.DriveInfo\n  - System.IO.FileSystemInfo\n  - System.Management.ManagementBaseObject\n  - System.Media.SoundPlayer\n  - System.Net.FileWebRequest\n  - System.Net.FileWebResponse\n  - System.Net.HttpWebRequest\n  - System.Net.HttpWebResponse\n  - System.Net.WebHeaderCollection\n  - System.Net.WebProxy\n  - System.Net.WebRequest\n  - System.Net.WebResponse\n  - System.Net.PeerToPeer.Cloud\n  - System.Net.PeerToPeer.PeerName\n  - System.Net.PeerToPeer.PeerNameRecord\n  - System.Net.PeerToPeer.PeerNameRegistration\n  - System.Net.PeerToPeer.Collaboration.Peer\n  - System.Net.PeerToPeer.Collaboration.PeerApplication\n  - System.Net.PeerToPeer.Collaboration.PeerContact\n  - System.Net.PeerToPeer.Collaboration.PeerEndPoint\n  - System.Net.PeerToPeer.Collaboration.PeerNearMe\n  - System.Net.PeerToPeer.Collaboration.PeerObject\n  - System.Reflection.Assembly\n  - System.Reflection.AssemblyName\n  - System.Reflection.Missing\n  - System.Reflection.Module\n  - System.Reflection.Pointer\n  - System.Reflection.StrongNameKeyPair\n  - System.Resources.ResXDataNode\n  - System.Runtime.Remoting.ObjRef\n  - System.Runtime.Remoting.Messaging.LogicalCallContext\n  - System.Runtime.Remoting.Messaging.MethodCall\n  - System.Runtime.Remoting.Messaging.MethodResponse\n  - System.Runtime.Serialization.Formatters.SoapFault\n  - System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\n  - System.Security.Cryptography.X509Certificates.X509Certificate\n  - System.Security.Policy.Hash\n  - System.Security.Policy.HashMembershipCondition\n  - System.Security.Principal.WindowsIdentity\n  - System.Speech.Recognition.RecognitionResult\n  - System.Text.StringBuilder\n  - System.Text.RegularExpressions.Regex\n  - System.Threading.CompressedStack\n  - System.Threading.ExecutionContext\n  - System.Transactions.CommittableTransaction\n  - System.Transactions.DependentTransaction\n  - System.Transactions.Transaction\n  - System.Web.Security.RolePrincipal\n  - System.Windows.Forms.AxHost.State\n  - System.Windows.Forms.Cursor\n  - System.Windows.Forms.ImageListStreamer\n  - System.Windows.Forms.ListViewGroup\n  - System.Windows.Forms.ListViewItem\n  - System.Windows.Forms.OwnerDrawPropertyBag\n  - System.Windows.Forms.TableLayoutSettings\n  - System.Windows.Forms.TreeNode\n  - System.Windows.Navigation.JournalEntry\n  - System.Workflow.Activities.ActiveDirectoryRole\n  - System.Workflow.ComponentModel.DependencyProperty\n  - System.Xml.Linq.XName\n  implements: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Serialization/ISerializable.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  commentId: M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Runtime.Serialization.ISerializable\n  langs:\n  - csharp\n  name: GetObjectData(SerializationInfo, StreamingContext)\n  nameWithType: ISerializable.GetObjectData(SerializationInfo, StreamingContext)\n  fullName: ISerializable.GetObjectData(SerializationInfo, StreamingContext)\n  type: Method\n  assemblies:\n  - System.Runtime.Serialization.Formatters\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Runtime.Serialization\n  summary: Populates a <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> with the data needed to serialize the target object.\n  remarks: \"Any objects that are included in the <xref:System.Runtime.Serialization.SerializationInfo> are automatically tracked and serialized by the formatter.  \\n  \\n Code that calls <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> requires the <xref:System.Security.Permissions.SecurityPermission> for providing serialization services. Associated enumeration: <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName>.  \\n  \\n> [!NOTE]\\n>  It is not guaranteed that this method will be called only once per object instance during serialization. Therefore, the method should be implemented in such a way that its behavior will be the same regardless of the number of times it is called.\"\n  example:\n  - \"The following example uses the <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> method to set alternate values for a serialized object. The code uses the <xref:System.Runtime.Serialization.SerializationInfo.AddValue%2A> method of the <xref:System.Runtime.Serialization.SerializationInfo> class to store the alternate values when the object is serialized. Conversely, when the constructor of the `Person` class is called during deserialization, the alternatve values are retrieved using the <xref:System.Runtime.Serialization.SerializationInfo.GetValue%2A> method and reassigned to the object's fields.  \\n  \\n [!code-csharp[ISerializable_GetObjectData#0](~/samples/snippets/csharp/VS_Snippets_Remoting/ISerializable_GetObjectData/cs/ISerializable_GetObjectData.cs#0)]\\n [!code-vb[ISerializable_GetObjectData#0](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ISerializable_GetObjectData/vb/ISerializable_GetObjectData.vb#0)]\"\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> to populate with data.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: The destination (see <xref href=\"System.Runtime.Serialization.StreamingContext\"></xref>) for this serialization.\n  overload: System.Runtime.Serialization.ISerializable.GetObjectData*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Serialization/ISerializable.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\nreferences:\n- uid: System.Security.SecurityException\n  parent: System.Security\n  isExternal: false\n  name: SecurityException\n  nameWithType: SecurityException\n  fullName: System.Security.SecurityException\n- uid: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Runtime.Serialization.ISerializable\n  isExternal: false\n  name: GetObjectData(SerializationInfo, StreamingContext)\n  nameWithType: ISerializable.GetObjectData(SerializationInfo, StreamingContext)\n  fullName: ISerializable.GetObjectData(SerializationInfo, StreamingContext)\n- uid: System.Runtime.Serialization.SerializationInfo\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: SerializationInfo\n  nameWithType: SerializationInfo\n  fullName: System.Runtime.Serialization.SerializationInfo\n- uid: System.Runtime.Serialization.StreamingContext\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: StreamingContext\n  nameWithType: StreamingContext\n  fullName: System.Runtime.Serialization.StreamingContext\n- uid: System.Runtime.Serialization.ISerializable.GetObjectData*\n  parent: System.Runtime.Serialization.ISerializable\n  isExternal: false\n  name: GetObjectData\n  nameWithType: ISerializable.GetObjectData\n  fullName: ISerializable.GetObjectData\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Serialization/ISerializable.xml\n"}