{"nodes":[{"content":"Represents the status of an asynchronous operation.","nodes":[{"pos":[0,51],"content":"Represents the status of an asynchronous operation.","nodes":[{"content":"Represents the status of an asynchronous operation.","pos":[0,51]}]}],"pos":[500,552],"yaml":true},{"content":"The <xref:System.IAsyncResult> interface is implemented by classes containing methods that can operate asynchronously. It is the return type of methods that initiate an asynchronous operation, such as <xref:System.IO.FileStream.BeginRead%2A?displayProperty=fullName>, and it is passed to methods that conclude an asynchronous operation, such as <xref:System.IO.FileStream.EndRead%2A?displayProperty=fullName>. <xref:System.IAsyncResult> objects are also passed to methods invoked by <xref:System.AsyncCallback> delegates when an asynchronous operation completes.  \n  \n An object that supports the <xref:System.IAsyncResult> interface stores state information for an asynchronous operation and provides a synchronization object to allow threads to be signaled when the operation completes.  \n  \n> [!NOTE]\n>  The <xref:System.Runtime.Remoting.Messaging.AsyncResult> class is the implementation of <xref:System.IAsyncResult> that is returned by the `BeginInvoke` method when you use a delegate to call a method asynchronously.  \n  \n For a detailed description of how the <xref:System.IAsyncResult> interface is used, see the [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md) topic.","nodes":[{"pos":[0,562],"content":"The <xref:System.IAsyncResult> interface is implemented by classes containing methods that can operate asynchronously. It is the return type of methods that initiate an asynchronous operation, such as <xref:System.IO.FileStream.BeginRead%2A?displayProperty=fullName>, and it is passed to methods that conclude an asynchronous operation, such as <xref:System.IO.FileStream.EndRead%2A?displayProperty=fullName>. <xref:System.IAsyncResult> objects are also passed to methods invoked by <xref:System.AsyncCallback> delegates when an asynchronous operation completes.","nodes":[{"content":"The <xref:System.IAsyncResult> interface is implemented by classes containing methods that can operate asynchronously. It is the return type of methods that initiate an asynchronous operation, such as <xref:System.IO.FileStream.BeginRead%2A?displayProperty=fullName>, and it is passed to methods that conclude an asynchronous operation, such as <xref:System.IO.FileStream.EndRead%2A?displayProperty=fullName>. <xref:System.IAsyncResult> objects are also passed to methods invoked by <xref:System.AsyncCallback> delegates when an asynchronous operation completes.","pos":[0,562],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> interface is implemented by classes containing methods that can operate asynchronously.","pos":[0,118],"source":"The <xref:System.IAsyncResult> interface is implemented by classes containing methods that can operate asynchronously."},{"content":"It is the return type of methods that initiate an asynchronous operation, such as <ph id=\"ph1\">&lt;xref:System.IO.FileStream.BeginRead%2A?displayProperty=fullName&gt;</ph>, and it is passed to methods that conclude an asynchronous operation, such as <ph id=\"ph2\">&lt;xref:System.IO.FileStream.EndRead%2A?displayProperty=fullName&gt;</ph>.","pos":[119,409],"source":" It is the return type of methods that initiate an asynchronous operation, such as <xref:System.IO.FileStream.BeginRead%2A?displayProperty=fullName>, and it is passed to methods that conclude an asynchronous operation, such as <xref:System.IO.FileStream.EndRead%2A?displayProperty=fullName>."},{"content":"<ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> objects are also passed to methods invoked by <ph id=\"ph2\">&lt;xref:System.AsyncCallback&gt;</ph> delegates when an asynchronous operation completes.","pos":[410,562],"source":" <xref:System.IAsyncResult> objects are also passed to methods invoked by <xref:System.AsyncCallback> delegates when an asynchronous operation completes."}]}]},{"pos":[569,788],"content":"An object that supports the <xref:System.IAsyncResult> interface stores state information for an asynchronous operation and provides a synchronization object to allow threads to be signaled when the operation completes.","nodes":[{"content":"An object that supports the <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> interface stores state information for an asynchronous operation and provides a synchronization object to allow threads to be signaled when the operation completes.","pos":[0,219],"source":"An object that supports the <xref:System.IAsyncResult> interface stores state information for an asynchronous operation and provides a synchronization object to allow threads to be signaled when the operation completes."}]},{"pos":[796,1023],"content":"[!NOTE]\n The <xref:System.Runtime.Remoting.Messaging.AsyncResult> class is the implementation of <xref:System.IAsyncResult> that is returned by the `BeginInvoke` method when you use a delegate to call a method asynchronously.","leadings":["","> "],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> class is the implementation of <ph id=\"ph2\">&lt;xref:System.IAsyncResult&gt;</ph> that is returned by the <ph id=\"ph3\">`BeginInvoke`</ph> method when you use a delegate to call a method asynchronously.","pos":[9,225],"source":" The <xref:System.Runtime.Remoting.Messaging.AsyncResult> class is the implementation of <xref:System.IAsyncResult> that is returned by the `BeginInvoke` method when you use a delegate to call a method asynchronously."}]},{"pos":[1030,1270],"content":"For a detailed description of how the <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> interface is used, see the <bpt id=\"p1\">[</bpt>Calling Synchronous Methods Asynchronously<ept id=\"p1\">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept> topic.","source":"For a detailed description of how the <xref:System.IAsyncResult> interface is used, see the [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md) topic."}],"pos":[563,1843],"yaml":true,"extradata":"MT"},{"content":"Gets a user-defined object that qualifies or contains information about an asynchronous operation.","nodes":[{"pos":[0,98],"content":"Gets a user-defined object that qualifies or contains information about an asynchronous operation.","nodes":[{"content":"Gets a user-defined object that qualifies or contains information about an asynchronous operation.","pos":[0,98]}]}],"pos":[5403,5502],"yaml":true},{"content":"This property returns the object that is the last parameter of the method that initiates an asynchronous operation.","nodes":[{"pos":[0,115],"content":"This property returns the object that is the last parameter of the method that initiates an asynchronous operation.","nodes":[{"content":"This property returns the object that is the last parameter of the method that initiates an asynchronous operation.","pos":[0,115]}]}],"pos":[5513,5629],"yaml":true,"extradata":"MT"},{"content":"A user-defined object that qualifies or contains information about an asynchronous operation.","nodes":[{"pos":[0,93],"content":"A user-defined object that qualifies or contains information about an asynchronous operation.","nodes":[{"content":"A user-defined object that qualifies or contains information about an asynchronous operation.","pos":[0,93]}]}],"pos":[7280,7374],"yaml":true},{"content":"Gets a <xref href=\"System.Threading.WaitHandle\"></xref> that is used to wait for an asynchronous operation to complete.","nodes":[{"pos":[0,119],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"System.Threading.WaitHandle\"&gt;&lt;/xref&gt;</ph> that is used to wait for an asynchronous operation to complete.","source":"Gets a <xref href=\"System.Threading.WaitHandle\"></xref> that is used to wait for an asynchronous operation to complete."}],"pos":[8881,9001],"yaml":true},{"content":"The return value allows the client to wait for an asynchronous operation to complete instead of polling <xref:System.IAsyncResult.IsCompleted%2A> until the operation concludes. The return value can be used to perform a <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, or <xref:System.Threading.WaitHandle.WaitAll%2A> operation.  \n  \n The common language runtime supplies a number of waitable objects, such as <xref:System.Threading.ManualResetEvent>, <xref:System.Threading.AutoResetEvent>, and <xref:System.Threading.Mutex>, all of which mirror Win32 synchronization primitives.","nodes":[{"pos":[0,372],"content":"The return value allows the client to wait for an asynchronous operation to complete instead of polling <xref:System.IAsyncResult.IsCompleted%2A> until the operation concludes. The return value can be used to perform a <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, or <xref:System.Threading.WaitHandle.WaitAll%2A> operation.","nodes":[{"content":"The return value allows the client to wait for an asynchronous operation to complete instead of polling <xref:System.IAsyncResult.IsCompleted%2A> until the operation concludes. The return value can be used to perform a <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, or <xref:System.Threading.WaitHandle.WaitAll%2A> operation.","pos":[0,372],"nodes":[{"content":"The return value allows the client to wait for an asynchronous operation to complete instead of polling <ph id=\"ph1\">&lt;xref:System.IAsyncResult.IsCompleted%2A&gt;</ph> until the operation concludes.","pos":[0,176],"source":"The return value allows the client to wait for an asynchronous operation to complete instead of polling <xref:System.IAsyncResult.IsCompleted%2A> until the operation concludes."},{"content":"The return value can be used to perform a <ph id=\"ph1\">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> operation.","pos":[177,372],"source":" The return value can be used to perform a <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, or <xref:System.Threading.WaitHandle.WaitAll%2A> operation."}]}]},{"pos":[379,624],"content":"The common language runtime supplies a number of waitable objects, such as <xref:System.Threading.ManualResetEvent>, <xref:System.Threading.AutoResetEvent>, and <xref:System.Threading.Mutex>, all of which mirror Win32 synchronization primitives.","nodes":[{"content":"The common language runtime supplies a number of waitable objects, such as <ph id=\"ph1\">&lt;xref:System.Threading.ManualResetEvent&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Threading.Mutex&gt;</ph>, all of which mirror Win32 synchronization primitives.","pos":[0,245],"source":"The common language runtime supplies a number of waitable objects, such as <xref:System.Threading.ManualResetEvent>, <xref:System.Threading.AutoResetEvent>, and <xref:System.Threading.Mutex>, all of which mirror Win32 synchronization primitives."}]}],"pos":[9012,9641],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Threading.WaitHandle\"></xref> that is used to wait for an asynchronous operation to complete.","nodes":[{"pos":[0,114],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Threading.WaitHandle\"&gt;&lt;/xref&gt;</ph> that is used to wait for an asynchronous operation to complete.","source":"A <xref href=\"System.Threading.WaitHandle\"></xref> that is used to wait for an asynchronous operation to complete."}],"pos":[11381,11496],"yaml":true},{"content":"Gets a value that indicates whether the asynchronous operation completed synchronously.","nodes":[{"pos":[0,87],"content":"Gets a value that indicates whether the asynchronous operation completed synchronously.","nodes":[{"content":"Gets a value that indicates whether the asynchronous operation completed synchronously.","pos":[0,87]}]}],"pos":[13050,13138],"yaml":true},{"content":"If the synchronous completion of the call is detected in the <xref:System.AsyncCallback> delegate, it is probable that the thread that initiated the asynchronous operation is the current thread.","nodes":[{"pos":[0,194],"content":"If the synchronous completion of the call is detected in the <xref:System.AsyncCallback> delegate, it is probable that the thread that initiated the asynchronous operation is the current thread.","nodes":[{"content":"If the synchronous completion of the call is detected in the <ph id=\"ph1\">&lt;xref:System.AsyncCallback&gt;</ph> delegate, it is probable that the thread that initiated the asynchronous operation is the current thread.","pos":[0,194],"source":"If the synchronous completion of the call is detected in the <xref:System.AsyncCallback> delegate, it is probable that the thread that initiated the asynchronous operation is the current thread."}]}],"pos":[13149,13344],"yaml":true,"extradata":"MT"},{"content":"`true` if the asynchronous operation completed synchronously; otherwise, `false`.","nodes":[{"pos":[0,81],"content":"<ph id=\"ph1\">`true`</ph> if the asynchronous operation completed synchronously; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the asynchronous operation completed synchronously; otherwise, `false`."}],"pos":[13469,13553],"yaml":true},{"content":"Gets a value that indicates whether the asynchronous operation has completed.","nodes":[{"pos":[0,77],"content":"Gets a value that indicates whether the asynchronous operation has completed.","nodes":[{"content":"Gets a value that indicates whether the asynchronous operation has completed.","pos":[0,77]}]}],"pos":[15048,15126],"yaml":true},{"content":"When this property is `true`, you can assume it is safe to discard any resources you allocate for use by the asynchronous operation.","nodes":[{"pos":[0,132],"content":"When this property is <ph id=\"ph1\">`true`</ph>, you can assume it is safe to discard any resources you allocate for use by the asynchronous operation.","source":"When this property is `true`, you can assume it is safe to discard any resources you allocate for use by the asynchronous operation."}],"pos":[15137,15270],"yaml":true,"extradata":"MT"},{"content":"`true` if the operation is complete; otherwise, `false`.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">`true`</ph> if the operation is complete; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the operation is complete; otherwise, `false`."}],"pos":[17173,17232],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.IAsyncResult\n  commentId: T:System.IAsyncResult\n  id: IAsyncResult\n  children:\n  - System.IAsyncResult.AsyncState\n  - System.IAsyncResult.AsyncWaitHandle\n  - System.IAsyncResult.CompletedSynchronously\n  - System.IAsyncResult.IsCompleted\n  langs:\n  - csharp\n  name: IAsyncResult\n  nameWithType: IAsyncResult\n  fullName: System.IAsyncResult\n  type: Interface\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Represents the status of an asynchronous operation.\n  remarks: \"The <xref:System.IAsyncResult> interface is implemented by classes containing methods that can operate asynchronously. It is the return type of methods that initiate an asynchronous operation, such as <xref:System.IO.FileStream.BeginRead%2A?displayProperty=fullName>, and it is passed to methods that conclude an asynchronous operation, such as <xref:System.IO.FileStream.EndRead%2A?displayProperty=fullName>. <xref:System.IAsyncResult> objects are also passed to methods invoked by <xref:System.AsyncCallback> delegates when an asynchronous operation completes.  \\n  \\n An object that supports the <xref:System.IAsyncResult> interface stores state information for an asynchronous operation and provides a synchronization object to allow threads to be signaled when the operation completes.  \\n  \\n> [!NOTE]\\n>  The <xref:System.Runtime.Remoting.Messaging.AsyncResult> class is the implementation of <xref:System.IAsyncResult> that is returned by the `BeginInvoke` method when you use a delegate to call a method asynchronously.  \\n  \\n For a detailed description of how the <xref:System.IAsyncResult> interface is used, see the [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md) topic.\"\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A> property to get a <xref:System.Threading.WaitHandle>, and how to wait for an asynchronous call on a delegate. The <xref:System.Threading.WaitHandle> is signaled when the asynchronous call completes, and you can wait for it by calling the <xref:System.Threading.WaitHandle.WaitOne%2A> method.  \\n  \\n The example consists of two classes: the class that contains the method that is called asynchronously, and the class that contains the `Main` method that makes the call.  \\n  \\n For more information and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  \\n  \\n [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]\\n [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]\\n [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  \\n[!code-cpp[AsyncDelegateExamples#3](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/waithandle.cpp#3)]\\n[!code-csharp[AsyncDelegateExamples#3](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/waithandle.cs#3)]\\n[!code-vb[AsyncDelegateExamples#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/WaitHandle.vb#3)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public interface IAsyncResult\n  derivedClasses:\n  - System.IdentityModel.AsyncResult\n  - System.IdentityModel.Selectors.SecurityTokenProvider.SecurityTokenAsyncResult\n  - System.Runtime.Remoting.Messaging.AsyncResult\n  - System.Threading.Tasks.Task\n  - System.Transactions.CommittableTransaction\n  - System.Web.Services.Protocols.WebClientAsyncResult\n  implements: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IAsyncResult.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.IAsyncResult.AsyncState\n  commentId: P:System.IAsyncResult.AsyncState\n  id: AsyncState\n  parent: System.IAsyncResult\n  langs:\n  - csharp\n  name: AsyncState\n  nameWithType: IAsyncResult.AsyncState\n  fullName: IAsyncResult.AsyncState\n  type: Property\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Gets a user-defined object that qualifies or contains information about an asynchronous operation.\n  remarks: This property returns the object that is the last parameter of the method that initiates an asynchronous operation.\n  example:\n  - \"The following code example demonstrates how the <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState%2A> property is used to pass information to a callback method. The last parameter of the `BeginInvoke` method call is a format string, which the callback method uses to format an output message.  \\n  \\n The example consists of two classes: the class that contains the method that is called asynchronously, and the class that contains the `Main` method that makes the call.  \\n  \\n For more information about how this callback example works, and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  \\n  \\n [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]\\n [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]\\n [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  \\n[!code-cpp[AsyncDelegateExamples#5](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/callback.cpp#5)]\\n[!code-csharp[AsyncDelegateExamples#5](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/callback.cs#5)]\\n[!code-vb[AsyncDelegateExamples#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/callback.vb#5)]\"\n  syntax:\n    content: public object AsyncState { get; }\n    return:\n      type: System.Object\n      description: A user-defined object that qualifies or contains information about an asynchronous operation.\n  overload: System.IAsyncResult.AsyncState*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IAsyncResult.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.IAsyncResult.AsyncWaitHandle\n  commentId: P:System.IAsyncResult.AsyncWaitHandle\n  id: AsyncWaitHandle\n  parent: System.IAsyncResult\n  langs:\n  - csharp\n  name: AsyncWaitHandle\n  nameWithType: IAsyncResult.AsyncWaitHandle\n  fullName: IAsyncResult.AsyncWaitHandle\n  type: Property\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Gets a <xref href=\"System.Threading.WaitHandle\"></xref> that is used to wait for an asynchronous operation to complete.\n  remarks: \"The return value allows the client to wait for an asynchronous operation to complete instead of polling <xref:System.IAsyncResult.IsCompleted%2A> until the operation concludes. The return value can be used to perform a <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, or <xref:System.Threading.WaitHandle.WaitAll%2A> operation.  \\n  \\n The common language runtime supplies a number of waitable objects, such as <xref:System.Threading.ManualResetEvent>, <xref:System.Threading.AutoResetEvent>, and <xref:System.Threading.Mutex>, all of which mirror Win32 synchronization primitives.\"\n  example:\n  - \"The following example demonstrates how to use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property to get a <xref:System.Threading.WaitHandle>, and how to wait for an asynchronous call on a delegate. The <xref:System.Threading.WaitHandle> is signaled when the asynchronous call completes, and you can wait for it by calling the <xref:System.Threading.WaitHandle.WaitOne%2A> method.  \\n  \\n The example consists of two classes: the class that contains the method that is called asynchronously, and the class that contains the `Main` method that makes the call.  \\n  \\n For more information and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  \\n  \\n [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]\\n [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]\\n [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  \\n[!code-cpp[AsyncDelegateExamples#3](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/waithandle.cpp#3)]\\n[!code-csharp[AsyncDelegateExamples#3](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/waithandle.cs#3)]\\n[!code-vb[AsyncDelegateExamples#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/WaitHandle.vb#3)]\"\n  syntax:\n    content: public System.Threading.WaitHandle AsyncWaitHandle { get; }\n    return:\n      type: System.Threading.WaitHandle\n      description: A <xref href=\"System.Threading.WaitHandle\"></xref> that is used to wait for an asynchronous operation to complete.\n  overload: System.IAsyncResult.AsyncWaitHandle*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IAsyncResult.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.IAsyncResult.CompletedSynchronously\n  commentId: P:System.IAsyncResult.CompletedSynchronously\n  id: CompletedSynchronously\n  parent: System.IAsyncResult\n  langs:\n  - csharp\n  name: CompletedSynchronously\n  nameWithType: IAsyncResult.CompletedSynchronously\n  fullName: IAsyncResult.CompletedSynchronously\n  type: Property\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Gets a value that indicates whether the asynchronous operation completed synchronously.\n  remarks: If the synchronous completion of the call is detected in the <xref:System.AsyncCallback> delegate, it is probable that the thread that initiated the asynchronous operation is the current thread.\n  syntax:\n    content: public bool CompletedSynchronously { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the asynchronous operation completed synchronously; otherwise, `false`.'\n  overload: System.IAsyncResult.CompletedSynchronously*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IAsyncResult.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.IAsyncResult.IsCompleted\n  commentId: P:System.IAsyncResult.IsCompleted\n  id: IsCompleted\n  parent: System.IAsyncResult\n  langs:\n  - csharp\n  name: IsCompleted\n  nameWithType: IAsyncResult.IsCompleted\n  fullName: IAsyncResult.IsCompleted\n  type: Property\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Gets a value that indicates whether the asynchronous operation has completed.\n  remarks: When this property is `true`, you can assume it is safe to discard any resources you allocate for use by the asynchronous operation.\n  example:\n  - \"The following example shows how to use the <xref:System.IAsyncResult.IsCompleted%2A> property of the <xref:System.IAsyncResult> to discover when an asynchronous call completes. In this case, the asynchronous call is made by using the `BeginInvoke` method of a delegate. You might use the <xref:System.IAsyncResult.IsCompleted%2A> property to poll for completion when making the asynchronous call from a thread that services the user interface. Polling for completion allows the calling thread to continue executing while the asynchronous call executes on a <xref:System.Threading.ThreadPool> thread.  \\n  \\n The example consists of two classes: the class that contains the method that is called asynchronously, and the class that contains the `Main` method that makes the call.  \\n  \\n For more information and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  \\n  \\n [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]\\n [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]\\n [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  \\n[!code-cpp[AsyncDelegateExamples#4](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/polling.cpp#4)]\\n[!code-csharp[AsyncDelegateExamples#4](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/polling.cs#4)]\\n[!code-vb[AsyncDelegateExamples#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/polling.vb#4)]\"\n  syntax:\n    content: public bool IsCompleted { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the operation is complete; otherwise, `false`.'\n  overload: System.IAsyncResult.IsCompleted*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IAsyncResult.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.IAsyncResult.AsyncState\n  parent: System.IAsyncResult\n  isExternal: false\n  name: AsyncState\n  nameWithType: IAsyncResult.AsyncState\n  fullName: IAsyncResult.AsyncState\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.IAsyncResult.AsyncWaitHandle\n  parent: System.IAsyncResult\n  isExternal: false\n  name: AsyncWaitHandle\n  nameWithType: IAsyncResult.AsyncWaitHandle\n  fullName: IAsyncResult.AsyncWaitHandle\n- uid: System.Threading.WaitHandle\n  parent: System.Threading\n  isExternal: false\n  name: WaitHandle\n  nameWithType: WaitHandle\n  fullName: System.Threading.WaitHandle\n- uid: System.IAsyncResult.CompletedSynchronously\n  parent: System.IAsyncResult\n  isExternal: false\n  name: CompletedSynchronously\n  nameWithType: IAsyncResult.CompletedSynchronously\n  fullName: IAsyncResult.CompletedSynchronously\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.IAsyncResult.IsCompleted\n  parent: System.IAsyncResult\n  isExternal: false\n  name: IsCompleted\n  nameWithType: IAsyncResult.IsCompleted\n  fullName: IAsyncResult.IsCompleted\n- uid: System.IAsyncResult.AsyncState*\n  parent: System.IAsyncResult\n  isExternal: false\n  name: AsyncState\n  nameWithType: IAsyncResult.AsyncState\n  fullName: IAsyncResult.AsyncState\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IAsyncResult.xml\n- uid: System.IAsyncResult.AsyncWaitHandle*\n  parent: System.IAsyncResult\n  isExternal: false\n  name: AsyncWaitHandle\n  nameWithType: IAsyncResult.AsyncWaitHandle\n  fullName: IAsyncResult.AsyncWaitHandle\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IAsyncResult.xml\n- uid: System.IAsyncResult.CompletedSynchronously*\n  parent: System.IAsyncResult\n  isExternal: false\n  name: CompletedSynchronously\n  nameWithType: IAsyncResult.CompletedSynchronously\n  fullName: IAsyncResult.CompletedSynchronously\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IAsyncResult.xml\n- uid: System.IAsyncResult.IsCompleted*\n  parent: System.IAsyncResult\n  isExternal: false\n  name: IsCompleted\n  nameWithType: IAsyncResult.IsCompleted\n  fullName: IAsyncResult.IsCompleted\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IAsyncResult.xml\n"}