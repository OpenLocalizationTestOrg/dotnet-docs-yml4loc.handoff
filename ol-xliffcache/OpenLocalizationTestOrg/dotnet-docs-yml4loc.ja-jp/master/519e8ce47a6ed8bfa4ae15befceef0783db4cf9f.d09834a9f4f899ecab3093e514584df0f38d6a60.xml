{"nodes":[{"content":"Returns the set of captured groups in a single match.","nodes":[{"pos":[0,53],"content":"Returns the set of captured groups in a single match.","nodes":[{"content":"Returns the set of captured groups in a single match.","pos":[0,53]}]}],"pos":[3712,3766],"yaml":true},{"content":"The <xref:System.Text.RegularExpressions.GroupCollection> class is a zero-based collection class that consists of one or more <xref:System.Text.RegularExpressions.Group> objects that provide information about captured groups in a regular expression match. The collection is immutable (read-only) and has no public constructor. A <xref:System.Text.RegularExpressions.GroupCollection> object is returned by the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=fullName> property.  \n  \n The collection contains one or more <xref:System.Text.RegularExpressions.Group?displayProperty=fullName> objects. If the match is successful, the first element in the collection contains the <xref:System.Text.RegularExpressions.Group> object that corresponds to the entire match. Each subsequent element represents a captured group, if the regular expression includes capturing groups. Matches from numbered (unnamed) capturing groups appear in numeric order before matches from named capturing groups. If the match is unsuccessful, the collection contains a single <xref:System.Text.RegularExpressions.Group?displayProperty=fullName> object whose <xref:System.Text.RegularExpressions.Group.Success%2A> property is `false` and whose <xref:System.Text.RegularExpressions.Capture.Value%2A> property equals <xref:System.String.Empty?displayProperty=fullName>. For more information, see the \"Grouping Constructs and Regular Expression Objects\" section in the [Grouping Constructs](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md) article.  \n  \n To iterate through the members of the collection, you should use the collection iteration construct provided by your language (such as `foreach` in C# and `For Each`…`Next` in Visual Basic) instead of retrieving the enumerator that is returned by the <xref:System.Text.RegularExpressions.GroupCollection.GetEnumerator%2A> method. In addition, you can access individual numbered captured groups from the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29> property (the indexer in C#), and you can access individual named captured groups from the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29> property. Note that you can retrieve an array that contains the numbers and names of all capturing groups by calling the <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=fullName> and <xref:System.Text.RegularExpressions.Regex.GetGroupNames%2A?displayProperty=fullName> methods, respectively. Both are instance methods and require that you instantiate a <xref:System.Text.RegularExpressions.Regex> object that represents the regular expression to be matched.","nodes":[{"pos":[0,497],"content":"The <xref:System.Text.RegularExpressions.GroupCollection> class is a zero-based collection class that consists of one or more <xref:System.Text.RegularExpressions.Group> objects that provide information about captured groups in a regular expression match. The collection is immutable (read-only) and has no public constructor. A <xref:System.Text.RegularExpressions.GroupCollection> object is returned by the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=fullName> property.","nodes":[{"content":"The <xref:System.Text.RegularExpressions.GroupCollection> class is a zero-based collection class that consists of one or more <xref:System.Text.RegularExpressions.Group> objects that provide information about captured groups in a regular expression match. The collection is immutable (read-only) and has no public constructor. A <xref:System.Text.RegularExpressions.GroupCollection> object is returned by the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=fullName> property.","pos":[0,497],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.GroupCollection&gt;</ph> class is a zero-based collection class that consists of one or more <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Group&gt;</ph> objects that provide information about captured groups in a regular expression match.","pos":[0,255],"source":"The <xref:System.Text.RegularExpressions.GroupCollection> class is a zero-based collection class that consists of one or more <xref:System.Text.RegularExpressions.Group> objects that provide information about captured groups in a regular expression match."},{"content":"The collection is immutable (read-only) and has no public constructor.","pos":[256,326]},{"content":"A <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.GroupCollection&gt;</ph> object is returned by the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=fullName&gt;</ph> property.","pos":[327,497],"source":" A <xref:System.Text.RegularExpressions.GroupCollection> object is returned by the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=fullName> property."}]}]},{"pos":[504,1563],"content":"The collection contains one or more <xref:System.Text.RegularExpressions.Group?displayProperty=fullName> objects. If the match is successful, the first element in the collection contains the <xref:System.Text.RegularExpressions.Group> object that corresponds to the entire match. Each subsequent element represents a captured group, if the regular expression includes capturing groups. Matches from numbered (unnamed) capturing groups appear in numeric order before matches from named capturing groups. If the match is unsuccessful, the collection contains a single <xref:System.Text.RegularExpressions.Group?displayProperty=fullName> object whose <xref:System.Text.RegularExpressions.Group.Success%2A> property is `false` and whose <xref:System.Text.RegularExpressions.Capture.Value%2A> property equals <xref:System.String.Empty?displayProperty=fullName>. For more information, see the \"Grouping Constructs and Regular Expression Objects\" section in the [Grouping Constructs](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md) article.","nodes":[{"content":"The collection contains one or more <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Group?displayProperty=fullName&gt;</ph> objects.","pos":[0,113],"source":"The collection contains one or more <xref:System.Text.RegularExpressions.Group?displayProperty=fullName> objects."},{"content":"If the match is successful, the first element in the collection contains the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Group&gt;</ph> object that corresponds to the entire match.","pos":[114,279],"source":" If the match is successful, the first element in the collection contains the <xref:System.Text.RegularExpressions.Group> object that corresponds to the entire match."},{"content":"Each subsequent element represents a captured group, if the regular expression includes capturing groups.","pos":[280,385]},{"content":"Matches from numbered (unnamed) capturing groups appear in numeric order before matches from named capturing groups.","pos":[386,502]},{"content":"If the match is unsuccessful, the collection contains a single <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Group?displayProperty=fullName&gt;</ph> object whose <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Group.Success%2A&gt;</ph> property is <ph id=\"ph3\">`false`</ph> and whose <ph id=\"ph4\">&lt;xref:System.Text.RegularExpressions.Capture.Value%2A&gt;</ph> property equals <ph id=\"ph5\">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>.","pos":[503,856],"source":" If the match is unsuccessful, the collection contains a single <xref:System.Text.RegularExpressions.Group?displayProperty=fullName> object whose <xref:System.Text.RegularExpressions.Group.Success%2A> property is `false` and whose <xref:System.Text.RegularExpressions.Capture.Value%2A> property equals <xref:System.String.Empty?displayProperty=fullName>."},{"content":"For more information, see the \"Grouping Constructs and Regular Expression Objects\" section in the <bpt id=\"p1\">[</bpt>Grouping Constructs<ept id=\"p1\">](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md)</ept> article.","pos":[857,1059],"source":" For more information, see the \"Grouping Constructs and Regular Expression Objects\" section in the [Grouping Constructs](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md) article."}]},{"pos":[1570,2706],"content":"To iterate through the members of the collection, you should use the collection iteration construct provided by your language (such as `foreach` in C# and `For Each`…`Next` in Visual Basic) instead of retrieving the enumerator that is returned by the <xref:System.Text.RegularExpressions.GroupCollection.GetEnumerator%2A> method. In addition, you can access individual numbered captured groups from the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29> property (the indexer in C#), and you can access individual named captured groups from the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29> property. Note that you can retrieve an array that contains the numbers and names of all capturing groups by calling the <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=fullName> and <xref:System.Text.RegularExpressions.Regex.GetGroupNames%2A?displayProperty=fullName> methods, respectively. Both are instance methods and require that you instantiate a <xref:System.Text.RegularExpressions.Regex> object that represents the regular expression to be matched.","nodes":[{"content":"To iterate through the members of the collection, you should use the collection iteration construct provided by your language (such as <ph id=\"ph1\">`foreach`</ph> in C# and <ph id=\"ph2\">`For Each`</ph>…<ph id=\"ph3\">`Next`</ph>","pos":[0,172],"source":"To iterate through the members of the collection, you should use the collection iteration construct provided by your language (such as `foreach` in C# and `For Each`…`Next`"},{"content":"in Visual Basic) instead of retrieving the enumerator that is returned by the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.GroupCollection.GetEnumerator%2A&gt;</ph> method.","pos":[173,329],"source":" in Visual Basic) instead of retrieving the enumerator that is returned by the <xref:System.Text.RegularExpressions.GroupCollection.GetEnumerator%2A> method."},{"content":"In addition, you can access individual numbered captured groups from the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29&gt;</ph> property (the indexer in C#), and you can access individual named captured groups from the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29&gt;</ph> property.","pos":[330,658],"source":" In addition, you can access individual numbered captured groups from the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29> property (the indexer in C#), and you can access individual named captured groups from the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29> property."},{"content":"Note that you can retrieve an array that contains the numbers and names of all capturing groups by calling the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex.GetGroupNames%2A?displayProperty=fullName&gt;</ph> methods, respectively.","pos":[659,970],"source":" Note that you can retrieve an array that contains the numbers and names of all capturing groups by calling the <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=fullName> and <xref:System.Text.RegularExpressions.Regex.GetGroupNames%2A?displayProperty=fullName> methods, respectively."},{"content":"Both are instance methods and require that you instantiate a <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> object that represents the regular expression to be matched.","pos":[971,1136],"source":" Both are instance methods and require that you instantiate a <xref:System.Text.RegularExpressions.Regex> object that represents the regular expression to be matched."}]}],"pos":[3777,6492],"yaml":true,"extradata":"MT"},{"content":"Copies all the elements of the collection to the given array beginning at the given index.","nodes":[{"pos":[0,90],"content":"Copies all the elements of the collection to the given array beginning at the given index.","nodes":[{"content":"Copies all the elements of the collection to the given array beginning at the given index.","pos":[0,90]}]}],"pos":[10403,10494],"yaml":true},{"content":"Because the entire collection is copied into the array starting at the given index, the destination array must be at least as large as the collection.  \n  \n> [!WARNING]\n>  This member is not present in the [!INCLUDE[net_portable](~/includes/net-portable-md.md)]. If you are developing applications that target the [!INCLUDE[net_portable](~/includes/net-portable-md.md)], use the <xref:System.Text.RegularExpressions.GroupCollection.System%23Collections%23ICollection%23CopyTo%2A?displayProperty=fullName> method instead.","nodes":[{"pos":[0,150],"content":"Because the entire collection is copied into the array starting at the given index, the destination array must be at least as large as the collection.","nodes":[{"content":"Because the entire collection is copied into the array starting at the given index, the destination array must be at least as large as the collection.","pos":[0,150]}]},{"pos":[158,520],"content":"[!WARNING]\n This member is not present in the [!INCLUDE[net_portable](~/includes/net-portable-md.md)]. If you are developing applications that target the [!INCLUDE[net_portable](~/includes/net-portable-md.md)], use the <xref:System.Text.RegularExpressions.GroupCollection.System%23Collections%23ICollection%23CopyTo%2A?displayProperty=fullName> method instead.","leadings":["","> "],"nodes":[{"content":" This member is not present in the [!INCLUDE[net_portable](~/includes/net-portable-md.md)]. If you are developing applications that target the [!INCLUDE[net_portable](~/includes/net-portable-md.md)], use the <xref:System.Text.RegularExpressions.GroupCollection.System%23Collections%23ICollection%23CopyTo%2A?displayProperty=fullName> method instead.","pos":[11,360],"nodes":[{"content":"This member is not present in the <ph id=\"ph1\">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph>.","pos":[1,91],"source":" This member is not present in the [!INCLUDE[net_portable](~/includes/net-portable-md.md)]."},{"content":"If you are developing applications that target the <ph id=\"ph1\">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph>, use the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.GroupCollection.System%23Collections%23ICollection%23CopyTo%2A?displayProperty=fullName&gt;</ph> method instead.","pos":[92,349],"source":" If you are developing applications that target the [!INCLUDE[net_portable](~/includes/net-portable-md.md)], use the <xref:System.Text.RegularExpressions.GroupCollection.System%23Collections%23ICollection%23CopyTo%2A?displayProperty=fullName> method instead."}]}]}],"pos":[10505,11031],"yaml":true,"extradata":"MT"},{"content":"The array the collection is to be copied into.","nodes":[{"pos":[0,46],"content":"The array the collection is to be copied into.","nodes":[{"content":"The array the collection is to be copied into.","pos":[0,46]}]}],"pos":[12294,12341],"yaml":true},{"content":"The position in the destination array where the copying is to begin.","nodes":[{"pos":[0,68],"content":"The position in the destination array where the copying is to begin.","nodes":[{"content":"The position in the destination array where the copying is to begin.","pos":[0,68]}]}],"pos":[12406,12475],"yaml":true},{"content":"<code>array</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>array</code> is `null`."}],"pos":[12658,12688],"yaml":true},{"content":"<code>arrayIndex</code> is outside the bounds of <code>array</code>.  \n  \n -or-  \n  \n <code>arrayIndex</code> plus <xref href=\"System.Text.RegularExpressions.GroupCollection.Count\"></xref> is outside the bounds of <code>array</code>.","nodes":[{"pos":[0,68],"content":"<ph id=\"ph1\">&lt;code&gt;arrayIndex&lt;/code&gt;</ph> is outside the bounds of <ph id=\"ph2\">&lt;code&gt;array&lt;/code&gt;</ph>.","source":"<code>arrayIndex</code> is outside the bounds of <code>array</code>."},{"pos":[75,79],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[86,233],"content":"<ph id=\"ph1\">&lt;code&gt;arrayIndex&lt;/code&gt;</ph> plus <ph id=\"ph2\">&lt;xref href=\"System.Text.RegularExpressions.GroupCollection.Count\"&gt;&lt;/xref&gt;</ph> is outside the bounds of <ph id=\"ph3\">&lt;code&gt;array&lt;/code&gt;</ph>.","source":"<code>arrayIndex</code> plus <xref href=\"System.Text.RegularExpressions.GroupCollection.Count\"></xref> is outside the bounds of <code>array</code>."}],"pos":[12796,13038],"yaml":true},{"content":"Returns the number of groups in the collection.","nodes":[{"pos":[0,47],"content":"Returns the number of groups in the collection.","nodes":[{"content":"Returns the number of groups in the collection.","pos":[0,47]}]}],"pos":[15391,15439],"yaml":true},{"content":"The <xref:System.Text.RegularExpressions.GroupCollection> object always has at least one member. If a match is unsuccessful, the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=fullName> property returns a <xref:System.Text.RegularExpressions.GroupCollection> object that contains a single member.","nodes":[{"pos":[0,318],"content":"The <xref:System.Text.RegularExpressions.GroupCollection> object always has at least one member. If a match is unsuccessful, the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=fullName> property returns a <xref:System.Text.RegularExpressions.GroupCollection> object that contains a single member.","nodes":[{"content":"The <xref:System.Text.RegularExpressions.GroupCollection> object always has at least one member. If a match is unsuccessful, the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=fullName> property returns a <xref:System.Text.RegularExpressions.GroupCollection> object that contains a single member.","pos":[0,318],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.GroupCollection&gt;</ph> object always has at least one member.","pos":[0,96],"source":"The <xref:System.Text.RegularExpressions.GroupCollection> object always has at least one member."},{"content":"If a match is unsuccessful, the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=fullName&gt;</ph> property returns a <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.GroupCollection&gt;</ph> object that contains a single member.","pos":[97,318],"source":" If a match is unsuccessful, the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=fullName> property returns a <xref:System.Text.RegularExpressions.GroupCollection> object that contains a single member."}]}]}],"pos":[15450,15769],"yaml":true,"extradata":"MT"},{"content":"The number of groups in the collection.","nodes":[{"pos":[0,39],"content":"The number of groups in the collection.","nodes":[{"content":"The number of groups in the collection.","pos":[0,39]}]}],"pos":[15874,15914],"yaml":true},{"content":"Provides an enumerator that iterates through the collection.","nodes":[{"pos":[0,60],"content":"Provides an enumerator that iterates through the collection.","nodes":[{"content":"Provides an enumerator that iterates through the collection.","pos":[0,60]}]}],"pos":[17547,17608],"yaml":true},{"content":"Instead of calling the <xref:System.Text.RegularExpressions.GroupCollection.GetEnumerator%2A> method to retrieve an enumerator that lets you iterate through the <xref:System.Text.RegularExpressions.Group> objects in the collection, you should use the group iteration construct (such as `foreach` in C# and `For Each`…`Next` in Visual Basic) that is provided by your programming language.","nodes":[{"pos":[0,387],"content":"Instead of calling the <xref:System.Text.RegularExpressions.GroupCollection.GetEnumerator%2A> method to retrieve an enumerator that lets you iterate through the <xref:System.Text.RegularExpressions.Group> objects in the collection, you should use the group iteration construct (such as `foreach` in C# and `For Each`…`Next` in Visual Basic) that is provided by your programming language.","nodes":[{"content":"Instead of calling the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.GroupCollection.GetEnumerator%2A&gt;</ph> method to retrieve an enumerator that lets you iterate through the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Group&gt;</ph> objects in the collection, you should use the group iteration construct (such as <ph id=\"ph3\">`foreach`</ph> in C# and <ph id=\"ph4\">`For Each`</ph>…<ph id=\"ph5\">`Next`</ph>","pos":[0,323],"source":"Instead of calling the <xref:System.Text.RegularExpressions.GroupCollection.GetEnumerator%2A> method to retrieve an enumerator that lets you iterate through the <xref:System.Text.RegularExpressions.Group> objects in the collection, you should use the group iteration construct (such as `foreach` in C# and `For Each`…`Next`"},{"content":"in Visual Basic) that is provided by your programming language.","pos":[324,387]}]}],"pos":[17619,18007],"yaml":true,"extradata":"MT"},{"content":"An enumerator that contains all <xref href=\"System.Text.RegularExpressions.Group\"></xref> objects in the <xref href=\"System.Text.RegularExpressions.GroupCollection\"></xref>.","nodes":[{"pos":[0,173],"content":"An enumerator that contains all <ph id=\"ph1\">&lt;xref href=\"System.Text.RegularExpressions.Group\"&gt;&lt;/xref&gt;</ph> objects in the <ph id=\"ph2\">&lt;xref href=\"System.Text.RegularExpressions.GroupCollection\"&gt;&lt;/xref&gt;</ph>.","source":"An enumerator that contains all <xref href=\"System.Text.RegularExpressions.Group\"></xref> objects in the <xref href=\"System.Text.RegularExpressions.GroupCollection\"></xref>."}],"pos":[18179,18353],"yaml":true},{"content":"Gets a value that indicates whether the collection is read-only.","nodes":[{"pos":[0,64],"content":"Gets a value that indicates whether the collection is read-only.","nodes":[{"content":"Gets a value that indicates whether the collection is read-only.","pos":[0,64]}]}],"pos":[19972,20037],"yaml":true},{"content":"`true` in all cases.","nodes":[{"pos":[0,20],"content":"<ph id=\"ph1\">`true`</ph> in all cases.","source":"`true` in all cases."}],"pos":[20150,20173],"yaml":true},{"content":"Gets a value that indicates whether access to the <xref href=\"System.Text.RegularExpressions.GroupCollection\"></xref> is synchronized (thread-safe).","nodes":[{"pos":[0,148],"content":"Gets a value that indicates whether access to the <ph id=\"ph1\">&lt;xref href=\"System.Text.RegularExpressions.GroupCollection\"&gt;&lt;/xref&gt;</ph> is synchronized (thread-safe).","source":"Gets a value that indicates whether access to the <xref href=\"System.Text.RegularExpressions.GroupCollection\"></xref> is synchronized (thread-safe)."}],"pos":[21509,21658],"yaml":true},{"content":"> [!WARNING]\n>  This member is not present in the [!INCLUDE[net_portable](~/includes/net-portable-md.md)]. If you are developing applications that target the [!INCLUDE[net_portable](~/includes/net-portable-md.md)], use the <xref:System.Text.RegularExpressions.CaptureCollection.System%23Collections%23ICollection%23IsSynchronized%2A?displayProperty=fullName> property instead.","nodes":[{"pos":[2,376],"content":"[!WARNING]\n This member is not present in the [!INCLUDE[net_portable](~/includes/net-portable-md.md)]. If you are developing applications that target the [!INCLUDE[net_portable](~/includes/net-portable-md.md)], use the <xref:System.Text.RegularExpressions.CaptureCollection.System%23Collections%23ICollection%23IsSynchronized%2A?displayProperty=fullName> property instead.","leadings":["","> "],"nodes":[{"content":" This member is not present in the [!INCLUDE[net_portable](~/includes/net-portable-md.md)]. If you are developing applications that target the [!INCLUDE[net_portable](~/includes/net-portable-md.md)], use the <xref:System.Text.RegularExpressions.CaptureCollection.System%23Collections%23ICollection%23IsSynchronized%2A?displayProperty=fullName> property instead.","pos":[11,372],"nodes":[{"content":"This member is not present in the <ph id=\"ph1\">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph>.","pos":[1,91],"source":" This member is not present in the [!INCLUDE[net_portable](~/includes/net-portable-md.md)]."},{"content":"If you are developing applications that target the <ph id=\"ph1\">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph>, use the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.CaptureCollection.System%23Collections%23ICollection%23IsSynchronized%2A?displayProperty=fullName&gt;</ph> property instead.","pos":[92,361],"source":" If you are developing applications that target the [!INCLUDE[net_portable](~/includes/net-portable-md.md)], use the <xref:System.Text.RegularExpressions.CaptureCollection.System%23Collections%23ICollection%23IsSynchronized%2A?displayProperty=fullName> property instead."}]}]}],"pos":[21669,22058],"yaml":true,"extradata":"MT"},{"content":"`false` in all cases.","nodes":[{"pos":[0,21],"content":"<ph id=\"ph1\">`false`</ph> in all cases.","source":"`false` in all cases."}],"pos":[22175,22199],"yaml":true},{"content":"Enables access to a member of the collection by integer index.","nodes":[{"pos":[0,62],"content":"Enables access to a member of the collection by integer index.","nodes":[{"content":"Enables access to a member of the collection by integer index.","pos":[0,62]}]}],"pos":[23542,23605],"yaml":true},{"content":"The <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29> property is the index (in C#) or the default property (in Visual Basic) of the <xref:System.Text.RegularExpressions.GroupCollection> class. It allows you to enumerate the members of the collection by using a `foreach` statement in C# or a `For Each` statement in Visual Basic.  \n  \n You can also use this property to retrieve individual captured groups by their index number. You can retrieve an array that contains the numbers of all capturing groups in a regular expression by calling the instance <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=fullName> method. You can also map named capturing groups to their numbers by calling the instance <xref:System.Text.RegularExpressions.Regex.GroupNumberFromName%2A?displayProperty=fullName> method.  \n  \n You can determine the number of items in the collection by retrieving the value of the <xref:System.Text.RegularExpressions.GroupCollection.Count%2A> property. Valid values for the `groupnum` parameter range from 0 to one less than the number of items in the collection.  \n  \n The <xref:System.Text.RegularExpressions.GroupCollection> object returned by the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=fullName> property always has at least one member. If the regular expression engine cannot find any matches in a particular input string, the single <xref:System.Text.RegularExpressions.Group> object in the collection has its <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=fullName> property set to `false` and its `Group.Value` property set to <xref:System.String.Empty?displayProperty=fullName>.  \n  \n If `groupnum` is not the index of a member of the collection, or if `groupnum` is the index of a capturing group that has not been matched in the input string, the method returns a <xref:System.Text.RegularExpressions.Group> object whose <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=fullName> property is `false` and whose `Group.Value` property is <xref:System.String.Empty?displayProperty=fullName>.","nodes":[{"pos":[0,357],"content":"The <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29> property is the index (in C#) or the default property (in Visual Basic) of the <xref:System.Text.RegularExpressions.GroupCollection> class. It allows you to enumerate the members of the collection by using a `foreach` statement in C# or a `For Each` statement in Visual Basic.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29&gt;</ph> property is the index (in C#) or the default property (in Visual Basic) of the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.GroupCollection&gt;</ph> class.","pos":[0,220],"source":"The <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29> property is the index (in C#) or the default property (in Visual Basic) of the <xref:System.Text.RegularExpressions.GroupCollection> class."},{"content":"It allows you to enumerate the members of the collection by using a <ph id=\"ph1\">`foreach`</ph> statement in C# or a <ph id=\"ph2\">`For Each`</ph> statement in Visual Basic.","pos":[221,357],"source":" It allows you to enumerate the members of the collection by using a `foreach` statement in C# or a `For Each` statement in Visual Basic."}]},{"pos":[364,857],"content":"You can also use this property to retrieve individual captured groups by their index number. You can retrieve an array that contains the numbers of all capturing groups in a regular expression by calling the instance <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=fullName> method. You can also map named capturing groups to their numbers by calling the instance <xref:System.Text.RegularExpressions.Regex.GroupNumberFromName%2A?displayProperty=fullName> method.","nodes":[{"content":"You can also use this property to retrieve individual captured groups by their index number. You can retrieve an array that contains the numbers of all capturing groups in a regular expression by calling the instance <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=fullName> method. You can also map named capturing groups to their numbers by calling the instance <xref:System.Text.RegularExpressions.Regex.GroupNumberFromName%2A?displayProperty=fullName> method.","pos":[0,493],"nodes":[{"content":"You can also use this property to retrieve individual captured groups by their index number.","pos":[0,92]},{"content":"You can retrieve an array that contains the numbers of all capturing groups in a regular expression by calling the instance <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=fullName&gt;</ph> method.","pos":[93,312],"source":" You can retrieve an array that contains the numbers of all capturing groups in a regular expression by calling the instance <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=fullName> method."},{"content":"You can also map named capturing groups to their numbers by calling the instance <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.GroupNumberFromName%2A?displayProperty=fullName&gt;</ph> method.","pos":[313,493],"source":" You can also map named capturing groups to their numbers by calling the instance <xref:System.Text.RegularExpressions.Regex.GroupNumberFromName%2A?displayProperty=fullName> method."}]}]},{"pos":[864,1134],"content":"You can determine the number of items in the collection by retrieving the value of the <xref:System.Text.RegularExpressions.GroupCollection.Count%2A> property. Valid values for the `groupnum` parameter range from 0 to one less than the number of items in the collection.","nodes":[{"content":"You can determine the number of items in the collection by retrieving the value of the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.GroupCollection.Count%2A&gt;</ph> property.","pos":[0,159],"source":"You can determine the number of items in the collection by retrieving the value of the <xref:System.Text.RegularExpressions.GroupCollection.Count%2A> property."},{"content":"Valid values for the <ph id=\"ph1\">`groupnum`</ph> parameter range from 0 to one less than the number of items in the collection.","pos":[160,270],"source":" Valid values for the `groupnum` parameter range from 0 to one less than the number of items in the collection."}]},{"pos":[1141,1711],"content":"The <xref:System.Text.RegularExpressions.GroupCollection> object returned by the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=fullName> property always has at least one member. If the regular expression engine cannot find any matches in a particular input string, the single <xref:System.Text.RegularExpressions.Group> object in the collection has its <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=fullName> property set to `false` and its `Group.Value` property set to <xref:System.String.Empty?displayProperty=fullName>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.GroupCollection&gt;</ph> object returned by the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=fullName&gt;</ph> property always has at least one member.","pos":[0,200],"source":"The <xref:System.Text.RegularExpressions.GroupCollection> object returned by the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=fullName> property always has at least one member."},{"content":"If the regular expression engine cannot find any matches in a particular input string, the single <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Group&gt;</ph> object in the collection has its <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=fullName&gt;</ph> property set to <ph id=\"ph3\">`false`</ph> and its <ph id=\"ph4\">`Group.Value`</ph> property set to <ph id=\"ph5\">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>.","pos":[201,570],"source":" If the regular expression engine cannot find any matches in a particular input string, the single <xref:System.Text.RegularExpressions.Group> object in the collection has its <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=fullName> property set to `false` and its `Group.Value` property set to <xref:System.String.Empty?displayProperty=fullName>."}]},{"pos":[1718,2144],"content":"If <ph id=\"ph1\">`groupnum`</ph> is not the index of a member of the collection, or if <ph id=\"ph2\">`groupnum`</ph> is the index of a capturing group that has not been matched in the input string, the method returns a <ph id=\"ph3\">&lt;xref:System.Text.RegularExpressions.Group&gt;</ph> object whose <ph id=\"ph4\">&lt;xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=fullName&gt;</ph> property is <ph id=\"ph5\">`false`</ph> and whose <ph id=\"ph6\">`Group.Value`</ph> property is <ph id=\"ph7\">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>.","source":"If `groupnum` is not the index of a member of the collection, or if `groupnum` is the index of a capturing group that has not been matched in the input string, the method returns a <xref:System.Text.RegularExpressions.Group> object whose <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=fullName> property is `false` and whose `Group.Value` property is <xref:System.String.Empty?displayProperty=fullName>."}],"pos":[23616,25771],"yaml":true,"extradata":"MT"},{"content":"The zero-based index of the collection member to be retrieved.","nodes":[{"pos":[0,62],"content":"The zero-based index of the collection member to be retrieved.","nodes":[{"content":"The zero-based index of the collection member to be retrieved.","pos":[0,62]}]}],"pos":[27410,27473],"yaml":true},{"content":"The member of the collection specified by <code>groupnum</code>.","nodes":[{"pos":[0,64],"content":"The member of the collection specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">groupnum</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The member of the collection specified by <code>groupnum</code>."}],"pos":[27553,27618],"yaml":true},{"content":"Enables access to a member of the collection by string index.","nodes":[{"pos":[0,61],"content":"Enables access to a member of the collection by string index.","nodes":[{"content":"Enables access to a member of the collection by string index.","pos":[0,61]}]}],"pos":[29261,29323],"yaml":true},{"content":"`groupName` can be either the name of a capturing group that is defined by the `(?<`*name*`>)` element in a regular expression, or the string representation of the number of a capturing group that is defined by a grouping construct. For more information about groups in regular expressions, see [Grouping Constructs](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md).  \n  \n You can retrieve the names of all the captured groups in a <xref:System.Text.RegularExpressions.Regex> object by calling the <xref:System.Text.RegularExpressions.Regex.GetGroupNames%2A?displayProperty=fullName> method. You can also map the numbers of capturing groups in a regular expression to their names by calling the <xref:System.Text.RegularExpressions.Regex.GroupNameFromNumber%2A?displayProperty=fullName> method. Individual names from the array can then be passed to the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29> property to retrieve the captured string.  \n  \n If `groupname` is not the name of a capturing group in the collection, or if `groupname` is the name of a capturing group that has not been matched in the input string, the method returns a <xref:System.Text.RegularExpressions.Group> object whose <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=fullName> property is `false` and whose `Group.Value` property is <xref:System.String.Empty?displayProperty=fullName>.","nodes":[{"pos":[0,391],"content":"`groupName` can be either the name of a capturing group that is defined by the `(?<`*name*`>)` element in a regular expression, or the string representation of the number of a capturing group that is defined by a grouping construct. For more information about groups in regular expressions, see [Grouping Constructs](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md).","nodes":[{"content":"<ph id=\"ph1\">`groupName`</ph> can be either the name of a capturing group that is defined by the <ph id=\"ph2\">`(?&lt;`</ph><bpt id=\"p1\">*</bpt>name<ept id=\"p1\">*</ept><ph id=\"ph3\">`&gt;)`</ph> element in a regular expression, or the string representation of the number of a capturing group that is defined by a grouping construct.","pos":[0,232],"source":"`groupName` can be either the name of a capturing group that is defined by the `(?<`*name*`>)` element in a regular expression, or the string representation of the number of a capturing group that is defined by a grouping construct."},{"content":"For more information about groups in regular expressions, see <bpt id=\"p1\">[</bpt>Grouping Constructs<ept id=\"p1\">](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md)</ept>.","pos":[233,391],"source":" For more information about groups in regular expressions, see [Grouping Constructs](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md)."}]},{"pos":[398,997],"content":"You can retrieve the names of all the captured groups in a <xref:System.Text.RegularExpressions.Regex> object by calling the <xref:System.Text.RegularExpressions.Regex.GetGroupNames%2A?displayProperty=fullName> method. You can also map the numbers of capturing groups in a regular expression to their names by calling the <xref:System.Text.RegularExpressions.Regex.GroupNameFromNumber%2A?displayProperty=fullName> method. Individual names from the array can then be passed to the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29> property to retrieve the captured string.","nodes":[{"content":"You can retrieve the names of all the captured groups in a <xref:System.Text.RegularExpressions.Regex> object by calling the <xref:System.Text.RegularExpressions.Regex.GetGroupNames%2A?displayProperty=fullName> method. You can also map the numbers of capturing groups in a regular expression to their names by calling the <xref:System.Text.RegularExpressions.Regex.GroupNameFromNumber%2A?displayProperty=fullName> method. Individual names from the array can then be passed to the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29> property to retrieve the captured string.","pos":[0,599],"nodes":[{"content":"You can retrieve the names of all the captured groups in a <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> object by calling the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Regex.GetGroupNames%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,218],"source":"You can retrieve the names of all the captured groups in a <xref:System.Text.RegularExpressions.Regex> object by calling the <xref:System.Text.RegularExpressions.Regex.GetGroupNames%2A?displayProperty=fullName> method."},{"content":"You can also map the numbers of capturing groups in a regular expression to their names by calling the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.GroupNameFromNumber%2A?displayProperty=fullName&gt;</ph> method.","pos":[219,421],"source":" You can also map the numbers of capturing groups in a regular expression to their names by calling the <xref:System.Text.RegularExpressions.Regex.GroupNameFromNumber%2A?displayProperty=fullName> method."},{"content":"Individual names from the array can then be passed to the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29&gt;</ph> property to retrieve the captured string.","pos":[422,599],"source":" Individual names from the array can then be passed to the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29> property to retrieve the captured string."}]}]},{"pos":[1004,1439],"content":"If <ph id=\"ph1\">`groupname`</ph> is not the name of a capturing group in the collection, or if <ph id=\"ph2\">`groupname`</ph> is the name of a capturing group that has not been matched in the input string, the method returns a <ph id=\"ph3\">&lt;xref:System.Text.RegularExpressions.Group&gt;</ph> object whose <ph id=\"ph4\">&lt;xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=fullName&gt;</ph> property is <ph id=\"ph5\">`false`</ph> and whose <ph id=\"ph6\">`Group.Value`</ph> property is <ph id=\"ph7\">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>.","source":"If `groupname` is not the name of a capturing group in the collection, or if `groupname` is the name of a capturing group that has not been matched in the input string, the method returns a <xref:System.Text.RegularExpressions.Group> object whose <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=fullName> property is `false` and whose `Group.Value` property is <xref:System.String.Empty?displayProperty=fullName>."}],"pos":[29334,30780],"yaml":true,"extradata":"MT"},{"content":"The name of a capturing group.","nodes":[{"pos":[0,30],"content":"The name of a capturing group.","nodes":[{"content":"The name of a capturing group.","pos":[0,30]}]}],"pos":[32559,32590],"yaml":true},{"content":"The member of the collection specified by <code>groupname</code>.","nodes":[{"pos":[0,65],"content":"The member of the collection specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">groupname</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The member of the collection specified by <code>groupname</code>."}],"pos":[32670,32736],"yaml":true},{"content":"Gets an object that can be used to synchronize access to the <xref href=\"System.Text.RegularExpressions.GroupCollection\"></xref>.","nodes":[{"pos":[0,129],"content":"Gets an object that can be used to synchronize access to the <ph id=\"ph1\">&lt;xref href=\"System.Text.RegularExpressions.GroupCollection\"&gt;&lt;/xref&gt;</ph>.","source":"Gets an object that can be used to synchronize access to the <xref href=\"System.Text.RegularExpressions.GroupCollection\"></xref>."}],"pos":[34334,34464],"yaml":true},{"content":"> [!WARNING]\n>  This member is not present in the [!INCLUDE[net_portable](~/includes/net-portable-md.md)]. If you are developing applications that target the [!INCLUDE[net_portable](~/includes/net-portable-md.md)], use the <xref:System.Text.RegularExpressions.GroupCollection.System%23Collections%23ICollection%23SyncRoot%2A?displayProperty=fullName> property instead.","nodes":[{"pos":[2,368],"content":"[!WARNING]\n This member is not present in the [!INCLUDE[net_portable](~/includes/net-portable-md.md)]. If you are developing applications that target the [!INCLUDE[net_portable](~/includes/net-portable-md.md)], use the <xref:System.Text.RegularExpressions.GroupCollection.System%23Collections%23ICollection%23SyncRoot%2A?displayProperty=fullName> property instead.","leadings":["","> "],"nodes":[{"content":" This member is not present in the [!INCLUDE[net_portable](~/includes/net-portable-md.md)]. If you are developing applications that target the [!INCLUDE[net_portable](~/includes/net-portable-md.md)], use the <xref:System.Text.RegularExpressions.GroupCollection.System%23Collections%23ICollection%23SyncRoot%2A?displayProperty=fullName> property instead.","pos":[11,364],"nodes":[{"content":"This member is not present in the <ph id=\"ph1\">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph>.","pos":[1,91],"source":" This member is not present in the [!INCLUDE[net_portable](~/includes/net-portable-md.md)]."},{"content":"If you are developing applications that target the <ph id=\"ph1\">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph>, use the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.GroupCollection.System%23Collections%23ICollection%23SyncRoot%2A?displayProperty=fullName&gt;</ph> property instead.","pos":[92,353],"source":" If you are developing applications that target the [!INCLUDE[net_portable](~/includes/net-portable-md.md)], use the <xref:System.Text.RegularExpressions.GroupCollection.System%23Collections%23ICollection%23SyncRoot%2A?displayProperty=fullName> property instead."}]}]}],"pos":[34475,34856],"yaml":true,"extradata":"MT"},{"content":"A copy of the <xref href=\"System.Text.RegularExpressions.Match\"></xref> object to synchronize.","nodes":[{"pos":[0,94],"content":"A copy of the <ph id=\"ph1\">&lt;xref href=\"System.Text.RegularExpressions.Match\"&gt;&lt;/xref&gt;</ph> object to synchronize.","source":"A copy of the <xref href=\"System.Text.RegularExpressions.Match\"></xref> object to synchronize."}],"pos":[34968,35063],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Text.RegularExpressions.GroupCollection\n  commentId: T:System.Text.RegularExpressions.GroupCollection\n  id: GroupCollection\n  children:\n  - System.Text.RegularExpressions.GroupCollection.CopyTo(System.Array,System.Int32)\n  - System.Text.RegularExpressions.GroupCollection.CopyTo(System.Text.RegularExpressions.Group[],System.Int32)\n  - System.Text.RegularExpressions.GroupCollection.Count\n  - System.Text.RegularExpressions.GroupCollection.GetEnumerator\n  - System.Text.RegularExpressions.GroupCollection.IsReadOnly\n  - System.Text.RegularExpressions.GroupCollection.IsSynchronized\n  - System.Text.RegularExpressions.GroupCollection.Item(System.Int32)\n  - System.Text.RegularExpressions.GroupCollection.Item(System.String)\n  - System.Text.RegularExpressions.GroupCollection.SyncRoot\n  - System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Add(System.Text.RegularExpressions.Group)\n  - System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Clear\n  - System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Contains(System.Text.RegularExpressions.Group)\n  - System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Remove(System.Text.RegularExpressions.Group)\n  - System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IEnumerable{System#Text#RegularExpressions#Group}#GetEnumerator\n  - System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#IndexOf(System.Text.RegularExpressions.Group)\n  - System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#Insert(System.Int32,System.Text.RegularExpressions.Group)\n  - System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#Item(System.Int32)\n  - System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#RemoveAt(System.Int32)\n  - System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  - System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#IsSynchronized\n  - System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#SyncRoot\n  - System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Add(System.Object)\n  - System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Clear\n  - System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Contains(System.Object)\n  - System.Text.RegularExpressions.GroupCollection.System#Collections#IList#IndexOf(System.Object)\n  - System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Insert(System.Int32,System.Object)\n  - System.Text.RegularExpressions.GroupCollection.System#Collections#IList#IsFixedSize\n  - System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Item(System.Int32)\n  - System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Remove(System.Object)\n  - System.Text.RegularExpressions.GroupCollection.System#Collections#IList#RemoveAt(System.Int32)\n  langs:\n  - csharp\n  name: GroupCollection\n  nameWithType: GroupCollection\n  fullName: System.Text.RegularExpressions.GroupCollection\n  type: Class\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Returns the set of captured groups in a single match.\n  remarks: \"The <xref:System.Text.RegularExpressions.GroupCollection> class is a zero-based collection class that consists of one or more <xref:System.Text.RegularExpressions.Group> objects that provide information about captured groups in a regular expression match. The collection is immutable (read-only) and has no public constructor. A <xref:System.Text.RegularExpressions.GroupCollection> object is returned by the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=fullName> property.  \\n  \\n The collection contains one or more <xref:System.Text.RegularExpressions.Group?displayProperty=fullName> objects. If the match is successful, the first element in the collection contains the <xref:System.Text.RegularExpressions.Group> object that corresponds to the entire match. Each subsequent element represents a captured group, if the regular expression includes capturing groups. Matches from numbered (unnamed) capturing groups appear in numeric order before matches from named capturing groups. If the match is unsuccessful, the collection contains a single <xref:System.Text.RegularExpressions.Group?displayProperty=fullName> object whose <xref:System.Text.RegularExpressions.Group.Success%2A> property is `false` and whose <xref:System.Text.RegularExpressions.Capture.Value%2A> property equals <xref:System.String.Empty?displayProperty=fullName>. For more information, see the \\\"Grouping Constructs and Regular Expression Objects\\\" section in the [Grouping Constructs](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md) article.  \\n  \\n To iterate through the members of the collection, you should use the collection iteration construct provided by your language (such as `foreach` in C# and `For Each`…`Next` in Visual Basic) instead of retrieving the enumerator that is returned by the <xref:System.Text.RegularExpressions.GroupCollection.GetEnumerator%2A> method. In addition, you can access individual numbered captured groups from the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29> property (the indexer in C#), and you can access individual named captured groups from the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29> property. Note that you can retrieve an array that contains the numbers and names of all capturing groups by calling the <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=fullName> and <xref:System.Text.RegularExpressions.Regex.GetGroupNames%2A?displayProperty=fullName> methods, respectively. Both are instance methods and require that you instantiate a <xref:System.Text.RegularExpressions.Regex> object that represents the regular expression to be matched.\"\n  example:\n  - \"The following example uses a regular expression with capturing groups to extract information about trademarks and registered trademarks used in text. The regular expression pattern is `\\\\b(\\\\w+?)([\\\\u00AE\\\\u2122])`, which is interpreted as shown in the following table.  \\n  \\n|Pattern|Description|  \\n|-------------|-----------------|  \\n|`\\\\b`|Look for a word boundary.|  \\n|`(\\\\w+?)`|Look for one or more word characters. Together, these form the trademarked name. (Note that this regular expression assumes that a trademark consists of a single word.) This is the first capturing group.|  \\n|`([\\\\u00AE\\\\u2122])`|Look for either the ® or the ™ character. This is the second capturing group.|  \\n  \\n For each match, the <xref:System.Text.RegularExpressions.GroupCollection> contains three <xref:System.Text.RegularExpressions.Group> objects. The first object contains the string that matches the entire regular expression. The second object, which represents the first captured group, contains the product name. The third object, which represents the second captured group, contains the trademark or registered trademark symbol.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.GroupCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.GroupCollection/cs/Example1.cs#1)]\\n [!code-vb[System.Text.RegularExpressions.GroupCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.GroupCollection/vb/Example1.vb#1)]\"\n  syntax:\n    content: 'public class GroupCollection : System.Collections.ICollection'\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.ICollection\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  extensionMethods:\n  - System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  - System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  - System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  - System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.GroupCollection.CopyTo(System.Array,System.Int32)\n  commentId: M:System.Text.RegularExpressions.GroupCollection.CopyTo(System.Array,System.Int32)\n  id: CopyTo(System.Array,System.Int32)\n  parent: System.Text.RegularExpressions.GroupCollection\n  langs:\n  - csharp\n  name: CopyTo(Array, Int32)\n  nameWithType: GroupCollection.CopyTo(Array, Int32)\n  fullName: GroupCollection.CopyTo(Array, Int32)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: Copies all the elements of the collection to the given array beginning at the given index.\n  remarks: \"Because the entire collection is copied into the array starting at the given index, the destination array must be at least as large as the collection.  \\n  \\n> [!WARNING]\\n>  This member is not present in the [!INCLUDE[net_portable](~/includes/net-portable-md.md)]. If you are developing applications that target the [!INCLUDE[net_portable](~/includes/net-portable-md.md)], use the <xref:System.Text.RegularExpressions.GroupCollection.System%23Collections%23ICollection%23CopyTo%2A?displayProperty=fullName> method instead.\"\n  example:\n  - \"The following example extracts each word from a sentence and captures it in a capturing group, The <xref:System.Text.RegularExpressions.GroupCollection.CopyTo%2A> method is then used to copy the elements in each match's <xref:System.Text.RegularExpressions.GroupCollection> object to an array that contains the capturing groups from all matches. The individual captured words are then displayed to the console.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.GroupCollection.CopyTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.groupcollection.copyto/cs/copyto1.cs#1)]\\n [!code-vb[System.Text.RegularExpressions.GroupCollection.CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.groupcollection.copyto/vb/copyto1.vb#1)]  \\n  \\n The regular expression is defined as follows:  \\n  \\n|Pattern|Description|  \\n|-------------|-----------------|  \\n|`\\\\b`|Match a word boundary.|  \\n|`(\\\\S+?)`|Match one or more non-white space characters. Assign them to the first capturing group.|  \\n|`\\\\b`|Match a word boundary.|\"\n  syntax:\n    content: public void CopyTo (Array array, int arrayIndex);\n    parameters:\n    - id: array\n      type: System.Array\n      description: The array the collection is to be copied into.\n    - id: arrayIndex\n      type: System.Int32\n      description: The position in the destination array where the copying is to begin.\n  overload: System.Text.RegularExpressions.GroupCollection.CopyTo*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>array</code> is `null`.\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"<code>arrayIndex</code> is outside the bounds of <code>array</code>.  \\n  \\n -or-  \\n  \\n <code>arrayIndex</code> plus <xref href=\\\"System.Text.RegularExpressions.GroupCollection.Count\\\"></xref> is outside the bounds of <code>array</code>.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.GroupCollection.CopyTo(System.Text.RegularExpressions.Group[],System.Int32)\n  commentId: M:System.Text.RegularExpressions.GroupCollection.CopyTo(System.Text.RegularExpressions.Group[],System.Int32)\n  id: CopyTo(System.Text.RegularExpressions.Group[],System.Int32)\n  parent: System.Text.RegularExpressions.GroupCollection\n  langs:\n  - csharp\n  name: CopyTo(Group[], Int32)\n  nameWithType: GroupCollection.CopyTo(Group[], Int32)\n  fullName: GroupCollection.CopyTo(Group[], Int32)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  syntax:\n    content: public void CopyTo (System.Text.RegularExpressions.Group[] array, int arrayIndex);\n    parameters:\n    - id: array\n      type: System.Text.RegularExpressions.Group[]\n      description: ''\n    - id: arrayIndex\n      type: System.Int32\n      description: ''\n  overload: System.Text.RegularExpressions.GroupCollection.CopyTo*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n- uid: System.Text.RegularExpressions.GroupCollection.Count\n  commentId: P:System.Text.RegularExpressions.GroupCollection.Count\n  id: Count\n  parent: System.Text.RegularExpressions.GroupCollection\n  langs:\n  - csharp\n  name: Count\n  nameWithType: GroupCollection.Count\n  fullName: GroupCollection.Count\n  type: Property\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Returns the number of groups in the collection.\n  remarks: The <xref:System.Text.RegularExpressions.GroupCollection> object always has at least one member. If a match is unsuccessful, the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=fullName> property returns a <xref:System.Text.RegularExpressions.GroupCollection> object that contains a single member.\n  syntax:\n    content: public int Count { get; }\n    return:\n      type: System.Int32\n      description: The number of groups in the collection.\n  overload: System.Text.RegularExpressions.GroupCollection.Count*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.GroupCollection.GetEnumerator\n  commentId: M:System.Text.RegularExpressions.GroupCollection.GetEnumerator\n  id: GetEnumerator\n  parent: System.Text.RegularExpressions.GroupCollection\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: GroupCollection.GetEnumerator()\n  fullName: GroupCollection.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Provides an enumerator that iterates through the collection.\n  remarks: Instead of calling the <xref:System.Text.RegularExpressions.GroupCollection.GetEnumerator%2A> method to retrieve an enumerator that lets you iterate through the <xref:System.Text.RegularExpressions.Group> objects in the collection, you should use the group iteration construct (such as `foreach` in C# and `For Each`…`Next` in Visual Basic) that is provided by your programming language.\n  syntax:\n    content: public System.Collections.IEnumerator GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: An enumerator that contains all <xref href=\"System.Text.RegularExpressions.Group\"></xref> objects in the <xref href=\"System.Text.RegularExpressions.GroupCollection\"></xref>.\n  overload: System.Text.RegularExpressions.GroupCollection.GetEnumerator*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.GroupCollection.IsReadOnly\n  commentId: P:System.Text.RegularExpressions.GroupCollection.IsReadOnly\n  id: IsReadOnly\n  parent: System.Text.RegularExpressions.GroupCollection\n  langs:\n  - csharp\n  name: IsReadOnly\n  nameWithType: GroupCollection.IsReadOnly\n  fullName: GroupCollection.IsReadOnly\n  type: Property\n  assemblies:\n  - System\n  - netstandard\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: Gets a value that indicates whether the collection is read-only.\n  syntax:\n    content: public bool IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: '`true` in all cases.'\n  overload: System.Text.RegularExpressions.GroupCollection.IsReadOnly*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.GroupCollection.IsSynchronized\n  commentId: P:System.Text.RegularExpressions.GroupCollection.IsSynchronized\n  id: IsSynchronized\n  parent: System.Text.RegularExpressions.GroupCollection\n  langs:\n  - csharp\n  name: IsSynchronized\n  nameWithType: GroupCollection.IsSynchronized\n  fullName: GroupCollection.IsSynchronized\n  type: Property\n  assemblies:\n  - System\n  - netstandard\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: Gets a value that indicates whether access to the <xref href=\"System.Text.RegularExpressions.GroupCollection\"></xref> is synchronized (thread-safe).\n  remarks: >-\n    > [!WARNING]\n\n    >  This member is not present in the [!INCLUDE[net_portable](~/includes/net-portable-md.md)]. If you are developing applications that target the [!INCLUDE[net_portable](~/includes/net-portable-md.md)], use the <xref:System.Text.RegularExpressions.CaptureCollection.System%23Collections%23ICollection%23IsSynchronized%2A?displayProperty=fullName> property instead.\n  syntax:\n    content: public bool IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: '`false` in all cases.'\n  overload: System.Text.RegularExpressions.GroupCollection.IsSynchronized*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.GroupCollection.Item(System.Int32)\n  commentId: P:System.Text.RegularExpressions.GroupCollection.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.Text.RegularExpressions.GroupCollection\n  langs:\n  - csharp\n  name: Item(Int32)\n  nameWithType: GroupCollection.Item(Int32)\n  fullName: GroupCollection.Item(Int32)\n  type: Property\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Enables access to a member of the collection by integer index.\n  remarks: \"The <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29> property is the index (in C#) or the default property (in Visual Basic) of the <xref:System.Text.RegularExpressions.GroupCollection> class. It allows you to enumerate the members of the collection by using a `foreach` statement in C# or a `For Each` statement in Visual Basic.  \\n  \\n You can also use this property to retrieve individual captured groups by their index number. You can retrieve an array that contains the numbers of all capturing groups in a regular expression by calling the instance <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=fullName> method. You can also map named capturing groups to their numbers by calling the instance <xref:System.Text.RegularExpressions.Regex.GroupNumberFromName%2A?displayProperty=fullName> method.  \\n  \\n You can determine the number of items in the collection by retrieving the value of the <xref:System.Text.RegularExpressions.GroupCollection.Count%2A> property. Valid values for the `groupnum` parameter range from 0 to one less than the number of items in the collection.  \\n  \\n The <xref:System.Text.RegularExpressions.GroupCollection> object returned by the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=fullName> property always has at least one member. If the regular expression engine cannot find any matches in a particular input string, the single <xref:System.Text.RegularExpressions.Group> object in the collection has its <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=fullName> property set to `false` and its `Group.Value` property set to <xref:System.String.Empty?displayProperty=fullName>.  \\n  \\n If `groupnum` is not the index of a member of the collection, or if `groupnum` is the index of a capturing group that has not been matched in the input string, the method returns a <xref:System.Text.RegularExpressions.Group> object whose <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=fullName> property is `false` and whose `Group.Value` property is <xref:System.String.Empty?displayProperty=fullName>.\"\n  example:\n  - \"The following example defines a regular expression that consists of two numbered groups. The first group captures one or more consecutive digits. The second group matches a single character. Because the regular expression engine looks for zero or one occurrence of the first group, it does not always find a match even if the regular expression match is successful. The example then illustrates the result when the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29> property is used to retrieve an unmatched group, a matched group, and a group that is not defined in the regular expression. The example defines a regular expression pattern `(\\\\d+)*(\\\\w)\\\\2`, which is interpreted as shown in the following table.  \\n  \\n|Pattern|Description|  \\n|-------------|-----------------|  \\n|`(\\\\d+)*`|Match one or more occurrence of a decimal digit. This is the first capturing group. Match this pattern either zero or one time.|  \\n|`(\\\\w)`|This is the second capturing group.|  \\n|`\\\\k`|Match the string captured by the second capturing group.|  \\n  \\n [!code-csharp[System.Text.RegularExpressions.GroupCollection.Item#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.groupcollection.item/cs/item3.cs#2)]\\n [!code-vb[System.Text.RegularExpressions.GroupCollection.Item#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.groupcollection.item/vb/item3.vb#2)]\"\n  syntax:\n    content: public System.Text.RegularExpressions.Group this[int groupnum] { get; }\n    parameters:\n    - id: groupnum\n      type: System.Int32\n      description: The zero-based index of the collection member to be retrieved.\n    return:\n      type: System.Text.RegularExpressions.Group\n      description: The member of the collection specified by <code>groupnum</code>.\n  overload: System.Text.RegularExpressions.GroupCollection.Item*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.GroupCollection.Item(System.String)\n  commentId: P:System.Text.RegularExpressions.GroupCollection.Item(System.String)\n  id: Item(System.String)\n  parent: System.Text.RegularExpressions.GroupCollection\n  langs:\n  - csharp\n  name: Item(String)\n  nameWithType: GroupCollection.Item(String)\n  fullName: GroupCollection.Item(String)\n  type: Property\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Enables access to a member of the collection by string index.\n  remarks: \"`groupName` can be either the name of a capturing group that is defined by the `(?<`*name*`>)` element in a regular expression, or the string representation of the number of a capturing group that is defined by a grouping construct. For more information about groups in regular expressions, see [Grouping Constructs](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md).  \\n  \\n You can retrieve the names of all the captured groups in a <xref:System.Text.RegularExpressions.Regex> object by calling the <xref:System.Text.RegularExpressions.Regex.GetGroupNames%2A?displayProperty=fullName> method. You can also map the numbers of capturing groups in a regular expression to their names by calling the <xref:System.Text.RegularExpressions.Regex.GroupNameFromNumber%2A?displayProperty=fullName> method. Individual names from the array can then be passed to the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29> property to retrieve the captured string.  \\n  \\n If `groupname` is not the name of a capturing group in the collection, or if `groupname` is the name of a capturing group that has not been matched in the input string, the method returns a <xref:System.Text.RegularExpressions.Group> object whose <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=fullName> property is `false` and whose `Group.Value` property is <xref:System.String.Empty?displayProperty=fullName>.\"\n  example:\n  - \"The following example defines a regular expression that consists of two named groups. The first group, `numbers`, captures one or more consecutive digits. The second group, `letter`, matches a single character. Because the regular expression engine looks for zero or one occurrence of the pattern defined by the `numbers` group, the `numbers` group is not always present even if a match is successful. The example then illustrates the result when the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29> property is used to retrieve an unmatched group, a matched group, and a group that is not defined in the regular expression. The example defines a regular expression pattern `(?<numbers>\\\\d+)*(?<letter>\\\\w)\\\\k<letter>`, which is interpreted as shown in the following table.  \\n  \\n|Pattern|Description|  \\n|-------------|-----------------|  \\n|`(?<numbers>\\\\d+)*`|Match one or more occurrence of a decimal digit. Name this the `numbers` capturing group. Match this pattern either zero or one time.|  \\n|`(?<letter>\\\\w)`|Match a single word character. Name this the `letter` capturing group.|  \\n|`\\\\k<letter>`|Match the string captured by the `letter` capturing group.|  \\n  \\n [!code-csharp[System.Text.RegularExpressions.GroupCollection.Item#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.groupcollection.item/cs/item2.cs#1)]\\n [!code-vb[System.Text.RegularExpressions.GroupCollection.Item#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.groupcollection.item/vb/item2.vb#1)]\"\n  syntax:\n    content: public System.Text.RegularExpressions.Group this[string groupname] { get; }\n    parameters:\n    - id: groupname\n      type: System.String\n      description: The name of a capturing group.\n    return:\n      type: System.Text.RegularExpressions.Group\n      description: The member of the collection specified by <code>groupname</code>.\n  overload: System.Text.RegularExpressions.GroupCollection.Item*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.GroupCollection.SyncRoot\n  commentId: P:System.Text.RegularExpressions.GroupCollection.SyncRoot\n  id: SyncRoot\n  parent: System.Text.RegularExpressions.GroupCollection\n  langs:\n  - csharp\n  name: SyncRoot\n  nameWithType: GroupCollection.SyncRoot\n  fullName: GroupCollection.SyncRoot\n  type: Property\n  assemblies:\n  - System\n  - netstandard\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: Gets an object that can be used to synchronize access to the <xref href=\"System.Text.RegularExpressions.GroupCollection\"></xref>.\n  remarks: >-\n    > [!WARNING]\n\n    >  This member is not present in the [!INCLUDE[net_portable](~/includes/net-portable-md.md)]. If you are developing applications that target the [!INCLUDE[net_portable](~/includes/net-portable-md.md)], use the <xref:System.Text.RegularExpressions.GroupCollection.System%23Collections%23ICollection%23SyncRoot%2A?displayProperty=fullName> property instead.\n  syntax:\n    content: public object SyncRoot { get; }\n    return:\n      type: System.Object\n      description: A copy of the <xref href=\"System.Text.RegularExpressions.Match\"></xref> object to synchronize.\n  overload: System.Text.RegularExpressions.GroupCollection.SyncRoot*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Add(System.Text.RegularExpressions.Group)\n  commentId: M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection<System#Text#RegularExpressions#Group>#Add(System.Text.RegularExpressions.Group)\n  id: System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Add(System.Text.RegularExpressions.Group)\n  isEii: true\n  parent: System.Text.RegularExpressions.GroupCollection\n  langs:\n  - csharp\n  name: ICollection<Group>.Add(Group)\n  nameWithType: GroupCollection.ICollection<Group>.Add(Group)\n  fullName: GroupCollection.ICollection<Group>.Add(Group)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  syntax:\n    content: void ICollection<Group>.Add (System.Text.RegularExpressions.Group item);\n    parameters:\n    - id: item\n      type: System.Text.RegularExpressions.Group\n      description: ''\n  overload: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Add*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Clear\n  commentId: M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection<System#Text#RegularExpressions#Group>#Clear\n  id: System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Clear\n  isEii: true\n  parent: System.Text.RegularExpressions.GroupCollection\n  langs:\n  - csharp\n  name: ICollection<Group>.Clear()\n  nameWithType: GroupCollection.ICollection<Group>.Clear()\n  fullName: GroupCollection.ICollection<Group>.Clear()\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  syntax:\n    content: void ICollection<Group>.Clear ();\n    parameters: []\n  overload: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Clear*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Contains(System.Text.RegularExpressions.Group)\n  commentId: M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection<System#Text#RegularExpressions#Group>#Contains(System.Text.RegularExpressions.Group)\n  id: System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Contains(System.Text.RegularExpressions.Group)\n  isEii: true\n  parent: System.Text.RegularExpressions.GroupCollection\n  langs:\n  - csharp\n  name: ICollection<Group>.Contains(Group)\n  nameWithType: GroupCollection.ICollection<Group>.Contains(Group)\n  fullName: GroupCollection.ICollection<Group>.Contains(Group)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  syntax:\n    content: bool ICollection<Group>.Contains (System.Text.RegularExpressions.Group item);\n    parameters:\n    - id: item\n      type: System.Text.RegularExpressions.Group\n      description: ''\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Contains*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Remove(System.Text.RegularExpressions.Group)\n  commentId: M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection<System#Text#RegularExpressions#Group>#Remove(System.Text.RegularExpressions.Group)\n  id: System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Remove(System.Text.RegularExpressions.Group)\n  isEii: true\n  parent: System.Text.RegularExpressions.GroupCollection\n  langs:\n  - csharp\n  name: ICollection<Group>.Remove(Group)\n  nameWithType: GroupCollection.ICollection<Group>.Remove(Group)\n  fullName: GroupCollection.ICollection<Group>.Remove(Group)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  syntax:\n    content: bool ICollection<Group>.Remove (System.Text.RegularExpressions.Group item);\n    parameters:\n    - id: item\n      type: System.Text.RegularExpressions.Group\n      description: ''\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Remove*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IEnumerable{System#Text#RegularExpressions#Group}#GetEnumerator\n  commentId: M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IEnumerable<System#Text#RegularExpressions#Group>#GetEnumerator\n  id: System#Collections#Generic#IEnumerable{System#Text#RegularExpressions#Group}#GetEnumerator\n  isEii: true\n  parent: System.Text.RegularExpressions.GroupCollection\n  langs:\n  - csharp\n  name: IEnumerable<Group>.GetEnumerator()\n  nameWithType: GroupCollection.IEnumerable<Group>.GetEnumerator()\n  fullName: GroupCollection.IEnumerable<Group>.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  syntax:\n    content: System.Collections.Generic.IEnumerator<System.Text.RegularExpressions.Group> IEnumerable<Group>.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerator{System.Text.RegularExpressions.Group}\n      description: ''\n  overload: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IEnumerable{System#Text#RegularExpressions#Group}#GetEnumerator*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#IndexOf(System.Text.RegularExpressions.Group)\n  commentId: M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList<System#Text#RegularExpressions#Group>#IndexOf(System.Text.RegularExpressions.Group)\n  id: System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#IndexOf(System.Text.RegularExpressions.Group)\n  isEii: true\n  parent: System.Text.RegularExpressions.GroupCollection\n  langs:\n  - csharp\n  name: IList<Group>.IndexOf(Group)\n  nameWithType: GroupCollection.IList<Group>.IndexOf(Group)\n  fullName: GroupCollection.IList<Group>.IndexOf(Group)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  syntax:\n    content: int IList<Group>.IndexOf (System.Text.RegularExpressions.Group item);\n    parameters:\n    - id: item\n      type: System.Text.RegularExpressions.Group\n      description: ''\n    return:\n      type: System.Int32\n      description: ''\n  overload: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#IndexOf*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#Insert(System.Int32,System.Text.RegularExpressions.Group)\n  commentId: M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList<System#Text#RegularExpressions#Group>#Insert(System.Int32,System.Text.RegularExpressions.Group)\n  id: System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#Insert(System.Int32,System.Text.RegularExpressions.Group)\n  isEii: true\n  parent: System.Text.RegularExpressions.GroupCollection\n  langs:\n  - csharp\n  name: IList<Group>.Insert(Int32, Group)\n  nameWithType: GroupCollection.IList<Group>.Insert(Int32, Group)\n  fullName: GroupCollection.IList<Group>.Insert(Int32, Group)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  syntax:\n    content: void IList<Group>.Insert (int index, System.Text.RegularExpressions.Group item);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: ''\n    - id: item\n      type: System.Text.RegularExpressions.Group\n      description: ''\n  overload: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#Insert*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#Item(System.Int32)\n  commentId: P:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList<System#Text#RegularExpressions#Group>#Item(System.Int32)\n  id: System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#Item(System.Int32)\n  isEii: true\n  parent: System.Text.RegularExpressions.GroupCollection\n  langs:\n  - csharp\n  name: IList<Group>.Item(Int32)\n  nameWithType: GroupCollection.IList<Group>.Item(Int32)\n  fullName: GroupCollection.IList<Group>.Item(Int32)\n  type: Property\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  syntax:\n    content: System.Text.RegularExpressions.Group System.Collections.Generic.IList<System.Text.RegularExpressions.Group>.Item[int index] { get; set; }\n    parameters:\n    - id: index\n      type: System.Int32\n      description: ''\n    return:\n      type: System.Text.RegularExpressions.Group\n      description: ''\n  overload: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#Item*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#RemoveAt(System.Int32)\n  commentId: M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList<System#Text#RegularExpressions#Group>#RemoveAt(System.Int32)\n  id: System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#RemoveAt(System.Int32)\n  isEii: true\n  parent: System.Text.RegularExpressions.GroupCollection\n  langs:\n  - csharp\n  name: IList<Group>.RemoveAt(Int32)\n  nameWithType: GroupCollection.IList<Group>.RemoveAt(Int32)\n  fullName: GroupCollection.IList<Group>.RemoveAt(Int32)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  syntax:\n    content: void IList<Group>.RemoveAt (int index);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: ''\n  overload: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#RemoveAt*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  commentId: M:System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  isEii: true\n  parent: System.Text.RegularExpressions.GroupCollection\n  langs:\n  - csharp\n  name: ICollection.CopyTo(Array, Int32)\n  nameWithType: GroupCollection.ICollection.CopyTo(Array, Int32)\n  fullName: GroupCollection.ICollection.CopyTo(Array, Int32)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  syntax:\n    content: void ICollection.CopyTo (Array array, int arrayIndex);\n    parameters:\n    - id: array\n      type: System.Array\n      description: ''\n    - id: arrayIndex\n      type: System.Int32\n      description: ''\n  overload: System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#CopyTo*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#IsSynchronized\n  commentId: P:System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#IsSynchronized\n  id: System#Collections#ICollection#IsSynchronized\n  isEii: true\n  parent: System.Text.RegularExpressions.GroupCollection\n  langs:\n  - csharp\n  name: ICollection.IsSynchronized\n  nameWithType: GroupCollection.ICollection.IsSynchronized\n  fullName: GroupCollection.ICollection.IsSynchronized\n  type: Property\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  syntax:\n    content: bool System.Collections.ICollection.IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#IsSynchronized*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#SyncRoot\n  commentId: P:System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#SyncRoot\n  id: System#Collections#ICollection#SyncRoot\n  isEii: true\n  parent: System.Text.RegularExpressions.GroupCollection\n  langs:\n  - csharp\n  name: ICollection.SyncRoot\n  nameWithType: GroupCollection.ICollection.SyncRoot\n  fullName: GroupCollection.ICollection.SyncRoot\n  type: Property\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  syntax:\n    content: object System.Collections.ICollection.SyncRoot { get; }\n    return:\n      type: System.Object\n      description: ''\n  overload: System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#SyncRoot*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Add(System.Object)\n  commentId: M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Add(System.Object)\n  id: System#Collections#IList#Add(System.Object)\n  isEii: true\n  parent: System.Text.RegularExpressions.GroupCollection\n  langs:\n  - csharp\n  name: IList.Add(Object)\n  nameWithType: GroupCollection.IList.Add(Object)\n  fullName: GroupCollection.IList.Add(Object)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  syntax:\n    content: int IList.Add (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: ''\n    return:\n      type: System.Int32\n      description: ''\n  overload: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Add*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Clear\n  commentId: M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Clear\n  id: System#Collections#IList#Clear\n  isEii: true\n  parent: System.Text.RegularExpressions.GroupCollection\n  langs:\n  - csharp\n  name: IList.Clear()\n  nameWithType: GroupCollection.IList.Clear()\n  fullName: GroupCollection.IList.Clear()\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  syntax:\n    content: void IList.Clear ();\n    parameters: []\n  overload: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Clear*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Contains(System.Object)\n  commentId: M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Contains(System.Object)\n  id: System#Collections#IList#Contains(System.Object)\n  isEii: true\n  parent: System.Text.RegularExpressions.GroupCollection\n  langs:\n  - csharp\n  name: IList.Contains(Object)\n  nameWithType: GroupCollection.IList.Contains(Object)\n  fullName: GroupCollection.IList.Contains(Object)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  syntax:\n    content: bool IList.Contains (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: ''\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Contains*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#IndexOf(System.Object)\n  commentId: M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#IndexOf(System.Object)\n  id: System#Collections#IList#IndexOf(System.Object)\n  isEii: true\n  parent: System.Text.RegularExpressions.GroupCollection\n  langs:\n  - csharp\n  name: IList.IndexOf(Object)\n  nameWithType: GroupCollection.IList.IndexOf(Object)\n  fullName: GroupCollection.IList.IndexOf(Object)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  syntax:\n    content: int IList.IndexOf (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: ''\n    return:\n      type: System.Int32\n      description: ''\n  overload: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#IndexOf*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Insert(System.Int32,System.Object)\n  commentId: M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Insert(System.Int32,System.Object)\n  id: System#Collections#IList#Insert(System.Int32,System.Object)\n  isEii: true\n  parent: System.Text.RegularExpressions.GroupCollection\n  langs:\n  - csharp\n  name: IList.Insert(Int32, Object)\n  nameWithType: GroupCollection.IList.Insert(Int32, Object)\n  fullName: GroupCollection.IList.Insert(Int32, Object)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  syntax:\n    content: void IList.Insert (int index, object value);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: ''\n    - id: value\n      type: System.Object\n      description: ''\n  overload: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Insert*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#IsFixedSize\n  commentId: P:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#IsFixedSize\n  id: System#Collections#IList#IsFixedSize\n  isEii: true\n  parent: System.Text.RegularExpressions.GroupCollection\n  langs:\n  - csharp\n  name: IList.IsFixedSize\n  nameWithType: GroupCollection.IList.IsFixedSize\n  fullName: GroupCollection.IList.IsFixedSize\n  type: Property\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  syntax:\n    content: bool System.Collections.IList.IsFixedSize { get; }\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#IsFixedSize*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Item(System.Int32)\n  commentId: P:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Item(System.Int32)\n  id: System#Collections#IList#Item(System.Int32)\n  isEii: true\n  parent: System.Text.RegularExpressions.GroupCollection\n  langs:\n  - csharp\n  name: IList.Item(Int32)\n  nameWithType: GroupCollection.IList.Item(Int32)\n  fullName: GroupCollection.IList.Item(Int32)\n  type: Property\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  syntax:\n    content: object System.Collections.IList.Item[int index] { get; set; }\n    parameters:\n    - id: index\n      type: System.Int32\n      description: ''\n    return:\n      type: System.Object\n      description: ''\n  overload: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Item*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Remove(System.Object)\n  commentId: M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Remove(System.Object)\n  id: System#Collections#IList#Remove(System.Object)\n  isEii: true\n  parent: System.Text.RegularExpressions.GroupCollection\n  langs:\n  - csharp\n  name: IList.Remove(Object)\n  nameWithType: GroupCollection.IList.Remove(Object)\n  fullName: GroupCollection.IList.Remove(Object)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  syntax:\n    content: void IList.Remove (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: ''\n  overload: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Remove*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#RemoveAt(System.Int32)\n  commentId: M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#RemoveAt(System.Int32)\n  id: System#Collections#IList#RemoveAt(System.Int32)\n  isEii: true\n  parent: System.Text.RegularExpressions.GroupCollection\n  langs:\n  - csharp\n  name: IList.RemoveAt(Int32)\n  nameWithType: GroupCollection.IList.RemoveAt(Int32)\n  fullName: GroupCollection.IList.RemoveAt(Int32)\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  syntax:\n    content: void IList.RemoveAt (int index);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: ''\n  overload: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#RemoveAt*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.IndexOutOfRangeException\n  parent: System\n  isExternal: false\n  name: IndexOutOfRangeException\n  nameWithType: IndexOutOfRangeException\n  fullName: System.IndexOutOfRangeException\n- uid: System.Text.RegularExpressions.GroupCollection.CopyTo(System.Array,System.Int32)\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: CopyTo(Array, Int32)\n  nameWithType: GroupCollection.CopyTo(Array, Int32)\n  fullName: GroupCollection.CopyTo(Array, Int32)\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Text.RegularExpressions.GroupCollection.CopyTo(System.Text.RegularExpressions.Group[],System.Int32)\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: CopyTo(Group[], Int32)\n  nameWithType: GroupCollection.CopyTo(Group[], Int32)\n  fullName: GroupCollection.CopyTo(Group[], Int32)\n- uid: System.Text.RegularExpressions.Group\n  name: Group\n  nameWithType: Group\n  fullName: System.Text.RegularExpressions.Group\n- uid: System.Text.RegularExpressions.Group[]\n  parent: System.Text.RegularExpressions\n  isExternal: false\n  name: Group[]\n  nameWithType: Group[]\n  fullName: System.Text.RegularExpressions.Group[]\n  spec.csharp:\n  - uid: System.Text.RegularExpressions.Group\n    name: Group\n    nameWithType: Group\n    fullName: System.Text.RegularExpressions.Group\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Text.RegularExpressions.GroupCollection.Count\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: Count\n  nameWithType: GroupCollection.Count\n  fullName: GroupCollection.Count\n- uid: System.Text.RegularExpressions.GroupCollection.GetEnumerator\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: GroupCollection.GetEnumerator()\n  fullName: GroupCollection.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Text.RegularExpressions.GroupCollection.IsReadOnly\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: GroupCollection.IsReadOnly\n  fullName: GroupCollection.IsReadOnly\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Text.RegularExpressions.GroupCollection.IsSynchronized\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: IsSynchronized\n  nameWithType: GroupCollection.IsSynchronized\n  fullName: GroupCollection.IsSynchronized\n- uid: System.Text.RegularExpressions.GroupCollection.Item(System.Int32)\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: Item(Int32)\n  nameWithType: GroupCollection.Item(Int32)\n  fullName: GroupCollection.Item(Int32)\n- uid: System.Text.RegularExpressions.GroupCollection.Item(System.String)\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: Item(String)\n  nameWithType: GroupCollection.Item(String)\n  fullName: GroupCollection.Item(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Text.RegularExpressions.GroupCollection.SyncRoot\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: SyncRoot\n  nameWithType: GroupCollection.SyncRoot\n  fullName: GroupCollection.SyncRoot\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Add(System.Text.RegularExpressions.Group)\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: ICollection<Group>.Add(Group)\n  nameWithType: GroupCollection.ICollection<Group>.Add(Group)\n  fullName: GroupCollection.ICollection<Group>.Add(Group)\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Clear\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: ICollection<Group>.Clear()\n  nameWithType: GroupCollection.ICollection<Group>.Clear()\n  fullName: GroupCollection.ICollection<Group>.Clear()\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Contains(System.Text.RegularExpressions.Group)\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: ICollection<Group>.Contains(Group)\n  nameWithType: GroupCollection.ICollection<Group>.Contains(Group)\n  fullName: GroupCollection.ICollection<Group>.Contains(Group)\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Remove(System.Text.RegularExpressions.Group)\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: ICollection<Group>.Remove(Group)\n  nameWithType: GroupCollection.ICollection<Group>.Remove(Group)\n  fullName: GroupCollection.ICollection<Group>.Remove(Group)\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IEnumerable{System#Text#RegularExpressions#Group}#GetEnumerator\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: IEnumerable<Group>.GetEnumerator()\n  nameWithType: GroupCollection.IEnumerable<Group>.GetEnumerator()\n  fullName: GroupCollection.IEnumerable<Group>.GetEnumerator()\n- uid: System.Collections.Generic.IEnumerator`1\n  name: IEnumerator<T>\n  nameWithType: IEnumerator<T>\n  fullName: System.Collections.Generic.IEnumerator<T>\n- uid: System.Collections.Generic.IEnumerator{System.Text.RegularExpressions.Group}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerator<Group>\n  nameWithType: IEnumerator<Group>\n  fullName: System.Collections.Generic.IEnumerator<System.Text.RegularExpressions.Group>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    nameWithType: IEnumerator\n    fullName: System.Collections.Generic.IEnumerator\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Text.RegularExpressions.Group\n    name: Group\n    nameWithType: Group\n    fullName: System.Text.RegularExpressions.Group\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#IndexOf(System.Text.RegularExpressions.Group)\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: IList<Group>.IndexOf(Group)\n  nameWithType: GroupCollection.IList<Group>.IndexOf(Group)\n  fullName: GroupCollection.IList<Group>.IndexOf(Group)\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#Insert(System.Int32,System.Text.RegularExpressions.Group)\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: IList<Group>.Insert(Int32, Group)\n  nameWithType: GroupCollection.IList<Group>.Insert(Int32, Group)\n  fullName: GroupCollection.IList<Group>.Insert(Int32, Group)\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#Item(System.Int32)\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: IList<Group>.Item(Int32)\n  nameWithType: GroupCollection.IList<Group>.Item(Int32)\n  fullName: GroupCollection.IList<Group>.Item(Int32)\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#RemoveAt(System.Int32)\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: IList<Group>.RemoveAt(Int32)\n  nameWithType: GroupCollection.IList<Group>.RemoveAt(Int32)\n  fullName: GroupCollection.IList<Group>.RemoveAt(Int32)\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: ICollection.CopyTo(Array, Int32)\n  nameWithType: GroupCollection.ICollection.CopyTo(Array, Int32)\n  fullName: GroupCollection.ICollection.CopyTo(Array, Int32)\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#IsSynchronized\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: ICollection.IsSynchronized\n  nameWithType: GroupCollection.ICollection.IsSynchronized\n  fullName: GroupCollection.ICollection.IsSynchronized\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#SyncRoot\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: ICollection.SyncRoot\n  nameWithType: GroupCollection.ICollection.SyncRoot\n  fullName: GroupCollection.ICollection.SyncRoot\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Add(System.Object)\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: IList.Add(Object)\n  nameWithType: GroupCollection.IList.Add(Object)\n  fullName: GroupCollection.IList.Add(Object)\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Clear\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: IList.Clear()\n  nameWithType: GroupCollection.IList.Clear()\n  fullName: GroupCollection.IList.Clear()\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Contains(System.Object)\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: IList.Contains(Object)\n  nameWithType: GroupCollection.IList.Contains(Object)\n  fullName: GroupCollection.IList.Contains(Object)\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#IndexOf(System.Object)\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: IList.IndexOf(Object)\n  nameWithType: GroupCollection.IList.IndexOf(Object)\n  fullName: GroupCollection.IList.IndexOf(Object)\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Insert(System.Int32,System.Object)\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: IList.Insert(Int32, Object)\n  nameWithType: GroupCollection.IList.Insert(Int32, Object)\n  fullName: GroupCollection.IList.Insert(Int32, Object)\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#IsFixedSize\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: IList.IsFixedSize\n  nameWithType: GroupCollection.IList.IsFixedSize\n  fullName: GroupCollection.IList.IsFixedSize\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Item(System.Int32)\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: IList.Item(Int32)\n  nameWithType: GroupCollection.IList.Item(Int32)\n  fullName: GroupCollection.IList.Item(Int32)\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Remove(System.Object)\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: IList.Remove(Object)\n  nameWithType: GroupCollection.IList.Remove(Object)\n  fullName: GroupCollection.IList.Remove(Object)\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#RemoveAt(System.Int32)\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: IList.RemoveAt(Int32)\n  nameWithType: GroupCollection.IList.RemoveAt(Int32)\n  fullName: GroupCollection.IList.RemoveAt(Int32)\n- uid: System.Text.RegularExpressions.GroupCollection.CopyTo*\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: CopyTo\n  nameWithType: GroupCollection.CopyTo\n  fullName: GroupCollection.CopyTo\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n- uid: System.Text.RegularExpressions.GroupCollection.Count*\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: Count\n  nameWithType: GroupCollection.Count\n  fullName: GroupCollection.Count\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n- uid: System.Text.RegularExpressions.GroupCollection.GetEnumerator*\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: GroupCollection.GetEnumerator\n  fullName: GroupCollection.GetEnumerator\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n- uid: System.Text.RegularExpressions.GroupCollection.IsReadOnly*\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: GroupCollection.IsReadOnly\n  fullName: GroupCollection.IsReadOnly\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n- uid: System.Text.RegularExpressions.GroupCollection.IsSynchronized*\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: IsSynchronized\n  nameWithType: GroupCollection.IsSynchronized\n  fullName: GroupCollection.IsSynchronized\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n- uid: System.Text.RegularExpressions.GroupCollection.Item*\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: Item\n  nameWithType: GroupCollection.Item\n  fullName: GroupCollection.Item\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n- uid: System.Text.RegularExpressions.GroupCollection.SyncRoot*\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: SyncRoot\n  nameWithType: GroupCollection.SyncRoot\n  fullName: GroupCollection.SyncRoot\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Add*\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: System.Collections.Generic.ICollection<System.Text.RegularExpressions.Group>.Add\n  nameWithType: GroupCollection.System.Collections.Generic.ICollection<System.Text.RegularExpressions.Group>.Add\n  fullName: GroupCollection.System.Collections.Generic.ICollection<System.Text.RegularExpressions.Group>.Add\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Clear*\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: System.Collections.Generic.ICollection<System.Text.RegularExpressions.Group>.Clear\n  nameWithType: GroupCollection.System.Collections.Generic.ICollection<System.Text.RegularExpressions.Group>.Clear\n  fullName: GroupCollection.System.Collections.Generic.ICollection<System.Text.RegularExpressions.Group>.Clear\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Contains*\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: System.Collections.Generic.ICollection<System.Text.RegularExpressions.Group>.Contains\n  nameWithType: GroupCollection.System.Collections.Generic.ICollection<System.Text.RegularExpressions.Group>.Contains\n  fullName: GroupCollection.System.Collections.Generic.ICollection<System.Text.RegularExpressions.Group>.Contains\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Remove*\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: System.Collections.Generic.ICollection<System.Text.RegularExpressions.Group>.Remove\n  nameWithType: GroupCollection.System.Collections.Generic.ICollection<System.Text.RegularExpressions.Group>.Remove\n  fullName: GroupCollection.System.Collections.Generic.ICollection<System.Text.RegularExpressions.Group>.Remove\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IEnumerable{System#Text#RegularExpressions#Group}#GetEnumerator*\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: System.Collections.Generic.IEnumerable<System.Text.RegularExpressions.Group>.GetEnumerator\n  nameWithType: GroupCollection.System.Collections.Generic.IEnumerable<System.Text.RegularExpressions.Group>.GetEnumerator\n  fullName: GroupCollection.System.Collections.Generic.IEnumerable<System.Text.RegularExpressions.Group>.GetEnumerator\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#IndexOf*\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: System.Collections.Generic.IList<System.Text.RegularExpressions.Group>.IndexOf\n  nameWithType: GroupCollection.System.Collections.Generic.IList<System.Text.RegularExpressions.Group>.IndexOf\n  fullName: GroupCollection.System.Collections.Generic.IList<System.Text.RegularExpressions.Group>.IndexOf\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#Insert*\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: System.Collections.Generic.IList<System.Text.RegularExpressions.Group>.Insert\n  nameWithType: GroupCollection.System.Collections.Generic.IList<System.Text.RegularExpressions.Group>.Insert\n  fullName: GroupCollection.System.Collections.Generic.IList<System.Text.RegularExpressions.Group>.Insert\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#Item*\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: System.Collections.Generic.IList<System.Text.RegularExpressions.Group>.Item\n  nameWithType: GroupCollection.System.Collections.Generic.IList<System.Text.RegularExpressions.Group>.Item\n  fullName: GroupCollection.System.Collections.Generic.IList<System.Text.RegularExpressions.Group>.Item\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#RemoveAt*\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: System.Collections.Generic.IList<System.Text.RegularExpressions.Group>.RemoveAt\n  nameWithType: GroupCollection.System.Collections.Generic.IList<System.Text.RegularExpressions.Group>.RemoveAt\n  fullName: GroupCollection.System.Collections.Generic.IList<System.Text.RegularExpressions.Group>.RemoveAt\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#CopyTo*\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: System.Collections.ICollection.CopyTo\n  nameWithType: GroupCollection.System.Collections.ICollection.CopyTo\n  fullName: GroupCollection.System.Collections.ICollection.CopyTo\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#IsSynchronized*\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: GroupCollection.System.Collections.ICollection.IsSynchronized\n  fullName: GroupCollection.System.Collections.ICollection.IsSynchronized\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#SyncRoot*\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: GroupCollection.System.Collections.ICollection.SyncRoot\n  fullName: GroupCollection.System.Collections.ICollection.SyncRoot\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Add*\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: System.Collections.IList.Add\n  nameWithType: GroupCollection.System.Collections.IList.Add\n  fullName: GroupCollection.System.Collections.IList.Add\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Clear*\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: System.Collections.IList.Clear\n  nameWithType: GroupCollection.System.Collections.IList.Clear\n  fullName: GroupCollection.System.Collections.IList.Clear\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Contains*\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: System.Collections.IList.Contains\n  nameWithType: GroupCollection.System.Collections.IList.Contains\n  fullName: GroupCollection.System.Collections.IList.Contains\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#IndexOf*\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: System.Collections.IList.IndexOf\n  nameWithType: GroupCollection.System.Collections.IList.IndexOf\n  fullName: GroupCollection.System.Collections.IList.IndexOf\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Insert*\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: System.Collections.IList.Insert\n  nameWithType: GroupCollection.System.Collections.IList.Insert\n  fullName: GroupCollection.System.Collections.IList.Insert\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#IsFixedSize*\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: System.Collections.IList.IsFixedSize\n  nameWithType: GroupCollection.System.Collections.IList.IsFixedSize\n  fullName: GroupCollection.System.Collections.IList.IsFixedSize\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Item*\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: System.Collections.IList.Item\n  nameWithType: GroupCollection.System.Collections.IList.Item\n  fullName: GroupCollection.System.Collections.IList.Item\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Remove*\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: System.Collections.IList.Remove\n  nameWithType: GroupCollection.System.Collections.IList.Remove\n  fullName: GroupCollection.System.Collections.IList.Remove\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n- uid: System.Text.RegularExpressions.GroupCollection.System#Collections#IList#RemoveAt*\n  parent: System.Text.RegularExpressions.GroupCollection\n  isExternal: false\n  name: System.Collections.IList.RemoveAt\n  nameWithType: GroupCollection.System.Collections.IList.RemoveAt\n  fullName: GroupCollection.System.Collections.IList.RemoveAt\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/GroupCollection.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Cast<TResult>(IEnumerable)\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  fullName: Enumerable.Cast<TResult>(IEnumerable)\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OfType<TResult>(IEnumerable)\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  fullName: Enumerable.OfType<TResult>(IEnumerable)\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  parent: System.Linq.ParallelEnumerable\n  isExternal: false\n  name: AsParallel(IEnumerable)\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n  fullName: ParallelEnumerable.AsParallel(IEnumerable)\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: AsQueryable(IEnumerable)\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n  fullName: Queryable.AsQueryable(IEnumerable)\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: false\n  name: ICollection\n  nameWithType: ICollection\n  fullName: System.Collections.ICollection\n"}