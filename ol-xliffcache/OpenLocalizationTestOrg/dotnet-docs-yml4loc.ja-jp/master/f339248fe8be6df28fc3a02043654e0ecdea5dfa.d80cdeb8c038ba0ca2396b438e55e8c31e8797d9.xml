{"nodes":[{"content":"Computes a Hash-based Message Authentication Code (HMAC) using the <xref href=\"System.Security.Cryptography.SHA512\"></xref> hash function.","nodes":[{"pos":[0,138],"content":"Computes a Hash-based Message Authentication Code (HMAC) using the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.SHA512\"&gt;&lt;/xref&gt;</ph> hash function.","source":"Computes a Hash-based Message Authentication Code (HMAC) using the <xref href=\"System.Security.Cryptography.SHA512\"></xref> hash function."}],"pos":[994,1133],"yaml":true},{"content":"<xref:System.Security.Cryptography.HMACSHA512> is a type of keyed hash algorithm that is constructed from the SHA-512 hash function and used as a Hash-based Message Authentication Code (HMAC). The HMAC process mixes a secret key with the message data and hashes the result. The hash value is mixed with the secret key again, and then hashed a second time. The output hash is 512 bits in length.  \n  \n An HMAC can be used to determine whether a message sent over a nonsecure channel has been tampered with, provided that the sender and receiver share a secret key. The sender computes the hash value for the original data and sends both the original data and hash value as a single message. The receiver recalculates the hash value on the received message and checks that the computed HMAC matches the transmitted HMAC.  \n  \n If the original and computed hash values match, the message is authenticated. If they do not match, either the data or the hash value has been changed. HMACs provide security against tampering because knowledge of the secret key is required to change the message and reproduce the correct hash value.  \n  \n <xref:System.Security.Cryptography.HMACSHA512> accepts keys of any size, and produces a hash sequence of length 512 bits.","nodes":[{"pos":[0,394],"content":"<xref:System.Security.Cryptography.HMACSHA512> is a type of keyed hash algorithm that is constructed from the SHA-512 hash function and used as a Hash-based Message Authentication Code (HMAC). The HMAC process mixes a secret key with the message data and hashes the result. The hash value is mixed with the secret key again, and then hashed a second time. The output hash is 512 bits in length.","nodes":[{"content":"<xref:System.Security.Cryptography.HMACSHA512> is a type of keyed hash algorithm that is constructed from the SHA-512 hash function and used as a Hash-based Message Authentication Code (HMAC). The HMAC process mixes a secret key with the message data and hashes the result. The hash value is mixed with the secret key again, and then hashed a second time. The output hash is 512 bits in length.","pos":[0,394],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Security.Cryptography.HMACSHA512&gt;</ph> is a type of keyed hash algorithm that is constructed from the SHA-512 hash function and used as a Hash-based Message Authentication Code (HMAC).","pos":[0,192],"source":"<xref:System.Security.Cryptography.HMACSHA512> is a type of keyed hash algorithm that is constructed from the SHA-512 hash function and used as a Hash-based Message Authentication Code (HMAC)."},{"content":"The HMAC process mixes a secret key with the message data and hashes the result.","pos":[193,273]},{"content":"The hash value is mixed with the secret key again, and then hashed a second time.","pos":[274,355]},{"content":"The output hash is 512 bits in length.","pos":[356,394]}]}]},{"pos":[401,818],"content":"An HMAC can be used to determine whether a message sent over a nonsecure channel has been tampered with, provided that the sender and receiver share a secret key. The sender computes the hash value for the original data and sends both the original data and hash value as a single message. The receiver recalculates the hash value on the received message and checks that the computed HMAC matches the transmitted HMAC.","nodes":[{"content":"An HMAC can be used to determine whether a message sent over a nonsecure channel has been tampered with, provided that the sender and receiver share a secret key. The sender computes the hash value for the original data and sends both the original data and hash value as a single message. The receiver recalculates the hash value on the received message and checks that the computed HMAC matches the transmitted HMAC.","pos":[0,417],"nodes":[{"content":"An HMAC can be used to determine whether a message sent over a nonsecure channel has been tampered with, provided that the sender and receiver share a secret key.","pos":[0,162]},{"content":"The sender computes the hash value for the original data and sends both the original data and hash value as a single message.","pos":[163,288]},{"content":"The receiver recalculates the hash value on the received message and checks that the computed HMAC matches the transmitted HMAC.","pos":[289,417]}]}]},{"pos":[825,1125],"content":"If the original and computed hash values match, the message is authenticated. If they do not match, either the data or the hash value has been changed. HMACs provide security against tampering because knowledge of the secret key is required to change the message and reproduce the correct hash value.","nodes":[{"content":"If the original and computed hash values match, the message is authenticated. If they do not match, either the data or the hash value has been changed. HMACs provide security against tampering because knowledge of the secret key is required to change the message and reproduce the correct hash value.","pos":[0,300],"nodes":[{"content":"If the original and computed hash values match, the message is authenticated.","pos":[0,77]},{"content":"If they do not match, either the data or the hash value has been changed.","pos":[78,151]},{"content":"HMACs provide security against tampering because knowledge of the secret key is required to change the message and reproduce the correct hash value.","pos":[152,300]}]}]},{"pos":[1132,1253],"content":"<xref:System.Security.Cryptography.HMACSHA512> accepts keys of any size, and produces a hash sequence of length 512 bits.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Security.Cryptography.HMACSHA512&gt;</ph> accepts keys of any size, and produces a hash sequence of length 512 bits.","pos":[0,121],"source":"<xref:System.Security.Cryptography.HMACSHA512> accepts keys of any size, and produces a hash sequence of length 512 bits."}]}],"pos":[1144,2406],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.HMACSHA512\"></xref> class with a randomly generated key.","nodes":[{"pos":[0,131],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.HMACSHA512\"&gt;&lt;/xref&gt;</ph> class with a randomly generated key.","source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.HMACSHA512\"></xref> class with a randomly generated key."}],"pos":[6312,6444],"yaml":true},{"content":"With this constructor, a 64-byte, randomly generated key is used.","nodes":[{"pos":[0,65],"content":"With this constructor, a 64-byte, randomly generated key is used.","nodes":[{"content":"With this constructor, a 64-byte, randomly generated key is used.","pos":[0,65]}]}],"pos":[6455,6521],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.HMACSHA512\"></xref> class with the specified key data.","nodes":[{"pos":[0,129],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.HMACSHA512\"&gt;&lt;/xref&gt;</ph> class with the specified key data.","source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.HMACSHA512\"></xref> class with the specified key data."}],"pos":[8096,8226],"yaml":true},{"content":"The secret key for <xref href=\"System.Security.Cryptography.HMACSHA512\"></xref> encryption. The key can be any length. However, the recommended size is 128 bytes. If the key is more than 128 bytes long, it is hashed (using SHA-512) to derive a 128-byte key. If it is less than 128 bytes long, it is padded to 128 bytes.","nodes":[{"pos":[0,319],"content":"The secret key for <xref href=\"System.Security.Cryptography.HMACSHA512\"></xref> encryption. The key can be any length. However, the recommended size is 128 bytes. If the key is more than 128 bytes long, it is hashed (using SHA-512) to derive a 128-byte key. If it is less than 128 bytes long, it is padded to 128 bytes.","nodes":[{"content":"The secret key for <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.HMACSHA512\"&gt;&lt;/xref&gt;</ph> encryption.","pos":[0,91],"source":"The secret key for <xref href=\"System.Security.Cryptography.HMACSHA512\"></xref> encryption."},{"content":"The key can be any length.","pos":[92,118]},{"content":"However, the recommended size is 128 bytes.","pos":[119,162]},{"content":"If the key is more than 128 bytes long, it is hashed (using SHA-512) to derive a 128-byte key.","pos":[163,257]},{"content":"If it is less than 128 bytes long, it is padded to 128 bytes.","pos":[258,319]}]}],"pos":[8494,8814],"yaml":true},{"content":"The <code>key</code> parameter is `null`.","nodes":[{"pos":[0,41],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">key</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>key</code> parameter is `null`."}],"pos":[8989,9031],"yaml":true},{"content":"Provides a workaround for the [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)] implementation of the <xref href=\"System.Security.Cryptography.HMACSHA512\"></xref> algorithm, which is inconsistent with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)] implementation.","nodes":[{"pos":[0,282],"content":"Provides a workaround for the <ph id=\"ph1\">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph> implementation of the <ph id=\"ph2\">&lt;xref href=\"System.Security.Cryptography.HMACSHA512\"&gt;&lt;/xref&gt;</ph> algorithm, which is inconsistent with the <ph id=\"ph3\">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph> implementation.","source":"Provides a workaround for the [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)] implementation of the <xref href=\"System.Security.Cryptography.HMACSHA512\"></xref> algorithm, which is inconsistent with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)] implementation."}],"pos":[16633,16916],"yaml":true},{"content":"The purpose of the <xref:System.Security.Cryptography.HMACSHA512.ProduceLegacyHmacValues%2A> Boolean property is to enable [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)] applications to interact with [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] applications. When you set this property to `true`, the <xref:System.Security.Cryptography.HMACSHA512> object produces values that match the values produced by the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]. You should set this property only once after you create your HMAC object. You will need to reset your key afterwards, as shown in the following example.  \n  \n```  \npublic static void Test()  \n    {  \n    HMACSHA512 hmac = new HMACSHA512();  \n    hmac.ProduceLegacyHmacValues = true;  \n    hmac.Key = // ...Get the HMAC key.  \n    // ...  \n    // Use the HMAC algorithm.  \n    // ...  \n    }  \n```","nodes":[{"pos":[0,636],"content":"The purpose of the <xref:System.Security.Cryptography.HMACSHA512.ProduceLegacyHmacValues%2A> Boolean property is to enable [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)] applications to interact with [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] applications. When you set this property to `true`, the <xref:System.Security.Cryptography.HMACSHA512> object produces values that match the values produced by the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]. You should set this property only once after you create your HMAC object. You will need to reset your key afterwards, as shown in the following example.","nodes":[{"content":"The purpose of the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.HMACSHA512.ProduceLegacyHmacValues%2A&gt;</ph> Boolean property is to enable <ph id=\"ph2\">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph> applications to interact with <ph id=\"ph3\">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph> applications.","pos":[0,280],"source":"The purpose of the <xref:System.Security.Cryptography.HMACSHA512.ProduceLegacyHmacValues%2A> Boolean property is to enable [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)] applications to interact with [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] applications."},{"content":"When you set this property to <ph id=\"ph1\">`true`</ph>, the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.HMACSHA512&gt;</ph> object produces values that match the values produced by the <ph id=\"ph3\">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph>.","pos":[281,483],"source":" When you set this property to `true`, the <xref:System.Security.Cryptography.HMACSHA512> object produces values that match the values produced by the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]."},{"content":"You should set this property only once after you create your HMAC object.","pos":[484,557]},{"content":"You will need to reset your key afterwards, as shown in the following example.","pos":[558,636]}]}],"pos":[16927,17822],"yaml":true,"extradata":"MT"},{"content":"`true` to enable [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)] applications to interact with [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] applications; otherwise, `false`.","nodes":[{"pos":[0,194],"content":"<ph id=\"ph1\">`true`</ph> to enable <ph id=\"ph2\">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph> applications to interact with <ph id=\"ph3\">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph> applications; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` to enable [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)] applications to interact with [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] applications; otherwise, `false`."}],"pos":[17953,18150],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.HMACSHA512\n  commentId: T:System.Security.Cryptography.HMACSHA512\n  id: HMACSHA512\n  children:\n  - System.Security.Cryptography.HMACSHA512.#ctor\n  - System.Security.Cryptography.HMACSHA512.#ctor(System.Byte[])\n  - System.Security.Cryptography.HMACSHA512.Dispose(System.Boolean)\n  - System.Security.Cryptography.HMACSHA512.HashCore(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.HMACSHA512.HashFinal\n  - System.Security.Cryptography.HMACSHA512.HashSize\n  - System.Security.Cryptography.HMACSHA512.Initialize\n  - System.Security.Cryptography.HMACSHA512.Key\n  - System.Security.Cryptography.HMACSHA512.ProduceLegacyHmacValues\n  langs:\n  - csharp\n  name: HMACSHA512\n  nameWithType: HMACSHA512\n  fullName: System.Security.Cryptography.HMACSHA512\n  type: Class\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Computes a Hash-based Message Authentication Code (HMAC) using the <xref href=\"System.Security.Cryptography.SHA512\"></xref> hash function.\n  remarks: \"<xref:System.Security.Cryptography.HMACSHA512> is a type of keyed hash algorithm that is constructed from the SHA-512 hash function and used as a Hash-based Message Authentication Code (HMAC). The HMAC process mixes a secret key with the message data and hashes the result. The hash value is mixed with the secret key again, and then hashed a second time. The output hash is 512 bits in length.  \\n  \\n An HMAC can be used to determine whether a message sent over a nonsecure channel has been tampered with, provided that the sender and receiver share a secret key. The sender computes the hash value for the original data and sends both the original data and hash value as a single message. The receiver recalculates the hash value on the received message and checks that the computed HMAC matches the transmitted HMAC.  \\n  \\n If the original and computed hash values match, the message is authenticated. If they do not match, either the data or the hash value has been changed. HMACs provide security against tampering because knowledge of the secret key is required to change the message and reproduce the correct hash value.  \\n  \\n <xref:System.Security.Cryptography.HMACSHA512> accepts keys of any size, and produces a hash sequence of length 512 bits.\"\n  example:\n  - \"The following example shows how to sign a file by using the <xref:System.Security.Cryptography.HMACSHA512> object and then how to verify the file.  \\n  \\n [!code-cpp[HMACSHA512#1](~/samples/snippets/cpp/VS_Snippets_CLR/HMACSHA512/CPP/hmacsha512.cpp#1)]\\n [!code-csharp[HMACSHA512#1](~/samples/snippets/csharp/VS_Snippets_CLR/HMACSHA512/CS/hmacsha512.cs#1)]\\n [!code-vb[HMACSHA512#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/HMACSHA512/vb/hmacsha512.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class HMACSHA512 : System.Security.Cryptography.HMAC\n  inheritance:\n  - System.Object\n  - System.Security.Cryptography.HashAlgorithm\n  - System.Security.Cryptography.KeyedHashAlgorithm\n  - System.Security.Cryptography.HMAC\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Security.Cryptography.HashAlgorithm.CanReuseTransform\n  - System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks\n  - System.Security.Cryptography.HashAlgorithm.Clear\n  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])\n  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)\n  - System.Security.Cryptography.HashAlgorithm.Dispose\n  - System.Security.Cryptography.HashAlgorithm.Hash\n  - System.Security.Cryptography.HashAlgorithm.HashSizeValue\n  - System.Security.Cryptography.HashAlgorithm.HashValue\n  - System.Security.Cryptography.HashAlgorithm.InputBlockSize\n  - System.Security.Cryptography.HashAlgorithm.OutputBlockSize\n  - System.Security.Cryptography.HashAlgorithm.State\n  - System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  - System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.HMAC.BlockSizeValue\n  - System.Security.Cryptography.HMAC.Create\n  - System.Security.Cryptography.HMAC.Create(System.String)\n  - System.Security.Cryptography.HMAC.HashName\n  - System.Security.Cryptography.KeyedHashAlgorithm.KeyValue\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA512.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.HMACSHA512.#ctor\n  commentId: M:System.Security.Cryptography.HMACSHA512.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.HMACSHA512\n  langs:\n  - csharp\n  name: HMACSHA512()\n  nameWithType: HMACSHA512.HMACSHA512()\n  fullName: HMACSHA512.HMACSHA512()\n  type: Constructor\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.HMACSHA512\"></xref> class with a randomly generated key.\n  remarks: With this constructor, a 64-byte, randomly generated key is used.\n  syntax:\n    content: public HMACSHA512 ();\n    parameters: []\n  overload: System.Security.Cryptography.HMACSHA512.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA512.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.HMACSHA512.#ctor(System.Byte[])\n  commentId: M:System.Security.Cryptography.HMACSHA512.#ctor(System.Byte[])\n  id: '#ctor(System.Byte[])'\n  parent: System.Security.Cryptography.HMACSHA512\n  langs:\n  - csharp\n  name: HMACSHA512(Byte[])\n  nameWithType: HMACSHA512.HMACSHA512(Byte[])\n  fullName: HMACSHA512.HMACSHA512(Byte[])\n  type: Constructor\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.HMACSHA512\"></xref> class with the specified key data.\n  remarks: ''\n  example:\n  - For an example of how to use this constructor, see the <xref:System.Security.Cryptography.HMACSHA512> class.\n  syntax:\n    content: public HMACSHA512 (byte[] key);\n    parameters:\n    - id: key\n      type: System.Byte[]\n      description: The secret key for <xref href=\"System.Security.Cryptography.HMACSHA512\"></xref> encryption. The key can be any length. However, the recommended size is 128 bytes. If the key is more than 128 bytes long, it is hashed (using SHA-512) to derive a 128-byte key. If it is less than 128 bytes long, it is padded to 128 bytes.\n  overload: System.Security.Cryptography.HMACSHA512.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>key</code> parameter is `null`.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA512.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.HMACSHA512.Dispose(System.Boolean)\n  commentId: M:System.Security.Cryptography.HMACSHA512.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Security.Cryptography.HMACSHA512\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: HMACSHA512.Dispose(Boolean)\n  fullName: HMACSHA512.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: ''\n  overload: System.Security.Cryptography.HMACSHA512.Dispose*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA512.xml\n- uid: System.Security.Cryptography.HMACSHA512.HashCore(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Security.Cryptography.HMACSHA512.HashCore(System.Byte[],System.Int32,System.Int32)\n  id: HashCore(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.HMACSHA512\n  langs:\n  - csharp\n  name: HashCore(Byte[], Int32, Int32)\n  nameWithType: HMACSHA512.HashCore(Byte[], Int32, Int32)\n  fullName: HMACSHA512.HashCore(Byte[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override void HashCore (byte[] rgb, int ib, int cb);\n    parameters:\n    - id: rgb\n      type: System.Byte[]\n      description: ''\n    - id: ib\n      type: System.Int32\n      description: ''\n    - id: cb\n      type: System.Int32\n      description: ''\n  overload: System.Security.Cryptography.HMACSHA512.HashCore*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA512.xml\n- uid: System.Security.Cryptography.HMACSHA512.HashFinal\n  commentId: M:System.Security.Cryptography.HMACSHA512.HashFinal\n  id: HashFinal\n  parent: System.Security.Cryptography.HMACSHA512\n  langs:\n  - csharp\n  name: HashFinal()\n  nameWithType: HMACSHA512.HashFinal()\n  fullName: HMACSHA512.HashFinal()\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override byte[] HashFinal ();\n    parameters: []\n    return:\n      type: System.Byte[]\n      description: ''\n  overload: System.Security.Cryptography.HMACSHA512.HashFinal*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA512.xml\n- uid: System.Security.Cryptography.HMACSHA512.HashSize\n  commentId: P:System.Security.Cryptography.HMACSHA512.HashSize\n  id: HashSize\n  parent: System.Security.Cryptography.HMACSHA512\n  langs:\n  - csharp\n  name: HashSize\n  nameWithType: HMACSHA512.HashSize\n  fullName: HMACSHA512.HashSize\n  type: Property\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override int HashSize { get; }\n    return:\n      type: System.Int32\n      description: ''\n  overload: System.Security.Cryptography.HMACSHA512.HashSize*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA512.xml\n- uid: System.Security.Cryptography.HMACSHA512.Initialize\n  commentId: M:System.Security.Cryptography.HMACSHA512.Initialize\n  id: Initialize\n  parent: System.Security.Cryptography.HMACSHA512\n  langs:\n  - csharp\n  name: Initialize()\n  nameWithType: HMACSHA512.Initialize()\n  fullName: HMACSHA512.Initialize()\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override void Initialize ();\n    parameters: []\n  overload: System.Security.Cryptography.HMACSHA512.Initialize*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA512.xml\n- uid: System.Security.Cryptography.HMACSHA512.Key\n  commentId: P:System.Security.Cryptography.HMACSHA512.Key\n  id: Key\n  parent: System.Security.Cryptography.HMACSHA512\n  langs:\n  - csharp\n  name: Key\n  nameWithType: HMACSHA512.Key\n  fullName: HMACSHA512.Key\n  type: Property\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override byte[] Key { get; set; }\n    return:\n      type: System.Byte[]\n      description: ''\n  overload: System.Security.Cryptography.HMACSHA512.Key*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA512.xml\n- uid: System.Security.Cryptography.HMACSHA512.ProduceLegacyHmacValues\n  commentId: P:System.Security.Cryptography.HMACSHA512.ProduceLegacyHmacValues\n  id: ProduceLegacyHmacValues\n  parent: System.Security.Cryptography.HMACSHA512\n  langs:\n  - csharp\n  name: ProduceLegacyHmacValues\n  nameWithType: HMACSHA512.ProduceLegacyHmacValues\n  fullName: HMACSHA512.ProduceLegacyHmacValues\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: Provides a workaround for the [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)] implementation of the <xref href=\"System.Security.Cryptography.HMACSHA512\"></xref> algorithm, which is inconsistent with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)] implementation.\n  remarks: \"The purpose of the <xref:System.Security.Cryptography.HMACSHA512.ProduceLegacyHmacValues%2A> Boolean property is to enable [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)] applications to interact with [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] applications. When you set this property to `true`, the <xref:System.Security.Cryptography.HMACSHA512> object produces values that match the values produced by the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]. You should set this property only once after you create your HMAC object. You will need to reset your key afterwards, as shown in the following example.  \\n  \\n```  \\npublic static void Test()  \\n    {  \\n    HMACSHA512 hmac = new HMACSHA512();  \\n    hmac.ProduceLegacyHmacValues = true;  \\n    hmac.Key = // ...Get the HMAC key.  \\n    // ...  \\n    // Use the HMAC algorithm.  \\n    // ...  \\n    }  \\n```\"\n  syntax:\n    content: public bool ProduceLegacyHmacValues { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` to enable [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)] applications to interact with [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] applications; otherwise, `false`.'\n  overload: System.Security.Cryptography.HMACSHA512.ProduceLegacyHmacValues*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA512.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Security.Cryptography.HMAC\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HMAC\n  nameWithType: HMAC\n  fullName: System.Security.Cryptography.HMAC\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.Security.Cryptography.HMACSHA512.#ctor\n  parent: System.Security.Cryptography.HMACSHA512\n  isExternal: false\n  name: HMACSHA512()\n  nameWithType: HMACSHA512.HMACSHA512()\n  fullName: HMACSHA512.HMACSHA512()\n- uid: System.Security.Cryptography.HMACSHA512.#ctor(System.Byte[])\n  parent: System.Security.Cryptography.HMACSHA512\n  isExternal: false\n  name: HMACSHA512(Byte[])\n  nameWithType: HMACSHA512.HMACSHA512(Byte[])\n  fullName: HMACSHA512.HMACSHA512(Byte[])\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.Cryptography.HMACSHA512.Dispose(System.Boolean)\n  parent: System.Security.Cryptography.HMACSHA512\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: HMACSHA512.Dispose(Boolean)\n  fullName: HMACSHA512.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.HMACSHA512.HashCore(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.HMACSHA512\n  isExternal: false\n  name: HashCore(Byte[], Int32, Int32)\n  nameWithType: HMACSHA512.HashCore(Byte[], Int32, Int32)\n  fullName: HMACSHA512.HashCore(Byte[], Int32, Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.HMACSHA512.HashFinal\n  parent: System.Security.Cryptography.HMACSHA512\n  isExternal: false\n  name: HashFinal()\n  nameWithType: HMACSHA512.HashFinal()\n  fullName: HMACSHA512.HashFinal()\n- uid: System.Security.Cryptography.HMACSHA512.HashSize\n  parent: System.Security.Cryptography.HMACSHA512\n  isExternal: false\n  name: HashSize\n  nameWithType: HMACSHA512.HashSize\n  fullName: HMACSHA512.HashSize\n- uid: System.Security.Cryptography.HMACSHA512.Initialize\n  parent: System.Security.Cryptography.HMACSHA512\n  isExternal: false\n  name: Initialize()\n  nameWithType: HMACSHA512.Initialize()\n  fullName: HMACSHA512.Initialize()\n- uid: System.Security.Cryptography.HMACSHA512.Key\n  parent: System.Security.Cryptography.HMACSHA512\n  isExternal: false\n  name: Key\n  nameWithType: HMACSHA512.Key\n  fullName: HMACSHA512.Key\n- uid: System.Security.Cryptography.HMACSHA512.ProduceLegacyHmacValues\n  parent: System.Security.Cryptography.HMACSHA512\n  isExternal: false\n  name: ProduceLegacyHmacValues\n  nameWithType: HMACSHA512.ProduceLegacyHmacValues\n  fullName: HMACSHA512.ProduceLegacyHmacValues\n- uid: System.Security.Cryptography.HMACSHA512.#ctor*\n  parent: System.Security.Cryptography.HMACSHA512\n  isExternal: false\n  name: HMACSHA512\n  nameWithType: HMACSHA512.HMACSHA512\n  fullName: HMACSHA512.HMACSHA512\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA512.xml\n- uid: System.Security.Cryptography.HMACSHA512.Dispose*\n  parent: System.Security.Cryptography.HMACSHA512\n  isExternal: false\n  name: Dispose\n  nameWithType: HMACSHA512.Dispose\n  fullName: HMACSHA512.Dispose\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA512.xml\n- uid: System.Security.Cryptography.HMACSHA512.HashCore*\n  parent: System.Security.Cryptography.HMACSHA512\n  isExternal: false\n  name: HashCore\n  nameWithType: HMACSHA512.HashCore\n  fullName: HMACSHA512.HashCore\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA512.xml\n- uid: System.Security.Cryptography.HMACSHA512.HashFinal*\n  parent: System.Security.Cryptography.HMACSHA512\n  isExternal: false\n  name: HashFinal\n  nameWithType: HMACSHA512.HashFinal\n  fullName: HMACSHA512.HashFinal\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA512.xml\n- uid: System.Security.Cryptography.HMACSHA512.HashSize*\n  parent: System.Security.Cryptography.HMACSHA512\n  isExternal: false\n  name: HashSize\n  nameWithType: HMACSHA512.HashSize\n  fullName: HMACSHA512.HashSize\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA512.xml\n- uid: System.Security.Cryptography.HMACSHA512.Initialize*\n  parent: System.Security.Cryptography.HMACSHA512\n  isExternal: false\n  name: Initialize\n  nameWithType: HMACSHA512.Initialize\n  fullName: HMACSHA512.Initialize\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA512.xml\n- uid: System.Security.Cryptography.HMACSHA512.Key*\n  parent: System.Security.Cryptography.HMACSHA512\n  isExternal: false\n  name: Key\n  nameWithType: HMACSHA512.Key\n  fullName: HMACSHA512.Key\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA512.xml\n- uid: System.Security.Cryptography.HMACSHA512.ProduceLegacyHmacValues*\n  parent: System.Security.Cryptography.HMACSHA512\n  isExternal: false\n  name: ProduceLegacyHmacValues\n  nameWithType: HMACSHA512.ProduceLegacyHmacValues\n  fullName: HMACSHA512.ProduceLegacyHmacValues\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA512.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Security.Cryptography.HashAlgorithm.CanReuseTransform\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: CanReuseTransform\n  nameWithType: HashAlgorithm.CanReuseTransform\n  fullName: HashAlgorithm.CanReuseTransform\n- uid: System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: CanTransformMultipleBlocks\n  nameWithType: HashAlgorithm.CanTransformMultipleBlocks\n  fullName: HashAlgorithm.CanTransformMultipleBlocks\n- uid: System.Security.Cryptography.HashAlgorithm.Clear\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: Clear()\n  nameWithType: HashAlgorithm.Clear()\n  fullName: HashAlgorithm.Clear()\n- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: ComputeHash(Byte[])\n  nameWithType: HashAlgorithm.ComputeHash(Byte[])\n  fullName: HashAlgorithm.ComputeHash(Byte[])\n- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: ComputeHash(Stream)\n  nameWithType: HashAlgorithm.ComputeHash(Stream)\n  fullName: HashAlgorithm.ComputeHash(Stream)\n- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: ComputeHash(Byte[], Int32, Int32)\n  nameWithType: HashAlgorithm.ComputeHash(Byte[], Int32, Int32)\n  fullName: HashAlgorithm.ComputeHash(Byte[], Int32, Int32)\n- uid: System.Security.Cryptography.HMAC.Create\n  parent: System.Security.Cryptography.HMAC\n  isExternal: false\n  name: Create()\n  nameWithType: HMAC.Create()\n  fullName: HMAC.Create()\n- uid: System.Security.Cryptography.HMAC.Create(System.String)\n  parent: System.Security.Cryptography.HMAC\n  isExternal: false\n  name: Create(String)\n  nameWithType: HMAC.Create(String)\n  fullName: HMAC.Create(String)\n- uid: System.Security.Cryptography.HashAlgorithm.Dispose\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: Dispose()\n  nameWithType: HashAlgorithm.Dispose()\n  fullName: HashAlgorithm.Dispose()\n- uid: System.Security.Cryptography.HashAlgorithm.Hash\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: Hash\n  nameWithType: HashAlgorithm.Hash\n  fullName: HashAlgorithm.Hash\n- uid: System.Security.Cryptography.HashAlgorithm.HashSizeValue\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: HashSizeValue\n  nameWithType: HashAlgorithm.HashSizeValue\n  fullName: HashAlgorithm.HashSizeValue\n- uid: System.Security.Cryptography.HashAlgorithm.HashValue\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: HashValue\n  nameWithType: HashAlgorithm.HashValue\n  fullName: HashAlgorithm.HashValue\n- uid: System.Security.Cryptography.HashAlgorithm.InputBlockSize\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: InputBlockSize\n  nameWithType: HashAlgorithm.InputBlockSize\n  fullName: HashAlgorithm.InputBlockSize\n- uid: System.Security.Cryptography.HashAlgorithm.OutputBlockSize\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: OutputBlockSize\n  nameWithType: HashAlgorithm.OutputBlockSize\n  fullName: HashAlgorithm.OutputBlockSize\n- uid: System.Security.Cryptography.HashAlgorithm.State\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: State\n  nameWithType: HashAlgorithm.State\n  fullName: HashAlgorithm.State\n- uid: System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: TransformBlock(Byte[], Int32, Int32, Byte[], Int32)\n  nameWithType: HashAlgorithm.TransformBlock(Byte[], Int32, Int32, Byte[], Int32)\n  fullName: HashAlgorithm.TransformBlock(Byte[], Int32, Int32, Byte[], Int32)\n- uid: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: TransformFinalBlock(Byte[], Int32, Int32)\n  nameWithType: HashAlgorithm.TransformFinalBlock(Byte[], Int32, Int32)\n  fullName: HashAlgorithm.TransformFinalBlock(Byte[], Int32, Int32)\n- uid: System.Security.Cryptography.KeyedHashAlgorithm.KeyValue\n  parent: System.Security.Cryptography.KeyedHashAlgorithm\n  isExternal: false\n  name: KeyValue\n  nameWithType: KeyedHashAlgorithm.KeyValue\n  fullName: KeyedHashAlgorithm.KeyValue\n- uid: System.Security.Cryptography.HMAC.BlockSizeValue\n  parent: System.Security.Cryptography.HMAC\n  isExternal: false\n  name: BlockSizeValue\n  nameWithType: HMAC.BlockSizeValue\n  fullName: HMAC.BlockSizeValue\n- uid: System.Security.Cryptography.HMAC.HashName\n  parent: System.Security.Cryptography.HMAC\n  isExternal: false\n  name: HashName\n  nameWithType: HMAC.HashName\n  fullName: HMAC.HashName\n"}