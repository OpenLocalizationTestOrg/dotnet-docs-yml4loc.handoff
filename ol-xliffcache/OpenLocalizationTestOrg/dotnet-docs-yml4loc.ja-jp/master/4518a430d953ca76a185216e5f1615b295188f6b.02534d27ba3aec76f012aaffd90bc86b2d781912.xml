{"nodes":[{"content":"Defines an interface that allows you to get and set the context on the channel.","nodes":[{"pos":[0,79],"content":"Defines an interface that allows you to get and set the context on the channel.","nodes":[{"content":"Defines an interface that allows you to get and set the context on the channel.","pos":[0,79]}]}],"pos":[670,750],"yaml":true},{"content":"For channels that use <xref:System.ServiceModel.WSHttpContextBinding> with the <xref:System.ServiceModel.SessionMode.NotAllowed> value set, the context cannot be retrieved on the client using <xref:System.ServiceModel.Channels.IContextManager> because a new channel that establishes a session is created each time <xref:System.ServiceModel.Channels.IChannelFactory.GetProperty%2A> is called to enforce <xref:System.ServiceModel.SessionMode.NotAllowed> semantics on a channel. This means that even though the context is properly propagated back to the client in this case, it cannot be retrieved using <xref:System.ServiceModel.Channels.IContextManager>. You can still retrieve it using <xref:System.ServiceModel.Channels.ContextMessageProperty> as shown in the following code.  \n  \n```csharp  \nusing (new OperationContextScope((IContextChannel)channel))  \n{  \n    channel.MyChannel(\"Test\");  \n    ContextMessageProperty context;  \n    if (ContextMessageProperty.TryGet(OperationContext.Current.IncomingMessageProperties, out context))  \n    {  \n        Console.WriteLine(context.Count);  \n    }  \n}  \n  \n```","nodes":[{"pos":[0,776],"content":"For channels that use <xref:System.ServiceModel.WSHttpContextBinding> with the <xref:System.ServiceModel.SessionMode.NotAllowed> value set, the context cannot be retrieved on the client using <xref:System.ServiceModel.Channels.IContextManager> because a new channel that establishes a session is created each time <xref:System.ServiceModel.Channels.IChannelFactory.GetProperty%2A> is called to enforce <xref:System.ServiceModel.SessionMode.NotAllowed> semantics on a channel. This means that even though the context is properly propagated back to the client in this case, it cannot be retrieved using <xref:System.ServiceModel.Channels.IContextManager>. You can still retrieve it using <xref:System.ServiceModel.Channels.ContextMessageProperty> as shown in the following code.","nodes":[{"content":"For channels that use <xref:System.ServiceModel.WSHttpContextBinding> with the <xref:System.ServiceModel.SessionMode.NotAllowed> value set, the context cannot be retrieved on the client using <xref:System.ServiceModel.Channels.IContextManager> because a new channel that establishes a session is created each time <xref:System.ServiceModel.Channels.IChannelFactory.GetProperty%2A> is called to enforce <xref:System.ServiceModel.SessionMode.NotAllowed> semantics on a channel. This means that even though the context is properly propagated back to the client in this case, it cannot be retrieved using <xref:System.ServiceModel.Channels.IContextManager>. You can still retrieve it using <xref:System.ServiceModel.Channels.ContextMessageProperty> as shown in the following code.","pos":[0,776],"nodes":[{"content":"For channels that use <ph id=\"ph1\">&lt;xref:System.ServiceModel.WSHttpContextBinding&gt;</ph> with the <ph id=\"ph2\">&lt;xref:System.ServiceModel.SessionMode.NotAllowed&gt;</ph> value set, the context cannot be retrieved on the client using <ph id=\"ph3\">&lt;xref:System.ServiceModel.Channels.IContextManager&gt;</ph> because a new channel that establishes a session is created each time <ph id=\"ph4\">&lt;xref:System.ServiceModel.Channels.IChannelFactory.GetProperty%2A&gt;</ph> is called to enforce <ph id=\"ph5\">&lt;xref:System.ServiceModel.SessionMode.NotAllowed&gt;</ph> semantics on a channel.","pos":[0,475],"source":"For channels that use <xref:System.ServiceModel.WSHttpContextBinding> with the <xref:System.ServiceModel.SessionMode.NotAllowed> value set, the context cannot be retrieved on the client using <xref:System.ServiceModel.Channels.IContextManager> because a new channel that establishes a session is created each time <xref:System.ServiceModel.Channels.IChannelFactory.GetProperty%2A> is called to enforce <xref:System.ServiceModel.SessionMode.NotAllowed> semantics on a channel."},{"content":"This means that even though the context is properly propagated back to the client in this case, it cannot be retrieved using <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.IContextManager&gt;</ph>.","pos":[476,653],"source":" This means that even though the context is properly propagated back to the client in this case, it cannot be retrieved using <xref:System.ServiceModel.Channels.IContextManager>."},{"content":"You can still retrieve it using <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.ContextMessageProperty&gt;</ph> as shown in the following code.","pos":[654,776],"source":" You can still retrieve it using <xref:System.ServiceModel.Channels.ContextMessageProperty> as shown in the following code."}]}]}],"pos":[761,1886],"yaml":true,"extradata":"MT"},{"content":"Gets or sets a value that indicates whether the context management is enabled.","nodes":[{"pos":[0,78],"content":"Gets or sets a value that indicates whether the context management is enabled.","nodes":[{"content":"Gets or sets a value that indicates whether the context management is enabled.","pos":[0,78]}]}],"pos":[2933,3012],"yaml":true},{"content":"When context management is enabled the context channel caches the context in its lifetime. Context can be retrieved from the channel through the `IContextManager` channel property by calling <xref:System.ServiceModel.Channels.IContextManager.GetContext%2A> method on it. The channel can also be pre-initialized with context before being opened by calling the <xref:System.ServiceModel.Channels.IContextManager.SetContext%2A> method on the channel property. Once the channel is initialized with context it cannot be reset.  \n  \n The following are invariants in this mode:  \n  \n-   Any call to <xref:System.ServiceModel.Channels.IContextManager.SetContext%2A> after the channel is open throws an `InvalidOperationException`.  \n  \n-   Any attempt to send context through the `ContextMessageProperty` in an outgoing message throws `InvalidOperationException`.  \n  \n-   If a message is received from the server with context, when the channel is already initialized with a context a `ProtocolException` is thrown. Note that you can receive initial context from a server if the channel is opened without explicitly setting the context.  \n  \n-   The `ContextMessageProperty` on an incoming message is always `null`.  \n  \n When context management is not enabled, the context channel does not manage context. It is the application's responsibility to retrieve, manage and apply context through the `ContextMessageProperty`. Any attempt to call <xref:System.ServiceModel.Channels.IContextManager.GetContext%2A> or <xref:System.ServiceModel.Channels.IContextManager.SetContext%2A> using through the `IContextManager` channel property results in `InvalidOperationException`.  \n  \n All HTTP cookies, except for context HTTP cookies, are handled at the channel level. Context HTTP cookies are managed at the application level. This can have unexpected consequences when channels are shared to talk to different instances targeted by <xref:System.ServiceModel.Channels.ContextMessageProperty>. The following table shows how HTTP cookies are affected when <xref:System.ServiceModel.Channels.IContextManager.Enabled%2A> is set to either `true` or `false`.  \n  \n|Binding|IContextManager.Enabled Value|Context HTTP Cookie Scope|Other HTTP Cookies Scope|  \n|-------------|-----------------------------------|-------------------------------|------------------------------|  \n|BasicHttpBinding|n/a|ChannelFactory|ChannelFactory|  \n|BasicHttpContextBinding|true|Channel|Channel|  \n|BasicHttpContextBinding|false|For each message (explicitly managed by application)|Channel|","nodes":[{"pos":[0,521],"content":"When context management is enabled the context channel caches the context in its lifetime. Context can be retrieved from the channel through the `IContextManager` channel property by calling <xref:System.ServiceModel.Channels.IContextManager.GetContext%2A> method on it. The channel can also be pre-initialized with context before being opened by calling the <xref:System.ServiceModel.Channels.IContextManager.SetContext%2A> method on the channel property. Once the channel is initialized with context it cannot be reset.","nodes":[{"content":"When context management is enabled the context channel caches the context in its lifetime.","pos":[0,90]},{"content":"Context can be retrieved from the channel through the <ph id=\"ph1\">`IContextManager`</ph> channel property by calling <ph id=\"ph2\">&lt;xref:System.ServiceModel.Channels.IContextManager.GetContext%2A&gt;</ph> method on it.","pos":[91,270],"source":" Context can be retrieved from the channel through the `IContextManager` channel property by calling <xref:System.ServiceModel.Channels.IContextManager.GetContext%2A> method on it."},{"content":"The channel can also be pre-initialized with context before being opened by calling the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.IContextManager.SetContext%2A&gt;</ph> method on the channel property.","pos":[271,456],"source":" The channel can also be pre-initialized with context before being opened by calling the <xref:System.ServiceModel.Channels.IContextManager.SetContext%2A> method on the channel property."},{"content":"Once the channel is initialized with context it cannot be reset.","pos":[457,521]}]},{"pos":[528,570],"content":"The following are invariants in this mode:","nodes":[{"content":"The following are invariants in this mode:","pos":[0,42]}]},{"pos":[580,722],"content":"Any call to <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.IContextManager.SetContext%2A&gt;</ph> after the channel is open throws an <ph id=\"ph2\">`InvalidOperationException`</ph>.","source":"Any call to <xref:System.ServiceModel.Channels.IContextManager.SetContext%2A> after the channel is open throws an `InvalidOperationException`."},{"pos":[732,855],"content":"Any attempt to send context through the <ph id=\"ph1\">`ContextMessageProperty`</ph> in an outgoing message throws <ph id=\"ph2\">`InvalidOperationException`</ph>.","source":"Any attempt to send context through the `ContextMessageProperty` in an outgoing message throws `InvalidOperationException`."},{"pos":[865,1128],"content":"If a message is received from the server with context, when the channel is already initialized with a context a `ProtocolException` is thrown. Note that you can receive initial context from a server if the channel is opened without explicitly setting the context.","nodes":[{"content":"If a message is received from the server with context, when the channel is already initialized with a context a <ph id=\"ph1\">`ProtocolException`</ph> is thrown.","pos":[0,142],"source":"If a message is received from the server with context, when the channel is already initialized with a context a `ProtocolException` is thrown."},{"content":"Note that you can receive initial context from a server if the channel is opened without explicitly setting the context.","pos":[143,263]}]},{"pos":[1138,1207],"content":"The <ph id=\"ph1\">`ContextMessageProperty`</ph> on an incoming message is always <ph id=\"ph2\">`null`</ph>.","source":"The `ContextMessageProperty` on an incoming message is always `null`."},{"pos":[1214,1661],"content":"When context management is not enabled, the context channel does not manage context. It is the application's responsibility to retrieve, manage and apply context through the `ContextMessageProperty`. Any attempt to call <xref:System.ServiceModel.Channels.IContextManager.GetContext%2A> or <xref:System.ServiceModel.Channels.IContextManager.SetContext%2A> using through the `IContextManager` channel property results in `InvalidOperationException`.","nodes":[{"content":"When context management is not enabled, the context channel does not manage context.","pos":[0,84]},{"content":"It is the application's responsibility to retrieve, manage and apply context through the <ph id=\"ph1\">`ContextMessageProperty`</ph>.","pos":[85,199],"source":" It is the application's responsibility to retrieve, manage and apply context through the `ContextMessageProperty`."},{"content":"Any attempt to call <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.IContextManager.GetContext%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.ServiceModel.Channels.IContextManager.SetContext%2A&gt;</ph> using through the <ph id=\"ph3\">`IContextManager`</ph> channel property results in <ph id=\"ph4\">`InvalidOperationException`</ph>.","pos":[200,447],"source":" Any attempt to call <xref:System.ServiceModel.Channels.IContextManager.GetContext%2A> or <xref:System.ServiceModel.Channels.IContextManager.SetContext%2A> using through the `IContextManager` channel property results in `InvalidOperationException`."}]},{"pos":[1668,2137],"content":"All HTTP cookies, except for context HTTP cookies, are handled at the channel level. Context HTTP cookies are managed at the application level. This can have unexpected consequences when channels are shared to talk to different instances targeted by <xref:System.ServiceModel.Channels.ContextMessageProperty>. The following table shows how HTTP cookies are affected when <xref:System.ServiceModel.Channels.IContextManager.Enabled%2A> is set to either `true` or `false`.","nodes":[{"content":"All HTTP cookies, except for context HTTP cookies, are handled at the channel level.","pos":[0,84]},{"content":"Context HTTP cookies are managed at the application level.","pos":[85,143]},{"content":"This can have unexpected consequences when channels are shared to talk to different instances targeted by <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.ContextMessageProperty&gt;</ph>.","pos":[144,309],"source":" This can have unexpected consequences when channels are shared to talk to different instances targeted by <xref:System.ServiceModel.Channels.ContextMessageProperty>."},{"content":"The following table shows how HTTP cookies are affected when <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.IContextManager.Enabled%2A&gt;</ph> is set to either <ph id=\"ph2\">`true`</ph> or <ph id=\"ph3\">`false`</ph>.","pos":[310,469],"source":" The following table shows how HTTP cookies are affected when <xref:System.ServiceModel.Channels.IContextManager.Enabled%2A> is set to either `true` or `false`."}]},{"pos":[2144,2151],"content":"Binding","nodes":[{"content":"Binding","pos":[0,7]}]},{"pos":[2152,2181],"content":"IContextManager.Enabled Value","nodes":[{"content":"IContextManager.Enabled Value","pos":[0,29]}]},{"pos":[2182,2207],"content":"Context HTTP Cookie Scope","nodes":[{"content":"Context HTTP Cookie Scope","pos":[0,25]}]},{"pos":[2208,2232],"content":"Other HTTP Cookies Scope","nodes":[{"content":"Other HTTP Cookies Scope","pos":[0,24]}]},{"pos":[2354,2370],"content":"BasicHttpBinding","nodes":[{"content":"BasicHttpBinding","pos":[0,16]}]},{"pos":[2371,2374],"content":"n/a","nodes":[{"content":"n/a","pos":[0,3]}]},{"pos":[2375,2389],"content":"ChannelFactory","nodes":[{"content":"ChannelFactory","pos":[0,14]}]},{"pos":[2390,2404],"content":"ChannelFactory","nodes":[{"content":"ChannelFactory","pos":[0,14]}]},{"pos":[2409,2432],"content":"BasicHttpContextBinding","nodes":[{"content":"BasicHttpContextBinding","pos":[0,23]}]},{"pos":[2433,2437],"content":"true","nodes":[{"content":"true","pos":[0,4]}]},{"pos":[2438,2445],"content":"Channel","nodes":[{"content":"Channel","pos":[0,7]}]},{"pos":[2446,2453],"content":"Channel","nodes":[{"content":"Channel","pos":[0,7]}]},{"pos":[2458,2481],"content":"BasicHttpContextBinding","nodes":[{"content":"BasicHttpContextBinding","pos":[0,23]}]},{"pos":[2482,2487],"content":"false","nodes":[{"content":"false","pos":[0,5]}]},{"pos":[2488,2540],"content":"For each message (explicitly managed by application)","nodes":[{"content":"For each message (explicitly managed by application)","pos":[0,52]}]},{"pos":[2541,2548],"content":"Channel","nodes":[{"content":"Channel","pos":[0,7]}]}],"pos":[3023,5595],"yaml":true,"extradata":"MT"},{"content":"`true` if the context is enabled; otherwise, `false`.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">`true`</ph> if the context is enabled; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the context is enabled; otherwise, `false`."}],"pos":[5710,5766],"yaml":true},{"content":"Gets the context.","nodes":[{"pos":[0,17],"content":"Gets the context.","nodes":[{"content":"Gets the context.","pos":[0,17]}]}],"pos":[6828,6846],"yaml":true},{"content":"The <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> of key/value pairs with the namespace and name of the context.","nodes":[{"pos":[0,128],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IDictionary`2\"&gt;&lt;/xref&gt;</ph> of key/value pairs with the namespace and name of the context.","source":"The <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> of key/value pairs with the namespace and name of the context."}],"pos":[7418,7547],"yaml":true},{"content":"Sets the context.","nodes":[{"pos":[0,17],"content":"Sets the context.","nodes":[{"content":"Sets the context.","pos":[0,17]}]}],"pos":[8897,8915],"yaml":true},{"content":"The <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> of key/value pairs with the namespace and name of the context that is set.","nodes":[{"pos":[0,140],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IDictionary`2\"&gt;&lt;/xref&gt;</ph> of key/value pairs with the namespace and name of the context that is set.","source":"The <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> of key/value pairs with the namespace and name of the context that is set."}],"pos":[9466,9607],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ServiceModel.Channels.IContextManager\n  commentId: T:System.ServiceModel.Channels.IContextManager\n  id: IContextManager\n  children:\n  - System.ServiceModel.Channels.IContextManager.Enabled\n  - System.ServiceModel.Channels.IContextManager.GetContext\n  - System.ServiceModel.Channels.IContextManager.SetContext(System.Collections.Generic.IDictionary{System.String,System.String})\n  langs:\n  - csharp\n  name: IContextManager\n  nameWithType: IContextManager\n  fullName: System.ServiceModel.Channels.IContextManager\n  type: Interface\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Channels\n  summary: Defines an interface that allows you to get and set the context on the channel.\n  remarks: \"For channels that use <xref:System.ServiceModel.WSHttpContextBinding> with the <xref:System.ServiceModel.SessionMode.NotAllowed> value set, the context cannot be retrieved on the client using <xref:System.ServiceModel.Channels.IContextManager> because a new channel that establishes a session is created each time <xref:System.ServiceModel.Channels.IChannelFactory.GetProperty%2A> is called to enforce <xref:System.ServiceModel.SessionMode.NotAllowed> semantics on a channel. This means that even though the context is properly propagated back to the client in this case, it cannot be retrieved using <xref:System.ServiceModel.Channels.IContextManager>. You can still retrieve it using <xref:System.ServiceModel.Channels.ContextMessageProperty> as shown in the following code.  \\n  \\n```csharp  \\nusing (new OperationContextScope((IContextChannel)channel))  \\n{  \\n    channel.MyChannel(\\\"Test\\\");  \\n    ContextMessageProperty context;  \\n    if (ContextMessageProperty.TryGet(OperationContext.Current.IncomingMessageProperties, out context))  \\n    {  \\n        Console.WriteLine(context.Count);  \\n    }  \\n}  \\n  \\n```\"\n  syntax:\n    content: public interface IContextManager\n  implements: []\n  attributes: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Channels/IContextManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.ServiceModel.Channels.IContextManager.Enabled\n  commentId: P:System.ServiceModel.Channels.IContextManager.Enabled\n  id: Enabled\n  parent: System.ServiceModel.Channels.IContextManager\n  langs:\n  - csharp\n  name: Enabled\n  nameWithType: IContextManager.Enabled\n  fullName: IContextManager.Enabled\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Channels\n  summary: Gets or sets a value that indicates whether the context management is enabled.\n  remarks: \"When context management is enabled the context channel caches the context in its lifetime. Context can be retrieved from the channel through the `IContextManager` channel property by calling <xref:System.ServiceModel.Channels.IContextManager.GetContext%2A> method on it. The channel can also be pre-initialized with context before being opened by calling the <xref:System.ServiceModel.Channels.IContextManager.SetContext%2A> method on the channel property. Once the channel is initialized with context it cannot be reset.  \\n  \\n The following are invariants in this mode:  \\n  \\n-   Any call to <xref:System.ServiceModel.Channels.IContextManager.SetContext%2A> after the channel is open throws an `InvalidOperationException`.  \\n  \\n-   Any attempt to send context through the `ContextMessageProperty` in an outgoing message throws `InvalidOperationException`.  \\n  \\n-   If a message is received from the server with context, when the channel is already initialized with a context a `ProtocolException` is thrown. Note that you can receive initial context from a server if the channel is opened without explicitly setting the context.  \\n  \\n-   The `ContextMessageProperty` on an incoming message is always `null`.  \\n  \\n When context management is not enabled, the context channel does not manage context. It is the application's responsibility to retrieve, manage and apply context through the `ContextMessageProperty`. Any attempt to call <xref:System.ServiceModel.Channels.IContextManager.GetContext%2A> or <xref:System.ServiceModel.Channels.IContextManager.SetContext%2A> using through the `IContextManager` channel property results in `InvalidOperationException`.  \\n  \\n All HTTP cookies, except for context HTTP cookies, are handled at the channel level. Context HTTP cookies are managed at the application level. This can have unexpected consequences when channels are shared to talk to different instances targeted by <xref:System.ServiceModel.Channels.ContextMessageProperty>. The following table shows how HTTP cookies are affected when <xref:System.ServiceModel.Channels.IContextManager.Enabled%2A> is set to either `true` or `false`.  \\n  \\n|Binding|IContextManager.Enabled Value|Context HTTP Cookie Scope|Other HTTP Cookies Scope|  \\n|-------------|-----------------------------------|-------------------------------|------------------------------|  \\n|BasicHttpBinding|n/a|ChannelFactory|ChannelFactory|  \\n|BasicHttpContextBinding|true|Channel|Channel|  \\n|BasicHttpContextBinding|false|For each message (explicitly managed by application)|Channel|\"\n  syntax:\n    content: public bool Enabled { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if the context is enabled; otherwise, `false`.'\n  overload: System.ServiceModel.Channels.IContextManager.Enabled*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Channels/IContextManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.ServiceModel.Channels.IContextManager.GetContext\n  commentId: M:System.ServiceModel.Channels.IContextManager.GetContext\n  id: GetContext\n  parent: System.ServiceModel.Channels.IContextManager\n  langs:\n  - csharp\n  name: GetContext()\n  nameWithType: IContextManager.GetContext()\n  fullName: IContextManager.GetContext()\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Channels\n  summary: Gets the context.\n  remarks: ''\n  example:\n  - \"The following code shows how the context can be obtained from a typed proxy instance on the client.  \\n  \\n```  \\nIDictionary<string, string> context;  \\nCalculatorProxy proxy;  \\nIContextManager cm = proxy.InnerChannel.GetProperty<IContextManager>();  \\nif (cm != null)  \\n    context = cm.GetContext();  \\n```\"\n  syntax:\n    content: public System.Collections.Generic.IDictionary<string,string> GetContext ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IDictionary{System.String,System.String}\n      description: The <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> of key/value pairs with the namespace and name of the context.\n  overload: System.ServiceModel.Channels.IContextManager.GetContext*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Channels/IContextManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.ServiceModel.Channels.IContextManager.SetContext(System.Collections.Generic.IDictionary{System.String,System.String})\n  commentId: M:System.ServiceModel.Channels.IContextManager.SetContext(System.Collections.Generic.IDictionary{System.String,System.String})\n  id: SetContext(System.Collections.Generic.IDictionary{System.String,System.String})\n  parent: System.ServiceModel.Channels.IContextManager\n  langs:\n  - csharp\n  name: SetContext(IDictionary<String,String>)\n  nameWithType: IContextManager.SetContext(IDictionary<String,String>)\n  fullName: IContextManager.SetContext(IDictionary<String,String>)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Channels\n  summary: Sets the context.\n  remarks: ''\n  example:\n  - \"The following code shows how the context can be set on the client.  \\n  \\n```  \\nIDictionary<string, string> context;  \\nCalculatorProxy proxy;  \\nIContextManager cm = proxy.InnerChannel.GetProperty<IContextManager>();  \\nif (cm != null)  \\n    cm.SetContext(context);  \\n```\"\n  syntax:\n    content: public void SetContext (System.Collections.Generic.IDictionary<string,string> context);\n    parameters:\n    - id: context\n      type: System.Collections.Generic.IDictionary{System.String,System.String}\n      description: The <xref href=\"System.Collections.Generic.IDictionary`2\"></xref> of key/value pairs with the namespace and name of the context that is set.\n  overload: System.ServiceModel.Channels.IContextManager.SetContext*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Channels/IContextManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\nreferences:\n- uid: System.ServiceModel.Channels.IContextManager.Enabled\n  parent: System.ServiceModel.Channels.IContextManager\n  isExternal: false\n  name: Enabled\n  nameWithType: IContextManager.Enabled\n  fullName: IContextManager.Enabled\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.ServiceModel.Channels.IContextManager.GetContext\n  parent: System.ServiceModel.Channels.IContextManager\n  isExternal: false\n  name: GetContext()\n  nameWithType: IContextManager.GetContext()\n  fullName: IContextManager.GetContext()\n- uid: System.Collections.Generic.IDictionary`2\n  name: IDictionary<TKey,TValue>\n  nameWithType: IDictionary<TKey,TValue>\n  fullName: System.Collections.Generic.IDictionary<TKey,TValue>\n- uid: System.String\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Collections.Generic.IDictionary{System.String,System.String}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IDictionary<String,String>\n  nameWithType: IDictionary<String,String>\n  fullName: System.Collections.Generic.IDictionary<System.String,System.String>\n  spec.csharp:\n  - uid: System.Collections.Generic.IDictionary`2\n    name: IDictionary\n    nameWithType: IDictionary\n    fullName: System.Collections.Generic.IDictionary\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: System.String\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: System.String\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.ServiceModel.Channels.IContextManager.SetContext(System.Collections.Generic.IDictionary{System.String,System.String})\n  parent: System.ServiceModel.Channels.IContextManager\n  isExternal: false\n  name: SetContext(IDictionary<String,String>)\n  nameWithType: IContextManager.SetContext(IDictionary<String,String>)\n  fullName: IContextManager.SetContext(IDictionary<String,String>)\n- uid: System.ServiceModel.Channels.IContextManager.Enabled*\n  parent: System.ServiceModel.Channels.IContextManager\n  isExternal: false\n  name: Enabled\n  nameWithType: IContextManager.Enabled\n  fullName: IContextManager.Enabled\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Channels/IContextManager.xml\n- uid: System.ServiceModel.Channels.IContextManager.GetContext*\n  parent: System.ServiceModel.Channels.IContextManager\n  isExternal: false\n  name: GetContext\n  nameWithType: IContextManager.GetContext\n  fullName: IContextManager.GetContext\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Channels/IContextManager.xml\n- uid: System.ServiceModel.Channels.IContextManager.SetContext*\n  parent: System.ServiceModel.Channels.IContextManager\n  isExternal: false\n  name: SetContext\n  nameWithType: IContextManager.SetContext\n  fullName: IContextManager.SetContext\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Channels/IContextManager.xml\n"}