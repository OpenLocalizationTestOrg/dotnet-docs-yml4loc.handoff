{"nodes":[{"content":"Indicates whether an <xref href=\"System.Threading.EventWaitHandle\"></xref> is reset automatically or manually after receiving a signal.","nodes":[{"pos":[0,135],"content":"Indicates whether an <ph id=\"ph1\">&lt;xref href=\"System.Threading.EventWaitHandle\"&gt;&lt;/xref&gt;</ph> is reset automatically or manually after receiving a signal.","source":"Indicates whether an <xref href=\"System.Threading.EventWaitHandle\"></xref> is reset automatically or manually after receiving a signal."}],"pos":[485,621],"yaml":true},{"content":"When signaled, the <xref href=\"System.Threading.EventWaitHandle\"></xref> resets automatically after releasing a single thread. If no threads are waiting, the <xref href=\"System.Threading.EventWaitHandle\"></xref> remains signaled until a thread blocks, and resets after releasing the thread.","nodes":[{"pos":[0,290],"content":"When signaled, the <xref href=\"System.Threading.EventWaitHandle\"></xref> resets automatically after releasing a single thread. If no threads are waiting, the <xref href=\"System.Threading.EventWaitHandle\"></xref> remains signaled until a thread blocks, and resets after releasing the thread.","nodes":[{"content":"When signaled, the <ph id=\"ph1\">&lt;xref href=\"System.Threading.EventWaitHandle\"&gt;&lt;/xref&gt;</ph> resets automatically after releasing a single thread.","pos":[0,126],"source":"When signaled, the <xref href=\"System.Threading.EventWaitHandle\"></xref> resets automatically after releasing a single thread."},{"content":"If no threads are waiting, the <ph id=\"ph1\">&lt;xref href=\"System.Threading.EventWaitHandle\"&gt;&lt;/xref&gt;</ph> remains signaled until a thread blocks, and resets after releasing the thread.","pos":[127,290],"source":" If no threads are waiting, the <xref href=\"System.Threading.EventWaitHandle\"></xref> remains signaled until a thread blocks, and resets after releasing the thread."}]}],"pos":[3481,3772],"yaml":true},{"content":"When signaled, the <xref href=\"System.Threading.EventWaitHandle\"></xref> releases all waiting threads and remains signaled until it is manually reset.","nodes":[{"pos":[0,150],"content":"When signaled, the <ph id=\"ph1\">&lt;xref href=\"System.Threading.EventWaitHandle\"&gt;&lt;/xref&gt;</ph> releases all waiting threads and remains signaled until it is manually reset.","source":"When signaled, the <xref href=\"System.Threading.EventWaitHandle\"></xref> releases all waiting threads and remains signaled until it is manually reset."}],"pos":[5246,5397],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Threading.EventResetMode\n  commentId: T:System.Threading.EventResetMode\n  id: EventResetMode\n  children:\n  - System.Threading.EventResetMode.AutoReset\n  - System.Threading.EventResetMode.ManualReset\n  langs:\n  - csharp\n  name: EventResetMode\n  nameWithType: EventResetMode\n  fullName: System.Threading.EventResetMode\n  type: Enum\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Indicates whether an <xref href=\"System.Threading.EventWaitHandle\"></xref> is reset automatically or manually after receiving a signal.\n  remarks: ''\n  example:\n  - \"The following code example uses the <xref:System.Threading.WaitHandle.SignalAndWait%28System.Threading.WaitHandle%2CSystem.Threading.WaitHandle%29> method overload to allow the main thread to signal a blocked thread and then wait until the thread finishes a task.  \\n  \\n The example starts five threads and allows them to block on an <xref:System.Threading.EventWaitHandle> created with the AutoReset flag, then releases one thread each time the user presses the ENTER key. The example then queues another five threads and releases them all using an <xref:System.Threading.EventWaitHandle> created with the ManualReset flag.  \\n  \\n [!code-cpp[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/CPP/source.cpp#1)]\\n [!code-csharp[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/CS/source.cs#1)]\\n [!code-vb[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/VB/source.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public enum EventResetMode\n  inheritance:\n  - System.Object\n  - System.ValueType\n  - System.Enum\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/EventResetMode.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.EventResetMode.AutoReset\n  commentId: F:System.Threading.EventResetMode.AutoReset\n  id: AutoReset\n  parent: System.Threading.EventResetMode\n  langs:\n  - csharp\n  name: AutoReset\n  nameWithType: EventResetMode.AutoReset\n  fullName: EventResetMode.AutoReset\n  type: Field\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: When signaled, the <xref href=\"System.Threading.EventWaitHandle\"></xref> resets automatically after releasing a single thread. If no threads are waiting, the <xref href=\"System.Threading.EventWaitHandle\"></xref> remains signaled until a thread blocks, and resets after releasing the thread.\n  syntax:\n    content: AutoReset\n    return:\n      type: System.Threading.EventResetMode\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/EventResetMode.xml\n- uid: System.Threading.EventResetMode.ManualReset\n  commentId: F:System.Threading.EventResetMode.ManualReset\n  id: ManualReset\n  parent: System.Threading.EventResetMode\n  langs:\n  - csharp\n  name: ManualReset\n  nameWithType: EventResetMode.ManualReset\n  fullName: EventResetMode.ManualReset\n  type: Field\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: When signaled, the <xref href=\"System.Threading.EventWaitHandle\"></xref> releases all waiting threads and remains signaled until it is manually reset.\n  syntax:\n    content: ManualReset\n    return:\n      type: System.Threading.EventResetMode\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/EventResetMode.xml\nreferences:\n- uid: System.Enum\n  parent: System\n  isExternal: false\n  name: Enum\n  nameWithType: Enum\n  fullName: System.Enum\n- uid: System.Threading.EventResetMode.AutoReset\n  parent: System.Threading.EventResetMode\n  isExternal: false\n  name: AutoReset\n  nameWithType: EventResetMode.AutoReset\n  fullName: EventResetMode.AutoReset\n- uid: System.Threading.EventResetMode\n  parent: System.Threading\n  isExternal: false\n  name: EventResetMode\n  nameWithType: EventResetMode\n  fullName: System.Threading.EventResetMode\n- uid: System.Threading.EventResetMode.ManualReset\n  parent: System.Threading.EventResetMode\n  isExternal: false\n  name: ManualReset\n  nameWithType: EventResetMode.ManualReset\n  fullName: EventResetMode.ManualReset\n"}