### YamlMime:ManagedReference
items:
- uid: System.Net.Dns
  commentId: T:System.Net.Dns
  id: Dns
  children:
  - System.Net.Dns.BeginGetHostAddresses(System.String,System.AsyncCallback,System.Object)
  - System.Net.Dns.BeginGetHostByName(System.String,System.AsyncCallback,System.Object)
  - System.Net.Dns.BeginGetHostEntry(System.Net.IPAddress,System.AsyncCallback,System.Object)
  - System.Net.Dns.BeginGetHostEntry(System.String,System.AsyncCallback,System.Object)
  - System.Net.Dns.BeginResolve(System.String,System.AsyncCallback,System.Object)
  - System.Net.Dns.EndGetHostAddresses(System.IAsyncResult)
  - System.Net.Dns.EndGetHostByName(System.IAsyncResult)
  - System.Net.Dns.EndGetHostEntry(System.IAsyncResult)
  - System.Net.Dns.EndResolve(System.IAsyncResult)
  - System.Net.Dns.GetHostAddresses(System.String)
  - System.Net.Dns.GetHostAddressesAsync(System.String)
  - System.Net.Dns.GetHostByAddress(System.Net.IPAddress)
  - System.Net.Dns.GetHostByAddress(System.String)
  - System.Net.Dns.GetHostByName(System.String)
  - System.Net.Dns.GetHostEntry(System.Net.IPAddress)
  - System.Net.Dns.GetHostEntry(System.String)
  - System.Net.Dns.GetHostEntryAsync(System.Net.IPAddress)
  - System.Net.Dns.GetHostEntryAsync(System.String)
  - System.Net.Dns.GetHostName
  - System.Net.Dns.Resolve(System.String)
  langs:
  - csharp
  name: Dns
  nameWithType: Dns
  fullName: System.Net.Dns
  type: Class
  assemblies:
  - System.Net.NameResolution
  - System
  - netstandard
  namespace: System.Net
  summary: Provides simple domain name resolution functionality.
  remarks: "The <xref:System.Net.Dns> class is a static class that retrieves information about a specific host from the Internet Domain Name System (DNS).  \n  \n The host information from the DNS query is returned in an instance of the <xref:System.Net.IPHostEntry> class. If the specified host has more than one entry in the DNS database, <xref:System.Net.IPHostEntry> contains multiple IP addresses and aliases."
  example:
  - "The following example queries the DNS database for information on the host www.contoso.com.  \n  \n [!code-cpp[Classic Dns Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Dns Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Dns Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Dns Example/CS/source.cs#1)]\n [!code-vb[Classic Dns Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Dns Example/VB/source.vb#1)]"
  syntax:
    content: public static class Dns
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.Dns.BeginGetHostAddresses(System.String,System.AsyncCallback,System.Object)
  commentId: M:System.Net.Dns.BeginGetHostAddresses(System.String,System.AsyncCallback,System.Object)
  id: BeginGetHostAddresses(System.String,System.AsyncCallback,System.Object)
  parent: System.Net.Dns
  langs:
  - csharp
  name: BeginGetHostAddresses(String, AsyncCallback, Object)
  nameWithType: Dns.BeginGetHostAddresses(String, AsyncCallback, Object)
  fullName: Dns.BeginGetHostAddresses(String, AsyncCallback, Object)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.NameResolution
  namespace: System.Net
  summary: Asynchronously returns the Internet Protocol (IP) addresses for the specified host.
  remarks: "The <xref:System.Net.Dns.BeginGetHostAddresses%2A> method asynchronously queries a DNS server for the IP addresses that are associated with a host name. If `hostNameOrAddress` is an IP address, this address is returned without querying the DNS server.  \n  \n> [!NOTE]\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).  \n  \n When an empty string is passed as the host name, this method returns the IPv4 addresses of the local host for all operating systems except Windows Server 2003; for Windows Server 2003, both IPv4 and IPv6 addresses for the local host are returned.  \n  \n The asynchronous <xref:System.Net.Dns.BeginGetHostAddresses%2A> operation must be completed by calling the <xref:System.Net.Dns.EndGetHostAddresses%2A> method. Typically, the method is invoked by the `requestCallback` delegate.  \n  \n This method does not block until the operation is complete. To block until the operation is complete, use the <xref:System.Net.Dns.GetHostAddresses%2A> method.  \n  \n For more information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)"
  syntax:
    content: public static IAsyncResult BeginGetHostAddresses (string hostNameOrAddress, AsyncCallback requestCallback, object state);
    parameters:
    - id: hostNameOrAddress
      type: System.String
      description: The host name or IP address to resolve.
    - id: requestCallback
      type: System.AsyncCallback
      description: An <xref href="System.AsyncCallback"></xref> delegate that references the method to invoke when the operation is complete.
    - id: state
      type: System.Object
      description: A user-defined object that contains information about the operation. This object is passed to the <code>requestCallback</code> delegate when the operation is complete.
    return:
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult"></xref> instance that references the asynchronous request.
  overload: System.Net.Dns.BeginGetHostAddresses*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>hostNameOrAddress</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The length of <code>hostNameOrAddress</code> is greater than 255 characters.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error is encountered when resolving <code>hostNameOrAddress</code>.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>hostNameOrAddress</code> is an invalid IP address.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.Dns.BeginGetHostByName(System.String,System.AsyncCallback,System.Object)
  commentId: M:System.Net.Dns.BeginGetHostByName(System.String,System.AsyncCallback,System.Object)
  id: BeginGetHostByName(System.String,System.AsyncCallback,System.Object)
  parent: System.Net.Dns
  langs:
  - csharp
  name: BeginGetHostByName(String, AsyncCallback, Object)
  nameWithType: Dns.BeginGetHostByName(String, AsyncCallback, Object)
  fullName: Dns.BeginGetHostByName(String, AsyncCallback, Object)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.NameResolution
  namespace: System.Net
  summary: Begins an asynchronous request for <xref href="System.Net.IPHostEntry"></xref> information about the specified DNS host name.
  remarks: "The asynchronous <xref:System.Net.Dns.BeginGetHostByName%2A> operation must be completed by calling the <xref:System.Net.Dns.EndGetHostByName%2A> method. Typically, the method is invoked by the `requestCallback` delegate.  \n  \n This method does not block until the operation is complete. To block until the operation is complete, use the <xref:System.Net.Dns.GetHostByName%2A> method.  \n  \n For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  \n  \n> [!NOTE]\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: >-
      [System.Obsolete("Use BeginGetHostEntry instead")]

      public static IAsyncResult BeginGetHostByName (string hostName, AsyncCallback requestCallback, object stateObject);
    parameters:
    - id: hostName
      type: System.String
      description: The DNS name of the host.
    - id: requestCallback
      type: System.AsyncCallback
      description: An <xref href="System.AsyncCallback"></xref> delegate that references the method to invoke when the operation is complete.
    - id: stateObject
      type: System.Object
      description: A user-defined object that contains information about the operation. This object is passed to the <code>requestCallback</code> delegate when the operation is complete.
    return:
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult"></xref> instance that references the asynchronous request.
  overload: System.Net.Dns.BeginGetHostByName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>hostName</code> is `null`.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error was encountered executing the DNS query.
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.Dns.BeginGetHostEntry(System.Net.IPAddress,System.AsyncCallback,System.Object)
  commentId: M:System.Net.Dns.BeginGetHostEntry(System.Net.IPAddress,System.AsyncCallback,System.Object)
  id: BeginGetHostEntry(System.Net.IPAddress,System.AsyncCallback,System.Object)
  parent: System.Net.Dns
  langs:
  - csharp
  name: BeginGetHostEntry(IPAddress, AsyncCallback, Object)
  nameWithType: Dns.BeginGetHostEntry(IPAddress, AsyncCallback, Object)
  fullName: Dns.BeginGetHostEntry(IPAddress, AsyncCallback, Object)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.NameResolution
  namespace: System.Net
  summary: Asynchronously resolves an IP address to an <xref href="System.Net.IPHostEntry"></xref> instance.
  remarks: "The <xref:System.Net.Dns.BeginGetHostEntry%2A> method asynchronously queries a DNS server for the IP addresses and aliases associated with an IP address.  \n  \n **Note** This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).  \n  \n The asynchronous <xref:System.Net.Dns.BeginGetHostEntry%2A> operation must be completed by calling the <xref:System.Net.Dns.EndGetHostEntry%2A> method. Typically, the method is invoked by the `requestCallback` delegate.  \n  \n This method does not block until the operation is complete. To block until the operation is complete, use the <xref:System.Net.Dns.GetHostEntry%2A> method.  \n  \n For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)"
  example:
  - "The following code example uses the <xref:System.Net.Dns.BeginGetHostEntry%2A> method to resolve an IP address to an <xref:System.Net.IPHostEntry> instance.  \n  \n [!code-cpp[System.Net.Dns#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Dns/CPP/dnsnewmethods.cpp#2)]\n [!code-csharp[System.Net.Dns#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Dns/CS/dnsnewmethods.cs#2)]\n [!code-vb[System.Net.Dns#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Dns/vb/dnsnewmethods.vb#2)]"
  syntax:
    content: public static IAsyncResult BeginGetHostEntry (System.Net.IPAddress address, AsyncCallback requestCallback, object stateObject);
    parameters:
    - id: address
      type: System.Net.IPAddress
      description: The IP address to resolve.
    - id: requestCallback
      type: System.AsyncCallback
      description: An <xref href="System.AsyncCallback"></xref> delegate that references the method to invoke when the operation is complete.
    - id: stateObject
      type: System.Object
      description: A user-defined object that contains information about the operation. This object is passed to the <code>requestCallback</code> delegate when the operation is complete.
    return:
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult"></xref> instance that references the asynchronous request.
  overload: System.Net.Dns.BeginGetHostEntry*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>address</code> is `null`.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error is encountered when resolving <code>address</code>.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>address</code> is an invalid IP address.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.Dns.BeginGetHostEntry(System.String,System.AsyncCallback,System.Object)
  commentId: M:System.Net.Dns.BeginGetHostEntry(System.String,System.AsyncCallback,System.Object)
  id: BeginGetHostEntry(System.String,System.AsyncCallback,System.Object)
  parent: System.Net.Dns
  langs:
  - csharp
  name: BeginGetHostEntry(String, AsyncCallback, Object)
  nameWithType: Dns.BeginGetHostEntry(String, AsyncCallback, Object)
  fullName: Dns.BeginGetHostEntry(String, AsyncCallback, Object)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.NameResolution
  namespace: System.Net
  summary: Asynchronously resolves a host name or IP address to an <xref href="System.Net.IPHostEntry"></xref> instance.
  remarks: "The <xref:System.Net.Dns.BeginGetHostEntry%2A> method queries a DNS server for the IP address that is associated with a host name or IP address.  \n  \n **Note** This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).  \n  \n The asynchronous <xref:System.Net.Dns.BeginGetHostEntry%2A> operation must be completed by calling the <xref:System.Net.Dns.EndGetHostEntry%2A> method. Typically, the method is invoked by the `requestCallback` delegate.  \n  \n This method does not block until the operation is complete. To block until the operation is complete, use the <xref:System.Net.Dns.GetHostEntry%2A> method.  \n  \n For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)."
  example:
  - "The following code example uses the <xref:System.Net.Dns.BeginGetHostEntry%2A> method to resolve an IP address to an <xref:System.Net.IPHostEntry> instance.  \n  \n [!code-cpp[System.Net.Dns#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Dns/CPP/dnsnewmethods.cpp#2)]\n [!code-csharp[System.Net.Dns#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Dns/CS/dnsnewmethods.cs#2)]\n [!code-vb[System.Net.Dns#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Dns/vb/dnsnewmethods.vb#2)]"
  syntax:
    content: public static IAsyncResult BeginGetHostEntry (string hostNameOrAddress, AsyncCallback requestCallback, object stateObject);
    parameters:
    - id: hostNameOrAddress
      type: System.String
      description: The host name or IP address to resolve.
    - id: requestCallback
      type: System.AsyncCallback
      description: An <xref href="System.AsyncCallback"></xref> delegate that references the method to invoke when the operation is complete.
    - id: stateObject
      type: System.Object
      description: A user-defined object that contains information about the operation. This object is passed to the <code>requestCallback</code> delegate when the operation is complete.
    return:
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult"></xref> instance that references the asynchronous request.
  overload: System.Net.Dns.BeginGetHostEntry*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>hostNameOrAddress</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The length of <code>hostNameOrAddress</code> is greater than 255 characters.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error is encountered when resolving <code>hostNameOrAddress</code>.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>hostNameOrAddress</code> is an invalid IP address.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.Dns.BeginResolve(System.String,System.AsyncCallback,System.Object)
  commentId: M:System.Net.Dns.BeginResolve(System.String,System.AsyncCallback,System.Object)
  id: BeginResolve(System.String,System.AsyncCallback,System.Object)
  parent: System.Net.Dns
  langs:
  - csharp
  name: BeginResolve(String, AsyncCallback, Object)
  nameWithType: Dns.BeginResolve(String, AsyncCallback, Object)
  fullName: Dns.BeginResolve(String, AsyncCallback, Object)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.NameResolution
  namespace: System.Net
  summary: Begins an asynchronous request to resolve a DNS host name or IP address to an <xref href="System.Net.IPAddress"></xref> instance.
  remarks: "The asynchronous <xref:System.Net.Dns.BeginResolve%2A> operation must be completed by calling the <xref:System.Net.Dns.EndResolve%2A> method. Typically, the method is invoked by the `requestCallback` delegate.  \n  \n This method does not block until the operation is complete. To block until the operation is complete, use the <xref:System.Net.Dns.Resolve%2A> method.  \n  \n For more information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  \n  \n> [!NOTE]\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  example:
  - "The following example uses <xref:System.Net.Dns.BeginResolve%2A> to resolve a DNS host name to an <xref:System.Net.IPAddress>.  \n  \n [!code-cpp[Dns_Begin_EndResolve#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Dns_Begin_EndResolve/CPP/dns_begin_endresolve.cpp#1)]\n [!code-csharp[Dns_Begin_EndResolve#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Dns_Begin_EndResolve/CS/dns_begin_endresolve.cs#1)]\n [!code-vb[Dns_Begin_EndResolve#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Dns_Begin_EndResolve/VB/dns_begin_endresolve.vb#1)]"
  syntax:
    content: >-
      [System.Obsolete("Use BeginGetHostEntry instead")]

      public static IAsyncResult BeginResolve (string hostName, AsyncCallback requestCallback, object stateObject);
    parameters:
    - id: hostName
      type: System.String
      description: The DNS name of the host.
    - id: requestCallback
      type: System.AsyncCallback
      description: An <xref href="System.AsyncCallback"></xref> delegate that references the method to invoke when the operation is complete.
    - id: stateObject
      type: System.Object
      description: A user-defined object that contains information about the operation. This object is passed to the <code>requestCallback</code> delegate when the operation is complete.
    return:
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult"></xref> instance that references the asynchronous request.
  overload: System.Net.Dns.BeginResolve*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>hostName</code> is `null`.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: The caller does not have permission to access DNS information.
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.Dns.EndGetHostAddresses(System.IAsyncResult)
  commentId: M:System.Net.Dns.EndGetHostAddresses(System.IAsyncResult)
  id: EndGetHostAddresses(System.IAsyncResult)
  parent: System.Net.Dns
  langs:
  - csharp
  name: EndGetHostAddresses(IAsyncResult)
  nameWithType: Dns.EndGetHostAddresses(IAsyncResult)
  fullName: Dns.EndGetHostAddresses(IAsyncResult)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.NameResolution
  namespace: System.Net
  summary: Ends an asynchronous request for DNS information.
  remarks: "The <xref:System.Net.Dns.BeginGetHostAddresses%2A> method queries a DNS server for the IP addresses associated with a host name. If `hostNameOrAddress` is an IP address, this address is returned without querying the DNS server.  \n  \n When an empty string is passed as the host name, this method returns the IPv4 addresses of the local host for all operating systems except Windows Server 2003; for Windows Server 2003, both IPv4 and IPv6 addresses for the local host are returned.  \n  \n> [!NOTE]\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: public static System.Net.IPAddress[] EndGetHostAddresses (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult"></xref> instance returned by a call to the <xref href="System.Net.Dns.BeginGetHostAddresses(System.String,System.AsyncCallback,System.Object)"></xref> method.
    return:
      type: System.Net.IPAddress[]
      description: An array of type <xref href="System.Net.IPAddress"></xref> that holds the IP addresses for the host specified by the <code>hostNameOrAddress</code> parameter of <xref href="System.Net.Dns.BeginGetHostAddresses(System.String,System.AsyncCallback,System.Object)"></xref>.
  overload: System.Net.Dns.EndGetHostAddresses*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.Dns.EndGetHostByName(System.IAsyncResult)
  commentId: M:System.Net.Dns.EndGetHostByName(System.IAsyncResult)
  id: EndGetHostByName(System.IAsyncResult)
  parent: System.Net.Dns
  langs:
  - csharp
  name: EndGetHostByName(IAsyncResult)
  nameWithType: Dns.EndGetHostByName(IAsyncResult)
  fullName: Dns.EndGetHostByName(IAsyncResult)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.NameResolution
  namespace: System.Net
  summary: Ends an asynchronous request for DNS information.
  remarks: "This method blocks until the operation is complete.  \n  \n To perform this operation synchronously, use the <xref:System.Net.Dns.GetHostByName%2A> method.  \n  \n If the <xref:System.Net.Configuration.Ipv6Element.Enabled%2A?displayProperty=fullName> property is set to `true`, the <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty.  \n  \n> [!NOTE]\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: >-
      [System.Obsolete("Use EndGetHostEntry instead")]

      public static System.Net.IPHostEntry EndGetHostByName (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult"></xref> instance that is returned by a call to the <xref href="System.Net.Dns.BeginGetHostByName(System.String,System.AsyncCallback,System.Object)"></xref> method.
    return:
      type: System.Net.IPHostEntry
      description: An <xref href="System.Net.IPHostEntry"></xref> object that contains DNS information about a host.
  overload: System.Net.Dns.EndGetHostByName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>asyncResult</code> is `null`.
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.Dns.EndGetHostEntry(System.IAsyncResult)
  commentId: M:System.Net.Dns.EndGetHostEntry(System.IAsyncResult)
  id: EndGetHostEntry(System.IAsyncResult)
  parent: System.Net.Dns
  langs:
  - csharp
  name: EndGetHostEntry(IAsyncResult)
  nameWithType: Dns.EndGetHostEntry(IAsyncResult)
  fullName: Dns.EndGetHostEntry(IAsyncResult)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.NameResolution
  namespace: System.Net
  summary: Ends an asynchronous request for DNS information.
  remarks: "This method blocks until the operation is complete.  \n  \n The <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty.  \n  \n To perform this operation synchronously, use a <xref:System.Net.Dns.GetHostEntry%2A> method.  \n  \n> [!NOTE]\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: public static System.Net.IPHostEntry EndGetHostEntry (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult"></xref> instance returned by a call to an <xref href="System.Net.Dns.BeginGetHostEntry*"></xref> method.
    return:
      type: System.Net.IPHostEntry
      description: An <xref href="System.Net.IPHostEntry"></xref> instance that contains address information about the host.
  overload: System.Net.Dns.EndGetHostEntry*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>asyncResult</code> is `null`.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.Dns.EndResolve(System.IAsyncResult)
  commentId: M:System.Net.Dns.EndResolve(System.IAsyncResult)
  id: EndResolve(System.IAsyncResult)
  parent: System.Net.Dns
  langs:
  - csharp
  name: EndResolve(IAsyncResult)
  nameWithType: Dns.EndResolve(IAsyncResult)
  fullName: Dns.EndResolve(IAsyncResult)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.NameResolution
  namespace: System.Net
  summary: Ends an asynchronous request for DNS information.
  remarks: "This method blocks until the operation is complete.  \n  \n If the <xref:System.Net.Configuration.Ipv6Element.Enabled%2A?displayProperty=fullName> is set to `true`, the <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty.  \n  \n To perform this operation synchronously, use the <xref:System.Net.Dns.Resolve%2A> method.  \n  \n> [!NOTE]\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  example:
  - "The following example ends an asynchronous request for DNS host information.  \n  \n [!code-cpp[Dns_Begin_EndResolve#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Dns_Begin_EndResolve/CPP/dns_begin_endresolve.cpp#1)]\n [!code-csharp[Dns_Begin_EndResolve#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Dns_Begin_EndResolve/CS/dns_begin_endresolve.cs#1)]\n [!code-vb[Dns_Begin_EndResolve#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Dns_Begin_EndResolve/VB/dns_begin_endresolve.vb#1)]"
  syntax:
    content: >-
      [System.Obsolete("Use EndGetHostEntry instead")]

      public static System.Net.IPHostEntry EndResolve (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult"></xref> instance that is returned by a call to the <xref href="System.Net.Dns.BeginResolve(System.String,System.AsyncCallback,System.Object)"></xref> method.
    return:
      type: System.Net.IPHostEntry
      description: An <xref href="System.Net.IPHostEntry"></xref> object that contains DNS information about a host.
  overload: System.Net.Dns.EndResolve*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>asyncResult</code> is `null`.
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.Dns.GetHostAddresses(System.String)
  commentId: M:System.Net.Dns.GetHostAddresses(System.String)
  id: GetHostAddresses(System.String)
  parent: System.Net.Dns
  langs:
  - csharp
  name: GetHostAddresses(String)
  nameWithType: Dns.GetHostAddresses(String)
  fullName: Dns.GetHostAddresses(String)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.NameResolution
  namespace: System.Net
  summary: Returns the Internet Protocol (IP) addresses for the specified host.
  remarks: "The <xref:System.Net.Dns.GetHostAddresses%2A> method queries a DNS server for the IP addresses associated with a host name. If `hostNameOrAddress` is an IP address, this address is returned without querying the DNS server.  \n  \n When an empty string is passed as the host name, this method returns the IPv4 addresses of the local host for all operating systems except Windows Server 2003; for Windows Server 2003, both IPv4 and IPv6 addresses for the local host are returned.  \n  \n IPv6 addresses are filtered from the results of the <xref:System.Net.Dns.GetHostAddresses%2A> method if the local computer does not have IPv6 installed. As a result, it is possible to get back an empty <xref:System.Net.IPAddress> instance if only IPv6 results where available for the `hostNameOrAddress`.parameter.  \n  \n> [!NOTE]\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  example:
  - "The following code example uses the <xref:System.Net.Dns.GetHostAddresses%2A> method to resolve an IP address to an array of type <xref:System.Net.IPAddress>.  \n  \n [!code-cpp[System.Net.Dns#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Dns/CPP/dnsnewmethods.cpp#3)]\n [!code-csharp[System.Net.Dns#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Dns/CS/dnsnewmethods.cs#3)]\n [!code-vb[System.Net.Dns#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Dns/vb/dnsnewmethods.vb#3)]"
  syntax:
    content: public static System.Net.IPAddress[] GetHostAddresses (string hostNameOrAddress);
    parameters:
    - id: hostNameOrAddress
      type: System.String
      description: The host name or IP address to resolve.
    return:
      type: System.Net.IPAddress[]
      description: An array of type <xref href="System.Net.IPAddress"></xref> that holds the IP addresses for the host that is specified by the <code>hostNameOrAddress</code> parameter.
  overload: System.Net.Dns.GetHostAddresses*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>hostNameOrAddress</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The length of <code>hostNameOrAddress</code> is greater than 255 characters.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error is encountered when resolving <code>hostNameOrAddress</code>.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>hostNameOrAddress</code> is an invalid IP address.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.Dns.GetHostAddressesAsync(System.String)
  commentId: M:System.Net.Dns.GetHostAddressesAsync(System.String)
  id: GetHostAddressesAsync(System.String)
  parent: System.Net.Dns
  langs:
  - csharp
  name: GetHostAddressesAsync(String)
  nameWithType: Dns.GetHostAddressesAsync(String)
  fullName: Dns.GetHostAddressesAsync(String)
  type: Method
  assemblies:
  - System.Net.NameResolution
  - System
  - netstandard
  namespace: System.Net
  summary: Returns the Internet Protocol (IP) addresses for the specified host as an asynchronous operation.
  remarks: "This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the `hostNameOrAddress` has been resolved.  \n  \n This method queries a DNS server for the IP addresses associated with a host name. If `hostNameOrAddress` is an IP address, this address is returned without querying the DNS server."
  syntax:
    content: public static System.Threading.Tasks.Task<System.Net.IPAddress[]> GetHostAddressesAsync (string hostNameOrAddress);
    parameters:
    - id: hostNameOrAddress
      type: System.String
      description: The host name or IP address to resolve.
    return:
      type: System.Threading.Tasks.Task{System.Net.IPAddress[]}
      description: "Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns an array of type <xref href=\"System.Net.IPAddress\"></xref> that holds the IP addresses for the host that is specified by the <code>hostNameOrAddress</code> parameter."
  overload: System.Net.Dns.GetHostAddressesAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>hostNameOrAddress</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The length of <code>hostNameOrAddress</code> is greater than 255 characters.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error is encountered when resolving <code>hostNameOrAddress</code>.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>hostNameOrAddress</code> is an invalid IP address.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.Dns.GetHostByAddress(System.Net.IPAddress)
  commentId: M:System.Net.Dns.GetHostByAddress(System.Net.IPAddress)
  id: GetHostByAddress(System.Net.IPAddress)
  parent: System.Net.Dns
  langs:
  - csharp
  name: GetHostByAddress(IPAddress)
  nameWithType: Dns.GetHostByAddress(IPAddress)
  fullName: Dns.GetHostByAddress(IPAddress)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.NameResolution
  namespace: System.Net
  summary: Creates an <xref href="System.Net.IPHostEntry"></xref> instance from the specified <xref href="System.Net.IPAddress"></xref>.
  remarks: >-
    > [!NOTE]

    >  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).
  example:
  - "The following example creates a <xref:System.Net.IPHostEntry> from an <xref:System.Net.IPAddress>.  \n  \n [!code-cpp[Dns_GetHostByAddress_IPAddress#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Dns_GetHostByAddress_IPAddress/CPP/dns_gethostbyaddress_ipaddress.cpp#1)]\n [!code-csharp[Dns_GetHostByAddress_IPAddress#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Dns_GetHostByAddress_IPAddress/CS/dns_gethostbyaddress_ipaddress.cs#1)]\n [!code-vb[Dns_GetHostByAddress_IPAddress#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Dns_GetHostByAddress_IPAddress/VB/dns_gethostbyaddress_ipaddress.vb#1)]"
  syntax:
    content: >-
      [System.Obsolete("Use GetHostEntry instead")]

      public static System.Net.IPHostEntry GetHostByAddress (System.Net.IPAddress address);
    parameters:
    - id: address
      type: System.Net.IPAddress
      description: An <xref href="System.Net.IPAddress"></xref>.
    return:
      type: System.Net.IPHostEntry
      description: "An <xref href=\"System.Net.IPHostEntry\"></xref>.  \n  \n An <xref href=\"System.Net.IPHostEntry\"></xref> instance."
  overload: System.Net.Dns.GetHostByAddress*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>address</code> is `null`.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error is encountered when resolving <code>address</code>.
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.Dns.GetHostByAddress(System.String)
  commentId: M:System.Net.Dns.GetHostByAddress(System.String)
  id: GetHostByAddress(System.String)
  parent: System.Net.Dns
  langs:
  - csharp
  name: GetHostByAddress(String)
  nameWithType: Dns.GetHostByAddress(String)
  fullName: Dns.GetHostByAddress(String)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.NameResolution
  namespace: System.Net
  summary: Creates an <xref href="System.Net.IPHostEntry"></xref> instance from an IP address.
  remarks: >-
    > [!NOTE]

    >  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).
  syntax:
    content: >-
      [System.Obsolete("Use GetHostEntry instead")]

      public static System.Net.IPHostEntry GetHostByAddress (string address);
    parameters:
    - id: address
      type: System.String
      description: An IP address.
    return:
      type: System.Net.IPHostEntry
      description: An <xref href="System.Net.IPHostEntry"></xref> instance.
  overload: System.Net.Dns.GetHostByAddress*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>address</code> is `null`.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error is encountered when resolving <code>address</code>.
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>address</code> is not a valid IP address.
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.Dns.GetHostByName(System.String)
  commentId: M:System.Net.Dns.GetHostByName(System.String)
  id: GetHostByName(System.String)
  parent: System.Net.Dns
  langs:
  - csharp
  name: GetHostByName(String)
  nameWithType: Dns.GetHostByName(String)
  fullName: Dns.GetHostByName(String)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.NameResolution
  namespace: System.Net
  summary: Gets the DNS information for the specified DNS host name.
  remarks: "The <xref:System.Net.Dns.GetHostByName%2A> method queries the Internet DNS server for host information. If you pass an empty string as the host name, this method retrieves the standard host name for the local computer.  \n  \n For asynchronous access to DNS information, use the <xref:System.Net.Dns.BeginGetHostByName%2A> and <xref:System.Net.Dns.EndGetHostByName%2A> methods.  \n  \n If the <xref:System.Net.Configuration.Ipv6Element.Enabled%2A?displayProperty=fullName> property is set to `true`, the <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty.  \n  \n> [!NOTE]\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  example:
  - "The following example uses the <xref:System.Net.Dns.GetHostByName%2A> method to get the DNS information for the specified DNS host name.  \n  \n [!code-cpp[Dns_GetHostByName#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Dns_GetHostByName/CPP/dns_gethostbyname.cpp#1)]\n [!code-csharp[Dns_GetHostByName#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Dns_GetHostByName/CS/dns_gethostbyname.cs#1)]\n [!code-vb[Dns_GetHostByName#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Dns_GetHostByName/VB/dns_gethostbyname.vb#1)]"
  syntax:
    content: >-
      [System.Obsolete("Use GetHostEntry instead")]

      public static System.Net.IPHostEntry GetHostByName (string hostName);
    parameters:
    - id: hostName
      type: System.String
      description: The DNS name of the host.
    return:
      type: System.Net.IPHostEntry
      description: An <xref href="System.Net.IPHostEntry"></xref> object that contains host information for the address specified in <code>hostName</code>.
  overload: System.Net.Dns.GetHostByName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>hostName</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The length of <code>hostName</code> is greater than 255 characters.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error is encountered when resolving <code>hostName</code>.
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.Dns.GetHostEntry(System.Net.IPAddress)
  commentId: M:System.Net.Dns.GetHostEntry(System.Net.IPAddress)
  id: GetHostEntry(System.Net.IPAddress)
  parent: System.Net.Dns
  langs:
  - csharp
  name: GetHostEntry(IPAddress)
  nameWithType: Dns.GetHostEntry(IPAddress)
  fullName: Dns.GetHostEntry(IPAddress)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.NameResolution
  namespace: System.Net
  summary: Resolves an IP address to an <xref href="System.Net.IPHostEntry"></xref> instance.
  remarks: "The <xref:System.Net.Dns.GetHostEntry%2A> method queries a DNS server for the IP addresses and aliases associated with an IP address.  \n  \n IPv6 addresses are filtered from the results of the <xref:System.Net.Dns.GetHostEntry%2A> method if the local computer does not have IPv6 installed. As a result, it is possible to get back an empty <xref:System.Net.IPHostEntry> instance if only IPv6 results where available for the `address` parameter.  \n  \n The <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty.  \n  \n> [!NOTE]\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  example:
  - "The following code example uses the <xref:System.Net.Dns.GetHostEntry%2A> method to resolve an IP address to an <xref:System.Net.IPHostEntry> instance.  \n  \n [!code-cpp[System.Net.Dns#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Dns/CPP/dnsnewmethods.cpp#1)]\n [!code-csharp[System.Net.Dns#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Dns/CS/dnsnewmethods.cs#1)]\n [!code-vb[System.Net.Dns#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Dns/vb/dnsnewmethods.vb#1)]"
  syntax:
    content: public static System.Net.IPHostEntry GetHostEntry (System.Net.IPAddress address);
    parameters:
    - id: address
      type: System.Net.IPAddress
      description: An IP address.
    return:
      type: System.Net.IPHostEntry
      description: An <xref href="System.Net.IPHostEntry"></xref> instance that contains address information about the host specified in <code>address</code>.
  overload: System.Net.Dns.GetHostEntry*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>address</code> is `null`.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error is encountered when resolving <code>address</code>.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>address</code> is an invalid IP address.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.Dns.GetHostEntry(System.String)
  commentId: M:System.Net.Dns.GetHostEntry(System.String)
  id: GetHostEntry(System.String)
  parent: System.Net.Dns
  langs:
  - csharp
  name: GetHostEntry(String)
  nameWithType: Dns.GetHostEntry(String)
  fullName: Dns.GetHostEntry(String)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.NameResolution
  namespace: System.Net
  summary: Resolves a host name or IP address to an <xref href="System.Net.IPHostEntry"></xref> instance.
  remarks: "The <xref:System.Net.Dns.GetHostEntry%2A> method queries a DNS server for the IP address that is associated with a host name or IP address.  \n  \n When an empty string is passed as the host name, this method returns the IPv4 addresses of the local host.  \n  \n If the host name could not be found, the <xref:System.Net.Sockets.SocketException> exception is returned with a value of 11001 (Windows Sockets error WSAHOST_NOT_FOUND). This exception can be returned if the DNS server does not respond. This exception can also be returned if the name is not an official host name or alias, or it cannot be found in the database(s) being queried.  \n  \n The <xref:System.ArgumentException> exception is also returned if the `hostNameOrAddress` parameter contains <xref:System.Net.IPAddress.Any> or <xref:System.Net.IPAddress.IPv6Any>.  \n  \n The <xref:System.Net.Dns.GetHostEntry%2A> method assumes that if an IP literal string is passed in the `hostNameOrAddress` parameter that the application wants an <xref:System.Net.IPHostEntry> instance returned with all of the properties set. These properties include the <xref:System.Net.IPHostEntry.AddressList%2A>, <xref:System.Net.IPHostEntry.Aliases%2A>, and <xref:System.Net.IPHostEntry.HostName%2A>. As a result, the implementation of the <xref:System.Net.Dns.GetHostEntry%2A> method exhibits the following behavior when an IP string literal is passed:  \n  \n1.  The method tries to parse the address. If the `hostNameOrAddress` parameter contains a legal IP string literal, then the first phase succeeds.  \n  \n2.  A reverse lookup using the IP address of the IP string literal is attempted to obtain the host name. This result is set as the <xref:System.Net.IPHostEntry.HostName%2A> property.  \n  \n3.  The host name from this reverse lookup is used again to obtain all the possible IP addresses associated with the name and set as the <xref:System.Net.IPHostEntry.AddressList%2A> property.  \n  \n For an IPv4 string literal, all three steps above may succeed. But it is possible for a stale DNS record for an IPv4 address that actually belongs to a different host to be returned. This may cause step #3 to fail and throw an exception (there is a DNS PTR record for the IPv4 address, but no DNS A record for the IPv4 address).  \n  \n For IPv6, step #2 above may fail, since most IPv6 deployments do not register the reverse (PTR) record for an IPv6 address. So this method may return the string IPv6 literal as the fully-qualified domain (FQDN) host name in the <xref:System.Net.IPHostEntry.HostName%2A> property.  \n  \n The <xref:System.Net.Dns.GetHostAddresses%2A> method has different behavior with respect to IP literals. If step #1 above succeeds (it successfully parses as an IP address), that address is immediately returned as the result. There is no attempt at a reverse lookup.  \n  \n IPv6 addresses are filtered from the results of the <xref:System.Net.Dns.GetHostEntry%2A> method if the local computer does not have IPv6 installed. As a result, it is possible to get back an empty <xref:System.Net.IPHostEntry> instance if only IPv6 results where available for the `hostNameOrAddress`.parameter.  \n  \n The <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty.  \n  \n> [!NOTE]\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  example:
  - "The following example uses the <xref:System.Net.Dns.GetHostEntry%2A> method to resolve an IP address to an <xref:System.Net.IPHostEntry> instance.  \n  \n [!code-cpp[System.Net.Dns#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Dns/CPP/dnsnewmethods.cpp#1)]\n [!code-csharp[System.Net.Dns#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Dns/CS/dnsnewmethods.cs#1)]\n [!code-vb[System.Net.Dns#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Dns/vb/dnsnewmethods.vb#1)]"
  syntax:
    content: public static System.Net.IPHostEntry GetHostEntry (string hostNameOrAddress);
    parameters:
    - id: hostNameOrAddress
      type: System.String
      description: The host name or IP address to resolve.
    return:
      type: System.Net.IPHostEntry
      description: An <xref href="System.Net.IPHostEntry"></xref> instance that contains address information about the host specified in <code>hostNameOrAddress</code>.
  overload: System.Net.Dns.GetHostEntry*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>hostNameOrAddress</code> parameter is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The length of <code>hostNameOrAddress</code> parameter is greater than 255 characters.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error was encountered when resolving the <code>hostNameOrAddress</code> parameter.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>hostNameOrAddress</code> parameter is an invalid IP address.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.Dns.GetHostEntryAsync(System.Net.IPAddress)
  commentId: M:System.Net.Dns.GetHostEntryAsync(System.Net.IPAddress)
  id: GetHostEntryAsync(System.Net.IPAddress)
  parent: System.Net.Dns
  langs:
  - csharp
  name: GetHostEntryAsync(IPAddress)
  nameWithType: Dns.GetHostEntryAsync(IPAddress)
  fullName: Dns.GetHostEntryAsync(IPAddress)
  type: Method
  assemblies:
  - System.Net.NameResolution
  - System
  - netstandard
  namespace: System.Net
  summary: Resolves an IP address to an <xref href="System.Net.IPHostEntry"></xref> instance as an asynchronous operation.
  remarks: "This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the `address` has been resolved.  \n  \n This method queries a DNS server for the IP addresses and aliases associated with an IP address.  \n  \n IPv6 addresses are filtered from the results of this method if the local computer does not have IPv6 installed. As a result, it is possible to get back an empty <xref:System.Net.IPHostEntry> instance if only IPv6 results where available for the `address` parameter.  \n  \n The <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty.  \n  \n> [!NOTE]\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: public static System.Threading.Tasks.Task<System.Net.IPHostEntry> GetHostEntryAsync (System.Net.IPAddress address);
    parameters:
    - id: address
      type: System.Net.IPAddress
      description: An IP address.
    return:
      type: System.Threading.Tasks.Task{System.Net.IPHostEntry}
      description: "Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns an <xref href=\"System.Net.IPHostEntry\"></xref> instance that contains address information about the host specified in <code>address</code>."
  overload: System.Net.Dns.GetHostEntryAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>address</code> is `null`.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error is encountered when resolving <code>address</code>.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>address</code> is an invalid IP address.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.Dns.GetHostEntryAsync(System.String)
  commentId: M:System.Net.Dns.GetHostEntryAsync(System.String)
  id: GetHostEntryAsync(System.String)
  parent: System.Net.Dns
  langs:
  - csharp
  name: GetHostEntryAsync(String)
  nameWithType: Dns.GetHostEntryAsync(String)
  fullName: Dns.GetHostEntryAsync(String)
  type: Method
  assemblies:
  - System.Net.NameResolution
  - System
  - netstandard
  namespace: System.Net
  summary: Resolves a host name or IP address to an <xref href="System.Net.IPHostEntry"></xref> instance as an asynchronous operation.
  remarks: "This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the `hostNameOrAddress` has been resolved.  \n  \n This method queries a DNS server for the IP address that is associated with a host name or IP address.  \n  \n When an empty string is passed as the host name, this method returns the IPv4 addresses of the local host.  \n  \n If the host name could not be found, the <xref:System.Net.Sockets.SocketException> exception is returned with a value of 11001 (Windows Sockets error WSAHOST_NOT_FOUND). This exception can be returned if the DNS server does not respond. This exception can also be returned if the name is not an official host name or alias, or it cannot be found in the database(s) being queried.  \n  \n The <xref:System.ArgumentException> exception is also returned if the `hostNameOrAddress` parameter contains <xref:System.Net.IPAddress.Any> or <xref:System.Net.IPAddress.IPv6Any>.  \n  \n This method assumes that if an IP literal string is passed in the `hostNameOrAddress` parameter that the application wants an <xref:System.Net.IPHostEntry> instance returned with all of the properties set. These properties include the <xref:System.Net.IPHostEntry.AddressList%2A>, <xref:System.Net.IPHostEntry.Aliases%2A>, and <xref:System.Net.IPHostEntry.HostName%2A>. As a result, the implementation of this method exhibits the following behavior when an IP string literal is passed:  \n  \n1.  The method tries to parse the address. If the `hostNameOrAddress` parameter contains a legal IP string literal, then the first phase succeeds.  \n  \n2.  A reverse lookup using the IP address of the IP string literal is attempted to obtain the host name. This result is set as the <xref:System.Net.IPHostEntry.HostName%2A> property.  \n  \n3.  The host name from this reverse lookup is used again to obtain all the possible IP addresses associated with the name and set as the <xref:System.Net.IPHostEntry.AddressList%2A> property.  \n  \n For an IPv4 string literal, all three steps above may succeed. But it is possible for a stale DNS record for an IPv4 address that actually belongs to a different host to be returned. This may cause step #3 to fail and throw an exception (there is a DNS PTR record for the IPv4 address, but no DNS A record for the IPv4 address).  \n  \n For IPv6, step #2 above may fail, since most IPv6 deployments do not register the reverse (PTR) record for an IPv6 address. So this method may return the string IPv6 literal as the fully-qualified domain (FQDN) host name in the <xref:System.Net.IPHostEntry.HostName%2A> property.  \n  \n The <xref:System.Net.Dns.GetHostAddresses%2A> method has different behavior with respect to IP literals. If step #1 above succeeds (it successfully parses as an IP address), that address is immediately returned as the result. There is no attempt at a reverse lookup.  \n  \n IPv6 addresses are filtered from the results of this method if the local computer does not have IPv6 installed. As a result, it is possible to get back an empty <xref:System.Net.IPHostEntry> instance if only IPv6 results where available for the `hostNameOrAddress`.parameter.  \n  \n The <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty.  \n  \n> [!NOTE]\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: public static System.Threading.Tasks.Task<System.Net.IPHostEntry> GetHostEntryAsync (string hostNameOrAddress);
    parameters:
    - id: hostNameOrAddress
      type: System.String
      description: The host name or IP address to resolve.
    return:
      type: System.Threading.Tasks.Task{System.Net.IPHostEntry}
      description: "Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns an <xref href=\"System.Net.IPHostEntry\"></xref> instance that contains address information about the host specified in <code>hostNameOrAddress</code>."
  overload: System.Net.Dns.GetHostEntryAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>hostNameOrAddress</code> parameter is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The length of <code>hostNameOrAddress</code> parameter is greater than 255 characters.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error was encountered when resolving the <code>hostNameOrAddress</code> parameter.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>hostNameOrAddress</code> parameter is an invalid IP address.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.Dns.GetHostName
  commentId: M:System.Net.Dns.GetHostName
  id: GetHostName
  parent: System.Net.Dns
  langs:
  - csharp
  name: GetHostName()
  nameWithType: Dns.GetHostName()
  fullName: Dns.GetHostName()
  type: Method
  assemblies:
  - System.Net.NameResolution
  - System
  - netstandard
  namespace: System.Net
  summary: Gets the host name of the local computer.
  remarks: ''
  example:
  - "The following example uses the <xref:System.Net.Dns.GetHostName%2A> method to obtain the host name of the local computer.  \n  \n [!code-cpp[Dns_GetHostName#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Dns_GetHostName/CPP/dns_gethostname.cpp#1)]\n [!code-csharp[Dns_GetHostName#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Dns_GetHostName/CS/dns_gethostname.cs#1)]\n [!code-vb[Dns_GetHostName#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Dns_GetHostName/VB/dns_gethostname.vb#1)]"
  syntax:
    content: public static string GetHostName ();
    parameters: []
    return:
      type: System.String
      description: A string that contains the DNS host name of the local computer.
  overload: System.Net.Dns.GetHostName*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error is encountered when resolving the local host name.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.Dns.Resolve(System.String)
  commentId: M:System.Net.Dns.Resolve(System.String)
  id: Resolve(System.String)
  parent: System.Net.Dns
  langs:
  - csharp
  name: Resolve(String)
  nameWithType: Dns.Resolve(String)
  fullName: Dns.Resolve(String)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.NameResolution
  namespace: System.Net
  summary: Resolves a DNS host name or IP address to an <xref href="System.Net.IPHostEntry"></xref> instance.
  remarks: "The <xref:System.Net.Dns.Resolve%2A> method queries a DNS server for the IP address associated with a host name or IP address.  \n  \n When `hostName` is a DNS-style host name associated with multiple IP addresses, only the first IP address that resolves to that host name is returned.  \n  \n If the <xref:System.Net.Configuration.Ipv6Element.Enabled%2A?displayProperty=fullName> property is set to `true`, the <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty.  \n  \n> [!NOTE]\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  example:
  - "The following example uses the <xref:System.Net.Dns.Resolve%2A> method to resolve an IP address to an <xref:System.Net.IPHostEntry> instance.  \n  \n [!code-cpp[Dns_Resolve#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Dns_Resolve/CPP/dns_resolve.cpp#1)]\n [!code-csharp[Dns_Resolve#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Dns_Resolve/CS/dns_resolve.cs#1)]\n [!code-vb[Dns_Resolve#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Dns_Resolve/VB/dns_resolve.vb#1)]"
  syntax:
    content: >-
      [System.Obsolete("Use GetHostEntry instead")]

      public static System.Net.IPHostEntry Resolve (string hostName);
    parameters:
    - id: hostName
      type: System.String
      description: A DNS-style host name or IP address.
    return:
      type: System.Net.IPHostEntry
      description: An <xref href="System.Net.IPHostEntry"></xref> instance that contains address information about the host specified in <code>hostName</code>.
  overload: System.Net.Dns.Resolve*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>hostName</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The length of <code>hostName</code> is greater than 255 characters.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error is encountered when resolving <code>hostName</code>.
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml
  ms.author: bobdel
  manager: markl
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.Net.Sockets.SocketException
  parent: System.Net.Sockets
  isExternal: false
  name: SocketException
  nameWithType: SocketException
  fullName: System.Net.Sockets.SocketException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.FormatException
  parent: System
  isExternal: false
  name: FormatException
  nameWithType: FormatException
  fullName: System.FormatException
- uid: System.Net.Dns.BeginGetHostAddresses(System.String,System.AsyncCallback,System.Object)
  parent: System.Net.Dns
  isExternal: false
  name: BeginGetHostAddresses(String, AsyncCallback, Object)
  nameWithType: Dns.BeginGetHostAddresses(String, AsyncCallback, Object)
  fullName: Dns.BeginGetHostAddresses(String, AsyncCallback, Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: false
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.AsyncCallback
  parent: System
  isExternal: false
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Net.Dns.BeginGetHostByName(System.String,System.AsyncCallback,System.Object)
  parent: System.Net.Dns
  isExternal: false
  name: BeginGetHostByName(String, AsyncCallback, Object)
  nameWithType: Dns.BeginGetHostByName(String, AsyncCallback, Object)
  fullName: Dns.BeginGetHostByName(String, AsyncCallback, Object)
- uid: System.Net.Dns.BeginGetHostEntry(System.Net.IPAddress,System.AsyncCallback,System.Object)
  parent: System.Net.Dns
  isExternal: false
  name: BeginGetHostEntry(IPAddress, AsyncCallback, Object)
  nameWithType: Dns.BeginGetHostEntry(IPAddress, AsyncCallback, Object)
  fullName: Dns.BeginGetHostEntry(IPAddress, AsyncCallback, Object)
- uid: System.Net.IPAddress
  parent: System.Net
  isExternal: false
  name: IPAddress
  nameWithType: IPAddress
  fullName: System.Net.IPAddress
- uid: System.Net.Dns.BeginGetHostEntry(System.String,System.AsyncCallback,System.Object)
  parent: System.Net.Dns
  isExternal: false
  name: BeginGetHostEntry(String, AsyncCallback, Object)
  nameWithType: Dns.BeginGetHostEntry(String, AsyncCallback, Object)
  fullName: Dns.BeginGetHostEntry(String, AsyncCallback, Object)
- uid: System.Net.Dns.BeginResolve(System.String,System.AsyncCallback,System.Object)
  parent: System.Net.Dns
  isExternal: false
  name: BeginResolve(String, AsyncCallback, Object)
  nameWithType: Dns.BeginResolve(String, AsyncCallback, Object)
  fullName: Dns.BeginResolve(String, AsyncCallback, Object)
- uid: System.Net.Dns.EndGetHostAddresses(System.IAsyncResult)
  parent: System.Net.Dns
  isExternal: false
  name: EndGetHostAddresses(IAsyncResult)
  nameWithType: Dns.EndGetHostAddresses(IAsyncResult)
  fullName: Dns.EndGetHostAddresses(IAsyncResult)
- uid: System.Net.IPAddress[]
  parent: System.Net
  isExternal: false
  name: IPAddress[]
  nameWithType: IPAddress[]
  fullName: System.Net.IPAddress[]
  spec.csharp:
  - uid: System.Net.IPAddress
    name: IPAddress
    nameWithType: IPAddress
    fullName: System.Net.IPAddress
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Net.Dns.EndGetHostByName(System.IAsyncResult)
  parent: System.Net.Dns
  isExternal: false
  name: EndGetHostByName(IAsyncResult)
  nameWithType: Dns.EndGetHostByName(IAsyncResult)
  fullName: Dns.EndGetHostByName(IAsyncResult)
- uid: System.Net.IPHostEntry
  parent: System.Net
  isExternal: false
  name: IPHostEntry
  nameWithType: IPHostEntry
  fullName: System.Net.IPHostEntry
- uid: System.Net.Dns.EndGetHostEntry(System.IAsyncResult)
  parent: System.Net.Dns
  isExternal: false
  name: EndGetHostEntry(IAsyncResult)
  nameWithType: Dns.EndGetHostEntry(IAsyncResult)
  fullName: Dns.EndGetHostEntry(IAsyncResult)
- uid: System.Net.Dns.EndResolve(System.IAsyncResult)
  parent: System.Net.Dns
  isExternal: false
  name: EndResolve(IAsyncResult)
  nameWithType: Dns.EndResolve(IAsyncResult)
  fullName: Dns.EndResolve(IAsyncResult)
- uid: System.Net.Dns.GetHostAddresses(System.String)
  parent: System.Net.Dns
  isExternal: false
  name: GetHostAddresses(String)
  nameWithType: Dns.GetHostAddresses(String)
  fullName: Dns.GetHostAddresses(String)
- uid: System.Net.Dns.GetHostAddressesAsync(System.String)
  parent: System.Net.Dns
  isExternal: false
  name: GetHostAddressesAsync(String)
  nameWithType: Dns.GetHostAddressesAsync(String)
  fullName: Dns.GetHostAddressesAsync(String)
- uid: System.Threading.Tasks.Task`1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Threading.Tasks.Task{System.Net.IPAddress[]}
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<IPAddress[]>
  nameWithType: Task<IPAddress[]>
  fullName: System.Threading.Tasks.Task<System.Net.IPAddress[]>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.IPAddress
    name: IPAddress
    nameWithType: IPAddress
    fullName: System.Net.IPAddress
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Dns.GetHostByAddress(System.Net.IPAddress)
  parent: System.Net.Dns
  isExternal: false
  name: GetHostByAddress(IPAddress)
  nameWithType: Dns.GetHostByAddress(IPAddress)
  fullName: Dns.GetHostByAddress(IPAddress)
- uid: System.Net.Dns.GetHostByAddress(System.String)
  parent: System.Net.Dns
  isExternal: false
  name: GetHostByAddress(String)
  nameWithType: Dns.GetHostByAddress(String)
  fullName: Dns.GetHostByAddress(String)
- uid: System.Net.Dns.GetHostByName(System.String)
  parent: System.Net.Dns
  isExternal: false
  name: GetHostByName(String)
  nameWithType: Dns.GetHostByName(String)
  fullName: Dns.GetHostByName(String)
- uid: System.Net.Dns.GetHostEntry(System.Net.IPAddress)
  parent: System.Net.Dns
  isExternal: false
  name: GetHostEntry(IPAddress)
  nameWithType: Dns.GetHostEntry(IPAddress)
  fullName: Dns.GetHostEntry(IPAddress)
- uid: System.Net.Dns.GetHostEntry(System.String)
  parent: System.Net.Dns
  isExternal: false
  name: GetHostEntry(String)
  nameWithType: Dns.GetHostEntry(String)
  fullName: Dns.GetHostEntry(String)
- uid: System.Net.Dns.GetHostEntryAsync(System.Net.IPAddress)
  parent: System.Net.Dns
  isExternal: false
  name: GetHostEntryAsync(IPAddress)
  nameWithType: Dns.GetHostEntryAsync(IPAddress)
  fullName: Dns.GetHostEntryAsync(IPAddress)
- uid: System.Threading.Tasks.Task{System.Net.IPHostEntry}
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<IPHostEntry>
  nameWithType: Task<IPHostEntry>
  fullName: System.Threading.Tasks.Task<System.Net.IPHostEntry>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.IPHostEntry
    name: IPHostEntry
    nameWithType: IPHostEntry
    fullName: System.Net.IPHostEntry
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Dns.GetHostEntryAsync(System.String)
  parent: System.Net.Dns
  isExternal: false
  name: GetHostEntryAsync(String)
  nameWithType: Dns.GetHostEntryAsync(String)
  fullName: Dns.GetHostEntryAsync(String)
- uid: System.Net.Dns.GetHostName
  parent: System.Net.Dns
  isExternal: false
  name: GetHostName()
  nameWithType: Dns.GetHostName()
  fullName: Dns.GetHostName()
- uid: System.Net.Dns.Resolve(System.String)
  parent: System.Net.Dns
  isExternal: false
  name: Resolve(String)
  nameWithType: Dns.Resolve(String)
  fullName: Dns.Resolve(String)
- uid: System.Net.Dns.BeginGetHostAddresses*
  parent: System.Net.Dns
  isExternal: false
  name: BeginGetHostAddresses
  nameWithType: Dns.BeginGetHostAddresses
  fullName: Dns.BeginGetHostAddresses
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml
- uid: System.Net.Dns.BeginGetHostByName*
  parent: System.Net.Dns
  isExternal: false
  name: BeginGetHostByName
  nameWithType: Dns.BeginGetHostByName
  fullName: Dns.BeginGetHostByName
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml
- uid: System.Net.Dns.BeginGetHostEntry*
  parent: System.Net.Dns
  isExternal: false
  name: BeginGetHostEntry
  nameWithType: Dns.BeginGetHostEntry
  fullName: Dns.BeginGetHostEntry
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml
- uid: System.Net.Dns.BeginResolve*
  parent: System.Net.Dns
  isExternal: false
  name: BeginResolve
  nameWithType: Dns.BeginResolve
  fullName: Dns.BeginResolve
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml
- uid: System.Net.Dns.EndGetHostAddresses*
  parent: System.Net.Dns
  isExternal: false
  name: EndGetHostAddresses
  nameWithType: Dns.EndGetHostAddresses
  fullName: Dns.EndGetHostAddresses
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml
- uid: System.Net.Dns.EndGetHostByName*
  parent: System.Net.Dns
  isExternal: false
  name: EndGetHostByName
  nameWithType: Dns.EndGetHostByName
  fullName: Dns.EndGetHostByName
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml
- uid: System.Net.Dns.EndGetHostEntry*
  parent: System.Net.Dns
  isExternal: false
  name: EndGetHostEntry
  nameWithType: Dns.EndGetHostEntry
  fullName: Dns.EndGetHostEntry
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml
- uid: System.Net.Dns.EndResolve*
  parent: System.Net.Dns
  isExternal: false
  name: EndResolve
  nameWithType: Dns.EndResolve
  fullName: Dns.EndResolve
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml
- uid: System.Net.Dns.GetHostAddresses*
  parent: System.Net.Dns
  isExternal: false
  name: GetHostAddresses
  nameWithType: Dns.GetHostAddresses
  fullName: Dns.GetHostAddresses
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml
- uid: System.Net.Dns.GetHostAddressesAsync*
  parent: System.Net.Dns
  isExternal: false
  name: GetHostAddressesAsync
  nameWithType: Dns.GetHostAddressesAsync
  fullName: Dns.GetHostAddressesAsync
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml
- uid: System.Net.Dns.GetHostByAddress*
  parent: System.Net.Dns
  isExternal: false
  name: GetHostByAddress
  nameWithType: Dns.GetHostByAddress
  fullName: Dns.GetHostByAddress
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml
- uid: System.Net.Dns.GetHostByName*
  parent: System.Net.Dns
  isExternal: false
  name: GetHostByName
  nameWithType: Dns.GetHostByName
  fullName: Dns.GetHostByName
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml
- uid: System.Net.Dns.GetHostEntry*
  parent: System.Net.Dns
  isExternal: false
  name: GetHostEntry
  nameWithType: Dns.GetHostEntry
  fullName: Dns.GetHostEntry
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml
- uid: System.Net.Dns.GetHostEntryAsync*
  parent: System.Net.Dns
  isExternal: false
  name: GetHostEntryAsync
  nameWithType: Dns.GetHostEntryAsync
  fullName: Dns.GetHostEntryAsync
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml
- uid: System.Net.Dns.GetHostName*
  parent: System.Net.Dns
  isExternal: false
  name: GetHostName
  nameWithType: Dns.GetHostName
  fullName: Dns.GetHostName
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml
- uid: System.Net.Dns.Resolve*
  parent: System.Net.Dns
  isExternal: false
  name: Resolve
  nameWithType: Dns.Resolve
  fullName: Dns.Resolve
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
