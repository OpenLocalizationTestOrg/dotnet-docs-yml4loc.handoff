{"nodes":[{"content":"Allows a custom channel, which uses a proprietary transaction flow mechanism, to inject its transaction into the Windows Communication Foundation (WCF) framework. This class cannot be inherited.","nodes":[{"pos":[0,194],"content":"Allows a custom channel, which uses a proprietary transaction flow mechanism, to inject its transaction into the Windows Communication Foundation (WCF) framework. This class cannot be inherited.","nodes":[{"content":"Allows a custom channel, which uses a proprietary transaction flow mechanism, to inject its transaction into the Windows Communication Foundation (WCF) framework. This class cannot be inherited.","pos":[0,194],"nodes":[{"content":"Allows a custom channel, which uses a proprietary transaction flow mechanism, to inject its transaction into the Windows Communication Foundation (WCF) framework.","pos":[0,162]},{"content":"This class cannot be inherited.","pos":[163,194]}]}]}],"pos":[692,887],"yaml":true},{"content":"This class allows third-party channel developers who use a proprietary transaction flow mechanism for their channel, to introduce their transaction into the ServiceModel framework. The transaction is then used when executing the service method. This mechanism cannot be used in conjunction with the <xref:System.ServiceModel.TransactionFlowAttribute>.","nodes":[{"pos":[0,351],"content":"This class allows third-party channel developers who use a proprietary transaction flow mechanism for their channel, to introduce their transaction into the ServiceModel framework. The transaction is then used when executing the service method. This mechanism cannot be used in conjunction with the <xref:System.ServiceModel.TransactionFlowAttribute>.","nodes":[{"content":"This class allows third-party channel developers who use a proprietary transaction flow mechanism for their channel, to introduce their transaction into the ServiceModel framework. The transaction is then used when executing the service method. This mechanism cannot be used in conjunction with the <xref:System.ServiceModel.TransactionFlowAttribute>.","pos":[0,351],"nodes":[{"content":"This class allows third-party channel developers who use a proprietary transaction flow mechanism for their channel, to introduce their transaction into the ServiceModel framework.","pos":[0,180]},{"content":"The transaction is then used when executing the service method.","pos":[181,244]},{"content":"This mechanism cannot be used in conjunction with the <ph id=\"ph1\">&lt;xref:System.ServiceModel.TransactionFlowAttribute&gt;</ph>.","pos":[245,351],"source":" This mechanism cannot be used in conjunction with the <xref:System.ServiceModel.TransactionFlowAttribute>."}]}]}],"pos":[898,1250],"yaml":true,"extradata":"MT"},{"content":"Sets the transaction that will be used when executing the service method.","nodes":[{"pos":[0,73],"content":"Sets the transaction that will be used when executing the service method.","nodes":[{"content":"Sets the transaction that will be used when executing the service method.","pos":[0,73]}]}],"pos":[2937,3011],"yaml":true},{"content":"A custom incoming channel (which is part of a service’s channel stack) can call this method to add a <xref:System.ServiceModel.Channels.TransactionMessageProperty>, containing the `transaction` parameter, to the `Properties` collection of the `message` parameter. This prompts the infrastructure to create a <xref:System.Transactions.TransactionScope> instance using the transaction passed in, before calling the service method requested in the incoming message. The service method must have the <xref:System.ServiceModel.OperationBehaviorAttribute.TransactionScopeRequired%2A> property set to `true`.","nodes":[{"pos":[0,601],"content":"A custom incoming channel (which is part of a service’s channel stack) can call this method to add a <xref:System.ServiceModel.Channels.TransactionMessageProperty>, containing the `transaction` parameter, to the `Properties` collection of the `message` parameter. This prompts the infrastructure to create a <xref:System.Transactions.TransactionScope> instance using the transaction passed in, before calling the service method requested in the incoming message. The service method must have the <xref:System.ServiceModel.OperationBehaviorAttribute.TransactionScopeRequired%2A> property set to `true`.","nodes":[{"content":"A custom incoming channel (which is part of a service’s channel stack) can call this method to add a <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.TransactionMessageProperty&gt;</ph>, containing the <ph id=\"ph2\">`transaction`</ph> parameter, to the <ph id=\"ph3\">`Properties`</ph> collection of the <ph id=\"ph4\">`message`</ph> parameter.","pos":[0,263],"source":"A custom incoming channel (which is part of a service’s channel stack) can call this method to add a <xref:System.ServiceModel.Channels.TransactionMessageProperty>, containing the `transaction` parameter, to the `Properties` collection of the `message` parameter."},{"content":"This prompts the infrastructure to create a <ph id=\"ph1\">&lt;xref:System.Transactions.TransactionScope&gt;</ph> instance using the transaction passed in, before calling the service method requested in the incoming message.","pos":[264,462],"source":" This prompts the infrastructure to create a <xref:System.Transactions.TransactionScope> instance using the transaction passed in, before calling the service method requested in the incoming message."},{"content":"The service method must have the <ph id=\"ph1\">&lt;xref:System.ServiceModel.OperationBehaviorAttribute.TransactionScopeRequired%2A&gt;</ph> property set to <ph id=\"ph2\">`true`</ph>.","pos":[463,601],"source":" The service method must have the <xref:System.ServiceModel.OperationBehaviorAttribute.TransactionScopeRequired%2A> property set to `true`."}]}],"pos":[3022,3624],"yaml":true,"extradata":"MT"},{"content":"The transaction that will be used when executing the service method.","nodes":[{"pos":[0,68],"content":"The transaction that will be used when executing the service method.","nodes":[{"content":"The transaction that will be used when executing the service method.","pos":[0,68]}]}],"pos":[3864,3933],"yaml":true},{"content":"The incoming message that results in calling the service method.","nodes":[{"pos":[0,64],"content":"The incoming message that results in calling the service method.","nodes":[{"content":"The incoming message that results in calling the service method.","pos":[0,64]}]}],"pos":[4019,4084],"yaml":true},{"content":"The property has already been set on <code>message</code>.","nodes":[{"pos":[0,58],"content":"The property has already been set on <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">message</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The property has already been set on <code>message</code>."}],"pos":[4285,4344],"yaml":true},{"content":"<code>transaction</code> needs to be unmarshaled, and that operation fails.","nodes":[{"pos":[0,75],"content":"<ph id=\"ph1\">&lt;code&gt;transaction&lt;/code&gt;</ph> needs to be unmarshaled, and that operation fails.","source":"<code>transaction</code> needs to be unmarshaled, and that operation fails."}],"pos":[4470,4546],"yaml":true},{"content":"Gets the transaction that will be used when executing the service method.","nodes":[{"pos":[0,73],"content":"Gets the transaction that will be used when executing the service method.","nodes":[{"content":"Gets the transaction that will be used when executing the service method.","pos":[0,73]}]}],"pos":[5593,5667],"yaml":true},{"content":"A <xref href=\"System.Transactions.Transaction\"></xref> instance that will be used when executing the service method.","nodes":[{"pos":[0,116],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Transactions.Transaction\"&gt;&lt;/xref&gt;</ph> instance that will be used when executing the service method.","source":"A <xref href=\"System.Transactions.Transaction\"></xref> instance that will be used when executing the service method."}],"pos":[5825,5942],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ServiceModel.Channels.TransactionMessageProperty\n  commentId: T:System.ServiceModel.Channels.TransactionMessageProperty\n  id: TransactionMessageProperty\n  children:\n  - System.ServiceModel.Channels.TransactionMessageProperty.Set(System.Transactions.Transaction,System.ServiceModel.Channels.Message)\n  - System.ServiceModel.Channels.TransactionMessageProperty.Transaction\n  langs:\n  - csharp\n  name: TransactionMessageProperty\n  nameWithType: TransactionMessageProperty\n  fullName: System.ServiceModel.Channels.TransactionMessageProperty\n  type: Class\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Channels\n  summary: Allows a custom channel, which uses a proprietary transaction flow mechanism, to inject its transaction into the Windows Communication Foundation (WCF) framework. This class cannot be inherited.\n  remarks: This class allows third-party channel developers who use a proprietary transaction flow mechanism for their channel, to introduce their transaction into the ServiceModel framework. The transaction is then used when executing the service method. This mechanism cannot be used in conjunction with the <xref:System.ServiceModel.TransactionFlowAttribute>.\n  syntax:\n    content: public sealed class TransactionMessageProperty\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Channels/TransactionMessageProperty.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.ServiceModel.Channels.TransactionMessageProperty.Set(System.Transactions.Transaction,System.ServiceModel.Channels.Message)\n  commentId: M:System.ServiceModel.Channels.TransactionMessageProperty.Set(System.Transactions.Transaction,System.ServiceModel.Channels.Message)\n  id: Set(System.Transactions.Transaction,System.ServiceModel.Channels.Message)\n  parent: System.ServiceModel.Channels.TransactionMessageProperty\n  langs:\n  - csharp\n  name: Set(Transaction, Message)\n  nameWithType: TransactionMessageProperty.Set(Transaction, Message)\n  fullName: TransactionMessageProperty.Set(Transaction, Message)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Channels\n  summary: Sets the transaction that will be used when executing the service method.\n  remarks: A custom incoming channel (which is part of a service’s channel stack) can call this method to add a <xref:System.ServiceModel.Channels.TransactionMessageProperty>, containing the `transaction` parameter, to the `Properties` collection of the `message` parameter. This prompts the infrastructure to create a <xref:System.Transactions.TransactionScope> instance using the transaction passed in, before calling the service method requested in the incoming message. The service method must have the <xref:System.ServiceModel.OperationBehaviorAttribute.TransactionScopeRequired%2A> property set to `true`.\n  syntax:\n    content: public static void Set (System.Transactions.Transaction transaction, System.ServiceModel.Channels.Message message);\n    parameters:\n    - id: transaction\n      type: System.Transactions.Transaction\n      description: The transaction that will be used when executing the service method.\n    - id: message\n      type: System.ServiceModel.Channels.Message\n      description: The incoming message that results in calling the service method.\n  overload: System.ServiceModel.Channels.TransactionMessageProperty.Set*\n  exceptions:\n  - type: System.ServiceModel.FaultException\n    commentId: T:System.ServiceModel.FaultException\n    description: The property has already been set on <code>message</code>.\n  - type: System.Transactions.TransactionException\n    commentId: T:System.Transactions.TransactionException\n    description: <code>transaction</code> needs to be unmarshaled, and that operation fails.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Channels/TransactionMessageProperty.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.ServiceModel.Channels.TransactionMessageProperty.Transaction\n  commentId: P:System.ServiceModel.Channels.TransactionMessageProperty.Transaction\n  id: Transaction\n  parent: System.ServiceModel.Channels.TransactionMessageProperty\n  langs:\n  - csharp\n  name: Transaction\n  nameWithType: TransactionMessageProperty.Transaction\n  fullName: TransactionMessageProperty.Transaction\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Channels\n  summary: Gets the transaction that will be used when executing the service method.\n  syntax:\n    content: public System.Transactions.Transaction Transaction { get; }\n    return:\n      type: System.Transactions.Transaction\n      description: A <xref href=\"System.Transactions.Transaction\"></xref> instance that will be used when executing the service method.\n  overload: System.ServiceModel.Channels.TransactionMessageProperty.Transaction*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Channels/TransactionMessageProperty.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ServiceModel.FaultException\n  parent: System.ServiceModel\n  isExternal: false\n  name: FaultException\n  nameWithType: FaultException\n  fullName: System.ServiceModel.FaultException\n- uid: System.Transactions.TransactionException\n  parent: System.Transactions\n  isExternal: false\n  name: TransactionException\n  nameWithType: TransactionException\n  fullName: System.Transactions.TransactionException\n- uid: System.ServiceModel.Channels.TransactionMessageProperty.Set(System.Transactions.Transaction,System.ServiceModel.Channels.Message)\n  parent: System.ServiceModel.Channels.TransactionMessageProperty\n  isExternal: false\n  name: Set(Transaction, Message)\n  nameWithType: TransactionMessageProperty.Set(Transaction, Message)\n  fullName: TransactionMessageProperty.Set(Transaction, Message)\n- uid: System.Transactions.Transaction\n  parent: System.Transactions\n  isExternal: false\n  name: Transaction\n  nameWithType: Transaction\n  fullName: System.Transactions.Transaction\n- uid: System.ServiceModel.Channels.Message\n  parent: System.ServiceModel.Channels\n  isExternal: false\n  name: Message\n  nameWithType: Message\n  fullName: System.ServiceModel.Channels.Message\n- uid: System.ServiceModel.Channels.TransactionMessageProperty.Transaction\n  parent: System.ServiceModel.Channels.TransactionMessageProperty\n  isExternal: false\n  name: Transaction\n  nameWithType: TransactionMessageProperty.Transaction\n  fullName: TransactionMessageProperty.Transaction\n- uid: System.ServiceModel.Channels.TransactionMessageProperty.Set*\n  parent: System.ServiceModel.Channels.TransactionMessageProperty\n  isExternal: false\n  name: Set\n  nameWithType: TransactionMessageProperty.Set\n  fullName: TransactionMessageProperty.Set\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Channels/TransactionMessageProperty.xml\n- uid: System.ServiceModel.Channels.TransactionMessageProperty.Transaction*\n  parent: System.ServiceModel.Channels.TransactionMessageProperty\n  isExternal: false\n  name: Transaction\n  nameWithType: TransactionMessageProperty.Transaction\n  fullName: TransactionMessageProperty.Transaction\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Channels/TransactionMessageProperty.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}