### YamlMime:ManagedReference
items:
- uid: System.Windows.Forms.KeyEventArgs
  commentId: T:System.Windows.Forms.KeyEventArgs
  id: KeyEventArgs
  children:
  - System.Windows.Forms.KeyEventArgs.#ctor(System.Windows.Forms.Keys)
  - System.Windows.Forms.KeyEventArgs.Alt
  - System.Windows.Forms.KeyEventArgs.Control
  - System.Windows.Forms.KeyEventArgs.Handled
  - System.Windows.Forms.KeyEventArgs.KeyCode
  - System.Windows.Forms.KeyEventArgs.KeyData
  - System.Windows.Forms.KeyEventArgs.KeyValue
  - System.Windows.Forms.KeyEventArgs.Modifiers
  - System.Windows.Forms.KeyEventArgs.Shift
  - System.Windows.Forms.KeyEventArgs.SuppressKeyPress
  langs:
  - csharp
  name: KeyEventArgs
  nameWithType: KeyEventArgs
  fullName: System.Windows.Forms.KeyEventArgs
  type: Class
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: Provides data for the <xref href="System.Windows.Forms.Control.KeyDown"></xref> or <xref href="System.Windows.Forms.Control.KeyUp"></xref> event.
  remarks: "A <xref:System.Windows.Forms.KeyEventArgs>, which specifies the key the user pressed and whether any modifier keys (CTRL, ALT, and SHIFT) were pressed at the same time, is passed with each <xref:System.Windows.Forms.Control.KeyDown> or <xref:System.Windows.Forms.Control.KeyUp> event.  \n  \n The <xref:System.Windows.Forms.Control.KeyDown> event occurs when the user presses any key. The <xref:System.Windows.Forms.Control.KeyUp> event occurs when the user releases the key. Duplicate <xref:System.Windows.Forms.Control.KeyDown> events occur each time the key repeats, if the key is held down, but only one <xref:System.Windows.Forms.Control.KeyUp> event is generated when the user releases the key.  \n  \n The <xref:System.Windows.Forms.Control.KeyPress> event also occurs when a key is pressed. A <xref:System.Windows.Forms.KeyPressEventArgs> is passed with each <xref:System.Windows.Forms.Control.KeyPress> event, and specifies the character that was composed as a result of each key press.  \n  \n For information about the event model, see [Events](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)."
  example:
  - "The following code examples demonstrate how to detect the state of a key press.  \n  \n **Example 1**  \n  \n The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.KeyDown> event with the <xref:System.Windows.Forms.Help> class to display pop-up style Help to the user of the application. The example uses the <xref:System.Windows.Forms.KeyEventArgs> properties passed to the event handler method to filter for all variations of pressing the F1 key with a modifier key. When the user presses any variation of F1 that includes any keyboard modifier, the <xref:System.Windows.Forms.Help> class displays a pop-up window, similar to a <xref:System.Windows.Forms.ToolTip>, near the control. If the user presses ALT+F2, a different Help pop-up is displayed with additional information.  \n  \n [!code-cpp[KeyEventArgs.Modifiers#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CPP/form1.cpp#1)]\n [!code-csharp[KeyEventArgs.Modifiers#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CS/form1.cs#1)]\n [!code-vb[KeyEventArgs.Modifiers#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyEventArgs.Modifiers/VB/form1.vb#1)]  \n  \n **Example 2**  \n  \n The following example determines whether the user pressed ALT+E, and if the mouse pointer is over a <xref:System.Windows.Forms.TreeNode>, allows the user to edit that <xref:System.Windows.Forms.TreeNode>.  \n  \n [!code-cpp[Windows.Forms.Control Members4#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CPP/controlmembers4.cpp#3)]\n [!code-csharp[Windows.Forms.Control Members4#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CS/controlmembers4.cs#3)]\n [!code-vb[Windows.Forms.Control Members4#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members4/VB/controlmembers4.vb#3)]  \n  \n **Example 3**  \n  \n The following example determines whether the user pressed a non-numeric key, and if so, cancels the <xref:System.Windows.Forms.Control.KeyPress> event by using the <xref:System.Windows.Forms.KeyEventArgs.Handled%2A> property.  \n  \n [!code-cpp[Control.KeyDown#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyDown/CPP/form1.cpp#1)]\n [!code-csharp[Control.KeyDown#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyDown/CS/form1.cs#1)]\n [!code-vb[Control.KeyDown#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyDown/VB/form1.vb#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class KeyEventArgs : EventArgs
  inheritance:
  - System.Object
  - System.EventArgs
  implements: []
  inheritedMembers:
  - System.EventArgs.Empty
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/KeyEventArgs.xml
  ms.technology:
  - dotnet-winforms
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Windows.Forms.KeyEventArgs.#ctor(System.Windows.Forms.Keys)
  commentId: M:System.Windows.Forms.KeyEventArgs.#ctor(System.Windows.Forms.Keys)
  id: '#ctor(System.Windows.Forms.Keys)'
  parent: System.Windows.Forms.KeyEventArgs
  langs:
  - csharp
  name: KeyEventArgs(Keys)
  nameWithType: KeyEventArgs.KeyEventArgs(Keys)
  fullName: KeyEventArgs.KeyEventArgs(Keys)
  type: Constructor
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: Initializes a new instance of the <xref href="System.Windows.Forms.KeyEventArgs"></xref> class.
  syntax:
    content: public KeyEventArgs (System.Windows.Forms.Keys keyData);
    parameters:
    - id: keyData
      type: System.Windows.Forms.Keys
      description: A <xref href="System.Windows.Forms.Keys"></xref> representing the key that was pressed, combined with any modifier flags that indicate which CTRL, SHIFT, and ALT keys were pressed at the same time. Possible values are obtained be applying the bitwise OR (|) operator to constants from the <xref href="System.Windows.Forms.Keys"></xref> enumeration.
  overload: System.Windows.Forms.KeyEventArgs.#ctor*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/KeyEventArgs.xml
  ms.technology:
  - dotnet-winforms
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Windows.Forms.KeyEventArgs.Alt
  commentId: P:System.Windows.Forms.KeyEventArgs.Alt
  id: Alt
  parent: System.Windows.Forms.KeyEventArgs
  langs:
  - csharp
  name: Alt
  nameWithType: KeyEventArgs.Alt
  fullName: KeyEventArgs.Alt
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: Gets a value indicating whether the ALT key was pressed.
  remarks: ''
  example:
  - "**Example 1**  \n  \n The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.KeyDown> event with the <xref:System.Windows.Forms.Help> class to display pop-up style Help to the user of the application. The example uses the <xref:System.Windows.Forms.KeyEventArgs> properties passed to the event handler method to filter for all variations of pressing the F1 key with a modifier key. When the user presses any variation of F1 that includes any keyboard modifier, the <xref:System.Windows.Forms.Help> class displays a pop-up window, similar to a <xref:System.Windows.Forms.ToolTip>, near the control. If the user presses ALT+F2, a different Help pop-up is displayed with additional information.  \n  \n [!code-cpp[KeyEventArgs.Modifiers#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CPP/form1.cpp#1)]\n [!code-csharp[KeyEventArgs.Modifiers#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CS/form1.cs#1)]\n [!code-vb[KeyEventArgs.Modifiers#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyEventArgs.Modifiers/VB/form1.vb#1)]  \n  \n **Example 2**  \n  \n The following example determines whether the user pressed ALT+E, and if the mouse pointer is over <xref:System.Windows.Forms.TreeNode>, allows the user to edit that <xref:System.Windows.Forms.TreeNode>.  \n  \n [!code-cpp[Windows.Forms.Control Members4#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CPP/controlmembers4.cpp#3)]\n [!code-csharp[Windows.Forms.Control Members4#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CS/controlmembers4.cs#3)]\n [!code-vb[Windows.Forms.Control Members4#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members4/VB/controlmembers4.vb#3)]"
  syntax:
    content: public virtual bool Alt { get; }
    return:
      type: System.Boolean
      description: '`true` if the ALT key was pressed; otherwise, `false`.'
  overload: System.Windows.Forms.KeyEventArgs.Alt*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/KeyEventArgs.xml
  ms.technology:
  - dotnet-winforms
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Windows.Forms.KeyEventArgs.Control
  commentId: P:System.Windows.Forms.KeyEventArgs.Control
  id: Control
  parent: System.Windows.Forms.KeyEventArgs
  langs:
  - csharp
  name: Control
  nameWithType: KeyEventArgs.Control
  fullName: KeyEventArgs.Control
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: Gets a value indicating whether the CTRL key was pressed.
  remarks: ''
  example:
  - "The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.KeyDown> event with the <xref:System.Windows.Forms.Help> class to display pop-up style Help to the user of the application. The example uses the <xref:System.Windows.Forms.KeyEventArgs> properties passed to the event handler method to filter for all variations of pressing the F1 key with a modifier key. When the user presses any variation of F1 that includes any keyboard modifier, the <xref:System.Windows.Forms.Help> class displays a pop-up window, similar to a <xref:System.Windows.Forms.ToolTip>, near the control. If the user presses ALT+F2, a different Help pop-up is displayed with additional information.  \n  \n [!code-cpp[KeyEventArgs.Modifiers#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CPP/form1.cpp#1)]\n [!code-csharp[KeyEventArgs.Modifiers#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CS/form1.cs#1)]\n [!code-vb[KeyEventArgs.Modifiers#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyEventArgs.Modifiers/VB/form1.vb#1)]"
  syntax:
    content: public bool Control { get; }
    return:
      type: System.Boolean
      description: '`true` if the CTRL key was pressed; otherwise, `false`.'
  overload: System.Windows.Forms.KeyEventArgs.Control*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/KeyEventArgs.xml
  ms.technology:
  - dotnet-winforms
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Windows.Forms.KeyEventArgs.Handled
  commentId: P:System.Windows.Forms.KeyEventArgs.Handled
  id: Handled
  parent: System.Windows.Forms.KeyEventArgs
  langs:
  - csharp
  name: Handled
  nameWithType: KeyEventArgs.Handled
  fullName: KeyEventArgs.Handled
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: Gets or sets a value indicating whether the event was handled.
  remarks: "<xref:System.Windows.Forms.KeyEventArgs.Handled%2A> is implemented differently by different controls within Windows Forms. For controls like <xref:System.Windows.Forms.TextBox> which subclass native Win32 controls, it is interpreted to mean that the key message should not be passed to the underlying native control. If you set `Handled` to true on a <xref:System.Windows.Forms.TextBox>, that control will not pass the key press `events` to the underlying Win32 text box control, but it will still display the characters that the user typed.  \n  \n If you want to prevent the current control from receiving a key press, use the <xref:System.Windows.Forms.KeyEventArgs.SuppressKeyPress%2A> property."
  example:
  - "The following example determines whether the user pressed a non-numeric key, and if so, cancels the <xref:System.Windows.Forms.Control.KeyPress> event by using the <xref:System.Windows.Forms.KeyEventArgs.Handled%2A> property.  \n  \n [!code-cpp[Control.KeyDown#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyDown/CPP/form1.cpp#1)]\n [!code-csharp[Control.KeyDown#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyDown/CS/form1.cs#1)]\n [!code-vb[Control.KeyDown#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyDown/VB/form1.vb#1)]"
  syntax:
    content: public bool Handled { get; set; }
    return:
      type: System.Boolean
      description: "`true` to bypass the control's default handling; otherwise, `false` to also pass the event along to the default control handler."
  overload: System.Windows.Forms.KeyEventArgs.Handled*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/KeyEventArgs.xml
  ms.technology:
  - dotnet-winforms
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Windows.Forms.KeyEventArgs.KeyCode
  commentId: P:System.Windows.Forms.KeyEventArgs.KeyCode
  id: KeyCode
  parent: System.Windows.Forms.KeyEventArgs
  langs:
  - csharp
  name: KeyCode
  nameWithType: KeyEventArgs.KeyCode
  fullName: KeyEventArgs.KeyCode
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: Gets the keyboard code for a <xref href="System.Windows.Forms.Control.KeyDown"></xref> or <xref href="System.Windows.Forms.Control.KeyUp"></xref> event.
  remarks: ''
  example:
  - "The following code examples show how to use the <xref:System.Windows.Forms.KeyEventArgs.KeyCode%2A> property to determine which key was pressed.  \n  \n **Example 1**  \n  \n The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.KeyDown> event with the <xref:System.Windows.Forms.Help> class to display pop-up style Help to the user of the application. The example uses the <xref:System.Windows.Forms.KeyEventArgs> properties passed to the event handler method to filter for all variations of pressing the F1 key with a modifier key. When the user presses any variation of F1 that includes any keyboard modifier, the <xref:System.Windows.Forms.Help> class displays a pop-up window, similar to a <xref:System.Windows.Forms.ToolTip>, near the control. If the user presses ALT+F2, a different Help pop-up is displayed with additional information.  \n  \n [!code-cpp[KeyEventArgs.Modifiers#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CPP/form1.cpp#1)]\n [!code-csharp[KeyEventArgs.Modifiers#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CS/form1.cs#1)]\n [!code-vb[KeyEventArgs.Modifiers#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyEventArgs.Modifiers/VB/form1.vb#1)]  \n  \n **Example 2**  \n  \n The following example determines whether the user pressed ALT+E, and if the mouse pointer is over a <xref:System.Windows.Forms.TreeNode>, allows the user to edit that <xref:System.Windows.Forms.TreeNode>.  \n  \n [!code-cpp[Windows.Forms.Control Members4#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CPP/controlmembers4.cpp#3)]\n [!code-csharp[Windows.Forms.Control Members4#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CS/controlmembers4.cs#3)]\n [!code-vb[Windows.Forms.Control Members4#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members4/VB/controlmembers4.vb#3)]  \n  \n **Example 3**  \n  \n The following example determines whether the user pressed a non-numeric key, and if so, cancels the <xref:System.Windows.Forms.Control.KeyPress> event by using the <xref:System.Windows.Forms.KeyEventArgs.Handled%2A> property.  \n  \n [!code-cpp[Control.KeyDown#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyDown/CPP/form1.cpp#1)]\n [!code-csharp[Control.KeyDown#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyDown/CS/form1.cs#1)]\n [!code-vb[Control.KeyDown#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyDown/VB/form1.vb#1)]"
  syntax:
    content: public System.Windows.Forms.Keys KeyCode { get; }
    return:
      type: System.Windows.Forms.Keys
      description: A <xref href="System.Windows.Forms.Keys"></xref> value that is the key code for the event.
  overload: System.Windows.Forms.KeyEventArgs.KeyCode*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/KeyEventArgs.xml
  ms.technology:
  - dotnet-winforms
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Windows.Forms.KeyEventArgs.KeyData
  commentId: P:System.Windows.Forms.KeyEventArgs.KeyData
  id: KeyData
  parent: System.Windows.Forms.KeyEventArgs
  langs:
  - csharp
  name: KeyData
  nameWithType: KeyEventArgs.KeyData
  fullName: KeyEventArgs.KeyData
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: Gets the key data for a <xref href="System.Windows.Forms.Control.KeyDown"></xref> or <xref href="System.Windows.Forms.Control.KeyUp"></xref> event.
  remarks: You can use constants from <xref:System.Windows.Forms.Keys> to extract information from the <xref:System.Windows.Forms.KeyEventArgs.KeyData%2A> property. Use the bitwise AND operator to compare data returned by <xref:System.Windows.Forms.KeyEventArgs.KeyData%2A> with constants in <xref:System.Windows.Forms.Keys> to obtain information about which keys the user pressed. To determine whether a specific modifier key was pressed, use the <xref:System.Windows.Forms.KeyEventArgs.Control%2A>, <xref:System.Windows.Forms.KeyEventArgs.Shift%2A>, and <xref:System.Windows.Forms.KeyEventArgs.Alt%2A> properties.
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.KeyDown?displayProperty=fullName> event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>. Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.KeyDown?displayProperty=fullName> event.  \n  \n [!code-csharp[System.Windows.Forms.EventExamples#48](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#48)]\n [!code-vb[System.Windows.Forms.EventExamples#48](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#48)]"
  syntax:
    content: public System.Windows.Forms.Keys KeyData { get; }
    return:
      type: System.Windows.Forms.Keys
      description: A <xref href="System.Windows.Forms.Keys"></xref> representing the key code for the key that was pressed, combined with modifier flags that indicate which combination of CTRL, SHIFT, and ALT keys was pressed at the same time.
  overload: System.Windows.Forms.KeyEventArgs.KeyData*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/KeyEventArgs.xml
  ms.technology:
  - dotnet-winforms
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Windows.Forms.KeyEventArgs.KeyValue
  commentId: P:System.Windows.Forms.KeyEventArgs.KeyValue
  id: KeyValue
  parent: System.Windows.Forms.KeyEventArgs
  langs:
  - csharp
  name: KeyValue
  nameWithType: KeyEventArgs.KeyValue
  fullName: KeyEventArgs.KeyValue
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: Gets the keyboard value for a <xref href="System.Windows.Forms.Control.KeyDown"></xref> or <xref href="System.Windows.Forms.Control.KeyUp"></xref> event.
  remarks: ''
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.KeyDown?displayProperty=fullName> event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>. Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.KeyDown?displayProperty=fullName> event.  \n  \n [!code-csharp[System.Windows.Forms.EventExamples#48](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#48)]\n [!code-vb[System.Windows.Forms.EventExamples#48](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#48)]"
  syntax:
    content: public int KeyValue { get; }
    return:
      type: System.Int32
      description: The integer representation of the <xref href="System.Windows.Forms.KeyEventArgs.KeyCode"></xref> property.
  overload: System.Windows.Forms.KeyEventArgs.KeyValue*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/KeyEventArgs.xml
  ms.technology:
  - dotnet-winforms
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Windows.Forms.KeyEventArgs.Modifiers
  commentId: P:System.Windows.Forms.KeyEventArgs.Modifiers
  id: Modifiers
  parent: System.Windows.Forms.KeyEventArgs
  langs:
  - csharp
  name: Modifiers
  nameWithType: KeyEventArgs.Modifiers
  fullName: KeyEventArgs.Modifiers
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: Gets the modifier flags for a <xref href="System.Windows.Forms.Control.KeyDown"></xref> or <xref href="System.Windows.Forms.Control.KeyUp"></xref> event. The flags indicate which combination of CTRL, SHIFT, and ALT keys was pressed.
  remarks: To determine whether a specific modifier key was pressed, use the <xref:System.Windows.Forms.KeyEventArgs.Control%2A>, <xref:System.Windows.Forms.KeyEventArgs.Shift%2A>, and <xref:System.Windows.Forms.KeyEventArgs.Alt%2A> properties. Modifier flags can be combined with bitwise OR.
  example:
  - "The following code example shows how to use the <xref:System.Windows.Forms.KeyEventArgs.Modifiers%2A> property to determine which modifier keys were pressed along with the primary key.  \n  \n [!code-cpp[KeyEventArgs.Modifiers#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CPP/form1.cpp#1)]\n [!code-csharp[KeyEventArgs.Modifiers#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CS/form1.cs#1)]\n [!code-vb[KeyEventArgs.Modifiers#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyEventArgs.Modifiers/VB/form1.vb#1)]"
  syntax:
    content: public System.Windows.Forms.Keys Modifiers { get; }
    return:
      type: System.Windows.Forms.Keys
      description: A <xref href="System.Windows.Forms.Keys"></xref> value representing one or more modifier flags.
  overload: System.Windows.Forms.KeyEventArgs.Modifiers*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/KeyEventArgs.xml
  ms.technology:
  - dotnet-winforms
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Windows.Forms.KeyEventArgs.Shift
  commentId: P:System.Windows.Forms.KeyEventArgs.Shift
  id: Shift
  parent: System.Windows.Forms.KeyEventArgs
  langs:
  - csharp
  name: Shift
  nameWithType: KeyEventArgs.Shift
  fullName: KeyEventArgs.Shift
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: Gets a value indicating whether the SHIFT key was pressed.
  remarks: ''
  example:
  - "The following example determines whether the user pressed the Shift key with the F1 key, and if so, displays help.  \n  \n [!code-cpp[KeyEventArgs.Modifiers#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CPP/form1.cpp#1)]\n [!code-csharp[KeyEventArgs.Modifiers#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CS/form1.cs#1)]\n [!code-vb[KeyEventArgs.Modifiers#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyEventArgs.Modifiers/VB/form1.vb#1)]"
  syntax:
    content: public virtual bool Shift { get; }
    return:
      type: System.Boolean
      description: '`true` if the SHIFT key was pressed; otherwise, `false`.'
  overload: System.Windows.Forms.KeyEventArgs.Shift*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/KeyEventArgs.xml
  ms.technology:
  - dotnet-winforms
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Windows.Forms.KeyEventArgs.SuppressKeyPress
  commentId: P:System.Windows.Forms.KeyEventArgs.SuppressKeyPress
  id: SuppressKeyPress
  parent: System.Windows.Forms.KeyEventArgs
  langs:
  - csharp
  name: SuppressKeyPress
  nameWithType: KeyEventArgs.SuppressKeyPress
  fullName: KeyEventArgs.SuppressKeyPress
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: Gets or sets a value indicating whether the key event should be passed on to the underlying control.
  remarks: "You can assign `true` to this property in an event handler such as <xref:System.Windows.Forms.Control.KeyDown> in order to prevent user input.  \n  \n Setting <xref:System.Windows.Forms.KeyEventArgs.SuppressKeyPress%2A> to `true` also sets <xref:System.Windows.Forms.KeyEventArgs.Handled%2A> to `true`."
  example:
  - "The following code example prevents numeric keystrokes from reaching the <xref:System.Windows.Forms.TextBox> control named `textBox1`.  \n  \n [!code-csharp[KeyEventArgs.SuppressKeyPress#1](~/samples/snippets/csharp/VS_Snippets_Winforms/keyeventargs.suppresskeypress/cs/form1.cs#1)]\n [!code-vb[KeyEventArgs.SuppressKeyPress#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/keyeventargs.suppresskeypress/vb/form1.vb#1)]"
  syntax:
    content: public bool SuppressKeyPress { get; set; }
    return:
      type: System.Boolean
      description: '`true` if the key event should not be sent to the control; otherwise, `false`.'
  overload: System.Windows.Forms.KeyEventArgs.SuppressKeyPress*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/KeyEventArgs.xml
  ms.technology:
  - dotnet-winforms
  ms.author: kempb
  manager: ghogen
references:
- uid: System.EventArgs
  parent: System
  isExternal: false
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Windows.Forms.KeyEventArgs.#ctor(System.Windows.Forms.Keys)
  parent: System.Windows.Forms.KeyEventArgs
  isExternal: false
  name: KeyEventArgs(Keys)
  nameWithType: KeyEventArgs.KeyEventArgs(Keys)
  fullName: KeyEventArgs.KeyEventArgs(Keys)
- uid: System.Windows.Forms.Keys
  parent: System.Windows.Forms
  isExternal: false
  name: Keys
  nameWithType: Keys
  fullName: System.Windows.Forms.Keys
- uid: System.Windows.Forms.KeyEventArgs.Alt
  parent: System.Windows.Forms.KeyEventArgs
  isExternal: false
  name: Alt
  nameWithType: KeyEventArgs.Alt
  fullName: KeyEventArgs.Alt
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Forms.KeyEventArgs.Control
  parent: System.Windows.Forms.KeyEventArgs
  isExternal: false
  name: Control
  nameWithType: KeyEventArgs.Control
  fullName: KeyEventArgs.Control
- uid: System.Windows.Forms.KeyEventArgs.Handled
  parent: System.Windows.Forms.KeyEventArgs
  isExternal: false
  name: Handled
  nameWithType: KeyEventArgs.Handled
  fullName: KeyEventArgs.Handled
- uid: System.Windows.Forms.KeyEventArgs.KeyCode
  parent: System.Windows.Forms.KeyEventArgs
  isExternal: false
  name: KeyCode
  nameWithType: KeyEventArgs.KeyCode
  fullName: KeyEventArgs.KeyCode
- uid: System.Windows.Forms.KeyEventArgs.KeyData
  parent: System.Windows.Forms.KeyEventArgs
  isExternal: false
  name: KeyData
  nameWithType: KeyEventArgs.KeyData
  fullName: KeyEventArgs.KeyData
- uid: System.Windows.Forms.KeyEventArgs.KeyValue
  parent: System.Windows.Forms.KeyEventArgs
  isExternal: false
  name: KeyValue
  nameWithType: KeyEventArgs.KeyValue
  fullName: KeyEventArgs.KeyValue
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Forms.KeyEventArgs.Modifiers
  parent: System.Windows.Forms.KeyEventArgs
  isExternal: false
  name: Modifiers
  nameWithType: KeyEventArgs.Modifiers
  fullName: KeyEventArgs.Modifiers
- uid: System.Windows.Forms.KeyEventArgs.Shift
  parent: System.Windows.Forms.KeyEventArgs
  isExternal: false
  name: Shift
  nameWithType: KeyEventArgs.Shift
  fullName: KeyEventArgs.Shift
- uid: System.Windows.Forms.KeyEventArgs.SuppressKeyPress
  parent: System.Windows.Forms.KeyEventArgs
  isExternal: false
  name: SuppressKeyPress
  nameWithType: KeyEventArgs.SuppressKeyPress
  fullName: KeyEventArgs.SuppressKeyPress
- uid: System.Windows.Forms.KeyEventArgs.#ctor*
  parent: System.Windows.Forms.KeyEventArgs
  isExternal: false
  name: KeyEventArgs
  nameWithType: KeyEventArgs.KeyEventArgs
  fullName: KeyEventArgs.KeyEventArgs
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/KeyEventArgs.xml
- uid: System.Windows.Forms.KeyEventArgs.Alt*
  parent: System.Windows.Forms.KeyEventArgs
  isExternal: false
  name: Alt
  nameWithType: KeyEventArgs.Alt
  fullName: KeyEventArgs.Alt
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/KeyEventArgs.xml
- uid: System.Windows.Forms.KeyEventArgs.Control*
  parent: System.Windows.Forms.KeyEventArgs
  isExternal: false
  name: Control
  nameWithType: KeyEventArgs.Control
  fullName: KeyEventArgs.Control
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/KeyEventArgs.xml
- uid: System.Windows.Forms.KeyEventArgs.Handled*
  parent: System.Windows.Forms.KeyEventArgs
  isExternal: false
  name: Handled
  nameWithType: KeyEventArgs.Handled
  fullName: KeyEventArgs.Handled
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/KeyEventArgs.xml
- uid: System.Windows.Forms.KeyEventArgs.KeyCode*
  parent: System.Windows.Forms.KeyEventArgs
  isExternal: false
  name: KeyCode
  nameWithType: KeyEventArgs.KeyCode
  fullName: KeyEventArgs.KeyCode
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/KeyEventArgs.xml
- uid: System.Windows.Forms.KeyEventArgs.KeyData*
  parent: System.Windows.Forms.KeyEventArgs
  isExternal: false
  name: KeyData
  nameWithType: KeyEventArgs.KeyData
  fullName: KeyEventArgs.KeyData
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/KeyEventArgs.xml
- uid: System.Windows.Forms.KeyEventArgs.KeyValue*
  parent: System.Windows.Forms.KeyEventArgs
  isExternal: false
  name: KeyValue
  nameWithType: KeyEventArgs.KeyValue
  fullName: KeyEventArgs.KeyValue
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/KeyEventArgs.xml
- uid: System.Windows.Forms.KeyEventArgs.Modifiers*
  parent: System.Windows.Forms.KeyEventArgs
  isExternal: false
  name: Modifiers
  nameWithType: KeyEventArgs.Modifiers
  fullName: KeyEventArgs.Modifiers
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/KeyEventArgs.xml
- uid: System.Windows.Forms.KeyEventArgs.Shift*
  parent: System.Windows.Forms.KeyEventArgs
  isExternal: false
  name: Shift
  nameWithType: KeyEventArgs.Shift
  fullName: KeyEventArgs.Shift
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/KeyEventArgs.xml
- uid: System.Windows.Forms.KeyEventArgs.SuppressKeyPress*
  parent: System.Windows.Forms.KeyEventArgs
  isExternal: false
  name: SuppressKeyPress
  nameWithType: KeyEventArgs.SuppressKeyPress
  fullName: KeyEventArgs.SuppressKeyPress
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/KeyEventArgs.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
- uid: System.EventArgs.Empty
  parent: System.EventArgs
  isExternal: false
  name: Empty
  nameWithType: EventArgs.Empty
  fullName: EventArgs.Empty
