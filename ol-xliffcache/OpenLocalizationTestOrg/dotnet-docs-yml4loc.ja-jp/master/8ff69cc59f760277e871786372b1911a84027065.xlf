<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8ff69cc59f760277e871786372b1911a84027065</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.ServiceProcess.ServiceInstaller.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dfdfcae879058eca19c66fbe7c106ec421c5a6d2</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6f52816605c7feeadb18dc248a01939dc94c3c99</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Installs a class that extends <ph id="ph1">&lt;xref href="System.ServiceProcess.ServiceBase"&gt;&lt;/xref&gt;</ph> to implement a service.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class is called by the install utility when installing a service application.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> does work specific to the service with which it is associated.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is used by the installation utility to write registry values associated with the service to a subkey within the HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services registry key.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The service is identified by its ServiceName within this subkey.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>The subkey also includes the name of the executable or .dll to which the service belongs.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>To install a service, create a project installer class that inherits from the <ph id="ph1">&lt;xref:System.Configuration.Install.Installer&gt;</ph> class, and set the <ph id="ph2">&lt;xref:System.ComponentModel.RunInstallerAttribute&gt;</ph> attribute on the class to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Within your project, create one <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceProcessInstaller&gt;</ph> instance per service application, and one <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> instance for each service in the application.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Within your project installer class constructor, set the installation properties for the service using the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceProcessInstaller&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> instances, and add the instances to the <ph id="ph3">&lt;xref:System.Configuration.Install.Installer.Installers%2A&gt;</ph> collection.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is recommended that you use the constructor for adding installer instances; however, if you need to add to the <ph id="ph1">&lt;xref:System.Configuration.Install.Installer.Installers%2A&gt;</ph> collection in the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller.Install%2A&gt;</ph> method, be sure to perform the same additions to the collection in the <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>For all classes deriving from the <ph id="ph1">&lt;xref:System.Configuration.Install.Installer&gt;</ph> class, the state of the <ph id="ph2">&lt;xref:System.Configuration.Install.Installer.Installers%2A&gt;</ph> collection must be the same in the <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceInstaller.Install%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, you can avoid the maintenance of the collection across the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.Install%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A&gt;</ph> methods if you add installer instances to the <ph id="ph3">&lt;xref:System.Configuration.Install.Installer.Installers%2A&gt;</ph> collection in your custom installer class constructor.When the install utility is called, it looks for the <ph id="ph4">&lt;xref:System.ComponentModel.RunInstallerAttribute&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the attribute is <ph id="ph1">`true`</ph>, the utility installs all the services that were added to the <ph id="ph2">&lt;xref:System.Configuration.Install.Installer.Installers%2A&gt;</ph> collection that were associated with your project installer.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.ComponentModel.RunInstallerAttribute&gt;</ph> is <ph id="ph2">`false`</ph> or does not exist, the install utility ignores the project installer.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceProcessInstaller&gt;</ph> associated with your project installation class installs information common to all <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> instances in the project.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this service has anything that separates it from the other services in the installation project, that service-specific information is installed by this method.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is crucial that the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A&gt;</ph> be identical to the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName&gt;</ph> of the class you derived from <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>Normally, the value of the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName&gt;</ph> property for the service is set within the Main() function of the service application's executable.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Service Control Manager uses the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=fullName&gt;</ph> property to locate the service within this executable.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can modify other properties on the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> either before or after adding it to the <ph id="ph2">&lt;xref:System.Configuration.Install.Installer.Installers%2A&gt;</ph> collection of your project installer.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a service's <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.StartType%2A&gt;</ph> may be set to start the service automatically at reboot or require a user to start the service manually.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>Normally, you will not call the methods on <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> within your code; they are generally called only by the install utility.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>The install utility automatically calls the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=fullName&gt;</ph> methods during the installation process.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>It backs out failures, if necessary, by calling <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A&gt;</ph> (or <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=fullName&gt;</ph>) on all previously installed components.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>The installation utility calls <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A&gt;</ph> to remove the object.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>An application's install routine maintains information automatically about the components already installed, using the project installer's <ph id="ph1">&lt;xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>This state information is continuously updated as the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceProcessInstaller&gt;</ph> instance, and each <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> instance is installed by the utility.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is usually unnecessary for your code to modify state information explicitly.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the installation is performed, it automatically creates an <ph id="ph1">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph> to install the event log source associated with the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph> derived class.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.EventLog.Log%2A&gt;</ph> property for this source is set by the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A&gt;</ph> constructor to the computer's Application log.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you set the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A&gt;</ph> of the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> (which should be identical to the <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName&gt;</ph> of the service), the <ph id="ph4">&lt;xref:System.Diagnostics.EventLog.Source%2A&gt;</ph> is automatically set to the same value.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>In an installation failure, the source's installation is rolled-back along with previously installed services.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A&gt;</ph> method tries to stop the service if it is running.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>Whether this succeeds or not, <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A&gt;</ph> undoes the changes made by <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller.Install%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a new source was created for event logging, the source is deleted.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.ServiceProcess.ServiceInstaller"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>To install a service, create a project installer class that inherits from the <ph id="ph1">&lt;xref:System.Configuration.Install.Installer&gt;</ph> class, and set the <ph id="ph2">&lt;xref:System.ComponentModel.RunInstallerAttribute&gt;</ph> attribute on the class to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>Within your project, create one <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceProcessInstaller&gt;</ph> instance per service application, and one <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> instance for each service in the application.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>Within your project installer class constructor, set the installation properties for the service using the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceProcessInstaller&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> instances, and add the instances to the <ph id="ph3">&lt;xref:System.Configuration.Install.Installer.Installers%2A&gt;</ph> collection.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A&gt;</ph> constructor automatically generates an event log source whose <ph id="ph2">&lt;xref:System.Diagnostics.EventLog.Log%2A&gt;</ph> property is set to the computer's Application log, and an <ph id="ph3">&lt;xref:System.Diagnostics.EventLogInstaller&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you set the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A&gt;</ph> of the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph>, which should be identical to the <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName&gt;</ph> of the service, the <ph id="ph4">&lt;xref:System.Diagnostics.EventLog.Source%2A&gt;</ph> property of the event log is automatically set to the same value.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>The source is deleted automatically in the case of an installation failure.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A&gt;</ph> constructor sets the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller.StartType%2A&gt;</ph> property to <ph id="ph3">`ServiceStartMode.Manual`</ph> to specify that a user start the service.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can reset the property to <ph id="ph1">`ServiceStartMode.Automatic`</ph> to specify that the service start when the computer reboots.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Copies properties from an instance of <ph id="ph1">&lt;xref href="System.ServiceProcess.ServiceBase"&gt;&lt;/xref&gt;</ph> to this installer.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method will rarely be called within your code.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.CopyFromComponent%2A&gt;</ph> is usually called only by designers.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.CopyFromComponent%2A&gt;</ph> saves the service name of the <ph id="ph2">`component`</ph> parameter to the <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A&gt;</ph> of the <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>(Because the parameter must be an instance of a class that derives from <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph>, <ph id="ph2">`component`</ph> is guaranteed to have a <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName&gt;</ph> property.)</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you are using the Visual Studio designer, this method is called at design time when the user clicks <ph id="ph1">`Add Installer`</ph> on a component that specified this class as its installer.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>The installer takes all information it can from the live component and stores it for use at install time.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ComponentModel.IComponent"&gt;&lt;/xref&gt;</ph> from which to copy.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The component you are associating with this installer does not inherit from <ph id="ph1">&lt;xref href="System.ServiceProcess.ServiceBase"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether the service should be delayed from starting until other automatically started services are running.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.DelayedAutoStart%2A&gt;</ph> property can be applied to any service, but it is ignored unless the service's start mode is <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceStartMode.Automatic&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>The setting takes effect the next time the system is restarted.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Service Control Manager does not guarantee a specific start time for the service.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>A delayed automatic start service cannot be a member of a load ordering group, but it can depend on another automatic start service.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an application calls a delayed automatic start service before it is loaded, the call fails.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>On operating systems that do not support delayed automatic start, setting this property has no effect.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to delay automatic start of the service; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Gets or sets the description for the service.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.Description%2A&gt;</ph> property to describe the purpose of the installed service to the user.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>The user can view the service description in applications that display details for installed services.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, using Windows XP, you can view the service description with the Service Control command-line utility (Sc.exe) or you can view the service description within the <bpt id="p1">**</bpt>Services<ept id="p1">**</ept> node of the <bpt id="p2">**</bpt>Computer Management<ept id="p2">**</ept> console.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The description of the service.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The default is an empty string ("").</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Indicates the friendly name that identifies the service to the user.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.DisplayName%2A&gt;</ph> is used, for example, in the Service Control Manager to provide a user-readable descriptive name for the service.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.DisplayName%2A&gt;</ph> is a registry value, but is never used as a registry key.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, restrictions on the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A&gt;</ph> property value do not apply.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A&gt;</ph> is used as the HKEY_LOCAL_MACHINES\System\CurrentControlSet\Services registry key, so it is restricted.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>The display name is never used by the install utility to identify the service, so there are no restrictions on the choice of name, as there is for the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The name associated with the service, used frequently for interactive tools.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Installs the service by writing service application information to the registry.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>This method is meant to be used by installation tools, which process the appropriate methods automatically.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>Normally, you will not call the methods on <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> within your code; they are generally called only by the install utility.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>The install utility automatically calls the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.Install%2A&gt;</ph> method during installation.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>It backs out failures, if necessary, by calling <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.Rollback%2A&gt;</ph> on the object that generated the exception.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>An application's install routine maintains information automatically about the components that were already installed, using the project installer's <ph id="ph1">&lt;xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>This state information, passed into <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.Install%2A&gt;</ph> as the <ph id="ph2">`stateSaver`</ph> parameter, is continuously updated as the <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceProcessInstaller&gt;</ph> instance and each <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> instance is installed by the utility.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is usually unnecessary for your code to modify this state information explicitly.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceProcessInstaller&gt;</ph> associated with your project installation class installs information common to all <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> instances in the project.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this service has anything that separates it from the other services in the installation project, that service-specific information is installed by this method.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>To install a service, create a project installer class that inherits from the <ph id="ph1">&lt;xref:System.Configuration.Install.Installer&gt;</ph> class, and set the <ph id="ph2">&lt;xref:System.ComponentModel.RunInstallerAttribute&gt;</ph> attribute on the class to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>Within your project, create one <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceProcessInstaller&gt;</ph> instance per service application, and one <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> instance for each service in the application.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>Within your project installer class constructor, set the installation properties for the service using the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceProcessInstaller&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> instances, and add the instances to the <ph id="ph3">&lt;xref:System.Configuration.Install.Installer.Installers%2A&gt;</ph> collection.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is recommended that you use the constructor for adding installer instances; however, if you need to add to the <ph id="ph1">&lt;xref:System.Configuration.Install.Installer.Installers%2A&gt;</ph> collection in the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller.Install%2A&gt;</ph> method, be sure to perform the same additions to the collection in the <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>For all classes deriving from the <ph id="ph1">&lt;xref:System.Configuration.Install.Installer&gt;</ph> class, the state of the <ph id="ph2">&lt;xref:System.Configuration.Install.Installer.Installers%2A&gt;</ph> collection must be the same in the <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceInstaller.Install%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, you can avoid the maintenance of the collection across the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.Install%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A&gt;</ph> methods if you add installer instances to the <ph id="ph3">&lt;xref:System.Configuration.Install.Installer.Installers%2A&gt;</ph> collection in your custom installer class constructor.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.IDictionary"&gt;&lt;/xref&gt;</ph> that contains the context information associated with the installation.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The installation does not contain a <ph id="ph1">&lt;xref href="System.ServiceProcess.ServiceProcessInstaller"&gt;&lt;/xref&gt;</ph> for the executable.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The file name for the assembly is <ph id="ph1">`null`</ph> or an empty string.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The service name is invalid.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The Service Control Manager could not be opened.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The display name for the service is more than 255 characters in length.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The system could not generate a handle to the service.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>A service with that name is already installed.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Indicates whether two installers would install the same service.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller%2A&gt;</ph> indicates, for example, whether two installers would install the same service under the same user account.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Configuration.Install.ComponentInstaller"&gt;&lt;/xref&gt;</ph> to which you are comparing the current installer.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if calling <ph id="ph2">&lt;xref href="System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)"&gt;&lt;/xref&gt;</ph> on both of these installers would result in installing the same service; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Rolls back service application information written to the registry by the installation procedure.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>This method is meant to be used by installation tools, which process the appropriate methods automatically.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>Normally, you will not call the methods on <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> within your code; they are generally called only by the install utility.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>The install utility automatically calls the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.Install%2A&gt;</ph> method during the installation process.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>It backs out failures, if necessary, by calling <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.Rollback%2A&gt;</ph> on the object that generated the exception.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>An application's install routine maintains information automatically about the components already installed, using the project installer's <ph id="ph1">&lt;xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>This state information, passed into <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.Rollback%2A&gt;</ph> as the <ph id="ph2">`savedState`</ph> parameter, is continuously updated as the <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceProcessInstaller&gt;</ph> instance and each <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> instance is installed by the utility.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is usually unnecessary for your code to modify this state information explicitly.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.IDictionary"&gt;&lt;/xref&gt;</ph> that contains the context information associated with the installation.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Indicates the name used by the system to identify this service.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>This property must be identical to the <ph id="ph1">&lt;xref href="System.ServiceProcess.ServiceBase.ServiceName"&gt;&lt;/xref&gt;</ph> of the service you want to install.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is crucial that the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A&gt;</ph> be identical to the <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName&gt;</ph> of the class you derived from <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source>Normally, the value of the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName&gt;</ph> property for the service is set within the Main() function of the service application's executable.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Service Control Manager uses the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=fullName&gt;</ph> property to locate the service within this executable.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you set the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A&gt;</ph> of the service installer, the <ph id="ph2">&lt;xref:System.Diagnostics.EventLog.Source%2A&gt;</ph> of the associated event log is set to the same value.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>This allows the service to automatically log service commands (such as Start and Stop) calls to the Application log on the computer.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a source by the same name already exists on the computer, but in a log other than the Application log, an exception will be thrown.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the source exists and is associated with the Application log, that source is used to report command calls to the service, and no exception is thrown.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A&gt;</ph> cannot be <ph id="ph2">`null`</ph> or have zero length.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>Its maximum size is 256 characters.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source>It also cannot contain forward or backward slashes, '/' or '<ph id="ph1">\\</ph>', or characters from the ASCII character set with value less than decimal value 32.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The name of the service to be installed.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>This value must be set before the install utility attempts to install the service.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ServiceProcess.ServiceInstaller.ServiceName"&gt;&lt;/xref&gt;</ph> property is invalid.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Indicates the services that must be running for this service to run.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>A service can require other services to be running before it can start.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source>The information from this property is written to a key in the registry.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the user (or the system, in the case of automatic startup) tries to run the service, the Service Control Manager (SCM) verifies that each of the services in the array has already been started.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT">
          <source>If any service in the array is not running then, the SCM tries to start them.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>This includes services with <ph id="ph1">`Manual`</ph><ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller.StartType%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>If any service upon which this service depends fails to start, this service will not start.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>An exception is not thrown if the system is not started because there is no exception handling at the system level to detect this.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>Decide how to handle service start failures and implement this in your code.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, a dialog appears to the user at startup if a service fails to start.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the service does not start, an entry is written to the Application event log.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>The services upon which this service depends do not need to be in the same executable.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>An array of services that must be running before the service associated with this installer can run.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Indicates how and when this service is started.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT">
          <source>Set the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.StartType%2A&gt;</ph> to specify either that the service be started automatically after reboot or that a user must manually start the service.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT">
          <source>A service can also be disabled, specifying that it cannot be started, either manually or programmatically, until it is enabled.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot change <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> property values after installation.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT">
          <source>To change the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.StartType%2A&gt;</ph>, you either have to uninstall and reinstall your service, or manually change the setting using the Service Control Manager.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.ServiceProcess.ServiceStartMode"&gt;&lt;/xref&gt;</ph> that represents the way the service is started.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`Manual`</ph>, which specifies that the service will not automatically start after reboot.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The start mode is not a value of the <ph id="ph1">&lt;xref href="System.ServiceProcess.ServiceStartMode"&gt;&lt;/xref&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Uninstalls the service by removing information about it from the registry.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source>Uninstall first attempts to stop the service before uninstalling it.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the service cannot be stopped, no exception is caught, and the method continues with the removal of the service.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT">
          <source>Normally, you will not call the methods on <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> within your code; they are generally called only by the install utility.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT">
          <source>InstallUtil is used to uninstall services as well as install them; uninstalling takes a switch in the command line call.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT">
          <source>An application's uninstall routine maintains information automatically about the components being uninstalled, using the project installer's <ph id="ph1">&lt;xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT">
          <source>This state information, passed into <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A&gt;</ph> as the <ph id="ph2">`savedState`</ph> parameter, is continuously updated as the <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceProcessInstaller&gt;</ph> instance and each <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> instance is installed by the utility.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is usually unnecessary for your code to modify this state information explicitly.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT">
          <source>For all classes deriving from the <ph id="ph1">&lt;xref:System.Configuration.Install.Installer&gt;</ph> class, the state of the <ph id="ph2">&lt;xref:System.Configuration.Install.Installer.Installers%2A&gt;</ph> collection must be the same in the <ph id="ph3">&lt;xref:System.ServiceProcess.ServiceInstaller.Install%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, you can avoid the maintenance of the collection across the <ph id="ph1">&lt;xref:System.ServiceProcess.ServiceInstaller.Install%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A&gt;</ph> methods if you add installer instances to the <ph id="ph3">&lt;xref:System.Configuration.Install.Installer.Installers%2A&gt;</ph> collection in your custom installer class constructor.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT">
          <source>There is no rollback mechanism for uninstalling, so if one service fails to uninstall, this does not affect the other services (usually within the same installation project) being uninstalled.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Collections.IDictionary"&gt;&lt;/xref&gt;</ph> that contains the context information associated with the installation.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>The Service Control Manager could not be opened.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The system could not get a handle to the service.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>