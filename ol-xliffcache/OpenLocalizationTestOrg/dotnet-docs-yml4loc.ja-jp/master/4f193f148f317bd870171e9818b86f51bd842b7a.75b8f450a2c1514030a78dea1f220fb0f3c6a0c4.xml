{"nodes":[{"content":"Provides static helper methods for querying objects in the logical tree.","nodes":[{"pos":[0,72],"content":"Provides static helper methods for querying objects in the logical tree.","nodes":[{"content":"Provides static helper methods for querying objects in the logical tree.","pos":[0,72]}]}],"pos":[895,968],"yaml":true},{"content":"The <xref:System.Windows.LogicalTreeHelper> class provides methods that you can use to return child collections of objects, or specific objects from within subnodes of the logical tree. However, most of the object tree operations that you typically perform are also exposed by similar methods or properties on <xref:System.Windows.FrameworkElement> or <xref:System.Windows.FrameworkContentElement>. For example, try the following:  \n  \n-   Instead of calling the static <xref:System.Windows.LogicalTreeHelper.GetChildren%2A> method, which returns an enumerator for the logical child objects, use the dedicated collection exposed in the content model for that object. Nearly all objects that support a content model expose some property that contains the collection of child objects, and provides collection interface support directly on that collection.  \n  \n-   Instead of calling the static <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> method to obtain a child object by specifying its name, call the <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=fullName> or <xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=fullName> method on specific objects.  \n  \n <xref:System.Windows.LogicalTreeHelper> is most useful for analysis scenarios where you are traveling up or down the logical tree recursively through multiple levels, and want to use a consistent approach for examining the various parent or child objects. In this case, you might be accessing a mixture of content models, and using the more content-model specific APIs would be too complex.","nodes":[{"pos":[0,430],"content":"The <xref:System.Windows.LogicalTreeHelper> class provides methods that you can use to return child collections of objects, or specific objects from within subnodes of the logical tree. However, most of the object tree operations that you typically perform are also exposed by similar methods or properties on <xref:System.Windows.FrameworkElement> or <xref:System.Windows.FrameworkContentElement>. For example, try the following:","nodes":[{"content":"The <xref:System.Windows.LogicalTreeHelper> class provides methods that you can use to return child collections of objects, or specific objects from within subnodes of the logical tree. However, most of the object tree operations that you typically perform are also exposed by similar methods or properties on <xref:System.Windows.FrameworkElement> or <xref:System.Windows.FrameworkContentElement>. For example, try the following:","pos":[0,430],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.LogicalTreeHelper&gt;</ph> class provides methods that you can use to return child collections of objects, or specific objects from within subnodes of the logical tree.","pos":[0,185],"source":"The <xref:System.Windows.LogicalTreeHelper> class provides methods that you can use to return child collections of objects, or specific objects from within subnodes of the logical tree."},{"content":"However, most of the object tree operations that you typically perform are also exposed by similar methods or properties on <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph>.","pos":[186,398],"source":" However, most of the object tree operations that you typically perform are also exposed by similar methods or properties on <xref:System.Windows.FrameworkElement> or <xref:System.Windows.FrameworkContentElement>."},{"content":"For example, try the following:","pos":[399,430]}]}]},{"pos":[440,853],"content":"Instead of calling the static <xref:System.Windows.LogicalTreeHelper.GetChildren%2A> method, which returns an enumerator for the logical child objects, use the dedicated collection exposed in the content model for that object. Nearly all objects that support a content model expose some property that contains the collection of child objects, and provides collection interface support directly on that collection.","nodes":[{"content":"Instead of calling the static <xref:System.Windows.LogicalTreeHelper.GetChildren%2A> method, which returns an enumerator for the logical child objects, use the dedicated collection exposed in the content model for that object. Nearly all objects that support a content model expose some property that contains the collection of child objects, and provides collection interface support directly on that collection.","pos":[0,413],"nodes":[{"content":"Instead of calling the static <ph id=\"ph1\">&lt;xref:System.Windows.LogicalTreeHelper.GetChildren%2A&gt;</ph> method, which returns an enumerator for the logical child objects, use the dedicated collection exposed in the content model for that object.","pos":[0,226],"source":"Instead of calling the static <xref:System.Windows.LogicalTreeHelper.GetChildren%2A> method, which returns an enumerator for the logical child objects, use the dedicated collection exposed in the content model for that object."},{"content":"Nearly all objects that support a content model expose some property that contains the collection of child objects, and provides collection interface support directly on that collection.","pos":[227,413]}]}]},{"pos":[863,1206],"content":"Instead of calling the static <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> method to obtain a child object by specifying its name, call the <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=fullName> or <xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=fullName> method on specific objects.","nodes":[{"content":"Instead of calling the static <ph id=\"ph1\">&lt;xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A&gt;</ph> method to obtain a child object by specifying its name, call the <ph id=\"ph2\">&lt;xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=fullName&gt;</ph> method on specific objects.","pos":[0,343],"source":"Instead of calling the static <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> method to obtain a child object by specifying its name, call the <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=fullName> or <xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=fullName> method on specific objects."}]},{"pos":[1213,1603],"content":"<xref:System.Windows.LogicalTreeHelper> is most useful for analysis scenarios where you are traveling up or down the logical tree recursively through multiple levels, and want to use a consistent approach for examining the various parent or child objects. In this case, you might be accessing a mixture of content models, and using the more content-model specific APIs would be too complex.","nodes":[{"content":"<xref:System.Windows.LogicalTreeHelper> is most useful for analysis scenarios where you are traveling up or down the logical tree recursively through multiple levels, and want to use a consistent approach for examining the various parent or child objects. In this case, you might be accessing a mixture of content models, and using the more content-model specific APIs would be too complex.","pos":[0,390],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.LogicalTreeHelper&gt;</ph> is most useful for analysis scenarios where you are traveling up or down the logical tree recursively through multiple levels, and want to use a consistent approach for examining the various parent or child objects.","pos":[0,255],"source":"<xref:System.Windows.LogicalTreeHelper> is most useful for analysis scenarios where you are traveling up or down the logical tree recursively through multiple levels, and want to use a consistent approach for examining the various parent or child objects."},{"content":"In this case, you might be accessing a mixture of content models, and using the more content-model specific APIs would be too complex.","pos":[256,390]}]}]}],"pos":[979,2591],"yaml":true,"extradata":"MT"},{"content":"Attempts to bring the requested UI element into view and raises the <xref href=\"System.Windows.FrameworkElement.RequestBringIntoView\"></xref> event on the target in order to report the results.","nodes":[{"pos":[0,193],"content":"Attempts to bring the requested UI element into view and raises the <ph id=\"ph1\">&lt;xref href=\"System.Windows.FrameworkElement.RequestBringIntoView\"&gt;&lt;/xref&gt;</ph> event on the target in order to report the results.","source":"Attempts to bring the requested UI element into view and raises the <xref href=\"System.Windows.FrameworkElement.RequestBringIntoView\"></xref> event on the target in order to report the results."}],"pos":[4083,4277],"yaml":true},{"content":"It is typically more convenient to call the instance methods <xref:System.Windows.FrameworkElement.BringIntoView%2A?displayProperty=fullName> or <xref:System.Windows.FrameworkContentElement.BringIntoView%2A?displayProperty=fullName> rather than this static utility method. The behavior of the instance methods is equivalent to the behavior of the static method.  \n  \n Even if the `current` UI element provided was a <xref:System.Windows.FrameworkContentElement>, the resulting event is still the same <xref:System.Windows.FrameworkElement.RequestBringIntoView?displayProperty=fullName> event, with the originating <xref:System.Windows.FrameworkContentElement> identifiable by checking the event data of the event.","nodes":[{"pos":[0,361],"content":"It is typically more convenient to call the instance methods <xref:System.Windows.FrameworkElement.BringIntoView%2A?displayProperty=fullName> or <xref:System.Windows.FrameworkContentElement.BringIntoView%2A?displayProperty=fullName> rather than this static utility method. The behavior of the instance methods is equivalent to the behavior of the static method.","nodes":[{"content":"It is typically more convenient to call the instance methods <xref:System.Windows.FrameworkElement.BringIntoView%2A?displayProperty=fullName> or <xref:System.Windows.FrameworkContentElement.BringIntoView%2A?displayProperty=fullName> rather than this static utility method. The behavior of the instance methods is equivalent to the behavior of the static method.","pos":[0,361],"nodes":[{"content":"It is typically more convenient to call the instance methods <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement.BringIntoView%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Windows.FrameworkContentElement.BringIntoView%2A?displayProperty=fullName&gt;</ph> rather than this static utility method.","pos":[0,272],"source":"It is typically more convenient to call the instance methods <xref:System.Windows.FrameworkElement.BringIntoView%2A?displayProperty=fullName> or <xref:System.Windows.FrameworkContentElement.BringIntoView%2A?displayProperty=fullName> rather than this static utility method."},{"content":"The behavior of the instance methods is equivalent to the behavior of the static method.","pos":[273,361]}]}]},{"pos":[368,713],"content":"Even if the <ph id=\"ph1\">`current`</ph> UI element provided was a <ph id=\"ph2\">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph>, the resulting event is still the same <ph id=\"ph3\">&lt;xref:System.Windows.FrameworkElement.RequestBringIntoView?displayProperty=fullName&gt;</ph> event, with the originating <ph id=\"ph4\">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph> identifiable by checking the event data of the event.","source":"Even if the `current` UI element provided was a <xref:System.Windows.FrameworkContentElement>, the resulting event is still the same <xref:System.Windows.FrameworkElement.RequestBringIntoView?displayProperty=fullName> event, with the originating <xref:System.Windows.FrameworkContentElement> identifiable by checking the event data of the event."}],"pos":[4288,5006],"yaml":true,"extradata":"MT"},{"content":"The UI element to bring into view.","nodes":[{"pos":[0,34],"content":"The UI element to bring into view.","nodes":[{"content":"The UI element to bring into view.","pos":[0,34]}]}],"pos":[5202,5237],"yaml":true},{"content":"Attempts to find and return an object that has the specified name. The search starts from the specified object and continues into subnodes of the logical tree.","nodes":[{"pos":[0,159],"content":"Attempts to find and return an object that has the specified name. The search starts from the specified object and continues into subnodes of the logical tree.","nodes":[{"content":"Attempts to find and return an object that has the specified name. The search starts from the specified object and continues into subnodes of the logical tree.","pos":[0,159],"nodes":[{"content":"Attempts to find and return an object that has the specified name.","pos":[0,66]},{"content":"The search starts from the specified object and continues into subnodes of the logical tree.","pos":[67,159]}]}]}],"pos":[6479,6639],"yaml":true},{"content":"The methods <xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=fullName> and <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=fullName> are superficially similar to <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A>, but operate by different logic:  \n  \n-   The search direction for <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> is toward child objects (down the tree); the search direction for the `FindName` methods is towards parent objects (up the tree).  \n  \n-   The `FindName` methods are governed by the concept of a XAML namescope. Using `FindName` you are guaranteed that only one object of that name exists, because XAML namescopes enforce uniqueness. In contrast, <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> ignores XAML namescope and might cross XAML namescope boundaries during the search. As such, there is no guarantee of uniqueness of the `elementName` name once boundaries are crossed. For more information about XAML namescopes, see [WPF XAML Namescopes](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md).","nodes":[{"pos":[0,295],"content":"The methods <xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=fullName> and <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=fullName> are superficially similar to <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A>, but operate by different logic:","nodes":[{"content":"The methods <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=fullName&gt;</ph> are superficially similar to <ph id=\"ph3\">&lt;xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A&gt;</ph>, but operate by different logic:","pos":[0,295],"source":"The methods <xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=fullName> and <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=fullName> are superficially similar to <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A>, but operate by different logic:"}]},{"pos":[305,518],"content":"The search direction for <ph id=\"ph1\">&lt;xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A&gt;</ph> is toward child objects (down the tree); the search direction for the <ph id=\"ph2\">`FindName`</ph> methods is towards parent objects (up the tree).","source":"The search direction for <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> is toward child objects (down the tree); the search direction for the `FindName` methods is towards parent objects (up the tree)."},{"pos":[528,1102],"content":"The `FindName` methods are governed by the concept of a XAML namescope. Using `FindName` you are guaranteed that only one object of that name exists, because XAML namescopes enforce uniqueness. In contrast, <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> ignores XAML namescope and might cross XAML namescope boundaries during the search. As such, there is no guarantee of uniqueness of the `elementName` name once boundaries are crossed. For more information about XAML namescopes, see [WPF XAML Namescopes](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md).","nodes":[{"content":"The <ph id=\"ph1\">`FindName`</ph> methods are governed by the concept of a XAML namescope.","pos":[0,71],"source":"The `FindName` methods are governed by the concept of a XAML namescope."},{"content":"Using <ph id=\"ph1\">`FindName`</ph> you are guaranteed that only one object of that name exists, because XAML namescopes enforce uniqueness.","pos":[72,193],"source":" Using `FindName` you are guaranteed that only one object of that name exists, because XAML namescopes enforce uniqueness."},{"content":"In contrast, <ph id=\"ph1\">&lt;xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A&gt;</ph> ignores XAML namescope and might cross XAML namescope boundaries during the search.","pos":[194,349],"source":" In contrast, <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> ignores XAML namescope and might cross XAML namescope boundaries during the search."},{"content":"As such, there is no guarantee of uniqueness of the <ph id=\"ph1\">`elementName`</ph> name once boundaries are crossed.","pos":[350,449],"source":" As such, there is no guarantee of uniqueness of the `elementName` name once boundaries are crossed."},{"content":"For more information about XAML namescopes, see <bpt id=\"p1\">[</bpt>WPF XAML Namescopes<ept id=\"p1\">](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md)</ept>.","pos":[450,574],"source":" For more information about XAML namescopes, see [WPF XAML Namescopes](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md)."}]}],"pos":[6650,7759],"yaml":true,"extradata":"MT"},{"content":"The object to start searching from. This object must be either a <xref href=\"System.Windows.FrameworkElement\"></xref> or a <xref href=\"System.Windows.FrameworkContentElement\"></xref>.","nodes":[{"pos":[0,183],"content":"The object to start searching from. This object must be either a <xref href=\"System.Windows.FrameworkElement\"></xref> or a <xref href=\"System.Windows.FrameworkContentElement\"></xref>.","nodes":[{"content":"The object to start searching from.","pos":[0,35]},{"content":"This object must be either a <ph id=\"ph1\">&lt;xref href=\"System.Windows.FrameworkElement\"&gt;&lt;/xref&gt;</ph> or a <ph id=\"ph2\">&lt;xref href=\"System.Windows.FrameworkContentElement\"&gt;&lt;/xref&gt;</ph>.","pos":[36,183],"source":" This object must be either a <xref href=\"System.Windows.FrameworkElement\"></xref> or a <xref href=\"System.Windows.FrameworkContentElement\"></xref>."}]}],"pos":[8020,8204],"yaml":true},{"content":"The name of the object to find.","nodes":[{"pos":[0,31],"content":"The name of the object to find.","nodes":[{"content":"The name of the object to find.","pos":[0,31]}]}],"pos":[8271,8303],"yaml":true},{"content":"The object with the matching name, if one is found; returns `null` if no matching name was found in the logical tree.","nodes":[{"pos":[0,117],"content":"The object with the matching name, if one is found; returns <ph id=\"ph1\">`null`</ph> if no matching name was found in the logical tree.","source":"The object with the matching name, if one is found; returns `null` if no matching name was found in the logical tree."}],"pos":[8378,8496],"yaml":true},{"content":"Returns the collection of immediate child objects of the specified object, by processing the logical tree.","nodes":[{"pos":[0,106],"content":"Returns the collection of immediate child objects of the specified object, by processing the logical tree.","nodes":[{"content":"Returns the collection of immediate child objects of the specified object, by processing the logical tree.","pos":[0,106]}]}],"pos":[9650,9757],"yaml":true},{"content":"Use this signature and helper method primarily when you are unsure whether `current` is a <xref:System.Windows.FrameworkElement> or <xref:System.Windows.FrameworkContentElement> and are also unsure whether that object's class supports its own content model collection. If you can determine the type of the object you are querying, check the specific content property that you know exists on that type. For example, if you know that the object you are querying is an <xref:System.Windows.Controls.ItemsControl>, check the <xref:System.Windows.Controls.ItemsControl.Items%2A> property to get a strongly typed collection, which has collection interface support and is probably more useful than an enumerator.","nodes":[{"pos":[0,705],"content":"Use this signature and helper method primarily when you are unsure whether `current` is a <xref:System.Windows.FrameworkElement> or <xref:System.Windows.FrameworkContentElement> and are also unsure whether that object's class supports its own content model collection. If you can determine the type of the object you are querying, check the specific content property that you know exists on that type. For example, if you know that the object you are querying is an <xref:System.Windows.Controls.ItemsControl>, check the <xref:System.Windows.Controls.ItemsControl.Items%2A> property to get a strongly typed collection, which has collection interface support and is probably more useful than an enumerator.","nodes":[{"content":"Use this signature and helper method primarily when you are unsure whether <ph id=\"ph1\">`current`</ph> is a <ph id=\"ph2\">&lt;xref:System.Windows.FrameworkElement&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph> and are also unsure whether that object's class supports its own content model collection.","pos":[0,268],"source":"Use this signature and helper method primarily when you are unsure whether `current` is a <xref:System.Windows.FrameworkElement> or <xref:System.Windows.FrameworkContentElement> and are also unsure whether that object's class supports its own content model collection."},{"content":"If you can determine the type of the object you are querying, check the specific content property that you know exists on that type.","pos":[269,401]},{"content":"For example, if you know that the object you are querying is an <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ItemsControl&gt;</ph>, check the <ph id=\"ph2\">&lt;xref:System.Windows.Controls.ItemsControl.Items%2A&gt;</ph> property to get a strongly typed collection, which has collection interface support and is probably more useful than an enumerator.","pos":[402,705],"source":" For example, if you know that the object you are querying is an <xref:System.Windows.Controls.ItemsControl>, check the <xref:System.Windows.Controls.ItemsControl.Items%2A> property to get a strongly typed collection, which has collection interface support and is probably more useful than an enumerator."}]}],"pos":[9768,10474],"yaml":true,"extradata":"MT"},{"content":"The object from which to start processing the logical tree. This is expected to be either a <xref href=\"System.Windows.FrameworkElement\"></xref> or <xref href=\"System.Windows.FrameworkContentElement\"></xref>.","nodes":[{"pos":[0,208],"content":"The object from which to start processing the logical tree. This is expected to be either a <xref href=\"System.Windows.FrameworkElement\"></xref> or <xref href=\"System.Windows.FrameworkContentElement\"></xref>.","nodes":[{"content":"The object from which to start processing the logical tree.","pos":[0,59]},{"content":"This is expected to be either a <ph id=\"ph1\">&lt;xref href=\"System.Windows.FrameworkElement\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph2\">&lt;xref href=\"System.Windows.FrameworkContentElement\"&gt;&lt;/xref&gt;</ph>.","pos":[60,208],"source":" This is expected to be either a <xref href=\"System.Windows.FrameworkElement\"></xref> or <xref href=\"System.Windows.FrameworkContentElement\"></xref>."}]}],"pos":[10694,10903],"yaml":true},{"content":"The enumerable collection of immediate child objects from the logical tree of the specified object.","nodes":[{"pos":[0,99],"content":"The enumerable collection of immediate child objects from the logical tree of the specified object.","nodes":[{"content":"The enumerable collection of immediate child objects from the logical tree of the specified object.","pos":[0,99]}]}],"pos":[10977,11077],"yaml":true},{"content":"Returns the collection of immediate child objects of the specified <xref href=\"System.Windows.FrameworkContentElement\"></xref> by processing the logical tree.","nodes":[{"pos":[0,158],"content":"Returns the collection of immediate child objects of the specified <ph id=\"ph1\">&lt;xref href=\"System.Windows.FrameworkContentElement\"&gt;&lt;/xref&gt;</ph> by processing the logical tree.","source":"Returns the collection of immediate child objects of the specified <xref href=\"System.Windows.FrameworkContentElement\"></xref> by processing the logical tree."}],"pos":[12247,12406],"yaml":true},{"content":"The object from which to start processing the logical tree.","nodes":[{"pos":[0,59],"content":"The object from which to start processing the logical tree.","nodes":[{"content":"The object from which to start processing the logical tree.","pos":[0,59]}]}],"pos":[12640,12700],"yaml":true},{"content":"The enumerable collection of immediate child objects starting from <code>current</code> in the logical tree.","nodes":[{"pos":[0,108],"content":"The enumerable collection of immediate child objects starting from <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">current</ph><ept id=\"p1\">&lt;/code&gt;</ept> in the logical tree.","source":"The enumerable collection of immediate child objects starting from <code>current</code> in the logical tree."}],"pos":[12774,12883],"yaml":true},{"content":"Returns the collection of immediate child objects of the specified <xref href=\"System.Windows.FrameworkElement\"></xref> by processing the logical tree.","nodes":[{"pos":[0,151],"content":"Returns the collection of immediate child objects of the specified <ph id=\"ph1\">&lt;xref href=\"System.Windows.FrameworkElement\"&gt;&lt;/xref&gt;</ph> by processing the logical tree.","source":"Returns the collection of immediate child objects of the specified <xref href=\"System.Windows.FrameworkElement\"></xref> by processing the logical tree."}],"pos":[14033,14185],"yaml":true},{"content":"The object from which to start processing the logical tree.","nodes":[{"pos":[0,59],"content":"The object from which to start processing the logical tree.","nodes":[{"content":"The object from which to start processing the logical tree.","pos":[0,59]}]}],"pos":[14405,14465],"yaml":true},{"content":"The enumerable collection of immediate child objects starting from <code>current</code> in the logical tree.","nodes":[{"pos":[0,108],"content":"The enumerable collection of immediate child objects starting from <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">current</ph><ept id=\"p1\">&lt;/code&gt;</ept> in the logical tree.","source":"The enumerable collection of immediate child objects starting from <code>current</code> in the logical tree."}],"pos":[14539,14648],"yaml":true},{"content":"Returns the parent object of the specified object by processing the logical tree.","nodes":[{"pos":[0,81],"content":"Returns the parent object of the specified object by processing the logical tree.","nodes":[{"content":"Returns the parent object of the specified object by processing the logical tree.","pos":[0,81]}]}],"pos":[15786,15868],"yaml":true},{"content":"This method is merely a wrapper that gets the appropriate type version (<xref:System.Windows.FrameworkElement> or <xref:System.Windows.FrameworkContentElement>) of the <xref:System.Windows.FrameworkElement.Parent%2A?displayProperty=fullName> or <xref:System.Windows.FrameworkContentElement.Parent%2A?displayProperty=fullName> property; so unless you are unable to determine the `current` type, you might want to check the respective instance properties instead.","nodes":[{"pos":[0,461],"content":"This method is merely a wrapper that gets the appropriate type version (<ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph>) of the <ph id=\"ph3\">&lt;xref:System.Windows.FrameworkElement.Parent%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph4\">&lt;xref:System.Windows.FrameworkContentElement.Parent%2A?displayProperty=fullName&gt;</ph> property; so unless you are unable to determine the <ph id=\"ph5\">`current`</ph> type, you might want to check the respective instance properties instead.","source":"This method is merely a wrapper that gets the appropriate type version (<xref:System.Windows.FrameworkElement> or <xref:System.Windows.FrameworkContentElement>) of the <xref:System.Windows.FrameworkElement.Parent%2A?displayProperty=fullName> or <xref:System.Windows.FrameworkContentElement.Parent%2A?displayProperty=fullName> property; so unless you are unable to determine the `current` type, you might want to check the respective instance properties instead."}],"pos":[15879,16341],"yaml":true,"extradata":"MT"},{"content":"The object to find the parent object for. This is expected to be either a <xref href=\"System.Windows.FrameworkElement\"></xref> or a <xref href=\"System.Windows.FrameworkContentElement\"></xref>.","nodes":[{"pos":[0,192],"content":"The object to find the parent object for. This is expected to be either a <xref href=\"System.Windows.FrameworkElement\"></xref> or a <xref href=\"System.Windows.FrameworkContentElement\"></xref>.","nodes":[{"content":"The object to find the parent object for.","pos":[0,41]},{"content":"This is expected to be either a <ph id=\"ph1\">&lt;xref href=\"System.Windows.FrameworkElement\"&gt;&lt;/xref&gt;</ph> or a <ph id=\"ph2\">&lt;xref href=\"System.Windows.FrameworkContentElement\"&gt;&lt;/xref&gt;</ph>.","pos":[42,192],"source":" This is expected to be either a <xref href=\"System.Windows.FrameworkElement\"></xref> or a <xref href=\"System.Windows.FrameworkContentElement\"></xref>."}]}],"pos":[16560,16753],"yaml":true},{"content":"The requested parent object.","nodes":[{"pos":[0,28],"content":"The requested parent object.","nodes":[{"content":"The requested parent object.","pos":[0,28]}]}],"pos":[16828,16857],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.LogicalTreeHelper\n  commentId: T:System.Windows.LogicalTreeHelper\n  id: LogicalTreeHelper\n  children:\n  - System.Windows.LogicalTreeHelper.BringIntoView(System.Windows.DependencyObject)\n  - System.Windows.LogicalTreeHelper.FindLogicalNode(System.Windows.DependencyObject,System.String)\n  - System.Windows.LogicalTreeHelper.GetChildren(System.Windows.DependencyObject)\n  - System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkContentElement)\n  - System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkElement)\n  - System.Windows.LogicalTreeHelper.GetParent(System.Windows.DependencyObject)\n  langs:\n  - csharp\n  name: LogicalTreeHelper\n  nameWithType: LogicalTreeHelper\n  fullName: System.Windows.LogicalTreeHelper\n  type: Class\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Provides static helper methods for querying objects in the logical tree.\n  remarks: \"The <xref:System.Windows.LogicalTreeHelper> class provides methods that you can use to return child collections of objects, or specific objects from within subnodes of the logical tree. However, most of the object tree operations that you typically perform are also exposed by similar methods or properties on <xref:System.Windows.FrameworkElement> or <xref:System.Windows.FrameworkContentElement>. For example, try the following:  \\n  \\n-   Instead of calling the static <xref:System.Windows.LogicalTreeHelper.GetChildren%2A> method, which returns an enumerator for the logical child objects, use the dedicated collection exposed in the content model for that object. Nearly all objects that support a content model expose some property that contains the collection of child objects, and provides collection interface support directly on that collection.  \\n  \\n-   Instead of calling the static <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> method to obtain a child object by specifying its name, call the <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=fullName> or <xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=fullName> method on specific objects.  \\n  \\n <xref:System.Windows.LogicalTreeHelper> is most useful for analysis scenarios where you are traveling up or down the logical tree recursively through multiple levels, and want to use a consistent approach for examining the various parent or child objects. In this case, you might be accessing a mixture of content models, and using the more content-model specific APIs would be too complex.\"\n  syntax:\n    content: public static class LogicalTreeHelper\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/LogicalTreeHelper.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.LogicalTreeHelper.BringIntoView(System.Windows.DependencyObject)\n  commentId: M:System.Windows.LogicalTreeHelper.BringIntoView(System.Windows.DependencyObject)\n  id: BringIntoView(System.Windows.DependencyObject)\n  parent: System.Windows.LogicalTreeHelper\n  langs:\n  - csharp\n  name: BringIntoView(DependencyObject)\n  nameWithType: LogicalTreeHelper.BringIntoView(DependencyObject)\n  fullName: LogicalTreeHelper.BringIntoView(DependencyObject)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Attempts to bring the requested UI element into view and raises the <xref href=\"System.Windows.FrameworkElement.RequestBringIntoView\"></xref> event on the target in order to report the results.\n  remarks: \"It is typically more convenient to call the instance methods <xref:System.Windows.FrameworkElement.BringIntoView%2A?displayProperty=fullName> or <xref:System.Windows.FrameworkContentElement.BringIntoView%2A?displayProperty=fullName> rather than this static utility method. The behavior of the instance methods is equivalent to the behavior of the static method.  \\n  \\n Even if the `current` UI element provided was a <xref:System.Windows.FrameworkContentElement>, the resulting event is still the same <xref:System.Windows.FrameworkElement.RequestBringIntoView?displayProperty=fullName> event, with the originating <xref:System.Windows.FrameworkContentElement> identifiable by checking the event data of the event.\"\n  syntax:\n    content: public static void BringIntoView (System.Windows.DependencyObject current);\n    parameters:\n    - id: current\n      type: System.Windows.DependencyObject\n      description: The UI element to bring into view.\n  overload: System.Windows.LogicalTreeHelper.BringIntoView*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/LogicalTreeHelper.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.LogicalTreeHelper.FindLogicalNode(System.Windows.DependencyObject,System.String)\n  commentId: M:System.Windows.LogicalTreeHelper.FindLogicalNode(System.Windows.DependencyObject,System.String)\n  id: FindLogicalNode(System.Windows.DependencyObject,System.String)\n  parent: System.Windows.LogicalTreeHelper\n  langs:\n  - csharp\n  name: FindLogicalNode(DependencyObject, String)\n  nameWithType: LogicalTreeHelper.FindLogicalNode(DependencyObject, String)\n  fullName: LogicalTreeHelper.FindLogicalNode(DependencyObject, String)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Attempts to find and return an object that has the specified name. The search starts from the specified object and continues into subnodes of the logical tree.\n  remarks: \"The methods <xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=fullName> and <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=fullName> are superficially similar to <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A>, but operate by different logic:  \\n  \\n-   The search direction for <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> is toward child objects (down the tree); the search direction for the `FindName` methods is towards parent objects (up the tree).  \\n  \\n-   The `FindName` methods are governed by the concept of a XAML namescope. Using `FindName` you are guaranteed that only one object of that name exists, because XAML namescopes enforce uniqueness. In contrast, <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> ignores XAML namescope and might cross XAML namescope boundaries during the search. As such, there is no guarantee of uniqueness of the `elementName` name once boundaries are crossed. For more information about XAML namescopes, see [WPF XAML Namescopes](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md).\"\n  syntax:\n    content: public static System.Windows.DependencyObject FindLogicalNode (System.Windows.DependencyObject logicalTreeNode, string elementName);\n    parameters:\n    - id: logicalTreeNode\n      type: System.Windows.DependencyObject\n      description: The object to start searching from. This object must be either a <xref href=\"System.Windows.FrameworkElement\"></xref> or a <xref href=\"System.Windows.FrameworkContentElement\"></xref>.\n    - id: elementName\n      type: System.String\n      description: The name of the object to find.\n    return:\n      type: System.Windows.DependencyObject\n      description: The object with the matching name, if one is found; returns `null` if no matching name was found in the logical tree.\n  overload: System.Windows.LogicalTreeHelper.FindLogicalNode*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/LogicalTreeHelper.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.LogicalTreeHelper.GetChildren(System.Windows.DependencyObject)\n  commentId: M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.DependencyObject)\n  id: GetChildren(System.Windows.DependencyObject)\n  parent: System.Windows.LogicalTreeHelper\n  langs:\n  - csharp\n  name: GetChildren(DependencyObject)\n  nameWithType: LogicalTreeHelper.GetChildren(DependencyObject)\n  fullName: LogicalTreeHelper.GetChildren(DependencyObject)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Returns the collection of immediate child objects of the specified object, by processing the logical tree.\n  remarks: Use this signature and helper method primarily when you are unsure whether `current` is a <xref:System.Windows.FrameworkElement> or <xref:System.Windows.FrameworkContentElement> and are also unsure whether that object's class supports its own content model collection. If you can determine the type of the object you are querying, check the specific content property that you know exists on that type. For example, if you know that the object you are querying is an <xref:System.Windows.Controls.ItemsControl>, check the <xref:System.Windows.Controls.ItemsControl.Items%2A> property to get a strongly typed collection, which has collection interface support and is probably more useful than an enumerator.\n  syntax:\n    content: public static System.Collections.IEnumerable GetChildren (System.Windows.DependencyObject current);\n    parameters:\n    - id: current\n      type: System.Windows.DependencyObject\n      description: The object from which to start processing the logical tree. This is expected to be either a <xref href=\"System.Windows.FrameworkElement\"></xref> or <xref href=\"System.Windows.FrameworkContentElement\"></xref>.\n    return:\n      type: System.Collections.IEnumerable\n      description: The enumerable collection of immediate child objects from the logical tree of the specified object.\n  overload: System.Windows.LogicalTreeHelper.GetChildren*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/LogicalTreeHelper.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkContentElement)\n  commentId: M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkContentElement)\n  id: GetChildren(System.Windows.FrameworkContentElement)\n  parent: System.Windows.LogicalTreeHelper\n  langs:\n  - csharp\n  name: GetChildren(FrameworkContentElement)\n  nameWithType: LogicalTreeHelper.GetChildren(FrameworkContentElement)\n  fullName: LogicalTreeHelper.GetChildren(FrameworkContentElement)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Returns the collection of immediate child objects of the specified <xref href=\"System.Windows.FrameworkContentElement\"></xref> by processing the logical tree.\n  syntax:\n    content: public static System.Collections.IEnumerable GetChildren (System.Windows.FrameworkContentElement current);\n    parameters:\n    - id: current\n      type: System.Windows.FrameworkContentElement\n      description: The object from which to start processing the logical tree.\n    return:\n      type: System.Collections.IEnumerable\n      description: The enumerable collection of immediate child objects starting from <code>current</code> in the logical tree.\n  overload: System.Windows.LogicalTreeHelper.GetChildren*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/LogicalTreeHelper.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkElement)\n  commentId: M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkElement)\n  id: GetChildren(System.Windows.FrameworkElement)\n  parent: System.Windows.LogicalTreeHelper\n  langs:\n  - csharp\n  name: GetChildren(FrameworkElement)\n  nameWithType: LogicalTreeHelper.GetChildren(FrameworkElement)\n  fullName: LogicalTreeHelper.GetChildren(FrameworkElement)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Returns the collection of immediate child objects of the specified <xref href=\"System.Windows.FrameworkElement\"></xref> by processing the logical tree.\n  syntax:\n    content: public static System.Collections.IEnumerable GetChildren (System.Windows.FrameworkElement current);\n    parameters:\n    - id: current\n      type: System.Windows.FrameworkElement\n      description: The object from which to start processing the logical tree.\n    return:\n      type: System.Collections.IEnumerable\n      description: The enumerable collection of immediate child objects starting from <code>current</code> in the logical tree.\n  overload: System.Windows.LogicalTreeHelper.GetChildren*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/LogicalTreeHelper.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.LogicalTreeHelper.GetParent(System.Windows.DependencyObject)\n  commentId: M:System.Windows.LogicalTreeHelper.GetParent(System.Windows.DependencyObject)\n  id: GetParent(System.Windows.DependencyObject)\n  parent: System.Windows.LogicalTreeHelper\n  langs:\n  - csharp\n  name: GetParent(DependencyObject)\n  nameWithType: LogicalTreeHelper.GetParent(DependencyObject)\n  fullName: LogicalTreeHelper.GetParent(DependencyObject)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Returns the parent object of the specified object by processing the logical tree.\n  remarks: This method is merely a wrapper that gets the appropriate type version (<xref:System.Windows.FrameworkElement> or <xref:System.Windows.FrameworkContentElement>) of the <xref:System.Windows.FrameworkElement.Parent%2A?displayProperty=fullName> or <xref:System.Windows.FrameworkContentElement.Parent%2A?displayProperty=fullName> property; so unless you are unable to determine the `current` type, you might want to check the respective instance properties instead.\n  syntax:\n    content: public static System.Windows.DependencyObject GetParent (System.Windows.DependencyObject current);\n    parameters:\n    - id: current\n      type: System.Windows.DependencyObject\n      description: The object to find the parent object for. This is expected to be either a <xref href=\"System.Windows.FrameworkElement\"></xref> or a <xref href=\"System.Windows.FrameworkContentElement\"></xref>.\n    return:\n      type: System.Windows.DependencyObject\n      description: The requested parent object.\n  overload: System.Windows.LogicalTreeHelper.GetParent*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/LogicalTreeHelper.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Windows.LogicalTreeHelper.BringIntoView(System.Windows.DependencyObject)\n  parent: System.Windows.LogicalTreeHelper\n  isExternal: false\n  name: BringIntoView(DependencyObject)\n  nameWithType: LogicalTreeHelper.BringIntoView(DependencyObject)\n  fullName: LogicalTreeHelper.BringIntoView(DependencyObject)\n- uid: System.Windows.DependencyObject\n  parent: System.Windows\n  isExternal: false\n  name: DependencyObject\n  nameWithType: DependencyObject\n  fullName: System.Windows.DependencyObject\n- uid: System.Windows.LogicalTreeHelper.FindLogicalNode(System.Windows.DependencyObject,System.String)\n  parent: System.Windows.LogicalTreeHelper\n  isExternal: false\n  name: FindLogicalNode(DependencyObject, String)\n  nameWithType: LogicalTreeHelper.FindLogicalNode(DependencyObject, String)\n  fullName: LogicalTreeHelper.FindLogicalNode(DependencyObject, String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Windows.LogicalTreeHelper.GetChildren(System.Windows.DependencyObject)\n  parent: System.Windows.LogicalTreeHelper\n  isExternal: false\n  name: GetChildren(DependencyObject)\n  nameWithType: LogicalTreeHelper.GetChildren(DependencyObject)\n  fullName: LogicalTreeHelper.GetChildren(DependencyObject)\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerable\n  nameWithType: IEnumerable\n  fullName: System.Collections.IEnumerable\n- uid: System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkContentElement)\n  parent: System.Windows.LogicalTreeHelper\n  isExternal: false\n  name: GetChildren(FrameworkContentElement)\n  nameWithType: LogicalTreeHelper.GetChildren(FrameworkContentElement)\n  fullName: LogicalTreeHelper.GetChildren(FrameworkContentElement)\n- uid: System.Windows.FrameworkContentElement\n  parent: System.Windows\n  isExternal: false\n  name: FrameworkContentElement\n  nameWithType: FrameworkContentElement\n  fullName: System.Windows.FrameworkContentElement\n- uid: System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkElement)\n  parent: System.Windows.LogicalTreeHelper\n  isExternal: false\n  name: GetChildren(FrameworkElement)\n  nameWithType: LogicalTreeHelper.GetChildren(FrameworkElement)\n  fullName: LogicalTreeHelper.GetChildren(FrameworkElement)\n- uid: System.Windows.FrameworkElement\n  parent: System.Windows\n  isExternal: false\n  name: FrameworkElement\n  nameWithType: FrameworkElement\n  fullName: System.Windows.FrameworkElement\n- uid: System.Windows.LogicalTreeHelper.GetParent(System.Windows.DependencyObject)\n  parent: System.Windows.LogicalTreeHelper\n  isExternal: false\n  name: GetParent(DependencyObject)\n  nameWithType: LogicalTreeHelper.GetParent(DependencyObject)\n  fullName: LogicalTreeHelper.GetParent(DependencyObject)\n- uid: System.Windows.LogicalTreeHelper.BringIntoView*\n  parent: System.Windows.LogicalTreeHelper\n  isExternal: false\n  name: BringIntoView\n  nameWithType: LogicalTreeHelper.BringIntoView\n  fullName: LogicalTreeHelper.BringIntoView\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/LogicalTreeHelper.xml\n- uid: System.Windows.LogicalTreeHelper.FindLogicalNode*\n  parent: System.Windows.LogicalTreeHelper\n  isExternal: false\n  name: FindLogicalNode\n  nameWithType: LogicalTreeHelper.FindLogicalNode\n  fullName: LogicalTreeHelper.FindLogicalNode\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/LogicalTreeHelper.xml\n- uid: System.Windows.LogicalTreeHelper.GetChildren*\n  parent: System.Windows.LogicalTreeHelper\n  isExternal: false\n  name: GetChildren\n  nameWithType: LogicalTreeHelper.GetChildren\n  fullName: LogicalTreeHelper.GetChildren\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/LogicalTreeHelper.xml\n- uid: System.Windows.LogicalTreeHelper.GetParent*\n  parent: System.Windows.LogicalTreeHelper\n  isExternal: false\n  name: GetParent\n  nameWithType: LogicalTreeHelper.GetParent\n  fullName: LogicalTreeHelper.GetParent\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/LogicalTreeHelper.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}