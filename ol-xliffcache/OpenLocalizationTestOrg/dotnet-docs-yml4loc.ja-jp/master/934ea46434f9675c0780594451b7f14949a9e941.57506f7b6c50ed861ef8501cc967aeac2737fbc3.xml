{"nodes":[{"content":"Defines methods implemented by permission types.","nodes":[{"pos":[0,48],"content":"Defines methods implemented by permission types.","nodes":[{"content":"Defines methods implemented by permission types.","pos":[0,48]}]}],"pos":[669,718],"yaml":true},{"content":"Permissions in the common language runtime are objects that describe sets of operations that can be secured for specified resources. A permission object describes operations or access that is subject to security control; it does not represent access or a right to perform operations. Permissions are used by both application code and the .NET Framework security system in the following ways.  \n  \n-   Code requests the permissions it needs in order to run.  \n  \n-   The security system policy grants permissions to code in order for it to run.  \n  \n-   Code demands that calling code has a permission.  \n  \n-   Code overrides the security stack using assert/deny/permit-only.  \n  \n> [!NOTE]\n>  If you write a new permission, you must implement this interface in your class.  \n  \n> [!IMPORTANT]\n>  A permission can be accessed by multiple threads. When implementing this interface, you must guarantee that the <xref:System.Security.IPermission.IsSubsetOf%2A>, <xref:System.Security.IPermission.Intersect%2A>, <xref:System.Security.IPermission.Union%2A>, and <xref:System.Security.IPermission.Copy%2A> method implementations are thread safe.","nodes":[{"pos":[0,391],"content":"Permissions in the common language runtime are objects that describe sets of operations that can be secured for specified resources. A permission object describes operations or access that is subject to security control; it does not represent access or a right to perform operations. Permissions are used by both application code and the .NET Framework security system in the following ways.","nodes":[{"content":"Permissions in the common language runtime are objects that describe sets of operations that can be secured for specified resources. A permission object describes operations or access that is subject to security control; it does not represent access or a right to perform operations. Permissions are used by both application code and the .NET Framework security system in the following ways.","pos":[0,391],"nodes":[{"content":"Permissions in the common language runtime are objects that describe sets of operations that can be secured for specified resources.","pos":[0,132]},{"content":"A permission object describes operations or access that is subject to security control; it does not represent access or a right to perform operations.","pos":[133,283]},{"content":"Permissions are used by both application code and the .NET Framework security system in the following ways.","pos":[284,391]}]}]},{"pos":[401,456],"content":"Code requests the permissions it needs in order to run.","nodes":[{"content":"Code requests the permissions it needs in order to run.","pos":[0,55]}]},{"pos":[466,543],"content":"The security system policy grants permissions to code in order for it to run.","nodes":[{"content":"The security system policy grants permissions to code in order for it to run.","pos":[0,77]}]},{"pos":[553,601],"content":"Code demands that calling code has a permission.","nodes":[{"content":"Code demands that calling code has a permission.","pos":[0,48]}]},{"pos":[611,675],"content":"Code overrides the security stack using assert/deny/permit-only.","nodes":[{"content":"Code overrides the security stack using assert/deny/permit-only.","pos":[0,64]}]},{"pos":[683,773],"content":"[!NOTE]\n If you write a new permission, you must implement this interface in your class.","leadings":["","> "],"nodes":[{"content":"If you write a new permission, you must implement this interface in your class.","pos":[9,88]}]},{"pos":[781,1139],"content":"[!IMPORTANT]\n A permission can be accessed by multiple threads. When implementing this interface, you must guarantee that the <xref:System.Security.IPermission.IsSubsetOf%2A>, <xref:System.Security.IPermission.Intersect%2A>, <xref:System.Security.IPermission.Union%2A>, and <xref:System.Security.IPermission.Copy%2A> method implementations are thread safe.","leadings":["","> "],"nodes":[{"content":" A permission can be accessed by multiple threads. When implementing this interface, you must guarantee that the <xref:System.Security.IPermission.IsSubsetOf%2A>, <xref:System.Security.IPermission.Intersect%2A>, <xref:System.Security.IPermission.Union%2A>, and <xref:System.Security.IPermission.Copy%2A> method implementations are thread safe.","pos":[13,356],"nodes":[{"content":"A permission can be accessed by multiple threads.","pos":[1,50]},{"content":"When implementing this interface, you must guarantee that the <ph id=\"ph1\">&lt;xref:System.Security.IPermission.IsSubsetOf%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Security.IPermission.Intersect%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Security.IPermission.Union%2A&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Security.IPermission.Copy%2A&gt;</ph> method implementations are thread safe.","pos":[51,343],"source":" When implementing this interface, you must guarantee that the <xref:System.Security.IPermission.IsSubsetOf%2A>, <xref:System.Security.IPermission.Intersect%2A>, <xref:System.Security.IPermission.Union%2A>, and <xref:System.Security.IPermission.Copy%2A> method implementations are thread safe."}]}]}],"pos":[729,1885],"yaml":true,"extradata":"MT"},{"content":"Creates and returns an identical copy of the current permission.","nodes":[{"pos":[0,64],"content":"Creates and returns an identical copy of the current permission.","nodes":[{"content":"Creates and returns an identical copy of the current permission.","pos":[0,64]}]}],"pos":[3905,3970],"yaml":true},{"content":"A copy of a permission represents the same access to resources as the original permission.","nodes":[{"pos":[0,90],"content":"A copy of a permission represents the same access to resources as the original permission.","nodes":[{"content":"A copy of a permission represents the same access to resources as the original permission.","pos":[0,90]}]}],"pos":[3981,4072],"yaml":true,"extradata":"MT"},{"content":"A copy of the current permission.","nodes":[{"pos":[0,33],"content":"A copy of the current permission.","nodes":[{"content":"A copy of the current permission.","pos":[0,33]}]}],"pos":[4774,4808],"yaml":true},{"content":"Throws a <xref href=\"System.Security.SecurityException\"></xref> at run time if the security requirement is not met.","nodes":[{"pos":[0,115],"content":"Throws a <ph id=\"ph1\">&lt;xref href=\"System.Security.SecurityException\"&gt;&lt;/xref&gt;</ph> at run time if the security requirement is not met.","source":"Throws a <xref href=\"System.Security.SecurityException\"></xref> at run time if the security requirement is not met."}],"pos":[5970,6086],"yaml":true},{"content":"This method is typically used by secure libraries to ensure that callers have permission to access a resource. For example, a file class in a secure class library calls <xref:System.Security.CodeAccessPermission.Demand%2A> for the necessary <xref:System.Security.Permissions.FileIOPermission> before performing a file operation requested by the caller.  \n  \n Although the majority of the classes that implement this interface method satisfy the security criteria by performing a full stack walk, a stack walk is not necessarily performed. An example of an implementation that does not perform a stack walk is <xref:System.Security.Permissions.PrincipalPermission.Demand%2A?displayProperty=fullName>.  \n  \n When a stack walk is performed, the permissions of the code that calls this method are not examined; the check begins from the immediate caller of that code and proceeds up the stack. The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack. <xref:System.Security.CodeAccessPermission.Demand%2A> succeeds only if no <xref:System.Security.SecurityException> is raised.","nodes":[{"pos":[0,352],"content":"This method is typically used by secure libraries to ensure that callers have permission to access a resource. For example, a file class in a secure class library calls <xref:System.Security.CodeAccessPermission.Demand%2A> for the necessary <xref:System.Security.Permissions.FileIOPermission> before performing a file operation requested by the caller.","nodes":[{"content":"This method is typically used by secure libraries to ensure that callers have permission to access a resource. For example, a file class in a secure class library calls <xref:System.Security.CodeAccessPermission.Demand%2A> for the necessary <xref:System.Security.Permissions.FileIOPermission> before performing a file operation requested by the caller.","pos":[0,352],"nodes":[{"content":"This method is typically used by secure libraries to ensure that callers have permission to access a resource.","pos":[0,110]},{"content":"For example, a file class in a secure class library calls <ph id=\"ph1\">&lt;xref:System.Security.CodeAccessPermission.Demand%2A&gt;</ph> for the necessary <ph id=\"ph2\">&lt;xref:System.Security.Permissions.FileIOPermission&gt;</ph> before performing a file operation requested by the caller.","pos":[111,352],"source":" For example, a file class in a secure class library calls <xref:System.Security.CodeAccessPermission.Demand%2A> for the necessary <xref:System.Security.Permissions.FileIOPermission> before performing a file operation requested by the caller."}]}]},{"pos":[359,699],"content":"Although the majority of the classes that implement this interface method satisfy the security criteria by performing a full stack walk, a stack walk is not necessarily performed. An example of an implementation that does not perform a stack walk is <xref:System.Security.Permissions.PrincipalPermission.Demand%2A?displayProperty=fullName>.","nodes":[{"content":"Although the majority of the classes that implement this interface method satisfy the security criteria by performing a full stack walk, a stack walk is not necessarily performed. An example of an implementation that does not perform a stack walk is <xref:System.Security.Permissions.PrincipalPermission.Demand%2A?displayProperty=fullName>.","pos":[0,340],"nodes":[{"content":"Although the majority of the classes that implement this interface method satisfy the security criteria by performing a full stack walk, a stack walk is not necessarily performed.","pos":[0,179]},{"content":"An example of an implementation that does not perform a stack walk is <ph id=\"ph1\">&lt;xref:System.Security.Permissions.PrincipalPermission.Demand%2A?displayProperty=fullName&gt;</ph>.","pos":[180,340],"source":" An example of an implementation that does not perform a stack walk is <xref:System.Security.Permissions.PrincipalPermission.Demand%2A?displayProperty=fullName>."}]}]},{"pos":[706,1151],"content":"When a stack walk is performed, the permissions of the code that calls this method are not examined; the check begins from the immediate caller of that code and proceeds up the stack. The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack. <xref:System.Security.CodeAccessPermission.Demand%2A> succeeds only if no <xref:System.Security.SecurityException> is raised.","nodes":[{"content":"When a stack walk is performed, the permissions of the code that calls this method are not examined; the check begins from the immediate caller of that code and proceeds up the stack. The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack. <xref:System.Security.CodeAccessPermission.Demand%2A> succeeds only if no <xref:System.Security.SecurityException> is raised.","pos":[0,445],"nodes":[{"content":"When a stack walk is performed, the permissions of the code that calls this method are not examined; the check begins from the immediate caller of that code and proceeds up the stack.","pos":[0,183]},{"content":"The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.","pos":[184,319]},{"content":"<ph id=\"ph1\">&lt;xref:System.Security.CodeAccessPermission.Demand%2A&gt;</ph> succeeds only if no <ph id=\"ph2\">&lt;xref:System.Security.SecurityException&gt;</ph> is raised.","pos":[320,445],"source":" <xref:System.Security.CodeAccessPermission.Demand%2A> succeeds only if no <xref:System.Security.SecurityException> is raised."}]}]}],"pos":[6097,7255],"yaml":true,"extradata":"MT"},{"content":"Creates and returns a permission that is the intersection of the current permission and the specified permission.","nodes":[{"pos":[0,113],"content":"Creates and returns a permission that is the intersection of the current permission and the specified permission.","nodes":[{"content":"Creates and returns a permission that is the intersection of the current permission and the specified permission.","pos":[0,113]}]}],"pos":[8622,8736],"yaml":true},{"content":"The intersection of two permissions is a permission that describes the set of operations they both describe in common. Only a demand that passes both original permissions will pass the intersection.  \n  \n The following statements are required to be true for all implementations of the <xref:System.Security.IPermission.Intersect%2A> method. `X` and `Y` represent <xref:System.Security.IPermission> object references that are not `null`.  \n  \n-   `X`.Intersect(`X`) returns a value equal to `X`.  \n  \n-   `X`.Intersect(`Y`) returns the same value as `Y`.Intersect(`X`).  \n  \n-   `X`.Intersect(`null`) returns `null`.","nodes":[{"pos":[0,198],"content":"The intersection of two permissions is a permission that describes the set of operations they both describe in common. Only a demand that passes both original permissions will pass the intersection.","nodes":[{"content":"The intersection of two permissions is a permission that describes the set of operations they both describe in common. Only a demand that passes both original permissions will pass the intersection.","pos":[0,198],"nodes":[{"content":"The intersection of two permissions is a permission that describes the set of operations they both describe in common.","pos":[0,118]},{"content":"Only a demand that passes both original permissions will pass the intersection.","pos":[119,198]}]}]},{"pos":[205,436],"content":"The following statements are required to be true for all implementations of the <xref:System.Security.IPermission.Intersect%2A> method. `X` and `Y` represent <xref:System.Security.IPermission> object references that are not `null`.","nodes":[{"content":"The following statements are required to be true for all implementations of the <ph id=\"ph1\">&lt;xref:System.Security.IPermission.Intersect%2A&gt;</ph> method.","pos":[0,135],"source":"The following statements are required to be true for all implementations of the <xref:System.Security.IPermission.Intersect%2A> method."},{"content":"<ph id=\"ph1\">`X`</ph> and <ph id=\"ph2\">`Y`</ph> represent <ph id=\"ph3\">&lt;xref:System.Security.IPermission&gt;</ph> object references that are not <ph id=\"ph4\">`null`</ph>.","pos":[136,231],"source":"`X` and `Y` represent <xref:System.Security.IPermission> object references that are not `null`."}]},{"pos":[446,494],"content":"<ph id=\"ph1\">`X`</ph>.Intersect(<ph id=\"ph2\">`X`</ph>) returns a value equal to <ph id=\"ph3\">`X`</ph>.","source":"`X`.Intersect(`X`) returns a value equal to `X`."},{"pos":[504,568],"content":"<ph id=\"ph1\">`X`</ph>.Intersect(<ph id=\"ph2\">`Y`</ph>) returns the same value as <ph id=\"ph3\">`Y`</ph>.Intersect(<ph id=\"ph4\">`X`</ph>).","source":"`X`.Intersect(`Y`) returns the same value as `Y`.Intersect(`X`)."},{"pos":[578,615],"content":"<ph id=\"ph1\">`X`</ph>.Intersect(<ph id=\"ph2\">`null`</ph>) returns <ph id=\"ph3\">`null`</ph>.","source":"`X`.Intersect(`null`) returns `null`."}],"pos":[8747,9373],"yaml":true,"extradata":"MT"},{"content":"A permission to intersect with the current permission. It must be of the same type as the current permission.","nodes":[{"pos":[0,109],"content":"A permission to intersect with the current permission. It must be of the same type as the current permission.","nodes":[{"content":"A permission to intersect with the current permission. It must be of the same type as the current permission.","pos":[0,109],"nodes":[{"content":"A permission to intersect with the current permission.","pos":[0,54]},{"content":"It must be of the same type as the current permission.","pos":[55,109]}]}]}],"pos":[10121,10231],"yaml":true},{"content":"A new permission that represents the intersection of the current permission and the specified permission. This new permission is `null` if the intersection is empty.","nodes":[{"pos":[0,165],"content":"A new permission that represents the intersection of the current permission and the specified permission. This new permission is `null` if the intersection is empty.","nodes":[{"content":"A new permission that represents the intersection of the current permission and the specified permission.","pos":[0,105]},{"content":"This new permission is <ph id=\"ph1\">`null`</ph> if the intersection is empty.","pos":[106,165],"source":" This new permission is `null` if the intersection is empty."}]}],"pos":[10302,10468],"yaml":true},{"content":"The <code>target</code> parameter is not `null` and is not an instance of the same class as the current permission.","nodes":[{"pos":[0,115],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">target</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not <ph id=\"ph2\">`null`</ph> and is not an instance of the same class as the current permission.","source":"The <code>target</code> parameter is not `null` and is not an instance of the same class as the current permission."}],"pos":[10627,10743],"yaml":true},{"content":"Determines whether the current permission is a subset of the specified permission.","nodes":[{"pos":[0,82],"content":"Determines whether the current permission is a subset of the specified permission.","nodes":[{"content":"Determines whether the current permission is a subset of the specified permission.","pos":[0,82]}]}],"pos":[11986,12069],"yaml":true},{"content":"The current permission is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained by the specified permission. For example, a permission that represents access to C:\\example.txt is a subset of a permission that represents access to C:\\\\. If this method returns `true`, the current permission represents no more access to the protected resource than does the specified permission.  \n  \n The following statements are required to be true for all implementations of the <xref:System.Security.IPermission.IsSubsetOf%2A> method. `X`, `Y`, and `Z` represent <xref:System.Security.IPermission> objects that are not `null`.  \n  \n-   `X`.IsSubsetOf(`X`) returns `true`.  \n  \n-   `X`.IsSubsetOf(`Y`) returns the same value as `Y`.IsSubsetOf(`X`) if and only if `X` and `Y` represent the same set of permissions.  \n  \n-   If `X`.IsSubsetOf(`Y`) and `Y`.IsSubsetOf(`Z`) both return `true`, `X`.IsSubsetOf(`Z`) returns `true`.  \n  \n If `X` represents an empty <xref:System.Security.IPermission> object with a permission state of <xref:System.Security.Permissions.PermissionState.None> and `Y` represents an <xref:System.Security.IPermission> object that is `null`, `X`.IsSubsetOf(`Y`) returns `true`. If `Z` is also an empty permission, the compound set operation `X`.Union(Z).IsSubsetOf(Y) also returns `true` because the union of two empty permissions is an empty permission.","nodes":[{"pos":[0,441],"content":"The current permission is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained by the specified permission. For example, a permission that represents access to C:\\example.txt is a subset of a permission that represents access to C:\\\\. If this method returns `true`, the current permission represents no more access to the protected resource than does the specified permission.","nodes":[{"content":"The current permission is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained by the specified permission.","pos":[0,172]},{"content":"For example, a permission that represents access to C:\\example.txt is a subset of a permission that represents access to C:<ph id=\"ph1\">\\\\</ph>.","pos":[173,299],"source":" For example, a permission that represents access to C:\\example.txt is a subset of a permission that represents access to C:\\\\."},{"content":"If this method returns <ph id=\"ph1\">`true`</ph>, the current permission represents no more access to the protected resource than does the specified permission.","pos":[300,441],"source":" If this method returns `true`, the current permission represents no more access to the protected resource than does the specified permission."}]},{"pos":[448,676],"content":"The following statements are required to be true for all implementations of the <xref:System.Security.IPermission.IsSubsetOf%2A> method. `X`, `Y`, and `Z` represent <xref:System.Security.IPermission> objects that are not `null`.","nodes":[{"content":"The following statements are required to be true for all implementations of the <ph id=\"ph1\">&lt;xref:System.Security.IPermission.IsSubsetOf%2A&gt;</ph> method.","pos":[0,136],"source":"The following statements are required to be true for all implementations of the <xref:System.Security.IPermission.IsSubsetOf%2A> method."},{"content":"<ph id=\"ph1\">`X`</ph>, <ph id=\"ph2\">`Y`</ph>, and <ph id=\"ph3\">`Z`</ph> represent <ph id=\"ph4\">&lt;xref:System.Security.IPermission&gt;</ph> objects that are not <ph id=\"ph5\">`null`</ph>.","pos":[137,228],"source":"`X`, `Y`, and `Z` represent <xref:System.Security.IPermission> objects that are not `null`."}]},{"pos":[686,721],"content":"<ph id=\"ph1\">`X`</ph>.IsSubsetOf(<ph id=\"ph2\">`X`</ph>) returns <ph id=\"ph3\">`true`</ph>.","source":"`X`.IsSubsetOf(`X`) returns `true`."},{"pos":[731,862],"content":"<ph id=\"ph1\">`X`</ph>.IsSubsetOf(<ph id=\"ph2\">`Y`</ph>) returns the same value as <ph id=\"ph3\">`Y`</ph>.IsSubsetOf(<ph id=\"ph4\">`X`</ph>) if and only if <ph id=\"ph5\">`X`</ph> and <ph id=\"ph6\">`Y`</ph> represent the same set of permissions.","source":"`X`.IsSubsetOf(`Y`) returns the same value as `Y`.IsSubsetOf(`X`) if and only if `X` and `Y` represent the same set of permissions."},{"pos":[872,974],"content":"If <ph id=\"ph1\">`X`</ph>.IsSubsetOf(<ph id=\"ph2\">`Y`</ph>) and <ph id=\"ph3\">`Y`</ph>.IsSubsetOf(<ph id=\"ph4\">`Z`</ph>) both return <ph id=\"ph5\">`true`</ph>, <ph id=\"ph6\">`X`</ph>.IsSubsetOf(<ph id=\"ph7\">`Z`</ph>) returns <ph id=\"ph8\">`true`</ph>.","source":"If `X`.IsSubsetOf(`Y`) and `Y`.IsSubsetOf(`Z`) both return `true`, `X`.IsSubsetOf(`Z`) returns `true`."},{"pos":[981,1425],"content":"If `X` represents an empty <xref:System.Security.IPermission> object with a permission state of <xref:System.Security.Permissions.PermissionState.None> and `Y` represents an <xref:System.Security.IPermission> object that is `null`, `X`.IsSubsetOf(`Y`) returns `true`. If `Z` is also an empty permission, the compound set operation `X`.Union(Z).IsSubsetOf(Y) also returns `true` because the union of two empty permissions is an empty permission.","nodes":[{"content":"If <ph id=\"ph1\">`X`</ph> represents an empty <ph id=\"ph2\">&lt;xref:System.Security.IPermission&gt;</ph> object with a permission state of <ph id=\"ph3\">&lt;xref:System.Security.Permissions.PermissionState.None&gt;</ph> and <ph id=\"ph4\">`Y`</ph> represents an <ph id=\"ph5\">&lt;xref:System.Security.IPermission&gt;</ph> object that is <ph id=\"ph6\">`null`</ph>, <ph id=\"ph7\">`X`</ph>.IsSubsetOf(<ph id=\"ph8\">`Y`</ph>) returns <ph id=\"ph9\">`true`</ph>.","pos":[0,267],"source":"If `X` represents an empty <xref:System.Security.IPermission> object with a permission state of <xref:System.Security.Permissions.PermissionState.None> and `Y` represents an <xref:System.Security.IPermission> object that is `null`, `X`.IsSubsetOf(`Y`) returns `true`."},{"content":"If <ph id=\"ph1\">`Z`</ph> is also an empty permission, the compound set operation <ph id=\"ph2\">`X`</ph>.Union(Z).IsSubsetOf(Y) also returns <ph id=\"ph3\">`true`</ph> because the union of two empty permissions is an empty permission.","pos":[268,444],"source":" If `Z` is also an empty permission, the compound set operation `X`.Union(Z).IsSubsetOf(Y) also returns `true` because the union of two empty permissions is an empty permission."}]}],"pos":[12080,13521],"yaml":true,"extradata":"MT"},{"content":"A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.","nodes":[{"pos":[0,130],"content":"A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.","nodes":[{"content":"A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.","pos":[0,130],"nodes":[{"content":"A permission that is to be tested for the subset relationship.","pos":[0,62]},{"content":"This permission must be of the same type as the current permission.","pos":[63,130]}]}]}],"pos":[14248,14379],"yaml":true},{"content":"`true` if the current permission is a subset of the specified permission; otherwise, `false`.","nodes":[{"pos":[0,93],"content":"<ph id=\"ph1\">`true`</ph> if the current permission is a subset of the specified permission; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the current permission is a subset of the specified permission; otherwise, `false`."}],"pos":[14437,14533],"yaml":true},{"content":"The <code>target</code> parameter is not `null` and is not of the same type as the current permission.","nodes":[{"pos":[0,102],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">target</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not <ph id=\"ph2\">`null`</ph> and is not of the same type as the current permission.","source":"The <code>target</code> parameter is not `null` and is not of the same type as the current permission."}],"pos":[14693,14796],"yaml":true},{"content":"Creates a permission that is the union of the current permission and the specified permission.","nodes":[{"pos":[0,94],"content":"Creates a permission that is the union of the current permission and the specified permission.","nodes":[{"content":"Creates a permission that is the union of the current permission and the specified permission.","pos":[0,94]}]}],"pos":[16009,16104],"yaml":true},{"content":"The result of a call to <xref:System.Security.IPermission.Union%2A> is a permission that represents all the operations represented by both the current permission and the specified permission. Any demand that passes either permission passes their union.  \n  \n The following statements are required to be true for all implementations of the <xref:System.Security.IPermission.Union%2A> method. `X` and `Y` represent <xref:System.Security.IPermission> objects that are not `null`.  \n  \n-   `X`.Union(`X`) returns an object that has the same value as `X`.  \n  \n-   `X`.Union(`Y`) returns an object that has the same value as the object returned by `Y`.Union(`X`).  \n  \n-   `X`.Union(`null`) returns an object that has the same value as `X`.","nodes":[{"pos":[0,252],"content":"The result of a call to <xref:System.Security.IPermission.Union%2A> is a permission that represents all the operations represented by both the current permission and the specified permission. Any demand that passes either permission passes their union.","nodes":[{"content":"The result of a call to <xref:System.Security.IPermission.Union%2A> is a permission that represents all the operations represented by both the current permission and the specified permission. Any demand that passes either permission passes their union.","pos":[0,252],"nodes":[{"content":"The result of a call to <ph id=\"ph1\">&lt;xref:System.Security.IPermission.Union%2A&gt;</ph> is a permission that represents all the operations represented by both the current permission and the specified permission.","pos":[0,191],"source":"The result of a call to <xref:System.Security.IPermission.Union%2A> is a permission that represents all the operations represented by both the current permission and the specified permission."},{"content":"Any demand that passes either permission passes their union.","pos":[192,252]}]}]},{"pos":[259,476],"content":"The following statements are required to be true for all implementations of the <xref:System.Security.IPermission.Union%2A> method. `X` and `Y` represent <xref:System.Security.IPermission> objects that are not `null`.","nodes":[{"content":"The following statements are required to be true for all implementations of the <ph id=\"ph1\">&lt;xref:System.Security.IPermission.Union%2A&gt;</ph> method.","pos":[0,131],"source":"The following statements are required to be true for all implementations of the <xref:System.Security.IPermission.Union%2A> method."},{"content":"<ph id=\"ph1\">`X`</ph> and <ph id=\"ph2\">`Y`</ph> represent <ph id=\"ph3\">&lt;xref:System.Security.IPermission&gt;</ph> objects that are not <ph id=\"ph4\">`null`</ph>.","pos":[132,217],"source":"`X` and `Y` represent <xref:System.Security.IPermission> objects that are not `null`."}]},{"pos":[486,550],"content":"<ph id=\"ph1\">`X`</ph>.Union(<ph id=\"ph2\">`X`</ph>) returns an object that has the same value as <ph id=\"ph3\">`X`</ph>.","source":"`X`.Union(`X`) returns an object that has the same value as `X`."},{"pos":[560,658],"content":"<ph id=\"ph1\">`X`</ph>.Union(<ph id=\"ph2\">`Y`</ph>) returns an object that has the same value as the object returned by <ph id=\"ph3\">`Y`</ph>.Union(<ph id=\"ph4\">`X`</ph>).","source":"`X`.Union(`Y`) returns an object that has the same value as the object returned by `Y`.Union(`X`)."},{"pos":[668,735],"content":"<ph id=\"ph1\">`X`</ph>.Union(<ph id=\"ph2\">`null`</ph>) returns an object that has the same value as <ph id=\"ph3\">`X`</ph>.","source":"`X`.Union(`null`) returns an object that has the same value as `X`."}],"pos":[16115,16861],"yaml":true,"extradata":"MT"},{"content":"A permission to combine with the current permission. It must be of the same type as the current permission.","nodes":[{"pos":[0,107],"content":"A permission to combine with the current permission. It must be of the same type as the current permission.","nodes":[{"content":"A permission to combine with the current permission. It must be of the same type as the current permission.","pos":[0,107],"nodes":[{"content":"A permission to combine with the current permission.","pos":[0,52]},{"content":"It must be of the same type as the current permission.","pos":[53,107]}]}]}],"pos":[17610,17718],"yaml":true},{"content":"A new permission that represents the union of the current permission and the specified permission.","nodes":[{"pos":[0,98],"content":"A new permission that represents the union of the current permission and the specified permission.","nodes":[{"content":"A new permission that represents the union of the current permission and the specified permission.","pos":[0,98]}]}],"pos":[17789,17888],"yaml":true},{"content":"The <code>target</code> parameter is not `null` and is not of the same type as the current permission.","nodes":[{"pos":[0,102],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">target</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not <ph id=\"ph2\">`null`</ph> and is not of the same type as the current permission.","source":"The <code>target</code> parameter is not `null` and is not of the same type as the current permission."}],"pos":[18043,18146],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.IPermission\n  commentId: T:System.Security.IPermission\n  id: IPermission\n  children:\n  - System.Security.IPermission.Copy\n  - System.Security.IPermission.Demand\n  - System.Security.IPermission.Intersect(System.Security.IPermission)\n  - System.Security.IPermission.IsSubsetOf(System.Security.IPermission)\n  - System.Security.IPermission.Union(System.Security.IPermission)\n  langs:\n  - csharp\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n  type: Interface\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Security\n  summary: Defines methods implemented by permission types.\n  remarks: \"Permissions in the common language runtime are objects that describe sets of operations that can be secured for specified resources. A permission object describes operations or access that is subject to security control; it does not represent access or a right to perform operations. Permissions are used by both application code and the .NET Framework security system in the following ways.  \\n  \\n-   Code requests the permissions it needs in order to run.  \\n  \\n-   The security system policy grants permissions to code in order for it to run.  \\n  \\n-   Code demands that calling code has a permission.  \\n  \\n-   Code overrides the security stack using assert/deny/permit-only.  \\n  \\n> [!NOTE]\\n>  If you write a new permission, you must implement this interface in your class.  \\n  \\n> [!IMPORTANT]\\n>  A permission can be accessed by multiple threads. When implementing this interface, you must guarantee that the <xref:System.Security.IPermission.IsSubsetOf%2A>, <xref:System.Security.IPermission.Intersect%2A>, <xref:System.Security.IPermission.Union%2A>, and <xref:System.Security.IPermission.Copy%2A> method implementations are thread safe.\"\n  example:\n  - \"This example shows how to define a permission class for use with code access security. All of the necessary permission interfaces are implemented.  \\n  \\n [!code-cpp[Permission#1](~/samples/snippets/cpp/VS_Snippets_CLR/Permission/cpp/Permission.cpp#1)]\\n [!code-csharp[Permission#1](~/samples/snippets/csharp/VS_Snippets_CLR/Permission/CS/Permission.cs#1)]\\n [!code-vb[Permission#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Permission/vb/permission.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public interface IPermission : System.Security.ISecurityEncodable\n  derivedClasses:\n  - System.IdentityModel.Services.ClaimsPrincipalPermission\n  - System.Security.CodeAccessPermission\n  - System.Security.Permissions.PrincipalPermission\n  implements:\n  - System.Security.ISecurityEncodable\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/IPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.IPermission.Copy\n  commentId: M:System.Security.IPermission.Copy\n  id: Copy\n  parent: System.Security.IPermission\n  langs:\n  - csharp\n  name: Copy()\n  nameWithType: IPermission.Copy()\n  fullName: IPermission.Copy()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Security\n  summary: Creates and returns an identical copy of the current permission.\n  remarks: A copy of a permission represents the same access to resources as the original permission.\n  example:\n  - \"The following code example demonstrates implementing the <xref:System.Security.IPermission.Copy%2A> method. This code example is part of a larger example provided for the <xref:System.Security.IPermission> class.  \\n  \\n [!code-cpp[Permission#4](~/samples/snippets/cpp/VS_Snippets_CLR/Permission/cpp/Permission.cpp#4)]\\n [!code-csharp[Permission#4](~/samples/snippets/csharp/VS_Snippets_CLR/Permission/CS/Permission.cs#4)]\\n [!code-vb[Permission#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Permission/vb/permission.vb#4)]\"\n  syntax:\n    content: public System.Security.IPermission Copy ();\n    parameters: []\n    return:\n      type: System.Security.IPermission\n      description: A copy of the current permission.\n  overload: System.Security.IPermission.Copy*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/IPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.IPermission.Demand\n  commentId: M:System.Security.IPermission.Demand\n  id: Demand\n  parent: System.Security.IPermission\n  langs:\n  - csharp\n  name: Demand()\n  nameWithType: IPermission.Demand()\n  fullName: IPermission.Demand()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Security\n  summary: Throws a <xref href=\"System.Security.SecurityException\"></xref> at run time if the security requirement is not met.\n  remarks: \"This method is typically used by secure libraries to ensure that callers have permission to access a resource. For example, a file class in a secure class library calls <xref:System.Security.CodeAccessPermission.Demand%2A> for the necessary <xref:System.Security.Permissions.FileIOPermission> before performing a file operation requested by the caller.  \\n  \\n Although the majority of the classes that implement this interface method satisfy the security criteria by performing a full stack walk, a stack walk is not necessarily performed. An example of an implementation that does not perform a stack walk is <xref:System.Security.Permissions.PrincipalPermission.Demand%2A?displayProperty=fullName>.  \\n  \\n When a stack walk is performed, the permissions of the code that calls this method are not examined; the check begins from the immediate caller of that code and proceeds up the stack. The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack. <xref:System.Security.CodeAccessPermission.Demand%2A> succeeds only if no <xref:System.Security.SecurityException> is raised.\"\n  syntax:\n    content: public void Demand ();\n    parameters: []\n  overload: System.Security.IPermission.Demand*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/IPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.IPermission.Intersect(System.Security.IPermission)\n  commentId: M:System.Security.IPermission.Intersect(System.Security.IPermission)\n  id: Intersect(System.Security.IPermission)\n  parent: System.Security.IPermission\n  langs:\n  - csharp\n  name: Intersect(IPermission)\n  nameWithType: IPermission.Intersect(IPermission)\n  fullName: IPermission.Intersect(IPermission)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Security\n  summary: Creates and returns a permission that is the intersection of the current permission and the specified permission.\n  remarks: \"The intersection of two permissions is a permission that describes the set of operations they both describe in common. Only a demand that passes both original permissions will pass the intersection.  \\n  \\n The following statements are required to be true for all implementations of the <xref:System.Security.IPermission.Intersect%2A> method. `X` and `Y` represent <xref:System.Security.IPermission> object references that are not `null`.  \\n  \\n-   `X`.Intersect(`X`) returns a value equal to `X`.  \\n  \\n-   `X`.Intersect(`Y`) returns the same value as `Y`.Intersect(`X`).  \\n  \\n-   `X`.Intersect(`null`) returns `null`.\"\n  example:\n  - \"The following code example demonstrates implementing the <xref:System.Security.IPermission.Intersect%2A> method. This code example is part of a larger example provided for the <xref:System.Security.IPermission> class.  \\n  \\n [!code-cpp[Permission#2](~/samples/snippets/cpp/VS_Snippets_CLR/Permission/cpp/Permission.cpp#2)]\\n [!code-csharp[Permission#2](~/samples/snippets/csharp/VS_Snippets_CLR/Permission/CS/Permission.cs#2)]\\n [!code-vb[Permission#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Permission/vb/permission.vb#2)]\"\n  syntax:\n    content: public System.Security.IPermission Intersect (System.Security.IPermission target);\n    parameters:\n    - id: target\n      type: System.Security.IPermission\n      description: A permission to intersect with the current permission. It must be of the same type as the current permission.\n    return:\n      type: System.Security.IPermission\n      description: A new permission that represents the intersection of the current permission and the specified permission. This new permission is `null` if the intersection is empty.\n  overload: System.Security.IPermission.Intersect*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>target</code> parameter is not `null` and is not an instance of the same class as the current permission.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/IPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.IPermission.IsSubsetOf(System.Security.IPermission)\n  commentId: M:System.Security.IPermission.IsSubsetOf(System.Security.IPermission)\n  id: IsSubsetOf(System.Security.IPermission)\n  parent: System.Security.IPermission\n  langs:\n  - csharp\n  name: IsSubsetOf(IPermission)\n  nameWithType: IPermission.IsSubsetOf(IPermission)\n  fullName: IPermission.IsSubsetOf(IPermission)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Security\n  summary: Determines whether the current permission is a subset of the specified permission.\n  remarks: \"The current permission is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained by the specified permission. For example, a permission that represents access to C:\\\\example.txt is a subset of a permission that represents access to C:\\\\\\\\. If this method returns `true`, the current permission represents no more access to the protected resource than does the specified permission.  \\n  \\n The following statements are required to be true for all implementations of the <xref:System.Security.IPermission.IsSubsetOf%2A> method. `X`, `Y`, and `Z` represent <xref:System.Security.IPermission> objects that are not `null`.  \\n  \\n-   `X`.IsSubsetOf(`X`) returns `true`.  \\n  \\n-   `X`.IsSubsetOf(`Y`) returns the same value as `Y`.IsSubsetOf(`X`) if and only if `X` and `Y` represent the same set of permissions.  \\n  \\n-   If `X`.IsSubsetOf(`Y`) and `Y`.IsSubsetOf(`Z`) both return `true`, `X`.IsSubsetOf(`Z`) returns `true`.  \\n  \\n If `X` represents an empty <xref:System.Security.IPermission> object with a permission state of <xref:System.Security.Permissions.PermissionState.None> and `Y` represents an <xref:System.Security.IPermission> object that is `null`, `X`.IsSubsetOf(`Y`) returns `true`. If `Z` is also an empty permission, the compound set operation `X`.Union(Z).IsSubsetOf(Y) also returns `true` because the union of two empty permissions is an empty permission.\"\n  example:\n  - \"The following code example demonstrates implementing the <xref:System.Security.IPermission.IsSubsetOf%2A> method. This code example is part of a larger example provided for the <xref:System.Security.IPermission> class.  \\n  \\n [!code-cpp[Permission#3](~/samples/snippets/cpp/VS_Snippets_CLR/Permission/cpp/Permission.cpp#3)]\\n [!code-csharp[Permission#3](~/samples/snippets/csharp/VS_Snippets_CLR/Permission/CS/Permission.cs#3)]\\n [!code-vb[Permission#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Permission/vb/permission.vb#3)]\"\n  syntax:\n    content: public bool IsSubsetOf (System.Security.IPermission target);\n    parameters:\n    - id: target\n      type: System.Security.IPermission\n      description: A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.\n    return:\n      type: System.Boolean\n      description: '`true` if the current permission is a subset of the specified permission; otherwise, `false`.'\n  overload: System.Security.IPermission.IsSubsetOf*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>target</code> parameter is not `null` and is not of the same type as the current permission.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/IPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.IPermission.Union(System.Security.IPermission)\n  commentId: M:System.Security.IPermission.Union(System.Security.IPermission)\n  id: Union(System.Security.IPermission)\n  parent: System.Security.IPermission\n  langs:\n  - csharp\n  name: Union(IPermission)\n  nameWithType: IPermission.Union(IPermission)\n  fullName: IPermission.Union(IPermission)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Security\n  summary: Creates a permission that is the union of the current permission and the specified permission.\n  remarks: \"The result of a call to <xref:System.Security.IPermission.Union%2A> is a permission that represents all the operations represented by both the current permission and the specified permission. Any demand that passes either permission passes their union.  \\n  \\n The following statements are required to be true for all implementations of the <xref:System.Security.IPermission.Union%2A> method. `X` and `Y` represent <xref:System.Security.IPermission> objects that are not `null`.  \\n  \\n-   `X`.Union(`X`) returns an object that has the same value as `X`.  \\n  \\n-   `X`.Union(`Y`) returns an object that has the same value as the object returned by `Y`.Union(`X`).  \\n  \\n-   `X`.Union(`null`) returns an object that has the same value as `X`.\"\n  example:\n  - \"The following code example demonstrates implementing the <xref:System.Security.IPermission.Union%2A> method. This code example is part of a larger example provided for the <xref:System.Security.IPermission> class.  \\n  \\n [!code-cpp[Permission#5](~/samples/snippets/cpp/VS_Snippets_CLR/Permission/cpp/Permission.cpp#5)]\\n [!code-csharp[Permission#5](~/samples/snippets/csharp/VS_Snippets_CLR/Permission/CS/Permission.cs#5)]\\n [!code-vb[Permission#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/Permission/vb/permission.vb#5)]  \\n  \\n-\"\n  syntax:\n    content: public System.Security.IPermission Union (System.Security.IPermission target);\n    parameters:\n    - id: target\n      type: System.Security.IPermission\n      description: A permission to combine with the current permission. It must be of the same type as the current permission.\n    return:\n      type: System.Security.IPermission\n      description: A new permission that represents the union of the current permission and the specified permission.\n  overload: System.Security.IPermission.Union*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>target</code> parameter is not `null` and is not of the same type as the current permission.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/IPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.Security.IPermission.Copy\n  parent: System.Security.IPermission\n  isExternal: false\n  name: Copy()\n  nameWithType: IPermission.Copy()\n  fullName: IPermission.Copy()\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Security.IPermission.Demand\n  parent: System.Security.IPermission\n  isExternal: false\n  name: Demand()\n  nameWithType: IPermission.Demand()\n  fullName: IPermission.Demand()\n- uid: System.Security.IPermission.Intersect(System.Security.IPermission)\n  parent: System.Security.IPermission\n  isExternal: false\n  name: Intersect(IPermission)\n  nameWithType: IPermission.Intersect(IPermission)\n  fullName: IPermission.Intersect(IPermission)\n- uid: System.Security.IPermission.IsSubsetOf(System.Security.IPermission)\n  parent: System.Security.IPermission\n  isExternal: false\n  name: IsSubsetOf(IPermission)\n  nameWithType: IPermission.IsSubsetOf(IPermission)\n  fullName: IPermission.IsSubsetOf(IPermission)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.IPermission.Union(System.Security.IPermission)\n  parent: System.Security.IPermission\n  isExternal: false\n  name: Union(IPermission)\n  nameWithType: IPermission.Union(IPermission)\n  fullName: IPermission.Union(IPermission)\n- uid: System.Security.IPermission.Copy*\n  parent: System.Security.IPermission\n  isExternal: false\n  name: Copy\n  nameWithType: IPermission.Copy\n  fullName: IPermission.Copy\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/IPermission.xml\n- uid: System.Security.IPermission.Demand*\n  parent: System.Security.IPermission\n  isExternal: false\n  name: Demand\n  nameWithType: IPermission.Demand\n  fullName: IPermission.Demand\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/IPermission.xml\n- uid: System.Security.IPermission.Intersect*\n  parent: System.Security.IPermission\n  isExternal: false\n  name: Intersect\n  nameWithType: IPermission.Intersect\n  fullName: IPermission.Intersect\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/IPermission.xml\n- uid: System.Security.IPermission.IsSubsetOf*\n  parent: System.Security.IPermission\n  isExternal: false\n  name: IsSubsetOf\n  nameWithType: IPermission.IsSubsetOf\n  fullName: IPermission.IsSubsetOf\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/IPermission.xml\n- uid: System.Security.IPermission.Union*\n  parent: System.Security.IPermission\n  isExternal: false\n  name: Union\n  nameWithType: IPermission.Union\n  fullName: IPermission.Union\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/IPermission.xml\n- uid: System.Security.ISecurityEncodable\n  parent: System.Security\n  isExternal: false\n  name: ISecurityEncodable\n  nameWithType: ISecurityEncodable\n  fullName: System.Security.ISecurityEncodable\n"}