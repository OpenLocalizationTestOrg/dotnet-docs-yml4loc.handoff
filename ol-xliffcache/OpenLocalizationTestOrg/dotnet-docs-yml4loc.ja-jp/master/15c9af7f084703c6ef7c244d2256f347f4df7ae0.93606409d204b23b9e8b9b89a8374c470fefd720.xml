{"nodes":[{"content":"Contains the raw data for a counter.","nodes":[{"pos":[0,36],"content":"Contains the raw data for a counter.","nodes":[{"content":"Contains the raw data for a counter.","pos":[0,36]}]}],"pos":[728,765],"yaml":true},{"content":"The <xref:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet.Item%2A?displayProperty=fullName> property returns an instance of this class.  \n  \n This class provides thread-safe methods for reading and writing counter data.","nodes":[{"pos":[0,155],"content":"The <xref:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet.Item%2A?displayProperty=fullName> property returns an instance of this class.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet.Item%2A?displayProperty=fullName&gt;</ph> property returns an instance of this class.","pos":[0,155],"source":"The <xref:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet.Item%2A?displayProperty=fullName> property returns an instance of this class."}]},{"pos":[162,239],"content":"This class provides thread-safe methods for reading and writing counter data.","nodes":[{"content":"This class provides thread-safe methods for reading and writing counter data.","pos":[0,77]}]}],"pos":[776,1020],"yaml":true,"extradata":"MT"},{"content":"Decrements the counter value by 1.","nodes":[{"pos":[0,34],"content":"Decrements the counter value by 1.","nodes":[{"content":"Decrements the counter value by 1.","pos":[0,34]}]}],"pos":[2375,2410],"yaml":true},{"content":"This method safely decrements the counter value for multi-threaded applications.  \n  \n To decrement the counter value by a specific value, call the <xref:System.Diagnostics.PerformanceData.CounterData.IncrementBy%2A> method and set the `value` parameter to a negative number.  \n  \n To set the counter value, use the <xref:System.Diagnostics.PerformanceData.CounterData.Value%2A> property.","nodes":[{"pos":[0,80],"content":"This method safely decrements the counter value for multi-threaded applications.","nodes":[{"content":"This method safely decrements the counter value for multi-threaded applications.","pos":[0,80]}]},{"pos":[87,275],"content":"To decrement the counter value by a specific value, call the <ph id=\"ph1\">&lt;xref:System.Diagnostics.PerformanceData.CounterData.IncrementBy%2A&gt;</ph> method and set the <ph id=\"ph2\">`value`</ph> parameter to a negative number.","source":"To decrement the counter value by a specific value, call the <xref:System.Diagnostics.PerformanceData.CounterData.IncrementBy%2A> method and set the `value` parameter to a negative number."},{"pos":[282,388],"content":"To set the counter value, use the <xref:System.Diagnostics.PerformanceData.CounterData.Value%2A> property.","nodes":[{"content":"To set the counter value, use the <ph id=\"ph1\">&lt;xref:System.Diagnostics.PerformanceData.CounterData.Value%2A&gt;</ph> property.","pos":[0,106],"source":"To set the counter value, use the <xref:System.Diagnostics.PerformanceData.CounterData.Value%2A> property."}]}],"pos":[2421,2816],"yaml":true,"extradata":"MT"},{"content":"Increments the counter value by 1.","nodes":[{"pos":[0,34],"content":"Increments the counter value by 1.","nodes":[{"content":"Increments the counter value by 1.","pos":[0,34]}]}],"pos":[4044,4079],"yaml":true},{"content":"This method safely increments the counter value for multi-threaded applications.  \n  \n To set the counter value, use the <xref:System.Diagnostics.PerformanceData.CounterData.Value%2A> property.  \n  \n To increment the counter value by a specific value, call the <xref:System.Diagnostics.PerformanceData.CounterData.IncrementBy%2A> method.","nodes":[{"pos":[0,80],"content":"This method safely increments the counter value for multi-threaded applications.","nodes":[{"content":"This method safely increments the counter value for multi-threaded applications.","pos":[0,80]}]},{"pos":[87,193],"content":"To set the counter value, use the <xref:System.Diagnostics.PerformanceData.CounterData.Value%2A> property.","nodes":[{"content":"To set the counter value, use the <ph id=\"ph1\">&lt;xref:System.Diagnostics.PerformanceData.CounterData.Value%2A&gt;</ph> property.","pos":[0,106],"source":"To set the counter value, use the <xref:System.Diagnostics.PerformanceData.CounterData.Value%2A> property."}]},{"pos":[200,337],"content":"To increment the counter value by a specific value, call the <xref:System.Diagnostics.PerformanceData.CounterData.IncrementBy%2A> method.","nodes":[{"content":"To increment the counter value by a specific value, call the <ph id=\"ph1\">&lt;xref:System.Diagnostics.PerformanceData.CounterData.IncrementBy%2A&gt;</ph> method.","pos":[0,137],"source":"To increment the counter value by a specific value, call the <xref:System.Diagnostics.PerformanceData.CounterData.IncrementBy%2A> method."}]}],"pos":[4090,4434],"yaml":true,"extradata":"MT"},{"content":"Increments the counter value by the specified amount.","nodes":[{"pos":[0,53],"content":"Increments the counter value by the specified amount.","nodes":[{"content":"Increments the counter value by the specified amount.","pos":[0,53]}]}],"pos":[5731,5785],"yaml":true},{"content":"This method safely increments the counter value for multi-threaded applications.  \n  \n To set the counter value, use the <xref:System.Diagnostics.PerformanceData.CounterData.Value%2A> property.  \n  \n To increment the counter value by 1, call the <xref:System.Diagnostics.PerformanceData.CounterData.Increment%2A> method.","nodes":[{"pos":[0,80],"content":"This method safely increments the counter value for multi-threaded applications.","nodes":[{"content":"This method safely increments the counter value for multi-threaded applications.","pos":[0,80]}]},{"pos":[87,193],"content":"To set the counter value, use the <xref:System.Diagnostics.PerformanceData.CounterData.Value%2A> property.","nodes":[{"content":"To set the counter value, use the <ph id=\"ph1\">&lt;xref:System.Diagnostics.PerformanceData.CounterData.Value%2A&gt;</ph> property.","pos":[0,106],"source":"To set the counter value, use the <xref:System.Diagnostics.PerformanceData.CounterData.Value%2A> property."}]},{"pos":[200,320],"content":"To increment the counter value by 1, call the <xref:System.Diagnostics.PerformanceData.CounterData.Increment%2A> method.","nodes":[{"content":"To increment the counter value by 1, call the <ph id=\"ph1\">&lt;xref:System.Diagnostics.PerformanceData.CounterData.Increment%2A&gt;</ph> method.","pos":[0,120],"source":"To increment the counter value by 1, call the <xref:System.Diagnostics.PerformanceData.CounterData.Increment%2A> method."}]}],"pos":[5796,6123],"yaml":true,"extradata":"MT"},{"content":"The amount by which to increment the counter value. The increment value can be positive or negative.","nodes":[{"pos":[0,100],"content":"The amount by which to increment the counter value. The increment value can be positive or negative.","nodes":[{"content":"The amount by which to increment the counter value. The increment value can be positive or negative.","pos":[0,100],"nodes":[{"content":"The amount by which to increment the counter value.","pos":[0,51]},{"content":"The increment value can be positive or negative.","pos":[52,100]}]}]}],"pos":[6311,6412],"yaml":true},{"content":"Sets or gets the raw counter data.","nodes":[{"pos":[0,34],"content":"Sets or gets the raw counter data.","nodes":[{"content":"Sets or gets the raw counter data.","pos":[0,34]}]}],"pos":[7513,7548],"yaml":true},{"content":"This property is not thread safe and is appropriate only for single-threaded access. For multi-threaded access to the counter data, use the <xref:System.Diagnostics.PerformanceData.CounterData.Value%2A> property.","nodes":[{"pos":[0,212],"content":"This property is not thread safe and is appropriate only for single-threaded access. For multi-threaded access to the counter data, use the <xref:System.Diagnostics.PerformanceData.CounterData.Value%2A> property.","nodes":[{"content":"This property is not thread safe and is appropriate only for single-threaded access. For multi-threaded access to the counter data, use the <xref:System.Diagnostics.PerformanceData.CounterData.Value%2A> property.","pos":[0,212],"nodes":[{"content":"This property is not thread safe and is appropriate only for single-threaded access.","pos":[0,84]},{"content":"For multi-threaded access to the counter data, use the <ph id=\"ph1\">&lt;xref:System.Diagnostics.PerformanceData.CounterData.Value%2A&gt;</ph> property.","pos":[85,212],"source":" For multi-threaded access to the counter data, use the <xref:System.Diagnostics.PerformanceData.CounterData.Value%2A> property."}]}]}],"pos":[7559,7772],"yaml":true,"extradata":"MT"},{"content":"The raw counter data.","nodes":[{"pos":[0,21],"content":"The raw counter data.","nodes":[{"content":"The raw counter data.","pos":[0,21]}]}],"pos":[7989,8011],"yaml":true},{"content":"Sets or gets the counter data.","nodes":[{"pos":[0,30],"content":"Sets or gets the counter data.","nodes":[{"content":"Sets or gets the counter data.","pos":[0,30]}]}],"pos":[9139,9170],"yaml":true},{"content":"This property provides safe access to the counter data for multi-threaded applications. If performance is of primary concern, use the <xref:System.Diagnostics.PerformanceData.CounterData.RawValue%2A> property; however, the <xref:System.Diagnostics.PerformanceData.CounterData.RawValue%2A> property is not thread safe.  \n  \n Note that the <xref:System.Diagnostics.PerformanceData.CounterData.Value%2A> property is not thread safe in .NET Framework 3.5.  \n  \n To increment the counter value, consider using the <xref:System.Diagnostics.PerformanceData.CounterData.Increment%2A> or <xref:System.Diagnostics.PerformanceData.CounterData.IncrementBy%2A> method.","nodes":[{"pos":[0,317],"content":"This property provides safe access to the counter data for multi-threaded applications. If performance is of primary concern, use the <xref:System.Diagnostics.PerformanceData.CounterData.RawValue%2A> property; however, the <xref:System.Diagnostics.PerformanceData.CounterData.RawValue%2A> property is not thread safe.","nodes":[{"content":"This property provides safe access to the counter data for multi-threaded applications. If performance is of primary concern, use the <xref:System.Diagnostics.PerformanceData.CounterData.RawValue%2A> property; however, the <xref:System.Diagnostics.PerformanceData.CounterData.RawValue%2A> property is not thread safe.","pos":[0,317],"nodes":[{"content":"This property provides safe access to the counter data for multi-threaded applications.","pos":[0,87]},{"content":"If performance is of primary concern, use the <ph id=\"ph1\">&lt;xref:System.Diagnostics.PerformanceData.CounterData.RawValue%2A&gt;</ph> property; however, the <ph id=\"ph2\">&lt;xref:System.Diagnostics.PerformanceData.CounterData.RawValue%2A&gt;</ph> property is not thread safe.","pos":[88,317],"source":" If performance is of primary concern, use the <xref:System.Diagnostics.PerformanceData.CounterData.RawValue%2A> property; however, the <xref:System.Diagnostics.PerformanceData.CounterData.RawValue%2A> property is not thread safe."}]}]},{"pos":[324,451],"content":"Note that the <xref:System.Diagnostics.PerformanceData.CounterData.Value%2A> property is not thread safe in .NET Framework 3.5.","nodes":[{"content":"Note that the <ph id=\"ph1\">&lt;xref:System.Diagnostics.PerformanceData.CounterData.Value%2A&gt;</ph> property is not thread safe in .NET Framework 3.5.","pos":[0,127],"source":"Note that the <xref:System.Diagnostics.PerformanceData.CounterData.Value%2A> property is not thread safe in .NET Framework 3.5."}]},{"pos":[458,655],"content":"To increment the counter value, consider using the <xref:System.Diagnostics.PerformanceData.CounterData.Increment%2A> or <xref:System.Diagnostics.PerformanceData.CounterData.IncrementBy%2A> method.","nodes":[{"content":"To increment the counter value, consider using the <ph id=\"ph1\">&lt;xref:System.Diagnostics.PerformanceData.CounterData.Increment%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Diagnostics.PerformanceData.CounterData.IncrementBy%2A&gt;</ph> method.","pos":[0,197],"source":"To increment the counter value, consider using the <xref:System.Diagnostics.PerformanceData.CounterData.Increment%2A> or <xref:System.Diagnostics.PerformanceData.CounterData.IncrementBy%2A> method."}]}],"pos":[9181,9843],"yaml":true,"extradata":"MT"},{"content":"The counter data.","nodes":[{"pos":[0,17],"content":"The counter data.","nodes":[{"content":"The counter data.","pos":[0,17]}]}],"pos":[10135,10153],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Diagnostics.PerformanceData.CounterData\n  commentId: T:System.Diagnostics.PerformanceData.CounterData\n  id: CounterData\n  children:\n  - System.Diagnostics.PerformanceData.CounterData.Decrement\n  - System.Diagnostics.PerformanceData.CounterData.Increment\n  - System.Diagnostics.PerformanceData.CounterData.IncrementBy(System.Int64)\n  - System.Diagnostics.PerformanceData.CounterData.RawValue\n  - System.Diagnostics.PerformanceData.CounterData.Value\n  langs:\n  - csharp\n  name: CounterData\n  nameWithType: CounterData\n  fullName: System.Diagnostics.PerformanceData.CounterData\n  type: Class\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.PerformanceData\n  summary: Contains the raw data for a counter.\n  remarks: \"The <xref:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet.Item%2A?displayProperty=fullName> property returns an instance of this class.  \\n  \\n This class provides thread-safe methods for reading and writing counter data.\"\n  syntax:\n    content: public sealed class CounterData\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.PerformanceData/CounterData.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: jgalasyn\n  manager: ghogen\n- uid: System.Diagnostics.PerformanceData.CounterData.Decrement\n  commentId: M:System.Diagnostics.PerformanceData.CounterData.Decrement\n  id: Decrement\n  parent: System.Diagnostics.PerformanceData.CounterData\n  langs:\n  - csharp\n  name: Decrement()\n  nameWithType: CounterData.Decrement()\n  fullName: CounterData.Decrement()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.PerformanceData\n  summary: Decrements the counter value by 1.\n  remarks: \"This method safely decrements the counter value for multi-threaded applications.  \\n  \\n To decrement the counter value by a specific value, call the <xref:System.Diagnostics.PerformanceData.CounterData.IncrementBy%2A> method and set the `value` parameter to a negative number.  \\n  \\n To set the counter value, use the <xref:System.Diagnostics.PerformanceData.CounterData.Value%2A> property.\"\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public void Decrement ();\n    parameters: []\n  overload: System.Diagnostics.PerformanceData.CounterData.Decrement*\n  exceptions: []\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.PerformanceData/CounterData.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: jgalasyn\n  manager: ghogen\n- uid: System.Diagnostics.PerformanceData.CounterData.Increment\n  commentId: M:System.Diagnostics.PerformanceData.CounterData.Increment\n  id: Increment\n  parent: System.Diagnostics.PerformanceData.CounterData\n  langs:\n  - csharp\n  name: Increment()\n  nameWithType: CounterData.Increment()\n  fullName: CounterData.Increment()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.PerformanceData\n  summary: Increments the counter value by 1.\n  remarks: \"This method safely increments the counter value for multi-threaded applications.  \\n  \\n To set the counter value, use the <xref:System.Diagnostics.PerformanceData.CounterData.Value%2A> property.  \\n  \\n To increment the counter value by a specific value, call the <xref:System.Diagnostics.PerformanceData.CounterData.IncrementBy%2A> method.\"\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public void Increment ();\n    parameters: []\n  overload: System.Diagnostics.PerformanceData.CounterData.Increment*\n  exceptions: []\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.PerformanceData/CounterData.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: jgalasyn\n  manager: ghogen\n- uid: System.Diagnostics.PerformanceData.CounterData.IncrementBy(System.Int64)\n  commentId: M:System.Diagnostics.PerformanceData.CounterData.IncrementBy(System.Int64)\n  id: IncrementBy(System.Int64)\n  parent: System.Diagnostics.PerformanceData.CounterData\n  langs:\n  - csharp\n  name: IncrementBy(Int64)\n  nameWithType: CounterData.IncrementBy(Int64)\n  fullName: CounterData.IncrementBy(Int64)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.PerformanceData\n  summary: Increments the counter value by the specified amount.\n  remarks: \"This method safely increments the counter value for multi-threaded applications.  \\n  \\n To set the counter value, use the <xref:System.Diagnostics.PerformanceData.CounterData.Value%2A> property.  \\n  \\n To increment the counter value by 1, call the <xref:System.Diagnostics.PerformanceData.CounterData.Increment%2A> method.\"\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public void IncrementBy (long value);\n    parameters:\n    - id: value\n      type: System.Int64\n      description: The amount by which to increment the counter value. The increment value can be positive or negative.\n  overload: System.Diagnostics.PerformanceData.CounterData.IncrementBy*\n  exceptions: []\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.PerformanceData/CounterData.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: jgalasyn\n  manager: ghogen\n- uid: System.Diagnostics.PerformanceData.CounterData.RawValue\n  commentId: P:System.Diagnostics.PerformanceData.CounterData.RawValue\n  id: RawValue\n  parent: System.Diagnostics.PerformanceData.CounterData\n  langs:\n  - csharp\n  name: RawValue\n  nameWithType: CounterData.RawValue\n  fullName: CounterData.RawValue\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.PerformanceData\n  summary: Sets or gets the raw counter data.\n  remarks: This property is not thread safe and is appropriate only for single-threaded access. For multi-threaded access to the counter data, use the <xref:System.Diagnostics.PerformanceData.CounterData.Value%2A> property.\n  syntax:\n    content: >-\n      [get: System.Security.SecurityCritical]\n\n      [set: System.Security.SecurityCritical]\n\n      public long RawValue { get; set; }\n    return:\n      type: System.Int64\n      description: The raw counter data.\n  overload: System.Diagnostics.PerformanceData.CounterData.RawValue*\n  exceptions: []\n  attributes:\n  - type: 'get: System.Security.SecurityCritical'\n  - type: 'set: System.Security.SecurityCritical'\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.PerformanceData/CounterData.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: jgalasyn\n  manager: ghogen\n- uid: System.Diagnostics.PerformanceData.CounterData.Value\n  commentId: P:System.Diagnostics.PerformanceData.CounterData.Value\n  id: Value\n  parent: System.Diagnostics.PerformanceData.CounterData\n  langs:\n  - csharp\n  name: Value\n  nameWithType: CounterData.Value\n  fullName: CounterData.Value\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.PerformanceData\n  summary: Sets or gets the counter data.\n  remarks: \"This property provides safe access to the counter data for multi-threaded applications. If performance is of primary concern, use the <xref:System.Diagnostics.PerformanceData.CounterData.RawValue%2A> property; however, the <xref:System.Diagnostics.PerformanceData.CounterData.RawValue%2A> property is not thread safe.  \\n  \\n Note that the <xref:System.Diagnostics.PerformanceData.CounterData.Value%2A> property is not thread safe in .NET Framework 3.5.  \\n  \\n To increment the counter value, consider using the <xref:System.Diagnostics.PerformanceData.CounterData.Increment%2A> or <xref:System.Diagnostics.PerformanceData.CounterData.IncrementBy%2A> method.\"\n  example:\n  - For an example, see <xref:System.Diagnostics.PerformanceData>.\n  syntax:\n    content: >-\n      [get: System.Security.SecurityCritical]\n\n      [set: System.Security.SecurityCritical]\n\n      public long Value { get; set; }\n    return:\n      type: System.Int64\n      description: The counter data.\n  overload: System.Diagnostics.PerformanceData.CounterData.Value*\n  exceptions: []\n  attributes:\n  - type: 'get: System.Security.SecurityCritical'\n  - type: 'set: System.Security.SecurityCritical'\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.PerformanceData/CounterData.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: jgalasyn\n  manager: ghogen\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Diagnostics.PerformanceData.CounterData.Decrement\n  parent: System.Diagnostics.PerformanceData.CounterData\n  isExternal: false\n  name: Decrement()\n  nameWithType: CounterData.Decrement()\n  fullName: CounterData.Decrement()\n- uid: System.Diagnostics.PerformanceData.CounterData.Increment\n  parent: System.Diagnostics.PerformanceData.CounterData\n  isExternal: false\n  name: Increment()\n  nameWithType: CounterData.Increment()\n  fullName: CounterData.Increment()\n- uid: System.Diagnostics.PerformanceData.CounterData.IncrementBy(System.Int64)\n  parent: System.Diagnostics.PerformanceData.CounterData\n  isExternal: false\n  name: IncrementBy(Int64)\n  nameWithType: CounterData.IncrementBy(Int64)\n  fullName: CounterData.IncrementBy(Int64)\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.Diagnostics.PerformanceData.CounterData.RawValue\n  parent: System.Diagnostics.PerformanceData.CounterData\n  isExternal: false\n  name: RawValue\n  nameWithType: CounterData.RawValue\n  fullName: CounterData.RawValue\n- uid: System.Diagnostics.PerformanceData.CounterData.Value\n  parent: System.Diagnostics.PerformanceData.CounterData\n  isExternal: false\n  name: Value\n  nameWithType: CounterData.Value\n  fullName: CounterData.Value\n- uid: System.Diagnostics.PerformanceData.CounterData.Decrement*\n  parent: System.Diagnostics.PerformanceData.CounterData\n  isExternal: false\n  name: Decrement\n  nameWithType: CounterData.Decrement\n  fullName: CounterData.Decrement\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.PerformanceData/CounterData.xml\n- uid: System.Diagnostics.PerformanceData.CounterData.Increment*\n  parent: System.Diagnostics.PerformanceData.CounterData\n  isExternal: false\n  name: Increment\n  nameWithType: CounterData.Increment\n  fullName: CounterData.Increment\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.PerformanceData/CounterData.xml\n- uid: System.Diagnostics.PerformanceData.CounterData.IncrementBy*\n  parent: System.Diagnostics.PerformanceData.CounterData\n  isExternal: false\n  name: IncrementBy\n  nameWithType: CounterData.IncrementBy\n  fullName: CounterData.IncrementBy\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.PerformanceData/CounterData.xml\n- uid: System.Diagnostics.PerformanceData.CounterData.RawValue*\n  parent: System.Diagnostics.PerformanceData.CounterData\n  isExternal: false\n  name: RawValue\n  nameWithType: CounterData.RawValue\n  fullName: CounterData.RawValue\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.PerformanceData/CounterData.xml\n- uid: System.Diagnostics.PerformanceData.CounterData.Value*\n  parent: System.Diagnostics.PerformanceData.CounterData\n  isExternal: false\n  name: Value\n  nameWithType: CounterData.Value\n  fullName: CounterData.Value\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.PerformanceData/CounterData.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}