### YamlMime:ManagedReference
items:
- uid: System.Security.Principal.WindowsPrincipal
  commentId: T:System.Security.Principal.WindowsPrincipal
  id: WindowsPrincipal
  children:
  - System.Security.Principal.WindowsPrincipal.#ctor(System.Security.Principal.WindowsIdentity)
  - System.Security.Principal.WindowsPrincipal.DeviceClaims
  - System.Security.Principal.WindowsPrincipal.Identity
  - System.Security.Principal.WindowsPrincipal.IsInRole(System.Int32)
  - System.Security.Principal.WindowsPrincipal.IsInRole(System.Security.Principal.SecurityIdentifier)
  - System.Security.Principal.WindowsPrincipal.IsInRole(System.Security.Principal.WindowsBuiltInRole)
  - System.Security.Principal.WindowsPrincipal.IsInRole(System.String)
  - System.Security.Principal.WindowsPrincipal.UserClaims
  langs:
  - csharp
  name: WindowsPrincipal
  nameWithType: WindowsPrincipal
  fullName: System.Security.Principal.WindowsPrincipal
  type: Class
  assemblies:
  - System.Security.Principal.Windows
  - mscorlib
  namespace: System.Security.Principal
  summary: Enables code to check the Windows group membership of a Windows user.
  remarks: The <xref:System.Security.Principal.WindowsPrincipal> class is primarily used to check the role of a Windows user. The <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A?displayProperty=fullName> method overloads let you check the user role by using different role contexts.
  example:
  - "The following example demonstrates how to use the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method overloads. The <xref:System.Security.Principal.WindowsBuiltInRole> enumeration is used as the source for the relative identifiers (RIDs) that identify the built-in roles. The RIDs are used to determine the roles of the current principal.  \n  \n [!code-cpp[System.Security.Principal.WindowsBuiltInRole Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Principal.WindowsBuiltInRole Example/CPP/source.cpp#1)]\n [!code-csharp[System.Security.Principal.WindowsBuiltInRole Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Principal.WindowsBuiltInRole Example/CS/source.cs#1)]\n [!code-vb[System.Security.Principal.WindowsBuiltInRole Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Principal.WindowsBuiltInRole Example/VB/source.vb#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class WindowsPrincipal : System.Security.Claims.ClaimsPrincipal
  inheritance:
  - System.Object
  - System.Security.Claims.ClaimsPrincipal
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  - System.Security.Claims.ClaimsPrincipal.AddIdentities(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})
  - System.Security.Claims.ClaimsPrincipal.AddIdentity(System.Security.Claims.ClaimsIdentity)
  - System.Security.Claims.ClaimsPrincipal.Claims
  - System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector
  - System.Security.Claims.ClaimsPrincipal.Clone
  - System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity(System.IO.BinaryReader)
  - System.Security.Claims.ClaimsPrincipal.Current
  - System.Security.Claims.ClaimsPrincipal.CustomSerializationData
  - System.Security.Claims.ClaimsPrincipal.FindAll(System.Predicate{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsPrincipal.FindAll(System.String)
  - System.Security.Claims.ClaimsPrincipal.FindFirst(System.Predicate{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsPrincipal.FindFirst(System.String)
  - System.Security.Claims.ClaimsPrincipal.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Security.Claims.ClaimsPrincipal.HasClaim(System.Predicate{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsPrincipal.HasClaim(System.String,System.String)
  - System.Security.Claims.ClaimsPrincipal.Identities
  - System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector
  - System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter)
  - System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter,System.Byte[])
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Principal/WindowsPrincipal.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Principal.WindowsPrincipal.#ctor(System.Security.Principal.WindowsIdentity)
  commentId: M:System.Security.Principal.WindowsPrincipal.#ctor(System.Security.Principal.WindowsIdentity)
  id: '#ctor(System.Security.Principal.WindowsIdentity)'
  parent: System.Security.Principal.WindowsPrincipal
  langs:
  - csharp
  name: WindowsPrincipal(WindowsIdentity)
  nameWithType: WindowsPrincipal.WindowsPrincipal(WindowsIdentity)
  fullName: WindowsPrincipal.WindowsPrincipal(WindowsIdentity)
  type: Constructor
  assemblies:
  - System.Security.Principal.Windows
  - mscorlib
  namespace: System.Security.Principal
  summary: Initializes a new instance of the <xref href="System.Security.Principal.WindowsPrincipal"></xref> class by using the specified <xref href="System.Security.Principal.WindowsIdentity"></xref> object.
  remarks: ''
  example:
  - "The following example creates a new <xref:System.Security.Principal.WindowsPrincipal> object from the current <xref:System.Security.Principal.WindowsIdentity> object.  \n  \n [!code-cpp[Classic WindowsPrincipal.WindowsPrincipal Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic WindowsPrincipal.WindowsPrincipal Example/CPP/source.cpp#1)]\n [!code-csharp[Classic WindowsPrincipal.WindowsPrincipal Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic WindowsPrincipal.WindowsPrincipal Example/CS/source.cs#1)]\n [!code-vb[Classic WindowsPrincipal.WindowsPrincipal Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic WindowsPrincipal.WindowsPrincipal Example/VB/source.vb#1)]"
  syntax:
    content: public WindowsPrincipal (System.Security.Principal.WindowsIdentity ntIdentity);
    parameters:
    - id: ntIdentity
      type: System.Security.Principal.WindowsIdentity
      description: The object from which to construct the new instance of <xref href="System.Security.Principal.WindowsPrincipal"></xref>.
  overload: System.Security.Principal.WindowsPrincipal.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>ntIdentity</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Principal/WindowsPrincipal.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Principal.WindowsPrincipal.DeviceClaims
  commentId: P:System.Security.Principal.WindowsPrincipal.DeviceClaims
  id: DeviceClaims
  parent: System.Security.Principal.WindowsPrincipal
  langs:
  - csharp
  name: DeviceClaims
  nameWithType: WindowsPrincipal.DeviceClaims
  fullName: WindowsPrincipal.DeviceClaims
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: Gets all Windows device claims from this principal.
  syntax:
    content: >-
      [get: System.Runtime.CompilerServices.IteratorStateMachine(typeof(System.Security.Principal.WindowsPrincipal/<get_DeviceClaims>d__13))]

      public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> DeviceClaims { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: A collection of all Windows device claims from this principal.
  overload: System.Security.Principal.WindowsPrincipal.DeviceClaims*
  exceptions: []
  attributes:
  - type: 'get: System.Runtime.CompilerServices.IteratorStateMachine'
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Principal/WindowsPrincipal.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Principal.WindowsPrincipal.Identity
  commentId: P:System.Security.Principal.WindowsPrincipal.Identity
  id: Identity
  parent: System.Security.Principal.WindowsPrincipal
  langs:
  - csharp
  name: Identity
  nameWithType: WindowsPrincipal.Identity
  fullName: WindowsPrincipal.Identity
  type: Property
  assemblies:
  - System.Security.Principal.Windows
  - mscorlib
  namespace: System.Security.Principal
  summary: Gets the identity of the current principal.
  remarks: ''
  example:
  - "The following example retrieves the name of the user by using the <xref:System.Security.Principal.WindowsPrincipal.Identity%2A> property of the <xref:System.Security.Principal.WindowsPrincipal> object.  \n  \n [!code-cpp[Classic WindowsPrincipal.Identity Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic WindowsPrincipal.Identity Example/CPP/source.cpp#1)]\n [!code-csharp[Classic WindowsPrincipal.Identity Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic WindowsPrincipal.Identity Example/CS/source.cs#1)]\n [!code-vb[Classic WindowsPrincipal.Identity Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic WindowsPrincipal.Identity Example/VB/source.vb#1)]"
  syntax:
    content: public override System.Security.Principal.IIdentity Identity { get; }
    return:
      type: System.Security.Principal.IIdentity
      description: The <xref href="System.Security.Principal.WindowsIdentity"></xref> object of the current principal.
  overload: System.Security.Principal.WindowsPrincipal.Identity*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Principal/WindowsPrincipal.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Principal.WindowsPrincipal.IsInRole(System.Int32)
  commentId: M:System.Security.Principal.WindowsPrincipal.IsInRole(System.Int32)
  id: IsInRole(System.Int32)
  parent: System.Security.Principal.WindowsPrincipal
  langs:
  - csharp
  name: IsInRole(Int32)
  nameWithType: WindowsPrincipal.IsInRole(Int32)
  fullName: WindowsPrincipal.IsInRole(Int32)
  type: Method
  assemblies:
  - System.Security.Principal.Windows
  - mscorlib
  namespace: System.Security.Principal
  summary: Determines whether the current principal belongs to the Windows user group with the specified relative identifier (RID).
  remarks: "When testing for newly created role information, such as a new user or a new group, it is important to log out and log in to force the propagation of role information within the domain. Not doing so can cause the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> test to return `false`. This method is not supported on Windows 98 or Windows Millennium Edition.  \n  \n For performance reasons, the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%28System.Security.Principal.SecurityIdentifier%29> overload is recommended as the preferable overload for determining the user's role.  \n  \n> [!NOTE]\n>  In Windows Vista, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. When you attempt to perform a task that requires administrative privileges, you can dynamically elevate your role by using the Consent dialog box. The code that executes the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method does not display the Consent dialog box. The code returns false if you are in the standard user role, even if you are in the Built-in Administrators group. You can elevate your privileges before you execute the code by right-clicking the application icon and indicating that you want to run as an administrator.  \n  \n Relative identifiers (RIDs) are components of a Windows user group's security identifier (SID) and are supported to help prevent cross-platform localization issues. Many user accounts, local groups, and global groups have a default RID value that is constant across all versions of Windows.  \n  \n For example, the RID for the BUILTIN\\Administrators role is 0x220. Using 0x220 as the input parameter for the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method results in `true` being returned if the current principal is an administrator.  \n  \n The following tables list the default RID values.  \n  \n|Built-in users|RID|  \n|---------------------|---------|  \n|DOMAINNAME\\Administrator|0x1F4|  \n|DOMAINNAME\\Guest|0x1F5|  \n  \n|Built-in global groups|RID|  \n|-----------------------------|---------|  \n|DOMAINNAME\\Domain Admins|0x200|  \n|DOMAINNAME\\Domain Users|0x201|  \n|DOMAINNAME\\Domain Guests|0x202|  \n  \n|Built-in local groups|RID|  \n|----------------------------|---------|  \n|BUILTIN\\Administrators|0x220|  \n|BUILTIN\\Users|0x221|  \n|BUILTIN\\Guests|0x222|  \n|BUILTIN\\Account Operators|0x224|  \n|BUILTIN\\Server Operators|0x225|  \n|BUILTIN\\Print Operators|0x226|  \n|BUILTIN\\Backup Operators|0x227|  \n|BUILTIN\\Replicator|0x228|"
  example:
  - "The following code example demonstrates the use of  the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> methods. The <xref:System.Security.Principal.WindowsBuiltInRole> enumeration is used as the source for the RIDs that identify the built-in roles. The RIDs are used to determine the roles of the current principal.  \n  \n [!code-cpp[System.Security.Principal.WindowsBuiltInRole Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Principal.WindowsBuiltInRole Example/CPP/source.cpp#1)]\n [!code-csharp[System.Security.Principal.WindowsBuiltInRole Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Principal.WindowsBuiltInRole Example/CS/source.cs#1)]\n [!code-vb[System.Security.Principal.WindowsBuiltInRole Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Principal.WindowsBuiltInRole Example/VB/source.vb#1)]"
  syntax:
    content: public virtual bool IsInRole (int rid);
    parameters:
    - id: rid
      type: System.Int32
      description: The RID of the Windows user group in which to check for the principal’s membership status.
    return:
      type: System.Boolean
      description: '`true` if the current principal is a member of the specified Windows user group, that is, in a particular role; otherwise, `false`.'
  overload: System.Security.Principal.WindowsPrincipal.IsInRole*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Principal/WindowsPrincipal.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Principal.WindowsPrincipal.IsInRole(System.Security.Principal.SecurityIdentifier)
  commentId: M:System.Security.Principal.WindowsPrincipal.IsInRole(System.Security.Principal.SecurityIdentifier)
  id: IsInRole(System.Security.Principal.SecurityIdentifier)
  parent: System.Security.Principal.WindowsPrincipal
  langs:
  - csharp
  name: IsInRole(SecurityIdentifier)
  nameWithType: WindowsPrincipal.IsInRole(SecurityIdentifier)
  fullName: WindowsPrincipal.IsInRole(SecurityIdentifier)
  type: Method
  assemblies:
  - System.Security.Principal.Windows
  - mscorlib
  namespace: System.Security.Principal
  summary: Determines whether the current principal belongs to the Windows user group with the specified security identifier (SID).
  remarks: "The <xref:System.Security.Principal.SecurityIdentifier> uniquely identifies a user or group on Windows 2000, Windows Server, and Windows XP implementations. When testing for newly created role information, such as a new user or a new group, it is important to log out and log in to force the propagation of role information within the domain. Not doing so can cause the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> test to return `false`. This method is not supported on Windows 98 or Windows Millennium Edition.  \n  \n> [!NOTE]\n>  In Windows Vista, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. When you attempt to perform a task that requires administrative privileges, you can dynamically elevate your role by using the Consent dialog box. The code that executes the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method does not display the Consent dialog box. The code returns false if you are in the standard user role, even if you are in the Built-in Administrators group. You can elevate your privileges before you execute the code by right-clicking the application icon and indicating that you want to run as an administrator.  \n  \n For performance reasons, this is the preferable overload to determine a user's role."
  example:
  - "The following code example demonstrates the use of the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%28System.Security.Principal.SecurityIdentifier%29?displayProperty=fullName> method. The <xref:System.Security.Principal.WellKnownSidType.BuiltinAdministratorsSid> enumeration value is used to determine whether the current principal is an administrator. For the full code example, see the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%28System.Int32%29?displayProperty=fullName> method.  \n  \n [!code-csharp[System.Security.Principal.WindowsBuiltInRole Example#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Principal.WindowsBuiltInRole Example/CS/source.cs#5)]\n [!code-vb[System.Security.Principal.WindowsBuiltInRole Example#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Principal.WindowsBuiltInRole Example/VB/source.vb#5)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public virtual bool IsInRole (System.Security.Principal.SecurityIdentifier sid);
    parameters:
    - id: sid
      type: System.Security.Principal.SecurityIdentifier
      description: A <xref href="System.Security.Principal.SecurityIdentifier"></xref> that uniquely identifies a Windows user group.
    return:
      type: System.Boolean
      description: '`true` if the current principal is a member of the specified Windows user group; otherwise, `false`.'
  overload: System.Security.Principal.WindowsPrincipal.IsInRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>sid</code> is `null`.
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: Windows returned a Win32 error.
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Principal/WindowsPrincipal.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Principal.WindowsPrincipal.IsInRole(System.Security.Principal.WindowsBuiltInRole)
  commentId: M:System.Security.Principal.WindowsPrincipal.IsInRole(System.Security.Principal.WindowsBuiltInRole)
  id: IsInRole(System.Security.Principal.WindowsBuiltInRole)
  parent: System.Security.Principal.WindowsPrincipal
  langs:
  - csharp
  name: IsInRole(WindowsBuiltInRole)
  nameWithType: WindowsPrincipal.IsInRole(WindowsBuiltInRole)
  fullName: WindowsPrincipal.IsInRole(WindowsBuiltInRole)
  type: Method
  assemblies:
  - System.Security.Principal.Windows
  - mscorlib
  namespace: System.Security.Principal
  summary: Determines whether the current principal belongs to the Windows user group with the specified <xref href="System.Security.Principal.WindowsBuiltInRole"></xref>.
  remarks: "When testing for newly created role information, such as a new user or a new group, it is important to log out and log in to force the propagation of role information within the domain. Not doing so can cause the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> test to return `false`. This method is not supported on Windows 98 or Windows Millennium Edition.  \n  \n For performance reasons, the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%28System.Security.Principal.SecurityIdentifier%29> overload is recommended as the preferable overload for determining the user's role.  \n  \n> [!NOTE]\n>  In Windows Vista, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. When you attempt to perform a task that requires administrative privileges, you can dynamically elevate your role by using the Consent dialog box. The code that executes the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method does not display the Consent dialog box. The code returns false if you are in the standard user role, even if you are in the Built-in Administrators group. You can elevate your privileges before you execute the code by right-clicking the application icon and indicating that you want to run as an administrator."
  example:
  - "The following example uses the <xref:System.Security.Principal.WindowsBuiltInRole> enumeration is used to determine whether the current principal is an <xref:System.Security.Principal.WindowsBuiltInRole.Administrator>. For the full code example, see the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%28System.Int32%29?displayProperty=fullName> method.  \n  \n [!code-csharp[System.Security.Principal.WindowsBuiltInRole Example#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Principal.WindowsBuiltInRole Example/CS/source.cs#4)]\n [!code-vb[System.Security.Principal.WindowsBuiltInRole Example#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Principal.WindowsBuiltInRole Example/VB/source.vb#4)]"
  syntax:
    content: public virtual bool IsInRole (System.Security.Principal.WindowsBuiltInRole role);
    parameters:
    - id: role
      type: System.Security.Principal.WindowsBuiltInRole
      description: One of the <xref href="System.Security.Principal.WindowsBuiltInRole"></xref> values.
    return:
      type: System.Boolean
      description: '`true` if the current principal is a member of the specified Windows user group; otherwise, `false`.'
  overload: System.Security.Principal.WindowsPrincipal.IsInRole*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>role</code> is not a valid <xref href="System.Security.Principal.WindowsBuiltInRole"></xref> value.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Principal/WindowsPrincipal.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Principal.WindowsPrincipal.IsInRole(System.String)
  commentId: M:System.Security.Principal.WindowsPrincipal.IsInRole(System.String)
  id: IsInRole(System.String)
  parent: System.Security.Principal.WindowsPrincipal
  langs:
  - csharp
  name: IsInRole(String)
  nameWithType: WindowsPrincipal.IsInRole(String)
  fullName: WindowsPrincipal.IsInRole(String)
  type: Method
  assemblies:
  - System.Security.Principal.Windows
  - mscorlib
  namespace: System.Security.Principal
  summary: Determines whether the current principal belongs to the Windows user group with the specified name.
  remarks: "When testing for newly created role information, such as a new user or a new group, it is important to log out and log in to force the propagation of role information within the domain. Not doing so can cause the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> test to return `false`. This method is not supported on Windows 98 or Windows Millennium Edition.  \n  \n For performance reasons, the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%28System.Security.Principal.SecurityIdentifier%29> overload is recommended as the preferable overload for determining the user's role.  \n  \n> [!NOTE]\n>  In Windows Vista, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. When you attempt to perform a task that requires administrative privileges, you can dynamically elevate your role by using the Consent dialog box. The code that executes the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method does not display the Consent dialog box. The code returns false if you are in the standard user role, even if you are in the Built-in Administrators group. You can elevate your privileges before you execute the code by right-clicking the application icon and indicating that you want to run as an administrator.  \n  \n For built-in roles, the `role` string should be in the form \"BUILTIN\\\\*RoleNameHere*\". For example, to test for membership in the Windows administrator role, the string representing the role should be \"BUILTIN\\Administrators\". Note that the backslash might need to be escaped. The following table lists the built-in roles.  \n  \n> [!NOTE]\n>  The spelling for the BUILTIN roles in string format differs from the spelling used in the <xref:System.Security.Principal.WindowsBuiltInRole> enumeration. For example, the spelling for an administrator in the enumeration is \"Administrator\", not \"Administrators\". When using this overload, use the spelling for the role from the following table.  \n  \n|Built-in local groups|  \n|----------------------------|  \n|BUILTIN\\Administrators|  \n|BUILTIN\\Users|  \n|BUILTIN\\Guests|  \n|BUILTIN\\Account Operators|  \n|BUILTIN\\Server Operators|  \n|BUILTIN\\Print Operators|  \n|BUILTIN\\Backup Operators|  \n|BUILTIN\\Replicator|  \n  \n For machine-specific roles, the `role` string should be in the form \"MachineName\\\\*RoleNameHere*\".  \n  \n For domain-specific roles, the `role` string should be in the form \"DomainName\\\\*RoleNameHere*\"; for example, `\"SomeDomain\\Domain Users`\".  \n  \n> [!NOTE]\n>  In the .NET Framework version 1.0, the `role` parameter is case-sensitive. In the .NET Framework version 1.1 and later, the `role` parameter is case-insensitive."
  example:
  - "The following code example demonstrates the use of the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%28System.String%29?displayProperty=fullName> method.  \n  \n The strings `BUILTIN\\Administrators` and `BUILTIN\\Users` are used to determine whether the current principal is an administrator or a user. For the full code example, see the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%28System.Int32%29?displayProperty=fullName> method.  \n  \n [!code-csharp[System.Security.Principal.WindowsBuiltInRole Example#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Principal.WindowsBuiltInRole Example/CS/source.cs#3)]\n [!code-vb[System.Security.Principal.WindowsBuiltInRole Example#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Principal.WindowsBuiltInRole Example/VB/source.vb#3)]"
  syntax:
    content: public override bool IsInRole (string role);
    parameters:
    - id: role
      type: System.String
      description: The name of the Windows user group for which to check membership.
    return:
      type: System.Boolean
      description: '`true` if the current principal is a member of the specified Windows user group; otherwise, `false`.'
  overload: System.Security.Principal.WindowsPrincipal.IsInRole*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Principal/WindowsPrincipal.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Principal.WindowsPrincipal.UserClaims
  commentId: P:System.Security.Principal.WindowsPrincipal.UserClaims
  id: UserClaims
  parent: System.Security.Principal.WindowsPrincipal
  langs:
  - csharp
  name: UserClaims
  nameWithType: WindowsPrincipal.UserClaims
  fullName: WindowsPrincipal.UserClaims
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: Gets all Windows user claims from this principal.
  syntax:
    content: >-
      [get: System.Runtime.CompilerServices.IteratorStateMachine(typeof(System.Security.Principal.WindowsPrincipal/<get_UserClaims>d__11))]

      public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> UserClaims { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: A collection of all Windows user claims from this principal.
  overload: System.Security.Principal.WindowsPrincipal.UserClaims*
  exceptions: []
  attributes:
  - type: 'get: System.Runtime.CompilerServices.IteratorStateMachine'
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Principal/WindowsPrincipal.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
references:
- uid: System.Security.Claims.ClaimsPrincipal
  parent: System.Security.Claims
  isExternal: false
  name: ClaimsPrincipal
  nameWithType: ClaimsPrincipal
  fullName: System.Security.Claims.ClaimsPrincipal
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Security.SecurityException
  parent: System.Security
  isExternal: false
  name: SecurityException
  nameWithType: SecurityException
  fullName: System.Security.SecurityException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.Security.Principal.WindowsPrincipal.#ctor(System.Security.Principal.WindowsIdentity)
  parent: System.Security.Principal.WindowsPrincipal
  isExternal: false
  name: WindowsPrincipal(WindowsIdentity)
  nameWithType: WindowsPrincipal.WindowsPrincipal(WindowsIdentity)
  fullName: WindowsPrincipal.WindowsPrincipal(WindowsIdentity)
- uid: System.Security.Principal.WindowsIdentity
  parent: System.Security.Principal
  isExternal: false
  name: WindowsIdentity
  nameWithType: WindowsIdentity
  fullName: System.Security.Principal.WindowsIdentity
- uid: System.Security.Principal.WindowsPrincipal.DeviceClaims
  parent: System.Security.Principal.WindowsPrincipal
  isExternal: false
  name: DeviceClaims
  nameWithType: WindowsPrincipal.DeviceClaims
  fullName: WindowsPrincipal.DeviceClaims
- uid: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
- uid: System.Security.Claims.Claim
  name: Claim
  nameWithType: Claim
  fullName: System.Security.Claims.Claim
- uid: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<Claim>
  nameWithType: IEnumerable<Claim>
  fullName: System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.Principal.WindowsPrincipal.Identity
  parent: System.Security.Principal.WindowsPrincipal
  isExternal: false
  name: Identity
  nameWithType: WindowsPrincipal.Identity
  fullName: WindowsPrincipal.Identity
- uid: System.Security.Principal.IIdentity
  parent: System.Security.Principal
  isExternal: false
  name: IIdentity
  nameWithType: IIdentity
  fullName: System.Security.Principal.IIdentity
- uid: System.Security.Principal.WindowsPrincipal.IsInRole(System.Int32)
  parent: System.Security.Principal.WindowsPrincipal
  isExternal: false
  name: IsInRole(Int32)
  nameWithType: WindowsPrincipal.IsInRole(Int32)
  fullName: WindowsPrincipal.IsInRole(Int32)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Principal.WindowsPrincipal.IsInRole(System.Security.Principal.SecurityIdentifier)
  parent: System.Security.Principal.WindowsPrincipal
  isExternal: false
  name: IsInRole(SecurityIdentifier)
  nameWithType: WindowsPrincipal.IsInRole(SecurityIdentifier)
  fullName: WindowsPrincipal.IsInRole(SecurityIdentifier)
- uid: System.Security.Principal.SecurityIdentifier
  parent: System.Security.Principal
  isExternal: false
  name: SecurityIdentifier
  nameWithType: SecurityIdentifier
  fullName: System.Security.Principal.SecurityIdentifier
- uid: System.Security.Principal.WindowsPrincipal.IsInRole(System.Security.Principal.WindowsBuiltInRole)
  parent: System.Security.Principal.WindowsPrincipal
  isExternal: false
  name: IsInRole(WindowsBuiltInRole)
  nameWithType: WindowsPrincipal.IsInRole(WindowsBuiltInRole)
  fullName: WindowsPrincipal.IsInRole(WindowsBuiltInRole)
- uid: System.Security.Principal.WindowsBuiltInRole
  parent: System.Security.Principal
  isExternal: false
  name: WindowsBuiltInRole
  nameWithType: WindowsBuiltInRole
  fullName: System.Security.Principal.WindowsBuiltInRole
- uid: System.Security.Principal.WindowsPrincipal.IsInRole(System.String)
  parent: System.Security.Principal.WindowsPrincipal
  isExternal: false
  name: IsInRole(String)
  nameWithType: WindowsPrincipal.IsInRole(String)
  fullName: WindowsPrincipal.IsInRole(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Principal.WindowsPrincipal.UserClaims
  parent: System.Security.Principal.WindowsPrincipal
  isExternal: false
  name: UserClaims
  nameWithType: WindowsPrincipal.UserClaims
  fullName: WindowsPrincipal.UserClaims
- uid: System.Security.Principal.WindowsPrincipal.IsInRole*
  parent: System.Security.Principal.WindowsPrincipal
  isExternal: false
  name: IsInRole
  nameWithType: WindowsPrincipal.IsInRole
  fullName: WindowsPrincipal.IsInRole
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Principal/WindowsPrincipal.xml
- uid: System.Security.Principal.WindowsPrincipal.#ctor*
  parent: System.Security.Principal.WindowsPrincipal
  isExternal: false
  name: WindowsPrincipal
  nameWithType: WindowsPrincipal.WindowsPrincipal
  fullName: WindowsPrincipal.WindowsPrincipal
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Principal/WindowsPrincipal.xml
- uid: System.Security.Principal.WindowsPrincipal.DeviceClaims*
  parent: System.Security.Principal.WindowsPrincipal
  isExternal: false
  name: DeviceClaims
  nameWithType: WindowsPrincipal.DeviceClaims
  fullName: WindowsPrincipal.DeviceClaims
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Principal/WindowsPrincipal.xml
- uid: System.Security.Principal.WindowsPrincipal.Identity*
  parent: System.Security.Principal.WindowsPrincipal
  isExternal: false
  name: Identity
  nameWithType: WindowsPrincipal.Identity
  fullName: WindowsPrincipal.Identity
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Principal/WindowsPrincipal.xml
- uid: System.Security.Principal.WindowsPrincipal.UserClaims*
  parent: System.Security.Principal.WindowsPrincipal
  isExternal: false
  name: UserClaims
  nameWithType: WindowsPrincipal.UserClaims
  fullName: WindowsPrincipal.UserClaims
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Principal/WindowsPrincipal.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
- uid: System.Security.Claims.ClaimsPrincipal.AddIdentities(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: AddIdentities(IEnumerable<ClaimsIdentity>)
  nameWithType: ClaimsPrincipal.AddIdentities(IEnumerable<ClaimsIdentity>)
  fullName: ClaimsPrincipal.AddIdentities(IEnumerable<ClaimsIdentity>)
- uid: System.Security.Claims.ClaimsPrincipal.AddIdentity(System.Security.Claims.ClaimsIdentity)
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: AddIdentity(ClaimsIdentity)
  nameWithType: ClaimsPrincipal.AddIdentity(ClaimsIdentity)
  fullName: ClaimsPrincipal.AddIdentity(ClaimsIdentity)
- uid: System.Security.Claims.ClaimsPrincipal.Claims
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: Claims
  nameWithType: ClaimsPrincipal.Claims
  fullName: ClaimsPrincipal.Claims
- uid: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: ClaimsPrincipalSelector
  nameWithType: ClaimsPrincipal.ClaimsPrincipalSelector
  fullName: ClaimsPrincipal.ClaimsPrincipalSelector
- uid: System.Security.Claims.ClaimsPrincipal.Clone
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: Clone()
  nameWithType: ClaimsPrincipal.Clone()
  fullName: ClaimsPrincipal.Clone()
- uid: System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity(System.IO.BinaryReader)
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: CreateClaimsIdentity(BinaryReader)
  nameWithType: ClaimsPrincipal.CreateClaimsIdentity(BinaryReader)
  fullName: ClaimsPrincipal.CreateClaimsIdentity(BinaryReader)
- uid: System.Security.Claims.ClaimsPrincipal.Current
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: Current
  nameWithType: ClaimsPrincipal.Current
  fullName: ClaimsPrincipal.Current
- uid: System.Security.Claims.ClaimsPrincipal.CustomSerializationData
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: CustomSerializationData
  nameWithType: ClaimsPrincipal.CustomSerializationData
  fullName: ClaimsPrincipal.CustomSerializationData
- uid: System.Security.Claims.ClaimsPrincipal.FindAll(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: FindAll(Predicate<Claim>)
  nameWithType: ClaimsPrincipal.FindAll(Predicate<Claim>)
  fullName: ClaimsPrincipal.FindAll(Predicate<Claim>)
- uid: System.Security.Claims.ClaimsPrincipal.FindAll(System.String)
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: FindAll(String)
  nameWithType: ClaimsPrincipal.FindAll(String)
  fullName: ClaimsPrincipal.FindAll(String)
- uid: System.Security.Claims.ClaimsPrincipal.FindFirst(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: FindFirst(Predicate<Claim>)
  nameWithType: ClaimsPrincipal.FindFirst(Predicate<Claim>)
  fullName: ClaimsPrincipal.FindFirst(Predicate<Claim>)
- uid: System.Security.Claims.ClaimsPrincipal.FindFirst(System.String)
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: FindFirst(String)
  nameWithType: ClaimsPrincipal.FindFirst(String)
  fullName: ClaimsPrincipal.FindFirst(String)
- uid: System.Security.Claims.ClaimsPrincipal.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: GetObjectData(SerializationInfo, StreamingContext)
  nameWithType: ClaimsPrincipal.GetObjectData(SerializationInfo, StreamingContext)
  fullName: ClaimsPrincipal.GetObjectData(SerializationInfo, StreamingContext)
- uid: System.Security.Claims.ClaimsPrincipal.HasClaim(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: HasClaim(Predicate<Claim>)
  nameWithType: ClaimsPrincipal.HasClaim(Predicate<Claim>)
  fullName: ClaimsPrincipal.HasClaim(Predicate<Claim>)
- uid: System.Security.Claims.ClaimsPrincipal.HasClaim(System.String,System.String)
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: HasClaim(String, String)
  nameWithType: ClaimsPrincipal.HasClaim(String, String)
  fullName: ClaimsPrincipal.HasClaim(String, String)
- uid: System.Security.Claims.ClaimsPrincipal.Identities
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: Identities
  nameWithType: ClaimsPrincipal.Identities
  fullName: ClaimsPrincipal.Identities
- uid: System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: PrimaryIdentitySelector
  nameWithType: ClaimsPrincipal.PrimaryIdentitySelector
  fullName: ClaimsPrincipal.PrimaryIdentitySelector
- uid: System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter)
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: WriteTo(BinaryWriter)
  nameWithType: ClaimsPrincipal.WriteTo(BinaryWriter)
  fullName: ClaimsPrincipal.WriteTo(BinaryWriter)
- uid: System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter,System.Byte[])
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: WriteTo(BinaryWriter, Byte[])
  nameWithType: ClaimsPrincipal.WriteTo(BinaryWriter, Byte[])
  fullName: ClaimsPrincipal.WriteTo(BinaryWriter, Byte[])
