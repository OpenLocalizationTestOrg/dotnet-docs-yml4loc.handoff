{"nodes":[{"content":"Converts base data types to an array of bytes, and an array of bytes to base data types.","nodes":[{"pos":[0,88],"content":"Converts base data types to an array of bytes, and an array of bytes to base data types.","nodes":[{"content":"Converts base data types to an array of bytes, and an array of bytes to base data types.","pos":[0,88]}]}],"pos":[1879,1968],"yaml":true},{"content":"The <xref:System.BitConverter> class helps manipulate value types in their fundamental form, as a series of bytes. A byte is defined as an 8-bit unsigned integer. The <xref:System.BitConverter> class includes static methods to convert each of the primitive types to and from an array of bytes, as the following table illustrates.  \n  \n|Type|To byte conversion|From byte conversion|  \n|----------|------------------------|--------------------------|  \n|<xref:System.Boolean>|<xref:System.BitConverter.GetBytes%28System.Boolean%29>|<xref:System.BitConverter.ToBoolean%2A>|  \n|<xref:System.Char>|<xref:System.BitConverter.GetBytes%28System.Char%29>|<xref:System.BitConverter.ToChar%2A>|  \n|<xref:System.Double>|<xref:System.BitConverter.GetBytes%28System.Double%29><br /><br /> -or-<br /><br /> <xref:System.BitConverter.DoubleToInt64Bits%28System.Double%29>|<xref:System.BitConverter.ToDouble%2A><br /><br /> -or-<br /><br /> <xref:System.BitConverter.Int64BitsToDouble%2A>|  \n|<xref:System.Int16>|<xref:System.BitConverter.GetBytes%28System.Int16%29>|<xref:System.BitConverter.ToInt16%2A>|  \n|<xref:System.Int32>|<xref:System.BitConverter.GetBytes%28System.Int32%29>|<xref:System.BitConverter.ToInt32%2A>|  \n|<xref:System.Int64>|<xref:System.BitConverter.GetBytes%28System.Int64%29>|<xref:System.BitConverter.ToInt64%2A>|  \n|<xref:System.Single>|<xref:System.BitConverter.GetBytes%28System.Single%29>|<xref:System.BitConverter.ToSingle%2A>|  \n|<xref:System.UInt16>|<xref:System.BitConverter.GetBytes%28System.UInt16%29>|<xref:System.BitConverter.ToUInt16%2A>|  \n|<xref:System.UInt32>|<xref:System.BitConverter.GetBytes%28System.UInt32%29>|<xref:System.BitConverter.ToUInt32%2A>|  \n|<xref:System.UInt64>|<xref:System.BitConverter.GetBytes%28System.UInt64%29>|<xref:System.BitConverter.ToUInt64%2A>|  \n  \n If you use <xref:System.BitConverter> methods to round-trip data, make sure that the <xref:System.BitConverter.GetBytes%2A> overload and the `To`*Type* method specify the same type. As the following example illustrates, restoring an array that represents a signed integer by calling the <xref:System.BitConverter.ToUInt32%2A> method can result in a value that is different from the original. For more information, see the entry [Working with Signed Non-Decimal and Bitwise Values](http://go.microsoft.com/fwlink/?LinkId=186999) in the BCL Team Blog.  \n  \n [!code-csharp[System.BitConverter.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.Class/CS/example1.cs#3)]\n [!code-vb[System.BitConverter.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.Class/VB/example1.vb#3)]  \n  \n The order of bytes in the array returned by the <xref:System.BitConverter.GetBytes%2A> method overloads (as well as the order of bits in the integer returned by the <xref:System.BitConverter.DoubleToInt64Bits%2A> method and the order of hexadecimal strings returned by the <xref:System.BitConverter.ToString%28System.Byte%5B%5D%29> method) depends on whether the computer architecture is little-endian or big-endian. Similarly, the order of bytes in the array and returned by the `To`*IntegerValue* methods and the <xref:System.BitConverter.ToChar%2A> method depends on whether the computer architecture is little-endian or big-endian. The endianness of an architecture is indicated by the <xref:System.BitConverter.IsLittleEndian> property, which returns `true` on little-endian systems and `false` on big-endian systems. On little-endian systems, lower-order bytes precede higher-order bytes. On big-endian system, higher-order bytes precede lower-order bytes. The following table illustrates the difference in the byte arrays that result from passing the integer 1,234,567,890 (0x499602D2) to the <xref:System.BitConverter.GetBytes%28System.Int32%29> method. The bytes are listed in order from the byte at index 0 to the byte at index 3.  \n  \n|||  \n|-|-|  \n|Little-endian|D2-02-96-49|  \n|Big-endian|49-96-02-D2|  \n  \n Because the return value of some methods depends on system architecture, be careful when transmitting byte data beyond machine boundaries:  \n  \n-   If all systems sending and receiving data are guaranteed to have the same endianness, nothing has be done to the data.  \n  \n-   If systems sending and receiving data can have different endianness, always transmit data in a particular order. This means that the order of bytes in the array may have to be reversed either before sending them or after receiving them. A common convention is to transmit data in network byte order (big-endian order). The following example provides an implementation for sending an integer value in network byte order.  \n  \n     [!code-csharp[System.BitConverter.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.Class/CS/networkorder1.cs#4)]\n     [!code-vb[System.BitConverter.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.Class/VB/networkorder1.vb#4)]  \n  \n-   If systems sending and receiving data can have different endianness and the data to be transmitted consists of signed integers, call the <xref:System.Net.IPAddress.HostToNetworkOrder%2A?displayProperty=fullName> method to convert the data to network byte order and the <xref:System.Net.IPAddress.NetworkToHostOrder%2A?displayProperty=fullName> method to convert it to the order required by the recipient.","nodes":[{"pos":[0,329],"content":"The <xref:System.BitConverter> class helps manipulate value types in their fundamental form, as a series of bytes. A byte is defined as an 8-bit unsigned integer. The <xref:System.BitConverter> class includes static methods to convert each of the primitive types to and from an array of bytes, as the following table illustrates.","nodes":[{"content":"The <xref:System.BitConverter> class helps manipulate value types in their fundamental form, as a series of bytes. A byte is defined as an 8-bit unsigned integer. The <xref:System.BitConverter> class includes static methods to convert each of the primitive types to and from an array of bytes, as the following table illustrates.","pos":[0,329],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.BitConverter&gt;</ph> class helps manipulate value types in their fundamental form, as a series of bytes.","pos":[0,114],"source":"The <xref:System.BitConverter> class helps manipulate value types in their fundamental form, as a series of bytes."},{"content":"A byte is defined as an 8-bit unsigned integer.","pos":[115,162]},{"content":"The <ph id=\"ph1\">&lt;xref:System.BitConverter&gt;</ph> class includes static methods to convert each of the primitive types to and from an array of bytes, as the following table illustrates.","pos":[163,329],"source":" The <xref:System.BitConverter> class includes static methods to convert each of the primitive types to and from an array of bytes, as the following table illustrates."}]}]},{"pos":[336,340],"content":"Type","nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[341,359],"content":"To byte conversion","nodes":[{"content":"To byte conversion","pos":[0,18]}]},{"pos":[360,380],"content":"From byte conversion","nodes":[{"content":"From byte conversion","pos":[0,20]}]},{"pos":[452,473],"content":"<xref:System.Boolean>","nodes":[]},{"pos":[474,529],"content":"<xref:System.BitConverter.GetBytes%28System.Boolean%29>","nodes":[]},{"pos":[530,569],"content":"<xref:System.BitConverter.ToBoolean%2A>","nodes":[]},{"pos":[574,592],"content":"<xref:System.Char>","nodes":[]},{"pos":[593,645],"content":"<xref:System.BitConverter.GetBytes%28System.Char%29>","nodes":[]},{"pos":[646,682],"content":"<xref:System.BitConverter.ToChar%2A>","nodes":[]},{"pos":[687,707],"content":"<xref:System.Double>","nodes":[]},{"pos":[708,855],"content":"<xref:System.BitConverter.GetBytes%28System.Double%29><br /><br /> -or-<br /><br /> <xref:System.BitConverter.DoubleToInt64Bits%28System.Double%29>","nodes":[{"content":"-or-","pos":[67,71]}]},{"pos":[856,971],"content":"<xref:System.BitConverter.ToDouble%2A><br /><br /> -or-<br /><br /> <xref:System.BitConverter.Int64BitsToDouble%2A>","nodes":[{"content":"-or-","pos":[51,55]}]},{"pos":[976,995],"content":"<xref:System.Int16>","nodes":[]},{"pos":[996,1049],"content":"<xref:System.BitConverter.GetBytes%28System.Int16%29>","nodes":[]},{"pos":[1050,1087],"content":"<xref:System.BitConverter.ToInt16%2A>","nodes":[]},{"pos":[1092,1111],"content":"<xref:System.Int32>","nodes":[]},{"pos":[1112,1165],"content":"<xref:System.BitConverter.GetBytes%28System.Int32%29>","nodes":[]},{"pos":[1166,1203],"content":"<xref:System.BitConverter.ToInt32%2A>","nodes":[]},{"pos":[1208,1227],"content":"<xref:System.Int64>","nodes":[]},{"pos":[1228,1281],"content":"<xref:System.BitConverter.GetBytes%28System.Int64%29>","nodes":[]},{"pos":[1282,1319],"content":"<xref:System.BitConverter.ToInt64%2A>","nodes":[]},{"pos":[1324,1344],"content":"<xref:System.Single>","nodes":[]},{"pos":[1345,1399],"content":"<xref:System.BitConverter.GetBytes%28System.Single%29>","nodes":[]},{"pos":[1400,1438],"content":"<xref:System.BitConverter.ToSingle%2A>","nodes":[]},{"pos":[1443,1463],"content":"<xref:System.UInt16>","nodes":[]},{"pos":[1464,1518],"content":"<xref:System.BitConverter.GetBytes%28System.UInt16%29>","nodes":[]},{"pos":[1519,1557],"content":"<xref:System.BitConverter.ToUInt16%2A>","nodes":[]},{"pos":[1562,1582],"content":"<xref:System.UInt32>","nodes":[]},{"pos":[1583,1637],"content":"<xref:System.BitConverter.GetBytes%28System.UInt32%29>","nodes":[]},{"pos":[1638,1676],"content":"<xref:System.BitConverter.ToUInt32%2A>","nodes":[]},{"pos":[1681,1701],"content":"<xref:System.UInt64>","nodes":[]},{"pos":[1702,1756],"content":"<xref:System.BitConverter.GetBytes%28System.UInt64%29>","nodes":[]},{"pos":[1757,1795],"content":"<xref:System.BitConverter.ToUInt64%2A>","nodes":[]},{"pos":[1803,2352],"content":"If you use <xref:System.BitConverter> methods to round-trip data, make sure that the <xref:System.BitConverter.GetBytes%2A> overload and the `To`*Type* method specify the same type. As the following example illustrates, restoring an array that represents a signed integer by calling the <xref:System.BitConverter.ToUInt32%2A> method can result in a value that is different from the original. For more information, see the entry [Working with Signed Non-Decimal and Bitwise Values](http://go.microsoft.com/fwlink/?LinkId=186999) in the BCL Team Blog.","nodes":[{"content":"If you use <ph id=\"ph1\">&lt;xref:System.BitConverter&gt;</ph> methods to round-trip data, make sure that the <ph id=\"ph2\">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> overload and the <ph id=\"ph3\">`To`</ph><bpt id=\"p1\">*</bpt>Type<ept id=\"p1\">*</ept> method specify the same type.","pos":[0,181],"source":"If you use <xref:System.BitConverter> methods to round-trip data, make sure that the <xref:System.BitConverter.GetBytes%2A> overload and the `To`*Type* method specify the same type."},{"content":"As the following example illustrates, restoring an array that represents a signed integer by calling the <ph id=\"ph1\">&lt;xref:System.BitConverter.ToUInt32%2A&gt;</ph> method can result in a value that is different from the original.","pos":[182,391],"source":" As the following example illustrates, restoring an array that represents a signed integer by calling the <xref:System.BitConverter.ToUInt32%2A> method can result in a value that is different from the original."},{"content":"For more information, see the entry <bpt id=\"p1\">[</bpt>Working with Signed Non-Decimal and Bitwise Values<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=186999)</ept> in the BCL Team Blog.","pos":[392,549],"source":" For more information, see the entry [Working with Signed Non-Decimal and Bitwise Values](http://go.microsoft.com/fwlink/?LinkId=186999) in the BCL Team Blog."}]},{"pos":[2359,2634],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.BitConverter.Class#3<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.Class/CS/example1.cs#3)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.BitConverter.Class#3<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.Class/VB/example1.vb#3)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.BitConverter.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.Class/CS/example1.cs#3)]\n [!code-vb[System.BitConverter.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.Class/VB/example1.vb#3)]"},{"pos":[2641,3881],"content":"The order of bytes in the array returned by the <xref:System.BitConverter.GetBytes%2A> method overloads (as well as the order of bits in the integer returned by the <xref:System.BitConverter.DoubleToInt64Bits%2A> method and the order of hexadecimal strings returned by the <xref:System.BitConverter.ToString%28System.Byte%5B%5D%29> method) depends on whether the computer architecture is little-endian or big-endian. Similarly, the order of bytes in the array and returned by the `To`*IntegerValue* methods and the <xref:System.BitConverter.ToChar%2A> method depends on whether the computer architecture is little-endian or big-endian. The endianness of an architecture is indicated by the <xref:System.BitConverter.IsLittleEndian> property, which returns `true` on little-endian systems and `false` on big-endian systems. On little-endian systems, lower-order bytes precede higher-order bytes. On big-endian system, higher-order bytes precede lower-order bytes. The following table illustrates the difference in the byte arrays that result from passing the integer 1,234,567,890 (0x499602D2) to the <xref:System.BitConverter.GetBytes%28System.Int32%29> method. The bytes are listed in order from the byte at index 0 to the byte at index 3.","nodes":[{"content":"The order of bytes in the array returned by the <ph id=\"ph1\">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> method overloads (as well as the order of bits in the integer returned by the <ph id=\"ph2\">&lt;xref:System.BitConverter.DoubleToInt64Bits%2A&gt;</ph> method and the order of hexadecimal strings returned by the <ph id=\"ph3\">&lt;xref:System.BitConverter.ToString%28System.Byte%5B%5D%29&gt;</ph> method) depends on whether the computer architecture is little-endian or big-endian.","pos":[0,416],"source":"The order of bytes in the array returned by the <xref:System.BitConverter.GetBytes%2A> method overloads (as well as the order of bits in the integer returned by the <xref:System.BitConverter.DoubleToInt64Bits%2A> method and the order of hexadecimal strings returned by the <xref:System.BitConverter.ToString%28System.Byte%5B%5D%29> method) depends on whether the computer architecture is little-endian or big-endian."},{"content":"Similarly, the order of bytes in the array and returned by the <ph id=\"ph1\">`To`</ph><bpt id=\"p1\">*</bpt>IntegerValue<ept id=\"p1\">*</ept> methods and the <ph id=\"ph2\">&lt;xref:System.BitConverter.ToChar%2A&gt;</ph> method depends on whether the computer architecture is little-endian or big-endian.","pos":[417,635],"source":" Similarly, the order of bytes in the array and returned by the `To`*IntegerValue* methods and the <xref:System.BitConverter.ToChar%2A> method depends on whether the computer architecture is little-endian or big-endian."},{"content":"The endianness of an architecture is indicated by the <ph id=\"ph1\">&lt;xref:System.BitConverter.IsLittleEndian&gt;</ph> property, which returns <ph id=\"ph2\">`true`</ph> on little-endian systems and <ph id=\"ph3\">`false`</ph> on big-endian systems.","pos":[636,822],"source":" The endianness of an architecture is indicated by the <xref:System.BitConverter.IsLittleEndian> property, which returns `true` on little-endian systems and `false` on big-endian systems."},{"content":"On little-endian systems, lower-order bytes precede higher-order bytes.","pos":[823,894]},{"content":"On big-endian system, higher-order bytes precede lower-order bytes.","pos":[895,962]},{"content":"The following table illustrates the difference in the byte arrays that result from passing the integer 1,234,567,890 (0x499602D2) to the <ph id=\"ph1\">&lt;xref:System.BitConverter.GetBytes%28System.Int32%29&gt;</ph> method.","pos":[963,1161],"source":" The following table illustrates the difference in the byte arrays that result from passing the integer 1,234,567,890 (0x499602D2) to the <xref:System.BitConverter.GetBytes%28System.Int32%29> method."},{"content":"The bytes are listed in order from the byte at index 0 to the byte at index 3.","pos":[1162,1240]}]},{"pos":[3902,3915],"content":"Little-endian","nodes":[{"content":"Little-endian","pos":[0,13]}]},{"pos":[3916,3927],"content":"D2-02-96-49","nodes":[{"content":"D2-02-96-49","pos":[0,11]}]},{"pos":[3932,3942],"content":"Big-endian","nodes":[{"content":"Big-endian","pos":[0,10]}]},{"pos":[3943,3954],"content":"49-96-02-D2","nodes":[{"content":"49-96-02-D2","pos":[0,11]}]},{"pos":[3962,4100],"content":"Because the return value of some methods depends on system architecture, be careful when transmitting byte data beyond machine boundaries:","nodes":[{"content":"Because the return value of some methods depends on system architecture, be careful when transmitting byte data beyond machine boundaries:","pos":[0,138]}]},{"pos":[4110,4228],"content":"If all systems sending and receiving data are guaranteed to have the same endianness, nothing has be done to the data.","nodes":[{"content":"If all systems sending and receiving data are guaranteed to have the same endianness, nothing has be done to the data.","pos":[0,118]}]},{"pos":[4238,4657],"content":"If systems sending and receiving data can have different endianness, always transmit data in a particular order. This means that the order of bytes in the array may have to be reversed either before sending them or after receiving them. A common convention is to transmit data in network byte order (big-endian order). The following example provides an implementation for sending an integer value in network byte order.","nodes":[{"content":"If systems sending and receiving data can have different endianness, always transmit data in a particular order. This means that the order of bytes in the array may have to be reversed either before sending them or after receiving them. A common convention is to transmit data in network byte order (big-endian order). The following example provides an implementation for sending an integer value in network byte order.","pos":[0,419],"nodes":[{"content":"If systems sending and receiving data can have different endianness, always transmit data in a particular order.","pos":[0,112]},{"content":"This means that the order of bytes in the array may have to be reversed either before sending them or after receiving them.","pos":[113,236]},{"content":"A common convention is to transmit data in network byte order (big-endian order).","pos":[237,318]},{"content":"The following example provides an implementation for sending an integer value in network byte order.","pos":[319,419]}]}]},{"pos":[4668,4957],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.BitConverter.Class#4<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.Class/CS/networkorder1.cs#4)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.BitConverter.Class#4<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.Class/VB/networkorder1.vb#4)</ept><ept id=\"p3\">]</ept>","leadings":["","    "],"source":"[!code-csharp[System.BitConverter.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.Class/CS/networkorder1.cs#4)]\n [!code-vb[System.BitConverter.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.Class/VB/networkorder1.vb#4)]"},{"pos":[4967,5371],"content":"If systems sending and receiving data can have different endianness and the data to be transmitted consists of signed integers, call the <xref:System.Net.IPAddress.HostToNetworkOrder%2A?displayProperty=fullName> method to convert the data to network byte order and the <xref:System.Net.IPAddress.NetworkToHostOrder%2A?displayProperty=fullName> method to convert it to the order required by the recipient.","nodes":[{"content":"If systems sending and receiving data can have different endianness and the data to be transmitted consists of signed integers, call the <ph id=\"ph1\">&lt;xref:System.Net.IPAddress.HostToNetworkOrder%2A?displayProperty=fullName&gt;</ph> method to convert the data to network byte order and the <ph id=\"ph2\">&lt;xref:System.Net.IPAddress.NetworkToHostOrder%2A?displayProperty=fullName&gt;</ph> method to convert it to the order required by the recipient.","pos":[0,404],"source":"If systems sending and receiving data can have different endianness and the data to be transmitted consists of signed integers, call the <xref:System.Net.IPAddress.HostToNetworkOrder%2A?displayProperty=fullName> method to convert the data to network byte order and the <xref:System.Net.IPAddress.NetworkToHostOrder%2A?displayProperty=fullName> method to convert it to the order required by the recipient."}]}],"pos":[1979,7389],"yaml":true,"extradata":"MT"},{"content":"Converts the specified double-precision floating point number to a 64-bit signed integer.","nodes":[{"pos":[0,89],"content":"Converts the specified double-precision floating point number to a 64-bit signed integer.","nodes":[{"content":"Converts the specified double-precision floating point number to a 64-bit signed integer.","pos":[0,89]}]}],"pos":[9859,9949],"yaml":true},{"content":"The order of bits in the integer returned by the <xref:System.BitConverter.DoubleToInt64Bits%2A> method depends on whether the computer architecture is little-endian or big-endian.","nodes":[{"pos":[0,180],"content":"The order of bits in the integer returned by the <xref:System.BitConverter.DoubleToInt64Bits%2A> method depends on whether the computer architecture is little-endian or big-endian.","nodes":[{"content":"The order of bits in the integer returned by the <ph id=\"ph1\">&lt;xref:System.BitConverter.DoubleToInt64Bits%2A&gt;</ph> method depends on whether the computer architecture is little-endian or big-endian.","pos":[0,180],"source":"The order of bits in the integer returned by the <xref:System.BitConverter.DoubleToInt64Bits%2A> method depends on whether the computer architecture is little-endian or big-endian."}]}],"pos":[9960,10141],"yaml":true,"extradata":"MT"},{"content":"The number to convert.","nodes":[{"pos":[0,22],"content":"The number to convert.","nodes":[{"content":"The number to convert.","pos":[0,22]}]}],"pos":[10929,10952],"yaml":true},{"content":"A 64-bit signed integer whose value is equivalent to <code>value</code>.","nodes":[{"pos":[0,72],"content":"A 64-bit signed integer whose value is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A 64-bit signed integer whose value is equivalent to <code>value</code>."}],"pos":[11008,11081],"yaml":true},{"content":"Returns the specified Boolean value as a byte array.","nodes":[{"pos":[0,52],"content":"Returns the specified Boolean value as a byte array.","nodes":[{"content":"Returns the specified Boolean value as a byte array.","pos":[0,52]}]}],"pos":[12654,12707],"yaml":true},{"content":"You can convert a byte array back to a <xref:System.Boolean> value by calling the <xref:System.BitConverter.ToBoolean%2A> method.","nodes":[{"pos":[0,129],"content":"You can convert a byte array back to a <xref:System.Boolean> value by calling the <xref:System.BitConverter.ToBoolean%2A> method.","nodes":[{"content":"You can convert a byte array back to a <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph> value by calling the <ph id=\"ph2\">&lt;xref:System.BitConverter.ToBoolean%2A&gt;</ph> method.","pos":[0,129],"source":"You can convert a byte array back to a <xref:System.Boolean> value by calling the <xref:System.BitConverter.ToBoolean%2A> method."}]}],"pos":[12718,12848],"yaml":true,"extradata":"MT"},{"content":"A Boolean value.","nodes":[{"pos":[0,16],"content":"A Boolean value.","nodes":[{"content":"A Boolean value.","pos":[0,16]}]}],"pos":[13630,13647],"yaml":true},{"content":"A byte array with length 1.","nodes":[{"pos":[0,27],"content":"A byte array with length 1.","nodes":[{"content":"A byte array with length 1.","pos":[0,27]}]}],"pos":[13704,13732],"yaml":true},{"content":"Returns the specified Unicode character value as an array of bytes.","nodes":[{"pos":[0,67],"content":"Returns the specified Unicode character value as an array of bytes.","nodes":[{"content":"Returns the specified Unicode character value as an array of bytes.","pos":[0,67]}]}],"pos":[15261,15329],"yaml":true},{"content":"The order of bytes in the array returned by the <xref:System.BitConverter.GetBytes%2A> method depends on whether the computer architecture is little-endian or big-endian.","nodes":[{"pos":[0,170],"content":"The order of bytes in the array returned by the <xref:System.BitConverter.GetBytes%2A> method depends on whether the computer architecture is little-endian or big-endian.","nodes":[{"content":"The order of bytes in the array returned by the <ph id=\"ph1\">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> method depends on whether the computer architecture is little-endian or big-endian.","pos":[0,170],"source":"The order of bytes in the array returned by the <xref:System.BitConverter.GetBytes%2A> method depends on whether the computer architecture is little-endian or big-endian."}]}],"pos":[15340,15511],"yaml":true,"extradata":"MT"},{"content":"A character to convert.","nodes":[{"pos":[0,23],"content":"A character to convert.","nodes":[{"content":"A character to convert.","pos":[0,23]}]}],"pos":[16313,16337],"yaml":true},{"content":"An array of bytes with length 2.","nodes":[{"pos":[0,32],"content":"An array of bytes with length 2.","nodes":[{"content":"An array of bytes with length 2.","pos":[0,32]}]}],"pos":[16394,16427],"yaml":true},{"content":"Returns the specified double-precision floating point value as an array of bytes.","nodes":[{"pos":[0,81],"content":"Returns the specified double-precision floating point value as an array of bytes.","nodes":[{"content":"Returns the specified double-precision floating point value as an array of bytes.","pos":[0,81]}]}],"pos":[17968,18050],"yaml":true},{"content":"The order of bytes in the array returned by the <xref:System.BitConverter.GetBytes%2A> method depends on whether the computer architecture is little-endian or big-endian.","nodes":[{"pos":[0,170],"content":"The order of bytes in the array returned by the <xref:System.BitConverter.GetBytes%2A> method depends on whether the computer architecture is little-endian or big-endian.","nodes":[{"content":"The order of bytes in the array returned by the <ph id=\"ph1\">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> method depends on whether the computer architecture is little-endian or big-endian.","pos":[0,170],"source":"The order of bytes in the array returned by the <xref:System.BitConverter.GetBytes%2A> method depends on whether the computer architecture is little-endian or big-endian."}]}],"pos":[18061,18232],"yaml":true,"extradata":"MT"},{"content":"The number to convert.","nodes":[{"pos":[0,22],"content":"The number to convert.","nodes":[{"content":"The number to convert.","pos":[0,22]}]}],"pos":[19025,19048],"yaml":true},{"content":"An array of bytes with length 8.","nodes":[{"pos":[0,32],"content":"An array of bytes with length 8.","nodes":[{"content":"An array of bytes with length 8.","pos":[0,32]}]}],"pos":[19105,19138],"yaml":true},{"content":"Returns the specified 16-bit signed integer value as an array of bytes.","nodes":[{"pos":[0,71],"content":"Returns the specified 16-bit signed integer value as an array of bytes.","nodes":[{"content":"Returns the specified 16-bit signed integer value as an array of bytes.","pos":[0,71]}]}],"pos":[20690,20762],"yaml":true},{"content":"The order of bytes in the array returned by the <xref:System.BitConverter.GetBytes%2A> method depends on whether the computer architecture is little-endian or big-endian.","nodes":[{"pos":[0,170],"content":"The order of bytes in the array returned by the <xref:System.BitConverter.GetBytes%2A> method depends on whether the computer architecture is little-endian or big-endian.","nodes":[{"content":"The order of bytes in the array returned by the <ph id=\"ph1\">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> method depends on whether the computer architecture is little-endian or big-endian.","pos":[0,170],"source":"The order of bytes in the array returned by the <xref:System.BitConverter.GetBytes%2A> method depends on whether the computer architecture is little-endian or big-endian."}]}],"pos":[20773,20944],"yaml":true,"extradata":"MT"},{"content":"The number to convert.","nodes":[{"pos":[0,22],"content":"The number to convert.","nodes":[{"content":"The number to convert.","pos":[0,22]}]}],"pos":[21725,21748],"yaml":true},{"content":"An array of bytes with length 2.","nodes":[{"pos":[0,32],"content":"An array of bytes with length 2.","nodes":[{"content":"An array of bytes with length 2.","pos":[0,32]}]}],"pos":[21805,21838],"yaml":true},{"content":"Returns the specified 32-bit signed integer value as an array of bytes.","nodes":[{"pos":[0,71],"content":"Returns the specified 32-bit signed integer value as an array of bytes.","nodes":[{"content":"Returns the specified 32-bit signed integer value as an array of bytes.","pos":[0,71]}]}],"pos":[23390,23462],"yaml":true},{"content":"The order of bytes in the array returned by the <xref:System.BitConverter.GetBytes%2A> method depends on whether the computer architecture is little-endian or big-endian.","nodes":[{"pos":[0,170],"content":"The order of bytes in the array returned by the <xref:System.BitConverter.GetBytes%2A> method depends on whether the computer architecture is little-endian or big-endian.","nodes":[{"content":"The order of bytes in the array returned by the <ph id=\"ph1\">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> method depends on whether the computer architecture is little-endian or big-endian.","pos":[0,170],"source":"The order of bytes in the array returned by the <xref:System.BitConverter.GetBytes%2A> method depends on whether the computer architecture is little-endian or big-endian."}]}],"pos":[23473,23644],"yaml":true,"extradata":"MT"},{"content":"The number to convert.","nodes":[{"pos":[0,22],"content":"The number to convert.","nodes":[{"content":"The number to convert.","pos":[0,22]}]}],"pos":[24423,24446],"yaml":true},{"content":"An array of bytes with length 4.","nodes":[{"pos":[0,32],"content":"An array of bytes with length 4.","nodes":[{"content":"An array of bytes with length 4.","pos":[0,32]}]}],"pos":[24503,24536],"yaml":true},{"content":"Returns the specified 64-bit signed integer value as an array of bytes.","nodes":[{"pos":[0,71],"content":"Returns the specified 64-bit signed integer value as an array of bytes.","nodes":[{"content":"Returns the specified 64-bit signed integer value as an array of bytes.","pos":[0,71]}]}],"pos":[26088,26160],"yaml":true},{"content":"The order of bytes in the array returned by the <xref:System.BitConverter.GetBytes%2A> method depends on whether the computer architecture is little-endian or big-endian.","nodes":[{"pos":[0,170],"content":"The order of bytes in the array returned by the <xref:System.BitConverter.GetBytes%2A> method depends on whether the computer architecture is little-endian or big-endian.","nodes":[{"content":"The order of bytes in the array returned by the <ph id=\"ph1\">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> method depends on whether the computer architecture is little-endian or big-endian.","pos":[0,170],"source":"The order of bytes in the array returned by the <xref:System.BitConverter.GetBytes%2A> method depends on whether the computer architecture is little-endian or big-endian."}]}],"pos":[26171,26342],"yaml":true,"extradata":"MT"},{"content":"The number to convert.","nodes":[{"pos":[0,22],"content":"The number to convert.","nodes":[{"content":"The number to convert.","pos":[0,22]}]}],"pos":[27147,27170],"yaml":true},{"content":"An array of bytes with length 8.","nodes":[{"pos":[0,32],"content":"An array of bytes with length 8.","nodes":[{"content":"An array of bytes with length 8.","pos":[0,32]}]}],"pos":[27227,27260],"yaml":true},{"content":"Returns the specified single-precision floating point value as an array of bytes.","nodes":[{"pos":[0,81],"content":"Returns the specified single-precision floating point value as an array of bytes.","nodes":[{"content":"Returns the specified single-precision floating point value as an array of bytes.","pos":[0,81]}]}],"pos":[28818,28900],"yaml":true},{"content":"The order of bytes in the array returned by the <xref:System.BitConverter.GetBytes%2A> method depends on whether the computer architecture is little-endian or big-endian.","nodes":[{"pos":[0,170],"content":"The order of bytes in the array returned by the <xref:System.BitConverter.GetBytes%2A> method depends on whether the computer architecture is little-endian or big-endian.","nodes":[{"content":"The order of bytes in the array returned by the <ph id=\"ph1\">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> method depends on whether the computer architecture is little-endian or big-endian.","pos":[0,170],"source":"The order of bytes in the array returned by the <xref:System.BitConverter.GetBytes%2A> method depends on whether the computer architecture is little-endian or big-endian."}]}],"pos":[28911,29082],"yaml":true,"extradata":"MT"},{"content":"The number to convert.","nodes":[{"pos":[0,22],"content":"The number to convert.","nodes":[{"content":"The number to convert.","pos":[0,22]}]}],"pos":[29874,29897],"yaml":true},{"content":"An array of bytes with length 4.","nodes":[{"pos":[0,32],"content":"An array of bytes with length 4.","nodes":[{"content":"An array of bytes with length 4.","pos":[0,32]}]}],"pos":[29954,29987],"yaml":true},{"content":"Returns the specified 16-bit unsigned integer value as an array of bytes.","nodes":[{"pos":[0,73],"content":"Returns the specified 16-bit unsigned integer value as an array of bytes.","nodes":[{"content":"Returns the specified 16-bit unsigned integer value as an array of bytes.","pos":[0,73]}]}],"pos":[31545,31619],"yaml":true},{"content":"The order of bytes in the array returned by the <xref:System.BitConverter.GetBytes%2A> method depends on whether the computer architecture is little-endian or big-endian.","nodes":[{"pos":[0,170],"content":"The order of bytes in the array returned by the <xref:System.BitConverter.GetBytes%2A> method depends on whether the computer architecture is little-endian or big-endian.","nodes":[{"content":"The order of bytes in the array returned by the <ph id=\"ph1\">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> method depends on whether the computer architecture is little-endian or big-endian.","pos":[0,170],"source":"The order of bytes in the array returned by the <xref:System.BitConverter.GetBytes%2A> method depends on whether the computer architecture is little-endian or big-endian."}]}],"pos":[31630,31801],"yaml":true,"extradata":"MT"},{"content":"The number to convert.","nodes":[{"pos":[0,22],"content":"The number to convert.","nodes":[{"content":"The number to convert.","pos":[0,22]}]}],"pos":[32633,32656],"yaml":true},{"content":"An array of bytes with length 2.","nodes":[{"pos":[0,32],"content":"An array of bytes with length 2.","nodes":[{"content":"An array of bytes with length 2.","pos":[0,32]}]}],"pos":[32713,32746],"yaml":true},{"content":"Returns the specified 32-bit unsigned integer value as an array of bytes.","nodes":[{"pos":[0,73],"content":"Returns the specified 32-bit unsigned integer value as an array of bytes.","nodes":[{"content":"Returns the specified 32-bit unsigned integer value as an array of bytes.","pos":[0,73]}]}],"pos":[34340,34414],"yaml":true},{"content":"The order of bytes in the array returned by the <xref:System.BitConverter.GetBytes%2A> method depends on whether the computer architecture is little-endian or big-endian.","nodes":[{"pos":[0,170],"content":"The order of bytes in the array returned by the <xref:System.BitConverter.GetBytes%2A> method depends on whether the computer architecture is little-endian or big-endian.","nodes":[{"content":"The order of bytes in the array returned by the <ph id=\"ph1\">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> method depends on whether the computer architecture is little-endian or big-endian.","pos":[0,170],"source":"The order of bytes in the array returned by the <xref:System.BitConverter.GetBytes%2A> method depends on whether the computer architecture is little-endian or big-endian."}]}],"pos":[34425,34596],"yaml":true,"extradata":"MT"},{"content":"The number to convert.","nodes":[{"pos":[0,22],"content":"The number to convert.","nodes":[{"content":"The number to convert.","pos":[0,22]}]}],"pos":[35426,35449],"yaml":true},{"content":"An array of bytes with length 4.","nodes":[{"pos":[0,32],"content":"An array of bytes with length 4.","nodes":[{"content":"An array of bytes with length 4.","pos":[0,32]}]}],"pos":[35506,35539],"yaml":true},{"content":"Returns the specified 64-bit unsigned integer value as an array of bytes.","nodes":[{"pos":[0,73],"content":"Returns the specified 64-bit unsigned integer value as an array of bytes.","nodes":[{"content":"Returns the specified 64-bit unsigned integer value as an array of bytes.","pos":[0,73]}]}],"pos":[37133,37207],"yaml":true},{"content":"The order of bytes in the array returned by the <xref:System.BitConverter.GetBytes%2A> method depends on whether the computer architecture is little-endian or big-endian.","nodes":[{"pos":[0,170],"content":"The order of bytes in the array returned by the <xref:System.BitConverter.GetBytes%2A> method depends on whether the computer architecture is little-endian or big-endian.","nodes":[{"content":"The order of bytes in the array returned by the <ph id=\"ph1\">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> method depends on whether the computer architecture is little-endian or big-endian.","pos":[0,170],"source":"The order of bytes in the array returned by the <xref:System.BitConverter.GetBytes%2A> method depends on whether the computer architecture is little-endian or big-endian."}]}],"pos":[37218,37389],"yaml":true,"extradata":"MT"},{"content":"The number to convert.","nodes":[{"pos":[0,22],"content":"The number to convert.","nodes":[{"content":"The number to convert.","pos":[0,22]}]}],"pos":[38220,38243],"yaml":true},{"content":"An array of bytes with length 8.","nodes":[{"pos":[0,32],"content":"An array of bytes with length 8.","nodes":[{"content":"An array of bytes with length 8.","pos":[0,32]}]}],"pos":[38300,38333],"yaml":true},{"content":"Converts the specified 64-bit signed integer to a double-precision floating point number.","nodes":[{"pos":[0,89],"content":"Converts the specified 64-bit signed integer to a double-precision floating point number.","nodes":[{"content":"Converts the specified 64-bit signed integer to a double-precision floating point number.","pos":[0,89]}]}],"pos":[40831,40921],"yaml":true},{"content":"Typically, `value` is an integer that is returned by the <xref:System.BitConverter.DoubleToInt64Bits%2A> method.","nodes":[{"pos":[0,112],"content":"Typically, <ph id=\"ph1\">`value`</ph> is an integer that is returned by the <ph id=\"ph2\">&lt;xref:System.BitConverter.DoubleToInt64Bits%2A&gt;</ph> method.","source":"Typically, `value` is an integer that is returned by the <xref:System.BitConverter.DoubleToInt64Bits%2A> method."}],"pos":[40932,41045],"yaml":true,"extradata":"MT"},{"content":"The number to convert.","nodes":[{"pos":[0,22],"content":"The number to convert.","nodes":[{"content":"The number to convert.","pos":[0,22]}]}],"pos":[41832,41855],"yaml":true},{"content":"A double-precision floating point number whose value is equivalent to <code>value</code>.","nodes":[{"pos":[0,89],"content":"A double-precision floating point number whose value is equivalent to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A double-precision floating point number whose value is equivalent to <code>value</code>."}],"pos":[41912,42002],"yaml":true},{"content":"Indicates the byte order (\"endianness\") in which data is stored in this computer architecture.","nodes":[{"pos":[0,94],"content":"Indicates the byte order (\"endianness\") in which data is stored in this computer architecture.","nodes":[{"content":"Indicates the byte order (\"endianness\") in which data is stored in this computer architecture.","pos":[0,94]}]}],"pos":[43535,43630],"yaml":true},{"content":"Different computer architectures store data using different byte orders. \"Big-endian\" means the most significant byte is on the left end of a word. \"Little-endian\" means the most significant byte is on the right end of a word.  \n  \n> [!NOTE]\n>  You can convert from network byte order to the byte order of the host computer without retrieving  the value of the <xref:System.BitConverter.IsLittleEndian?displayProperty=fullName> field by passing a 16-bit, 32-bit, or 64 bit integer to the <xref:System.Net.IPAddress.HostToNetworkOrder%2A?displayProperty=fullName> method.","nodes":[{"pos":[0,226],"content":"Different computer architectures store data using different byte orders. \"Big-endian\" means the most significant byte is on the left end of a word. \"Little-endian\" means the most significant byte is on the right end of a word.","nodes":[{"content":"Different computer architectures store data using different byte orders. \"Big-endian\" means the most significant byte is on the left end of a word. \"Little-endian\" means the most significant byte is on the right end of a word.","pos":[0,226],"nodes":[{"content":"Different computer architectures store data using different byte orders.","pos":[0,72]},{"content":"\"Big-endian\" means the most significant byte is on the left end of a word.","pos":[73,147]},{"content":"\"Little-endian\" means the most significant byte is on the right end of a word.","pos":[148,226]}]}]},{"pos":[234,570],"content":"[!NOTE]\n You can convert from network byte order to the byte order of the host computer without retrieving  the value of the <xref:System.BitConverter.IsLittleEndian?displayProperty=fullName> field by passing a 16-bit, 32-bit, or 64 bit integer to the <xref:System.Net.IPAddress.HostToNetworkOrder%2A?displayProperty=fullName> method.","leadings":["","> "],"nodes":[{"content":"You can convert from network byte order to the byte order of the host computer without retrieving  the value of the <ph id=\"ph1\">&lt;xref:System.BitConverter.IsLittleEndian?displayProperty=fullName&gt;</ph> field by passing a 16-bit, 32-bit, or 64 bit integer to the <ph id=\"ph2\">&lt;xref:System.Net.IPAddress.HostToNetworkOrder%2A?displayProperty=fullName&gt;</ph> method.","pos":[9,334],"source":" You can convert from network byte order to the byte order of the host computer without retrieving  the value of the <xref:System.BitConverter.IsLittleEndian?displayProperty=fullName> field by passing a 16-bit, 32-bit, or 64 bit integer to the <xref:System.Net.IPAddress.HostToNetworkOrder%2A?displayProperty=fullName> method."}]}],"pos":[43641,44221],"yaml":true,"extradata":"MT"},{"content":"Returns a Boolean value converted from the byte at a specified position in a byte array.","nodes":[{"pos":[0,88],"content":"Returns a Boolean value converted from the byte at a specified position in a byte array.","nodes":[{"content":"Returns a Boolean value converted from the byte at a specified position in a byte array.","pos":[0,88]}]}],"pos":[47294,47383],"yaml":true},{"content":"To convert a <xref:System.Boolean> value to its byte representation, call the <xref:System.BitConverter.ToBoolean%2A> method.","nodes":[{"pos":[0,125],"content":"To convert a <xref:System.Boolean> value to its byte representation, call the <xref:System.BitConverter.ToBoolean%2A> method.","nodes":[{"content":"To convert a <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph> value to its byte representation, call the <ph id=\"ph2\">&lt;xref:System.BitConverter.ToBoolean%2A&gt;</ph> method.","pos":[0,125],"source":"To convert a <xref:System.Boolean> value to its byte representation, call the <xref:System.BitConverter.ToBoolean%2A> method."}]}],"pos":[47394,47520],"yaml":true,"extradata":"MT"},{"content":"A byte array.","nodes":[{"pos":[0,13],"content":"A byte array.","nodes":[{"content":"A byte array.","pos":[0,13]}]}],"pos":[48295,48309],"yaml":true},{"content":"The index of the byte within <code>value</code>.","nodes":[{"pos":[0,48],"content":"The index of the byte within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The index of the byte within <code>value</code>."}],"pos":[48374,48423],"yaml":true},{"content":"`true` if the byte at <code>startIndex</code> in <code>value</code> is nonzero; otherwise, `false`.","nodes":[{"pos":[0,99],"content":"<ph id=\"ph1\">`true`</ph> if the byte at <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">startIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept> in <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is nonzero; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if the byte at <code>startIndex</code> in <code>value</code> is nonzero; otherwise, `false`."}],"pos":[48481,48583],"yaml":true},{"content":"<code>value</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[48742,48772],"yaml":true},{"content":"<code>startIndex</code> is less than zero or greater than the length of <code>value</code> minus 1.","nodes":[{"pos":[0,99],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is less than zero or greater than the length of <ph id=\"ph2\">&lt;code&gt;value&lt;/code&gt;</ph> minus 1.","source":"<code>startIndex</code> is less than zero or greater than the length of <code>value</code> minus 1."}],"pos":[48886,48986],"yaml":true},{"content":"Returns a Unicode character converted from two bytes at a specified position in a byte array.","nodes":[{"pos":[0,93],"content":"Returns a Unicode character converted from two bytes at a specified position in a byte array.","nodes":[{"content":"Returns a Unicode character converted from two bytes at a specified position in a byte array.","pos":[0,93]}]}],"pos":[50516,50610],"yaml":true},{"content":"The <xref:System.BitConverter.ToChar%2A> method converts the bytes from index `startIndex` to `startIndex` + 1 to a <xref:System.Char> value. The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <xref:System.BitConverter> class topic.","nodes":[{"pos":[0,333],"content":"The <xref:System.BitConverter.ToChar%2A> method converts the bytes from index `startIndex` to `startIndex` + 1 to a <xref:System.Char> value. The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <xref:System.BitConverter> class topic.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.BitConverter.ToChar%2A&gt;</ph> method converts the bytes from index <ph id=\"ph2\">`startIndex`</ph> to <ph id=\"ph3\">`startIndex`</ph> + 1 to a <ph id=\"ph4\">&lt;xref:System.Char&gt;</ph> value.","pos":[0,141],"source":"The <xref:System.BitConverter.ToChar%2A> method converts the bytes from index `startIndex` to `startIndex` + 1 to a <xref:System.Char> value."},{"content":"The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <ph id=\"ph1\">&lt;xref:System.BitConverter&gt;</ph> class topic.","pos":[142,333],"source":" The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <xref:System.BitConverter> class topic."}]}],"pos":[50621,50955],"yaml":true,"extradata":"MT"},{"content":"An array.","nodes":[{"pos":[0,9],"content":"An array.","nodes":[{"content":"An array.","pos":[0,9]}]}],"pos":[51742,51752],"yaml":true},{"content":"The starting position within <code>value</code>.","nodes":[{"pos":[0,48],"content":"The starting position within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The starting position within <code>value</code>."}],"pos":[51817,51866],"yaml":true},{"content":"A character formed by two bytes beginning at <code>startIndex</code>.","nodes":[{"pos":[0,69],"content":"A character formed by two bytes beginning at <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">startIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A character formed by two bytes beginning at <code>startIndex</code>."}],"pos":[51921,51991],"yaml":true},{"content":"<code>startIndex</code> equals the length of <code>value</code> minus 1.","nodes":[{"pos":[0,72],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> equals the length of <ph id=\"ph2\">&lt;code&gt;value&lt;/code&gt;</ph> minus 1.","source":"<code>startIndex</code> equals the length of <code>value</code> minus 1."}],"pos":[52139,52212],"yaml":true},{"content":"<code>value</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[52314,52344],"yaml":true},{"content":"<code>startIndex</code> is less than zero or greater than the length of <code>value</code> minus 1.","nodes":[{"pos":[0,99],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is less than zero or greater than the length of <ph id=\"ph2\">&lt;code&gt;value&lt;/code&gt;</ph> minus 1.","source":"<code>startIndex</code> is less than zero or greater than the length of <code>value</code> minus 1."}],"pos":[52458,52558],"yaml":true},{"content":"Returns a double-precision floating point number converted from eight bytes at a specified position in a byte array.","nodes":[{"pos":[0,116],"content":"Returns a double-precision floating point number converted from eight bytes at a specified position in a byte array.","nodes":[{"content":"Returns a double-precision floating point number converted from eight bytes at a specified position in a byte array.","pos":[0,116]}]}],"pos":[54100,54217],"yaml":true},{"content":"The <xref:System.BitConverter.ToDouble%2A> method converts the bytes from index `startIndex` to `startIndex` + 7 to a <xref:System.Double> value. The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <xref:System.BitConverter> class topic.","nodes":[{"pos":[0,337],"content":"The <xref:System.BitConverter.ToDouble%2A> method converts the bytes from index `startIndex` to `startIndex` + 7 to a <xref:System.Double> value. The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <xref:System.BitConverter> class topic.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.BitConverter.ToDouble%2A&gt;</ph> method converts the bytes from index <ph id=\"ph2\">`startIndex`</ph> to <ph id=\"ph3\">`startIndex`</ph> + 7 to a <ph id=\"ph4\">&lt;xref:System.Double&gt;</ph> value.","pos":[0,145],"source":"The <xref:System.BitConverter.ToDouble%2A> method converts the bytes from index `startIndex` to `startIndex` + 7 to a <xref:System.Double> value."},{"content":"The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <ph id=\"ph1\">&lt;xref:System.BitConverter&gt;</ph> class topic.","pos":[146,337],"source":" The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <xref:System.BitConverter> class topic."}]}],"pos":[54228,54566],"yaml":true,"extradata":"MT"},{"content":"An array of bytes.","nodes":[{"pos":[0,18],"content":"An array of bytes.","nodes":[{"content":"An array of bytes.","pos":[0,18]}]}],"pos":[55346,55365],"yaml":true},{"content":"The starting position within <code>value</code>.","nodes":[{"pos":[0,48],"content":"The starting position within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The starting position within <code>value</code>."}],"pos":[55430,55479],"yaml":true},{"content":"A double precision floating point number formed by eight bytes beginning at <code>startIndex</code>.","nodes":[{"pos":[0,100],"content":"A double precision floating point number formed by eight bytes beginning at <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">startIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A double precision floating point number formed by eight bytes beginning at <code>startIndex</code>."}],"pos":[55536,55637],"yaml":true},{"content":"<code>startIndex</code> is greater than or equal to the length of <code>value</code> minus 7, and is less than or equal to the length of <code>value</code> minus 1.","nodes":[{"pos":[0,164],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is greater than or equal to the length of <ph id=\"ph2\">&lt;code&gt;value&lt;/code&gt;</ph> minus 7, and is less than or equal to the length of <ph id=\"ph3\">&lt;code&gt;value&lt;/code&gt;</ph> minus 1.","source":"<code>startIndex</code> is greater than or equal to the length of <code>value</code> minus 7, and is less than or equal to the length of <code>value</code> minus 1."}],"pos":[55787,55952],"yaml":true},{"content":"<code>value</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[56054,56084],"yaml":true},{"content":"<code>startIndex</code> is less than zero or greater than the length of <code>value</code> minus 1.","nodes":[{"pos":[0,99],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is less than zero or greater than the length of <ph id=\"ph2\">&lt;code&gt;value&lt;/code&gt;</ph> minus 1.","source":"<code>startIndex</code> is less than zero or greater than the length of <code>value</code> minus 1."}],"pos":[56198,56298],"yaml":true},{"content":"Returns a 16-bit signed integer converted from two bytes at a specified position in a byte array.","nodes":[{"pos":[0,97],"content":"Returns a 16-bit signed integer converted from two bytes at a specified position in a byte array.","nodes":[{"content":"Returns a 16-bit signed integer converted from two bytes at a specified position in a byte array.","pos":[0,97]}]}],"pos":[57851,57949],"yaml":true},{"content":"The <xref:System.BitConverter.ToInt16%2A> method converts the bytes from index `startIndex` to `startIndex` + 1 to an <xref:System.Int16> value. The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <xref:System.BitConverter> class topic.","nodes":[{"pos":[0,336],"content":"The <xref:System.BitConverter.ToInt16%2A> method converts the bytes from index `startIndex` to `startIndex` + 1 to an <xref:System.Int16> value. The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <xref:System.BitConverter> class topic.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.BitConverter.ToInt16%2A&gt;</ph> method converts the bytes from index <ph id=\"ph2\">`startIndex`</ph> to <ph id=\"ph3\">`startIndex`</ph> + 1 to an <ph id=\"ph4\">&lt;xref:System.Int16&gt;</ph> value.","pos":[0,144],"source":"The <xref:System.BitConverter.ToInt16%2A> method converts the bytes from index `startIndex` to `startIndex` + 1 to an <xref:System.Int16> value."},{"content":"The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <ph id=\"ph1\">&lt;xref:System.BitConverter&gt;</ph> class topic.","pos":[145,336],"source":" The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <xref:System.BitConverter> class topic."}]}],"pos":[57960,58297],"yaml":true,"extradata":"MT"},{"content":"An array of bytes.","nodes":[{"pos":[0,18],"content":"An array of bytes.","nodes":[{"content":"An array of bytes.","pos":[0,18]}]}],"pos":[59064,59083],"yaml":true},{"content":"The starting position within <code>value</code>.","nodes":[{"pos":[0,48],"content":"The starting position within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The starting position within <code>value</code>."}],"pos":[59148,59197],"yaml":true},{"content":"A 16-bit signed integer formed by two bytes beginning at <code>startIndex</code>.","nodes":[{"pos":[0,81],"content":"A 16-bit signed integer formed by two bytes beginning at <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">startIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A 16-bit signed integer formed by two bytes beginning at <code>startIndex</code>."}],"pos":[59253,59335],"yaml":true},{"content":"<code>startIndex</code> equals the length of <code>value</code> minus 1.","nodes":[{"pos":[0,72],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> equals the length of <ph id=\"ph2\">&lt;code&gt;value&lt;/code&gt;</ph> minus 1.","source":"<code>startIndex</code> equals the length of <code>value</code> minus 1."}],"pos":[59484,59557],"yaml":true},{"content":"<code>value</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[59659,59689],"yaml":true},{"content":"<code>startIndex</code> is less than zero or greater than the length of <code>value</code> minus 1.","nodes":[{"pos":[0,99],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is less than zero or greater than the length of <ph id=\"ph2\">&lt;code&gt;value&lt;/code&gt;</ph> minus 1.","source":"<code>startIndex</code> is less than zero or greater than the length of <code>value</code> minus 1."}],"pos":[59803,59903],"yaml":true},{"content":"Returns a 32-bit signed integer converted from four bytes at a specified position in a byte array.","nodes":[{"pos":[0,98],"content":"Returns a 32-bit signed integer converted from four bytes at a specified position in a byte array.","nodes":[{"content":"Returns a 32-bit signed integer converted from four bytes at a specified position in a byte array.","pos":[0,98]}]}],"pos":[61456,61555],"yaml":true},{"content":"The <xref:System.BitConverter.ToInt32%2A> method converts the bytes from index `startIndex` to `startIndex` + 3 to an <xref:System.Int32> value. The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of <xref:System.BitConverter>.","nodes":[{"pos":[0,320],"content":"The <xref:System.BitConverter.ToInt32%2A> method converts the bytes from index `startIndex` to `startIndex` + 3 to an <xref:System.Int32> value. The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of <xref:System.BitConverter>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.BitConverter.ToInt32%2A&gt;</ph> method converts the bytes from index <ph id=\"ph2\">`startIndex`</ph> to <ph id=\"ph3\">`startIndex`</ph> + 3 to an <ph id=\"ph4\">&lt;xref:System.Int32&gt;</ph> value.","pos":[0,144],"source":"The <xref:System.BitConverter.ToInt32%2A> method converts the bytes from index `startIndex` to `startIndex` + 3 to an <xref:System.Int32> value."},{"content":"The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of <ph id=\"ph1\">&lt;xref:System.BitConverter&gt;</ph>.","pos":[145,320],"source":" The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of <xref:System.BitConverter>."}]}],"pos":[61566,61887],"yaml":true,"extradata":"MT"},{"content":"An array of bytes.","nodes":[{"pos":[0,18],"content":"An array of bytes.","nodes":[{"content":"An array of bytes.","pos":[0,18]}]}],"pos":[62708,62727],"yaml":true},{"content":"The starting position within <code>value</code>.","nodes":[{"pos":[0,48],"content":"The starting position within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The starting position within <code>value</code>."}],"pos":[62792,62841],"yaml":true},{"content":"A 32-bit signed integer formed by four bytes beginning at <code>startIndex</code>.","nodes":[{"pos":[0,82],"content":"A 32-bit signed integer formed by four bytes beginning at <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">startIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A 32-bit signed integer formed by four bytes beginning at <code>startIndex</code>."}],"pos":[62897,62980],"yaml":true},{"content":"<code>startIndex</code> is greater than or equal to the length of <code>value</code> minus 3, and is less than or equal to the length of <code>value</code> minus 1.","nodes":[{"pos":[0,164],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is greater than or equal to the length of <ph id=\"ph2\">&lt;code&gt;value&lt;/code&gt;</ph> minus 3, and is less than or equal to the length of <ph id=\"ph3\">&lt;code&gt;value&lt;/code&gt;</ph> minus 1.","source":"<code>startIndex</code> is greater than or equal to the length of <code>value</code> minus 3, and is less than or equal to the length of <code>value</code> minus 1."}],"pos":[63129,63294],"yaml":true},{"content":"<code>value</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[63396,63426],"yaml":true},{"content":"<code>startIndex</code> is less than zero or greater than the length of <code>value</code> minus 1.","nodes":[{"pos":[0,99],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is less than zero or greater than the length of <ph id=\"ph2\">&lt;code&gt;value&lt;/code&gt;</ph> minus 1.","source":"<code>startIndex</code> is less than zero or greater than the length of <code>value</code> minus 1."}],"pos":[63540,63640],"yaml":true},{"content":"Returns a 64-bit signed integer converted from eight bytes at a specified position in a byte array.","nodes":[{"pos":[0,99],"content":"Returns a 64-bit signed integer converted from eight bytes at a specified position in a byte array.","nodes":[{"content":"Returns a 64-bit signed integer converted from eight bytes at a specified position in a byte array.","pos":[0,99]}]}],"pos":[65193,65293],"yaml":true},{"content":"The <xref:System.BitConverter.ToInt64%2A> method converts the bytes from index `startIndex` to `startIndex` + 7 to a <xref:System.Int64> value. The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <xref:System.BitConverter> class topic.","nodes":[{"pos":[0,335],"content":"The <xref:System.BitConverter.ToInt64%2A> method converts the bytes from index `startIndex` to `startIndex` + 7 to a <xref:System.Int64> value. The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <xref:System.BitConverter> class topic.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.BitConverter.ToInt64%2A&gt;</ph> method converts the bytes from index <ph id=\"ph2\">`startIndex`</ph> to <ph id=\"ph3\">`startIndex`</ph> + 7 to a <ph id=\"ph4\">&lt;xref:System.Int64&gt;</ph> value.","pos":[0,143],"source":"The <xref:System.BitConverter.ToInt64%2A> method converts the bytes from index `startIndex` to `startIndex` + 7 to a <xref:System.Int64> value."},{"content":"The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <ph id=\"ph1\">&lt;xref:System.BitConverter&gt;</ph> class topic.","pos":[144,335],"source":" The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <xref:System.BitConverter> class topic."}]}],"pos":[65304,65640],"yaml":true,"extradata":"MT"},{"content":"An array of bytes.","nodes":[{"pos":[0,18],"content":"An array of bytes.","nodes":[{"content":"An array of bytes.","pos":[0,18]}]}],"pos":[66406,66425],"yaml":true},{"content":"The starting position within <code>value</code>.","nodes":[{"pos":[0,48],"content":"The starting position within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The starting position within <code>value</code>."}],"pos":[66490,66539],"yaml":true},{"content":"A 64-bit signed integer formed by eight bytes beginning at <code>startIndex</code>.","nodes":[{"pos":[0,83],"content":"A 64-bit signed integer formed by eight bytes beginning at <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">startIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A 64-bit signed integer formed by eight bytes beginning at <code>startIndex</code>."}],"pos":[66595,66679],"yaml":true},{"content":"<code>startIndex</code> is greater than or equal to the length of <code>value</code> minus 7, and is less than or equal to the length of <code>value</code> minus 1.","nodes":[{"pos":[0,164],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is greater than or equal to the length of <ph id=\"ph2\">&lt;code&gt;value&lt;/code&gt;</ph> minus 7, and is less than or equal to the length of <ph id=\"ph3\">&lt;code&gt;value&lt;/code&gt;</ph> minus 1.","source":"<code>startIndex</code> is greater than or equal to the length of <code>value</code> minus 7, and is less than or equal to the length of <code>value</code> minus 1."}],"pos":[66828,66993],"yaml":true},{"content":"<code>value</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[67095,67125],"yaml":true},{"content":"<code>startIndex</code> is less than zero or greater than the length of <code>value</code> minus 1.","nodes":[{"pos":[0,99],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is less than zero or greater than the length of <ph id=\"ph2\">&lt;code&gt;value&lt;/code&gt;</ph> minus 1.","source":"<code>startIndex</code> is less than zero or greater than the length of <code>value</code> minus 1."}],"pos":[67239,67339],"yaml":true},{"content":"Returns a single-precision floating point number converted from four bytes at a specified position in a byte array.","nodes":[{"pos":[0,115],"content":"Returns a single-precision floating point number converted from four bytes at a specified position in a byte array.","nodes":[{"content":"Returns a single-precision floating point number converted from four bytes at a specified position in a byte array.","pos":[0,115]}]}],"pos":[68898,69014],"yaml":true},{"content":"The <xref:System.BitConverter.ToSingle%2A> method converts the bytes from index `startIndex` to `startIndex` + 3 to a <xref:System.Single> value. The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of <xref:System.BitConverter>.","nodes":[{"pos":[0,321],"content":"The <xref:System.BitConverter.ToSingle%2A> method converts the bytes from index `startIndex` to `startIndex` + 3 to a <xref:System.Single> value. The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of <xref:System.BitConverter>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.BitConverter.ToSingle%2A&gt;</ph> method converts the bytes from index <ph id=\"ph2\">`startIndex`</ph> to <ph id=\"ph3\">`startIndex`</ph> + 3 to a <ph id=\"ph4\">&lt;xref:System.Single&gt;</ph> value.","pos":[0,145],"source":"The <xref:System.BitConverter.ToSingle%2A> method converts the bytes from index `startIndex` to `startIndex` + 3 to a <xref:System.Single> value."},{"content":"The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of <ph id=\"ph1\">&lt;xref:System.BitConverter&gt;</ph>.","pos":[146,321],"source":" The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of <xref:System.BitConverter>."}]}],"pos":[69025,69347],"yaml":true,"extradata":"MT"},{"content":"An array of bytes.","nodes":[{"pos":[0,18],"content":"An array of bytes.","nodes":[{"content":"An array of bytes.","pos":[0,18]}]}],"pos":[70126,70145],"yaml":true},{"content":"The starting position within <code>value</code>.","nodes":[{"pos":[0,48],"content":"The starting position within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The starting position within <code>value</code>."}],"pos":[70210,70259],"yaml":true},{"content":"A single-precision floating point number formed by four bytes beginning at <code>startIndex</code>.","nodes":[{"pos":[0,99],"content":"A single-precision floating point number formed by four bytes beginning at <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">startIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A single-precision floating point number formed by four bytes beginning at <code>startIndex</code>."}],"pos":[70316,70416],"yaml":true},{"content":"<code>startIndex</code> is greater than or equal to the length of <code>value</code> minus 3, and is less than or equal to the length of <code>value</code> minus 1.","nodes":[{"pos":[0,164],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is greater than or equal to the length of <ph id=\"ph2\">&lt;code&gt;value&lt;/code&gt;</ph> minus 3, and is less than or equal to the length of <ph id=\"ph3\">&lt;code&gt;value&lt;/code&gt;</ph> minus 1.","source":"<code>startIndex</code> is greater than or equal to the length of <code>value</code> minus 3, and is less than or equal to the length of <code>value</code> minus 1."}],"pos":[70566,70731],"yaml":true},{"content":"<code>value</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[70833,70863],"yaml":true},{"content":"<code>startIndex</code> is less than zero or greater than the length of <code>value</code> minus 1.","nodes":[{"pos":[0,99],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is less than zero or greater than the length of <ph id=\"ph2\">&lt;code&gt;value&lt;/code&gt;</ph> minus 1.","source":"<code>startIndex</code> is less than zero or greater than the length of <code>value</code> minus 1."}],"pos":[70977,71077],"yaml":true},{"content":"Converts the numeric value of each element of a specified array of bytes to its equivalent hexadecimal string representation.","nodes":[{"pos":[0,125],"content":"Converts the numeric value of each element of a specified array of bytes to its equivalent hexadecimal string representation.","nodes":[{"content":"Converts the numeric value of each element of a specified array of bytes to its equivalent hexadecimal string representation.","pos":[0,125]}]}],"pos":[72576,72702],"yaml":true},{"content":"All the elements of `value` are converted. The order of hexadecimal strings returned by the <xref:System.BitConverter.ToString%2A> method depends on whether the computer architecture is little-endian or big-endian.","nodes":[{"pos":[0,214],"content":"All the elements of `value` are converted. The order of hexadecimal strings returned by the <xref:System.BitConverter.ToString%2A> method depends on whether the computer architecture is little-endian or big-endian.","nodes":[{"content":"All the elements of <ph id=\"ph1\">`value`</ph> are converted.","pos":[0,42],"source":"All the elements of `value` are converted."},{"content":"The order of hexadecimal strings returned by the <ph id=\"ph1\">&lt;xref:System.BitConverter.ToString%2A&gt;</ph> method depends on whether the computer architecture is little-endian or big-endian.","pos":[43,214],"source":" The order of hexadecimal strings returned by the <xref:System.BitConverter.ToString%2A> method depends on whether the computer architecture is little-endian or big-endian."}]}],"pos":[72713,72928],"yaml":true,"extradata":"MT"},{"content":"An array of bytes.","nodes":[{"pos":[0,18],"content":"An array of bytes.","nodes":[{"content":"An array of bytes.","pos":[0,18]}]}],"pos":[73657,73676],"yaml":true},{"content":"A string of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in <code>value</code>; for example, \"7F-2C-4A-00\".","nodes":[{"pos":[0,155],"content":"A string of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>; for example, \"7F-2C-4A-00\".","source":"A string of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in <code>value</code>; for example, \"7F-2C-4A-00\"."}],"pos":[73733,73889],"yaml":true},{"content":"<code>value</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[74047,74077],"yaml":true},{"content":"Converts the numeric value of each element of a specified subarray of bytes to its equivalent hexadecimal string representation.","nodes":[{"pos":[0,128],"content":"Converts the numeric value of each element of a specified subarray of bytes to its equivalent hexadecimal string representation.","nodes":[{"content":"Converts the numeric value of each element of a specified subarray of bytes to its equivalent hexadecimal string representation.","pos":[0,128]}]}],"pos":[75619,75748],"yaml":true},{"content":"The elements from array position `startIndex` to the end of the array are converted. The order of hexadecimal strings returned by the <xref:System.BitConverter.ToString%2A> method depends on whether the computer architecture is little-endian or big-endian.","nodes":[{"pos":[0,256],"content":"The elements from array position `startIndex` to the end of the array are converted. The order of hexadecimal strings returned by the <xref:System.BitConverter.ToString%2A> method depends on whether the computer architecture is little-endian or big-endian.","nodes":[{"content":"The elements from array position <ph id=\"ph1\">`startIndex`</ph> to the end of the array are converted.","pos":[0,84],"source":"The elements from array position `startIndex` to the end of the array are converted."},{"content":"The order of hexadecimal strings returned by the <ph id=\"ph1\">&lt;xref:System.BitConverter.ToString%2A&gt;</ph> method depends on whether the computer architecture is little-endian or big-endian.","pos":[85,256],"source":" The order of hexadecimal strings returned by the <xref:System.BitConverter.ToString%2A> method depends on whether the computer architecture is little-endian or big-endian."}]}],"pos":[75759,76016],"yaml":true,"extradata":"MT"},{"content":"An array of bytes.","nodes":[{"pos":[0,18],"content":"An array of bytes.","nodes":[{"content":"An array of bytes.","pos":[0,18]}]}],"pos":[76813,76832],"yaml":true},{"content":"The starting position within <code>value</code>.","nodes":[{"pos":[0,48],"content":"The starting position within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The starting position within <code>value</code>."}],"pos":[76897,76946],"yaml":true},{"content":"A string of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in a subarray of <code>value</code>; for example, \"7F-2C-4A-00\".","nodes":[{"pos":[0,169],"content":"A string of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in a subarray of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>; for example, \"7F-2C-4A-00\".","source":"A string of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in a subarray of <code>value</code>; for example, \"7F-2C-4A-00\"."}],"pos":[77003,77173],"yaml":true},{"content":"<code>value</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[77331,77361],"yaml":true},{"content":"<code>startIndex</code> is less than zero or greater than the length of <code>value</code> minus 1.","nodes":[{"pos":[0,99],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is less than zero or greater than the length of <ph id=\"ph2\">&lt;code&gt;value&lt;/code&gt;</ph> minus 1.","source":"<code>startIndex</code> is less than zero or greater than the length of <code>value</code> minus 1."}],"pos":[77475,77575],"yaml":true},{"content":"Converts the numeric value of each element of a specified subarray of bytes to its equivalent hexadecimal string representation.","nodes":[{"pos":[0,128],"content":"Converts the numeric value of each element of a specified subarray of bytes to its equivalent hexadecimal string representation.","nodes":[{"content":"Converts the numeric value of each element of a specified subarray of bytes to its equivalent hexadecimal string representation.","pos":[0,128]}]}],"pos":[79177,79306],"yaml":true},{"content":"The `length` elements from array position `startIndex` are converted. If `length` equals zero, the method returns <xref:System.String?displayProperty=fullName>.  \n  \n The order of hexadecimal strings returned by the <xref:System.BitConverter.ToString%2A> method depends on whether the computer architecture is little-endian or big-endian.","nodes":[{"pos":[0,160],"content":"The `length` elements from array position `startIndex` are converted. If `length` equals zero, the method returns <xref:System.String?displayProperty=fullName>.","nodes":[{"content":"The <ph id=\"ph1\">`length`</ph> elements from array position <ph id=\"ph2\">`startIndex`</ph> are converted.","pos":[0,69],"source":"The `length` elements from array position `startIndex` are converted."},{"content":"If <ph id=\"ph1\">`length`</ph> equals zero, the method returns <ph id=\"ph2\">&lt;xref:System.String?displayProperty=fullName&gt;</ph>.","pos":[70,160],"source":" If `length` equals zero, the method returns <xref:System.String?displayProperty=fullName>."}]},{"pos":[167,338],"content":"The order of hexadecimal strings returned by the <xref:System.BitConverter.ToString%2A> method depends on whether the computer architecture is little-endian or big-endian.","nodes":[{"content":"The order of hexadecimal strings returned by the <ph id=\"ph1\">&lt;xref:System.BitConverter.ToString%2A&gt;</ph> method depends on whether the computer architecture is little-endian or big-endian.","pos":[0,171],"source":"The order of hexadecimal strings returned by the <xref:System.BitConverter.ToString%2A> method depends on whether the computer architecture is little-endian or big-endian."}]}],"pos":[79317,79660],"yaml":true,"extradata":"MT"},{"content":"An array of bytes.","nodes":[{"pos":[0,18],"content":"An array of bytes.","nodes":[{"content":"An array of bytes.","pos":[0,18]}]}],"pos":[80496,80515],"yaml":true},{"content":"The starting position within <code>value</code>.","nodes":[{"pos":[0,48],"content":"The starting position within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The starting position within <code>value</code>."}],"pos":[80580,80629],"yaml":true},{"content":"The number of array elements in <code>value</code> to convert.","nodes":[{"pos":[0,62],"content":"The number of array elements in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> to convert.","source":"The number of array elements in <code>value</code> to convert."}],"pos":[80690,80753],"yaml":true},{"content":"A string of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in a subarray of <code>value</code>; for example, \"7F-2C-4A-00\".","nodes":[{"pos":[0,169],"content":"A string of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in a subarray of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>; for example, \"7F-2C-4A-00\".","source":"A string of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in a subarray of <code>value</code>; for example, \"7F-2C-4A-00\"."}],"pos":[80810,80980],"yaml":true},{"content":"<code>value</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[81138,81168],"yaml":true},{"content":"<code>startIndex</code> or <code>length</code> is less than zero.  \n  \n -or-  \n  \n <code>startIndex</code> is greater than zero and is greater than or equal to the length of <code>value</code>.","nodes":[{"pos":[0,65],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;length&lt;/code&gt;</ph> is less than zero.","source":"<code>startIndex</code> or <code>length</code> is less than zero."},{"pos":[72,76],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[83,193],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is greater than zero and is greater than or equal to the length of <ph id=\"ph2\">&lt;code&gt;value&lt;/code&gt;</ph>.","source":"<code>startIndex</code> is greater than zero and is greater than or equal to the length of <code>value</code>."}],"pos":[81282,81482],"yaml":true},{"content":"The combination of <code>startIndex</code> and <code>length</code> does not specify a position within <code>value</code>; that is, the <code>startIndex</code> parameter is greater than the length of <code>value</code> minus the <code>length</code> parameter.","nodes":[{"pos":[0,258],"content":"The combination of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">startIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">length</ph><ept id=\"p2\">&lt;/code&gt;</ept> does not specify a position within <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">value</ph><ept id=\"p3\">&lt;/code&gt;</ept>; that is, the <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph4\">startIndex</ph><ept id=\"p4\">&lt;/code&gt;</ept> parameter is greater than the length of <bpt id=\"p5\">&lt;code&gt;</bpt><ph id=\"ph5\">value</ph><ept id=\"p5\">&lt;/code&gt;</ept> minus the <bpt id=\"p6\">&lt;code&gt;</bpt><ph id=\"ph6\">length</ph><ept id=\"p6\">&lt;/code&gt;</ept> parameter.","source":"The combination of <code>startIndex</code> and <code>length</code> does not specify a position within <code>value</code>; that is, the <code>startIndex</code> parameter is greater than the length of <code>value</code> minus the <code>length</code> parameter."}],"pos":[81576,81835],"yaml":true},{"content":"Returns a 16-bit unsigned integer converted from two bytes at a specified position in a byte array.","nodes":[{"pos":[0,99],"content":"Returns a 16-bit unsigned integer converted from two bytes at a specified position in a byte array.","nodes":[{"content":"Returns a 16-bit unsigned integer converted from two bytes at a specified position in a byte array.","pos":[0,99]}]}],"pos":[83377,83477],"yaml":true},{"content":"The <xref:System.BitConverter.ToUInt16%2A> method converts the bytes from index `startIndex` to `startIndex` + 1 to a <xref:System.UInt16> value. The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <xref:System.BitConverter> class topic.","nodes":[{"pos":[0,337],"content":"The <xref:System.BitConverter.ToUInt16%2A> method converts the bytes from index `startIndex` to `startIndex` + 1 to a <xref:System.UInt16> value. The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <xref:System.BitConverter> class topic.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.BitConverter.ToUInt16%2A&gt;</ph> method converts the bytes from index <ph id=\"ph2\">`startIndex`</ph> to <ph id=\"ph3\">`startIndex`</ph> + 1 to a <ph id=\"ph4\">&lt;xref:System.UInt16&gt;</ph> value.","pos":[0,145],"source":"The <xref:System.BitConverter.ToUInt16%2A> method converts the bytes from index `startIndex` to `startIndex` + 1 to a <xref:System.UInt16> value."},{"content":"The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <ph id=\"ph1\">&lt;xref:System.BitConverter&gt;</ph> class topic.","pos":[146,337],"source":" The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <xref:System.BitConverter> class topic."}]}],"pos":[83488,83826],"yaml":true,"extradata":"MT"},{"content":"The array of bytes.","nodes":[{"pos":[0,19],"content":"The array of bytes.","nodes":[{"content":"The array of bytes.","pos":[0,19]}]}],"pos":[84645,84665],"yaml":true},{"content":"The starting position within <code>value</code>.","nodes":[{"pos":[0,48],"content":"The starting position within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The starting position within <code>value</code>."}],"pos":[84730,84779],"yaml":true},{"content":"A 16-bit unsigned integer formed by two bytes beginning at <code>startIndex</code>.","nodes":[{"pos":[0,83],"content":"A 16-bit unsigned integer formed by two bytes beginning at <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">startIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A 16-bit unsigned integer formed by two bytes beginning at <code>startIndex</code>."}],"pos":[84836,84920],"yaml":true},{"content":"<code>startIndex</code> equals the length of <code>value</code> minus 1.","nodes":[{"pos":[0,72],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> equals the length of <ph id=\"ph2\">&lt;code&gt;value&lt;/code&gt;</ph> minus 1.","source":"<code>startIndex</code> equals the length of <code>value</code> minus 1."}],"pos":[85070,85143],"yaml":true},{"content":"<code>value</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[85245,85275],"yaml":true},{"content":"<code>startIndex</code> is less than zero or greater than the length of <code>value</code> minus 1.","nodes":[{"pos":[0,99],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is less than zero or greater than the length of <ph id=\"ph2\">&lt;code&gt;value&lt;/code&gt;</ph> minus 1.","source":"<code>startIndex</code> is less than zero or greater than the length of <code>value</code> minus 1."}],"pos":[85389,85489],"yaml":true},{"content":"Returns a 32-bit unsigned integer converted from four bytes at a specified position in a byte array.","nodes":[{"pos":[0,100],"content":"Returns a 32-bit unsigned integer converted from four bytes at a specified position in a byte array.","nodes":[{"content":"Returns a 32-bit unsigned integer converted from four bytes at a specified position in a byte array.","pos":[0,100]}]}],"pos":[87084,87185],"yaml":true},{"content":"The <xref:System.BitConverter.ToUInt32%2A> method converts the bytes from index `startIndex` to `startIndex` + 3 to a <xref:System.UInt32> value. The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <xref:System.BitConverter> class topic.","nodes":[{"pos":[0,337],"content":"The <xref:System.BitConverter.ToUInt32%2A> method converts the bytes from index `startIndex` to `startIndex` + 3 to a <xref:System.UInt32> value. The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <xref:System.BitConverter> class topic.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.BitConverter.ToUInt32%2A&gt;</ph> method converts the bytes from index <ph id=\"ph2\">`startIndex`</ph> to <ph id=\"ph3\">`startIndex`</ph> + 3 to a <ph id=\"ph4\">&lt;xref:System.UInt32&gt;</ph> value.","pos":[0,145],"source":"The <xref:System.BitConverter.ToUInt32%2A> method converts the bytes from index `startIndex` to `startIndex` + 3 to a <xref:System.UInt32> value."},{"content":"The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <ph id=\"ph1\">&lt;xref:System.BitConverter&gt;</ph> class topic.","pos":[146,337],"source":" The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <xref:System.BitConverter> class topic."}]}],"pos":[87196,87534],"yaml":true,"extradata":"MT"},{"content":"An array of bytes.","nodes":[{"pos":[0,18],"content":"An array of bytes.","nodes":[{"content":"An array of bytes.","pos":[0,18]}]}],"pos":[88351,88370],"yaml":true},{"content":"The starting position within <code>value</code>.","nodes":[{"pos":[0,48],"content":"The starting position within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The starting position within <code>value</code>."}],"pos":[88435,88484],"yaml":true},{"content":"A 32-bit unsigned integer formed by four bytes beginning at <code>startIndex</code>.","nodes":[{"pos":[0,84],"content":"A 32-bit unsigned integer formed by four bytes beginning at <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">startIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A 32-bit unsigned integer formed by four bytes beginning at <code>startIndex</code>."}],"pos":[88541,88626],"yaml":true},{"content":"<code>startIndex</code> is greater than or equal to the length of <code>value</code> minus 3, and is less than or equal to the length of <code>value</code> minus 1.","nodes":[{"pos":[0,164],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is greater than or equal to the length of <ph id=\"ph2\">&lt;code&gt;value&lt;/code&gt;</ph> minus 3, and is less than or equal to the length of <ph id=\"ph3\">&lt;code&gt;value&lt;/code&gt;</ph> minus 1.","source":"<code>startIndex</code> is greater than or equal to the length of <code>value</code> minus 3, and is less than or equal to the length of <code>value</code> minus 1."}],"pos":[88776,88941],"yaml":true},{"content":"<code>value</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[89043,89073],"yaml":true},{"content":"<code>startIndex</code> is less than zero or greater than the length of <code>value</code> minus 1.","nodes":[{"pos":[0,99],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is less than zero or greater than the length of <ph id=\"ph2\">&lt;code&gt;value&lt;/code&gt;</ph> minus 1.","source":"<code>startIndex</code> is less than zero or greater than the length of <code>value</code> minus 1."}],"pos":[89187,89287],"yaml":true},{"content":"Returns a 64-bit unsigned integer converted from eight bytes at a specified position in a byte array.","nodes":[{"pos":[0,101],"content":"Returns a 64-bit unsigned integer converted from eight bytes at a specified position in a byte array.","nodes":[{"content":"Returns a 64-bit unsigned integer converted from eight bytes at a specified position in a byte array.","pos":[0,101]}]}],"pos":[90882,90984],"yaml":true},{"content":"The <xref:System.BitConverter.ToUInt64%2A> method converts the bytes from index `startIndex` to `startIndex` + 7 to a <xref:System.UInt64> value. The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <xref:System.BitConverter> class topic.","nodes":[{"pos":[0,337],"content":"The <xref:System.BitConverter.ToUInt64%2A> method converts the bytes from index `startIndex` to `startIndex` + 7 to a <xref:System.UInt64> value. The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <xref:System.BitConverter> class topic.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.BitConverter.ToUInt64%2A&gt;</ph> method converts the bytes from index <ph id=\"ph2\">`startIndex`</ph> to <ph id=\"ph3\">`startIndex`</ph> + 7 to a <ph id=\"ph4\">&lt;xref:System.UInt64&gt;</ph> value.","pos":[0,145],"source":"The <xref:System.BitConverter.ToUInt64%2A> method converts the bytes from index `startIndex` to `startIndex` + 7 to a <xref:System.UInt64> value."},{"content":"The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <ph id=\"ph1\">&lt;xref:System.BitConverter&gt;</ph> class topic.","pos":[146,337],"source":" The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <xref:System.BitConverter> class topic."}]}],"pos":[90995,91333],"yaml":true,"extradata":"MT"},{"content":"An array of bytes.","nodes":[{"pos":[0,18],"content":"An array of bytes.","nodes":[{"content":"An array of bytes.","pos":[0,18]}]}],"pos":[92151,92170],"yaml":true},{"content":"The starting position within <code>value</code>.","nodes":[{"pos":[0,48],"content":"The starting position within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The starting position within <code>value</code>."}],"pos":[92235,92284],"yaml":true},{"content":"A 64-bit unsigned integer formed by the eight bytes beginning at <code>startIndex</code>.","nodes":[{"pos":[0,89],"content":"A 64-bit unsigned integer formed by the eight bytes beginning at <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">startIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A 64-bit unsigned integer formed by the eight bytes beginning at <code>startIndex</code>."}],"pos":[92341,92431],"yaml":true},{"content":"<code>startIndex</code> is greater than or equal to the length of <code>value</code> minus 7, and is less than or equal to the length of <code>value</code> minus 1.","nodes":[{"pos":[0,164],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is greater than or equal to the length of <ph id=\"ph2\">&lt;code&gt;value&lt;/code&gt;</ph> minus 7, and is less than or equal to the length of <ph id=\"ph3\">&lt;code&gt;value&lt;/code&gt;</ph> minus 1.","source":"<code>startIndex</code> is greater than or equal to the length of <code>value</code> minus 7, and is less than or equal to the length of <code>value</code> minus 1."}],"pos":[92581,92746],"yaml":true},{"content":"<code>value</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[92848,92878],"yaml":true},{"content":"<code>startIndex</code> is less than zero or greater than the length of <code>value</code> minus 1.","nodes":[{"pos":[0,99],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is less than zero or greater than the length of <ph id=\"ph2\">&lt;code&gt;value&lt;/code&gt;</ph> minus 1.","source":"<code>startIndex</code> is less than zero or greater than the length of <code>value</code> minus 1."}],"pos":[92992,93092],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.BitConverter\n  commentId: T:System.BitConverter\n  id: BitConverter\n  children:\n  - System.BitConverter.DoubleToInt64Bits(System.Double)\n  - System.BitConverter.GetBytes(System.Boolean)\n  - System.BitConverter.GetBytes(System.Char)\n  - System.BitConverter.GetBytes(System.Double)\n  - System.BitConverter.GetBytes(System.Int16)\n  - System.BitConverter.GetBytes(System.Int32)\n  - System.BitConverter.GetBytes(System.Int64)\n  - System.BitConverter.GetBytes(System.Single)\n  - System.BitConverter.GetBytes(System.UInt16)\n  - System.BitConverter.GetBytes(System.UInt32)\n  - System.BitConverter.GetBytes(System.UInt64)\n  - System.BitConverter.Int32BitsToSingle(System.Int32)\n  - System.BitConverter.Int64BitsToDouble(System.Int64)\n  - System.BitConverter.IsLittleEndian\n  - System.BitConverter.SingleToInt32Bits(System.Single)\n  - System.BitConverter.ToBoolean(System.Byte[],System.Int32)\n  - System.BitConverter.ToChar(System.Byte[],System.Int32)\n  - System.BitConverter.ToDouble(System.Byte[],System.Int32)\n  - System.BitConverter.ToInt16(System.Byte[],System.Int32)\n  - System.BitConverter.ToInt32(System.Byte[],System.Int32)\n  - System.BitConverter.ToInt64(System.Byte[],System.Int32)\n  - System.BitConverter.ToSingle(System.Byte[],System.Int32)\n  - System.BitConverter.ToString(System.Byte[])\n  - System.BitConverter.ToString(System.Byte[],System.Int32)\n  - System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)\n  - System.BitConverter.ToUInt16(System.Byte[],System.Int32)\n  - System.BitConverter.ToUInt32(System.Byte[],System.Int32)\n  - System.BitConverter.ToUInt64(System.Byte[],System.Int32)\n  langs:\n  - csharp\n  name: BitConverter\n  nameWithType: BitConverter\n  fullName: System.BitConverter\n  type: Class\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts base data types to an array of bytes, and an array of bytes to base data types.\n  remarks: \"The <xref:System.BitConverter> class helps manipulate value types in their fundamental form, as a series of bytes. A byte is defined as an 8-bit unsigned integer. The <xref:System.BitConverter> class includes static methods to convert each of the primitive types to and from an array of bytes, as the following table illustrates.  \\n  \\n|Type|To byte conversion|From byte conversion|  \\n|----------|------------------------|--------------------------|  \\n|<xref:System.Boolean>|<xref:System.BitConverter.GetBytes%28System.Boolean%29>|<xref:System.BitConverter.ToBoolean%2A>|  \\n|<xref:System.Char>|<xref:System.BitConverter.GetBytes%28System.Char%29>|<xref:System.BitConverter.ToChar%2A>|  \\n|<xref:System.Double>|<xref:System.BitConverter.GetBytes%28System.Double%29><br /><br /> -or-<br /><br /> <xref:System.BitConverter.DoubleToInt64Bits%28System.Double%29>|<xref:System.BitConverter.ToDouble%2A><br /><br /> -or-<br /><br /> <xref:System.BitConverter.Int64BitsToDouble%2A>|  \\n|<xref:System.Int16>|<xref:System.BitConverter.GetBytes%28System.Int16%29>|<xref:System.BitConverter.ToInt16%2A>|  \\n|<xref:System.Int32>|<xref:System.BitConverter.GetBytes%28System.Int32%29>|<xref:System.BitConverter.ToInt32%2A>|  \\n|<xref:System.Int64>|<xref:System.BitConverter.GetBytes%28System.Int64%29>|<xref:System.BitConverter.ToInt64%2A>|  \\n|<xref:System.Single>|<xref:System.BitConverter.GetBytes%28System.Single%29>|<xref:System.BitConverter.ToSingle%2A>|  \\n|<xref:System.UInt16>|<xref:System.BitConverter.GetBytes%28System.UInt16%29>|<xref:System.BitConverter.ToUInt16%2A>|  \\n|<xref:System.UInt32>|<xref:System.BitConverter.GetBytes%28System.UInt32%29>|<xref:System.BitConverter.ToUInt32%2A>|  \\n|<xref:System.UInt64>|<xref:System.BitConverter.GetBytes%28System.UInt64%29>|<xref:System.BitConverter.ToUInt64%2A>|  \\n  \\n If you use <xref:System.BitConverter> methods to round-trip data, make sure that the <xref:System.BitConverter.GetBytes%2A> overload and the `To`*Type* method specify the same type. As the following example illustrates, restoring an array that represents a signed integer by calling the <xref:System.BitConverter.ToUInt32%2A> method can result in a value that is different from the original. For more information, see the entry [Working with Signed Non-Decimal and Bitwise Values](http://go.microsoft.com/fwlink/?LinkId=186999) in the BCL Team Blog.  \\n  \\n [!code-csharp[System.BitConverter.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.Class/CS/example1.cs#3)]\\n [!code-vb[System.BitConverter.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.Class/VB/example1.vb#3)]  \\n  \\n The order of bytes in the array returned by the <xref:System.BitConverter.GetBytes%2A> method overloads (as well as the order of bits in the integer returned by the <xref:System.BitConverter.DoubleToInt64Bits%2A> method and the order of hexadecimal strings returned by the <xref:System.BitConverter.ToString%28System.Byte%5B%5D%29> method) depends on whether the computer architecture is little-endian or big-endian. Similarly, the order of bytes in the array and returned by the `To`*IntegerValue* methods and the <xref:System.BitConverter.ToChar%2A> method depends on whether the computer architecture is little-endian or big-endian. The endianness of an architecture is indicated by the <xref:System.BitConverter.IsLittleEndian> property, which returns `true` on little-endian systems and `false` on big-endian systems. On little-endian systems, lower-order bytes precede higher-order bytes. On big-endian system, higher-order bytes precede lower-order bytes. The following table illustrates the difference in the byte arrays that result from passing the integer 1,234,567,890 (0x499602D2) to the <xref:System.BitConverter.GetBytes%28System.Int32%29> method. The bytes are listed in order from the byte at index 0 to the byte at index 3.  \\n  \\n|||  \\n|-|-|  \\n|Little-endian|D2-02-96-49|  \\n|Big-endian|49-96-02-D2|  \\n  \\n Because the return value of some methods depends on system architecture, be careful when transmitting byte data beyond machine boundaries:  \\n  \\n-   If all systems sending and receiving data are guaranteed to have the same endianness, nothing has be done to the data.  \\n  \\n-   If systems sending and receiving data can have different endianness, always transmit data in a particular order. This means that the order of bytes in the array may have to be reversed either before sending them or after receiving them. A common convention is to transmit data in network byte order (big-endian order). The following example provides an implementation for sending an integer value in network byte order.  \\n  \\n     [!code-csharp[System.BitConverter.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.Class/CS/networkorder1.cs#4)]\\n     [!code-vb[System.BitConverter.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.Class/VB/networkorder1.vb#4)]  \\n  \\n-   If systems sending and receiving data can have different endianness and the data to be transmitted consists of signed integers, call the <xref:System.Net.IPAddress.HostToNetworkOrder%2A?displayProperty=fullName> method to convert the data to network byte order and the <xref:System.Net.IPAddress.NetworkToHostOrder%2A?displayProperty=fullName> method to convert it to the order required by the recipient.\"\n  example:\n  - \"The following code example illustrates the use of several <xref:System.BitConverter> class methods.  \\n  \\n [!code-cpp[System.BitConverter.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.BitConverter.Class/CPP/bitconv.cpp#1)]\\n [!code-csharp[System.BitConverter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.Class/CS/bitconv.cs#1)]\\n [!code-vb[System.BitConverter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.Class/VB/bitconv.vb#1)]\"\n  syntax:\n    content: public static class BitConverter\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/BitConverter.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.BitConverter.DoubleToInt64Bits(System.Double)\n  commentId: M:System.BitConverter.DoubleToInt64Bits(System.Double)\n  id: DoubleToInt64Bits(System.Double)\n  parent: System.BitConverter\n  langs:\n  - csharp\n  name: DoubleToInt64Bits(Double)\n  nameWithType: BitConverter.DoubleToInt64Bits(Double)\n  fullName: BitConverter.DoubleToInt64Bits(Double)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the specified double-precision floating point number to a 64-bit signed integer.\n  remarks: The order of bits in the integer returned by the <xref:System.BitConverter.DoubleToInt64Bits%2A> method depends on whether the computer architecture is little-endian or big-endian.\n  example:\n  - \"The following code example converts the bit patterns of several <xref:System.Double> values to <xref:System.Int64> values with the `DoubleToInt64Bits` method.  \\n  \\n [!code-cpp[System.BitConverter.DoubleInt64#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.BitConverter.DoubleInt64/CPP/dbltobits.cpp#2)]\\n [!code-csharp[System.BitConverter.DoubleInt64#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.DoubleInt64/CS/dbltobits.cs#2)]\\n [!code-vb[System.BitConverter.DoubleInt64#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.DoubleInt64/VB/dbltobits.vb#2)]\"\n  syntax:\n    content: public static long DoubleToInt64Bits (double value);\n    parameters:\n    - id: value\n      type: System.Double\n      description: The number to convert.\n    return:\n      type: System.Int64\n      description: A 64-bit signed integer whose value is equivalent to <code>value</code>.\n  overload: System.BitConverter.DoubleToInt64Bits*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/BitConverter.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.BitConverter.GetBytes(System.Boolean)\n  commentId: M:System.BitConverter.GetBytes(System.Boolean)\n  id: GetBytes(System.Boolean)\n  parent: System.BitConverter\n  langs:\n  - csharp\n  name: GetBytes(Boolean)\n  nameWithType: BitConverter.GetBytes(Boolean)\n  fullName: BitConverter.GetBytes(Boolean)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the specified Boolean value as a byte array.\n  remarks: You can convert a byte array back to a <xref:System.Boolean> value by calling the <xref:System.BitConverter.ToBoolean%2A> method.\n  example:\n  - \"The following example converts the bit patterns of <xref:System.Boolean> values to <xref:System.Byte> arrays with the `GetBytes` method.  \\n  \\n [!code-cpp[System.BitConverter.GetBytes.Others#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.BitConverter.GetBytes.Others/CPP/bytesbool.cpp#1)]\\n [!code-csharp[System.BitConverter.GetBytes.Others#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.GetBytes.Others/CS/bytesbool.cs#1)]\\n [!code-vb[System.BitConverter.GetBytes.Others#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.GetBytes.Others/VB/bytesbool.vb#1)]\"\n  syntax:\n    content: public static byte[] GetBytes (bool value);\n    parameters:\n    - id: value\n      type: System.Boolean\n      description: A Boolean value.\n    return:\n      type: System.Byte[]\n      description: A byte array with length 1.\n  overload: System.BitConverter.GetBytes*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/BitConverter.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.BitConverter.GetBytes(System.Char)\n  commentId: M:System.BitConverter.GetBytes(System.Char)\n  id: GetBytes(System.Char)\n  parent: System.BitConverter\n  langs:\n  - csharp\n  name: GetBytes(Char)\n  nameWithType: BitConverter.GetBytes(Char)\n  fullName: BitConverter.GetBytes(Char)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the specified Unicode character value as an array of bytes.\n  remarks: The order of bytes in the array returned by the <xref:System.BitConverter.GetBytes%2A> method depends on whether the computer architecture is little-endian or big-endian.\n  example:\n  - \"The following code example converts the bit patterns of <xref:System.Char> values (Unicode characters) to <xref:System.Byte> arrays with the `GetBytes` method.  \\n  \\n [!code-cpp[System.BitConverter.GetBytes.Others#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.BitConverter.GetBytes.Others/CPP/byteschar.cpp#2)]\\n [!code-csharp[System.BitConverter.GetBytes.Others#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.GetBytes.Others/CS/byteschar.cs#2)]\\n [!code-vb[System.BitConverter.GetBytes.Others#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.GetBytes.Others/VB/byteschar.vb#2)]\"\n  syntax:\n    content: public static byte[] GetBytes (char value);\n    parameters:\n    - id: value\n      type: System.Char\n      description: A character to convert.\n    return:\n      type: System.Byte[]\n      description: An array of bytes with length 2.\n  overload: System.BitConverter.GetBytes*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/BitConverter.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.BitConverter.GetBytes(System.Double)\n  commentId: M:System.BitConverter.GetBytes(System.Double)\n  id: GetBytes(System.Double)\n  parent: System.BitConverter\n  langs:\n  - csharp\n  name: GetBytes(Double)\n  nameWithType: BitConverter.GetBytes(Double)\n  fullName: BitConverter.GetBytes(Double)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the specified double-precision floating point value as an array of bytes.\n  remarks: The order of bytes in the array returned by the <xref:System.BitConverter.GetBytes%2A> method depends on whether the computer architecture is little-endian or big-endian.\n  example:\n  - \"The following code example converts the bit patterns of <xref:System.Double> values to <xref:System.Byte> arrays with the `GetBytes` method.  \\n  \\n [!code-cpp[System.BitConverter.GetBytes.Others#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.BitConverter.GetBytes.Others/CPP/bytesdouble.cpp#4)]\\n [!code-csharp[System.BitConverter.GetBytes.Others#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.GetBytes.Others/CS/bytesdouble.cs#4)]\\n [!code-vb[System.BitConverter.GetBytes.Others#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.GetBytes.Others/VB/bytesdouble.vb#4)]\"\n  syntax:\n    content: public static byte[] GetBytes (double value);\n    parameters:\n    - id: value\n      type: System.Double\n      description: The number to convert.\n    return:\n      type: System.Byte[]\n      description: An array of bytes with length 8.\n  overload: System.BitConverter.GetBytes*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/BitConverter.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.BitConverter.GetBytes(System.Int16)\n  commentId: M:System.BitConverter.GetBytes(System.Int16)\n  id: GetBytes(System.Int16)\n  parent: System.BitConverter\n  langs:\n  - csharp\n  name: GetBytes(Int16)\n  nameWithType: BitConverter.GetBytes(Int16)\n  fullName: BitConverter.GetBytes(Int16)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the specified 16-bit signed integer value as an array of bytes.\n  remarks: The order of bytes in the array returned by the <xref:System.BitConverter.GetBytes%2A> method depends on whether the computer architecture is little-endian or big-endian.\n  example:\n  - \"The following code example converts the bit patterns of <xref:System.Int16> values to <xref:System.Byte> arrays with the `GetBytes` method.  \\n  \\n [!code-cpp[System.BitConverter.GetBytes.SInts#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.BitConverter.GetBytes.SInts/CPP/bytesint16.cpp#3)]\\n [!code-csharp[System.BitConverter.GetBytes.SInts#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.GetBytes.SInts/CS/bytesint16.cs#3)]\\n [!code-vb[System.BitConverter.GetBytes.SInts#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.GetBytes.SInts/VB/bytesint16.vb#3)]\"\n  syntax:\n    content: public static byte[] GetBytes (short value);\n    parameters:\n    - id: value\n      type: System.Int16\n      description: The number to convert.\n    return:\n      type: System.Byte[]\n      description: An array of bytes with length 2.\n  overload: System.BitConverter.GetBytes*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/BitConverter.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.BitConverter.GetBytes(System.Int32)\n  commentId: M:System.BitConverter.GetBytes(System.Int32)\n  id: GetBytes(System.Int32)\n  parent: System.BitConverter\n  langs:\n  - csharp\n  name: GetBytes(Int32)\n  nameWithType: BitConverter.GetBytes(Int32)\n  fullName: BitConverter.GetBytes(Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the specified 32-bit signed integer value as an array of bytes.\n  remarks: The order of bytes in the array returned by the <xref:System.BitConverter.GetBytes%2A> method depends on whether the computer architecture is little-endian or big-endian.\n  example:\n  - \"The following code example converts the bit patterns of <xref:System.Int32> values to <xref:System.Byte> arrays with the `GetBytes` method.  \\n  \\n [!code-cpp[System.BitConverter.GetBytes.SInts#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.BitConverter.GetBytes.SInts/CPP/bytesint32.cpp#2)]\\n [!code-csharp[System.BitConverter.GetBytes.SInts#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.GetBytes.SInts/CS/bytesint32.cs#2)]\\n [!code-vb[System.BitConverter.GetBytes.SInts#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.GetBytes.SInts/VB/bytesint32.vb#2)]\"\n  syntax:\n    content: public static byte[] GetBytes (int value);\n    parameters:\n    - id: value\n      type: System.Int32\n      description: The number to convert.\n    return:\n      type: System.Byte[]\n      description: An array of bytes with length 4.\n  overload: System.BitConverter.GetBytes*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/BitConverter.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.BitConverter.GetBytes(System.Int64)\n  commentId: M:System.BitConverter.GetBytes(System.Int64)\n  id: GetBytes(System.Int64)\n  parent: System.BitConverter\n  langs:\n  - csharp\n  name: GetBytes(Int64)\n  nameWithType: BitConverter.GetBytes(Int64)\n  fullName: BitConverter.GetBytes(Int64)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the specified 64-bit signed integer value as an array of bytes.\n  remarks: The order of bytes in the array returned by the <xref:System.BitConverter.GetBytes%2A> method depends on whether the computer architecture is little-endian or big-endian.\n  example:\n  - \"The following example calls the <xref:System.BitConverter.GetBytes%2A> method to convert each element in an <xref:System.Int64> array to a<xref:System.Byte> arrays.  \\n  \\n [!code-cpp[System.BitConverter.GetBytes.SInts#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.BitConverter.GetBytes.SInts/CPP/bytesint64.cpp#1)]\\n [!code-csharp[System.BitConverter.GetBytes.SInts#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.GetBytes.SInts/CS/bytesint64.cs#1)]\\n [!code-vb[System.BitConverter.GetBytes.SInts#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.GetBytes.SInts/VB/bytesint64.vb#1)]\"\n  syntax:\n    content: public static byte[] GetBytes (long value);\n    parameters:\n    - id: value\n      type: System.Int64\n      description: The number to convert.\n    return:\n      type: System.Byte[]\n      description: An array of bytes with length 8.\n  overload: System.BitConverter.GetBytes*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/BitConverter.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.BitConverter.GetBytes(System.Single)\n  commentId: M:System.BitConverter.GetBytes(System.Single)\n  id: GetBytes(System.Single)\n  parent: System.BitConverter\n  langs:\n  - csharp\n  name: GetBytes(Single)\n  nameWithType: BitConverter.GetBytes(Single)\n  fullName: BitConverter.GetBytes(Single)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the specified single-precision floating point value as an array of bytes.\n  remarks: The order of bytes in the array returned by the <xref:System.BitConverter.GetBytes%2A> method depends on whether the computer architecture is little-endian or big-endian.\n  example:\n  - \"The following code example converts the bit patterns of <xref:System.Single> values to <xref:System.Byte> arrays with the `GetBytes` method.  \\n  \\n [!code-cpp[System.BitConverter.GetBytes.Others#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.BitConverter.GetBytes.Others/CPP/bytessingle.cpp#3)]\\n [!code-csharp[System.BitConverter.GetBytes.Others#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.GetBytes.Others/CS/bytessingle.cs#3)]\\n [!code-vb[System.BitConverter.GetBytes.Others#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.GetBytes.Others/VB/bytessingle.vb#3)]\"\n  syntax:\n    content: public static byte[] GetBytes (float value);\n    parameters:\n    - id: value\n      type: System.Single\n      description: The number to convert.\n    return:\n      type: System.Byte[]\n      description: An array of bytes with length 4.\n  overload: System.BitConverter.GetBytes*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/BitConverter.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.BitConverter.GetBytes(System.UInt16)\n  commentId: M:System.BitConverter.GetBytes(System.UInt16)\n  id: GetBytes(System.UInt16)\n  parent: System.BitConverter\n  langs:\n  - csharp\n  name: GetBytes(UInt16)\n  nameWithType: BitConverter.GetBytes(UInt16)\n  fullName: BitConverter.GetBytes(UInt16)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the specified 16-bit unsigned integer value as an array of bytes.\n  remarks: The order of bytes in the array returned by the <xref:System.BitConverter.GetBytes%2A> method depends on whether the computer architecture is little-endian or big-endian.\n  example:\n  - \"The following code example converts the bit patterns of <xref:System.UInt16> values to <xref:System.Byte> arrays with the `GetBytes` method.  \\n  \\n [!code-cpp[System.BitConverter.GetBytes.UInts#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.BitConverter.GetBytes.UInts/CPP/bytesuint16.cpp#3)]\\n [!code-csharp[System.BitConverter.GetBytes.UInts#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.GetBytes.UInts/CS/bytesuint16.cs#3)]\\n [!code-vb[System.BitConverter.GetBytes.UInts#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.GetBytes.UInts/VB/bytesuint16.vb#3)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static byte[] GetBytes (ushort value);\n    parameters:\n    - id: value\n      type: System.UInt16\n      description: The number to convert.\n    return:\n      type: System.Byte[]\n      description: An array of bytes with length 2.\n  overload: System.BitConverter.GetBytes*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/BitConverter.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.BitConverter.GetBytes(System.UInt32)\n  commentId: M:System.BitConverter.GetBytes(System.UInt32)\n  id: GetBytes(System.UInt32)\n  parent: System.BitConverter\n  langs:\n  - csharp\n  name: GetBytes(UInt32)\n  nameWithType: BitConverter.GetBytes(UInt32)\n  fullName: BitConverter.GetBytes(UInt32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the specified 32-bit unsigned integer value as an array of bytes.\n  remarks: The order of bytes in the array returned by the <xref:System.BitConverter.GetBytes%2A> method depends on whether the computer architecture is little-endian or big-endian.\n  example:\n  - \"The following code example converts the bit patterns of <xref:System.UInt32> values to <xref:System.Byte> arrays with the `GetBytes` method.  \\n  \\n [!code-cpp[System.BitConverter.GetBytes.UInts#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.BitConverter.GetBytes.UInts/CPP/bytesuint32.cpp#2)]\\n [!code-csharp[System.BitConverter.GetBytes.UInts#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.GetBytes.UInts/CS/bytesuint32.cs#2)]\\n [!code-vb[System.BitConverter.GetBytes.UInts#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.GetBytes.UInts/VB/bytesuint32.vb#2)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static byte[] GetBytes (uint value);\n    parameters:\n    - id: value\n      type: System.UInt32\n      description: The number to convert.\n    return:\n      type: System.Byte[]\n      description: An array of bytes with length 4.\n  overload: System.BitConverter.GetBytes*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/BitConverter.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.BitConverter.GetBytes(System.UInt64)\n  commentId: M:System.BitConverter.GetBytes(System.UInt64)\n  id: GetBytes(System.UInt64)\n  parent: System.BitConverter\n  langs:\n  - csharp\n  name: GetBytes(UInt64)\n  nameWithType: BitConverter.GetBytes(UInt64)\n  fullName: BitConverter.GetBytes(UInt64)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the specified 64-bit unsigned integer value as an array of bytes.\n  remarks: The order of bytes in the array returned by the <xref:System.BitConverter.GetBytes%2A> method depends on whether the computer architecture is little-endian or big-endian.\n  example:\n  - \"The following code example converts the bit patterns of <xref:System.UInt64> values to <xref:System.Byte> arrays with the `GetBytes` method.  \\n  \\n [!code-cpp[System.BitConverter.GetBytes.UInts#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.BitConverter.GetBytes.UInts/CPP/bytesuint64.cpp#1)]\\n [!code-csharp[System.BitConverter.GetBytes.UInts#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.GetBytes.UInts/CS/bytesuint64.cs#1)]\\n [!code-vb[System.BitConverter.GetBytes.UInts#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.GetBytes.UInts/VB/bytesuint64.vb#1)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static byte[] GetBytes (ulong value);\n    parameters:\n    - id: value\n      type: System.UInt64\n      description: The number to convert.\n    return:\n      type: System.Byte[]\n      description: An array of bytes with length 8.\n  overload: System.BitConverter.GetBytes*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/BitConverter.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.BitConverter.Int32BitsToSingle(System.Int32)\n  commentId: M:System.BitConverter.Int32BitsToSingle(System.Int32)\n  id: Int32BitsToSingle(System.Int32)\n  parent: System.BitConverter\n  langs:\n  - csharp\n  name: Int32BitsToSingle(Int32)\n  nameWithType: BitConverter.Int32BitsToSingle(Int32)\n  fullName: BitConverter.Int32BitsToSingle(Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  syntax:\n    content: public static float Int32BitsToSingle (int value);\n    parameters:\n    - id: value\n      type: System.Int32\n      description: ''\n    return:\n      type: System.Single\n      description: ''\n  overload: System.BitConverter.Int32BitsToSingle*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/BitConverter.xml\n- uid: System.BitConverter.Int64BitsToDouble(System.Int64)\n  commentId: M:System.BitConverter.Int64BitsToDouble(System.Int64)\n  id: Int64BitsToDouble(System.Int64)\n  parent: System.BitConverter\n  langs:\n  - csharp\n  name: Int64BitsToDouble(Int64)\n  nameWithType: BitConverter.Int64BitsToDouble(Int64)\n  fullName: BitConverter.Int64BitsToDouble(Int64)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the specified 64-bit signed integer to a double-precision floating point number.\n  remarks: Typically, `value` is an integer that is returned by the <xref:System.BitConverter.DoubleToInt64Bits%2A> method.\n  example:\n  - \"The following code example converts the bit patterns of several <xref:System.Int64> values to <xref:System.Double> values with the `Int64BitsToDouble` method.  \\n  \\n [!code-cpp[System.BitConverter.DoubleInt64#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.BitConverter.DoubleInt64/CPP/bitstodbl.cpp#1)]\\n [!code-csharp[System.BitConverter.DoubleInt64#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.DoubleInt64/CS/bitstodbl.cs#1)]\\n [!code-vb[System.BitConverter.DoubleInt64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.DoubleInt64/VB/bitstodbl.vb#1)]\"\n  syntax:\n    content: public static double Int64BitsToDouble (long value);\n    parameters:\n    - id: value\n      type: System.Int64\n      description: The number to convert.\n    return:\n      type: System.Double\n      description: A double-precision floating point number whose value is equivalent to <code>value</code>.\n  overload: System.BitConverter.Int64BitsToDouble*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/BitConverter.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.BitConverter.IsLittleEndian\n  commentId: F:System.BitConverter.IsLittleEndian\n  id: IsLittleEndian\n  parent: System.BitConverter\n  langs:\n  - csharp\n  name: IsLittleEndian\n  nameWithType: BitConverter.IsLittleEndian\n  fullName: BitConverter.IsLittleEndian\n  type: Field\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Indicates the byte order (\"endianness\") in which data is stored in this computer architecture.\n  remarks: \"Different computer architectures store data using different byte orders. \\\"Big-endian\\\" means the most significant byte is on the left end of a word. \\\"Little-endian\\\" means the most significant byte is on the right end of a word.  \\n  \\n> [!NOTE]\\n>  You can convert from network byte order to the byte order of the host computer without retrieving  the value of the <xref:System.BitConverter.IsLittleEndian?displayProperty=fullName> field by passing a 16-bit, 32-bit, or 64 bit integer to the <xref:System.Net.IPAddress.HostToNetworkOrder%2A?displayProperty=fullName> method.\"\n  example:\n  - \"The following code example illustrates the use of the `IsLittleEndian` field.  \\n  \\n [!code-cpp[System.BitConverter.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.BitConverter.Class/CPP/littleend.cpp#2)]\\n [!code-csharp[System.BitConverter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.Class/CS/littleend.cs#2)]\\n [!code-vb[System.BitConverter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.Class/VB/littleend.vb#2)]\"\n  syntax:\n    content: public static readonly bool IsLittleEndian;\n    return:\n      type: System.Boolean\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/BitConverter.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.BitConverter.SingleToInt32Bits(System.Single)\n  commentId: M:System.BitConverter.SingleToInt32Bits(System.Single)\n  id: SingleToInt32Bits(System.Single)\n  parent: System.BitConverter\n  langs:\n  - csharp\n  name: SingleToInt32Bits(Single)\n  nameWithType: BitConverter.SingleToInt32Bits(Single)\n  fullName: BitConverter.SingleToInt32Bits(Single)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  syntax:\n    content: public static int SingleToInt32Bits (float value);\n    parameters:\n    - id: value\n      type: System.Single\n      description: ''\n    return:\n      type: System.Int32\n      description: ''\n  overload: System.BitConverter.SingleToInt32Bits*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/BitConverter.xml\n- uid: System.BitConverter.ToBoolean(System.Byte[],System.Int32)\n  commentId: M:System.BitConverter.ToBoolean(System.Byte[],System.Int32)\n  id: ToBoolean(System.Byte[],System.Int32)\n  parent: System.BitConverter\n  langs:\n  - csharp\n  name: ToBoolean(Byte[], Int32)\n  nameWithType: BitConverter.ToBoolean(Byte[], Int32)\n  fullName: BitConverter.ToBoolean(Byte[], Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns a Boolean value converted from the byte at a specified position in a byte array.\n  remarks: To convert a <xref:System.Boolean> value to its byte representation, call the <xref:System.BitConverter.ToBoolean%2A> method.\n  example:\n  - \"The following code example converts elements of <xref:System.Byte> arrays to <xref:System.Boolean> values with the `ToBoolean` method.  \\n  \\n [!code-cpp[System.BitConverter.ToXXX.Others#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.BitConverter.ToXXX.Others/CPP/batobool.cpp#1)]\\n [!code-csharp[System.BitConverter.ToXXX.Others#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.ToXXX.Others/CS/batobool.cs#1)]\\n [!code-vb[System.BitConverter.ToXXX.Others#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.ToXXX.Others/VB/batobool.vb#1)]\"\n  syntax:\n    content: public static bool ToBoolean (byte[] value, int startIndex);\n    parameters:\n    - id: value\n      type: System.Byte[]\n      description: A byte array.\n    - id: startIndex\n      type: System.Int32\n      description: The index of the byte within <code>value</code>.\n    return:\n      type: System.Boolean\n      description: '`true` if the byte at <code>startIndex</code> in <code>value</code> is nonzero; otherwise, `false`.'\n  overload: System.BitConverter.ToBoolean*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>startIndex</code> is less than zero or greater than the length of <code>value</code> minus 1.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/BitConverter.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.BitConverter.ToChar(System.Byte[],System.Int32)\n  commentId: M:System.BitConverter.ToChar(System.Byte[],System.Int32)\n  id: ToChar(System.Byte[],System.Int32)\n  parent: System.BitConverter\n  langs:\n  - csharp\n  name: ToChar(Byte[], Int32)\n  nameWithType: BitConverter.ToChar(Byte[], Int32)\n  fullName: BitConverter.ToChar(Byte[], Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns a Unicode character converted from two bytes at a specified position in a byte array.\n  remarks: The <xref:System.BitConverter.ToChar%2A> method converts the bytes from index `startIndex` to `startIndex` + 1 to a <xref:System.Char> value. The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <xref:System.BitConverter> class topic.\n  example:\n  - \"The following code example converts elements of <xref:System.Byte> arrays to <xref:System.Char> values (Unicode characters) with the `ToChar` method.  \\n  \\n [!code-cpp[System.BitConverter.ToXXX.Others#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.BitConverter.ToXXX.Others/CPP/batochar.cpp#2)]\\n [!code-csharp[System.BitConverter.ToXXX.Others#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.ToXXX.Others/CS/batochar.cs#2)]\\n [!code-vb[System.BitConverter.ToXXX.Others#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.ToXXX.Others/VB/batochar.vb#2)]\"\n  syntax:\n    content: public static char ToChar (byte[] value, int startIndex);\n    parameters:\n    - id: value\n      type: System.Byte[]\n      description: An array.\n    - id: startIndex\n      type: System.Int32\n      description: The starting position within <code>value</code>.\n    return:\n      type: System.Char\n      description: A character formed by two bytes beginning at <code>startIndex</code>.\n  overload: System.BitConverter.ToChar*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>startIndex</code> equals the length of <code>value</code> minus 1.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>startIndex</code> is less than zero or greater than the length of <code>value</code> minus 1.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/BitConverter.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.BitConverter.ToDouble(System.Byte[],System.Int32)\n  commentId: M:System.BitConverter.ToDouble(System.Byte[],System.Int32)\n  id: ToDouble(System.Byte[],System.Int32)\n  parent: System.BitConverter\n  langs:\n  - csharp\n  name: ToDouble(Byte[], Int32)\n  nameWithType: BitConverter.ToDouble(Byte[], Int32)\n  fullName: BitConverter.ToDouble(Byte[], Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns a double-precision floating point number converted from eight bytes at a specified position in a byte array.\n  remarks: The <xref:System.BitConverter.ToDouble%2A> method converts the bytes from index `startIndex` to `startIndex` + 7 to a <xref:System.Double> value. The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <xref:System.BitConverter> class topic.\n  example:\n  - \"The following code example converts elements of <xref:System.Byte> arrays to <xref:System.Double> values with the `ToDouble` method.  \\n  \\n [!code-cpp[System.BitConverter.ToXXX.Others#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.BitConverter.ToXXX.Others/CPP/batodouble.cpp#3)]\\n [!code-csharp[System.BitConverter.ToXXX.Others#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.ToXXX.Others/CS/batodouble.cs#3)]\\n [!code-vb[System.BitConverter.ToXXX.Others#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.ToXXX.Others/VB/batodouble.vb#3)]\"\n  syntax:\n    content: public static double ToDouble (byte[] value, int startIndex);\n    parameters:\n    - id: value\n      type: System.Byte[]\n      description: An array of bytes.\n    - id: startIndex\n      type: System.Int32\n      description: The starting position within <code>value</code>.\n    return:\n      type: System.Double\n      description: A double precision floating point number formed by eight bytes beginning at <code>startIndex</code>.\n  overload: System.BitConverter.ToDouble*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>startIndex</code> is greater than or equal to the length of <code>value</code> minus 7, and is less than or equal to the length of <code>value</code> minus 1.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>startIndex</code> is less than zero or greater than the length of <code>value</code> minus 1.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/BitConverter.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.BitConverter.ToInt16(System.Byte[],System.Int32)\n  commentId: M:System.BitConverter.ToInt16(System.Byte[],System.Int32)\n  id: ToInt16(System.Byte[],System.Int32)\n  parent: System.BitConverter\n  langs:\n  - csharp\n  name: ToInt16(Byte[], Int32)\n  nameWithType: BitConverter.ToInt16(Byte[], Int32)\n  fullName: BitConverter.ToInt16(Byte[], Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns a 16-bit signed integer converted from two bytes at a specified position in a byte array.\n  remarks: The <xref:System.BitConverter.ToInt16%2A> method converts the bytes from index `startIndex` to `startIndex` + 1 to an <xref:System.Int16> value. The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <xref:System.BitConverter> class topic.\n  example:\n  - \"The following code example converts elements of <xref:System.Byte> arrays to <xref:System.Int16> values with the `ToInt16` method.  \\n  \\n [!code-cpp[System.BitConverter.ToXXX.SInts#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.BitConverter.ToXXX.SInts/CPP/batoint16.cpp#1)]\\n [!code-csharp[System.BitConverter.ToXXX.SInts#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.ToXXX.SInts/CS/batoint16.cs#1)]\\n [!code-vb[System.BitConverter.ToXXX.SInts#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.ToXXX.SInts/VB/batoint16.vb#1)]\"\n  syntax:\n    content: public static short ToInt16 (byte[] value, int startIndex);\n    parameters:\n    - id: value\n      type: System.Byte[]\n      description: An array of bytes.\n    - id: startIndex\n      type: System.Int32\n      description: The starting position within <code>value</code>.\n    return:\n      type: System.Int16\n      description: A 16-bit signed integer formed by two bytes beginning at <code>startIndex</code>.\n  overload: System.BitConverter.ToInt16*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>startIndex</code> equals the length of <code>value</code> minus 1.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>startIndex</code> is less than zero or greater than the length of <code>value</code> minus 1.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/BitConverter.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.BitConverter.ToInt32(System.Byte[],System.Int32)\n  commentId: M:System.BitConverter.ToInt32(System.Byte[],System.Int32)\n  id: ToInt32(System.Byte[],System.Int32)\n  parent: System.BitConverter\n  langs:\n  - csharp\n  name: ToInt32(Byte[], Int32)\n  nameWithType: BitConverter.ToInt32(Byte[], Int32)\n  fullName: BitConverter.ToInt32(Byte[], Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns a 32-bit signed integer converted from four bytes at a specified position in a byte array.\n  remarks: The <xref:System.BitConverter.ToInt32%2A> method converts the bytes from index `startIndex` to `startIndex` + 3 to an <xref:System.Int32> value. The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of <xref:System.BitConverter>.\n  example:\n  - \"The following example uses the <xref:System.BitConverter.ToInt32%2A> method to create <xref:System.Int32> values from a four-byte array and from the upper four bytes of an eight-byte array. It also uses the <xref:System.BitConverter.GetBytes%28System.Int32%29> and <xref:System.BitConverter.ToInt32%2A> methods to round-trip an <xref:System.Int32> value.  \\n  \\n [!code-csharp[System.BitConverter.ToInt32#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.bitconverter.toint32/cs/toint32.cs#1)]\\n [!code-vb[System.BitConverter.ToInt32#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.bitconverter.toint32/vb/toint32.vb#1)]\"\n  syntax:\n    content: public static int ToInt32 (byte[] value, int startIndex);\n    parameters:\n    - id: value\n      type: System.Byte[]\n      description: An array of bytes.\n    - id: startIndex\n      type: System.Int32\n      description: The starting position within <code>value</code>.\n    return:\n      type: System.Int32\n      description: A 32-bit signed integer formed by four bytes beginning at <code>startIndex</code>.\n  overload: System.BitConverter.ToInt32*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>startIndex</code> is greater than or equal to the length of <code>value</code> minus 3, and is less than or equal to the length of <code>value</code> minus 1.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>startIndex</code> is less than zero or greater than the length of <code>value</code> minus 1.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/BitConverter.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.BitConverter.ToInt64(System.Byte[],System.Int32)\n  commentId: M:System.BitConverter.ToInt64(System.Byte[],System.Int32)\n  id: ToInt64(System.Byte[],System.Int32)\n  parent: System.BitConverter\n  langs:\n  - csharp\n  name: ToInt64(Byte[], Int32)\n  nameWithType: BitConverter.ToInt64(Byte[], Int32)\n  fullName: BitConverter.ToInt64(Byte[], Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns a 64-bit signed integer converted from eight bytes at a specified position in a byte array.\n  remarks: The <xref:System.BitConverter.ToInt64%2A> method converts the bytes from index `startIndex` to `startIndex` + 7 to a <xref:System.Int64> value. The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <xref:System.BitConverter> class topic.\n  example:\n  - \"The following code example converts elements of <xref:System.Byte> arrays to <xref:System.Int64> values with the `ToInt64` method.  \\n  \\n [!code-cpp[System.BitConverter.ToXXX.SInts#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.BitConverter.ToXXX.SInts/CPP/batoint64.cpp#3)]\\n [!code-csharp[System.BitConverter.ToXXX.SInts#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.ToXXX.SInts/CS/batoint64.cs#3)]\\n [!code-vb[System.BitConverter.ToXXX.SInts#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.ToXXX.SInts/VB/batoint64.vb#3)]\"\n  syntax:\n    content: public static long ToInt64 (byte[] value, int startIndex);\n    parameters:\n    - id: value\n      type: System.Byte[]\n      description: An array of bytes.\n    - id: startIndex\n      type: System.Int32\n      description: The starting position within <code>value</code>.\n    return:\n      type: System.Int64\n      description: A 64-bit signed integer formed by eight bytes beginning at <code>startIndex</code>.\n  overload: System.BitConverter.ToInt64*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>startIndex</code> is greater than or equal to the length of <code>value</code> minus 7, and is less than or equal to the length of <code>value</code> minus 1.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>startIndex</code> is less than zero or greater than the length of <code>value</code> minus 1.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/BitConverter.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.BitConverter.ToSingle(System.Byte[],System.Int32)\n  commentId: M:System.BitConverter.ToSingle(System.Byte[],System.Int32)\n  id: ToSingle(System.Byte[],System.Int32)\n  parent: System.BitConverter\n  langs:\n  - csharp\n  name: ToSingle(Byte[], Int32)\n  nameWithType: BitConverter.ToSingle(Byte[], Int32)\n  fullName: BitConverter.ToSingle(Byte[], Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns a single-precision floating point number converted from four bytes at a specified position in a byte array.\n  remarks: The <xref:System.BitConverter.ToSingle%2A> method converts the bytes from index `startIndex` to `startIndex` + 3 to a <xref:System.Single> value. The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of <xref:System.BitConverter>.\n  example:\n  - \"The following code example converts elements of <xref:System.Byte> arrays to <xref:System.Single> values with the `ToSingle` method.  \\n  \\n [!code-cpp[System.BitConverter.ToXXX.Others#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.BitConverter.ToXXX.Others/CPP/batosingle.cpp#4)]\\n [!code-csharp[System.BitConverter.ToXXX.Others#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.ToXXX.Others/CS/batosingle.cs#4)]\\n [!code-vb[System.BitConverter.ToXXX.Others#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.ToXXX.Others/VB/batosingle.vb#4)]\"\n  syntax:\n    content: public static float ToSingle (byte[] value, int startIndex);\n    parameters:\n    - id: value\n      type: System.Byte[]\n      description: An array of bytes.\n    - id: startIndex\n      type: System.Int32\n      description: The starting position within <code>value</code>.\n    return:\n      type: System.Single\n      description: A single-precision floating point number formed by four bytes beginning at <code>startIndex</code>.\n  overload: System.BitConverter.ToSingle*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>startIndex</code> is greater than or equal to the length of <code>value</code> minus 3, and is less than or equal to the length of <code>value</code> minus 1.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>startIndex</code> is less than zero or greater than the length of <code>value</code> minus 1.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/BitConverter.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.BitConverter.ToString(System.Byte[])\n  commentId: M:System.BitConverter.ToString(System.Byte[])\n  id: ToString(System.Byte[])\n  parent: System.BitConverter\n  langs:\n  - csharp\n  name: ToString(Byte[])\n  nameWithType: BitConverter.ToString(Byte[])\n  fullName: BitConverter.ToString(Byte[])\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the numeric value of each element of a specified array of bytes to its equivalent hexadecimal string representation.\n  remarks: All the elements of `value` are converted. The order of hexadecimal strings returned by the <xref:System.BitConverter.ToString%2A> method depends on whether the computer architecture is little-endian or big-endian.\n  example:\n  - \"The following code example converts <xref:System.Byte> arrays to <xref:System.String> objects with the `ToString` method.  \\n  \\n [!code-cpp[System.BitConverter.ToString#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.BitConverter.ToString/CPP/batostring.cpp#1)]\\n [!code-csharp[System.BitConverter.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.ToString/CS/batostring.cs#1)]\\n [!code-vb[System.BitConverter.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.ToString/VB/batostring.vb#1)]\"\n  syntax:\n    content: public static string ToString (byte[] value);\n    parameters:\n    - id: value\n      type: System.Byte[]\n      description: An array of bytes.\n    return:\n      type: System.String\n      description: A string of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in <code>value</code>; for example, \"7F-2C-4A-00\".\n  overload: System.BitConverter.ToString*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/BitConverter.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.BitConverter.ToString(System.Byte[],System.Int32)\n  commentId: M:System.BitConverter.ToString(System.Byte[],System.Int32)\n  id: ToString(System.Byte[],System.Int32)\n  parent: System.BitConverter\n  langs:\n  - csharp\n  name: ToString(Byte[], Int32)\n  nameWithType: BitConverter.ToString(Byte[], Int32)\n  fullName: BitConverter.ToString(Byte[], Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the numeric value of each element of a specified subarray of bytes to its equivalent hexadecimal string representation.\n  remarks: The elements from array position `startIndex` to the end of the array are converted. The order of hexadecimal strings returned by the <xref:System.BitConverter.ToString%2A> method depends on whether the computer architecture is little-endian or big-endian.\n  example:\n  - \"The following code example converts the part of a <xref:System.Byte> array starting at the specified `startIndex` to a <xref:System.String> with the `ToString` method.  \\n  \\n [!code-cpp[System.BitConverter.ToString#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.BitConverter.ToString/CPP/batostringii.cpp#2)]\\n [!code-csharp[System.BitConverter.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.ToString/CS/batostringii.cs#2)]\\n [!code-vb[System.BitConverter.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.ToString/VB/batostringii.vb#2)]\"\n  syntax:\n    content: public static string ToString (byte[] value, int startIndex);\n    parameters:\n    - id: value\n      type: System.Byte[]\n      description: An array of bytes.\n    - id: startIndex\n      type: System.Int32\n      description: The starting position within <code>value</code>.\n    return:\n      type: System.String\n      description: A string of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in a subarray of <code>value</code>; for example, \"7F-2C-4A-00\".\n  overload: System.BitConverter.ToString*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>startIndex</code> is less than zero or greater than the length of <code>value</code> minus 1.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/BitConverter.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)\n  id: ToString(System.Byte[],System.Int32,System.Int32)\n  parent: System.BitConverter\n  langs:\n  - csharp\n  name: ToString(Byte[], Int32, Int32)\n  nameWithType: BitConverter.ToString(Byte[], Int32, Int32)\n  fullName: BitConverter.ToString(Byte[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the numeric value of each element of a specified subarray of bytes to its equivalent hexadecimal string representation.\n  remarks: \"The `length` elements from array position `startIndex` are converted. If `length` equals zero, the method returns <xref:System.String?displayProperty=fullName>.  \\n  \\n The order of hexadecimal strings returned by the <xref:System.BitConverter.ToString%2A> method depends on whether the computer architecture is little-endian or big-endian.\"\n  example:\n  - \"The following example uses the <xref:System.BitConverter.ToString%2A> method to convert part of a byte array, starting at the specified `startIndex` and with the specified `length`, to a string.  \\n  \\n [!code-cpp[System.BitConverter.ToString#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.BitConverter.ToString/CPP/batostringii.cpp#2)]\\n [!code-csharp[System.BitConverter.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.ToString/CS/batostringii.cs#2)]\\n [!code-vb[System.BitConverter.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.ToString/VB/batostringii.vb#2)]\"\n  syntax:\n    content: public static string ToString (byte[] value, int startIndex, int length);\n    parameters:\n    - id: value\n      type: System.Byte[]\n      description: An array of bytes.\n    - id: startIndex\n      type: System.Int32\n      description: The starting position within <code>value</code>.\n    - id: length\n      type: System.Int32\n      description: The number of array elements in <code>value</code> to convert.\n    return:\n      type: System.String\n      description: A string of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in a subarray of <code>value</code>; for example, \"7F-2C-4A-00\".\n  overload: System.BitConverter.ToString*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>startIndex</code> or <code>length</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>startIndex</code> is greater than zero and is greater than or equal to the length of <code>value</code>.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The combination of <code>startIndex</code> and <code>length</code> does not specify a position within <code>value</code>; that is, the <code>startIndex</code> parameter is greater than the length of <code>value</code> minus the <code>length</code> parameter.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/BitConverter.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.BitConverter.ToUInt16(System.Byte[],System.Int32)\n  commentId: M:System.BitConverter.ToUInt16(System.Byte[],System.Int32)\n  id: ToUInt16(System.Byte[],System.Int32)\n  parent: System.BitConverter\n  langs:\n  - csharp\n  name: ToUInt16(Byte[], Int32)\n  nameWithType: BitConverter.ToUInt16(Byte[], Int32)\n  fullName: BitConverter.ToUInt16(Byte[], Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns a 16-bit unsigned integer converted from two bytes at a specified position in a byte array.\n  remarks: The <xref:System.BitConverter.ToUInt16%2A> method converts the bytes from index `startIndex` to `startIndex` + 1 to a <xref:System.UInt16> value. The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <xref:System.BitConverter> class topic.\n  example:\n  - \"The following code example converts elements of <xref:System.Byte> arrays to <xref:System.UInt16> values with the `ToUInt16` method.  \\n  \\n [!code-cpp[System.BitConverter.ToXXX.UInts#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.BitConverter.ToXXX.UInts/CPP/batouint16.cpp#1)]\\n [!code-csharp[System.BitConverter.ToXXX.UInts#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.ToXXX.UInts/CS/batouint16.cs#1)]\\n [!code-vb[System.BitConverter.ToXXX.UInts#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.ToXXX.UInts/VB/batouint16.vb#1)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static ushort ToUInt16 (byte[] value, int startIndex);\n    parameters:\n    - id: value\n      type: System.Byte[]\n      description: The array of bytes.\n    - id: startIndex\n      type: System.Int32\n      description: The starting position within <code>value</code>.\n    return:\n      type: System.UInt16\n      description: A 16-bit unsigned integer formed by two bytes beginning at <code>startIndex</code>.\n  overload: System.BitConverter.ToUInt16*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>startIndex</code> equals the length of <code>value</code> minus 1.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>startIndex</code> is less than zero or greater than the length of <code>value</code> minus 1.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/BitConverter.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.BitConverter.ToUInt32(System.Byte[],System.Int32)\n  commentId: M:System.BitConverter.ToUInt32(System.Byte[],System.Int32)\n  id: ToUInt32(System.Byte[],System.Int32)\n  parent: System.BitConverter\n  langs:\n  - csharp\n  name: ToUInt32(Byte[], Int32)\n  nameWithType: BitConverter.ToUInt32(Byte[], Int32)\n  fullName: BitConverter.ToUInt32(Byte[], Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns a 32-bit unsigned integer converted from four bytes at a specified position in a byte array.\n  remarks: The <xref:System.BitConverter.ToUInt32%2A> method converts the bytes from index `startIndex` to `startIndex` + 3 to a <xref:System.UInt32> value. The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <xref:System.BitConverter> class topic.\n  example:\n  - \"The following code example converts elements of <xref:System.Byte> arrays to <xref:System.UInt32> values with the `ToUInt32` method.  \\n  \\n [!code-cpp[System.BitConverter.ToXXX.UInts#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.BitConverter.ToXXX.UInts/CPP/batouint32.cpp#2)]\\n [!code-csharp[System.BitConverter.ToXXX.UInts#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.ToXXX.UInts/CS/batouint32.cs#2)]\\n [!code-vb[System.BitConverter.ToXXX.UInts#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.ToXXX.UInts/VB/batouint32.vb#2)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static uint ToUInt32 (byte[] value, int startIndex);\n    parameters:\n    - id: value\n      type: System.Byte[]\n      description: An array of bytes.\n    - id: startIndex\n      type: System.Int32\n      description: The starting position within <code>value</code>.\n    return:\n      type: System.UInt32\n      description: A 32-bit unsigned integer formed by four bytes beginning at <code>startIndex</code>.\n  overload: System.BitConverter.ToUInt32*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>startIndex</code> is greater than or equal to the length of <code>value</code> minus 3, and is less than or equal to the length of <code>value</code> minus 1.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>startIndex</code> is less than zero or greater than the length of <code>value</code> minus 1.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/BitConverter.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.BitConverter.ToUInt64(System.Byte[],System.Int32)\n  commentId: M:System.BitConverter.ToUInt64(System.Byte[],System.Int32)\n  id: ToUInt64(System.Byte[],System.Int32)\n  parent: System.BitConverter\n  langs:\n  - csharp\n  name: ToUInt64(Byte[], Int32)\n  nameWithType: BitConverter.ToUInt64(Byte[], Int32)\n  fullName: BitConverter.ToUInt64(Byte[], Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns a 64-bit unsigned integer converted from eight bytes at a specified position in a byte array.\n  remarks: The <xref:System.BitConverter.ToUInt64%2A> method converts the bytes from index `startIndex` to `startIndex` + 7 to a <xref:System.UInt64> value. The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <xref:System.BitConverter> class topic.\n  example:\n  - \"The following code example converts elements of <xref:System.Byte> arrays to <xref:System.UInt64> values with the `ToUInt64` method.  \\n  \\n [!code-cpp[System.BitConverter.ToXXX.UInts#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.BitConverter.ToXXX.UInts/CPP/batouint64.cpp#3)]\\n [!code-csharp[System.BitConverter.ToXXX.UInts#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.BitConverter.ToXXX.UInts/CS/batouint64.cs#3)]\\n [!code-vb[System.BitConverter.ToXXX.UInts#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.BitConverter.ToXXX.UInts/VB/batouint64.vb#3)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static ulong ToUInt64 (byte[] value, int startIndex);\n    parameters:\n    - id: value\n      type: System.Byte[]\n      description: An array of bytes.\n    - id: startIndex\n      type: System.Int32\n      description: The starting position within <code>value</code>.\n    return:\n      type: System.UInt64\n      description: A 64-bit unsigned integer formed by the eight bytes beginning at <code>startIndex</code>.\n  overload: System.BitConverter.ToUInt64*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>startIndex</code> is greater than or equal to the length of <code>value</code> minus 7, and is less than or equal to the length of <code>value</code> minus 1.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>startIndex</code> is less than zero or greater than the length of <code>value</code> minus 1.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/BitConverter.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.BitConverter.DoubleToInt64Bits(System.Double)\n  parent: System.BitConverter\n  isExternal: false\n  name: DoubleToInt64Bits(Double)\n  nameWithType: BitConverter.DoubleToInt64Bits(Double)\n  fullName: BitConverter.DoubleToInt64Bits(Double)\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.BitConverter.GetBytes(System.Boolean)\n  parent: System.BitConverter\n  isExternal: false\n  name: GetBytes(Boolean)\n  nameWithType: BitConverter.GetBytes(Boolean)\n  fullName: BitConverter.GetBytes(Boolean)\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.BitConverter.GetBytes(System.Char)\n  parent: System.BitConverter\n  isExternal: false\n  name: GetBytes(Char)\n  nameWithType: BitConverter.GetBytes(Char)\n  fullName: BitConverter.GetBytes(Char)\n- uid: System.Char\n  parent: System\n  isExternal: false\n  name: Char\n  nameWithType: Char\n  fullName: System.Char\n- uid: System.BitConverter.GetBytes(System.Double)\n  parent: System.BitConverter\n  isExternal: false\n  name: GetBytes(Double)\n  nameWithType: BitConverter.GetBytes(Double)\n  fullName: BitConverter.GetBytes(Double)\n- uid: System.BitConverter.GetBytes(System.Int16)\n  parent: System.BitConverter\n  isExternal: false\n  name: GetBytes(Int16)\n  nameWithType: BitConverter.GetBytes(Int16)\n  fullName: BitConverter.GetBytes(Int16)\n- uid: System.Int16\n  parent: System\n  isExternal: false\n  name: Int16\n  nameWithType: Int16\n  fullName: System.Int16\n- uid: System.BitConverter.GetBytes(System.Int32)\n  parent: System.BitConverter\n  isExternal: false\n  name: GetBytes(Int32)\n  nameWithType: BitConverter.GetBytes(Int32)\n  fullName: BitConverter.GetBytes(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.BitConverter.GetBytes(System.Int64)\n  parent: System.BitConverter\n  isExternal: false\n  name: GetBytes(Int64)\n  nameWithType: BitConverter.GetBytes(Int64)\n  fullName: BitConverter.GetBytes(Int64)\n- uid: System.BitConverter.GetBytes(System.Single)\n  parent: System.BitConverter\n  isExternal: false\n  name: GetBytes(Single)\n  nameWithType: BitConverter.GetBytes(Single)\n  fullName: BitConverter.GetBytes(Single)\n- uid: System.Single\n  parent: System\n  isExternal: false\n  name: Single\n  nameWithType: Single\n  fullName: System.Single\n- uid: System.BitConverter.GetBytes(System.UInt16)\n  parent: System.BitConverter\n  isExternal: false\n  name: GetBytes(UInt16)\n  nameWithType: BitConverter.GetBytes(UInt16)\n  fullName: BitConverter.GetBytes(UInt16)\n- uid: System.UInt16\n  parent: System\n  isExternal: false\n  name: UInt16\n  nameWithType: UInt16\n  fullName: System.UInt16\n- uid: System.BitConverter.GetBytes(System.UInt32)\n  parent: System.BitConverter\n  isExternal: false\n  name: GetBytes(UInt32)\n  nameWithType: BitConverter.GetBytes(UInt32)\n  fullName: BitConverter.GetBytes(UInt32)\n- uid: System.UInt32\n  parent: System\n  isExternal: false\n  name: UInt32\n  nameWithType: UInt32\n  fullName: System.UInt32\n- uid: System.BitConverter.GetBytes(System.UInt64)\n  parent: System.BitConverter\n  isExternal: false\n  name: GetBytes(UInt64)\n  nameWithType: BitConverter.GetBytes(UInt64)\n  fullName: BitConverter.GetBytes(UInt64)\n- uid: System.UInt64\n  parent: System\n  isExternal: false\n  name: UInt64\n  nameWithType: UInt64\n  fullName: System.UInt64\n- uid: System.BitConverter.Int32BitsToSingle(System.Int32)\n  parent: System.BitConverter\n  isExternal: false\n  name: Int32BitsToSingle(Int32)\n  nameWithType: BitConverter.Int32BitsToSingle(Int32)\n  fullName: BitConverter.Int32BitsToSingle(Int32)\n- uid: System.BitConverter.Int64BitsToDouble(System.Int64)\n  parent: System.BitConverter\n  isExternal: false\n  name: Int64BitsToDouble(Int64)\n  nameWithType: BitConverter.Int64BitsToDouble(Int64)\n  fullName: BitConverter.Int64BitsToDouble(Int64)\n- uid: System.BitConverter.IsLittleEndian\n  parent: System.BitConverter\n  isExternal: false\n  name: IsLittleEndian\n  nameWithType: BitConverter.IsLittleEndian\n  fullName: BitConverter.IsLittleEndian\n- uid: System.BitConverter.SingleToInt32Bits(System.Single)\n  parent: System.BitConverter\n  isExternal: false\n  name: SingleToInt32Bits(Single)\n  nameWithType: BitConverter.SingleToInt32Bits(Single)\n  fullName: BitConverter.SingleToInt32Bits(Single)\n- uid: System.BitConverter.ToBoolean(System.Byte[],System.Int32)\n  parent: System.BitConverter\n  isExternal: false\n  name: ToBoolean(Byte[], Int32)\n  nameWithType: BitConverter.ToBoolean(Byte[], Int32)\n  fullName: BitConverter.ToBoolean(Byte[], Int32)\n- uid: System.BitConverter.ToChar(System.Byte[],System.Int32)\n  parent: System.BitConverter\n  isExternal: false\n  name: ToChar(Byte[], Int32)\n  nameWithType: BitConverter.ToChar(Byte[], Int32)\n  fullName: BitConverter.ToChar(Byte[], Int32)\n- uid: System.BitConverter.ToDouble(System.Byte[],System.Int32)\n  parent: System.BitConverter\n  isExternal: false\n  name: ToDouble(Byte[], Int32)\n  nameWithType: BitConverter.ToDouble(Byte[], Int32)\n  fullName: BitConverter.ToDouble(Byte[], Int32)\n- uid: System.BitConverter.ToInt16(System.Byte[],System.Int32)\n  parent: System.BitConverter\n  isExternal: false\n  name: ToInt16(Byte[], Int32)\n  nameWithType: BitConverter.ToInt16(Byte[], Int32)\n  fullName: BitConverter.ToInt16(Byte[], Int32)\n- uid: System.BitConverter.ToInt32(System.Byte[],System.Int32)\n  parent: System.BitConverter\n  isExternal: false\n  name: ToInt32(Byte[], Int32)\n  nameWithType: BitConverter.ToInt32(Byte[], Int32)\n  fullName: BitConverter.ToInt32(Byte[], Int32)\n- uid: System.BitConverter.ToInt64(System.Byte[],System.Int32)\n  parent: System.BitConverter\n  isExternal: false\n  name: ToInt64(Byte[], Int32)\n  nameWithType: BitConverter.ToInt64(Byte[], Int32)\n  fullName: BitConverter.ToInt64(Byte[], Int32)\n- uid: System.BitConverter.ToSingle(System.Byte[],System.Int32)\n  parent: System.BitConverter\n  isExternal: false\n  name: ToSingle(Byte[], Int32)\n  nameWithType: BitConverter.ToSingle(Byte[], Int32)\n  fullName: BitConverter.ToSingle(Byte[], Int32)\n- uid: System.BitConverter.ToString(System.Byte[])\n  parent: System.BitConverter\n  isExternal: false\n  name: ToString(Byte[])\n  nameWithType: BitConverter.ToString(Byte[])\n  fullName: BitConverter.ToString(Byte[])\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.BitConverter.ToString(System.Byte[],System.Int32)\n  parent: System.BitConverter\n  isExternal: false\n  name: ToString(Byte[], Int32)\n  nameWithType: BitConverter.ToString(Byte[], Int32)\n  fullName: BitConverter.ToString(Byte[], Int32)\n- uid: System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)\n  parent: System.BitConverter\n  isExternal: false\n  name: ToString(Byte[], Int32, Int32)\n  nameWithType: BitConverter.ToString(Byte[], Int32, Int32)\n  fullName: BitConverter.ToString(Byte[], Int32, Int32)\n- uid: System.BitConverter.ToUInt16(System.Byte[],System.Int32)\n  parent: System.BitConverter\n  isExternal: false\n  name: ToUInt16(Byte[], Int32)\n  nameWithType: BitConverter.ToUInt16(Byte[], Int32)\n  fullName: BitConverter.ToUInt16(Byte[], Int32)\n- uid: System.BitConverter.ToUInt32(System.Byte[],System.Int32)\n  parent: System.BitConverter\n  isExternal: false\n  name: ToUInt32(Byte[], Int32)\n  nameWithType: BitConverter.ToUInt32(Byte[], Int32)\n  fullName: BitConverter.ToUInt32(Byte[], Int32)\n- uid: System.BitConverter.ToUInt64(System.Byte[],System.Int32)\n  parent: System.BitConverter\n  isExternal: false\n  name: ToUInt64(Byte[], Int32)\n  nameWithType: BitConverter.ToUInt64(Byte[], Int32)\n  fullName: BitConverter.ToUInt64(Byte[], Int32)\n- uid: System.BitConverter.DoubleToInt64Bits*\n  parent: System.BitConverter\n  isExternal: false\n  name: DoubleToInt64Bits\n  nameWithType: BitConverter.DoubleToInt64Bits\n  fullName: BitConverter.DoubleToInt64Bits\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/BitConverter.xml\n- uid: System.BitConverter.GetBytes*\n  parent: System.BitConverter\n  isExternal: false\n  name: GetBytes\n  nameWithType: BitConverter.GetBytes\n  fullName: BitConverter.GetBytes\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/BitConverter.xml\n- uid: System.BitConverter.Int32BitsToSingle*\n  parent: System.BitConverter\n  isExternal: false\n  name: Int32BitsToSingle\n  nameWithType: BitConverter.Int32BitsToSingle\n  fullName: BitConverter.Int32BitsToSingle\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/BitConverter.xml\n- uid: System.BitConverter.Int64BitsToDouble*\n  parent: System.BitConverter\n  isExternal: false\n  name: Int64BitsToDouble\n  nameWithType: BitConverter.Int64BitsToDouble\n  fullName: BitConverter.Int64BitsToDouble\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/BitConverter.xml\n- uid: System.BitConverter.SingleToInt32Bits*\n  parent: System.BitConverter\n  isExternal: false\n  name: SingleToInt32Bits\n  nameWithType: BitConverter.SingleToInt32Bits\n  fullName: BitConverter.SingleToInt32Bits\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/BitConverter.xml\n- uid: System.BitConverter.ToBoolean*\n  parent: System.BitConverter\n  isExternal: false\n  name: ToBoolean\n  nameWithType: BitConverter.ToBoolean\n  fullName: BitConverter.ToBoolean\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/BitConverter.xml\n- uid: System.BitConverter.ToChar*\n  parent: System.BitConverter\n  isExternal: false\n  name: ToChar\n  nameWithType: BitConverter.ToChar\n  fullName: BitConverter.ToChar\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/BitConverter.xml\n- uid: System.BitConverter.ToDouble*\n  parent: System.BitConverter\n  isExternal: false\n  name: ToDouble\n  nameWithType: BitConverter.ToDouble\n  fullName: BitConverter.ToDouble\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/BitConverter.xml\n- uid: System.BitConverter.ToInt16*\n  parent: System.BitConverter\n  isExternal: false\n  name: ToInt16\n  nameWithType: BitConverter.ToInt16\n  fullName: BitConverter.ToInt16\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/BitConverter.xml\n- uid: System.BitConverter.ToInt32*\n  parent: System.BitConverter\n  isExternal: false\n  name: ToInt32\n  nameWithType: BitConverter.ToInt32\n  fullName: BitConverter.ToInt32\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/BitConverter.xml\n- uid: System.BitConverter.ToInt64*\n  parent: System.BitConverter\n  isExternal: false\n  name: ToInt64\n  nameWithType: BitConverter.ToInt64\n  fullName: BitConverter.ToInt64\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/BitConverter.xml\n- uid: System.BitConverter.ToSingle*\n  parent: System.BitConverter\n  isExternal: false\n  name: ToSingle\n  nameWithType: BitConverter.ToSingle\n  fullName: BitConverter.ToSingle\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/BitConverter.xml\n- uid: System.BitConverter.ToString*\n  parent: System.BitConverter\n  isExternal: false\n  name: ToString\n  nameWithType: BitConverter.ToString\n  fullName: BitConverter.ToString\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/BitConverter.xml\n- uid: System.BitConverter.ToUInt16*\n  parent: System.BitConverter\n  isExternal: false\n  name: ToUInt16\n  nameWithType: BitConverter.ToUInt16\n  fullName: BitConverter.ToUInt16\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/BitConverter.xml\n- uid: System.BitConverter.ToUInt32*\n  parent: System.BitConverter\n  isExternal: false\n  name: ToUInt32\n  nameWithType: BitConverter.ToUInt32\n  fullName: BitConverter.ToUInt32\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/BitConverter.xml\n- uid: System.BitConverter.ToUInt64*\n  parent: System.BitConverter\n  isExternal: false\n  name: ToUInt64\n  nameWithType: BitConverter.ToUInt64\n  fullName: BitConverter.ToUInt64\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/BitConverter.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}