{"nodes":[{"content":"Represents a delegate, which is a data structure that refers to a static method or to a class instance and an instance method of that class.","nodes":[{"pos":[0,140],"content":"Represents a delegate, which is a data structure that refers to a static method or to a class instance and an instance method of that class.","nodes":[{"content":"Represents a delegate, which is a data structure that refers to a static method or to a class instance and an instance method of that class.","pos":[0,140]}]}],"pos":[2248,2389],"yaml":true},{"content":"The <xref:System.Delegate> class is the base class for delegate types. However, only the system and compilers can derive explicitly from the <xref:System.Delegate> class or from the <xref:System.MulticastDelegate> class. It is also not permissible to derive a new type from a delegate type. The <xref:System.Delegate> class is not considered a delegate type; it is a class used to derive delegate types.  \n  \n Most languages implement a `delegate` keyword, and compilers for those languages are able to derive from the <xref:System.MulticastDelegate> class; therefore, users should use the `delegate` keyword provided by the language.  \n  \n> [!NOTE]\n>  The common language runtime provides an `Invoke` method for each delegate type, with the same signature as the delegate. You do not have to call this method explicitly from C#, Visual Basic, or Visual C++, because the compilers call it automatically. The `Invoke` method is useful in [reflection](~/docs/framework/reflection-and-codedom/reflection.md) when you want to find the signature of the delegate type.  \n  \n The common language runtime provides each delegate type with `BeginInvoke` and `EndInvoke` methods, to enable asynchronous invocation of the delegate. For more information about these methods, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  \n  \n The declaration of a delegate type establishes a contract that specifies the signature of one or more methods. A delegate is an instance of a delegate type that has references to:  \n  \n-   An instance method of a type and a target object assignable to that type.  \n  \n-   An instance method of a type, with the hidden `this` parameter exposed in the formal parameter list. The delegate is said to be an open instance delegate.  \n  \n-   A static method.  \n  \n-   A static method and a target object assignable to the first parameter of the method. The delegate is said to be closed over its first argument.  \n  \n For more information on delegate binding, see the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload.  \n  \n> [!NOTE]\n>  In the .NET Framework versions 1.0 and 1.1, a delegate can represent a method only if the signature of the method exactly matches the signature specified by the delegate type. Thus, only the first and third bullets in the preceding list are supported, and the first bullet requires an exact type match.  \n  \n When a delegate represents an instance method closed over its first argument (the most common case), the delegate stores a reference to the method's entry point and a reference to an object, called the target, which is of a type assignable to the type that defined the method. When a delegate represents an open instance method, it stores a reference to the method's entry point. The delegate signature must include the hidden `this` parameter in its formal parameter list; in this case, the delegate does not have a reference to a target object, and a target object must be supplied when the delegate is invoked.  \n  \n When a delegate represents a static method, the delegate stores a reference to the method's entry point. When a delegate represents a static method closed over its first argument, the delegate stores a reference to the method's entry point and a reference to a target object assignable to the type of the method's first argument. When the delegate is invoked, the first argument of the static method receives the target object.  \n  \n The invocation list of a delegate is an ordered set of delegates in which each element of the list invokes exactly one of the methods represented by the delegate. An invocation list can contain duplicate methods. During an invocation, methods are invoked in the order in which they appear in the invocation list. A delegate attempts to invoke every method in its invocation list; duplicates are invoked once for each time they appear in the invocation list. Delegates are immutable; once created, the invocation list of a delegate does not change.  \n  \n Delegates are referred to as multicast, or combinable, because a delegate can invoke one or more methods and can be used in combining operations.  \n  \n Combining operations, such as <xref:System.Delegate.Combine%2A> and <xref:System.Delegate.Remove%2A>, do not alter existing delegates. Instead, such an operation returns a new delegate that contains the results of the operation, an unchanged delegate, or `null`. A combining operation returns `null` when the result of the operation is a delegate that does not reference at least one method. A combining operation returns an unchanged delegate when the requested operation has no effect.  \n  \n> [!NOTE]\n>  Managed languages use the <xref:System.Delegate.Combine%2A> and <xref:System.Delegate.Remove%2A> methods to implement delegate operations. Examples include the `AddHandler` and `RemoveHandler` statements in Visual Basic and the += and -= operators on delegate types in C#.  \n  \n Starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], generic delegate types can have variant type parameters. Contravariant type parameters can be used as parameter types of the delegate, and a covariant type parameter can be used as the return type. This feature allows generic delegate types that are constructed from the same generic type definition to be assignment-compatible if their type arguments are reference types with an inheritance relationship, as explained in [Covariance and Contravariance](~/docs/standard/generics/covariance-and-contravariance.md).  \n  \n> [!NOTE]\n>  Generic delegates that are assignment-compatible because of variance are not necessarily combinable. To be combinable, the types must match exactly. For example, suppose that a class named `Derived` is derived from a class named `Base`. A delegate of type `Action<Base>` (`Action(Of Base)` in Visual Basic) can be assigned to a variable of type `Action<Derived>`, but the two delegates cannot be combined because the types do not match exactly.  \n  \n If an invoked method throws an exception, the method stops executing, the exception is passed back to the caller of the delegate, and remaining methods in the invocation list are not invoked. Catching the exception in the caller does not alter this behavior.  \n  \n When the signature of the methods invoked by a delegate includes a return value, the delegate returns the return value of the last element in the invocation list. When the signature includes a parameter that is passed by reference, the final value of the parameter is the result of every method in the invocation list executing sequentially and updating the parameter's value.  \n  \n The closest equivalent of a delegate in C or C++ is a function pointer. A delegate can represent a static method or an instance method. When the delegate represents an instance method, the delegate stores not only a reference to the method's entry point, but also a reference to the class instance. Unlike function pointers, delegates are object oriented and type safe.","nodes":[{"pos":[0,403],"content":"The <xref:System.Delegate> class is the base class for delegate types. However, only the system and compilers can derive explicitly from the <xref:System.Delegate> class or from the <xref:System.MulticastDelegate> class. It is also not permissible to derive a new type from a delegate type. The <xref:System.Delegate> class is not considered a delegate type; it is a class used to derive delegate types.","nodes":[{"content":"The <xref:System.Delegate> class is the base class for delegate types. However, only the system and compilers can derive explicitly from the <xref:System.Delegate> class or from the <xref:System.MulticastDelegate> class. It is also not permissible to derive a new type from a delegate type. The <xref:System.Delegate> class is not considered a delegate type; it is a class used to derive delegate types.","pos":[0,403],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Delegate&gt;</ph> class is the base class for delegate types.","pos":[0,70],"source":"The <xref:System.Delegate> class is the base class for delegate types."},{"content":"However, only the system and compilers can derive explicitly from the <ph id=\"ph1\">&lt;xref:System.Delegate&gt;</ph> class or from the <ph id=\"ph2\">&lt;xref:System.MulticastDelegate&gt;</ph> class.","pos":[71,220],"source":" However, only the system and compilers can derive explicitly from the <xref:System.Delegate> class or from the <xref:System.MulticastDelegate> class."},{"content":"It is also not permissible to derive a new type from a delegate type.","pos":[221,290]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Delegate&gt;</ph> class is not considered a delegate type; it is a class used to derive delegate types.","pos":[291,403],"source":" The <xref:System.Delegate> class is not considered a delegate type; it is a class used to derive delegate types."}]}]},{"pos":[410,634],"content":"Most languages implement a <ph id=\"ph1\">`delegate`</ph> keyword, and compilers for those languages are able to derive from the <ph id=\"ph2\">&lt;xref:System.MulticastDelegate&gt;</ph> class; therefore, users should use the <ph id=\"ph3\">`delegate`</ph> keyword provided by the language.","source":"Most languages implement a `delegate` keyword, and compilers for those languages are able to derive from the <xref:System.MulticastDelegate> class; therefore, users should use the `delegate` keyword provided by the language."},{"pos":[642,1062],"content":"[!NOTE]\n The common language runtime provides an `Invoke` method for each delegate type, with the same signature as the delegate. You do not have to call this method explicitly from C#, Visual Basic, or Visual C++, because the compilers call it automatically. The `Invoke` method is useful in [reflection](~/docs/framework/reflection-and-codedom/reflection.md) when you want to find the signature of the delegate type.","leadings":["","> "],"nodes":[{"content":" The common language runtime provides an `Invoke` method for each delegate type, with the same signature as the delegate. You do not have to call this method explicitly from C#, Visual Basic, or Visual C++, because the compilers call it automatically. The `Invoke` method is useful in [reflection](~/docs/framework/reflection-and-codedom/reflection.md) when you want to find the signature of the delegate type.","pos":[8,418],"nodes":[{"content":"The common language runtime provides an <ph id=\"ph1\">`Invoke`</ph> method for each delegate type, with the same signature as the delegate.","pos":[1,121],"source":" The common language runtime provides an `Invoke` method for each delegate type, with the same signature as the delegate."},{"content":"You do not have to call this method explicitly from C#, Visual Basic, or Visual C++, because the compilers call it automatically.","pos":[122,251]},{"content":"The <ph id=\"ph1\">`Invoke`</ph> method is useful in <bpt id=\"p1\">[</bpt>reflection<ept id=\"p1\">](~/docs/framework/reflection-and-codedom/reflection.md)</ept> when you want to find the signature of the delegate type.","pos":[252,410],"source":" The `Invoke` method is useful in [reflection](~/docs/framework/reflection-and-codedom/reflection.md) when you want to find the signature of the delegate type."}]}]},{"pos":[1069,1408],"content":"The common language runtime provides each delegate type with `BeginInvoke` and `EndInvoke` methods, to enable asynchronous invocation of the delegate. For more information about these methods, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).","nodes":[{"content":"The common language runtime provides each delegate type with <ph id=\"ph1\">`BeginInvoke`</ph> and <ph id=\"ph2\">`EndInvoke`</ph> methods, to enable asynchronous invocation of the delegate.","pos":[0,150],"source":"The common language runtime provides each delegate type with `BeginInvoke` and `EndInvoke` methods, to enable asynchronous invocation of the delegate."},{"content":"For more information about these methods, see <bpt id=\"p1\">[</bpt>Calling Synchronous Methods Asynchronously<ept id=\"p1\">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.","pos":[151,339],"source":" For more information about these methods, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)."}]},{"pos":[1415,1594],"content":"The declaration of a delegate type establishes a contract that specifies the signature of one or more methods. A delegate is an instance of a delegate type that has references to:","nodes":[{"content":"The declaration of a delegate type establishes a contract that specifies the signature of one or more methods. A delegate is an instance of a delegate type that has references to:","pos":[0,179],"nodes":[{"content":"The declaration of a delegate type establishes a contract that specifies the signature of one or more methods.","pos":[0,110]},{"content":"A delegate is an instance of a delegate type that has references to:","pos":[111,179]}]}]},{"pos":[1604,1677],"content":"An instance method of a type and a target object assignable to that type.","nodes":[{"content":"An instance method of a type and a target object assignable to that type.","pos":[0,73]}]},{"pos":[1687,1841],"content":"An instance method of a type, with the hidden `this` parameter exposed in the formal parameter list. The delegate is said to be an open instance delegate.","nodes":[{"content":"An instance method of a type, with the hidden <ph id=\"ph1\">`this`</ph> parameter exposed in the formal parameter list.","pos":[0,100],"source":"An instance method of a type, with the hidden `this` parameter exposed in the formal parameter list."},{"content":"The delegate is said to be an open instance delegate.","pos":[101,154]}]},{"pos":[1851,1867],"content":"A static method.","nodes":[{"content":"A static method.","pos":[0,16]}]},{"pos":[1877,2020],"content":"A static method and a target object assignable to the first parameter of the method. The delegate is said to be closed over its first argument.","nodes":[{"content":"A static method and a target object assignable to the first parameter of the method. The delegate is said to be closed over its first argument.","pos":[0,143],"nodes":[{"content":"A static method and a target object assignable to the first parameter of the method.","pos":[0,84]},{"content":"The delegate is said to be closed over its first argument.","pos":[85,143]}]}]},{"pos":[2027,2212],"content":"For more information on delegate binding, see the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload.","nodes":[{"content":"For more information on delegate binding, see the <ph id=\"ph1\">&lt;xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29&gt;</ph> method overload.","pos":[0,185],"source":"For more information on delegate binding, see the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload."}]},{"pos":[2220,2533],"content":"[!NOTE]\n In the .NET Framework versions 1.0 and 1.1, a delegate can represent a method only if the signature of the method exactly matches the signature specified by the delegate type. Thus, only the first and third bullets in the preceding list are supported, and the first bullet requires an exact type match.","leadings":["","> "],"nodes":[{"content":" In the .NET Framework versions 1.0 and 1.1, a delegate can represent a method only if the signature of the method exactly matches the signature specified by the delegate type. Thus, only the first and third bullets in the preceding list are supported, and the first bullet requires an exact type match.","pos":[8,311],"nodes":[{"content":"In the .NET Framework versions 1.0 and 1.1, a delegate can represent a method only if the signature of the method exactly matches the signature specified by the delegate type.","pos":[1,176]},{"content":"Thus, only the first and third bullets in the preceding list are supported, and the first bullet requires an exact type match.","pos":[177,303]}]}]},{"pos":[2540,3153],"content":"When a delegate represents an instance method closed over its first argument (the most common case), the delegate stores a reference to the method's entry point and a reference to an object, called the target, which is of a type assignable to the type that defined the method. When a delegate represents an open instance method, it stores a reference to the method's entry point. The delegate signature must include the hidden `this` parameter in its formal parameter list; in this case, the delegate does not have a reference to a target object, and a target object must be supplied when the delegate is invoked.","nodes":[{"content":"When a delegate represents an instance method closed over its first argument (the most common case), the delegate stores a reference to the method's entry point and a reference to an object, called the target, which is of a type assignable to the type that defined the method.","pos":[0,276]},{"content":"When a delegate represents an open instance method, it stores a reference to the method's entry point.","pos":[277,379]},{"content":"The delegate signature must include the hidden <ph id=\"ph1\">`this`</ph> parameter in its formal parameter list; in this case, the delegate does not have a reference to a target object, and a target object must be supplied when the delegate is invoked.","pos":[380,613],"source":" The delegate signature must include the hidden `this` parameter in its formal parameter list; in this case, the delegate does not have a reference to a target object, and a target object must be supplied when the delegate is invoked."}]},{"pos":[3160,3587],"content":"When a delegate represents a static method, the delegate stores a reference to the method's entry point. When a delegate represents a static method closed over its first argument, the delegate stores a reference to the method's entry point and a reference to a target object assignable to the type of the method's first argument. When the delegate is invoked, the first argument of the static method receives the target object.","nodes":[{"content":"When a delegate represents a static method, the delegate stores a reference to the method's entry point. When a delegate represents a static method closed over its first argument, the delegate stores a reference to the method's entry point and a reference to a target object assignable to the type of the method's first argument. When the delegate is invoked, the first argument of the static method receives the target object.","pos":[0,427],"nodes":[{"content":"When a delegate represents a static method, the delegate stores a reference to the method's entry point.","pos":[0,104]},{"content":"When a delegate represents a static method closed over its first argument, the delegate stores a reference to the method's entry point and a reference to a target object assignable to the type of the method's first argument.","pos":[105,329]},{"content":"When the delegate is invoked, the first argument of the static method receives the target object.","pos":[330,427]}]}]},{"pos":[3594,4141],"content":"The invocation list of a delegate is an ordered set of delegates in which each element of the list invokes exactly one of the methods represented by the delegate. An invocation list can contain duplicate methods. During an invocation, methods are invoked in the order in which they appear in the invocation list. A delegate attempts to invoke every method in its invocation list; duplicates are invoked once for each time they appear in the invocation list. Delegates are immutable; once created, the invocation list of a delegate does not change.","nodes":[{"content":"The invocation list of a delegate is an ordered set of delegates in which each element of the list invokes exactly one of the methods represented by the delegate. An invocation list can contain duplicate methods. During an invocation, methods are invoked in the order in which they appear in the invocation list. A delegate attempts to invoke every method in its invocation list; duplicates are invoked once for each time they appear in the invocation list. Delegates are immutable; once created, the invocation list of a delegate does not change.","pos":[0,547],"nodes":[{"content":"The invocation list of a delegate is an ordered set of delegates in which each element of the list invokes exactly one of the methods represented by the delegate.","pos":[0,162]},{"content":"An invocation list can contain duplicate methods.","pos":[163,212]},{"content":"During an invocation, methods are invoked in the order in which they appear in the invocation list.","pos":[213,312]},{"content":"A delegate attempts to invoke every method in its invocation list; duplicates are invoked once for each time they appear in the invocation list.","pos":[313,457]},{"content":"Delegates are immutable; once created, the invocation list of a delegate does not change.","pos":[458,547]}]}]},{"pos":[4148,4293],"content":"Delegates are referred to as multicast, or combinable, because a delegate can invoke one or more methods and can be used in combining operations.","nodes":[{"content":"Delegates are referred to as multicast, or combinable, because a delegate can invoke one or more methods and can be used in combining operations.","pos":[0,145]}]},{"pos":[4300,4787],"content":"Combining operations, such as <xref:System.Delegate.Combine%2A> and <xref:System.Delegate.Remove%2A>, do not alter existing delegates. Instead, such an operation returns a new delegate that contains the results of the operation, an unchanged delegate, or `null`. A combining operation returns `null` when the result of the operation is a delegate that does not reference at least one method. A combining operation returns an unchanged delegate when the requested operation has no effect.","nodes":[{"content":"Combining operations, such as <ph id=\"ph1\">&lt;xref:System.Delegate.Combine%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Delegate.Remove%2A&gt;</ph>, do not alter existing delegates.","pos":[0,134],"source":"Combining operations, such as <xref:System.Delegate.Combine%2A> and <xref:System.Delegate.Remove%2A>, do not alter existing delegates."},{"content":"Instead, such an operation returns a new delegate that contains the results of the operation, an unchanged delegate, or <ph id=\"ph1\">`null`</ph>.","pos":[135,262],"source":" Instead, such an operation returns a new delegate that contains the results of the operation, an unchanged delegate, or `null`."},{"content":"A combining operation returns <ph id=\"ph1\">`null`</ph> when the result of the operation is a delegate that does not reference at least one method.","pos":[263,391],"source":" A combining operation returns `null` when the result of the operation is a delegate that does not reference at least one method."},{"content":"A combining operation returns an unchanged delegate when the requested operation has no effect.","pos":[392,487]}]},{"pos":[4795,5078],"content":"[!NOTE]\n Managed languages use the <xref:System.Delegate.Combine%2A> and <xref:System.Delegate.Remove%2A> methods to implement delegate operations. Examples include the `AddHandler` and `RemoveHandler` statements in Visual Basic and the += and -= operators on delegate types in C#.","leadings":["","> "],"nodes":[{"content":" Managed languages use the <xref:System.Delegate.Combine%2A> and <xref:System.Delegate.Remove%2A> methods to implement delegate operations. Examples include the `AddHandler` and `RemoveHandler` statements in Visual Basic and the += and -= operators on delegate types in C#.","pos":[8,281],"nodes":[{"content":"Managed languages use the <ph id=\"ph1\">&lt;xref:System.Delegate.Combine%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Delegate.Remove%2A&gt;</ph> methods to implement delegate operations.","pos":[1,139],"source":" Managed languages use the <xref:System.Delegate.Combine%2A> and <xref:System.Delegate.Remove%2A> methods to implement delegate operations."},{"content":"Examples include the <ph id=\"ph1\">`AddHandler`</ph> and <ph id=\"ph2\">`RemoveHandler`</ph> statements in Visual Basic and the += and -= operators on delegate types in C#.","pos":[140,273],"source":" Examples include the `AddHandler` and `RemoveHandler` statements in Visual Basic and the += and -= operators on delegate types in C#."}]}]},{"pos":[5085,5673],"content":"Starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], generic delegate types can have variant type parameters. Contravariant type parameters can be used as parameter types of the delegate, and a covariant type parameter can be used as the return type. This feature allows generic delegate types that are constructed from the same generic type definition to be assignment-compatible if their type arguments are reference types with an inheritance relationship, as explained in [Covariance and Contravariance](~/docs/standard/generics/covariance-and-contravariance.md).","nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, generic delegate types can have variant type parameters.","pos":[0,131],"source":"Starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], generic delegate types can have variant type parameters."},{"content":"Contravariant type parameters can be used as parameter types of the delegate, and a covariant type parameter can be used as the return type.","pos":[132,272]},{"content":"This feature allows generic delegate types that are constructed from the same generic type definition to be assignment-compatible if their type arguments are reference types with an inheritance relationship, as explained in <bpt id=\"p1\">[</bpt>Covariance and Contravariance<ept id=\"p1\">](~/docs/standard/generics/covariance-and-contravariance.md)</ept>.","pos":[273,588],"source":" This feature allows generic delegate types that are constructed from the same generic type definition to be assignment-compatible if their type arguments are reference types with an inheritance relationship, as explained in [Covariance and Contravariance](~/docs/standard/generics/covariance-and-contravariance.md)."}]},{"pos":[5681,6136],"content":"[!NOTE]\n Generic delegates that are assignment-compatible because of variance are not necessarily combinable. To be combinable, the types must match exactly. For example, suppose that a class named `Derived` is derived from a class named `Base`. A delegate of type `Action<Base>` (`Action(Of Base)` in Visual Basic) can be assigned to a variable of type `Action<Derived>`, but the two delegates cannot be combined because the types do not match exactly.","leadings":["","> "],"nodes":[{"content":" Generic delegates that are assignment-compatible because of variance are not necessarily combinable. To be combinable, the types must match exactly. For example, suppose that a class named `Derived` is derived from a class named `Base`. A delegate of type `Action<Base>` (`Action(Of Base)` in Visual Basic) can be assigned to a variable of type `Action<Derived>`, but the two delegates cannot be combined because the types do not match exactly.","pos":[8,453],"nodes":[{"content":"Generic delegates that are assignment-compatible because of variance are not necessarily combinable.","pos":[1,101]},{"content":"To be combinable, the types must match exactly.","pos":[102,149]},{"content":"For example, suppose that a class named <ph id=\"ph1\">`Derived`</ph> is derived from a class named <ph id=\"ph2\">`Base`</ph>.","pos":[150,237],"source":" For example, suppose that a class named `Derived` is derived from a class named `Base`."},{"content":"A delegate of type <ph id=\"ph1\">`Action&lt;Base&gt;`</ph> (<ph id=\"ph2\">`Action(Of Base)`</ph> in Visual Basic) can be assigned to a variable of type <ph id=\"ph3\">`Action&lt;Derived&gt;`</ph>, but the two delegates cannot be combined because the types do not match exactly.","pos":[238,445],"source":" A delegate of type `Action<Base>` (`Action(Of Base)` in Visual Basic) can be assigned to a variable of type `Action<Derived>`, but the two delegates cannot be combined because the types do not match exactly."}]}]},{"pos":[6143,6401],"content":"If an invoked method throws an exception, the method stops executing, the exception is passed back to the caller of the delegate, and remaining methods in the invocation list are not invoked. Catching the exception in the caller does not alter this behavior.","nodes":[{"content":"If an invoked method throws an exception, the method stops executing, the exception is passed back to the caller of the delegate, and remaining methods in the invocation list are not invoked. Catching the exception in the caller does not alter this behavior.","pos":[0,258],"nodes":[{"content":"If an invoked method throws an exception, the method stops executing, the exception is passed back to the caller of the delegate, and remaining methods in the invocation list are not invoked.","pos":[0,191]},{"content":"Catching the exception in the caller does not alter this behavior.","pos":[192,258]}]}]},{"pos":[6408,6784],"content":"When the signature of the methods invoked by a delegate includes a return value, the delegate returns the return value of the last element in the invocation list. When the signature includes a parameter that is passed by reference, the final value of the parameter is the result of every method in the invocation list executing sequentially and updating the parameter's value.","nodes":[{"content":"When the signature of the methods invoked by a delegate includes a return value, the delegate returns the return value of the last element in the invocation list. When the signature includes a parameter that is passed by reference, the final value of the parameter is the result of every method in the invocation list executing sequentially and updating the parameter's value.","pos":[0,376],"nodes":[{"content":"When the signature of the methods invoked by a delegate includes a return value, the delegate returns the return value of the last element in the invocation list.","pos":[0,162]},{"content":"When the signature includes a parameter that is passed by reference, the final value of the parameter is the result of every method in the invocation list executing sequentially and updating the parameter's value.","pos":[163,376]}]}]},{"pos":[6791,7160],"content":"The closest equivalent of a delegate in C or C++ is a function pointer. A delegate can represent a static method or an instance method. When the delegate represents an instance method, the delegate stores not only a reference to the method's entry point, but also a reference to the class instance. Unlike function pointers, delegates are object oriented and type safe.","nodes":[{"content":"The closest equivalent of a delegate in C or C++ is a function pointer. A delegate can represent a static method or an instance method. When the delegate represents an instance method, the delegate stores not only a reference to the method's entry point, but also a reference to the class instance. Unlike function pointers, delegates are object oriented and type safe.","pos":[0,369],"nodes":[{"content":"The closest equivalent of a delegate in C or C++ is a function pointer.","pos":[0,71]},{"content":"A delegate can represent a static method or an instance method.","pos":[72,135]},{"content":"When the delegate represents an instance method, the delegate stores not only a reference to the method's entry point, but also a reference to the class instance.","pos":[136,298]},{"content":"Unlike function pointers, delegates are object oriented and type safe.","pos":[299,369]}]}]}],"pos":[2400,9609],"yaml":true,"extradata":"MT"},{"content":"Initializes a delegate that invokes the specified instance method on the specified class instance.","nodes":[{"pos":[0,98],"content":"Initializes a delegate that invokes the specified instance method on the specified class instance.","nodes":[{"content":"Initializes a delegate that invokes the specified instance method on the specified class instance.","pos":[0,98]}]}],"pos":[48169,48268],"yaml":true},{"content":"This constructor cannot be used in application code. To create a delegate by specifying the name of an instance method, use an overload of the <xref:System.Delegate.CreateDelegate%2A> method that specifies a method name and a target object. For example, the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%29> method overload creates a delegate for an instance method with a specified name.  \n  \n This constructor creates delegates for instance methods only. An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.","nodes":[{"pos":[0,425],"content":"This constructor cannot be used in application code. To create a delegate by specifying the name of an instance method, use an overload of the <xref:System.Delegate.CreateDelegate%2A> method that specifies a method name and a target object. For example, the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%29> method overload creates a delegate for an instance method with a specified name.","nodes":[{"content":"This constructor cannot be used in application code. To create a delegate by specifying the name of an instance method, use an overload of the <xref:System.Delegate.CreateDelegate%2A> method that specifies a method name and a target object. For example, the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%29> method overload creates a delegate for an instance method with a specified name.","pos":[0,425],"nodes":[{"content":"This constructor cannot be used in application code.","pos":[0,52]},{"content":"To create a delegate by specifying the name of an instance method, use an overload of the <ph id=\"ph1\">&lt;xref:System.Delegate.CreateDelegate%2A&gt;</ph> method that specifies a method name and a target object.","pos":[53,240],"source":" To create a delegate by specifying the name of an instance method, use an overload of the <xref:System.Delegate.CreateDelegate%2A> method that specifies a method name and a target object."},{"content":"For example, the <ph id=\"ph1\">&lt;xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%29&gt;</ph> method overload creates a delegate for an instance method with a specified name.","pos":[241,425],"source":" For example, the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%29> method overload creates a delegate for an instance method with a specified name."}]}]},{"pos":[432,642],"content":"This constructor creates delegates for instance methods only. An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.","nodes":[{"content":"This constructor creates delegates for instance methods only. An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.","pos":[0,210],"nodes":[{"content":"This constructor creates delegates for instance methods only.","pos":[0,61]},{"content":"An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.","pos":[62,210]}]}]}],"pos":[48279,48926],"yaml":true,"extradata":"MT"},{"content":"The class instance on which the delegate invokes <code>method</code>.","nodes":[{"pos":[0,69],"content":"The class instance on which the delegate invokes <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">method</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The class instance on which the delegate invokes <code>method</code>."}],"pos":[49078,49148],"yaml":true},{"content":"The name of the instance method that the delegate represents.","nodes":[{"pos":[0,61],"content":"The name of the instance method that the delegate represents.","nodes":[{"content":"The name of the instance method that the delegate represents.","pos":[0,61]}]}],"pos":[49210,49272],"yaml":true},{"content":"<code>target</code> is `null`.  \n  \n -or-  \n  \n <code>method</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;target&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>target</code> is `null`."},{"pos":[37,41],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[48,78],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>method</code> is `null`."}],"pos":[49423,49508],"yaml":true},{"content":"There was an error binding to the target method.","nodes":[{"pos":[0,48],"content":"There was an error binding to the target method.","nodes":[{"content":"There was an error binding to the target method.","pos":[0,48]}]}],"pos":[49602,49651],"yaml":true},{"content":"Initializes a delegate that invokes the specified static method from the specified class.","nodes":[{"pos":[0,89],"content":"Initializes a delegate that invokes the specified static method from the specified class.","nodes":[{"content":"Initializes a delegate that invokes the specified static method from the specified class.","pos":[0,89]}]}],"pos":[50806,50896],"yaml":true},{"content":"This constructor cannot be used in application code. To create a delegate by specifying the name of a static method, use an overload of the <xref:System.Delegate.CreateDelegate%2A> method that specifies a method name but does not specify a target object. For example, the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%29> method overload creates a static delegate for a method with a specified name.  \n  \n This constructor creates delegates for static methods only. An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.","nodes":[{"pos":[0,434],"content":"This constructor cannot be used in application code. To create a delegate by specifying the name of a static method, use an overload of the <xref:System.Delegate.CreateDelegate%2A> method that specifies a method name but does not specify a target object. For example, the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%29> method overload creates a static delegate for a method with a specified name.","nodes":[{"content":"This constructor cannot be used in application code. To create a delegate by specifying the name of a static method, use an overload of the <xref:System.Delegate.CreateDelegate%2A> method that specifies a method name but does not specify a target object. For example, the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%29> method overload creates a static delegate for a method with a specified name.","pos":[0,434],"nodes":[{"content":"This constructor cannot be used in application code.","pos":[0,52]},{"content":"To create a delegate by specifying the name of a static method, use an overload of the <ph id=\"ph1\">&lt;xref:System.Delegate.CreateDelegate%2A&gt;</ph> method that specifies a method name but does not specify a target object.","pos":[53,254],"source":" To create a delegate by specifying the name of a static method, use an overload of the <xref:System.Delegate.CreateDelegate%2A> method that specifies a method name but does not specify a target object."},{"content":"For example, the <ph id=\"ph1\">&lt;xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%29&gt;</ph> method overload creates a static delegate for a method with a specified name.","pos":[255,434],"source":" For example, the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%29> method overload creates a static delegate for a method with a specified name."}]}]},{"pos":[441,649],"content":"This constructor creates delegates for static methods only. An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.","nodes":[{"content":"This constructor creates delegates for static methods only. An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.","pos":[0,208],"nodes":[{"content":"This constructor creates delegates for static methods only.","pos":[0,59]},{"content":"An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.","pos":[60,208]}]}]}],"pos":[50907,51561],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Type\"></xref> representing the class that defines <code>method</code>.","nodes":[{"pos":[0,93],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> representing the class that defines <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">method</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The <xref href=\"System.Type\"></xref> representing the class that defines <code>method</code>."}],"pos":[51709,51803],"yaml":true},{"content":"The name of the static method that the delegate represents.","nodes":[{"pos":[0,59],"content":"The name of the static method that the delegate represents.","nodes":[{"content":"The name of the static method that the delegate represents.","pos":[0,59]}]}],"pos":[51865,51925],"yaml":true},{"content":"<code>target</code> is `null`.  \n  \n -or-  \n  \n <code>method</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;target&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>target</code> is `null`."},{"pos":[37,41],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[48,78],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>method</code> is `null`."}],"pos":[52076,52161],"yaml":true},{"content":"<code>target</code> is not a `RuntimeType`. See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858).  \n  \n -or-  \n  \n <code>target</code> represents an open generic type.","nodes":[{"pos":[0,148],"content":"<code>target</code> is not a `RuntimeType`. See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858).","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;target&lt;/code&gt;</ph> is not a <ph id=\"ph2\">`RuntimeType`</ph>.","pos":[0,43],"source":"<code>target</code> is not a `RuntimeType`."},{"content":"See <bpt id=\"p1\">[</bpt>Runtime Types in Reflection<ept id=\"p1\">](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858)</ept>.","pos":[44,148],"source":" See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858)."}]},{"pos":[155,159],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[166,218],"content":"<ph id=\"ph1\">&lt;code&gt;target&lt;/code&gt;</ph> represents an open generic type.","source":"<code>target</code> represents an open generic type."}],"pos":[52255,52480],"yaml":true},{"content":"Creates a shallow copy of the delegate.","nodes":[{"pos":[0,39],"content":"Creates a shallow copy of the delegate.","nodes":[{"content":"Creates a shallow copy of the delegate.","pos":[0,39]}]}],"pos":[53502,53542],"yaml":true},{"content":"The clone has the same <xref:System.Type>, target, method, and invocation list as the original delegate.  \n  \n A shallow copy creates a new instance of the same type as the original object, and then copies the nonstatic fields of the original object. If the field is a value type, a bit-by-bit copy of the field is performed. If the field is a reference type, the reference is copied but the referred object is not; therefore, the reference in the original object and the reference in the clone point to the same object. In contrast, a deep copy of an object duplicates everything directly or indirectly referenced by the fields in the object.","nodes":[{"pos":[0,104],"content":"The clone has the same <xref:System.Type>, target, method, and invocation list as the original delegate.","nodes":[{"content":"The clone has the same <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph>, target, method, and invocation list as the original delegate.","pos":[0,104],"source":"The clone has the same <xref:System.Type>, target, method, and invocation list as the original delegate."}]},{"pos":[111,643],"content":"A shallow copy creates a new instance of the same type as the original object, and then copies the nonstatic fields of the original object. If the field is a value type, a bit-by-bit copy of the field is performed. If the field is a reference type, the reference is copied but the referred object is not; therefore, the reference in the original object and the reference in the clone point to the same object. In contrast, a deep copy of an object duplicates everything directly or indirectly referenced by the fields in the object.","nodes":[{"content":"A shallow copy creates a new instance of the same type as the original object, and then copies the nonstatic fields of the original object. If the field is a value type, a bit-by-bit copy of the field is performed. If the field is a reference type, the reference is copied but the referred object is not; therefore, the reference in the original object and the reference in the clone point to the same object. In contrast, a deep copy of an object duplicates everything directly or indirectly referenced by the fields in the object.","pos":[0,532],"nodes":[{"content":"A shallow copy creates a new instance of the same type as the original object, and then copies the nonstatic fields of the original object.","pos":[0,139]},{"content":"If the field is a value type, a bit-by-bit copy of the field is performed.","pos":[140,214]},{"content":"If the field is a reference type, the reference is copied but the referred object is not; therefore, the reference in the original object and the reference in the clone point to the same object.","pos":[215,409]},{"content":"In contrast, a deep copy of an object duplicates everything directly or indirectly referenced by the fields in the object.","pos":[410,532]}]}]}],"pos":[53553,54201],"yaml":true,"extradata":"MT"},{"content":"A shallow copy of the delegate.","nodes":[{"pos":[0,31],"content":"A shallow copy of the delegate.","nodes":[{"content":"A shallow copy of the delegate.","pos":[0,31]}]}],"pos":[54332,54364],"yaml":true},{"content":"Concatenates the invocation lists of an array of delegates.","nodes":[{"pos":[0,59],"content":"Concatenates the invocation lists of an array of delegates.","nodes":[{"content":"Concatenates the invocation lists of an array of delegates.","pos":[0,59]}]}],"pos":[55537,55597],"yaml":true},{"content":"If the `delegates` array contains entries that are `null`, those entries are ignored.  \n  \n The invocation list can contain duplicate entries; that is, entries that refer to the same method on the same object.  \n  \n> [!NOTE]\n>  Generic delegates that are assignment-compatible because of variance are not necessarily combinable. To be combinable, the types must match exactly. For example, suppose that a class named `Derived` is derived from a class named `Base`. A delegate of type `Action<Base>` (`Action(Of Base)` in Visual Basic) can be assigned to a variable of type `Action<Derived>`, as explained in [Covariance and Contravariance](~/docs/standard/generics/covariance-and-contravariance.md), but the two delegates cannot be combined because the types do not match exactly.  \n  \n <xref:System.Delegate.Combine%2A> is useful for creating event handlers that call multiple methods each time an event occurs.","nodes":[{"pos":[0,85],"content":"If the <ph id=\"ph1\">`delegates`</ph> array contains entries that are <ph id=\"ph2\">`null`</ph>, those entries are ignored.","source":"If the `delegates` array contains entries that are `null`, those entries are ignored."},{"pos":[92,209],"content":"The invocation list can contain duplicate entries; that is, entries that refer to the same method on the same object.","nodes":[{"content":"The invocation list can contain duplicate entries; that is, entries that refer to the same method on the same object.","pos":[0,117]}]},{"pos":[217,780],"content":"[!NOTE]\n Generic delegates that are assignment-compatible because of variance are not necessarily combinable. To be combinable, the types must match exactly. For example, suppose that a class named `Derived` is derived from a class named `Base`. A delegate of type `Action<Base>` (`Action(Of Base)` in Visual Basic) can be assigned to a variable of type `Action<Derived>`, as explained in [Covariance and Contravariance](~/docs/standard/generics/covariance-and-contravariance.md), but the two delegates cannot be combined because the types do not match exactly.","leadings":["","> "],"nodes":[{"content":" Generic delegates that are assignment-compatible because of variance are not necessarily combinable. To be combinable, the types must match exactly. For example, suppose that a class named `Derived` is derived from a class named `Base`. A delegate of type `Action<Base>` (`Action(Of Base)` in Visual Basic) can be assigned to a variable of type `Action<Derived>`, as explained in [Covariance and Contravariance](~/docs/standard/generics/covariance-and-contravariance.md), but the two delegates cannot be combined because the types do not match exactly.","pos":[8,561],"nodes":[{"content":"Generic delegates that are assignment-compatible because of variance are not necessarily combinable.","pos":[1,101]},{"content":"To be combinable, the types must match exactly.","pos":[102,149]},{"content":"For example, suppose that a class named <ph id=\"ph1\">`Derived`</ph> is derived from a class named <ph id=\"ph2\">`Base`</ph>.","pos":[150,237],"source":" For example, suppose that a class named `Derived` is derived from a class named `Base`."},{"content":"A delegate of type <ph id=\"ph1\">`Action&lt;Base&gt;`</ph> (<ph id=\"ph2\">`Action(Of Base)`</ph> in Visual Basic) can be assigned to a variable of type <ph id=\"ph3\">`Action&lt;Derived&gt;`</ph>, as explained in <bpt id=\"p1\">[</bpt>Covariance and Contravariance<ept id=\"p1\">](~/docs/standard/generics/covariance-and-contravariance.md)</ept>, but the two delegates cannot be combined because the types do not match exactly.","pos":[238,553],"source":" A delegate of type `Action<Base>` (`Action(Of Base)` in Visual Basic) can be assigned to a variable of type `Action<Derived>`, as explained in [Covariance and Contravariance](~/docs/standard/generics/covariance-and-contravariance.md), but the two delegates cannot be combined because the types do not match exactly."}]}]},{"pos":[787,912],"content":"<xref:System.Delegate.Combine%2A> is useful for creating event handlers that call multiple methods each time an event occurs.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Delegate.Combine%2A&gt;</ph> is useful for creating event handlers that call multiple methods each time an event occurs.","pos":[0,125],"source":"<xref:System.Delegate.Combine%2A> is useful for creating event handlers that call multiple methods each time an event occurs."}]}],"pos":[55608,56530],"yaml":true,"extradata":"MT"},{"content":"The array of delegates to combine.","nodes":[{"pos":[0,34],"content":"The array of delegates to combine.","nodes":[{"content":"The array of delegates to combine.","pos":[0,34]}]}],"pos":[56759,56794],"yaml":true},{"content":"A new delegate with an invocation list that concatenates the invocation lists of the delegates in the <code>delegates</code> array. Returns `null` if <code>delegates</code> is `null`, if <code>delegates</code> contains zero elements, or if every entry in <code>delegates</code> is `null`.","nodes":[{"pos":[0,288],"content":"A new delegate with an invocation list that concatenates the invocation lists of the delegates in the <code>delegates</code> array. Returns `null` if <code>delegates</code> is `null`, if <code>delegates</code> contains zero elements, or if every entry in <code>delegates</code> is `null`.","nodes":[{"content":"A new delegate with an invocation list that concatenates the invocation lists of the delegates in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">delegates</ph><ept id=\"p1\">&lt;/code&gt;</ept> array.","pos":[0,131],"source":"A new delegate with an invocation list that concatenates the invocation lists of the delegates in the <code>delegates</code> array."},{"content":"Returns <ph id=\"ph1\">`null`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">delegates</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>, if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph4\">delegates</ph><ept id=\"p2\">&lt;/code&gt;</ept> contains zero elements, or if every entry in <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph5\">delegates</ph><ept id=\"p3\">&lt;/code&gt;</ept> is <ph id=\"ph6\">`null`</ph>.","pos":[132,288],"source":" Returns `null` if <code>delegates</code> is `null`, if <code>delegates</code> contains zero elements, or if every entry in <code>delegates</code> is `null`."}]}],"pos":[56853,57142],"yaml":true},{"content":"Not all the non-null entries in <code>delegates</code> are instances of the same delegate type.","nodes":[{"pos":[0,95],"content":"Not all the non-null entries in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">delegates</ph><ept id=\"p1\">&lt;/code&gt;</ept> are instances of the same delegate type.","source":"Not all the non-null entries in <code>delegates</code> are instances of the same delegate type."}],"pos":[57287,57383],"yaml":true},{"content":"Concatenates the invocation lists of two delegates.","nodes":[{"pos":[0,51],"content":"Concatenates the invocation lists of two delegates.","nodes":[{"content":"Concatenates the invocation lists of two delegates.","pos":[0,51]}]}],"pos":[58989,59041],"yaml":true},{"content":"The invocation list can contain duplicate entries; that is, entries that refer to the same method on the same object.  \n  \n> [!NOTE]\n>  Generic delegates that are assignment-compatible because of variance are not necessarily combinable. To be combinable, the types must match exactly. For example, suppose that a class named `Derived` is derived from a class named `Base`. A delegate of type `Action<Base>` (`Action(Of Base)` in Visual Basic) can be assigned to a variable of type `Action<Derived>`, as explained in [Covariance and Contravariance](~/docs/standard/generics/covariance-and-contravariance.md), but the two delegates cannot be combined because the types do not match exactly.  \n  \n <xref:System.Delegate.Combine%2A> is useful for creating event handlers that call multiple methods each time an event occurs.","nodes":[{"pos":[0,117],"content":"The invocation list can contain duplicate entries; that is, entries that refer to the same method on the same object.","nodes":[{"content":"The invocation list can contain duplicate entries; that is, entries that refer to the same method on the same object.","pos":[0,117]}]},{"pos":[125,688],"content":"[!NOTE]\n Generic delegates that are assignment-compatible because of variance are not necessarily combinable. To be combinable, the types must match exactly. For example, suppose that a class named `Derived` is derived from a class named `Base`. A delegate of type `Action<Base>` (`Action(Of Base)` in Visual Basic) can be assigned to a variable of type `Action<Derived>`, as explained in [Covariance and Contravariance](~/docs/standard/generics/covariance-and-contravariance.md), but the two delegates cannot be combined because the types do not match exactly.","leadings":["","> "],"nodes":[{"content":" Generic delegates that are assignment-compatible because of variance are not necessarily combinable. To be combinable, the types must match exactly. For example, suppose that a class named `Derived` is derived from a class named `Base`. A delegate of type `Action<Base>` (`Action(Of Base)` in Visual Basic) can be assigned to a variable of type `Action<Derived>`, as explained in [Covariance and Contravariance](~/docs/standard/generics/covariance-and-contravariance.md), but the two delegates cannot be combined because the types do not match exactly.","pos":[8,561],"nodes":[{"content":"Generic delegates that are assignment-compatible because of variance are not necessarily combinable.","pos":[1,101]},{"content":"To be combinable, the types must match exactly.","pos":[102,149]},{"content":"For example, suppose that a class named <ph id=\"ph1\">`Derived`</ph> is derived from a class named <ph id=\"ph2\">`Base`</ph>.","pos":[150,237],"source":" For example, suppose that a class named `Derived` is derived from a class named `Base`."},{"content":"A delegate of type <ph id=\"ph1\">`Action&lt;Base&gt;`</ph> (<ph id=\"ph2\">`Action(Of Base)`</ph> in Visual Basic) can be assigned to a variable of type <ph id=\"ph3\">`Action&lt;Derived&gt;`</ph>, as explained in <bpt id=\"p1\">[</bpt>Covariance and Contravariance<ept id=\"p1\">](~/docs/standard/generics/covariance-and-contravariance.md)</ept>, but the two delegates cannot be combined because the types do not match exactly.","pos":[238,553],"source":" A delegate of type `Action<Base>` (`Action(Of Base)` in Visual Basic) can be assigned to a variable of type `Action<Derived>`, as explained in [Covariance and Contravariance](~/docs/standard/generics/covariance-and-contravariance.md), but the two delegates cannot be combined because the types do not match exactly."}]}]},{"pos":[695,820],"content":"<xref:System.Delegate.Combine%2A> is useful for creating event handlers that call multiple methods each time an event occurs.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Delegate.Combine%2A&gt;</ph> is useful for creating event handlers that call multiple methods each time an event occurs.","pos":[0,125],"source":"<xref:System.Delegate.Combine%2A> is useful for creating event handlers that call multiple methods each time an event occurs."}]}],"pos":[59052,59880],"yaml":true,"extradata":"MT"},{"content":"The delegate whose invocation list comes first.","nodes":[{"pos":[0,47],"content":"The delegate whose invocation list comes first.","nodes":[{"content":"The delegate whose invocation list comes first.","pos":[0,47]}]}],"pos":[60035,60083],"yaml":true},{"content":"The delegate whose invocation list comes last.","nodes":[{"pos":[0,46],"content":"The delegate whose invocation list comes last.","nodes":[{"content":"The delegate whose invocation list comes last.","pos":[0,46]}]}],"pos":[60142,60189],"yaml":true},{"content":"A new delegate with an invocation list that concatenates the invocation lists of <code>a</code> and <code>b</code> in that order. Returns <code>a</code> if <code>b</code> is `null`, returns <code>b</code> if <code>a</code> is a null reference, and returns a null reference if both <code>a</code> and <code>b</code> are null references.","nodes":[{"pos":[0,335],"content":"A new delegate with an invocation list that concatenates the invocation lists of <code>a</code> and <code>b</code> in that order. Returns <code>a</code> if <code>b</code> is `null`, returns <code>b</code> if <code>a</code> is a null reference, and returns a null reference if both <code>a</code> and <code>b</code> are null references.","nodes":[{"content":"A new delegate with an invocation list that concatenates the invocation lists of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">a</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">b</ph><ept id=\"p2\">&lt;/code&gt;</ept> in that order.","pos":[0,129],"source":"A new delegate with an invocation list that concatenates the invocation lists of <code>a</code> and <code>b</code> in that order."},{"content":"Returns <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">a</ph><ept id=\"p1\">&lt;/code&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">b</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>, returns <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">b</ph><ept id=\"p3\">&lt;/code&gt;</ept> if <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph5\">a</ph><ept id=\"p4\">&lt;/code&gt;</ept> is a null reference, and returns a null reference if both <bpt id=\"p5\">&lt;code&gt;</bpt><ph id=\"ph6\">a</ph><ept id=\"p5\">&lt;/code&gt;</ept> and <bpt id=\"p6\">&lt;code&gt;</bpt><ph id=\"ph7\">b</ph><ept id=\"p6\">&lt;/code&gt;</ept> are null references.","pos":[130,335],"source":" Returns <code>a</code> if <code>b</code> is `null`, returns <code>b</code> if <code>a</code> is a null reference, and returns a null reference if both <code>a</code> and <code>b</code> are null references."}]}],"pos":[60248,60584],"yaml":true},{"content":"Both <code>a</code> and <code>b</code> are not `null`, and <code>a</code> and <code>b</code> are not instances of the same delegate type.","nodes":[{"pos":[0,137],"content":"Both <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">a</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">b</ph><ept id=\"p2\">&lt;/code&gt;</ept> are not <ph id=\"ph3\">`null`</ph>, and <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">a</ph><ept id=\"p3\">&lt;/code&gt;</ept> and <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph5\">b</ph><ept id=\"p4\">&lt;/code&gt;</ept> are not instances of the same delegate type.","source":"Both <code>a</code> and <code>b</code> are not `null`, and <code>a</code> and <code>b</code> are not instances of the same delegate type."}],"pos":[60729,60867],"yaml":true},{"content":"Concatenates the invocation lists of the specified multicast (combinable) delegate and the current multicast (combinable) delegate.","nodes":[{"pos":[0,131],"content":"Concatenates the invocation lists of the specified multicast (combinable) delegate and the current multicast (combinable) delegate.","nodes":[{"content":"Concatenates the invocation lists of the specified multicast (combinable) delegate and the current multicast (combinable) delegate.","pos":[0,131]}]}],"pos":[62344,62476],"yaml":true},{"content":"This method applies only if the current delegate is multicast (combinable).  \n  \n The current implementation simply throws a <xref:System.MulticastNotSupportedException>.  \n  \n The invocation list can contain duplicate entries; that is, entries that refer to the same method on the same object.","nodes":[{"pos":[0,75],"content":"This method applies only if the current delegate is multicast (combinable).","nodes":[{"content":"This method applies only if the current delegate is multicast (combinable).","pos":[0,75]}]},{"pos":[82,170],"content":"The current implementation simply throws a <xref:System.MulticastNotSupportedException>.","nodes":[{"content":"The current implementation simply throws a <ph id=\"ph1\">&lt;xref:System.MulticastNotSupportedException&gt;</ph>.","pos":[0,88],"source":"The current implementation simply throws a <xref:System.MulticastNotSupportedException>."}]},{"pos":[177,294],"content":"The invocation list can contain duplicate entries; that is, entries that refer to the same method on the same object.","nodes":[{"content":"The invocation list can contain duplicate entries; that is, entries that refer to the same method on the same object.","pos":[0,117]}]}],"pos":[62487,62788],"yaml":true,"extradata":"MT"},{"content":"The multicast (combinable) delegate whose invocation list to append to the end of the invocation list of the current multicast (combinable) delegate.","nodes":[{"pos":[0,149],"content":"The multicast (combinable) delegate whose invocation list to append to the end of the invocation list of the current multicast (combinable) delegate.","nodes":[{"content":"The multicast (combinable) delegate whose invocation list to append to the end of the invocation list of the current multicast (combinable) delegate.","pos":[0,149]}]}],"pos":[62939,63089],"yaml":true},{"content":"A new multicast (combinable) delegate with an invocation list that concatenates the invocation list of the current multicast (combinable) delegate and the invocation list of <code>d</code>, or the current multicast (combinable) delegate if <code>d</code> is `null`.","nodes":[{"pos":[0,265],"content":"A new multicast (combinable) delegate with an invocation list that concatenates the invocation list of the current multicast (combinable) delegate and the invocation list of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">d</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or the current multicast (combinable) delegate if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">d</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>.","source":"A new multicast (combinable) delegate with an invocation list that concatenates the invocation list of the current multicast (combinable) delegate and the invocation list of <code>d</code>, or the current multicast (combinable) delegate if <code>d</code> is `null`."}],"pos":[63148,63414],"yaml":true},{"content":"Always thrown.","nodes":[{"pos":[0,14],"content":"Always thrown.","nodes":[{"content":"Always thrown.","pos":[0,14]}]}],"pos":[63589,63604],"yaml":true},{"content":"Creates a delegate of the specified type that represents the specified static method of the specified class, with the specified case-sensitivity and the specified behavior on failure to bind.","nodes":[{"pos":[0,191],"content":"Creates a delegate of the specified type that represents the specified static method of the specified class, with the specified case-sensitivity and the specified behavior on failure to bind.","nodes":[{"content":"Creates a delegate of the specified type that represents the specified static method of the specified class, with the specified case-sensitivity and the specified behavior on failure to bind.","pos":[0,191]}]}],"pos":[64995,65187],"yaml":true},{"content":"This method creates delegates for static methods only. An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \n>   \n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.","nodes":[{"pos":[0,203],"content":"This method creates delegates for static methods only. An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.","nodes":[{"content":"This method creates delegates for static methods only. An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.","pos":[0,203],"nodes":[{"content":"This method creates delegates for static methods only.","pos":[0,54]},{"content":"An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.","pos":[55,203]}]}]},{"pos":[211,781],"content":"[!NOTE]\n Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)","leadings":["","> "],"nodes":[{"content":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)","pos":[8,568],"nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public methods if the caller has been granted <ph id=\"ph2\">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id=\"ph3\">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName&gt;</ph> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.","pos":[1,429],"source":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof."},{"content":"(See <bpt id=\"p1\">[</bpt>Security Considerations for Reflection<ept id=\"p1\">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)","pos":[430,560],"source":" (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)"}]}]},{"pos":[792,919],"content":"To use this functionality, your application should target the <ph id=\"ph1\">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.","source":"To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later."}],"pos":[65198,66125],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Type\"></xref> of delegate to create.","nodes":[{"pos":[0,59],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> of delegate to create.","source":"The <xref href=\"System.Type\"></xref> of delegate to create."}],"pos":[66343,66403],"yaml":true},{"content":"The <xref href=\"System.Type\"></xref> representing the class that implements <code>method</code>.","nodes":[{"pos":[0,96],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> representing the class that implements <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">method</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The <xref href=\"System.Type\"></xref> representing the class that implements <code>method</code>."}],"pos":[66463,66560],"yaml":true},{"content":"The name of the static method that the delegate is to represent.","nodes":[{"pos":[0,64],"content":"The name of the static method that the delegate is to represent.","nodes":[{"content":"The name of the static method that the delegate is to represent.","pos":[0,64]}]}],"pos":[66622,66687],"yaml":true},{"content":"A Boolean indicating whether to ignore the case when comparing the name of the method.","nodes":[{"pos":[0,86],"content":"A Boolean indicating whether to ignore the case when comparing the name of the method.","nodes":[{"content":"A Boolean indicating whether to ignore the case when comparing the name of the method.","pos":[0,86]}]}],"pos":[66754,66841],"yaml":true},{"content":"`true` to throw an exception if <code>method</code> cannot be bound; otherwise, `false`.","nodes":[{"pos":[0,88],"content":"<ph id=\"ph1\">`true`</ph> to throw an exception if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">method</ph><ept id=\"p1\">&lt;/code&gt;</ept> cannot be bound; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` to throw an exception if <code>method</code> cannot be bound; otherwise, `false`."}],"pos":[66916,67007],"yaml":true},{"content":"A delegate of the specified type that represents the specified static method of the specified class.","nodes":[{"pos":[0,100],"content":"A delegate of the specified type that represents the specified static method of the specified class.","nodes":[{"content":"A delegate of the specified type that represents the specified static method of the specified class.","pos":[0,100]}]}],"pos":[67066,67167],"yaml":true},{"content":"<code>type</code> is `null`.  \n  \n -or-  \n  \n <code>target</code> is `null`.  \n  \n -or-  \n  \n <code>method</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>type</code> is `null`."},{"pos":[35,39],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[46,76],"content":"<ph id=\"ph1\">&lt;code&gt;target&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>target</code> is `null`."},{"pos":[83,87],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[94,124],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>method</code> is `null`."}],"pos":[67327,67462],"yaml":true},{"content":"<code>type</code> does not inherit <xref href=\"System.MulticastDelegate\"></xref>.  \n  \n -or-  \n  \n <code>type</code> is not a `RuntimeType`. See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858).  \n  \n -or-  \n  \n <code>target</code> is not a `RuntimeType`.  \n  \n -or-  \n  \n <code>target</code> is an open generic type. That is, its <xref href=\"System.Type.ContainsGenericParameters\"></xref> property is `true`.  \n  \n -or-  \n  \n <code>method</code> is not a `static` method (`Shared` method in Visual Basic).  \n  \n -or-  \n  \n <code>method</code> cannot be bound, for example because it cannot be found, and <code>throwOnBindFailure</code> is `true`.","nodes":[{"pos":[0,81],"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> does not inherit <ph id=\"ph2\">&lt;xref href=\"System.MulticastDelegate\"&gt;&lt;/xref&gt;</ph>.","source":"<code>type</code> does not inherit <xref href=\"System.MulticastDelegate\"></xref>."},{"pos":[88,92],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[99,245],"content":"<code>type</code> is not a `RuntimeType`. See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858).","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> is not a <ph id=\"ph2\">`RuntimeType`</ph>.","pos":[0,41],"source":"<code>type</code> is not a `RuntimeType`."},{"content":"See <bpt id=\"p1\">[</bpt>Runtime Types in Reflection<ept id=\"p1\">](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858)</ept>.","pos":[42,146],"source":" See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858)."}]},{"pos":[252,256],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[263,306],"content":"<ph id=\"ph1\">&lt;code&gt;target&lt;/code&gt;</ph> is not a <ph id=\"ph2\">`RuntimeType`</ph>.","source":"<code>target</code> is not a `RuntimeType`."},{"pos":[313,317],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[324,460],"content":"<code>target</code> is an open generic type. That is, its <xref href=\"System.Type.ContainsGenericParameters\"></xref> property is `true`.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;target&lt;/code&gt;</ph> is an open generic type.","pos":[0,44],"source":"<code>target</code> is an open generic type."},{"content":"That is, its <ph id=\"ph1\">&lt;xref href=\"System.Type.ContainsGenericParameters\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph2\">`true`</ph>.","pos":[45,136],"source":" That is, its <xref href=\"System.Type.ContainsGenericParameters\"></xref> property is `true`."}]},{"pos":[467,471],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[478,557],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is not a <ph id=\"ph2\">`static`</ph> method (<ph id=\"ph3\">`Shared`</ph> method in Visual Basic).","source":"<code>method</code> is not a `static` method (`Shared` method in Visual Basic)."},{"pos":[564,568],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[575,698],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> cannot be bound, for example because it cannot be found, and <ph id=\"ph2\">&lt;code&gt;throwOnBindFailure&lt;/code&gt;</ph> is <ph id=\"ph3\">`true`</ph>.","source":"<code>method</code> cannot be bound, for example because it cannot be found, and <code>throwOnBindFailure</code> is `true`."}],"pos":[67556,68281],"yaml":true},{"content":"The `Invoke` method of <code>type</code> is not found.","nodes":[{"pos":[0,54],"content":"The <ph id=\"ph1\">`Invoke`</ph> method of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">type</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not found.","source":"The `Invoke` method of <code>type</code> is not found."}],"pos":[68385,68440],"yaml":true},{"content":"The caller does not have the permissions necessary to access <code>method</code>.","nodes":[{"pos":[0,81],"content":"The caller does not have the permissions necessary to access <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">method</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The caller does not have the permissions necessary to access <code>method</code>."}],"pos":[68542,68624],"yaml":true},{"content":"Creates a delegate of the specified type that represents the specified static method of the specified class, with the specified case-sensitivity.","nodes":[{"pos":[0,145],"content":"Creates a delegate of the specified type that represents the specified static method of the specified class, with the specified case-sensitivity.","nodes":[{"content":"Creates a delegate of the specified type that represents the specified static method of the specified class, with the specified case-sensitivity.","pos":[0,145]}]}],"pos":[69943,70089],"yaml":true},{"content":"This method creates delegates for static methods only. An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.  \n  \n This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `true` for `throwOnBindFailure`.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \n>   \n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.","nodes":[{"pos":[0,203],"content":"This method creates delegates for static methods only. An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.","nodes":[{"content":"This method creates delegates for static methods only. An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.","pos":[0,203],"nodes":[{"content":"This method creates delegates for static methods only.","pos":[0,54]},{"content":"An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.","pos":[55,203]}]}]},{"pos":[210,439],"content":"This method overload is equivalent to calling the <ph id=\"ph1\">&lt;xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29&gt;</ph> method overload, specifying <ph id=\"ph2\">`true`</ph> for <ph id=\"ph3\">`throwOnBindFailure`</ph>.","source":"This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `true` for `throwOnBindFailure`."},{"pos":[447,1017],"content":"[!NOTE]\n Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)","leadings":["","> "],"nodes":[{"content":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)","pos":[8,568],"nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public methods if the caller has been granted <ph id=\"ph2\">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id=\"ph3\">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName&gt;</ph> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.","pos":[1,429],"source":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof."},{"content":"(See <bpt id=\"p1\">[</bpt>Security Considerations for Reflection<ept id=\"p1\">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)","pos":[430,560],"source":" (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)"}]}]},{"pos":[1028,1155],"content":"To use this functionality, your application should target the <ph id=\"ph1\">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.","source":"To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later."}],"pos":[70100,71265],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Type\"></xref> of delegate to create.","nodes":[{"pos":[0,59],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> of delegate to create.","source":"The <xref href=\"System.Type\"></xref> of delegate to create."}],"pos":[71458,71518],"yaml":true},{"content":"The <xref href=\"System.Type\"></xref> representing the class that implements <code>method</code>.","nodes":[{"pos":[0,96],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> representing the class that implements <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">method</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The <xref href=\"System.Type\"></xref> representing the class that implements <code>method</code>."}],"pos":[71578,71675],"yaml":true},{"content":"The name of the static method that the delegate is to represent.","nodes":[{"pos":[0,64],"content":"The name of the static method that the delegate is to represent.","nodes":[{"content":"The name of the static method that the delegate is to represent.","pos":[0,64]}]}],"pos":[71737,71802],"yaml":true},{"content":"A Boolean indicating whether to ignore the case when comparing the name of the method.","nodes":[{"pos":[0,86],"content":"A Boolean indicating whether to ignore the case when comparing the name of the method.","nodes":[{"content":"A Boolean indicating whether to ignore the case when comparing the name of the method.","pos":[0,86]}]}],"pos":[71869,71956],"yaml":true},{"content":"A delegate of the specified type that represents the specified static method of the specified class.","nodes":[{"pos":[0,100],"content":"A delegate of the specified type that represents the specified static method of the specified class.","nodes":[{"content":"A delegate of the specified type that represents the specified static method of the specified class.","pos":[0,100]}]}],"pos":[72015,72116],"yaml":true},{"content":"<code>type</code> is `null`.  \n  \n -or-  \n  \n <code>target</code> is `null`.  \n  \n -or-  \n  \n <code>method</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>type</code> is `null`."},{"pos":[35,39],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[46,76],"content":"<ph id=\"ph1\">&lt;code&gt;target&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>target</code> is `null`."},{"pos":[83,87],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[94,124],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>method</code> is `null`."}],"pos":[72276,72411],"yaml":true},{"content":"<code>type</code> does not inherit <xref href=\"System.MulticastDelegate\"></xref>.  \n  \n -or-  \n  \n <code>type</code> is not a `RuntimeType`. See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858).  \n  \n -or-  \n  \n <code>target</code> is not a `RuntimeType`.  \n  \n -or-  \n  \n <code>target</code> is an open generic type. That is, its <xref href=\"System.Type.ContainsGenericParameters\"></xref> property is `true`.  \n  \n -or-  \n  \n <code>method</code> is not a `static` method (`Shared` method in Visual Basic).  \n  \n -or-  \n  \n <code>method</code> cannot be bound, for example because it cannot be found.","nodes":[{"pos":[0,81],"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> does not inherit <ph id=\"ph2\">&lt;xref href=\"System.MulticastDelegate\"&gt;&lt;/xref&gt;</ph>.","source":"<code>type</code> does not inherit <xref href=\"System.MulticastDelegate\"></xref>."},{"pos":[88,92],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[99,245],"content":"<code>type</code> is not a `RuntimeType`. See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858).","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> is not a <ph id=\"ph2\">`RuntimeType`</ph>.","pos":[0,41],"source":"<code>type</code> is not a `RuntimeType`."},{"content":"See <bpt id=\"p1\">[</bpt>Runtime Types in Reflection<ept id=\"p1\">](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858)</ept>.","pos":[42,146],"source":" See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858)."}]},{"pos":[252,256],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[263,306],"content":"<ph id=\"ph1\">&lt;code&gt;target&lt;/code&gt;</ph> is not a <ph id=\"ph2\">`RuntimeType`</ph>.","source":"<code>target</code> is not a `RuntimeType`."},{"pos":[313,317],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[324,460],"content":"<code>target</code> is an open generic type. That is, its <xref href=\"System.Type.ContainsGenericParameters\"></xref> property is `true`.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;target&lt;/code&gt;</ph> is an open generic type.","pos":[0,44],"source":"<code>target</code> is an open generic type."},{"content":"That is, its <ph id=\"ph1\">&lt;xref href=\"System.Type.ContainsGenericParameters\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph2\">`true`</ph>.","pos":[45,136],"source":" That is, its <xref href=\"System.Type.ContainsGenericParameters\"></xref> property is `true`."}]},{"pos":[467,471],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[478,557],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is not a <ph id=\"ph2\">`static`</ph> method (<ph id=\"ph3\">`Shared`</ph> method in Visual Basic).","source":"<code>method</code> is not a `static` method (`Shared` method in Visual Basic)."},{"pos":[564,568],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[575,651],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> cannot be bound, for example because it cannot be found.","source":"<code>method</code> cannot be bound, for example because it cannot be found."}],"pos":[72505,73183],"yaml":true},{"content":"The `Invoke` method of <code>type</code> is not found.","nodes":[{"pos":[0,54],"content":"The <ph id=\"ph1\">`Invoke`</ph> method of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">type</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not found.","source":"The `Invoke` method of <code>type</code> is not found."}],"pos":[73287,73342],"yaml":true},{"content":"The caller does not have the permissions necessary to access <code>method</code>.","nodes":[{"pos":[0,81],"content":"The caller does not have the permissions necessary to access <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">method</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The caller does not have the permissions necessary to access <code>method</code>."}],"pos":[73444,73526],"yaml":true},{"content":"Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance with the specified case-sensitivity.","nodes":[{"pos":[0,165],"content":"Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance with the specified case-sensitivity.","nodes":[{"content":"Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance with the specified case-sensitivity.","pos":[0,165]}]}],"pos":[74857,75023],"yaml":true},{"content":"This method creates delegates for instance methods only. An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.  \n  \n This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `true` for `throwOnBindFailure`.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \n>   \n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.","nodes":[{"pos":[0,205],"content":"This method creates delegates for instance methods only. An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.","nodes":[{"content":"This method creates delegates for instance methods only. An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.","pos":[0,205],"nodes":[{"content":"This method creates delegates for instance methods only.","pos":[0,56]},{"content":"An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.","pos":[57,205]}]}]},{"pos":[212,443],"content":"This method overload is equivalent to calling the <ph id=\"ph1\">&lt;xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29&gt;</ph> method overload, specifying <ph id=\"ph2\">`true`</ph> for <ph id=\"ph3\">`throwOnBindFailure`</ph>.","source":"This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `true` for `throwOnBindFailure`."},{"pos":[451,1021],"content":"[!NOTE]\n Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)","leadings":["","> "],"nodes":[{"content":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)","pos":[8,568],"nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public methods if the caller has been granted <ph id=\"ph2\">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id=\"ph3\">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName&gt;</ph> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.","pos":[1,429],"source":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof."},{"content":"(See <bpt id=\"p1\">[</bpt>Security Considerations for Reflection<ept id=\"p1\">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)","pos":[430,560],"source":" (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)"}]}]},{"pos":[1032,1159],"content":"To use this functionality, your application should target the <ph id=\"ph1\">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.","source":"To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later."}],"pos":[75034,76203],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Type\"></xref> of delegate to create.","nodes":[{"pos":[0,59],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> of delegate to create.","source":"The <xref href=\"System.Type\"></xref> of delegate to create."}],"pos":[76398,76458],"yaml":true},{"content":"The class instance on which <code>method</code> is invoked.","nodes":[{"pos":[0,59],"content":"The class instance on which <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">method</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invoked.","source":"The class instance on which <code>method</code> is invoked."}],"pos":[76520,76580],"yaml":true},{"content":"The name of the instance method that the delegate is to represent.","nodes":[{"pos":[0,66],"content":"The name of the instance method that the delegate is to represent.","nodes":[{"content":"The name of the instance method that the delegate is to represent.","pos":[0,66]}]}],"pos":[76642,76709],"yaml":true},{"content":"A Boolean indicating whether to ignore the case when comparing the name of the method.","nodes":[{"pos":[0,86],"content":"A Boolean indicating whether to ignore the case when comparing the name of the method.","nodes":[{"content":"A Boolean indicating whether to ignore the case when comparing the name of the method.","pos":[0,86]}]}],"pos":[76776,76863],"yaml":true},{"content":"A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.","nodes":[{"pos":[0,121],"content":"A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.","nodes":[{"content":"A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.","pos":[0,121]}]}],"pos":[76922,77044],"yaml":true},{"content":"<code>type</code> is `null`.  \n  \n -or-  \n  \n <code>target</code> is `null`.  \n  \n -or-  \n  \n <code>method</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>type</code> is `null`."},{"pos":[35,39],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[46,76],"content":"<ph id=\"ph1\">&lt;code&gt;target&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>target</code> is `null`."},{"pos":[83,87],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[94,124],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>method</code> is `null`."}],"pos":[77204,77339],"yaml":true},{"content":"<code>type</code> does not inherit <xref href=\"System.MulticastDelegate\"></xref>.  \n  \n -or-  \n  \n <code>type</code> is not a `RuntimeType`. See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858).  \n  \n -or-  \n  \n <code>method</code> is not an instance method.  \n  \n -or-  \n  \n <code>method</code> cannot be bound, for example because it cannot be found.","nodes":[{"pos":[0,81],"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> does not inherit <ph id=\"ph2\">&lt;xref href=\"System.MulticastDelegate\"&gt;&lt;/xref&gt;</ph>.","source":"<code>type</code> does not inherit <xref href=\"System.MulticastDelegate\"></xref>."},{"pos":[88,92],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[99,245],"content":"<code>type</code> is not a `RuntimeType`. See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858).","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> is not a <ph id=\"ph2\">`RuntimeType`</ph>.","pos":[0,41],"source":"<code>type</code> is not a `RuntimeType`."},{"content":"See <bpt id=\"p1\">[</bpt>Runtime Types in Reflection<ept id=\"p1\">](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858)</ept>.","pos":[42,146],"source":" See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858)."}]},{"pos":[252,256],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[263,309],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is not an instance method.","source":"<code>method</code> is not an instance method."},{"pos":[316,320],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[327,403],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> cannot be bound, for example because it cannot be found.","source":"<code>method</code> cannot be bound, for example because it cannot be found."}],"pos":[77433,77853],"yaml":true},{"content":"The `Invoke` method of <code>type</code> is not found.","nodes":[{"pos":[0,54],"content":"The <ph id=\"ph1\">`Invoke`</ph> method of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">type</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not found.","source":"The `Invoke` method of <code>type</code> is not found."}],"pos":[77957,78012],"yaml":true},{"content":"The caller does not have the permissions necessary to access <code>method</code>.","nodes":[{"pos":[0,81],"content":"The caller does not have the permissions necessary to access <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">method</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The caller does not have the permissions necessary to access <code>method</code>."}],"pos":[78114,78196],"yaml":true},{"content":"Creates a delegate of the specified type that represents the specified static or instance method, with the specified first argument and the specified behavior on failure to bind.","nodes":[{"pos":[0,178],"content":"Creates a delegate of the specified type that represents the specified static or instance method, with the specified first argument and the specified behavior on failure to bind.","nodes":[{"content":"Creates a delegate of the specified type that represents the specified static or instance method, with the specified first argument and the specified behavior on failure to bind.","pos":[0,178]}]}],"pos":[79584,79763],"yaml":true},{"content":"This method overload and the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29> method overload, which always throws on failure to bind, provide the most flexible way to create delegates. You can use them to create delegates for either static or instance methods, with or without a first argument.  \n  \n> [!NOTE]\n>  If you do not supply a first argument, use the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload for better performance.  \n  \n The delegate type and the method must have compatible return types. That is, the return type of `method` must be assignable to the return type of `type`.  \n  \n If `firstArgument` is supplied, it is passed to `method` every time the delegate is invoked; `firstArgument` is said to be bound to the delegate, and the delegate is said to be closed over its first argument. If `method` is `static` (`Shared` in Visual Basic), the argument list supplied when invoking the delegate includes all parameters except the first; if `method` is an instance method, then `firstArgument` is passed to the hidden instance parameter (represented by `this` in C#, or by `Me` in Visual Basic).  \n  \n If `firstArgument` is supplied, the first parameter of `method` must be a reference type, and `firstArgument` must be compatible with that type.  \n  \n> [!IMPORTANT]\n>  If `method` is `static` (`Shared` in Visual Basic) and its first parameter is of type <xref:System.Object> or <xref:System.ValueType>, then `firstArgument` can be a value type. In this case `firstArgument` is automatically boxed. Automatic boxing does not occur for any other arguments, as it would in a C# or Visual Basic function call.  \n  \n If `firstArgument` is a null reference and `method` is an instance method, the result depends on the signatures of the delegate type `type` and of `method`:  \n  \n-   If the signature of `type` explicitly includes the hidden first parameter of `method`, the delegate is said to represent an open instance method. When the delegate is invoked, the first argument in the argument list is passed to the hidden instance parameter of `method`.  \n  \n-   If the signatures of `method` and `type` match (that is, all parameter types are compatible), then the delegate is said to be closed over a null reference. Invoking the delegate is like calling an instance method on a null instance, which is not a particularly useful thing to do.  \n  \n If `firstArgument` is a null reference and `method` is static, the result depends on the signatures of the delegate type `type` and of `method`:  \n  \n-   If the signature of `method` and `type` match (that is, all parameter types are compatible), the delegate is said to represent an open static method. This is the most common case for static methods. In this case, you can get slightly better performance by using the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload.  \n  \n-   If the signature of `type` begins with the second parameter of `method` and the rest of the parameter types are compatible, then the delegate is said to be closed over a null reference. When the delegate is invoked, a null reference is passed to the first parameter of `method`.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \n>   \n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.  \n  \n## Compatible Parameter Types and Return Type  \n The parameter types and return type of a delegate must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.  \n  \n> [!NOTE]\n>  In the .NET Framework version 1.0 and 1.1 the types must match exactly.  \n  \n A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.  \n  \n Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.  \n  \n For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.  \n  \n## Determining the Methods a Delegate Can Represent  \n Another useful way to think of the flexibility provided by this overload of <xref:System.Delegate.CreateDelegate%2A> is that any given delegate can represent four different combinations of method signature and method kind (static versus instance). Consider a delegate type `D` with one argument of type `C`. The following describes the methods `D` can represent, ignoring the return type since it must match in all cases:  \n  \n-   `D` can represent any instance method that has exactly one argument of type `C`, regardless of what type the instance method belongs to. When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of the type `method` belongs to, and the resulting delegate is said to be closed over that instance. (Trivially, `D` can also be closed over a null reference if `firstArgument` is `null`.)  \n  \n-   `D` can represent an instance method of `C` that has no arguments. When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference. The resulting delegate represents an open instance method, and an instance of `C` must be supplied each time it is invoked.  \n  \n-   `D` can represent a static method that takes one argument of type `C`, and that method can belong to any type. When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference. The resulting delegate represents an open static method, and an instance of `C` must be supplied each time it is invoked.  \n  \n-   `D` can represent a static method that belongs to type `F` and has two arguments, of type `F` and type `C`. When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of `F`. The resulting delegate represents a static method that is closed over that instance of `F`. Note that in the case where `F` and `C` are the same type, the static method has two arguments of that type. (In this case, `D` is closed over a null reference if `firstArgument` is `null`.)","nodes":[{"pos":[0,348],"content":"This method overload and the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29> method overload, which always throws on failure to bind, provide the most flexible way to create delegates. You can use them to create delegates for either static or instance methods, with or without a first argument.","nodes":[{"content":"This method overload and the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29> method overload, which always throws on failure to bind, provide the most flexible way to create delegates. You can use them to create delegates for either static or instance methods, with or without a first argument.","pos":[0,348],"nodes":[{"content":"This method overload and the <ph id=\"ph1\">&lt;xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29&gt;</ph> method overload, which always throws on failure to bind, provide the most flexible way to create delegates.","pos":[0,238],"source":"This method overload and the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29> method overload, which always throws on failure to bind, provide the most flexible way to create delegates."},{"content":"You can use them to create delegates for either static or instance methods, with or without a first argument.","pos":[239,348]}]}]},{"pos":[356,556],"content":"[!NOTE]\n If you do not supply a first argument, use the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload for better performance.","leadings":["","> "],"nodes":[{"content":"If you do not supply a first argument, use the <ph id=\"ph1\">&lt;xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29&gt;</ph> method overload for better performance.","pos":[9,198],"source":" If you do not supply a first argument, use the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload for better performance."}]},{"pos":[563,716],"content":"The delegate type and the method must have compatible return types. That is, the return type of `method` must be assignable to the return type of `type`.","nodes":[{"content":"The delegate type and the method must have compatible return types.","pos":[0,67]},{"content":"That is, the return type of <ph id=\"ph1\">`method`</ph> must be assignable to the return type of <ph id=\"ph2\">`type`</ph>.","pos":[68,153],"source":" That is, the return type of `method` must be assignable to the return type of `type`."}]},{"pos":[723,1237],"content":"If `firstArgument` is supplied, it is passed to `method` every time the delegate is invoked; `firstArgument` is said to be bound to the delegate, and the delegate is said to be closed over its first argument. If `method` is `static` (`Shared` in Visual Basic), the argument list supplied when invoking the delegate includes all parameters except the first; if `method` is an instance method, then `firstArgument` is passed to the hidden instance parameter (represented by `this` in C#, or by `Me` in Visual Basic).","nodes":[{"content":"If <ph id=\"ph1\">`firstArgument`</ph> is supplied, it is passed to <ph id=\"ph2\">`method`</ph> every time the delegate is invoked; <ph id=\"ph3\">`firstArgument`</ph> is said to be bound to the delegate, and the delegate is said to be closed over its first argument.","pos":[0,208],"source":"If `firstArgument` is supplied, it is passed to `method` every time the delegate is invoked; `firstArgument` is said to be bound to the delegate, and the delegate is said to be closed over its first argument."},{"content":"If <ph id=\"ph1\">`method`</ph> is <ph id=\"ph2\">`static`</ph> (<ph id=\"ph3\">`Shared`</ph> in Visual Basic), the argument list supplied when invoking the delegate includes all parameters except the first; if <ph id=\"ph4\">`method`</ph> is an instance method, then <ph id=\"ph5\">`firstArgument`</ph> is passed to the hidden instance parameter (represented by <ph id=\"ph6\">`this`</ph> in C#, or by <ph id=\"ph7\">`Me`</ph> in Visual Basic).","pos":[209,514],"source":" If `method` is `static` (`Shared` in Visual Basic), the argument list supplied when invoking the delegate includes all parameters except the first; if `method` is an instance method, then `firstArgument` is passed to the hidden instance parameter (represented by `this` in C#, or by `Me` in Visual Basic)."}]},{"pos":[1244,1388],"content":"If <ph id=\"ph1\">`firstArgument`</ph> is supplied, the first parameter of <ph id=\"ph2\">`method`</ph> must be a reference type, and <ph id=\"ph3\">`firstArgument`</ph> must be compatible with that type.","source":"If `firstArgument` is supplied, the first parameter of `method` must be a reference type, and `firstArgument` must be compatible with that type."},{"pos":[1396,1749],"content":"[!IMPORTANT]\n If `method` is `static` (`Shared` in Visual Basic) and its first parameter is of type <xref:System.Object> or <xref:System.ValueType>, then `firstArgument` can be a value type. In this case `firstArgument` is automatically boxed. Automatic boxing does not occur for any other arguments, as it would in a C# or Visual Basic function call.","leadings":["","> "],"nodes":[{"content":" If `method` is `static` (`Shared` in Visual Basic) and its first parameter is of type <xref:System.Object> or <xref:System.ValueType>, then `firstArgument` can be a value type. In this case `firstArgument` is automatically boxed. Automatic boxing does not occur for any other arguments, as it would in a C# or Visual Basic function call.","pos":[13,351],"nodes":[{"content":"If <ph id=\"ph1\">`method`</ph> is <ph id=\"ph2\">`static`</ph> (<ph id=\"ph3\">`Shared`</ph> in Visual Basic) and its first parameter is of type <ph id=\"ph4\">&lt;xref:System.Object&gt;</ph> or <ph id=\"ph5\">&lt;xref:System.ValueType&gt;</ph>, then <ph id=\"ph6\">`firstArgument`</ph> can be a value type.","pos":[1,177],"source":" If `method` is `static` (`Shared` in Visual Basic) and its first parameter is of type <xref:System.Object> or <xref:System.ValueType>, then `firstArgument` can be a value type."},{"content":"In this case <ph id=\"ph1\">`firstArgument`</ph> is automatically boxed.","pos":[178,230],"source":" In this case `firstArgument` is automatically boxed."},{"content":"Automatic boxing does not occur for any other arguments, as it would in a C# or Visual Basic function call.","pos":[231,338]}]}]},{"pos":[1756,1912],"content":"If <ph id=\"ph1\">`firstArgument`</ph> is a null reference and <ph id=\"ph2\">`method`</ph> is an instance method, the result depends on the signatures of the delegate type <ph id=\"ph3\">`type`</ph> and of <ph id=\"ph4\">`method`</ph>:","source":"If `firstArgument` is a null reference and `method` is an instance method, the result depends on the signatures of the delegate type `type` and of `method`:"},{"pos":[1922,2193],"content":"If the signature of `type` explicitly includes the hidden first parameter of `method`, the delegate is said to represent an open instance method. When the delegate is invoked, the first argument in the argument list is passed to the hidden instance parameter of `method`.","nodes":[{"content":"If the signature of <ph id=\"ph1\">`type`</ph> explicitly includes the hidden first parameter of <ph id=\"ph2\">`method`</ph>, the delegate is said to represent an open instance method.","pos":[0,145],"source":"If the signature of `type` explicitly includes the hidden first parameter of `method`, the delegate is said to represent an open instance method."},{"content":"When the delegate is invoked, the first argument in the argument list is passed to the hidden instance parameter of <ph id=\"ph1\">`method`</ph>.","pos":[146,271],"source":" When the delegate is invoked, the first argument in the argument list is passed to the hidden instance parameter of `method`."}]},{"pos":[2203,2483],"content":"If the signatures of `method` and `type` match (that is, all parameter types are compatible), then the delegate is said to be closed over a null reference. Invoking the delegate is like calling an instance method on a null instance, which is not a particularly useful thing to do.","nodes":[{"content":"If the signatures of <ph id=\"ph1\">`method`</ph> and <ph id=\"ph2\">`type`</ph> match (that is, all parameter types are compatible), then the delegate is said to be closed over a null reference.","pos":[0,155],"source":"If the signatures of `method` and `type` match (that is, all parameter types are compatible), then the delegate is said to be closed over a null reference."},{"content":"Invoking the delegate is like calling an instance method on a null instance, which is not a particularly useful thing to do.","pos":[156,280]}]},{"pos":[2490,2634],"content":"If <ph id=\"ph1\">`firstArgument`</ph> is a null reference and <ph id=\"ph2\">`method`</ph> is static, the result depends on the signatures of the delegate type <ph id=\"ph3\">`type`</ph> and of <ph id=\"ph4\">`method`</ph>:","source":"If `firstArgument` is a null reference and `method` is static, the result depends on the signatures of the delegate type `type` and of `method`:"},{"pos":[2644,3029],"content":"If the signature of `method` and `type` match (that is, all parameter types are compatible), the delegate is said to represent an open static method. This is the most common case for static methods. In this case, you can get slightly better performance by using the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload.","nodes":[{"content":"If the signature of <ph id=\"ph1\">`method`</ph> and <ph id=\"ph2\">`type`</ph> match (that is, all parameter types are compatible), the delegate is said to represent an open static method.","pos":[0,149],"source":"If the signature of `method` and `type` match (that is, all parameter types are compatible), the delegate is said to represent an open static method."},{"content":"This is the most common case for static methods.","pos":[150,198]},{"content":"In this case, you can get slightly better performance by using the <ph id=\"ph1\">&lt;xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29&gt;</ph> method overload.","pos":[199,385],"source":" In this case, you can get slightly better performance by using the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload."}]},{"pos":[3039,3317],"content":"If the signature of `type` begins with the second parameter of `method` and the rest of the parameter types are compatible, then the delegate is said to be closed over a null reference. When the delegate is invoked, a null reference is passed to the first parameter of `method`.","nodes":[{"content":"If the signature of <ph id=\"ph1\">`type`</ph> begins with the second parameter of <ph id=\"ph2\">`method`</ph> and the rest of the parameter types are compatible, then the delegate is said to be closed over a null reference.","pos":[0,185],"source":"If the signature of `type` begins with the second parameter of `method` and the rest of the parameter types are compatible, then the delegate is said to be closed over a null reference."},{"content":"When the delegate is invoked, a null reference is passed to the first parameter of <ph id=\"ph1\">`method`</ph>.","pos":[186,278],"source":" When the delegate is invoked, a null reference is passed to the first parameter of `method`."}]},{"pos":[3325,3895],"content":"[!NOTE]\n Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)","leadings":["","> "],"nodes":[{"content":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)","pos":[8,568],"nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public methods if the caller has been granted <ph id=\"ph2\">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id=\"ph3\">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName&gt;</ph> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.","pos":[1,429],"source":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof."},{"content":"(See <bpt id=\"p1\">[</bpt>Security Considerations for Reflection<ept id=\"p1\">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)","pos":[430,560],"source":" (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)"}]}]},{"pos":[3906,4033],"content":"To use this functionality, your application should target the <ph id=\"ph1\">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.","source":"To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later."},{"pos":[4042,4084],"content":"Compatible Parameter Types and Return Type","linkify":"Compatible Parameter Types and Return Type","nodes":[{"content":"Compatible Parameter Types and Return Type","pos":[0,42]}]},{"pos":[4088,4276],"content":"The parameter types and return type of a delegate must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.","nodes":[{"content":"The parameter types and return type of a delegate must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.","pos":[0,188]}]},{"pos":[4284,4366],"content":"[!NOTE]\n In the .NET Framework version 1.0 and 1.1 the types must match exactly.","leadings":["","> "],"nodes":[{"content":"In the .NET Framework version 1.0 and 1.1 the types must match exactly.","pos":[9,80]}]},{"pos":[4373,4654],"content":"A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.","nodes":[{"content":"A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.","pos":[0,281]}]},{"pos":[4661,4954],"content":"Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.","nodes":[{"content":"Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.","pos":[0,293]}]},{"pos":[4961,5220],"content":"For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.","nodes":[{"content":"For example, a delegate with a parameter of type <ph id=\"ph1\">&lt;xref:System.Collections.Hashtable&gt;</ph> and a return type of <ph id=\"ph2\">&lt;xref:System.Object&gt;</ph> can represent a method with a parameter of type <ph id=\"ph3\">&lt;xref:System.Object&gt;</ph> and a return value of type <ph id=\"ph4\">&lt;xref:System.Collections.Hashtable&gt;</ph>.","pos":[0,259],"source":"For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>."}]},{"pos":[5229,5277],"content":"Determining the Methods a Delegate Can Represent","linkify":"Determining the Methods a Delegate Can Represent","nodes":[{"content":"Determining the Methods a Delegate Can Represent","pos":[0,48]}]},{"pos":[5281,5702],"content":"Another useful way to think of the flexibility provided by this overload of <xref:System.Delegate.CreateDelegate%2A> is that any given delegate can represent four different combinations of method signature and method kind (static versus instance). Consider a delegate type `D` with one argument of type `C`. The following describes the methods `D` can represent, ignoring the return type since it must match in all cases:","nodes":[{"content":"Another useful way to think of the flexibility provided by this overload of <ph id=\"ph1\">&lt;xref:System.Delegate.CreateDelegate%2A&gt;</ph> is that any given delegate can represent four different combinations of method signature and method kind (static versus instance).","pos":[0,247],"source":"Another useful way to think of the flexibility provided by this overload of <xref:System.Delegate.CreateDelegate%2A> is that any given delegate can represent four different combinations of method signature and method kind (static versus instance)."},{"content":"Consider a delegate type <ph id=\"ph1\">`D`</ph> with one argument of type <ph id=\"ph2\">`C`</ph>.","pos":[248,307],"source":" Consider a delegate type `D` with one argument of type `C`."},{"content":"The following describes the methods <ph id=\"ph1\">`D`</ph> can represent, ignoring the return type since it must match in all cases:","pos":[308,421],"source":" The following describes the methods `D` can represent, ignoring the return type since it must match in all cases:"}]},{"pos":[5712,6125],"content":"`D` can represent any instance method that has exactly one argument of type `C`, regardless of what type the instance method belongs to. When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of the type `method` belongs to, and the resulting delegate is said to be closed over that instance. (Trivially, `D` can also be closed over a null reference if `firstArgument` is `null`.)","nodes":[{"content":"<ph id=\"ph1\">`D`</ph> can represent any instance method that has exactly one argument of type <ph id=\"ph2\">`C`</ph>, regardless of what type the instance method belongs to.","pos":[0,136],"source":"`D` can represent any instance method that has exactly one argument of type `C`, regardless of what type the instance method belongs to."},{"content":"When <ph id=\"ph1\">&lt;xref:System.Delegate.CreateDelegate%2A&gt;</ph> is called, <ph id=\"ph2\">`firstArgument`</ph> is an instance of the type <ph id=\"ph3\">`method`</ph> belongs to, and the resulting delegate is said to be closed over that instance.","pos":[137,325],"source":" When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of the type `method` belongs to, and the resulting delegate is said to be closed over that instance."},{"content":"(Trivially, <ph id=\"ph1\">`D`</ph> can also be closed over a null reference if <ph id=\"ph2\">`firstArgument`</ph> is <ph id=\"ph3\">`null`</ph>.)","pos":[326,413],"source":" (Trivially, `D` can also be closed over a null reference if `firstArgument` is `null`.)"}]},{"pos":[6135,6419],"content":"`D` can represent an instance method of `C` that has no arguments. When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference. The resulting delegate represents an open instance method, and an instance of `C` must be supplied each time it is invoked.","nodes":[{"content":"<ph id=\"ph1\">`D`</ph> can represent an instance method of <ph id=\"ph2\">`C`</ph> that has no arguments.","pos":[0,66],"source":"`D` can represent an instance method of `C` that has no arguments."},{"content":"When <ph id=\"ph1\">&lt;xref:System.Delegate.CreateDelegate%2A&gt;</ph> is called, <ph id=\"ph2\">`firstArgument`</ph> is a null reference.","pos":[67,160],"source":" When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference."},{"content":"The resulting delegate represents an open instance method, and an instance of <ph id=\"ph1\">`C`</ph> must be supplied each time it is invoked.","pos":[161,284],"source":" The resulting delegate represents an open instance method, and an instance of `C` must be supplied each time it is invoked."}]},{"pos":[6429,6755],"content":"`D` can represent a static method that takes one argument of type `C`, and that method can belong to any type. When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference. The resulting delegate represents an open static method, and an instance of `C` must be supplied each time it is invoked.","nodes":[{"content":"<ph id=\"ph1\">`D`</ph> can represent a static method that takes one argument of type <ph id=\"ph2\">`C`</ph>, and that method can belong to any type.","pos":[0,110],"source":"`D` can represent a static method that takes one argument of type `C`, and that method can belong to any type."},{"content":"When <ph id=\"ph1\">&lt;xref:System.Delegate.CreateDelegate%2A&gt;</ph> is called, <ph id=\"ph2\">`firstArgument`</ph> is a null reference.","pos":[111,204],"source":" When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference."},{"content":"The resulting delegate represents an open static method, and an instance of <ph id=\"ph1\">`C`</ph> must be supplied each time it is invoked.","pos":[205,326],"source":" The resulting delegate represents an open static method, and an instance of `C` must be supplied each time it is invoked."}]},{"pos":[6765,7251],"content":"`D` can represent a static method that belongs to type `F` and has two arguments, of type `F` and type `C`. When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of `F`. The resulting delegate represents a static method that is closed over that instance of `F`. Note that in the case where `F` and `C` are the same type, the static method has two arguments of that type. (In this case, `D` is closed over a null reference if `firstArgument` is `null`.)","nodes":[{"content":"<ph id=\"ph1\">`D`</ph> can represent a static method that belongs to type <ph id=\"ph2\">`F`</ph> and has two arguments, of type <ph id=\"ph3\">`F`</ph> and type <ph id=\"ph4\">`C`</ph>.","pos":[0,107],"source":"`D` can represent a static method that belongs to type `F` and has two arguments, of type `F` and type `C`."},{"content":"When <ph id=\"ph1\">&lt;xref:System.Delegate.CreateDelegate%2A&gt;</ph> is called, <ph id=\"ph2\">`firstArgument`</ph> is an instance of <ph id=\"ph3\">`F`</ph>.","pos":[108,203],"source":" When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of `F`."},{"content":"The resulting delegate represents a static method that is closed over that instance of <ph id=\"ph1\">`F`</ph>.","pos":[204,295],"source":" The resulting delegate represents a static method that is closed over that instance of `F`."},{"content":"Note that in the case where <ph id=\"ph1\">`F`</ph> and <ph id=\"ph2\">`C`</ph> are the same type, the static method has two arguments of that type.","pos":[296,404],"source":" Note that in the case where `F` and `C` are the same type, the static method has two arguments of that type."},{"content":"(In this case, <ph id=\"ph1\">`D`</ph> is closed over a null reference if <ph id=\"ph2\">`firstArgument`</ph> is <ph id=\"ph3\">`null`</ph>.)","pos":[405,486],"source":" (In this case, `D` is closed over a null reference if `firstArgument` is `null`.)"}]}],"pos":[79774,87080],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Type\"></xref> representing the type of delegate to create.","nodes":[{"pos":[0,79],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> representing the type of delegate to create.","source":"A <xref href=\"System.Type\"></xref> representing the type of delegate to create."}],"pos":[93404,93484],"yaml":true},{"content":"An <xref href=\"System.Object\"></xref> that is the first argument of the method the delegate represents. For instance methods, it must be compatible with the instance type.","nodes":[{"pos":[0,171],"content":"An <xref href=\"System.Object\"></xref> that is the first argument of the method the delegate represents. For instance methods, it must be compatible with the instance type.","nodes":[{"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> that is the first argument of the method the delegate represents.","pos":[0,103],"source":"An <xref href=\"System.Object\"></xref> that is the first argument of the method the delegate represents."},{"content":"For instance methods, it must be compatible with the instance type.","pos":[104,171]}]}],"pos":[93553,93725],"yaml":true},{"content":"The <xref href=\"System.Reflection.MethodInfo\"></xref> describing the static or instance method the delegate is to represent.","nodes":[{"pos":[0,124],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> describing the static or instance method the delegate is to represent.","source":"The <xref href=\"System.Reflection.MethodInfo\"></xref> describing the static or instance method the delegate is to represent."}],"pos":[93802,93927],"yaml":true},{"content":"`true` to throw an exception if <code>method</code> cannot be bound; otherwise, `false`.","nodes":[{"pos":[0,88],"content":"<ph id=\"ph1\">`true`</ph> to throw an exception if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">method</ph><ept id=\"p1\">&lt;/code&gt;</ept> cannot be bound; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` to throw an exception if <code>method</code> cannot be bound; otherwise, `false`."}],"pos":[94002,94093],"yaml":true},{"content":"A delegate of the specified type that represents the specified static or instance method, or `null` if <code>throwOnBindFailure</code> is `false` and the delegate cannot be bound to <code>method</code>.","nodes":[{"pos":[0,202],"content":"A delegate of the specified type that represents the specified static or instance method, or <ph id=\"ph1\">`null`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">throwOnBindFailure</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`false`</ph> and the delegate cannot be bound to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph4\">method</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"A delegate of the specified type that represents the specified static or instance method, or `null` if <code>throwOnBindFailure</code> is `false` and the delegate cannot be bound to <code>method</code>."}],"pos":[94152,94355],"yaml":true},{"content":"<code>type</code> is `null`.  \n  \n -or-  \n  \n <code>method</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>type</code> is `null`."},{"pos":[35,39],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[46,76],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>method</code> is `null`."}],"pos":[94515,94598],"yaml":true},{"content":"<code>type</code> does not inherit <xref href=\"System.MulticastDelegate\"></xref>.  \n  \n -or-  \n  \n <code>type</code> is not a `RuntimeType`. See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858).  \n  \n -or-  \n  \n <code>method</code> cannot be bound, and <code>throwOnBindFailure</code> is `true`.  \n  \n -or-  \n  \n <code>method</code> is not a `RuntimeMethodInfo`. See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858).","nodes":[{"pos":[0,81],"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> does not inherit <ph id=\"ph2\">&lt;xref href=\"System.MulticastDelegate\"&gt;&lt;/xref&gt;</ph>.","source":"<code>type</code> does not inherit <xref href=\"System.MulticastDelegate\"></xref>."},{"pos":[88,92],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[99,245],"content":"<code>type</code> is not a `RuntimeType`. See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858).","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> is not a <ph id=\"ph2\">`RuntimeType`</ph>.","pos":[0,41],"source":"<code>type</code> is not a `RuntimeType`."},{"content":"See <bpt id=\"p1\">[</bpt>Runtime Types in Reflection<ept id=\"p1\">](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858)</ept>.","pos":[42,146],"source":" See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858)."}]},{"pos":[252,256],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[263,346],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> cannot be bound, and <ph id=\"ph2\">&lt;code&gt;throwOnBindFailure&lt;/code&gt;</ph> is <ph id=\"ph3\">`true`</ph>.","source":"<code>method</code> cannot be bound, and <code>throwOnBindFailure</code> is `true`."},{"pos":[353,357],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[364,518],"content":"<code>method</code> is not a `RuntimeMethodInfo`. See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858).","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is not a <ph id=\"ph2\">`RuntimeMethodInfo`</ph>.","pos":[0,49],"source":"<code>method</code> is not a `RuntimeMethodInfo`."},{"content":"See <bpt id=\"p1\">[</bpt>Runtime Types in Reflection<ept id=\"p1\">](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858)</ept>.","pos":[50,154],"source":" See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858)."}]}],"pos":[94692,95227],"yaml":true},{"content":"The `Invoke` method of <code>type</code> is not found.","nodes":[{"pos":[0,54],"content":"The <ph id=\"ph1\">`Invoke`</ph> method of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">type</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not found.","source":"The `Invoke` method of <code>type</code> is not found."}],"pos":[95331,95386],"yaml":true},{"content":"The caller does not have the permissions necessary to access <code>method</code>.","nodes":[{"pos":[0,81],"content":"The caller does not have the permissions necessary to access <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">method</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The caller does not have the permissions necessary to access <code>method</code>."}],"pos":[95488,95570],"yaml":true},{"content":"Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance, with the specified case-sensitivity and the specified behavior on failure to bind.","nodes":[{"pos":[0,212],"content":"Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance, with the specified case-sensitivity and the specified behavior on failure to bind.","nodes":[{"content":"Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance, with the specified case-sensitivity and the specified behavior on failure to bind.","pos":[0,212]}]}],"pos":[96973,97186],"yaml":true},{"content":"This method creates delegates for instance methods only. An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \n>   \n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.","nodes":[{"pos":[0,205],"content":"This method creates delegates for instance methods only. An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.","nodes":[{"content":"This method creates delegates for instance methods only. An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.","pos":[0,205],"nodes":[{"content":"This method creates delegates for instance methods only.","pos":[0,56]},{"content":"An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.","pos":[57,205]}]}]},{"pos":[213,783],"content":"[!NOTE]\n Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)","leadings":["","> "],"nodes":[{"content":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)","pos":[8,568],"nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public methods if the caller has been granted <ph id=\"ph2\">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id=\"ph3\">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName&gt;</ph> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.","pos":[1,429],"source":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof."},{"content":"(See <bpt id=\"p1\">[</bpt>Security Considerations for Reflection<ept id=\"p1\">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)","pos":[430,560],"source":" (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)"}]}]},{"pos":[794,921],"content":"To use this functionality, your application should target the <ph id=\"ph1\">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.","source":"To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later."}],"pos":[97197,98126],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Type\"></xref> of delegate to create.","nodes":[{"pos":[0,59],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> of delegate to create.","source":"The <xref href=\"System.Type\"></xref> of delegate to create."}],"pos":[98346,98406],"yaml":true},{"content":"The class instance on which <code>method</code> is invoked.","nodes":[{"pos":[0,59],"content":"The class instance on which <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">method</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invoked.","source":"The class instance on which <code>method</code> is invoked."}],"pos":[98468,98528],"yaml":true},{"content":"The name of the instance method that the delegate is to represent.","nodes":[{"pos":[0,66],"content":"The name of the instance method that the delegate is to represent.","nodes":[{"content":"The name of the instance method that the delegate is to represent.","pos":[0,66]}]}],"pos":[98590,98657],"yaml":true},{"content":"A Boolean indicating whether to ignore the case when comparing the name of the method.","nodes":[{"pos":[0,86],"content":"A Boolean indicating whether to ignore the case when comparing the name of the method.","nodes":[{"content":"A Boolean indicating whether to ignore the case when comparing the name of the method.","pos":[0,86]}]}],"pos":[98724,98811],"yaml":true},{"content":"`true` to throw an exception if <code>method</code> cannot be bound; otherwise, `false`.","nodes":[{"pos":[0,88],"content":"<ph id=\"ph1\">`true`</ph> to throw an exception if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">method</ph><ept id=\"p1\">&lt;/code&gt;</ept> cannot be bound; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` to throw an exception if <code>method</code> cannot be bound; otherwise, `false`."}],"pos":[98886,98977],"yaml":true},{"content":"A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.","nodes":[{"pos":[0,121],"content":"A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.","nodes":[{"content":"A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.","pos":[0,121]}]}],"pos":[99036,99158],"yaml":true},{"content":"<code>type</code> is `null`.  \n  \n -or-  \n  \n <code>target</code> is `null`.  \n  \n -or-  \n  \n <code>method</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>type</code> is `null`."},{"pos":[35,39],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[46,76],"content":"<ph id=\"ph1\">&lt;code&gt;target&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>target</code> is `null`."},{"pos":[83,87],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[94,124],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>method</code> is `null`."}],"pos":[99318,99453],"yaml":true},{"content":"<code>type</code> does not inherit <xref href=\"System.MulticastDelegate\"></xref>.  \n  \n -or-  \n  \n <code>type</code> is not a `RuntimeType`. See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858).  \n  \n -or-  \n  \n <code>method</code> is not an instance method.  \n  \n -or-  \n  \n <code>method</code> cannot be bound, for example because it cannot be found, and <code>throwOnBindFailure</code> is `true`.","nodes":[{"pos":[0,81],"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> does not inherit <ph id=\"ph2\">&lt;xref href=\"System.MulticastDelegate\"&gt;&lt;/xref&gt;</ph>.","source":"<code>type</code> does not inherit <xref href=\"System.MulticastDelegate\"></xref>."},{"pos":[88,92],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[99,245],"content":"<code>type</code> is not a `RuntimeType`. See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858).","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> is not a <ph id=\"ph2\">`RuntimeType`</ph>.","pos":[0,41],"source":"<code>type</code> is not a `RuntimeType`."},{"content":"See <bpt id=\"p1\">[</bpt>Runtime Types in Reflection<ept id=\"p1\">](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858)</ept>.","pos":[42,146],"source":" See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858)."}]},{"pos":[252,256],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[263,309],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is not an instance method.","source":"<code>method</code> is not an instance method."},{"pos":[316,320],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[327,450],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> cannot be bound, for example because it cannot be found, and <ph id=\"ph2\">&lt;code&gt;throwOnBindFailure&lt;/code&gt;</ph> is <ph id=\"ph3\">`true`</ph>.","source":"<code>method</code> cannot be bound, for example because it cannot be found, and <code>throwOnBindFailure</code> is `true`."}],"pos":[99547,100014],"yaml":true},{"content":"The `Invoke` method of <code>type</code> is not found.","nodes":[{"pos":[0,54],"content":"The <ph id=\"ph1\">`Invoke`</ph> method of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">type</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not found.","source":"The `Invoke` method of <code>type</code> is not found."}],"pos":[100118,100173],"yaml":true},{"content":"The caller does not have the permissions necessary to access <code>method</code>.","nodes":[{"pos":[0,81],"content":"The caller does not have the permissions necessary to access <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">method</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The caller does not have the permissions necessary to access <code>method</code>."}],"pos":[100275,100357],"yaml":true},{"content":"Creates a delegate of the specified type to represent the specified static method, with the specified behavior on failure to bind.","nodes":[{"pos":[0,130],"content":"Creates a delegate of the specified type to represent the specified static method, with the specified behavior on failure to bind.","nodes":[{"content":"Creates a delegate of the specified type to represent the specified static method, with the specified behavior on failure to bind.","pos":[0,130]}]}],"pos":[101679,101810],"yaml":true},{"content":"This method overload can create open static method delegates and open instance method delegates — that is, delegates that expose the hidden first argument of instance methods. For a detailed explanation, see the more general <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload, which allows you to create all combinations of open or closed delegates for instance or static methods.  \n  \n> [!NOTE]\n>  This method overload should be used when the delegate is not closed over its first argument, because it is somewhat faster in that case.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \n>   \n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.  \n  \n## Compatible Parameter Types and Return Type  \n The parameter types and return type of a delegate must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.  \n  \n> [!NOTE]\n>  In the .NET Framework version 1.0 and 1.1, the types must match exactly.  \n  \n A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.  \n  \n Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.  \n  \n For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.","nodes":[{"pos":[0,464],"content":"This method overload can create open static method delegates and open instance method delegates — that is, delegates that expose the hidden first argument of instance methods. For a detailed explanation, see the more general <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload, which allows you to create all combinations of open or closed delegates for instance or static methods.","nodes":[{"content":"This method overload can create open static method delegates and open instance method delegates — that is, delegates that expose the hidden first argument of instance methods. For a detailed explanation, see the more general <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload, which allows you to create all combinations of open or closed delegates for instance or static methods.","pos":[0,464],"nodes":[{"content":"This method overload can create open static method delegates and open instance method delegates — that is, delegates that expose the hidden first argument of instance methods.","pos":[0,175]},{"content":"For a detailed explanation, see the more general <ph id=\"ph1\">&lt;xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29&gt;</ph> method overload, which allows you to create all combinations of open or closed delegates for instance or static methods.","pos":[176,464],"source":" For a detailed explanation, see the more general <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload, which allows you to create all combinations of open or closed delegates for instance or static methods."}]}]},{"pos":[472,619],"content":"[!NOTE]\n This method overload should be used when the delegate is not closed over its first argument, because it is somewhat faster in that case.","leadings":["","> "],"nodes":[{"content":"This method overload should be used when the delegate is not closed over its first argument, because it is somewhat faster in that case.","pos":[9,145]}]},{"pos":[627,1197],"content":"[!NOTE]\n Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)","leadings":["","> "],"nodes":[{"content":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)","pos":[8,568],"nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public methods if the caller has been granted <ph id=\"ph2\">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id=\"ph3\">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName&gt;</ph> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.","pos":[1,429],"source":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof."},{"content":"(See <bpt id=\"p1\">[</bpt>Security Considerations for Reflection<ept id=\"p1\">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)","pos":[430,560],"source":" (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)"}]}]},{"pos":[1208,1335],"content":"To use this functionality, your application should target the <ph id=\"ph1\">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.","source":"To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later."},{"pos":[1344,1386],"content":"Compatible Parameter Types and Return Type","linkify":"Compatible Parameter Types and Return Type","nodes":[{"content":"Compatible Parameter Types and Return Type","pos":[0,42]}]},{"pos":[1390,1578],"content":"The parameter types and return type of a delegate must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.","nodes":[{"content":"The parameter types and return type of a delegate must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.","pos":[0,188]}]},{"pos":[1586,1669],"content":"[!NOTE]\n In the .NET Framework version 1.0 and 1.1, the types must match exactly.","leadings":["","> "],"nodes":[{"content":"In the .NET Framework version 1.0 and 1.1, the types must match exactly.","pos":[9,81]}]},{"pos":[1676,1957],"content":"A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.","nodes":[{"content":"A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.","pos":[0,281]}]},{"pos":[1964,2257],"content":"Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.","nodes":[{"content":"Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.","pos":[0,293]}]},{"pos":[2264,2523],"content":"For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.","nodes":[{"content":"For example, a delegate with a parameter of type <ph id=\"ph1\">&lt;xref:System.Collections.Hashtable&gt;</ph> and a return type of <ph id=\"ph2\">&lt;xref:System.Object&gt;</ph> can represent a method with a parameter of type <ph id=\"ph3\">&lt;xref:System.Object&gt;</ph> and a return value of type <ph id=\"ph4\">&lt;xref:System.Collections.Hashtable&gt;</ph>.","pos":[0,259],"source":"For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>."}]}],"pos":[101821,104367],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Type\"></xref> of delegate to create.","nodes":[{"pos":[0,59],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> of delegate to create.","source":"The <xref href=\"System.Type\"></xref> of delegate to create."}],"pos":[108106,108166],"yaml":true},{"content":"The <xref href=\"System.Reflection.MethodInfo\"></xref> describing the static or instance method the delegate is to represent.","nodes":[{"pos":[0,124],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> describing the static or instance method the delegate is to represent.","source":"The <xref href=\"System.Reflection.MethodInfo\"></xref> describing the static or instance method the delegate is to represent."}],"pos":[108243,108368],"yaml":true},{"content":"`true` to throw an exception if <code>method</code> cannot be bound; otherwise, `false`.","nodes":[{"pos":[0,88],"content":"<ph id=\"ph1\">`true`</ph> to throw an exception if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">method</ph><ept id=\"p1\">&lt;/code&gt;</ept> cannot be bound; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` to throw an exception if <code>method</code> cannot be bound; otherwise, `false`."}],"pos":[108443,108534],"yaml":true},{"content":"A delegate of the specified type to represent the specified static method.","nodes":[{"pos":[0,74],"content":"A delegate of the specified type to represent the specified static method.","nodes":[{"content":"A delegate of the specified type to represent the specified static method.","pos":[0,74]}]}],"pos":[108593,108668],"yaml":true},{"content":"<code>type</code> is `null`.  \n  \n -or-  \n  \n <code>method</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>type</code> is `null`."},{"pos":[35,39],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[46,76],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>method</code> is `null`."}],"pos":[108828,108911],"yaml":true},{"content":"<code>type</code> does not inherit <xref href=\"System.MulticastDelegate\"></xref>.  \n  \n -or-  \n  \n <code>type</code> is not a `RuntimeType`. See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858).  \n  \n -or-  \n  \n <code>method</code> cannot be bound, and <code>throwOnBindFailure</code> is `true`.  \n  \n -or-  \n  \n <code>method</code> is not a `RuntimeMethodInfo`. See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858).","nodes":[{"pos":[0,81],"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> does not inherit <ph id=\"ph2\">&lt;xref href=\"System.MulticastDelegate\"&gt;&lt;/xref&gt;</ph>.","source":"<code>type</code> does not inherit <xref href=\"System.MulticastDelegate\"></xref>."},{"pos":[88,92],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[99,245],"content":"<code>type</code> is not a `RuntimeType`. See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858).","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> is not a <ph id=\"ph2\">`RuntimeType`</ph>.","pos":[0,41],"source":"<code>type</code> is not a `RuntimeType`."},{"content":"See <bpt id=\"p1\">[</bpt>Runtime Types in Reflection<ept id=\"p1\">](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858)</ept>.","pos":[42,146],"source":" See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858)."}]},{"pos":[252,256],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[263,346],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> cannot be bound, and <ph id=\"ph2\">&lt;code&gt;throwOnBindFailure&lt;/code&gt;</ph> is <ph id=\"ph3\">`true`</ph>.","source":"<code>method</code> cannot be bound, and <code>throwOnBindFailure</code> is `true`."},{"pos":[353,357],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[364,518],"content":"<code>method</code> is not a `RuntimeMethodInfo`. See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858).","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is not a <ph id=\"ph2\">`RuntimeMethodInfo`</ph>.","pos":[0,49],"source":"<code>method</code> is not a `RuntimeMethodInfo`."},{"content":"See <bpt id=\"p1\">[</bpt>Runtime Types in Reflection<ept id=\"p1\">](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858)</ept>.","pos":[50,154],"source":" See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858)."}]}],"pos":[109005,109540],"yaml":true},{"content":"The `Invoke` method of <code>type</code> is not found.","nodes":[{"pos":[0,54],"content":"The <ph id=\"ph1\">`Invoke`</ph> method of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">type</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not found.","source":"The `Invoke` method of <code>type</code> is not found."}],"pos":[109644,109699],"yaml":true},{"content":"The caller does not have the permissions necessary to access <code>method</code>.","nodes":[{"pos":[0,81],"content":"The caller does not have the permissions necessary to access <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">method</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The caller does not have the permissions necessary to access <code>method</code>."}],"pos":[109801,109883],"yaml":true},{"content":"Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance.","nodes":[{"pos":[0,129],"content":"Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance.","nodes":[{"content":"Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance.","pos":[0,129]}]}],"pos":[111142,111272],"yaml":true},{"content":"This method creates delegates for instance methods only. An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.  \n  \n This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `false` for `ignoreCase` and `true` for `throwOnBindFailure`.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \n>   \n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.","nodes":[{"pos":[0,205],"content":"This method creates delegates for instance methods only. An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.","nodes":[{"content":"This method creates delegates for instance methods only. An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.","pos":[0,205],"nodes":[{"content":"This method creates delegates for instance methods only.","pos":[0,56]},{"content":"An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.","pos":[57,205]}]}]},{"pos":[212,472],"content":"This method overload is equivalent to calling the <ph id=\"ph1\">&lt;xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29&gt;</ph> method overload, specifying <ph id=\"ph2\">`false`</ph> for <ph id=\"ph3\">`ignoreCase`</ph> and <ph id=\"ph4\">`true`</ph> for <ph id=\"ph5\">`throwOnBindFailure`</ph>.","source":"This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `false` for `ignoreCase` and `true` for `throwOnBindFailure`."},{"pos":[480,1050],"content":"[!NOTE]\n Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)","leadings":["","> "],"nodes":[{"content":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)","pos":[8,568],"nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public methods if the caller has been granted <ph id=\"ph2\">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id=\"ph3\">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName&gt;</ph> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.","pos":[1,429],"source":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof."},{"content":"(See <bpt id=\"p1\">[</bpt>Security Considerations for Reflection<ept id=\"p1\">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)","pos":[430,560],"source":" (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)"}]}]},{"pos":[1061,1188],"content":"To use this functionality, your application should target the <ph id=\"ph1\">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.","source":"To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later."}],"pos":[111283,112481],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Type\"></xref> of delegate to create.","nodes":[{"pos":[0,59],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> of delegate to create.","source":"The <xref href=\"System.Type\"></xref> of delegate to create."}],"pos":[112659,112719],"yaml":true},{"content":"The class instance on which <code>method</code> is invoked.","nodes":[{"pos":[0,59],"content":"The class instance on which <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">method</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invoked.","source":"The class instance on which <code>method</code> is invoked."}],"pos":[112781,112841],"yaml":true},{"content":"The name of the instance method that the delegate is to represent.","nodes":[{"pos":[0,66],"content":"The name of the instance method that the delegate is to represent.","nodes":[{"content":"The name of the instance method that the delegate is to represent.","pos":[0,66]}]}],"pos":[112903,112970],"yaml":true},{"content":"A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.","nodes":[{"pos":[0,121],"content":"A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.","nodes":[{"content":"A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.","pos":[0,121]}]}],"pos":[113029,113151],"yaml":true},{"content":"<code>type</code> is `null`.  \n  \n -or-  \n  \n <code>target</code> is `null`.  \n  \n -or-  \n  \n <code>method</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>type</code> is `null`."},{"pos":[35,39],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[46,76],"content":"<ph id=\"ph1\">&lt;code&gt;target&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>target</code> is `null`."},{"pos":[83,87],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[94,124],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>method</code> is `null`."}],"pos":[113311,113446],"yaml":true},{"content":"<code>type</code> does not inherit <xref href=\"System.MulticastDelegate\"></xref>.  \n  \n -or-  \n  \n <code>type</code> is not a `RuntimeType`. See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858).  \n  \n -or-  \n  \n <code>method</code> is not an instance method.  \n  \n -or-  \n  \n <code>method</code> cannot be bound, for example because it cannot be found.","nodes":[{"pos":[0,81],"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> does not inherit <ph id=\"ph2\">&lt;xref href=\"System.MulticastDelegate\"&gt;&lt;/xref&gt;</ph>.","source":"<code>type</code> does not inherit <xref href=\"System.MulticastDelegate\"></xref>."},{"pos":[88,92],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[99,245],"content":"<code>type</code> is not a `RuntimeType`. See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858).","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> is not a <ph id=\"ph2\">`RuntimeType`</ph>.","pos":[0,41],"source":"<code>type</code> is not a `RuntimeType`."},{"content":"See <bpt id=\"p1\">[</bpt>Runtime Types in Reflection<ept id=\"p1\">](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858)</ept>.","pos":[42,146],"source":" See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858)."}]},{"pos":[252,256],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[263,309],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is not an instance method.","source":"<code>method</code> is not an instance method."},{"pos":[316,320],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[327,403],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> cannot be bound, for example because it cannot be found.","source":"<code>method</code> cannot be bound, for example because it cannot be found."}],"pos":[113540,113960],"yaml":true},{"content":"The `Invoke` method of <code>type</code> is not found.","nodes":[{"pos":[0,54],"content":"The <ph id=\"ph1\">`Invoke`</ph> method of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">type</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not found.","source":"The `Invoke` method of <code>type</code> is not found."}],"pos":[114064,114119],"yaml":true},{"content":"The caller does not have the permissions necessary to access <code>method</code>.","nodes":[{"pos":[0,81],"content":"The caller does not have the permissions necessary to access <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">method</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The caller does not have the permissions necessary to access <code>method</code>."}],"pos":[114221,114303],"yaml":true},{"content":"Creates a delegate of the specified type that represents the specified static or instance method, with the specified first argument.","nodes":[{"pos":[0,132],"content":"Creates a delegate of the specified type that represents the specified static or instance method, with the specified first argument.","nodes":[{"content":"Creates a delegate of the specified type that represents the specified static or instance method, with the specified first argument.","pos":[0,132]}]}],"pos":[115619,115752],"yaml":true},{"content":"Calling this method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload and specifying `true` for `throwOnBindFailure`. These two overloads provide the most flexible way to create delegates. You can use them to create delegates for either static or instance methods, and optionally to specify the first argument.  \n  \n> [!NOTE]\n>  If you do not supply a first argument, use the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload for better performance.  \n  \n The delegate type and the method must have compatible return types. That is, the return type of `method` must be assignable to the return type of `type`.  \n  \n If `firstArgument` is supplied, it is passed to `method` every time the delegate is invoked; `firstArgument` is said to be bound to the delegate, and the delegate is said to be closed over its first argument. If `method` is `static` (`Shared` in Visual Basic), the argument list supplied when invoking the delegate includes all parameters except the first; if `method` is an instance method, then `firstArgument` is passed to the hidden instance parameter (represented by `this` in C#, or by `Me` in Visual Basic).  \n  \n If `firstArgument` is supplied, the first parameter of `method` must be a reference type, and `firstArgument` must be compatible with that type.  \n  \n> [!IMPORTANT]\n>  If `method` is `static` (`Shared` in Visual Basic) and its first parameter is of type <xref:System.Object> or <xref:System.ValueType>, then `firstArgument` can be a value type. In this case `firstArgument` is automatically boxed. Automatic boxing does not occur for any other arguments, as it would in a C# or Visual Basic function call.  \n  \n If `firstArgument` is a null reference and `method` is an instance method, the result depends on the signatures of the delegate type `type` and of `method`:  \n  \n-   If the signature of `type` explicitly includes the hidden first parameter of `method`, the delegate is said to represent an open instance method. When the delegate is invoked, the first argument in the argument list is passed to the hidden instance parameter of `method`.  \n  \n-   If the signatures of `method` and `type` match (that is, all parameter types are compatible), then the delegate is said to be closed over a null reference. Invoking the delegate is like calling an instance method on a null instance, which is not a particularly useful thing to do.  \n  \n If `firstArgument` is a null reference and `method` is static, the result depends on the signatures of the delegate type `type` and of `method`:  \n  \n-   If the signature of `method` and `type` match (that is, all parameter types are compatible), the delegate is said to represent an open static method. This is the most common case for static methods. In this case, you can get slightly better performance by using the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload.  \n  \n-   If the signature of `type` begins with the second parameter of `method` and the rest of the parameter types are compatible, then the delegate is said to be closed over a null reference. When the delegate is invoked, a null reference is passed to the first parameter of `method`.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \n>   \n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.  \n  \n## Compatible Parameter Types and Return Type  \n The parameter types and return type of a delegate must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.  \n  \n> [!NOTE]\n>  In the .NET Framework version 1.0 and 1.1, the types must match exactly.  \n  \n A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.  \n  \n Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.  \n  \n For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.  \n  \n## Determining the Methods a Delegate Can Represent  \n Another useful way to think of the flexibility provided by this overload of <xref:System.Delegate.CreateDelegate%2A> is that any given delegate can represent four different combinations of method signature and method kind (static versus instance). Consider a delegate type `D` with one argument of type `C`. The following describes the methods `D` can represent, ignoring the return type since it must match in all cases:  \n  \n-   `D` can represent any instance method that has exactly one argument of type `C`, regardless of what type the instance method belongs to. When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of the type `method` belongs to, and the resulting delegate is said to be closed over that instance. (Trivially, `D` can also be closed over a null reference if `firstArgument` is a null reference.)  \n  \n-   `D` can represent an instance method of `C` that has no arguments. When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference. The resulting delegate represents an open instance method, and an instance of `C` must be supplied each time it is invoked.  \n  \n-   `D` can represent a static method that takes one argument of type `C`, and that method can belong to any type. When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference. The resulting delegate represents an open static method, and an instance of `C` must be supplied each time it is invoked.  \n  \n-   `D` can represent a static method that belongs to type `F` and has two arguments, of type `F` and type `C`. When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of `F`. The resulting delegate represents a static method that is closed over that instance of `F`. Note that in the case where `F` and `C` are the same type, the static method has two arguments of that type. (In this case, `D` is closed over a null reference if `firstArgument` is a null reference.)","nodes":[{"pos":[0,433],"content":"Calling this method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload and specifying `true` for `throwOnBindFailure`. These two overloads provide the most flexible way to create delegates. You can use them to create delegates for either static or instance methods, and optionally to specify the first argument.","nodes":[{"content":"Calling this method overload is equivalent to calling the <ph id=\"ph1\">&lt;xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29&gt;</ph> method overload and specifying <ph id=\"ph2\">`true`</ph> for <ph id=\"ph3\">`throwOnBindFailure`</ph>.","pos":[0,240],"source":"Calling this method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload and specifying `true` for `throwOnBindFailure`."},{"content":"These two overloads provide the most flexible way to create delegates.","pos":[241,311]},{"content":"You can use them to create delegates for either static or instance methods, and optionally to specify the first argument.","pos":[312,433]}]},{"pos":[441,624],"content":"[!NOTE]\n If you do not supply a first argument, use the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload for better performance.","leadings":["","> "],"nodes":[{"content":"If you do not supply a first argument, use the <ph id=\"ph1\">&lt;xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29&gt;</ph> method overload for better performance.","pos":[9,181],"source":" If you do not supply a first argument, use the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload for better performance."}]},{"pos":[631,784],"content":"The delegate type and the method must have compatible return types. That is, the return type of `method` must be assignable to the return type of `type`.","nodes":[{"content":"The delegate type and the method must have compatible return types.","pos":[0,67]},{"content":"That is, the return type of <ph id=\"ph1\">`method`</ph> must be assignable to the return type of <ph id=\"ph2\">`type`</ph>.","pos":[68,153],"source":" That is, the return type of `method` must be assignable to the return type of `type`."}]},{"pos":[791,1305],"content":"If `firstArgument` is supplied, it is passed to `method` every time the delegate is invoked; `firstArgument` is said to be bound to the delegate, and the delegate is said to be closed over its first argument. If `method` is `static` (`Shared` in Visual Basic), the argument list supplied when invoking the delegate includes all parameters except the first; if `method` is an instance method, then `firstArgument` is passed to the hidden instance parameter (represented by `this` in C#, or by `Me` in Visual Basic).","nodes":[{"content":"If <ph id=\"ph1\">`firstArgument`</ph> is supplied, it is passed to <ph id=\"ph2\">`method`</ph> every time the delegate is invoked; <ph id=\"ph3\">`firstArgument`</ph> is said to be bound to the delegate, and the delegate is said to be closed over its first argument.","pos":[0,208],"source":"If `firstArgument` is supplied, it is passed to `method` every time the delegate is invoked; `firstArgument` is said to be bound to the delegate, and the delegate is said to be closed over its first argument."},{"content":"If <ph id=\"ph1\">`method`</ph> is <ph id=\"ph2\">`static`</ph> (<ph id=\"ph3\">`Shared`</ph> in Visual Basic), the argument list supplied when invoking the delegate includes all parameters except the first; if <ph id=\"ph4\">`method`</ph> is an instance method, then <ph id=\"ph5\">`firstArgument`</ph> is passed to the hidden instance parameter (represented by <ph id=\"ph6\">`this`</ph> in C#, or by <ph id=\"ph7\">`Me`</ph> in Visual Basic).","pos":[209,514],"source":" If `method` is `static` (`Shared` in Visual Basic), the argument list supplied when invoking the delegate includes all parameters except the first; if `method` is an instance method, then `firstArgument` is passed to the hidden instance parameter (represented by `this` in C#, or by `Me` in Visual Basic)."}]},{"pos":[1312,1456],"content":"If <ph id=\"ph1\">`firstArgument`</ph> is supplied, the first parameter of <ph id=\"ph2\">`method`</ph> must be a reference type, and <ph id=\"ph3\">`firstArgument`</ph> must be compatible with that type.","source":"If `firstArgument` is supplied, the first parameter of `method` must be a reference type, and `firstArgument` must be compatible with that type."},{"pos":[1464,1817],"content":"[!IMPORTANT]\n If `method` is `static` (`Shared` in Visual Basic) and its first parameter is of type <xref:System.Object> or <xref:System.ValueType>, then `firstArgument` can be a value type. In this case `firstArgument` is automatically boxed. Automatic boxing does not occur for any other arguments, as it would in a C# or Visual Basic function call.","leadings":["","> "],"nodes":[{"content":" If `method` is `static` (`Shared` in Visual Basic) and its first parameter is of type <xref:System.Object> or <xref:System.ValueType>, then `firstArgument` can be a value type. In this case `firstArgument` is automatically boxed. Automatic boxing does not occur for any other arguments, as it would in a C# or Visual Basic function call.","pos":[13,351],"nodes":[{"content":"If <ph id=\"ph1\">`method`</ph> is <ph id=\"ph2\">`static`</ph> (<ph id=\"ph3\">`Shared`</ph> in Visual Basic) and its first parameter is of type <ph id=\"ph4\">&lt;xref:System.Object&gt;</ph> or <ph id=\"ph5\">&lt;xref:System.ValueType&gt;</ph>, then <ph id=\"ph6\">`firstArgument`</ph> can be a value type.","pos":[1,177],"source":" If `method` is `static` (`Shared` in Visual Basic) and its first parameter is of type <xref:System.Object> or <xref:System.ValueType>, then `firstArgument` can be a value type."},{"content":"In this case <ph id=\"ph1\">`firstArgument`</ph> is automatically boxed.","pos":[178,230],"source":" In this case `firstArgument` is automatically boxed."},{"content":"Automatic boxing does not occur for any other arguments, as it would in a C# or Visual Basic function call.","pos":[231,338]}]}]},{"pos":[1824,1980],"content":"If <ph id=\"ph1\">`firstArgument`</ph> is a null reference and <ph id=\"ph2\">`method`</ph> is an instance method, the result depends on the signatures of the delegate type <ph id=\"ph3\">`type`</ph> and of <ph id=\"ph4\">`method`</ph>:","source":"If `firstArgument` is a null reference and `method` is an instance method, the result depends on the signatures of the delegate type `type` and of `method`:"},{"pos":[1990,2261],"content":"If the signature of `type` explicitly includes the hidden first parameter of `method`, the delegate is said to represent an open instance method. When the delegate is invoked, the first argument in the argument list is passed to the hidden instance parameter of `method`.","nodes":[{"content":"If the signature of <ph id=\"ph1\">`type`</ph> explicitly includes the hidden first parameter of <ph id=\"ph2\">`method`</ph>, the delegate is said to represent an open instance method.","pos":[0,145],"source":"If the signature of `type` explicitly includes the hidden first parameter of `method`, the delegate is said to represent an open instance method."},{"content":"When the delegate is invoked, the first argument in the argument list is passed to the hidden instance parameter of <ph id=\"ph1\">`method`</ph>.","pos":[146,271],"source":" When the delegate is invoked, the first argument in the argument list is passed to the hidden instance parameter of `method`."}]},{"pos":[2271,2551],"content":"If the signatures of `method` and `type` match (that is, all parameter types are compatible), then the delegate is said to be closed over a null reference. Invoking the delegate is like calling an instance method on a null instance, which is not a particularly useful thing to do.","nodes":[{"content":"If the signatures of <ph id=\"ph1\">`method`</ph> and <ph id=\"ph2\">`type`</ph> match (that is, all parameter types are compatible), then the delegate is said to be closed over a null reference.","pos":[0,155],"source":"If the signatures of `method` and `type` match (that is, all parameter types are compatible), then the delegate is said to be closed over a null reference."},{"content":"Invoking the delegate is like calling an instance method on a null instance, which is not a particularly useful thing to do.","pos":[156,280]}]},{"pos":[2558,2702],"content":"If <ph id=\"ph1\">`firstArgument`</ph> is a null reference and <ph id=\"ph2\">`method`</ph> is static, the result depends on the signatures of the delegate type <ph id=\"ph3\">`type`</ph> and of <ph id=\"ph4\">`method`</ph>:","source":"If `firstArgument` is a null reference and `method` is static, the result depends on the signatures of the delegate type `type` and of `method`:"},{"pos":[2712,3080],"content":"If the signature of `method` and `type` match (that is, all parameter types are compatible), the delegate is said to represent an open static method. This is the most common case for static methods. In this case, you can get slightly better performance by using the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload.","nodes":[{"content":"If the signature of <ph id=\"ph1\">`method`</ph> and <ph id=\"ph2\">`type`</ph> match (that is, all parameter types are compatible), the delegate is said to represent an open static method.","pos":[0,149],"source":"If the signature of `method` and `type` match (that is, all parameter types are compatible), the delegate is said to represent an open static method."},{"content":"This is the most common case for static methods.","pos":[150,198]},{"content":"In this case, you can get slightly better performance by using the <ph id=\"ph1\">&lt;xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29&gt;</ph> method overload.","pos":[199,368],"source":" In this case, you can get slightly better performance by using the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload."}]},{"pos":[3090,3368],"content":"If the signature of `type` begins with the second parameter of `method` and the rest of the parameter types are compatible, then the delegate is said to be closed over a null reference. When the delegate is invoked, a null reference is passed to the first parameter of `method`.","nodes":[{"content":"If the signature of <ph id=\"ph1\">`type`</ph> begins with the second parameter of <ph id=\"ph2\">`method`</ph> and the rest of the parameter types are compatible, then the delegate is said to be closed over a null reference.","pos":[0,185],"source":"If the signature of `type` begins with the second parameter of `method` and the rest of the parameter types are compatible, then the delegate is said to be closed over a null reference."},{"content":"When the delegate is invoked, a null reference is passed to the first parameter of <ph id=\"ph1\">`method`</ph>.","pos":[186,278],"source":" When the delegate is invoked, a null reference is passed to the first parameter of `method`."}]},{"pos":[3376,3946],"content":"[!NOTE]\n Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)","leadings":["","> "],"nodes":[{"content":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)","pos":[8,568],"nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public methods if the caller has been granted <ph id=\"ph2\">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id=\"ph3\">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName&gt;</ph> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.","pos":[1,429],"source":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof."},{"content":"(See <bpt id=\"p1\">[</bpt>Security Considerations for Reflection<ept id=\"p1\">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)","pos":[430,560],"source":" (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)"}]}]},{"pos":[3957,4084],"content":"To use this functionality, your application should target the <ph id=\"ph1\">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.","source":"To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later."},{"pos":[4093,4135],"content":"Compatible Parameter Types and Return Type","linkify":"Compatible Parameter Types and Return Type","nodes":[{"content":"Compatible Parameter Types and Return Type","pos":[0,42]}]},{"pos":[4139,4327],"content":"The parameter types and return type of a delegate must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.","nodes":[{"content":"The parameter types and return type of a delegate must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.","pos":[0,188]}]},{"pos":[4335,4418],"content":"[!NOTE]\n In the .NET Framework version 1.0 and 1.1, the types must match exactly.","leadings":["","> "],"nodes":[{"content":"In the .NET Framework version 1.0 and 1.1, the types must match exactly.","pos":[9,81]}]},{"pos":[4425,4706],"content":"A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.","nodes":[{"content":"A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.","pos":[0,281]}]},{"pos":[4713,5006],"content":"Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.","nodes":[{"content":"Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.","pos":[0,293]}]},{"pos":[5013,5272],"content":"For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.","nodes":[{"content":"For example, a delegate with a parameter of type <ph id=\"ph1\">&lt;xref:System.Collections.Hashtable&gt;</ph> and a return type of <ph id=\"ph2\">&lt;xref:System.Object&gt;</ph> can represent a method with a parameter of type <ph id=\"ph3\">&lt;xref:System.Object&gt;</ph> and a return value of type <ph id=\"ph4\">&lt;xref:System.Collections.Hashtable&gt;</ph>.","pos":[0,259],"source":"For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>."}]},{"pos":[5281,5329],"content":"Determining the Methods a Delegate Can Represent","linkify":"Determining the Methods a Delegate Can Represent","nodes":[{"content":"Determining the Methods a Delegate Can Represent","pos":[0,48]}]},{"pos":[5333,5754],"content":"Another useful way to think of the flexibility provided by this overload of <xref:System.Delegate.CreateDelegate%2A> is that any given delegate can represent four different combinations of method signature and method kind (static versus instance). Consider a delegate type `D` with one argument of type `C`. The following describes the methods `D` can represent, ignoring the return type since it must match in all cases:","nodes":[{"content":"Another useful way to think of the flexibility provided by this overload of <ph id=\"ph1\">&lt;xref:System.Delegate.CreateDelegate%2A&gt;</ph> is that any given delegate can represent four different combinations of method signature and method kind (static versus instance).","pos":[0,247],"source":"Another useful way to think of the flexibility provided by this overload of <xref:System.Delegate.CreateDelegate%2A> is that any given delegate can represent four different combinations of method signature and method kind (static versus instance)."},{"content":"Consider a delegate type <ph id=\"ph1\">`D`</ph> with one argument of type <ph id=\"ph2\">`C`</ph>.","pos":[248,307],"source":" Consider a delegate type `D` with one argument of type `C`."},{"content":"The following describes the methods <ph id=\"ph1\">`D`</ph> can represent, ignoring the return type since it must match in all cases:","pos":[308,421],"source":" The following describes the methods `D` can represent, ignoring the return type since it must match in all cases:"}]},{"pos":[5764,6187],"content":"`D` can represent any instance method that has exactly one argument of type `C`, regardless of what type the instance method belongs to. When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of the type `method` belongs to, and the resulting delegate is said to be closed over that instance. (Trivially, `D` can also be closed over a null reference if `firstArgument` is a null reference.)","nodes":[{"content":"<ph id=\"ph1\">`D`</ph> can represent any instance method that has exactly one argument of type <ph id=\"ph2\">`C`</ph>, regardless of what type the instance method belongs to.","pos":[0,136],"source":"`D` can represent any instance method that has exactly one argument of type `C`, regardless of what type the instance method belongs to."},{"content":"When <ph id=\"ph1\">&lt;xref:System.Delegate.CreateDelegate%2A&gt;</ph> is called, <ph id=\"ph2\">`firstArgument`</ph> is an instance of the type <ph id=\"ph3\">`method`</ph> belongs to, and the resulting delegate is said to be closed over that instance.","pos":[137,325],"source":" When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of the type `method` belongs to, and the resulting delegate is said to be closed over that instance."},{"content":"(Trivially, <ph id=\"ph1\">`D`</ph> can also be closed over a null reference if <ph id=\"ph2\">`firstArgument`</ph> is a null reference.)","pos":[326,423],"source":" (Trivially, `D` can also be closed over a null reference if `firstArgument` is a null reference.)"}]},{"pos":[6197,6481],"content":"`D` can represent an instance method of `C` that has no arguments. When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference. The resulting delegate represents an open instance method, and an instance of `C` must be supplied each time it is invoked.","nodes":[{"content":"<ph id=\"ph1\">`D`</ph> can represent an instance method of <ph id=\"ph2\">`C`</ph> that has no arguments.","pos":[0,66],"source":"`D` can represent an instance method of `C` that has no arguments."},{"content":"When <ph id=\"ph1\">&lt;xref:System.Delegate.CreateDelegate%2A&gt;</ph> is called, <ph id=\"ph2\">`firstArgument`</ph> is a null reference.","pos":[67,160],"source":" When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference."},{"content":"The resulting delegate represents an open instance method, and an instance of <ph id=\"ph1\">`C`</ph> must be supplied each time it is invoked.","pos":[161,284],"source":" The resulting delegate represents an open instance method, and an instance of `C` must be supplied each time it is invoked."}]},{"pos":[6491,6817],"content":"`D` can represent a static method that takes one argument of type `C`, and that method can belong to any type. When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference. The resulting delegate represents an open static method, and an instance of `C` must be supplied each time it is invoked.","nodes":[{"content":"<ph id=\"ph1\">`D`</ph> can represent a static method that takes one argument of type <ph id=\"ph2\">`C`</ph>, and that method can belong to any type.","pos":[0,110],"source":"`D` can represent a static method that takes one argument of type `C`, and that method can belong to any type."},{"content":"When <ph id=\"ph1\">&lt;xref:System.Delegate.CreateDelegate%2A&gt;</ph> is called, <ph id=\"ph2\">`firstArgument`</ph> is a null reference.","pos":[111,204],"source":" When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference."},{"content":"The resulting delegate represents an open static method, and an instance of <ph id=\"ph1\">`C`</ph> must be supplied each time it is invoked.","pos":[205,326],"source":" The resulting delegate represents an open static method, and an instance of `C` must be supplied each time it is invoked."}]},{"pos":[6827,7323],"content":"`D` can represent a static method that belongs to type `F` and has two arguments, of type `F` and type `C`. When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of `F`. The resulting delegate represents a static method that is closed over that instance of `F`. Note that in the case where `F` and `C` are the same type, the static method has two arguments of that type. (In this case, `D` is closed over a null reference if `firstArgument` is a null reference.)","nodes":[{"content":"<ph id=\"ph1\">`D`</ph> can represent a static method that belongs to type <ph id=\"ph2\">`F`</ph> and has two arguments, of type <ph id=\"ph3\">`F`</ph> and type <ph id=\"ph4\">`C`</ph>.","pos":[0,107],"source":"`D` can represent a static method that belongs to type `F` and has two arguments, of type `F` and type `C`."},{"content":"When <ph id=\"ph1\">&lt;xref:System.Delegate.CreateDelegate%2A&gt;</ph> is called, <ph id=\"ph2\">`firstArgument`</ph> is an instance of <ph id=\"ph3\">`F`</ph>.","pos":[108,203],"source":" When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of `F`."},{"content":"The resulting delegate represents a static method that is closed over that instance of <ph id=\"ph1\">`F`</ph>.","pos":[204,295],"source":" The resulting delegate represents a static method that is closed over that instance of `F`."},{"content":"Note that in the case where <ph id=\"ph1\">`F`</ph> and <ph id=\"ph2\">`C`</ph> are the same type, the static method has two arguments of that type.","pos":[296,404],"source":" Note that in the case where `F` and `C` are the same type, the static method has two arguments of that type."},{"content":"(In this case, <ph id=\"ph1\">`D`</ph> is closed over a null reference if <ph id=\"ph2\">`firstArgument`</ph> is a null reference.)","pos":[405,496],"source":" (In this case, `D` is closed over a null reference if `firstArgument` is a null reference.)"}]}],"pos":[115763,123141],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Type\"></xref> of delegate to create.","nodes":[{"pos":[0,59],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> of delegate to create.","source":"The <xref href=\"System.Type\"></xref> of delegate to create."}],"pos":[129567,129627],"yaml":true},{"content":"The object to which the delegate is bound, or `null` to treat <code>method</code> as `static` (`Shared` in Visual Basic).","nodes":[{"pos":[0,121],"content":"The object to which the delegate is bound, or <ph id=\"ph1\">`null`</ph> to treat <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">method</ph><ept id=\"p1\">&lt;/code&gt;</ept> as <ph id=\"ph3\">`static`</ph> (<ph id=\"ph4\">`Shared`</ph> in Visual Basic).","source":"The object to which the delegate is bound, or `null` to treat <code>method</code> as `static` (`Shared` in Visual Basic)."}],"pos":[129696,129818],"yaml":true},{"content":"The <xref href=\"System.Reflection.MethodInfo\"></xref> describing the static or instance method the delegate is to represent.","nodes":[{"pos":[0,124],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> describing the static or instance method the delegate is to represent.","source":"The <xref href=\"System.Reflection.MethodInfo\"></xref> describing the static or instance method the delegate is to represent."}],"pos":[129895,130020],"yaml":true},{"content":"A delegate of the specified type that represents the specified static or instance method.","nodes":[{"pos":[0,89],"content":"A delegate of the specified type that represents the specified static or instance method.","nodes":[{"content":"A delegate of the specified type that represents the specified static or instance method.","pos":[0,89]}]}],"pos":[130079,130169],"yaml":true},{"content":"<code>type</code> is `null`.  \n  \n -or-  \n  \n <code>method</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>type</code> is `null`."},{"pos":[35,39],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[46,76],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>method</code> is `null`."}],"pos":[130329,130412],"yaml":true},{"content":"<code>type</code> does not inherit <xref href=\"System.MulticastDelegate\"></xref>.  \n  \n -or-  \n  \n <code>type</code> is not a `RuntimeType`. See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858).  \n  \n -or-  \n  \n <code>method</code> cannot be bound.  \n  \n -or-  \n  \n <code>method</code> is not a `RuntimeMethodInfo`. See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858).","nodes":[{"pos":[0,81],"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> does not inherit <ph id=\"ph2\">&lt;xref href=\"System.MulticastDelegate\"&gt;&lt;/xref&gt;</ph>.","source":"<code>type</code> does not inherit <xref href=\"System.MulticastDelegate\"></xref>."},{"pos":[88,92],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[99,245],"content":"<code>type</code> is not a `RuntimeType`. See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858).","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> is not a <ph id=\"ph2\">`RuntimeType`</ph>.","pos":[0,41],"source":"<code>type</code> is not a `RuntimeType`."},{"content":"See <bpt id=\"p1\">[</bpt>Runtime Types in Reflection<ept id=\"p1\">](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858)</ept>.","pos":[42,146],"source":" See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858)."}]},{"pos":[252,256],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[263,299],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> cannot be bound.","source":"<code>method</code> cannot be bound."},{"pos":[306,310],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[317,471],"content":"<code>method</code> is not a `RuntimeMethodInfo`. See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858).","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is not a <ph id=\"ph2\">`RuntimeMethodInfo`</ph>.","pos":[0,49],"source":"<code>method</code> is not a `RuntimeMethodInfo`."},{"content":"See <bpt id=\"p1\">[</bpt>Runtime Types in Reflection<ept id=\"p1\">](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858)</ept>.","pos":[50,154],"source":" See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858)."}]}],"pos":[130506,130994],"yaml":true},{"content":"The `Invoke` method of <code>type</code> is not found.","nodes":[{"pos":[0,54],"content":"The <ph id=\"ph1\">`Invoke`</ph> method of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">type</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not found.","source":"The `Invoke` method of <code>type</code> is not found."}],"pos":[131098,131153],"yaml":true},{"content":"The caller does not have the permissions necessary to access <code>method</code>.","nodes":[{"pos":[0,81],"content":"The caller does not have the permissions necessary to access <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">method</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The caller does not have the permissions necessary to access <code>method</code>."}],"pos":[131255,131337],"yaml":true},{"content":"Creates a delegate of the specified type that represents the specified static method of the specified class.","nodes":[{"pos":[0,108],"content":"Creates a delegate of the specified type that represents the specified static method of the specified class.","nodes":[{"content":"Creates a delegate of the specified type that represents the specified static method of the specified class.","pos":[0,108]}]}],"pos":[132584,132693],"yaml":true},{"content":"This method creates delegates for static methods only. An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.  \n  \n This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `false` for `ignoreCase` and `true` for `throwOnBindFailure`.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \n>   \n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.","nodes":[{"pos":[0,203],"content":"This method creates delegates for static methods only. An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.","nodes":[{"content":"This method creates delegates for static methods only. An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.","pos":[0,203],"nodes":[{"content":"This method creates delegates for static methods only.","pos":[0,54]},{"content":"An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.","pos":[55,203]}]}]},{"pos":[210,468],"content":"This method overload is equivalent to calling the <ph id=\"ph1\">&lt;xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29&gt;</ph> method overload, specifying <ph id=\"ph2\">`false`</ph> for <ph id=\"ph3\">`ignoreCase`</ph> and <ph id=\"ph4\">`true`</ph> for <ph id=\"ph5\">`throwOnBindFailure`</ph>.","source":"This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `false` for `ignoreCase` and `true` for `throwOnBindFailure`."},{"pos":[476,1046],"content":"[!NOTE]\n Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)","leadings":["","> "],"nodes":[{"content":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)","pos":[8,568],"nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public methods if the caller has been granted <ph id=\"ph2\">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id=\"ph3\">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName&gt;</ph> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.","pos":[1,429],"source":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof."},{"content":"(See <bpt id=\"p1\">[</bpt>Security Considerations for Reflection<ept id=\"p1\">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)","pos":[430,560],"source":" (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)"}]}]},{"pos":[1057,1184],"content":"To use this functionality, your application should target the <ph id=\"ph1\">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.","source":"To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later."}],"pos":[132704,133898],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Type\"></xref> of delegate to create.","nodes":[{"pos":[0,59],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> of delegate to create.","source":"The <xref href=\"System.Type\"></xref> of delegate to create."}],"pos":[134074,134134],"yaml":true},{"content":"The <xref href=\"System.Type\"></xref> representing the class that implements <code>method</code>.","nodes":[{"pos":[0,96],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> representing the class that implements <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">method</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The <xref href=\"System.Type\"></xref> representing the class that implements <code>method</code>."}],"pos":[134194,134291],"yaml":true},{"content":"The name of the static method that the delegate is to represent.","nodes":[{"pos":[0,64],"content":"The name of the static method that the delegate is to represent.","nodes":[{"content":"The name of the static method that the delegate is to represent.","pos":[0,64]}]}],"pos":[134353,134418],"yaml":true},{"content":"A delegate of the specified type that represents the specified static method of the specified class.","nodes":[{"pos":[0,100],"content":"A delegate of the specified type that represents the specified static method of the specified class.","nodes":[{"content":"A delegate of the specified type that represents the specified static method of the specified class.","pos":[0,100]}]}],"pos":[134477,134578],"yaml":true},{"content":"<code>type</code> is `null`.  \n  \n -or-  \n  \n <code>target</code> is `null`.  \n  \n -or-  \n  \n <code>method</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>type</code> is `null`."},{"pos":[35,39],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[46,76],"content":"<ph id=\"ph1\">&lt;code&gt;target&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>target</code> is `null`."},{"pos":[83,87],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[94,124],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>method</code> is `null`."}],"pos":[134738,134873],"yaml":true},{"content":"<code>type</code> does not inherit <xref href=\"System.MulticastDelegate\"></xref>.  \n  \n -or-  \n  \n <code>type</code> is not a `RuntimeType`. See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858).  \n  \n -or-  \n  \n <code>target</code> is not a `RuntimeType`.  \n  \n -or-  \n  \n <code>target</code> is an open generic type. That is, its <xref href=\"System.Type.ContainsGenericParameters\"></xref> property is `true`.  \n  \n -or-  \n  \n <code>method</code> is not a `static` method (`Shared` method in Visual Basic).  \n  \n -or-  \n  \n <code>method</code> cannot be bound, for example because it cannot be found, and <code>throwOnBindFailure</code> is `true`.","nodes":[{"pos":[0,81],"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> does not inherit <ph id=\"ph2\">&lt;xref href=\"System.MulticastDelegate\"&gt;&lt;/xref&gt;</ph>.","source":"<code>type</code> does not inherit <xref href=\"System.MulticastDelegate\"></xref>."},{"pos":[88,92],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[99,245],"content":"<code>type</code> is not a `RuntimeType`. See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858).","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> is not a <ph id=\"ph2\">`RuntimeType`</ph>.","pos":[0,41],"source":"<code>type</code> is not a `RuntimeType`."},{"content":"See <bpt id=\"p1\">[</bpt>Runtime Types in Reflection<ept id=\"p1\">](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858)</ept>.","pos":[42,146],"source":" See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858)."}]},{"pos":[252,256],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[263,306],"content":"<ph id=\"ph1\">&lt;code&gt;target&lt;/code&gt;</ph> is not a <ph id=\"ph2\">`RuntimeType`</ph>.","source":"<code>target</code> is not a `RuntimeType`."},{"pos":[313,317],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[324,460],"content":"<code>target</code> is an open generic type. That is, its <xref href=\"System.Type.ContainsGenericParameters\"></xref> property is `true`.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;target&lt;/code&gt;</ph> is an open generic type.","pos":[0,44],"source":"<code>target</code> is an open generic type."},{"content":"That is, its <ph id=\"ph1\">&lt;xref href=\"System.Type.ContainsGenericParameters\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph2\">`true`</ph>.","pos":[45,136],"source":" That is, its <xref href=\"System.Type.ContainsGenericParameters\"></xref> property is `true`."}]},{"pos":[467,471],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[478,557],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is not a <ph id=\"ph2\">`static`</ph> method (<ph id=\"ph3\">`Shared`</ph> method in Visual Basic).","source":"<code>method</code> is not a `static` method (`Shared` method in Visual Basic)."},{"pos":[564,568],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[575,698],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> cannot be bound, for example because it cannot be found, and <ph id=\"ph2\">&lt;code&gt;throwOnBindFailure&lt;/code&gt;</ph> is <ph id=\"ph3\">`true`</ph>.","source":"<code>method</code> cannot be bound, for example because it cannot be found, and <code>throwOnBindFailure</code> is `true`."}],"pos":[134967,135692],"yaml":true},{"content":"The `Invoke` method of <code>type</code> is not found.","nodes":[{"pos":[0,54],"content":"The <ph id=\"ph1\">`Invoke`</ph> method of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">type</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not found.","source":"The `Invoke` method of <code>type</code> is not found."}],"pos":[135796,135851],"yaml":true},{"content":"The caller does not have the permissions necessary to access <code>method</code>.","nodes":[{"pos":[0,81],"content":"The caller does not have the permissions necessary to access <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">method</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The caller does not have the permissions necessary to access <code>method</code>."}],"pos":[135953,136035],"yaml":true},{"content":"Creates a delegate of the specified type to represent the specified static method.","nodes":[{"pos":[0,82],"content":"Creates a delegate of the specified type to represent the specified static method.","nodes":[{"content":"Creates a delegate of the specified type to represent the specified static method.","pos":[0,82]}]}],"pos":[137285,137368],"yaml":true},{"content":"In the .NET Framework version 1.0 and 1.1, this method overload creates delegates for static methods only. In the .NET Framework version 2.0, this method overload also can create open instance method delegates; that is, delegates that explicitly supply the hidden first argument of instance methods. For a detailed explanation, see the more general <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29> method overload, which allows you to create all combinations of open or closed delegates for instance or static methods, and optionally to specify a first argument.  \n  \n> [!NOTE]\n>  This method overload should be used when the delegate is not closed over its first argument, because it is somewhat faster in that case.  \n  \n This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload and specifying `true` for `throwOnBindFailure`.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \n>   \n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.  \n  \n## Compatible Parameter Types and Return Type  \n In the .NET Framework version 2.0, the parameter types and return type of a delegate created using this method overload must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly. This represents a relaxation of the binding behavior in the .NET Framework version 1.0 and 1.1, where the types must match exactly.  \n  \n A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.  \n  \n Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.  \n  \n For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.","nodes":[{"pos":[0,615],"content":"In the .NET Framework version 1.0 and 1.1, this method overload creates delegates for static methods only. In the .NET Framework version 2.0, this method overload also can create open instance method delegates; that is, delegates that explicitly supply the hidden first argument of instance methods. For a detailed explanation, see the more general <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29> method overload, which allows you to create all combinations of open or closed delegates for instance or static methods, and optionally to specify a first argument.","nodes":[{"content":"In the .NET Framework version 1.0 and 1.1, this method overload creates delegates for static methods only. In the .NET Framework version 2.0, this method overload also can create open instance method delegates; that is, delegates that explicitly supply the hidden first argument of instance methods. For a detailed explanation, see the more general <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29> method overload, which allows you to create all combinations of open or closed delegates for instance or static methods, and optionally to specify a first argument.","pos":[0,615],"nodes":[{"content":"In the .NET Framework version 1.0 and 1.1, this method overload creates delegates for static methods only.","pos":[0,106]},{"content":"In the .NET Framework version 2.0, this method overload also can create open instance method delegates; that is, delegates that explicitly supply the hidden first argument of instance methods.","pos":[107,299]},{"content":"For a detailed explanation, see the more general <ph id=\"ph1\">&lt;xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29&gt;</ph> method overload, which allows you to create all combinations of open or closed delegates for instance or static methods, and optionally to specify a first argument.","pos":[300,615],"source":" For a detailed explanation, see the more general <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29> method overload, which allows you to create all combinations of open or closed delegates for instance or static methods, and optionally to specify a first argument."}]}]},{"pos":[623,770],"content":"[!NOTE]\n This method overload should be used when the delegate is not closed over its first argument, because it is somewhat faster in that case.","leadings":["","> "],"nodes":[{"content":"This method overload should be used when the delegate is not closed over its first argument, because it is somewhat faster in that case.","pos":[9,145]}]},{"pos":[777,993],"content":"This method overload is equivalent to calling the <ph id=\"ph1\">&lt;xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29&gt;</ph> method overload and specifying <ph id=\"ph2\">`true`</ph> for <ph id=\"ph3\">`throwOnBindFailure`</ph>.","source":"This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload and specifying `true` for `throwOnBindFailure`."},{"pos":[1001,1571],"content":"[!NOTE]\n Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)","leadings":["","> "],"nodes":[{"content":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)","pos":[8,568],"nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public methods if the caller has been granted <ph id=\"ph2\">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id=\"ph3\">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName&gt;</ph> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.","pos":[1,429],"source":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof."},{"content":"(See <bpt id=\"p1\">[</bpt>Security Considerations for Reflection<ept id=\"p1\">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)","pos":[430,560],"source":" (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)"}]}]},{"pos":[1582,1709],"content":"To use this functionality, your application should target the <ph id=\"ph1\">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.","source":"To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later."},{"pos":[1718,1760],"content":"Compatible Parameter Types and Return Type","linkify":"Compatible Parameter Types and Return Type","nodes":[{"content":"Compatible Parameter Types and Return Type","pos":[0,42]}]},{"pos":[1764,2154],"content":"In the .NET Framework version 2.0, the parameter types and return type of a delegate created using this method overload must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly. This represents a relaxation of the binding behavior in the .NET Framework version 1.0 and 1.1, where the types must match exactly.","nodes":[{"content":"In the .NET Framework version 2.0, the parameter types and return type of a delegate created using this method overload must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly. This represents a relaxation of the binding behavior in the .NET Framework version 1.0 and 1.1, where the types must match exactly.","pos":[0,390],"nodes":[{"content":"In the .NET Framework version 2.0, the parameter types and return type of a delegate created using this method overload must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.","pos":[0,258]},{"content":"This represents a relaxation of the binding behavior in the .NET Framework version 1.0 and 1.1, where the types must match exactly.","pos":[259,390]}]}]},{"pos":[2161,2442],"content":"A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.","nodes":[{"content":"A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.","pos":[0,281]}]},{"pos":[2449,2742],"content":"Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.","nodes":[{"content":"Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.","pos":[0,293]}]},{"pos":[2749,3008],"content":"For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.","nodes":[{"content":"For example, a delegate with a parameter of type <ph id=\"ph1\">&lt;xref:System.Collections.Hashtable&gt;</ph> and a return type of <ph id=\"ph2\">&lt;xref:System.Object&gt;</ph> can represent a method with a parameter of type <ph id=\"ph3\">&lt;xref:System.Object&gt;</ph> and a return value of type <ph id=\"ph4\">&lt;xref:System.Collections.Hashtable&gt;</ph>.","pos":[0,259],"source":"For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>."}]}],"pos":[137379,140409],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Type\"></xref> of delegate to create.","nodes":[{"pos":[0,59],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> of delegate to create.","source":"The <xref href=\"System.Type\"></xref> of delegate to create."}],"pos":[143887,143947],"yaml":true},{"content":"The <xref href=\"System.Reflection.MethodInfo\"></xref> describing the static or instance method the delegate is to represent. Only static methods are supported in the .NET Framework version 1.0 and 1.1.","nodes":[{"pos":[0,201],"content":"The <xref href=\"System.Reflection.MethodInfo\"></xref> describing the static or instance method the delegate is to represent. Only static methods are supported in the .NET Framework version 1.0 and 1.1.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> describing the static or instance method the delegate is to represent.","pos":[0,124],"source":"The <xref href=\"System.Reflection.MethodInfo\"></xref> describing the static or instance method the delegate is to represent."},{"content":"Only static methods are supported in the .NET Framework version 1.0 and 1.1.","pos":[125,201]}]}],"pos":[144024,144226],"yaml":true},{"content":"A delegate of the specified type to represent the specified static method.","nodes":[{"pos":[0,74],"content":"A delegate of the specified type to represent the specified static method.","nodes":[{"content":"A delegate of the specified type to represent the specified static method.","pos":[0,74]}]}],"pos":[144285,144360],"yaml":true},{"content":"<code>type</code> is `null`.  \n  \n -or-  \n  \n <code>method</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>type</code> is `null`."},{"pos":[35,39],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[46,76],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>method</code> is `null`."}],"pos":[144520,144603],"yaml":true},{"content":"<code>type</code> does not inherit <xref href=\"System.MulticastDelegate\"></xref>.  \n  \n -or-  \n  \n <code>type</code> is not a `RuntimeType`. See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858).  \n  \n -or-  \n  \n <code>method</code> is not a static method, and the .NET Framework version is 1.0 or 1.1.  \n  \n -or-  \n  \n <code>method</code> cannot be bound.  \n  \n -or-  \n  \n <code>method</code> is not a `RuntimeMethodInfo`. See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858).","nodes":[{"pos":[0,81],"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> does not inherit <ph id=\"ph2\">&lt;xref href=\"System.MulticastDelegate\"&gt;&lt;/xref&gt;</ph>.","source":"<code>type</code> does not inherit <xref href=\"System.MulticastDelegate\"></xref>."},{"pos":[88,92],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[99,245],"content":"<code>type</code> is not a `RuntimeType`. See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858).","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> is not a <ph id=\"ph2\">`RuntimeType`</ph>.","pos":[0,41],"source":"<code>type</code> is not a `RuntimeType`."},{"content":"See <bpt id=\"p1\">[</bpt>Runtime Types in Reflection<ept id=\"p1\">](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858)</ept>.","pos":[42,146],"source":" See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858)."}]},{"pos":[252,256],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[263,352],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is not a static method, and the .NET Framework version is 1.0 or 1.1.","source":"<code>method</code> is not a static method, and the .NET Framework version is 1.0 or 1.1."},{"pos":[359,363],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[370,406],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> cannot be bound.","source":"<code>method</code> cannot be bound."},{"pos":[413,417],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[424,578],"content":"<code>method</code> is not a `RuntimeMethodInfo`. See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858).","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is not a <ph id=\"ph2\">`RuntimeMethodInfo`</ph>.","pos":[0,49],"source":"<code>method</code> is not a `RuntimeMethodInfo`."},{"content":"See <bpt id=\"p1\">[</bpt>Runtime Types in Reflection<ept id=\"p1\">](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858)</ept>.","pos":[50,154],"source":" See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858)."}]}],"pos":[144697,145296],"yaml":true},{"content":"The `Invoke` method of <code>type</code> is not found.","nodes":[{"pos":[0,54],"content":"The <ph id=\"ph1\">`Invoke`</ph> method of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">type</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not found.","source":"The `Invoke` method of <code>type</code> is not found."}],"pos":[145400,145455],"yaml":true},{"content":"The caller does not have the permissions necessary to access <code>method</code>.","nodes":[{"pos":[0,81],"content":"The caller does not have the permissions necessary to access <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">method</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The caller does not have the permissions necessary to access <code>method</code>."}],"pos":[145557,145639],"yaml":true},{"content":"Dynamically invokes (late-bound) the method represented by the current delegate.","nodes":[{"pos":[0,80],"content":"Dynamically invokes (late-bound) the method represented by the current delegate.","nodes":[{"content":"Dynamically invokes (late-bound) the method represented by the current delegate.","pos":[0,80]}]}],"pos":[146784,146865],"yaml":true},{"content":"This method calls the <xref:System.Delegate.DynamicInvokeImpl%2A> method.","nodes":[{"pos":[0,73],"content":"This method calls the <xref:System.Delegate.DynamicInvokeImpl%2A> method.","nodes":[{"content":"This method calls the <ph id=\"ph1\">&lt;xref:System.Delegate.DynamicInvokeImpl%2A&gt;</ph> method.","pos":[0,73],"source":"This method calls the <xref:System.Delegate.DynamicInvokeImpl%2A> method."}]}],"pos":[146876,146950],"yaml":true,"extradata":"MT"},{"content":"An array of objects that are the arguments to pass to the method represented by the current delegate.  \n  \n -or-  \n  \n `null`, if the method represented by the current delegate does not require arguments.","nodes":[{"pos":[0,101],"content":"An array of objects that are the arguments to pass to the method represented by the current delegate.","nodes":[{"content":"An array of objects that are the arguments to pass to the method represented by the current delegate.","pos":[0,101]}]},{"pos":[108,112],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[119,204],"content":"<ph id=\"ph1\">`null`</ph>, if the method represented by the current delegate does not require arguments.","source":"`null`, if the method represented by the current delegate does not require arguments."}],"pos":[147096,147307],"yaml":true},{"content":"The object returned by the method represented by the delegate.","nodes":[{"pos":[0,62],"content":"The object returned by the method represented by the delegate.","nodes":[{"content":"The object returned by the method represented by the delegate.","pos":[0,62]}]}],"pos":[147364,147427],"yaml":true},{"content":"The caller does not have access to the method represented by the delegate (for example, if the method is private).  \n  \n -or-  \n  \n The number, order, or type of parameters listed in <code>args</code> is invalid.","nodes":[{"pos":[0,114],"content":"The caller does not have access to the method represented by the delegate (for example, if the method is private).","nodes":[{"content":"The caller does not have access to the method represented by the delegate (for example, if the method is private).","pos":[0,114]}]},{"pos":[121,125],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[132,212],"content":"The number, order, or type of parameters listed in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">args</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The number, order, or type of parameters listed in <code>args</code> is invalid."}],"pos":[147586,147805],"yaml":true},{"content":"The method represented by the delegate is invoked on an object or a class that does not support it.","nodes":[{"pos":[0,99],"content":"The method represented by the delegate is invoked on an object or a class that does not support it.","nodes":[{"content":"The method represented by the delegate is invoked on an object or a class that does not support it.","pos":[0,99]}]}],"pos":[147899,147999],"yaml":true},{"content":"The method represented by the delegate is an instance method and the target object is `null`.  \n  \n -or-  \n  \n One of the encapsulated methods throws an exception.","nodes":[{"pos":[0,93],"content":"The method represented by the delegate is an instance method and the target object is <ph id=\"ph1\">`null`</ph>.","source":"The method represented by the delegate is an instance method and the target object is `null`."},{"pos":[100,104],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[111,163],"content":"One of the encapsulated methods throws an exception.","nodes":[{"content":"One of the encapsulated methods throws an exception.","pos":[0,52]}]}],"pos":[148131,148301],"yaml":true},{"content":"Dynamically invokes (late-bound) the method represented by the current delegate.","nodes":[{"pos":[0,80],"content":"Dynamically invokes (late-bound) the method represented by the current delegate.","nodes":[{"content":"Dynamically invokes (late-bound) the method represented by the current delegate.","pos":[0,80]}]}],"pos":[149814,149895],"yaml":true},{"content":"This method implements the <xref:System.Delegate.DynamicInvoke%2A> method.","nodes":[{"pos":[0,74],"content":"This method implements the <xref:System.Delegate.DynamicInvoke%2A> method.","nodes":[{"content":"This method implements the <ph id=\"ph1\">&lt;xref:System.Delegate.DynamicInvoke%2A&gt;</ph> method.","pos":[0,74],"source":"This method implements the <xref:System.Delegate.DynamicInvoke%2A> method."}]}],"pos":[149906,149981],"yaml":true,"extradata":"MT"},{"content":"An array of objects that are the arguments to pass to the method represented by the current delegate.  \n  \n -or-  \n  \n `null`, if the method represented by the current delegate does not require arguments.","nodes":[{"pos":[0,101],"content":"An array of objects that are the arguments to pass to the method represented by the current delegate.","nodes":[{"content":"An array of objects that are the arguments to pass to the method represented by the current delegate.","pos":[0,101]}]},{"pos":[108,112],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[119,204],"content":"<ph id=\"ph1\">`null`</ph>, if the method represented by the current delegate does not require arguments.","source":"`null`, if the method represented by the current delegate does not require arguments."}],"pos":[150142,150353],"yaml":true},{"content":"The object returned by the method represented by the delegate.","nodes":[{"pos":[0,62],"content":"The object returned by the method represented by the delegate.","nodes":[{"content":"The object returned by the method represented by the delegate.","pos":[0,62]}]}],"pos":[150410,150473],"yaml":true},{"content":"The caller does not have access to the method represented by the delegate (for example, if the method is private).  \n  \n -or-  \n  \n The number, order, or type of parameters listed in <code>args</code> is invalid.","nodes":[{"pos":[0,114],"content":"The caller does not have access to the method represented by the delegate (for example, if the method is private).","nodes":[{"content":"The caller does not have access to the method represented by the delegate (for example, if the method is private).","pos":[0,114]}]},{"pos":[121,125],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[132,212],"content":"The number, order, or type of parameters listed in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">args</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid.","source":"The number, order, or type of parameters listed in <code>args</code> is invalid."}],"pos":[150636,150855],"yaml":true},{"content":"The method represented by the delegate is invoked on an object or a class that does not support it.","nodes":[{"pos":[0,99],"content":"The method represented by the delegate is invoked on an object or a class that does not support it.","nodes":[{"content":"The method represented by the delegate is invoked on an object or a class that does not support it.","pos":[0,99]}]}],"pos":[150949,151049],"yaml":true},{"content":"The method represented by the delegate is an instance method and the target object is `null`.  \n  \n -or-  \n  \n One of the encapsulated methods throws an exception.","nodes":[{"pos":[0,93],"content":"The method represented by the delegate is an instance method and the target object is <ph id=\"ph1\">`null`</ph>.","source":"The method represented by the delegate is an instance method and the target object is `null`."},{"pos":[100,104],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[111,163],"content":"One of the encapsulated methods throws an exception.","nodes":[{"content":"One of the encapsulated methods throws an exception.","pos":[0,52]}]}],"pos":[151181,151351],"yaml":true},{"content":"Determines whether the specified object and the current delegate are of the same type and share the same targets, methods, and invocation list.","nodes":[{"pos":[0,143],"content":"Determines whether the specified object and the current delegate are of the same type and share the same targets, methods, and invocation list.","nodes":[{"content":"Determines whether the specified object and the current delegate are of the same type and share the same targets, methods, and invocation list.","pos":[0,143]}]}],"pos":[152442,152586],"yaml":true},{"content":"If the two delegates are not of the same type, they are not considered equal.  \n  \n> [!IMPORTANT]\n>  In the .NET Framework version 1.0 and 1.1, two delegates were considered equal if their targets, methods, and invocation list were equal, even if the delegates were of different types.  \n  \n The methods and targets are compared for equality as follows:  \n  \n-   If the two methods being compared are both static and are the same method on the same class, the methods are considered equal and the targets are also considered equal.  \n  \n-   If the two methods being compared are instance methods and are the same method on the same object, the methods are considered equal and the targets are also considered equal.  \n  \n-   Otherwise, the methods are not considered to be equal and the targets are also not considered to be equal.  \n  \n Two invocation lists are considered identical only if they have the same order and the corresponding elements from the two lists represent the same method and target.","nodes":[{"pos":[0,77],"content":"If the two delegates are not of the same type, they are not considered equal.","nodes":[{"content":"If the two delegates are not of the same type, they are not considered equal.","pos":[0,77]}]},{"pos":[85,285],"content":"[!IMPORTANT]\n In the .NET Framework version 1.0 and 1.1, two delegates were considered equal if their targets, methods, and invocation list were equal, even if the delegates were of different types.","leadings":["","> "],"nodes":[{"content":"In the .NET Framework version 1.0 and 1.1, two delegates were considered equal if their targets, methods, and invocation list were equal, even if the delegates were of different types.","pos":[14,198]}]},{"pos":[292,353],"content":"The methods and targets are compared for equality as follows:","nodes":[{"content":"The methods and targets are compared for equality as follows:","pos":[0,61]}]},{"pos":[363,531],"content":"If the two methods being compared are both static and are the same method on the same class, the methods are considered equal and the targets are also considered equal.","nodes":[{"content":"If the two methods being compared are both static and are the same method on the same class, the methods are considered equal and the targets are also considered equal.","pos":[0,168]}]},{"pos":[541,715],"content":"If the two methods being compared are instance methods and are the same method on the same object, the methods are considered equal and the targets are also considered equal.","nodes":[{"content":"If the two methods being compared are instance methods and are the same method on the same object, the methods are considered equal and the targets are also considered equal.","pos":[0,174]}]},{"pos":[725,831],"content":"Otherwise, the methods are not considered to be equal and the targets are also not considered to be equal.","nodes":[{"content":"Otherwise, the methods are not considered to be equal and the targets are also not considered to be equal.","pos":[0,106]}]},{"pos":[838,1004],"content":"Two invocation lists are considered identical only if they have the same order and the corresponding elements from the two lists represent the same method and target.","nodes":[{"content":"Two invocation lists are considered identical only if they have the same order and the corresponding elements from the two lists represent the same method and target.","pos":[0,166]}]}],"pos":[152597,153617],"yaml":true,"extradata":"MT"},{"content":"The object to compare with the current delegate.","nodes":[{"pos":[0,48],"content":"The object to compare with the current delegate.","nodes":[{"content":"The object to compare with the current delegate.","pos":[0,48]}]}],"pos":[153757,153806],"yaml":true},{"content":"`true` if <code>obj</code> and the current delegate have the same targets, methods, and invocation list; otherwise, `false`.","nodes":[{"pos":[0,124],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">obj</ph><ept id=\"p1\">&lt;/code&gt;</ept> and the current delegate have the same targets, methods, and invocation list; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if <code>obj</code> and the current delegate have the same targets, methods, and invocation list; otherwise, `false`."}],"pos":[153864,153991],"yaml":true},{"content":"The caller does not have access to the method represented by the delegate (for example, if the method is private).","nodes":[{"pos":[0,114],"content":"The caller does not have access to the method represented by the delegate (for example, if the method is private).","nodes":[{"content":"The caller does not have access to the method represented by the delegate (for example, if the method is private).","pos":[0,114]}]}],"pos":[154143,154258],"yaml":true},{"content":"Returns a hash code for the delegate.","nodes":[{"pos":[0,37],"content":"Returns a hash code for the delegate.","nodes":[{"content":"Returns a hash code for the delegate.","pos":[0,37]}]}],"pos":[155660,155698],"yaml":true},{"content":"The return value of this method must not be persisted for two reasons. First, the hash function of a class might be altered to generate a better distribution, rendering any values from the old hash function useless. Second, the default implementation of this class does not guarantee that the same value will be returned by different instances.","nodes":[{"pos":[0,344],"content":"The return value of this method must not be persisted for two reasons. First, the hash function of a class might be altered to generate a better distribution, rendering any values from the old hash function useless. Second, the default implementation of this class does not guarantee that the same value will be returned by different instances.","nodes":[{"content":"The return value of this method must not be persisted for two reasons. First, the hash function of a class might be altered to generate a better distribution, rendering any values from the old hash function useless. Second, the default implementation of this class does not guarantee that the same value will be returned by different instances.","pos":[0,344],"nodes":[{"content":"The return value of this method must not be persisted for two reasons.","pos":[0,70]},{"content":"First, the hash function of a class might be altered to generate a better distribution, rendering any values from the old hash function useless.","pos":[71,215]},{"content":"Second, the default implementation of this class does not guarantee that the same value will be returned by different instances.","pos":[216,344]}]}]}],"pos":[155709,156054],"yaml":true,"extradata":"MT"},{"content":"A hash code for the delegate.","nodes":[{"pos":[0,29],"content":"A hash code for the delegate.","nodes":[{"content":"A hash code for the delegate.","pos":[0,29]}]}],"pos":[156188,156218],"yaml":true},{"content":"Returns the invocation list of the delegate.","nodes":[{"pos":[0,44],"content":"Returns the invocation list of the delegate.","nodes":[{"content":"Returns the invocation list of the delegate.","pos":[0,44]}]}],"pos":[157714,157759],"yaml":true},{"content":"Each delegate in the array represents exactly one method.  \n  \n The order of the delegates in the array is the same order in which the current delegate invokes the methods that those delegates represent.","nodes":[{"pos":[0,57],"content":"Each delegate in the array represents exactly one method.","nodes":[{"content":"Each delegate in the array represents exactly one method.","pos":[0,57]}]},{"pos":[64,203],"content":"The order of the delegates in the array is the same order in which the current delegate invokes the methods that those delegates represent.","nodes":[{"content":"The order of the delegates in the array is the same order in which the current delegate invokes the methods that those delegates represent.","pos":[0,139]}]}],"pos":[157770,157978],"yaml":true,"extradata":"MT"},{"content":"An array of delegates representing the invocation list of the current delegate.","nodes":[{"pos":[0,79],"content":"An array of delegates representing the invocation list of the current delegate.","nodes":[{"content":"An array of delegates representing the invocation list of the current delegate.","pos":[0,79]}]}],"pos":[158794,158874],"yaml":true},{"content":"Gets the static method represented by the current delegate.","nodes":[{"pos":[0,59],"content":"Gets the static method represented by the current delegate.","nodes":[{"content":"Gets the static method represented by the current delegate.","pos":[0,59]}]}],"pos":[160352,160412],"yaml":true},{"content":"This method applies only if the current delegate represents a static method.","nodes":[{"pos":[0,76],"content":"This method applies only if the current delegate represents a static method.","nodes":[{"content":"This method applies only if the current delegate represents a static method.","pos":[0,76]}]}],"pos":[160423,160500],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> describing the static method represented by the current delegate.","nodes":[{"pos":[0,117],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> describing the static method represented by the current delegate.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> describing the static method represented by the current delegate."}],"pos":[160679,160797],"yaml":true},{"content":"The caller does not have access to the method represented by the delegate (for example, if the method is private).","nodes":[{"pos":[0,114],"content":"The caller does not have access to the method represented by the delegate (for example, if the method is private).","nodes":[{"content":"The caller does not have access to the method represented by the delegate (for example, if the method is private).","pos":[0,114]}]}],"pos":[160956,161071],"yaml":true},{"content":"Not supported.","nodes":[{"pos":[0,14],"content":"Not supported.","nodes":[{"content":"Not supported.","pos":[0,14]}]}],"pos":[162528,162543],"yaml":true},{"content":"Not supported.","nodes":[{"pos":[0,14],"content":"Not supported.","nodes":[{"content":"Not supported.","pos":[0,14]}]}],"pos":[162819,162834],"yaml":true},{"content":"Not supported.","nodes":[{"pos":[0,14],"content":"Not supported.","nodes":[{"content":"Not supported.","pos":[0,14]}]}],"pos":[162929,162944],"yaml":true},{"content":"This method is not supported.","nodes":[{"pos":[0,29],"content":"This method is not supported.","nodes":[{"content":"This method is not supported.","pos":[0,29]}]}],"pos":[163103,163133],"yaml":true},{"content":"Gets the method represented by the delegate.","nodes":[{"pos":[0,44],"content":"Gets the method represented by the delegate.","nodes":[{"content":"Gets the method represented by the delegate.","pos":[0,44]}]}],"pos":[164157,164202],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> describing the method represented by the delegate.","nodes":[{"pos":[0,102],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> describing the method represented by the delegate.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> describing the method represented by the delegate."}],"pos":[164349,164452],"yaml":true},{"content":"The caller does not have access to the method represented by the delegate (for example, if the method is private).","nodes":[{"pos":[0,114],"content":"The caller does not have access to the method represented by the delegate (for example, if the method is private).","nodes":[{"content":"The caller does not have access to the method represented by the delegate (for example, if the method is private).","pos":[0,114]}]}],"pos":[164604,164719],"yaml":true},{"content":"Determines whether the specified delegates are equal.","nodes":[{"pos":[0,53],"content":"Determines whether the specified delegates are equal.","nodes":[{"content":"Determines whether the specified delegates are equal.","pos":[0,53]}]}],"pos":[165932,165986],"yaml":true},{"content":"Two delegates of the same type with the same targets, methods, and invocation lists are considered equal.  \n  \n If the two delegates are not of the same type, they are not considered equal.  \n  \n> [!IMPORTANT]\n>  In the .NET Framework version 1.0 and 1.1, two delegates were considered equal if their targets, methods, and invocation list were equal, even if the delegates were of different types.  \n  \n The methods and targets are compared for equality as follows:  \n  \n-   If the two methods being compared are both static and are the same method on the same class, the methods are considered equal and the targets are also considered equal.  \n  \n-   If the two methods being compared are instance methods and are the same method on the same object, the methods are considered equal and the targets are also considered equal.  \n  \n-   Otherwise, the methods are not considered to be equal and the targets are also not considered to be equal.  \n  \n Two invocation lists are considered identical if they have the same order and the corresponding elements from the two lists represent the same method and target.  \n  \n The equivalent method for this operator is <xref:System.Delegate.Equals%28System.Object%29?displayProperty=fullName>","nodes":[{"pos":[0,105],"content":"Two delegates of the same type with the same targets, methods, and invocation lists are considered equal.","nodes":[{"content":"Two delegates of the same type with the same targets, methods, and invocation lists are considered equal.","pos":[0,105]}]},{"pos":[112,189],"content":"If the two delegates are not of the same type, they are not considered equal.","nodes":[{"content":"If the two delegates are not of the same type, they are not considered equal.","pos":[0,77]}]},{"pos":[197,397],"content":"[!IMPORTANT]\n In the .NET Framework version 1.0 and 1.1, two delegates were considered equal if their targets, methods, and invocation list were equal, even if the delegates were of different types.","leadings":["","> "],"nodes":[{"content":"In the .NET Framework version 1.0 and 1.1, two delegates were considered equal if their targets, methods, and invocation list were equal, even if the delegates were of different types.","pos":[14,198]}]},{"pos":[404,465],"content":"The methods and targets are compared for equality as follows:","nodes":[{"content":"The methods and targets are compared for equality as follows:","pos":[0,61]}]},{"pos":[475,643],"content":"If the two methods being compared are both static and are the same method on the same class, the methods are considered equal and the targets are also considered equal.","nodes":[{"content":"If the two methods being compared are both static and are the same method on the same class, the methods are considered equal and the targets are also considered equal.","pos":[0,168]}]},{"pos":[653,827],"content":"If the two methods being compared are instance methods and are the same method on the same object, the methods are considered equal and the targets are also considered equal.","nodes":[{"content":"If the two methods being compared are instance methods and are the same method on the same object, the methods are considered equal and the targets are also considered equal.","pos":[0,174]}]},{"pos":[837,943],"content":"Otherwise, the methods are not considered to be equal and the targets are also not considered to be equal.","nodes":[{"content":"Otherwise, the methods are not considered to be equal and the targets are also not considered to be equal.","pos":[0,106]}]},{"pos":[950,1111],"content":"Two invocation lists are considered identical if they have the same order and the corresponding elements from the two lists represent the same method and target.","nodes":[{"content":"Two invocation lists are considered identical if they have the same order and the corresponding elements from the two lists represent the same method and target.","pos":[0,161]}]},{"pos":[1118,1234],"content":"The equivalent method for this operator is <xref:System.Delegate.Equals%28System.Object%29?displayProperty=fullName>","nodes":[{"content":"The equivalent method for this operator is <ph id=\"ph1\">&lt;xref:System.Delegate.Equals%28System.Object%29?displayProperty=fullName&gt;</ph>","pos":[0,116],"source":"The equivalent method for this operator is <xref:System.Delegate.Equals%28System.Object%29?displayProperty=fullName>"}]}],"pos":[165997,167251],"yaml":true,"extradata":"MT"},{"content":"The first delegate to compare.","nodes":[{"pos":[0,30],"content":"The first delegate to compare.","nodes":[{"content":"The first delegate to compare.","pos":[0,30]}]}],"pos":[167409,167440],"yaml":true},{"content":"The second delegate to compare.","nodes":[{"pos":[0,31],"content":"The second delegate to compare.","nodes":[{"content":"The second delegate to compare.","pos":[0,31]}]}],"pos":[167500,167532],"yaml":true},{"content":"`true` if <code>d1</code> is equal to <code>d2</code>; otherwise, `false`.","nodes":[{"pos":[0,74],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">d1</ph><ept id=\"p1\">&lt;/code&gt;</ept> is equal to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">d2</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>d1</code> is equal to <code>d2</code>; otherwise, `false`."}],"pos":[167590,167667],"yaml":true},{"content":"Determines whether the specified delegates are not equal.","nodes":[{"pos":[0,57],"content":"Determines whether the specified delegates are not equal.","nodes":[{"content":"Determines whether the specified delegates are not equal.","pos":[0,57]}]}],"pos":[169294,169352],"yaml":true},{"content":"Two delegates are considered not equal if they are of different types, or have different methods, different targets, or different invocation lists.  \n  \n If the two delegates are not of the same type, they are not considered equal.  \n  \n> [!IMPORTANT]\n>  In the .NET Framework version 1.0 and 1.1, two delegates are considered equal if their targets, methods, and invocation list were equal, even if the delegates were of different types.  \n  \n The methods and targets are compared for equality as follows:  \n  \n-   If the two methods being compared are both static and are the same method on the same class, the methods are considered equal and the targets are also considered equal.  \n  \n-   If the two methods being compared are instance methods and are the same method on the same object, the methods are considered equal and the targets are also considered equal.  \n  \n-   Otherwise, the methods are not considered to be equal and the targets are also not considered to be equal.  \n  \n Two invocation lists are not equal if they have different sizes, if they are ordered differently, or if at least one element from one list represents a method or target that is different from that represented by its corresponding element in the other list.  \n  \n The equivalent method for this operator is <xref:System.Delegate.Equals%28System.Object%29?displayProperty=fullName>","nodes":[{"pos":[0,147],"content":"Two delegates are considered not equal if they are of different types, or have different methods, different targets, or different invocation lists.","nodes":[{"content":"Two delegates are considered not equal if they are of different types, or have different methods, different targets, or different invocation lists.","pos":[0,147]}]},{"pos":[154,231],"content":"If the two delegates are not of the same type, they are not considered equal.","nodes":[{"content":"If the two delegates are not of the same type, they are not considered equal.","pos":[0,77]}]},{"pos":[239,438],"content":"[!IMPORTANT]\n In the .NET Framework version 1.0 and 1.1, two delegates are considered equal if their targets, methods, and invocation list were equal, even if the delegates were of different types.","leadings":["","> "],"nodes":[{"content":"In the .NET Framework version 1.0 and 1.1, two delegates are considered equal if their targets, methods, and invocation list were equal, even if the delegates were of different types.","pos":[14,197]}]},{"pos":[445,506],"content":"The methods and targets are compared for equality as follows:","nodes":[{"content":"The methods and targets are compared for equality as follows:","pos":[0,61]}]},{"pos":[516,684],"content":"If the two methods being compared are both static and are the same method on the same class, the methods are considered equal and the targets are also considered equal.","nodes":[{"content":"If the two methods being compared are both static and are the same method on the same class, the methods are considered equal and the targets are also considered equal.","pos":[0,168]}]},{"pos":[694,868],"content":"If the two methods being compared are instance methods and are the same method on the same object, the methods are considered equal and the targets are also considered equal.","nodes":[{"content":"If the two methods being compared are instance methods and are the same method on the same object, the methods are considered equal and the targets are also considered equal.","pos":[0,174]}]},{"pos":[878,984],"content":"Otherwise, the methods are not considered to be equal and the targets are also not considered to be equal.","nodes":[{"content":"Otherwise, the methods are not considered to be equal and the targets are also not considered to be equal.","pos":[0,106]}]},{"pos":[991,1247],"content":"Two invocation lists are not equal if they have different sizes, if they are ordered differently, or if at least one element from one list represents a method or target that is different from that represented by its corresponding element in the other list.","nodes":[{"content":"Two invocation lists are not equal if they have different sizes, if they are ordered differently, or if at least one element from one list represents a method or target that is different from that represented by its corresponding element in the other list.","pos":[0,256]}]},{"pos":[1254,1370],"content":"The equivalent method for this operator is <xref:System.Delegate.Equals%28System.Object%29?displayProperty=fullName>","nodes":[{"content":"The equivalent method for this operator is <ph id=\"ph1\">&lt;xref:System.Delegate.Equals%28System.Object%29?displayProperty=fullName&gt;</ph>","pos":[0,116],"source":"The equivalent method for this operator is <xref:System.Delegate.Equals%28System.Object%29?displayProperty=fullName>"}]}],"pos":[169363,170753],"yaml":true,"extradata":"MT"},{"content":"The first delegate to compare.","nodes":[{"pos":[0,30],"content":"The first delegate to compare.","nodes":[{"content":"The first delegate to compare.","pos":[0,30]}]}],"pos":[170913,170944],"yaml":true},{"content":"The second delegate to compare.","nodes":[{"pos":[0,31],"content":"The second delegate to compare.","nodes":[{"content":"The second delegate to compare.","pos":[0,31]}]}],"pos":[171004,171036],"yaml":true},{"content":"`true` if <code>d1</code> is not equal to <code>d2</code>; otherwise, `false`.","nodes":[{"pos":[0,78],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">d1</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not equal to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">d2</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>d1</code> is not equal to <code>d2</code>; otherwise, `false`."}],"pos":[171094,171175],"yaml":true},{"content":"Removes the last occurrence of the invocation list of a delegate from the invocation list of another delegate.","nodes":[{"pos":[0,110],"content":"Removes the last occurrence of the invocation list of a delegate from the invocation list of another delegate.","nodes":[{"content":"Removes the last occurrence of the invocation list of a delegate from the invocation list of another delegate.","pos":[0,110]}]}],"pos":[172760,172871],"yaml":true},{"content":"If the invocation list of `value` matches a contiguous set of elements in the invocation list of `source`, then the invocation list of `value` is said to occur within the invocation list of `source`. If the invocation list of `value` occurs more than once in the invocation list of `source`, the last occurrence is removed.","nodes":[{"pos":[0,323],"content":"If the invocation list of `value` matches a contiguous set of elements in the invocation list of `source`, then the invocation list of `value` is said to occur within the invocation list of `source`. If the invocation list of `value` occurs more than once in the invocation list of `source`, the last occurrence is removed.","nodes":[{"content":"If the invocation list of <ph id=\"ph1\">`value`</ph> matches a contiguous set of elements in the invocation list of <ph id=\"ph2\">`source`</ph>, then the invocation list of <ph id=\"ph3\">`value`</ph> is said to occur within the invocation list of <ph id=\"ph4\">`source`</ph>.","pos":[0,199],"source":"If the invocation list of `value` matches a contiguous set of elements in the invocation list of `source`, then the invocation list of `value` is said to occur within the invocation list of `source`."},{"content":"If the invocation list of <ph id=\"ph1\">`value`</ph> occurs more than once in the invocation list of <ph id=\"ph2\">`source`</ph>, the last occurrence is removed.","pos":[200,323],"source":" If the invocation list of `value` occurs more than once in the invocation list of `source`, the last occurrence is removed."}]}],"pos":[172882,173206],"yaml":true,"extradata":"MT"},{"content":"The delegate from which to remove the invocation list of <code>value</code>.","nodes":[{"pos":[0,76],"content":"The delegate from which to remove the invocation list of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The delegate from which to remove the invocation list of <code>value</code>."}],"pos":[173374,173451],"yaml":true},{"content":"The delegate that supplies the invocation list to remove from the invocation list of <code>source</code>.","nodes":[{"pos":[0,105],"content":"The delegate that supplies the invocation list to remove from the invocation list of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The delegate that supplies the invocation list to remove from the invocation list of <code>source</code>."}],"pos":[173514,173620],"yaml":true},{"content":"A new delegate with an invocation list formed by taking the invocation list of <code>source</code> and removing the last occurrence of the invocation list of <code>value</code>, if the invocation list of <code>value</code> is found within the invocation list of <code>source</code>. Returns <code>source</code> if <code>value</code> is `null` or if the invocation list of <code>value</code> is not found within the invocation list of <code>source</code>. Returns a null reference if the invocation list of <code>value</code> is equal to the invocation list of <code>source</code> or if <code>source</code> is a null reference.","nodes":[{"pos":[0,626],"content":"A new delegate with an invocation list formed by taking the invocation list of <code>source</code> and removing the last occurrence of the invocation list of <code>value</code>, if the invocation list of <code>value</code> is found within the invocation list of <code>source</code>. Returns <code>source</code> if <code>value</code> is `null` or if the invocation list of <code>value</code> is not found within the invocation list of <code>source</code>. Returns a null reference if the invocation list of <code>value</code> is equal to the invocation list of <code>source</code> or if <code>source</code> is a null reference.","nodes":[{"content":"A new delegate with an invocation list formed by taking the invocation list of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> and removing the last occurrence of the invocation list of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept>, if the invocation list of <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">value</ph><ept id=\"p3\">&lt;/code&gt;</ept> is found within the invocation list of <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph4\">source</ph><ept id=\"p4\">&lt;/code&gt;</ept>.","pos":[0,282],"source":"A new delegate with an invocation list formed by taking the invocation list of <code>source</code> and removing the last occurrence of the invocation list of <code>value</code>, if the invocation list of <code>value</code> is found within the invocation list of <code>source</code>."},{"content":"Returns <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph> or if the invocation list of <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">value</ph><ept id=\"p3\">&lt;/code&gt;</ept> is not found within the invocation list of <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph5\">source</ph><ept id=\"p4\">&lt;/code&gt;</ept>.","pos":[283,454],"source":" Returns <code>source</code> if <code>value</code> is `null` or if the invocation list of <code>value</code> is not found within the invocation list of <code>source</code>."},{"content":"Returns a null reference if the invocation list of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is equal to the invocation list of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">source</ph><ept id=\"p2\">&lt;/code&gt;</ept> or if <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">source</ph><ept id=\"p3\">&lt;/code&gt;</ept> is a null reference.","pos":[455,626],"source":" Returns a null reference if the invocation list of <code>value</code> is equal to the invocation list of <code>source</code> or if <code>source</code> is a null reference."}]}],"pos":[173679,174306],"yaml":true},{"content":"The caller does not have access to the method represented by the delegate (for example, if the method is private).","nodes":[{"pos":[0,114],"content":"The caller does not have access to the method represented by the delegate (for example, if the method is private).","nodes":[{"content":"The caller does not have access to the method represented by the delegate (for example, if the method is private).","pos":[0,114]}]}],"pos":[174458,174573],"yaml":true},{"content":"The delegate types do not match.","nodes":[{"pos":[0,32],"content":"The delegate types do not match.","nodes":[{"content":"The delegate types do not match.","pos":[0,32]}]}],"pos":[174667,174700],"yaml":true},{"content":"Removes all occurrences of the invocation list of a delegate from the invocation list of another delegate.","nodes":[{"pos":[0,106],"content":"Removes all occurrences of the invocation list of a delegate from the invocation list of another delegate.","nodes":[{"content":"Removes all occurrences of the invocation list of a delegate from the invocation list of another delegate.","pos":[0,106]}]}],"pos":[176243,176350],"yaml":true},{"content":"If the invocation list of `value` matches a contiguous set of elements in the invocation list of `source`, then the invocation list of `value` is said to occur within the invocation list of `source`. If the invocation list of `value` occurs more than once in the invocation list of `source`, all occurrences are removed.","nodes":[{"pos":[0,320],"content":"If the invocation list of `value` matches a contiguous set of elements in the invocation list of `source`, then the invocation list of `value` is said to occur within the invocation list of `source`. If the invocation list of `value` occurs more than once in the invocation list of `source`, all occurrences are removed.","nodes":[{"content":"If the invocation list of <ph id=\"ph1\">`value`</ph> matches a contiguous set of elements in the invocation list of <ph id=\"ph2\">`source`</ph>, then the invocation list of <ph id=\"ph3\">`value`</ph> is said to occur within the invocation list of <ph id=\"ph4\">`source`</ph>.","pos":[0,199],"source":"If the invocation list of `value` matches a contiguous set of elements in the invocation list of `source`, then the invocation list of `value` is said to occur within the invocation list of `source`."},{"content":"If the invocation list of <ph id=\"ph1\">`value`</ph> occurs more than once in the invocation list of <ph id=\"ph2\">`source`</ph>, all occurrences are removed.","pos":[200,320],"source":" If the invocation list of `value` occurs more than once in the invocation list of `source`, all occurrences are removed."}]}],"pos":[176361,176682],"yaml":true,"extradata":"MT"},{"content":"The delegate from which to remove the invocation list of <code>value</code>.","nodes":[{"pos":[0,76],"content":"The delegate from which to remove the invocation list of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The delegate from which to remove the invocation list of <code>value</code>."}],"pos":[176853,176930],"yaml":true},{"content":"The delegate that supplies the invocation list to remove from the invocation list of <code>source</code>.","nodes":[{"pos":[0,105],"content":"The delegate that supplies the invocation list to remove from the invocation list of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The delegate that supplies the invocation list to remove from the invocation list of <code>source</code>."}],"pos":[176993,177099],"yaml":true},{"content":"A new delegate with an invocation list formed by taking the invocation list of <code>source</code> and removing all occurrences of the invocation list of <code>value</code>, if the invocation list of <code>value</code> is found within the invocation list of <code>source</code>. Returns <code>source</code> if <code>value</code> is `null` or if the invocation list of <code>value</code> is not found within the invocation list of <code>source</code>. Returns a null reference if the invocation list of <code>value</code> is equal to the invocation list of <code>source</code>, if <code>source</code> contains only a series of invocation lists that are equal to the invocation list of <code>value</code>, or if <code>source</code> is a null reference.","nodes":[{"pos":[0,750],"content":"A new delegate with an invocation list formed by taking the invocation list of <code>source</code> and removing all occurrences of the invocation list of <code>value</code>, if the invocation list of <code>value</code> is found within the invocation list of <code>source</code>. Returns <code>source</code> if <code>value</code> is `null` or if the invocation list of <code>value</code> is not found within the invocation list of <code>source</code>. Returns a null reference if the invocation list of <code>value</code> is equal to the invocation list of <code>source</code>, if <code>source</code> contains only a series of invocation lists that are equal to the invocation list of <code>value</code>, or if <code>source</code> is a null reference.","nodes":[{"content":"A new delegate with an invocation list formed by taking the invocation list of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> and removing all occurrences of the invocation list of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept>, if the invocation list of <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">value</ph><ept id=\"p3\">&lt;/code&gt;</ept> is found within the invocation list of <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph4\">source</ph><ept id=\"p4\">&lt;/code&gt;</ept>.","pos":[0,278],"source":"A new delegate with an invocation list formed by taking the invocation list of <code>source</code> and removing all occurrences of the invocation list of <code>value</code>, if the invocation list of <code>value</code> is found within the invocation list of <code>source</code>."},{"content":"Returns <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph> or if the invocation list of <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">value</ph><ept id=\"p3\">&lt;/code&gt;</ept> is not found within the invocation list of <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph5\">source</ph><ept id=\"p4\">&lt;/code&gt;</ept>.","pos":[279,450],"source":" Returns <code>source</code> if <code>value</code> is `null` or if the invocation list of <code>value</code> is not found within the invocation list of <code>source</code>."},{"content":"Returns a null reference if the invocation list of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is equal to the invocation list of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">source</ph><ept id=\"p2\">&lt;/code&gt;</ept>, if <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">source</ph><ept id=\"p3\">&lt;/code&gt;</ept> contains only a series of invocation lists that are equal to the invocation list of <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph4\">value</ph><ept id=\"p4\">&lt;/code&gt;</ept>, or if <bpt id=\"p5\">&lt;code&gt;</bpt><ph id=\"ph5\">source</ph><ept id=\"p5\">&lt;/code&gt;</ept> is a null reference.","pos":[451,750],"source":" Returns a null reference if the invocation list of <code>value</code> is equal to the invocation list of <code>source</code>, if <code>source</code> contains only a series of invocation lists that are equal to the invocation list of <code>value</code>, or if <code>source</code> is a null reference."}]}],"pos":[177158,177909],"yaml":true},{"content":"The caller does not have access to the method represented by the delegate (for example, if the method is private).","nodes":[{"pos":[0,114],"content":"The caller does not have access to the method represented by the delegate (for example, if the method is private).","nodes":[{"content":"The caller does not have access to the method represented by the delegate (for example, if the method is private).","pos":[0,114]}]}],"pos":[178064,178179],"yaml":true},{"content":"The delegate types do not match.","nodes":[{"pos":[0,32],"content":"The delegate types do not match.","nodes":[{"content":"The delegate types do not match.","pos":[0,32]}]}],"pos":[178273,178306],"yaml":true},{"content":"Removes the invocation list of a delegate from the invocation list of another delegate.","nodes":[{"pos":[0,87],"content":"Removes the invocation list of a delegate from the invocation list of another delegate.","nodes":[{"content":"Removes the invocation list of a delegate from the invocation list of another delegate.","pos":[0,87]}]}],"pos":[179777,179865],"yaml":true},{"content":"If the invocation list of `value` matches a contiguous set of elements in the current delegate's invocation list, then the invocation list of `value` is said to occur within the current delegate's invocation list. If the invocation list of `value` occurs more than once in the current delegate's invocation list, the last occurrence is removed.","nodes":[{"pos":[0,344],"content":"If the invocation list of `value` matches a contiguous set of elements in the current delegate's invocation list, then the invocation list of `value` is said to occur within the current delegate's invocation list. If the invocation list of `value` occurs more than once in the current delegate's invocation list, the last occurrence is removed.","nodes":[{"content":"If the invocation list of <ph id=\"ph1\">`value`</ph> matches a contiguous set of elements in the current delegate's invocation list, then the invocation list of <ph id=\"ph2\">`value`</ph> is said to occur within the current delegate's invocation list.","pos":[0,213],"source":"If the invocation list of `value` matches a contiguous set of elements in the current delegate's invocation list, then the invocation list of `value` is said to occur within the current delegate's invocation list."},{"content":"If the invocation list of <ph id=\"ph1\">`value`</ph> occurs more than once in the current delegate's invocation list, the last occurrence is removed.","pos":[214,344],"source":" If the invocation list of `value` occurs more than once in the current delegate's invocation list, the last occurrence is removed."}]}],"pos":[179876,180221],"yaml":true,"extradata":"MT"},{"content":"The delegate that supplies the invocation list to remove from the invocation list of the current delegate.","nodes":[{"pos":[0,106],"content":"The delegate that supplies the invocation list to remove from the invocation list of the current delegate.","nodes":[{"content":"The delegate that supplies the invocation list to remove from the invocation list of the current delegate.","pos":[0,106]}]}],"pos":[180371,180478],"yaml":true},{"content":"A new delegate with an invocation list formed by taking the invocation list of the current delegate and removing the invocation list of <code>value</code>, if the invocation list of <code>value</code> is found within the current delegate's invocation list. Returns the current delegate if <code>value</code> is `null` or if the invocation list of <code>value</code> is not found within the current delegate's invocation list. Returns `null` if the invocation list of <code>value</code> is equal to the current delegate's invocation list.","nodes":[{"pos":[0,537],"content":"A new delegate with an invocation list formed by taking the invocation list of the current delegate and removing the invocation list of <code>value</code>, if the invocation list of <code>value</code> is found within the current delegate's invocation list. Returns the current delegate if <code>value</code> is `null` or if the invocation list of <code>value</code> is not found within the current delegate's invocation list. Returns `null` if the invocation list of <code>value</code> is equal to the current delegate's invocation list.","nodes":[{"content":"A new delegate with an invocation list formed by taking the invocation list of the current delegate and removing the invocation list of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, if the invocation list of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is found within the current delegate's invocation list.","pos":[0,256],"source":"A new delegate with an invocation list formed by taking the invocation list of the current delegate and removing the invocation list of <code>value</code>, if the invocation list of <code>value</code> is found within the current delegate's invocation list."},{"content":"Returns the current delegate if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph> or if the invocation list of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is not found within the current delegate's invocation list.","pos":[257,425],"source":" Returns the current delegate if <code>value</code> is `null` or if the invocation list of <code>value</code> is not found within the current delegate's invocation list."},{"content":"Returns <ph id=\"ph1\">`null`</ph> if the invocation list of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is equal to the current delegate's invocation list.","pos":[426,537],"source":" Returns `null` if the invocation list of <code>value</code> is equal to the current delegate's invocation list."}]}],"pos":[180537,181075],"yaml":true},{"content":"The caller does not have access to the method represented by the delegate (for example, if the method is private).","nodes":[{"pos":[0,114],"content":"The caller does not have access to the method represented by the delegate (for example, if the method is private).","nodes":[{"content":"The caller does not have access to the method represented by the delegate (for example, if the method is private).","pos":[0,114]}]}],"pos":[181231,181346],"yaml":true},{"content":"Gets the class instance on which the current delegate invokes the instance method.","nodes":[{"pos":[0,82],"content":"Gets the class instance on which the current delegate invokes the instance method.","nodes":[{"content":"Gets the class instance on which the current delegate invokes the instance method.","pos":[0,82]}]}],"pos":[182370,182453],"yaml":true},{"content":"An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.  \n  \n If the delegate invokes one or more instance methods, this property returns the target of the last instance method in the invocation list.","nodes":[{"pos":[0,148],"content":"An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.","nodes":[{"content":"An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.","pos":[0,148]}]},{"pos":[155,293],"content":"If the delegate invokes one or more instance methods, this property returns the target of the last instance method in the invocation list.","nodes":[{"content":"If the delegate invokes one or more instance methods, this property returns the target of the last instance method in the invocation list.","pos":[0,138]}]}],"pos":[182464,182762],"yaml":true,"extradata":"MT"},{"content":"The object on which the current delegate invokes the instance method, if the delegate represents an instance method; `null` if the delegate represents a static method.","nodes":[{"pos":[0,167],"content":"The object on which the current delegate invokes the instance method, if the delegate represents an instance method; <ph id=\"ph1\">`null`</ph> if the delegate represents a static method.","source":"The object on which the current delegate invokes the instance method, if the delegate represents an instance method; `null` if the delegate represents a static method."}],"pos":[182872,183040],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Delegate\n  commentId: T:System.Delegate\n  id: Delegate\n  children:\n  - System.Delegate.#ctor(System.Object,System.String)\n  - System.Delegate.#ctor(System.Type,System.String)\n  - System.Delegate.Clone\n  - System.Delegate.Combine(System.Delegate[])\n  - System.Delegate.Combine(System.Delegate,System.Delegate)\n  - System.Delegate.CombineImpl(System.Delegate)\n  - System.Delegate.CreateDelegate(System.Type,System.Type,System.String,System.Boolean,System.Boolean)\n  - System.Delegate.CreateDelegate(System.Type,System.Type,System.String,System.Boolean)\n  - System.Delegate.CreateDelegate(System.Type,System.Object,System.String,System.Boolean)\n  - System.Delegate.CreateDelegate(System.Type,System.Object,System.Reflection.MethodInfo,System.Boolean)\n  - System.Delegate.CreateDelegate(System.Type,System.Object,System.String,System.Boolean,System.Boolean)\n  - System.Delegate.CreateDelegate(System.Type,System.Reflection.MethodInfo,System.Boolean)\n  - System.Delegate.CreateDelegate(System.Type,System.Object,System.String)\n  - System.Delegate.CreateDelegate(System.Type,System.Object,System.Reflection.MethodInfo)\n  - System.Delegate.CreateDelegate(System.Type,System.Type,System.String)\n  - System.Delegate.CreateDelegate(System.Type,System.Reflection.MethodInfo)\n  - System.Delegate.DynamicInvoke(System.Object[])\n  - System.Delegate.DynamicInvokeImpl(System.Object[])\n  - System.Delegate.Equals(System.Object)\n  - System.Delegate.GetHashCode\n  - System.Delegate.GetInvocationList\n  - System.Delegate.GetMethodImpl\n  - System.Delegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.Delegate.Method\n  - System.Delegate.op_Equality(System.Delegate,System.Delegate)\n  - System.Delegate.op_Inequality(System.Delegate,System.Delegate)\n  - System.Delegate.Remove(System.Delegate,System.Delegate)\n  - System.Delegate.RemoveAll(System.Delegate,System.Delegate)\n  - System.Delegate.RemoveImpl(System.Delegate)\n  - System.Delegate.Target\n  langs:\n  - csharp\n  name: Delegate\n  nameWithType: Delegate\n  fullName: System.Delegate\n  type: Class\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Represents a delegate, which is a data structure that refers to a static method or to a class instance and an instance method of that class.\n  remarks: \"The <xref:System.Delegate> class is the base class for delegate types. However, only the system and compilers can derive explicitly from the <xref:System.Delegate> class or from the <xref:System.MulticastDelegate> class. It is also not permissible to derive a new type from a delegate type. The <xref:System.Delegate> class is not considered a delegate type; it is a class used to derive delegate types.  \\n  \\n Most languages implement a `delegate` keyword, and compilers for those languages are able to derive from the <xref:System.MulticastDelegate> class; therefore, users should use the `delegate` keyword provided by the language.  \\n  \\n> [!NOTE]\\n>  The common language runtime provides an `Invoke` method for each delegate type, with the same signature as the delegate. You do not have to call this method explicitly from C#, Visual Basic, or Visual C++, because the compilers call it automatically. The `Invoke` method is useful in [reflection](~/docs/framework/reflection-and-codedom/reflection.md) when you want to find the signature of the delegate type.  \\n  \\n The common language runtime provides each delegate type with `BeginInvoke` and `EndInvoke` methods, to enable asynchronous invocation of the delegate. For more information about these methods, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  \\n  \\n The declaration of a delegate type establishes a contract that specifies the signature of one or more methods. A delegate is an instance of a delegate type that has references to:  \\n  \\n-   An instance method of a type and a target object assignable to that type.  \\n  \\n-   An instance method of a type, with the hidden `this` parameter exposed in the formal parameter list. The delegate is said to be an open instance delegate.  \\n  \\n-   A static method.  \\n  \\n-   A static method and a target object assignable to the first parameter of the method. The delegate is said to be closed over its first argument.  \\n  \\n For more information on delegate binding, see the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload.  \\n  \\n> [!NOTE]\\n>  In the .NET Framework versions 1.0 and 1.1, a delegate can represent a method only if the signature of the method exactly matches the signature specified by the delegate type. Thus, only the first and third bullets in the preceding list are supported, and the first bullet requires an exact type match.  \\n  \\n When a delegate represents an instance method closed over its first argument (the most common case), the delegate stores a reference to the method's entry point and a reference to an object, called the target, which is of a type assignable to the type that defined the method. When a delegate represents an open instance method, it stores a reference to the method's entry point. The delegate signature must include the hidden `this` parameter in its formal parameter list; in this case, the delegate does not have a reference to a target object, and a target object must be supplied when the delegate is invoked.  \\n  \\n When a delegate represents a static method, the delegate stores a reference to the method's entry point. When a delegate represents a static method closed over its first argument, the delegate stores a reference to the method's entry point and a reference to a target object assignable to the type of the method's first argument. When the delegate is invoked, the first argument of the static method receives the target object.  \\n  \\n The invocation list of a delegate is an ordered set of delegates in which each element of the list invokes exactly one of the methods represented by the delegate. An invocation list can contain duplicate methods. During an invocation, methods are invoked in the order in which they appear in the invocation list. A delegate attempts to invoke every method in its invocation list; duplicates are invoked once for each time they appear in the invocation list. Delegates are immutable; once created, the invocation list of a delegate does not change.  \\n  \\n Delegates are referred to as multicast, or combinable, because a delegate can invoke one or more methods and can be used in combining operations.  \\n  \\n Combining operations, such as <xref:System.Delegate.Combine%2A> and <xref:System.Delegate.Remove%2A>, do not alter existing delegates. Instead, such an operation returns a new delegate that contains the results of the operation, an unchanged delegate, or `null`. A combining operation returns `null` when the result of the operation is a delegate that does not reference at least one method. A combining operation returns an unchanged delegate when the requested operation has no effect.  \\n  \\n> [!NOTE]\\n>  Managed languages use the <xref:System.Delegate.Combine%2A> and <xref:System.Delegate.Remove%2A> methods to implement delegate operations. Examples include the `AddHandler` and `RemoveHandler` statements in Visual Basic and the += and -= operators on delegate types in C#.  \\n  \\n Starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], generic delegate types can have variant type parameters. Contravariant type parameters can be used as parameter types of the delegate, and a covariant type parameter can be used as the return type. This feature allows generic delegate types that are constructed from the same generic type definition to be assignment-compatible if their type arguments are reference types with an inheritance relationship, as explained in [Covariance and Contravariance](~/docs/standard/generics/covariance-and-contravariance.md).  \\n  \\n> [!NOTE]\\n>  Generic delegates that are assignment-compatible because of variance are not necessarily combinable. To be combinable, the types must match exactly. For example, suppose that a class named `Derived` is derived from a class named `Base`. A delegate of type `Action<Base>` (`Action(Of Base)` in Visual Basic) can be assigned to a variable of type `Action<Derived>`, but the two delegates cannot be combined because the types do not match exactly.  \\n  \\n If an invoked method throws an exception, the method stops executing, the exception is passed back to the caller of the delegate, and remaining methods in the invocation list are not invoked. Catching the exception in the caller does not alter this behavior.  \\n  \\n When the signature of the methods invoked by a delegate includes a return value, the delegate returns the return value of the last element in the invocation list. When the signature includes a parameter that is passed by reference, the final value of the parameter is the result of every method in the invocation list executing sequentially and updating the parameter's value.  \\n  \\n The closest equivalent of a delegate in C or C++ is a function pointer. A delegate can represent a static method or an instance method. When the delegate represents an instance method, the delegate stores not only a reference to the method's entry point, but also a reference to the class instance. Unlike function pointers, delegates are object oriented and type safe.\"\n  example:\n  - \"The following example shows how to define a delegate named `myMethodDelegate`. Instances of this delegate are created for an instance method and a static method of the nested `mySampleClass` class. The delegate for the instance method requires an instance of `mySampleClass`. The `mySampleClass` instance is saved in a variable named `mySC`.  \\n  \\n [!code-cpp[Classic Delegate Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Delegate Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic Delegate Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Delegate Example/CS/source.cs#1)]\\n [!code-vb[Classic Delegate Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Delegate Example/VB/source.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDual)]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public abstract class Delegate : ICloneable, System.Runtime.Serialization.ISerializable\n  inheritance:\n  - System.Object\n  derivedClasses:\n  - Microsoft.Build.BuildEngine.ColorResetter\n  - Microsoft.Build.BuildEngine.ColorSetter\n  - Microsoft.Build.BuildEngine.WriteHandler\n  - Microsoft.Build.Evaluation.ProjectCollection.ProjectAddedEventHandler\n  - Microsoft.Build.Execution.BuildSubmissionCompleteCallback\n  - Microsoft.Build.Framework.AnyEventHandler\n  - Microsoft.Build.Framework.BuildErrorEventHandler\n  - Microsoft.Build.Framework.BuildFinishedEventHandler\n  - Microsoft.Build.Framework.BuildMessageEventHandler\n  - Microsoft.Build.Framework.BuildStartedEventHandler\n  - Microsoft.Build.Framework.BuildStatusEventHandler\n  - Microsoft.Build.Framework.BuildWarningEventHandler\n  - Microsoft.Build.Framework.CustomBuildEventHandler\n  - Microsoft.Build.Framework.ProjectFinishedEventHandler\n  - Microsoft.Build.Framework.ProjectStartedEventHandler\n  - Microsoft.Build.Framework.TargetFinishedEventHandler\n  - Microsoft.Build.Framework.TargetStartedEventHandler\n  - Microsoft.Build.Framework.TaskFinishedEventHandler\n  - Microsoft.Build.Framework.TaskStartedEventHandler\n  - Microsoft.Build.Logging.ColorResetter\n  - Microsoft.Build.Logging.ColorSetter\n  - Microsoft.Build.Logging.WriteHandler\n  - Microsoft.Build.Utilities.DependencyFilter\n  - Microsoft.FSharp.Control.FSharpHandler`1\n  - Microsoft.VisualBasic.ApplicationServices.ShutdownEventHandler\n  - Microsoft.VisualBasic.ApplicationServices.StartupEventHandler\n  - Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventHandler\n  - Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventHandler\n  - Microsoft.VisualBasic.Compatibility.VB6.ADODC.EndOfRecordsetDelegate\n  - Microsoft.VisualBasic.Compatibility.VB6.ADODC.ErrorDelegate\n  - Microsoft.VisualBasic.Compatibility.VB6.ADODC.FetchCompleteDelegate\n  - Microsoft.VisualBasic.Compatibility.VB6.ADODC.FetchProgressDelegate\n  - Microsoft.VisualBasic.Compatibility.VB6.ADODC.FieldChangeCompleteDelegate\n  - Microsoft.VisualBasic.Compatibility.VB6.ADODC.MoveCompleteDelegate\n  - Microsoft.VisualBasic.Compatibility.VB6.ADODC.RecordChangeCompleteDelegate\n  - Microsoft.VisualBasic.Compatibility.VB6.ADODC.RecordsetChangeCompleteDelegate\n  - Microsoft.VisualBasic.Compatibility.VB6.ADODC.WillChangeFieldDelegate\n  - Microsoft.VisualBasic.Compatibility.VB6.ADODC.WillChangeRecordDelegate\n  - Microsoft.VisualBasic.Compatibility.VB6.ADODC.WillChangeRecordsetDelegate\n  - Microsoft.VisualBasic.Compatibility.VB6.ADODC.WillMoveDelegate\n  - Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler\n  - Microsoft.VisualC.StlClr.BinaryDelegate`3\n  - Microsoft.VisualC.StlClr.UnaryDelegate`2\n  - Microsoft.Win32.PowerModeChangedEventHandler\n  - Microsoft.Win32.SessionEndedEventHandler\n  - Microsoft.Win32.SessionEndingEventHandler\n  - Microsoft.Win32.SessionSwitchEventHandler\n  - Microsoft.Win32.TimerElapsedEventHandler\n  - Microsoft.Win32.UserPreferenceChangedEventHandler\n  - Microsoft.Win32.UserPreferenceChangingEventHandler\n  - Mono.Security.Interface.MonoLocalCertificateSelectionCallback\n  - Mono.Security.Interface.MonoRemoteCertificateValidationCallback\n  - System.Action\n  - System.Action`1\n  - System.Action`10\n  - System.Action`11\n  - System.Action`12\n  - System.Action`13\n  - System.Action`14\n  - System.Action`15\n  - System.Action`16\n  - System.Action`2\n  - System.Action`3\n  - System.Action`4\n  - System.Action`5\n  - System.Action`6\n  - System.Action`7\n  - System.Action`8\n  - System.Action`9\n  - System.AppDomainInitializer\n  - System.AssemblyLoadEventHandler\n  - System.AsyncCallback\n  - System.Comparison`1\n  - System.ConsoleCancelEventHandler\n  - System.Converter`2\n  - System.CrossAppDomainDelegate\n  - System.EventHandler\n  - System.EventHandler`1\n  - System.Func`1\n  - System.Func`10\n  - System.Func`11\n  - System.Func`12\n  - System.Func`13\n  - System.Func`14\n  - System.Func`15\n  - System.Func`16\n  - System.Func`17\n  - System.Func`2\n  - System.Func`3\n  - System.Func`4\n  - System.Func`5\n  - System.Func`6\n  - System.Func`7\n  - System.Func`8\n  - System.Func`9\n  - System.MulticastDelegate\n  - System.Predicate`1\n  - System.ResolveEventHandler\n  - System.UnhandledExceptionEventHandler\n  - System.Activities.BookmarkCallback\n  - System.Activities.CompletionCallback\n  - System.Activities.CompletionCallback`1\n  - System.Activities.DelegateCompletionCallback\n  - System.Activities.FaultCallback\n  - System.Activities.Presentation.PublishServiceCallback\n  - System.Activities.Presentation.PublishServiceCallback`1\n  - System.Activities.Presentation.SubscribeContextCallback\n  - System.Activities.Presentation.SubscribeContextCallback`1\n  - System.Activities.Presentation.SubscribeServiceCallback\n  - System.Activities.Presentation.SubscribeServiceCallback`1\n  - System.Activities.Presentation.Expressions.CreateExpressionFromStringCallback\n  - System.Activities.Presentation.Hosting.WindowMessage\n  - System.Activities.Presentation.Metadata.AttributeCallback\n  - System.Activities.Presentation.Model.PropertyValueMorphHelper\n  - System.Activities.Presentation.Toolbox.ToolCreatedEventHandler\n  - System.Activities.Presentation.View.ViewStateChangedEventHandler\n  - System.Collections.Specialized.NotifyCollectionChangedEventHandler\n  - System.ComponentModel.AddingNewEventHandler\n  - System.ComponentModel.AsyncCompletedEventHandler\n  - System.ComponentModel.CancelEventHandler\n  - System.ComponentModel.CollectionChangeEventHandler\n  - System.ComponentModel.CurrentChangingEventHandler\n  - System.ComponentModel.DoWorkEventHandler\n  - System.ComponentModel.HandledEventHandler\n  - System.ComponentModel.ListChangedEventHandler\n  - System.ComponentModel.ProgressChangedEventHandler\n  - System.ComponentModel.PropertyChangedEventHandler\n  - System.ComponentModel.PropertyChangingEventHandler\n  - System.ComponentModel.RefreshEventHandler\n  - System.ComponentModel.RunWorkerCompletedEventHandler\n  - System.ComponentModel.Design.ActiveDesignerEventHandler\n  - System.ComponentModel.Design.ActiveDesignSurfaceChangedEventHandler\n  - System.ComponentModel.Design.ComponentChangedEventHandler\n  - System.ComponentModel.Design.ComponentChangingEventHandler\n  - System.ComponentModel.Design.ComponentEventHandler\n  - System.ComponentModel.Design.ComponentRenameEventHandler\n  - System.ComponentModel.Design.DesignerActionListsChangedEventHandler\n  - System.ComponentModel.Design.DesignerActionUIStateChangeEventHandler\n  - System.ComponentModel.Design.DesignerEventHandler\n  - System.ComponentModel.Design.DesignerTransactionCloseEventHandler\n  - System.ComponentModel.Design.DesignSurfaceEventHandler\n  - System.ComponentModel.Design.LoadedEventHandler\n  - System.ComponentModel.Design.MenuCommandsChangedEventHandler\n  - System.ComponentModel.Design.ServiceCreatorCallback\n  - System.ComponentModel.Design.Serialization.ResolveNameEventHandler\n  - System.Composition.Hosting.Core.CompositeActivator\n  - System.Configuration.SettingChangingEventHandler\n  - System.Configuration.SettingsLoadedEventHandler\n  - System.Configuration.SettingsSavingEventHandler\n  - System.Configuration.ValidatorCallback\n  - System.Configuration.Install.InstallEventHandler\n  - System.Configuration.Internal.InternalConfigEventHandler\n  - System.Configuration.Internal.StreamChangeCallback\n  - System.Data.DataColumnChangeEventHandler\n  - System.Data.DataRowChangeEventHandler\n  - System.Data.DataTableClearEventHandler\n  - System.Data.DataTableNewRowEventHandler\n  - System.Data.FillErrorEventHandler\n  - System.Data.MergeFailedEventHandler\n  - System.Data.StateChangeEventHandler\n  - System.Data.StatementCompletedEventHandler\n  - System.Data.Entity.Design.PropertyGeneratedEventHandler\n  - System.Data.Entity.Design.TypeGeneratedEventHandler\n  - System.Data.Objects.ObjectMaterializedEventHandler\n  - System.Data.Odbc.OdbcInfoMessageEventHandler\n  - System.Data.Odbc.OdbcRowUpdatedEventHandler\n  - System.Data.Odbc.OdbcRowUpdatingEventHandler\n  - System.Data.OleDb.OleDbInfoMessageEventHandler\n  - System.Data.OleDb.OleDbRowUpdatedEventHandler\n  - System.Data.OleDb.OleDbRowUpdatingEventHandler\n  - System.Data.OracleClient.OracleInfoMessageEventHandler\n  - System.Data.OracleClient.OracleRowUpdatedEventHandler\n  - System.Data.OracleClient.OracleRowUpdatingEventHandler\n  - System.Data.SqlClient.OnChangeEventHandler\n  - System.Data.SqlClient.SqlInfoMessageEventHandler\n  - System.Data.SqlClient.SqlRowsCopiedEventHandler\n  - System.Data.SqlClient.SqlRowUpdatedEventHandler\n  - System.Data.SqlClient.SqlRowUpdatingEventHandler\n  - System.Deployment.Application.CheckForUpdateCompletedEventHandler\n  - System.Deployment.Application.DeploymentProgressChangedEventHandler\n  - System.Deployment.Application.DownloadFileGroupCompletedEventHandler\n  - System.Diagnostics.DataReceivedEventHandler\n  - System.Diagnostics.EntryWrittenEventHandler\n  - System.DirectoryServices.ActiveDirectory.SyncUpdateCallback\n  - System.DirectoryServices.Protocols.DereferenceConnectionCallback\n  - System.DirectoryServices.Protocols.NotifyOfNewConnectionCallback\n  - System.DirectoryServices.Protocols.QueryClientCertificateCallback\n  - System.DirectoryServices.Protocols.QueryForConnectionCallback\n  - System.DirectoryServices.Protocols.VerifyServerCertificateCallback\n  - System.Drawing.Graphics.DrawImageAbort\n  - System.Drawing.Graphics.EnumerateMetafileProc\n  - System.Drawing.Image.GetThumbnailImageAbort\n  - System.Drawing.Design.PropertyValueUIHandler\n  - System.Drawing.Design.PropertyValueUIItemInvokeHandler\n  - System.Drawing.Design.ToolboxComponentsCreatedEventHandler\n  - System.Drawing.Design.ToolboxComponentsCreatingEventHandler\n  - System.Drawing.Design.ToolboxItemCreatorCallback\n  - System.Drawing.Imaging.PlayRecordCallback\n  - System.Drawing.Printing.PrintEventHandler\n  - System.Drawing.Printing.PrintPageEventHandler\n  - System.Drawing.Printing.QueryPageSettingsEventHandler\n  - System.IO.ErrorEventHandler\n  - System.IO.FileSystemEventHandler\n  - System.IO.RenamedEventHandler\n  - System.IO.Packaging.InvalidSignatureEventHandler\n  - System.IO.Pipes.PipeStreamImpersonationWorker\n  - System.IO.Ports.SerialDataReceivedEventHandler\n  - System.IO.Ports.SerialErrorReceivedEventHandler\n  - System.IO.Ports.SerialPinChangedEventHandler\n  - System.Management.CompletedEventHandler\n  - System.Management.EventArrivedEventHandler\n  - System.Management.ObjectPutEventHandler\n  - System.Management.ObjectReadyEventHandler\n  - System.Management.ProgressEventHandler\n  - System.Management.StoppedEventHandler\n  - System.Messaging.PeekCompletedEventHandler\n  - System.Messaging.ReceiveCompletedEventHandler\n  - System.Net.AuthenticationSchemeSelector\n  - System.Net.BindIPEndPoint\n  - System.Net.CipherSuitesCallback\n  - System.Net.DownloadDataCompletedEventHandler\n  - System.Net.DownloadProgressChangedEventHandler\n  - System.Net.DownloadStringCompletedEventHandler\n  - System.Net.HttpContinueDelegate\n  - System.Net.HttpListener.ExtendedProtectionSelector\n  - System.Net.OpenReadCompletedEventHandler\n  - System.Net.OpenWriteCompletedEventHandler\n  - System.Net.UploadDataCompletedEventHandler\n  - System.Net.UploadFileCompletedEventHandler\n  - System.Net.UploadProgressChangedEventHandler\n  - System.Net.UploadStringCompletedEventHandler\n  - System.Net.UploadValuesCompletedEventHandler\n  - System.Net.WriteStreamClosedEventHandler\n  - System.Net.Mail.SendCompletedEventHandler\n  - System.Net.NetworkInformation.NetworkAddressChangedEventHandler\n  - System.Net.NetworkInformation.NetworkAvailabilityChangedEventHandler\n  - System.Net.NetworkInformation.PingCompletedEventHandler\n  - System.Net.Security.LocalCertificateSelectionCallback\n  - System.Net.Security.RemoteCertificateValidationCallback\n  - System.Net.Sockets.SecurityCriticalAction\n  - System.Reflection.MemberFilter\n  - System.Reflection.ModuleResolveEventHandler\n  - System.Reflection.TypeFilter\n  - System.Runtime.Caching.CacheEntryRemovedCallback\n  - System.Runtime.Caching.CacheEntryUpdateCallback\n  - System.Runtime.Caching.OnChangedCallback\n  - System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback\n  - System.Runtime.CompilerServices.RuntimeHelpers.CleanupCode\n  - System.Runtime.CompilerServices.RuntimeHelpers.TryCode\n  - System.Runtime.InteropServices.ObjectCreationDelegate\n  - System.Runtime.Remoting.Contexts.CrossContextDelegate\n  - System.Runtime.Remoting.Messaging.HeaderHandler\n  - System.Runtime.Remoting.Messaging.MessageSurrogateFilter\n  - System.Security.AccessControl.NativeObjectSecurity.ExceptionFromErrorCode\n  - System.ServiceModel.ClientBase`1.BeginOperationDelegate\n  - System.ServiceModel.ClientBase`1.EndOperationDelegate\n  - System.ServiceModel.Dispatcher.InstanceContextIdleCallback\n  - System.ServiceModel.Security.Tokens.IssuedSecurityTokenHandler\n  - System.ServiceModel.Security.Tokens.RenewedSecurityTokenHandler\n  - System.Text.RegularExpressions.MatchEvaluator\n  - System.Threading.ContextCallback\n  - System.Threading.IOCompletionCallback\n  - System.Threading.ParameterizedThreadStart\n  - System.Threading.SendOrPostCallback\n  - System.Threading.ThreadExceptionEventHandler\n  - System.Threading.ThreadStart\n  - System.Threading.TimerCallback\n  - System.Threading.WaitCallback\n  - System.Threading.WaitOrTimerCallback\n  - System.Timers.ElapsedEventHandler\n  - System.Transactions.HostCurrentTransactionCallback\n  - System.Transactions.TransactionCompletedEventHandler\n  - System.Transactions.TransactionStartedEventHandler\n  - System.Web.BeginEventHandler\n  - System.Web.EndEventHandler\n  - System.Web.HttpCacheValidateHandler\n  - System.Web.HttpResponseSubstitutionCallback\n  - System.Web.HttpWorkerRequest.EndOfSendNotification\n  - System.Web.SiteMapResolveEventHandler\n  - System.Web.TaskEventHandler\n  - System.Web.TraceContextEventHandler\n  - System.Web.Caching.CacheItemRemovedCallback\n  - System.Web.Caching.CacheItemUpdateCallback\n  - System.Web.Compilation.BuildManagerHostUnloadEventHandler\n  - System.Web.ModelBinding.DataAnnotationsModelValidationFactory\n  - System.Web.ModelBinding.DataAnnotationsValidatableObjectAdapterFactory\n  - System.Web.ModelBinding.ModelBinderErrorMessageProvider\n  - System.Web.Profile.ProfileAutoSaveEventHandler\n  - System.Web.Profile.ProfileEventHandler\n  - System.Web.Profile.ProfileMigrateEventHandler\n  - System.Web.Security.AnonymousIdentificationEventHandler\n  - System.Web.Security.DefaultAuthenticationEventHandler\n  - System.Web.Security.FormsAuthenticationEventHandler\n  - System.Web.Security.MembershipValidatePasswordEventHandler\n  - System.Web.Security.PassportAuthenticationEventHandler\n  - System.Web.Security.RoleManagerEventHandler\n  - System.Web.Security.WindowsAuthenticationEventHandler\n  - System.Web.Services.Protocols.InvokeCompletedEventHandler\n  - System.Web.SessionState.SessionStateItemExpireCallback\n  - System.Web.UI.BuildMethod\n  - System.Web.UI.BuildTemplateMethod\n  - System.Web.UI.ControlSkinDelegate\n  - System.Web.UI.DataSourceViewOperationCallback\n  - System.Web.UI.DataSourceViewSelectCallback\n  - System.Web.UI.ExtractTemplateValuesMethod\n  - System.Web.UI.ImageClickEventHandler\n  - System.Web.UI.RenderMethod\n  - System.Web.UI.Design.TransactedChangeCallback\n  - System.Web.UI.Design.ViewEventHandler\n  - System.Web.UI.MobileControls.ListCommandEventHandler\n  - System.Web.UI.MobileControls.ListDataBindEventHandler\n  - System.Web.UI.MobileControls.LoadItemsEventHandler\n  - System.Web.UI.MobileControls.ObjectListCommandEventHandler\n  - System.Web.UI.MobileControls.ObjectListDataBindEventHandler\n  - System.Web.UI.MobileControls.ObjectListSelectEventHandler\n  - System.Web.UI.MobileControls.ObjectListShowCommandsEventHandler\n  - System.Web.UI.WebControls.AdCreatedEventHandler\n  - System.Web.UI.WebControls.AuthenticateEventHandler\n  - System.Web.UI.WebControls.BulletedListEventHandler\n  - System.Web.UI.WebControls.CallingDataMethodsEventHandler\n  - System.Web.UI.WebControls.CommandEventHandler\n  - System.Web.UI.WebControls.CreateUserErrorEventHandler\n  - System.Web.UI.WebControls.CreatingModelDataSourceEventHandler\n  - System.Web.UI.WebControls.DataGridCommandEventHandler\n  - System.Web.UI.WebControls.DataGridItemEventHandler\n  - System.Web.UI.WebControls.DataGridPageChangedEventHandler\n  - System.Web.UI.WebControls.DataGridSortCommandEventHandler\n  - System.Web.UI.WebControls.DataListCommandEventHandler\n  - System.Web.UI.WebControls.DataListItemEventHandler\n  - System.Web.UI.WebControls.DayRenderEventHandler\n  - System.Web.UI.WebControls.DetailsViewCommandEventHandler\n  - System.Web.UI.WebControls.DetailsViewDeletedEventHandler\n  - System.Web.UI.WebControls.DetailsViewDeleteEventHandler\n  - System.Web.UI.WebControls.DetailsViewInsertedEventHandler\n  - System.Web.UI.WebControls.DetailsViewInsertEventHandler\n  - System.Web.UI.WebControls.DetailsViewModeEventHandler\n  - System.Web.UI.WebControls.DetailsViewPageEventHandler\n  - System.Web.UI.WebControls.DetailsViewUpdatedEventHandler\n  - System.Web.UI.WebControls.DetailsViewUpdateEventHandler\n  - System.Web.UI.WebControls.FormViewCommandEventHandler\n  - System.Web.UI.WebControls.FormViewDeletedEventHandler\n  - System.Web.UI.WebControls.FormViewDeleteEventHandler\n  - System.Web.UI.WebControls.FormViewInsertedEventHandler\n  - System.Web.UI.WebControls.FormViewInsertEventHandler\n  - System.Web.UI.WebControls.FormViewModeEventHandler\n  - System.Web.UI.WebControls.FormViewPageEventHandler\n  - System.Web.UI.WebControls.FormViewUpdatedEventHandler\n  - System.Web.UI.WebControls.FormViewUpdateEventHandler\n  - System.Web.UI.WebControls.GridViewCancelEditEventHandler\n  - System.Web.UI.WebControls.GridViewCommandEventHandler\n  - System.Web.UI.WebControls.GridViewDeletedEventHandler\n  - System.Web.UI.WebControls.GridViewDeleteEventHandler\n  - System.Web.UI.WebControls.GridViewEditEventHandler\n  - System.Web.UI.WebControls.GridViewPageEventHandler\n  - System.Web.UI.WebControls.GridViewRowEventHandler\n  - System.Web.UI.WebControls.GridViewSelectEventHandler\n  - System.Web.UI.WebControls.GridViewSortEventHandler\n  - System.Web.UI.WebControls.GridViewUpdatedEventHandler\n  - System.Web.UI.WebControls.GridViewUpdateEventHandler\n  - System.Web.UI.WebControls.ImageMapEventHandler\n  - System.Web.UI.WebControls.LoginCancelEventHandler\n  - System.Web.UI.WebControls.MailMessageEventHandler\n  - System.Web.UI.WebControls.MenuEventHandler\n  - System.Web.UI.WebControls.MonthChangedEventHandler\n  - System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler\n  - System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler\n  - System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler\n  - System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler\n  - System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler\n  - System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler\n  - System.Web.UI.WebControls.RepeaterCommandEventHandler\n  - System.Web.UI.WebControls.RepeaterItemEventHandler\n  - System.Web.UI.WebControls.SendMailErrorEventHandler\n  - System.Web.UI.WebControls.ServerValidateEventHandler\n  - System.Web.UI.WebControls.SiteMapNodeItemEventHandler\n  - System.Web.UI.WebControls.SqlDataSourceCommandEventHandler\n  - System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler\n  - System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler\n  - System.Web.UI.WebControls.SqlDataSourceStatusEventHandler\n  - System.Web.UI.WebControls.TreeNodeEventHandler\n  - System.Web.UI.WebControls.WizardNavigationEventHandler\n  - System.Web.UI.WebControls.WebParts.FieldCallback\n  - System.Web.UI.WebControls.WebParts.ParametersCallback\n  - System.Web.UI.WebControls.WebParts.RowCallback\n  - System.Web.UI.WebControls.WebParts.TableCallback\n  - System.Web.UI.WebControls.WebParts.WebPartAddingEventHandler\n  - System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventHandler\n  - System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler\n  - System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventHandler\n  - System.Web.UI.WebControls.WebParts.WebPartConnectionsEventHandler\n  - System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventHandler\n  - System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventHandler\n  - System.Web.UI.WebControls.WebParts.WebPartEventHandler\n  - System.Web.UI.WebControls.WebParts.WebPartMovingEventHandler\n  - System.Web.UI.WebControls.WebParts.WebPartVerbsEventHandler\n  - System.Web.Util.TransactedCallback\n  - System.Web.Util.WorkItemCallback\n  - System.Windows.AutoResizedEventHandler\n  - System.Windows.CoerceValueCallback\n  - System.Windows.DataObjectCopyingEventHandler\n  - System.Windows.DataObjectPastingEventHandler\n  - System.Windows.DataObjectSettingDataEventHandler\n  - System.Windows.DependencyPropertyChangedEventHandler\n  - System.Windows.DpiChangedEventHandler\n  - System.Windows.DragEventHandler\n  - System.Windows.ExitEventHandler\n  - System.Windows.GiveFeedbackEventHandler\n  - System.Windows.HwndDpiChangedEventHandler\n  - System.Windows.PropertyChangedCallback\n  - System.Windows.QueryContinueDragEventHandler\n  - System.Windows.RequestBringIntoViewEventHandler\n  - System.Windows.RoutedEventHandler\n  - System.Windows.RoutedPropertyChangedEventHandler`1\n  - System.Windows.SessionEndingCancelEventHandler\n  - System.Windows.SizeChangedEventHandler\n  - System.Windows.SourceChangedEventHandler\n  - System.Windows.StartupEventHandler\n  - System.Windows.ValidateValueCallback\n  - System.Windows.Annotations.AnnotationAuthorChangedEventHandler\n  - System.Windows.Annotations.AnnotationResourceChangedEventHandler\n  - System.Windows.Annotations.Storage.StoreContentChangedEventHandler\n  - System.Windows.Automation.AutomationEventHandler\n  - System.Windows.Automation.AutomationFocusChangedEventHandler\n  - System.Windows.Automation.AutomationPropertyChangedEventHandler\n  - System.Windows.Automation.ClientSideProviderFactoryCallback\n  - System.Windows.Automation.StructureChangedEventHandler\n  - System.Windows.Controls.ActivatingKeyTipEventHandler\n  - System.Windows.Controls.CleanUpVirtualizedItemEventHandler\n  - System.Windows.Controls.ContextMenuEventHandler\n  - System.Windows.Controls.DataGridSortingEventHandler\n  - System.Windows.Controls.GroupStyleSelector\n  - System.Windows.Controls.InitializingNewItemEventHandler\n  - System.Windows.Controls.InkCanvasGestureEventHandler\n  - System.Windows.Controls.InkCanvasSelectionChangingEventHandler\n  - System.Windows.Controls.InkCanvasSelectionEditingEventHandler\n  - System.Windows.Controls.InkCanvasStrokeCollectedEventHandler\n  - System.Windows.Controls.InkCanvasStrokeErasingEventHandler\n  - System.Windows.Controls.InkCanvasStrokesReplacedEventHandler\n  - System.Windows.Controls.KeyTipAccessedEventHandler\n  - System.Windows.Controls.ScrollChangedEventHandler\n  - System.Windows.Controls.SelectedCellsChangedEventHandler\n  - System.Windows.Controls.SelectionChangedEventHandler\n  - System.Windows.Controls.TextChangedEventHandler\n  - System.Windows.Controls.ToolTipEventHandler\n  - System.Windows.Controls.Primitives.CustomPopupPlacementCallback\n  - System.Windows.Controls.Primitives.DragCompletedEventHandler\n  - System.Windows.Controls.Primitives.DragDeltaEventHandler\n  - System.Windows.Controls.Primitives.DragStartedEventHandler\n  - System.Windows.Controls.Primitives.ItemsChangedEventHandler\n  - System.Windows.Controls.Primitives.ScrollEventHandler\n  - System.Windows.Controls.Ribbon.RibbonDismissPopupEventHandler\n  - System.Windows.Controls.Ribbon.RibbonQuickAccessToolBarCloneEventHandler\n  - System.Windows.Data.CollectionSynchronizationCallback\n  - System.Windows.Data.FilterEventHandler\n  - System.Windows.Data.GroupDescriptionSelectorCallback\n  - System.Windows.Data.UpdateSourceExceptionFilterCallback\n  - System.Windows.Documents.GetPageCompletedEventHandler\n  - System.Windows.Documents.GetPageNumberCompletedEventHandler\n  - System.Windows.Documents.GetPageRootCompletedEventHandler\n  - System.Windows.Documents.PagesChangedEventHandler\n  - System.Windows.Documents.PaginationProgressEventHandler\n  - System.Windows.Documents.Serialization.WritingCancelledEventHandler\n  - System.Windows.Documents.Serialization.WritingCompletedEventHandler\n  - System.Windows.Documents.Serialization.WritingPrintTicketRequiredEventHandler\n  - System.Windows.Documents.Serialization.WritingProgressChangedEventHandler\n  - System.Windows.Forms.Application.MessageLoopCallback\n  - System.Windows.Forms.AxHost.AboutBoxDelegate\n  - System.Windows.Forms.BindingCompleteEventHandler\n  - System.Windows.Forms.BindingManagerDataErrorEventHandler\n  - System.Windows.Forms.CacheVirtualItemsEventHandler\n  - System.Windows.Forms.ColumnClickEventHandler\n  - System.Windows.Forms.ColumnReorderedEventHandler\n  - System.Windows.Forms.ColumnWidthChangedEventHandler\n  - System.Windows.Forms.ColumnWidthChangingEventHandler\n  - System.Windows.Forms.ContentsResizedEventHandler\n  - System.Windows.Forms.ControlEventHandler\n  - System.Windows.Forms.ConvertEventHandler\n  - System.Windows.Forms.DataGridViewAutoSizeColumnModeEventHandler\n  - System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventHandler\n  - System.Windows.Forms.DataGridViewAutoSizeModeEventHandler\n  - System.Windows.Forms.DataGridViewBindingCompleteEventHandler\n  - System.Windows.Forms.DataGridViewCellCancelEventHandler\n  - System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventHandler\n  - System.Windows.Forms.DataGridViewCellErrorTextNeededEventHandler\n  - System.Windows.Forms.DataGridViewCellEventHandler\n  - System.Windows.Forms.DataGridViewCellFormattingEventHandler\n  - System.Windows.Forms.DataGridViewCellMouseEventHandler\n  - System.Windows.Forms.DataGridViewCellPaintingEventHandler\n  - System.Windows.Forms.DataGridViewCellParsingEventHandler\n  - System.Windows.Forms.DataGridViewCellStateChangedEventHandler\n  - System.Windows.Forms.DataGridViewCellStyleContentChangedEventHandler\n  - System.Windows.Forms.DataGridViewCellToolTipTextNeededEventHandler\n  - System.Windows.Forms.DataGridViewCellValidatingEventHandler\n  - System.Windows.Forms.DataGridViewCellValueEventHandler\n  - System.Windows.Forms.DataGridViewColumnDividerDoubleClickEventHandler\n  - System.Windows.Forms.DataGridViewColumnEventHandler\n  - System.Windows.Forms.DataGridViewColumnStateChangedEventHandler\n  - System.Windows.Forms.DataGridViewDataErrorEventHandler\n  - System.Windows.Forms.DataGridViewEditingControlShowingEventHandler\n  - System.Windows.Forms.DataGridViewRowCancelEventHandler\n  - System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventHandler\n  - System.Windows.Forms.DataGridViewRowDividerDoubleClickEventHandler\n  - System.Windows.Forms.DataGridViewRowErrorTextNeededEventHandler\n  - System.Windows.Forms.DataGridViewRowEventHandler\n  - System.Windows.Forms.DataGridViewRowHeightInfoNeededEventHandler\n  - System.Windows.Forms.DataGridViewRowHeightInfoPushedEventHandler\n  - System.Windows.Forms.DataGridViewRowPostPaintEventHandler\n  - System.Windows.Forms.DataGridViewRowPrePaintEventHandler\n  - System.Windows.Forms.DataGridViewRowsAddedEventHandler\n  - System.Windows.Forms.DataGridViewRowsRemovedEventHandler\n  - System.Windows.Forms.DataGridViewRowStateChangedEventHandler\n  - System.Windows.Forms.DataGridViewSortCompareEventHandler\n  - System.Windows.Forms.DateBoldEventHandler\n  - System.Windows.Forms.DateRangeEventHandler\n  - System.Windows.Forms.DpiChangedEventHandler\n  - System.Windows.Forms.DragEventHandler\n  - System.Windows.Forms.DrawItemEventHandler\n  - System.Windows.Forms.DrawListViewColumnHeaderEventHandler\n  - System.Windows.Forms.DrawListViewItemEventHandler\n  - System.Windows.Forms.DrawListViewSubItemEventHandler\n  - System.Windows.Forms.DrawToolTipEventHandler\n  - System.Windows.Forms.DrawTreeNodeEventHandler\n  - System.Windows.Forms.FormClosedEventHandler\n  - System.Windows.Forms.FormClosingEventHandler\n  - System.Windows.Forms.GiveFeedbackEventHandler\n  - System.Windows.Forms.HelpEventHandler\n  - System.Windows.Forms.HtmlElementErrorEventHandler\n  - System.Windows.Forms.HtmlElementEventHandler\n  - System.Windows.Forms.InputLanguageChangedEventHandler\n  - System.Windows.Forms.InputLanguageChangingEventHandler\n  - System.Windows.Forms.InvalidateEventHandler\n  - System.Windows.Forms.ItemChangedEventHandler\n  - System.Windows.Forms.ItemCheckedEventHandler\n  - System.Windows.Forms.ItemCheckEventHandler\n  - System.Windows.Forms.ItemDragEventHandler\n  - System.Windows.Forms.KeyEventHandler\n  - System.Windows.Forms.KeyPressEventHandler\n  - System.Windows.Forms.LabelEditEventHandler\n  - System.Windows.Forms.LayoutEventHandler\n  - System.Windows.Forms.LinkClickedEventHandler\n  - System.Windows.Forms.LinkLabelLinkClickedEventHandler\n  - System.Windows.Forms.ListControlConvertEventHandler\n  - System.Windows.Forms.ListViewItemMouseHoverEventHandler\n  - System.Windows.Forms.ListViewItemSelectionChangedEventHandler\n  - System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventHandler\n  - System.Windows.Forms.MaskInputRejectedEventHandler\n  - System.Windows.Forms.MeasureItemEventHandler\n  - System.Windows.Forms.MethodInvoker\n  - System.Windows.Forms.MouseEventHandler\n  - System.Windows.Forms.NavigateEventHandler\n  - System.Windows.Forms.NodeLabelEditEventHandler\n  - System.Windows.Forms.PaintEventHandler\n  - System.Windows.Forms.PopupEventHandler\n  - System.Windows.Forms.PreviewKeyDownEventHandler\n  - System.Windows.Forms.PropertyTabChangedEventHandler\n  - System.Windows.Forms.PropertyValueChangedEventHandler\n  - System.Windows.Forms.QueryAccessibilityHelpEventHandler\n  - System.Windows.Forms.QueryContinueDragEventHandler\n  - System.Windows.Forms.QuestionEventHandler\n  - System.Windows.Forms.RetrieveVirtualItemEventHandler\n  - System.Windows.Forms.ScrollEventHandler\n  - System.Windows.Forms.SearchForVirtualItemEventHandler\n  - System.Windows.Forms.SelectedGridItemChangedEventHandler\n  - System.Windows.Forms.SplitterCancelEventHandler\n  - System.Windows.Forms.SplitterEventHandler\n  - System.Windows.Forms.StatusBarDrawItemEventHandler\n  - System.Windows.Forms.StatusBarPanelClickEventHandler\n  - System.Windows.Forms.TabControlCancelEventHandler\n  - System.Windows.Forms.TabControlEventHandler\n  - System.Windows.Forms.TableLayoutCellPaintEventHandler\n  - System.Windows.Forms.ToolBarButtonClickEventHandler\n  - System.Windows.Forms.ToolStripArrowRenderEventHandler\n  - System.Windows.Forms.ToolStripContentPanelRenderEventHandler\n  - System.Windows.Forms.ToolStripDropDownClosedEventHandler\n  - System.Windows.Forms.ToolStripDropDownClosingEventHandler\n  - System.Windows.Forms.ToolStripGripRenderEventHandler\n  - System.Windows.Forms.ToolStripItemClickedEventHandler\n  - System.Windows.Forms.ToolStripItemEventHandler\n  - System.Windows.Forms.ToolStripItemImageRenderEventHandler\n  - System.Windows.Forms.ToolStripItemRenderEventHandler\n  - System.Windows.Forms.ToolStripItemTextRenderEventHandler\n  - System.Windows.Forms.ToolStripPanelRenderEventHandler\n  - System.Windows.Forms.ToolStripRenderEventHandler\n  - System.Windows.Forms.ToolStripSeparatorRenderEventHandler\n  - System.Windows.Forms.TreeNodeMouseClickEventHandler\n  - System.Windows.Forms.TreeNodeMouseHoverEventHandler\n  - System.Windows.Forms.TreeViewCancelEventHandler\n  - System.Windows.Forms.TreeViewEventHandler\n  - System.Windows.Forms.TypeValidationEventHandler\n  - System.Windows.Forms.UICuesEventHandler\n  - System.Windows.Forms.UpDownEventHandler\n  - System.Windows.Forms.WebBrowserDocumentCompletedEventHandler\n  - System.Windows.Forms.WebBrowserNavigatedEventHandler\n  - System.Windows.Forms.WebBrowserNavigatingEventHandler\n  - System.Windows.Forms.WebBrowserProgressChangedEventHandler\n  - System.Windows.Forms.Design.Behavior.BehaviorDragDropEventHandler\n  - System.Windows.Forms.Integration.PropertyTranslator\n  - System.Windows.Ink.DrawingAttributesReplacedEventHandler\n  - System.Windows.Ink.LassoSelectionChangedEventHandler\n  - System.Windows.Ink.PropertyDataChangedEventHandler\n  - System.Windows.Ink.StrokeCollectionChangedEventHandler\n  - System.Windows.Ink.StrokeHitEventHandler\n  - System.Windows.Ink.StylusPointsReplacedEventHandler\n  - System.Windows.Input.AccessKeyPressedEventHandler\n  - System.Windows.Input.CanExecuteRoutedEventHandler\n  - System.Windows.Input.ExecutedRoutedEventHandler\n  - System.Windows.Input.InputEventHandler\n  - System.Windows.Input.InputLanguageEventHandler\n  - System.Windows.Input.InputMethodStateChangedEventHandler\n  - System.Windows.Input.KeyboardEventHandler\n  - System.Windows.Input.KeyboardFocusChangedEventHandler\n  - System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler\n  - System.Windows.Input.KeyEventHandler\n  - System.Windows.Input.MouseButtonEventHandler\n  - System.Windows.Input.MouseEventHandler\n  - System.Windows.Input.MouseWheelEventHandler\n  - System.Windows.Input.NotifyInputEventHandler\n  - System.Windows.Input.PreProcessInputEventHandler\n  - System.Windows.Input.ProcessInputEventHandler\n  - System.Windows.Input.QueryCursorEventHandler\n  - System.Windows.Input.StylusButtonEventHandler\n  - System.Windows.Input.StylusDownEventHandler\n  - System.Windows.Input.StylusEventHandler\n  - System.Windows.Input.StylusSystemGestureEventHandler\n  - System.Windows.Input.TextCompositionEventHandler\n  - System.Windows.Input.TouchFrameEventHandler\n  - System.Windows.Interop.HwndSourceHook\n  - System.Windows.Interop.ThreadMessageEventHandler\n  - System.Windows.Markup.Localizer.BamlLocalizerErrorNotifyEventHandler\n  - System.Windows.Media.HitTestFilterCallback\n  - System.Windows.Media.HitTestResultCallback\n  - System.Windows.Navigation.FragmentNavigationEventHandler\n  - System.Windows.Navigation.LoadCompletedEventHandler\n  - System.Windows.Navigation.NavigatedEventHandler\n  - System.Windows.Navigation.NavigatingCancelEventHandler\n  - System.Windows.Navigation.NavigationFailedEventHandler\n  - System.Windows.Navigation.NavigationProgressEventHandler\n  - System.Windows.Navigation.NavigationStoppedEventHandler\n  - System.Windows.Navigation.RequestNavigateEventHandler\n  - System.Windows.Navigation.ReturnEventHandler`1\n  - System.Windows.Threading.DispatcherHookEventHandler\n  - System.Windows.Threading.DispatcherOperationCallback\n  - System.Windows.Threading.DispatcherUnhandledExceptionEventHandler\n  - System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler\n  - System.Windows.Xps.Packaging.PackagingProgressEventHandler\n  - System.Windows.Xps.Serialization.XpsSerializationCompletedEventHandler\n  - System.Windows.Xps.Serialization.XpsSerializationPrintTicketRequiredEventHandler\n  - System.Windows.Xps.Serialization.XpsSerializationProgressChangedEventHandler\n  - System.Workflow.ComponentModel.GetValueOverride\n  - System.Workflow.ComponentModel.SetValueOverride\n  - System.Workflow.ComponentModel.Design.ConnectorEventHandler\n  - System.Workflow.Runtime.DebugEngine.DebugEngineCallback\n  - System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService.CommitWorkBatchCallback\n  - System.Xml.OnXmlDictionaryReaderClose\n  - System.Xml.XmlNodeChangedEventHandler\n  - System.Xml.Schema.ValidationEventHandler\n  - System.Xml.Schema.XmlValueGetter\n  - System.Xml.Serialization.UnreferencedObjectEventHandler\n  - System.Xml.Serialization.XmlAttributeEventHandler\n  - System.Xml.Serialization.XmlElementEventHandler\n  - System.Xml.Serialization.XmlNodeEventHandler\n  - System.Xml.Serialization.XmlSerializationCollectionFixupCallback\n  - System.Xml.Serialization.XmlSerializationFixupCallback\n  - System.Xml.Serialization.XmlSerializationReadCallback\n  - System.Xml.Serialization.XmlSerializationWriteCallback\n  - System.Xml.Xsl.XsltMessageEncounteredEventHandler\n  implements:\n  - System.ICloneable\n  - System.Runtime.Serialization.ISerializable\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  extensionMethods:\n  - System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n  attributes:\n  - type: System.Runtime.InteropServices.ClassInterfaceAttribute\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Delegate.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Delegate.#ctor(System.Object,System.String)\n  commentId: M:System.Delegate.#ctor(System.Object,System.String)\n  id: '#ctor(System.Object,System.String)'\n  parent: System.Delegate\n  langs:\n  - csharp\n  name: Delegate(Object, String)\n  nameWithType: Delegate.Delegate(Object, String)\n  fullName: Delegate.Delegate(Object, String)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Initializes a delegate that invokes the specified instance method on the specified class instance.\n  remarks: \"This constructor cannot be used in application code. To create a delegate by specifying the name of an instance method, use an overload of the <xref:System.Delegate.CreateDelegate%2A> method that specifies a method name and a target object. For example, the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%29> method overload creates a delegate for an instance method with a specified name.  \\n  \\n This constructor creates delegates for instance methods only. An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.\"\n  syntax:\n    content: protected Delegate (object target, string method);\n    parameters:\n    - id: target\n      type: System.Object\n      description: The class instance on which the delegate invokes <code>method</code>.\n    - id: method\n      type: System.String\n      description: The name of the instance method that the delegate represents.\n  overload: System.Delegate.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>target</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>method</code> is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: There was an error binding to the target method.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Delegate.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Delegate.#ctor(System.Type,System.String)\n  commentId: M:System.Delegate.#ctor(System.Type,System.String)\n  id: '#ctor(System.Type,System.String)'\n  parent: System.Delegate\n  langs:\n  - csharp\n  name: Delegate(Type, String)\n  nameWithType: Delegate.Delegate(Type, String)\n  fullName: Delegate.Delegate(Type, String)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Initializes a delegate that invokes the specified static method from the specified class.\n  remarks: \"This constructor cannot be used in application code. To create a delegate by specifying the name of a static method, use an overload of the <xref:System.Delegate.CreateDelegate%2A> method that specifies a method name but does not specify a target object. For example, the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%29> method overload creates a static delegate for a method with a specified name.  \\n  \\n This constructor creates delegates for static methods only. An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.\"\n  syntax:\n    content: protected Delegate (Type target, string method);\n    parameters:\n    - id: target\n      type: System.Type\n      description: The <xref href=\"System.Type\"></xref> representing the class that defines <code>method</code>.\n    - id: method\n      type: System.String\n      description: The name of the static method that the delegate represents.\n  overload: System.Delegate.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>target</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>method</code> is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>target</code> is not a `RuntimeType`. See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858).  \\n  \\n -or-  \\n  \\n <code>target</code> represents an open generic type.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Delegate.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Delegate.Clone\n  commentId: M:System.Delegate.Clone\n  id: Clone\n  parent: System.Delegate\n  langs:\n  - csharp\n  name: Clone()\n  nameWithType: Delegate.Clone()\n  fullName: Delegate.Clone()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Creates a shallow copy of the delegate.\n  remarks: \"The clone has the same <xref:System.Type>, target, method, and invocation list as the original delegate.  \\n  \\n A shallow copy creates a new instance of the same type as the original object, and then copies the nonstatic fields of the original object. If the field is a value type, a bit-by-bit copy of the field is performed. If the field is a reference type, the reference is copied but the referred object is not; therefore, the reference in the original object and the reference in the clone point to the same object. In contrast, a deep copy of an object duplicates everything directly or indirectly referenced by the fields in the object.\"\n  syntax:\n    content: public virtual object Clone ();\n    parameters: []\n    return:\n      type: System.Object\n      description: A shallow copy of the delegate.\n  overload: System.Delegate.Clone*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Delegate.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Delegate.Combine(System.Delegate[])\n  commentId: M:System.Delegate.Combine(System.Delegate[])\n  id: Combine(System.Delegate[])\n  parent: System.Delegate\n  langs:\n  - csharp\n  name: Combine(Delegate[])\n  nameWithType: Delegate.Combine(Delegate[])\n  fullName: Delegate.Combine(Delegate[])\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Concatenates the invocation lists of an array of delegates.\n  remarks: \"If the `delegates` array contains entries that are `null`, those entries are ignored.  \\n  \\n The invocation list can contain duplicate entries; that is, entries that refer to the same method on the same object.  \\n  \\n> [!NOTE]\\n>  Generic delegates that are assignment-compatible because of variance are not necessarily combinable. To be combinable, the types must match exactly. For example, suppose that a class named `Derived` is derived from a class named `Base`. A delegate of type `Action<Base>` (`Action(Of Base)` in Visual Basic) can be assigned to a variable of type `Action<Derived>`, as explained in [Covariance and Contravariance](~/docs/standard/generics/covariance-and-contravariance.md), but the two delegates cannot be combined because the types do not match exactly.  \\n  \\n <xref:System.Delegate.Combine%2A> is useful for creating event handlers that call multiple methods each time an event occurs.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public static Delegate Combine (Delegate[] delegates);\n    parameters:\n    - id: delegates\n      type: System.Delegate[]\n      description: The array of delegates to combine.\n    return:\n      type: System.Delegate\n      description: A new delegate with an invocation list that concatenates the invocation lists of the delegates in the <code>delegates</code> array. Returns `null` if <code>delegates</code> is `null`, if <code>delegates</code> contains zero elements, or if every entry in <code>delegates</code> is `null`.\n  overload: System.Delegate.Combine*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: Not all the non-null entries in <code>delegates</code> are instances of the same delegate type.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Delegate.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Delegate.Combine(System.Delegate,System.Delegate)\n  commentId: M:System.Delegate.Combine(System.Delegate,System.Delegate)\n  id: Combine(System.Delegate,System.Delegate)\n  parent: System.Delegate\n  langs:\n  - csharp\n  name: Combine(Delegate, Delegate)\n  nameWithType: Delegate.Combine(Delegate, Delegate)\n  fullName: Delegate.Combine(Delegate, Delegate)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Concatenates the invocation lists of two delegates.\n  remarks: \"The invocation list can contain duplicate entries; that is, entries that refer to the same method on the same object.  \\n  \\n> [!NOTE]\\n>  Generic delegates that are assignment-compatible because of variance are not necessarily combinable. To be combinable, the types must match exactly. For example, suppose that a class named `Derived` is derived from a class named `Base`. A delegate of type `Action<Base>` (`Action(Of Base)` in Visual Basic) can be assigned to a variable of type `Action<Derived>`, as explained in [Covariance and Contravariance](~/docs/standard/generics/covariance-and-contravariance.md), but the two delegates cannot be combined because the types do not match exactly.  \\n  \\n <xref:System.Delegate.Combine%2A> is useful for creating event handlers that call multiple methods each time an event occurs.\"\n  syntax:\n    content: public static Delegate Combine (Delegate a, Delegate b);\n    parameters:\n    - id: a\n      type: System.Delegate\n      description: The delegate whose invocation list comes first.\n    - id: b\n      type: System.Delegate\n      description: The delegate whose invocation list comes last.\n    return:\n      type: System.Delegate\n      description: A new delegate with an invocation list that concatenates the invocation lists of <code>a</code> and <code>b</code> in that order. Returns <code>a</code> if <code>b</code> is `null`, returns <code>b</code> if <code>a</code> is a null reference, and returns a null reference if both <code>a</code> and <code>b</code> are null references.\n  overload: System.Delegate.Combine*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: Both <code>a</code> and <code>b</code> are not `null`, and <code>a</code> and <code>b</code> are not instances of the same delegate type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Delegate.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Delegate.CombineImpl(System.Delegate)\n  commentId: M:System.Delegate.CombineImpl(System.Delegate)\n  id: CombineImpl(System.Delegate)\n  parent: System.Delegate\n  langs:\n  - csharp\n  name: CombineImpl(Delegate)\n  nameWithType: Delegate.CombineImpl(Delegate)\n  fullName: Delegate.CombineImpl(Delegate)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Concatenates the invocation lists of the specified multicast (combinable) delegate and the current multicast (combinable) delegate.\n  remarks: \"This method applies only if the current delegate is multicast (combinable).  \\n  \\n The current implementation simply throws a <xref:System.MulticastNotSupportedException>.  \\n  \\n The invocation list can contain duplicate entries; that is, entries that refer to the same method on the same object.\"\n  syntax:\n    content: protected virtual Delegate CombineImpl (Delegate d);\n    parameters:\n    - id: d\n      type: System.Delegate\n      description: The multicast (combinable) delegate whose invocation list to append to the end of the invocation list of the current multicast (combinable) delegate.\n    return:\n      type: System.Delegate\n      description: A new multicast (combinable) delegate with an invocation list that concatenates the invocation list of the current multicast (combinable) delegate and the invocation list of <code>d</code>, or the current multicast (combinable) delegate if <code>d</code> is `null`.\n  overload: System.Delegate.CombineImpl*\n  exceptions:\n  - type: System.MulticastNotSupportedException\n    commentId: T:System.MulticastNotSupportedException\n    description: Always thrown.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Delegate.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Delegate.CreateDelegate(System.Type,System.Type,System.String,System.Boolean,System.Boolean)\n  commentId: M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String,System.Boolean,System.Boolean)\n  id: CreateDelegate(System.Type,System.Type,System.String,System.Boolean,System.Boolean)\n  parent: System.Delegate\n  langs:\n  - csharp\n  name: CreateDelegate(Type, Type, String, Boolean, Boolean)\n  nameWithType: Delegate.CreateDelegate(Type, Type, String, Boolean, Boolean)\n  fullName: Delegate.CreateDelegate(Type, Type, String, Boolean, Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Creates a delegate of the specified type that represents the specified static method of the specified class, with the specified case-sensitivity and the specified behavior on failure to bind.\n  remarks: \"This method creates delegates for static methods only. An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.  \\n  \\n> [!NOTE]\\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \\n>   \\n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.\"\n  syntax:\n    content: public static Delegate CreateDelegate (Type type, Type target, string method, bool ignoreCase, bool throwOnBindFailure);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The <xref href=\"System.Type\"></xref> of delegate to create.\n    - id: target\n      type: System.Type\n      description: The <xref href=\"System.Type\"></xref> representing the class that implements <code>method</code>.\n    - id: method\n      type: System.String\n      description: The name of the static method that the delegate is to represent.\n    - id: ignoreCase\n      type: System.Boolean\n      description: A Boolean indicating whether to ignore the case when comparing the name of the method.\n    - id: throwOnBindFailure\n      type: System.Boolean\n      description: '`true` to throw an exception if <code>method</code> cannot be bound; otherwise, `false`.'\n    return:\n      type: System.Delegate\n      description: A delegate of the specified type that represents the specified static method of the specified class.\n  overload: System.Delegate.CreateDelegate*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>type</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>target</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>method</code> is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>type</code> does not inherit <xref href=\\\"System.MulticastDelegate\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>type</code> is not a `RuntimeType`. See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858).  \\n  \\n -or-  \\n  \\n <code>target</code> is not a `RuntimeType`.  \\n  \\n -or-  \\n  \\n <code>target</code> is an open generic type. That is, its <xref href=\\\"System.Type.ContainsGenericParameters\\\"></xref> property is `true`.  \\n  \\n -or-  \\n  \\n <code>method</code> is not a `static` method (`Shared` method in Visual Basic).  \\n  \\n -or-  \\n  \\n <code>method</code> cannot be bound, for example because it cannot be found, and <code>throwOnBindFailure</code> is `true`.\"\n  - type: System.MissingMethodException\n    commentId: T:System.MissingMethodException\n    description: The `Invoke` method of <code>type</code> is not found.\n  - type: System.MethodAccessException\n    commentId: T:System.MethodAccessException\n    description: The caller does not have the permissions necessary to access <code>method</code>.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Delegate.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Delegate.CreateDelegate(System.Type,System.Type,System.String,System.Boolean)\n  commentId: M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String,System.Boolean)\n  id: CreateDelegate(System.Type,System.Type,System.String,System.Boolean)\n  parent: System.Delegate\n  langs:\n  - csharp\n  name: CreateDelegate(Type, Type, String, Boolean)\n  nameWithType: Delegate.CreateDelegate(Type, Type, String, Boolean)\n  fullName: Delegate.CreateDelegate(Type, Type, String, Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Creates a delegate of the specified type that represents the specified static method of the specified class, with the specified case-sensitivity.\n  remarks: \"This method creates delegates for static methods only. An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.  \\n  \\n This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `true` for `throwOnBindFailure`.  \\n  \\n> [!NOTE]\\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \\n>   \\n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.\"\n  syntax:\n    content: public static Delegate CreateDelegate (Type type, Type target, string method, bool ignoreCase);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The <xref href=\"System.Type\"></xref> of delegate to create.\n    - id: target\n      type: System.Type\n      description: The <xref href=\"System.Type\"></xref> representing the class that implements <code>method</code>.\n    - id: method\n      type: System.String\n      description: The name of the static method that the delegate is to represent.\n    - id: ignoreCase\n      type: System.Boolean\n      description: A Boolean indicating whether to ignore the case when comparing the name of the method.\n    return:\n      type: System.Delegate\n      description: A delegate of the specified type that represents the specified static method of the specified class.\n  overload: System.Delegate.CreateDelegate*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>type</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>target</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>method</code> is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>type</code> does not inherit <xref href=\\\"System.MulticastDelegate\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>type</code> is not a `RuntimeType`. See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858).  \\n  \\n -or-  \\n  \\n <code>target</code> is not a `RuntimeType`.  \\n  \\n -or-  \\n  \\n <code>target</code> is an open generic type. That is, its <xref href=\\\"System.Type.ContainsGenericParameters\\\"></xref> property is `true`.  \\n  \\n -or-  \\n  \\n <code>method</code> is not a `static` method (`Shared` method in Visual Basic).  \\n  \\n -or-  \\n  \\n <code>method</code> cannot be bound, for example because it cannot be found.\"\n  - type: System.MissingMethodException\n    commentId: T:System.MissingMethodException\n    description: The `Invoke` method of <code>type</code> is not found.\n  - type: System.MethodAccessException\n    commentId: T:System.MethodAccessException\n    description: The caller does not have the permissions necessary to access <code>method</code>.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Delegate.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Delegate.CreateDelegate(System.Type,System.Object,System.String,System.Boolean)\n  commentId: M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String,System.Boolean)\n  id: CreateDelegate(System.Type,System.Object,System.String,System.Boolean)\n  parent: System.Delegate\n  langs:\n  - csharp\n  name: CreateDelegate(Type, Object, String, Boolean)\n  nameWithType: Delegate.CreateDelegate(Type, Object, String, Boolean)\n  fullName: Delegate.CreateDelegate(Type, Object, String, Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance with the specified case-sensitivity.\n  remarks: \"This method creates delegates for instance methods only. An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.  \\n  \\n This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `true` for `throwOnBindFailure`.  \\n  \\n> [!NOTE]\\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \\n>   \\n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.\"\n  syntax:\n    content: public static Delegate CreateDelegate (Type type, object target, string method, bool ignoreCase);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The <xref href=\"System.Type\"></xref> of delegate to create.\n    - id: target\n      type: System.Object\n      description: The class instance on which <code>method</code> is invoked.\n    - id: method\n      type: System.String\n      description: The name of the instance method that the delegate is to represent.\n    - id: ignoreCase\n      type: System.Boolean\n      description: A Boolean indicating whether to ignore the case when comparing the name of the method.\n    return:\n      type: System.Delegate\n      description: A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.\n  overload: System.Delegate.CreateDelegate*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>type</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>target</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>method</code> is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>type</code> does not inherit <xref href=\\\"System.MulticastDelegate\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>type</code> is not a `RuntimeType`. See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858).  \\n  \\n -or-  \\n  \\n <code>method</code> is not an instance method.  \\n  \\n -or-  \\n  \\n <code>method</code> cannot be bound, for example because it cannot be found.\"\n  - type: System.MissingMethodException\n    commentId: T:System.MissingMethodException\n    description: The `Invoke` method of <code>type</code> is not found.\n  - type: System.MethodAccessException\n    commentId: T:System.MethodAccessException\n    description: The caller does not have the permissions necessary to access <code>method</code>.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Delegate.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Delegate.CreateDelegate(System.Type,System.Object,System.Reflection.MethodInfo,System.Boolean)\n  commentId: M:System.Delegate.CreateDelegate(System.Type,System.Object,System.Reflection.MethodInfo,System.Boolean)\n  id: CreateDelegate(System.Type,System.Object,System.Reflection.MethodInfo,System.Boolean)\n  parent: System.Delegate\n  langs:\n  - csharp\n  name: CreateDelegate(Type, Object, MethodInfo, Boolean)\n  nameWithType: Delegate.CreateDelegate(Type, Object, MethodInfo, Boolean)\n  fullName: Delegate.CreateDelegate(Type, Object, MethodInfo, Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Creates a delegate of the specified type that represents the specified static or instance method, with the specified first argument and the specified behavior on failure to bind.\n  remarks: \"This method overload and the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29> method overload, which always throws on failure to bind, provide the most flexible way to create delegates. You can use them to create delegates for either static or instance methods, with or without a first argument.  \\n  \\n> [!NOTE]\\n>  If you do not supply a first argument, use the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload for better performance.  \\n  \\n The delegate type and the method must have compatible return types. That is, the return type of `method` must be assignable to the return type of `type`.  \\n  \\n If `firstArgument` is supplied, it is passed to `method` every time the delegate is invoked; `firstArgument` is said to be bound to the delegate, and the delegate is said to be closed over its first argument. If `method` is `static` (`Shared` in Visual Basic), the argument list supplied when invoking the delegate includes all parameters except the first; if `method` is an instance method, then `firstArgument` is passed to the hidden instance parameter (represented by `this` in C#, or by `Me` in Visual Basic).  \\n  \\n If `firstArgument` is supplied, the first parameter of `method` must be a reference type, and `firstArgument` must be compatible with that type.  \\n  \\n> [!IMPORTANT]\\n>  If `method` is `static` (`Shared` in Visual Basic) and its first parameter is of type <xref:System.Object> or <xref:System.ValueType>, then `firstArgument` can be a value type. In this case `firstArgument` is automatically boxed. Automatic boxing does not occur for any other arguments, as it would in a C# or Visual Basic function call.  \\n  \\n If `firstArgument` is a null reference and `method` is an instance method, the result depends on the signatures of the delegate type `type` and of `method`:  \\n  \\n-   If the signature of `type` explicitly includes the hidden first parameter of `method`, the delegate is said to represent an open instance method. When the delegate is invoked, the first argument in the argument list is passed to the hidden instance parameter of `method`.  \\n  \\n-   If the signatures of `method` and `type` match (that is, all parameter types are compatible), then the delegate is said to be closed over a null reference. Invoking the delegate is like calling an instance method on a null instance, which is not a particularly useful thing to do.  \\n  \\n If `firstArgument` is a null reference and `method` is static, the result depends on the signatures of the delegate type `type` and of `method`:  \\n  \\n-   If the signature of `method` and `type` match (that is, all parameter types are compatible), the delegate is said to represent an open static method. This is the most common case for static methods. In this case, you can get slightly better performance by using the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload.  \\n  \\n-   If the signature of `type` begins with the second parameter of `method` and the rest of the parameter types are compatible, then the delegate is said to be closed over a null reference. When the delegate is invoked, a null reference is passed to the first parameter of `method`.  \\n  \\n> [!NOTE]\\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \\n>   \\n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.  \\n  \\n## Compatible Parameter Types and Return Type  \\n The parameter types and return type of a delegate must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.  \\n  \\n> [!NOTE]\\n>  In the .NET Framework version 1.0 and 1.1 the types must match exactly.  \\n  \\n A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.  \\n  \\n Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.  \\n  \\n For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.  \\n  \\n## Determining the Methods a Delegate Can Represent  \\n Another useful way to think of the flexibility provided by this overload of <xref:System.Delegate.CreateDelegate%2A> is that any given delegate can represent four different combinations of method signature and method kind (static versus instance). Consider a delegate type `D` with one argument of type `C`. The following describes the methods `D` can represent, ignoring the return type since it must match in all cases:  \\n  \\n-   `D` can represent any instance method that has exactly one argument of type `C`, regardless of what type the instance method belongs to. When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of the type `method` belongs to, and the resulting delegate is said to be closed over that instance. (Trivially, `D` can also be closed over a null reference if `firstArgument` is `null`.)  \\n  \\n-   `D` can represent an instance method of `C` that has no arguments. When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference. The resulting delegate represents an open instance method, and an instance of `C` must be supplied each time it is invoked.  \\n  \\n-   `D` can represent a static method that takes one argument of type `C`, and that method can belong to any type. When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference. The resulting delegate represents an open static method, and an instance of `C` must be supplied each time it is invoked.  \\n  \\n-   `D` can represent a static method that belongs to type `F` and has two arguments, of type `F` and type `C`. When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of `F`. The resulting delegate represents a static method that is closed over that instance of `F`. Note that in the case where `F` and `C` are the same type, the static method has two arguments of that type. (In this case, `D` is closed over a null reference if `firstArgument` is `null`.)\"\n  example:\n  - \"This section contains three code examples. The first example demonstrates the four kinds of delegates that can be created: closed over an instance method, open over an instance method, open over a static method, and closed over a static method.  \\n  \\n The second code example demonstrates compatible parameter types and return types.  \\n  \\n The third code example defines a single delegate type, and shows all the methods that delegate type can represent.  \\n  \\n **Example 1**  \\n  \\n The following code example demonstrates the four ways a delegate can be created using this overload of the <xref:System.Delegate.CreateDelegate%2A> method.  \\n  \\n> [!NOTE]\\n>  There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify `firstArgument` and a <xref:System.Reflection.MethodInfo>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws. This code example uses both overloads.  \\n  \\n The example declares a class `C` with a static method `M2` and an instance method `M1`, and three delegate types: `D1` takes an instance of `C` and a string, `D2` takes a string, and `D3` has no arguments.  \\n  \\n A second class named `Example` contains the code that creates the delegates.  \\n  \\n-   A delegate of type `D2`, closed over an instance of `C`, is created for the instance method `M1`. It is invoked with different strings, to show that the bound instance of `C` is always used.  \\n  \\n-   A delegate of type `D1`, representing an open instance method, is created for the instance method `M1`. An instance must be passed when the delegate is invoked.  \\n  \\n-   A delegate of type `D2`, representing an open static method, is created for the static method `M2`.  \\n  \\n-   Finally, a delegate of type `D3`, closed over a string, is created for the static method `M2`. The method is invoked to show that it uses the bound string.  \\n  \\n [!code-csharp[Delegate.CreateDelegateTOM#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM/cs/openClosedOver.cs#1)]\\n [!code-vb[Delegate.CreateDelegateTOM#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM/VB/openClosedOver.vb#1)]  \\n  \\n **Example 2**  \\n  \\n The following code example demonstrates compatibility of parameter types and return types.  \\n  \\n> [!NOTE]\\n>  This code example uses the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload. The use of other overloads that take <xref:System.Reflection.MethodInfo> is similar.  \\n  \\n The code example defines a base class named `Base` and a class named `Derived` that derives from `Base`. The derived class has a `static` (`Shared` in Visual Basic) method named `MyMethod` with one parameter of type `Base` and a return type of `Derived`. The code example also defines a delegate named `Example` that has one parameter of type `Derived` and a return type of `Base`.  \\n  \\n The code example demonstrates that the delegate named `Example` can be used to represent the method `MyMethod`. The method can be bound to the delegate because:  \\n  \\n-   The parameter type of the delegate (`Derived`) is more restrictive than the parameter type of `MyMethod` (`Base`), so that it is always safe to pass the argument of the delegate to `MyMethod`.  \\n  \\n-   The return type of `MyMethod` (`Derived`) is more restrictive than the parameter type of the delegate (`Base`), so that it is always safe to cast the return type of the method to the return type of the delegate.  \\n  \\n The code example produces no output.  \\n  \\n [!code-cpp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cpp/source.cpp#1)]\\n [!code-csharp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cs/source.cs#1)]\\n [!code-vb[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/vb/source.vb#1)]  \\n  \\n **Example 3**  \\n  \\n The following code example shows all the methods a single delegate type can represent.  \\n  \\n> [!NOTE]\\n>  There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify `firstArgument` and a <xref:System.Reflection.MethodInfo>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws. This code example uses both overloads.  \\n  \\n The code example defines two classes, `C` and `F`, and a delegate type `D` with one argument of type `C`. The classes have matching static and instance methods `M1`, `M3`, and `M4`, and class `C` also has an instance method `M2` that has no arguments.  \\n  \\n A third class named `Example` contains the code that creates the delegates.  \\n  \\n-   Delegates are created for instance method `M1` of type `C` and type `F`; each is closed over an instance of the respective type. Method `M1` of type `C` displays the `ID` properties of the bound instance and of the argument.  \\n  \\n-   A delegate is created for method `M2` of type `C`. This is an open instance delegate, in which the argument of the delegate represents the hidden first argument on the instance method. The method has no other arguments.  \\n  \\n-   Delegates are created for static method `M3` of type `C` and type `F`; these are open static delegates.  \\n  \\n-   Finally, delegates are created for static method `M4` of type `C` and type `F`; each method has the declaring type as its first argument, and an instance of the type is supplied, so the delegates are closed over their first arguments. Method `M4` of type `C` displays the `ID` properties of the bound instance and of the argument.  \\n  \\n [!code-csharp[Delegate.CreateDelegateTOM_2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM_2/cs/source.cs#1)]\\n [!code-vb[Delegate.CreateDelegateTOM_2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM_2/vb/source.vb#1)]\"\n  syntax:\n    content: public static Delegate CreateDelegate (Type type, object firstArgument, System.Reflection.MethodInfo method, bool throwOnBindFailure);\n    parameters:\n    - id: type\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> representing the type of delegate to create.\n    - id: firstArgument\n      type: System.Object\n      description: An <xref href=\"System.Object\"></xref> that is the first argument of the method the delegate represents. For instance methods, it must be compatible with the instance type.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: The <xref href=\"System.Reflection.MethodInfo\"></xref> describing the static or instance method the delegate is to represent.\n    - id: throwOnBindFailure\n      type: System.Boolean\n      description: '`true` to throw an exception if <code>method</code> cannot be bound; otherwise, `false`.'\n    return:\n      type: System.Delegate\n      description: A delegate of the specified type that represents the specified static or instance method, or `null` if <code>throwOnBindFailure</code> is `false` and the delegate cannot be bound to <code>method</code>.\n  overload: System.Delegate.CreateDelegate*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>type</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>method</code> is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>type</code> does not inherit <xref href=\\\"System.MulticastDelegate\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>type</code> is not a `RuntimeType`. See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858).  \\n  \\n -or-  \\n  \\n <code>method</code> cannot be bound, and <code>throwOnBindFailure</code> is `true`.  \\n  \\n -or-  \\n  \\n <code>method</code> is not a `RuntimeMethodInfo`. See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858).\"\n  - type: System.MissingMethodException\n    commentId: T:System.MissingMethodException\n    description: The `Invoke` method of <code>type</code> is not found.\n  - type: System.MethodAccessException\n    commentId: T:System.MethodAccessException\n    description: The caller does not have the permissions necessary to access <code>method</code>.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Delegate.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Delegate.CreateDelegate(System.Type,System.Object,System.String,System.Boolean,System.Boolean)\n  commentId: M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String,System.Boolean,System.Boolean)\n  id: CreateDelegate(System.Type,System.Object,System.String,System.Boolean,System.Boolean)\n  parent: System.Delegate\n  langs:\n  - csharp\n  name: CreateDelegate(Type, Object, String, Boolean, Boolean)\n  nameWithType: Delegate.CreateDelegate(Type, Object, String, Boolean, Boolean)\n  fullName: Delegate.CreateDelegate(Type, Object, String, Boolean, Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance, with the specified case-sensitivity and the specified behavior on failure to bind.\n  remarks: \"This method creates delegates for instance methods only. An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.  \\n  \\n> [!NOTE]\\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \\n>   \\n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.\"\n  syntax:\n    content: public static Delegate CreateDelegate (Type type, object target, string method, bool ignoreCase, bool throwOnBindFailure);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The <xref href=\"System.Type\"></xref> of delegate to create.\n    - id: target\n      type: System.Object\n      description: The class instance on which <code>method</code> is invoked.\n    - id: method\n      type: System.String\n      description: The name of the instance method that the delegate is to represent.\n    - id: ignoreCase\n      type: System.Boolean\n      description: A Boolean indicating whether to ignore the case when comparing the name of the method.\n    - id: throwOnBindFailure\n      type: System.Boolean\n      description: '`true` to throw an exception if <code>method</code> cannot be bound; otherwise, `false`.'\n    return:\n      type: System.Delegate\n      description: A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.\n  overload: System.Delegate.CreateDelegate*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>type</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>target</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>method</code> is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>type</code> does not inherit <xref href=\\\"System.MulticastDelegate\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>type</code> is not a `RuntimeType`. See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858).  \\n  \\n -or-  \\n  \\n <code>method</code> is not an instance method.  \\n  \\n -or-  \\n  \\n <code>method</code> cannot be bound, for example because it cannot be found, and <code>throwOnBindFailure</code> is `true`.\"\n  - type: System.MissingMethodException\n    commentId: T:System.MissingMethodException\n    description: The `Invoke` method of <code>type</code> is not found.\n  - type: System.MethodAccessException\n    commentId: T:System.MethodAccessException\n    description: The caller does not have the permissions necessary to access <code>method</code>.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Delegate.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Delegate.CreateDelegate(System.Type,System.Reflection.MethodInfo,System.Boolean)\n  commentId: M:System.Delegate.CreateDelegate(System.Type,System.Reflection.MethodInfo,System.Boolean)\n  id: CreateDelegate(System.Type,System.Reflection.MethodInfo,System.Boolean)\n  parent: System.Delegate\n  langs:\n  - csharp\n  name: CreateDelegate(Type, MethodInfo, Boolean)\n  nameWithType: Delegate.CreateDelegate(Type, MethodInfo, Boolean)\n  fullName: Delegate.CreateDelegate(Type, MethodInfo, Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Creates a delegate of the specified type to represent the specified static method, with the specified behavior on failure to bind.\n  remarks: \"This method overload can create open static method delegates and open instance method delegates — that is, delegates that expose the hidden first argument of instance methods. For a detailed explanation, see the more general <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload, which allows you to create all combinations of open or closed delegates for instance or static methods.  \\n  \\n> [!NOTE]\\n>  This method overload should be used when the delegate is not closed over its first argument, because it is somewhat faster in that case.  \\n  \\n> [!NOTE]\\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \\n>   \\n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.  \\n  \\n## Compatible Parameter Types and Return Type  \\n The parameter types and return type of a delegate must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.  \\n  \\n> [!NOTE]\\n>  In the .NET Framework version 1.0 and 1.1, the types must match exactly.  \\n  \\n A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.  \\n  \\n Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.  \\n  \\n For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.\"\n  example:\n  - \"This section contains two code examples. The first example demonstrates the two kinds of delegates that can be created with this method overload: open over an instance method and open over a static method.  \\n  \\n The second code example demonstrates compatible parameter types and return types.  \\n  \\n **Example 1**  \\n  \\n The following code example demonstrates the two ways a delegate can be created using this overload of the <xref:System.Delegate.CreateDelegate%2A> method.  \\n  \\n> [!NOTE]\\n>  There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify a <xref:System.Reflection.MethodInfo> but not a first argument; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws. This code example uses both overloads.  \\n  \\n The example declares a class `C` with a static method `M2` and an instance method `M1`, and two delegate types: `D1` takes an instance of `C` and a string, and `D2` takes a string.  \\n  \\n A second class named `Example` contains the code that creates the delegates.  \\n  \\n-   A delegate of type `D1`, representing an open instance method, is created for the instance method `M1`. An instance must be passed when the delegate is invoked.  \\n  \\n-   A delegate of type `D2`, representing an open static method, is created for the static method `M2`.  \\n  \\n [!code-csharp[Delegate.CreateDelegateTOM#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM/cs/openClosedOver.cs#1)]\\n [!code-vb[Delegate.CreateDelegateTOM#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM/VB/openClosedOver.vb#1)]  \\n  \\n **Example 2**  \\n  \\n The following code example demonstrates compatibility of parameter types and return types.  \\n  \\n> [!NOTE]\\n>  This code example uses the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload. The use of other overloads that take <xref:System.Reflection.MethodInfo> is similar.  \\n  \\n The code example defines a base class named `Base` and a class named `Derived` that derives from `Base`. The derived class has a `static` (`Shared` in Visual Basic) method named `MyMethod` with one parameter of type `Base` and a return type of `Derived`. The code example also defines a delegate named `Example` that has one parameter of type `Derived` and a return type of `Base`.  \\n  \\n The code example demonstrates that the delegate named `Example` can be used to represent the method `MyMethod`. The method can be bound to the delegate because:  \\n  \\n-   The parameter type of the delegate (`Derived`) is more restrictive than the parameter type of `MyMethod` (`Base`), so that it is always safe to pass the argument of the delegate to `MyMethod`.  \\n  \\n-   The return type of `MyMethod` (`Derived`) is more restrictive than the parameter type of the delegate (`Base`), so that it is always safe to cast the return type of the method to the return type of the delegate.  \\n  \\n The code example produces no output.  \\n  \\n [!code-cpp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cpp/source.cpp#1)]\\n [!code-csharp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cs/source.cs#1)]\\n [!code-vb[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/vb/source.vb#1)]\"\n  syntax:\n    content: public static Delegate CreateDelegate (Type type, System.Reflection.MethodInfo method, bool throwOnBindFailure);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The <xref href=\"System.Type\"></xref> of delegate to create.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: The <xref href=\"System.Reflection.MethodInfo\"></xref> describing the static or instance method the delegate is to represent.\n    - id: throwOnBindFailure\n      type: System.Boolean\n      description: '`true` to throw an exception if <code>method</code> cannot be bound; otherwise, `false`.'\n    return:\n      type: System.Delegate\n      description: A delegate of the specified type to represent the specified static method.\n  overload: System.Delegate.CreateDelegate*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>type</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>method</code> is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>type</code> does not inherit <xref href=\\\"System.MulticastDelegate\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>type</code> is not a `RuntimeType`. See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858).  \\n  \\n -or-  \\n  \\n <code>method</code> cannot be bound, and <code>throwOnBindFailure</code> is `true`.  \\n  \\n -or-  \\n  \\n <code>method</code> is not a `RuntimeMethodInfo`. See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858).\"\n  - type: System.MissingMethodException\n    commentId: T:System.MissingMethodException\n    description: The `Invoke` method of <code>type</code> is not found.\n  - type: System.MethodAccessException\n    commentId: T:System.MethodAccessException\n    description: The caller does not have the permissions necessary to access <code>method</code>.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Delegate.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Delegate.CreateDelegate(System.Type,System.Object,System.String)\n  commentId: M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String)\n  id: CreateDelegate(System.Type,System.Object,System.String)\n  parent: System.Delegate\n  langs:\n  - csharp\n  name: CreateDelegate(Type, Object, String)\n  nameWithType: Delegate.CreateDelegate(Type, Object, String)\n  fullName: Delegate.CreateDelegate(Type, Object, String)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance.\n  remarks: \"This method creates delegates for instance methods only. An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.  \\n  \\n This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `false` for `ignoreCase` and `true` for `throwOnBindFailure`.  \\n  \\n> [!NOTE]\\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \\n>   \\n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.\"\n  syntax:\n    content: public static Delegate CreateDelegate (Type type, object target, string method);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The <xref href=\"System.Type\"></xref> of delegate to create.\n    - id: target\n      type: System.Object\n      description: The class instance on which <code>method</code> is invoked.\n    - id: method\n      type: System.String\n      description: The name of the instance method that the delegate is to represent.\n    return:\n      type: System.Delegate\n      description: A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.\n  overload: System.Delegate.CreateDelegate*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>type</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>target</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>method</code> is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>type</code> does not inherit <xref href=\\\"System.MulticastDelegate\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>type</code> is not a `RuntimeType`. See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858).  \\n  \\n -or-  \\n  \\n <code>method</code> is not an instance method.  \\n  \\n -or-  \\n  \\n <code>method</code> cannot be bound, for example because it cannot be found.\"\n  - type: System.MissingMethodException\n    commentId: T:System.MissingMethodException\n    description: The `Invoke` method of <code>type</code> is not found.\n  - type: System.MethodAccessException\n    commentId: T:System.MethodAccessException\n    description: The caller does not have the permissions necessary to access <code>method</code>.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Delegate.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Delegate.CreateDelegate(System.Type,System.Object,System.Reflection.MethodInfo)\n  commentId: M:System.Delegate.CreateDelegate(System.Type,System.Object,System.Reflection.MethodInfo)\n  id: CreateDelegate(System.Type,System.Object,System.Reflection.MethodInfo)\n  parent: System.Delegate\n  langs:\n  - csharp\n  name: CreateDelegate(Type, Object, MethodInfo)\n  nameWithType: Delegate.CreateDelegate(Type, Object, MethodInfo)\n  fullName: Delegate.CreateDelegate(Type, Object, MethodInfo)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Creates a delegate of the specified type that represents the specified static or instance method, with the specified first argument.\n  remarks: \"Calling this method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload and specifying `true` for `throwOnBindFailure`. These two overloads provide the most flexible way to create delegates. You can use them to create delegates for either static or instance methods, and optionally to specify the first argument.  \\n  \\n> [!NOTE]\\n>  If you do not supply a first argument, use the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload for better performance.  \\n  \\n The delegate type and the method must have compatible return types. That is, the return type of `method` must be assignable to the return type of `type`.  \\n  \\n If `firstArgument` is supplied, it is passed to `method` every time the delegate is invoked; `firstArgument` is said to be bound to the delegate, and the delegate is said to be closed over its first argument. If `method` is `static` (`Shared` in Visual Basic), the argument list supplied when invoking the delegate includes all parameters except the first; if `method` is an instance method, then `firstArgument` is passed to the hidden instance parameter (represented by `this` in C#, or by `Me` in Visual Basic).  \\n  \\n If `firstArgument` is supplied, the first parameter of `method` must be a reference type, and `firstArgument` must be compatible with that type.  \\n  \\n> [!IMPORTANT]\\n>  If `method` is `static` (`Shared` in Visual Basic) and its first parameter is of type <xref:System.Object> or <xref:System.ValueType>, then `firstArgument` can be a value type. In this case `firstArgument` is automatically boxed. Automatic boxing does not occur for any other arguments, as it would in a C# or Visual Basic function call.  \\n  \\n If `firstArgument` is a null reference and `method` is an instance method, the result depends on the signatures of the delegate type `type` and of `method`:  \\n  \\n-   If the signature of `type` explicitly includes the hidden first parameter of `method`, the delegate is said to represent an open instance method. When the delegate is invoked, the first argument in the argument list is passed to the hidden instance parameter of `method`.  \\n  \\n-   If the signatures of `method` and `type` match (that is, all parameter types are compatible), then the delegate is said to be closed over a null reference. Invoking the delegate is like calling an instance method on a null instance, which is not a particularly useful thing to do.  \\n  \\n If `firstArgument` is a null reference and `method` is static, the result depends on the signatures of the delegate type `type` and of `method`:  \\n  \\n-   If the signature of `method` and `type` match (that is, all parameter types are compatible), the delegate is said to represent an open static method. This is the most common case for static methods. In this case, you can get slightly better performance by using the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload.  \\n  \\n-   If the signature of `type` begins with the second parameter of `method` and the rest of the parameter types are compatible, then the delegate is said to be closed over a null reference. When the delegate is invoked, a null reference is passed to the first parameter of `method`.  \\n  \\n> [!NOTE]\\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \\n>   \\n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.  \\n  \\n## Compatible Parameter Types and Return Type  \\n The parameter types and return type of a delegate must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.  \\n  \\n> [!NOTE]\\n>  In the .NET Framework version 1.0 and 1.1, the types must match exactly.  \\n  \\n A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.  \\n  \\n Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.  \\n  \\n For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.  \\n  \\n## Determining the Methods a Delegate Can Represent  \\n Another useful way to think of the flexibility provided by this overload of <xref:System.Delegate.CreateDelegate%2A> is that any given delegate can represent four different combinations of method signature and method kind (static versus instance). Consider a delegate type `D` with one argument of type `C`. The following describes the methods `D` can represent, ignoring the return type since it must match in all cases:  \\n  \\n-   `D` can represent any instance method that has exactly one argument of type `C`, regardless of what type the instance method belongs to. When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of the type `method` belongs to, and the resulting delegate is said to be closed over that instance. (Trivially, `D` can also be closed over a null reference if `firstArgument` is a null reference.)  \\n  \\n-   `D` can represent an instance method of `C` that has no arguments. When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference. The resulting delegate represents an open instance method, and an instance of `C` must be supplied each time it is invoked.  \\n  \\n-   `D` can represent a static method that takes one argument of type `C`, and that method can belong to any type. When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference. The resulting delegate represents an open static method, and an instance of `C` must be supplied each time it is invoked.  \\n  \\n-   `D` can represent a static method that belongs to type `F` and has two arguments, of type `F` and type `C`. When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of `F`. The resulting delegate represents a static method that is closed over that instance of `F`. Note that in the case where `F` and `C` are the same type, the static method has two arguments of that type. (In this case, `D` is closed over a null reference if `firstArgument` is a null reference.)\"\n  example:\n  - \"This section contains three code examples. The first example demonstrates the four kinds of delegates that can be created: closed over an instance method, open over an instance method, open over a static method, and closed over a static method.  \\n  \\n The second code example demonstrates compatible parameter types and return types.  \\n  \\n The third code example defines a single delegate type, and shows all the methods that delegate type can represent.  \\n  \\n **Example 1**  \\n  \\n The following code example demonstrates the four ways a delegate can be created using this overload of the <xref:System.Delegate.CreateDelegate%2A> method.  \\n  \\n> [!NOTE]\\n>  There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify `firstArgument` and a <xref:System.Reflection.MethodInfo>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws. This code example uses both overloads.  \\n  \\n The example declares a class `C` with a static method `M2` and an instance method `M1`, and three delegate types: `D1` takes an instance of `C` and a string, `D2` takes a string, and `D3` has no arguments.  \\n  \\n A second class named `Example` contains the code that creates the delegates.  \\n  \\n-   A delegate of type `D2`, closed over an instance of `C`, is created for the instance method `M1`. It is invoked with different strings, to show that the bound instance of `C` is always used.  \\n  \\n-   A delegate of type `D1`, representing an open instance method, is created for the instance method `M1`. An instance must be passed when the delegate is invoked.  \\n  \\n-   A delegate of type `D2`, representing an open static method, is created for the static method `M2`.  \\n  \\n-   Finally, a delegate of type `D3`, closed over a string, is created for the static method `M2`. The method is invoked to show that it uses the bound string.  \\n  \\n [!code-csharp[Delegate.CreateDelegateTOM#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM/cs/openClosedOver.cs#1)]\\n [!code-vb[Delegate.CreateDelegateTOM#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM/VB/openClosedOver.vb#1)]  \\n  \\n **Example 2**  \\n  \\n The following code example demonstrates compatibility of parameter types and return types.  \\n  \\n> [!NOTE]\\n>  This code example uses the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload. The use of other overloads that take <xref:System.Reflection.MethodInfo> is similar.  \\n  \\n The code example defines a base class named `Base` and a class named `Derived` that derives from `Base`. The derived class has a `static` (`Shared` in Visual Basic) method named `MyMethod` with one parameter of type `Base` and a return type of `Derived`. The code example also defines a delegate named `Example` that has one parameter of type `Derived` and a return type of `Base`.  \\n  \\n The code example demonstrates that the delegate named `Example` can be used to represent the method `MyMethod`. The method can be bound to the delegate because:  \\n  \\n-   The parameter type of the delegate (`Derived`) is more restrictive than the parameter type of `MyMethod` (`Base`), so that it is always safe to pass the argument of the delegate to `MyMethod`.  \\n  \\n-   The return type of `MyMethod` (`Derived`) is more restrictive than the parameter type of the delegate (`Base`), so that it is always safe to cast the return type of the method to the return type of the delegate.  \\n  \\n The code example produces no output.  \\n  \\n [!code-cpp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cpp/source.cpp#1)]\\n [!code-csharp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cs/source.cs#1)]\\n [!code-vb[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/vb/source.vb#1)]  \\n  \\n **Example 3**  \\n  \\n The following code example shows all the methods a single delegate type can represent, using the <xref:System.Delegate.CreateDelegate%2A> method to create the delegates.  \\n  \\n> [!NOTE]\\n>  There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify `firstArgument` and a <xref:System.Reflection.MethodInfo>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws. This code example uses both overloads.  \\n  \\n The code example defines two classes, `C` and `F`, and a delegate type `D` with one argument of type `C`. The classes have matching static and instance methods `M1`, `M3`, and `M4`, and class `C` also has an instance method `M2` that has no arguments.  \\n  \\n A third class named `Example` contains the code that creates the delegates.  \\n  \\n-   Delegates are created for instance method `M1` of type `C` and type `F`; each is closed over an instance of the respective type. Method `M1` of type `C` displays the `ID` properties of the bound instance and of the argument.  \\n  \\n-   A delegate is created for method `M2` of type `C`. This is an open instance delegate, in which the argument of the delegate represents the hidden first argument on the instance method. The method has no other arguments. It is called as if it were a static method.  \\n  \\n-   Delegates are created for static method `M3` of type `C` and type `F`; these are open static delegates.  \\n  \\n-   Finally, delegates are created for static method `M4` of type `C` and type `F`; each method has the declaring type as its first argument, and an instance of the type is supplied, so the delegates are closed over their first arguments. Method `M4` of type `C` displays the `ID` properties of the bound instance and of the argument.  \\n  \\n [!code-csharp[Delegate.CreateDelegateTOM_2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM_2/cs/source.cs#1)]\\n [!code-vb[Delegate.CreateDelegateTOM_2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM_2/vb/source.vb#1)]\"\n  syntax:\n    content: public static Delegate CreateDelegate (Type type, object firstArgument, System.Reflection.MethodInfo method);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The <xref href=\"System.Type\"></xref> of delegate to create.\n    - id: firstArgument\n      type: System.Object\n      description: The object to which the delegate is bound, or `null` to treat <code>method</code> as `static` (`Shared` in Visual Basic).\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: The <xref href=\"System.Reflection.MethodInfo\"></xref> describing the static or instance method the delegate is to represent.\n    return:\n      type: System.Delegate\n      description: A delegate of the specified type that represents the specified static or instance method.\n  overload: System.Delegate.CreateDelegate*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>type</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>method</code> is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>type</code> does not inherit <xref href=\\\"System.MulticastDelegate\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>type</code> is not a `RuntimeType`. See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858).  \\n  \\n -or-  \\n  \\n <code>method</code> cannot be bound.  \\n  \\n -or-  \\n  \\n <code>method</code> is not a `RuntimeMethodInfo`. See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858).\"\n  - type: System.MissingMethodException\n    commentId: T:System.MissingMethodException\n    description: The `Invoke` method of <code>type</code> is not found.\n  - type: System.MethodAccessException\n    commentId: T:System.MethodAccessException\n    description: The caller does not have the permissions necessary to access <code>method</code>.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Delegate.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Delegate.CreateDelegate(System.Type,System.Type,System.String)\n  commentId: M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String)\n  id: CreateDelegate(System.Type,System.Type,System.String)\n  parent: System.Delegate\n  langs:\n  - csharp\n  name: CreateDelegate(Type, Type, String)\n  nameWithType: Delegate.CreateDelegate(Type, Type, String)\n  fullName: Delegate.CreateDelegate(Type, Type, String)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Creates a delegate of the specified type that represents the specified static method of the specified class.\n  remarks: \"This method creates delegates for static methods only. An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.  \\n  \\n This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `false` for `ignoreCase` and `true` for `throwOnBindFailure`.  \\n  \\n> [!NOTE]\\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \\n>   \\n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.\"\n  syntax:\n    content: public static Delegate CreateDelegate (Type type, Type target, string method);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The <xref href=\"System.Type\"></xref> of delegate to create.\n    - id: target\n      type: System.Type\n      description: The <xref href=\"System.Type\"></xref> representing the class that implements <code>method</code>.\n    - id: method\n      type: System.String\n      description: The name of the static method that the delegate is to represent.\n    return:\n      type: System.Delegate\n      description: A delegate of the specified type that represents the specified static method of the specified class.\n  overload: System.Delegate.CreateDelegate*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>type</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>target</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>method</code> is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>type</code> does not inherit <xref href=\\\"System.MulticastDelegate\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>type</code> is not a `RuntimeType`. See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858).  \\n  \\n -or-  \\n  \\n <code>target</code> is not a `RuntimeType`.  \\n  \\n -or-  \\n  \\n <code>target</code> is an open generic type. That is, its <xref href=\\\"System.Type.ContainsGenericParameters\\\"></xref> property is `true`.  \\n  \\n -or-  \\n  \\n <code>method</code> is not a `static` method (`Shared` method in Visual Basic).  \\n  \\n -or-  \\n  \\n <code>method</code> cannot be bound, for example because it cannot be found, and <code>throwOnBindFailure</code> is `true`.\"\n  - type: System.MissingMethodException\n    commentId: T:System.MissingMethodException\n    description: The `Invoke` method of <code>type</code> is not found.\n  - type: System.MethodAccessException\n    commentId: T:System.MethodAccessException\n    description: The caller does not have the permissions necessary to access <code>method</code>.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Delegate.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Delegate.CreateDelegate(System.Type,System.Reflection.MethodInfo)\n  commentId: M:System.Delegate.CreateDelegate(System.Type,System.Reflection.MethodInfo)\n  id: CreateDelegate(System.Type,System.Reflection.MethodInfo)\n  parent: System.Delegate\n  langs:\n  - csharp\n  name: CreateDelegate(Type, MethodInfo)\n  nameWithType: Delegate.CreateDelegate(Type, MethodInfo)\n  fullName: Delegate.CreateDelegate(Type, MethodInfo)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Creates a delegate of the specified type to represent the specified static method.\n  remarks: \"In the .NET Framework version 1.0 and 1.1, this method overload creates delegates for static methods only. In the .NET Framework version 2.0, this method overload also can create open instance method delegates; that is, delegates that explicitly supply the hidden first argument of instance methods. For a detailed explanation, see the more general <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29> method overload, which allows you to create all combinations of open or closed delegates for instance or static methods, and optionally to specify a first argument.  \\n  \\n> [!NOTE]\\n>  This method overload should be used when the delegate is not closed over its first argument, because it is somewhat faster in that case.  \\n  \\n This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload and specifying `true` for `throwOnBindFailure`.  \\n  \\n> [!NOTE]\\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \\n>   \\n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.  \\n  \\n## Compatible Parameter Types and Return Type  \\n In the .NET Framework version 2.0, the parameter types and return type of a delegate created using this method overload must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly. This represents a relaxation of the binding behavior in the .NET Framework version 1.0 and 1.1, where the types must match exactly.  \\n  \\n A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.  \\n  \\n Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.  \\n  \\n For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.\"\n  example:\n  - \"This section contains two code examples. The first example demonstrates the two kinds of delegates that can be created with this method overload: open over an instance method and open over a static method.  \\n  \\n The second code example demonstrates compatible parameter types and return types.  \\n  \\n **Example 1**  \\n  \\n The following code example demonstrates the two ways a delegate can be created using this overload of the <xref:System.Delegate.CreateDelegate%2A> method.  \\n  \\n> [!NOTE]\\n>  There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify a <xref:System.Reflection.MethodInfo> but not a first argument; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws. This code example uses both overloads.  \\n  \\n The example declares a class `C` with a static method `M2` and an instance method `M1`, and two delegate types: `D1` takes an instance of `C` and a string, and `D2` takes a string.  \\n  \\n A second class named `Example` contains the code that creates the delegates.  \\n  \\n-   A delegate of type `D1`, representing an open instance method, is created for the instance method `M1`. An instance must be passed when the delegate is invoked.  \\n  \\n-   A delegate of type `D2`, representing an open static method, is created for the static method `M2`.  \\n  \\n [!code-csharp[Delegate.CreateDelegateTOM#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM/cs/openClosedOver.cs#1)]\\n [!code-vb[Delegate.CreateDelegateTOM#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM/VB/openClosedOver.vb#1)]  \\n  \\n **Example 2**  \\n  \\n The following code example demonstrates compatibility of parameter types and return types.  \\n  \\n The code example defines a base class named `Base` and a class named `Derived` that derives from `Base`. The derived class has a `static` (`Shared` in Visual Basic) method named `MyMethod` with one parameter of type `Base` and a return type of `Derived`. The code example also defines a delegate named `Example` that has one parameter of type `Derived` and a return type of `Base`.  \\n  \\n The code example demonstrates that the delegate named `Example` can be used to represent the method `MyMethod`. The method can be bound to the delegate because:  \\n  \\n-   The parameter type of the delegate (`Derived`) is more restrictive than the parameter type of `MyMethod` (`Base`), so that it is always safe to pass the argument of the delegate to `MyMethod`.  \\n  \\n-   The return type of `MyMethod` (`Derived`) is more restrictive than the parameter type of the delegate (`Base`), so that it is always safe to cast the return type of the method to the return type of the delegate.  \\n  \\n The code example produces no output.  \\n  \\n [!code-cpp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cpp/source.cpp#1)]\\n [!code-csharp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cs/source.cs#1)]\\n [!code-vb[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/vb/source.vb#1)]\"\n  syntax:\n    content: public static Delegate CreateDelegate (Type type, System.Reflection.MethodInfo method);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The <xref href=\"System.Type\"></xref> of delegate to create.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: The <xref href=\"System.Reflection.MethodInfo\"></xref> describing the static or instance method the delegate is to represent. Only static methods are supported in the .NET Framework version 1.0 and 1.1.\n    return:\n      type: System.Delegate\n      description: A delegate of the specified type to represent the specified static method.\n  overload: System.Delegate.CreateDelegate*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>type</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>method</code> is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>type</code> does not inherit <xref href=\\\"System.MulticastDelegate\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>type</code> is not a `RuntimeType`. See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858).  \\n  \\n -or-  \\n  \\n <code>method</code> is not a static method, and the .NET Framework version is 1.0 or 1.1.  \\n  \\n -or-  \\n  \\n <code>method</code> cannot be bound.  \\n  \\n -or-  \\n  \\n <code>method</code> is not a `RuntimeMethodInfo`. See [Runtime Types in Reflection](http://msdn.microsoft.com/en-us/c1439fb5-cf76-475d-a9d2-fe64ba858858).\"\n  - type: System.MissingMethodException\n    commentId: T:System.MissingMethodException\n    description: The `Invoke` method of <code>type</code> is not found.\n  - type: System.MethodAccessException\n    commentId: T:System.MethodAccessException\n    description: The caller does not have the permissions necessary to access <code>method</code>.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Delegate.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Delegate.DynamicInvoke(System.Object[])\n  commentId: M:System.Delegate.DynamicInvoke(System.Object[])\n  id: DynamicInvoke(System.Object[])\n  parent: System.Delegate\n  langs:\n  - csharp\n  name: DynamicInvoke(Object[])\n  nameWithType: Delegate.DynamicInvoke(Object[])\n  fullName: Delegate.DynamicInvoke(Object[])\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Dynamically invokes (late-bound) the method represented by the current delegate.\n  remarks: This method calls the <xref:System.Delegate.DynamicInvokeImpl%2A> method.\n  syntax:\n    content: public object DynamicInvoke (object[] args);\n    parameters:\n    - id: args\n      type: System.Object[]\n      description: \"An array of objects that are the arguments to pass to the method represented by the current delegate.  \\n  \\n -or-  \\n  \\n `null`, if the method represented by the current delegate does not require arguments.\"\n    return:\n      type: System.Object\n      description: The object returned by the method represented by the delegate.\n  overload: System.Delegate.DynamicInvoke*\n  exceptions:\n  - type: System.MemberAccessException\n    commentId: T:System.MemberAccessException\n    description: \"The caller does not have access to the method represented by the delegate (for example, if the method is private).  \\n  \\n -or-  \\n  \\n The number, order, or type of parameters listed in <code>args</code> is invalid.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The method represented by the delegate is invoked on an object or a class that does not support it.\n  - type: System.Reflection.TargetInvocationException\n    commentId: T:System.Reflection.TargetInvocationException\n    description: \"The method represented by the delegate is an instance method and the target object is `null`.  \\n  \\n -or-  \\n  \\n One of the encapsulated methods throws an exception.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Delegate.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Delegate.DynamicInvokeImpl(System.Object[])\n  commentId: M:System.Delegate.DynamicInvokeImpl(System.Object[])\n  id: DynamicInvokeImpl(System.Object[])\n  parent: System.Delegate\n  langs:\n  - csharp\n  name: DynamicInvokeImpl(Object[])\n  nameWithType: Delegate.DynamicInvokeImpl(Object[])\n  fullName: Delegate.DynamicInvokeImpl(Object[])\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Dynamically invokes (late-bound) the method represented by the current delegate.\n  remarks: This method implements the <xref:System.Delegate.DynamicInvoke%2A> method.\n  syntax:\n    content: protected virtual object DynamicInvokeImpl (object[] args);\n    parameters:\n    - id: args\n      type: System.Object[]\n      description: \"An array of objects that are the arguments to pass to the method represented by the current delegate.  \\n  \\n -or-  \\n  \\n `null`, if the method represented by the current delegate does not require arguments.\"\n    return:\n      type: System.Object\n      description: The object returned by the method represented by the delegate.\n  overload: System.Delegate.DynamicInvokeImpl*\n  exceptions:\n  - type: System.MemberAccessException\n    commentId: T:System.MemberAccessException\n    description: \"The caller does not have access to the method represented by the delegate (for example, if the method is private).  \\n  \\n -or-  \\n  \\n The number, order, or type of parameters listed in <code>args</code> is invalid.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The method represented by the delegate is invoked on an object or a class that does not support it.\n  - type: System.Reflection.TargetInvocationException\n    commentId: T:System.Reflection.TargetInvocationException\n    description: \"The method represented by the delegate is an instance method and the target object is `null`.  \\n  \\n -or-  \\n  \\n One of the encapsulated methods throws an exception.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Delegate.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Delegate.Equals(System.Object)\n  commentId: M:System.Delegate.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Delegate\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: Delegate.Equals(Object)\n  fullName: Delegate.Equals(Object)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Determines whether the specified object and the current delegate are of the same type and share the same targets, methods, and invocation list.\n  remarks: \"If the two delegates are not of the same type, they are not considered equal.  \\n  \\n> [!IMPORTANT]\\n>  In the .NET Framework version 1.0 and 1.1, two delegates were considered equal if their targets, methods, and invocation list were equal, even if the delegates were of different types.  \\n  \\n The methods and targets are compared for equality as follows:  \\n  \\n-   If the two methods being compared are both static and are the same method on the same class, the methods are considered equal and the targets are also considered equal.  \\n  \\n-   If the two methods being compared are instance methods and are the same method on the same object, the methods are considered equal and the targets are also considered equal.  \\n  \\n-   Otherwise, the methods are not considered to be equal and the targets are also not considered to be equal.  \\n  \\n Two invocation lists are considered identical only if they have the same order and the corresponding elements from the two lists represent the same method and target.\"\n  syntax:\n    content: public override bool Equals (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object to compare with the current delegate.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>obj</code> and the current delegate have the same targets, methods, and invocation list; otherwise, `false`.'\n  overload: System.Delegate.Equals*\n  exceptions:\n  - type: System.MemberAccessException\n    commentId: T:System.MemberAccessException\n    description: The caller does not have access to the method represented by the delegate (for example, if the method is private).\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Delegate.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Delegate.GetHashCode\n  commentId: M:System.Delegate.GetHashCode\n  id: GetHashCode\n  parent: System.Delegate\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: Delegate.GetHashCode()\n  fullName: Delegate.GetHashCode()\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns a hash code for the delegate.\n  remarks: The return value of this method must not be persisted for two reasons. First, the hash function of a class might be altered to generate a better distribution, rendering any values from the old hash function useless. Second, the default implementation of this class does not guarantee that the same value will be returned by different instances.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: A hash code for the delegate.\n  overload: System.Delegate.GetHashCode*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Delegate.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Delegate.GetInvocationList\n  commentId: M:System.Delegate.GetInvocationList\n  id: GetInvocationList\n  parent: System.Delegate\n  langs:\n  - csharp\n  name: GetInvocationList()\n  nameWithType: Delegate.GetInvocationList()\n  fullName: Delegate.GetInvocationList()\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the invocation list of the delegate.\n  remarks: \"Each delegate in the array represents exactly one method.  \\n  \\n The order of the delegates in the array is the same order in which the current delegate invokes the methods that those delegates represent.\"\n  example:\n  - \"The following example assigns three methods to a delegate. It then calls the  <xref:System.Delegate.GetInvocationList%2A> method to get a total count of the methods assigned to the delegate, to execute the delegates in reverse order, and to execute the methods whose name do not include the substring \\\"File\\\".  \\n  \\n [!code-csharp[System.Delegate.GetInvocationList#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Delegate.GetInvocationList/cs/GetInvocationList1.cs#1)]\\n [!code-vb[System.Delegate.GetInvocationList#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Delegate.GetInvocationList/vb/GetInvocationList1.vb#1)]\"\n  syntax:\n    content: public virtual Delegate[] GetInvocationList ();\n    parameters: []\n    return:\n      type: System.Delegate[]\n      description: An array of delegates representing the invocation list of the current delegate.\n  overload: System.Delegate.GetInvocationList*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Delegate.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Delegate.GetMethodImpl\n  commentId: M:System.Delegate.GetMethodImpl\n  id: GetMethodImpl\n  parent: System.Delegate\n  langs:\n  - csharp\n  name: GetMethodImpl()\n  nameWithType: Delegate.GetMethodImpl()\n  fullName: Delegate.GetMethodImpl()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Gets the static method represented by the current delegate.\n  remarks: This method applies only if the current delegate represents a static method.\n  syntax:\n    content: protected virtual System.Reflection.MethodInfo GetMethodImpl ();\n    parameters: []\n    return:\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> describing the static method represented by the current delegate.\n  overload: System.Delegate.GetMethodImpl*\n  exceptions:\n  - type: System.MemberAccessException\n    commentId: T:System.MemberAccessException\n    description: The caller does not have access to the method represented by the delegate (for example, if the method is private).\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Delegate.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Delegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  commentId: M:System.Delegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Delegate\n  langs:\n  - csharp\n  name: GetObjectData(SerializationInfo, StreamingContext)\n  nameWithType: Delegate.GetObjectData(SerializationInfo, StreamingContext)\n  fullName: Delegate.GetObjectData(SerializationInfo, StreamingContext)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Not supported.\n  syntax:\n    content: public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: Not supported.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: Not supported.\n  overload: System.Delegate.GetObjectData*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not supported.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Delegate.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Delegate.Method\n  commentId: P:System.Delegate.Method\n  id: Method\n  parent: System.Delegate\n  langs:\n  - csharp\n  name: Method\n  nameWithType: Delegate.Method\n  fullName: Delegate.Method\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Gets the method represented by the delegate.\n  syntax:\n    content: public System.Reflection.MethodInfo Method { get; }\n    return:\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> describing the method represented by the delegate.\n  overload: System.Delegate.Method*\n  exceptions:\n  - type: System.MemberAccessException\n    commentId: T:System.MemberAccessException\n    description: The caller does not have access to the method represented by the delegate (for example, if the method is private).\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Delegate.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Delegate.op_Equality(System.Delegate,System.Delegate)\n  commentId: M:System.Delegate.op_Equality(System.Delegate,System.Delegate)\n  id: op_Equality(System.Delegate,System.Delegate)\n  parent: System.Delegate\n  langs:\n  - csharp\n  name: op_Equality(Delegate, Delegate)\n  nameWithType: Delegate.op_Equality(Delegate, Delegate)\n  fullName: Delegate.op_Equality(Delegate, Delegate)\n  type: Operator\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Determines whether the specified delegates are equal.\n  remarks: \"Two delegates of the same type with the same targets, methods, and invocation lists are considered equal.  \\n  \\n If the two delegates are not of the same type, they are not considered equal.  \\n  \\n> [!IMPORTANT]\\n>  In the .NET Framework version 1.0 and 1.1, two delegates were considered equal if their targets, methods, and invocation list were equal, even if the delegates were of different types.  \\n  \\n The methods and targets are compared for equality as follows:  \\n  \\n-   If the two methods being compared are both static and are the same method on the same class, the methods are considered equal and the targets are also considered equal.  \\n  \\n-   If the two methods being compared are instance methods and are the same method on the same object, the methods are considered equal and the targets are also considered equal.  \\n  \\n-   Otherwise, the methods are not considered to be equal and the targets are also not considered to be equal.  \\n  \\n Two invocation lists are considered identical if they have the same order and the corresponding elements from the two lists represent the same method and target.  \\n  \\n The equivalent method for this operator is <xref:System.Delegate.Equals%28System.Object%29?displayProperty=fullName>\"\n  syntax:\n    content: public static bool op_Equality (Delegate d1, Delegate d2);\n    parameters:\n    - id: d1\n      type: System.Delegate\n      description: The first delegate to compare.\n    - id: d2\n      type: System.Delegate\n      description: The second delegate to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>d1</code> is equal to <code>d2</code>; otherwise, `false`.'\n  overload: System.Delegate.op_Equality*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Delegate.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Delegate.op_Inequality(System.Delegate,System.Delegate)\n  commentId: M:System.Delegate.op_Inequality(System.Delegate,System.Delegate)\n  id: op_Inequality(System.Delegate,System.Delegate)\n  parent: System.Delegate\n  langs:\n  - csharp\n  name: op_Inequality(Delegate, Delegate)\n  nameWithType: Delegate.op_Inequality(Delegate, Delegate)\n  fullName: Delegate.op_Inequality(Delegate, Delegate)\n  type: Operator\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Determines whether the specified delegates are not equal.\n  remarks: \"Two delegates are considered not equal if they are of different types, or have different methods, different targets, or different invocation lists.  \\n  \\n If the two delegates are not of the same type, they are not considered equal.  \\n  \\n> [!IMPORTANT]\\n>  In the .NET Framework version 1.0 and 1.1, two delegates are considered equal if their targets, methods, and invocation list were equal, even if the delegates were of different types.  \\n  \\n The methods and targets are compared for equality as follows:  \\n  \\n-   If the two methods being compared are both static and are the same method on the same class, the methods are considered equal and the targets are also considered equal.  \\n  \\n-   If the two methods being compared are instance methods and are the same method on the same object, the methods are considered equal and the targets are also considered equal.  \\n  \\n-   Otherwise, the methods are not considered to be equal and the targets are also not considered to be equal.  \\n  \\n Two invocation lists are not equal if they have different sizes, if they are ordered differently, or if at least one element from one list represents a method or target that is different from that represented by its corresponding element in the other list.  \\n  \\n The equivalent method for this operator is <xref:System.Delegate.Equals%28System.Object%29?displayProperty=fullName>\"\n  syntax:\n    content: public static bool op_Inequality (Delegate d1, Delegate d2);\n    parameters:\n    - id: d1\n      type: System.Delegate\n      description: The first delegate to compare.\n    - id: d2\n      type: System.Delegate\n      description: The second delegate to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>d1</code> is not equal to <code>d2</code>; otherwise, `false`.'\n  overload: System.Delegate.op_Inequality*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Delegate.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Delegate.Remove(System.Delegate,System.Delegate)\n  commentId: M:System.Delegate.Remove(System.Delegate,System.Delegate)\n  id: Remove(System.Delegate,System.Delegate)\n  parent: System.Delegate\n  langs:\n  - csharp\n  name: Remove(Delegate, Delegate)\n  nameWithType: Delegate.Remove(Delegate, Delegate)\n  fullName: Delegate.Remove(Delegate, Delegate)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Removes the last occurrence of the invocation list of a delegate from the invocation list of another delegate.\n  remarks: If the invocation list of `value` matches a contiguous set of elements in the invocation list of `source`, then the invocation list of `value` is said to occur within the invocation list of `source`. If the invocation list of `value` occurs more than once in the invocation list of `source`, the last occurrence is removed.\n  syntax:\n    content: public static Delegate Remove (Delegate source, Delegate value);\n    parameters:\n    - id: source\n      type: System.Delegate\n      description: The delegate from which to remove the invocation list of <code>value</code>.\n    - id: value\n      type: System.Delegate\n      description: The delegate that supplies the invocation list to remove from the invocation list of <code>source</code>.\n    return:\n      type: System.Delegate\n      description: A new delegate with an invocation list formed by taking the invocation list of <code>source</code> and removing the last occurrence of the invocation list of <code>value</code>, if the invocation list of <code>value</code> is found within the invocation list of <code>source</code>. Returns <code>source</code> if <code>value</code> is `null` or if the invocation list of <code>value</code> is not found within the invocation list of <code>source</code>. Returns a null reference if the invocation list of <code>value</code> is equal to the invocation list of <code>source</code> or if <code>source</code> is a null reference.\n  overload: System.Delegate.Remove*\n  exceptions:\n  - type: System.MemberAccessException\n    commentId: T:System.MemberAccessException\n    description: The caller does not have access to the method represented by the delegate (for example, if the method is private).\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The delegate types do not match.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Delegate.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Delegate.RemoveAll(System.Delegate,System.Delegate)\n  commentId: M:System.Delegate.RemoveAll(System.Delegate,System.Delegate)\n  id: RemoveAll(System.Delegate,System.Delegate)\n  parent: System.Delegate\n  langs:\n  - csharp\n  name: RemoveAll(Delegate, Delegate)\n  nameWithType: Delegate.RemoveAll(Delegate, Delegate)\n  fullName: Delegate.RemoveAll(Delegate, Delegate)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Removes all occurrences of the invocation list of a delegate from the invocation list of another delegate.\n  remarks: If the invocation list of `value` matches a contiguous set of elements in the invocation list of `source`, then the invocation list of `value` is said to occur within the invocation list of `source`. If the invocation list of `value` occurs more than once in the invocation list of `source`, all occurrences are removed.\n  syntax:\n    content: public static Delegate RemoveAll (Delegate source, Delegate value);\n    parameters:\n    - id: source\n      type: System.Delegate\n      description: The delegate from which to remove the invocation list of <code>value</code>.\n    - id: value\n      type: System.Delegate\n      description: The delegate that supplies the invocation list to remove from the invocation list of <code>source</code>.\n    return:\n      type: System.Delegate\n      description: A new delegate with an invocation list formed by taking the invocation list of <code>source</code> and removing all occurrences of the invocation list of <code>value</code>, if the invocation list of <code>value</code> is found within the invocation list of <code>source</code>. Returns <code>source</code> if <code>value</code> is `null` or if the invocation list of <code>value</code> is not found within the invocation list of <code>source</code>. Returns a null reference if the invocation list of <code>value</code> is equal to the invocation list of <code>source</code>, if <code>source</code> contains only a series of invocation lists that are equal to the invocation list of <code>value</code>, or if <code>source</code> is a null reference.\n  overload: System.Delegate.RemoveAll*\n  exceptions:\n  - type: System.MemberAccessException\n    commentId: T:System.MemberAccessException\n    description: The caller does not have access to the method represented by the delegate (for example, if the method is private).\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The delegate types do not match.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Delegate.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Delegate.RemoveImpl(System.Delegate)\n  commentId: M:System.Delegate.RemoveImpl(System.Delegate)\n  id: RemoveImpl(System.Delegate)\n  parent: System.Delegate\n  langs:\n  - csharp\n  name: RemoveImpl(Delegate)\n  nameWithType: Delegate.RemoveImpl(Delegate)\n  fullName: Delegate.RemoveImpl(Delegate)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Removes the invocation list of a delegate from the invocation list of another delegate.\n  remarks: If the invocation list of `value` matches a contiguous set of elements in the current delegate's invocation list, then the invocation list of `value` is said to occur within the current delegate's invocation list. If the invocation list of `value` occurs more than once in the current delegate's invocation list, the last occurrence is removed.\n  syntax:\n    content: protected virtual Delegate RemoveImpl (Delegate d);\n    parameters:\n    - id: d\n      type: System.Delegate\n      description: The delegate that supplies the invocation list to remove from the invocation list of the current delegate.\n    return:\n      type: System.Delegate\n      description: A new delegate with an invocation list formed by taking the invocation list of the current delegate and removing the invocation list of <code>value</code>, if the invocation list of <code>value</code> is found within the current delegate's invocation list. Returns the current delegate if <code>value</code> is `null` or if the invocation list of <code>value</code> is not found within the current delegate's invocation list. Returns `null` if the invocation list of <code>value</code> is equal to the current delegate's invocation list.\n  overload: System.Delegate.RemoveImpl*\n  exceptions:\n  - type: System.MemberAccessException\n    commentId: T:System.MemberAccessException\n    description: The caller does not have access to the method represented by the delegate (for example, if the method is private).\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Delegate.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Delegate.Target\n  commentId: P:System.Delegate.Target\n  id: Target\n  parent: System.Delegate\n  langs:\n  - csharp\n  name: Target\n  nameWithType: Delegate.Target\n  fullName: Delegate.Target\n  type: Property\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Gets the class instance on which the current delegate invokes the instance method.\n  remarks: \"An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.  \\n  \\n If the delegate invokes one or more instance methods, this property returns the target of the last instance method in the invocation list.\"\n  syntax:\n    content: public object Target { get; }\n    return:\n      type: System.Object\n      description: The object on which the current delegate invokes the instance method, if the delegate represents an instance method; `null` if the delegate represents a static method.\n  overload: System.Delegate.Target*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Delegate.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.MulticastNotSupportedException\n  parent: System\n  isExternal: false\n  name: MulticastNotSupportedException\n  nameWithType: MulticastNotSupportedException\n  fullName: System.MulticastNotSupportedException\n- uid: System.MissingMethodException\n  parent: System\n  isExternal: false\n  name: MissingMethodException\n  nameWithType: MissingMethodException\n  fullName: System.MissingMethodException\n- uid: System.MethodAccessException\n  parent: System\n  isExternal: false\n  name: MethodAccessException\n  nameWithType: MethodAccessException\n  fullName: System.MethodAccessException\n- uid: System.MemberAccessException\n  parent: System\n  isExternal: false\n  name: MemberAccessException\n  nameWithType: MemberAccessException\n  fullName: System.MemberAccessException\n- uid: System.Reflection.TargetInvocationException\n  parent: System.Reflection\n  isExternal: false\n  name: TargetInvocationException\n  nameWithType: TargetInvocationException\n  fullName: System.Reflection.TargetInvocationException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  nameWithType: NotSupportedException\n  fullName: System.NotSupportedException\n- uid: System.Delegate.#ctor(System.Object,System.String)\n  parent: System.Delegate\n  isExternal: false\n  name: Delegate(Object, String)\n  nameWithType: Delegate.Delegate(Object, String)\n  fullName: Delegate.Delegate(Object, String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Delegate.#ctor(System.Type,System.String)\n  parent: System.Delegate\n  isExternal: false\n  name: Delegate(Type, String)\n  nameWithType: Delegate.Delegate(Type, String)\n  fullName: Delegate.Delegate(Type, String)\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Delegate.Clone\n  parent: System.Delegate\n  isExternal: false\n  name: Clone()\n  nameWithType: Delegate.Clone()\n  fullName: Delegate.Clone()\n- uid: System.Delegate.Combine(System.Delegate[])\n  parent: System.Delegate\n  isExternal: false\n  name: Combine(Delegate[])\n  nameWithType: Delegate.Combine(Delegate[])\n  fullName: Delegate.Combine(Delegate[])\n- uid: System.Delegate\n  parent: System\n  isExternal: false\n  name: Delegate\n  nameWithType: Delegate\n  fullName: System.Delegate\n- uid: System.Delegate[]\n  parent: System\n  isExternal: false\n  name: Delegate[]\n  nameWithType: Delegate[]\n  fullName: System.Delegate[]\n  spec.csharp:\n  - uid: System.Delegate\n    name: Delegate\n    nameWithType: Delegate\n    fullName: System.Delegate\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Delegate.Combine(System.Delegate,System.Delegate)\n  parent: System.Delegate\n  isExternal: false\n  name: Combine(Delegate, Delegate)\n  nameWithType: Delegate.Combine(Delegate, Delegate)\n  fullName: Delegate.Combine(Delegate, Delegate)\n- uid: System.Delegate.CombineImpl(System.Delegate)\n  parent: System.Delegate\n  isExternal: false\n  name: CombineImpl(Delegate)\n  nameWithType: Delegate.CombineImpl(Delegate)\n  fullName: Delegate.CombineImpl(Delegate)\n- uid: System.Delegate.CreateDelegate(System.Type,System.Type,System.String,System.Boolean,System.Boolean)\n  parent: System.Delegate\n  isExternal: false\n  name: CreateDelegate(Type, Type, String, Boolean, Boolean)\n  nameWithType: Delegate.CreateDelegate(Type, Type, String, Boolean, Boolean)\n  fullName: Delegate.CreateDelegate(Type, Type, String, Boolean, Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Delegate.CreateDelegate(System.Type,System.Type,System.String,System.Boolean)\n  parent: System.Delegate\n  isExternal: false\n  name: CreateDelegate(Type, Type, String, Boolean)\n  nameWithType: Delegate.CreateDelegate(Type, Type, String, Boolean)\n  fullName: Delegate.CreateDelegate(Type, Type, String, Boolean)\n- uid: System.Delegate.CreateDelegate(System.Type,System.Object,System.String,System.Boolean)\n  parent: System.Delegate\n  isExternal: false\n  name: CreateDelegate(Type, Object, String, Boolean)\n  nameWithType: Delegate.CreateDelegate(Type, Object, String, Boolean)\n  fullName: Delegate.CreateDelegate(Type, Object, String, Boolean)\n- uid: System.Delegate.CreateDelegate(System.Type,System.Object,System.Reflection.MethodInfo,System.Boolean)\n  parent: System.Delegate\n  isExternal: false\n  name: CreateDelegate(Type, Object, MethodInfo, Boolean)\n  nameWithType: Delegate.CreateDelegate(Type, Object, MethodInfo, Boolean)\n  fullName: Delegate.CreateDelegate(Type, Object, MethodInfo, Boolean)\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Delegate.CreateDelegate(System.Type,System.Object,System.String,System.Boolean,System.Boolean)\n  parent: System.Delegate\n  isExternal: false\n  name: CreateDelegate(Type, Object, String, Boolean, Boolean)\n  nameWithType: Delegate.CreateDelegate(Type, Object, String, Boolean, Boolean)\n  fullName: Delegate.CreateDelegate(Type, Object, String, Boolean, Boolean)\n- uid: System.Delegate.CreateDelegate(System.Type,System.Reflection.MethodInfo,System.Boolean)\n  parent: System.Delegate\n  isExternal: false\n  name: CreateDelegate(Type, MethodInfo, Boolean)\n  nameWithType: Delegate.CreateDelegate(Type, MethodInfo, Boolean)\n  fullName: Delegate.CreateDelegate(Type, MethodInfo, Boolean)\n- uid: System.Delegate.CreateDelegate(System.Type,System.Object,System.String)\n  parent: System.Delegate\n  isExternal: false\n  name: CreateDelegate(Type, Object, String)\n  nameWithType: Delegate.CreateDelegate(Type, Object, String)\n  fullName: Delegate.CreateDelegate(Type, Object, String)\n- uid: System.Delegate.CreateDelegate(System.Type,System.Object,System.Reflection.MethodInfo)\n  parent: System.Delegate\n  isExternal: false\n  name: CreateDelegate(Type, Object, MethodInfo)\n  nameWithType: Delegate.CreateDelegate(Type, Object, MethodInfo)\n  fullName: Delegate.CreateDelegate(Type, Object, MethodInfo)\n- uid: System.Delegate.CreateDelegate(System.Type,System.Type,System.String)\n  parent: System.Delegate\n  isExternal: false\n  name: CreateDelegate(Type, Type, String)\n  nameWithType: Delegate.CreateDelegate(Type, Type, String)\n  fullName: Delegate.CreateDelegate(Type, Type, String)\n- uid: System.Delegate.CreateDelegate(System.Type,System.Reflection.MethodInfo)\n  parent: System.Delegate\n  isExternal: false\n  name: CreateDelegate(Type, MethodInfo)\n  nameWithType: Delegate.CreateDelegate(Type, MethodInfo)\n  fullName: Delegate.CreateDelegate(Type, MethodInfo)\n- uid: System.Delegate.DynamicInvoke(System.Object[])\n  parent: System.Delegate\n  isExternal: false\n  name: DynamicInvoke(Object[])\n  nameWithType: Delegate.DynamicInvoke(Object[])\n  fullName: Delegate.DynamicInvoke(Object[])\n- uid: System.Object[]\n  parent: System\n  isExternal: false\n  name: Object[]\n  nameWithType: Object[]\n  fullName: System.Object[]\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Delegate.DynamicInvokeImpl(System.Object[])\n  parent: System.Delegate\n  isExternal: false\n  name: DynamicInvokeImpl(Object[])\n  nameWithType: Delegate.DynamicInvokeImpl(Object[])\n  fullName: Delegate.DynamicInvokeImpl(Object[])\n- uid: System.Delegate.Equals(System.Object)\n  parent: System.Delegate\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Delegate.Equals(Object)\n  fullName: Delegate.Equals(Object)\n- uid: System.Delegate.GetHashCode\n  parent: System.Delegate\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Delegate.GetHashCode()\n  fullName: Delegate.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Delegate.GetInvocationList\n  parent: System.Delegate\n  isExternal: false\n  name: GetInvocationList()\n  nameWithType: Delegate.GetInvocationList()\n  fullName: Delegate.GetInvocationList()\n- uid: System.Delegate.GetMethodImpl\n  parent: System.Delegate\n  isExternal: false\n  name: GetMethodImpl()\n  nameWithType: Delegate.GetMethodImpl()\n  fullName: Delegate.GetMethodImpl()\n- uid: System.Delegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Delegate\n  isExternal: false\n  name: GetObjectData(SerializationInfo, StreamingContext)\n  nameWithType: Delegate.GetObjectData(SerializationInfo, StreamingContext)\n  fullName: Delegate.GetObjectData(SerializationInfo, StreamingContext)\n- uid: System.Runtime.Serialization.SerializationInfo\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: SerializationInfo\n  nameWithType: SerializationInfo\n  fullName: System.Runtime.Serialization.SerializationInfo\n- uid: System.Runtime.Serialization.StreamingContext\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: StreamingContext\n  nameWithType: StreamingContext\n  fullName: System.Runtime.Serialization.StreamingContext\n- uid: System.Delegate.Method\n  parent: System.Delegate\n  isExternal: false\n  name: Method\n  nameWithType: Delegate.Method\n  fullName: Delegate.Method\n- uid: System.Delegate.op_Equality(System.Delegate,System.Delegate)\n  parent: System.Delegate\n  isExternal: false\n  name: op_Equality(Delegate, Delegate)\n  nameWithType: Delegate.op_Equality(Delegate, Delegate)\n  fullName: Delegate.op_Equality(Delegate, Delegate)\n- uid: System.Delegate.op_Inequality(System.Delegate,System.Delegate)\n  parent: System.Delegate\n  isExternal: false\n  name: op_Inequality(Delegate, Delegate)\n  nameWithType: Delegate.op_Inequality(Delegate, Delegate)\n  fullName: Delegate.op_Inequality(Delegate, Delegate)\n- uid: System.Delegate.Remove(System.Delegate,System.Delegate)\n  parent: System.Delegate\n  isExternal: false\n  name: Remove(Delegate, Delegate)\n  nameWithType: Delegate.Remove(Delegate, Delegate)\n  fullName: Delegate.Remove(Delegate, Delegate)\n- uid: System.Delegate.RemoveAll(System.Delegate,System.Delegate)\n  parent: System.Delegate\n  isExternal: false\n  name: RemoveAll(Delegate, Delegate)\n  nameWithType: Delegate.RemoveAll(Delegate, Delegate)\n  fullName: Delegate.RemoveAll(Delegate, Delegate)\n- uid: System.Delegate.RemoveImpl(System.Delegate)\n  parent: System.Delegate\n  isExternal: false\n  name: RemoveImpl(Delegate)\n  nameWithType: Delegate.RemoveImpl(Delegate)\n  fullName: Delegate.RemoveImpl(Delegate)\n- uid: System.Delegate.Target\n  parent: System.Delegate\n  isExternal: false\n  name: Target\n  nameWithType: Delegate.Target\n  fullName: Delegate.Target\n- uid: System.Delegate.#ctor*\n  parent: System.Delegate\n  isExternal: false\n  name: Delegate\n  nameWithType: Delegate.Delegate\n  fullName: Delegate.Delegate\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Delegate.xml\n- uid: System.Delegate.Clone*\n  parent: System.Delegate\n  isExternal: false\n  name: Clone\n  nameWithType: Delegate.Clone\n  fullName: Delegate.Clone\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Delegate.xml\n- uid: System.Delegate.Combine*\n  parent: System.Delegate\n  isExternal: false\n  name: Combine\n  nameWithType: Delegate.Combine\n  fullName: Delegate.Combine\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Delegate.xml\n- uid: System.Delegate.CombineImpl*\n  parent: System.Delegate\n  isExternal: false\n  name: CombineImpl\n  nameWithType: Delegate.CombineImpl\n  fullName: Delegate.CombineImpl\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Delegate.xml\n- uid: System.Delegate.CreateDelegate*\n  parent: System.Delegate\n  isExternal: false\n  name: CreateDelegate\n  nameWithType: Delegate.CreateDelegate\n  fullName: Delegate.CreateDelegate\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Delegate.xml\n- uid: System.Delegate.DynamicInvoke*\n  parent: System.Delegate\n  isExternal: false\n  name: DynamicInvoke\n  nameWithType: Delegate.DynamicInvoke\n  fullName: Delegate.DynamicInvoke\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Delegate.xml\n- uid: System.Delegate.DynamicInvokeImpl*\n  parent: System.Delegate\n  isExternal: false\n  name: DynamicInvokeImpl\n  nameWithType: Delegate.DynamicInvokeImpl\n  fullName: Delegate.DynamicInvokeImpl\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Delegate.xml\n- uid: System.Delegate.Equals*\n  parent: System.Delegate\n  isExternal: false\n  name: Equals\n  nameWithType: Delegate.Equals\n  fullName: Delegate.Equals\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Delegate.xml\n- uid: System.Delegate.GetHashCode*\n  parent: System.Delegate\n  isExternal: false\n  name: GetHashCode\n  nameWithType: Delegate.GetHashCode\n  fullName: Delegate.GetHashCode\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Delegate.xml\n- uid: System.Delegate.GetInvocationList*\n  parent: System.Delegate\n  isExternal: false\n  name: GetInvocationList\n  nameWithType: Delegate.GetInvocationList\n  fullName: Delegate.GetInvocationList\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Delegate.xml\n- uid: System.Delegate.GetMethodImpl*\n  parent: System.Delegate\n  isExternal: false\n  name: GetMethodImpl\n  nameWithType: Delegate.GetMethodImpl\n  fullName: Delegate.GetMethodImpl\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Delegate.xml\n- uid: System.Delegate.GetObjectData*\n  parent: System.Delegate\n  isExternal: false\n  name: GetObjectData\n  nameWithType: Delegate.GetObjectData\n  fullName: Delegate.GetObjectData\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Delegate.xml\n- uid: System.Delegate.Method*\n  parent: System.Delegate\n  isExternal: false\n  name: Method\n  nameWithType: Delegate.Method\n  fullName: Delegate.Method\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Delegate.xml\n- uid: System.Delegate.op_Equality*\n  parent: System.Delegate\n  isExternal: false\n  name: op_Equality\n  nameWithType: Delegate.op_Equality\n  fullName: Delegate.op_Equality\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Delegate.xml\n- uid: System.Delegate.op_Inequality*\n  parent: System.Delegate\n  isExternal: false\n  name: op_Inequality\n  nameWithType: Delegate.op_Inequality\n  fullName: Delegate.op_Inequality\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Delegate.xml\n- uid: System.Delegate.Remove*\n  parent: System.Delegate\n  isExternal: false\n  name: Remove\n  nameWithType: Delegate.Remove\n  fullName: Delegate.Remove\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Delegate.xml\n- uid: System.Delegate.RemoveAll*\n  parent: System.Delegate\n  isExternal: false\n  name: RemoveAll\n  nameWithType: Delegate.RemoveAll\n  fullName: Delegate.RemoveAll\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Delegate.xml\n- uid: System.Delegate.RemoveImpl*\n  parent: System.Delegate\n  isExternal: false\n  name: RemoveImpl\n  nameWithType: Delegate.RemoveImpl\n  fullName: Delegate.RemoveImpl\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Delegate.xml\n- uid: System.Delegate.Target*\n  parent: System.Delegate\n  isExternal: false\n  name: Target\n  nameWithType: Delegate.Target\n  fullName: Delegate.Target\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Delegate.xml\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n  parent: System.Reflection.RuntimeReflectionExtensions\n  isExternal: false\n  name: GetMethodInfo(Delegate)\n  nameWithType: RuntimeReflectionExtensions.GetMethodInfo(Delegate)\n  fullName: RuntimeReflectionExtensions.GetMethodInfo(Delegate)\n- uid: System.ICloneable\n  parent: System\n  isExternal: false\n  name: ICloneable\n  nameWithType: ICloneable\n  fullName: System.ICloneable\n- uid: System.Runtime.Serialization.ISerializable\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: ISerializable\n  nameWithType: ISerializable\n  fullName: System.Runtime.Serialization.ISerializable\n"}