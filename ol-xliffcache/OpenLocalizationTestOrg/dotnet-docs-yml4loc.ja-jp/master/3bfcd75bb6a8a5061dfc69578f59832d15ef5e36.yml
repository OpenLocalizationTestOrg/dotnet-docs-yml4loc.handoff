### YamlMime:ManagedReference
items:
- uid: System.Threading.Interlocked
  commentId: T:System.Threading.Interlocked
  id: Interlocked
  children:
  - System.Threading.Interlocked.Add(System.Int32@,System.Int32)
  - System.Threading.Interlocked.Add(System.Int64@,System.Int64)
  - System.Threading.Interlocked.CompareExchange(System.Double@,System.Double,System.Double)
  - System.Threading.Interlocked.CompareExchange(System.Int32@,System.Int32,System.Int32)
  - System.Threading.Interlocked.CompareExchange(System.Int64@,System.Int64,System.Int64)
  - System.Threading.Interlocked.CompareExchange(System.IntPtr@,System.IntPtr,System.IntPtr)
  - System.Threading.Interlocked.CompareExchange(System.Object@,System.Object,System.Object)
  - System.Threading.Interlocked.CompareExchange(System.Single@,System.Single,System.Single)
  - System.Threading.Interlocked.CompareExchange``1(``0@,``0,``0)
  - System.Threading.Interlocked.Decrement(System.Int32@)
  - System.Threading.Interlocked.Decrement(System.Int64@)
  - System.Threading.Interlocked.Exchange(System.Single@,System.Single)
  - System.Threading.Interlocked.Exchange(System.Object@,System.Object)
  - System.Threading.Interlocked.Exchange(System.IntPtr@,System.IntPtr)
  - System.Threading.Interlocked.Exchange(System.Double@,System.Double)
  - System.Threading.Interlocked.Exchange(System.Int32@,System.Int32)
  - System.Threading.Interlocked.Exchange(System.Int64@,System.Int64)
  - System.Threading.Interlocked.Exchange``1(``0@,``0)
  - System.Threading.Interlocked.Increment(System.Int32@)
  - System.Threading.Interlocked.Increment(System.Int64@)
  - System.Threading.Interlocked.MemoryBarrier
  - System.Threading.Interlocked.MemoryBarrierProcessWide
  - System.Threading.Interlocked.Read(System.Int64@)
  langs:
  - csharp
  name: Interlocked
  nameWithType: Interlocked
  fullName: System.Threading.Interlocked
  type: Class
  assemblies:
  - System.Threading
  - mscorlib
  - netstandard
  namespace: System.Threading
  summary: Provides atomic operations for variables that are shared by multiple threads.
  remarks: "The methods of this class help protect against errors that can occur when the scheduler switches contexts while a thread is updating a variable that can be accessed by other threads, or when two threads are executing concurrently on separate processors. The members of this class do not throw exceptions.  \n  \n The <xref:System.Threading.Interlocked.Increment%2A> and <xref:System.Threading.Interlocked.Decrement%2A> methods increment or decrement a variable and store the resulting value in a single operation. On most computers, incrementing a variable is not an atomic operation, requiring the following steps:  \n  \n1.  Load a value from an instance variable into a register.  \n  \n2.  Increment or decrement the value.  \n  \n3.  Store the value in the instance variable.  \n  \n If you do not use <xref:System.Threading.Interlocked.Increment%2A> and <xref:System.Threading.Interlocked.Decrement%2A>, a thread can be preempted after executing the first two steps. Another thread can then execute all three steps. When the first thread resumes execution, it overwrites the value in the instance variable, and the effect of the increment or decrement performed by the second thread is lost.  \n  \n The <xref:System.Threading.Interlocked.Exchange%2A> method atomically exchanges the values of the specified variables. The <xref:System.Threading.Interlocked.CompareExchange%2A> method combines two operations: comparing two values and storing a third value in one of the variables, based on the outcome of the comparison. The compare and exchange operations are performed as an atomic operation."
  example:
  - "The following code example shows a thread-safe resource locking mechanism.  \n  \n [!code-cpp[System.Threading.Interlocked.Exchange Int32 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Interlocked.Exchange Int32 Example/CPP/class1.cpp#1)]\n [!code-csharp[System.Threading.Interlocked.Exchange Int32 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Interlocked.Exchange Int32 Example/CS/class1.cs#1)]\n [!code-vb[System.Threading.Interlocked.Exchange Int32 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Interlocked.Exchange Int32 Example/VB/class1.vb#1)]"
  syntax:
    content: public static class Interlocked
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Interlocked.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Interlocked.Add(System.Int32@,System.Int32)
  commentId: M:System.Threading.Interlocked.Add(System.Int32@,System.Int32)
  id: Add(System.Int32@,System.Int32)
  parent: System.Threading.Interlocked
  langs:
  - csharp
  name: Add(Int32, Int32)
  nameWithType: Interlocked.Add(Int32, Int32)
  fullName: Interlocked.Add(Int32, Int32)
  type: Method
  assemblies:
  - System.Threading
  - mscorlib
  - netstandard
  namespace: System.Threading
  summary: Adds two 32-bit integers and replaces the first integer with the sum, as an atomic operation.
  remarks: 'This method handles an overflow condition by wrapping: if the value at `location1` is <xref:System.Int32?displayProperty=fullName> and `value` is 1, the result is <xref:System.Int32?displayProperty=fullName>; if `value` is 2, the result is (<xref:System.Int32?displayProperty=fullName> + 1); and so on. No exception is thrown.'
  syntax:
    content: public static int Add (ref int location1, int value);
    parameters:
    - id: location1
      type: System.Int32
      description: A variable containing the first value to be added. The sum of the two values is stored in <code>location1</code>.
    - id: value
      type: System.Int32
      description: The value to be added to the integer at <code>location1</code>.
    return:
      type: System.Int32
      description: The new value stored at <code>location1</code>.
  overload: System.Threading.Interlocked.Add*
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: The address of <code>location1</code> is a null pointer.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Interlocked.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Interlocked.Add(System.Int64@,System.Int64)
  commentId: M:System.Threading.Interlocked.Add(System.Int64@,System.Int64)
  id: Add(System.Int64@,System.Int64)
  parent: System.Threading.Interlocked
  langs:
  - csharp
  name: Add(Int64, Int64)
  nameWithType: Interlocked.Add(Int64, Int64)
  fullName: Interlocked.Add(Int64, Int64)
  type: Method
  assemblies:
  - System.Threading
  - mscorlib
  - netstandard
  namespace: System.Threading
  summary: Adds two 64-bit integers and replaces the first integer with the sum, as an atomic operation.
  remarks: "This method handles an overflow condition by wrapping: if the value at `location1` is <xref:System.Int64?displayProperty=fullName> and `value` is 1, the result is <xref:System.Int64?displayProperty=fullName>; if `value` is 2, the result is (<xref:System.Int64?displayProperty=fullName> + 1); and so on. No exception is thrown.  \n  \n The <xref:System.Threading.Interlocked.Read%2A> method and the 64-bit overloads of the <xref:System.Threading.Interlocked.Increment%2A>, <xref:System.Threading.Interlocked.Decrement%2A>, and <xref:System.Threading.Interlocked.Add%2A> methods are truly atomic only on systems where a <xref:System.IntPtr?displayProperty=fullName> is 64 bits long. On other systems, these methods are atomic with respect to each other, but not with respect to other means of accessing the data. Thus, to be thread safe on 32-bit systems, any access to a 64-bit value must be made through the members of the <xref:System.Threading.Interlocked> class."
  syntax:
    content: public static long Add (ref long location1, long value);
    parameters:
    - id: location1
      type: System.Int64
      description: A variable containing the first value to be added. The sum of the two values is stored in <code>location1</code>.
    - id: value
      type: System.Int64
      description: The value to be added to the integer at <code>location1</code>.
    return:
      type: System.Int64
      description: The new value stored at <code>location1</code>.
  overload: System.Threading.Interlocked.Add*
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: The address of <code>location1</code> is a null pointer.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Interlocked.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Interlocked.CompareExchange(System.Double@,System.Double,System.Double)
  commentId: M:System.Threading.Interlocked.CompareExchange(System.Double@,System.Double,System.Double)
  id: CompareExchange(System.Double@,System.Double,System.Double)
  parent: System.Threading.Interlocked
  langs:
  - csharp
  name: CompareExchange(Double, Double, Double)
  nameWithType: Interlocked.CompareExchange(Double, Double, Double)
  fullName: Interlocked.CompareExchange(Double, Double, Double)
  type: Method
  assemblies:
  - System.Threading
  - mscorlib
  - netstandard
  namespace: System.Threading
  summary: Compares two double-precision floating point numbers for equality and, if they are equal, replaces the first value.
  remarks: If `comparand` and the value in `location1` are equal, then `value` is stored in `location1`. Otherwise, no operation is performed. The compare and exchange operations are performed as an atomic operation. The return value of <xref:System.Threading.Interlocked.CompareExchange%2A> is the original value in `location1`, whether or not the exchange takes place.
  example:
  - "The following code example demonstrates a thread-safe method that accumulates a running total of <xref:System.Double> values. Two threads add a series of <xref:System.Double> values using the thread-safe method and ordinary addition, and when the threads complete the totals are compared. On a dual-processor computer, there is a significant difference in the totals.  \n  \n In the thread-safe method, the initial value of the running total is saved, and then the <xref:System.Threading.Interlocked.CompareExchange%2A> method is used to exchange the newly computed total with the old total. If the return value is not equal to the saved value of the running total, then another thread has updated the total in the meantime. In that case, the attempt to update the running total must be repeated.  \n  \n [!code-csharp[System.Threading.Interlocked CompareExchange Double#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Interlocked CompareExchange Double/cs/source.cs#1)]\n [!code-vb[System.Threading.Interlocked CompareExchange Double#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Interlocked CompareExchange Double/vb/source.vb#1)]"
  syntax:
    content: public static double CompareExchange (ref double location1, double value, double comparand);
    parameters:
    - id: location1
      type: System.Double
      description: The destination, whose value is compared with <code>comparand</code> and possibly replaced.
    - id: value
      type: System.Double
      description: The value that replaces the destination value if the comparison results in equality.
    - id: comparand
      type: System.Double
      description: The value that is compared to the value at <code>location1</code>.
    return:
      type: System.Double
      description: The original value in <code>location1</code>.
  overload: System.Threading.Interlocked.CompareExchange*
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: The address of <code>location1</code> is a null pointer.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Interlocked.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Interlocked.CompareExchange(System.Int32@,System.Int32,System.Int32)
  commentId: M:System.Threading.Interlocked.CompareExchange(System.Int32@,System.Int32,System.Int32)
  id: CompareExchange(System.Int32@,System.Int32,System.Int32)
  parent: System.Threading.Interlocked
  langs:
  - csharp
  name: CompareExchange(Int32, Int32, Int32)
  nameWithType: Interlocked.CompareExchange(Int32, Int32, Int32)
  fullName: Interlocked.CompareExchange(Int32, Int32, Int32)
  type: Method
  assemblies:
  - System.Threading
  - mscorlib
  - netstandard
  namespace: System.Threading
  summary: Compares two 32-bit signed integers for equality and, if they are equal, replaces the first value.
  remarks: If `comparand` and the value in `location1` are equal, then `value` is stored in `location1`. Otherwise, no operation is performed. The compare and exchange operations are performed as an atomic operation. The return value of <xref:System.Threading.Interlocked.CompareExchange%2A> is the original value in `location1`, whether or not the exchange takes place.
  example:
  - "The following code example demonstrates a thread-safe method that accumulates a running total. The initial value of the running total is saved, and then the <xref:System.Threading.Interlocked.CompareExchange%2A> method is used to exchange the newly computed total with the old total. If the return value is not equal to the saved value of the running total, then another thread has updated the total in the meantime. In that case, the attempt to update the running total must be repeated.  \n  \n> [!NOTE]\n>  The <xref:System.Threading.Interlocked.Add%2A> method, introduced in version 2.0 of the .NET Framework, provides a more convenient way to accumulate thread-safe running totals for integers.  \n  \n [!code-cpp[System.Threading.Interlocked CompareExchange0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Interlocked CompareExchange0/CPP/source.cpp#1)]\n [!code-csharp[System.Threading.Interlocked CompareExchange0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Interlocked CompareExchange0/CS/source.cs#1)]\n [!code-vb[System.Threading.Interlocked CompareExchange0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Interlocked CompareExchange0/VB/source.vb#1)]"
  syntax:
    content: public static int CompareExchange (ref int location1, int value, int comparand);
    parameters:
    - id: location1
      type: System.Int32
      description: The destination, whose value is compared with <code>comparand</code> and possibly replaced.
    - id: value
      type: System.Int32
      description: The value that replaces the destination value if the comparison results in equality.
    - id: comparand
      type: System.Int32
      description: The value that is compared to the value at <code>location1</code>.
    return:
      type: System.Int32
      description: The original value in <code>location1</code>.
  overload: System.Threading.Interlocked.CompareExchange*
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: The address of <code>location1</code> is a null pointer.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Interlocked.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Interlocked.CompareExchange(System.Int64@,System.Int64,System.Int64)
  commentId: M:System.Threading.Interlocked.CompareExchange(System.Int64@,System.Int64,System.Int64)
  id: CompareExchange(System.Int64@,System.Int64,System.Int64)
  parent: System.Threading.Interlocked
  langs:
  - csharp
  name: CompareExchange(Int64, Int64, Int64)
  nameWithType: Interlocked.CompareExchange(Int64, Int64, Int64)
  fullName: Interlocked.CompareExchange(Int64, Int64, Int64)
  type: Method
  assemblies:
  - System.Threading
  - mscorlib
  - netstandard
  namespace: System.Threading
  summary: Compares two 64-bit signed integers for equality and, if they are equal, replaces the first value.
  remarks: If `comparand` and the value in `location1` are equal, then `value` is stored in `location1`. Otherwise, no operation is performed. The compare and exchange operations are performed as an atomic operation. The return value of <xref:System.Threading.Interlocked.CompareExchange%2A> is the original value in `location1`, whether or not the exchange takes place.
  syntax:
    content: public static long CompareExchange (ref long location1, long value, long comparand);
    parameters:
    - id: location1
      type: System.Int64
      description: The destination, whose value is compared with <code>comparand</code> and possibly replaced.
    - id: value
      type: System.Int64
      description: The value that replaces the destination value if the comparison results in equality.
    - id: comparand
      type: System.Int64
      description: The value that is compared to the value at <code>location1</code>.
    return:
      type: System.Int64
      description: The original value in <code>location1</code>.
  overload: System.Threading.Interlocked.CompareExchange*
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: The address of <code>location1</code> is a null pointer.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Interlocked.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Interlocked.CompareExchange(System.IntPtr@,System.IntPtr,System.IntPtr)
  commentId: M:System.Threading.Interlocked.CompareExchange(System.IntPtr@,System.IntPtr,System.IntPtr)
  id: CompareExchange(System.IntPtr@,System.IntPtr,System.IntPtr)
  parent: System.Threading.Interlocked
  langs:
  - csharp
  name: CompareExchange(IntPtr, IntPtr, IntPtr)
  nameWithType: Interlocked.CompareExchange(IntPtr, IntPtr, IntPtr)
  fullName: Interlocked.CompareExchange(IntPtr, IntPtr, IntPtr)
  type: Method
  assemblies:
  - System.Threading
  - mscorlib
  - netstandard
  namespace: System.Threading
  summary: Compares two platform-specific handles or pointers for equality and, if they are equal, replaces the first one.
  remarks: "If `comparand` and the value in `location1` are equal, then `value` is stored in `location1`. Otherwise, no operation is performed. The compare and exchange operations are performed as an atomic operation. The return value of this method is the original value in `location1`, whether or not the exchange takes place.  \n  \n> [!NOTE]\n>  <xref:System.IntPtr> is a platform-specific type."
  syntax:
    content: public static IntPtr CompareExchange (ref IntPtr location1, IntPtr value, IntPtr comparand);
    parameters:
    - id: location1
      type: System.IntPtr
      description: The destination <xref href="System.IntPtr"></xref>, whose value is compared with the value of <code>comparand</code> and possibly replaced by <code>value</code>.
    - id: value
      type: System.IntPtr
      description: The <xref href="System.IntPtr"></xref> that replaces the destination value if the comparison results in equality.
    - id: comparand
      type: System.IntPtr
      description: The <xref href="System.IntPtr"></xref> that is compared to the value at <code>location1</code>.
    return:
      type: System.IntPtr
      description: The original value in <code>location1</code>.
  overload: System.Threading.Interlocked.CompareExchange*
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: The address of <code>location1</code> is a null pointer.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Interlocked.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Interlocked.CompareExchange(System.Object@,System.Object,System.Object)
  commentId: M:System.Threading.Interlocked.CompareExchange(System.Object@,System.Object,System.Object)
  id: CompareExchange(System.Object@,System.Object,System.Object)
  parent: System.Threading.Interlocked
  langs:
  - csharp
  name: CompareExchange(Object, Object, Object)
  nameWithType: Interlocked.CompareExchange(Object, Object, Object)
  fullName: Interlocked.CompareExchange(Object, Object, Object)
  type: Method
  assemblies:
  - System.Threading
  - mscorlib
  - netstandard
  namespace: System.Threading
  summary: Compares two objects for reference equality and, if they are equal, replaces the first object.
  remarks: "If `comparand` and the object in `location1` are equal, then `value` is stored in `location1`. Otherwise, no operation is performed. The compare and exchange operations are performed as an atomic operation. The return value of <xref:System.Threading.Interlocked.CompareExchange%2A> is the original value in `location1`, whether or not the exchange takes place.  \n  \n Beginning with .NET Framework version 2.0, the <xref:System.Threading.Interlocked.CompareExchange%60%601%28%60%600%40%2C%60%600%2C%60%600%29> method overload provides a type-safe alternative for reference types.  \n  \n> [!NOTE]\n>  The objects are compared for reference equality, rather than <xref:System.Object.Equals%2A?displayProperty=fullName>. As a result, two boxed instances of the same value type (for example, the integer 3) always appear to be unequal, and no operation is performed. Do not use this overload with value types."
  syntax:
    content: public static object CompareExchange (ref object location1, object value, object comparand);
    parameters:
    - id: location1
      type: System.Object
      description: The destination object that is compared with <code>comparand</code> and possibly replaced.
    - id: value
      type: System.Object
      description: The object that replaces the destination object if the comparison results in equality.
    - id: comparand
      type: System.Object
      description: The object that is compared to the object at <code>location1</code>.
    return:
      type: System.Object
      description: The original value in <code>location1</code>.
  overload: System.Threading.Interlocked.CompareExchange*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The address of <code>location1</code> is a null pointer.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Interlocked.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Interlocked.CompareExchange(System.Single@,System.Single,System.Single)
  commentId: M:System.Threading.Interlocked.CompareExchange(System.Single@,System.Single,System.Single)
  id: CompareExchange(System.Single@,System.Single,System.Single)
  parent: System.Threading.Interlocked
  langs:
  - csharp
  name: CompareExchange(Single, Single, Single)
  nameWithType: Interlocked.CompareExchange(Single, Single, Single)
  fullName: Interlocked.CompareExchange(Single, Single, Single)
  type: Method
  assemblies:
  - System.Threading
  - mscorlib
  - netstandard
  namespace: System.Threading
  summary: Compares two single-precision floating point numbers for equality and, if they are equal, replaces the first value.
  remarks: If `comparand` and the value in `location1` are equal, then `value` is stored in `location1`. Otherwise, no operation is performed. The compare and exchange operations are performed as an atomic operation. The return value of <xref:System.Threading.Interlocked.CompareExchange%2A> is the original value in `location1`, whether or not the exchange takes place.
  example:
  - "The following code example demonstrates a thread-safe method that accumulates a running total of <xref:System.Single> values. Two threads add a series of <xref:System.Single> values using the thread-safe method and ordinary addition, and when the threads complete the totals are compared. On a dual-processor computer, there is a significant difference in the totals.  \n  \n In the thread-safe method, the initial value of the running total is saved, and then the <xref:System.Threading.Interlocked.CompareExchange%2A> method is used to exchange the newly computed total with the old total. If the return value is not equal to the saved value of the running total, then another thread has updated the total in the meantime. In that case, the attempt to update the running total must be repeated.  \n  \n [!code-csharp[System.Threading.Interlocked CompareExchange Single#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Interlocked CompareExchange Single/cs/source.cs#1)]\n [!code-vb[System.Threading.Interlocked CompareExchange Single#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Interlocked CompareExchange Single/vb/source.vb#1)]"
  syntax:
    content: public static float CompareExchange (ref float location1, float value, float comparand);
    parameters:
    - id: location1
      type: System.Single
      description: The destination, whose value is compared with <code>comparand</code> and possibly replaced.
    - id: value
      type: System.Single
      description: The value that replaces the destination value if the comparison results in equality.
    - id: comparand
      type: System.Single
      description: The value that is compared to the value at <code>location1</code>.
    return:
      type: System.Single
      description: The original value in <code>location1</code>.
  overload: System.Threading.Interlocked.CompareExchange*
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: The address of <code>location1</code> is a null pointer.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Interlocked.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Interlocked.CompareExchange``1(``0@,``0,``0)
  commentId: M:System.Threading.Interlocked.CompareExchange``1(``0@,``0,``0)
  id: CompareExchange``1(``0@,``0,``0)
  parent: System.Threading.Interlocked
  langs:
  - csharp
  name: CompareExchange<T>(T, T, T)
  nameWithType: Interlocked.CompareExchange<T>(T, T, T)
  fullName: Interlocked.CompareExchange<T>(T, T, T)
  type: Method
  assemblies:
  - System.Threading
  - mscorlib
  - netstandard
  namespace: System.Threading
  summary: Compares two instances of the specified reference type <code>T</code> for equality and, if they are equal, replaces the first one.
  remarks: "If `comparand` and the value in `location1` are equal, then `value` is stored in `location1`. Otherwise, no operation is performed. The comparison and the exchange are performed as an atomic operation. The return value of this method is the original value in `location1`, whether or not the exchange takes place.  \n  \n This method only supports reference types. There are overloads of the <xref:System.Threading.Interlocked.CompareExchange%2A> method for the value types <xref:System.Int32>, <xref:System.Int64>, <xref:System.IntPtr>, <xref:System.Single>, and <xref:System.Double>, but there is no support for other value types.  \n  \n> [!NOTE]\n>  This method overload is preferable to the <xref:System.Threading.Interlocked.CompareExchange%28System.Object%40%2CSystem.Object%2CSystem.Object%29> method overload, because the latter requires the destination object to be accessed late-bound."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public static T CompareExchange<T> (ref T location1, T value, T comparand) where T : class;
    parameters:
    - id: location1
      type: T
      description: The destination, whose value is compared with <code>comparand</code> and possibly replaced. This is a reference parameter (`ref` in C#, `ByRef` in Visual Basic).
    - id: value
      type: T
      description: The value that replaces the destination value if the comparison results in equality.
    - id: comparand
      type: T
      description: The value that is compared to the value at <code>location1</code>.
    typeParameters:
    - id: T
      description: The type to be used for <code>location1</code>, <code>value</code>, and <code>comparand</code>. This type must be a reference type.
    return:
      type: T
      description: The original value in <code>location1</code>.
  overload: System.Threading.Interlocked.CompareExchange``1*
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: The address of <code>location1</code> is a null pointer.
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Interlocked.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Interlocked.Decrement(System.Int32@)
  commentId: M:System.Threading.Interlocked.Decrement(System.Int32@)
  id: Decrement(System.Int32@)
  parent: System.Threading.Interlocked
  langs:
  - csharp
  name: Decrement(Int32)
  nameWithType: Interlocked.Decrement(Int32)
  fullName: Interlocked.Decrement(Int32)
  type: Method
  assemblies:
  - System.Threading
  - mscorlib
  - netstandard
  namespace: System.Threading
  summary: Decrements a specified variable and stores the result, as an atomic operation.
  remarks: 'This method handles an overflow condition by wrapping: If `location` = <xref:System.Int32?displayProperty=fullName>, `location` - 1 = <xref:System.Int32?displayProperty=fullName>. No exception is thrown.'
  example:
  - "The following example determines how many random numbers that range from 0 to 1,000 are required to generate 1,000 random numbers with a midpoint value. To keep track of the number of midpoint values, a variable, `midpointCount`, is set equal to 1,000 and decremented each time the random number generator returns a midpoint value. Because three threads generate the random numbers, the <xref:System.Threading.Interlocked.Decrement%28System.Int32%40%29> method is called to ensure that multiple threads don't update `midpointCount` concurrently. Note that a lock is also used to protect the random number generator, and that a <xref:System.Threading.CountdownEvent> object is used to ensure that the `Main` method doesn't finish execution before the three threads.  \n  \n [!code-csharp[System.Threading.Interlocked.Decrement#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.interlocked.decrement/cs/decrement1.cs#1)]\n [!code-vb[System.Threading.Interlocked.Decrement#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.interlocked.decrement/vb/decrement1.vb#1)]  \n  \n The following example is similar to the previous one, except that it uses the  instead of a thread procedure to generate 50,000 random midpoint integers. In this example, a lambda expression replaces the `GenerateNumbers` thread procedure, and the call to the <xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=fullName> method eliminates the need for the <xref:System.Threading.CountdownEvent> object.  \n  \n [!code-csharp[System.Threading.Interlocked.Decrement#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.interlocked.decrement/cs/decrement2.cs#2)]\n [!code-vb[System.Threading.Interlocked.Decrement#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.interlocked.decrement/vb/decrement2.vb#2)]"
  syntax:
    content: public static int Decrement (ref int location);
    parameters:
    - id: location
      type: System.Int32
      description: The variable whose value is to be decremented.
    return:
      type: System.Int32
      description: The decremented value.
  overload: System.Threading.Interlocked.Decrement*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The address of <code>location</code> is a null pointer.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Interlocked.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Interlocked.Decrement(System.Int64@)
  commentId: M:System.Threading.Interlocked.Decrement(System.Int64@)
  id: Decrement(System.Int64@)
  parent: System.Threading.Interlocked
  langs:
  - csharp
  name: Decrement(Int64)
  nameWithType: Interlocked.Decrement(Int64)
  fullName: Interlocked.Decrement(Int64)
  type: Method
  assemblies:
  - System.Threading
  - mscorlib
  - netstandard
  namespace: System.Threading
  summary: Decrements the specified variable and stores the result, as an atomic operation.
  remarks: "This method handles an overflow condition by wrapping: if `location` = <xref:System.Int64?displayProperty=fullName>, `location` - 1 = <xref:System.Int64?displayProperty=fullName>. No exception is thrown.  \n  \n The <xref:System.Threading.Interlocked.Read%2A> method and the 64-bit overloads of the <xref:System.Threading.Interlocked.Increment%2A>, <xref:System.Threading.Interlocked.Decrement%2A>, and <xref:System.Threading.Interlocked.Add%2A> methods are truly atomic only on systems where a <xref:System.IntPtr?displayProperty=fullName> is 64 bits long. On other systems, these methods are atomic with respect to each other, but not with respect to other means of accessing the data. Thus, to be thread safe on 32-bit systems, any access to a 64-bit value must be made through the members of the <xref:System.Threading.Interlocked> class."
  syntax:
    content: public static long Decrement (ref long location);
    parameters:
    - id: location
      type: System.Int64
      description: The variable whose value is to be decremented.
    return:
      type: System.Int64
      description: The decremented value.
  overload: System.Threading.Interlocked.Decrement*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The address of <code>location</code> is a null pointer.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Interlocked.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Interlocked.Exchange(System.Single@,System.Single)
  commentId: M:System.Threading.Interlocked.Exchange(System.Single@,System.Single)
  id: Exchange(System.Single@,System.Single)
  parent: System.Threading.Interlocked
  langs:
  - csharp
  name: Exchange(Single, Single)
  nameWithType: Interlocked.Exchange(Single, Single)
  fullName: Interlocked.Exchange(Single, Single)
  type: Method
  assemblies:
  - System.Threading
  - mscorlib
  - netstandard
  namespace: System.Threading
  summary: Sets a single-precision floating point number to a specified value and returns the original value, as an atomic operation.
  syntax:
    content: public static float Exchange (ref float location1, float value);
    parameters:
    - id: location1
      type: System.Single
      description: The variable to set to the specified value.
    - id: value
      type: System.Single
      description: The value to which the <code>location1</code> parameter is set.
    return:
      type: System.Single
      description: The original value of <code>location1</code>.
  overload: System.Threading.Interlocked.Exchange*
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: The address of <code>location1</code> is a null pointer.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Interlocked.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Interlocked.Exchange(System.Object@,System.Object)
  commentId: M:System.Threading.Interlocked.Exchange(System.Object@,System.Object)
  id: Exchange(System.Object@,System.Object)
  parent: System.Threading.Interlocked
  langs:
  - csharp
  name: Exchange(Object, Object)
  nameWithType: Interlocked.Exchange(Object, Object)
  fullName: Interlocked.Exchange(Object, Object)
  type: Method
  assemblies:
  - System.Threading
  - mscorlib
  - netstandard
  namespace: System.Threading
  summary: Sets an object to a specified value and returns a reference to the original object, as an atomic operation.
  remarks: Beginning with .NET Framework version 2.0, the <xref:System.Threading.Interlocked.Exchange%60%601%28%60%600%40%2C%60%600%29> method overload provides a type-safe alternative for reference types.
  example:
  - "The following code example shows the syntax for using `Exchange` with any reference type object.  \n  \n [!code-cpp[System.Threading.Interlocked.Exchange#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Interlocked.Exchange/CPP/source.cpp#1)]\n [!code-csharp[System.Threading.Interlocked.Exchange#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Interlocked.Exchange/CS/source.cs#1)]\n [!code-vb[System.Threading.Interlocked.Exchange#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Interlocked.Exchange/VB/source.vb#1)]"
  syntax:
    content: public static object Exchange (ref object location1, object value);
    parameters:
    - id: location1
      type: System.Object
      description: The variable to set to the specified value.
    - id: value
      type: System.Object
      description: The value to which the <code>location1</code> parameter is set.
    return:
      type: System.Object
      description: The original value of <code>location1</code>.
  overload: System.Threading.Interlocked.Exchange*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The address of <code>location1</code> is a null pointer.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Interlocked.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Interlocked.Exchange(System.IntPtr@,System.IntPtr)
  commentId: M:System.Threading.Interlocked.Exchange(System.IntPtr@,System.IntPtr)
  id: Exchange(System.IntPtr@,System.IntPtr)
  parent: System.Threading.Interlocked
  langs:
  - csharp
  name: Exchange(IntPtr, IntPtr)
  nameWithType: Interlocked.Exchange(IntPtr, IntPtr)
  fullName: Interlocked.Exchange(IntPtr, IntPtr)
  type: Method
  assemblies:
  - System.Threading
  - mscorlib
  - netstandard
  namespace: System.Threading
  summary: Sets a platform-specific handle or pointer to a specified value and returns the original value, as an atomic operation.
  syntax:
    content: public static IntPtr Exchange (ref IntPtr location1, IntPtr value);
    parameters:
    - id: location1
      type: System.IntPtr
      description: The variable to set to the specified value.
    - id: value
      type: System.IntPtr
      description: The value to which the <code>location1</code> parameter is set.
    return:
      type: System.IntPtr
      description: The original value of <code>location1</code>.
  overload: System.Threading.Interlocked.Exchange*
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: The address of <code>location1</code> is a null pointer.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Interlocked.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Interlocked.Exchange(System.Double@,System.Double)
  commentId: M:System.Threading.Interlocked.Exchange(System.Double@,System.Double)
  id: Exchange(System.Double@,System.Double)
  parent: System.Threading.Interlocked
  langs:
  - csharp
  name: Exchange(Double, Double)
  nameWithType: Interlocked.Exchange(Double, Double)
  fullName: Interlocked.Exchange(Double, Double)
  type: Method
  assemblies:
  - System.Threading
  - mscorlib
  - netstandard
  namespace: System.Threading
  summary: Sets a double-precision floating point number to a specified value and returns the original value, as an atomic operation.
  syntax:
    content: public static double Exchange (ref double location1, double value);
    parameters:
    - id: location1
      type: System.Double
      description: The variable to set to the specified value.
    - id: value
      type: System.Double
      description: The value to which the <code>location1</code> parameter is set.
    return:
      type: System.Double
      description: The original value of <code>location1</code>.
  overload: System.Threading.Interlocked.Exchange*
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: The address of <code>location1</code> is a null pointer.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Interlocked.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Interlocked.Exchange(System.Int32@,System.Int32)
  commentId: M:System.Threading.Interlocked.Exchange(System.Int32@,System.Int32)
  id: Exchange(System.Int32@,System.Int32)
  parent: System.Threading.Interlocked
  langs:
  - csharp
  name: Exchange(Int32, Int32)
  nameWithType: Interlocked.Exchange(Int32, Int32)
  fullName: Interlocked.Exchange(Int32, Int32)
  type: Method
  assemblies:
  - System.Threading
  - mscorlib
  - netstandard
  namespace: System.Threading
  summary: Sets a 32-bit signed integer to a specified value and returns the original value, as an atomic operation.
  remarks: ''
  example:
  - "The following code example shows a thread-safe resource locking mechanism.  \n  \n [!code-cpp[System.Threading.Interlocked.Exchange Int32 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Interlocked.Exchange Int32 Example/CPP/class1.cpp#1)]\n [!code-csharp[System.Threading.Interlocked.Exchange Int32 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Interlocked.Exchange Int32 Example/CS/class1.cs#1)]\n [!code-vb[System.Threading.Interlocked.Exchange Int32 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Interlocked.Exchange Int32 Example/VB/class1.vb#1)]"
  syntax:
    content: public static int Exchange (ref int location1, int value);
    parameters:
    - id: location1
      type: System.Int32
      description: The variable to set to the specified value.
    - id: value
      type: System.Int32
      description: The value to which the <code>location1</code> parameter is set.
    return:
      type: System.Int32
      description: The original value of <code>location1</code>.
  overload: System.Threading.Interlocked.Exchange*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The address of <code>location1</code> is a null pointer.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Interlocked.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Interlocked.Exchange(System.Int64@,System.Int64)
  commentId: M:System.Threading.Interlocked.Exchange(System.Int64@,System.Int64)
  id: Exchange(System.Int64@,System.Int64)
  parent: System.Threading.Interlocked
  langs:
  - csharp
  name: Exchange(Int64, Int64)
  nameWithType: Interlocked.Exchange(Int64, Int64)
  fullName: Interlocked.Exchange(Int64, Int64)
  type: Method
  assemblies:
  - System.Threading
  - mscorlib
  - netstandard
  namespace: System.Threading
  summary: Sets a 64-bit signed integer to a specified value and returns the original value, as an atomic operation.
  syntax:
    content: public static long Exchange (ref long location1, long value);
    parameters:
    - id: location1
      type: System.Int64
      description: The variable to set to the specified value.
    - id: value
      type: System.Int64
      description: The value to which the <code>location1</code> parameter is set.
    return:
      type: System.Int64
      description: The original value of <code>location1</code>.
  overload: System.Threading.Interlocked.Exchange*
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: The address of <code>location1</code> is a null pointer.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Interlocked.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Interlocked.Exchange``1(``0@,``0)
  commentId: M:System.Threading.Interlocked.Exchange``1(``0@,``0)
  id: Exchange``1(``0@,``0)
  parent: System.Threading.Interlocked
  langs:
  - csharp
  name: Exchange<T>(T, T)
  nameWithType: Interlocked.Exchange<T>(T, T)
  fullName: Interlocked.Exchange<T>(T, T)
  type: Method
  assemblies:
  - System.Threading
  - mscorlib
  - netstandard
  namespace: System.Threading
  summary: Sets a variable of the specified type <code>T</code> to a specified value and returns the original value, as an atomic operation.
  remarks: "This method only supports reference types. There are overloads of the <xref:System.Threading.Interlocked.Exchange%2A> method for the <xref:System.Int32>, <xref:System.Int64>, <xref:System.IntPtr>, <xref:System.Single>, and <xref:System.Double> value types, but there is no support for other value types.  \n  \n> [!NOTE]\n>  This method overload is preferable to the <xref:System.Threading.Interlocked.Exchange%28System.Object%40%2CSystem.Object%29> method overload, because the latter requires late-bound access to the destination object ."
  example:
  - "The following example launches ten tasks, each of which generates  100 ten-character part numbers. It then the part number that is first alphabetically.  \n  \n [!code-csharp[System.Threading.Interlocked.Exchange#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Interlocked.Exchange/CS/Exchange5.cs#2)]\n [!code-vb[System.Threading.Interlocked.Exchange#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Interlocked.Exchange/VB/Exchange5.vb#2)]  \n  \n The example uses the `firstWidget` variable to store the ID that occurs first in the sort order. It compares each ID that it generates with the `firstWidget` value.  If the new value precedes the current value of `firstWidget` in the sort order, the example calls the <xref:System.Threading.Interlocked.Exchange%2A> method to assign the new value to `firstWidget`."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public static T Exchange<T> (ref T location1, T value) where T : class;
    parameters:
    - id: location1
      type: T
      description: The variable to set to the specified value. This is a reference parameter (`ref` in C#, `ByRef` in Visual Basic).
    - id: value
      type: T
      description: The value to which the <code>location1</code> parameter is set.
    typeParameters:
    - id: T
      description: The type to be used for <code>location1</code> and <code>value</code>. This type must be a reference type.
    return:
      type: T
      description: The original value of <code>location1</code>.
  overload: System.Threading.Interlocked.Exchange``1*
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: The address of <code>location1</code> is a null pointer.
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Interlocked.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Interlocked.Increment(System.Int32@)
  commentId: M:System.Threading.Interlocked.Increment(System.Int32@)
  id: Increment(System.Int32@)
  parent: System.Threading.Interlocked
  langs:
  - csharp
  name: Increment(Int32)
  nameWithType: Interlocked.Increment(Int32)
  fullName: Interlocked.Increment(Int32)
  type: Method
  assemblies:
  - System.Threading
  - mscorlib
  - netstandard
  namespace: System.Threading
  summary: Increments a specified variable and stores the result, as an atomic operation.
  remarks: 'This method handles an overflow condition by wrapping: if `location` = <xref:System.Int32?displayProperty=fullName>, `location` + 1 = <xref:System.Int32?displayProperty=fullName>. No exception is thrown.'
  example:
  - "The following example determines how many random numbers that range from 0 to 1,000 are required to generate 1,000 random numbers with a midpoint value. To keep track of the number of midpoint values, a variable, `midpointCount`, is set equal to 0 and incremented each time the random number generator returns a midpoint value until it reaches 10,000. Because three threads generate the random numbers, the <xref:System.Threading.Interlocked.Increment%28System.Int32%40%29> method is called to ensure that multiple threads don't update `midpointCount` concurrently. Note that a lock is also used to protect the random number generator, and that a <xref:System.Threading.CountdownEvent> object is used to ensure that the `Main` method doesn't finish execution before the three threads.  \n  \n [!code-csharp[System.Threading.Interlocked.Increment2#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.interlocked.increment2/cs/increment3.cs#3)]\n [!code-vb[System.Threading.Interlocked.Increment2#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.interlocked.increment2/vb/Increment3.vb#3)]  \n  \n The following example is similar to the previous one, except that it uses the  instead of a thread procedure to generate 50,000 random midpoint integers. In this example, a lambda expression replaces the `GenerateNumbers` thread procedure, and the call to the <xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=fullName> method eliminates the need for the <xref:System.Threading.CountdownEvent> object.  \n  \n [!code-csharp[System.Threading.Interlocked.Increment2#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.interlocked.increment2/cs/increment4.cs#4)]\n [!code-vb[System.Threading.Interlocked.Increment2#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.interlocked.increment2/vb/Increment4.vb#4)]"
  syntax:
    content: public static int Increment (ref int location);
    parameters:
    - id: location
      type: System.Int32
      description: The variable whose value is to be incremented.
    return:
      type: System.Int32
      description: The incremented value.
  overload: System.Threading.Interlocked.Increment*
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: The address of <code>location</code> is a null pointer.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Interlocked.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Interlocked.Increment(System.Int64@)
  commentId: M:System.Threading.Interlocked.Increment(System.Int64@)
  id: Increment(System.Int64@)
  parent: System.Threading.Interlocked
  langs:
  - csharp
  name: Increment(Int64)
  nameWithType: Interlocked.Increment(Int64)
  fullName: Interlocked.Increment(Int64)
  type: Method
  assemblies:
  - System.Threading
  - mscorlib
  - netstandard
  namespace: System.Threading
  summary: Increments a specified variable and stores the result, as an atomic operation.
  remarks: "This method handles an overflow condition by wrapping: if `location` = <xref:System.Int64?displayProperty=fullName>, `location` + 1 = <xref:System.Int64?displayProperty=fullName>. No exception is thrown.  \n  \n The <xref:System.Threading.Interlocked.Read%2A> method and the 64-bit overloads of the <xref:System.Threading.Interlocked.Increment%2A>, <xref:System.Threading.Interlocked.Decrement%2A>, and <xref:System.Threading.Interlocked.Add%2A> methods are truly atomic only on systems where a <xref:System.IntPtr?displayProperty=fullName> is 64 bits long. On other systems, these methods are atomic with respect to each other, but not with respect to other means of accessing the data. Thus, to be thread safe on 32-bit systems, any access to a 64-bit value must be made through the members of the <xref:System.Threading.Interlocked> class."
  syntax:
    content: public static long Increment (ref long location);
    parameters:
    - id: location
      type: System.Int64
      description: The variable whose value is to be incremented.
    return:
      type: System.Int64
      description: The incremented value.
  overload: System.Threading.Interlocked.Increment*
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: The address of <code>location</code> is a null pointer.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Interlocked.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Interlocked.MemoryBarrier
  commentId: M:System.Threading.Interlocked.MemoryBarrier
  id: MemoryBarrier
  parent: System.Threading.Interlocked
  langs:
  - csharp
  name: MemoryBarrier()
  nameWithType: Interlocked.MemoryBarrier()
  fullName: Interlocked.MemoryBarrier()
  type: Method
  assemblies:
  - System.Threading
  - mscorlib
  - netstandard
  namespace: System.Threading
  summary: 'Synchronizes memory access as follows: The processor that executes the current thread cannot reorder instructions in such a way that memory accesses before the call to <xref href="System.Threading.Interlocked.MemoryBarrier"></xref> execute after memory accesses that follow the call to <xref href="System.Threading.Interlocked.MemoryBarrier"></xref>.'
  remarks: "This method was added to the <xref:System.Threading.Interlocked> class in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] as a convenience; it's a wrapper for the <xref:System.Threading.Thread.MemoryBarrier%2A?displayProperty=fullName> method.  \n  \n <xref:System.Threading.Interlocked.MemoryBarrier%2A> is required only on multiprocessor systems that have weak memory ordering (for example, a system that employs multiple Intel Itanium processors).  \n  \n For most purposes, the C# `lock` statement, the Visual Basic `SyncLock` statement, or the <xref:System.Threading.Monitor> class provide easier ways to synchronize data."
  syntax:
    content: public static void MemoryBarrier ();
    parameters: []
  overload: System.Threading.Interlocked.MemoryBarrier*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Interlocked.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Interlocked.MemoryBarrierProcessWide
  commentId: M:System.Threading.Interlocked.MemoryBarrierProcessWide
  id: MemoryBarrierProcessWide
  parent: System.Threading.Interlocked
  langs:
  - csharp
  name: MemoryBarrierProcessWide()
  nameWithType: Interlocked.MemoryBarrierProcessWide()
  fullName: Interlocked.MemoryBarrierProcessWide()
  type: Method
  assemblies:
  - System.Threading
  namespace: System.Threading
  syntax:
    content: public static void MemoryBarrierProcessWide ();
    parameters: []
  overload: System.Threading.Interlocked.MemoryBarrierProcessWide*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Interlocked.xml
- uid: System.Threading.Interlocked.Read(System.Int64@)
  commentId: M:System.Threading.Interlocked.Read(System.Int64@)
  id: Read(System.Int64@)
  parent: System.Threading.Interlocked
  langs:
  - csharp
  name: Read(Int64)
  nameWithType: Interlocked.Read(Int64)
  fullName: Interlocked.Read(Int64)
  type: Method
  assemblies:
  - System.Threading
  - mscorlib
  - netstandard
  namespace: System.Threading
  summary: Returns a 64-bit value, loaded as an atomic operation.
  remarks: "The <xref:System.Threading.Interlocked.Read%2A> method is unnecessary on 64-bit systems, because 64-bit read operations are already atomic. On 32-bit systems, 64-bit read operations are not atomic unless performed using <xref:System.Threading.Interlocked.Read%2A>.  \n  \n The <xref:System.Threading.Interlocked.Read%2A> method and the 64-bit overloads of the <xref:System.Threading.Interlocked.Increment%2A>, <xref:System.Threading.Interlocked.Decrement%2A>, and <xref:System.Threading.Interlocked.Add%2A> methods are truly atomic only on systems where a <xref:System.IntPtr?displayProperty=fullName> is 64 bits long. On other systems, these methods are atomic with respect to each other, but not with respect to other means of accessing the data. Thus, to be thread safe on 32-bit systems, any access to a 64-bit value must be made through the members of the <xref:System.Threading.Interlocked> class.  \n  \n> [!NOTE]\n>  <xref:System.IntPtr> is a platform-specific type."
  syntax:
    content: public static long Read (ref long location);
    parameters:
    - id: location
      type: System.Int64
      description: The 64-bit value to be loaded.
    return:
      type: System.Int64
      description: The loaded value.
  overload: System.Threading.Interlocked.Read*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Interlocked.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.NullReferenceException
  parent: System
  isExternal: false
  name: NullReferenceException
  nameWithType: NullReferenceException
  fullName: System.NullReferenceException
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Threading.Interlocked.Add(System.Int32@,System.Int32)
  parent: System.Threading.Interlocked
  isExternal: false
  name: Add(Int32, Int32)
  nameWithType: Interlocked.Add(Int32, Int32)
  fullName: Interlocked.Add(Int32, Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.Interlocked.Add(System.Int64@,System.Int64)
  parent: System.Threading.Interlocked
  isExternal: false
  name: Add(Int64, Int64)
  nameWithType: Interlocked.Add(Int64, Int64)
  fullName: Interlocked.Add(Int64, Int64)
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Threading.Interlocked.CompareExchange(System.Double@,System.Double,System.Double)
  parent: System.Threading.Interlocked
  isExternal: false
  name: CompareExchange(Double, Double, Double)
  nameWithType: Interlocked.CompareExchange(Double, Double, Double)
  fullName: Interlocked.CompareExchange(Double, Double, Double)
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Threading.Interlocked.CompareExchange(System.Int32@,System.Int32,System.Int32)
  parent: System.Threading.Interlocked
  isExternal: false
  name: CompareExchange(Int32, Int32, Int32)
  nameWithType: Interlocked.CompareExchange(Int32, Int32, Int32)
  fullName: Interlocked.CompareExchange(Int32, Int32, Int32)
- uid: System.Threading.Interlocked.CompareExchange(System.Int64@,System.Int64,System.Int64)
  parent: System.Threading.Interlocked
  isExternal: false
  name: CompareExchange(Int64, Int64, Int64)
  nameWithType: Interlocked.CompareExchange(Int64, Int64, Int64)
  fullName: Interlocked.CompareExchange(Int64, Int64, Int64)
- uid: System.Threading.Interlocked.CompareExchange(System.IntPtr@,System.IntPtr,System.IntPtr)
  parent: System.Threading.Interlocked
  isExternal: false
  name: CompareExchange(IntPtr, IntPtr, IntPtr)
  nameWithType: Interlocked.CompareExchange(IntPtr, IntPtr, IntPtr)
  fullName: Interlocked.CompareExchange(IntPtr, IntPtr, IntPtr)
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Threading.Interlocked.CompareExchange(System.Object@,System.Object,System.Object)
  parent: System.Threading.Interlocked
  isExternal: false
  name: CompareExchange(Object, Object, Object)
  nameWithType: Interlocked.CompareExchange(Object, Object, Object)
  fullName: Interlocked.CompareExchange(Object, Object, Object)
- uid: System.Threading.Interlocked.CompareExchange(System.Single@,System.Single,System.Single)
  parent: System.Threading.Interlocked
  isExternal: false
  name: CompareExchange(Single, Single, Single)
  nameWithType: Interlocked.CompareExchange(Single, Single, Single)
  fullName: Interlocked.CompareExchange(Single, Single, Single)
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Threading.Interlocked.CompareExchange``1(``0@,``0,``0)
  parent: System.Threading.Interlocked
  isExternal: false
  name: CompareExchange<T>(T, T, T)
  nameWithType: Interlocked.CompareExchange<T>(T, T, T)
  fullName: Interlocked.CompareExchange<T>(T, T, T)
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Threading.Interlocked.Decrement(System.Int32@)
  parent: System.Threading.Interlocked
  isExternal: false
  name: Decrement(Int32)
  nameWithType: Interlocked.Decrement(Int32)
  fullName: Interlocked.Decrement(Int32)
- uid: System.Threading.Interlocked.Decrement(System.Int64@)
  parent: System.Threading.Interlocked
  isExternal: false
  name: Decrement(Int64)
  nameWithType: Interlocked.Decrement(Int64)
  fullName: Interlocked.Decrement(Int64)
- uid: System.Threading.Interlocked.Exchange(System.Single@,System.Single)
  parent: System.Threading.Interlocked
  isExternal: false
  name: Exchange(Single, Single)
  nameWithType: Interlocked.Exchange(Single, Single)
  fullName: Interlocked.Exchange(Single, Single)
- uid: System.Threading.Interlocked.Exchange(System.Object@,System.Object)
  parent: System.Threading.Interlocked
  isExternal: false
  name: Exchange(Object, Object)
  nameWithType: Interlocked.Exchange(Object, Object)
  fullName: Interlocked.Exchange(Object, Object)
- uid: System.Threading.Interlocked.Exchange(System.IntPtr@,System.IntPtr)
  parent: System.Threading.Interlocked
  isExternal: false
  name: Exchange(IntPtr, IntPtr)
  nameWithType: Interlocked.Exchange(IntPtr, IntPtr)
  fullName: Interlocked.Exchange(IntPtr, IntPtr)
- uid: System.Threading.Interlocked.Exchange(System.Double@,System.Double)
  parent: System.Threading.Interlocked
  isExternal: false
  name: Exchange(Double, Double)
  nameWithType: Interlocked.Exchange(Double, Double)
  fullName: Interlocked.Exchange(Double, Double)
- uid: System.Threading.Interlocked.Exchange(System.Int32@,System.Int32)
  parent: System.Threading.Interlocked
  isExternal: false
  name: Exchange(Int32, Int32)
  nameWithType: Interlocked.Exchange(Int32, Int32)
  fullName: Interlocked.Exchange(Int32, Int32)
- uid: System.Threading.Interlocked.Exchange(System.Int64@,System.Int64)
  parent: System.Threading.Interlocked
  isExternal: false
  name: Exchange(Int64, Int64)
  nameWithType: Interlocked.Exchange(Int64, Int64)
  fullName: Interlocked.Exchange(Int64, Int64)
- uid: System.Threading.Interlocked.Exchange``1(``0@,``0)
  parent: System.Threading.Interlocked
  isExternal: false
  name: Exchange<T>(T, T)
  nameWithType: Interlocked.Exchange<T>(T, T)
  fullName: Interlocked.Exchange<T>(T, T)
- uid: System.Threading.Interlocked.Increment(System.Int32@)
  parent: System.Threading.Interlocked
  isExternal: false
  name: Increment(Int32)
  nameWithType: Interlocked.Increment(Int32)
  fullName: Interlocked.Increment(Int32)
- uid: System.Threading.Interlocked.Increment(System.Int64@)
  parent: System.Threading.Interlocked
  isExternal: false
  name: Increment(Int64)
  nameWithType: Interlocked.Increment(Int64)
  fullName: Interlocked.Increment(Int64)
- uid: System.Threading.Interlocked.MemoryBarrier
  parent: System.Threading.Interlocked
  isExternal: false
  name: MemoryBarrier()
  nameWithType: Interlocked.MemoryBarrier()
  fullName: Interlocked.MemoryBarrier()
- uid: System.Threading.Interlocked.MemoryBarrierProcessWide
  parent: System.Threading.Interlocked
  isExternal: false
  name: MemoryBarrierProcessWide()
  nameWithType: Interlocked.MemoryBarrierProcessWide()
  fullName: Interlocked.MemoryBarrierProcessWide()
- uid: System.Threading.Interlocked.Read(System.Int64@)
  parent: System.Threading.Interlocked
  isExternal: false
  name: Read(Int64)
  nameWithType: Interlocked.Read(Int64)
  fullName: Interlocked.Read(Int64)
- uid: System.Threading.Interlocked.Add*
  parent: System.Threading.Interlocked
  isExternal: false
  name: Add
  nameWithType: Interlocked.Add
  fullName: Interlocked.Add
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Interlocked.xml
- uid: System.Threading.Interlocked.CompareExchange*
  parent: System.Threading.Interlocked
  isExternal: false
  name: CompareExchange
  nameWithType: Interlocked.CompareExchange
  fullName: Interlocked.CompareExchange
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Interlocked.xml
- uid: System.Threading.Interlocked.CompareExchange``1*
  parent: System.Threading.Interlocked
  isExternal: false
  name: CompareExchange<T>
  nameWithType: Interlocked.CompareExchange<T>
  fullName: Interlocked.CompareExchange<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Interlocked.xml
- uid: System.Threading.Interlocked.Decrement*
  parent: System.Threading.Interlocked
  isExternal: false
  name: Decrement
  nameWithType: Interlocked.Decrement
  fullName: Interlocked.Decrement
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Interlocked.xml
- uid: System.Threading.Interlocked.Exchange*
  parent: System.Threading.Interlocked
  isExternal: false
  name: Exchange
  nameWithType: Interlocked.Exchange
  fullName: Interlocked.Exchange
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Interlocked.xml
- uid: System.Threading.Interlocked.Exchange``1*
  parent: System.Threading.Interlocked
  isExternal: false
  name: Exchange<T>
  nameWithType: Interlocked.Exchange<T>
  fullName: Interlocked.Exchange<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Interlocked.xml
- uid: System.Threading.Interlocked.Increment*
  parent: System.Threading.Interlocked
  isExternal: false
  name: Increment
  nameWithType: Interlocked.Increment
  fullName: Interlocked.Increment
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Interlocked.xml
- uid: System.Threading.Interlocked.MemoryBarrier*
  parent: System.Threading.Interlocked
  isExternal: false
  name: MemoryBarrier
  nameWithType: Interlocked.MemoryBarrier
  fullName: Interlocked.MemoryBarrier
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Interlocked.xml
- uid: System.Threading.Interlocked.MemoryBarrierProcessWide*
  parent: System.Threading.Interlocked
  isExternal: false
  name: MemoryBarrierProcessWide
  nameWithType: Interlocked.MemoryBarrierProcessWide
  fullName: Interlocked.MemoryBarrierProcessWide
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Interlocked.xml
- uid: System.Threading.Interlocked.Read*
  parent: System.Threading.Interlocked
  isExternal: false
  name: Read
  nameWithType: Interlocked.Read
  fullName: Interlocked.Read
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Interlocked.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
