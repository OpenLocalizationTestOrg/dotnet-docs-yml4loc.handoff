{"nodes":[{"content":"Provides a safe handle that can be used by Cryptography Next Generation (CNG) objects.","nodes":[{"pos":[0,86],"content":"Provides a safe handle that can be used by Cryptography Next Generation (CNG) objects.","nodes":[{"content":"Provides a safe handle that can be used by Cryptography Next Generation (CNG) objects.","pos":[0,86]}]}],"pos":[825,912],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"Microsoft.Win32.SafeHandles.SafeNCryptHandle\"></xref> class.","nodes":[{"pos":[0,106],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"Microsoft.Win32.SafeHandles.SafeNCryptHandle\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"Microsoft.Win32.SafeHandles.SafeNCryptHandle\"></xref> class."}],"pos":[3522,3629],"yaml":true},{"content":"Releases a handle used by a Cryptography Next Generation (CNG) object.","nodes":[{"pos":[0,70],"content":"Releases a handle used by a Cryptography Next Generation (CNG) object.","nodes":[{"content":"Releases a handle used by a Cryptography Next Generation (CNG) object.","pos":[0,70]}]}],"pos":[7320,7391],"yaml":true},{"content":"`true` if the handle is released successfully; otherwise, `false`.","nodes":[{"pos":[0,66],"content":"<ph id=\"ph1\">`true`</ph> if the handle is released successfully; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the handle is released successfully; otherwise, `false`."}],"pos":[7533,7602],"yaml":true},{"content":"Releases a native handle used by a Cryptography Next Generation (CNG) object.","nodes":[{"pos":[0,77],"content":"Releases a native handle used by a Cryptography Next Generation (CNG) object.","nodes":[{"content":"Releases a native handle used by a Cryptography Next Generation (CNG) object.","pos":[0,77]}]}],"pos":[9018,9096],"yaml":true},{"content":"`true` if the handle is released successfully; otherwise, `false`.","nodes":[{"pos":[0,66],"content":"<ph id=\"ph1\">`true`</ph> if the handle is released successfully; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the handle is released successfully; otherwise, `false`."}],"pos":[9244,9313],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.Win32.SafeHandles.SafeNCryptHandle\n  commentId: T:Microsoft.Win32.SafeHandles.SafeNCryptHandle\n  id: SafeNCryptHandle\n  children:\n  - Microsoft.Win32.SafeHandles.SafeNCryptHandle.#ctor\n  - Microsoft.Win32.SafeHandles.SafeNCryptHandle.#ctor(System.IntPtr,System.Runtime.InteropServices.SafeHandle)\n  - Microsoft.Win32.SafeHandles.SafeNCryptHandle.IsInvalid\n  - Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseHandle\n  - Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseNativeHandle\n  langs:\n  - csharp\n  name: SafeNCryptHandle\n  nameWithType: SafeNCryptHandle\n  fullName: Microsoft.Win32.SafeHandles.SafeNCryptHandle\n  type: Class\n  assemblies:\n  - System.Security.Cryptography.Cng\n  - System.Core\n  - netstandard\n  namespace: Microsoft.Win32.SafeHandles\n  summary: Provides a safe handle that can be used by Cryptography Next Generation (CNG) objects.\n  syntax:\n    content: 'public abstract class SafeNCryptHandle : Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid'\n  inheritance:\n  - System.Object\n  - System.Runtime.InteropServices.SafeHandle\n  derivedClasses:\n  - Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle\n  - Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle\n  - Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Runtime.InteropServices.SafeHandle.Close\n  - System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)\n  - System.Runtime.InteropServices.SafeHandle.DangerousGetHandle\n  - System.Runtime.InteropServices.SafeHandle.DangerousRelease\n  - System.Runtime.InteropServices.SafeHandle.Dispose\n  - System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)\n  - System.Runtime.InteropServices.SafeHandle.handle\n  - System.Runtime.InteropServices.SafeHandle.IsClosed\n  - System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)\n  - System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  internal_use_only: true\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32.SafeHandles/SafeNCryptHandle.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: Microsoft.Win32.SafeHandles.SafeNCryptHandle.#ctor\n  commentId: M:Microsoft.Win32.SafeHandles.SafeNCryptHandle.#ctor\n  id: '#ctor'\n  parent: Microsoft.Win32.SafeHandles.SafeNCryptHandle\n  langs:\n  - csharp\n  name: SafeNCryptHandle()\n  nameWithType: SafeNCryptHandle.SafeNCryptHandle()\n  fullName: SafeNCryptHandle.SafeNCryptHandle()\n  type: Constructor\n  assemblies:\n  - System.Security.Cryptography.Cng\n  - System.Core\n  - netstandard\n  namespace: Microsoft.Win32.SafeHandles\n  summary: Initializes a new instance of the <xref href=\"Microsoft.Win32.SafeHandles.SafeNCryptHandle\"></xref> class.\n  syntax:\n    content: protected SafeNCryptHandle ();\n    parameters: []\n  overload: Microsoft.Win32.SafeHandles.SafeNCryptHandle.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  internal_use_only: true\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32.SafeHandles/SafeNCryptHandle.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: Microsoft.Win32.SafeHandles.SafeNCryptHandle.#ctor(System.IntPtr,System.Runtime.InteropServices.SafeHandle)\n  commentId: M:Microsoft.Win32.SafeHandles.SafeNCryptHandle.#ctor(System.IntPtr,System.Runtime.InteropServices.SafeHandle)\n  id: '#ctor(System.IntPtr,System.Runtime.InteropServices.SafeHandle)'\n  parent: Microsoft.Win32.SafeHandles.SafeNCryptHandle\n  langs:\n  - csharp\n  name: SafeNCryptHandle(IntPtr, SafeHandle)\n  nameWithType: SafeNCryptHandle.SafeNCryptHandle(IntPtr, SafeHandle)\n  fullName: SafeNCryptHandle.SafeNCryptHandle(IntPtr, SafeHandle)\n  type: Constructor\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: Microsoft.Win32.SafeHandles\n  syntax:\n    content: protected SafeNCryptHandle (IntPtr handle, System.Runtime.InteropServices.SafeHandle parentHandle);\n    parameters:\n    - id: handle\n      type: System.IntPtr\n      description: ''\n    - id: parentHandle\n      type: System.Runtime.InteropServices.SafeHandle\n      description: ''\n  overload: Microsoft.Win32.SafeHandles.SafeNCryptHandle.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32.SafeHandles/SafeNCryptHandle.xml\n- uid: Microsoft.Win32.SafeHandles.SafeNCryptHandle.IsInvalid\n  commentId: P:Microsoft.Win32.SafeHandles.SafeNCryptHandle.IsInvalid\n  id: IsInvalid\n  parent: Microsoft.Win32.SafeHandles.SafeNCryptHandle\n  langs:\n  - csharp\n  name: IsInvalid\n  nameWithType: SafeNCryptHandle.IsInvalid\n  fullName: SafeNCryptHandle.IsInvalid\n  type: Property\n  assemblies:\n  - System.Security.Cryptography.Cng\n  - System.Core\n  namespace: Microsoft.Win32.SafeHandles\n  syntax:\n    content: public override bool IsInvalid { get; }\n    return:\n      type: System.Boolean\n      description: ''\n  overload: Microsoft.Win32.SafeHandles.SafeNCryptHandle.IsInvalid*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32.SafeHandles/SafeNCryptHandle.xml\n- uid: Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseHandle\n  commentId: M:Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseHandle\n  id: ReleaseHandle\n  parent: Microsoft.Win32.SafeHandles.SafeNCryptHandle\n  langs:\n  - csharp\n  name: ReleaseHandle()\n  nameWithType: SafeNCryptHandle.ReleaseHandle()\n  fullName: SafeNCryptHandle.ReleaseHandle()\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Cng\n  - System.Core\n  - netstandard\n  namespace: Microsoft.Win32.SafeHandles\n  summary: Releases a handle used by a Cryptography Next Generation (CNG) object.\n  syntax:\n    content: protected override bool ReleaseHandle ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`true` if the handle is released successfully; otherwise, `false`.'\n  overload: Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseHandle*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  internal_use_only: true\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32.SafeHandles/SafeNCryptHandle.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseNativeHandle\n  commentId: M:Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseNativeHandle\n  id: ReleaseNativeHandle\n  parent: Microsoft.Win32.SafeHandles.SafeNCryptHandle\n  langs:\n  - csharp\n  name: ReleaseNativeHandle()\n  nameWithType: SafeNCryptHandle.ReleaseNativeHandle()\n  fullName: SafeNCryptHandle.ReleaseNativeHandle()\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Cng\n  - System.Core\n  - netstandard\n  namespace: Microsoft.Win32.SafeHandles\n  summary: Releases a native handle used by a Cryptography Next Generation (CNG) object.\n  syntax:\n    content: protected abstract bool ReleaseNativeHandle ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`true` if the handle is released successfully; otherwise, `false`.'\n  overload: Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseNativeHandle*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  internal_use_only: true\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32.SafeHandles/SafeNCryptHandle.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Runtime.InteropServices.SafeHandle\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: SafeHandle\n  nameWithType: SafeHandle\n  fullName: System.Runtime.InteropServices.SafeHandle\n- uid: Microsoft.Win32.SafeHandles.SafeNCryptHandle.#ctor\n  parent: Microsoft.Win32.SafeHandles.SafeNCryptHandle\n  isExternal: false\n  name: SafeNCryptHandle()\n  nameWithType: SafeNCryptHandle.SafeNCryptHandle()\n  fullName: SafeNCryptHandle.SafeNCryptHandle()\n- uid: Microsoft.Win32.SafeHandles.SafeNCryptHandle.#ctor(System.IntPtr,System.Runtime.InteropServices.SafeHandle)\n  parent: Microsoft.Win32.SafeHandles.SafeNCryptHandle\n  isExternal: false\n  name: SafeNCryptHandle(IntPtr, SafeHandle)\n  nameWithType: SafeNCryptHandle.SafeNCryptHandle(IntPtr, SafeHandle)\n  fullName: SafeNCryptHandle.SafeNCryptHandle(IntPtr, SafeHandle)\n- uid: System.IntPtr\n  parent: System\n  isExternal: false\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: Microsoft.Win32.SafeHandles.SafeNCryptHandle.IsInvalid\n  parent: Microsoft.Win32.SafeHandles.SafeNCryptHandle\n  isExternal: false\n  name: IsInvalid\n  nameWithType: SafeNCryptHandle.IsInvalid\n  fullName: SafeNCryptHandle.IsInvalid\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseHandle\n  parent: Microsoft.Win32.SafeHandles.SafeNCryptHandle\n  isExternal: false\n  name: ReleaseHandle()\n  nameWithType: SafeNCryptHandle.ReleaseHandle()\n  fullName: SafeNCryptHandle.ReleaseHandle()\n- uid: Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseNativeHandle\n  parent: Microsoft.Win32.SafeHandles.SafeNCryptHandle\n  isExternal: false\n  name: ReleaseNativeHandle()\n  nameWithType: SafeNCryptHandle.ReleaseNativeHandle()\n  fullName: SafeNCryptHandle.ReleaseNativeHandle()\n- uid: Microsoft.Win32.SafeHandles.SafeNCryptHandle.#ctor*\n  parent: Microsoft.Win32.SafeHandles.SafeNCryptHandle\n  isExternal: false\n  name: SafeNCryptHandle\n  nameWithType: SafeNCryptHandle.SafeNCryptHandle\n  fullName: SafeNCryptHandle.SafeNCryptHandle\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32.SafeHandles/SafeNCryptHandle.xml\n- uid: Microsoft.Win32.SafeHandles.SafeNCryptHandle.IsInvalid*\n  parent: Microsoft.Win32.SafeHandles.SafeNCryptHandle\n  isExternal: false\n  name: IsInvalid\n  nameWithType: SafeNCryptHandle.IsInvalid\n  fullName: SafeNCryptHandle.IsInvalid\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32.SafeHandles/SafeNCryptHandle.xml\n- uid: Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseHandle*\n  parent: Microsoft.Win32.SafeHandles.SafeNCryptHandle\n  isExternal: false\n  name: ReleaseHandle\n  nameWithType: SafeNCryptHandle.ReleaseHandle\n  fullName: SafeNCryptHandle.ReleaseHandle\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32.SafeHandles/SafeNCryptHandle.xml\n- uid: Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseNativeHandle*\n  parent: Microsoft.Win32.SafeHandles.SafeNCryptHandle\n  isExternal: false\n  name: ReleaseNativeHandle\n  nameWithType: SafeNCryptHandle.ReleaseNativeHandle\n  fullName: SafeNCryptHandle.ReleaseNativeHandle\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32.SafeHandles/SafeNCryptHandle.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Runtime.InteropServices.SafeHandle.Close\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: Close()\n  nameWithType: SafeHandle.Close()\n  fullName: SafeHandle.Close()\n- uid: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: DangerousAddRef(Boolean)\n  nameWithType: SafeHandle.DangerousAddRef(Boolean)\n  fullName: SafeHandle.DangerousAddRef(Boolean)\n- uid: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: DangerousGetHandle()\n  nameWithType: SafeHandle.DangerousGetHandle()\n  fullName: SafeHandle.DangerousGetHandle()\n- uid: System.Runtime.InteropServices.SafeHandle.DangerousRelease\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: DangerousRelease()\n  nameWithType: SafeHandle.DangerousRelease()\n  fullName: SafeHandle.DangerousRelease()\n- uid: System.Runtime.InteropServices.SafeHandle.Dispose\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: Dispose()\n  nameWithType: SafeHandle.Dispose()\n  fullName: SafeHandle.Dispose()\n- uid: System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: SafeHandle.Dispose(Boolean)\n  fullName: SafeHandle.Dispose(Boolean)\n- uid: System.Runtime.InteropServices.SafeHandle.handle\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: handle\n  nameWithType: SafeHandle.handle\n  fullName: SafeHandle.handle\n- uid: System.Runtime.InteropServices.SafeHandle.IsClosed\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: IsClosed\n  nameWithType: SafeHandle.IsClosed\n  fullName: SafeHandle.IsClosed\n- uid: System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: SetHandle(IntPtr)\n  nameWithType: SafeHandle.SetHandle(IntPtr)\n  fullName: SafeHandle.SetHandle(IntPtr)\n- uid: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: SetHandleAsInvalid()\n  nameWithType: SafeHandle.SetHandleAsInvalid()\n  fullName: SafeHandle.SetHandleAsInvalid()\n"}