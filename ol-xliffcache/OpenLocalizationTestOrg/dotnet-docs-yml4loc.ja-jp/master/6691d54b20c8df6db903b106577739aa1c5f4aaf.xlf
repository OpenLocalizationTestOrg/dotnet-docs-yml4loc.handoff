<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6691d54b20c8df6db903b106577739aa1c5f4aaf</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.ServiceModel.Channels.MessageEncoder.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">053007a7f5ef517e37566b3352299e52f65114e3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a8e2d3593e72a175fbd8843a7fdeb2592fb09809</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>The encoder is the component that is used to write messages to a stream and to read messages from a stream.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageEncoder&gt;</ph> is a base class that provides implementations that support a Multipurpose Internet Mail Extensions (MIME) content type and message version, and defines the interface for the serialization and deserialization of messages according to that content type.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use it as a base class for writing your own custom encoder.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this class if you want to implement a custom message encoder.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>To implement your own custom message encoder, you must provide custom implementations of the following abstract base classes:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Override the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageEncoderFactory.Encoder%2A&gt;</ph> to return an instance of your custom <ph id="ph2">&lt;xref:System.ServiceModel.Channels.MessageEncoder&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Then wire up your custom <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageEncoderFactory&gt;</ph> to the binding element stack used to configure the service or client by overriding the <ph id="ph2">&lt;xref:System.ServiceModel.Channels.MessageEncodingBindingElement.CreateMessageEncoderFactory%2A&gt;</ph> method to return an instance of this factory.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>The task of converting between the in-memory representation of a message and an XML Information Set (Infoset) representation that can be written to a stream is encapsulated within the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageEncoder&gt;</ph> class, which most commonly serves as a factory for XML readers and XML writers that support specific types of XML encodings.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>The key methods on <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageEncoder&gt;</ph> are <ph id="ph2">&lt;xref:System.ServiceModel.Channels.MessageEncoder.WriteMessage%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.ServiceModel.Channels.MessageEncoder.ReadMessage%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageEncoder.WriteMessage%2A&gt;</ph> takes a <ph id="ph2">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> object and writes it into a <ph id="ph3">&lt;xref:System.IO.Stream&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageEncoder.ReadMessage%2A&gt;</ph> takes a <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> object and a maximum header size and returns a <ph id="ph3">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.MessageEncoder"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Starts the writing of message for the message encoder with specified message, stream, callback and state.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The message.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The stream.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The callback.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The state.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The asynchronous result of the operation.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, gets the MIME content type used by the encoder.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>The content type is a Multipurpose Internet Mail Exchange (MIME) header that appears at the beginning of a MIME message as well as within the separate body parts.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>Content-type headers are used to specify the media type and subtype of data in the body of a message and to fully specify the media type and subtype of data in the body of a message and to specify the character encoding (optional) of the data.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>An example of a MIME content type that can be supported: "application/soap+xml; charset=’utf8’".</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>A grammar that details the syntax of the content-type header is described in <bpt id="p1">[</bpt>RFC 2045<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=95945)</ept>, Section 5.1.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>RFC 2046<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=95944)</ept> provides detailed information on MIME media types and their parameters.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The content type that is supported by the message encoder.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Ends the writing of messages for the message encoder.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The result of the operation.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Returns a typed object requested, if present, from the appropriate layer in the channel stack.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this to request a typed object such as an interface for setting properties or getting status from the appropriate layer in the channel stack.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a layer supports returning the requested object, it returns it.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>If not, it delegates the call down to the next layer in the stack.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>If it gets to the bottom of the stack and no channel layer supported the requested object, then the method returns <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The typed object for which the method is querying.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The typed object <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">T</ph><ept id="p1">&lt;/code&gt;</ept> requested if it is present or <ph id="ph2">`null`</ph> if it is not.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether a specified message-level content-type value is supported by the message encoder.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is used to determine whether the message encoder can be used to read a particular style of message, based on its content-type.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>The information in the <ph id="ph1">&lt;xref:System.Net.Mime.ContentType&gt;</ph> class is used to describe the data that is contained in a message and is used to determine if there is a content-type match.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>A grammar that details the syntax of the content-type header is described in <bpt id="p1">[</bpt>RFC 2045<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=95945)</ept> Section 5.1.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>RFC 2046<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=95944)</ept> provides detailed information on Multipurpose Internet Mail Extensions (MIME) media types and their parameters.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The message-level content-type being tested.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the message-level content-type specified is supported; otherwise <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, gets the media type value that is used by the encoder.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>The media type is part of the content-type header.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The media type that is supported by the message encoder.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, gets the message version value that is used by the encoder.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>Specifies the versions of SOAP and WS-Addressing associated with a message and its exchange.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>If SOAP versions are not to be used, this property should be overridden to return <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageVersion.None%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.MessageVersion"&gt;&lt;/xref&gt;</ph> that is used by the encoder.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, reads a message from a specified buffer.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.ArraySegment`1"&gt;&lt;/xref&gt;</ph> of type <ph id="ph2">&lt;xref href="System.Byte"&gt;&lt;/xref&gt;</ph> that provides the buffer from which the message is deserialized.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.BufferManager"&gt;&lt;/xref&gt;</ph> that manages the buffer from which the message is deserialized.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.Message"&gt;&lt;/xref&gt;</ph> that is read from the buffer specified.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, reads a message from a specified stream.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.Stream"&gt;&lt;/xref&gt;</ph> object from which the message is read.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The maximum size of the headers that can be read from the message.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.Message"&gt;&lt;/xref&gt;</ph> that is read from the stream specified.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, reads a message from a specified stream.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.ArraySegment`1"&gt;&lt;/xref&gt;</ph> of type <ph id="ph2">&lt;xref href="System.Byte"&gt;&lt;/xref&gt;</ph> that provides the buffer from which the message is deserialized.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.BufferManager"&gt;&lt;/xref&gt;</ph> that manages the buffer from which the message is deserialized.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The Multipurpose Internet Mail Extensions (MIME) message-level content-type.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.Message"&gt;&lt;/xref&gt;</ph> that is read from the stream specified.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, reads a message from a specified stream.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.Stream"&gt;&lt;/xref&gt;</ph> object from which the message is read.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The maximum size of the headers that can be read from the message.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The Multipurpose Internet Mail Extensions (MIME) message-level content-type.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.Message"&gt;&lt;/xref&gt;</ph> that is read from the stream specified.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Returns the content type that is used by the message encoder.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The content type that is used by the message encoder.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, writes a message to a specified stream.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.Message"&gt;&lt;/xref&gt;</ph> to write to the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">stream</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.Stream"&gt;&lt;/xref&gt;</ph> object to which the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">message</ph><ept id="p1">&lt;/code&gt;</ept> is written.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Writes a message less than a specified size to a byte array buffer.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method calls the abstract method <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageEncoder.WriteMessage%28System.ServiceModel.Channels.Message%2CSystem.Int32%2CSystem.ServiceModel.Channels.BufferManager%2CSystem.Int32%29&gt;</ph> with <ph id="ph2">`messageOffset`</ph> = 0.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.Message"&gt;&lt;/xref&gt;</ph> to write to the message buffer.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The maximum message size that can be written.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.BufferManager"&gt;&lt;/xref&gt;</ph> that manages the buffer to which the message is written.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.ArraySegment`1"&gt;&lt;/xref&gt;</ph> of type <ph id="ph2">`byte`</ph> that provides the buffer to which the message is serialized.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, writes a message of less than a specified size to a byte array buffer at the specified offset.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is called by <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageEncoder.WriteMessage%28System.ServiceModel.Channels.Message%2CSystem.Int32%2CSystem.ServiceModel.Channels.BufferManager%2CSystem.Int32%29&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.Message"&gt;&lt;/xref&gt;</ph> to write to the message buffer.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The maximum message size that can be written.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.BufferManager"&gt;&lt;/xref&gt;</ph> that manages the buffer to which the message is written.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The offset of the segment that begins from the start of the byte array that provides the buffer.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.ArraySegment`1"&gt;&lt;/xref&gt;</ph> of type <ph id="ph2">`byte`</ph> that provides the buffer to which the message is serialized.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>