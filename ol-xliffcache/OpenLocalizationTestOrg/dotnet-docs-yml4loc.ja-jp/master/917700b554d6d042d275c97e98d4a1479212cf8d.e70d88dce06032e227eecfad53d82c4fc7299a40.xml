{"nodes":[{"content":"Represents a string comparison operation that uses specific case and culture-based or ordinal comparison rules.","nodes":[{"pos":[0,111],"content":"Represents a string comparison operation that uses specific case and culture-based or ordinal comparison rules.","nodes":[{"content":"Represents a string comparison operation that uses specific case and culture-based or ordinal comparison rules.","pos":[0,111]}]}],"pos":[1444,1556],"yaml":true},{"content":"An object derived from the <xref:System.StringComparer> class embodies string-based comparison, equality, and hash code operations that take into account both case and culture-specific comparison rules. You can use the <xref:System.StringComparer> class to create a type-specific comparison to sort the elements in a generic collection. Classes such as <xref:System.Collections.Hashtable>, <xref:System.Collections.Generic.Dictionary%602>, <xref:System.Collections.SortedList>, and <xref:System.Collections.Generic.SortedList%602> use the <xref:System.StringComparer> class for sorting purposes.  \n  \n A comparison operation that is represented by the <xref:System.StringComparer> class is defined to be either case-sensitive or case-insensitive, and use either word (culture-sensitive) or ordinal (culture-insensitive) comparison rules. For more information about word and ordinal comparison rules, see <xref:System.Globalization.CompareOptions?displayProperty=fullName>.  \n  \n## Implemented Properties  \n You might be confused about how to use the <xref:System.StringComparer> class properties because of a seeming contradiction. The <xref:System.StringComparer> class is declared `abstract` (`MustInherit` in Visual Basic), which means its members can be invoked only on an object of a class derived from the <xref:System.StringComparer> class. The contradiction is that each property of the <xref:System.StringComparer> class is declared `static` (`Shared` in Visual Basic), which means the property can be invoked without first creating a derived class.  \n  \n You can call a <xref:System.StringComparer> property directly because each property actually returns an instance of an anonymous class that is derived from the <xref:System.StringComparer> class. Consequently, the type of each property value is <xref:System.StringComparer>, which is the base class of the anonymous class, not the type of the anonymous class itself. Each <xref:System.StringComparer> class property returns a <xref:System.StringComparer> object that supports predefined case and comparison rules.","nodes":[{"pos":[0,595],"content":"An object derived from the <xref:System.StringComparer> class embodies string-based comparison, equality, and hash code operations that take into account both case and culture-specific comparison rules. You can use the <xref:System.StringComparer> class to create a type-specific comparison to sort the elements in a generic collection. Classes such as <xref:System.Collections.Hashtable>, <xref:System.Collections.Generic.Dictionary%602>, <xref:System.Collections.SortedList>, and <xref:System.Collections.Generic.SortedList%602> use the <xref:System.StringComparer> class for sorting purposes.","nodes":[{"content":"An object derived from the <xref:System.StringComparer> class embodies string-based comparison, equality, and hash code operations that take into account both case and culture-specific comparison rules. You can use the <xref:System.StringComparer> class to create a type-specific comparison to sort the elements in a generic collection. Classes such as <xref:System.Collections.Hashtable>, <xref:System.Collections.Generic.Dictionary%602>, <xref:System.Collections.SortedList>, and <xref:System.Collections.Generic.SortedList%602> use the <xref:System.StringComparer> class for sorting purposes.","pos":[0,595],"nodes":[{"content":"An object derived from the <ph id=\"ph1\">&lt;xref:System.StringComparer&gt;</ph> class embodies string-based comparison, equality, and hash code operations that take into account both case and culture-specific comparison rules.","pos":[0,202],"source":"An object derived from the <xref:System.StringComparer> class embodies string-based comparison, equality, and hash code operations that take into account both case and culture-specific comparison rules."},{"content":"You can use the <ph id=\"ph1\">&lt;xref:System.StringComparer&gt;</ph> class to create a type-specific comparison to sort the elements in a generic collection.","pos":[203,336],"source":" You can use the <xref:System.StringComparer> class to create a type-specific comparison to sort the elements in a generic collection."},{"content":"Classes such as <ph id=\"ph1\">&lt;xref:System.Collections.Hashtable&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Collections.SortedList&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> use the <ph id=\"ph5\">&lt;xref:System.StringComparer&gt;</ph> class for sorting purposes.","pos":[337,595],"source":" Classes such as <xref:System.Collections.Hashtable>, <xref:System.Collections.Generic.Dictionary%602>, <xref:System.Collections.SortedList>, and <xref:System.Collections.Generic.SortedList%602> use the <xref:System.StringComparer> class for sorting purposes."}]}]},{"pos":[602,972],"content":"A comparison operation that is represented by the <xref:System.StringComparer> class is defined to be either case-sensitive or case-insensitive, and use either word (culture-sensitive) or ordinal (culture-insensitive) comparison rules. For more information about word and ordinal comparison rules, see <xref:System.Globalization.CompareOptions?displayProperty=fullName>.","nodes":[{"content":"A comparison operation that is represented by the <xref:System.StringComparer> class is defined to be either case-sensitive or case-insensitive, and use either word (culture-sensitive) or ordinal (culture-insensitive) comparison rules. For more information about word and ordinal comparison rules, see <xref:System.Globalization.CompareOptions?displayProperty=fullName>.","pos":[0,370],"nodes":[{"content":"A comparison operation that is represented by the <ph id=\"ph1\">&lt;xref:System.StringComparer&gt;</ph> class is defined to be either case-sensitive or case-insensitive, and use either word (culture-sensitive) or ordinal (culture-insensitive) comparison rules.","pos":[0,235],"source":"A comparison operation that is represented by the <xref:System.StringComparer> class is defined to be either case-sensitive or case-insensitive, and use either word (culture-sensitive) or ordinal (culture-insensitive) comparison rules."},{"content":"For more information about word and ordinal comparison rules, see <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph>.","pos":[236,370],"source":" For more information about word and ordinal comparison rules, see <xref:System.Globalization.CompareOptions?displayProperty=fullName>."}]}]},{"pos":[981,1003],"content":"Implemented Properties","linkify":"Implemented Properties","nodes":[{"content":"Implemented Properties","pos":[0,22]}]},{"pos":[1007,1558],"content":"You might be confused about how to use the <xref:System.StringComparer> class properties because of a seeming contradiction. The <xref:System.StringComparer> class is declared `abstract` (`MustInherit` in Visual Basic), which means its members can be invoked only on an object of a class derived from the <xref:System.StringComparer> class. The contradiction is that each property of the <xref:System.StringComparer> class is declared `static` (`Shared` in Visual Basic), which means the property can be invoked without first creating a derived class.","nodes":[{"content":"You might be confused about how to use the <ph id=\"ph1\">&lt;xref:System.StringComparer&gt;</ph> class properties because of a seeming contradiction.","pos":[0,124],"source":"You might be confused about how to use the <xref:System.StringComparer> class properties because of a seeming contradiction."},{"content":"The <ph id=\"ph1\">&lt;xref:System.StringComparer&gt;</ph> class is declared <ph id=\"ph2\">`abstract`</ph> (<ph id=\"ph3\">`MustInherit`</ph> in Visual Basic), which means its members can be invoked only on an object of a class derived from the <ph id=\"ph4\">&lt;xref:System.StringComparer&gt;</ph> class.","pos":[125,340],"source":" The <xref:System.StringComparer> class is declared `abstract` (`MustInherit` in Visual Basic), which means its members can be invoked only on an object of a class derived from the <xref:System.StringComparer> class."},{"content":"The contradiction is that each property of the <ph id=\"ph1\">&lt;xref:System.StringComparer&gt;</ph> class is declared <ph id=\"ph2\">`static`</ph> (<ph id=\"ph3\">`Shared`</ph> in Visual Basic), which means the property can be invoked without first creating a derived class.","pos":[341,551],"source":" The contradiction is that each property of the <xref:System.StringComparer> class is declared `static` (`Shared` in Visual Basic), which means the property can be invoked without first creating a derived class."}]},{"pos":[1565,2078],"content":"You can call a <xref:System.StringComparer> property directly because each property actually returns an instance of an anonymous class that is derived from the <xref:System.StringComparer> class. Consequently, the type of each property value is <xref:System.StringComparer>, which is the base class of the anonymous class, not the type of the anonymous class itself. Each <xref:System.StringComparer> class property returns a <xref:System.StringComparer> object that supports predefined case and comparison rules.","nodes":[{"content":"You can call a <xref:System.StringComparer> property directly because each property actually returns an instance of an anonymous class that is derived from the <xref:System.StringComparer> class. Consequently, the type of each property value is <xref:System.StringComparer>, which is the base class of the anonymous class, not the type of the anonymous class itself. Each <xref:System.StringComparer> class property returns a <xref:System.StringComparer> object that supports predefined case and comparison rules.","pos":[0,513],"nodes":[{"content":"You can call a <ph id=\"ph1\">&lt;xref:System.StringComparer&gt;</ph> property directly because each property actually returns an instance of an anonymous class that is derived from the <ph id=\"ph2\">&lt;xref:System.StringComparer&gt;</ph> class.","pos":[0,195],"source":"You can call a <xref:System.StringComparer> property directly because each property actually returns an instance of an anonymous class that is derived from the <xref:System.StringComparer> class."},{"content":"Consequently, the type of each property value is <ph id=\"ph1\">&lt;xref:System.StringComparer&gt;</ph>, which is the base class of the anonymous class, not the type of the anonymous class itself.","pos":[196,366],"source":" Consequently, the type of each property value is <xref:System.StringComparer>, which is the base class of the anonymous class, not the type of the anonymous class itself."},{"content":"Each <ph id=\"ph1\">&lt;xref:System.StringComparer&gt;</ph> class property returns a <ph id=\"ph2\">&lt;xref:System.StringComparer&gt;</ph> object that supports predefined case and comparison rules.","pos":[367,513],"source":" Each <xref:System.StringComparer> class property returns a <xref:System.StringComparer> object that supports predefined case and comparison rules."}]}]}],"pos":[1567,3655],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.StringComparer\"></xref> class.","nodes":[{"pos":[0,83],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.StringComparer\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.StringComparer\"></xref> class."}],"pos":[6619,6703],"yaml":true},{"content":"When overridden in a derived class, compares two objects and returns an indication of their relative sort order.","nodes":[{"pos":[0,112],"content":"When overridden in a derived class, compares two objects and returns an indication of their relative sort order.","nodes":[{"content":"When overridden in a derived class, compares two objects and returns an indication of their relative sort order.","pos":[0,112]}]}],"pos":[8386,8499],"yaml":true},{"content":"The <xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=fullName> method is slightly more efficient than the <xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=fullName> method because no conversion of the `x` and `y` arguments is needed to perform the comparison.","nodes":[{"pos":[0,335],"content":"The <ph id=\"ph1\">&lt;xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=fullName&gt;</ph> method is slightly more efficient than the <ph id=\"ph2\">&lt;xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=fullName&gt;</ph> method because no conversion of the <ph id=\"ph3\">`x`</ph> and <ph id=\"ph4\">`y`</ph> arguments is needed to perform the comparison.","source":"The <xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=fullName> method is slightly more efficient than the <xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=fullName> method because no conversion of the `x` and `y` arguments is needed to perform the comparison."}],"pos":[8510,8846],"yaml":true,"extradata":"MT"},{"content":"An object to compare to <code>y</code>.","nodes":[{"pos":[0,39],"content":"An object to compare to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">y</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An object to compare to <code>y</code>."}],"pos":[8983,9023],"yaml":true},{"content":"An object to compare to <code>x</code>.","nodes":[{"pos":[0,39],"content":"An object to compare to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">x</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An object to compare to <code>x</code>."}],"pos":[9080,9120],"yaml":true},{"content":"A signed integer that indicates the relative values of <code>x</code> and <code>y</code>, as shown in the following table.  \n  \n <table><thead><tr><th> Value  \n  \n </th><th> Meaning  \n  \n </th></tr></thead><tbody><tr><td> Less than zero  \n  \n </td><td><code>x</code> precedes  <code>y</code> in the sort order.  \n  \n -or-  \n  \n <code>x</code> is `null` and <code>y</code> is not `null`.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td><code>x</code> is equal to <code>y</code>.  \n  \n -or-  \n  \n <code>x</code> and <code>y</code> are both `null`.  \n  \n </td></tr><tr><td> Greater than zero  \n  \n </td><td><code>x</code> follows <code>y</code> in the sort order.  \n  \n -or-  \n  \n <code>y</code> is `null` and <code>x</code> is not `null`.  \n  \n </td></tr></tbody></table>","nodes":[{"pos":[0,122],"content":"A signed integer that indicates the relative values of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">x</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">y</ph><ept id=\"p2\">&lt;/code&gt;</ept>, as shown in the following table.","source":"A signed integer that indicates the relative values of <code>x</code> and <code>y</code>, as shown in the following table."},{"pos":[129,310],"content":"<table><thead><tr><th> Value  \n  \n </th><th> Meaning  \n  \n </th></tr></thead><tbody><tr><td> Less than zero  \n  \n </td><td><code>x</code> precedes  <code>y</code> in the sort order.","nodes":[{"content":"Value","pos":[23,33],"source":" Value  \n  \n "},{"content":"Meaning","pos":[45,57],"source":" Meaning  \n  \n "},{"content":"Less than zero","pos":[93,112],"source":" Less than zero  \n  \n "},{"content":"<ph id=\"ph1\">&lt;code&gt;x&lt;/code&gt;</ph> precedes  <ph id=\"ph2\">&lt;code&gt;y&lt;/code&gt;</ph> in the sort order.","pos":[123,181],"source":"<code>x</code> precedes  <code>y</code> in the sort order."}]},{"pos":[317,321],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[328,474],"content":"<code>x</code> is `null` and <code>y</code> is not `null`.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td><code>x</code> is equal to <code>y</code>.","nodes":[{"content":"<code>x</code> is `null` and <code>y</code> is not `null`.  \n  \n ","pos":[0,65],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;x&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> and <ph id=\"ph3\">&lt;code&gt;y&lt;/code&gt;</ph> is not <ph id=\"ph4\">`null`</ph>.","pos":[0,58],"source":"<code>x</code> is `null` and <code>y</code> is not `null`."}]},{"content":"Zero","pos":[84,93],"source":" Zero  \n  \n "},{"content":"<ph id=\"ph1\">&lt;code&gt;x&lt;/code&gt;</ph> is equal to <ph id=\"ph2\">&lt;code&gt;y&lt;/code&gt;</ph>.","pos":[104,146],"source":"<code>x</code> is equal to <code>y</code>."}]},{"pos":[481,485],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[492,657],"content":"<code>x</code> and <code>y</code> are both `null`.  \n  \n </td></tr><tr><td> Greater than zero  \n  \n </td><td><code>x</code> follows <code>y</code> in the sort order.","nodes":[{"content":"<code>x</code> and <code>y</code> are both `null`.  \n  \n ","pos":[0,57],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;x&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;y&lt;/code&gt;</ph> are both <ph id=\"ph3\">`null`</ph>.","pos":[0,50],"source":"<code>x</code> and <code>y</code> are both `null`."}]},{"content":"Greater than zero","pos":[76,98],"source":" Greater than zero  \n  \n "},{"content":"<ph id=\"ph1\">&lt;code&gt;x&lt;/code&gt;</ph> follows <ph id=\"ph2\">&lt;code&gt;y&lt;/code&gt;</ph> in the sort order.","pos":[109,165],"source":"<code>x</code> follows <code>y</code> in the sort order."}]},{"pos":[664,668],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[675,767],"content":"<code>y</code> is `null` and <code>x</code> is not `null`.  \n  \n </td></tr></tbody></table>","nodes":[{"content":"<code>y</code> is `null` and <code>x</code> is not `null`.  \n  \n ","pos":[0,65],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;y&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> and <ph id=\"ph3\">&lt;code&gt;x&lt;/code&gt;</ph> is not <ph id=\"ph4\">`null`</ph>.","pos":[0,58],"source":"<code>y</code> is `null` and <code>x</code> is not `null`."}]}]}],"pos":[9176,9975],"yaml":true},{"content":"Neither <code>x</code> nor <code>y</code> is a <xref href=\"System.String\"></xref> object, and neither <code>x</code> nor <code>y</code> implements the <xref href=\"System.IComparable\"></xref> interface.","nodes":[{"pos":[0,201],"content":"Neither <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">x</ph><ept id=\"p1\">&lt;/code&gt;</ept> nor <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">y</ph><ept id=\"p2\">&lt;/code&gt;</ept> is a <ph id=\"ph3\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> object, and neither <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">x</ph><ept id=\"p3\">&lt;/code&gt;</ept> nor <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph5\">y</ph><ept id=\"p4\">&lt;/code&gt;</ept> implements the <ph id=\"ph6\">&lt;xref href=\"System.IComparable\"&gt;&lt;/xref&gt;</ph> interface.","source":"Neither <code>x</code> nor <code>y</code> is a <xref href=\"System.String\"></xref> object, and neither <code>x</code> nor <code>y</code> implements the <xref href=\"System.IComparable\"></xref> interface."}],"pos":[10126,10328],"yaml":true},{"content":"When overridden in a derived class, compares two strings and returns an indication of their relative sort order.","nodes":[{"pos":[0,112],"content":"When overridden in a derived class, compares two strings and returns an indication of their relative sort order.","nodes":[{"content":"When overridden in a derived class, compares two strings and returns an indication of their relative sort order.","pos":[0,112]}]}],"pos":[11538,11651],"yaml":true},{"content":"The <xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=fullName> method is slightly more efficient than the <xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=fullName> method because no conversion of the `x` and `y` arguments is needed to perform the comparison.","nodes":[{"pos":[0,335],"content":"The <ph id=\"ph1\">&lt;xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=fullName&gt;</ph> method is slightly more efficient than the <ph id=\"ph2\">&lt;xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=fullName&gt;</ph> method because no conversion of the <ph id=\"ph3\">`x`</ph> and <ph id=\"ph4\">`y`</ph> arguments is needed to perform the comparison.","source":"The <xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=fullName> method is slightly more efficient than the <xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=fullName> method because no conversion of the `x` and `y` arguments is needed to perform the comparison."}],"pos":[11662,11998],"yaml":true,"extradata":"MT"},{"content":"A string to compare to <code>y</code>.","nodes":[{"pos":[0,38],"content":"A string to compare to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">y</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A string to compare to <code>y</code>."}],"pos":[12144,12183],"yaml":true},{"content":"A string to compare to <code>x</code>.","nodes":[{"pos":[0,38],"content":"A string to compare to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">x</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A string to compare to <code>x</code>."}],"pos":[12240,12279],"yaml":true},{"content":"A signed integer that indicates the relative values of <code>x</code> and <code>y</code>, as shown in the following table.  \n  \n <table><thead><tr><th> Value  \n  \n </th><th> Meaning  \n  \n </th></tr></thead><tbody><tr><td> Less than zero  \n  \n </td><td><code>x</code> precedes <code>y</code> in the sort order.  \n  \n -or-  \n  \n <code>x</code> is `null` and <code>y</code> is not `null`.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td><code>x</code> is equal to <code>y</code>.  \n  \n -or-  \n  \n <code>x</code> and <code>y</code> are both `null`.  \n  \n </td></tr><tr><td> Greater than zero  \n  \n </td><td><code>x</code> follows <code>y</code> in the sort order.  \n  \n -or-  \n  \n <code>y</code> is `null` and <code>x</code> is not `null`.  \n  \n </td></tr></tbody></table>","nodes":[{"pos":[0,122],"content":"A signed integer that indicates the relative values of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">x</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">y</ph><ept id=\"p2\">&lt;/code&gt;</ept>, as shown in the following table.","source":"A signed integer that indicates the relative values of <code>x</code> and <code>y</code>, as shown in the following table."},{"pos":[129,309],"content":"<table><thead><tr><th> Value  \n  \n </th><th> Meaning  \n  \n </th></tr></thead><tbody><tr><td> Less than zero  \n  \n </td><td><code>x</code> precedes <code>y</code> in the sort order.","nodes":[{"content":"Value","pos":[23,33],"source":" Value  \n  \n "},{"content":"Meaning","pos":[45,57],"source":" Meaning  \n  \n "},{"content":"Less than zero","pos":[93,112],"source":" Less than zero  \n  \n "},{"content":"<ph id=\"ph1\">&lt;code&gt;x&lt;/code&gt;</ph> precedes <ph id=\"ph2\">&lt;code&gt;y&lt;/code&gt;</ph> in the sort order.","pos":[123,180],"source":"<code>x</code> precedes <code>y</code> in the sort order."}]},{"pos":[316,320],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[327,473],"content":"<code>x</code> is `null` and <code>y</code> is not `null`.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td><code>x</code> is equal to <code>y</code>.","nodes":[{"content":"<code>x</code> is `null` and <code>y</code> is not `null`.  \n  \n ","pos":[0,65],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;x&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> and <ph id=\"ph3\">&lt;code&gt;y&lt;/code&gt;</ph> is not <ph id=\"ph4\">`null`</ph>.","pos":[0,58],"source":"<code>x</code> is `null` and <code>y</code> is not `null`."}]},{"content":"Zero","pos":[84,93],"source":" Zero  \n  \n "},{"content":"<ph id=\"ph1\">&lt;code&gt;x&lt;/code&gt;</ph> is equal to <ph id=\"ph2\">&lt;code&gt;y&lt;/code&gt;</ph>.","pos":[104,146],"source":"<code>x</code> is equal to <code>y</code>."}]},{"pos":[480,484],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[491,656],"content":"<code>x</code> and <code>y</code> are both `null`.  \n  \n </td></tr><tr><td> Greater than zero  \n  \n </td><td><code>x</code> follows <code>y</code> in the sort order.","nodes":[{"content":"<code>x</code> and <code>y</code> are both `null`.  \n  \n ","pos":[0,57],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;x&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;y&lt;/code&gt;</ph> are both <ph id=\"ph3\">`null`</ph>.","pos":[0,50],"source":"<code>x</code> and <code>y</code> are both `null`."}]},{"content":"Greater than zero","pos":[76,98],"source":" Greater than zero  \n  \n "},{"content":"<ph id=\"ph1\">&lt;code&gt;x&lt;/code&gt;</ph> follows <ph id=\"ph2\">&lt;code&gt;y&lt;/code&gt;</ph> in the sort order.","pos":[109,165],"source":"<code>x</code> follows <code>y</code> in the sort order."}]},{"pos":[663,667],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[674,766],"content":"<code>y</code> is `null` and <code>x</code> is not `null`.  \n  \n </td></tr></tbody></table>","nodes":[{"content":"<code>y</code> is `null` and <code>x</code> is not `null`.  \n  \n ","pos":[0,65],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;y&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> and <ph id=\"ph3\">&lt;code&gt;x&lt;/code&gt;</ph> is not <ph id=\"ph4\">`null`</ph>.","pos":[0,58],"source":"<code>y</code> is `null` and <code>x</code> is not `null`."}]}]}],"pos":[12335,13133],"yaml":true},{"content":"Creates a <xref href=\"System.StringComparer\"></xref> object that compares strings according to the rules of a specified culture.","nodes":[{"pos":[0,128],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.StringComparer\"&gt;&lt;/xref&gt;</ph> object that compares strings according to the rules of a specified culture.","source":"Creates a <xref href=\"System.StringComparer\"></xref> object that compares strings according to the rules of a specified culture."}],"pos":[14819,14948],"yaml":true},{"content":"A culture whose linguistic rules are used to perform a string comparison.","nodes":[{"pos":[0,73],"content":"A culture whose linguistic rules are used to perform a string comparison.","nodes":[{"content":"A culture whose linguistic rules are used to perform a string comparison.","pos":[0,73]}]}],"pos":[15851,15925],"yaml":true},{"content":"`true` to specify that comparison operations be case-insensitive; `false` to specify that comparison operations be case-sensitive.","nodes":[{"pos":[0,130],"content":"<ph id=\"ph1\">`true`</ph> to specify that comparison operations be case-insensitive; <ph id=\"ph2\">`false`</ph> to specify that comparison operations be case-sensitive.","source":"`true` to specify that comparison operations be case-insensitive; `false` to specify that comparison operations be case-sensitive."}],"pos":[15992,16125],"yaml":true},{"content":"A new <xref href=\"System.StringComparer\"></xref> object that performs string comparisons according to the comparison rules used by the <code>culture</code> parameter and the case rule specified by the <code>ignoreCase</code> parameter.","nodes":[{"pos":[0,235],"content":"A new <ph id=\"ph1\">&lt;xref href=\"System.StringComparer\"&gt;&lt;/xref&gt;</ph> object that performs string comparisons according to the comparison rules used by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">culture</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter and the case rule specified by the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">ignoreCase</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter.","source":"A new <xref href=\"System.StringComparer\"></xref> object that performs string comparisons according to the comparison rules used by the <code>culture</code> parameter and the case rule specified by the <code>ignoreCase</code> parameter."}],"pos":[16190,16426],"yaml":true},{"content":"<code>culture</code> is `null`.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;culture&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>culture</code> is `null`."}],"pos":[16584,16616],"yaml":true},{"content":"Gets a <xref href=\"System.StringComparer\"></xref> object that performs a case-sensitive string comparison using the word comparison rules of the current culture.","nodes":[{"pos":[0,161],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"System.StringComparer\"&gt;&lt;/xref&gt;</ph> object that performs a case-sensitive string comparison using the word comparison rules of the current culture.","source":"Gets a <xref href=\"System.StringComparer\"></xref> object that performs a case-sensitive string comparison using the word comparison rules of the current culture."}],"pos":[17735,17897],"yaml":true},{"content":"The<xref:System.StringComparer> returned by the <xref:System.StringComparer.CurrentCulture%2A> property can be used when strings are linguistically relevant. For example, if strings are displayed to the user, or if strings are the result of user interaction, culture-sensitive string comparison should be used to order the string data.  \n  \n The current culture is the <xref:System.Globalization.CultureInfo> object associated with the current thread.  \n  \n The <xref:System.StringComparer.CurrentCulture%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.  \n  \n Each call to the <xref:System.StringComparer.CurrentCulture%2A> property `get` accessor returns a new <xref:System.StringComparer> object, as the following code shows.  \n  \n [!code-csharp[System.StringComparer.CurrentCulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/cs/CompareObjects.cs#1)]\n [!code-vb[System.StringComparer.CurrentCulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/vb/CompareObjects.vb#1)]  \n  \n To improve performance, you can store the <xref:System.StringComparer> object in a local variable rather than retrieve the value of the <xref:System.StringComparer.CurrentCulture%2A> property multiple times.","nodes":[{"pos":[0,335],"content":"The<xref:System.StringComparer> returned by the <xref:System.StringComparer.CurrentCulture%2A> property can be used when strings are linguistically relevant. For example, if strings are displayed to the user, or if strings are the result of user interaction, culture-sensitive string comparison should be used to order the string data.","nodes":[{"content":"The<xref:System.StringComparer> returned by the <xref:System.StringComparer.CurrentCulture%2A> property can be used when strings are linguistically relevant. For example, if strings are displayed to the user, or if strings are the result of user interaction, culture-sensitive string comparison should be used to order the string data.","pos":[0,335],"nodes":[{"content":"The<ph id=\"ph1\">&lt;xref:System.StringComparer&gt;</ph> returned by the <ph id=\"ph2\">&lt;xref:System.StringComparer.CurrentCulture%2A&gt;</ph> property can be used when strings are linguistically relevant.","pos":[0,157],"source":"The<xref:System.StringComparer> returned by the <xref:System.StringComparer.CurrentCulture%2A> property can be used when strings are linguistically relevant."},{"content":"For example, if strings are displayed to the user, or if strings are the result of user interaction, culture-sensitive string comparison should be used to order the string data.","pos":[158,335]}]}]},{"pos":[342,451],"content":"The current culture is the <xref:System.Globalization.CultureInfo> object associated with the current thread.","nodes":[{"content":"The current culture is the <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object associated with the current thread.","pos":[0,109],"source":"The current culture is the <xref:System.Globalization.CultureInfo> object associated with the current thread."}]},{"pos":[458,621],"content":"The <xref:System.StringComparer.CurrentCulture%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.StringComparer.CurrentCulture%2A&gt;</ph> property actually returns an instance of an anonymous class derived from the <ph id=\"ph2\">&lt;xref:System.StringComparer&gt;</ph> class.","pos":[0,163],"source":"The <xref:System.StringComparer.CurrentCulture%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class."}]},{"pos":[628,795],"content":"Each call to the <ph id=\"ph1\">&lt;xref:System.StringComparer.CurrentCulture%2A&gt;</ph> property <ph id=\"ph2\">`get`</ph> accessor returns a new <ph id=\"ph3\">&lt;xref:System.StringComparer&gt;</ph> object, as the following code shows.","source":"Each call to the <xref:System.StringComparer.CurrentCulture%2A> property `get` accessor returns a new <xref:System.StringComparer> object, as the following code shows."},{"pos":[802,1133],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.StringComparer.CurrentCulture#1<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/cs/CompareObjects.cs#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.StringComparer.CurrentCulture#1<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/vb/CompareObjects.vb#1)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.StringComparer.CurrentCulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/cs/CompareObjects.cs#1)]\n [!code-vb[System.StringComparer.CurrentCulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/vb/CompareObjects.vb#1)]"},{"pos":[1140,1347],"content":"To improve performance, you can store the <xref:System.StringComparer> object in a local variable rather than retrieve the value of the <xref:System.StringComparer.CurrentCulture%2A> property multiple times.","nodes":[{"content":"To improve performance, you can store the <ph id=\"ph1\">&lt;xref:System.StringComparer&gt;</ph> object in a local variable rather than retrieve the value of the <ph id=\"ph2\">&lt;xref:System.StringComparer.CurrentCulture%2A&gt;</ph> property multiple times.","pos":[0,207],"source":"To improve performance, you can store the <xref:System.StringComparer> object in a local variable rather than retrieve the value of the <xref:System.StringComparer.CurrentCulture%2A> property multiple times."}]}],"pos":[17908,19269],"yaml":true,"extradata":"MT"},{"content":"A new <xref href=\"System.StringComparer\"></xref> object.","nodes":[{"pos":[0,56],"content":"A new <ph id=\"ph1\">&lt;xref href=\"System.StringComparer\"&gt;&lt;/xref&gt;</ph> object.","source":"A new <xref href=\"System.StringComparer\"></xref> object."}],"pos":[20081,20138],"yaml":true},{"content":"Gets a <xref href=\"System.StringComparer\"></xref> object that performs case-insensitive string comparisons using the word comparison rules of the current culture.","nodes":[{"pos":[0,162],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"System.StringComparer\"&gt;&lt;/xref&gt;</ph> object that performs case-insensitive string comparisons using the word comparison rules of the current culture.","source":"Gets a <xref href=\"System.StringComparer\"></xref> object that performs case-insensitive string comparisons using the word comparison rules of the current culture."}],"pos":[21728,21891],"yaml":true},{"content":"The current culture is the <xref:System.Globalization.CultureInfo> object associated with the current thread.  \n  \n The<xref:System.StringComparer> returned by the <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property can be used when strings are linguistically relevant but their case is not. For example, if strings are displayed to the user but case is unimportant, culture-sensitive, case-insensitive string comparison should be used to order the string data.  \n  \n The <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.  \n  \n Each call to the <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property `get` accessor returns a new <xref:System.StringComparer> object, as the following code shows.  \n  \n [!code-csharp[System.StringComparer.CurrentCulture#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/cs/CompareObjects.cs#2)]\n [!code-vb[System.StringComparer.CurrentCulture#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/vb/CompareObjects.vb#2)]  \n  \n To improve performance, you can store the <xref:System.StringComparer> object in a local variable rather than retrieve the value of the <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property multiple times.","nodes":[{"pos":[0,109],"content":"The current culture is the <xref:System.Globalization.CultureInfo> object associated with the current thread.","nodes":[{"content":"The current culture is the <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object associated with the current thread.","pos":[0,109],"source":"The current culture is the <xref:System.Globalization.CultureInfo> object associated with the current thread."}]},{"pos":[116,475],"content":"The<xref:System.StringComparer> returned by the <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property can be used when strings are linguistically relevant but their case is not. For example, if strings are displayed to the user but case is unimportant, culture-sensitive, case-insensitive string comparison should be used to order the string data.","nodes":[{"content":"The<xref:System.StringComparer> returned by the <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property can be used when strings are linguistically relevant but their case is not. For example, if strings are displayed to the user but case is unimportant, culture-sensitive, case-insensitive string comparison should be used to order the string data.","pos":[0,359],"nodes":[{"content":"The<ph id=\"ph1\">&lt;xref:System.StringComparer&gt;</ph> returned by the <ph id=\"ph2\">&lt;xref:System.StringComparer.CurrentCultureIgnoreCase%2A&gt;</ph> property can be used when strings are linguistically relevant but their case is not.","pos":[0,189],"source":"The<xref:System.StringComparer> returned by the <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property can be used when strings are linguistically relevant but their case is not."},{"content":"For example, if strings are displayed to the user but case is unimportant, culture-sensitive, case-insensitive string comparison should be used to order the string data.","pos":[190,359]}]}]},{"pos":[482,655],"content":"The <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.StringComparer.CurrentCultureIgnoreCase%2A&gt;</ph> property actually returns an instance of an anonymous class derived from the <ph id=\"ph2\">&lt;xref:System.StringComparer&gt;</ph> class.","pos":[0,173],"source":"The <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class."}]},{"pos":[662,839],"content":"Each call to the <ph id=\"ph1\">&lt;xref:System.StringComparer.CurrentCultureIgnoreCase%2A&gt;</ph> property <ph id=\"ph2\">`get`</ph> accessor returns a new <ph id=\"ph3\">&lt;xref:System.StringComparer&gt;</ph> object, as the following code shows.","source":"Each call to the <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property `get` accessor returns a new <xref:System.StringComparer> object, as the following code shows."},{"pos":[846,1177],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.StringComparer.CurrentCulture#2<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/cs/CompareObjects.cs#2)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.StringComparer.CurrentCulture#2<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/vb/CompareObjects.vb#2)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.StringComparer.CurrentCulture#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/cs/CompareObjects.cs#2)]\n [!code-vb[System.StringComparer.CurrentCulture#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/vb/CompareObjects.vb#2)]"},{"pos":[1184,1401],"content":"To improve performance, you can store the <xref:System.StringComparer> object in a local variable rather than retrieve the value of the <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property multiple times.","nodes":[{"content":"To improve performance, you can store the <ph id=\"ph1\">&lt;xref:System.StringComparer&gt;</ph> object in a local variable rather than retrieve the value of the <ph id=\"ph2\">&lt;xref:System.StringComparer.CurrentCultureIgnoreCase%2A&gt;</ph> property multiple times.","pos":[0,217],"source":"To improve performance, you can store the <xref:System.StringComparer> object in a local variable rather than retrieve the value of the <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property multiple times."}]}],"pos":[21902,23317],"yaml":true,"extradata":"MT"},{"content":"A new <xref href=\"System.StringComparer\"></xref> object.","nodes":[{"pos":[0,56],"content":"A new <ph id=\"ph1\">&lt;xref href=\"System.StringComparer\"&gt;&lt;/xref&gt;</ph> object.","source":"A new <xref href=\"System.StringComparer\"></xref> object."}],"pos":[23468,23525],"yaml":true},{"content":"When overridden in a derived class, indicates whether two objects are equal.","nodes":[{"pos":[0,76],"content":"When overridden in a derived class, indicates whether two objects are equal.","nodes":[{"content":"When overridden in a derived class, indicates whether two objects are equal.","pos":[0,76]}]}],"pos":[25150,25227],"yaml":true},{"content":"Because the runtime does not have to unbox `x` or `y` if they are value types or attempt to downcast `x` or `y` to strings if they are reference types, the <xref:System.StringComparer.Equals%28System.String%2CSystem.String%29> method may be slightly more efficient than the <xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29> method.","nodes":[{"pos":[0,352],"content":"Because the runtime does not have to unbox <ph id=\"ph1\">`x`</ph> or <ph id=\"ph2\">`y`</ph> if they are value types or attempt to downcast <ph id=\"ph3\">`x`</ph> or <ph id=\"ph4\">`y`</ph> to strings if they are reference types, the <ph id=\"ph5\">&lt;xref:System.StringComparer.Equals%28System.String%2CSystem.String%29&gt;</ph> method may be slightly more efficient than the <ph id=\"ph6\">&lt;xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29&gt;</ph> method.","source":"Because the runtime does not have to unbox `x` or `y` if they are value types or attempt to downcast `x` or `y` to strings if they are reference types, the <xref:System.StringComparer.Equals%28System.String%2CSystem.String%29> method may be slightly more efficient than the <xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29> method."}],"pos":[25238,25591],"yaml":true,"extradata":"MT"},{"content":"An object to compare to <code>y</code>.","nodes":[{"pos":[0,39],"content":"An object to compare to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">y</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An object to compare to <code>y</code>."}],"pos":[25728,25768],"yaml":true},{"content":"An object to compare to <code>x</code>.","nodes":[{"pos":[0,39],"content":"An object to compare to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">x</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An object to compare to <code>x</code>."}],"pos":[25825,25865],"yaml":true},{"content":"`true` if <code>x</code> and <code>y</code> refer to the same object, or <code>x</code> and <code>y</code> are both the same type of object and those objects are equal, or both <code>x</code> and <code>y</code> are `null`; otherwise, `false`.","nodes":[{"pos":[0,242],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">x</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">y</ph><ept id=\"p2\">&lt;/code&gt;</ept> refer to the same object, or <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">x</ph><ept id=\"p3\">&lt;/code&gt;</ept> and <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph5\">y</ph><ept id=\"p4\">&lt;/code&gt;</ept> are both the same type of object and those objects are equal, or both <bpt id=\"p5\">&lt;code&gt;</bpt><ph id=\"ph6\">x</ph><ept id=\"p5\">&lt;/code&gt;</ept> and <bpt id=\"p6\">&lt;code&gt;</bpt><ph id=\"ph7\">y</ph><ept id=\"p6\">&lt;/code&gt;</ept> are <ph id=\"ph8\">`null`</ph>; otherwise, <ph id=\"ph9\">`false`</ph>.","source":"`true` if <code>x</code> and <code>y</code> refer to the same object, or <code>x</code> and <code>y</code> are both the same type of object and those objects are equal, or both <code>x</code> and <code>y</code> are `null`; otherwise, `false`."}],"pos":[25923,26168],"yaml":true},{"content":"When overridden in a derived class, indicates whether two strings are equal.","nodes":[{"pos":[0,76],"content":"When overridden in a derived class, indicates whether two strings are equal.","nodes":[{"content":"When overridden in a derived class, indicates whether two strings are equal.","pos":[0,76]}]}],"pos":[27431,27508],"yaml":true},{"content":"Because the runtime does not have to unbox `x` or `y` if they are value types or attempt to downcast `x` or `y` to strings if they are reference types, the <xref:System.StringComparer.Equals%28System.String%2CSystem.String%29> method may be slightly more efficient than the <xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29> method.","nodes":[{"pos":[0,352],"content":"Because the runtime does not have to unbox <ph id=\"ph1\">`x`</ph> or <ph id=\"ph2\">`y`</ph> if they are value types or attempt to downcast <ph id=\"ph3\">`x`</ph> or <ph id=\"ph4\">`y`</ph> to strings if they are reference types, the <ph id=\"ph5\">&lt;xref:System.StringComparer.Equals%28System.String%2CSystem.String%29&gt;</ph> method may be slightly more efficient than the <ph id=\"ph6\">&lt;xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29&gt;</ph> method.","source":"Because the runtime does not have to unbox `x` or `y` if they are value types or attempt to downcast `x` or `y` to strings if they are reference types, the <xref:System.StringComparer.Equals%28System.String%2CSystem.String%29> method may be slightly more efficient than the <xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29> method."}],"pos":[27519,27872],"yaml":true,"extradata":"MT"},{"content":"A string to compare to <code>y</code>.","nodes":[{"pos":[0,38],"content":"A string to compare to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">y</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A string to compare to <code>y</code>."}],"pos":[28018,28057],"yaml":true},{"content":"A string to compare to <code>x</code>.","nodes":[{"pos":[0,38],"content":"A string to compare to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">x</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A string to compare to <code>x</code>."}],"pos":[28114,28153],"yaml":true},{"content":"`true` if <code>x</code> and <code>y</code> refer to the same object, or <code>x</code> and <code>y</code> are equal, or <code>x</code> and <code>y</code> are `null`; otherwise, `false`.","nodes":[{"pos":[0,186],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">x</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">y</ph><ept id=\"p2\">&lt;/code&gt;</ept> refer to the same object, or <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">x</ph><ept id=\"p3\">&lt;/code&gt;</ept> and <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph5\">y</ph><ept id=\"p4\">&lt;/code&gt;</ept> are equal, or <bpt id=\"p5\">&lt;code&gt;</bpt><ph id=\"ph6\">x</ph><ept id=\"p5\">&lt;/code&gt;</ept> and <bpt id=\"p6\">&lt;code&gt;</bpt><ph id=\"ph7\">y</ph><ept id=\"p6\">&lt;/code&gt;</ept> are <ph id=\"ph8\">`null`</ph>; otherwise, <ph id=\"ph9\">`false`</ph>.","source":"`true` if <code>x</code> and <code>y</code> refer to the same object, or <code>x</code> and <code>y</code> are equal, or <code>x</code> and <code>y</code> are `null`; otherwise, `false`."}],"pos":[28211,28400],"yaml":true},{"content":"When overridden in a derived class, gets the hash code for the specified object.","nodes":[{"pos":[0,80],"content":"When overridden in a derived class, gets the hash code for the specified object.","nodes":[{"content":"When overridden in a derived class, gets the hash code for the specified object.","pos":[0,80]}]}],"pos":[30942,31023],"yaml":true},{"content":"The <xref:System.StringComparer.GetHashCode%28System.String%29> method is more efficient than the <xref:System.StringComparer.GetHashCode%2A> method because the `obj` parameter does not have to be unboxed to perform the operation.  \n  \n The <xref:System.StringComparer.GetHashCode%28System.Object%29> method allocates an amount of memory that is proportional to the size of `obj` to calculate the hash code of `obj`. In the case of large strings, trying to retrieve the hash code can throw an <xref:System.ArgumentException>. Instead, you can use an alternate algorithm that allocates a fixed amount of memory when calculating hash codes. To use this algorithm, add the [<NetFx45_CultureAwareComparerGetHashCode_LongStrings>](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md) element to the [\\<runtime>](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) section of your application's configuration file.","nodes":[{"pos":[0,230],"content":"The <ph id=\"ph1\">&lt;xref:System.StringComparer.GetHashCode%28System.String%29&gt;</ph> method is more efficient than the <ph id=\"ph2\">&lt;xref:System.StringComparer.GetHashCode%2A&gt;</ph> method because the <ph id=\"ph3\">`obj`</ph> parameter does not have to be unboxed to perform the operation.","source":"The <xref:System.StringComparer.GetHashCode%28System.String%29> method is more efficient than the <xref:System.StringComparer.GetHashCode%2A> method because the `obj` parameter does not have to be unboxed to perform the operation."},{"pos":[237,991],"content":"The <xref:System.StringComparer.GetHashCode%28System.Object%29> method allocates an amount of memory that is proportional to the size of `obj` to calculate the hash code of `obj`. In the case of large strings, trying to retrieve the hash code can throw an <xref:System.ArgumentException>. Instead, you can use an alternate algorithm that allocates a fixed amount of memory when calculating hash codes. To use this algorithm, add the [<NetFx45_CultureAwareComparerGetHashCode_LongStrings>](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md) element to the [\\<runtime>](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) section of your application's configuration file.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.StringComparer.GetHashCode%28System.Object%29&gt;</ph> method allocates an amount of memory that is proportional to the size of <ph id=\"ph2\">`obj`</ph> to calculate the hash code of <ph id=\"ph3\">`obj`</ph>.","pos":[0,179],"source":"The <xref:System.StringComparer.GetHashCode%28System.Object%29> method allocates an amount of memory that is proportional to the size of `obj` to calculate the hash code of `obj`."},{"content":"In the case of large strings, trying to retrieve the hash code can throw an <ph id=\"ph1\">&lt;xref:System.ArgumentException&gt;</ph>.","pos":[180,288],"source":" In the case of large strings, trying to retrieve the hash code can throw an <xref:System.ArgumentException>."},{"content":"Instead, you can use an alternate algorithm that allocates a fixed amount of memory when calculating hash codes.","pos":[289,401]},{"content":"To use this algorithm, add the <bpt id=\"p1\">[</bpt>&lt;NetFx45_CultureAwareComparerGetHashCode_LongStrings&gt;<ept id=\"p1\">](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md)</ept> element to the <bpt id=\"p2\">[</bpt><ph id=\"ph1\">\\&lt;</ph>runtime&gt;<ept id=\"p2\">](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md)</ept> section of your application's configuration file.","pos":[402,754],"source":" To use this algorithm, add the [<NetFx45_CultureAwareComparerGetHashCode_LongStrings>](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md) element to the [\\<runtime>](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) section of your application's configuration file."}]}],"pos":[31034,32031],"yaml":true,"extradata":"MT"},{"content":"An object.","nodes":[{"pos":[0,10],"content":"An object.","nodes":[{"content":"An object.","pos":[0,10]}]}],"pos":[32166,32177],"yaml":true},{"content":"A 32-bit signed hash code calculated from the value of the <code>obj</code> parameter.","nodes":[{"pos":[0,86],"content":"A 32-bit signed hash code calculated from the value of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">obj</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","source":"A 32-bit signed hash code calculated from the value of the <code>obj</code> parameter."}],"pos":[32233,32320],"yaml":true},{"content":"Not enough memory is available to allocate the buffer that is required to compute the hash code.","nodes":[{"pos":[0,96],"content":"Not enough memory is available to allocate the buffer that is required to compute the hash code.","nodes":[{"content":"Not enough memory is available to allocate the buffer that is required to compute the hash code.","pos":[0,96]}]}],"pos":[32475,32572],"yaml":true},{"content":"<code>obj</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;obj&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>obj</code> is `null`."}],"pos":[32674,32702],"yaml":true},{"content":"When overridden in a derived class, gets the hash code for the specified string.","nodes":[{"pos":[0,80],"content":"When overridden in a derived class, gets the hash code for the specified string.","nodes":[{"content":"When overridden in a derived class, gets the hash code for the specified string.","pos":[0,80]}]}],"pos":[33870,33951],"yaml":true},{"content":"The <xref:System.StringComparer.GetHashCode%28System.String%29> method is more efficient than the <xref:System.StringComparer.GetHashCode%28System.Object%29> method because the `obj` parameter does not have to be unboxed to perform the operation.  \n  \n The <xref:System.StringComparer.GetHashCode%28System.String%29> method allocates an amount of memory that is proportional to the size of `obj` to calculate the hash code of `obj`. In the case of large strings, trying to retrieve the hash code can throw an <xref:System.ArgumentException>. Instead, you can use an alternate algorithm that allocates a fixed amount of memory when calculating hash codes. To use this algorithm, add the [<NetFx45_CultureAwareComparerGetHashCode_LongStrings>](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md) element to the [\\<runtime>](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) section of your application's configuration file.","nodes":[{"pos":[0,246],"content":"The <ph id=\"ph1\">&lt;xref:System.StringComparer.GetHashCode%28System.String%29&gt;</ph> method is more efficient than the <ph id=\"ph2\">&lt;xref:System.StringComparer.GetHashCode%28System.Object%29&gt;</ph> method because the <ph id=\"ph3\">`obj`</ph> parameter does not have to be unboxed to perform the operation.","source":"The <xref:System.StringComparer.GetHashCode%28System.String%29> method is more efficient than the <xref:System.StringComparer.GetHashCode%28System.Object%29> method because the `obj` parameter does not have to be unboxed to perform the operation."},{"pos":[253,1007],"content":"The <xref:System.StringComparer.GetHashCode%28System.String%29> method allocates an amount of memory that is proportional to the size of `obj` to calculate the hash code of `obj`. In the case of large strings, trying to retrieve the hash code can throw an <xref:System.ArgumentException>. Instead, you can use an alternate algorithm that allocates a fixed amount of memory when calculating hash codes. To use this algorithm, add the [<NetFx45_CultureAwareComparerGetHashCode_LongStrings>](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md) element to the [\\<runtime>](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) section of your application's configuration file.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.StringComparer.GetHashCode%28System.String%29&gt;</ph> method allocates an amount of memory that is proportional to the size of <ph id=\"ph2\">`obj`</ph> to calculate the hash code of <ph id=\"ph3\">`obj`</ph>.","pos":[0,179],"source":"The <xref:System.StringComparer.GetHashCode%28System.String%29> method allocates an amount of memory that is proportional to the size of `obj` to calculate the hash code of `obj`."},{"content":"In the case of large strings, trying to retrieve the hash code can throw an <ph id=\"ph1\">&lt;xref:System.ArgumentException&gt;</ph>.","pos":[180,288],"source":" In the case of large strings, trying to retrieve the hash code can throw an <xref:System.ArgumentException>."},{"content":"Instead, you can use an alternate algorithm that allocates a fixed amount of memory when calculating hash codes.","pos":[289,401]},{"content":"To use this algorithm, add the <bpt id=\"p1\">[</bpt>&lt;NetFx45_CultureAwareComparerGetHashCode_LongStrings&gt;<ept id=\"p1\">](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md)</ept> element to the <bpt id=\"p2\">[</bpt><ph id=\"ph1\">\\&lt;</ph>runtime&gt;<ept id=\"p2\">](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md)</ept> section of your application's configuration file.","pos":[402,754],"source":" To use this algorithm, add the [<NetFx45_CultureAwareComparerGetHashCode_LongStrings>](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md) element to the [\\<runtime>](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) section of your application's configuration file."}]}],"pos":[33962,34975],"yaml":true,"extradata":"MT"},{"content":"A string.","nodes":[{"pos":[0,9],"content":"A string.","nodes":[{"content":"A string.","pos":[0,9]}]}],"pos":[35119,35129],"yaml":true},{"content":"A 32-bit signed hash code calculated from the value of the <code>obj</code> parameter.","nodes":[{"pos":[0,86],"content":"A 32-bit signed hash code calculated from the value of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">obj</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","source":"A 32-bit signed hash code calculated from the value of the <code>obj</code> parameter."}],"pos":[35185,35272],"yaml":true},{"content":"Not enough memory is available to allocate the buffer that is required to compute the hash code.","nodes":[{"pos":[0,96],"content":"Not enough memory is available to allocate the buffer that is required to compute the hash code.","nodes":[{"content":"Not enough memory is available to allocate the buffer that is required to compute the hash code.","pos":[0,96]}]}],"pos":[35427,35524],"yaml":true},{"content":"<code>obj</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;obj&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>obj</code> is `null`."}],"pos":[35626,35654],"yaml":true},{"content":"Gets a <xref href=\"System.StringComparer\"></xref> object that performs a case-sensitive string comparison using the word comparison rules of the invariant culture.","nodes":[{"pos":[0,163],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"System.StringComparer\"&gt;&lt;/xref&gt;</ph> object that performs a case-sensitive string comparison using the word comparison rules of the invariant culture.","source":"Gets a <xref href=\"System.StringComparer\"></xref> object that performs a case-sensitive string comparison using the word comparison rules of the invariant culture."}],"pos":[37129,37293],"yaml":true},{"content":"The<xref:System.StringComparer> returned by the <xref:System.StringComparer.InvariantCulture%2A> property compares strings in a linguistically relevant manner, but it is not suitable for display in any particular culture. Its major application is to order strings in a way that will be identical across cultures.  \n  \n The invariant culture is the <xref:System.Globalization.CultureInfo> object returned by the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property.  \n  \n The <xref:System.StringComparer.InvariantCulture%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.","nodes":[{"pos":[0,312],"content":"The<xref:System.StringComparer> returned by the <xref:System.StringComparer.InvariantCulture%2A> property compares strings in a linguistically relevant manner, but it is not suitable for display in any particular culture. Its major application is to order strings in a way that will be identical across cultures.","nodes":[{"content":"The<xref:System.StringComparer> returned by the <xref:System.StringComparer.InvariantCulture%2A> property compares strings in a linguistically relevant manner, but it is not suitable for display in any particular culture. Its major application is to order strings in a way that will be identical across cultures.","pos":[0,312],"nodes":[{"content":"The<ph id=\"ph1\">&lt;xref:System.StringComparer&gt;</ph> returned by the <ph id=\"ph2\">&lt;xref:System.StringComparer.InvariantCulture%2A&gt;</ph> property compares strings in a linguistically relevant manner, but it is not suitable for display in any particular culture.","pos":[0,221],"source":"The<xref:System.StringComparer> returned by the <xref:System.StringComparer.InvariantCulture%2A> property compares strings in a linguistically relevant manner, but it is not suitable for display in any particular culture."},{"content":"Its major application is to order strings in a way that will be identical across cultures.","pos":[222,312]}]}]},{"pos":[319,480],"content":"The invariant culture is the <xref:System.Globalization.CultureInfo> object returned by the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property.","nodes":[{"content":"The invariant culture is the <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object returned by the <ph id=\"ph2\">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A&gt;</ph> property.","pos":[0,161],"source":"The invariant culture is the <xref:System.Globalization.CultureInfo> object returned by the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property."}]},{"pos":[487,652],"content":"The <xref:System.StringComparer.InvariantCulture%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.StringComparer.InvariantCulture%2A&gt;</ph> property actually returns an instance of an anonymous class derived from the <ph id=\"ph2\">&lt;xref:System.StringComparer&gt;</ph> class.","pos":[0,165],"source":"The <xref:System.StringComparer.InvariantCulture%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class."}]}],"pos":[37304,37963],"yaml":true,"extradata":"MT"},{"content":"A new <xref href=\"System.StringComparer\"></xref> object.","nodes":[{"pos":[0,56],"content":"A new <ph id=\"ph1\">&lt;xref href=\"System.StringComparer\"&gt;&lt;/xref&gt;</ph> object.","source":"A new <xref href=\"System.StringComparer\"></xref> object."}],"pos":[38777,38834],"yaml":true},{"content":"Gets a <xref href=\"System.StringComparer\"></xref> object that performs a case-insensitive string comparison using the word comparison rules of the invariant culture.","nodes":[{"pos":[0,165],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"System.StringComparer\"&gt;&lt;/xref&gt;</ph> object that performs a case-insensitive string comparison using the word comparison rules of the invariant culture.","source":"Gets a <xref href=\"System.StringComparer\"></xref> object that performs a case-insensitive string comparison using the word comparison rules of the invariant culture."}],"pos":[40094,40260],"yaml":true},{"content":"The<xref:System.StringComparer> returned by the <xref:System.StringComparer.InvariantCultureIgnoreCase%2A> property compares strings in a linguistically relevant manner that ignores case, but it is not suitable for display in any particular culture. Its major application is to order strings in a way that will be identical across cultures.  \n  \n The invariant culture is the <xref:System.Globalization.CultureInfo> object returned by the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property.  \n  \n The <xref:System.StringComparer.InvariantCultureIgnoreCase%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.","nodes":[{"pos":[0,340],"content":"The<xref:System.StringComparer> returned by the <xref:System.StringComparer.InvariantCultureIgnoreCase%2A> property compares strings in a linguistically relevant manner that ignores case, but it is not suitable for display in any particular culture. Its major application is to order strings in a way that will be identical across cultures.","nodes":[{"content":"The<xref:System.StringComparer> returned by the <xref:System.StringComparer.InvariantCultureIgnoreCase%2A> property compares strings in a linguistically relevant manner that ignores case, but it is not suitable for display in any particular culture. Its major application is to order strings in a way that will be identical across cultures.","pos":[0,340],"nodes":[{"content":"The<ph id=\"ph1\">&lt;xref:System.StringComparer&gt;</ph> returned by the <ph id=\"ph2\">&lt;xref:System.StringComparer.InvariantCultureIgnoreCase%2A&gt;</ph> property compares strings in a linguistically relevant manner that ignores case, but it is not suitable for display in any particular culture.","pos":[0,249],"source":"The<xref:System.StringComparer> returned by the <xref:System.StringComparer.InvariantCultureIgnoreCase%2A> property compares strings in a linguistically relevant manner that ignores case, but it is not suitable for display in any particular culture."},{"content":"Its major application is to order strings in a way that will be identical across cultures.","pos":[250,340]}]}]},{"pos":[347,508],"content":"The invariant culture is the <xref:System.Globalization.CultureInfo> object returned by the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property.","nodes":[{"content":"The invariant culture is the <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object returned by the <ph id=\"ph2\">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A&gt;</ph> property.","pos":[0,161],"source":"The invariant culture is the <xref:System.Globalization.CultureInfo> object returned by the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property."}]},{"pos":[515,690],"content":"The <xref:System.StringComparer.InvariantCultureIgnoreCase%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.StringComparer.InvariantCultureIgnoreCase%2A&gt;</ph> property actually returns an instance of an anonymous class derived from the <ph id=\"ph2\">&lt;xref:System.StringComparer&gt;</ph> class.","pos":[0,175],"source":"The <xref:System.StringComparer.InvariantCultureIgnoreCase%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class."}]}],"pos":[40271,40968],"yaml":true,"extradata":"MT"},{"content":"A new <xref href=\"System.StringComparer\"></xref> object.","nodes":[{"pos":[0,56],"content":"A new <ph id=\"ph1\">&lt;xref href=\"System.StringComparer\"&gt;&lt;/xref&gt;</ph> object.","source":"A new <xref href=\"System.StringComparer\"></xref> object."}],"pos":[41121,41178],"yaml":true},{"content":"Gets a <xref href=\"System.StringComparer\"></xref> object that performs a case-sensitive ordinal string comparison.","nodes":[{"pos":[0,114],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"System.StringComparer\"&gt;&lt;/xref&gt;</ph> object that performs a case-sensitive ordinal string comparison.","source":"Gets a <xref href=\"System.StringComparer\"></xref> object that performs a case-sensitive ordinal string comparison."}],"pos":[42334,42449],"yaml":true},{"content":"The <xref:System.StringComparer> returned by the <xref:System.StringComparer.Ordinal%2A> property performs a simple byte comparison that is independent of language. This is most appropriate when comparing strings that are generated programmatically or when comparing case-sensitive resources such as passwords.  \n  \n The <xref:System.StringComparer.Ordinal%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.","nodes":[{"pos":[0,310],"content":"The <xref:System.StringComparer> returned by the <xref:System.StringComparer.Ordinal%2A> property performs a simple byte comparison that is independent of language. This is most appropriate when comparing strings that are generated programmatically or when comparing case-sensitive resources such as passwords.","nodes":[{"content":"The <xref:System.StringComparer> returned by the <xref:System.StringComparer.Ordinal%2A> property performs a simple byte comparison that is independent of language. This is most appropriate when comparing strings that are generated programmatically or when comparing case-sensitive resources such as passwords.","pos":[0,310],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.StringComparer&gt;</ph> returned by the <ph id=\"ph2\">&lt;xref:System.StringComparer.Ordinal%2A&gt;</ph> property performs a simple byte comparison that is independent of language.","pos":[0,164],"source":"The <xref:System.StringComparer> returned by the <xref:System.StringComparer.Ordinal%2A> property performs a simple byte comparison that is independent of language."},{"content":"This is most appropriate when comparing strings that are generated programmatically or when comparing case-sensitive resources such as passwords.","pos":[165,310]}]}]},{"pos":[317,473],"content":"The <xref:System.StringComparer.Ordinal%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.StringComparer.Ordinal%2A&gt;</ph> property actually returns an instance of an anonymous class derived from the <ph id=\"ph2\">&lt;xref:System.StringComparer&gt;</ph> class.","pos":[0,156],"source":"The <xref:System.StringComparer.Ordinal%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class."}]}],"pos":[42460,42938],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.StringComparer\"></xref> object.","nodes":[{"pos":[0,52],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.StringComparer\"&gt;&lt;/xref&gt;</ph> object.","source":"A <xref href=\"System.StringComparer\"></xref> object."}],"pos":[43743,43796],"yaml":true},{"content":"Gets a <xref href=\"System.StringComparer\"></xref> object that performs a case-insensitive ordinal string comparison.","nodes":[{"pos":[0,116],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"System.StringComparer\"&gt;&lt;/xref&gt;</ph> object that performs a case-insensitive ordinal string comparison.","source":"Gets a <xref href=\"System.StringComparer\"></xref> object that performs a case-insensitive ordinal string comparison."}],"pos":[45337,45454],"yaml":true},{"content":"The<xref:System.StringComparer> returned by the <xref:System.StringComparer.OrdinalIgnoreCase%2A> property treats the characters in the strings to compare as if they were converted to uppercase using the conventions of the invariant culture, and then performs a simple byte comparison that is independent of language. This is most appropriate when comparing strings that are generated programmatically or when comparing case-insensitive resources such as paths and filenames.  \n  \n The <xref:System.StringComparer.OrdinalIgnoreCase%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.","nodes":[{"pos":[0,475],"content":"The<xref:System.StringComparer> returned by the <xref:System.StringComparer.OrdinalIgnoreCase%2A> property treats the characters in the strings to compare as if they were converted to uppercase using the conventions of the invariant culture, and then performs a simple byte comparison that is independent of language. This is most appropriate when comparing strings that are generated programmatically or when comparing case-insensitive resources such as paths and filenames.","nodes":[{"content":"The<xref:System.StringComparer> returned by the <xref:System.StringComparer.OrdinalIgnoreCase%2A> property treats the characters in the strings to compare as if they were converted to uppercase using the conventions of the invariant culture, and then performs a simple byte comparison that is independent of language. This is most appropriate when comparing strings that are generated programmatically or when comparing case-insensitive resources such as paths and filenames.","pos":[0,475],"nodes":[{"content":"The<ph id=\"ph1\">&lt;xref:System.StringComparer&gt;</ph> returned by the <ph id=\"ph2\">&lt;xref:System.StringComparer.OrdinalIgnoreCase%2A&gt;</ph> property treats the characters in the strings to compare as if they were converted to uppercase using the conventions of the invariant culture, and then performs a simple byte comparison that is independent of language.","pos":[0,317],"source":"The<xref:System.StringComparer> returned by the <xref:System.StringComparer.OrdinalIgnoreCase%2A> property treats the characters in the strings to compare as if they were converted to uppercase using the conventions of the invariant culture, and then performs a simple byte comparison that is independent of language."},{"content":"This is most appropriate when comparing strings that are generated programmatically or when comparing case-insensitive resources such as paths and filenames.","pos":[318,475]}]}]},{"pos":[482,648],"content":"The <xref:System.StringComparer.OrdinalIgnoreCase%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.StringComparer.OrdinalIgnoreCase%2A&gt;</ph> property actually returns an instance of an anonymous class derived from the <ph id=\"ph2\">&lt;xref:System.StringComparer&gt;</ph> class.","pos":[0,166],"source":"The <xref:System.StringComparer.OrdinalIgnoreCase%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class."}]}],"pos":[45465,46118],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.StringComparer\"></xref> object.","nodes":[{"pos":[0,52],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.StringComparer\"&gt;&lt;/xref&gt;</ph> object.","source":"A <xref href=\"System.StringComparer\"></xref> object."}],"pos":[46933,46986],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.StringComparer\n  commentId: T:System.StringComparer\n  id: StringComparer\n  children:\n  - System.StringComparer.#ctor\n  - System.StringComparer.Compare(System.Object,System.Object)\n  - System.StringComparer.Compare(System.String,System.String)\n  - System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)\n  - System.StringComparer.CurrentCulture\n  - System.StringComparer.CurrentCultureIgnoreCase\n  - System.StringComparer.Equals(System.Object,System.Object)\n  - System.StringComparer.Equals(System.String,System.String)\n  - System.StringComparer.FromComparison(System.StringComparison)\n  - System.StringComparer.GetHashCode(System.Object)\n  - System.StringComparer.GetHashCode(System.String)\n  - System.StringComparer.InvariantCulture\n  - System.StringComparer.InvariantCultureIgnoreCase\n  - System.StringComparer.Ordinal\n  - System.StringComparer.OrdinalIgnoreCase\n  - System.StringComparer.System#Collections#IComparer#Compare(System.Object,System.Object)\n  - System.StringComparer.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)\n  - System.StringComparer.System#Collections#IEqualityComparer#GetHashCode(System.Object)\n  langs:\n  - csharp\n  name: StringComparer\n  nameWithType: StringComparer\n  fullName: System.StringComparer\n  type: Class\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Represents a string comparison operation that uses specific case and culture-based or ordinal comparison rules.\n  remarks: \"An object derived from the <xref:System.StringComparer> class embodies string-based comparison, equality, and hash code operations that take into account both case and culture-specific comparison rules. You can use the <xref:System.StringComparer> class to create a type-specific comparison to sort the elements in a generic collection. Classes such as <xref:System.Collections.Hashtable>, <xref:System.Collections.Generic.Dictionary%602>, <xref:System.Collections.SortedList>, and <xref:System.Collections.Generic.SortedList%602> use the <xref:System.StringComparer> class for sorting purposes.  \\n  \\n A comparison operation that is represented by the <xref:System.StringComparer> class is defined to be either case-sensitive or case-insensitive, and use either word (culture-sensitive) or ordinal (culture-insensitive) comparison rules. For more information about word and ordinal comparison rules, see <xref:System.Globalization.CompareOptions?displayProperty=fullName>.  \\n  \\n## Implemented Properties  \\n You might be confused about how to use the <xref:System.StringComparer> class properties because of a seeming contradiction. The <xref:System.StringComparer> class is declared `abstract` (`MustInherit` in Visual Basic), which means its members can be invoked only on an object of a class derived from the <xref:System.StringComparer> class. The contradiction is that each property of the <xref:System.StringComparer> class is declared `static` (`Shared` in Visual Basic), which means the property can be invoked without first creating a derived class.  \\n  \\n You can call a <xref:System.StringComparer> property directly because each property actually returns an instance of an anonymous class that is derived from the <xref:System.StringComparer> class. Consequently, the type of each property value is <xref:System.StringComparer>, which is the base class of the anonymous class, not the type of the anonymous class itself. Each <xref:System.StringComparer> class property returns a <xref:System.StringComparer> object that supports predefined case and comparison rules.\"\n  example:\n  - \"The following example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class. The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.  \\n  \\n [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]\\n [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]\\n [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public abstract class StringComparer : System.Collections.Generic.IComparer<string>, System.Collections.Generic.IEqualityComparer<string>, System.Collections.IComparer, System.Collections.IEqualityComparer\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.Generic.IComparer{System.String}\n  - System.Collections.Generic.IEqualityComparer{System.String}\n  - System.Collections.IComparer\n  - System.Collections.IEqualityComparer\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.StringComparer.#ctor\n  commentId: M:System.StringComparer.#ctor\n  id: '#ctor'\n  parent: System.StringComparer\n  langs:\n  - csharp\n  name: StringComparer()\n  nameWithType: StringComparer.StringComparer()\n  fullName: StringComparer.StringComparer()\n  type: Constructor\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Initializes a new instance of the <xref href=\"System.StringComparer\"></xref> class.\n  syntax:\n    content: protected StringComparer ();\n    parameters: []\n  overload: System.StringComparer.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.StringComparer.Compare(System.Object,System.Object)\n  commentId: M:System.StringComparer.Compare(System.Object,System.Object)\n  id: Compare(System.Object,System.Object)\n  parent: System.StringComparer\n  langs:\n  - csharp\n  name: Compare(Object, Object)\n  nameWithType: StringComparer.Compare(Object, Object)\n  fullName: StringComparer.Compare(Object, Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System\n  summary: When overridden in a derived class, compares two objects and returns an indication of their relative sort order.\n  remarks: The <xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=fullName> method is slightly more efficient than the <xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=fullName> method because no conversion of the `x` and `y` arguments is needed to perform the comparison.\n  syntax:\n    content: public int Compare (object x, object y);\n    parameters:\n    - id: x\n      type: System.Object\n      description: An object to compare to <code>y</code>.\n    - id: y\n      type: System.Object\n      description: An object to compare to <code>x</code>.\n    return:\n      type: System.Int32\n      description: \"A signed integer that indicates the relative values of <code>x</code> and <code>y</code>, as shown in the following table.  \\n  \\n <table><thead><tr><th> Value  \\n  \\n </th><th> Meaning  \\n  \\n </th></tr></thead><tbody><tr><td> Less than zero  \\n  \\n </td><td><code>x</code> precedes  <code>y</code> in the sort order.  \\n  \\n -or-  \\n  \\n <code>x</code> is `null` and <code>y</code> is not `null`.  \\n  \\n </td></tr><tr><td> Zero  \\n  \\n </td><td><code>x</code> is equal to <code>y</code>.  \\n  \\n -or-  \\n  \\n <code>x</code> and <code>y</code> are both `null`.  \\n  \\n </td></tr><tr><td> Greater than zero  \\n  \\n </td><td><code>x</code> follows <code>y</code> in the sort order.  \\n  \\n -or-  \\n  \\n <code>y</code> is `null` and <code>x</code> is not `null`.  \\n  \\n </td></tr></tbody></table>\"\n  overload: System.StringComparer.Compare*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: Neither <code>x</code> nor <code>y</code> is a <xref href=\"System.String\"></xref> object, and neither <code>x</code> nor <code>y</code> implements the <xref href=\"System.IComparable\"></xref> interface.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.StringComparer.Compare(System.String,System.String)\n  commentId: M:System.StringComparer.Compare(System.String,System.String)\n  id: Compare(System.String,System.String)\n  parent: System.StringComparer\n  langs:\n  - csharp\n  name: Compare(String, String)\n  nameWithType: StringComparer.Compare(String, String)\n  fullName: StringComparer.Compare(String, String)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: When overridden in a derived class, compares two strings and returns an indication of their relative sort order.\n  remarks: The <xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=fullName> method is slightly more efficient than the <xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=fullName> method because no conversion of the `x` and `y` arguments is needed to perform the comparison.\n  syntax:\n    content: public abstract int Compare (string x, string y);\n    parameters:\n    - id: x\n      type: System.String\n      description: A string to compare to <code>y</code>.\n    - id: y\n      type: System.String\n      description: A string to compare to <code>x</code>.\n    return:\n      type: System.Int32\n      description: \"A signed integer that indicates the relative values of <code>x</code> and <code>y</code>, as shown in the following table.  \\n  \\n <table><thead><tr><th> Value  \\n  \\n </th><th> Meaning  \\n  \\n </th></tr></thead><tbody><tr><td> Less than zero  \\n  \\n </td><td><code>x</code> precedes <code>y</code> in the sort order.  \\n  \\n -or-  \\n  \\n <code>x</code> is `null` and <code>y</code> is not `null`.  \\n  \\n </td></tr><tr><td> Zero  \\n  \\n </td><td><code>x</code> is equal to <code>y</code>.  \\n  \\n -or-  \\n  \\n <code>x</code> and <code>y</code> are both `null`.  \\n  \\n </td></tr><tr><td> Greater than zero  \\n  \\n </td><td><code>x</code> follows <code>y</code> in the sort order.  \\n  \\n -or-  \\n  \\n <code>y</code> is `null` and <code>x</code> is not `null`.  \\n  \\n </td></tr></tbody></table>\"\n  overload: System.StringComparer.Compare*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)\n  commentId: M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)\n  id: Create(System.Globalization.CultureInfo,System.Boolean)\n  parent: System.StringComparer\n  langs:\n  - csharp\n  name: Create(CultureInfo, Boolean)\n  nameWithType: StringComparer.Create(CultureInfo, Boolean)\n  fullName: StringComparer.Create(CultureInfo, Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System\n  summary: Creates a <xref href=\"System.StringComparer\"></xref> object that compares strings according to the rules of a specified culture.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class. The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.  \\n  \\n [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]\\n [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]\\n [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]\"\n  syntax:\n    content: public static StringComparer Create (System.Globalization.CultureInfo culture, bool ignoreCase);\n    parameters:\n    - id: culture\n      type: System.Globalization.CultureInfo\n      description: A culture whose linguistic rules are used to perform a string comparison.\n    - id: ignoreCase\n      type: System.Boolean\n      description: '`true` to specify that comparison operations be case-insensitive; `false` to specify that comparison operations be case-sensitive.'\n    return:\n      type: System.StringComparer\n      description: A new <xref href=\"System.StringComparer\"></xref> object that performs string comparisons according to the comparison rules used by the <code>culture</code> parameter and the case rule specified by the <code>ignoreCase</code> parameter.\n  overload: System.StringComparer.Create*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>culture</code> is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.StringComparer.CurrentCulture\n  commentId: P:System.StringComparer.CurrentCulture\n  id: CurrentCulture\n  parent: System.StringComparer\n  langs:\n  - csharp\n  name: CurrentCulture\n  nameWithType: StringComparer.CurrentCulture\n  fullName: StringComparer.CurrentCulture\n  type: Property\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Gets a <xref href=\"System.StringComparer\"></xref> object that performs a case-sensitive string comparison using the word comparison rules of the current culture.\n  remarks: \"The<xref:System.StringComparer> returned by the <xref:System.StringComparer.CurrentCulture%2A> property can be used when strings are linguistically relevant. For example, if strings are displayed to the user, or if strings are the result of user interaction, culture-sensitive string comparison should be used to order the string data.  \\n  \\n The current culture is the <xref:System.Globalization.CultureInfo> object associated with the current thread.  \\n  \\n The <xref:System.StringComparer.CurrentCulture%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.  \\n  \\n Each call to the <xref:System.StringComparer.CurrentCulture%2A> property `get` accessor returns a new <xref:System.StringComparer> object, as the following code shows.  \\n  \\n [!code-csharp[System.StringComparer.CurrentCulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/cs/CompareObjects.cs#1)]\\n [!code-vb[System.StringComparer.CurrentCulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/vb/CompareObjects.vb#1)]  \\n  \\n To improve performance, you can store the <xref:System.StringComparer> object in a local variable rather than retrieve the value of the <xref:System.StringComparer.CurrentCulture%2A> property multiple times.\"\n  example:\n  - \"The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class. The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.  \\n  \\n [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]\\n [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]\\n [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]\"\n  syntax:\n    content: public static StringComparer CurrentCulture { get; }\n    return:\n      type: System.StringComparer\n      description: A new <xref href=\"System.StringComparer\"></xref> object.\n  overload: System.StringComparer.CurrentCulture*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.StringComparer.CurrentCultureIgnoreCase\n  commentId: P:System.StringComparer.CurrentCultureIgnoreCase\n  id: CurrentCultureIgnoreCase\n  parent: System.StringComparer\n  langs:\n  - csharp\n  name: CurrentCultureIgnoreCase\n  nameWithType: StringComparer.CurrentCultureIgnoreCase\n  fullName: StringComparer.CurrentCultureIgnoreCase\n  type: Property\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Gets a <xref href=\"System.StringComparer\"></xref> object that performs case-insensitive string comparisons using the word comparison rules of the current culture.\n  remarks: \"The current culture is the <xref:System.Globalization.CultureInfo> object associated with the current thread.  \\n  \\n The<xref:System.StringComparer> returned by the <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property can be used when strings are linguistically relevant but their case is not. For example, if strings are displayed to the user but case is unimportant, culture-sensitive, case-insensitive string comparison should be used to order the string data.  \\n  \\n The <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.  \\n  \\n Each call to the <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property `get` accessor returns a new <xref:System.StringComparer> object, as the following code shows.  \\n  \\n [!code-csharp[System.StringComparer.CurrentCulture#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/cs/CompareObjects.cs#2)]\\n [!code-vb[System.StringComparer.CurrentCulture#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/vb/CompareObjects.vb#2)]  \\n  \\n To improve performance, you can store the <xref:System.StringComparer> object in a local variable rather than retrieve the value of the <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property multiple times.\"\n  syntax:\n    content: public static StringComparer CurrentCultureIgnoreCase { get; }\n    return:\n      type: System.StringComparer\n      description: A new <xref href=\"System.StringComparer\"></xref> object.\n  overload: System.StringComparer.CurrentCultureIgnoreCase*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.StringComparer.Equals(System.Object,System.Object)\n  commentId: M:System.StringComparer.Equals(System.Object,System.Object)\n  id: Equals(System.Object,System.Object)\n  parent: System.StringComparer\n  langs:\n  - csharp\n  name: Equals(Object, Object)\n  nameWithType: StringComparer.Equals(Object, Object)\n  fullName: StringComparer.Equals(Object, Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System\n  summary: When overridden in a derived class, indicates whether two objects are equal.\n  remarks: Because the runtime does not have to unbox `x` or `y` if they are value types or attempt to downcast `x` or `y` to strings if they are reference types, the <xref:System.StringComparer.Equals%28System.String%2CSystem.String%29> method may be slightly more efficient than the <xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29> method.\n  syntax:\n    content: public bool Equals (object x, object y);\n    parameters:\n    - id: x\n      type: System.Object\n      description: An object to compare to <code>y</code>.\n    - id: y\n      type: System.Object\n      description: An object to compare to <code>x</code>.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>x</code> and <code>y</code> refer to the same object, or <code>x</code> and <code>y</code> are both the same type of object and those objects are equal, or both <code>x</code> and <code>y</code> are `null`; otherwise, `false`.'\n  overload: System.StringComparer.Equals*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.StringComparer.Equals(System.String,System.String)\n  commentId: M:System.StringComparer.Equals(System.String,System.String)\n  id: Equals(System.String,System.String)\n  parent: System.StringComparer\n  langs:\n  - csharp\n  name: Equals(String, String)\n  nameWithType: StringComparer.Equals(String, String)\n  fullName: StringComparer.Equals(String, String)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: When overridden in a derived class, indicates whether two strings are equal.\n  remarks: Because the runtime does not have to unbox `x` or `y` if they are value types or attempt to downcast `x` or `y` to strings if they are reference types, the <xref:System.StringComparer.Equals%28System.String%2CSystem.String%29> method may be slightly more efficient than the <xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29> method.\n  syntax:\n    content: public abstract bool Equals (string x, string y);\n    parameters:\n    - id: x\n      type: System.String\n      description: A string to compare to <code>y</code>.\n    - id: y\n      type: System.String\n      description: A string to compare to <code>x</code>.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>x</code> and <code>y</code> refer to the same object, or <code>x</code> and <code>y</code> are equal, or <code>x</code> and <code>y</code> are `null`; otherwise, `false`.'\n  overload: System.StringComparer.Equals*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.StringComparer.FromComparison(System.StringComparison)\n  commentId: M:System.StringComparer.FromComparison(System.StringComparison)\n  id: FromComparison(System.StringComparison)\n  parent: System.StringComparer\n  langs:\n  - csharp\n  name: FromComparison(StringComparison)\n  nameWithType: StringComparer.FromComparison(StringComparison)\n  fullName: StringComparer.FromComparison(StringComparison)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  syntax:\n    content: public static StringComparer FromComparison (StringComparison comparisonType);\n    parameters:\n    - id: comparisonType\n      type: System.StringComparison\n      description: ''\n    return:\n      type: System.StringComparer\n      description: ''\n  overload: System.StringComparer.FromComparison*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml\n- uid: System.StringComparer.GetHashCode(System.Object)\n  commentId: M:System.StringComparer.GetHashCode(System.Object)\n  id: GetHashCode(System.Object)\n  parent: System.StringComparer\n  langs:\n  - csharp\n  name: GetHashCode(Object)\n  nameWithType: StringComparer.GetHashCode(Object)\n  fullName: StringComparer.GetHashCode(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System\n  summary: When overridden in a derived class, gets the hash code for the specified object.\n  remarks: \"The <xref:System.StringComparer.GetHashCode%28System.String%29> method is more efficient than the <xref:System.StringComparer.GetHashCode%2A> method because the `obj` parameter does not have to be unboxed to perform the operation.  \\n  \\n The <xref:System.StringComparer.GetHashCode%28System.Object%29> method allocates an amount of memory that is proportional to the size of `obj` to calculate the hash code of `obj`. In the case of large strings, trying to retrieve the hash code can throw an <xref:System.ArgumentException>. Instead, you can use an alternate algorithm that allocates a fixed amount of memory when calculating hash codes. To use this algorithm, add the [<NetFx45_CultureAwareComparerGetHashCode_LongStrings>](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md) element to the [\\\\<runtime>](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) section of your application's configuration file.\"\n  syntax:\n    content: public int GetHashCode (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: An object.\n    return:\n      type: System.Int32\n      description: A 32-bit signed hash code calculated from the value of the <code>obj</code> parameter.\n  overload: System.StringComparer.GetHashCode*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: Not enough memory is available to allocate the buffer that is required to compute the hash code.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>obj</code> is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.StringComparer.GetHashCode(System.String)\n  commentId: M:System.StringComparer.GetHashCode(System.String)\n  id: GetHashCode(System.String)\n  parent: System.StringComparer\n  langs:\n  - csharp\n  name: GetHashCode(String)\n  nameWithType: StringComparer.GetHashCode(String)\n  fullName: StringComparer.GetHashCode(String)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: When overridden in a derived class, gets the hash code for the specified string.\n  remarks: \"The <xref:System.StringComparer.GetHashCode%28System.String%29> method is more efficient than the <xref:System.StringComparer.GetHashCode%28System.Object%29> method because the `obj` parameter does not have to be unboxed to perform the operation.  \\n  \\n The <xref:System.StringComparer.GetHashCode%28System.String%29> method allocates an amount of memory that is proportional to the size of `obj` to calculate the hash code of `obj`. In the case of large strings, trying to retrieve the hash code can throw an <xref:System.ArgumentException>. Instead, you can use an alternate algorithm that allocates a fixed amount of memory when calculating hash codes. To use this algorithm, add the [<NetFx45_CultureAwareComparerGetHashCode_LongStrings>](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md) element to the [\\\\<runtime>](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) section of your application's configuration file.\"\n  syntax:\n    content: public abstract int GetHashCode (string obj);\n    parameters:\n    - id: obj\n      type: System.String\n      description: A string.\n    return:\n      type: System.Int32\n      description: A 32-bit signed hash code calculated from the value of the <code>obj</code> parameter.\n  overload: System.StringComparer.GetHashCode*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: Not enough memory is available to allocate the buffer that is required to compute the hash code.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>obj</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.StringComparer.InvariantCulture\n  commentId: P:System.StringComparer.InvariantCulture\n  id: InvariantCulture\n  parent: System.StringComparer\n  langs:\n  - csharp\n  name: InvariantCulture\n  nameWithType: StringComparer.InvariantCulture\n  fullName: StringComparer.InvariantCulture\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System\n  summary: Gets a <xref href=\"System.StringComparer\"></xref> object that performs a case-sensitive string comparison using the word comparison rules of the invariant culture.\n  remarks: \"The<xref:System.StringComparer> returned by the <xref:System.StringComparer.InvariantCulture%2A> property compares strings in a linguistically relevant manner, but it is not suitable for display in any particular culture. Its major application is to order strings in a way that will be identical across cultures.  \\n  \\n The invariant culture is the <xref:System.Globalization.CultureInfo> object returned by the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property.  \\n  \\n The <xref:System.StringComparer.InvariantCulture%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.\"\n  example:\n  - \"The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class. The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.  \\n  \\n [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]\\n [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]\\n [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]\"\n  syntax:\n    content: public static StringComparer InvariantCulture { get; }\n    return:\n      type: System.StringComparer\n      description: A new <xref href=\"System.StringComparer\"></xref> object.\n  overload: System.StringComparer.InvariantCulture*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.StringComparer.InvariantCultureIgnoreCase\n  commentId: P:System.StringComparer.InvariantCultureIgnoreCase\n  id: InvariantCultureIgnoreCase\n  parent: System.StringComparer\n  langs:\n  - csharp\n  name: InvariantCultureIgnoreCase\n  nameWithType: StringComparer.InvariantCultureIgnoreCase\n  fullName: StringComparer.InvariantCultureIgnoreCase\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System\n  summary: Gets a <xref href=\"System.StringComparer\"></xref> object that performs a case-insensitive string comparison using the word comparison rules of the invariant culture.\n  remarks: \"The<xref:System.StringComparer> returned by the <xref:System.StringComparer.InvariantCultureIgnoreCase%2A> property compares strings in a linguistically relevant manner that ignores case, but it is not suitable for display in any particular culture. Its major application is to order strings in a way that will be identical across cultures.  \\n  \\n The invariant culture is the <xref:System.Globalization.CultureInfo> object returned by the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property.  \\n  \\n The <xref:System.StringComparer.InvariantCultureIgnoreCase%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.\"\n  syntax:\n    content: public static StringComparer InvariantCultureIgnoreCase { get; }\n    return:\n      type: System.StringComparer\n      description: A new <xref href=\"System.StringComparer\"></xref> object.\n  overload: System.StringComparer.InvariantCultureIgnoreCase*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.StringComparer.Ordinal\n  commentId: P:System.StringComparer.Ordinal\n  id: Ordinal\n  parent: System.StringComparer\n  langs:\n  - csharp\n  name: Ordinal\n  nameWithType: StringComparer.Ordinal\n  fullName: StringComparer.Ordinal\n  type: Property\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Gets a <xref href=\"System.StringComparer\"></xref> object that performs a case-sensitive ordinal string comparison.\n  remarks: \"The <xref:System.StringComparer> returned by the <xref:System.StringComparer.Ordinal%2A> property performs a simple byte comparison that is independent of language. This is most appropriate when comparing strings that are generated programmatically or when comparing case-sensitive resources such as passwords.  \\n  \\n The <xref:System.StringComparer.Ordinal%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.\"\n  example:\n  - \"The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class. The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.  \\n  \\n [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]\\n [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]\\n [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]\"\n  syntax:\n    content: public static StringComparer Ordinal { get; }\n    return:\n      type: System.StringComparer\n      description: A <xref href=\"System.StringComparer\"></xref> object.\n  overload: System.StringComparer.Ordinal*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.StringComparer.OrdinalIgnoreCase\n  commentId: P:System.StringComparer.OrdinalIgnoreCase\n  id: OrdinalIgnoreCase\n  parent: System.StringComparer\n  langs:\n  - csharp\n  name: OrdinalIgnoreCase\n  nameWithType: StringComparer.OrdinalIgnoreCase\n  fullName: StringComparer.OrdinalIgnoreCase\n  type: Property\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Gets a <xref href=\"System.StringComparer\"></xref> object that performs a case-insensitive ordinal string comparison.\n  remarks: \"The<xref:System.StringComparer> returned by the <xref:System.StringComparer.OrdinalIgnoreCase%2A> property treats the characters in the strings to compare as if they were converted to uppercase using the conventions of the invariant culture, and then performs a simple byte comparison that is independent of language. This is most appropriate when comparing strings that are generated programmatically or when comparing case-insensitive resources such as paths and filenames.  \\n  \\n The <xref:System.StringComparer.OrdinalIgnoreCase%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.\"\n  example:\n  - \"The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class. The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.  \\n  \\n [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]\\n [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]\\n [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]\"\n  syntax:\n    content: public static StringComparer OrdinalIgnoreCase { get; }\n    return:\n      type: System.StringComparer\n      description: A <xref href=\"System.StringComparer\"></xref> object.\n  overload: System.StringComparer.OrdinalIgnoreCase*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.StringComparer.System#Collections#IComparer#Compare(System.Object,System.Object)\n  commentId: M:System.StringComparer.System#Collections#IComparer#Compare(System.Object,System.Object)\n  id: System#Collections#IComparer#Compare(System.Object,System.Object)\n  isEii: true\n  parent: System.StringComparer\n  langs:\n  - csharp\n  name: IComparer.Compare(Object, Object)\n  nameWithType: StringComparer.IComparer.Compare(Object, Object)\n  fullName: StringComparer.IComparer.Compare(Object, Object)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  syntax:\n    content: int IComparer.Compare (object x, object y);\n    parameters:\n    - id: x\n      type: System.Object\n      description: ''\n    - id: y\n      type: System.Object\n      description: ''\n    return:\n      type: System.Int32\n      description: ''\n  overload: System.StringComparer.System#Collections#IComparer#Compare*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml\n- uid: System.StringComparer.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)\n  commentId: M:System.StringComparer.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)\n  id: System#Collections#IEqualityComparer#Equals(System.Object,System.Object)\n  isEii: true\n  parent: System.StringComparer\n  langs:\n  - csharp\n  name: IEqualityComparer.Equals(Object, Object)\n  nameWithType: StringComparer.IEqualityComparer.Equals(Object, Object)\n  fullName: StringComparer.IEqualityComparer.Equals(Object, Object)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  syntax:\n    content: bool IEqualityComparer.Equals (object x, object y);\n    parameters:\n    - id: x\n      type: System.Object\n      description: ''\n    - id: y\n      type: System.Object\n      description: ''\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.StringComparer.System#Collections#IEqualityComparer#Equals*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml\n- uid: System.StringComparer.System#Collections#IEqualityComparer#GetHashCode(System.Object)\n  commentId: M:System.StringComparer.System#Collections#IEqualityComparer#GetHashCode(System.Object)\n  id: System#Collections#IEqualityComparer#GetHashCode(System.Object)\n  isEii: true\n  parent: System.StringComparer\n  langs:\n  - csharp\n  name: IEqualityComparer.GetHashCode(Object)\n  nameWithType: StringComparer.IEqualityComparer.GetHashCode(Object)\n  fullName: StringComparer.IEqualityComparer.GetHashCode(Object)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  syntax:\n    content: int IEqualityComparer.GetHashCode (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: ''\n    return:\n      type: System.Int32\n      description: ''\n  overload: System.StringComparer.System#Collections#IEqualityComparer#GetHashCode*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.StringComparer.#ctor\n  parent: System.StringComparer\n  isExternal: false\n  name: StringComparer()\n  nameWithType: StringComparer.StringComparer()\n  fullName: StringComparer.StringComparer()\n- uid: System.StringComparer.Compare(System.Object,System.Object)\n  parent: System.StringComparer\n  isExternal: false\n  name: Compare(Object, Object)\n  nameWithType: StringComparer.Compare(Object, Object)\n  fullName: StringComparer.Compare(Object, Object)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.StringComparer.Compare(System.String,System.String)\n  parent: System.StringComparer\n  isExternal: false\n  name: Compare(String, String)\n  nameWithType: StringComparer.Compare(String, String)\n  fullName: StringComparer.Compare(String, String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)\n  parent: System.StringComparer\n  isExternal: false\n  name: Create(CultureInfo, Boolean)\n  nameWithType: StringComparer.Create(CultureInfo, Boolean)\n  fullName: StringComparer.Create(CultureInfo, Boolean)\n- uid: System.StringComparer\n  parent: System\n  isExternal: false\n  name: StringComparer\n  nameWithType: StringComparer\n  fullName: System.StringComparer\n- uid: System.Globalization.CultureInfo\n  parent: System.Globalization\n  isExternal: false\n  name: CultureInfo\n  nameWithType: CultureInfo\n  fullName: System.Globalization.CultureInfo\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.StringComparer.CurrentCulture\n  parent: System.StringComparer\n  isExternal: false\n  name: CurrentCulture\n  nameWithType: StringComparer.CurrentCulture\n  fullName: StringComparer.CurrentCulture\n- uid: System.StringComparer.CurrentCultureIgnoreCase\n  parent: System.StringComparer\n  isExternal: false\n  name: CurrentCultureIgnoreCase\n  nameWithType: StringComparer.CurrentCultureIgnoreCase\n  fullName: StringComparer.CurrentCultureIgnoreCase\n- uid: System.StringComparer.Equals(System.Object,System.Object)\n  parent: System.StringComparer\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: StringComparer.Equals(Object, Object)\n  fullName: StringComparer.Equals(Object, Object)\n- uid: System.StringComparer.Equals(System.String,System.String)\n  parent: System.StringComparer\n  isExternal: false\n  name: Equals(String, String)\n  nameWithType: StringComparer.Equals(String, String)\n  fullName: StringComparer.Equals(String, String)\n- uid: System.StringComparer.FromComparison(System.StringComparison)\n  parent: System.StringComparer\n  isExternal: false\n  name: FromComparison(StringComparison)\n  nameWithType: StringComparer.FromComparison(StringComparison)\n  fullName: StringComparer.FromComparison(StringComparison)\n- uid: System.StringComparison\n  parent: System\n  isExternal: false\n  name: StringComparison\n  nameWithType: StringComparison\n  fullName: System.StringComparison\n- uid: System.StringComparer.GetHashCode(System.Object)\n  parent: System.StringComparer\n  isExternal: false\n  name: GetHashCode(Object)\n  nameWithType: StringComparer.GetHashCode(Object)\n  fullName: StringComparer.GetHashCode(Object)\n- uid: System.StringComparer.GetHashCode(System.String)\n  parent: System.StringComparer\n  isExternal: false\n  name: GetHashCode(String)\n  nameWithType: StringComparer.GetHashCode(String)\n  fullName: StringComparer.GetHashCode(String)\n- uid: System.StringComparer.InvariantCulture\n  parent: System.StringComparer\n  isExternal: false\n  name: InvariantCulture\n  nameWithType: StringComparer.InvariantCulture\n  fullName: StringComparer.InvariantCulture\n- uid: System.StringComparer.InvariantCultureIgnoreCase\n  parent: System.StringComparer\n  isExternal: false\n  name: InvariantCultureIgnoreCase\n  nameWithType: StringComparer.InvariantCultureIgnoreCase\n  fullName: StringComparer.InvariantCultureIgnoreCase\n- uid: System.StringComparer.Ordinal\n  parent: System.StringComparer\n  isExternal: false\n  name: Ordinal\n  nameWithType: StringComparer.Ordinal\n  fullName: StringComparer.Ordinal\n- uid: System.StringComparer.OrdinalIgnoreCase\n  parent: System.StringComparer\n  isExternal: false\n  name: OrdinalIgnoreCase\n  nameWithType: StringComparer.OrdinalIgnoreCase\n  fullName: StringComparer.OrdinalIgnoreCase\n- uid: System.StringComparer.System#Collections#IComparer#Compare(System.Object,System.Object)\n  parent: System.StringComparer\n  isExternal: false\n  name: IComparer.Compare(Object, Object)\n  nameWithType: StringComparer.IComparer.Compare(Object, Object)\n  fullName: StringComparer.IComparer.Compare(Object, Object)\n- uid: System.StringComparer.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)\n  parent: System.StringComparer\n  isExternal: false\n  name: IEqualityComparer.Equals(Object, Object)\n  nameWithType: StringComparer.IEqualityComparer.Equals(Object, Object)\n  fullName: StringComparer.IEqualityComparer.Equals(Object, Object)\n- uid: System.StringComparer.System#Collections#IEqualityComparer#GetHashCode(System.Object)\n  parent: System.StringComparer\n  isExternal: false\n  name: IEqualityComparer.GetHashCode(Object)\n  nameWithType: StringComparer.IEqualityComparer.GetHashCode(Object)\n  fullName: StringComparer.IEqualityComparer.GetHashCode(Object)\n- uid: System.StringComparer.#ctor*\n  parent: System.StringComparer\n  isExternal: false\n  name: StringComparer\n  nameWithType: StringComparer.StringComparer\n  fullName: StringComparer.StringComparer\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml\n- uid: System.StringComparer.Compare*\n  parent: System.StringComparer\n  isExternal: false\n  name: Compare\n  nameWithType: StringComparer.Compare\n  fullName: StringComparer.Compare\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml\n- uid: System.StringComparer.Create*\n  parent: System.StringComparer\n  isExternal: false\n  name: Create\n  nameWithType: StringComparer.Create\n  fullName: StringComparer.Create\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml\n- uid: System.StringComparer.CurrentCulture*\n  parent: System.StringComparer\n  isExternal: false\n  name: CurrentCulture\n  nameWithType: StringComparer.CurrentCulture\n  fullName: StringComparer.CurrentCulture\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml\n- uid: System.StringComparer.CurrentCultureIgnoreCase*\n  parent: System.StringComparer\n  isExternal: false\n  name: CurrentCultureIgnoreCase\n  nameWithType: StringComparer.CurrentCultureIgnoreCase\n  fullName: StringComparer.CurrentCultureIgnoreCase\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml\n- uid: System.StringComparer.Equals*\n  parent: System.StringComparer\n  isExternal: false\n  name: Equals\n  nameWithType: StringComparer.Equals\n  fullName: StringComparer.Equals\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml\n- uid: System.StringComparer.FromComparison*\n  parent: System.StringComparer\n  isExternal: false\n  name: FromComparison\n  nameWithType: StringComparer.FromComparison\n  fullName: StringComparer.FromComparison\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml\n- uid: System.StringComparer.GetHashCode*\n  parent: System.StringComparer\n  isExternal: false\n  name: GetHashCode\n  nameWithType: StringComparer.GetHashCode\n  fullName: StringComparer.GetHashCode\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml\n- uid: System.StringComparer.InvariantCulture*\n  parent: System.StringComparer\n  isExternal: false\n  name: InvariantCulture\n  nameWithType: StringComparer.InvariantCulture\n  fullName: StringComparer.InvariantCulture\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml\n- uid: System.StringComparer.InvariantCultureIgnoreCase*\n  parent: System.StringComparer\n  isExternal: false\n  name: InvariantCultureIgnoreCase\n  nameWithType: StringComparer.InvariantCultureIgnoreCase\n  fullName: StringComparer.InvariantCultureIgnoreCase\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml\n- uid: System.StringComparer.Ordinal*\n  parent: System.StringComparer\n  isExternal: false\n  name: Ordinal\n  nameWithType: StringComparer.Ordinal\n  fullName: StringComparer.Ordinal\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml\n- uid: System.StringComparer.OrdinalIgnoreCase*\n  parent: System.StringComparer\n  isExternal: false\n  name: OrdinalIgnoreCase\n  nameWithType: StringComparer.OrdinalIgnoreCase\n  fullName: StringComparer.OrdinalIgnoreCase\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml\n- uid: System.StringComparer.System#Collections#IComparer#Compare*\n  parent: System.StringComparer\n  isExternal: false\n  name: System.Collections.IComparer.Compare\n  nameWithType: StringComparer.System.Collections.IComparer.Compare\n  fullName: StringComparer.System.Collections.IComparer.Compare\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml\n- uid: System.StringComparer.System#Collections#IEqualityComparer#Equals*\n  parent: System.StringComparer\n  isExternal: false\n  name: System.Collections.IEqualityComparer.Equals\n  nameWithType: StringComparer.System.Collections.IEqualityComparer.Equals\n  fullName: StringComparer.System.Collections.IEqualityComparer.Equals\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml\n- uid: System.StringComparer.System#Collections#IEqualityComparer#GetHashCode*\n  parent: System.StringComparer\n  isExternal: false\n  name: System.Collections.IEqualityComparer.GetHashCode\n  nameWithType: StringComparer.System.Collections.IEqualityComparer.GetHashCode\n  fullName: StringComparer.System.Collections.IEqualityComparer.GetHashCode\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparer.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Collections.Generic.IComparer`1\n  name: IComparer<T>\n  nameWithType: IComparer<T>\n  fullName: System.Collections.Generic.IComparer<T>\n- uid: System.Collections.Generic.IComparer{System.String}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IComparer<String>\n  nameWithType: IComparer<String>\n  fullName: System.Collections.Generic.IComparer<System.String>\n  spec.csharp:\n  - uid: System.Collections.Generic.IComparer`1\n    name: IComparer\n    nameWithType: IComparer\n    fullName: System.Collections.Generic.IComparer\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: System.String\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Collections.Generic.IEqualityComparer`1\n  name: IEqualityComparer<T>\n  nameWithType: IEqualityComparer<T>\n  fullName: System.Collections.Generic.IEqualityComparer<T>\n- uid: System.Collections.Generic.IEqualityComparer{System.String}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEqualityComparer<String>\n  nameWithType: IEqualityComparer<String>\n  fullName: System.Collections.Generic.IEqualityComparer<System.String>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEqualityComparer`1\n    name: IEqualityComparer\n    nameWithType: IEqualityComparer\n    fullName: System.Collections.Generic.IEqualityComparer\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: System.String\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Collections.IComparer\n  parent: System.Collections\n  isExternal: false\n  name: IComparer\n  nameWithType: IComparer\n  fullName: System.Collections.IComparer\n- uid: System.Collections.IEqualityComparer\n  parent: System.Collections\n  isExternal: false\n  name: IEqualityComparer\n  nameWithType: IEqualityComparer\n  fullName: System.Collections.IEqualityComparer\n"}