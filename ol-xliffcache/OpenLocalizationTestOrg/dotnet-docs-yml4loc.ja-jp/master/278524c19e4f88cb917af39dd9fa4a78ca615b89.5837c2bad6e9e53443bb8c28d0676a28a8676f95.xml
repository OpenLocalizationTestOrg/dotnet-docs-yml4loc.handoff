{"nodes":[{"content":"Encapsulates a method that has 12 parameters and does not return a value.","nodes":[{"pos":[0,73],"content":"Encapsulates a method that has 12 parameters and does not return a value.","nodes":[{"content":"Encapsulates a method that has 12 parameters and does not return a value.","pos":[0,73]}]}],"pos":[425,499],"yaml":true},{"content":"You can use the <xref:System.Action%6012> delegate to pass a method as a parameter without explicitly declaring a custom delegate. The encapsulated method must correspond to the method signature that is defined by this delegate. This means that the encapsulated method must have 12 parameters that are all passed to it by value, and it must not return a value. (In C#, the method must return `void`. In Visual Basic, it must be defined by the `Sub`…`End Sub` construct. It can also be a method that returns a value that is ignored.) Typically, such a method is used to perform an operation.  \n  \n> [!NOTE]\n>  To reference a method that has 12 parameters and returns a value, use the generic <xref:System.Func%6013> delegate instead.  \n  \n You can also use the <xref:System.Action%6012> delegate with anonymous methods and lambda expressions.","nodes":[{"pos":[0,590],"content":"You can use the <xref:System.Action%6012> delegate to pass a method as a parameter without explicitly declaring a custom delegate. The encapsulated method must correspond to the method signature that is defined by this delegate. This means that the encapsulated method must have 12 parameters that are all passed to it by value, and it must not return a value. (In C#, the method must return `void`. In Visual Basic, it must be defined by the `Sub`…`End Sub` construct. It can also be a method that returns a value that is ignored.) Typically, such a method is used to perform an operation.","nodes":[{"content":"You can use the <ph id=\"ph1\">&lt;xref:System.Action%6012&gt;</ph> delegate to pass a method as a parameter without explicitly declaring a custom delegate.","pos":[0,130],"source":"You can use the <xref:System.Action%6012> delegate to pass a method as a parameter without explicitly declaring a custom delegate."},{"content":"The encapsulated method must correspond to the method signature that is defined by this delegate.","pos":[131,228]},{"content":"This means that the encapsulated method must have 12 parameters that are all passed to it by value, and it must not return a value.","pos":[229,360]},{"content":"(In C#, the method must return <ph id=\"ph1\">`void`</ph>.","pos":[361,399],"source":" (In C#, the method must return `void`."},{"content":"In Visual Basic, it must be defined by the <ph id=\"ph1\">`Sub`</ph>…<ph id=\"ph2\">`End Sub`</ph>","pos":[400,458],"source":" In Visual Basic, it must be defined by the `Sub`…`End Sub`"},{"content":"construct.","pos":[459,469]},{"content":"It can also be a method that returns a value that is ignored.) Typically, such a method is used to perform an operation.","pos":[470,590]}]},{"pos":[598,732],"content":"[!NOTE]\n To reference a method that has 12 parameters and returns a value, use the generic <xref:System.Func%6013> delegate instead.","leadings":["","> "],"nodes":[{"content":"To reference a method that has 12 parameters and returns a value, use the generic <ph id=\"ph1\">&lt;xref:System.Func%6013&gt;</ph> delegate instead.","pos":[9,132],"source":" To reference a method that has 12 parameters and returns a value, use the generic <xref:System.Func%6013> delegate instead."}]},{"pos":[739,841],"content":"You can also use the <xref:System.Action%6012> delegate with anonymous methods and lambda expressions.","nodes":[{"content":"You can also use the <ph id=\"ph1\">&lt;xref:System.Action%6012&gt;</ph> delegate with anonymous methods and lambda expressions.","pos":[0,102],"source":"You can also use the <xref:System.Action%6012> delegate with anonymous methods and lambda expressions."}]}],"pos":[510,1359],"yaml":true,"extradata":"MT"},{"content":"The type of the first parameter of the method that this delegate encapsulates.","nodes":[{"pos":[0,78],"content":"The type of the first parameter of the method that this delegate encapsulates.","nodes":[{"content":"The type of the first parameter of the method that this delegate encapsulates.","pos":[0,78]}]}],"pos":[1653,1732],"yaml":true},{"content":"The type of the second parameter of the method that this delegate encapsulates.","nodes":[{"pos":[0,79],"content":"The type of the second parameter of the method that this delegate encapsulates.","nodes":[{"content":"The type of the second parameter of the method that this delegate encapsulates.","pos":[0,79]}]}],"pos":[1764,1844],"yaml":true},{"content":"The type of the third parameter of the method that this delegate encapsulates.","nodes":[{"pos":[0,78],"content":"The type of the third parameter of the method that this delegate encapsulates.","nodes":[{"content":"The type of the third parameter of the method that this delegate encapsulates.","pos":[0,78]}]}],"pos":[1876,1955],"yaml":true},{"content":"The type of the fourth parameter of the method that this delegate encapsulates.","nodes":[{"pos":[0,79],"content":"The type of the fourth parameter of the method that this delegate encapsulates.","nodes":[{"content":"The type of the fourth parameter of the method that this delegate encapsulates.","pos":[0,79]}]}],"pos":[1987,2067],"yaml":true},{"content":"The type of the fifth parameter of the method that this delegate encapsulates.","nodes":[{"pos":[0,78],"content":"The type of the fifth parameter of the method that this delegate encapsulates.","nodes":[{"content":"The type of the fifth parameter of the method that this delegate encapsulates.","pos":[0,78]}]}],"pos":[2099,2178],"yaml":true},{"content":"The type of the sixth parameter of the method that this delegate encapsulates.","nodes":[{"pos":[0,78],"content":"The type of the sixth parameter of the method that this delegate encapsulates.","nodes":[{"content":"The type of the sixth parameter of the method that this delegate encapsulates.","pos":[0,78]}]}],"pos":[2210,2289],"yaml":true},{"content":"The type of the seventh parameter of the method that this delegate encapsulates.","nodes":[{"pos":[0,80],"content":"The type of the seventh parameter of the method that this delegate encapsulates.","nodes":[{"content":"The type of the seventh parameter of the method that this delegate encapsulates.","pos":[0,80]}]}],"pos":[2321,2402],"yaml":true},{"content":"The type of the eighth parameter of the method that this delegate encapsulates.","nodes":[{"pos":[0,79],"content":"The type of the eighth parameter of the method that this delegate encapsulates.","nodes":[{"content":"The type of the eighth parameter of the method that this delegate encapsulates.","pos":[0,79]}]}],"pos":[2434,2514],"yaml":true},{"content":"The type of the ninth parameter of the method that this delegate encapsulates.","nodes":[{"pos":[0,78],"content":"The type of the ninth parameter of the method that this delegate encapsulates.","nodes":[{"content":"The type of the ninth parameter of the method that this delegate encapsulates.","pos":[0,78]}]}],"pos":[2546,2625],"yaml":true},{"content":"The type of the tenth parameter of the method that this delegate encapsulates.","nodes":[{"pos":[0,78],"content":"The type of the tenth parameter of the method that this delegate encapsulates.","nodes":[{"content":"The type of the tenth parameter of the method that this delegate encapsulates.","pos":[0,78]}]}],"pos":[2658,2737],"yaml":true},{"content":"The type of the eleventh parameter of the method that this delegate encapsulates.","nodes":[{"pos":[0,81],"content":"The type of the eleventh parameter of the method that this delegate encapsulates.","nodes":[{"content":"The type of the eleventh parameter of the method that this delegate encapsulates.","pos":[0,81]}]}],"pos":[2770,2852],"yaml":true},{"content":"The type of the twelfth parameter of the method that this delegate encapsulates.","nodes":[{"pos":[0,80],"content":"The type of the twelfth parameter of the method that this delegate encapsulates.","nodes":[{"content":"The type of the twelfth parameter of the method that this delegate encapsulates.","pos":[0,80]}]}],"pos":[2885,2966],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Action`12\n  commentId: T:System.Action`12\n  id: Action`12\n  langs:\n  - csharp\n  name: Action<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>\n  nameWithType: Action<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>\n  fullName: System.Action<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>\n  type: Delegate\n  assemblies:\n  - System.Runtime\n  - System.Core\n  - netstandard\n  namespace: System\n  summary: Encapsulates a method that has 12 parameters and does not return a value.\n  remarks: \"You can use the <xref:System.Action%6012> delegate to pass a method as a parameter without explicitly declaring a custom delegate. The encapsulated method must correspond to the method signature that is defined by this delegate. This means that the encapsulated method must have 12 parameters that are all passed to it by value, and it must not return a value. (In C#, the method must return `void`. In Visual Basic, it must be defined by the `Sub`…`End Sub` construct. It can also be a method that returns a value that is ignored.) Typically, such a method is used to perform an operation.  \\n  \\n> [!NOTE]\\n>  To reference a method that has 12 parameters and returns a value, use the generic <xref:System.Func%6013> delegate instead.  \\n  \\n You can also use the <xref:System.Action%6012> delegate with anonymous methods and lambda expressions.\"\n  syntax:\n    content: public delegate void Action<in T1,in T2,in T3,in T4,in T5,in T6,in T7,in T8,in T9,in T10,in T11,in T12>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12);\n    typeParameters:\n    - id: T1\n      description: The type of the first parameter of the method that this delegate encapsulates.\n    - id: T2\n      description: The type of the second parameter of the method that this delegate encapsulates.\n    - id: T3\n      description: The type of the third parameter of the method that this delegate encapsulates.\n    - id: T4\n      description: The type of the fourth parameter of the method that this delegate encapsulates.\n    - id: T5\n      description: The type of the fifth parameter of the method that this delegate encapsulates.\n    - id: T6\n      description: The type of the sixth parameter of the method that this delegate encapsulates.\n    - id: T7\n      description: The type of the seventh parameter of the method that this delegate encapsulates.\n    - id: T8\n      description: The type of the eighth parameter of the method that this delegate encapsulates.\n    - id: T9\n      description: The type of the ninth parameter of the method that this delegate encapsulates.\n    - id: T10\n      description: The type of the tenth parameter of the method that this delegate encapsulates.\n    - id: T11\n      description: The type of the eleventh parameter of the method that this delegate encapsulates.\n    - id: T12\n      description: The type of the twelfth parameter of the method that this delegate encapsulates.\n  inheritance:\n  - System.Object\n  - System.Delegate\n  extensionMethods:\n  - System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Action`12.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Delegate\n  parent: System\n  isExternal: false\n  name: Delegate\n  nameWithType: Delegate\n  fullName: System.Delegate\n- uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n  parent: System.Reflection.RuntimeReflectionExtensions\n  isExternal: false\n  name: GetMethodInfo(Delegate)\n  nameWithType: RuntimeReflectionExtensions.GetMethodInfo(Delegate)\n  fullName: RuntimeReflectionExtensions.GetMethodInfo(Delegate)\n"}