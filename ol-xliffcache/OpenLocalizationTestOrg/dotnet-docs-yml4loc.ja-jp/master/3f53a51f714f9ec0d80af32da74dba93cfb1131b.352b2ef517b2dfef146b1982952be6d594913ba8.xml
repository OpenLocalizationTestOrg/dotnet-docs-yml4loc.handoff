{"nodes":[{"content":"Provides constants and static methods for trigonometric, logarithmic, and other common mathematical functions.","nodes":[{"pos":[0,110],"content":"Provides constants and static methods for trigonometric, logarithmic, and other common mathematical functions.","nodes":[{"content":"Provides constants and static methods for trigonometric, logarithmic, and other common mathematical functions.","pos":[0,110]}]}],"pos":[4120,4231],"yaml":true},{"content":"> [!NOTE]\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/math.cs#a4407e67b9a5afad). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).","nodes":[{"pos":[2,403],"content":"[!NOTE]\n To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/math.cs#a4407e67b9a5afad). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).","leadings":["","> "],"nodes":[{"content":" To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/math.cs#a4407e67b9a5afad). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).","pos":[8,399],"nodes":[{"content":"To view the .NET Framework source code for this type, see the <bpt id=\"p1\">[</bpt>Reference Source<ept id=\"p1\">](http://referencesource.microsoft.com/#mscorlib/system/math.cs#a4407e67b9a5afad)</ept>.","pos":[1,162],"source":" To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/math.cs#a4407e67b9a5afad)."},{"content":"You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <bpt id=\"p1\">[</bpt>instructions<ept id=\"p1\">](http://referencesource.microsoft.com/)</ept>.","pos":[163,391],"source":" You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/)."}]}]}],"pos":[4242,4658],"yaml":true,"extradata":"MT"},{"content":"Returns the absolute value of a <xref href=\"System.Decimal\"></xref> number.","nodes":[{"pos":[0,75],"content":"Returns the absolute value of a <ph id=\"ph1\">&lt;xref href=\"System.Decimal\"&gt;&lt;/xref&gt;</ph> number.","source":"Returns the absolute value of a <xref href=\"System.Decimal\"></xref> number."}],"pos":[6948,7024],"yaml":true},{"content":"The absolute value of a <xref:System.Decimal> is its numeric value without its sign. For example, the absolute value of both 1.2 and -1.2 is 1.2.","nodes":[{"pos":[0,145],"content":"The absolute value of a <xref:System.Decimal> is its numeric value without its sign. For example, the absolute value of both 1.2 and -1.2 is 1.2.","nodes":[{"content":"The absolute value of a <xref:System.Decimal> is its numeric value without its sign. For example, the absolute value of both 1.2 and -1.2 is 1.2.","pos":[0,145],"nodes":[{"content":"The absolute value of a <ph id=\"ph1\">&lt;xref:System.Decimal&gt;</ph> is its numeric value without its sign.","pos":[0,84],"source":"The absolute value of a <xref:System.Decimal> is its numeric value without its sign."},{"content":"For example, the absolute value of both 1.2 and -1.2 is 1.2.","pos":[85,145]}]}]}],"pos":[7035,7181],"yaml":true,"extradata":"MT"},{"content":"A number that is greater than or equal to <xref href=\"System.Decimal.MinValue\"></xref>, but less than or equal to <xref href=\"System.Decimal.MaxValue\"></xref>.","nodes":[{"pos":[0,159],"content":"A number that is greater than or equal to <ph id=\"ph1\">&lt;xref href=\"System.Decimal.MinValue\"&gt;&lt;/xref&gt;</ph>, but less than or equal to <ph id=\"ph2\">&lt;xref href=\"System.Decimal.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"A number that is greater than or equal to <xref href=\"System.Decimal.MinValue\"></xref>, but less than or equal to <xref href=\"System.Decimal.MaxValue\"></xref>."}],"pos":[7731,7891],"yaml":true},{"content":"A decimal number, x, such that 0 ≤ x ≤<xref href=\"System.Decimal.MaxValue\"></xref>.","nodes":[{"pos":[0,83],"content":"A decimal number, x, such that 0 ≤ x ≤<ph id=\"ph1\">&lt;xref href=\"System.Decimal.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"A decimal number, x, such that 0 ≤ x ≤<xref href=\"System.Decimal.MaxValue\"></xref>."}],"pos":[7949,8033],"yaml":true},{"content":"Returns the absolute value of a double-precision floating-point number.","nodes":[{"pos":[0,71],"content":"Returns the absolute value of a double-precision floating-point number.","nodes":[{"content":"Returns the absolute value of a double-precision floating-point number.","pos":[0,71]}]}],"pos":[9483,9555],"yaml":true},{"content":"The absolute value of a <xref:System.Double> is its numeric value without its sign. For example, the absolute value of both 1.2e03 and -1.2e03 is 1.2e03.  \n  \n If `value` is equal to <xref:System.Double.NegativeInfinity> or <xref:System.Double.PositiveInfinity>, the return value is <xref:System.Double.PositiveInfinity>. If `value` is equal to <xref:System.Double.NaN>, the return value is <xref:System.Double.NaN>.","nodes":[{"pos":[0,153],"content":"The absolute value of a <xref:System.Double> is its numeric value without its sign. For example, the absolute value of both 1.2e03 and -1.2e03 is 1.2e03.","nodes":[{"content":"The absolute value of a <xref:System.Double> is its numeric value without its sign. For example, the absolute value of both 1.2e03 and -1.2e03 is 1.2e03.","pos":[0,153],"nodes":[{"content":"The absolute value of a <ph id=\"ph1\">&lt;xref:System.Double&gt;</ph> is its numeric value without its sign.","pos":[0,83],"source":"The absolute value of a <xref:System.Double> is its numeric value without its sign."},{"content":"For example, the absolute value of both 1.2e03 and -1.2e03 is 1.2e03.","pos":[84,153]}]}]},{"pos":[160,416],"content":"If `value` is equal to <xref:System.Double.NegativeInfinity> or <xref:System.Double.PositiveInfinity>, the return value is <xref:System.Double.PositiveInfinity>. If `value` is equal to <xref:System.Double.NaN>, the return value is <xref:System.Double.NaN>.","nodes":[{"content":"If <ph id=\"ph1\">`value`</ph> is equal to <ph id=\"ph2\">&lt;xref:System.Double.NegativeInfinity&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Double.PositiveInfinity&gt;</ph>, the return value is <ph id=\"ph4\">&lt;xref:System.Double.PositiveInfinity&gt;</ph>.","pos":[0,161],"source":"If `value` is equal to <xref:System.Double.NegativeInfinity> or <xref:System.Double.PositiveInfinity>, the return value is <xref:System.Double.PositiveInfinity>."},{"content":"If <ph id=\"ph1\">`value`</ph> is equal to <ph id=\"ph2\">&lt;xref:System.Double.NaN&gt;</ph>, the return value is <ph id=\"ph3\">&lt;xref:System.Double.NaN&gt;</ph>.","pos":[162,256],"source":" If `value` is equal to <xref:System.Double.NaN>, the return value is <xref:System.Double.NaN>."}]}],"pos":[9566,9987],"yaml":true,"extradata":"MT"},{"content":"A number that is greater than or equal to <xref href=\"System.Double.MinValue\"></xref>, but less than or equal to <xref href=\"System.Double.MaxValue\"></xref>.","nodes":[{"pos":[0,157],"content":"A number that is greater than or equal to <ph id=\"ph1\">&lt;xref href=\"System.Double.MinValue\"&gt;&lt;/xref&gt;</ph>, but less than or equal to <ph id=\"ph2\">&lt;xref href=\"System.Double.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"A number that is greater than or equal to <xref href=\"System.Double.MinValue\"></xref>, but less than or equal to <xref href=\"System.Double.MaxValue\"></xref>."}],"pos":[10532,10690],"yaml":true},{"content":"A double-precision floating-point number, x, such that 0 ≤ x ≤<xref href=\"System.Double.MaxValue\"></xref>.","nodes":[{"pos":[0,106],"content":"A double-precision floating-point number, x, such that 0 ≤ x ≤<ph id=\"ph1\">&lt;xref href=\"System.Double.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"A double-precision floating-point number, x, such that 0 ≤ x ≤<xref href=\"System.Double.MaxValue\"></xref>."}],"pos":[10747,10854],"yaml":true},{"content":"Returns the absolute value of a 16-bit signed integer.","nodes":[{"pos":[0,54],"content":"Returns the absolute value of a 16-bit signed integer.","nodes":[{"content":"Returns the absolute value of a 16-bit signed integer.","pos":[0,54]}]}],"pos":[12315,12370],"yaml":true},{"content":"The absolute value of an <xref:System.Int16> is its numeric value without its sign. For example, the absolute value of both 123 and -123 is 123.","nodes":[{"pos":[0,144],"content":"The absolute value of an <xref:System.Int16> is its numeric value without its sign. For example, the absolute value of both 123 and -123 is 123.","nodes":[{"content":"The absolute value of an <xref:System.Int16> is its numeric value without its sign. For example, the absolute value of both 123 and -123 is 123.","pos":[0,144],"nodes":[{"content":"The absolute value of an <ph id=\"ph1\">&lt;xref:System.Int16&gt;</ph> is its numeric value without its sign.","pos":[0,83],"source":"The absolute value of an <xref:System.Int16> is its numeric value without its sign."},{"content":"For example, the absolute value of both 123 and -123 is 123.","pos":[84,144]}]}]}],"pos":[12381,12526],"yaml":true,"extradata":"MT"},{"content":"A number that is greater than <xref href=\"System.Int16.MinValue\"></xref>, but less than or equal to <xref href=\"System.Int16.MaxValue\"></xref>.","nodes":[{"pos":[0,143],"content":"A number that is greater than <ph id=\"ph1\">&lt;xref href=\"System.Int16.MinValue\"&gt;&lt;/xref&gt;</ph>, but less than or equal to <ph id=\"ph2\">&lt;xref href=\"System.Int16.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"A number that is greater than <xref href=\"System.Int16.MinValue\"></xref>, but less than or equal to <xref href=\"System.Int16.MaxValue\"></xref>."}],"pos":[13066,13210],"yaml":true},{"content":"A 16-bit signed integer, x, such that 0 ≤ x ≤<xref href=\"System.Int16.MaxValue\"></xref>.","nodes":[{"pos":[0,88],"content":"A 16-bit signed integer, x, such that 0 ≤ x ≤<ph id=\"ph1\">&lt;xref href=\"System.Int16.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"A 16-bit signed integer, x, such that 0 ≤ x ≤<xref href=\"System.Int16.MaxValue\"></xref>."}],"pos":[13266,13355],"yaml":true},{"content":"<code>value</code> equals <xref href=\"System.Int16.MinValue\"></xref>.","nodes":[{"pos":[0,69],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> equals <ph id=\"ph2\">&lt;xref href=\"System.Int16.MinValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> equals <xref href=\"System.Int16.MinValue\"></xref>."}],"pos":[13492,13562],"yaml":true},{"content":"Returns the absolute value of a 32-bit signed integer.","nodes":[{"pos":[0,54],"content":"Returns the absolute value of a 32-bit signed integer.","nodes":[{"content":"Returns the absolute value of a 32-bit signed integer.","pos":[0,54]}]}],"pos":[14960,15015],"yaml":true},{"content":"The absolute value of an <xref:System.Int32> is its numeric value without its sign. For example, the absolute value of both 123 and -123 is 123.","nodes":[{"pos":[0,144],"content":"The absolute value of an <xref:System.Int32> is its numeric value without its sign. For example, the absolute value of both 123 and -123 is 123.","nodes":[{"content":"The absolute value of an <xref:System.Int32> is its numeric value without its sign. For example, the absolute value of both 123 and -123 is 123.","pos":[0,144],"nodes":[{"content":"The absolute value of an <ph id=\"ph1\">&lt;xref:System.Int32&gt;</ph> is its numeric value without its sign.","pos":[0,83],"source":"The absolute value of an <xref:System.Int32> is its numeric value without its sign."},{"content":"For example, the absolute value of both 123 and -123 is 123.","pos":[84,144]}]}]}],"pos":[15026,15171],"yaml":true,"extradata":"MT"},{"content":"A number that is greater than <xref href=\"System.Int32.MinValue\"></xref>, but less than or equal to <xref href=\"System.Int32.MaxValue\"></xref>.","nodes":[{"pos":[0,143],"content":"A number that is greater than <ph id=\"ph1\">&lt;xref href=\"System.Int32.MinValue\"&gt;&lt;/xref&gt;</ph>, but less than or equal to <ph id=\"ph2\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"A number that is greater than <xref href=\"System.Int32.MinValue\"></xref>, but less than or equal to <xref href=\"System.Int32.MaxValue\"></xref>."}],"pos":[15707,15851],"yaml":true},{"content":"A 32-bit signed integer, x, such that 0 ≤ x ≤<xref href=\"System.Int32.MaxValue\"></xref>.","nodes":[{"pos":[0,88],"content":"A 32-bit signed integer, x, such that 0 ≤ x ≤<ph id=\"ph1\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"A 32-bit signed integer, x, such that 0 ≤ x ≤<xref href=\"System.Int32.MaxValue\"></xref>."}],"pos":[15907,15996],"yaml":true},{"content":"<code>value</code> equals <xref href=\"System.Int32.MinValue\"></xref>.","nodes":[{"pos":[0,69],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> equals <ph id=\"ph2\">&lt;xref href=\"System.Int32.MinValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> equals <xref href=\"System.Int32.MinValue\"></xref>."}],"pos":[16133,16203],"yaml":true},{"content":"Returns the absolute value of a 64-bit signed integer.","nodes":[{"pos":[0,54],"content":"Returns the absolute value of a 64-bit signed integer.","nodes":[{"content":"Returns the absolute value of a 64-bit signed integer.","pos":[0,54]}]}],"pos":[17601,17656],"yaml":true},{"content":"The absolute value of an <xref:System.Int64> is its numeric value without its sign. For example, the absolute value of both 123 and -123 is 123.","nodes":[{"pos":[0,144],"content":"The absolute value of an <xref:System.Int64> is its numeric value without its sign. For example, the absolute value of both 123 and -123 is 123.","nodes":[{"content":"The absolute value of an <xref:System.Int64> is its numeric value without its sign. For example, the absolute value of both 123 and -123 is 123.","pos":[0,144],"nodes":[{"content":"The absolute value of an <ph id=\"ph1\">&lt;xref:System.Int64&gt;</ph> is its numeric value without its sign.","pos":[0,83],"source":"The absolute value of an <xref:System.Int64> is its numeric value without its sign."},{"content":"For example, the absolute value of both 123 and -123 is 123.","pos":[84,144]}]}]}],"pos":[17667,17812],"yaml":true,"extradata":"MT"},{"content":"A number that is greater than <xref href=\"System.Int64.MinValue\"></xref>, but less than or equal to <xref href=\"System.Int64.MaxValue\"></xref>.","nodes":[{"pos":[0,143],"content":"A number that is greater than <ph id=\"ph1\">&lt;xref href=\"System.Int64.MinValue\"&gt;&lt;/xref&gt;</ph>, but less than or equal to <ph id=\"ph2\">&lt;xref href=\"System.Int64.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"A number that is greater than <xref href=\"System.Int64.MinValue\"></xref>, but less than or equal to <xref href=\"System.Int64.MaxValue\"></xref>."}],"pos":[18350,18494],"yaml":true},{"content":"A 64-bit signed integer, x, such that 0 ≤ x ≤<xref href=\"System.Int64.MaxValue\"></xref>.","nodes":[{"pos":[0,88],"content":"A 64-bit signed integer, x, such that 0 ≤ x ≤<ph id=\"ph1\">&lt;xref href=\"System.Int64.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"A 64-bit signed integer, x, such that 0 ≤ x ≤<xref href=\"System.Int64.MaxValue\"></xref>."}],"pos":[18550,18639],"yaml":true},{"content":"<code>value</code> equals <xref href=\"System.Int64.MinValue\"></xref>.","nodes":[{"pos":[0,69],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> equals <ph id=\"ph2\">&lt;xref href=\"System.Int64.MinValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> equals <xref href=\"System.Int64.MinValue\"></xref>."}],"pos":[18776,18846],"yaml":true},{"content":"Returns the absolute value of an 8-bit signed integer.","nodes":[{"pos":[0,54],"content":"Returns the absolute value of an 8-bit signed integer.","nodes":[{"content":"Returns the absolute value of an 8-bit signed integer.","pos":[0,54]}]}],"pos":[20244,20299],"yaml":true},{"content":"The absolute value of a signed byte is its numeric value without its sign. For example, the absolute value of both 12 and -12 is 12.","nodes":[{"pos":[0,132],"content":"The absolute value of a signed byte is its numeric value without its sign. For example, the absolute value of both 12 and -12 is 12.","nodes":[{"content":"The absolute value of a signed byte is its numeric value without its sign. For example, the absolute value of both 12 and -12 is 12.","pos":[0,132],"nodes":[{"content":"The absolute value of a signed byte is its numeric value without its sign.","pos":[0,74]},{"content":"For example, the absolute value of both 12 and -12 is 12.","pos":[75,132]}]}]}],"pos":[20310,20443],"yaml":true,"extradata":"MT"},{"content":"A number that is greater than <xref href=\"System.SByte.MinValue\"></xref>, but less than or equal to <xref href=\"System.SByte.MaxValue\"></xref>.","nodes":[{"pos":[0,143],"content":"A number that is greater than <ph id=\"ph1\">&lt;xref href=\"System.SByte.MinValue\"&gt;&lt;/xref&gt;</ph>, but less than or equal to <ph id=\"ph2\">&lt;xref href=\"System.SByte.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"A number that is greater than <xref href=\"System.SByte.MinValue\"></xref>, but less than or equal to <xref href=\"System.SByte.MaxValue\"></xref>."}],"pos":[21028,21172],"yaml":true},{"content":"An 8-bit signed integer, x, such that 0 ≤ x ≤<xref href=\"System.SByte.MaxValue\"></xref>.","nodes":[{"pos":[0,88],"content":"An 8-bit signed integer, x, such that 0 ≤ x ≤<ph id=\"ph1\">&lt;xref href=\"System.SByte.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"An 8-bit signed integer, x, such that 0 ≤ x ≤<xref href=\"System.SByte.MaxValue\"></xref>."}],"pos":[21228,21317],"yaml":true},{"content":"<code>value</code> equals <xref href=\"System.SByte.MinValue\"></xref>.","nodes":[{"pos":[0,69],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> equals <ph id=\"ph2\">&lt;xref href=\"System.SByte.MinValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> equals <xref href=\"System.SByte.MinValue\"></xref>."}],"pos":[21454,21524],"yaml":true},{"content":"Returns the absolute value of a single-precision floating-point number.","nodes":[{"pos":[0,71],"content":"Returns the absolute value of a single-precision floating-point number.","nodes":[{"content":"Returns the absolute value of a single-precision floating-point number.","pos":[0,71]}]}],"pos":[22981,23053],"yaml":true},{"content":"The absolute value of a <xref:System.Single> is its numeric value without its sign. For example, the absolute value of both 1.2e-03 and -1.2e03 is 1.2e03.  \n  \n If `value` is equal to <xref:System.Single.NegativeInfinity> or <xref:System.Single.PositiveInfinity>, the return value is <xref:System.Single.PositiveInfinity>. If `value` is equal to <xref:System.Single.NaN>, the return value is <xref:System.Single.NaN>.","nodes":[{"pos":[0,154],"content":"The absolute value of a <xref:System.Single> is its numeric value without its sign. For example, the absolute value of both 1.2e-03 and -1.2e03 is 1.2e03.","nodes":[{"content":"The absolute value of a <xref:System.Single> is its numeric value without its sign. For example, the absolute value of both 1.2e-03 and -1.2e03 is 1.2e03.","pos":[0,154],"nodes":[{"content":"The absolute value of a <ph id=\"ph1\">&lt;xref:System.Single&gt;</ph> is its numeric value without its sign.","pos":[0,83],"source":"The absolute value of a <xref:System.Single> is its numeric value without its sign."},{"content":"For example, the absolute value of both 1.2e-03 and -1.2e03 is 1.2e03.","pos":[84,154]}]}]},{"pos":[161,417],"content":"If `value` is equal to <xref:System.Single.NegativeInfinity> or <xref:System.Single.PositiveInfinity>, the return value is <xref:System.Single.PositiveInfinity>. If `value` is equal to <xref:System.Single.NaN>, the return value is <xref:System.Single.NaN>.","nodes":[{"content":"If <ph id=\"ph1\">`value`</ph> is equal to <ph id=\"ph2\">&lt;xref:System.Single.NegativeInfinity&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Single.PositiveInfinity&gt;</ph>, the return value is <ph id=\"ph4\">&lt;xref:System.Single.PositiveInfinity&gt;</ph>.","pos":[0,161],"source":"If `value` is equal to <xref:System.Single.NegativeInfinity> or <xref:System.Single.PositiveInfinity>, the return value is <xref:System.Single.PositiveInfinity>."},{"content":"If <ph id=\"ph1\">`value`</ph> is equal to <ph id=\"ph2\">&lt;xref:System.Single.NaN&gt;</ph>, the return value is <ph id=\"ph3\">&lt;xref:System.Single.NaN&gt;</ph>.","pos":[162,256],"source":" If `value` is equal to <xref:System.Single.NaN>, the return value is <xref:System.Single.NaN>."}]}],"pos":[23064,23486],"yaml":true,"extradata":"MT"},{"content":"A number that is greater than or equal to <xref href=\"System.Single.MinValue\"></xref>, but less than or equal to <xref href=\"System.Single.MaxValue\"></xref>.","nodes":[{"pos":[0,157],"content":"A number that is greater than or equal to <ph id=\"ph1\">&lt;xref href=\"System.Single.MinValue\"&gt;&lt;/xref&gt;</ph>, but less than or equal to <ph id=\"ph2\">&lt;xref href=\"System.Single.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"A number that is greater than or equal to <xref href=\"System.Single.MinValue\"></xref>, but less than or equal to <xref href=\"System.Single.MaxValue\"></xref>."}],"pos":[24029,24187],"yaml":true},{"content":"A single-precision floating-point number, x, such that 0 ≤ x ≤<xref href=\"System.Single.MaxValue\"></xref>.","nodes":[{"pos":[0,106],"content":"A single-precision floating-point number, x, such that 0 ≤ x ≤<ph id=\"ph1\">&lt;xref href=\"System.Single.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"A single-precision floating-point number, x, such that 0 ≤ x ≤<xref href=\"System.Single.MaxValue\"></xref>."}],"pos":[24244,24351],"yaml":true},{"content":"Returns the angle whose cosine is the specified number.","nodes":[{"pos":[0,55],"content":"Returns the angle whose cosine is the specified number.","nodes":[{"content":"Returns the angle whose cosine is the specified number.","pos":[0,55]}]}],"pos":[25824,25880],"yaml":true},{"content":"Multiply the return value by 180/<xref:System.Math.PI?displayProperty=fullName> to convert from radians to degrees.","nodes":[{"pos":[0,115],"content":"Multiply the return value by 180/<xref:System.Math.PI?displayProperty=fullName> to convert from radians to degrees.","nodes":[{"content":"Multiply the return value by 180/<ph id=\"ph1\">&lt;xref:System.Math.PI?displayProperty=fullName&gt;</ph> to convert from radians to degrees.","pos":[0,115],"source":"Multiply the return value by 180/<xref:System.Math.PI?displayProperty=fullName> to convert from radians to degrees."}]}],"pos":[25891,26007],"yaml":true,"extradata":"MT"},{"content":"A number representing a cosine, where <code>d</code> must be greater than or equal to -1, but less than or equal to 1.","nodes":[{"pos":[0,118],"content":"A number representing a cosine, where <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">d</ph><ept id=\"p1\">&lt;/code&gt;</ept> must be greater than or equal to -1, but less than or equal to 1.","source":"A number representing a cosine, where <code>d</code> must be greater than or equal to -1, but less than or equal to 1."}],"pos":[26609,26728],"yaml":true},{"content":"An angle, θ, measured in radians, such that 0 ≤θ≤π  \n  \n -or-  \n  \n <xref href=\"System.Double.NaN\"></xref> if <code>d</code> < -1 or <code>d</code> > 1 or <code>d</code> equals <xref href=\"System.Double.NaN\"></xref>.","nodes":[{"pos":[0,50],"content":"An angle, θ, measured in radians, such that 0 ≤θ≤π","nodes":[{"content":"An angle, θ, measured in radians, such that 0 ≤θ≤π","pos":[0,50]}]},{"pos":[57,61],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[68,216],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Double.NaN\"&gt;&lt;/xref&gt;</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">d</ph><ept id=\"p1\">&lt;/code&gt;</ept> &lt; -1 or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">d</ph><ept id=\"p2\">&lt;/code&gt;</ept> &gt; 1 or <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">d</ph><ept id=\"p3\">&lt;/code&gt;</ept> equals <ph id=\"ph5\">&lt;xref href=\"System.Double.NaN\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Double.NaN\"></xref> if <code>d</code> < -1 or <code>d</code> > 1 or <code>d</code> equals <xref href=\"System.Double.NaN\"></xref>."}],"pos":[26785,27012],"yaml":true},{"content":"Returns the angle whose sine is the specified number.","nodes":[{"pos":[0,53],"content":"Returns the angle whose sine is the specified number.","nodes":[{"content":"Returns the angle whose sine is the specified number.","pos":[0,53]}]}],"pos":[28486,28540],"yaml":true},{"content":"A positive return value represents a counterclockwise angle from the x-axis; a negative return value represents a clockwise angle.  \n  \n Multiply the return value by 180/<xref:System.Math.PI?displayProperty=fullName> to convert from radians to degrees.","nodes":[{"pos":[0,130],"content":"A positive return value represents a counterclockwise angle from the x-axis; a negative return value represents a clockwise angle.","nodes":[{"content":"A positive return value represents a counterclockwise angle from the x-axis; a negative return value represents a clockwise angle.","pos":[0,130]}]},{"pos":[137,252],"content":"Multiply the return value by 180/<xref:System.Math.PI?displayProperty=fullName> to convert from radians to degrees.","nodes":[{"content":"Multiply the return value by 180/<ph id=\"ph1\">&lt;xref:System.Math.PI?displayProperty=fullName&gt;</ph> to convert from radians to degrees.","pos":[0,115],"source":"Multiply the return value by 180/<xref:System.Math.PI?displayProperty=fullName> to convert from radians to degrees."}]}],"pos":[28551,28808],"yaml":true,"extradata":"MT"},{"content":"A number representing a sine, where <code>d</code> must be greater than or equal to -1, but less than or equal to 1.","nodes":[{"pos":[0,116],"content":"A number representing a sine, where <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">d</ph><ept id=\"p1\">&lt;/code&gt;</ept> must be greater than or equal to -1, but less than or equal to 1.","source":"A number representing a sine, where <code>d</code> must be greater than or equal to -1, but less than or equal to 1."}],"pos":[29399,29516],"yaml":true},{"content":"An angle, θ, measured in radians, such that -π/2 ≤θ≤π/2  \n  \n -or-  \n  \n <xref href=\"System.Double.NaN\"></xref> if <code>d</code> < -1 or <code>d</code> > 1 or <code>d</code> equals <xref href=\"System.Double.NaN\"></xref>.","nodes":[{"pos":[0,55],"content":"An angle, θ, measured in radians, such that -π/2 ≤θ≤π/2","nodes":[{"content":"An angle, θ, measured in radians, such that -π/2 ≤θ≤π/2","pos":[0,55]}]},{"pos":[62,66],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[73,221],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Double.NaN\"&gt;&lt;/xref&gt;</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">d</ph><ept id=\"p1\">&lt;/code&gt;</ept> &lt; -1 or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">d</ph><ept id=\"p2\">&lt;/code&gt;</ept> &gt; 1 or <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">d</ph><ept id=\"p3\">&lt;/code&gt;</ept> equals <ph id=\"ph5\">&lt;xref href=\"System.Double.NaN\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Double.NaN\"></xref> if <code>d</code> < -1 or <code>d</code> > 1 or <code>d</code> equals <xref href=\"System.Double.NaN\"></xref>."}],"pos":[29573,29805],"yaml":true},{"content":"Returns the angle whose tangent is the specified number.","nodes":[{"pos":[0,56],"content":"Returns the angle whose tangent is the specified number.","nodes":[{"content":"Returns the angle whose tangent is the specified number.","pos":[0,56]}]}],"pos":[31279,31336],"yaml":true},{"content":"A positive return value represents a counterclockwise angle from the x-axis; a negative return value represents a clockwise angle.  \n  \n Multiply the return value by 180/<xref:System.Math.PI?displayProperty=fullName> to convert from radians to degrees.","nodes":[{"pos":[0,130],"content":"A positive return value represents a counterclockwise angle from the x-axis; a negative return value represents a clockwise angle.","nodes":[{"content":"A positive return value represents a counterclockwise angle from the x-axis; a negative return value represents a clockwise angle.","pos":[0,130]}]},{"pos":[137,252],"content":"Multiply the return value by 180/<xref:System.Math.PI?displayProperty=fullName> to convert from radians to degrees.","nodes":[{"content":"Multiply the return value by 180/<ph id=\"ph1\">&lt;xref:System.Math.PI?displayProperty=fullName&gt;</ph> to convert from radians to degrees.","pos":[0,115],"source":"Multiply the return value by 180/<xref:System.Math.PI?displayProperty=fullName> to convert from radians to degrees."}]}],"pos":[31347,31604],"yaml":true,"extradata":"MT"},{"content":"A number representing a tangent.","nodes":[{"pos":[0,32],"content":"A number representing a tangent.","nodes":[{"content":"A number representing a tangent.","pos":[0,32]}]}],"pos":[32161,32194],"yaml":true},{"content":"An angle, θ, measured in radians, such that -π/2 ≤θ≤π/2.  \n  \n -or-  \n  \n <xref href=\"System.Double.NaN\"></xref> if <code>d</code> equals <xref href=\"System.Double.NaN\"></xref>, -π/2 rounded to double precision (-1.5707963267949) if <code>d</code> equals <xref href=\"System.Double.NegativeInfinity\"></xref>, or π/2 rounded to double precision (1.5707963267949) if <code>d</code> equals <xref href=\"System.Double.PositiveInfinity\"></xref>.","nodes":[{"pos":[0,56],"content":"An angle, θ, measured in radians, such that -π/2 ≤θ≤π/2.","nodes":[{"content":"An angle, θ, measured in radians, such that -π/2 ≤θ≤π/2.","pos":[0,56]}]},{"pos":[63,67],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[74,438],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Double.NaN\"&gt;&lt;/xref&gt;</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">d</ph><ept id=\"p1\">&lt;/code&gt;</ept> equals <ph id=\"ph3\">&lt;xref href=\"System.Double.NaN\"&gt;&lt;/xref&gt;</ph>, -π/2 rounded to double precision (-1.5707963267949) if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph4\">d</ph><ept id=\"p2\">&lt;/code&gt;</ept> equals <ph id=\"ph5\">&lt;xref href=\"System.Double.NegativeInfinity\"&gt;&lt;/xref&gt;</ph>, or π/2 rounded to double precision (1.5707963267949) if <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph6\">d</ph><ept id=\"p3\">&lt;/code&gt;</ept> equals <ph id=\"ph7\">&lt;xref href=\"System.Double.PositiveInfinity\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Double.NaN\"></xref> if <code>d</code> equals <xref href=\"System.Double.NaN\"></xref>, -π/2 rounded to double precision (-1.5707963267949) if <code>d</code> equals <xref href=\"System.Double.NegativeInfinity\"></xref>, or π/2 rounded to double precision (1.5707963267949) if <code>d</code> equals <xref href=\"System.Double.PositiveInfinity\"></xref>."}],"pos":[32251,32704],"yaml":true},{"content":"Returns the angle whose tangent is the quotient of two specified numbers.","nodes":[{"pos":[0,73],"content":"Returns the angle whose tangent is the quotient of two specified numbers.","nodes":[{"content":"Returns the angle whose tangent is the quotient of two specified numbers.","pos":[0,73]}]}],"pos":[34250,34324],"yaml":true},{"content":"The return value is the angle in the Cartesian plane formed by the x-axis, and a vector starting from the origin, (0,0), and terminating at the point, (x,y).","nodes":[{"pos":[0,157],"content":"The return value is the angle in the Cartesian plane formed by the x-axis, and a vector starting from the origin, (0,0), and terminating at the point, (x,y).","nodes":[{"content":"The return value is the angle in the Cartesian plane formed by the x-axis, and a vector starting from the origin, (0,0), and terminating at the point, (x,y).","pos":[0,157]}]}],"pos":[34335,34493],"yaml":true,"extradata":"MT"},{"content":"The y coordinate of a point.","nodes":[{"pos":[0,28],"content":"The y coordinate of a point.","nodes":[{"content":"The y coordinate of a point.","pos":[0,28]}]}],"pos":[35094,35123],"yaml":true},{"content":"The x coordinate of a point.","nodes":[{"pos":[0,28],"content":"The x coordinate of a point.","nodes":[{"content":"The x coordinate of a point.","pos":[0,28]}]}],"pos":[35180,35209],"yaml":true},{"content":"An angle, θ, measured in radians, such that -π≤θ≤π, and tan(θ) = <code>y</code> / <code>x</code>, where (<code>x</code>, <code>y</code>) is a point in the Cartesian plane. Observe the following:  \n  \n-   For (<code>x</code>, <code>y</code>) in quadrant 1, 0 < θ < π/2.  \n  \n-   For (<code>x</code>, <code>y</code>) in quadrant 2, π/2 < θ≤π.  \n  \n-   For (<code>x</code>, <code>y</code>) in quadrant 3, -π < θ < -π/2.  \n  \n-   For (<code>x</code>, <code>y</code>) in quadrant 4, -π/2 < θ < 0.  \n  \n For points on the boundaries of the quadrants, the return value is the following:  \n  \n-   If y is 0 and x is not negative, θ = 0.  \n  \n-   If y is 0 and x is negative, θ = π.  \n  \n-   If y is positive and x is 0, θ = π/2.  \n  \n-   If y is negative and x is 0, θ = -π/2.  \n  \n-   If y is 0 and x is 0, θ = 0.  \n  \n If <code>x</code> or <code>y</code> is <xref href=\"System.Double.NaN\"></xref>, or if <code>x</code> and <code>y</code> are either <xref href=\"System.Double.PositiveInfinity\"></xref> or <xref href=\"System.Double.NegativeInfinity\"></xref>, the method returns <xref href=\"System.Double.NaN\"></xref>.","nodes":[{"pos":[0,194],"content":"An angle, θ, measured in radians, such that -π≤θ≤π, and tan(θ) = <code>y</code> / <code>x</code>, where (<code>x</code>, <code>y</code>) is a point in the Cartesian plane. Observe the following:","nodes":[{"content":"An angle, θ, measured in radians, such that -π≤θ≤π, and tan(θ) = <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">y</ph><ept id=\"p1\">&lt;/code&gt;</ept><ph id=\"ph2\"> / </ph><bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">x</ph><ept id=\"p2\">&lt;/code&gt;</ept>, where (<bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">x</ph><ept id=\"p3\">&lt;/code&gt;</ept>, <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph5\">y</ph><ept id=\"p4\">&lt;/code&gt;</ept>) is a point in the Cartesian plane.","pos":[0,171],"source":"An angle, θ, measured in radians, such that -π≤θ≤π, and tan(θ) = <code>y</code> / <code>x</code>, where (<code>x</code>, <code>y</code>) is a point in the Cartesian plane."},{"content":"Observe the following:","pos":[172,194]}]},{"pos":[204,268],"content":"For (<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">x</ph><ept id=\"p1\">&lt;/code&gt;</ept>, <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">y</ph><ept id=\"p2\">&lt;/code&gt;</ept>) in quadrant 1, 0 &lt; θ &lt; π/2.","source":"For (<code>x</code>, <code>y</code>) in quadrant 1, 0 < θ < π/2."},{"pos":[278,340],"content":"For (<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">x</ph><ept id=\"p1\">&lt;/code&gt;</ept>, <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">y</ph><ept id=\"p2\">&lt;/code&gt;</ept>) in quadrant 2, π/2 &lt; θ≤π.","source":"For (<code>x</code>, <code>y</code>) in quadrant 2, π/2 < θ≤π."},{"pos":[350,416],"content":"For (<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">x</ph><ept id=\"p1\">&lt;/code&gt;</ept>, <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">y</ph><ept id=\"p2\">&lt;/code&gt;</ept>) in quadrant 3, -π &lt; θ &lt; -π/2.","source":"For (<code>x</code>, <code>y</code>) in quadrant 3, -π < θ < -π/2."},{"pos":[426,491],"content":"For (<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">x</ph><ept id=\"p1\">&lt;/code&gt;</ept>, <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">y</ph><ept id=\"p2\">&lt;/code&gt;</ept>) in quadrant 4, -π/2 &lt; θ &lt; 0.","source":"For (<code>x</code>, <code>y</code>) in quadrant 4, -π/2 < θ < 0."},{"pos":[498,579],"content":"For points on the boundaries of the quadrants, the return value is the following:","nodes":[{"content":"For points on the boundaries of the quadrants, the return value is the following:","pos":[0,81]}]},{"pos":[589,628],"content":"If y is 0 and x is not negative, θ = 0.","nodes":[{"content":"If y is 0 and x is not negative, θ = 0.","pos":[0,39]}]},{"pos":[638,673],"content":"If y is 0 and x is negative, θ = π.","nodes":[{"content":"If y is 0 and x is negative, θ = π.","pos":[0,35]}]},{"pos":[683,720],"content":"If y is positive and x is 0, θ = π/2.","nodes":[{"content":"If y is positive and x is 0, θ = π/2.","pos":[0,37]}]},{"pos":[730,768],"content":"If y is negative and x is 0, θ = -π/2.","nodes":[{"content":"If y is negative and x is 0, θ = -π/2.","pos":[0,38]}]},{"pos":[778,806],"content":"If y is 0 and x is 0, θ = 0.","nodes":[{"content":"If y is 0 and x is 0, θ = 0.","pos":[0,28]}]},{"pos":[813,1109],"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">x</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">y</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">&lt;xref href=\"System.Double.NaN\"&gt;&lt;/xref&gt;</ph>, or if <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">x</ph><ept id=\"p3\">&lt;/code&gt;</ept> and <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph5\">y</ph><ept id=\"p4\">&lt;/code&gt;</ept> are either <ph id=\"ph6\">&lt;xref href=\"System.Double.PositiveInfinity\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph7\">&lt;xref href=\"System.Double.NegativeInfinity\"&gt;&lt;/xref&gt;</ph>, the method returns <ph id=\"ph8\">&lt;xref href=\"System.Double.NaN\"&gt;&lt;/xref&gt;</ph>.","source":"If <code>x</code> or <code>y</code> is <xref href=\"System.Double.NaN\"></xref>, or if <code>x</code> and <code>y</code> are either <xref href=\"System.Double.PositiveInfinity\"></xref> or <xref href=\"System.Double.NegativeInfinity\"></xref>, the method returns <xref href=\"System.Double.NaN\"></xref>."}],"pos":[35266,36408],"yaml":true},{"content":"Produces the full product of two 32-bit numbers.","nodes":[{"pos":[0,48],"content":"Produces the full product of two 32-bit numbers.","nodes":[{"content":"Produces the full product of two 32-bit numbers.","pos":[0,48]}]}],"pos":[37949,37998],"yaml":true},{"content":"The first number to multiply.","nodes":[{"pos":[0,29],"content":"The first number to multiply.","nodes":[{"content":"The first number to multiply.","pos":[0,29]}]}],"pos":[38609,38639],"yaml":true},{"content":"The second number to multiply.","nodes":[{"pos":[0,30],"content":"The second number to multiply.","nodes":[{"content":"The second number to multiply.","pos":[0,30]}]}],"pos":[38695,38726],"yaml":true},{"content":"The number containing the product of the specified numbers.","nodes":[{"pos":[0,59],"content":"The number containing the product of the specified numbers.","nodes":[{"content":"The number containing the product of the specified numbers.","pos":[0,59]}]}],"pos":[38782,38842],"yaml":true},{"content":"Returns the smallest integral value that is greater than or equal to the specified decimal number.","nodes":[{"pos":[0,98],"content":"Returns the smallest integral value that is greater than or equal to the specified decimal number.","nodes":[{"content":"Returns the smallest integral value that is greater than or equal to the specified decimal number.","pos":[0,98]}]}],"pos":[39981,40080],"yaml":true},{"content":"The behavior of this method follows IEEE Standard 754, section 4. This kind of rounding is sometimes called rounding toward positive infinity. In other words, if `d` is positive, the presence of any fractional component causes `d` to be rounded to the next highest integer. If `d` is negative, the rounding operation causes any fractional component of `d` to be discarded. The operation of this method differs from the <xref:System.Math.Floor%28System.Decimal%29> method, which supports rounding toward negative infinity.","nodes":[{"pos":[0,521],"content":"The behavior of this method follows IEEE Standard 754, section 4. This kind of rounding is sometimes called rounding toward positive infinity. In other words, if `d` is positive, the presence of any fractional component causes `d` to be rounded to the next highest integer. If `d` is negative, the rounding operation causes any fractional component of `d` to be discarded. The operation of this method differs from the <xref:System.Math.Floor%28System.Decimal%29> method, which supports rounding toward negative infinity.","nodes":[{"content":"The behavior of this method follows IEEE Standard 754, section 4.","pos":[0,65]},{"content":"This kind of rounding is sometimes called rounding toward positive infinity.","pos":[66,142]},{"content":"In other words, if <ph id=\"ph1\">`d`</ph> is positive, the presence of any fractional component causes <ph id=\"ph2\">`d`</ph> to be rounded to the next highest integer.","pos":[143,273],"source":" In other words, if `d` is positive, the presence of any fractional component causes `d` to be rounded to the next highest integer."},{"content":"If <ph id=\"ph1\">`d`</ph> is negative, the rounding operation causes any fractional component of <ph id=\"ph2\">`d`</ph> to be discarded.","pos":[274,372],"source":" If `d` is negative, the rounding operation causes any fractional component of `d` to be discarded."},{"content":"The operation of this method differs from the <ph id=\"ph1\">&lt;xref:System.Math.Floor%28System.Decimal%29&gt;</ph> method, which supports rounding toward negative infinity.","pos":[373,521],"source":" The operation of this method differs from the <xref:System.Math.Floor%28System.Decimal%29> method, which supports rounding toward negative infinity."}]}],"pos":[40091,40613],"yaml":true,"extradata":"MT"},{"content":"A decimal number.","nodes":[{"pos":[0,17],"content":"A decimal number.","nodes":[{"content":"A decimal number.","pos":[0,17]}]}],"pos":[41227,41245],"yaml":true},{"content":"The smallest integral value that is greater than or equal to <code>d</code>. Note that this method returns a <xref href=\"System.Decimal\"></xref> instead of an integral type.","nodes":[{"pos":[0,173],"content":"The smallest integral value that is greater than or equal to <code>d</code>. Note that this method returns a <xref href=\"System.Decimal\"></xref> instead of an integral type.","nodes":[{"content":"The smallest integral value that is greater than or equal to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">d</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[0,76],"source":"The smallest integral value that is greater than or equal to <code>d</code>."},{"content":"Note that this method returns a <ph id=\"ph1\">&lt;xref href=\"System.Decimal\"&gt;&lt;/xref&gt;</ph> instead of an integral type.","pos":[77,173],"source":" Note that this method returns a <xref href=\"System.Decimal\"></xref> instead of an integral type."}]}],"pos":[41303,41477],"yaml":true},{"content":"Returns the smallest integral value that is greater than or equal to the specified double-precision floating-point number.","nodes":[{"pos":[0,122],"content":"Returns the smallest integral value that is greater than or equal to the specified double-precision floating-point number.","nodes":[{"content":"Returns the smallest integral value that is greater than or equal to the specified double-precision floating-point number.","pos":[0,122]}]}],"pos":[42955,43078],"yaml":true},{"content":"The behavior of this method follows IEEE Standard 754, section 4. This kind of rounding is sometimes called rounding toward positive infinity. In other words, if `a` is positive, the presence of any fractional component causes `a` to be rounded to the next highest integer. If `a` is negative, the rounding operation causes any fractional component of `a` to be discarded. The operation of this method differs from the <xref:System.Math.Floor%28System.Double%29> method, which supports rounding toward negative infinity.","nodes":[{"pos":[0,520],"content":"The behavior of this method follows IEEE Standard 754, section 4. This kind of rounding is sometimes called rounding toward positive infinity. In other words, if `a` is positive, the presence of any fractional component causes `a` to be rounded to the next highest integer. If `a` is negative, the rounding operation causes any fractional component of `a` to be discarded. The operation of this method differs from the <xref:System.Math.Floor%28System.Double%29> method, which supports rounding toward negative infinity.","nodes":[{"content":"The behavior of this method follows IEEE Standard 754, section 4.","pos":[0,65]},{"content":"This kind of rounding is sometimes called rounding toward positive infinity.","pos":[66,142]},{"content":"In other words, if <ph id=\"ph1\">`a`</ph> is positive, the presence of any fractional component causes <ph id=\"ph2\">`a`</ph> to be rounded to the next highest integer.","pos":[143,273],"source":" In other words, if `a` is positive, the presence of any fractional component causes `a` to be rounded to the next highest integer."},{"content":"If <ph id=\"ph1\">`a`</ph> is negative, the rounding operation causes any fractional component of <ph id=\"ph2\">`a`</ph> to be discarded.","pos":[274,372],"source":" If `a` is negative, the rounding operation causes any fractional component of `a` to be discarded."},{"content":"The operation of this method differs from the <ph id=\"ph1\">&lt;xref:System.Math.Floor%28System.Double%29&gt;</ph> method, which supports rounding toward negative infinity.","pos":[373,520],"source":" The operation of this method differs from the <xref:System.Math.Floor%28System.Double%29> method, which supports rounding toward negative infinity."}]}],"pos":[43089,43610],"yaml":true,"extradata":"MT"},{"content":"A double-precision floating-point number.","nodes":[{"pos":[0,41],"content":"A double-precision floating-point number.","nodes":[{"content":"A double-precision floating-point number.","pos":[0,41]}]}],"pos":[44219,44261],"yaml":true},{"content":"The smallest integral value that is greater than or equal to <code>a</code>. If <code>a</code> is equal to <xref href=\"System.Double.NaN\"></xref>, <xref href=\"System.Double.NegativeInfinity\"></xref>, or <xref href=\"System.Double.PositiveInfinity\"></xref>, that value is returned. Note that this method returns a <xref href=\"System.Double\"></xref> instead of an integral type.","nodes":[{"pos":[0,375],"content":"The smallest integral value that is greater than or equal to <code>a</code>. If <code>a</code> is equal to <xref href=\"System.Double.NaN\"></xref>, <xref href=\"System.Double.NegativeInfinity\"></xref>, or <xref href=\"System.Double.PositiveInfinity\"></xref>, that value is returned. Note that this method returns a <xref href=\"System.Double\"></xref> instead of an integral type.","nodes":[{"content":"The smallest integral value that is greater than or equal to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">a</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[0,76],"source":"The smallest integral value that is greater than or equal to <code>a</code>."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">a</ph><ept id=\"p1\">&lt;/code&gt;</ept> is equal to <ph id=\"ph2\">&lt;xref href=\"System.Double.NaN\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph3\">&lt;xref href=\"System.Double.NegativeInfinity\"&gt;&lt;/xref&gt;</ph>, or <ph id=\"ph4\">&lt;xref href=\"System.Double.PositiveInfinity\"&gt;&lt;/xref&gt;</ph>, that value is returned.","pos":[77,279],"source":" If <code>a</code> is equal to <xref href=\"System.Double.NaN\"></xref>, <xref href=\"System.Double.NegativeInfinity\"></xref>, or <xref href=\"System.Double.PositiveInfinity\"></xref>, that value is returned."},{"content":"Note that this method returns a <ph id=\"ph1\">&lt;xref href=\"System.Double\"&gt;&lt;/xref&gt;</ph> instead of an integral type.","pos":[280,375],"source":" Note that this method returns a <xref href=\"System.Double\"></xref> instead of an integral type."}]}],"pos":[44318,44694],"yaml":true},{"content":"Returns the cosine of the specified angle.","nodes":[{"pos":[0,42],"content":"Returns the cosine of the specified angle.","nodes":[{"content":"Returns the cosine of the specified angle.","pos":[0,42]}]}],"pos":[57344,57387],"yaml":true},{"content":"The angle, `d`, must be in radians. Multiply by <xref:System.Math.PI?displayProperty=fullName>/180 to convert degrees to radians.  \n  \n Acceptable values of `d` range from approximately -9223372036854775295 to approximately 9223372036854775295. For values outside this range, the <xref:System.Math.Cos%2A> method returns `d` unchanged rather than throwing an exception.","nodes":[{"pos":[0,129],"content":"The angle, `d`, must be in radians. Multiply by <xref:System.Math.PI?displayProperty=fullName>/180 to convert degrees to radians.","nodes":[{"content":"The angle, <ph id=\"ph1\">`d`</ph>, must be in radians.","pos":[0,35],"source":"The angle, `d`, must be in radians."},{"content":"Multiply by <ph id=\"ph1\">&lt;xref:System.Math.PI?displayProperty=fullName&gt;</ph>/180 to convert degrees to radians.","pos":[36,129],"source":" Multiply by <xref:System.Math.PI?displayProperty=fullName>/180 to convert degrees to radians."}]},{"pos":[136,369],"content":"Acceptable values of `d` range from approximately -9223372036854775295 to approximately 9223372036854775295. For values outside this range, the <xref:System.Math.Cos%2A> method returns `d` unchanged rather than throwing an exception.","nodes":[{"content":"Acceptable values of <ph id=\"ph1\">`d`</ph> range from approximately -9223372036854775295 to approximately 9223372036854775295.","pos":[0,108],"source":"Acceptable values of `d` range from approximately -9223372036854775295 to approximately 9223372036854775295."},{"content":"For values outside this range, the <ph id=\"ph1\">&lt;xref:System.Math.Cos%2A&gt;</ph> method returns <ph id=\"ph2\">`d`</ph> unchanged rather than throwing an exception.","pos":[109,233],"source":" For values outside this range, the <xref:System.Math.Cos%2A> method returns `d` unchanged rather than throwing an exception."}]}],"pos":[57398,57772],"yaml":true,"extradata":"MT"},{"content":"An angle, measured in radians.","nodes":[{"pos":[0,30],"content":"An angle, measured in radians.","nodes":[{"content":"An angle, measured in radians.","pos":[0,30]}]}],"pos":[58413,58444],"yaml":true},{"content":"The cosine of <code>d</code>. If <code>d</code> is equal to <xref href=\"System.Double.NaN\"></xref>, <xref href=\"System.Double.NegativeInfinity\"></xref>, or <xref href=\"System.Double.PositiveInfinity\"></xref>, this method returns <xref href=\"System.Double.NaN\"></xref>.","nodes":[{"pos":[0,268],"content":"The cosine of <code>d</code>. If <code>d</code> is equal to <xref href=\"System.Double.NaN\"></xref>, <xref href=\"System.Double.NegativeInfinity\"></xref>, or <xref href=\"System.Double.PositiveInfinity\"></xref>, this method returns <xref href=\"System.Double.NaN\"></xref>.","nodes":[{"content":"The cosine of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">d</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[0,29],"source":"The cosine of <code>d</code>."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">d</ph><ept id=\"p1\">&lt;/code&gt;</ept> is equal to <ph id=\"ph2\">&lt;xref href=\"System.Double.NaN\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph3\">&lt;xref href=\"System.Double.NegativeInfinity\"&gt;&lt;/xref&gt;</ph>, or <ph id=\"ph4\">&lt;xref href=\"System.Double.PositiveInfinity\"&gt;&lt;/xref&gt;</ph>, this method returns <ph id=\"ph5\">&lt;xref href=\"System.Double.NaN\"&gt;&lt;/xref&gt;</ph>.","pos":[30,268],"source":" If <code>d</code> is equal to <xref href=\"System.Double.NaN\"></xref>, <xref href=\"System.Double.NegativeInfinity\"></xref>, or <xref href=\"System.Double.PositiveInfinity\"></xref>, this method returns <xref href=\"System.Double.NaN\"></xref>."}]}],"pos":[58501,58770],"yaml":true},{"content":"Returns the hyperbolic cosine of the specified angle.","nodes":[{"pos":[0,53],"content":"Returns the hyperbolic cosine of the specified angle.","nodes":[{"content":"Returns the hyperbolic cosine of the specified angle.","pos":[0,53]}]}],"pos":[60243,60297],"yaml":true},{"content":"The angle, `value`, must be in radians. Multiply by <xref:System.Math.PI?displayProperty=fullName>/180 to convert degrees to radians.","nodes":[{"pos":[0,133],"content":"The angle, `value`, must be in radians. Multiply by <xref:System.Math.PI?displayProperty=fullName>/180 to convert degrees to radians.","nodes":[{"content":"The angle, <ph id=\"ph1\">`value`</ph>, must be in radians.","pos":[0,39],"source":"The angle, `value`, must be in radians."},{"content":"Multiply by <ph id=\"ph1\">&lt;xref:System.Math.PI?displayProperty=fullName&gt;</ph>/180 to convert degrees to radians.","pos":[40,133],"source":" Multiply by <xref:System.Math.PI?displayProperty=fullName>/180 to convert degrees to radians."}]}],"pos":[60308,60442],"yaml":true,"extradata":"MT"},{"content":"An angle, measured in radians.","nodes":[{"pos":[0,30],"content":"An angle, measured in radians.","nodes":[{"content":"An angle, measured in radians.","pos":[0,30]}]}],"pos":[61108,61139],"yaml":true},{"content":"The hyperbolic cosine of <code>value</code>. If <code>value</code> is equal to <xref href=\"System.Double.NegativeInfinity\"></xref> or <xref href=\"System.Double.PositiveInfinity\"></xref>, <xref href=\"System.Double.PositiveInfinity\"></xref> is returned. If <code>value</code> is equal to <xref href=\"System.Double.NaN\"></xref>, <xref href=\"System.Double.NaN\"></xref> is returned.","nodes":[{"pos":[0,377],"content":"The hyperbolic cosine of <code>value</code>. If <code>value</code> is equal to <xref href=\"System.Double.NegativeInfinity\"></xref> or <xref href=\"System.Double.PositiveInfinity\"></xref>, <xref href=\"System.Double.PositiveInfinity\"></xref> is returned. If <code>value</code> is equal to <xref href=\"System.Double.NaN\"></xref>, <xref href=\"System.Double.NaN\"></xref> is returned.","nodes":[{"content":"The hyperbolic cosine of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[0,44],"source":"The hyperbolic cosine of <code>value</code>."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is equal to <ph id=\"ph2\">&lt;xref href=\"System.Double.NegativeInfinity\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph3\">&lt;xref href=\"System.Double.PositiveInfinity\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph4\">&lt;xref href=\"System.Double.PositiveInfinity\"&gt;&lt;/xref&gt;</ph> is returned.","pos":[45,251],"source":" If <code>value</code> is equal to <xref href=\"System.Double.NegativeInfinity\"></xref> or <xref href=\"System.Double.PositiveInfinity\"></xref>, <xref href=\"System.Double.PositiveInfinity\"></xref> is returned."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is equal to <ph id=\"ph2\">&lt;xref href=\"System.Double.NaN\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph3\">&lt;xref href=\"System.Double.NaN\"&gt;&lt;/xref&gt;</ph> is returned.","pos":[252,377],"source":" If <code>value</code> is equal to <xref href=\"System.Double.NaN\"></xref>, <xref href=\"System.Double.NaN\"></xref> is returned."}]}],"pos":[61196,61574],"yaml":true},{"content":"Calculates the quotient of two 64-bit signed integers and also returns the remainder in an output parameter.","nodes":[{"pos":[0,108],"content":"Calculates the quotient of two 64-bit signed integers and also returns the remainder in an output parameter.","nodes":[{"content":"Calculates the quotient of two 64-bit signed integers and also returns the remainder in an output parameter.","pos":[0,108]}]}],"pos":[63177,63286],"yaml":true},{"content":"The remainder is calculated by using the modulus operation.","nodes":[{"pos":[0,59],"content":"The remainder is calculated by using the modulus operation.","nodes":[{"content":"The remainder is calculated by using the modulus operation.","pos":[0,59]}]}],"pos":[63297,63357],"yaml":true,"extradata":"MT"},{"content":"The dividend.","nodes":[{"pos":[0,13],"content":"The dividend.","nodes":[{"content":"The dividend.","pos":[0,13]}]}],"pos":[63909,63923],"yaml":true},{"content":"The divisor.","nodes":[{"pos":[0,12],"content":"The divisor.","nodes":[{"content":"The divisor.","pos":[0,12]}]}],"pos":[63979,63992],"yaml":true},{"content":"The remainder.","nodes":[{"pos":[0,14],"content":"The remainder.","nodes":[{"content":"The remainder.","pos":[0,14]}]}],"pos":[64053,64068],"yaml":true},{"content":"The quotient of the specified numbers.","nodes":[{"pos":[0,38],"content":"The quotient of the specified numbers.","nodes":[{"content":"The quotient of the specified numbers.","pos":[0,38]}]}],"pos":[64124,64163],"yaml":true},{"content":"<code>b</code> is zero.","nodes":[{"pos":[0,23],"content":"<ph id=\"ph1\">&lt;code&gt;b&lt;/code&gt;</ph> is zero.","source":"<code>b</code> is zero."}],"pos":[64311,64335],"yaml":true},{"content":"Calculates the quotient of two 32-bit signed integers and also returns the remainder in an output parameter.","nodes":[{"pos":[0,108],"content":"Calculates the quotient of two 32-bit signed integers and also returns the remainder in an output parameter.","nodes":[{"content":"Calculates the quotient of two 32-bit signed integers and also returns the remainder in an output parameter.","pos":[0,108]}]}],"pos":[65530,65639],"yaml":true},{"content":"The remainder is calculated by using the modulus operation.","nodes":[{"pos":[0,59],"content":"The remainder is calculated by using the modulus operation.","nodes":[{"content":"The remainder is calculated by using the modulus operation.","pos":[0,59]}]}],"pos":[65650,65710],"yaml":true,"extradata":"MT"},{"content":"The dividend.","nodes":[{"pos":[0,13],"content":"The dividend.","nodes":[{"content":"The dividend.","pos":[0,13]}]}],"pos":[66258,66272],"yaml":true},{"content":"The divisor.","nodes":[{"pos":[0,12],"content":"The divisor.","nodes":[{"content":"The divisor.","pos":[0,12]}]}],"pos":[66328,66341],"yaml":true},{"content":"The remainder.","nodes":[{"pos":[0,14],"content":"The remainder.","nodes":[{"content":"The remainder.","pos":[0,14]}]}],"pos":[66402,66417],"yaml":true},{"content":"The quotient of the specified numbers.","nodes":[{"pos":[0,38],"content":"The quotient of the specified numbers.","nodes":[{"content":"The quotient of the specified numbers.","pos":[0,38]}]}],"pos":[66473,66512],"yaml":true},{"content":"<code>b</code> is zero.","nodes":[{"pos":[0,23],"content":"<ph id=\"ph1\">&lt;code&gt;b&lt;/code&gt;</ph> is zero.","source":"<code>b</code> is zero."}],"pos":[66660,66684],"yaml":true},{"content":"Represents the natural logarithmic base, specified by the constant, `e`.","nodes":[{"pos":[0,72],"content":"Represents the natural logarithmic base, specified by the constant, <ph id=\"ph1\">`e`</ph>.","source":"Represents the natural logarithmic base, specified by the constant, `e`."}],"pos":[67662,67735],"yaml":true},{"content":"The value of this field is 2.7182818284590452354.","nodes":[{"pos":[0,49],"content":"The value of this field is 2.7182818284590452354.","nodes":[{"content":"The value of this field is 2.7182818284590452354.","pos":[0,49]}]}],"pos":[67746,67796],"yaml":true,"extradata":"MT"},{"content":"Returns `e` raised to the specified power.","nodes":[{"pos":[0,42],"content":"Returns <ph id=\"ph1\">`e`</ph> raised to the specified power.","source":"Returns `e` raised to the specified power."}],"pos":[69800,69843],"yaml":true},{"content":"`e` is a mathematical constant whose value is approximately 2.71828.  \n  \n Use the <xref:System.Math.Pow%2A> method to calculate powers of other bases.  \n  \n <xref:System.Math.Exp%2A> is the inverse of <xref:System.Math.Log%2A>.","nodes":[{"pos":[0,68],"content":"<ph id=\"ph1\">`e`</ph> is a mathematical constant whose value is approximately 2.71828.","source":"`e` is a mathematical constant whose value is approximately 2.71828."},{"pos":[75,151],"content":"Use the <xref:System.Math.Pow%2A> method to calculate powers of other bases.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Math.Pow%2A&gt;</ph> method to calculate powers of other bases.","pos":[0,76],"source":"Use the <xref:System.Math.Pow%2A> method to calculate powers of other bases."}]},{"pos":[158,228],"content":"<xref:System.Math.Exp%2A> is the inverse of <xref:System.Math.Log%2A>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Math.Exp%2A&gt;</ph> is the inverse of <ph id=\"ph2\">&lt;xref:System.Math.Log%2A&gt;</ph>.","pos":[0,70],"source":"<xref:System.Math.Exp%2A> is the inverse of <xref:System.Math.Log%2A>."}]}],"pos":[69854,70089],"yaml":true,"extradata":"MT"},{"content":"A number specifying a power.","nodes":[{"pos":[0,28],"content":"A number specifying a power.","nodes":[{"content":"A number specifying a power.","pos":[0,28]}]}],"pos":[70717,70746],"yaml":true},{"content":"The number `e` raised to the power <code>d</code>. If <code>d</code> equals <xref href=\"System.Double.NaN\"></xref> or <xref href=\"System.Double.PositiveInfinity\"></xref>, that value is returned. If <code>d</code> equals <xref href=\"System.Double.NegativeInfinity\"></xref>, 0 is returned.","nodes":[{"pos":[0,287],"content":"The number `e` raised to the power <code>d</code>. If <code>d</code> equals <xref href=\"System.Double.NaN\"></xref> or <xref href=\"System.Double.PositiveInfinity\"></xref>, that value is returned. If <code>d</code> equals <xref href=\"System.Double.NegativeInfinity\"></xref>, 0 is returned.","nodes":[{"content":"The number <ph id=\"ph1\">`e`</ph> raised to the power <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">d</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[0,50],"source":"The number `e` raised to the power <code>d</code>."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">d</ph><ept id=\"p1\">&lt;/code&gt;</ept> equals <ph id=\"ph2\">&lt;xref href=\"System.Double.NaN\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph3\">&lt;xref href=\"System.Double.PositiveInfinity\"&gt;&lt;/xref&gt;</ph>, that value is returned.","pos":[51,194],"source":" If <code>d</code> equals <xref href=\"System.Double.NaN\"></xref> or <xref href=\"System.Double.PositiveInfinity\"></xref>, that value is returned."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">d</ph><ept id=\"p1\">&lt;/code&gt;</ept> equals <ph id=\"ph2\">&lt;xref href=\"System.Double.NegativeInfinity\"&gt;&lt;/xref&gt;</ph>, 0 is returned.","pos":[195,287],"source":" If <code>d</code> equals <xref href=\"System.Double.NegativeInfinity\"></xref>, 0 is returned."}]}],"pos":[70803,71091],"yaml":true},{"content":"Returns the largest integer less than or equal to the specified decimal number.","nodes":[{"pos":[0,79],"content":"Returns the largest integer less than or equal to the specified decimal number.","nodes":[{"content":"Returns the largest integer less than or equal to the specified decimal number.","pos":[0,79]}]}],"pos":[72576,72656],"yaml":true},{"content":"The behavior of this method follows IEEE Standard 754, section 4. This kind of rounding is sometimes called rounding toward negative infinity. In other words, if `d` is positive, any fractional component is truncated. If `d` is negative, the presence of any fractional component causes it to be rounded to the smaller integer. The operation of this method differs from the <xref:System.Math.Ceiling%2A> method, which supports rounding toward positive infinity.","nodes":[{"pos":[0,460],"content":"The behavior of this method follows IEEE Standard 754, section 4. This kind of rounding is sometimes called rounding toward negative infinity. In other words, if `d` is positive, any fractional component is truncated. If `d` is negative, the presence of any fractional component causes it to be rounded to the smaller integer. The operation of this method differs from the <xref:System.Math.Ceiling%2A> method, which supports rounding toward positive infinity.","nodes":[{"content":"The behavior of this method follows IEEE Standard 754, section 4.","pos":[0,65]},{"content":"This kind of rounding is sometimes called rounding toward negative infinity.","pos":[66,142]},{"content":"In other words, if <ph id=\"ph1\">`d`</ph> is positive, any fractional component is truncated.","pos":[143,217],"source":" In other words, if `d` is positive, any fractional component is truncated."},{"content":"If <ph id=\"ph1\">`d`</ph> is negative, the presence of any fractional component causes it to be rounded to the smaller integer.","pos":[218,326],"source":" If `d` is negative, the presence of any fractional component causes it to be rounded to the smaller integer."},{"content":"The operation of this method differs from the <ph id=\"ph1\">&lt;xref:System.Math.Ceiling%2A&gt;</ph> method, which supports rounding toward positive infinity.","pos":[327,460],"source":" The operation of this method differs from the <xref:System.Math.Ceiling%2A> method, which supports rounding toward positive infinity."}]}],"pos":[72667,73128],"yaml":true,"extradata":"MT"},{"content":"A decimal number.","nodes":[{"pos":[0,17],"content":"A decimal number.","nodes":[{"content":"A decimal number.","pos":[0,17]}]}],"pos":[73740,73758],"yaml":true},{"content":"The largest integer less than or equal to <code>d</code>.  Note that the method returns an integral value of type <xref href=\"System.Math\"></xref>.","nodes":[{"pos":[0,147],"content":"The largest integer less than or equal to <code>d</code>.  Note that the method returns an integral value of type <xref href=\"System.Math\"></xref>.","nodes":[{"content":"The largest integer less than or equal to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">d</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[0,57],"source":"The largest integer less than or equal to <code>d</code>."},{"content":"Note that the method returns an integral value of type <ph id=\"ph1\">&lt;xref href=\"System.Math\"&gt;&lt;/xref&gt;</ph>.","pos":[59,147],"source":"  Note that the method returns an integral value of type <xref href=\"System.Math\"></xref>."}]}],"pos":[73816,73964],"yaml":true},{"content":"Returns the largest integer less than or equal to the specified double-precision floating-point number.","nodes":[{"pos":[0,103],"content":"Returns the largest integer less than or equal to the specified double-precision floating-point number.","nodes":[{"content":"Returns the largest integer less than or equal to the specified double-precision floating-point number.","pos":[0,103]}]}],"pos":[75428,75532],"yaml":true},{"content":"The behavior of this method follows IEEE Standard 754, section 4. This kind of rounding is sometimes called rounding toward negative infinity. In other words, if `d` is positive, any fractional component is truncated. If `d` is negative, the presence of any fractional component causes it to be rounded to the smaller integer. The operation of this method differs from the <xref:System.Math.Ceiling%2A> method, which supports rounding toward positive infinity.","nodes":[{"pos":[0,460],"content":"The behavior of this method follows IEEE Standard 754, section 4. This kind of rounding is sometimes called rounding toward negative infinity. In other words, if `d` is positive, any fractional component is truncated. If `d` is negative, the presence of any fractional component causes it to be rounded to the smaller integer. The operation of this method differs from the <xref:System.Math.Ceiling%2A> method, which supports rounding toward positive infinity.","nodes":[{"content":"The behavior of this method follows IEEE Standard 754, section 4.","pos":[0,65]},{"content":"This kind of rounding is sometimes called rounding toward negative infinity.","pos":[66,142]},{"content":"In other words, if <ph id=\"ph1\">`d`</ph> is positive, any fractional component is truncated.","pos":[143,217],"source":" In other words, if `d` is positive, any fractional component is truncated."},{"content":"If <ph id=\"ph1\">`d`</ph> is negative, the presence of any fractional component causes it to be rounded to the smaller integer.","pos":[218,326],"source":" If `d` is negative, the presence of any fractional component causes it to be rounded to the smaller integer."},{"content":"The operation of this method differs from the <ph id=\"ph1\">&lt;xref:System.Math.Ceiling%2A&gt;</ph> method, which supports rounding toward positive infinity.","pos":[327,460],"source":" The operation of this method differs from the <xref:System.Math.Ceiling%2A> method, which supports rounding toward positive infinity."}]}],"pos":[75543,76004],"yaml":true,"extradata":"MT"},{"content":"A double-precision floating-point number.","nodes":[{"pos":[0,41],"content":"A double-precision floating-point number.","nodes":[{"content":"A double-precision floating-point number.","pos":[0,41]}]}],"pos":[76611,76653],"yaml":true},{"content":"The largest integer less than or equal to <code>d</code>. If <code>d</code> is equal to <xref href=\"System.Double.NaN\"></xref>, <xref href=\"System.Double.NegativeInfinity\"></xref>, or <xref href=\"System.Double.PositiveInfinity\"></xref>, that value is returned.","nodes":[{"pos":[0,260],"content":"The largest integer less than or equal to <code>d</code>. If <code>d</code> is equal to <xref href=\"System.Double.NaN\"></xref>, <xref href=\"System.Double.NegativeInfinity\"></xref>, or <xref href=\"System.Double.PositiveInfinity\"></xref>, that value is returned.","nodes":[{"content":"The largest integer less than or equal to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">d</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[0,57],"source":"The largest integer less than or equal to <code>d</code>."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">d</ph><ept id=\"p1\">&lt;/code&gt;</ept> is equal to <ph id=\"ph2\">&lt;xref href=\"System.Double.NaN\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph3\">&lt;xref href=\"System.Double.NegativeInfinity\"&gt;&lt;/xref&gt;</ph>, or <ph id=\"ph4\">&lt;xref href=\"System.Double.PositiveInfinity\"&gt;&lt;/xref&gt;</ph>, that value is returned.","pos":[58,260],"source":" If <code>d</code> is equal to <xref href=\"System.Double.NaN\"></xref>, <xref href=\"System.Double.NegativeInfinity\"></xref>, or <xref href=\"System.Double.PositiveInfinity\"></xref>, that value is returned."}]}],"pos":[76710,76971],"yaml":true},{"content":"Returns the remainder resulting from the division of a specified number by another specified number.","nodes":[{"pos":[0,100],"content":"Returns the remainder resulting from the division of a specified number by another specified number.","nodes":[{"content":"Returns the remainder resulting from the division of a specified number by another specified number.","pos":[0,100]}]}],"pos":[78566,78667],"yaml":true},{"content":"This operation complies with the remainder operation defined in Section 5.1 of ANSI/IEEE Std 754-1985; IEEE Standard for Binary Floating-Point Arithmetic; Institute of Electrical and Electronics Engineers, Inc; 1985.  \n  \n The<xref:System.Math.IEEERemainder%2A> method is not the same as the modulus operator. Although both return the remainder after division, the formulas they use are different. The formula for the <xref:System.Math.IEEERemainder%2A> method is:  \n  \n```  \nIEEERemainder = dividend - (divisor * Math.Round(dividend / divisor))  \n```  \n  \n In contrast, the formula for the modulus operator is:  \n  \n```  \nModulus = (Math.Abs(dividend) - (Math.Abs(divisor) *   \n          (Math.Floor(Math.Abs(dividend) / Math.Abs(divisor))))) *   \n          Math.Sign(dividend)  \n```","nodes":[{"pos":[0,216],"content":"This operation complies with the remainder operation defined in Section 5.1 of ANSI/IEEE Std 754-1985; IEEE Standard for Binary Floating-Point Arithmetic; Institute of Electrical and Electronics Engineers, Inc; 1985.","nodes":[{"content":"This operation complies with the remainder operation defined in Section 5.1 of ANSI/IEEE Std 754-1985; IEEE Standard for Binary Floating-Point Arithmetic; Institute of Electrical and Electronics Engineers, Inc; 1985.","pos":[0,216]}]},{"pos":[223,464],"content":"The<xref:System.Math.IEEERemainder%2A> method is not the same as the modulus operator. Although both return the remainder after division, the formulas they use are different. The formula for the <xref:System.Math.IEEERemainder%2A> method is:","nodes":[{"content":"The<xref:System.Math.IEEERemainder%2A> method is not the same as the modulus operator. Although both return the remainder after division, the formulas they use are different. The formula for the <xref:System.Math.IEEERemainder%2A> method is:","pos":[0,241],"nodes":[{"content":"The<ph id=\"ph1\">&lt;xref:System.Math.IEEERemainder%2A&gt;</ph> method is not the same as the modulus operator.","pos":[0,86],"source":"The<xref:System.Math.IEEERemainder%2A> method is not the same as the modulus operator."},{"content":"Although both return the remainder after division, the formulas they use are different.","pos":[87,174]},{"content":"The formula for the <ph id=\"ph1\">&lt;xref:System.Math.IEEERemainder%2A&gt;</ph> method is:","pos":[175,241],"source":" The formula for the <xref:System.Math.IEEERemainder%2A> method is:"}]}]},{"pos":[558,611],"content":"In contrast, the formula for the modulus operator is:","nodes":[{"content":"In contrast, the formula for the modulus operator is:","pos":[0,53]}]}],"pos":[78678,79479],"yaml":true,"extradata":"MT"},{"content":"A dividend.","nodes":[{"pos":[0,11],"content":"A dividend.","nodes":[{"content":"A dividend.","pos":[0,11]}]}],"pos":[80113,80125],"yaml":true},{"content":"A divisor.","nodes":[{"pos":[0,10],"content":"A divisor.","nodes":[{"content":"A divisor.","pos":[0,10]}]}],"pos":[80182,80193],"yaml":true},{"content":"A number equal to <code>x</code> - (<code>y</code> Q), where Q is the quotient of <code>x</code> / <code>y</code> rounded to the nearest integer (if <code>x</code> / <code>y</code> falls halfway between two integers, the even integer is returned).  \n  \n If <code>x</code> - (<code>y</code> Q) is zero, the value +0 is returned if <code>x</code> is positive, or -0 if <code>x</code> is negative.  \n  \n If <code>y</code> = 0, <xref href=\"System.Double.NaN\"></xref> is returned.","nodes":[{"pos":[0,247],"content":"A number equal to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">x</ph><ept id=\"p1\">&lt;/code&gt;</ept> - (<bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">y</ph><ept id=\"p2\">&lt;/code&gt;</ept> Q), where Q is the quotient of <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">x</ph><ept id=\"p3\">&lt;/code&gt;</ept><ph id=\"ph4\"> / </ph><bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph5\">y</ph><ept id=\"p4\">&lt;/code&gt;</ept> rounded to the nearest integer (if <bpt id=\"p5\">&lt;code&gt;</bpt><ph id=\"ph6\">x</ph><ept id=\"p5\">&lt;/code&gt;</ept><ph id=\"ph7\"> / </ph><bpt id=\"p6\">&lt;code&gt;</bpt><ph id=\"ph8\">y</ph><ept id=\"p6\">&lt;/code&gt;</ept> falls halfway between two integers, the even integer is returned).","source":"A number equal to <code>x</code> - (<code>y</code> Q), where Q is the quotient of <code>x</code> / <code>y</code> rounded to the nearest integer (if <code>x</code> / <code>y</code> falls halfway between two integers, the even integer is returned)."},{"pos":[254,394],"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">x</ph><ept id=\"p1\">&lt;/code&gt;</ept> - (<bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">y</ph><ept id=\"p2\">&lt;/code&gt;</ept> Q) is zero, the value +0 is returned if <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">x</ph><ept id=\"p3\">&lt;/code&gt;</ept> is positive, or -0 if <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph4\">x</ph><ept id=\"p4\">&lt;/code&gt;</ept> is negative.","source":"If <code>x</code> - (<code>y</code> Q) is zero, the value +0 is returned if <code>x</code> is positive, or -0 if <code>x</code> is negative."},{"pos":[401,475],"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">y</ph><ept id=\"p1\">&lt;/code&gt;</ept> = 0, <ph id=\"ph2\">&lt;xref href=\"System.Double.NaN\"&gt;&lt;/xref&gt;</ph> is returned.","source":"If <code>y</code> = 0, <xref href=\"System.Double.NaN\"></xref> is returned."}],"pos":[80250,80734],"yaml":true},{"content":"Returns the natural (base `e`) logarithm of a specified number.","nodes":[{"pos":[0,63],"content":"Returns the natural (base <ph id=\"ph1\">`e`</ph>) logarithm of a specified number.","source":"Returns the natural (base `e`) logarithm of a specified number."}],"pos":[82194,82258],"yaml":true},{"content":"Parameter `d` is specified as a base 10 number.","nodes":[{"pos":[0,47],"content":"Parameter <ph id=\"ph1\">`d`</ph> is specified as a base 10 number.","source":"Parameter `d` is specified as a base 10 number."}],"pos":[82269,82317],"yaml":true,"extradata":"MT"},{"content":"The number whose logarithm is to be found.","nodes":[{"pos":[0,42],"content":"The number whose logarithm is to be found.","nodes":[{"content":"The number whose logarithm is to be found.","pos":[0,42]}]}],"pos":[82816,82859],"yaml":true},{"content":"One of the values in the following table.  \n  \n <table><thead><tr><th><code>d</code> parameter  \n  \n </th><th> Return value  \n  \n </th></tr></thead><tbody><tr><td> Positive  \n  \n </td><td> The natural logarithm of <code>d</code>; that is, ln <code>d</code>, or log e <code>d</code></td></tr><tr><td> Zero  \n  \n </td><td><xref href=\"System.Double.NegativeInfinity\"></xref></td></tr><tr><td> Negative  \n  \n </td><td><xref href=\"System.Double.NaN\"></xref></td></tr><tr><td> Equal to <xref href=\"System.Double.NaN\"></xref></td><td><xref href=\"System.Double.NaN\"></xref></td></tr><tr><td> Equal to <xref href=\"System.Double.PositiveInfinity\"></xref></td><td><xref href=\"System.Double.PositiveInfinity\"></xref></td></tr></tbody></table>","nodes":[{"pos":[0,41],"content":"One of the values in the following table.","nodes":[{"content":"One of the values in the following table.","pos":[0,41]}]},{"pos":[48,731],"content":"<table><thead><tr><th><code>d</code> parameter  \n  \n </th><th> Return value  \n  \n </th></tr></thead><tbody><tr><td> Positive  \n  \n </td><td> The natural logarithm of <code>d</code>; that is, ln <code>d</code>, or log e <code>d</code></td></tr><tr><td> Zero  \n  \n </td><td><xref href=\"System.Double.NegativeInfinity\"></xref></td></tr><tr><td> Negative  \n  \n </td><td><xref href=\"System.Double.NaN\"></xref></td></tr><tr><td> Equal to <xref href=\"System.Double.NaN\"></xref></td><td><xref href=\"System.Double.NaN\"></xref></td></tr><tr><td> Equal to <xref href=\"System.Double.PositiveInfinity\"></xref></td><td><xref href=\"System.Double.PositiveInfinity\"></xref></td></tr></tbody></table>","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;d&lt;/code&gt;</ph> parameter","pos":[22,51],"source":"<code>d</code> parameter  \n  \n "},{"content":"Return value","pos":[63,80],"source":" Return value  \n  \n "},{"content":"Positive","pos":[116,129],"source":" Positive  \n  \n "},{"content":"The natural logarithm of <ph id=\"ph1\">&lt;code&gt;d&lt;/code&gt;</ph>; that is, ln <ph id=\"ph2\">&lt;code&gt;d&lt;/code&gt;</ph>, or log e <ph id=\"ph3\">&lt;code&gt;d&lt;/code&gt;</ph>","pos":[141,233],"source":" The natural logarithm of <code>d</code>; that is, ln <code>d</code>, or log e <code>d</code>"},{"content":"Zero","pos":[252,261],"source":" Zero  \n  \n "},{"content":"Negative","pos":[342,355],"source":" Negative  \n  \n "},{"content":"Equal to <ph id=\"ph1\">&lt;xref href=\"System.Double.NaN\"&gt;&lt;/xref&gt;</ph>","pos":[423,470],"source":" Equal to <xref href=\"System.Double.NaN\"></xref>"},{"content":"Equal to <ph id=\"ph1\">&lt;xref href=\"System.Double.PositiveInfinity\"&gt;&lt;/xref&gt;</ph>","pos":[536,596],"source":" Equal to <xref href=\"System.Double.PositiveInfinity\"></xref>"}]}],"pos":[82916,83673],"yaml":true},{"content":"Returns the logarithm of a specified number in a specified base.","nodes":[{"pos":[0,64],"content":"Returns the logarithm of a specified number in a specified base.","nodes":[{"content":"Returns the logarithm of a specified number in a specified base.","pos":[0,64]}]}],"pos":[85206,85271],"yaml":true},{"content":"The number whose logarithm is to be found.","nodes":[{"pos":[0,42],"content":"The number whose logarithm is to be found.","nodes":[{"content":"The number whose logarithm is to be found.","pos":[0,42]}]}],"pos":[85982,86025],"yaml":true},{"content":"The base of the logarithm.","nodes":[{"pos":[0,26],"content":"The base of the logarithm.","nodes":[{"content":"The base of the logarithm.","pos":[0,26]}]}],"pos":[86088,86115],"yaml":true},{"content":"One of the values in the following table. (+Infinity denotes <xref href=\"System.Double.PositiveInfinity\"></xref>, -Infinity denotes <xref href=\"System.Double.NegativeInfinity\"></xref>, and NaN denotes <xref href=\"System.Double.NaN\"></xref>.)  \n  \n <table><thead><tr><th><code>a</code></th><th><code>newBase</code> Return value  \n  \n </th></tr></thead><tbody><tr><td><code>a</code>> 0  \n  \n </td><td> (0 <<code>newBase</code>< 1) -or-(<code>newBase</code>> 1)  \n  \n  lognewBase(a)  \n  \n </td></tr><tr><td><code>a</code>< 0  \n  \n </td><td> (any value)  \n  \n  NaN  \n  \n </td></tr><tr><td> (any value)  \n  \n </td><td><code>newBase</code>< 0  \n  \n  NaN  \n  \n </td></tr><tr><td><code>a</code> != 1  \n  \n </td><td><code>newBase</code> = 0  \n  \n  NaN  \n  \n </td></tr><tr><td><code>a</code> != 1  \n  \n </td><td><code>newBase</code> = +Infinity  \n  \n  NaN  \n  \n </td></tr><tr><td><code>a</code> = NaN  \n  \n </td><td> (any value)  \n  \n  NaN  \n  \n </td></tr><tr><td> (any value)  \n  \n </td><td><code>newBase</code> = NaN  \n  \n  NaN  \n  \n </td></tr><tr><td> (any value)  \n  \n </td><td><code>newBase</code> = 1  \n  \n  NaN  \n  \n </td></tr><tr><td><code>a</code> = 0  \n  \n </td><td> 0 <<code>newBase</code>< 1  \n  \n  +Infinity  \n  \n </td></tr><tr><td><code>a</code> = 0  \n  \n </td><td><code>newBase</code>> 1  \n  \n  -Infinity  \n  \n </td></tr><tr><td><code>a</code> =  +Infinity  \n  \n </td><td> 0 <<code>newBase</code>< 1  \n  \n  -Infinity  \n  \n </td></tr><tr><td><code>a</code> =  +Infinity  \n  \n </td><td><code>newBase</code>> 1  \n  \n  +Infinity  \n  \n </td></tr><tr><td><code>a</code> = 1  \n  \n </td><td><code>newBase</code> = 0  \n  \n  0  \n  \n </td></tr><tr><td><code>a</code> = 1  \n  \n </td><td><code>newBase</code> = +Infinity  \n  \n  0  \n  \n </td></tr></tbody></table>","nodes":[{"pos":[0,241],"content":"One of the values in the following table. (+Infinity denotes <xref href=\"System.Double.PositiveInfinity\"></xref>, -Infinity denotes <xref href=\"System.Double.NegativeInfinity\"></xref>, and NaN denotes <xref href=\"System.Double.NaN\"></xref>.)","nodes":[{"content":"One of the values in the following table.","pos":[0,41]},{"content":"(+Infinity denotes <ph id=\"ph1\">&lt;xref href=\"System.Double.PositiveInfinity\"&gt;&lt;/xref&gt;</ph>, -Infinity denotes <ph id=\"ph2\">&lt;xref href=\"System.Double.NegativeInfinity\"&gt;&lt;/xref&gt;</ph>, and NaN denotes <ph id=\"ph3\">&lt;xref href=\"System.Double.NaN\"&gt;&lt;/xref&gt;</ph>.)","pos":[42,241],"source":" (+Infinity denotes <xref href=\"System.Double.PositiveInfinity\"></xref>, -Infinity denotes <xref href=\"System.Double.NegativeInfinity\"></xref>, and NaN denotes <xref href=\"System.Double.NaN\"></xref>.)"}]},{"pos":[248,458],"content":"<table><thead><tr><th><code>a</code></th><th><code>newBase</code> Return value  \n  \n </th></tr></thead><tbody><tr><td><code>a</code>> 0  \n  \n </td><td> (0 <<code>newBase</code>< 1) -or-(<code>newBase</code>> 1)","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;newBase&lt;/code&gt;</ph> Return value","pos":[45,83],"source":"<code>newBase</code> Return value  \n  \n "},{"content":"<ph id=\"ph1\">&lt;code&gt;a&lt;/code&gt;</ph><ph id=\"ph2\">&gt;</ph> 0","pos":[118,140],"source":"<code>a</code>> 0  \n  \n "},{"content":"(0 &lt;<ph id=\"ph1\">&lt;code&gt;newBase&lt;/code&gt;</ph>&lt; 1) -or-(<ph id=\"ph2\">&lt;code&gt;newBase&lt;/code&gt;</ph><ph id=\"ph3\">&gt; 1)</ph>","pos":[152,210],"source":" (0 <<code>newBase</code>< 1) -or-(<code>newBase</code>> 1)"}]},{"pos":[466,479],"content":"lognewBase(a)","nodes":[{"content":"lognewBase(a)","pos":[0,13]}]},{"pos":[486,549],"content":"</td></tr><tr><td><code>a</code>< 0  \n  \n </td><td> (any value)","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;a&lt;/code&gt;</ph>&lt; 0","pos":[18,40],"source":"<code>a</code>< 0  \n  \n "},{"content":"(any value)","pos":[52,63]}]},{"pos":[557,560],"content":"NaN","nodes":[{"content":"NaN","pos":[0,3]}]},{"pos":[567,636],"content":"</td></tr><tr><td> (any value)  \n  \n </td><td><code>newBase</code>< 0","nodes":[{"content":"(any value)","pos":[19,35],"source":" (any value)  \n  \n "},{"content":"<ph id=\"ph1\">&lt;code&gt;newBase&lt;/code&gt;</ph>&lt; 0","pos":[46,69],"source":"<code>newBase</code>< 0"}]},{"pos":[644,647],"content":"NaN","nodes":[{"content":"NaN","pos":[0,3]}]},{"pos":[654,731],"content":"</td></tr><tr><td><code>a</code> != 1  \n  \n </td><td><code>newBase</code> = 0","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;a&lt;/code&gt;</ph> != 1","pos":[18,42],"source":"<code>a</code> != 1  \n  \n "},{"content":"<ph id=\"ph1\">&lt;code&gt;newBase&lt;/code&gt;</ph> = 0","pos":[53,77],"source":"<code>newBase</code> = 0"}]},{"pos":[739,742],"content":"NaN","nodes":[{"content":"NaN","pos":[0,3]}]},{"pos":[749,834],"content":"</td></tr><tr><td><code>a</code> != 1  \n  \n </td><td><code>newBase</code> = +Infinity","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;a&lt;/code&gt;</ph> != 1","pos":[18,42],"source":"<code>a</code> != 1  \n  \n "},{"content":"<ph id=\"ph1\">&lt;code&gt;newBase&lt;/code&gt;</ph> = +Infinity","pos":[53,85],"source":"<code>newBase</code> = +Infinity"}]},{"pos":[842,845],"content":"NaN","nodes":[{"content":"NaN","pos":[0,3]}]},{"pos":[852,918],"content":"</td></tr><tr><td><code>a</code> = NaN  \n  \n </td><td> (any value)","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;a&lt;/code&gt;</ph> = NaN","pos":[18,43],"source":"<code>a</code> = NaN  \n  \n "},{"content":"(any value)","pos":[55,66]}]},{"pos":[926,929],"content":"NaN","nodes":[{"content":"NaN","pos":[0,3]}]},{"pos":[936,1008],"content":"</td></tr><tr><td> (any value)  \n  \n </td><td><code>newBase</code> = NaN","nodes":[{"content":"(any value)","pos":[19,35],"source":" (any value)  \n  \n "},{"content":"<ph id=\"ph1\">&lt;code&gt;newBase&lt;/code&gt;</ph> = NaN","pos":[46,72],"source":"<code>newBase</code> = NaN"}]},{"pos":[1016,1019],"content":"NaN","nodes":[{"content":"NaN","pos":[0,3]}]},{"pos":[1026,1096],"content":"</td></tr><tr><td> (any value)  \n  \n </td><td><code>newBase</code> = 1","nodes":[{"content":"(any value)","pos":[19,35],"source":" (any value)  \n  \n "},{"content":"<ph id=\"ph1\">&lt;code&gt;newBase&lt;/code&gt;</ph> = 1","pos":[46,70],"source":"<code>newBase</code> = 1"}]},{"pos":[1104,1107],"content":"NaN","nodes":[{"content":"NaN","pos":[0,3]}]},{"pos":[1114,1193],"content":"</td></tr><tr><td><code>a</code> = 0  \n  \n </td><td> 0 <<code>newBase</code>< 1","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;a&lt;/code&gt;</ph> = 0","pos":[18,41],"source":"<code>a</code> = 0  \n  \n "},{"content":"0 &lt;<ph id=\"ph1\">&lt;code&gt;newBase&lt;/code&gt;</ph>&lt; 1","pos":[53,79],"source":" 0 <<code>newBase</code>< 1"}]},{"pos":[1201,1210],"content":"+Infinity","nodes":[{"content":"+Infinity","pos":[0,9]}]},{"pos":[1217,1292],"content":"</td></tr><tr><td><code>a</code> = 0  \n  \n </td><td><code>newBase</code>> 1","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;a&lt;/code&gt;</ph> = 0","pos":[18,41],"source":"<code>a</code> = 0  \n  \n "},{"content":"<ph id=\"ph1\">&lt;code&gt;newBase&lt;/code&gt;</ph><ph id=\"ph2\">&gt;</ph> 1","pos":[52,75],"source":"<code>newBase</code>> 1"}]},{"pos":[1300,1309],"content":"-Infinity","nodes":[{"content":"-Infinity","pos":[0,9]}]},{"pos":[1316,1404],"content":"</td></tr><tr><td><code>a</code> =  +Infinity  \n  \n </td><td> 0 <<code>newBase</code>< 1","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;a&lt;/code&gt;</ph> =  +Infinity","pos":[18,50],"source":"<code>a</code> =  +Infinity  \n  \n "},{"content":"0 &lt;<ph id=\"ph1\">&lt;code&gt;newBase&lt;/code&gt;</ph>&lt; 1","pos":[62,88],"source":" 0 <<code>newBase</code>< 1"}]},{"pos":[1412,1421],"content":"-Infinity","nodes":[{"content":"-Infinity","pos":[0,9]}]},{"pos":[1428,1512],"content":"</td></tr><tr><td><code>a</code> =  +Infinity  \n  \n </td><td><code>newBase</code>> 1","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;a&lt;/code&gt;</ph> =  +Infinity","pos":[18,50],"source":"<code>a</code> =  +Infinity  \n  \n "},{"content":"<ph id=\"ph1\">&lt;code&gt;newBase&lt;/code&gt;</ph><ph id=\"ph2\">&gt;</ph> 1","pos":[61,84],"source":"<code>newBase</code>> 1"}]},{"pos":[1520,1529],"content":"+Infinity","nodes":[{"content":"+Infinity","pos":[0,9]}]},{"pos":[1536,1612],"content":"</td></tr><tr><td><code>a</code> = 1  \n  \n </td><td><code>newBase</code> = 0","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;a&lt;/code&gt;</ph> = 1","pos":[18,41],"source":"<code>a</code> = 1  \n  \n "},{"content":"<ph id=\"ph1\">&lt;code&gt;newBase&lt;/code&gt;</ph> = 0","pos":[52,76],"source":"<code>newBase</code> = 0"}]},{"pos":[1620,1621],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[1628,1712],"content":"</td></tr><tr><td><code>a</code> = 1  \n  \n </td><td><code>newBase</code> = +Infinity","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;a&lt;/code&gt;</ph> = 1","pos":[18,41],"source":"<code>a</code> = 1  \n  \n "},{"content":"<ph id=\"ph1\">&lt;code&gt;newBase&lt;/code&gt;</ph> = +Infinity","pos":[52,84],"source":"<code>newBase</code> = +Infinity"}]},{"pos":[1720,1721],"content":"0","nodes":[{"content":"0","pos":[0,1]}]}],"pos":[86172,88023],"yaml":true},{"content":"Returns the base 10 logarithm of a specified number.","nodes":[{"pos":[0,52],"content":"Returns the base 10 logarithm of a specified number.","nodes":[{"content":"Returns the base 10 logarithm of a specified number.","pos":[0,52]}]}],"pos":[89485,89538],"yaml":true},{"content":"Parameter `d` is specified as a base 10 number.","nodes":[{"pos":[0,47],"content":"Parameter <ph id=\"ph1\">`d`</ph> is specified as a base 10 number.","source":"Parameter `d` is specified as a base 10 number."}],"pos":[89549,89597],"yaml":true,"extradata":"MT"},{"content":"A number whose logarithm is to be found.","nodes":[{"pos":[0,40],"content":"A number whose logarithm is to be found.","nodes":[{"content":"A number whose logarithm is to be found.","pos":[0,40]}]}],"pos":[90115,90156],"yaml":true},{"content":"One of the values in the following table.  \n  \n <table><thead><tr><th><code>d</code> parameter  \n  \n </th><th> Return value  \n  \n </th></tr></thead><tbody><tr><td> Positive  \n  \n </td><td> The base 10 log of <code>d</code>; that is, log 10<code>d</code>.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td><xref href=\"System.Double.NegativeInfinity\"></xref></td></tr><tr><td> Negative  \n  \n </td><td><xref href=\"System.Double.NaN\"></xref></td></tr><tr><td> Equal to <xref href=\"System.Double.NaN\"></xref></td><td><xref href=\"System.Double.NaN\"></xref></td></tr><tr><td> Equal to <xref href=\"System.Double.PositiveInfinity\"></xref></td><td><xref href=\"System.Double.PositiveInfinity\"></xref></td></tr></tbody></table>","nodes":[{"pos":[0,41],"content":"One of the values in the following table.","nodes":[{"content":"One of the values in the following table.","pos":[0,41]}]},{"pos":[48,711],"content":"<table><thead><tr><th><code>d</code> parameter  \n  \n </th><th> Return value  \n  \n </th></tr></thead><tbody><tr><td> Positive  \n  \n </td><td> The base 10 log of <code>d</code>; that is, log 10<code>d</code>.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td><xref href=\"System.Double.NegativeInfinity\"></xref></td></tr><tr><td> Negative  \n  \n </td><td><xref href=\"System.Double.NaN\"></xref></td></tr><tr><td> Equal to <xref href=\"System.Double.NaN\"></xref></td><td><xref href=\"System.Double.NaN\"></xref></td></tr><tr><td> Equal to <xref href=\"System.Double.PositiveInfinity\"></xref></td><td><xref href=\"System.Double.PositiveInfinity\"></xref></td></tr></tbody></table>","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;d&lt;/code&gt;</ph> parameter","pos":[22,51],"source":"<code>d</code> parameter  \n  \n "},{"content":"Return value","pos":[63,80],"source":" Return value  \n  \n "},{"content":"Positive","pos":[116,129],"source":" Positive  \n  \n "},{"content":" The base 10 log of <code>d</code>; that is, log 10<code>d</code>.  \n  \n ","pos":[140,213],"nodes":[{"content":"The base 10 log of <ph id=\"ph1\">&lt;code&gt;d&lt;/code&gt;</ph>; that is, log 10<ph id=\"ph2\">&lt;code&gt;d&lt;/code&gt;</ph>.","pos":[1,66],"source":" The base 10 log of <code>d</code>; that is, log 10<code>d</code>."}]},{"content":"Zero","pos":[232,241],"source":" Zero  \n  \n "},{"content":"Negative","pos":[322,335],"source":" Negative  \n  \n "},{"content":"Equal to <ph id=\"ph1\">&lt;xref href=\"System.Double.NaN\"&gt;&lt;/xref&gt;</ph>","pos":[403,450],"source":" Equal to <xref href=\"System.Double.NaN\"></xref>"},{"content":"Equal to <ph id=\"ph1\">&lt;xref href=\"System.Double.PositiveInfinity\"&gt;&lt;/xref&gt;</ph>","pos":[516,576],"source":" Equal to <xref href=\"System.Double.PositiveInfinity\"></xref>"}]}],"pos":[90213,90952],"yaml":true},{"content":"Returns the larger of two 16-bit unsigned integers.","nodes":[{"pos":[0,51],"content":"Returns the larger of two 16-bit unsigned integers.","nodes":[{"content":"Returns the larger of two 16-bit unsigned integers.","pos":[0,51]}]}],"pos":[92487,92539],"yaml":true},{"content":"The first of two 16-bit unsigned integers to compare.","nodes":[{"pos":[0,53],"content":"The first of two 16-bit unsigned integers to compare.","nodes":[{"content":"The first of two 16-bit unsigned integers to compare.","pos":[0,53]}]}],"pos":[93184,93238],"yaml":true},{"content":"The second of two 16-bit unsigned integers to compare.","nodes":[{"pos":[0,54],"content":"The second of two 16-bit unsigned integers to compare.","nodes":[{"content":"The second of two 16-bit unsigned integers to compare.","pos":[0,54]}]}],"pos":[93298,93353],"yaml":true},{"content":"Parameter <code>val1</code> or <code>val2</code>, whichever is larger.","nodes":[{"pos":[0,70],"content":"Parameter <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">val1</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">val2</ph><ept id=\"p2\">&lt;/code&gt;</ept>, whichever is larger.","source":"Parameter <code>val1</code> or <code>val2</code>, whichever is larger."}],"pos":[93410,93481],"yaml":true},{"content":"Returns the larger of two single-precision floating-point numbers.","nodes":[{"pos":[0,66],"content":"Returns the larger of two single-precision floating-point numbers.","nodes":[{"content":"Returns the larger of two single-precision floating-point numbers.","pos":[0,66]}]}],"pos":[95050,95117],"yaml":true},{"content":"The first of two single-precision floating-point numbers to compare.","nodes":[{"pos":[0,68],"content":"The first of two single-precision floating-point numbers to compare.","nodes":[{"content":"The first of two single-precision floating-point numbers to compare.","pos":[0,68]}]}],"pos":[95714,95783],"yaml":true},{"content":"The second of two single-precision floating-point numbers to compare.","nodes":[{"pos":[0,69],"content":"The second of two single-precision floating-point numbers to compare.","nodes":[{"content":"The second of two single-precision floating-point numbers to compare.","pos":[0,69]}]}],"pos":[95843,95913],"yaml":true},{"content":"Parameter <code>val1</code> or <code>val2</code>, whichever is larger. If <code>val1</code>, or <code>val2</code>, or both <code>val1</code> and <code>val2</code> are equal to <xref href=\"System.Single.NaN\"></xref>, <xref href=\"System.Single.NaN\"></xref> is returned.","nodes":[{"pos":[0,267],"content":"Parameter <code>val1</code> or <code>val2</code>, whichever is larger. If <code>val1</code>, or <code>val2</code>, or both <code>val1</code> and <code>val2</code> are equal to <xref href=\"System.Single.NaN\"></xref>, <xref href=\"System.Single.NaN\"></xref> is returned.","nodes":[{"content":"Parameter <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">val1</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">val2</ph><ept id=\"p2\">&lt;/code&gt;</ept>, whichever is larger.","pos":[0,70],"source":"Parameter <code>val1</code> or <code>val2</code>, whichever is larger."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">val1</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">val2</ph><ept id=\"p2\">&lt;/code&gt;</ept>, or both <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">val1</ph><ept id=\"p3\">&lt;/code&gt;</ept> and <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph4\">val2</ph><ept id=\"p4\">&lt;/code&gt;</ept> are equal to <ph id=\"ph5\">&lt;xref href=\"System.Single.NaN\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph6\">&lt;xref href=\"System.Single.NaN\"&gt;&lt;/xref&gt;</ph> is returned.","pos":[71,267],"source":" If <code>val1</code>, or <code>val2</code>, or both <code>val1</code> and <code>val2</code> are equal to <xref href=\"System.Single.NaN\"></xref>, <xref href=\"System.Single.NaN\"></xref> is returned."}]}],"pos":[95970,96238],"yaml":true},{"content":"Returns the larger of two 64-bit unsigned integers.","nodes":[{"pos":[0,51],"content":"Returns the larger of two 64-bit unsigned integers.","nodes":[{"content":"Returns the larger of two 64-bit unsigned integers.","pos":[0,51]}]}],"pos":[97771,97823],"yaml":true},{"content":"The first of two 64-bit unsigned integers to compare.","nodes":[{"pos":[0,53],"content":"The first of two 64-bit unsigned integers to compare.","nodes":[{"content":"The first of two 64-bit unsigned integers to compare.","pos":[0,53]}]}],"pos":[98465,98519],"yaml":true},{"content":"The second of two 64-bit unsigned integers to compare.","nodes":[{"pos":[0,54],"content":"The second of two 64-bit unsigned integers to compare.","nodes":[{"content":"The second of two 64-bit unsigned integers to compare.","pos":[0,54]}]}],"pos":[98579,98634],"yaml":true},{"content":"Parameter <code>val1</code> or <code>val2</code>, whichever is larger.","nodes":[{"pos":[0,70],"content":"Parameter <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">val1</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">val2</ph><ept id=\"p2\">&lt;/code&gt;</ept>, whichever is larger.","source":"Parameter <code>val1</code> or <code>val2</code>, whichever is larger."}],"pos":[98691,98762],"yaml":true},{"content":"Returns the larger of two 32-bit unsigned integers.","nodes":[{"pos":[0,51],"content":"Returns the larger of two 32-bit unsigned integers.","nodes":[{"content":"Returns the larger of two 32-bit unsigned integers.","pos":[0,51]}]}],"pos":[100331,100383],"yaml":true},{"content":"The first of two 32-bit unsigned integers to compare.","nodes":[{"pos":[0,53],"content":"The first of two 32-bit unsigned integers to compare.","nodes":[{"content":"The first of two 32-bit unsigned integers to compare.","pos":[0,53]}]}],"pos":[101022,101076],"yaml":true},{"content":"The second of two 32-bit unsigned integers to compare.","nodes":[{"pos":[0,54],"content":"The second of two 32-bit unsigned integers to compare.","nodes":[{"content":"The second of two 32-bit unsigned integers to compare.","pos":[0,54]}]}],"pos":[101136,101191],"yaml":true},{"content":"Parameter <code>val1</code> or <code>val2</code>, whichever is larger.","nodes":[{"pos":[0,70],"content":"Parameter <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">val1</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">val2</ph><ept id=\"p2\">&lt;/code&gt;</ept>, whichever is larger.","source":"Parameter <code>val1</code> or <code>val2</code>, whichever is larger."}],"pos":[101248,101319],"yaml":true},{"content":"Returns the larger of two 8-bit signed integers.","nodes":[{"pos":[0,48],"content":"Returns the larger of two 8-bit signed integers.","nodes":[{"content":"Returns the larger of two 8-bit signed integers.","pos":[0,48]}]}],"pos":[102876,102925],"yaml":true},{"content":"The first of two 8-bit signed integers to compare.","nodes":[{"pos":[0,50],"content":"The first of two 8-bit signed integers to compare.","nodes":[{"content":"The first of two 8-bit signed integers to compare.","pos":[0,50]}]}],"pos":[103566,103617],"yaml":true},{"content":"The second of two 8-bit signed integers to compare.","nodes":[{"pos":[0,51],"content":"The second of two 8-bit signed integers to compare.","nodes":[{"content":"The second of two 8-bit signed integers to compare.","pos":[0,51]}]}],"pos":[103676,103728],"yaml":true},{"content":"Parameter <code>val1</code> or <code>val2</code>, whichever is larger.","nodes":[{"pos":[0,70],"content":"Parameter <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">val1</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">val2</ph><ept id=\"p2\">&lt;/code&gt;</ept>, whichever is larger.","source":"Parameter <code>val1</code> or <code>val2</code>, whichever is larger."}],"pos":[103784,103855],"yaml":true},{"content":"Returns the larger of two 32-bit signed integers.","nodes":[{"pos":[0,49],"content":"Returns the larger of two 32-bit signed integers.","nodes":[{"content":"Returns the larger of two 32-bit signed integers.","pos":[0,49]}]}],"pos":[105412,105462],"yaml":true},{"content":"The first of two 32-bit signed integers to compare.","nodes":[{"pos":[0,51],"content":"The first of two 32-bit signed integers to compare.","nodes":[{"content":"The first of two 32-bit signed integers to compare.","pos":[0,51]}]}],"pos":[106052,106104],"yaml":true},{"content":"The second of two 32-bit signed integers to compare.","nodes":[{"pos":[0,52],"content":"The second of two 32-bit signed integers to compare.","nodes":[{"content":"The second of two 32-bit signed integers to compare.","pos":[0,52]}]}],"pos":[106163,106216],"yaml":true},{"content":"Parameter <code>val1</code> or <code>val2</code>, whichever is larger.","nodes":[{"pos":[0,70],"content":"Parameter <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">val1</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">val2</ph><ept id=\"p2\">&lt;/code&gt;</ept>, whichever is larger.","source":"Parameter <code>val1</code> or <code>val2</code>, whichever is larger."}],"pos":[106272,106343],"yaml":true},{"content":"Returns the larger of two 16-bit signed integers.","nodes":[{"pos":[0,49],"content":"Returns the larger of two 16-bit signed integers.","nodes":[{"content":"Returns the larger of two 16-bit signed integers.","pos":[0,49]}]}],"pos":[107864,107914],"yaml":true},{"content":"The first of two 16-bit signed integers to compare.","nodes":[{"pos":[0,51],"content":"The first of two 16-bit signed integers to compare.","nodes":[{"content":"The first of two 16-bit signed integers to compare.","pos":[0,51]}]}],"pos":[108510,108562],"yaml":true},{"content":"The second of two 16-bit signed integers to compare.","nodes":[{"pos":[0,52],"content":"The second of two 16-bit signed integers to compare.","nodes":[{"content":"The second of two 16-bit signed integers to compare.","pos":[0,52]}]}],"pos":[108621,108674],"yaml":true},{"content":"Parameter <code>val1</code> or <code>val2</code>, whichever is larger.","nodes":[{"pos":[0,70],"content":"Parameter <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">val1</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">val2</ph><ept id=\"p2\">&lt;/code&gt;</ept>, whichever is larger.","source":"Parameter <code>val1</code> or <code>val2</code>, whichever is larger."}],"pos":[108730,108801],"yaml":true},{"content":"Returns the larger of two double-precision floating-point numbers.","nodes":[{"pos":[0,66],"content":"Returns the larger of two double-precision floating-point numbers.","nodes":[{"content":"Returns the larger of two double-precision floating-point numbers.","pos":[0,66]}]}],"pos":[110334,110401],"yaml":true},{"content":"The first of two double-precision floating-point numbers to compare.","nodes":[{"pos":[0,68],"content":"The first of two double-precision floating-point numbers to compare.","nodes":[{"content":"The first of two double-precision floating-point numbers to compare.","pos":[0,68]}]}],"pos":[111001,111070],"yaml":true},{"content":"The second of two double-precision floating-point numbers to compare.","nodes":[{"pos":[0,69],"content":"The second of two double-precision floating-point numbers to compare.","nodes":[{"content":"The second of two double-precision floating-point numbers to compare.","pos":[0,69]}]}],"pos":[111130,111200],"yaml":true},{"content":"Parameter <code>val1</code> or <code>val2</code>, whichever is larger. If <code>val1</code>, <code>val2</code>, or both <code>val1</code> and <code>val2</code> are equal to <xref href=\"System.Double.NaN\"></xref>, <xref href=\"System.Double.NaN\"></xref> is returned.","nodes":[{"pos":[0,264],"content":"Parameter <code>val1</code> or <code>val2</code>, whichever is larger. If <code>val1</code>, <code>val2</code>, or both <code>val1</code> and <code>val2</code> are equal to <xref href=\"System.Double.NaN\"></xref>, <xref href=\"System.Double.NaN\"></xref> is returned.","nodes":[{"content":"Parameter <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">val1</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">val2</ph><ept id=\"p2\">&lt;/code&gt;</ept>, whichever is larger.","pos":[0,70],"source":"Parameter <code>val1</code> or <code>val2</code>, whichever is larger."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">val1</ph><ept id=\"p1\">&lt;/code&gt;</ept>, <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">val2</ph><ept id=\"p2\">&lt;/code&gt;</ept>, or both <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">val1</ph><ept id=\"p3\">&lt;/code&gt;</ept> and <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph4\">val2</ph><ept id=\"p4\">&lt;/code&gt;</ept> are equal to <ph id=\"ph5\">&lt;xref href=\"System.Double.NaN\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph6\">&lt;xref href=\"System.Double.NaN\"&gt;&lt;/xref&gt;</ph> is returned.","pos":[71,264],"source":" If <code>val1</code>, <code>val2</code>, or both <code>val1</code> and <code>val2</code> are equal to <xref href=\"System.Double.NaN\"></xref>, <xref href=\"System.Double.NaN\"></xref> is returned."}]}],"pos":[111257,111522],"yaml":true},{"content":"Returns the larger of two decimal numbers.","nodes":[{"pos":[0,42],"content":"Returns the larger of two decimal numbers.","nodes":[{"content":"Returns the larger of two decimal numbers.","pos":[0,42]}]}],"pos":[113067,113110],"yaml":true},{"content":"The first of two decimal numbers to compare.","nodes":[{"pos":[0,44],"content":"The first of two decimal numbers to compare.","nodes":[{"content":"The first of two decimal numbers to compare.","pos":[0,44]}]}],"pos":[113714,113759],"yaml":true},{"content":"The second of two decimal numbers to compare.","nodes":[{"pos":[0,45],"content":"The second of two decimal numbers to compare.","nodes":[{"content":"The second of two decimal numbers to compare.","pos":[0,45]}]}],"pos":[113820,113866],"yaml":true},{"content":"Parameter <code>val1</code> or <code>val2</code>, whichever is larger.","nodes":[{"pos":[0,70],"content":"Parameter <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">val1</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">val2</ph><ept id=\"p2\">&lt;/code&gt;</ept>, whichever is larger.","source":"Parameter <code>val1</code> or <code>val2</code>, whichever is larger."}],"pos":[113924,113995],"yaml":true},{"content":"Returns the larger of two 8-bit unsigned integers.","nodes":[{"pos":[0,50],"content":"Returns the larger of two 8-bit unsigned integers.","nodes":[{"content":"Returns the larger of two 8-bit unsigned integers.","pos":[0,50]}]}],"pos":[115504,115555],"yaml":true},{"content":"The first of two 8-bit unsigned integers to compare.","nodes":[{"pos":[0,52],"content":"The first of two 8-bit unsigned integers to compare.","nodes":[{"content":"The first of two 8-bit unsigned integers to compare.","pos":[0,52]}]}],"pos":[116147,116200],"yaml":true},{"content":"The second of two 8-bit unsigned integers to compare.","nodes":[{"pos":[0,53],"content":"The second of two 8-bit unsigned integers to compare.","nodes":[{"content":"The second of two 8-bit unsigned integers to compare.","pos":[0,53]}]}],"pos":[116258,116312],"yaml":true},{"content":"Parameter <code>val1</code> or <code>val2</code>, whichever is larger.","nodes":[{"pos":[0,70],"content":"Parameter <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">val1</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">val2</ph><ept id=\"p2\">&lt;/code&gt;</ept>, whichever is larger.","source":"Parameter <code>val1</code> or <code>val2</code>, whichever is larger."}],"pos":[116367,116438],"yaml":true},{"content":"Returns the larger of two 64-bit signed integers.","nodes":[{"pos":[0,49],"content":"Returns the larger of two 64-bit signed integers.","nodes":[{"content":"Returns the larger of two 64-bit signed integers.","pos":[0,49]}]}],"pos":[117959,118009],"yaml":true},{"content":"The first of two 64-bit signed integers to compare.","nodes":[{"pos":[0,51],"content":"The first of two 64-bit signed integers to compare.","nodes":[{"content":"The first of two 64-bit signed integers to compare.","pos":[0,51]}]}],"pos":[118602,118654],"yaml":true},{"content":"The second of two 64-bit signed integers to compare.","nodes":[{"pos":[0,52],"content":"The second of two 64-bit signed integers to compare.","nodes":[{"content":"The second of two 64-bit signed integers to compare.","pos":[0,52]}]}],"pos":[118713,118766],"yaml":true},{"content":"Parameter <code>val1</code> or <code>val2</code>, whichever is larger.","nodes":[{"pos":[0,70],"content":"Parameter <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">val1</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">val2</ph><ept id=\"p2\">&lt;/code&gt;</ept>, whichever is larger.","source":"Parameter <code>val1</code> or <code>val2</code>, whichever is larger."}],"pos":[118822,118893],"yaml":true},{"content":"Returns the smaller of two 64-bit signed integers.","nodes":[{"pos":[0,50],"content":"Returns the smaller of two 64-bit signed integers.","nodes":[{"content":"Returns the smaller of two 64-bit signed integers.","pos":[0,50]}]}],"pos":[120414,120465],"yaml":true},{"content":"The first of two 64-bit signed integers to compare.","nodes":[{"pos":[0,51],"content":"The first of two 64-bit signed integers to compare.","nodes":[{"content":"The first of two 64-bit signed integers to compare.","pos":[0,51]}]}],"pos":[121058,121110],"yaml":true},{"content":"The second of two 64-bit signed integers to compare.","nodes":[{"pos":[0,52],"content":"The second of two 64-bit signed integers to compare.","nodes":[{"content":"The second of two 64-bit signed integers to compare.","pos":[0,52]}]}],"pos":[121169,121222],"yaml":true},{"content":"Parameter <code>val1</code> or <code>val2</code>, whichever is smaller.","nodes":[{"pos":[0,71],"content":"Parameter <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">val1</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">val2</ph><ept id=\"p2\">&lt;/code&gt;</ept>, whichever is smaller.","source":"Parameter <code>val1</code> or <code>val2</code>, whichever is smaller."}],"pos":[121278,121350],"yaml":true},{"content":"Returns the smaller of two 64-bit unsigned integers.","nodes":[{"pos":[0,52],"content":"Returns the smaller of two 64-bit unsigned integers.","nodes":[{"content":"Returns the smaller of two 64-bit unsigned integers.","pos":[0,52]}]}],"pos":[122883,122936],"yaml":true},{"content":"The first of two 64-bit unsigned integers to compare.","nodes":[{"pos":[0,53],"content":"The first of two 64-bit unsigned integers to compare.","nodes":[{"content":"The first of two 64-bit unsigned integers to compare.","pos":[0,53]}]}],"pos":[123578,123632],"yaml":true},{"content":"The second of two 64-bit unsigned integers to compare.","nodes":[{"pos":[0,54],"content":"The second of two 64-bit unsigned integers to compare.","nodes":[{"content":"The second of two 64-bit unsigned integers to compare.","pos":[0,54]}]}],"pos":[123692,123747],"yaml":true},{"content":"Parameter <code>val1</code> or <code>val2</code>, whichever is smaller.","nodes":[{"pos":[0,71],"content":"Parameter <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">val1</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">val2</ph><ept id=\"p2\">&lt;/code&gt;</ept>, whichever is smaller.","source":"Parameter <code>val1</code> or <code>val2</code>, whichever is smaller."}],"pos":[123804,123876],"yaml":true},{"content":"Returns the smaller of two 32-bit unsigned integers.","nodes":[{"pos":[0,52],"content":"Returns the smaller of two 32-bit unsigned integers.","nodes":[{"content":"Returns the smaller of two 32-bit unsigned integers.","pos":[0,52]}]}],"pos":[125445,125498],"yaml":true},{"content":"The first of two 32-bit unsigned integers to compare.","nodes":[{"pos":[0,53],"content":"The first of two 32-bit unsigned integers to compare.","nodes":[{"content":"The first of two 32-bit unsigned integers to compare.","pos":[0,53]}]}],"pos":[126137,126191],"yaml":true},{"content":"The second of two 32-bit unsigned integers to compare.","nodes":[{"pos":[0,54],"content":"The second of two 32-bit unsigned integers to compare.","nodes":[{"content":"The second of two 32-bit unsigned integers to compare.","pos":[0,54]}]}],"pos":[126251,126306],"yaml":true},{"content":"Parameter <code>val1</code> or <code>val2</code>, whichever is smaller.","nodes":[{"pos":[0,71],"content":"Parameter <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">val1</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">val2</ph><ept id=\"p2\">&lt;/code&gt;</ept>, whichever is smaller.","source":"Parameter <code>val1</code> or <code>val2</code>, whichever is smaller."}],"pos":[126363,126435],"yaml":true},{"content":"Returns the smaller of two 16-bit unsigned integers.","nodes":[{"pos":[0,52],"content":"Returns the smaller of two 16-bit unsigned integers.","nodes":[{"content":"Returns the smaller of two 16-bit unsigned integers.","pos":[0,52]}]}],"pos":[128004,128057],"yaml":true},{"content":"The first of two 16-bit unsigned integers to compare.","nodes":[{"pos":[0,53],"content":"The first of two 16-bit unsigned integers to compare.","nodes":[{"content":"The first of two 16-bit unsigned integers to compare.","pos":[0,53]}]}],"pos":[128702,128756],"yaml":true},{"content":"The second of two 16-bit unsigned integers to compare.","nodes":[{"pos":[0,54],"content":"The second of two 16-bit unsigned integers to compare.","nodes":[{"content":"The second of two 16-bit unsigned integers to compare.","pos":[0,54]}]}],"pos":[128816,128871],"yaml":true},{"content":"Parameter <code>val1</code> or <code>val2</code>, whichever is smaller.","nodes":[{"pos":[0,71],"content":"Parameter <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">val1</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">val2</ph><ept id=\"p2\">&lt;/code&gt;</ept>, whichever is smaller.","source":"Parameter <code>val1</code> or <code>val2</code>, whichever is smaller."}],"pos":[128928,129000],"yaml":true},{"content":"Returns the smaller of two single-precision floating-point numbers.","nodes":[{"pos":[0,67],"content":"Returns the smaller of two single-precision floating-point numbers.","nodes":[{"content":"Returns the smaller of two single-precision floating-point numbers.","pos":[0,67]}]}],"pos":[130569,130637],"yaml":true},{"content":"The first of two single-precision floating-point numbers to compare.","nodes":[{"pos":[0,68],"content":"The first of two single-precision floating-point numbers to compare.","nodes":[{"content":"The first of two single-precision floating-point numbers to compare.","pos":[0,68]}]}],"pos":[131234,131303],"yaml":true},{"content":"The second of two single-precision floating-point numbers to compare.","nodes":[{"pos":[0,69],"content":"The second of two single-precision floating-point numbers to compare.","nodes":[{"content":"The second of two single-precision floating-point numbers to compare.","pos":[0,69]}]}],"pos":[131363,131433],"yaml":true},{"content":"Parameter <code>val1</code> or <code>val2</code>, whichever is smaller. If <code>val1</code>, <code>val2</code>, or both <code>val1</code> and <code>val2</code> are equal to <xref href=\"System.Single.NaN\"></xref>, <xref href=\"System.Single.NaN\"></xref> is returned.","nodes":[{"pos":[0,265],"content":"Parameter <code>val1</code> or <code>val2</code>, whichever is smaller. If <code>val1</code>, <code>val2</code>, or both <code>val1</code> and <code>val2</code> are equal to <xref href=\"System.Single.NaN\"></xref>, <xref href=\"System.Single.NaN\"></xref> is returned.","nodes":[{"content":"Parameter <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">val1</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">val2</ph><ept id=\"p2\">&lt;/code&gt;</ept>, whichever is smaller.","pos":[0,71],"source":"Parameter <code>val1</code> or <code>val2</code>, whichever is smaller."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">val1</ph><ept id=\"p1\">&lt;/code&gt;</ept>, <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">val2</ph><ept id=\"p2\">&lt;/code&gt;</ept>, or both <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">val1</ph><ept id=\"p3\">&lt;/code&gt;</ept> and <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph4\">val2</ph><ept id=\"p4\">&lt;/code&gt;</ept> are equal to <ph id=\"ph5\">&lt;xref href=\"System.Single.NaN\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph6\">&lt;xref href=\"System.Single.NaN\"&gt;&lt;/xref&gt;</ph> is returned.","pos":[72,265],"source":" If <code>val1</code>, <code>val2</code>, or both <code>val1</code> and <code>val2</code> are equal to <xref href=\"System.Single.NaN\"></xref>, <xref href=\"System.Single.NaN\"></xref> is returned."}]}],"pos":[131490,131756],"yaml":true},{"content":"Returns the smaller of two 8-bit signed integers.","nodes":[{"pos":[0,49],"content":"Returns the smaller of two 8-bit signed integers.","nodes":[{"content":"Returns the smaller of two 8-bit signed integers.","pos":[0,49]}]}],"pos":[133277,133327],"yaml":true},{"content":"The first of two 8-bit signed integers to compare.","nodes":[{"pos":[0,50],"content":"The first of two 8-bit signed integers to compare.","nodes":[{"content":"The first of two 8-bit signed integers to compare.","pos":[0,50]}]}],"pos":[133968,134019],"yaml":true},{"content":"The second of two 8-bit signed integers to compare.","nodes":[{"pos":[0,51],"content":"The second of two 8-bit signed integers to compare.","nodes":[{"content":"The second of two 8-bit signed integers to compare.","pos":[0,51]}]}],"pos":[134078,134130],"yaml":true},{"content":"Parameter <code>val1</code> or <code>val2</code>, whichever is smaller.","nodes":[{"pos":[0,71],"content":"Parameter <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">val1</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">val2</ph><ept id=\"p2\">&lt;/code&gt;</ept>, whichever is smaller.","source":"Parameter <code>val1</code> or <code>val2</code>, whichever is smaller."}],"pos":[134186,134258],"yaml":true},{"content":"Returns the smaller of two 16-bit signed integers.","nodes":[{"pos":[0,50],"content":"Returns the smaller of two 16-bit signed integers.","nodes":[{"content":"Returns the smaller of two 16-bit signed integers.","pos":[0,50]}]}],"pos":[135815,135866],"yaml":true},{"content":"The first of two 16-bit signed integers to compare.","nodes":[{"pos":[0,51],"content":"The first of two 16-bit signed integers to compare.","nodes":[{"content":"The first of two 16-bit signed integers to compare.","pos":[0,51]}]}],"pos":[136462,136514],"yaml":true},{"content":"The second of two 16-bit signed integers to compare.","nodes":[{"pos":[0,52],"content":"The second of two 16-bit signed integers to compare.","nodes":[{"content":"The second of two 16-bit signed integers to compare.","pos":[0,52]}]}],"pos":[136573,136626],"yaml":true},{"content":"Parameter <code>val1</code> or <code>val2</code>, whichever is smaller.","nodes":[{"pos":[0,71],"content":"Parameter <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">val1</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">val2</ph><ept id=\"p2\">&lt;/code&gt;</ept>, whichever is smaller.","source":"Parameter <code>val1</code> or <code>val2</code>, whichever is smaller."}],"pos":[136682,136754],"yaml":true},{"content":"Returns the smaller of two double-precision floating-point numbers.","nodes":[{"pos":[0,67],"content":"Returns the smaller of two double-precision floating-point numbers.","nodes":[{"content":"Returns the smaller of two double-precision floating-point numbers.","pos":[0,67]}]}],"pos":[138287,138355],"yaml":true},{"content":"The first of two double-precision floating-point numbers to compare.","nodes":[{"pos":[0,68],"content":"The first of two double-precision floating-point numbers to compare.","nodes":[{"content":"The first of two double-precision floating-point numbers to compare.","pos":[0,68]}]}],"pos":[138955,139024],"yaml":true},{"content":"The second of two double-precision floating-point numbers to compare.","nodes":[{"pos":[0,69],"content":"The second of two double-precision floating-point numbers to compare.","nodes":[{"content":"The second of two double-precision floating-point numbers to compare.","pos":[0,69]}]}],"pos":[139084,139154],"yaml":true},{"content":"Parameter <code>val1</code> or <code>val2</code>, whichever is smaller. If <code>val1</code>, <code>val2</code>, or both <code>val1</code> and <code>val2</code> are equal to <xref href=\"System.Double.NaN\"></xref>, <xref href=\"System.Double.NaN\"></xref> is returned.","nodes":[{"pos":[0,265],"content":"Parameter <code>val1</code> or <code>val2</code>, whichever is smaller. If <code>val1</code>, <code>val2</code>, or both <code>val1</code> and <code>val2</code> are equal to <xref href=\"System.Double.NaN\"></xref>, <xref href=\"System.Double.NaN\"></xref> is returned.","nodes":[{"content":"Parameter <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">val1</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">val2</ph><ept id=\"p2\">&lt;/code&gt;</ept>, whichever is smaller.","pos":[0,71],"source":"Parameter <code>val1</code> or <code>val2</code>, whichever is smaller."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">val1</ph><ept id=\"p1\">&lt;/code&gt;</ept>, <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">val2</ph><ept id=\"p2\">&lt;/code&gt;</ept>, or both <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">val1</ph><ept id=\"p3\">&lt;/code&gt;</ept> and <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph4\">val2</ph><ept id=\"p4\">&lt;/code&gt;</ept> are equal to <ph id=\"ph5\">&lt;xref href=\"System.Double.NaN\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph6\">&lt;xref href=\"System.Double.NaN\"&gt;&lt;/xref&gt;</ph> is returned.","pos":[72,265],"source":" If <code>val1</code>, <code>val2</code>, or both <code>val1</code> and <code>val2</code> are equal to <xref href=\"System.Double.NaN\"></xref>, <xref href=\"System.Double.NaN\"></xref> is returned."}]}],"pos":[139211,139477],"yaml":true},{"content":"Returns the smaller of two decimal numbers.","nodes":[{"pos":[0,43],"content":"Returns the smaller of two decimal numbers.","nodes":[{"content":"Returns the smaller of two decimal numbers.","pos":[0,43]}]}],"pos":[141022,141066],"yaml":true},{"content":"The first of two decimal numbers to compare.","nodes":[{"pos":[0,44],"content":"The first of two decimal numbers to compare.","nodes":[{"content":"The first of two decimal numbers to compare.","pos":[0,44]}]}],"pos":[141670,141715],"yaml":true},{"content":"The second of two decimal numbers to compare.","nodes":[{"pos":[0,45],"content":"The second of two decimal numbers to compare.","nodes":[{"content":"The second of two decimal numbers to compare.","pos":[0,45]}]}],"pos":[141776,141822],"yaml":true},{"content":"Parameter <code>val1</code> or <code>val2</code>, whichever is smaller.","nodes":[{"pos":[0,71],"content":"Parameter <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">val1</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">val2</ph><ept id=\"p2\">&lt;/code&gt;</ept>, whichever is smaller.","source":"Parameter <code>val1</code> or <code>val2</code>, whichever is smaller."}],"pos":[141880,141952],"yaml":true},{"content":"Returns the smaller of two 8-bit unsigned integers.","nodes":[{"pos":[0,51],"content":"Returns the smaller of two 8-bit unsigned integers.","nodes":[{"content":"Returns the smaller of two 8-bit unsigned integers.","pos":[0,51]}]}],"pos":[143461,143513],"yaml":true},{"content":"The first of two 8-bit unsigned integers to compare.","nodes":[{"pos":[0,52],"content":"The first of two 8-bit unsigned integers to compare.","nodes":[{"content":"The first of two 8-bit unsigned integers to compare.","pos":[0,52]}]}],"pos":[144105,144158],"yaml":true},{"content":"The second of two 8-bit unsigned integers to compare.","nodes":[{"pos":[0,53],"content":"The second of two 8-bit unsigned integers to compare.","nodes":[{"content":"The second of two 8-bit unsigned integers to compare.","pos":[0,53]}]}],"pos":[144216,144270],"yaml":true},{"content":"Parameter <code>val1</code> or <code>val2</code>, whichever is smaller.","nodes":[{"pos":[0,71],"content":"Parameter <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">val1</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">val2</ph><ept id=\"p2\">&lt;/code&gt;</ept>, whichever is smaller.","source":"Parameter <code>val1</code> or <code>val2</code>, whichever is smaller."}],"pos":[144325,144397],"yaml":true},{"content":"Returns the smaller of two 32-bit signed integers.","nodes":[{"pos":[0,50],"content":"Returns the smaller of two 32-bit signed integers.","nodes":[{"content":"Returns the smaller of two 32-bit signed integers.","pos":[0,50]}]}],"pos":[145918,145969],"yaml":true},{"content":"The first of two 32-bit signed integers to compare.","nodes":[{"pos":[0,51],"content":"The first of two 32-bit signed integers to compare.","nodes":[{"content":"The first of two 32-bit signed integers to compare.","pos":[0,51]}]}],"pos":[146559,146611],"yaml":true},{"content":"The second of two 32-bit signed integers to compare.","nodes":[{"pos":[0,52],"content":"The second of two 32-bit signed integers to compare.","nodes":[{"content":"The second of two 32-bit signed integers to compare.","pos":[0,52]}]}],"pos":[146670,146723],"yaml":true},{"content":"Parameter <code>val1</code> or <code>val2</code>, whichever is smaller.","nodes":[{"pos":[0,71],"content":"Parameter <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">val1</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">val2</ph><ept id=\"p2\">&lt;/code&gt;</ept>, whichever is smaller.","source":"Parameter <code>val1</code> or <code>val2</code>, whichever is smaller."}],"pos":[146779,146851],"yaml":true},{"content":"Represents the ratio of the circumference of a circle to its diameter, specified by the constant, π.","nodes":[{"pos":[0,100],"content":"Represents the ratio of the circumference of a circle to its diameter, specified by the constant, π.","nodes":[{"content":"Represents the ratio of the circumference of a circle to its diameter, specified by the constant, π.","pos":[0,100]}]}],"pos":[148242,148343],"yaml":true},{"content":"The value of this field is 3.14159265358979323846.","nodes":[{"pos":[0,50],"content":"The value of this field is 3.14159265358979323846.","nodes":[{"content":"The value of this field is 3.14159265358979323846.","pos":[0,50]}]}],"pos":[148354,148405],"yaml":true,"extradata":"MT"},{"content":"Returns a specified number raised to the specified power.","nodes":[{"pos":[0,57],"content":"Returns a specified number raised to the specified power.","nodes":[{"content":"Returns a specified number raised to the specified power.","pos":[0,57]}]}],"pos":[150470,150528],"yaml":true},{"content":"The following table indicates the return value when various values or ranges of values are specified for the `x` and `y` parameters. For more information, see <xref:System.Double?displayProperty=fullName>, <xref:System.Double?displayProperty=fullName>, and <xref:System.Double?displayProperty=fullName>.  \n  \n|Parameters|Return value|  \n|----------------|------------------|  \n|`x` or `y` = `NaN`.|`NaN`|  \n|`x` = Any value except `NaN`; `y` = 0.|1|  \n|`x` = `NegativeInfinity`; `y` < 0.|0|  \n|`x` = `NegativeInfinity`; `y` is a positive odd integer.|`NegativeInfinity`|  \n|`x` = `NegativeInfinity`; `y` is positive but not an odd integer.|`PositiveInfinity`|  \n|`x` < 0 but not `NegativeInfinity`; `y` is not an integer, `NegativeInfinity`, or `PositiveInfinity`.|`NaN`|  \n|`x` = -1; `y` = `NegativeInfinity` or `PositiveInfinity`.|`NaN`|  \n|-1 < `x` < 1; `y` = `NegativeInfinity`.|`PositiveInfinity`|  \n|-1 < `x` < 1; `y` = `PositiveInfinity`.|0|  \n|`x` < -1 or `x` > 1; `y` = `NegativeInfinity`.|0|  \n|`x` < -1 or `x` > 1; `y` = `PositiveInfinity`.|`PositiveInfinity`|  \n|`x` = 0; `y` < 0.|`PositiveInfinity`|  \n|`x` = 0; `y` > 0.|0|  \n|`x` = 1; `y` is any value except `NaN`.|1|  \n|`x` = `PositiveInfinity`; `y` < 0.|0|  \n|`x` = `PositiveInfinity`; `y` > 0.|`PositiveInfinity`|","nodes":[{"pos":[0,303],"content":"The following table indicates the return value when various values or ranges of values are specified for the `x` and `y` parameters. For more information, see <xref:System.Double?displayProperty=fullName>, <xref:System.Double?displayProperty=fullName>, and <xref:System.Double?displayProperty=fullName>.","nodes":[{"content":"The following table indicates the return value when various values or ranges of values are specified for the <ph id=\"ph1\">`x`</ph> and <ph id=\"ph2\">`y`</ph> parameters.","pos":[0,132],"source":"The following table indicates the return value when various values or ranges of values are specified for the `x` and `y` parameters."},{"content":"For more information, see <ph id=\"ph1\">&lt;xref:System.Double?displayProperty=fullName&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Double?displayProperty=fullName&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Double?displayProperty=fullName&gt;</ph>.","pos":[133,303],"source":" For more information, see <xref:System.Double?displayProperty=fullName>, <xref:System.Double?displayProperty=fullName>, and <xref:System.Double?displayProperty=fullName>."}]},{"pos":[310,320],"content":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[321,333],"content":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"pos":[378,397],"content":"<ph id=\"ph1\">`x`</ph> or <ph id=\"ph2\">`y`</ph><ph id=\"ph3\"> = </ph><ph id=\"ph4\">`NaN`</ph>.","source":"`x` or `y` = `NaN`."},{"pos":[408,446],"content":"<ph id=\"ph1\">`x`</ph> = Any value except <ph id=\"ph2\">`NaN`</ph>; <ph id=\"ph3\">`y`</ph> = 0.","source":"`x` = Any value except `NaN`; `y` = 0."},{"pos":[447,448],"content":"1","nodes":[{"content":"1","pos":[0,1]}]},{"pos":[453,487],"content":"<ph id=\"ph1\">`x`</ph><ph id=\"ph2\"> = </ph><ph id=\"ph3\">`NegativeInfinity`</ph>; <ph id=\"ph4\">`y`</ph> &lt; 0.","source":"`x` = `NegativeInfinity`; `y` < 0."},{"pos":[488,489],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[494,550],"content":"<ph id=\"ph1\">`x`</ph><ph id=\"ph2\"> = </ph><ph id=\"ph3\">`NegativeInfinity`</ph>; <ph id=\"ph4\">`y`</ph> is a positive odd integer.","source":"`x` = `NegativeInfinity`; `y` is a positive odd integer."},{"pos":[574,639],"content":"<ph id=\"ph1\">`x`</ph><ph id=\"ph2\"> = </ph><ph id=\"ph3\">`NegativeInfinity`</ph>; <ph id=\"ph4\">`y`</ph> is positive but not an odd integer.","source":"`x` = `NegativeInfinity`; `y` is positive but not an odd integer."},{"pos":[663,764],"content":"<ph id=\"ph1\">`x`</ph> &lt; 0 but not <ph id=\"ph2\">`NegativeInfinity`</ph>; <ph id=\"ph3\">`y`</ph> is not an integer, <ph id=\"ph4\">`NegativeInfinity`</ph>, or <ph id=\"ph5\">`PositiveInfinity`</ph>.","source":"`x` < 0 but not `NegativeInfinity`; `y` is not an integer, `NegativeInfinity`, or `PositiveInfinity`."},{"pos":[775,832],"content":"<ph id=\"ph1\">`x`</ph> = -1; <ph id=\"ph2\">`y`</ph><ph id=\"ph3\"> = </ph><ph id=\"ph4\">`NegativeInfinity`</ph> or <ph id=\"ph5\">`PositiveInfinity`</ph>.","source":"`x` = -1; `y` = `NegativeInfinity` or `PositiveInfinity`."},{"pos":[843,882],"content":"-1 &lt; <ph id=\"ph1\">`x`</ph> &lt; 1; <ph id=\"ph2\">`y`</ph><ph id=\"ph3\"> = </ph><ph id=\"ph4\">`NegativeInfinity`</ph>.","source":"-1 < `x` < 1; `y` = `NegativeInfinity`."},{"pos":[906,945],"content":"-1 &lt; <ph id=\"ph1\">`x`</ph> &lt; 1; <ph id=\"ph2\">`y`</ph><ph id=\"ph3\"> = </ph><ph id=\"ph4\">`PositiveInfinity`</ph>.","source":"-1 < `x` < 1; `y` = `PositiveInfinity`."},{"pos":[946,947],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[952,998],"content":"<ph id=\"ph1\">`x`</ph> &lt; -1 or <ph id=\"ph2\">`x`</ph> &gt; 1; <ph id=\"ph3\">`y`</ph><ph id=\"ph4\"> = </ph><ph id=\"ph5\">`NegativeInfinity`</ph>.","source":"`x` < -1 or `x` > 1; `y` = `NegativeInfinity`."},{"pos":[999,1000],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[1005,1051],"content":"<ph id=\"ph1\">`x`</ph> &lt; -1 or <ph id=\"ph2\">`x`</ph> &gt; 1; <ph id=\"ph3\">`y`</ph><ph id=\"ph4\"> = </ph><ph id=\"ph5\">`PositiveInfinity`</ph>.","source":"`x` < -1 or `x` > 1; `y` = `PositiveInfinity`."},{"pos":[1075,1092],"content":"<ph id=\"ph1\">`x`</ph> = 0; <ph id=\"ph2\">`y`</ph> &lt; 0.","source":"`x` = 0; `y` < 0."},{"pos":[1116,1133],"content":"<ph id=\"ph1\">`x`</ph> = 0; <ph id=\"ph2\">`y`</ph> &gt; 0.","source":"`x` = 0; `y` > 0."},{"pos":[1134,1135],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[1140,1179],"content":"<ph id=\"ph1\">`x`</ph> = 1; <ph id=\"ph2\">`y`</ph> is any value except <ph id=\"ph3\">`NaN`</ph>.","source":"`x` = 1; `y` is any value except `NaN`."},{"pos":[1180,1181],"content":"1","nodes":[{"content":"1","pos":[0,1]}]},{"pos":[1186,1220],"content":"<ph id=\"ph1\">`x`</ph><ph id=\"ph2\"> = </ph><ph id=\"ph3\">`PositiveInfinity`</ph>; <ph id=\"ph4\">`y`</ph> &lt; 0.","source":"`x` = `PositiveInfinity`; `y` < 0."},{"pos":[1221,1222],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[1227,1261],"content":"<ph id=\"ph1\">`x`</ph><ph id=\"ph2\"> = </ph><ph id=\"ph3\">`PositiveInfinity`</ph>; <ph id=\"ph4\">`y`</ph> &gt; 0.","source":"`x` = `PositiveInfinity`; `y` > 0."}],"pos":[150539,151842],"yaml":true,"extradata":"MT"},{"content":"A double-precision floating-point number to be raised to a power.","nodes":[{"pos":[0,65],"content":"A double-precision floating-point number to be raised to a power.","nodes":[{"content":"A double-precision floating-point number to be raised to a power.","pos":[0,65]}]}],"pos":[152387,152453],"yaml":true},{"content":"A double-precision floating-point number that specifies a power.","nodes":[{"pos":[0,64],"content":"A double-precision floating-point number that specifies a power.","nodes":[{"content":"A double-precision floating-point number that specifies a power.","pos":[0,64]}]}],"pos":[152510,152575],"yaml":true},{"content":"The number <code>x</code> raised to the power <code>y</code>.","nodes":[{"pos":[0,61],"content":"The number <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">x</ph><ept id=\"p1\">&lt;/code&gt;</ept> raised to the power <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">y</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The number <code>x</code> raised to the power <code>y</code>."}],"pos":[152632,152694],"yaml":true},{"content":"Rounds a double-precision floating-point value to the nearest integral value.","nodes":[{"pos":[0,77],"content":"Rounds a double-precision floating-point value to the nearest integral value.","nodes":[{"content":"Rounds a double-precision floating-point value to the nearest integral value.","pos":[0,77]}]}],"pos":[154173,154251],"yaml":true},{"content":"> [!NOTE]\n>  For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.","nodes":[{"pos":[2,167],"content":"[!NOTE]\n For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.","leadings":["","> "],"nodes":[{"content":"For examples and comprehensive usage information about this and other overloads of the <ph id=\"ph1\">`Round`</ph> method, see the <ph id=\"ph2\">&lt;xref:System.Math.Round%2A&gt;</ph> reference page.","pos":[9,163],"source":" For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page."}]}],"pos":[154262,154442],"yaml":true,"extradata":"MT"},{"content":"A double-precision floating-point number to be rounded.","nodes":[{"pos":[0,55],"content":"A double-precision floating-point number to be rounded.","nodes":[{"content":"A double-precision floating-point number to be rounded.","pos":[0,55]}]}],"pos":[154577,154633],"yaml":true},{"content":"The integer nearest <code>a</code>. If the fractional component of <code>a</code> is halfway between two integers, one of which is even and the other odd, then the even number is returned. Note that this method returns a <xref href=\"System.Double\"></xref> instead of an integral type.","nodes":[{"pos":[0,284],"content":"The integer nearest <code>a</code>. If the fractional component of <code>a</code> is halfway between two integers, one of which is even and the other odd, then the even number is returned. Note that this method returns a <xref href=\"System.Double\"></xref> instead of an integral type.","nodes":[{"content":"The integer nearest <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">a</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[0,35],"source":"The integer nearest <code>a</code>."},{"content":"If the fractional component of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">a</ph><ept id=\"p1\">&lt;/code&gt;</ept> is halfway between two integers, one of which is even and the other odd, then the even number is returned.","pos":[36,188],"source":" If the fractional component of <code>a</code> is halfway between two integers, one of which is even and the other odd, then the even number is returned."},{"content":"Note that this method returns a <ph id=\"ph1\">&lt;xref href=\"System.Double\"&gt;&lt;/xref&gt;</ph> instead of an integral type.","pos":[189,284],"source":" Note that this method returns a <xref href=\"System.Double\"></xref> instead of an integral type."}]}],"pos":[154690,154975],"yaml":true},{"content":"Rounds a decimal value to a specified number of fractional digits. A parameter specifies how to round the value if it is midway between two numbers.","nodes":[{"pos":[0,148],"content":"Rounds a decimal value to a specified number of fractional digits. A parameter specifies how to round the value if it is midway between two numbers.","nodes":[{"content":"Rounds a decimal value to a specified number of fractional digits. A parameter specifies how to round the value if it is midway between two numbers.","pos":[0,148],"nodes":[{"content":"Rounds a decimal value to a specified number of fractional digits.","pos":[0,66]},{"content":"A parameter specifies how to round the value if it is midway between two numbers.","pos":[67,148]}]}]}],"pos":[156648,156797],"yaml":true},{"content":"> [!NOTE]\n>  For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.","nodes":[{"pos":[2,167],"content":"[!NOTE]\n For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.","leadings":["","> "],"nodes":[{"content":"For examples and comprehensive usage information about this and other overloads of the <ph id=\"ph1\">`Round`</ph> method, see the <ph id=\"ph2\">&lt;xref:System.Math.Round%2A&gt;</ph> reference page.","pos":[9,163],"source":" For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page."}]}],"pos":[156808,156988],"yaml":true,"extradata":"MT"},{"content":"A decimal number to be rounded.","nodes":[{"pos":[0,31],"content":"A decimal number to be rounded.","nodes":[{"content":"A decimal number to be rounded.","pos":[0,31]}]}],"pos":[157163,157195],"yaml":true},{"content":"The number of decimal places in the return value.","nodes":[{"pos":[0,49],"content":"The number of decimal places in the return value.","nodes":[{"content":"The number of decimal places in the return value.","pos":[0,49]}]}],"pos":[157258,157308],"yaml":true},{"content":"Specification for how to round <code>d</code> if it is midway between two other numbers.","nodes":[{"pos":[0,88],"content":"Specification for how to round <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">d</ph><ept id=\"p1\">&lt;/code&gt;</ept> if it is midway between two other numbers.","source":"Specification for how to round <code>d</code> if it is midway between two other numbers."}],"pos":[157378,157467],"yaml":true},{"content":"The number nearest to <code>d</code> that contains a number of fractional digits equal to <code>decimals</code>. If <code>d</code> has fewer fractional digits than <code>decimals</code>, <code>d</code> is returned unchanged.","nodes":[{"pos":[0,224],"content":"The number nearest to <code>d</code> that contains a number of fractional digits equal to <code>decimals</code>. If <code>d</code> has fewer fractional digits than <code>decimals</code>, <code>d</code> is returned unchanged.","nodes":[{"content":"The number nearest to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">d</ph><ept id=\"p1\">&lt;/code&gt;</ept> that contains a number of fractional digits equal to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">decimals</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","pos":[0,112],"source":"The number nearest to <code>d</code> that contains a number of fractional digits equal to <code>decimals</code>."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">d</ph><ept id=\"p1\">&lt;/code&gt;</ept> has fewer fractional digits than <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">decimals</ph><ept id=\"p2\">&lt;/code&gt;</ept>, <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">d</ph><ept id=\"p3\">&lt;/code&gt;</ept> is returned unchanged.","pos":[113,224],"source":" If <code>d</code> has fewer fractional digits than <code>decimals</code>, <code>d</code> is returned unchanged."}]}],"pos":[157525,157750],"yaml":true},{"content":"<code>decimals</code> is less than 0 or greater than 28.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">&lt;code&gt;decimals&lt;/code&gt;</ph> is less than 0 or greater than 28.","source":"<code>decimals</code> is less than 0 or greater than 28."}],"pos":[157909,157966],"yaml":true},{"content":"<code>mode</code> is not a valid value of <xref href=\"System.MidpointRounding\"></xref>.","nodes":[{"pos":[0,87],"content":"<ph id=\"ph1\">&lt;code&gt;mode&lt;/code&gt;</ph> is not a valid value of <ph id=\"ph2\">&lt;xref href=\"System.MidpointRounding\"&gt;&lt;/xref&gt;</ph>.","source":"<code>mode</code> is not a valid value of <xref href=\"System.MidpointRounding\"></xref>."}],"pos":[158060,158148],"yaml":true},{"content":"The result is outside the range of a <xref href=\"System.Decimal\"></xref>.","nodes":[{"pos":[0,73],"content":"The result is outside the range of a <ph id=\"ph1\">&lt;xref href=\"System.Decimal\"&gt;&lt;/xref&gt;</ph>.","source":"The result is outside the range of a <xref href=\"System.Decimal\"></xref>."}],"pos":[158242,158316],"yaml":true},{"content":"Rounds a double-precision floating-point value to a specified number of fractional digits. A parameter specifies how to round the value if it is midway between two numbers.","nodes":[{"pos":[0,172],"content":"Rounds a double-precision floating-point value to a specified number of fractional digits. A parameter specifies how to round the value if it is midway between two numbers.","nodes":[{"content":"Rounds a double-precision floating-point value to a specified number of fractional digits. A parameter specifies how to round the value if it is midway between two numbers.","pos":[0,172],"nodes":[{"content":"Rounds a double-precision floating-point value to a specified number of fractional digits.","pos":[0,90]},{"content":"A parameter specifies how to round the value if it is midway between two numbers.","pos":[91,172]}]}]}],"pos":[159918,160091],"yaml":true},{"content":"> [!NOTE]\n>  For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.","nodes":[{"pos":[2,167],"content":"[!NOTE]\n For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.","leadings":["","> "],"nodes":[{"content":"For examples and comprehensive usage information about this and other overloads of the <ph id=\"ph1\">`Round`</ph> method, see the <ph id=\"ph2\">&lt;xref:System.Math.Round%2A&gt;</ph> reference page.","pos":[9,163],"source":" For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page."}]}],"pos":[160102,160282],"yaml":true,"extradata":"MT"},{"content":"A double-precision floating-point number to be rounded.","nodes":[{"pos":[0,55],"content":"A double-precision floating-point number to be rounded.","nodes":[{"content":"A double-precision floating-point number to be rounded.","pos":[0,55]}]}],"pos":[160460,160516],"yaml":true},{"content":"The number of fractional digits in the return value.","nodes":[{"pos":[0,52],"content":"The number of fractional digits in the return value.","nodes":[{"content":"The number of fractional digits in the return value.","pos":[0,52]}]}],"pos":[160577,160630],"yaml":true},{"content":"Specification for how to round <code>value</code> if it is midway between two other numbers.","nodes":[{"pos":[0,92],"content":"Specification for how to round <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> if it is midway between two other numbers.","source":"Specification for how to round <code>value</code> if it is midway between two other numbers."}],"pos":[160700,160793],"yaml":true},{"content":"The number nearest to <code>value</code> that has a number of fractional digits equal to <code>digits</code>. If <code>value</code> has fewer fractional digits than <code>digits</code>, <code>value</code> is returned unchanged.","nodes":[{"pos":[0,227],"content":"The number nearest to <code>value</code> that has a number of fractional digits equal to <code>digits</code>. If <code>value</code> has fewer fractional digits than <code>digits</code>, <code>value</code> is returned unchanged.","nodes":[{"content":"The number nearest to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> that has a number of fractional digits equal to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">digits</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","pos":[0,109],"source":"The number nearest to <code>value</code> that has a number of fractional digits equal to <code>digits</code>."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> has fewer fractional digits than <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">digits</ph><ept id=\"p2\">&lt;/code&gt;</ept>, <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">value</ph><ept id=\"p3\">&lt;/code&gt;</ept> is returned unchanged.","pos":[110,227],"source":" If <code>value</code> has fewer fractional digits than <code>digits</code>, <code>value</code> is returned unchanged."}]}],"pos":[160850,161078],"yaml":true},{"content":"<code>digits</code> is less than 0 or greater than 15.","nodes":[{"pos":[0,54],"content":"<ph id=\"ph1\">&lt;code&gt;digits&lt;/code&gt;</ph> is less than 0 or greater than 15.","source":"<code>digits</code> is less than 0 or greater than 15."}],"pos":[161237,161292],"yaml":true},{"content":"<code>mode</code> is not a valid value of <xref href=\"System.MidpointRounding\"></xref>.","nodes":[{"pos":[0,87],"content":"<ph id=\"ph1\">&lt;code&gt;mode&lt;/code&gt;</ph> is not a valid value of <ph id=\"ph2\">&lt;xref href=\"System.MidpointRounding\"&gt;&lt;/xref&gt;</ph>.","source":"<code>mode</code> is not a valid value of <xref href=\"System.MidpointRounding\"></xref>."}],"pos":[161386,161474],"yaml":true},{"content":"Rounds a double-precision floating-point value to the nearest integer. A parameter specifies how to round the value if it is midway between two numbers.","nodes":[{"pos":[0,152],"content":"Rounds a double-precision floating-point value to the nearest integer. A parameter specifies how to round the value if it is midway between two numbers.","nodes":[{"content":"Rounds a double-precision floating-point value to the nearest integer. A parameter specifies how to round the value if it is midway between two numbers.","pos":[0,152],"nodes":[{"content":"Rounds a double-precision floating-point value to the nearest integer.","pos":[0,70]},{"content":"A parameter specifies how to round the value if it is midway between two numbers.","pos":[71,152]}]}]}],"pos":[163016,163169],"yaml":true},{"content":"> [!NOTE]\n>  For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.","nodes":[{"pos":[2,167],"content":"[!NOTE]\n For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.","leadings":["","> "],"nodes":[{"content":"For examples and comprehensive usage information about this and other overloads of the <ph id=\"ph1\">`Round`</ph> method, see the <ph id=\"ph2\">&lt;xref:System.Math.Round%2A&gt;</ph> reference page.","pos":[9,163],"source":" For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page."}]}],"pos":[163180,163360],"yaml":true,"extradata":"MT"},{"content":"A double-precision floating-point number to be rounded.","nodes":[{"pos":[0,55],"content":"A double-precision floating-point number to be rounded.","nodes":[{"content":"A double-precision floating-point number to be rounded.","pos":[0,55]}]}],"pos":[163526,163582],"yaml":true},{"content":"Specification for how to round <code>value</code> if it is midway between two other numbers.","nodes":[{"pos":[0,92],"content":"Specification for how to round <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> if it is midway between two other numbers.","source":"Specification for how to round <code>value</code> if it is midway between two other numbers."}],"pos":[163652,163745],"yaml":true},{"content":"The integer nearest <code>value</code>. If <code>value</code> is halfway between two integers, one of which is even and the other odd, then <code>mode</code> determines which of the two is returned.","nodes":[{"pos":[0,198],"content":"The integer nearest <code>value</code>. If <code>value</code> is halfway between two integers, one of which is even and the other odd, then <code>mode</code> determines which of the two is returned.","nodes":[{"content":"The integer nearest <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[0,39],"source":"The integer nearest <code>value</code>."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is halfway between two integers, one of which is even and the other odd, then <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">mode</ph><ept id=\"p2\">&lt;/code&gt;</ept> determines which of the two is returned.","pos":[40,198],"source":" If <code>value</code> is halfway between two integers, one of which is even and the other odd, then <code>mode</code> determines which of the two is returned."}]}],"pos":[163802,164001],"yaml":true},{"content":"<code>mode</code> is not a valid value of <xref href=\"System.MidpointRounding\"></xref>.","nodes":[{"pos":[0,87],"content":"<ph id=\"ph1\">&lt;code&gt;mode&lt;/code&gt;</ph> is not a valid value of <ph id=\"ph2\">&lt;xref href=\"System.MidpointRounding\"&gt;&lt;/xref&gt;</ph>.","source":"<code>mode</code> is not a valid value of <xref href=\"System.MidpointRounding\"></xref>."}],"pos":[164140,164228],"yaml":true},{"content":"Rounds a decimal value to the nearest integral value.","nodes":[{"pos":[0,53],"content":"Rounds a decimal value to the nearest integral value.","nodes":[{"content":"Rounds a decimal value to the nearest integral value.","pos":[0,53]}]}],"pos":[165650,165704],"yaml":true},{"content":"> [!NOTE]\n>  For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.","nodes":[{"pos":[2,167],"content":"[!NOTE]\n For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.","leadings":["","> "],"nodes":[{"content":"For examples and comprehensive usage information about this and other overloads of the <ph id=\"ph1\">`Round`</ph> method, see the <ph id=\"ph2\">&lt;xref:System.Math.Round%2A&gt;</ph> reference page.","pos":[9,163],"source":" For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page."}]}],"pos":[165715,165895],"yaml":true,"extradata":"MT"},{"content":"A decimal number to be rounded.","nodes":[{"pos":[0,31],"content":"A decimal number to be rounded.","nodes":[{"content":"A decimal number to be rounded.","pos":[0,31]}]}],"pos":[166033,166065],"yaml":true},{"content":"The integer nearest parameter <code>d</code>. If the fractional component of <code>d</code> is halfway between two integers, one of which is even and the other odd, the even number is returned. Note that this method returns a <xref href=\"System.Decimal\"></xref> instead of an integral type.","nodes":[{"pos":[0,290],"content":"The integer nearest parameter <code>d</code>. If the fractional component of <code>d</code> is halfway between two integers, one of which is even and the other odd, the even number is returned. Note that this method returns a <xref href=\"System.Decimal\"></xref> instead of an integral type.","nodes":[{"content":"The integer nearest parameter <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">d</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[0,45],"source":"The integer nearest parameter <code>d</code>."},{"content":"If the fractional component of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">d</ph><ept id=\"p1\">&lt;/code&gt;</ept> is halfway between two integers, one of which is even and the other odd, the even number is returned.","pos":[46,193],"source":" If the fractional component of <code>d</code> is halfway between two integers, one of which is even and the other odd, the even number is returned."},{"content":"Note that this method returns a <ph id=\"ph1\">&lt;xref href=\"System.Decimal\"&gt;&lt;/xref&gt;</ph> instead of an integral type.","pos":[194,290],"source":" Note that this method returns a <xref href=\"System.Decimal\"></xref> instead of an integral type."}]}],"pos":[166123,166414],"yaml":true},{"content":"The result is outside the range of a <xref href=\"System.Decimal\"></xref>.","nodes":[{"pos":[0,73],"content":"The result is outside the range of a <ph id=\"ph1\">&lt;xref href=\"System.Decimal\"&gt;&lt;/xref&gt;</ph>.","source":"The result is outside the range of a <xref href=\"System.Decimal\"></xref>."}],"pos":[166553,166627],"yaml":true},{"content":"Rounds a decimal value to the nearest integer. A parameter specifies how to round the value if it is midway between two numbers.","nodes":[{"pos":[0,128],"content":"Rounds a decimal value to the nearest integer. A parameter specifies how to round the value if it is midway between two numbers.","nodes":[{"content":"Rounds a decimal value to the nearest integer. A parameter specifies how to round the value if it is midway between two numbers.","pos":[0,128],"nodes":[{"content":"Rounds a decimal value to the nearest integer.","pos":[0,46]},{"content":"A parameter specifies how to round the value if it is midway between two numbers.","pos":[47,128]}]}]}],"pos":[168175,168304],"yaml":true},{"content":"> [!NOTE]\n>  For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.","nodes":[{"pos":[2,167],"content":"[!NOTE]\n For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.","leadings":["","> "],"nodes":[{"content":"For examples and comprehensive usage information about this and other overloads of the <ph id=\"ph1\">`Round`</ph> method, see the <ph id=\"ph2\">&lt;xref:System.Math.Round%2A&gt;</ph> reference page.","pos":[9,163],"source":" For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page."}]}],"pos":[168315,168495],"yaml":true,"extradata":"MT"},{"content":"A decimal number to be rounded.","nodes":[{"pos":[0,31],"content":"A decimal number to be rounded.","nodes":[{"content":"A decimal number to be rounded.","pos":[0,31]}]}],"pos":[168656,168688],"yaml":true},{"content":"Specification for how to round <code>d</code> if it is midway between two other numbers.","nodes":[{"pos":[0,88],"content":"Specification for how to round <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">d</ph><ept id=\"p1\">&lt;/code&gt;</ept> if it is midway between two other numbers.","source":"Specification for how to round <code>d</code> if it is midway between two other numbers."}],"pos":[168758,168847],"yaml":true},{"content":"The integer nearest <code>d</code>. If <code>d</code> is halfway between two numbers, one of which is even and the other odd, then <code>mode</code> determines which of the two is returned.","nodes":[{"pos":[0,189],"content":"The integer nearest <code>d</code>. If <code>d</code> is halfway between two numbers, one of which is even and the other odd, then <code>mode</code> determines which of the two is returned.","nodes":[{"content":"The integer nearest <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">d</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[0,35],"source":"The integer nearest <code>d</code>."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">d</ph><ept id=\"p1\">&lt;/code&gt;</ept> is halfway between two numbers, one of which is even and the other odd, then <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">mode</ph><ept id=\"p2\">&lt;/code&gt;</ept> determines which of the two is returned.","pos":[36,189],"source":" If <code>d</code> is halfway between two numbers, one of which is even and the other odd, then <code>mode</code> determines which of the two is returned."}]}],"pos":[168905,169095],"yaml":true},{"content":"<code>mode</code> is not a valid value of <xref href=\"System.MidpointRounding\"></xref>.","nodes":[{"pos":[0,87],"content":"<ph id=\"ph1\">&lt;code&gt;mode&lt;/code&gt;</ph> is not a valid value of <ph id=\"ph2\">&lt;xref href=\"System.MidpointRounding\"&gt;&lt;/xref&gt;</ph>.","source":"<code>mode</code> is not a valid value of <xref href=\"System.MidpointRounding\"></xref>."}],"pos":[169234,169322],"yaml":true},{"content":"The result is outside the range of a <xref href=\"System.Decimal\"></xref>.","nodes":[{"pos":[0,73],"content":"The result is outside the range of a <ph id=\"ph1\">&lt;xref href=\"System.Decimal\"&gt;&lt;/xref&gt;</ph>.","source":"The result is outside the range of a <xref href=\"System.Decimal\"></xref>."}],"pos":[169416,169490],"yaml":true},{"content":"Rounds a decimal value to a specified number of fractional digits.","nodes":[{"pos":[0,66],"content":"Rounds a decimal value to a specified number of fractional digits.","nodes":[{"content":"Rounds a decimal value to a specified number of fractional digits.","pos":[0,66]}]}],"pos":[170972,171039],"yaml":true},{"content":"> [!NOTE]\n>  For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.","nodes":[{"pos":[2,167],"content":"[!NOTE]\n For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.","leadings":["","> "],"nodes":[{"content":"For examples and comprehensive usage information about this and other overloads of the <ph id=\"ph1\">`Round`</ph> method, see the <ph id=\"ph2\">&lt;xref:System.Math.Round%2A&gt;</ph> reference page.","pos":[9,163],"source":" For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page."}]}],"pos":[171050,171230],"yaml":true,"extradata":"MT"},{"content":"A decimal number to be rounded.","nodes":[{"pos":[0,31],"content":"A decimal number to be rounded.","nodes":[{"content":"A decimal number to be rounded.","pos":[0,31]}]}],"pos":[171382,171414],"yaml":true},{"content":"The number of decimal places in the return value.","nodes":[{"pos":[0,49],"content":"The number of decimal places in the return value.","nodes":[{"content":"The number of decimal places in the return value.","pos":[0,49]}]}],"pos":[171477,171527],"yaml":true},{"content":"The number nearest to <code>d</code> that contains a number of fractional digits equal to <code>decimals</code>.","nodes":[{"pos":[0,112],"content":"The number nearest to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">d</ph><ept id=\"p1\">&lt;/code&gt;</ept> that contains a number of fractional digits equal to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">decimals</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The number nearest to <code>d</code> that contains a number of fractional digits equal to <code>decimals</code>."}],"pos":[171585,171698],"yaml":true},{"content":"<code>decimals</code> is less than 0 or greater than 28.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">&lt;code&gt;decimals&lt;/code&gt;</ph> is less than 0 or greater than 28.","source":"<code>decimals</code> is less than 0 or greater than 28."}],"pos":[171857,171914],"yaml":true},{"content":"The result is outside the range of a <xref href=\"System.Decimal\"></xref>.","nodes":[{"pos":[0,73],"content":"The result is outside the range of a <ph id=\"ph1\">&lt;xref href=\"System.Decimal\"&gt;&lt;/xref&gt;</ph>.","source":"The result is outside the range of a <xref href=\"System.Decimal\"></xref>."}],"pos":[172008,172082],"yaml":true},{"content":"Rounds a double-precision floating-point value to a specified number of fractional digits.","nodes":[{"pos":[0,90],"content":"Rounds a double-precision floating-point value to a specified number of fractional digits.","nodes":[{"content":"Rounds a double-precision floating-point value to a specified number of fractional digits.","pos":[0,90]}]}],"pos":[173558,173649],"yaml":true},{"content":"> [!NOTE]\n>  For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.","nodes":[{"pos":[2,167],"content":"[!NOTE]\n For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.","leadings":["","> "],"nodes":[{"content":"For examples and comprehensive usage information about this and other overloads of the <ph id=\"ph1\">`Round`</ph> method, see the <ph id=\"ph2\">&lt;xref:System.Math.Round%2A&gt;</ph> reference page.","pos":[9,163],"source":" For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page."}]}],"pos":[173660,173840],"yaml":true,"extradata":"MT"},{"content":"A double-precision floating-point number to be rounded.","nodes":[{"pos":[0,55],"content":"A double-precision floating-point number to be rounded.","nodes":[{"content":"A double-precision floating-point number to be rounded.","pos":[0,55]}]}],"pos":[173995,174051],"yaml":true},{"content":"The number of fractional digits in the return value.","nodes":[{"pos":[0,52],"content":"The number of fractional digits in the return value.","nodes":[{"content":"The number of fractional digits in the return value.","pos":[0,52]}]}],"pos":[174112,174165],"yaml":true},{"content":"The number nearest to <code>value</code> that contains a number of fractional digits equal to <code>digits</code>.","nodes":[{"pos":[0,114],"content":"The number nearest to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> that contains a number of fractional digits equal to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">digits</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The number nearest to <code>value</code> that contains a number of fractional digits equal to <code>digits</code>."}],"pos":[174222,174337],"yaml":true},{"content":"<code>digits</code> is less than 0 or greater than 15.","nodes":[{"pos":[0,54],"content":"<ph id=\"ph1\">&lt;code&gt;digits&lt;/code&gt;</ph> is less than 0 or greater than 15.","source":"<code>digits</code> is less than 0 or greater than 15."}],"pos":[174496,174551],"yaml":true},{"content":"Returns an integer that indicates the sign of a decimal number.","nodes":[{"pos":[0,63],"content":"Returns an integer that indicates the sign of a decimal number.","nodes":[{"content":"Returns an integer that indicates the sign of a decimal number.","pos":[0,63]}]}],"pos":[175967,176031],"yaml":true},{"content":"A signed decimal number.","nodes":[{"pos":[0,24],"content":"A signed decimal number.","nodes":[{"content":"A signed decimal number.","pos":[0,24]}]}],"pos":[176681,176706],"yaml":true},{"content":"A number that indicates the sign of <code>value</code>, as shown in the following table.  \n  \n <table><thead><tr><th> Return value  \n  \n </th><th> Meaning  \n  \n </th></tr></thead><tbody><tr><td> -1  \n  \n </td><td><code>value</code> is less than zero.  \n  \n </td></tr><tr><td> 0  \n  \n </td><td><code>value</code> is equal to zero.  \n  \n </td></tr><tr><td> 1  \n  \n </td><td><code>value</code> is greater than zero.  \n  \n </td></tr></tbody></table>","nodes":[{"pos":[0,88],"content":"A number that indicates the sign of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, as shown in the following table.","source":"A number that indicates the sign of <code>value</code>, as shown in the following table."},{"pos":[95,446],"content":"<table><thead><tr><th> Return value  \n  \n </th><th> Meaning  \n  \n </th></tr></thead><tbody><tr><td> -1  \n  \n </td><td><code>value</code> is less than zero.  \n  \n </td></tr><tr><td> 0  \n  \n </td><td><code>value</code> is equal to zero.  \n  \n </td></tr><tr><td> 1  \n  \n </td><td><code>value</code> is greater than zero.  \n  \n </td></tr></tbody></table>","nodes":[{"content":"Return value","pos":[23,40],"source":" Return value  \n  \n "},{"content":"Meaning","pos":[52,64],"source":" Meaning  \n  \n "},{"content":"-1","pos":[100,107],"source":" -1  \n  \n "},{"content":"<code>value</code> is less than zero.  \n  \n ","pos":[118,162],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is less than zero.","pos":[0,37],"source":"<code>value</code> is less than zero."}]},{"content":"0","pos":[181,187],"source":" 0  \n  \n "},{"content":"<code>value</code> is equal to zero.  \n  \n ","pos":[198,241],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is equal to zero.","pos":[0,36],"source":"<code>value</code> is equal to zero."}]},{"content":"1","pos":[260,266],"source":" 1  \n  \n "},{"content":"<code>value</code> is greater than zero.  \n  \n ","pos":[277,324],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is greater than zero.","pos":[0,40],"source":"<code>value</code> is greater than zero."}]}]}],"pos":[176762,177228],"yaml":true},{"content":"Returns an integer that indicates the sign of a double-precision floating-point number.","nodes":[{"pos":[0,87],"content":"Returns an integer that indicates the sign of a double-precision floating-point number.","nodes":[{"content":"Returns an integer that indicates the sign of a double-precision floating-point number.","pos":[0,87]}]}],"pos":[178685,178773],"yaml":true},{"content":"A signed number.","nodes":[{"pos":[0,16],"content":"A signed number.","nodes":[{"content":"A signed number.","pos":[0,16]}]}],"pos":[179419,179436],"yaml":true},{"content":"A number that indicates the sign of <code>value</code>, as shown in the following table.  \n  \n <table><thead><tr><th> Return value  \n  \n </th><th> Meaning  \n  \n </th></tr></thead><tbody><tr><td> -1  \n  \n </td><td><code>value</code> is less than zero.  \n  \n </td></tr><tr><td> 0  \n  \n </td><td><code>value</code> is equal to zero.  \n  \n </td></tr><tr><td> 1  \n  \n </td><td><code>value</code> is greater than zero.  \n  \n </td></tr></tbody></table>","nodes":[{"pos":[0,88],"content":"A number that indicates the sign of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, as shown in the following table.","source":"A number that indicates the sign of <code>value</code>, as shown in the following table."},{"pos":[95,446],"content":"<table><thead><tr><th> Return value  \n  \n </th><th> Meaning  \n  \n </th></tr></thead><tbody><tr><td> -1  \n  \n </td><td><code>value</code> is less than zero.  \n  \n </td></tr><tr><td> 0  \n  \n </td><td><code>value</code> is equal to zero.  \n  \n </td></tr><tr><td> 1  \n  \n </td><td><code>value</code> is greater than zero.  \n  \n </td></tr></tbody></table>","nodes":[{"content":"Return value","pos":[23,40],"source":" Return value  \n  \n "},{"content":"Meaning","pos":[52,64],"source":" Meaning  \n  \n "},{"content":"-1","pos":[100,107],"source":" -1  \n  \n "},{"content":"<code>value</code> is less than zero.  \n  \n ","pos":[118,162],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is less than zero.","pos":[0,37],"source":"<code>value</code> is less than zero."}]},{"content":"0","pos":[181,187],"source":" 0  \n  \n "},{"content":"<code>value</code> is equal to zero.  \n  \n ","pos":[198,241],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is equal to zero.","pos":[0,36],"source":"<code>value</code> is equal to zero."}]},{"content":"1","pos":[260,266],"source":" 1  \n  \n "},{"content":"<code>value</code> is greater than zero.  \n  \n ","pos":[277,324],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is greater than zero.","pos":[0,40],"source":"<code>value</code> is greater than zero."}]}]}],"pos":[179492,179958],"yaml":true},{"content":"<code>value</code> is equal to <xref href=\"System.Double.NaN\"></xref>.","nodes":[{"pos":[0,70],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is equal to <ph id=\"ph2\">&lt;xref href=\"System.Double.NaN\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is equal to <xref href=\"System.Double.NaN\"></xref>."}],"pos":[180100,180171],"yaml":true},{"content":"Returns an integer that indicates the sign of a 16-bit signed integer.","nodes":[{"pos":[0,70],"content":"Returns an integer that indicates the sign of a 16-bit signed integer.","nodes":[{"content":"Returns an integer that indicates the sign of a 16-bit signed integer.","pos":[0,70]}]}],"pos":[181575,181646],"yaml":true},{"content":"A signed number.","nodes":[{"pos":[0,16],"content":"A signed number.","nodes":[{"content":"A signed number.","pos":[0,16]}]}],"pos":[182289,182306],"yaml":true},{"content":"A number that indicates the sign of <code>value</code>, as shown in the following table.  \n  \n <table><thead><tr><th> Return value  \n  \n </th><th> Meaning  \n  \n </th></tr></thead><tbody><tr><td> -1  \n  \n </td><td><code>value</code> is less than zero.  \n  \n </td></tr><tr><td> 0  \n  \n </td><td><code>value</code> is equal to zero.  \n  \n </td></tr><tr><td> 1  \n  \n </td><td><code>value</code> is greater than zero.  \n  \n </td></tr></tbody></table>","nodes":[{"pos":[0,88],"content":"A number that indicates the sign of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, as shown in the following table.","source":"A number that indicates the sign of <code>value</code>, as shown in the following table."},{"pos":[95,446],"content":"<table><thead><tr><th> Return value  \n  \n </th><th> Meaning  \n  \n </th></tr></thead><tbody><tr><td> -1  \n  \n </td><td><code>value</code> is less than zero.  \n  \n </td></tr><tr><td> 0  \n  \n </td><td><code>value</code> is equal to zero.  \n  \n </td></tr><tr><td> 1  \n  \n </td><td><code>value</code> is greater than zero.  \n  \n </td></tr></tbody></table>","nodes":[{"content":"Return value","pos":[23,40],"source":" Return value  \n  \n "},{"content":"Meaning","pos":[52,64],"source":" Meaning  \n  \n "},{"content":"-1","pos":[100,107],"source":" -1  \n  \n "},{"content":"<code>value</code> is less than zero.  \n  \n ","pos":[118,162],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is less than zero.","pos":[0,37],"source":"<code>value</code> is less than zero."}]},{"content":"0","pos":[181,187],"source":" 0  \n  \n "},{"content":"<code>value</code> is equal to zero.  \n  \n ","pos":[198,241],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is equal to zero.","pos":[0,36],"source":"<code>value</code> is equal to zero."}]},{"content":"1","pos":[260,266],"source":" 1  \n  \n "},{"content":"<code>value</code> is greater than zero.  \n  \n ","pos":[277,324],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is greater than zero.","pos":[0,40],"source":"<code>value</code> is greater than zero."}]}]}],"pos":[182362,182828],"yaml":true},{"content":"Returns an integer that indicates the sign of a 32-bit signed integer.","nodes":[{"pos":[0,70],"content":"Returns an integer that indicates the sign of a 32-bit signed integer.","nodes":[{"content":"Returns an integer that indicates the sign of a 32-bit signed integer.","pos":[0,70]}]}],"pos":[184279,184350],"yaml":true},{"content":"A signed number.","nodes":[{"pos":[0,16],"content":"A signed number.","nodes":[{"content":"A signed number.","pos":[0,16]}]}],"pos":[184991,185008],"yaml":true},{"content":"A number that indicates the sign of <code>value</code>, as shown in the following table.  \n  \n <table><thead><tr><th> Return value  \n  \n </th><th> Meaning  \n  \n </th></tr></thead><tbody><tr><td> -1  \n  \n </td><td><code>value</code> is less than zero.  \n  \n </td></tr><tr><td> 0  \n  \n </td><td><code>value</code> is equal to zero.  \n  \n </td></tr><tr><td> 1  \n  \n </td><td><code>value</code> is greater than zero.  \n  \n </td></tr></tbody></table>","nodes":[{"pos":[0,88],"content":"A number that indicates the sign of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, as shown in the following table.","source":"A number that indicates the sign of <code>value</code>, as shown in the following table."},{"pos":[95,446],"content":"<table><thead><tr><th> Return value  \n  \n </th><th> Meaning  \n  \n </th></tr></thead><tbody><tr><td> -1  \n  \n </td><td><code>value</code> is less than zero.  \n  \n </td></tr><tr><td> 0  \n  \n </td><td><code>value</code> is equal to zero.  \n  \n </td></tr><tr><td> 1  \n  \n </td><td><code>value</code> is greater than zero.  \n  \n </td></tr></tbody></table>","nodes":[{"content":"Return value","pos":[23,40],"source":" Return value  \n  \n "},{"content":"Meaning","pos":[52,64],"source":" Meaning  \n  \n "},{"content":"-1","pos":[100,107],"source":" -1  \n  \n "},{"content":"<code>value</code> is less than zero.  \n  \n ","pos":[118,162],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is less than zero.","pos":[0,37],"source":"<code>value</code> is less than zero."}]},{"content":"0","pos":[181,187],"source":" 0  \n  \n "},{"content":"<code>value</code> is equal to zero.  \n  \n ","pos":[198,241],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is equal to zero.","pos":[0,36],"source":"<code>value</code> is equal to zero."}]},{"content":"1","pos":[260,266],"source":" 1  \n  \n "},{"content":"<code>value</code> is greater than zero.  \n  \n ","pos":[277,324],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is greater than zero.","pos":[0,40],"source":"<code>value</code> is greater than zero."}]}]}],"pos":[185064,185530],"yaml":true},{"content":"Returns an integer that indicates the sign of a 64-bit signed integer.","nodes":[{"pos":[0,70],"content":"Returns an integer that indicates the sign of a 64-bit signed integer.","nodes":[{"content":"Returns an integer that indicates the sign of a 64-bit signed integer.","pos":[0,70]}]}],"pos":[186981,187052],"yaml":true},{"content":"A signed number.","nodes":[{"pos":[0,16],"content":"A signed number.","nodes":[{"content":"A signed number.","pos":[0,16]}]}],"pos":[187694,187711],"yaml":true},{"content":"A number that indicates the sign of <code>value</code>, as shown in the following table.  \n  \n <table><thead><tr><th> Return value  \n  \n </th><th> Meaning  \n  \n </th></tr></thead><tbody><tr><td> -1  \n  \n </td><td><code>value</code> is less than zero.  \n  \n </td></tr><tr><td> 0  \n  \n </td><td><code>value</code> is equal to zero.  \n  \n </td></tr><tr><td> 1  \n  \n </td><td><code>value</code> is greater than zero.  \n  \n </td></tr></tbody></table>","nodes":[{"pos":[0,88],"content":"A number that indicates the sign of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, as shown in the following table.","source":"A number that indicates the sign of <code>value</code>, as shown in the following table."},{"pos":[95,446],"content":"<table><thead><tr><th> Return value  \n  \n </th><th> Meaning  \n  \n </th></tr></thead><tbody><tr><td> -1  \n  \n </td><td><code>value</code> is less than zero.  \n  \n </td></tr><tr><td> 0  \n  \n </td><td><code>value</code> is equal to zero.  \n  \n </td></tr><tr><td> 1  \n  \n </td><td><code>value</code> is greater than zero.  \n  \n </td></tr></tbody></table>","nodes":[{"content":"Return value","pos":[23,40],"source":" Return value  \n  \n "},{"content":"Meaning","pos":[52,64],"source":" Meaning  \n  \n "},{"content":"-1","pos":[100,107],"source":" -1  \n  \n "},{"content":"<code>value</code> is less than zero.  \n  \n ","pos":[118,162],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is less than zero.","pos":[0,37],"source":"<code>value</code> is less than zero."}]},{"content":"0","pos":[181,187],"source":" 0  \n  \n "},{"content":"<code>value</code> is equal to zero.  \n  \n ","pos":[198,241],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is equal to zero.","pos":[0,36],"source":"<code>value</code> is equal to zero."}]},{"content":"1","pos":[260,266],"source":" 1  \n  \n "},{"content":"<code>value</code> is greater than zero.  \n  \n ","pos":[277,324],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is greater than zero.","pos":[0,40],"source":"<code>value</code> is greater than zero."}]}]}],"pos":[187767,188233],"yaml":true},{"content":"Returns an integer that indicates the sign of an 8-bit signed integer.","nodes":[{"pos":[0,70],"content":"Returns an integer that indicates the sign of an 8-bit signed integer.","nodes":[{"content":"Returns an integer that indicates the sign of an 8-bit signed integer.","pos":[0,70]}]}],"pos":[189684,189755],"yaml":true},{"content":"A signed number.","nodes":[{"pos":[0,16],"content":"A signed number.","nodes":[{"content":"A signed number.","pos":[0,16]}]}],"pos":[190443,190460],"yaml":true},{"content":"A number that indicates the sign of <code>value</code>, as shown in the following table.  \n  \n <table><thead><tr><th> Return value  \n  \n </th><th> Meaning  \n  \n </th></tr></thead><tbody><tr><td> -1  \n  \n </td><td><code>value</code> is less than zero.  \n  \n </td></tr><tr><td> 0  \n  \n </td><td><code>value</code> is equal to zero.  \n  \n </td></tr><tr><td> 1  \n  \n </td><td><code>value</code> is greater than zero.  \n  \n </td></tr></tbody></table>","nodes":[{"pos":[0,88],"content":"A number that indicates the sign of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, as shown in the following table.","source":"A number that indicates the sign of <code>value</code>, as shown in the following table."},{"pos":[95,446],"content":"<table><thead><tr><th> Return value  \n  \n </th><th> Meaning  \n  \n </th></tr></thead><tbody><tr><td> -1  \n  \n </td><td><code>value</code> is less than zero.  \n  \n </td></tr><tr><td> 0  \n  \n </td><td><code>value</code> is equal to zero.  \n  \n </td></tr><tr><td> 1  \n  \n </td><td><code>value</code> is greater than zero.  \n  \n </td></tr></tbody></table>","nodes":[{"content":"Return value","pos":[23,40],"source":" Return value  \n  \n "},{"content":"Meaning","pos":[52,64],"source":" Meaning  \n  \n "},{"content":"-1","pos":[100,107],"source":" -1  \n  \n "},{"content":"<code>value</code> is less than zero.  \n  \n ","pos":[118,162],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is less than zero.","pos":[0,37],"source":"<code>value</code> is less than zero."}]},{"content":"0","pos":[181,187],"source":" 0  \n  \n "},{"content":"<code>value</code> is equal to zero.  \n  \n ","pos":[198,241],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is equal to zero.","pos":[0,36],"source":"<code>value</code> is equal to zero."}]},{"content":"1","pos":[260,266],"source":" 1  \n  \n "},{"content":"<code>value</code> is greater than zero.  \n  \n ","pos":[277,324],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is greater than zero.","pos":[0,40],"source":"<code>value</code> is greater than zero."}]}]}],"pos":[190516,190982],"yaml":true},{"content":"Returns an integer that indicates the sign of a single-precision floating-point number.","nodes":[{"pos":[0,87],"content":"Returns an integer that indicates the sign of a single-precision floating-point number.","nodes":[{"content":"Returns an integer that indicates the sign of a single-precision floating-point number.","pos":[0,87]}]}],"pos":[192492,192580],"yaml":true},{"content":"A signed number.","nodes":[{"pos":[0,16],"content":"A signed number.","nodes":[{"content":"A signed number.","pos":[0,16]}]}],"pos":[193225,193242],"yaml":true},{"content":"A number that indicates the sign of <code>value</code>, as shown in the following table.  \n  \n <table><thead><tr><th> Return value  \n  \n </th><th> Meaning  \n  \n </th></tr></thead><tbody><tr><td> -1  \n  \n </td><td><code>value</code> is less than zero.  \n  \n </td></tr><tr><td> 0  \n  \n </td><td><code>value</code> is equal to zero.  \n  \n </td></tr><tr><td> 1  \n  \n </td><td><code>value</code> is greater than zero.  \n  \n </td></tr></tbody></table>","nodes":[{"pos":[0,88],"content":"A number that indicates the sign of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, as shown in the following table.","source":"A number that indicates the sign of <code>value</code>, as shown in the following table."},{"pos":[95,446],"content":"<table><thead><tr><th> Return value  \n  \n </th><th> Meaning  \n  \n </th></tr></thead><tbody><tr><td> -1  \n  \n </td><td><code>value</code> is less than zero.  \n  \n </td></tr><tr><td> 0  \n  \n </td><td><code>value</code> is equal to zero.  \n  \n </td></tr><tr><td> 1  \n  \n </td><td><code>value</code> is greater than zero.  \n  \n </td></tr></tbody></table>","nodes":[{"content":"Return value","pos":[23,40],"source":" Return value  \n  \n "},{"content":"Meaning","pos":[52,64],"source":" Meaning  \n  \n "},{"content":"-1","pos":[100,107],"source":" -1  \n  \n "},{"content":"<code>value</code> is less than zero.  \n  \n ","pos":[118,162],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is less than zero.","pos":[0,37],"source":"<code>value</code> is less than zero."}]},{"content":"0","pos":[181,187],"source":" 0  \n  \n "},{"content":"<code>value</code> is equal to zero.  \n  \n ","pos":[198,241],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is equal to zero.","pos":[0,36],"source":"<code>value</code> is equal to zero."}]},{"content":"1","pos":[260,266],"source":" 1  \n  \n "},{"content":"<code>value</code> is greater than zero.  \n  \n ","pos":[277,324],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is greater than zero.","pos":[0,40],"source":"<code>value</code> is greater than zero."}]}]}],"pos":[193298,193764],"yaml":true},{"content":"<code>value</code> is equal to <xref href=\"System.Single.NaN\"></xref>.","nodes":[{"pos":[0,70],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is equal to <ph id=\"ph2\">&lt;xref href=\"System.Single.NaN\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> is equal to <xref href=\"System.Single.NaN\"></xref>."}],"pos":[193906,193977],"yaml":true},{"content":"Returns the sine of the specified angle.","nodes":[{"pos":[0,40],"content":"Returns the sine of the specified angle.","nodes":[{"content":"Returns the sine of the specified angle.","pos":[0,40]}]}],"pos":[195381,195422],"yaml":true},{"content":"The angle, `a`, must be in radians. Multiply by <xref:System.Math.PI?displayProperty=fullName>/180 to convert degrees to radians.  \n  \n Acceptable values of `a` range from approximately -9223372036854775295 to approximately 9223372036854775295. For values outside of this range, the <xref:System.Math.Sin%2A> method returns `a` unchanged rather than throwing an exception.","nodes":[{"pos":[0,129],"content":"The angle, `a`, must be in radians. Multiply by <xref:System.Math.PI?displayProperty=fullName>/180 to convert degrees to radians.","nodes":[{"content":"The angle, <ph id=\"ph1\">`a`</ph>, must be in radians.","pos":[0,35],"source":"The angle, `a`, must be in radians."},{"content":"Multiply by <ph id=\"ph1\">&lt;xref:System.Math.PI?displayProperty=fullName&gt;</ph>/180 to convert degrees to radians.","pos":[36,129],"source":" Multiply by <xref:System.Math.PI?displayProperty=fullName>/180 to convert degrees to radians."}]},{"pos":[136,372],"content":"Acceptable values of `a` range from approximately -9223372036854775295 to approximately 9223372036854775295. For values outside of this range, the <xref:System.Math.Sin%2A> method returns `a` unchanged rather than throwing an exception.","nodes":[{"content":"Acceptable values of <ph id=\"ph1\">`a`</ph> range from approximately -9223372036854775295 to approximately 9223372036854775295.","pos":[0,108],"source":"Acceptable values of `a` range from approximately -9223372036854775295 to approximately 9223372036854775295."},{"content":"For values outside of this range, the <ph id=\"ph1\">&lt;xref:System.Math.Sin%2A&gt;</ph> method returns <ph id=\"ph2\">`a`</ph> unchanged rather than throwing an exception.","pos":[109,236],"source":" For values outside of this range, the <xref:System.Math.Sin%2A> method returns `a` unchanged rather than throwing an exception."}]}],"pos":[195433,195810],"yaml":true,"extradata":"MT"},{"content":"An angle, measured in radians.","nodes":[{"pos":[0,30],"content":"An angle, measured in radians.","nodes":[{"content":"An angle, measured in radians.","pos":[0,30]}]}],"pos":[196451,196482],"yaml":true},{"content":"The sine of <code>a</code>. If <code>a</code> is equal to <xref href=\"System.Double.NaN\"></xref>, <xref href=\"System.Double.NegativeInfinity\"></xref>, or <xref href=\"System.Double.PositiveInfinity\"></xref>, this method returns <xref href=\"System.Double.NaN\"></xref>.","nodes":[{"pos":[0,266],"content":"The sine of <code>a</code>. If <code>a</code> is equal to <xref href=\"System.Double.NaN\"></xref>, <xref href=\"System.Double.NegativeInfinity\"></xref>, or <xref href=\"System.Double.PositiveInfinity\"></xref>, this method returns <xref href=\"System.Double.NaN\"></xref>.","nodes":[{"content":"The sine of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">a</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[0,27],"source":"The sine of <code>a</code>."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">a</ph><ept id=\"p1\">&lt;/code&gt;</ept> is equal to <ph id=\"ph2\">&lt;xref href=\"System.Double.NaN\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph3\">&lt;xref href=\"System.Double.NegativeInfinity\"&gt;&lt;/xref&gt;</ph>, or <ph id=\"ph4\">&lt;xref href=\"System.Double.PositiveInfinity\"&gt;&lt;/xref&gt;</ph>, this method returns <ph id=\"ph5\">&lt;xref href=\"System.Double.NaN\"&gt;&lt;/xref&gt;</ph>.","pos":[28,266],"source":" If <code>a</code> is equal to <xref href=\"System.Double.NaN\"></xref>, <xref href=\"System.Double.NegativeInfinity\"></xref>, or <xref href=\"System.Double.PositiveInfinity\"></xref>, this method returns <xref href=\"System.Double.NaN\"></xref>."}]}],"pos":[196539,196806],"yaml":true},{"content":"Returns the hyperbolic sine of the specified angle.","nodes":[{"pos":[0,51],"content":"Returns the hyperbolic sine of the specified angle.","nodes":[{"content":"Returns the hyperbolic sine of the specified angle.","pos":[0,51]}]}],"pos":[198279,198331],"yaml":true},{"content":"The angle, `value`, must be in radians. Multiply by <xref:System.Math.PI?displayProperty=fullName>/180 to convert degrees to radians.","nodes":[{"pos":[0,133],"content":"The angle, `value`, must be in radians. Multiply by <xref:System.Math.PI?displayProperty=fullName>/180 to convert degrees to radians.","nodes":[{"content":"The angle, <ph id=\"ph1\">`value`</ph>, must be in radians.","pos":[0,39],"source":"The angle, `value`, must be in radians."},{"content":"Multiply by <ph id=\"ph1\">&lt;xref:System.Math.PI?displayProperty=fullName&gt;</ph>/180 to convert degrees to radians.","pos":[40,133],"source":" Multiply by <xref:System.Math.PI?displayProperty=fullName>/180 to convert degrees to radians."}]}],"pos":[198342,198476],"yaml":true,"extradata":"MT"},{"content":"An angle, measured in radians.","nodes":[{"pos":[0,30],"content":"An angle, measured in radians.","nodes":[{"content":"An angle, measured in radians.","pos":[0,30]}]}],"pos":[199142,199173],"yaml":true},{"content":"The hyperbolic sine of <code>value</code>. If <code>value</code> is equal to <xref href=\"System.Double.NegativeInfinity\"></xref>, <xref href=\"System.Double.PositiveInfinity\"></xref>, or <xref href=\"System.Double.NaN\"></xref>, this method returns a <xref href=\"System.Double\"></xref> equal to <code>value</code>.","nodes":[{"pos":[0,311],"content":"The hyperbolic sine of <code>value</code>. If <code>value</code> is equal to <xref href=\"System.Double.NegativeInfinity\"></xref>, <xref href=\"System.Double.PositiveInfinity\"></xref>, or <xref href=\"System.Double.NaN\"></xref>, this method returns a <xref href=\"System.Double\"></xref> equal to <code>value</code>.","nodes":[{"content":"The hyperbolic sine of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[0,42],"source":"The hyperbolic sine of <code>value</code>."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is equal to <ph id=\"ph2\">&lt;xref href=\"System.Double.NegativeInfinity\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph3\">&lt;xref href=\"System.Double.PositiveInfinity\"&gt;&lt;/xref&gt;</ph>, or <ph id=\"ph4\">&lt;xref href=\"System.Double.NaN\"&gt;&lt;/xref&gt;</ph>, this method returns a <ph id=\"ph5\">&lt;xref href=\"System.Double\"&gt;&lt;/xref&gt;</ph> equal to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph6\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","pos":[43,311],"source":" If <code>value</code> is equal to <xref href=\"System.Double.NegativeInfinity\"></xref>, <xref href=\"System.Double.PositiveInfinity\"></xref>, or <xref href=\"System.Double.NaN\"></xref>, this method returns a <xref href=\"System.Double\"></xref> equal to <code>value</code>."}]}],"pos":[199230,199542],"yaml":true},{"content":"Returns the square root of a specified number.","nodes":[{"pos":[0,46],"content":"Returns the square root of a specified number.","nodes":[{"content":"Returns the square root of a specified number.","pos":[0,46]}]}],"pos":[201016,201063],"yaml":true},{"content":"The number whose square root is to be found.","nodes":[{"pos":[0,44],"content":"The number whose square root is to be found.","nodes":[{"content":"The number whose square root is to be found.","pos":[0,44]}]}],"pos":[201716,201761],"yaml":true},{"content":"One of the values in the following table.  \n  \n <table><thead><tr><th><code>d</code> parameter  \n  \n </th><th> Return value  \n  \n </th></tr></thead><tbody><tr><td> Zero or positive  \n  \n </td><td> The positive square root of <code>d</code>.  \n  \n </td></tr><tr><td> Negative  \n  \n </td><td><xref href=\"System.Double.NaN\"></xref></td></tr><tr><td> Equals <xref href=\"System.Double.NaN\"></xref></td><td><xref href=\"System.Double.NaN\"></xref></td></tr><tr><td> Equals <xref href=\"System.Double.PositiveInfinity\"></xref></td><td><xref href=\"System.Double.PositiveInfinity\"></xref></td></tr></tbody></table>","nodes":[{"pos":[0,41],"content":"One of the values in the following table.","nodes":[{"content":"One of the values in the following table.","pos":[0,41]}]},{"pos":[48,603],"content":"<table><thead><tr><th><code>d</code> parameter  \n  \n </th><th> Return value  \n  \n </th></tr></thead><tbody><tr><td> Zero or positive  \n  \n </td><td> The positive square root of <code>d</code>.  \n  \n </td></tr><tr><td> Negative  \n  \n </td><td><xref href=\"System.Double.NaN\"></xref></td></tr><tr><td> Equals <xref href=\"System.Double.NaN\"></xref></td><td><xref href=\"System.Double.NaN\"></xref></td></tr><tr><td> Equals <xref href=\"System.Double.PositiveInfinity\"></xref></td><td><xref href=\"System.Double.PositiveInfinity\"></xref></td></tr></tbody></table>","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;d&lt;/code&gt;</ph> parameter","pos":[22,51],"source":"<code>d</code> parameter  \n  \n "},{"content":"Return value","pos":[63,80],"source":" Return value  \n  \n "},{"content":"Zero or positive","pos":[116,137],"source":" Zero or positive  \n  \n "},{"content":" The positive square root of <code>d</code>.  \n  \n ","pos":[148,199],"nodes":[{"content":"The positive square root of <ph id=\"ph1\">&lt;code&gt;d&lt;/code&gt;</ph>.","pos":[1,44],"source":" The positive square root of <code>d</code>."}]},{"content":"Negative","pos":[218,231],"source":" Negative  \n  \n "},{"content":"Equals <ph id=\"ph1\">&lt;xref href=\"System.Double.NaN\"&gt;&lt;/xref&gt;</ph>","pos":[299,344],"source":" Equals <xref href=\"System.Double.NaN\"></xref>"},{"content":"Equals <ph id=\"ph1\">&lt;xref href=\"System.Double.PositiveInfinity\"&gt;&lt;/xref&gt;</ph>","pos":[410,468],"source":" Equals <xref href=\"System.Double.PositiveInfinity\"></xref>"}]}],"pos":[201818,202445],"yaml":true},{"content":"Returns the tangent of the specified angle.","nodes":[{"pos":[0,43],"content":"Returns the tangent of the specified angle.","nodes":[{"content":"Returns the tangent of the specified angle.","pos":[0,43]}]}],"pos":[203913,203957],"yaml":true},{"content":"The angle, `a`, must be in radians. Multiply by <xref:System.Math.PI?displayProperty=fullName>/180 to convert degrees to radians.","nodes":[{"pos":[0,129],"content":"The angle, `a`, must be in radians. Multiply by <xref:System.Math.PI?displayProperty=fullName>/180 to convert degrees to radians.","nodes":[{"content":"The angle, <ph id=\"ph1\">`a`</ph>, must be in radians.","pos":[0,35],"source":"The angle, `a`, must be in radians."},{"content":"Multiply by <ph id=\"ph1\">&lt;xref:System.Math.PI?displayProperty=fullName&gt;</ph>/180 to convert degrees to radians.","pos":[36,129],"source":" Multiply by <xref:System.Math.PI?displayProperty=fullName>/180 to convert degrees to radians."}]}],"pos":[203968,204098],"yaml":true,"extradata":"MT"},{"content":"An angle, measured in radians.","nodes":[{"pos":[0,30],"content":"An angle, measured in radians.","nodes":[{"content":"An angle, measured in radians.","pos":[0,30]}]}],"pos":[204652,204683],"yaml":true},{"content":"The tangent of <code>a</code>. If <code>a</code> is equal to <xref href=\"System.Double.NaN\"></xref>, <xref href=\"System.Double.NegativeInfinity\"></xref>, or <xref href=\"System.Double.PositiveInfinity\"></xref>, this method returns <xref href=\"System.Double.NaN\"></xref>.","nodes":[{"pos":[0,269],"content":"The tangent of <code>a</code>. If <code>a</code> is equal to <xref href=\"System.Double.NaN\"></xref>, <xref href=\"System.Double.NegativeInfinity\"></xref>, or <xref href=\"System.Double.PositiveInfinity\"></xref>, this method returns <xref href=\"System.Double.NaN\"></xref>.","nodes":[{"content":"The tangent of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">a</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[0,30],"source":"The tangent of <code>a</code>."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">a</ph><ept id=\"p1\">&lt;/code&gt;</ept> is equal to <ph id=\"ph2\">&lt;xref href=\"System.Double.NaN\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph3\">&lt;xref href=\"System.Double.NegativeInfinity\"&gt;&lt;/xref&gt;</ph>, or <ph id=\"ph4\">&lt;xref href=\"System.Double.PositiveInfinity\"&gt;&lt;/xref&gt;</ph>, this method returns <ph id=\"ph5\">&lt;xref href=\"System.Double.NaN\"&gt;&lt;/xref&gt;</ph>.","pos":[31,269],"source":" If <code>a</code> is equal to <xref href=\"System.Double.NaN\"></xref>, <xref href=\"System.Double.NegativeInfinity\"></xref>, or <xref href=\"System.Double.PositiveInfinity\"></xref>, this method returns <xref href=\"System.Double.NaN\"></xref>."}]}],"pos":[204740,205010],"yaml":true},{"content":"Returns the hyperbolic tangent of the specified angle.","nodes":[{"pos":[0,54],"content":"Returns the hyperbolic tangent of the specified angle.","nodes":[{"content":"Returns the hyperbolic tangent of the specified angle.","pos":[0,54]}]}],"pos":[206483,206538],"yaml":true},{"content":"The angle, `value`, must be in radians. Multiply by <xref:System.Math.PI?displayProperty=fullName>/180 to convert degrees to radians.","nodes":[{"pos":[0,133],"content":"The angle, `value`, must be in radians. Multiply by <xref:System.Math.PI?displayProperty=fullName>/180 to convert degrees to radians.","nodes":[{"content":"The angle, <ph id=\"ph1\">`value`</ph>, must be in radians.","pos":[0,39],"source":"The angle, `value`, must be in radians."},{"content":"Multiply by <ph id=\"ph1\">&lt;xref:System.Math.PI?displayProperty=fullName&gt;</ph>/180 to convert degrees to radians.","pos":[40,133],"source":" Multiply by <xref:System.Math.PI?displayProperty=fullName>/180 to convert degrees to radians."}]}],"pos":[206549,206683],"yaml":true,"extradata":"MT"},{"content":"An angle, measured in radians.","nodes":[{"pos":[0,30],"content":"An angle, measured in radians.","nodes":[{"content":"An angle, measured in radians.","pos":[0,30]}]}],"pos":[207321,207352],"yaml":true},{"content":"The hyperbolic tangent of <code>value</code>. If <code>value</code> is equal to <xref href=\"System.Double.NegativeInfinity\"></xref>, this method returns -1. If value is equal to <xref href=\"System.Double.PositiveInfinity\"></xref>, this method returns 1. If <code>value</code> is equal to <xref href=\"System.Double.NaN\"></xref>, this method returns <xref href=\"System.Double.NaN\"></xref>.","nodes":[{"pos":[0,387],"content":"The hyperbolic tangent of <code>value</code>. If <code>value</code> is equal to <xref href=\"System.Double.NegativeInfinity\"></xref>, this method returns -1. If value is equal to <xref href=\"System.Double.PositiveInfinity\"></xref>, this method returns 1. If <code>value</code> is equal to <xref href=\"System.Double.NaN\"></xref>, this method returns <xref href=\"System.Double.NaN\"></xref>.","nodes":[{"content":"The hyperbolic tangent of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[0,45],"source":"The hyperbolic tangent of <code>value</code>."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is equal to <ph id=\"ph2\">&lt;xref href=\"System.Double.NegativeInfinity\"&gt;&lt;/xref&gt;</ph>, this method returns -1.","pos":[46,156],"source":" If <code>value</code> is equal to <xref href=\"System.Double.NegativeInfinity\"></xref>, this method returns -1."},{"content":"If value is equal to <ph id=\"ph1\">&lt;xref href=\"System.Double.PositiveInfinity\"&gt;&lt;/xref&gt;</ph>, this method returns 1.","pos":[157,253],"source":" If value is equal to <xref href=\"System.Double.PositiveInfinity\"></xref>, this method returns 1."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is equal to <ph id=\"ph2\">&lt;xref href=\"System.Double.NaN\"&gt;&lt;/xref&gt;</ph>, this method returns <ph id=\"ph3\">&lt;xref href=\"System.Double.NaN\"&gt;&lt;/xref&gt;</ph>.","pos":[254,387],"source":" If <code>value</code> is equal to <xref href=\"System.Double.NaN\"></xref>, this method returns <xref href=\"System.Double.NaN\"></xref>."}]}],"pos":[207409,207797],"yaml":true},{"content":"Calculates the integral part of a specified decimal number.","nodes":[{"pos":[0,59],"content":"Calculates the integral part of a specified decimal number.","nodes":[{"content":"Calculates the integral part of a specified decimal number.","pos":[0,59]}]}],"pos":[209301,209361],"yaml":true},{"content":"<xref:System.Math.Truncate%2A> rounds `d` to the nearest integer towards zero.","nodes":[{"pos":[0,78],"content":"<ph id=\"ph1\">&lt;xref:System.Math.Truncate%2A&gt;</ph> rounds <ph id=\"ph2\">`d`</ph> to the nearest integer towards zero.","source":"<xref:System.Math.Truncate%2A> rounds `d` to the nearest integer towards zero."}],"pos":[209372,209451],"yaml":true,"extradata":"MT"},{"content":"A number to truncate.","nodes":[{"pos":[0,21],"content":"A number to truncate.","nodes":[{"content":"A number to truncate.","pos":[0,21]}]}],"pos":[210035,210057],"yaml":true},{"content":"The integral part of <code>d</code>; that is, the number that remains after any fractional digits have been discarded.","nodes":[{"pos":[0,118],"content":"The integral part of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">d</ph><ept id=\"p1\">&lt;/code&gt;</ept>; that is, the number that remains after any fractional digits have been discarded.","source":"The integral part of <code>d</code>; that is, the number that remains after any fractional digits have been discarded."}],"pos":[210115,210234],"yaml":true},{"content":"Calculates the integral part of a specified double-precision floating-point number.","nodes":[{"pos":[0,83],"content":"Calculates the integral part of a specified double-precision floating-point number.","nodes":[{"content":"Calculates the integral part of a specified double-precision floating-point number.","pos":[0,83]}]}],"pos":[211719,211803],"yaml":true},{"content":"<xref:System.Math.Truncate%2A> rounds `d` to the nearest integer towards zero.","nodes":[{"pos":[0,78],"content":"<ph id=\"ph1\">&lt;xref:System.Math.Truncate%2A&gt;</ph> rounds <ph id=\"ph2\">`d`</ph> to the nearest integer towards zero.","source":"<xref:System.Math.Truncate%2A> rounds `d` to the nearest integer towards zero."}],"pos":[211814,211893],"yaml":true,"extradata":"MT"},{"content":"A number to truncate.","nodes":[{"pos":[0,21],"content":"A number to truncate.","nodes":[{"content":"A number to truncate.","pos":[0,21]}]}],"pos":[212472,212494],"yaml":true},{"content":"The integral part of <code>d</code>; that is, the number that remains after any fractional digits have been discarded, or one of the values listed in the following table.  \n  \n <table><thead><tr><th><code>d</code></th><th> Return value  \n  \n </th></tr></thead><tbody><tr><td><xref href=\"System.Double.NaN\"></xref></td><td><xref href=\"System.Double.NaN\"></xref></td></tr><tr><td><xref href=\"System.Double.NegativeInfinity\"></xref></td><td><xref href=\"System.Double.NegativeInfinity\"></xref></td></tr><tr><td><xref href=\"System.Double.PositiveInfinity\"></xref></td><td><xref href=\"System.Double.PositiveInfinity\"></xref></td></tr></tbody></table>","nodes":[{"pos":[0,170],"content":"The integral part of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">d</ph><ept id=\"p1\">&lt;/code&gt;</ept>; that is, the number that remains after any fractional digits have been discarded, or one of the values listed in the following table.","source":"The integral part of <code>d</code>; that is, the number that remains after any fractional digits have been discarded, or one of the values listed in the following table."},{"pos":[177,645],"content":"<table><thead><tr><th><code>d</code></th><th> Return value  \n  \n </th></tr></thead><tbody><tr><td><xref href=\"System.Double.NaN\"></xref></td><td><xref href=\"System.Double.NaN\"></xref></td></tr><tr><td><xref href=\"System.Double.NegativeInfinity\"></xref></td><td><xref href=\"System.Double.NegativeInfinity\"></xref></td></tr><tr><td><xref href=\"System.Double.PositiveInfinity\"></xref></td><td><xref href=\"System.Double.PositiveInfinity\"></xref></td></tr></tbody></table>","nodes":[{"content":"Return value","pos":[46,63],"source":" Return value  \n  \n "}]}],"pos":[212551,213214],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Math\n  commentId: T:System.Math\n  id: Math\n  children:\n  - System.Math.Abs(System.Decimal)\n  - System.Math.Abs(System.Double)\n  - System.Math.Abs(System.Int16)\n  - System.Math.Abs(System.Int32)\n  - System.Math.Abs(System.Int64)\n  - System.Math.Abs(System.SByte)\n  - System.Math.Abs(System.Single)\n  - System.Math.Acos(System.Double)\n  - System.Math.Asin(System.Double)\n  - System.Math.Atan(System.Double)\n  - System.Math.Atan2(System.Double,System.Double)\n  - System.Math.BigMul(System.Int32,System.Int32)\n  - System.Math.Ceiling(System.Decimal)\n  - System.Math.Ceiling(System.Double)\n  - System.Math.Clamp(System.UInt64,System.UInt64,System.UInt64)\n  - System.Math.Clamp(System.UInt32,System.UInt32,System.UInt32)\n  - System.Math.Clamp(System.UInt16,System.UInt16,System.UInt16)\n  - System.Math.Clamp(System.Single,System.Single,System.Single)\n  - System.Math.Clamp(System.Int64,System.Int64,System.Int64)\n  - System.Math.Clamp(System.SByte,System.SByte,System.SByte)\n  - System.Math.Clamp(System.Int16,System.Int16,System.Int16)\n  - System.Math.Clamp(System.Double,System.Double,System.Double)\n  - System.Math.Clamp(System.Decimal,System.Decimal,System.Decimal)\n  - System.Math.Clamp(System.Byte,System.Byte,System.Byte)\n  - System.Math.Clamp(System.Int32,System.Int32,System.Int32)\n  - System.Math.Cos(System.Double)\n  - System.Math.Cosh(System.Double)\n  - System.Math.DivRem(System.Int64,System.Int64,System.Int64@)\n  - System.Math.DivRem(System.Int32,System.Int32,System.Int32@)\n  - System.Math.E\n  - System.Math.Exp(System.Double)\n  - System.Math.Floor(System.Decimal)\n  - System.Math.Floor(System.Double)\n  - System.Math.IEEERemainder(System.Double,System.Double)\n  - System.Math.Log(System.Double)\n  - System.Math.Log(System.Double,System.Double)\n  - System.Math.Log10(System.Double)\n  - System.Math.Max(System.UInt16,System.UInt16)\n  - System.Math.Max(System.Single,System.Single)\n  - System.Math.Max(System.UInt64,System.UInt64)\n  - System.Math.Max(System.UInt32,System.UInt32)\n  - System.Math.Max(System.SByte,System.SByte)\n  - System.Math.Max(System.Int32,System.Int32)\n  - System.Math.Max(System.Int16,System.Int16)\n  - System.Math.Max(System.Double,System.Double)\n  - System.Math.Max(System.Decimal,System.Decimal)\n  - System.Math.Max(System.Byte,System.Byte)\n  - System.Math.Max(System.Int64,System.Int64)\n  - System.Math.Min(System.Int64,System.Int64)\n  - System.Math.Min(System.UInt64,System.UInt64)\n  - System.Math.Min(System.UInt32,System.UInt32)\n  - System.Math.Min(System.UInt16,System.UInt16)\n  - System.Math.Min(System.Single,System.Single)\n  - System.Math.Min(System.SByte,System.SByte)\n  - System.Math.Min(System.Int16,System.Int16)\n  - System.Math.Min(System.Double,System.Double)\n  - System.Math.Min(System.Decimal,System.Decimal)\n  - System.Math.Min(System.Byte,System.Byte)\n  - System.Math.Min(System.Int32,System.Int32)\n  - System.Math.PI\n  - System.Math.Pow(System.Double,System.Double)\n  - System.Math.Round(System.Double)\n  - System.Math.Round(System.Decimal,System.Int32,System.MidpointRounding)\n  - System.Math.Round(System.Double,System.Int32,System.MidpointRounding)\n  - System.Math.Round(System.Double,System.MidpointRounding)\n  - System.Math.Round(System.Decimal)\n  - System.Math.Round(System.Decimal,System.MidpointRounding)\n  - System.Math.Round(System.Decimal,System.Int32)\n  - System.Math.Round(System.Double,System.Int32)\n  - System.Math.Sign(System.Decimal)\n  - System.Math.Sign(System.Double)\n  - System.Math.Sign(System.Int16)\n  - System.Math.Sign(System.Int32)\n  - System.Math.Sign(System.Int64)\n  - System.Math.Sign(System.SByte)\n  - System.Math.Sign(System.Single)\n  - System.Math.Sin(System.Double)\n  - System.Math.Sinh(System.Double)\n  - System.Math.Sqrt(System.Double)\n  - System.Math.Tan(System.Double)\n  - System.Math.Tanh(System.Double)\n  - System.Math.Truncate(System.Decimal)\n  - System.Math.Truncate(System.Double)\n  langs:\n  - csharp\n  name: Math\n  nameWithType: Math\n  fullName: System.Math\n  type: Class\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Provides constants and static methods for trigonometric, logarithmic, and other common mathematical functions.\n  remarks: >-\n    > [!NOTE]\n\n    >  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/math.cs#a4407e67b9a5afad). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).\n  example:\n  - \"The following example uses several mathematical and trigonometric functions from the <xref:System.Math> class to calculate the inner angles of a trapezoid.  \\n  \\n [!code-cpp[MathSample#1](~/samples/snippets/cpp/VS_Snippets_CLR/MathSample/CPP/mathsample.cpp#1)]\\n [!code-csharp[MathSample#1](~/samples/snippets/csharp/VS_Snippets_CLR/MathSample/CS/mathsample.cs#1)]\\n [!code-vb[MathSample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MathSample/VB/mathsample.vb#1)]\"\n  syntax:\n    content: public static class Math\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Abs(System.Decimal)\n  commentId: M:System.Math.Abs(System.Decimal)\n  id: Abs(System.Decimal)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Abs(Decimal)\n  nameWithType: Math.Abs(Decimal)\n  fullName: Math.Abs(Decimal)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the absolute value of a <xref href=\"System.Decimal\"></xref> number.\n  remarks: The absolute value of a <xref:System.Decimal> is its numeric value without its sign. For example, the absolute value of both 1.2 and -1.2 is 1.2.\n  example:\n  - \"The following example uses the <xref:System.Math.Abs%28System.Decimal%29> method to get the absolute value of a number of <xref:System.Decimal> values.  \\n  \\n [!code-csharp[System.Math.Abs#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Abs/cs/Abs1.cs#1)]\\n [!code-vb[System.Math.Abs#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Abs/vb/Abs1.vb#1)]\"\n  syntax:\n    content: public static decimal Abs (decimal value);\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: A number that is greater than or equal to <xref href=\"System.Decimal.MinValue\"></xref>, but less than or equal to <xref href=\"System.Decimal.MaxValue\"></xref>.\n    return:\n      type: System.Decimal\n      description: A decimal number, x, such that 0 ≤ x ≤<xref href=\"System.Decimal.MaxValue\"></xref>.\n  overload: System.Math.Abs*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Abs(System.Double)\n  commentId: M:System.Math.Abs(System.Double)\n  id: Abs(System.Double)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Abs(Double)\n  nameWithType: Math.Abs(Double)\n  fullName: Math.Abs(Double)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the absolute value of a double-precision floating-point number.\n  remarks: \"The absolute value of a <xref:System.Double> is its numeric value without its sign. For example, the absolute value of both 1.2e03 and -1.2e03 is 1.2e03.  \\n  \\n If `value` is equal to <xref:System.Double.NegativeInfinity> or <xref:System.Double.PositiveInfinity>, the return value is <xref:System.Double.PositiveInfinity>. If `value` is equal to <xref:System.Double.NaN>, the return value is <xref:System.Double.NaN>.\"\n  example:\n  - \"The following example uses the <xref:System.Math.Abs%28System.Double%29> method to get the absolute value of a number of <xref:System.Double> values.  \\n  \\n [!code-csharp[System.Math.Abs#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Abs/cs/abs2.cs#2)]\\n [!code-vb[System.Math.Abs#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Abs/vb/abs2.vb#2)]\"\n  syntax:\n    content: public static double Abs (double value);\n    parameters:\n    - id: value\n      type: System.Double\n      description: A number that is greater than or equal to <xref href=\"System.Double.MinValue\"></xref>, but less than or equal to <xref href=\"System.Double.MaxValue\"></xref>.\n    return:\n      type: System.Double\n      description: A double-precision floating-point number, x, such that 0 ≤ x ≤<xref href=\"System.Double.MaxValue\"></xref>.\n  overload: System.Math.Abs*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Abs(System.Int16)\n  commentId: M:System.Math.Abs(System.Int16)\n  id: Abs(System.Int16)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Abs(Int16)\n  nameWithType: Math.Abs(Int16)\n  fullName: Math.Abs(Int16)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the absolute value of a 16-bit signed integer.\n  remarks: The absolute value of an <xref:System.Int16> is its numeric value without its sign. For example, the absolute value of both 123 and -123 is 123.\n  example:\n  - \"The following example uses the <xref:System.Math.Abs%28System.Int16%29> method to get the absolute value of a number of <xref:System.Int16> values.  \\n  \\n [!code-csharp[System.Math.Abs#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Abs/cs/abs3.cs#3)]\\n [!code-vb[System.Math.Abs#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Abs/vb/abs3.vb#3)]\"\n  syntax:\n    content: public static short Abs (short value);\n    parameters:\n    - id: value\n      type: System.Int16\n      description: A number that is greater than <xref href=\"System.Int16.MinValue\"></xref>, but less than or equal to <xref href=\"System.Int16.MaxValue\"></xref>.\n    return:\n      type: System.Int16\n      description: A 16-bit signed integer, x, such that 0 ≤ x ≤<xref href=\"System.Int16.MaxValue\"></xref>.\n  overload: System.Math.Abs*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> equals <xref href=\"System.Int16.MinValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Abs(System.Int32)\n  commentId: M:System.Math.Abs(System.Int32)\n  id: Abs(System.Int32)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Abs(Int32)\n  nameWithType: Math.Abs(Int32)\n  fullName: Math.Abs(Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the absolute value of a 32-bit signed integer.\n  remarks: The absolute value of an <xref:System.Int32> is its numeric value without its sign. For example, the absolute value of both 123 and -123 is 123.\n  example:\n  - \"The following example uses the <xref:System.Math.Abs%28System.Int32%29> method to get the absolute value of a number of <xref:System.Int32> values.  \\n  \\n [!code-csharp[System.Math.Abs#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Abs/cs/abs4.cs#4)]\\n [!code-vb[System.Math.Abs#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Abs/vb/abs4.vb#4)]\"\n  syntax:\n    content: public static int Abs (int value);\n    parameters:\n    - id: value\n      type: System.Int32\n      description: A number that is greater than <xref href=\"System.Int32.MinValue\"></xref>, but less than or equal to <xref href=\"System.Int32.MaxValue\"></xref>.\n    return:\n      type: System.Int32\n      description: A 32-bit signed integer, x, such that 0 ≤ x ≤<xref href=\"System.Int32.MaxValue\"></xref>.\n  overload: System.Math.Abs*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> equals <xref href=\"System.Int32.MinValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Abs(System.Int64)\n  commentId: M:System.Math.Abs(System.Int64)\n  id: Abs(System.Int64)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Abs(Int64)\n  nameWithType: Math.Abs(Int64)\n  fullName: Math.Abs(Int64)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the absolute value of a 64-bit signed integer.\n  remarks: The absolute value of an <xref:System.Int64> is its numeric value without its sign. For example, the absolute value of both 123 and -123 is 123.\n  example:\n  - \"The following example uses the <xref:System.Math.Abs%28System.Int64%29> method to get the absolute value of a number of <xref:System.Int64> values.  \\n  \\n [!code-csharp[System.Math.Abs#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Abs/cs/abs5.cs#5)]\\n [!code-vb[System.Math.Abs#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Abs/vb/abs5.vb#5)]\"\n  syntax:\n    content: public static long Abs (long value);\n    parameters:\n    - id: value\n      type: System.Int64\n      description: A number that is greater than <xref href=\"System.Int64.MinValue\"></xref>, but less than or equal to <xref href=\"System.Int64.MaxValue\"></xref>.\n    return:\n      type: System.Int64\n      description: A 64-bit signed integer, x, such that 0 ≤ x ≤<xref href=\"System.Int64.MaxValue\"></xref>.\n  overload: System.Math.Abs*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> equals <xref href=\"System.Int64.MinValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Abs(System.SByte)\n  commentId: M:System.Math.Abs(System.SByte)\n  id: Abs(System.SByte)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Abs(SByte)\n  nameWithType: Math.Abs(SByte)\n  fullName: Math.Abs(SByte)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the absolute value of an 8-bit signed integer.\n  remarks: The absolute value of a signed byte is its numeric value without its sign. For example, the absolute value of both 12 and -12 is 12.\n  example:\n  - \"The following example uses the <xref:System.Math.Abs%28System.SByte%29> method to get the absolute value of a number of <xref:System.SByte> values.  \\n  \\n [!code-csharp[System.Math.Abs#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Abs/cs/abs6.cs#6)]\\n [!code-vb[System.Math.Abs#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Abs/vb/abs6.vb#6)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static sbyte Abs (sbyte value);\n    parameters:\n    - id: value\n      type: System.SByte\n      description: A number that is greater than <xref href=\"System.SByte.MinValue\"></xref>, but less than or equal to <xref href=\"System.SByte.MaxValue\"></xref>.\n    return:\n      type: System.SByte\n      description: An 8-bit signed integer, x, such that 0 ≤ x ≤<xref href=\"System.SByte.MaxValue\"></xref>.\n  overload: System.Math.Abs*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>value</code> equals <xref href=\"System.SByte.MinValue\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Abs(System.Single)\n  commentId: M:System.Math.Abs(System.Single)\n  id: Abs(System.Single)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Abs(Single)\n  nameWithType: Math.Abs(Single)\n  fullName: Math.Abs(Single)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the absolute value of a single-precision floating-point number.\n  remarks: \"The absolute value of a <xref:System.Single> is its numeric value without its sign. For example, the absolute value of both 1.2e-03 and -1.2e03 is 1.2e03.  \\n  \\n If `value` is equal to <xref:System.Single.NegativeInfinity> or <xref:System.Single.PositiveInfinity>, the return value is <xref:System.Single.PositiveInfinity>. If `value` is equal to <xref:System.Single.NaN>, the return value is <xref:System.Single.NaN>.\"\n  example:\n  - \"The following example uses the <xref:System.Math.Abs%28System.Single%29> method to get the absolute value of a number of <xref:System.Single> values.  \\n  \\n [!code-csharp[System.Math.Abs#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Abs/cs/abs7.cs#7)]\\n [!code-vb[System.Math.Abs#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Abs/vb/abs7.vb#7)]\"\n  syntax:\n    content: public static float Abs (float value);\n    parameters:\n    - id: value\n      type: System.Single\n      description: A number that is greater than or equal to <xref href=\"System.Single.MinValue\"></xref>, but less than or equal to <xref href=\"System.Single.MaxValue\"></xref>.\n    return:\n      type: System.Single\n      description: A single-precision floating-point number, x, such that 0 ≤ x ≤<xref href=\"System.Single.MaxValue\"></xref>.\n  overload: System.Math.Abs*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Acos(System.Double)\n  commentId: M:System.Math.Acos(System.Double)\n  id: Acos(System.Double)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Acos(Double)\n  nameWithType: Math.Acos(Double)\n  fullName: Math.Acos(Double)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the angle whose cosine is the specified number.\n  remarks: Multiply the return value by 180/<xref:System.Math.PI?displayProperty=fullName> to convert from radians to degrees.\n  example:\n  - \"The following example uses the <xref:System.Math.Acos%2A> method to assist in the computation of the inner angles of a given trapezoid.  \\n  \\n [!code-cpp[MathSample#1](~/samples/snippets/cpp/VS_Snippets_CLR/MathSample/CPP/mathsample.cpp#1)]\\n [!code-csharp[MathSample#1](~/samples/snippets/csharp/VS_Snippets_CLR/MathSample/CS/mathsample.cs#1)]\\n [!code-vb[MathSample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MathSample/VB/mathsample.vb#1)]\"\n  syntax:\n    content: public static double Acos (double d);\n    parameters:\n    - id: d\n      type: System.Double\n      description: A number representing a cosine, where <code>d</code> must be greater than or equal to -1, but less than or equal to 1.\n    return:\n      type: System.Double\n      description: \"An angle, θ, measured in radians, such that 0 ≤θ≤π  \\n  \\n -or-  \\n  \\n <xref href=\\\"System.Double.NaN\\\"></xref> if <code>d</code> < -1 or <code>d</code> > 1 or <code>d</code> equals <xref href=\\\"System.Double.NaN\\\"></xref>.\"\n  overload: System.Math.Acos*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Asin(System.Double)\n  commentId: M:System.Math.Asin(System.Double)\n  id: Asin(System.Double)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Asin(Double)\n  nameWithType: Math.Asin(Double)\n  fullName: Math.Asin(Double)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the angle whose sine is the specified number.\n  remarks: \"A positive return value represents a counterclockwise angle from the x-axis; a negative return value represents a clockwise angle.  \\n  \\n Multiply the return value by 180/<xref:System.Math.PI?displayProperty=fullName> to convert from radians to degrees.\"\n  example:\n  - \"The following example uses <xref:System.Math.Asin%2A> to assist in the computation of the inner angles of a given trapezoid.  \\n  \\n [!code-cpp[MathSample#1](~/samples/snippets/cpp/VS_Snippets_CLR/MathSample/CPP/mathsample.cpp#1)]\\n [!code-csharp[MathSample#1](~/samples/snippets/csharp/VS_Snippets_CLR/MathSample/CS/mathsample.cs#1)]\\n [!code-vb[MathSample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MathSample/VB/mathsample.vb#1)]\"\n  syntax:\n    content: public static double Asin (double d);\n    parameters:\n    - id: d\n      type: System.Double\n      description: A number representing a sine, where <code>d</code> must be greater than or equal to -1, but less than or equal to 1.\n    return:\n      type: System.Double\n      description: \"An angle, θ, measured in radians, such that -π/2 ≤θ≤π/2  \\n  \\n -or-  \\n  \\n <xref href=\\\"System.Double.NaN\\\"></xref> if <code>d</code> < -1 or <code>d</code> > 1 or <code>d</code> equals <xref href=\\\"System.Double.NaN\\\"></xref>.\"\n  overload: System.Math.Asin*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Atan(System.Double)\n  commentId: M:System.Math.Atan(System.Double)\n  id: Atan(System.Double)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Atan(Double)\n  nameWithType: Math.Atan(Double)\n  fullName: Math.Atan(Double)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the angle whose tangent is the specified number.\n  remarks: \"A positive return value represents a counterclockwise angle from the x-axis; a negative return value represents a clockwise angle.  \\n  \\n Multiply the return value by 180/<xref:System.Math.PI?displayProperty=fullName> to convert from radians to degrees.\"\n  example:\n  - \"The following example demonstrates how to calculate the arctangent of a value and display it to the console.  \\n  \\n [!code-cpp[math.atanx#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.atanx/CPP/atan.cpp#1)]\\n [!code-csharp[math.atanx#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.atanx/CS/atan.cs#1)]\\n [!code-vb[math.atanx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.atanx/VB/atan.vb#1)]\"\n  syntax:\n    content: public static double Atan (double d);\n    parameters:\n    - id: d\n      type: System.Double\n      description: A number representing a tangent.\n    return:\n      type: System.Double\n      description: \"An angle, θ, measured in radians, such that -π/2 ≤θ≤π/2.  \\n  \\n -or-  \\n  \\n <xref href=\\\"System.Double.NaN\\\"></xref> if <code>d</code> equals <xref href=\\\"System.Double.NaN\\\"></xref>, -π/2 rounded to double precision (-1.5707963267949) if <code>d</code> equals <xref href=\\\"System.Double.NegativeInfinity\\\"></xref>, or π/2 rounded to double precision (1.5707963267949) if <code>d</code> equals <xref href=\\\"System.Double.PositiveInfinity\\\"></xref>.\"\n  overload: System.Math.Atan*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Atan2(System.Double,System.Double)\n  commentId: M:System.Math.Atan2(System.Double,System.Double)\n  id: Atan2(System.Double,System.Double)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Atan2(Double, Double)\n  nameWithType: Math.Atan2(Double, Double)\n  fullName: Math.Atan2(Double, Double)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the angle whose tangent is the quotient of two specified numbers.\n  remarks: The return value is the angle in the Cartesian plane formed by the x-axis, and a vector starting from the origin, (0,0), and terminating at the point, (x,y).\n  example:\n  - \"The following example demonstrates how to calculate the arctangent of an angle and a vector. The resulting value is displayed in the console.  \\n  \\n [!code-cpp[math.atanx#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.atanx/CPP/atan.cpp#1)]\\n [!code-csharp[math.atanx#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.atanx/CS/atan.cs#1)]\\n [!code-vb[math.atanx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.atanx/VB/atan.vb#1)]\"\n  syntax:\n    content: public static double Atan2 (double y, double x);\n    parameters:\n    - id: y\n      type: System.Double\n      description: The y coordinate of a point.\n    - id: x\n      type: System.Double\n      description: The x coordinate of a point.\n    return:\n      type: System.Double\n      description: \"An angle, θ, measured in radians, such that -π≤θ≤π, and tan(θ) = <code>y</code> / <code>x</code>, where (<code>x</code>, <code>y</code>) is a point in the Cartesian plane. Observe the following:  \\n  \\n-   For (<code>x</code>, <code>y</code>) in quadrant 1, 0 < θ < π/2.  \\n  \\n-   For (<code>x</code>, <code>y</code>) in quadrant 2, π/2 < θ≤π.  \\n  \\n-   For (<code>x</code>, <code>y</code>) in quadrant 3, -π < θ < -π/2.  \\n  \\n-   For (<code>x</code>, <code>y</code>) in quadrant 4, -π/2 < θ < 0.  \\n  \\n For points on the boundaries of the quadrants, the return value is the following:  \\n  \\n-   If y is 0 and x is not negative, θ = 0.  \\n  \\n-   If y is 0 and x is negative, θ = π.  \\n  \\n-   If y is positive and x is 0, θ = π/2.  \\n  \\n-   If y is negative and x is 0, θ = -π/2.  \\n  \\n-   If y is 0 and x is 0, θ = 0.  \\n  \\n If <code>x</code> or <code>y</code> is <xref href=\\\"System.Double.NaN\\\"></xref>, or if <code>x</code> and <code>y</code> are either <xref href=\\\"System.Double.PositiveInfinity\\\"></xref> or <xref href=\\\"System.Double.NegativeInfinity\\\"></xref>, the method returns <xref href=\\\"System.Double.NaN\\\"></xref>.\"\n  overload: System.Math.Atan2*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.BigMul(System.Int32,System.Int32)\n  commentId: M:System.Math.BigMul(System.Int32,System.Int32)\n  id: BigMul(System.Int32,System.Int32)\n  parent: System.Math\n  langs:\n  - csharp\n  name: BigMul(Int32, Int32)\n  nameWithType: Math.BigMul(Int32, Int32)\n  fullName: Math.BigMul(Int32, Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System\n  summary: Produces the full product of two 32-bit numbers.\n  remarks: ''\n  example:\n  - \"The following example demonstrates the use of the <xref:System.Math.BigMul%2A> method to calculate the product of two integer values.  \\n  \\n [!code-cpp[math.bigmul#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.bigmul/CPP/bigmul.cpp#1)]\\n [!code-csharp[math.bigmul#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.bigmul/CS/bigmul.cs#1)]\\n [!code-vb[math.bigmul#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.bigmul/VB/bigmul.vb#1)]\"\n  syntax:\n    content: public static long BigMul (int a, int b);\n    parameters:\n    - id: a\n      type: System.Int32\n      description: The first number to multiply.\n    - id: b\n      type: System.Int32\n      description: The second number to multiply.\n    return:\n      type: System.Int64\n      description: The number containing the product of the specified numbers.\n  overload: System.Math.BigMul*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Ceiling(System.Decimal)\n  commentId: M:System.Math.Ceiling(System.Decimal)\n  id: Ceiling(System.Decimal)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Ceiling(Decimal)\n  nameWithType: Math.Ceiling(Decimal)\n  fullName: Math.Ceiling(Decimal)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the smallest integral value that is greater than or equal to the specified decimal number.\n  remarks: The behavior of this method follows IEEE Standard 754, section 4. This kind of rounding is sometimes called rounding toward positive infinity. In other words, if `d` is positive, the presence of any fractional component causes `d` to be rounded to the next highest integer. If `d` is negative, the rounding operation causes any fractional component of `d` to be discarded. The operation of this method differs from the <xref:System.Math.Floor%28System.Decimal%29> method, which supports rounding toward negative infinity.\n  example:\n  - \"The following example illustrates the <xref:System.Math.Ceiling%28System.Decimal%29?displayProperty=fullName> method and contrasts it with the <xref:System.Math.Floor%28System.Decimal%29> method.  \\n  \\n [!code-csharp[System.Math.Ceiling#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Ceiling/cs/Ceiling1.cs#1)]\\n [!code-vb[System.Math.Ceiling#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Ceiling/vb/Ceiling1.vb#1)]\"\n  syntax:\n    content: public static decimal Ceiling (decimal d);\n    parameters:\n    - id: d\n      type: System.Decimal\n      description: A decimal number.\n    return:\n      type: System.Decimal\n      description: The smallest integral value that is greater than or equal to <code>d</code>. Note that this method returns a <xref href=\"System.Decimal\"></xref> instead of an integral type.\n  overload: System.Math.Ceiling*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Ceiling(System.Double)\n  commentId: M:System.Math.Ceiling(System.Double)\n  id: Ceiling(System.Double)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Ceiling(Double)\n  nameWithType: Math.Ceiling(Double)\n  fullName: Math.Ceiling(Double)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the smallest integral value that is greater than or equal to the specified double-precision floating-point number.\n  remarks: The behavior of this method follows IEEE Standard 754, section 4. This kind of rounding is sometimes called rounding toward positive infinity. In other words, if `a` is positive, the presence of any fractional component causes `a` to be rounded to the next highest integer. If `a` is negative, the rounding operation causes any fractional component of `a` to be discarded. The operation of this method differs from the <xref:System.Math.Floor%28System.Double%29> method, which supports rounding toward negative infinity.\n  example:\n  - \"The following example illustrates the <xref:System.Math.Ceiling%28System.Double%29?displayProperty=fullName> method and contrasts it with the <xref:System.Math.Floor%28System.Double%29> method.  \\n  \\n [!code-csharp[System.Math.Ceiling#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Ceiling/cs/Ceiling1.cs#2)]\\n [!code-vb[System.Math.Ceiling#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Ceiling/vb/Ceiling1.vb#2)]\"\n  syntax:\n    content: public static double Ceiling (double a);\n    parameters:\n    - id: a\n      type: System.Double\n      description: A double-precision floating-point number.\n    return:\n      type: System.Double\n      description: The smallest integral value that is greater than or equal to <code>a</code>. If <code>a</code> is equal to <xref href=\"System.Double.NaN\"></xref>, <xref href=\"System.Double.NegativeInfinity\"></xref>, or <xref href=\"System.Double.PositiveInfinity\"></xref>, that value is returned. Note that this method returns a <xref href=\"System.Double\"></xref> instead of an integral type.\n  overload: System.Math.Ceiling*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Clamp(System.UInt64,System.UInt64,System.UInt64)\n  commentId: M:System.Math.Clamp(System.UInt64,System.UInt64,System.UInt64)\n  id: Clamp(System.UInt64,System.UInt64,System.UInt64)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Clamp(UInt64, UInt64, UInt64)\n  nameWithType: Math.Clamp(UInt64, UInt64, UInt64)\n  fullName: Math.Clamp(UInt64, UInt64, UInt64)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static ulong Clamp (ulong value, ulong min, ulong max);\n    parameters:\n    - id: value\n      type: System.UInt64\n      description: ''\n    - id: min\n      type: System.UInt64\n      description: ''\n    - id: max\n      type: System.UInt64\n      description: ''\n    return:\n      type: System.UInt64\n      description: ''\n  overload: System.Math.Clamp*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n- uid: System.Math.Clamp(System.UInt32,System.UInt32,System.UInt32)\n  commentId: M:System.Math.Clamp(System.UInt32,System.UInt32,System.UInt32)\n  id: Clamp(System.UInt32,System.UInt32,System.UInt32)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Clamp(UInt32, UInt32, UInt32)\n  nameWithType: Math.Clamp(UInt32, UInt32, UInt32)\n  fullName: Math.Clamp(UInt32, UInt32, UInt32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static uint Clamp (uint value, uint min, uint max);\n    parameters:\n    - id: value\n      type: System.UInt32\n      description: ''\n    - id: min\n      type: System.UInt32\n      description: ''\n    - id: max\n      type: System.UInt32\n      description: ''\n    return:\n      type: System.UInt32\n      description: ''\n  overload: System.Math.Clamp*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n- uid: System.Math.Clamp(System.UInt16,System.UInt16,System.UInt16)\n  commentId: M:System.Math.Clamp(System.UInt16,System.UInt16,System.UInt16)\n  id: Clamp(System.UInt16,System.UInt16,System.UInt16)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Clamp(UInt16, UInt16, UInt16)\n  nameWithType: Math.Clamp(UInt16, UInt16, UInt16)\n  fullName: Math.Clamp(UInt16, UInt16, UInt16)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static ushort Clamp (ushort value, ushort min, ushort max);\n    parameters:\n    - id: value\n      type: System.UInt16\n      description: ''\n    - id: min\n      type: System.UInt16\n      description: ''\n    - id: max\n      type: System.UInt16\n      description: ''\n    return:\n      type: System.UInt16\n      description: ''\n  overload: System.Math.Clamp*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n- uid: System.Math.Clamp(System.Single,System.Single,System.Single)\n  commentId: M:System.Math.Clamp(System.Single,System.Single,System.Single)\n  id: Clamp(System.Single,System.Single,System.Single)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Clamp(Single, Single, Single)\n  nameWithType: Math.Clamp(Single, Single, Single)\n  fullName: Math.Clamp(Single, Single, Single)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  syntax:\n    content: public static float Clamp (float value, float min, float max);\n    parameters:\n    - id: value\n      type: System.Single\n      description: ''\n    - id: min\n      type: System.Single\n      description: ''\n    - id: max\n      type: System.Single\n      description: ''\n    return:\n      type: System.Single\n      description: ''\n  overload: System.Math.Clamp*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n- uid: System.Math.Clamp(System.Int64,System.Int64,System.Int64)\n  commentId: M:System.Math.Clamp(System.Int64,System.Int64,System.Int64)\n  id: Clamp(System.Int64,System.Int64,System.Int64)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Clamp(Int64, Int64, Int64)\n  nameWithType: Math.Clamp(Int64, Int64, Int64)\n  fullName: Math.Clamp(Int64, Int64, Int64)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  syntax:\n    content: public static long Clamp (long value, long min, long max);\n    parameters:\n    - id: value\n      type: System.Int64\n      description: ''\n    - id: min\n      type: System.Int64\n      description: ''\n    - id: max\n      type: System.Int64\n      description: ''\n    return:\n      type: System.Int64\n      description: ''\n  overload: System.Math.Clamp*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n- uid: System.Math.Clamp(System.SByte,System.SByte,System.SByte)\n  commentId: M:System.Math.Clamp(System.SByte,System.SByte,System.SByte)\n  id: Clamp(System.SByte,System.SByte,System.SByte)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Clamp(SByte, SByte, SByte)\n  nameWithType: Math.Clamp(SByte, SByte, SByte)\n  fullName: Math.Clamp(SByte, SByte, SByte)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static sbyte Clamp (sbyte value, sbyte min, sbyte max);\n    parameters:\n    - id: value\n      type: System.SByte\n      description: ''\n    - id: min\n      type: System.SByte\n      description: ''\n    - id: max\n      type: System.SByte\n      description: ''\n    return:\n      type: System.SByte\n      description: ''\n  overload: System.Math.Clamp*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n- uid: System.Math.Clamp(System.Int16,System.Int16,System.Int16)\n  commentId: M:System.Math.Clamp(System.Int16,System.Int16,System.Int16)\n  id: Clamp(System.Int16,System.Int16,System.Int16)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Clamp(Int16, Int16, Int16)\n  nameWithType: Math.Clamp(Int16, Int16, Int16)\n  fullName: Math.Clamp(Int16, Int16, Int16)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  syntax:\n    content: public static short Clamp (short value, short min, short max);\n    parameters:\n    - id: value\n      type: System.Int16\n      description: ''\n    - id: min\n      type: System.Int16\n      description: ''\n    - id: max\n      type: System.Int16\n      description: ''\n    return:\n      type: System.Int16\n      description: ''\n  overload: System.Math.Clamp*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n- uid: System.Math.Clamp(System.Double,System.Double,System.Double)\n  commentId: M:System.Math.Clamp(System.Double,System.Double,System.Double)\n  id: Clamp(System.Double,System.Double,System.Double)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Clamp(Double, Double, Double)\n  nameWithType: Math.Clamp(Double, Double, Double)\n  fullName: Math.Clamp(Double, Double, Double)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  syntax:\n    content: public static double Clamp (double value, double min, double max);\n    parameters:\n    - id: value\n      type: System.Double\n      description: ''\n    - id: min\n      type: System.Double\n      description: ''\n    - id: max\n      type: System.Double\n      description: ''\n    return:\n      type: System.Double\n      description: ''\n  overload: System.Math.Clamp*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n- uid: System.Math.Clamp(System.Decimal,System.Decimal,System.Decimal)\n  commentId: M:System.Math.Clamp(System.Decimal,System.Decimal,System.Decimal)\n  id: Clamp(System.Decimal,System.Decimal,System.Decimal)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Clamp(Decimal, Decimal, Decimal)\n  nameWithType: Math.Clamp(Decimal, Decimal, Decimal)\n  fullName: Math.Clamp(Decimal, Decimal, Decimal)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  syntax:\n    content: public static decimal Clamp (decimal value, decimal min, decimal max);\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: ''\n    - id: min\n      type: System.Decimal\n      description: ''\n    - id: max\n      type: System.Decimal\n      description: ''\n    return:\n      type: System.Decimal\n      description: ''\n  overload: System.Math.Clamp*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n- uid: System.Math.Clamp(System.Byte,System.Byte,System.Byte)\n  commentId: M:System.Math.Clamp(System.Byte,System.Byte,System.Byte)\n  id: Clamp(System.Byte,System.Byte,System.Byte)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Clamp(Byte, Byte, Byte)\n  nameWithType: Math.Clamp(Byte, Byte, Byte)\n  fullName: Math.Clamp(Byte, Byte, Byte)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  syntax:\n    content: public static byte Clamp (byte value, byte min, byte max);\n    parameters:\n    - id: value\n      type: System.Byte\n      description: ''\n    - id: min\n      type: System.Byte\n      description: ''\n    - id: max\n      type: System.Byte\n      description: ''\n    return:\n      type: System.Byte\n      description: ''\n  overload: System.Math.Clamp*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n- uid: System.Math.Clamp(System.Int32,System.Int32,System.Int32)\n  commentId: M:System.Math.Clamp(System.Int32,System.Int32,System.Int32)\n  id: Clamp(System.Int32,System.Int32,System.Int32)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Clamp(Int32, Int32, Int32)\n  nameWithType: Math.Clamp(Int32, Int32, Int32)\n  fullName: Math.Clamp(Int32, Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  syntax:\n    content: public static int Clamp (int value, int min, int max);\n    parameters:\n    - id: value\n      type: System.Int32\n      description: ''\n    - id: min\n      type: System.Int32\n      description: ''\n    - id: max\n      type: System.Int32\n      description: ''\n    return:\n      type: System.Int32\n      description: ''\n  overload: System.Math.Clamp*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n- uid: System.Math.Cos(System.Double)\n  commentId: M:System.Math.Cos(System.Double)\n  id: Cos(System.Double)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Cos(Double)\n  nameWithType: Math.Cos(Double)\n  fullName: Math.Cos(Double)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the cosine of the specified angle.\n  remarks: \"The angle, `d`, must be in radians. Multiply by <xref:System.Math.PI?displayProperty=fullName>/180 to convert degrees to radians.  \\n  \\n Acceptable values of `d` range from approximately -9223372036854775295 to approximately 9223372036854775295. For values outside this range, the <xref:System.Math.Cos%2A> method returns `d` unchanged rather than throwing an exception.\"\n  example:\n  - \"The following example uses <xref:System.Math.Cos%2A> to evaluate certain trigonometric identities for selected angles.  \\n  \\n [!code-cpp[System.Math.SinCos#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Math.SinCos/CPP/sincos.cpp#1)]\\n [!code-csharp[System.Math.SinCos#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.SinCos/CS/sincos.cs#1)]\\n [!code-vb[System.Math.SinCos#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.SinCos/VB/sincos.vb#1)]\"\n  syntax:\n    content: public static double Cos (double d);\n    parameters:\n    - id: d\n      type: System.Double\n      description: An angle, measured in radians.\n    return:\n      type: System.Double\n      description: The cosine of <code>d</code>. If <code>d</code> is equal to <xref href=\"System.Double.NaN\"></xref>, <xref href=\"System.Double.NegativeInfinity\"></xref>, or <xref href=\"System.Double.PositiveInfinity\"></xref>, this method returns <xref href=\"System.Double.NaN\"></xref>.\n  overload: System.Math.Cos*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Cosh(System.Double)\n  commentId: M:System.Math.Cosh(System.Double)\n  id: Cosh(System.Double)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Cosh(Double)\n  nameWithType: Math.Cosh(Double)\n  fullName: Math.Cosh(Double)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the hyperbolic cosine of the specified angle.\n  remarks: The angle, `value`, must be in radians. Multiply by <xref:System.Math.PI?displayProperty=fullName>/180 to convert degrees to radians.\n  example:\n  - \"The following example uses <xref:System.Math.Cosh%2A> to evaluate certain hyperbolic identities for selected values.  \\n  \\n [!code-cpp[System.Math.SinhCosh#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Math.SinhCosh/CPP/sinhcosh.cpp#1)]\\n [!code-csharp[System.Math.SinhCosh#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.SinhCosh/CS/sinhcosh.cs#1)]\\n [!code-vb[System.Math.SinhCosh#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.SinhCosh/VB/sinhcosh.vb#1)]\"\n  syntax:\n    content: public static double Cosh (double value);\n    parameters:\n    - id: value\n      type: System.Double\n      description: An angle, measured in radians.\n    return:\n      type: System.Double\n      description: The hyperbolic cosine of <code>value</code>. If <code>value</code> is equal to <xref href=\"System.Double.NegativeInfinity\"></xref> or <xref href=\"System.Double.PositiveInfinity\"></xref>, <xref href=\"System.Double.PositiveInfinity\"></xref> is returned. If <code>value</code> is equal to <xref href=\"System.Double.NaN\"></xref>, <xref href=\"System.Double.NaN\"></xref> is returned.\n  overload: System.Math.Cosh*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.DivRem(System.Int64,System.Int64,System.Int64@)\n  commentId: M:System.Math.DivRem(System.Int64,System.Int64,System.Int64@)\n  id: DivRem(System.Int64,System.Int64,System.Int64@)\n  parent: System.Math\n  langs:\n  - csharp\n  name: DivRem(Int64, Int64, Int64)\n  nameWithType: Math.DivRem(Int64, Int64, Int64)\n  fullName: Math.DivRem(Int64, Int64, Int64)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System\n  summary: Calculates the quotient of two 64-bit signed integers and also returns the remainder in an output parameter.\n  remarks: The remainder is calculated by using the modulus operation.\n  example:\n  - \"The following example demonstrates the <xref:System.Math.DivRem%28System.Int64%2CSystem.Int64%2CSystem.Int64%40%29> method.  \\n  \\n [!code-csharp[System.Math.DivRem#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.divrem/cs/divrem2.cs#2)]\\n [!code-vb[System.Math.DivRem#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.divrem/vb/divrem2.vb#2)]\"\n  syntax:\n    content: public static long DivRem (long a, long b, out long result);\n    parameters:\n    - id: a\n      type: System.Int64\n      description: The dividend.\n    - id: b\n      type: System.Int64\n      description: The divisor.\n    - id: result\n      type: System.Int64\n      description: The remainder.\n    return:\n      type: System.Int64\n      description: The quotient of the specified numbers.\n  overload: System.Math.DivRem*\n  exceptions:\n  - type: System.DivideByZeroException\n    commentId: T:System.DivideByZeroException\n    description: <code>b</code> is zero.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.DivRem(System.Int32,System.Int32,System.Int32@)\n  commentId: M:System.Math.DivRem(System.Int32,System.Int32,System.Int32@)\n  id: DivRem(System.Int32,System.Int32,System.Int32@)\n  parent: System.Math\n  langs:\n  - csharp\n  name: DivRem(Int32, Int32, Int32)\n  nameWithType: Math.DivRem(Int32, Int32, Int32)\n  fullName: Math.DivRem(Int32, Int32, Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System\n  summary: Calculates the quotient of two 32-bit signed integers and also returns the remainder in an output parameter.\n  remarks: The remainder is calculated by using the modulus operation.\n  example:\n  - \"The following example demonstrates the <xref:System.Math.DivRem%28System.Int32%2CSystem.Int32%2CSystem.Int32%40%29> method.  \\n  \\n [!code-csharp[System.Math.DivRem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.divrem/cs/divrem1.cs#1)]\\n [!code-vb[System.Math.DivRem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.divrem/vb/divrem1.vb#1)]\"\n  syntax:\n    content: public static int DivRem (int a, int b, out int result);\n    parameters:\n    - id: a\n      type: System.Int32\n      description: The dividend.\n    - id: b\n      type: System.Int32\n      description: The divisor.\n    - id: result\n      type: System.Int32\n      description: The remainder.\n    return:\n      type: System.Int32\n      description: The quotient of the specified numbers.\n  overload: System.Math.DivRem*\n  exceptions:\n  - type: System.DivideByZeroException\n    commentId: T:System.DivideByZeroException\n    description: <code>b</code> is zero.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.E\n  commentId: F:System.Math.E\n  id: E\n  parent: System.Math\n  langs:\n  - csharp\n  name: E\n  nameWithType: Math.E\n  fullName: Math.E\n  type: Field\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Represents the natural logarithmic base, specified by the constant, `e`.\n  remarks: The value of this field is 2.7182818284590452354.\n  example:\n  - \"The following example compares <xref:System.Math.E> with the value calculated from a power series.  \\n  \\n [!code-cpp[System.Math.E#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Math.E/CPP/efield.cpp#1)]\\n [!code-csharp[System.Math.E#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.E/CS/efield.cs#1)]\\n [!code-vb[System.Math.E#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.E/VB/efield.vb#1)]\"\n  syntax:\n    content: public const double E = 2.71828182845905;\n    return:\n      type: System.Double\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Exp(System.Double)\n  commentId: M:System.Math.Exp(System.Double)\n  id: Exp(System.Double)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Exp(Double)\n  nameWithType: Math.Exp(Double)\n  fullName: Math.Exp(Double)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns `e` raised to the specified power.\n  remarks: \"`e` is a mathematical constant whose value is approximately 2.71828.  \\n  \\n Use the <xref:System.Math.Pow%2A> method to calculate powers of other bases.  \\n  \\n <xref:System.Math.Exp%2A> is the inverse of <xref:System.Math.Log%2A>.\"\n  example:\n  - \"The following example uses <xref:System.Math.Exp%2A> to evaluate certain exponential and logarithmic identities for selected values.  \\n  \\n [!code-cpp[System.Math.Exp#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Math.Exp/CPP/exp.cpp#1)]\\n [!code-csharp[System.Math.Exp#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Exp/CS/exp.cs#1)]\\n [!code-vb[System.Math.Exp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Exp/VB/exp.vb#1)]\"\n  syntax:\n    content: public static double Exp (double d);\n    parameters:\n    - id: d\n      type: System.Double\n      description: A number specifying a power.\n    return:\n      type: System.Double\n      description: The number `e` raised to the power <code>d</code>. If <code>d</code> equals <xref href=\"System.Double.NaN\"></xref> or <xref href=\"System.Double.PositiveInfinity\"></xref>, that value is returned. If <code>d</code> equals <xref href=\"System.Double.NegativeInfinity\"></xref>, 0 is returned.\n  overload: System.Math.Exp*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Floor(System.Decimal)\n  commentId: M:System.Math.Floor(System.Decimal)\n  id: Floor(System.Decimal)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Floor(Decimal)\n  nameWithType: Math.Floor(Decimal)\n  fullName: Math.Floor(Decimal)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the largest integer less than or equal to the specified decimal number.\n  remarks: The behavior of this method follows IEEE Standard 754, section 4. This kind of rounding is sometimes called rounding toward negative infinity. In other words, if `d` is positive, any fractional component is truncated. If `d` is negative, the presence of any fractional component causes it to be rounded to the smaller integer. The operation of this method differs from the <xref:System.Math.Ceiling%2A> method, which supports rounding toward positive infinity.\n  example:\n  - \"The following example illustrates the <xref:System.Math.Floor%28System.Decimal%29?displayProperty=fullName> method and contrasts it with the <xref:System.Math.Ceiling%28System.Decimal%29> method.  \\n  \\n [!code-csharp[System.Math.Ceiling#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Ceiling/cs/Ceiling1.cs#1)]\\n [!code-vb[System.Math.Ceiling#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Ceiling/vb/Ceiling1.vb#1)]\"\n  syntax:\n    content: public static decimal Floor (decimal d);\n    parameters:\n    - id: d\n      type: System.Decimal\n      description: A decimal number.\n    return:\n      type: System.Decimal\n      description: The largest integer less than or equal to <code>d</code>.  Note that the method returns an integral value of type <xref href=\"System.Math\"></xref>.\n  overload: System.Math.Floor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Floor(System.Double)\n  commentId: M:System.Math.Floor(System.Double)\n  id: Floor(System.Double)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Floor(Double)\n  nameWithType: Math.Floor(Double)\n  fullName: Math.Floor(Double)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the largest integer less than or equal to the specified double-precision floating-point number.\n  remarks: The behavior of this method follows IEEE Standard 754, section 4. This kind of rounding is sometimes called rounding toward negative infinity. In other words, if `d` is positive, any fractional component is truncated. If `d` is negative, the presence of any fractional component causes it to be rounded to the smaller integer. The operation of this method differs from the <xref:System.Math.Ceiling%2A> method, which supports rounding toward positive infinity.\n  example:\n  - \"The following example illustrates the <xref:System.Math.Floor%28System.Double%29?displayProperty=fullName> method and contrasts it with the <xref:System.Math.Ceiling%28System.Double%29> method.  \\n  \\n [!code-csharp[System.Math.Ceiling#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Ceiling/cs/Ceiling1.cs#2)]\\n [!code-vb[System.Math.Ceiling#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Ceiling/vb/Ceiling1.vb#2)]\"\n  syntax:\n    content: public static double Floor (double d);\n    parameters:\n    - id: d\n      type: System.Double\n      description: A double-precision floating-point number.\n    return:\n      type: System.Double\n      description: The largest integer less than or equal to <code>d</code>. If <code>d</code> is equal to <xref href=\"System.Double.NaN\"></xref>, <xref href=\"System.Double.NegativeInfinity\"></xref>, or <xref href=\"System.Double.PositiveInfinity\"></xref>, that value is returned.\n  overload: System.Math.Floor*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.IEEERemainder(System.Double,System.Double)\n  commentId: M:System.Math.IEEERemainder(System.Double,System.Double)\n  id: IEEERemainder(System.Double,System.Double)\n  parent: System.Math\n  langs:\n  - csharp\n  name: IEEERemainder(Double, Double)\n  nameWithType: Math.IEEERemainder(Double, Double)\n  fullName: Math.IEEERemainder(Double, Double)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the remainder resulting from the division of a specified number by another specified number.\n  remarks: \"This operation complies with the remainder operation defined in Section 5.1 of ANSI/IEEE Std 754-1985; IEEE Standard for Binary Floating-Point Arithmetic; Institute of Electrical and Electronics Engineers, Inc; 1985.  \\n  \\n The<xref:System.Math.IEEERemainder%2A> method is not the same as the modulus operator. Although both return the remainder after division, the formulas they use are different. The formula for the <xref:System.Math.IEEERemainder%2A> method is:  \\n  \\n```  \\nIEEERemainder = dividend - (divisor * Math.Round(dividend / divisor))  \\n```  \\n  \\n In contrast, the formula for the modulus operator is:  \\n  \\n```  \\nModulus = (Math.Abs(dividend) - (Math.Abs(divisor) *   \\n          (Math.Floor(Math.Abs(dividend) / Math.Abs(divisor))))) *   \\n          Math.Sign(dividend)  \\n```\"\n  example:\n  - \"The following example contrasts the remainder returned by the <xref:System.Math.IEEERemainder%2A> method with the remainder returned by the modulus division operator.  \\n  \\n [!code-csharp[System.Math.IEEERemainder#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.ieeeremainder/cs/ieeeremainder1.cs#1)]\\n [!code-vb[System.Math.IEEERemainder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.ieeeremainder/vb/ieeeremainder1.vb#1)]\"\n  syntax:\n    content: public static double IEEERemainder (double x, double y);\n    parameters:\n    - id: x\n      type: System.Double\n      description: A dividend.\n    - id: y\n      type: System.Double\n      description: A divisor.\n    return:\n      type: System.Double\n      description: \"A number equal to <code>x</code> - (<code>y</code> Q), where Q is the quotient of <code>x</code> / <code>y</code> rounded to the nearest integer (if <code>x</code> / <code>y</code> falls halfway between two integers, the even integer is returned).  \\n  \\n If <code>x</code> - (<code>y</code> Q) is zero, the value +0 is returned if <code>x</code> is positive, or -0 if <code>x</code> is negative.  \\n  \\n If <code>y</code> = 0, <xref href=\\\"System.Double.NaN\\\"></xref> is returned.\"\n  overload: System.Math.IEEERemainder*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Log(System.Double)\n  commentId: M:System.Math.Log(System.Double)\n  id: Log(System.Double)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Log(Double)\n  nameWithType: Math.Log(Double)\n  fullName: Math.Log(Double)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the natural (base `e`) logarithm of a specified number.\n  remarks: Parameter `d` is specified as a base 10 number.\n  example:\n  - \"The following example illustrates the <xref:System.Math.Log%2A> method.  \\n  \\n [!code-csharp[System.Math.Log_Overloads#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Log_Overloads/CS/log1.cs#2)]\\n [!code-vb[System.Math.Log_Overloads#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Log_Overloads/VB/log1.vb#2)]\"\n  syntax:\n    content: public static double Log (double d);\n    parameters:\n    - id: d\n      type: System.Double\n      description: The number whose logarithm is to be found.\n    return:\n      type: System.Double\n      description: \"One of the values in the following table.  \\n  \\n <table><thead><tr><th><code>d</code> parameter  \\n  \\n </th><th> Return value  \\n  \\n </th></tr></thead><tbody><tr><td> Positive  \\n  \\n </td><td> The natural logarithm of <code>d</code>; that is, ln <code>d</code>, or log e <code>d</code></td></tr><tr><td> Zero  \\n  \\n </td><td><xref href=\\\"System.Double.NegativeInfinity\\\"></xref></td></tr><tr><td> Negative  \\n  \\n </td><td><xref href=\\\"System.Double.NaN\\\"></xref></td></tr><tr><td> Equal to <xref href=\\\"System.Double.NaN\\\"></xref></td><td><xref href=\\\"System.Double.NaN\\\"></xref></td></tr><tr><td> Equal to <xref href=\\\"System.Double.PositiveInfinity\\\"></xref></td><td><xref href=\\\"System.Double.PositiveInfinity\\\"></xref></td></tr></tbody></table>\"\n  overload: System.Math.Log*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Log(System.Double,System.Double)\n  commentId: M:System.Math.Log(System.Double,System.Double)\n  id: Log(System.Double,System.Double)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Log(Double, Double)\n  nameWithType: Math.Log(Double, Double)\n  fullName: Math.Log(Double, Double)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the logarithm of a specified number in a specified base.\n  remarks: ''\n  example:\n  - \"The following example uses <xref:System.Math.Log%2A> to evaluate certain logarithmic identities for selected values.  \\n  \\n [!code-cpp[System.Math.Log_Overloads#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Math.Log_Overloads/CPP/loggen.cpp#1)]\\n [!code-csharp[System.Math.Log_Overloads#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Log_Overloads/CS/loggen.cs#1)]\\n [!code-vb[System.Math.Log_Overloads#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Log_Overloads/VB/loggen.vb#1)]\"\n  syntax:\n    content: public static double Log (double a, double newBase);\n    parameters:\n    - id: a\n      type: System.Double\n      description: The number whose logarithm is to be found.\n    - id: newBase\n      type: System.Double\n      description: The base of the logarithm.\n    return:\n      type: System.Double\n      description: \"One of the values in the following table. (+Infinity denotes <xref href=\\\"System.Double.PositiveInfinity\\\"></xref>, -Infinity denotes <xref href=\\\"System.Double.NegativeInfinity\\\"></xref>, and NaN denotes <xref href=\\\"System.Double.NaN\\\"></xref>.)  \\n  \\n <table><thead><tr><th><code>a</code></th><th><code>newBase</code> Return value  \\n  \\n </th></tr></thead><tbody><tr><td><code>a</code>> 0  \\n  \\n </td><td> (0 <<code>newBase</code>< 1) -or-(<code>newBase</code>> 1)  \\n  \\n  lognewBase(a)  \\n  \\n </td></tr><tr><td><code>a</code>< 0  \\n  \\n </td><td> (any value)  \\n  \\n  NaN  \\n  \\n </td></tr><tr><td> (any value)  \\n  \\n </td><td><code>newBase</code>< 0  \\n  \\n  NaN  \\n  \\n </td></tr><tr><td><code>a</code> != 1  \\n  \\n </td><td><code>newBase</code> = 0  \\n  \\n  NaN  \\n  \\n </td></tr><tr><td><code>a</code> != 1  \\n  \\n </td><td><code>newBase</code> = +Infinity  \\n  \\n  NaN  \\n  \\n </td></tr><tr><td><code>a</code> = NaN  \\n  \\n </td><td> (any value)  \\n  \\n  NaN  \\n  \\n </td></tr><tr><td> (any value)  \\n  \\n </td><td><code>newBase</code> = NaN  \\n  \\n  NaN  \\n  \\n </td></tr><tr><td> (any value)  \\n  \\n </td><td><code>newBase</code> = 1  \\n  \\n  NaN  \\n  \\n </td></tr><tr><td><code>a</code> = 0  \\n  \\n </td><td> 0 <<code>newBase</code>< 1  \\n  \\n  +Infinity  \\n  \\n </td></tr><tr><td><code>a</code> = 0  \\n  \\n </td><td><code>newBase</code>> 1  \\n  \\n  -Infinity  \\n  \\n </td></tr><tr><td><code>a</code> =  +Infinity  \\n  \\n </td><td> 0 <<code>newBase</code>< 1  \\n  \\n  -Infinity  \\n  \\n </td></tr><tr><td><code>a</code> =  +Infinity  \\n  \\n </td><td><code>newBase</code>> 1  \\n  \\n  +Infinity  \\n  \\n </td></tr><tr><td><code>a</code> = 1  \\n  \\n </td><td><code>newBase</code> = 0  \\n  \\n  0  \\n  \\n </td></tr><tr><td><code>a</code> = 1  \\n  \\n </td><td><code>newBase</code> = +Infinity  \\n  \\n  0  \\n  \\n </td></tr></tbody></table>\"\n  overload: System.Math.Log*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Log10(System.Double)\n  commentId: M:System.Math.Log10(System.Double)\n  id: Log10(System.Double)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Log10(Double)\n  nameWithType: Math.Log10(Double)\n  fullName: Math.Log10(Double)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the base 10 logarithm of a specified number.\n  remarks: Parameter `d` is specified as a base 10 number.\n  example:\n  - \"The following example uses the <xref:System.Math.Log10%2A> method to return the base 10 logarithm for selected values.  \\n  \\n [!code-csharp[System.Math.Log10#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Log10/CS/log10.cs#1)]\\n [!code-vb[System.Math.Log10#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Log10/VB/log10.vb#1)]\"\n  syntax:\n    content: public static double Log10 (double d);\n    parameters:\n    - id: d\n      type: System.Double\n      description: A number whose logarithm is to be found.\n    return:\n      type: System.Double\n      description: \"One of the values in the following table.  \\n  \\n <table><thead><tr><th><code>d</code> parameter  \\n  \\n </th><th> Return value  \\n  \\n </th></tr></thead><tbody><tr><td> Positive  \\n  \\n </td><td> The base 10 log of <code>d</code>; that is, log 10<code>d</code>.  \\n  \\n </td></tr><tr><td> Zero  \\n  \\n </td><td><xref href=\\\"System.Double.NegativeInfinity\\\"></xref></td></tr><tr><td> Negative  \\n  \\n </td><td><xref href=\\\"System.Double.NaN\\\"></xref></td></tr><tr><td> Equal to <xref href=\\\"System.Double.NaN\\\"></xref></td><td><xref href=\\\"System.Double.NaN\\\"></xref></td></tr><tr><td> Equal to <xref href=\\\"System.Double.PositiveInfinity\\\"></xref></td><td><xref href=\\\"System.Double.PositiveInfinity\\\"></xref></td></tr></tbody></table>\"\n  overload: System.Math.Log10*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Max(System.UInt16,System.UInt16)\n  commentId: M:System.Math.Max(System.UInt16,System.UInt16)\n  id: Max(System.UInt16,System.UInt16)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Max(UInt16, UInt16)\n  nameWithType: Math.Max(UInt16, UInt16)\n  fullName: Math.Max(UInt16, UInt16)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the larger of two 16-bit unsigned integers.\n  remarks: ''\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.  \\n  \\n [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]\\n [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]\\n [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static ushort Max (ushort val1, ushort val2);\n    parameters:\n    - id: val1\n      type: System.UInt16\n      description: The first of two 16-bit unsigned integers to compare.\n    - id: val2\n      type: System.UInt16\n      description: The second of two 16-bit unsigned integers to compare.\n    return:\n      type: System.UInt16\n      description: Parameter <code>val1</code> or <code>val2</code>, whichever is larger.\n  overload: System.Math.Max*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Max(System.Single,System.Single)\n  commentId: M:System.Math.Max(System.Single,System.Single)\n  id: Max(System.Single,System.Single)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Max(Single, Single)\n  nameWithType: Math.Max(Single, Single)\n  fullName: Math.Max(Single, Single)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the larger of two single-precision floating-point numbers.\n  remarks: ''\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.  \\n  \\n [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]\\n [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]\\n [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]\"\n  syntax:\n    content: public static float Max (float val1, float val2);\n    parameters:\n    - id: val1\n      type: System.Single\n      description: The first of two single-precision floating-point numbers to compare.\n    - id: val2\n      type: System.Single\n      description: The second of two single-precision floating-point numbers to compare.\n    return:\n      type: System.Single\n      description: Parameter <code>val1</code> or <code>val2</code>, whichever is larger. If <code>val1</code>, or <code>val2</code>, or both <code>val1</code> and <code>val2</code> are equal to <xref href=\"System.Single.NaN\"></xref>, <xref href=\"System.Single.NaN\"></xref> is returned.\n  overload: System.Math.Max*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Max(System.UInt64,System.UInt64)\n  commentId: M:System.Math.Max(System.UInt64,System.UInt64)\n  id: Max(System.UInt64,System.UInt64)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Max(UInt64, UInt64)\n  nameWithType: Math.Max(UInt64, UInt64)\n  fullName: Math.Max(UInt64, UInt64)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the larger of two 64-bit unsigned integers.\n  remarks: ''\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.  \\n  \\n [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]\\n [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]\\n [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static ulong Max (ulong val1, ulong val2);\n    parameters:\n    - id: val1\n      type: System.UInt64\n      description: The first of two 64-bit unsigned integers to compare.\n    - id: val2\n      type: System.UInt64\n      description: The second of two 64-bit unsigned integers to compare.\n    return:\n      type: System.UInt64\n      description: Parameter <code>val1</code> or <code>val2</code>, whichever is larger.\n  overload: System.Math.Max*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Max(System.UInt32,System.UInt32)\n  commentId: M:System.Math.Max(System.UInt32,System.UInt32)\n  id: Max(System.UInt32,System.UInt32)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Max(UInt32, UInt32)\n  nameWithType: Math.Max(UInt32, UInt32)\n  fullName: Math.Max(UInt32, UInt32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the larger of two 32-bit unsigned integers.\n  remarks: ''\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.  \\n  \\n [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]\\n [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]\\n [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static uint Max (uint val1, uint val2);\n    parameters:\n    - id: val1\n      type: System.UInt32\n      description: The first of two 32-bit unsigned integers to compare.\n    - id: val2\n      type: System.UInt32\n      description: The second of two 32-bit unsigned integers to compare.\n    return:\n      type: System.UInt32\n      description: Parameter <code>val1</code> or <code>val2</code>, whichever is larger.\n  overload: System.Math.Max*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Max(System.SByte,System.SByte)\n  commentId: M:System.Math.Max(System.SByte,System.SByte)\n  id: Max(System.SByte,System.SByte)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Max(SByte, SByte)\n  nameWithType: Math.Max(SByte, SByte)\n  fullName: Math.Max(SByte, SByte)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the larger of two 8-bit signed integers.\n  remarks: ''\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.  \\n  \\n [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]\\n [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]\\n [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static sbyte Max (sbyte val1, sbyte val2);\n    parameters:\n    - id: val1\n      type: System.SByte\n      description: The first of two 8-bit signed integers to compare.\n    - id: val2\n      type: System.SByte\n      description: The second of two 8-bit signed integers to compare.\n    return:\n      type: System.SByte\n      description: Parameter <code>val1</code> or <code>val2</code>, whichever is larger.\n  overload: System.Math.Max*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Max(System.Int32,System.Int32)\n  commentId: M:System.Math.Max(System.Int32,System.Int32)\n  id: Max(System.Int32,System.Int32)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Max(Int32, Int32)\n  nameWithType: Math.Max(Int32, Int32)\n  fullName: Math.Max(Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the larger of two 32-bit signed integers.\n  remarks: ''\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.  \\n  \\n [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]\\n [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]\\n [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]\"\n  syntax:\n    content: public static int Max (int val1, int val2);\n    parameters:\n    - id: val1\n      type: System.Int32\n      description: The first of two 32-bit signed integers to compare.\n    - id: val2\n      type: System.Int32\n      description: The second of two 32-bit signed integers to compare.\n    return:\n      type: System.Int32\n      description: Parameter <code>val1</code> or <code>val2</code>, whichever is larger.\n  overload: System.Math.Max*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Max(System.Int16,System.Int16)\n  commentId: M:System.Math.Max(System.Int16,System.Int16)\n  id: Max(System.Int16,System.Int16)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Max(Int16, Int16)\n  nameWithType: Math.Max(Int16, Int16)\n  fullName: Math.Max(Int16, Int16)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the larger of two 16-bit signed integers.\n  remarks: ''\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.  \\n  \\n [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]\\n [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]\\n [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]\"\n  syntax:\n    content: public static short Max (short val1, short val2);\n    parameters:\n    - id: val1\n      type: System.Int16\n      description: The first of two 16-bit signed integers to compare.\n    - id: val2\n      type: System.Int16\n      description: The second of two 16-bit signed integers to compare.\n    return:\n      type: System.Int16\n      description: Parameter <code>val1</code> or <code>val2</code>, whichever is larger.\n  overload: System.Math.Max*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Max(System.Double,System.Double)\n  commentId: M:System.Math.Max(System.Double,System.Double)\n  id: Max(System.Double,System.Double)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Max(Double, Double)\n  nameWithType: Math.Max(Double, Double)\n  fullName: Math.Max(Double, Double)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the larger of two double-precision floating-point numbers.\n  remarks: ''\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.  \\n  \\n [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]\\n [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]\\n [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]\"\n  syntax:\n    content: public static double Max (double val1, double val2);\n    parameters:\n    - id: val1\n      type: System.Double\n      description: The first of two double-precision floating-point numbers to compare.\n    - id: val2\n      type: System.Double\n      description: The second of two double-precision floating-point numbers to compare.\n    return:\n      type: System.Double\n      description: Parameter <code>val1</code> or <code>val2</code>, whichever is larger. If <code>val1</code>, <code>val2</code>, or both <code>val1</code> and <code>val2</code> are equal to <xref href=\"System.Double.NaN\"></xref>, <xref href=\"System.Double.NaN\"></xref> is returned.\n  overload: System.Math.Max*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Max(System.Decimal,System.Decimal)\n  commentId: M:System.Math.Max(System.Decimal,System.Decimal)\n  id: Max(System.Decimal,System.Decimal)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Max(Decimal, Decimal)\n  nameWithType: Math.Max(Decimal, Decimal)\n  fullName: Math.Max(Decimal, Decimal)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the larger of two decimal numbers.\n  remarks: ''\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.  \\n  \\n [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]\\n [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]\\n [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]\"\n  syntax:\n    content: public static decimal Max (decimal val1, decimal val2);\n    parameters:\n    - id: val1\n      type: System.Decimal\n      description: The first of two decimal numbers to compare.\n    - id: val2\n      type: System.Decimal\n      description: The second of two decimal numbers to compare.\n    return:\n      type: System.Decimal\n      description: Parameter <code>val1</code> or <code>val2</code>, whichever is larger.\n  overload: System.Math.Max*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Max(System.Byte,System.Byte)\n  commentId: M:System.Math.Max(System.Byte,System.Byte)\n  id: Max(System.Byte,System.Byte)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Max(Byte, Byte)\n  nameWithType: Math.Max(Byte, Byte)\n  fullName: Math.Max(Byte, Byte)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the larger of two 8-bit unsigned integers.\n  remarks: ''\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.  \\n  \\n [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]\\n [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]\\n [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]\"\n  syntax:\n    content: public static byte Max (byte val1, byte val2);\n    parameters:\n    - id: val1\n      type: System.Byte\n      description: The first of two 8-bit unsigned integers to compare.\n    - id: val2\n      type: System.Byte\n      description: The second of two 8-bit unsigned integers to compare.\n    return:\n      type: System.Byte\n      description: Parameter <code>val1</code> or <code>val2</code>, whichever is larger.\n  overload: System.Math.Max*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Max(System.Int64,System.Int64)\n  commentId: M:System.Math.Max(System.Int64,System.Int64)\n  id: Max(System.Int64,System.Int64)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Max(Int64, Int64)\n  nameWithType: Math.Max(Int64, Int64)\n  fullName: Math.Max(Int64, Int64)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the larger of two 64-bit signed integers.\n  remarks: ''\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.  \\n  \\n [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]\\n [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]\\n [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]\"\n  syntax:\n    content: public static long Max (long val1, long val2);\n    parameters:\n    - id: val1\n      type: System.Int64\n      description: The first of two 64-bit signed integers to compare.\n    - id: val2\n      type: System.Int64\n      description: The second of two 64-bit signed integers to compare.\n    return:\n      type: System.Int64\n      description: Parameter <code>val1</code> or <code>val2</code>, whichever is larger.\n  overload: System.Math.Max*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Min(System.Int64,System.Int64)\n  commentId: M:System.Math.Min(System.Int64,System.Int64)\n  id: Min(System.Int64,System.Int64)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Min(Int64, Int64)\n  nameWithType: Math.Min(Int64, Int64)\n  fullName: Math.Min(Int64, Int64)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the smaller of two 64-bit signed integers.\n  remarks: ''\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.  \\n  \\n [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]\\n [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]\\n [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]\"\n  syntax:\n    content: public static long Min (long val1, long val2);\n    parameters:\n    - id: val1\n      type: System.Int64\n      description: The first of two 64-bit signed integers to compare.\n    - id: val2\n      type: System.Int64\n      description: The second of two 64-bit signed integers to compare.\n    return:\n      type: System.Int64\n      description: Parameter <code>val1</code> or <code>val2</code>, whichever is smaller.\n  overload: System.Math.Min*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Min(System.UInt64,System.UInt64)\n  commentId: M:System.Math.Min(System.UInt64,System.UInt64)\n  id: Min(System.UInt64,System.UInt64)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Min(UInt64, UInt64)\n  nameWithType: Math.Min(UInt64, UInt64)\n  fullName: Math.Min(UInt64, UInt64)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the smaller of two 64-bit unsigned integers.\n  remarks: ''\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.  \\n  \\n [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]\\n [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]\\n [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static ulong Min (ulong val1, ulong val2);\n    parameters:\n    - id: val1\n      type: System.UInt64\n      description: The first of two 64-bit unsigned integers to compare.\n    - id: val2\n      type: System.UInt64\n      description: The second of two 64-bit unsigned integers to compare.\n    return:\n      type: System.UInt64\n      description: Parameter <code>val1</code> or <code>val2</code>, whichever is smaller.\n  overload: System.Math.Min*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Min(System.UInt32,System.UInt32)\n  commentId: M:System.Math.Min(System.UInt32,System.UInt32)\n  id: Min(System.UInt32,System.UInt32)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Min(UInt32, UInt32)\n  nameWithType: Math.Min(UInt32, UInt32)\n  fullName: Math.Min(UInt32, UInt32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the smaller of two 32-bit unsigned integers.\n  remarks: ''\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.  \\n  \\n [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]\\n [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]\\n [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static uint Min (uint val1, uint val2);\n    parameters:\n    - id: val1\n      type: System.UInt32\n      description: The first of two 32-bit unsigned integers to compare.\n    - id: val2\n      type: System.UInt32\n      description: The second of two 32-bit unsigned integers to compare.\n    return:\n      type: System.UInt32\n      description: Parameter <code>val1</code> or <code>val2</code>, whichever is smaller.\n  overload: System.Math.Min*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Min(System.UInt16,System.UInt16)\n  commentId: M:System.Math.Min(System.UInt16,System.UInt16)\n  id: Min(System.UInt16,System.UInt16)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Min(UInt16, UInt16)\n  nameWithType: Math.Min(UInt16, UInt16)\n  fullName: Math.Min(UInt16, UInt16)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the smaller of two 16-bit unsigned integers.\n  remarks: ''\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.  \\n  \\n [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]\\n [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]\\n [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static ushort Min (ushort val1, ushort val2);\n    parameters:\n    - id: val1\n      type: System.UInt16\n      description: The first of two 16-bit unsigned integers to compare.\n    - id: val2\n      type: System.UInt16\n      description: The second of two 16-bit unsigned integers to compare.\n    return:\n      type: System.UInt16\n      description: Parameter <code>val1</code> or <code>val2</code>, whichever is smaller.\n  overload: System.Math.Min*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Min(System.Single,System.Single)\n  commentId: M:System.Math.Min(System.Single,System.Single)\n  id: Min(System.Single,System.Single)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Min(Single, Single)\n  nameWithType: Math.Min(Single, Single)\n  fullName: Math.Min(Single, Single)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the smaller of two single-precision floating-point numbers.\n  remarks: ''\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.  \\n  \\n [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]\\n [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]\\n [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]\"\n  syntax:\n    content: public static float Min (float val1, float val2);\n    parameters:\n    - id: val1\n      type: System.Single\n      description: The first of two single-precision floating-point numbers to compare.\n    - id: val2\n      type: System.Single\n      description: The second of two single-precision floating-point numbers to compare.\n    return:\n      type: System.Single\n      description: Parameter <code>val1</code> or <code>val2</code>, whichever is smaller. If <code>val1</code>, <code>val2</code>, or both <code>val1</code> and <code>val2</code> are equal to <xref href=\"System.Single.NaN\"></xref>, <xref href=\"System.Single.NaN\"></xref> is returned.\n  overload: System.Math.Min*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Min(System.SByte,System.SByte)\n  commentId: M:System.Math.Min(System.SByte,System.SByte)\n  id: Min(System.SByte,System.SByte)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Min(SByte, SByte)\n  nameWithType: Math.Min(SByte, SByte)\n  fullName: Math.Min(SByte, SByte)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the smaller of two 8-bit signed integers.\n  remarks: ''\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.  \\n  \\n [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]\\n [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]\\n [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static sbyte Min (sbyte val1, sbyte val2);\n    parameters:\n    - id: val1\n      type: System.SByte\n      description: The first of two 8-bit signed integers to compare.\n    - id: val2\n      type: System.SByte\n      description: The second of two 8-bit signed integers to compare.\n    return:\n      type: System.SByte\n      description: Parameter <code>val1</code> or <code>val2</code>, whichever is smaller.\n  overload: System.Math.Min*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Min(System.Int16,System.Int16)\n  commentId: M:System.Math.Min(System.Int16,System.Int16)\n  id: Min(System.Int16,System.Int16)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Min(Int16, Int16)\n  nameWithType: Math.Min(Int16, Int16)\n  fullName: Math.Min(Int16, Int16)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the smaller of two 16-bit signed integers.\n  remarks: ''\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.  \\n  \\n [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]\\n [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]\\n [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]\"\n  syntax:\n    content: public static short Min (short val1, short val2);\n    parameters:\n    - id: val1\n      type: System.Int16\n      description: The first of two 16-bit signed integers to compare.\n    - id: val2\n      type: System.Int16\n      description: The second of two 16-bit signed integers to compare.\n    return:\n      type: System.Int16\n      description: Parameter <code>val1</code> or <code>val2</code>, whichever is smaller.\n  overload: System.Math.Min*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Min(System.Double,System.Double)\n  commentId: M:System.Math.Min(System.Double,System.Double)\n  id: Min(System.Double,System.Double)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Min(Double, Double)\n  nameWithType: Math.Min(Double, Double)\n  fullName: Math.Min(Double, Double)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the smaller of two double-precision floating-point numbers.\n  remarks: ''\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.  \\n  \\n [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]\\n [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]\\n [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]\"\n  syntax:\n    content: public static double Min (double val1, double val2);\n    parameters:\n    - id: val1\n      type: System.Double\n      description: The first of two double-precision floating-point numbers to compare.\n    - id: val2\n      type: System.Double\n      description: The second of two double-precision floating-point numbers to compare.\n    return:\n      type: System.Double\n      description: Parameter <code>val1</code> or <code>val2</code>, whichever is smaller. If <code>val1</code>, <code>val2</code>, or both <code>val1</code> and <code>val2</code> are equal to <xref href=\"System.Double.NaN\"></xref>, <xref href=\"System.Double.NaN\"></xref> is returned.\n  overload: System.Math.Min*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Min(System.Decimal,System.Decimal)\n  commentId: M:System.Math.Min(System.Decimal,System.Decimal)\n  id: Min(System.Decimal,System.Decimal)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Min(Decimal, Decimal)\n  nameWithType: Math.Min(Decimal, Decimal)\n  fullName: Math.Min(Decimal, Decimal)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the smaller of two decimal numbers.\n  remarks: ''\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.  \\n  \\n [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]\\n [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]\\n [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]\"\n  syntax:\n    content: public static decimal Min (decimal val1, decimal val2);\n    parameters:\n    - id: val1\n      type: System.Decimal\n      description: The first of two decimal numbers to compare.\n    - id: val2\n      type: System.Decimal\n      description: The second of two decimal numbers to compare.\n    return:\n      type: System.Decimal\n      description: Parameter <code>val1</code> or <code>val2</code>, whichever is smaller.\n  overload: System.Math.Min*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Min(System.Byte,System.Byte)\n  commentId: M:System.Math.Min(System.Byte,System.Byte)\n  id: Min(System.Byte,System.Byte)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Min(Byte, Byte)\n  nameWithType: Math.Min(Byte, Byte)\n  fullName: Math.Min(Byte, Byte)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the smaller of two 8-bit unsigned integers.\n  remarks: ''\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.  \\n  \\n [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]\\n [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]\\n [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]\"\n  syntax:\n    content: public static byte Min (byte val1, byte val2);\n    parameters:\n    - id: val1\n      type: System.Byte\n      description: The first of two 8-bit unsigned integers to compare.\n    - id: val2\n      type: System.Byte\n      description: The second of two 8-bit unsigned integers to compare.\n    return:\n      type: System.Byte\n      description: Parameter <code>val1</code> or <code>val2</code>, whichever is smaller.\n  overload: System.Math.Min*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Min(System.Int32,System.Int32)\n  commentId: M:System.Math.Min(System.Int32,System.Int32)\n  id: Min(System.Int32,System.Int32)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Min(Int32, Int32)\n  nameWithType: Math.Min(Int32, Int32)\n  fullName: Math.Min(Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the smaller of two 32-bit signed integers.\n  remarks: ''\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.  \\n  \\n [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]\\n [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]\\n [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]\"\n  syntax:\n    content: public static int Min (int val1, int val2);\n    parameters:\n    - id: val1\n      type: System.Int32\n      description: The first of two 32-bit signed integers to compare.\n    - id: val2\n      type: System.Int32\n      description: The second of two 32-bit signed integers to compare.\n    return:\n      type: System.Int32\n      description: Parameter <code>val1</code> or <code>val2</code>, whichever is smaller.\n  overload: System.Math.Min*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.PI\n  commentId: F:System.Math.PI\n  id: PI\n  parent: System.Math\n  langs:\n  - csharp\n  name: PI\n  nameWithType: Math.PI\n  fullName: Math.PI\n  type: Field\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Represents the ratio of the circumference of a circle to its diameter, specified by the constant, π.\n  remarks: The value of this field is 3.14159265358979323846.\n  example:\n  - \"The following example uses <xref:System.Math.PI> to assist in the computation of the inner angles of a given trapezoid.  \\n  \\n [!code-cpp[MathSample#1](~/samples/snippets/cpp/VS_Snippets_CLR/MathSample/CPP/mathsample.cpp#1)]\\n [!code-csharp[MathSample#1](~/samples/snippets/csharp/VS_Snippets_CLR/MathSample/CS/mathsample.cs#1)]\\n [!code-vb[MathSample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MathSample/VB/mathsample.vb#1)]\"\n  syntax:\n    content: public const double PI = 3.14159265358979;\n    return:\n      type: System.Double\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Pow(System.Double,System.Double)\n  commentId: M:System.Math.Pow(System.Double,System.Double)\n  id: Pow(System.Double,System.Double)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Pow(Double, Double)\n  nameWithType: Math.Pow(Double, Double)\n  fullName: Math.Pow(Double, Double)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns a specified number raised to the specified power.\n  remarks: \"The following table indicates the return value when various values or ranges of values are specified for the `x` and `y` parameters. For more information, see <xref:System.Double?displayProperty=fullName>, <xref:System.Double?displayProperty=fullName>, and <xref:System.Double?displayProperty=fullName>.  \\n  \\n|Parameters|Return value|  \\n|----------------|------------------|  \\n|`x` or `y` = `NaN`.|`NaN`|  \\n|`x` = Any value except `NaN`; `y` = 0.|1|  \\n|`x` = `NegativeInfinity`; `y` < 0.|0|  \\n|`x` = `NegativeInfinity`; `y` is a positive odd integer.|`NegativeInfinity`|  \\n|`x` = `NegativeInfinity`; `y` is positive but not an odd integer.|`PositiveInfinity`|  \\n|`x` < 0 but not `NegativeInfinity`; `y` is not an integer, `NegativeInfinity`, or `PositiveInfinity`.|`NaN`|  \\n|`x` = -1; `y` = `NegativeInfinity` or `PositiveInfinity`.|`NaN`|  \\n|-1 < `x` < 1; `y` = `NegativeInfinity`.|`PositiveInfinity`|  \\n|-1 < `x` < 1; `y` = `PositiveInfinity`.|0|  \\n|`x` < -1 or `x` > 1; `y` = `NegativeInfinity`.|0|  \\n|`x` < -1 or `x` > 1; `y` = `PositiveInfinity`.|`PositiveInfinity`|  \\n|`x` = 0; `y` < 0.|`PositiveInfinity`|  \\n|`x` = 0; `y` > 0.|0|  \\n|`x` = 1; `y` is any value except `NaN`.|1|  \\n|`x` = `PositiveInfinity`; `y` < 0.|0|  \\n|`x` = `PositiveInfinity`; `y` > 0.|`PositiveInfinity`|\"\n  example:\n  - \"The following example uses the <xref:System.Math.Pow%2A> method to calculate the value that results from raising 2 to a power ranging from 0 to 32.  \\n  \\n [!code-csharp[System.Math.Pow#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.pow/cs/pow1.cs#1)]\\n [!code-vb[System.Math.Pow#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.pow/vb/pow1.vb#1)]\"\n  syntax:\n    content: public static double Pow (double x, double y);\n    parameters:\n    - id: x\n      type: System.Double\n      description: A double-precision floating-point number to be raised to a power.\n    - id: y\n      type: System.Double\n      description: A double-precision floating-point number that specifies a power.\n    return:\n      type: System.Double\n      description: The number <code>x</code> raised to the power <code>y</code>.\n  overload: System.Math.Pow*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Round(System.Double)\n  commentId: M:System.Math.Round(System.Double)\n  id: Round(System.Double)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Round(Double)\n  nameWithType: Math.Round(Double)\n  fullName: Math.Round(Double)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Rounds a double-precision floating-point value to the nearest integral value.\n  remarks: >-\n    > [!NOTE]\n\n    >  For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.\n  syntax:\n    content: public static double Round (double a);\n    parameters:\n    - id: a\n      type: System.Double\n      description: A double-precision floating-point number to be rounded.\n    return:\n      type: System.Double\n      description: The integer nearest <code>a</code>. If the fractional component of <code>a</code> is halfway between two integers, one of which is even and the other odd, then the even number is returned. Note that this method returns a <xref href=\"System.Double\"></xref> instead of an integral type.\n  overload: System.Math.Round*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Round(System.Decimal,System.Int32,System.MidpointRounding)\n  commentId: M:System.Math.Round(System.Decimal,System.Int32,System.MidpointRounding)\n  id: Round(System.Decimal,System.Int32,System.MidpointRounding)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Round(Decimal, Int32, MidpointRounding)\n  nameWithType: Math.Round(Decimal, Int32, MidpointRounding)\n  fullName: Math.Round(Decimal, Int32, MidpointRounding)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Rounds a decimal value to a specified number of fractional digits. A parameter specifies how to round the value if it is midway between two numbers.\n  remarks: >-\n    > [!NOTE]\n\n    >  For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.\n  syntax:\n    content: public static decimal Round (decimal d, int decimals, MidpointRounding mode);\n    parameters:\n    - id: d\n      type: System.Decimal\n      description: A decimal number to be rounded.\n    - id: decimals\n      type: System.Int32\n      description: The number of decimal places in the return value.\n    - id: mode\n      type: System.MidpointRounding\n      description: Specification for how to round <code>d</code> if it is midway between two other numbers.\n    return:\n      type: System.Decimal\n      description: The number nearest to <code>d</code> that contains a number of fractional digits equal to <code>decimals</code>. If <code>d</code> has fewer fractional digits than <code>decimals</code>, <code>d</code> is returned unchanged.\n  overload: System.Math.Round*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>decimals</code> is less than 0 or greater than 28.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>mode</code> is not a valid value of <xref href=\"System.MidpointRounding\"></xref>.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The result is outside the range of a <xref href=\"System.Decimal\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Round(System.Double,System.Int32,System.MidpointRounding)\n  commentId: M:System.Math.Round(System.Double,System.Int32,System.MidpointRounding)\n  id: Round(System.Double,System.Int32,System.MidpointRounding)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Round(Double, Int32, MidpointRounding)\n  nameWithType: Math.Round(Double, Int32, MidpointRounding)\n  fullName: Math.Round(Double, Int32, MidpointRounding)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Rounds a double-precision floating-point value to a specified number of fractional digits. A parameter specifies how to round the value if it is midway between two numbers.\n  remarks: >-\n    > [!NOTE]\n\n    >  For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.\n  syntax:\n    content: public static double Round (double value, int digits, MidpointRounding mode);\n    parameters:\n    - id: value\n      type: System.Double\n      description: A double-precision floating-point number to be rounded.\n    - id: digits\n      type: System.Int32\n      description: The number of fractional digits in the return value.\n    - id: mode\n      type: System.MidpointRounding\n      description: Specification for how to round <code>value</code> if it is midway between two other numbers.\n    return:\n      type: System.Double\n      description: The number nearest to <code>value</code> that has a number of fractional digits equal to <code>digits</code>. If <code>value</code> has fewer fractional digits than <code>digits</code>, <code>value</code> is returned unchanged.\n  overload: System.Math.Round*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>digits</code> is less than 0 or greater than 15.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>mode</code> is not a valid value of <xref href=\"System.MidpointRounding\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Round(System.Double,System.MidpointRounding)\n  commentId: M:System.Math.Round(System.Double,System.MidpointRounding)\n  id: Round(System.Double,System.MidpointRounding)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Round(Double, MidpointRounding)\n  nameWithType: Math.Round(Double, MidpointRounding)\n  fullName: Math.Round(Double, MidpointRounding)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Rounds a double-precision floating-point value to the nearest integer. A parameter specifies how to round the value if it is midway between two numbers.\n  remarks: >-\n    > [!NOTE]\n\n    >  For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.\n  syntax:\n    content: public static double Round (double value, MidpointRounding mode);\n    parameters:\n    - id: value\n      type: System.Double\n      description: A double-precision floating-point number to be rounded.\n    - id: mode\n      type: System.MidpointRounding\n      description: Specification for how to round <code>value</code> if it is midway between two other numbers.\n    return:\n      type: System.Double\n      description: The integer nearest <code>value</code>. If <code>value</code> is halfway between two integers, one of which is even and the other odd, then <code>mode</code> determines which of the two is returned.\n  overload: System.Math.Round*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>mode</code> is not a valid value of <xref href=\"System.MidpointRounding\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Round(System.Decimal)\n  commentId: M:System.Math.Round(System.Decimal)\n  id: Round(System.Decimal)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Round(Decimal)\n  nameWithType: Math.Round(Decimal)\n  fullName: Math.Round(Decimal)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Rounds a decimal value to the nearest integral value.\n  remarks: >-\n    > [!NOTE]\n\n    >  For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.\n  syntax:\n    content: public static decimal Round (decimal d);\n    parameters:\n    - id: d\n      type: System.Decimal\n      description: A decimal number to be rounded.\n    return:\n      type: System.Decimal\n      description: The integer nearest parameter <code>d</code>. If the fractional component of <code>d</code> is halfway between two integers, one of which is even and the other odd, the even number is returned. Note that this method returns a <xref href=\"System.Decimal\"></xref> instead of an integral type.\n  overload: System.Math.Round*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The result is outside the range of a <xref href=\"System.Decimal\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Round(System.Decimal,System.MidpointRounding)\n  commentId: M:System.Math.Round(System.Decimal,System.MidpointRounding)\n  id: Round(System.Decimal,System.MidpointRounding)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Round(Decimal, MidpointRounding)\n  nameWithType: Math.Round(Decimal, MidpointRounding)\n  fullName: Math.Round(Decimal, MidpointRounding)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Rounds a decimal value to the nearest integer. A parameter specifies how to round the value if it is midway between two numbers.\n  remarks: >-\n    > [!NOTE]\n\n    >  For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.\n  syntax:\n    content: public static decimal Round (decimal d, MidpointRounding mode);\n    parameters:\n    - id: d\n      type: System.Decimal\n      description: A decimal number to be rounded.\n    - id: mode\n      type: System.MidpointRounding\n      description: Specification for how to round <code>d</code> if it is midway between two other numbers.\n    return:\n      type: System.Decimal\n      description: The integer nearest <code>d</code>. If <code>d</code> is halfway between two numbers, one of which is even and the other odd, then <code>mode</code> determines which of the two is returned.\n  overload: System.Math.Round*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>mode</code> is not a valid value of <xref href=\"System.MidpointRounding\"></xref>.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The result is outside the range of a <xref href=\"System.Decimal\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Round(System.Decimal,System.Int32)\n  commentId: M:System.Math.Round(System.Decimal,System.Int32)\n  id: Round(System.Decimal,System.Int32)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Round(Decimal, Int32)\n  nameWithType: Math.Round(Decimal, Int32)\n  fullName: Math.Round(Decimal, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Rounds a decimal value to a specified number of fractional digits.\n  remarks: >-\n    > [!NOTE]\n\n    >  For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.\n  syntax:\n    content: public static decimal Round (decimal d, int decimals);\n    parameters:\n    - id: d\n      type: System.Decimal\n      description: A decimal number to be rounded.\n    - id: decimals\n      type: System.Int32\n      description: The number of decimal places in the return value.\n    return:\n      type: System.Decimal\n      description: The number nearest to <code>d</code> that contains a number of fractional digits equal to <code>decimals</code>.\n  overload: System.Math.Round*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>decimals</code> is less than 0 or greater than 28.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The result is outside the range of a <xref href=\"System.Decimal\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Round(System.Double,System.Int32)\n  commentId: M:System.Math.Round(System.Double,System.Int32)\n  id: Round(System.Double,System.Int32)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Round(Double, Int32)\n  nameWithType: Math.Round(Double, Int32)\n  fullName: Math.Round(Double, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Rounds a double-precision floating-point value to a specified number of fractional digits.\n  remarks: >-\n    > [!NOTE]\n\n    >  For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.\n  syntax:\n    content: public static double Round (double value, int digits);\n    parameters:\n    - id: value\n      type: System.Double\n      description: A double-precision floating-point number to be rounded.\n    - id: digits\n      type: System.Int32\n      description: The number of fractional digits in the return value.\n    return:\n      type: System.Double\n      description: The number nearest to <code>value</code> that contains a number of fractional digits equal to <code>digits</code>.\n  overload: System.Math.Round*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>digits</code> is less than 0 or greater than 15.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Sign(System.Decimal)\n  commentId: M:System.Math.Sign(System.Decimal)\n  id: Sign(System.Decimal)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Sign(Decimal)\n  nameWithType: Math.Sign(Decimal)\n  fullName: Math.Sign(Decimal)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns an integer that indicates the sign of a decimal number.\n  remarks: ''\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Math.Sign%28System.Decimal%29> method to determine the sign of a <xref:System.Decimal> value and display it to the console.  \\n  \\n [!code-cpp[Math.Sign#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.sign/CPP/sign.cpp#1)]\\n [!code-csharp[Math.Sign#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.sign/CS/sign.cs#1)]\\n [!code-vb[Math.Sign#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.sign/VB/sign.vb#1)]\"\n  syntax:\n    content: public static int Sign (decimal value);\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: A signed decimal number.\n    return:\n      type: System.Int32\n      description: \"A number that indicates the sign of <code>value</code>, as shown in the following table.  \\n  \\n <table><thead><tr><th> Return value  \\n  \\n </th><th> Meaning  \\n  \\n </th></tr></thead><tbody><tr><td> -1  \\n  \\n </td><td><code>value</code> is less than zero.  \\n  \\n </td></tr><tr><td> 0  \\n  \\n </td><td><code>value</code> is equal to zero.  \\n  \\n </td></tr><tr><td> 1  \\n  \\n </td><td><code>value</code> is greater than zero.  \\n  \\n </td></tr></tbody></table>\"\n  overload: System.Math.Sign*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Sign(System.Double)\n  commentId: M:System.Math.Sign(System.Double)\n  id: Sign(System.Double)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Sign(Double)\n  nameWithType: Math.Sign(Double)\n  fullName: Math.Sign(Double)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns an integer that indicates the sign of a double-precision floating-point number.\n  remarks: ''\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Math.Sign%28System.Double%29> method to determine the sign of a <xref:System.Double> value and display it to the console.  \\n  \\n [!code-cpp[Math.Sign#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.sign/CPP/sign.cpp#1)]\\n [!code-csharp[Math.Sign#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.sign/CS/sign.cs#1)]\\n [!code-vb[Math.Sign#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.sign/VB/sign.vb#1)]\"\n  syntax:\n    content: public static int Sign (double value);\n    parameters:\n    - id: value\n      type: System.Double\n      description: A signed number.\n    return:\n      type: System.Int32\n      description: \"A number that indicates the sign of <code>value</code>, as shown in the following table.  \\n  \\n <table><thead><tr><th> Return value  \\n  \\n </th><th> Meaning  \\n  \\n </th></tr></thead><tbody><tr><td> -1  \\n  \\n </td><td><code>value</code> is less than zero.  \\n  \\n </td></tr><tr><td> 0  \\n  \\n </td><td><code>value</code> is equal to zero.  \\n  \\n </td></tr><tr><td> 1  \\n  \\n </td><td><code>value</code> is greater than zero.  \\n  \\n </td></tr></tbody></table>\"\n  overload: System.Math.Sign*\n  exceptions:\n  - type: System.ArithmeticException\n    commentId: T:System.ArithmeticException\n    description: <code>value</code> is equal to <xref href=\"System.Double.NaN\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Sign(System.Int16)\n  commentId: M:System.Math.Sign(System.Int16)\n  id: Sign(System.Int16)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Sign(Int16)\n  nameWithType: Math.Sign(Int16)\n  fullName: Math.Sign(Int16)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns an integer that indicates the sign of a 16-bit signed integer.\n  remarks: ''\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Math.Sign%28System.Int16%29> method to determine the sign of an <xref:System.Int16> value and display it to the console.  \\n  \\n [!code-cpp[Math.Sign#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.sign/CPP/sign.cpp#1)]\\n [!code-csharp[Math.Sign#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.sign/CS/sign.cs#1)]\\n [!code-vb[Math.Sign#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.sign/VB/sign.vb#1)]\"\n  syntax:\n    content: public static int Sign (short value);\n    parameters:\n    - id: value\n      type: System.Int16\n      description: A signed number.\n    return:\n      type: System.Int32\n      description: \"A number that indicates the sign of <code>value</code>, as shown in the following table.  \\n  \\n <table><thead><tr><th> Return value  \\n  \\n </th><th> Meaning  \\n  \\n </th></tr></thead><tbody><tr><td> -1  \\n  \\n </td><td><code>value</code> is less than zero.  \\n  \\n </td></tr><tr><td> 0  \\n  \\n </td><td><code>value</code> is equal to zero.  \\n  \\n </td></tr><tr><td> 1  \\n  \\n </td><td><code>value</code> is greater than zero.  \\n  \\n </td></tr></tbody></table>\"\n  overload: System.Math.Sign*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Sign(System.Int32)\n  commentId: M:System.Math.Sign(System.Int32)\n  id: Sign(System.Int32)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Sign(Int32)\n  nameWithType: Math.Sign(Int32)\n  fullName: Math.Sign(Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns an integer that indicates the sign of a 32-bit signed integer.\n  remarks: ''\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Math.Sign%28System.Int32%29> method to determine the sign of an <xref:System.Int32> value and display it to the console.  \\n  \\n [!code-cpp[Math.Sign#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.sign/CPP/sign.cpp#1)]\\n [!code-csharp[Math.Sign#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.sign/CS/sign.cs#1)]\\n [!code-vb[Math.Sign#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.sign/VB/sign.vb#1)]\"\n  syntax:\n    content: public static int Sign (int value);\n    parameters:\n    - id: value\n      type: System.Int32\n      description: A signed number.\n    return:\n      type: System.Int32\n      description: \"A number that indicates the sign of <code>value</code>, as shown in the following table.  \\n  \\n <table><thead><tr><th> Return value  \\n  \\n </th><th> Meaning  \\n  \\n </th></tr></thead><tbody><tr><td> -1  \\n  \\n </td><td><code>value</code> is less than zero.  \\n  \\n </td></tr><tr><td> 0  \\n  \\n </td><td><code>value</code> is equal to zero.  \\n  \\n </td></tr><tr><td> 1  \\n  \\n </td><td><code>value</code> is greater than zero.  \\n  \\n </td></tr></tbody></table>\"\n  overload: System.Math.Sign*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Sign(System.Int64)\n  commentId: M:System.Math.Sign(System.Int64)\n  id: Sign(System.Int64)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Sign(Int64)\n  nameWithType: Math.Sign(Int64)\n  fullName: Math.Sign(Int64)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns an integer that indicates the sign of a 64-bit signed integer.\n  remarks: ''\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Math.Sign%28System.Int64%29> method to determine the sign of an <xref:System.Int64> value and display it to the console.  \\n  \\n [!code-cpp[Math.Sign#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.sign/CPP/sign.cpp#1)]\\n [!code-csharp[Math.Sign#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.sign/CS/sign.cs#1)]\\n [!code-vb[Math.Sign#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.sign/VB/sign.vb#1)]\"\n  syntax:\n    content: public static int Sign (long value);\n    parameters:\n    - id: value\n      type: System.Int64\n      description: A signed number.\n    return:\n      type: System.Int32\n      description: \"A number that indicates the sign of <code>value</code>, as shown in the following table.  \\n  \\n <table><thead><tr><th> Return value  \\n  \\n </th><th> Meaning  \\n  \\n </th></tr></thead><tbody><tr><td> -1  \\n  \\n </td><td><code>value</code> is less than zero.  \\n  \\n </td></tr><tr><td> 0  \\n  \\n </td><td><code>value</code> is equal to zero.  \\n  \\n </td></tr><tr><td> 1  \\n  \\n </td><td><code>value</code> is greater than zero.  \\n  \\n </td></tr></tbody></table>\"\n  overload: System.Math.Sign*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Sign(System.SByte)\n  commentId: M:System.Math.Sign(System.SByte)\n  id: Sign(System.SByte)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Sign(SByte)\n  nameWithType: Math.Sign(SByte)\n  fullName: Math.Sign(SByte)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns an integer that indicates the sign of an 8-bit signed integer.\n  remarks: ''\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Math.Sign%28System.SByte%29> method to determine the sign of an <xref:System.SByte> value and display it to the console.  \\n  \\n [!code-cpp[Math.Sign#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.sign/CPP/sign.cpp#1)]\\n [!code-csharp[Math.Sign#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.sign/CS/sign.cs#1)]\\n [!code-vb[Math.Sign#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.sign/VB/sign.vb#1)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static int Sign (sbyte value);\n    parameters:\n    - id: value\n      type: System.SByte\n      description: A signed number.\n    return:\n      type: System.Int32\n      description: \"A number that indicates the sign of <code>value</code>, as shown in the following table.  \\n  \\n <table><thead><tr><th> Return value  \\n  \\n </th><th> Meaning  \\n  \\n </th></tr></thead><tbody><tr><td> -1  \\n  \\n </td><td><code>value</code> is less than zero.  \\n  \\n </td></tr><tr><td> 0  \\n  \\n </td><td><code>value</code> is equal to zero.  \\n  \\n </td></tr><tr><td> 1  \\n  \\n </td><td><code>value</code> is greater than zero.  \\n  \\n </td></tr></tbody></table>\"\n  overload: System.Math.Sign*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Sign(System.Single)\n  commentId: M:System.Math.Sign(System.Single)\n  id: Sign(System.Single)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Sign(Single)\n  nameWithType: Math.Sign(Single)\n  fullName: Math.Sign(Single)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns an integer that indicates the sign of a single-precision floating-point number.\n  remarks: ''\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Math.Sign%28System.Single%29> method to determine the sign of a <xref:System.Single> value and display it to the console.  \\n  \\n [!code-cpp[Math.Sign#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.sign/CPP/sign.cpp#1)]\\n [!code-csharp[Math.Sign#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.sign/CS/sign.cs#1)]\\n [!code-vb[Math.Sign#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.sign/VB/sign.vb#1)]\"\n  syntax:\n    content: public static int Sign (float value);\n    parameters:\n    - id: value\n      type: System.Single\n      description: A signed number.\n    return:\n      type: System.Int32\n      description: \"A number that indicates the sign of <code>value</code>, as shown in the following table.  \\n  \\n <table><thead><tr><th> Return value  \\n  \\n </th><th> Meaning  \\n  \\n </th></tr></thead><tbody><tr><td> -1  \\n  \\n </td><td><code>value</code> is less than zero.  \\n  \\n </td></tr><tr><td> 0  \\n  \\n </td><td><code>value</code> is equal to zero.  \\n  \\n </td></tr><tr><td> 1  \\n  \\n </td><td><code>value</code> is greater than zero.  \\n  \\n </td></tr></tbody></table>\"\n  overload: System.Math.Sign*\n  exceptions:\n  - type: System.ArithmeticException\n    commentId: T:System.ArithmeticException\n    description: <code>value</code> is equal to <xref href=\"System.Single.NaN\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Sin(System.Double)\n  commentId: M:System.Math.Sin(System.Double)\n  id: Sin(System.Double)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Sin(Double)\n  nameWithType: Math.Sin(Double)\n  fullName: Math.Sin(Double)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the sine of the specified angle.\n  remarks: \"The angle, `a`, must be in radians. Multiply by <xref:System.Math.PI?displayProperty=fullName>/180 to convert degrees to radians.  \\n  \\n Acceptable values of `a` range from approximately -9223372036854775295 to approximately 9223372036854775295. For values outside of this range, the <xref:System.Math.Sin%2A> method returns `a` unchanged rather than throwing an exception.\"\n  example:\n  - \"The following example uses <xref:System.Math.Sin%2A> to evaluate certain trigonometric identities for selected angles.  \\n  \\n [!code-cpp[System.Math.SinCos#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Math.SinCos/CPP/sincos.cpp#1)]\\n [!code-csharp[System.Math.SinCos#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.SinCos/CS/sincos.cs#1)]\\n [!code-vb[System.Math.SinCos#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.SinCos/VB/sincos.vb#1)]\"\n  syntax:\n    content: public static double Sin (double a);\n    parameters:\n    - id: a\n      type: System.Double\n      description: An angle, measured in radians.\n    return:\n      type: System.Double\n      description: The sine of <code>a</code>. If <code>a</code> is equal to <xref href=\"System.Double.NaN\"></xref>, <xref href=\"System.Double.NegativeInfinity\"></xref>, or <xref href=\"System.Double.PositiveInfinity\"></xref>, this method returns <xref href=\"System.Double.NaN\"></xref>.\n  overload: System.Math.Sin*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Sinh(System.Double)\n  commentId: M:System.Math.Sinh(System.Double)\n  id: Sinh(System.Double)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Sinh(Double)\n  nameWithType: Math.Sinh(Double)\n  fullName: Math.Sinh(Double)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the hyperbolic sine of the specified angle.\n  remarks: The angle, `value`, must be in radians. Multiply by <xref:System.Math.PI?displayProperty=fullName>/180 to convert degrees to radians.\n  example:\n  - \"The following example uses <xref:System.Math.Sinh%2A> to evaluate certain hyperbolic identities for selected values.  \\n  \\n [!code-cpp[System.Math.SinhCosh#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Math.SinhCosh/CPP/sinhcosh.cpp#1)]\\n [!code-csharp[System.Math.SinhCosh#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.SinhCosh/CS/sinhcosh.cs#1)]\\n [!code-vb[System.Math.SinhCosh#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.SinhCosh/VB/sinhcosh.vb#1)]\"\n  syntax:\n    content: public static double Sinh (double value);\n    parameters:\n    - id: value\n      type: System.Double\n      description: An angle, measured in radians.\n    return:\n      type: System.Double\n      description: The hyperbolic sine of <code>value</code>. If <code>value</code> is equal to <xref href=\"System.Double.NegativeInfinity\"></xref>, <xref href=\"System.Double.PositiveInfinity\"></xref>, or <xref href=\"System.Double.NaN\"></xref>, this method returns a <xref href=\"System.Double\"></xref> equal to <code>value</code>.\n  overload: System.Math.Sinh*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Sqrt(System.Double)\n  commentId: M:System.Math.Sqrt(System.Double)\n  id: Sqrt(System.Double)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Sqrt(Double)\n  nameWithType: Math.Sqrt(Double)\n  fullName: Math.Sqrt(Double)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the square root of a specified number.\n  remarks: ''\n  example:\n  - \"The square root of the area of a square represents the length of any side of the square. The following example displays the area of some cities in the United States and gives an impression of each city's size if it were represented by a square.  \\n  \\n [!code-csharp[System.Math.Sqrt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.sqrt/cs/sqrt1.cs#1)]\\n [!code-vb[System.Math.Sqrt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.sqrt/vb/sqrt1.vb#1)]\"\n  syntax:\n    content: public static double Sqrt (double d);\n    parameters:\n    - id: d\n      type: System.Double\n      description: The number whose square root is to be found.\n    return:\n      type: System.Double\n      description: \"One of the values in the following table.  \\n  \\n <table><thead><tr><th><code>d</code> parameter  \\n  \\n </th><th> Return value  \\n  \\n </th></tr></thead><tbody><tr><td> Zero or positive  \\n  \\n </td><td> The positive square root of <code>d</code>.  \\n  \\n </td></tr><tr><td> Negative  \\n  \\n </td><td><xref href=\\\"System.Double.NaN\\\"></xref></td></tr><tr><td> Equals <xref href=\\\"System.Double.NaN\\\"></xref></td><td><xref href=\\\"System.Double.NaN\\\"></xref></td></tr><tr><td> Equals <xref href=\\\"System.Double.PositiveInfinity\\\"></xref></td><td><xref href=\\\"System.Double.PositiveInfinity\\\"></xref></td></tr></tbody></table>\"\n  overload: System.Math.Sqrt*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Tan(System.Double)\n  commentId: M:System.Math.Tan(System.Double)\n  id: Tan(System.Double)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Tan(Double)\n  nameWithType: Math.Tan(Double)\n  fullName: Math.Tan(Double)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the tangent of the specified angle.\n  remarks: The angle, `a`, must be in radians. Multiply by <xref:System.Math.PI?displayProperty=fullName>/180 to convert degrees to radians.\n  example:\n  - \"The following example demonstrates how to calculate the tangent of an angle and display it to the console.  \\n  \\n [!code-cpp[math.atanx#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.atanx/CPP/atan.cpp#1)]\\n [!code-csharp[math.atanx#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.atanx/CS/atan.cs#1)]\\n [!code-vb[math.atanx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.atanx/VB/atan.vb#1)]\"\n  syntax:\n    content: public static double Tan (double a);\n    parameters:\n    - id: a\n      type: System.Double\n      description: An angle, measured in radians.\n    return:\n      type: System.Double\n      description: The tangent of <code>a</code>. If <code>a</code> is equal to <xref href=\"System.Double.NaN\"></xref>, <xref href=\"System.Double.NegativeInfinity\"></xref>, or <xref href=\"System.Double.PositiveInfinity\"></xref>, this method returns <xref href=\"System.Double.NaN\"></xref>.\n  overload: System.Math.Tan*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Tanh(System.Double)\n  commentId: M:System.Math.Tanh(System.Double)\n  id: Tanh(System.Double)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Tanh(Double)\n  nameWithType: Math.Tanh(Double)\n  fullName: Math.Tanh(Double)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the hyperbolic tangent of the specified angle.\n  remarks: The angle, `value`, must be in radians. Multiply by <xref:System.Math.PI?displayProperty=fullName>/180 to convert degrees to radians.\n  example:\n  - \"The following example uses <xref:System.Math.Tanh%2A> to evaluate certain hyperbolic tangent identities for selected values.  \\n  \\n [!code-cpp[System.Math.Tanh#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Math.Tanh/CPP/tanh.cpp#1)]\\n [!code-csharp[System.Math.Tanh#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Tanh/CS/tanh.cs#1)]\\n [!code-vb[System.Math.Tanh#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Tanh/VB/tanh.vb#1)]\"\n  syntax:\n    content: public static double Tanh (double value);\n    parameters:\n    - id: value\n      type: System.Double\n      description: An angle, measured in radians.\n    return:\n      type: System.Double\n      description: The hyperbolic tangent of <code>value</code>. If <code>value</code> is equal to <xref href=\"System.Double.NegativeInfinity\"></xref>, this method returns -1. If value is equal to <xref href=\"System.Double.PositiveInfinity\"></xref>, this method returns 1. If <code>value</code> is equal to <xref href=\"System.Double.NaN\"></xref>, this method returns <xref href=\"System.Double.NaN\"></xref>.\n  overload: System.Math.Tanh*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Truncate(System.Decimal)\n  commentId: M:System.Math.Truncate(System.Decimal)\n  id: Truncate(System.Decimal)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Truncate(Decimal)\n  nameWithType: Math.Truncate(Decimal)\n  fullName: Math.Truncate(Decimal)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Calculates the integral part of a specified decimal number.\n  remarks: <xref:System.Math.Truncate%2A> rounds `d` to the nearest integer towards zero.\n  example:\n  - \"The following example calls the <xref:System.Math.Truncate%28System.Decimal%29> method to truncate both a positive and a negative <xref:System.Decimal> value.  \\n  \\n [!code-csharp[System.Math.Truncate#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Truncate/cs/Truncate1.cs#2)]\\n [!code-vb[System.Math.Truncate#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Truncate/vb/Truncate1.vb#2)]\"\n  syntax:\n    content: public static decimal Truncate (decimal d);\n    parameters:\n    - id: d\n      type: System.Decimal\n      description: A number to truncate.\n    return:\n      type: System.Decimal\n      description: The integral part of <code>d</code>; that is, the number that remains after any fractional digits have been discarded.\n  overload: System.Math.Truncate*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Math.Truncate(System.Double)\n  commentId: M:System.Math.Truncate(System.Double)\n  id: Truncate(System.Double)\n  parent: System.Math\n  langs:\n  - csharp\n  name: Truncate(Double)\n  nameWithType: Math.Truncate(Double)\n  fullName: Math.Truncate(Double)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Calculates the integral part of a specified double-precision floating-point number.\n  remarks: <xref:System.Math.Truncate%2A> rounds `d` to the nearest integer towards zero.\n  example:\n  - \"The following example calls the <xref:System.Math.Truncate%28System.Double%29> method to truncate both a positive and a negative <xref:System.Double> value.  \\n  \\n [!code-csharp[System.Math.Truncate#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Truncate/cs/Truncate1.cs#1)]\\n [!code-vb[System.Math.Truncate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Truncate/vb/Truncate1.vb#1)]\"\n  syntax:\n    content: public static double Truncate (double d);\n    parameters:\n    - id: d\n      type: System.Double\n      description: A number to truncate.\n    return:\n      type: System.Double\n      description: \"The integral part of <code>d</code>; that is, the number that remains after any fractional digits have been discarded, or one of the values listed in the following table.  \\n  \\n <table><thead><tr><th><code>d</code></th><th> Return value  \\n  \\n </th></tr></thead><tbody><tr><td><xref href=\\\"System.Double.NaN\\\"></xref></td><td><xref href=\\\"System.Double.NaN\\\"></xref></td></tr><tr><td><xref href=\\\"System.Double.NegativeInfinity\\\"></xref></td><td><xref href=\\\"System.Double.NegativeInfinity\\\"></xref></td></tr><tr><td><xref href=\\\"System.Double.PositiveInfinity\\\"></xref></td><td><xref href=\\\"System.Double.PositiveInfinity\\\"></xref></td></tr></tbody></table>\"\n  overload: System.Math.Truncate*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.OverflowException\n  parent: System\n  isExternal: false\n  name: OverflowException\n  nameWithType: OverflowException\n  fullName: System.OverflowException\n- uid: System.DivideByZeroException\n  parent: System\n  isExternal: false\n  name: DivideByZeroException\n  nameWithType: DivideByZeroException\n  fullName: System.DivideByZeroException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.ArithmeticException\n  parent: System\n  isExternal: false\n  name: ArithmeticException\n  nameWithType: ArithmeticException\n  fullName: System.ArithmeticException\n- uid: System.Math.Abs(System.Decimal)\n  parent: System.Math\n  isExternal: false\n  name: Abs(Decimal)\n  nameWithType: Math.Abs(Decimal)\n  fullName: Math.Abs(Decimal)\n- uid: System.Decimal\n  parent: System\n  isExternal: false\n  name: Decimal\n  nameWithType: Decimal\n  fullName: System.Decimal\n- uid: System.Math.Abs(System.Double)\n  parent: System.Math\n  isExternal: false\n  name: Abs(Double)\n  nameWithType: Math.Abs(Double)\n  fullName: Math.Abs(Double)\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.Math.Abs(System.Int16)\n  parent: System.Math\n  isExternal: false\n  name: Abs(Int16)\n  nameWithType: Math.Abs(Int16)\n  fullName: Math.Abs(Int16)\n- uid: System.Int16\n  parent: System\n  isExternal: false\n  name: Int16\n  nameWithType: Int16\n  fullName: System.Int16\n- uid: System.Math.Abs(System.Int32)\n  parent: System.Math\n  isExternal: false\n  name: Abs(Int32)\n  nameWithType: Math.Abs(Int32)\n  fullName: Math.Abs(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Math.Abs(System.Int64)\n  parent: System.Math\n  isExternal: false\n  name: Abs(Int64)\n  nameWithType: Math.Abs(Int64)\n  fullName: Math.Abs(Int64)\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.Math.Abs(System.SByte)\n  parent: System.Math\n  isExternal: false\n  name: Abs(SByte)\n  nameWithType: Math.Abs(SByte)\n  fullName: Math.Abs(SByte)\n- uid: System.SByte\n  parent: System\n  isExternal: false\n  name: SByte\n  nameWithType: SByte\n  fullName: System.SByte\n- uid: System.Math.Abs(System.Single)\n  parent: System.Math\n  isExternal: false\n  name: Abs(Single)\n  nameWithType: Math.Abs(Single)\n  fullName: Math.Abs(Single)\n- uid: System.Single\n  parent: System\n  isExternal: false\n  name: Single\n  nameWithType: Single\n  fullName: System.Single\n- uid: System.Math.Acos(System.Double)\n  parent: System.Math\n  isExternal: false\n  name: Acos(Double)\n  nameWithType: Math.Acos(Double)\n  fullName: Math.Acos(Double)\n- uid: System.Math.Asin(System.Double)\n  parent: System.Math\n  isExternal: false\n  name: Asin(Double)\n  nameWithType: Math.Asin(Double)\n  fullName: Math.Asin(Double)\n- uid: System.Math.Atan(System.Double)\n  parent: System.Math\n  isExternal: false\n  name: Atan(Double)\n  nameWithType: Math.Atan(Double)\n  fullName: Math.Atan(Double)\n- uid: System.Math.Atan2(System.Double,System.Double)\n  parent: System.Math\n  isExternal: false\n  name: Atan2(Double, Double)\n  nameWithType: Math.Atan2(Double, Double)\n  fullName: Math.Atan2(Double, Double)\n- uid: System.Math.BigMul(System.Int32,System.Int32)\n  parent: System.Math\n  isExternal: false\n  name: BigMul(Int32, Int32)\n  nameWithType: Math.BigMul(Int32, Int32)\n  fullName: Math.BigMul(Int32, Int32)\n- uid: System.Math.Ceiling(System.Decimal)\n  parent: System.Math\n  isExternal: false\n  name: Ceiling(Decimal)\n  nameWithType: Math.Ceiling(Decimal)\n  fullName: Math.Ceiling(Decimal)\n- uid: System.Math.Ceiling(System.Double)\n  parent: System.Math\n  isExternal: false\n  name: Ceiling(Double)\n  nameWithType: Math.Ceiling(Double)\n  fullName: Math.Ceiling(Double)\n- uid: System.Math.Clamp(System.UInt64,System.UInt64,System.UInt64)\n  parent: System.Math\n  isExternal: false\n  name: Clamp(UInt64, UInt64, UInt64)\n  nameWithType: Math.Clamp(UInt64, UInt64, UInt64)\n  fullName: Math.Clamp(UInt64, UInt64, UInt64)\n- uid: System.UInt64\n  parent: System\n  isExternal: false\n  name: UInt64\n  nameWithType: UInt64\n  fullName: System.UInt64\n- uid: System.Math.Clamp(System.UInt32,System.UInt32,System.UInt32)\n  parent: System.Math\n  isExternal: false\n  name: Clamp(UInt32, UInt32, UInt32)\n  nameWithType: Math.Clamp(UInt32, UInt32, UInt32)\n  fullName: Math.Clamp(UInt32, UInt32, UInt32)\n- uid: System.UInt32\n  parent: System\n  isExternal: false\n  name: UInt32\n  nameWithType: UInt32\n  fullName: System.UInt32\n- uid: System.Math.Clamp(System.UInt16,System.UInt16,System.UInt16)\n  parent: System.Math\n  isExternal: false\n  name: Clamp(UInt16, UInt16, UInt16)\n  nameWithType: Math.Clamp(UInt16, UInt16, UInt16)\n  fullName: Math.Clamp(UInt16, UInt16, UInt16)\n- uid: System.UInt16\n  parent: System\n  isExternal: false\n  name: UInt16\n  nameWithType: UInt16\n  fullName: System.UInt16\n- uid: System.Math.Clamp(System.Single,System.Single,System.Single)\n  parent: System.Math\n  isExternal: false\n  name: Clamp(Single, Single, Single)\n  nameWithType: Math.Clamp(Single, Single, Single)\n  fullName: Math.Clamp(Single, Single, Single)\n- uid: System.Math.Clamp(System.Int64,System.Int64,System.Int64)\n  parent: System.Math\n  isExternal: false\n  name: Clamp(Int64, Int64, Int64)\n  nameWithType: Math.Clamp(Int64, Int64, Int64)\n  fullName: Math.Clamp(Int64, Int64, Int64)\n- uid: System.Math.Clamp(System.SByte,System.SByte,System.SByte)\n  parent: System.Math\n  isExternal: false\n  name: Clamp(SByte, SByte, SByte)\n  nameWithType: Math.Clamp(SByte, SByte, SByte)\n  fullName: Math.Clamp(SByte, SByte, SByte)\n- uid: System.Math.Clamp(System.Int16,System.Int16,System.Int16)\n  parent: System.Math\n  isExternal: false\n  name: Clamp(Int16, Int16, Int16)\n  nameWithType: Math.Clamp(Int16, Int16, Int16)\n  fullName: Math.Clamp(Int16, Int16, Int16)\n- uid: System.Math.Clamp(System.Double,System.Double,System.Double)\n  parent: System.Math\n  isExternal: false\n  name: Clamp(Double, Double, Double)\n  nameWithType: Math.Clamp(Double, Double, Double)\n  fullName: Math.Clamp(Double, Double, Double)\n- uid: System.Math.Clamp(System.Decimal,System.Decimal,System.Decimal)\n  parent: System.Math\n  isExternal: false\n  name: Clamp(Decimal, Decimal, Decimal)\n  nameWithType: Math.Clamp(Decimal, Decimal, Decimal)\n  fullName: Math.Clamp(Decimal, Decimal, Decimal)\n- uid: System.Math.Clamp(System.Byte,System.Byte,System.Byte)\n  parent: System.Math\n  isExternal: false\n  name: Clamp(Byte, Byte, Byte)\n  nameWithType: Math.Clamp(Byte, Byte, Byte)\n  fullName: Math.Clamp(Byte, Byte, Byte)\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Math.Clamp(System.Int32,System.Int32,System.Int32)\n  parent: System.Math\n  isExternal: false\n  name: Clamp(Int32, Int32, Int32)\n  nameWithType: Math.Clamp(Int32, Int32, Int32)\n  fullName: Math.Clamp(Int32, Int32, Int32)\n- uid: System.Math.Cos(System.Double)\n  parent: System.Math\n  isExternal: false\n  name: Cos(Double)\n  nameWithType: Math.Cos(Double)\n  fullName: Math.Cos(Double)\n- uid: System.Math.Cosh(System.Double)\n  parent: System.Math\n  isExternal: false\n  name: Cosh(Double)\n  nameWithType: Math.Cosh(Double)\n  fullName: Math.Cosh(Double)\n- uid: System.Math.DivRem(System.Int64,System.Int64,System.Int64@)\n  parent: System.Math\n  isExternal: false\n  name: DivRem(Int64, Int64, Int64)\n  nameWithType: Math.DivRem(Int64, Int64, Int64)\n  fullName: Math.DivRem(Int64, Int64, Int64)\n- uid: System.Math.DivRem(System.Int32,System.Int32,System.Int32@)\n  parent: System.Math\n  isExternal: false\n  name: DivRem(Int32, Int32, Int32)\n  nameWithType: Math.DivRem(Int32, Int32, Int32)\n  fullName: Math.DivRem(Int32, Int32, Int32)\n- uid: System.Math.E\n  parent: System.Math\n  isExternal: false\n  name: E\n  nameWithType: Math.E\n  fullName: Math.E\n- uid: System.Math.Exp(System.Double)\n  parent: System.Math\n  isExternal: false\n  name: Exp(Double)\n  nameWithType: Math.Exp(Double)\n  fullName: Math.Exp(Double)\n- uid: System.Math.Floor(System.Decimal)\n  parent: System.Math\n  isExternal: false\n  name: Floor(Decimal)\n  nameWithType: Math.Floor(Decimal)\n  fullName: Math.Floor(Decimal)\n- uid: System.Math.Floor(System.Double)\n  parent: System.Math\n  isExternal: false\n  name: Floor(Double)\n  nameWithType: Math.Floor(Double)\n  fullName: Math.Floor(Double)\n- uid: System.Math.IEEERemainder(System.Double,System.Double)\n  parent: System.Math\n  isExternal: false\n  name: IEEERemainder(Double, Double)\n  nameWithType: Math.IEEERemainder(Double, Double)\n  fullName: Math.IEEERemainder(Double, Double)\n- uid: System.Math.Log(System.Double)\n  parent: System.Math\n  isExternal: false\n  name: Log(Double)\n  nameWithType: Math.Log(Double)\n  fullName: Math.Log(Double)\n- uid: System.Math.Log(System.Double,System.Double)\n  parent: System.Math\n  isExternal: false\n  name: Log(Double, Double)\n  nameWithType: Math.Log(Double, Double)\n  fullName: Math.Log(Double, Double)\n- uid: System.Math.Log10(System.Double)\n  parent: System.Math\n  isExternal: false\n  name: Log10(Double)\n  nameWithType: Math.Log10(Double)\n  fullName: Math.Log10(Double)\n- uid: System.Math.Max(System.UInt16,System.UInt16)\n  parent: System.Math\n  isExternal: false\n  name: Max(UInt16, UInt16)\n  nameWithType: Math.Max(UInt16, UInt16)\n  fullName: Math.Max(UInt16, UInt16)\n- uid: System.Math.Max(System.Single,System.Single)\n  parent: System.Math\n  isExternal: false\n  name: Max(Single, Single)\n  nameWithType: Math.Max(Single, Single)\n  fullName: Math.Max(Single, Single)\n- uid: System.Math.Max(System.UInt64,System.UInt64)\n  parent: System.Math\n  isExternal: false\n  name: Max(UInt64, UInt64)\n  nameWithType: Math.Max(UInt64, UInt64)\n  fullName: Math.Max(UInt64, UInt64)\n- uid: System.Math.Max(System.UInt32,System.UInt32)\n  parent: System.Math\n  isExternal: false\n  name: Max(UInt32, UInt32)\n  nameWithType: Math.Max(UInt32, UInt32)\n  fullName: Math.Max(UInt32, UInt32)\n- uid: System.Math.Max(System.SByte,System.SByte)\n  parent: System.Math\n  isExternal: false\n  name: Max(SByte, SByte)\n  nameWithType: Math.Max(SByte, SByte)\n  fullName: Math.Max(SByte, SByte)\n- uid: System.Math.Max(System.Int32,System.Int32)\n  parent: System.Math\n  isExternal: false\n  name: Max(Int32, Int32)\n  nameWithType: Math.Max(Int32, Int32)\n  fullName: Math.Max(Int32, Int32)\n- uid: System.Math.Max(System.Int16,System.Int16)\n  parent: System.Math\n  isExternal: false\n  name: Max(Int16, Int16)\n  nameWithType: Math.Max(Int16, Int16)\n  fullName: Math.Max(Int16, Int16)\n- uid: System.Math.Max(System.Double,System.Double)\n  parent: System.Math\n  isExternal: false\n  name: Max(Double, Double)\n  nameWithType: Math.Max(Double, Double)\n  fullName: Math.Max(Double, Double)\n- uid: System.Math.Max(System.Decimal,System.Decimal)\n  parent: System.Math\n  isExternal: false\n  name: Max(Decimal, Decimal)\n  nameWithType: Math.Max(Decimal, Decimal)\n  fullName: Math.Max(Decimal, Decimal)\n- uid: System.Math.Max(System.Byte,System.Byte)\n  parent: System.Math\n  isExternal: false\n  name: Max(Byte, Byte)\n  nameWithType: Math.Max(Byte, Byte)\n  fullName: Math.Max(Byte, Byte)\n- uid: System.Math.Max(System.Int64,System.Int64)\n  parent: System.Math\n  isExternal: false\n  name: Max(Int64, Int64)\n  nameWithType: Math.Max(Int64, Int64)\n  fullName: Math.Max(Int64, Int64)\n- uid: System.Math.Min(System.Int64,System.Int64)\n  parent: System.Math\n  isExternal: false\n  name: Min(Int64, Int64)\n  nameWithType: Math.Min(Int64, Int64)\n  fullName: Math.Min(Int64, Int64)\n- uid: System.Math.Min(System.UInt64,System.UInt64)\n  parent: System.Math\n  isExternal: false\n  name: Min(UInt64, UInt64)\n  nameWithType: Math.Min(UInt64, UInt64)\n  fullName: Math.Min(UInt64, UInt64)\n- uid: System.Math.Min(System.UInt32,System.UInt32)\n  parent: System.Math\n  isExternal: false\n  name: Min(UInt32, UInt32)\n  nameWithType: Math.Min(UInt32, UInt32)\n  fullName: Math.Min(UInt32, UInt32)\n- uid: System.Math.Min(System.UInt16,System.UInt16)\n  parent: System.Math\n  isExternal: false\n  name: Min(UInt16, UInt16)\n  nameWithType: Math.Min(UInt16, UInt16)\n  fullName: Math.Min(UInt16, UInt16)\n- uid: System.Math.Min(System.Single,System.Single)\n  parent: System.Math\n  isExternal: false\n  name: Min(Single, Single)\n  nameWithType: Math.Min(Single, Single)\n  fullName: Math.Min(Single, Single)\n- uid: System.Math.Min(System.SByte,System.SByte)\n  parent: System.Math\n  isExternal: false\n  name: Min(SByte, SByte)\n  nameWithType: Math.Min(SByte, SByte)\n  fullName: Math.Min(SByte, SByte)\n- uid: System.Math.Min(System.Int16,System.Int16)\n  parent: System.Math\n  isExternal: false\n  name: Min(Int16, Int16)\n  nameWithType: Math.Min(Int16, Int16)\n  fullName: Math.Min(Int16, Int16)\n- uid: System.Math.Min(System.Double,System.Double)\n  parent: System.Math\n  isExternal: false\n  name: Min(Double, Double)\n  nameWithType: Math.Min(Double, Double)\n  fullName: Math.Min(Double, Double)\n- uid: System.Math.Min(System.Decimal,System.Decimal)\n  parent: System.Math\n  isExternal: false\n  name: Min(Decimal, Decimal)\n  nameWithType: Math.Min(Decimal, Decimal)\n  fullName: Math.Min(Decimal, Decimal)\n- uid: System.Math.Min(System.Byte,System.Byte)\n  parent: System.Math\n  isExternal: false\n  name: Min(Byte, Byte)\n  nameWithType: Math.Min(Byte, Byte)\n  fullName: Math.Min(Byte, Byte)\n- uid: System.Math.Min(System.Int32,System.Int32)\n  parent: System.Math\n  isExternal: false\n  name: Min(Int32, Int32)\n  nameWithType: Math.Min(Int32, Int32)\n  fullName: Math.Min(Int32, Int32)\n- uid: System.Math.PI\n  parent: System.Math\n  isExternal: false\n  name: PI\n  nameWithType: Math.PI\n  fullName: Math.PI\n- uid: System.Math.Pow(System.Double,System.Double)\n  parent: System.Math\n  isExternal: false\n  name: Pow(Double, Double)\n  nameWithType: Math.Pow(Double, Double)\n  fullName: Math.Pow(Double, Double)\n- uid: System.Math.Round(System.Double)\n  parent: System.Math\n  isExternal: false\n  name: Round(Double)\n  nameWithType: Math.Round(Double)\n  fullName: Math.Round(Double)\n- uid: System.Math.Round(System.Decimal,System.Int32,System.MidpointRounding)\n  parent: System.Math\n  isExternal: false\n  name: Round(Decimal, Int32, MidpointRounding)\n  nameWithType: Math.Round(Decimal, Int32, MidpointRounding)\n  fullName: Math.Round(Decimal, Int32, MidpointRounding)\n- uid: System.MidpointRounding\n  parent: System\n  isExternal: false\n  name: MidpointRounding\n  nameWithType: MidpointRounding\n  fullName: System.MidpointRounding\n- uid: System.Math.Round(System.Double,System.Int32,System.MidpointRounding)\n  parent: System.Math\n  isExternal: false\n  name: Round(Double, Int32, MidpointRounding)\n  nameWithType: Math.Round(Double, Int32, MidpointRounding)\n  fullName: Math.Round(Double, Int32, MidpointRounding)\n- uid: System.Math.Round(System.Double,System.MidpointRounding)\n  parent: System.Math\n  isExternal: false\n  name: Round(Double, MidpointRounding)\n  nameWithType: Math.Round(Double, MidpointRounding)\n  fullName: Math.Round(Double, MidpointRounding)\n- uid: System.Math.Round(System.Decimal)\n  parent: System.Math\n  isExternal: false\n  name: Round(Decimal)\n  nameWithType: Math.Round(Decimal)\n  fullName: Math.Round(Decimal)\n- uid: System.Math.Round(System.Decimal,System.MidpointRounding)\n  parent: System.Math\n  isExternal: false\n  name: Round(Decimal, MidpointRounding)\n  nameWithType: Math.Round(Decimal, MidpointRounding)\n  fullName: Math.Round(Decimal, MidpointRounding)\n- uid: System.Math.Round(System.Decimal,System.Int32)\n  parent: System.Math\n  isExternal: false\n  name: Round(Decimal, Int32)\n  nameWithType: Math.Round(Decimal, Int32)\n  fullName: Math.Round(Decimal, Int32)\n- uid: System.Math.Round(System.Double,System.Int32)\n  parent: System.Math\n  isExternal: false\n  name: Round(Double, Int32)\n  nameWithType: Math.Round(Double, Int32)\n  fullName: Math.Round(Double, Int32)\n- uid: System.Math.Sign(System.Decimal)\n  parent: System.Math\n  isExternal: false\n  name: Sign(Decimal)\n  nameWithType: Math.Sign(Decimal)\n  fullName: Math.Sign(Decimal)\n- uid: System.Math.Sign(System.Double)\n  parent: System.Math\n  isExternal: false\n  name: Sign(Double)\n  nameWithType: Math.Sign(Double)\n  fullName: Math.Sign(Double)\n- uid: System.Math.Sign(System.Int16)\n  parent: System.Math\n  isExternal: false\n  name: Sign(Int16)\n  nameWithType: Math.Sign(Int16)\n  fullName: Math.Sign(Int16)\n- uid: System.Math.Sign(System.Int32)\n  parent: System.Math\n  isExternal: false\n  name: Sign(Int32)\n  nameWithType: Math.Sign(Int32)\n  fullName: Math.Sign(Int32)\n- uid: System.Math.Sign(System.Int64)\n  parent: System.Math\n  isExternal: false\n  name: Sign(Int64)\n  nameWithType: Math.Sign(Int64)\n  fullName: Math.Sign(Int64)\n- uid: System.Math.Sign(System.SByte)\n  parent: System.Math\n  isExternal: false\n  name: Sign(SByte)\n  nameWithType: Math.Sign(SByte)\n  fullName: Math.Sign(SByte)\n- uid: System.Math.Sign(System.Single)\n  parent: System.Math\n  isExternal: false\n  name: Sign(Single)\n  nameWithType: Math.Sign(Single)\n  fullName: Math.Sign(Single)\n- uid: System.Math.Sin(System.Double)\n  parent: System.Math\n  isExternal: false\n  name: Sin(Double)\n  nameWithType: Math.Sin(Double)\n  fullName: Math.Sin(Double)\n- uid: System.Math.Sinh(System.Double)\n  parent: System.Math\n  isExternal: false\n  name: Sinh(Double)\n  nameWithType: Math.Sinh(Double)\n  fullName: Math.Sinh(Double)\n- uid: System.Math.Sqrt(System.Double)\n  parent: System.Math\n  isExternal: false\n  name: Sqrt(Double)\n  nameWithType: Math.Sqrt(Double)\n  fullName: Math.Sqrt(Double)\n- uid: System.Math.Tan(System.Double)\n  parent: System.Math\n  isExternal: false\n  name: Tan(Double)\n  nameWithType: Math.Tan(Double)\n  fullName: Math.Tan(Double)\n- uid: System.Math.Tanh(System.Double)\n  parent: System.Math\n  isExternal: false\n  name: Tanh(Double)\n  nameWithType: Math.Tanh(Double)\n  fullName: Math.Tanh(Double)\n- uid: System.Math.Truncate(System.Decimal)\n  parent: System.Math\n  isExternal: false\n  name: Truncate(Decimal)\n  nameWithType: Math.Truncate(Decimal)\n  fullName: Math.Truncate(Decimal)\n- uid: System.Math.Truncate(System.Double)\n  parent: System.Math\n  isExternal: false\n  name: Truncate(Double)\n  nameWithType: Math.Truncate(Double)\n  fullName: Math.Truncate(Double)\n- uid: System.Math.Ceiling*\n  parent: System.Math\n  isExternal: false\n  name: Ceiling\n  nameWithType: Math.Ceiling\n  fullName: Math.Ceiling\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n- uid: System.Math.Floor*\n  parent: System.Math\n  isExternal: false\n  name: Floor\n  nameWithType: Math.Floor\n  fullName: Math.Floor\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n- uid: System.Math.Round*\n  parent: System.Math\n  isExternal: false\n  name: Round\n  nameWithType: Math.Round\n  fullName: Math.Round\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n- uid: System.Math.Truncate*\n  parent: System.Math\n  isExternal: false\n  name: Truncate\n  nameWithType: Math.Truncate\n  fullName: Math.Truncate\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n- uid: System.Math.Abs*\n  parent: System.Math\n  isExternal: false\n  name: Abs\n  nameWithType: Math.Abs\n  fullName: Math.Abs\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n- uid: System.Math.Acos*\n  parent: System.Math\n  isExternal: false\n  name: Acos\n  nameWithType: Math.Acos\n  fullName: Math.Acos\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n- uid: System.Math.Asin*\n  parent: System.Math\n  isExternal: false\n  name: Asin\n  nameWithType: Math.Asin\n  fullName: Math.Asin\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n- uid: System.Math.Atan*\n  parent: System.Math\n  isExternal: false\n  name: Atan\n  nameWithType: Math.Atan\n  fullName: Math.Atan\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n- uid: System.Math.Atan2*\n  parent: System.Math\n  isExternal: false\n  name: Atan2\n  nameWithType: Math.Atan2\n  fullName: Math.Atan2\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n- uid: System.Math.BigMul*\n  parent: System.Math\n  isExternal: false\n  name: BigMul\n  nameWithType: Math.BigMul\n  fullName: Math.BigMul\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n- uid: System.Math.Clamp*\n  parent: System.Math\n  isExternal: false\n  name: Clamp\n  nameWithType: Math.Clamp\n  fullName: Math.Clamp\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n- uid: System.Math.Cos*\n  parent: System.Math\n  isExternal: false\n  name: Cos\n  nameWithType: Math.Cos\n  fullName: Math.Cos\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n- uid: System.Math.Cosh*\n  parent: System.Math\n  isExternal: false\n  name: Cosh\n  nameWithType: Math.Cosh\n  fullName: Math.Cosh\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n- uid: System.Math.DivRem*\n  parent: System.Math\n  isExternal: false\n  name: DivRem\n  nameWithType: Math.DivRem\n  fullName: Math.DivRem\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n- uid: System.Math.Exp*\n  parent: System.Math\n  isExternal: false\n  name: Exp\n  nameWithType: Math.Exp\n  fullName: Math.Exp\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n- uid: System.Math.IEEERemainder*\n  parent: System.Math\n  isExternal: false\n  name: IEEERemainder\n  nameWithType: Math.IEEERemainder\n  fullName: Math.IEEERemainder\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n- uid: System.Math.Log*\n  parent: System.Math\n  isExternal: false\n  name: Log\n  nameWithType: Math.Log\n  fullName: Math.Log\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n- uid: System.Math.Log10*\n  parent: System.Math\n  isExternal: false\n  name: Log10\n  nameWithType: Math.Log10\n  fullName: Math.Log10\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n- uid: System.Math.Max*\n  parent: System.Math\n  isExternal: false\n  name: Max\n  nameWithType: Math.Max\n  fullName: Math.Max\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n- uid: System.Math.Min*\n  parent: System.Math\n  isExternal: false\n  name: Min\n  nameWithType: Math.Min\n  fullName: Math.Min\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n- uid: System.Math.Pow*\n  parent: System.Math\n  isExternal: false\n  name: Pow\n  nameWithType: Math.Pow\n  fullName: Math.Pow\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n- uid: System.Math.Sign*\n  parent: System.Math\n  isExternal: false\n  name: Sign\n  nameWithType: Math.Sign\n  fullName: Math.Sign\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n- uid: System.Math.Sin*\n  parent: System.Math\n  isExternal: false\n  name: Sin\n  nameWithType: Math.Sin\n  fullName: Math.Sin\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n- uid: System.Math.Sinh*\n  parent: System.Math\n  isExternal: false\n  name: Sinh\n  nameWithType: Math.Sinh\n  fullName: Math.Sinh\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n- uid: System.Math.Sqrt*\n  parent: System.Math\n  isExternal: false\n  name: Sqrt\n  nameWithType: Math.Sqrt\n  fullName: Math.Sqrt\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n- uid: System.Math.Tan*\n  parent: System.Math\n  isExternal: false\n  name: Tan\n  nameWithType: Math.Tan\n  fullName: Math.Tan\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n- uid: System.Math.Tanh*\n  parent: System.Math\n  isExternal: false\n  name: Tanh\n  nameWithType: Math.Tanh\n  fullName: Math.Tanh\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Math.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}