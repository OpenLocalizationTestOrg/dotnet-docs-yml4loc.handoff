{"nodes":[{"content":"Provides functionalities to register and unregister delegates for event notifications, as well as set ownership for windows.","nodes":[{"pos":[0,124],"content":"Provides functionalities to register and unregister delegates for event notifications, as well as set ownership for windows.","nodes":[{"content":"Provides functionalities to register and unregister delegates for event notifications, as well as set ownership for windows.","pos":[0,124]}]}],"pos":[1089,1214],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Activities.Presentation.Hosting.WindowHelperService\"></xref> class with the specific handle to a parent window.","nodes":[{"pos":[0,164],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Activities.Presentation.Hosting.WindowHelperService\"&gt;&lt;/xref&gt;</ph> class with the specific handle to a parent window.","source":"Initializes a new instance of the <xref href=\"System.Activities.Presentation.Hosting.WindowHelperService\"></xref> class with the specific handle to a parent window."}],"pos":[2760,2925],"yaml":true},{"content":"A handle to a parent window.","nodes":[{"pos":[0,28],"content":"A handle to a parent window.","nodes":[{"content":"A handle to a parent window.","pos":[0,28]}]}],"pos":[3066,3095],"yaml":true},{"content":"Gets or sets the handle of the parent window.","nodes":[{"pos":[0,45],"content":"Gets or sets the handle of the parent window.","nodes":[{"content":"Gets or sets the handle of the parent window.","pos":[0,45]}]}],"pos":[4286,4332],"yaml":true},{"content":"Returns <xref href=\"System.IntPtr\"></xref>.","nodes":[{"pos":[0,43],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.IntPtr\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.IntPtr\"></xref>."}],"pos":[4452,4496],"yaml":true},{"content":"Registers the specified delegate for event notifications.","nodes":[{"pos":[0,57],"content":"Registers the specified delegate for event notifications.","nodes":[{"content":"Registers the specified delegate for event notifications.","pos":[0,57]}]}],"pos":[5975,6033],"yaml":true},{"content":"The delegate to be registered for event notifications.","nodes":[{"pos":[0,54],"content":"The delegate to be registered for event notifications.","nodes":[{"content":"The delegate to be registered for event notifications.","pos":[0,54]}]}],"pos":[6281,6336],"yaml":true},{"content":"`true` if the operation is successful; otherwise, `false`.","nodes":[{"pos":[0,58],"content":"<ph id=\"ph1\">`true`</ph> if the operation is successful; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the operation is successful; otherwise, `false`."}],"pos":[6394,6455],"yaml":true},{"content":"<code>callback</code> is `null`.","nodes":[{"pos":[0,32],"content":"<ph id=\"ph1\">&lt;code&gt;callback&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>callback</code> is `null`."}],"pos":[6664,6697],"yaml":true},{"content":"Assigns the window to be the owner of the specified window.","nodes":[{"pos":[0,59],"content":"Assigns the window to be the owner of the specified window.","nodes":[{"content":"Assigns the window to be the owner of the specified window.","pos":[0,59]}]}],"pos":[8040,8100],"yaml":true},{"content":"The owner of <code>target</code>.","nodes":[{"pos":[0,33],"content":"The owner of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">target</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The owner of <code>target</code>."}],"pos":[8321,8355],"yaml":true},{"content":"The window that is to be owned by <code>source</code>.","nodes":[{"pos":[0,54],"content":"The window that is to be owned by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The window that is to be owned by <code>source</code>."}],"pos":[8425,8480],"yaml":true},{"content":"`true` if the operation is successful; otherwise, `false`.","nodes":[{"pos":[0,58],"content":"<ph id=\"ph1\">`true`</ph> if the operation is successful; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the operation is successful; otherwise, `false`."}],"pos":[8538,8599],"yaml":true},{"content":"Unregisters the specified delegate for event notifications.","nodes":[{"pos":[0,59],"content":"Unregisters the specified delegate for event notifications.","nodes":[{"content":"Unregisters the specified delegate for event notifications.","pos":[0,59]}]}],"pos":[10091,10151],"yaml":true},{"content":"The delegate to be removed from event notifications.","nodes":[{"pos":[0,52],"content":"The delegate to be removed from event notifications.","nodes":[{"content":"The delegate to be removed from event notifications.","pos":[0,52]}]}],"pos":[10401,10454],"yaml":true},{"content":"`true` if the operation is successful; otherwise, `false`.","nodes":[{"pos":[0,58],"content":"<ph id=\"ph1\">`true`</ph> if the operation is successful; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the operation is successful; otherwise, `false`."}],"pos":[10512,10573],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Activities.Presentation.Hosting.WindowHelperService\n  commentId: T:System.Activities.Presentation.Hosting.WindowHelperService\n  id: WindowHelperService\n  children:\n  - System.Activities.Presentation.Hosting.WindowHelperService.#ctor(System.IntPtr)\n  - System.Activities.Presentation.Hosting.WindowHelperService.ParentWindowHwnd\n  - System.Activities.Presentation.Hosting.WindowHelperService.RegisterWindowMessageHandler(System.Activities.Presentation.Hosting.WindowMessage)\n  - System.Activities.Presentation.Hosting.WindowHelperService.TrySetWindowOwner(System.Windows.DependencyObject,System.Windows.Window)\n  - System.Activities.Presentation.Hosting.WindowHelperService.UnregisterWindowMessageHandler(System.Activities.Presentation.Hosting.WindowMessage)\n  langs:\n  - csharp\n  name: WindowHelperService\n  nameWithType: WindowHelperService\n  fullName: System.Activities.Presentation.Hosting.WindowHelperService\n  type: Class\n  assemblies:\n  - System.Activities.Presentation\n  namespace: System.Activities.Presentation.Hosting\n  summary: Provides functionalities to register and unregister delegates for event notifications, as well as set ownership for windows.\n  syntax:\n    content: public class WindowHelperService\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Presentation.Hosting/WindowHelperService.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.Presentation.Hosting.WindowHelperService.#ctor(System.IntPtr)\n  commentId: M:System.Activities.Presentation.Hosting.WindowHelperService.#ctor(System.IntPtr)\n  id: '#ctor(System.IntPtr)'\n  parent: System.Activities.Presentation.Hosting.WindowHelperService\n  langs:\n  - csharp\n  name: WindowHelperService(IntPtr)\n  nameWithType: WindowHelperService.WindowHelperService(IntPtr)\n  fullName: WindowHelperService.WindowHelperService(IntPtr)\n  type: Constructor\n  assemblies:\n  - System.Activities.Presentation\n  namespace: System.Activities.Presentation.Hosting\n  summary: Initializes a new instance of the <xref href=\"System.Activities.Presentation.Hosting.WindowHelperService\"></xref> class with the specific handle to a parent window.\n  syntax:\n    content: public WindowHelperService (IntPtr hwnd);\n    parameters:\n    - id: hwnd\n      type: System.IntPtr\n      description: A handle to a parent window.\n  overload: System.Activities.Presentation.Hosting.WindowHelperService.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Presentation.Hosting/WindowHelperService.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.Presentation.Hosting.WindowHelperService.ParentWindowHwnd\n  commentId: P:System.Activities.Presentation.Hosting.WindowHelperService.ParentWindowHwnd\n  id: ParentWindowHwnd\n  parent: System.Activities.Presentation.Hosting.WindowHelperService\n  langs:\n  - csharp\n  name: ParentWindowHwnd\n  nameWithType: WindowHelperService.ParentWindowHwnd\n  fullName: WindowHelperService.ParentWindowHwnd\n  type: Property\n  assemblies:\n  - System.Activities.Presentation\n  namespace: System.Activities.Presentation.Hosting\n  summary: Gets or sets the handle of the parent window.\n  syntax:\n    content: public IntPtr ParentWindowHwnd { get; }\n    return:\n      type: System.IntPtr\n      description: Returns <xref href=\"System.IntPtr\"></xref>.\n  overload: System.Activities.Presentation.Hosting.WindowHelperService.ParentWindowHwnd*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Presentation.Hosting/WindowHelperService.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.Presentation.Hosting.WindowHelperService.RegisterWindowMessageHandler(System.Activities.Presentation.Hosting.WindowMessage)\n  commentId: M:System.Activities.Presentation.Hosting.WindowHelperService.RegisterWindowMessageHandler(System.Activities.Presentation.Hosting.WindowMessage)\n  id: RegisterWindowMessageHandler(System.Activities.Presentation.Hosting.WindowMessage)\n  parent: System.Activities.Presentation.Hosting.WindowHelperService\n  langs:\n  - csharp\n  name: RegisterWindowMessageHandler(WindowMessage)\n  nameWithType: WindowHelperService.RegisterWindowMessageHandler(WindowMessage)\n  fullName: WindowHelperService.RegisterWindowMessageHandler(WindowMessage)\n  type: Method\n  assemblies:\n  - System.Activities.Presentation\n  namespace: System.Activities.Presentation.Hosting\n  summary: Registers the specified delegate for event notifications.\n  syntax:\n    content: public bool RegisterWindowMessageHandler (System.Activities.Presentation.Hosting.WindowMessage callback);\n    parameters:\n    - id: callback\n      type: System.Activities.Presentation.Hosting.WindowMessage\n      description: The delegate to be registered for event notifications.\n    return:\n      type: System.Boolean\n      description: '`true` if the operation is successful; otherwise, `false`.'\n  overload: System.Activities.Presentation.Hosting.WindowHelperService.RegisterWindowMessageHandler*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>callback</code> is `null`.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Presentation.Hosting/WindowHelperService.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.Presentation.Hosting.WindowHelperService.TrySetWindowOwner(System.Windows.DependencyObject,System.Windows.Window)\n  commentId: M:System.Activities.Presentation.Hosting.WindowHelperService.TrySetWindowOwner(System.Windows.DependencyObject,System.Windows.Window)\n  id: TrySetWindowOwner(System.Windows.DependencyObject,System.Windows.Window)\n  parent: System.Activities.Presentation.Hosting.WindowHelperService\n  langs:\n  - csharp\n  name: TrySetWindowOwner(DependencyObject, Window)\n  nameWithType: WindowHelperService.TrySetWindowOwner(DependencyObject, Window)\n  fullName: WindowHelperService.TrySetWindowOwner(DependencyObject, Window)\n  type: Method\n  assemblies:\n  - System.Activities.Presentation\n  namespace: System.Activities.Presentation.Hosting\n  summary: Assigns the window to be the owner of the specified window.\n  syntax:\n    content: public bool TrySetWindowOwner (System.Windows.DependencyObject source, System.Windows.Window target);\n    parameters:\n    - id: source\n      type: System.Windows.DependencyObject\n      description: The owner of <code>target</code>.\n    - id: target\n      type: System.Windows.Window\n      description: The window that is to be owned by <code>source</code>.\n    return:\n      type: System.Boolean\n      description: '`true` if the operation is successful; otherwise, `false`.'\n  overload: System.Activities.Presentation.Hosting.WindowHelperService.TrySetWindowOwner*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Presentation.Hosting/WindowHelperService.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.Presentation.Hosting.WindowHelperService.UnregisterWindowMessageHandler(System.Activities.Presentation.Hosting.WindowMessage)\n  commentId: M:System.Activities.Presentation.Hosting.WindowHelperService.UnregisterWindowMessageHandler(System.Activities.Presentation.Hosting.WindowMessage)\n  id: UnregisterWindowMessageHandler(System.Activities.Presentation.Hosting.WindowMessage)\n  parent: System.Activities.Presentation.Hosting.WindowHelperService\n  langs:\n  - csharp\n  name: UnregisterWindowMessageHandler(WindowMessage)\n  nameWithType: WindowHelperService.UnregisterWindowMessageHandler(WindowMessage)\n  fullName: WindowHelperService.UnregisterWindowMessageHandler(WindowMessage)\n  type: Method\n  assemblies:\n  - System.Activities.Presentation\n  namespace: System.Activities.Presentation.Hosting\n  summary: Unregisters the specified delegate for event notifications.\n  syntax:\n    content: public bool UnregisterWindowMessageHandler (System.Activities.Presentation.Hosting.WindowMessage callback);\n    parameters:\n    - id: callback\n      type: System.Activities.Presentation.Hosting.WindowMessage\n      description: The delegate to be removed from event notifications.\n    return:\n      type: System.Boolean\n      description: '`true` if the operation is successful; otherwise, `false`.'\n  overload: System.Activities.Presentation.Hosting.WindowHelperService.UnregisterWindowMessageHandler*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Presentation.Hosting/WindowHelperService.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.Activities.Presentation.Hosting.WindowHelperService.#ctor(System.IntPtr)\n  parent: System.Activities.Presentation.Hosting.WindowHelperService\n  isExternal: false\n  name: WindowHelperService(IntPtr)\n  nameWithType: WindowHelperService.WindowHelperService(IntPtr)\n  fullName: WindowHelperService.WindowHelperService(IntPtr)\n- uid: System.IntPtr\n  parent: System\n  isExternal: false\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.Activities.Presentation.Hosting.WindowHelperService.ParentWindowHwnd\n  parent: System.Activities.Presentation.Hosting.WindowHelperService\n  isExternal: false\n  name: ParentWindowHwnd\n  nameWithType: WindowHelperService.ParentWindowHwnd\n  fullName: WindowHelperService.ParentWindowHwnd\n- uid: System.Activities.Presentation.Hosting.WindowHelperService.RegisterWindowMessageHandler(System.Activities.Presentation.Hosting.WindowMessage)\n  parent: System.Activities.Presentation.Hosting.WindowHelperService\n  isExternal: false\n  name: RegisterWindowMessageHandler(WindowMessage)\n  nameWithType: WindowHelperService.RegisterWindowMessageHandler(WindowMessage)\n  fullName: WindowHelperService.RegisterWindowMessageHandler(WindowMessage)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Activities.Presentation.Hosting.WindowMessage\n  parent: System.Activities.Presentation.Hosting\n  isExternal: false\n  name: WindowMessage\n  nameWithType: WindowMessage\n  fullName: System.Activities.Presentation.Hosting.WindowMessage\n- uid: System.Activities.Presentation.Hosting.WindowHelperService.TrySetWindowOwner(System.Windows.DependencyObject,System.Windows.Window)\n  parent: System.Activities.Presentation.Hosting.WindowHelperService\n  isExternal: false\n  name: TrySetWindowOwner(DependencyObject, Window)\n  nameWithType: WindowHelperService.TrySetWindowOwner(DependencyObject, Window)\n  fullName: WindowHelperService.TrySetWindowOwner(DependencyObject, Window)\n- uid: System.Windows.DependencyObject\n  parent: System.Windows\n  isExternal: false\n  name: DependencyObject\n  nameWithType: DependencyObject\n  fullName: System.Windows.DependencyObject\n- uid: System.Windows.Window\n  parent: System.Windows\n  isExternal: false\n  name: Window\n  nameWithType: Window\n  fullName: System.Windows.Window\n- uid: System.Activities.Presentation.Hosting.WindowHelperService.UnregisterWindowMessageHandler(System.Activities.Presentation.Hosting.WindowMessage)\n  parent: System.Activities.Presentation.Hosting.WindowHelperService\n  isExternal: false\n  name: UnregisterWindowMessageHandler(WindowMessage)\n  nameWithType: WindowHelperService.UnregisterWindowMessageHandler(WindowMessage)\n  fullName: WindowHelperService.UnregisterWindowMessageHandler(WindowMessage)\n- uid: System.Activities.Presentation.Hosting.WindowHelperService.#ctor*\n  parent: System.Activities.Presentation.Hosting.WindowHelperService\n  isExternal: false\n  name: WindowHelperService\n  nameWithType: WindowHelperService.WindowHelperService\n  fullName: WindowHelperService.WindowHelperService\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Presentation.Hosting/WindowHelperService.xml\n- uid: System.Activities.Presentation.Hosting.WindowHelperService.ParentWindowHwnd*\n  parent: System.Activities.Presentation.Hosting.WindowHelperService\n  isExternal: false\n  name: ParentWindowHwnd\n  nameWithType: WindowHelperService.ParentWindowHwnd\n  fullName: WindowHelperService.ParentWindowHwnd\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Presentation.Hosting/WindowHelperService.xml\n- uid: System.Activities.Presentation.Hosting.WindowHelperService.RegisterWindowMessageHandler*\n  parent: System.Activities.Presentation.Hosting.WindowHelperService\n  isExternal: false\n  name: RegisterWindowMessageHandler\n  nameWithType: WindowHelperService.RegisterWindowMessageHandler\n  fullName: WindowHelperService.RegisterWindowMessageHandler\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Presentation.Hosting/WindowHelperService.xml\n- uid: System.Activities.Presentation.Hosting.WindowHelperService.TrySetWindowOwner*\n  parent: System.Activities.Presentation.Hosting.WindowHelperService\n  isExternal: false\n  name: TrySetWindowOwner\n  nameWithType: WindowHelperService.TrySetWindowOwner\n  fullName: WindowHelperService.TrySetWindowOwner\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Presentation.Hosting/WindowHelperService.xml\n- uid: System.Activities.Presentation.Hosting.WindowHelperService.UnregisterWindowMessageHandler*\n  parent: System.Activities.Presentation.Hosting.WindowHelperService\n  isExternal: false\n  name: UnregisterWindowMessageHandler\n  nameWithType: WindowHelperService.UnregisterWindowMessageHandler\n  fullName: WindowHelperService.UnregisterWindowMessageHandler\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Presentation.Hosting/WindowHelperService.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}