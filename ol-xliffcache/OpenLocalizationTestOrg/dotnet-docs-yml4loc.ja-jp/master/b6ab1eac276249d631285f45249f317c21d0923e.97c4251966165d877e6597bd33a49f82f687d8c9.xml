{"nodes":[{"content":"Provides a buffer that allows a fallback handler to return an alternate string to an encoder when it cannot encode an input character.","nodes":[{"pos":[0,134],"content":"Provides a buffer that allows a fallback handler to return an alternate string to an encoder when it cannot encode an input character.","nodes":[{"content":"Provides a buffer that allows a fallback handler to return an alternate string to an encoder when it cannot encode an input character.","pos":[0,134]}]}],"pos":[832,967],"yaml":true},{"content":"An encoding defines a mapping between a Unicode character and an encoded sequence of bytes. An encoding operation, which converts an input character to an output byte sequence, fails if no mapping is defined for a particular character.  \n  \n The .NET Framework provides a failure handling mechanism, called a fallback, if a conversion cannot be performed. All encoder fallback handlers must implement the following:  \n  \n-   An encoder fallback, which is represented by a class derived from the <xref:System.Text.EncoderFallback> class.  \n  \n-   An encoder fallback buffer, which is represented by a type derived from the <xref:System.Text.EncoderFallbackBuffer> class that can return a string to the conversion operation.  \n  \n Fallbacks can use three strategies to handle conversion failures:  \n  \n-   Best-fit mapping. The encoder fallback buffer can return a string that represents a close approximation to the input character. The .NET Framework does not provide a public best-fit <xref:System.Text.EncoderFallbackBuffer> implementation.  \n  \n-   Replacement. The encoder fallback buffer can return a string, such as a question mark (\"?\"), that indicates that a character could not be encoded. In the .NET Framework, the <xref:System.Text.EncoderReplacementFallback> and <xref:System.Text.EncoderReplacementFallbackBuffer> classes provide a public replacement fallback buffer implementation. The constructor of the <xref:System.Text.EncoderReplacementFallback> class enables you to define the replacement string.  \n  \n-   Exception. The <xref:System.Text.EncoderFallbackBuffer> implementation throws an exception, which indicates that a character cannot be encoded, and terminates the encoding operation. In this case, the fallback handler must provide an <xref:System.Text.EncoderFallbackBuffer> implementation, although it does not return a string to the encoder. In the .NET Framework, the <xref:System.Text.EncoderExceptionFallback> and <xref:System.Text.EncoderExceptionFallbackBuffer> classes provide a public exception fallback implementation that throws an <xref:System.Text.EncoderFallbackException> when a character cannot be encoded.  \n  \n The buffer in an <xref:System.Text.EncoderFallbackBuffer> implementation represents the entire string to be returned to the encoder in response to an encoder fallback. Generally, implementations also include state information, such as the index of the next character to return to the encoder and the number of remaining characters to be returned. Because <xref:System.Text.EncoderFallbackBuffer> is an abstract class, it requires derived classes to implement the following members at a minimum:  \n  \n-   The overloaded <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> method, which is called by the encoder when it cannot encode a character. The encoder passes two pieces of information to the fallback buffer implementation: the character or surrogate pair that could not be encoded and the index of the character in the input. In an encoder fallback exception handler, the exception is thrown in this method. Otherwise, the method returns `true` if it provides a fallback, or `false` if it does not.  \n  \n-   The <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> method, which is called repeatedly by the encoder if the <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> method returns `true`. In successive calls, the handler should return each character in its buffer. When it has returned all characters, it should return U+0000. An exception handler always returns U+0000.  \n  \n-   The <xref:System.Text.EncoderFallbackBuffer.MovePrevious%2A> method, which tries to move the pointer to the previous position in the buffer and indicates whether the move was successful. An exception handler always returns `false`.  \n  \n-   The <xref:System.Text.EncoderFallbackBuffer.Remaining%2A> property, which indicates the number of remaining characters to be returned to the encoder. An exception fallback handler always returns zero.","nodes":[{"pos":[0,235],"content":"An encoding defines a mapping between a Unicode character and an encoded sequence of bytes. An encoding operation, which converts an input character to an output byte sequence, fails if no mapping is defined for a particular character.","nodes":[{"content":"An encoding defines a mapping between a Unicode character and an encoded sequence of bytes. An encoding operation, which converts an input character to an output byte sequence, fails if no mapping is defined for a particular character.","pos":[0,235],"nodes":[{"content":"An encoding defines a mapping between a Unicode character and an encoded sequence of bytes.","pos":[0,91]},{"content":"An encoding operation, which converts an input character to an output byte sequence, fails if no mapping is defined for a particular character.","pos":[92,235]}]}]},{"pos":[242,415],"content":"The .NET Framework provides a failure handling mechanism, called a fallback, if a conversion cannot be performed. All encoder fallback handlers must implement the following:","nodes":[{"content":"The .NET Framework provides a failure handling mechanism, called a fallback, if a conversion cannot be performed. All encoder fallback handlers must implement the following:","pos":[0,173],"nodes":[{"content":"The .NET Framework provides a failure handling mechanism, called a fallback, if a conversion cannot be performed.","pos":[0,113]},{"content":"All encoder fallback handlers must implement the following:","pos":[114,173]}]}]},{"pos":[425,536],"content":"An encoder fallback, which is represented by a class derived from the <xref:System.Text.EncoderFallback> class.","nodes":[{"content":"An encoder fallback, which is represented by a class derived from the <ph id=\"ph1\">&lt;xref:System.Text.EncoderFallback&gt;</ph> class.","pos":[0,111],"source":"An encoder fallback, which is represented by a class derived from the <xref:System.Text.EncoderFallback> class."}]},{"pos":[546,722],"content":"An encoder fallback buffer, which is represented by a type derived from the <xref:System.Text.EncoderFallbackBuffer> class that can return a string to the conversion operation.","nodes":[{"content":"An encoder fallback buffer, which is represented by a type derived from the <ph id=\"ph1\">&lt;xref:System.Text.EncoderFallbackBuffer&gt;</ph> class that can return a string to the conversion operation.","pos":[0,176],"source":"An encoder fallback buffer, which is represented by a type derived from the <xref:System.Text.EncoderFallbackBuffer> class that can return a string to the conversion operation."}]},{"pos":[729,794],"content":"Fallbacks can use three strategies to handle conversion failures:","nodes":[{"content":"Fallbacks can use three strategies to handle conversion failures:","pos":[0,65]}]},{"pos":[804,1042],"content":"Best-fit mapping. The encoder fallback buffer can return a string that represents a close approximation to the input character. The .NET Framework does not provide a public best-fit <xref:System.Text.EncoderFallbackBuffer> implementation.","nodes":[{"content":"Best-fit mapping. The encoder fallback buffer can return a string that represents a close approximation to the input character. The .NET Framework does not provide a public best-fit <xref:System.Text.EncoderFallbackBuffer> implementation.","pos":[0,238],"nodes":[{"content":"Best-fit mapping.","pos":[0,17]},{"content":"The encoder fallback buffer can return a string that represents a close approximation to the input character.","pos":[18,127]},{"content":"The .NET Framework does not provide a public best-fit <ph id=\"ph1\">&lt;xref:System.Text.EncoderFallbackBuffer&gt;</ph> implementation.","pos":[128,238],"source":" The .NET Framework does not provide a public best-fit <xref:System.Text.EncoderFallbackBuffer> implementation."}]}]},{"pos":[1052,1517],"content":"Replacement. The encoder fallback buffer can return a string, such as a question mark (\"?\"), that indicates that a character could not be encoded. In the .NET Framework, the <xref:System.Text.EncoderReplacementFallback> and <xref:System.Text.EncoderReplacementFallbackBuffer> classes provide a public replacement fallback buffer implementation. The constructor of the <xref:System.Text.EncoderReplacementFallback> class enables you to define the replacement string.","nodes":[{"content":"Replacement. The encoder fallback buffer can return a string, such as a question mark (\"?\"), that indicates that a character could not be encoded. In the .NET Framework, the <xref:System.Text.EncoderReplacementFallback> and <xref:System.Text.EncoderReplacementFallbackBuffer> classes provide a public replacement fallback buffer implementation. The constructor of the <xref:System.Text.EncoderReplacementFallback> class enables you to define the replacement string.","pos":[0,465],"nodes":[{"content":"Replacement.","pos":[0,12]},{"content":"The encoder fallback buffer can return a string, such as a question mark (\"?\"), that indicates that a character could not be encoded.","pos":[13,146]},{"content":"In the .NET Framework, the <ph id=\"ph1\">&lt;xref:System.Text.EncoderReplacementFallback&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Text.EncoderReplacementFallbackBuffer&gt;</ph> classes provide a public replacement fallback buffer implementation.","pos":[147,344],"source":" In the .NET Framework, the <xref:System.Text.EncoderReplacementFallback> and <xref:System.Text.EncoderReplacementFallbackBuffer> classes provide a public replacement fallback buffer implementation."},{"content":"The constructor of the <ph id=\"ph1\">&lt;xref:System.Text.EncoderReplacementFallback&gt;</ph> class enables you to define the replacement string.","pos":[345,465],"source":" The constructor of the <xref:System.Text.EncoderReplacementFallback> class enables you to define the replacement string."}]}]},{"pos":[1527,2149],"content":"Exception. The <xref:System.Text.EncoderFallbackBuffer> implementation throws an exception, which indicates that a character cannot be encoded, and terminates the encoding operation. In this case, the fallback handler must provide an <xref:System.Text.EncoderFallbackBuffer> implementation, although it does not return a string to the encoder. In the .NET Framework, the <xref:System.Text.EncoderExceptionFallback> and <xref:System.Text.EncoderExceptionFallbackBuffer> classes provide a public exception fallback implementation that throws an <xref:System.Text.EncoderFallbackException> when a character cannot be encoded.","nodes":[{"content":"Exception. The <xref:System.Text.EncoderFallbackBuffer> implementation throws an exception, which indicates that a character cannot be encoded, and terminates the encoding operation. In this case, the fallback handler must provide an <xref:System.Text.EncoderFallbackBuffer> implementation, although it does not return a string to the encoder. In the .NET Framework, the <xref:System.Text.EncoderExceptionFallback> and <xref:System.Text.EncoderExceptionFallbackBuffer> classes provide a public exception fallback implementation that throws an <xref:System.Text.EncoderFallbackException> when a character cannot be encoded.","pos":[0,622],"nodes":[{"content":"Exception.","pos":[0,10]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.EncoderFallbackBuffer&gt;</ph> implementation throws an exception, which indicates that a character cannot be encoded, and terminates the encoding operation.","pos":[11,182],"source":" The <xref:System.Text.EncoderFallbackBuffer> implementation throws an exception, which indicates that a character cannot be encoded, and terminates the encoding operation."},{"content":"In this case, the fallback handler must provide an <ph id=\"ph1\">&lt;xref:System.Text.EncoderFallbackBuffer&gt;</ph> implementation, although it does not return a string to the encoder.","pos":[183,343],"source":" In this case, the fallback handler must provide an <xref:System.Text.EncoderFallbackBuffer> implementation, although it does not return a string to the encoder."},{"content":"In the .NET Framework, the <ph id=\"ph1\">&lt;xref:System.Text.EncoderExceptionFallback&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Text.EncoderExceptionFallbackBuffer&gt;</ph> classes provide a public exception fallback implementation that throws an <ph id=\"ph3\">&lt;xref:System.Text.EncoderFallbackException&gt;</ph> when a character cannot be encoded.","pos":[344,622],"source":" In the .NET Framework, the <xref:System.Text.EncoderExceptionFallback> and <xref:System.Text.EncoderExceptionFallbackBuffer> classes provide a public exception fallback implementation that throws an <xref:System.Text.EncoderFallbackException> when a character cannot be encoded."}]}]},{"pos":[2156,2650],"content":"The buffer in an <xref:System.Text.EncoderFallbackBuffer> implementation represents the entire string to be returned to the encoder in response to an encoder fallback. Generally, implementations also include state information, such as the index of the next character to return to the encoder and the number of remaining characters to be returned. Because <xref:System.Text.EncoderFallbackBuffer> is an abstract class, it requires derived classes to implement the following members at a minimum:","nodes":[{"content":"The buffer in an <xref:System.Text.EncoderFallbackBuffer> implementation represents the entire string to be returned to the encoder in response to an encoder fallback. Generally, implementations also include state information, such as the index of the next character to return to the encoder and the number of remaining characters to be returned. Because <xref:System.Text.EncoderFallbackBuffer> is an abstract class, it requires derived classes to implement the following members at a minimum:","pos":[0,494],"nodes":[{"content":"The buffer in an <ph id=\"ph1\">&lt;xref:System.Text.EncoderFallbackBuffer&gt;</ph> implementation represents the entire string to be returned to the encoder in response to an encoder fallback.","pos":[0,167],"source":"The buffer in an <xref:System.Text.EncoderFallbackBuffer> implementation represents the entire string to be returned to the encoder in response to an encoder fallback."},{"content":"Generally, implementations also include state information, such as the index of the next character to return to the encoder and the number of remaining characters to be returned.","pos":[168,346]},{"content":"Because <ph id=\"ph1\">&lt;xref:System.Text.EncoderFallbackBuffer&gt;</ph> is an abstract class, it requires derived classes to implement the following members at a minimum:","pos":[347,494],"source":" Because <xref:System.Text.EncoderFallbackBuffer> is an abstract class, it requires derived classes to implement the following members at a minimum:"}]}]},{"pos":[2660,3161],"content":"The overloaded <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> method, which is called by the encoder when it cannot encode a character. The encoder passes two pieces of information to the fallback buffer implementation: the character or surrogate pair that could not be encoded and the index of the character in the input. In an encoder fallback exception handler, the exception is thrown in this method. Otherwise, the method returns `true` if it provides a fallback, or `false` if it does not.","nodes":[{"content":"The overloaded <ph id=\"ph1\">&lt;xref:System.Text.EncoderFallbackBuffer.Fallback%2A&gt;</ph> method, which is called by the encoder when it cannot encode a character.","pos":[0,141],"source":"The overloaded <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> method, which is called by the encoder when it cannot encode a character."},{"content":"The encoder passes two pieces of information to the fallback buffer implementation: the character or surrogate pair that could not be encoded and the index of the character in the input.","pos":[142,328]},{"content":"In an encoder fallback exception handler, the exception is thrown in this method.","pos":[329,410]},{"content":"Otherwise, the method returns <ph id=\"ph1\">`true`</ph> if it provides a fallback, or <ph id=\"ph2\">`false`</ph> if it does not.","pos":[411,501],"source":" Otherwise, the method returns `true` if it provides a fallback, or `false` if it does not."}]},{"pos":[3171,3546],"content":"The <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> method, which is called repeatedly by the encoder if the <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> method returns `true`. In successive calls, the handler should return each character in its buffer. When it has returned all characters, it should return U+0000. An exception handler always returns U+0000.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A&gt;</ph> method, which is called repeatedly by the encoder if the <ph id=\"ph2\">&lt;xref:System.Text.EncoderFallbackBuffer.Fallback%2A&gt;</ph> method returns <ph id=\"ph3\">`true`</ph>.","pos":[0,192],"source":"The <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> method, which is called repeatedly by the encoder if the <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> method returns `true`."},{"content":"In successive calls, the handler should return each character in its buffer.","pos":[193,269]},{"content":"When it has returned all characters, it should return U+0000.","pos":[270,331]},{"content":"An exception handler always returns U+0000.","pos":[332,375]}]},{"pos":[3556,3787],"content":"The <xref:System.Text.EncoderFallbackBuffer.MovePrevious%2A> method, which tries to move the pointer to the previous position in the buffer and indicates whether the move was successful. An exception handler always returns `false`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.EncoderFallbackBuffer.MovePrevious%2A&gt;</ph> method, which tries to move the pointer to the previous position in the buffer and indicates whether the move was successful.","pos":[0,186],"source":"The <xref:System.Text.EncoderFallbackBuffer.MovePrevious%2A> method, which tries to move the pointer to the previous position in the buffer and indicates whether the move was successful."},{"content":"An exception handler always returns <ph id=\"ph1\">`false`</ph>.","pos":[187,231],"source":" An exception handler always returns `false`."}]},{"pos":[3797,3997],"content":"The <xref:System.Text.EncoderFallbackBuffer.Remaining%2A> property, which indicates the number of remaining characters to be returned to the encoder. An exception fallback handler always returns zero.","nodes":[{"content":"The <xref:System.Text.EncoderFallbackBuffer.Remaining%2A> property, which indicates the number of remaining characters to be returned to the encoder. An exception fallback handler always returns zero.","pos":[0,200],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.EncoderFallbackBuffer.Remaining%2A&gt;</ph> property, which indicates the number of remaining characters to be returned to the encoder.","pos":[0,149],"source":"The <xref:System.Text.EncoderFallbackBuffer.Remaining%2A> property, which indicates the number of remaining characters to be returned to the encoder."},{"content":"An exception fallback handler always returns zero.","pos":[150,200]}]}]}],"pos":[978,5004],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Text.EncoderFallbackBuffer\"></xref> class.","nodes":[{"pos":[0,95],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Text.EncoderFallbackBuffer\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Text.EncoderFallbackBuffer\"></xref> class."}],"pos":[6918,7014],"yaml":true},{"content":"When overridden in a derived class, prepares the fallback buffer to handle the specified input character.","nodes":[{"pos":[0,105],"content":"When overridden in a derived class, prepares the fallback buffer to handle the specified input character.","nodes":[{"content":"When overridden in a derived class, prepares the fallback buffer to handle the specified input character.","pos":[0,105]}]}],"pos":[8625,8731],"yaml":true},{"content":"The <xref:System.Text.Encoding.GetBytes%2A?displayProperty=fullName> and <xref:System.Text.Encoder.Convert%2A?displayProperty=fullName> methods call <xref:System.Text.DecoderFallbackBuffer.Fallback%28System.Byte%5B%5D%2CSystem.Int32%29> if they encounter an unknown input character that cannot be encoded. A return value of `true` indicates that the fallback buffer can process the input character, which causes the calling method to call the <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> method to obtain each character of the fallback buffer. Because it does not process individual characters, the <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> method in an exception fallback handler throws an exception.","nodes":[{"pos":[0,723],"content":"The <xref:System.Text.Encoding.GetBytes%2A?displayProperty=fullName> and <xref:System.Text.Encoder.Convert%2A?displayProperty=fullName> methods call <xref:System.Text.DecoderFallbackBuffer.Fallback%28System.Byte%5B%5D%2CSystem.Int32%29> if they encounter an unknown input character that cannot be encoded. A return value of `true` indicates that the fallback buffer can process the input character, which causes the calling method to call the <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> method to obtain each character of the fallback buffer. Because it does not process individual characters, the <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> method in an exception fallback handler throws an exception.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.Encoding.GetBytes%2A?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Text.Encoder.Convert%2A?displayProperty=fullName&gt;</ph> methods call <ph id=\"ph3\">&lt;xref:System.Text.DecoderFallbackBuffer.Fallback%28System.Byte%5B%5D%2CSystem.Int32%29&gt;</ph> if they encounter an unknown input character that cannot be encoded.","pos":[0,305],"source":"The <xref:System.Text.Encoding.GetBytes%2A?displayProperty=fullName> and <xref:System.Text.Encoder.Convert%2A?displayProperty=fullName> methods call <xref:System.Text.DecoderFallbackBuffer.Fallback%28System.Byte%5B%5D%2CSystem.Int32%29> if they encounter an unknown input character that cannot be encoded."},{"content":"A return value of <ph id=\"ph1\">`true`</ph> indicates that the fallback buffer can process the input character, which causes the calling method to call the <ph id=\"ph2\">&lt;xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A&gt;</ph> method to obtain each character of the fallback buffer.","pos":[306,554],"source":" A return value of `true` indicates that the fallback buffer can process the input character, which causes the calling method to call the <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> method to obtain each character of the fallback buffer."},{"content":"Because it does not process individual characters, the <ph id=\"ph1\">&lt;xref:System.Text.EncoderFallbackBuffer.Fallback%2A&gt;</ph> method in an exception fallback handler throws an exception.","pos":[555,723],"source":" Because it does not process individual characters, the <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> method in an exception fallback handler throws an exception."}]}],"pos":[8742,9466],"yaml":true,"extradata":"MT"},{"content":"An input character.","nodes":[{"pos":[0,19],"content":"An input character.","nodes":[{"content":"An input character.","pos":[0,19]}]}],"pos":[9631,9651],"yaml":true},{"content":"The index position of the character in the input buffer.","nodes":[{"pos":[0,56],"content":"The index position of the character in the input buffer.","nodes":[{"content":"The index position of the character in the input buffer.","pos":[0,56]}]}],"pos":[9711,9768],"yaml":true},{"content":"`true` if the fallback buffer can process <code>charUnknown</code>; `false` if the fallback buffer ignores <code>charUnknown</code>.","nodes":[{"pos":[0,132],"content":"<ph id=\"ph1\">`true`</ph> if the fallback buffer can process <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">charUnknown</ph><ept id=\"p1\">&lt;/code&gt;</ept>; <ph id=\"ph3\">`false`</ph> if the fallback buffer ignores <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph4\">charUnknown</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"`true` if the fallback buffer can process <code>charUnknown</code>; `false` if the fallback buffer ignores <code>charUnknown</code>."}],"pos":[9826,9961],"yaml":true},{"content":"When overridden in a derived class, prepares the fallback buffer to handle the specified surrogate pair.","nodes":[{"pos":[0,104],"content":"When overridden in a derived class, prepares the fallback buffer to handle the specified surrogate pair.","nodes":[{"content":"When overridden in a derived class, prepares the fallback buffer to handle the specified surrogate pair.","pos":[0,104]}]}],"pos":[11551,11656],"yaml":true},{"content":"The <xref:System.Text.Encoding.GetBytes%2A?displayProperty=fullName> and <xref:System.Text.Encoder.Convert%2A?displayProperty=fullName> methods call <xref:System.Text.EncoderFallbackBuffer.Fallback%28System.Char%2CSystem.Char%2CSystem.Int32%29> if they encounter a surrogate pair in their input. A return value of `true` indicates that the fallback buffer can process the surrogate pair, which causes the calling method to call the <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> method to obtain each character of the fallback buffer.  Because it does not process individual characters, the <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> method in an exception fallback handler throws an exception.","nodes":[{"pos":[0,713],"content":"The <xref:System.Text.Encoding.GetBytes%2A?displayProperty=fullName> and <xref:System.Text.Encoder.Convert%2A?displayProperty=fullName> methods call <xref:System.Text.EncoderFallbackBuffer.Fallback%28System.Char%2CSystem.Char%2CSystem.Int32%29> if they encounter a surrogate pair in their input. A return value of `true` indicates that the fallback buffer can process the surrogate pair, which causes the calling method to call the <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> method to obtain each character of the fallback buffer.  Because it does not process individual characters, the <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> method in an exception fallback handler throws an exception.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.Encoding.GetBytes%2A?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Text.Encoder.Convert%2A?displayProperty=fullName&gt;</ph> methods call <ph id=\"ph3\">&lt;xref:System.Text.EncoderFallbackBuffer.Fallback%28System.Char%2CSystem.Char%2CSystem.Int32%29&gt;</ph> if they encounter a surrogate pair in their input.","pos":[0,295],"source":"The <xref:System.Text.Encoding.GetBytes%2A?displayProperty=fullName> and <xref:System.Text.Encoder.Convert%2A?displayProperty=fullName> methods call <xref:System.Text.EncoderFallbackBuffer.Fallback%28System.Char%2CSystem.Char%2CSystem.Int32%29> if they encounter a surrogate pair in their input."},{"content":"A return value of <ph id=\"ph1\">`true`</ph> indicates that the fallback buffer can process the surrogate pair, which causes the calling method to call the <ph id=\"ph2\">&lt;xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A&gt;</ph> method to obtain each character of the fallback buffer.","pos":[296,543],"source":" A return value of `true` indicates that the fallback buffer can process the surrogate pair, which causes the calling method to call the <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> method to obtain each character of the fallback buffer."},{"content":"Because it does not process individual characters, the <ph id=\"ph1\">&lt;xref:System.Text.EncoderFallbackBuffer.Fallback%2A&gt;</ph> method in an exception fallback handler throws an exception.","pos":[545,713],"source":"  Because it does not process individual characters, the <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> method in an exception fallback handler throws an exception."}]}],"pos":[11667,12381],"yaml":true,"extradata":"MT"},{"content":"The high surrogate of the input pair.","nodes":[{"pos":[0,37],"content":"The high surrogate of the input pair.","nodes":[{"content":"The high surrogate of the input pair.","pos":[0,37]}]}],"pos":[12575,12613],"yaml":true},{"content":"The low surrogate of the input pair.","nodes":[{"pos":[0,36],"content":"The low surrogate of the input pair.","nodes":[{"content":"The low surrogate of the input pair.","pos":[0,36]}]}],"pos":[12681,12718],"yaml":true},{"content":"The index position of the surrogate pair in the input buffer.","nodes":[{"pos":[0,61],"content":"The index position of the surrogate pair in the input buffer.","nodes":[{"content":"The index position of the surrogate pair in the input buffer.","pos":[0,61]}]}],"pos":[12778,12840],"yaml":true},{"content":"`true` if the fallback buffer can process <code>charUnknownHigh</code> and <code>charUnknownLow</code>; `false` if the fallback buffer ignores the surrogate pair.","nodes":[{"pos":[0,162],"content":"<ph id=\"ph1\">`true`</ph> if the fallback buffer can process <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">charUnknownHigh</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">charUnknownLow</ph><ept id=\"p2\">&lt;/code&gt;</ept>; <ph id=\"ph4\">`false`</ph> if the fallback buffer ignores the surrogate pair.","source":"`true` if the fallback buffer can process <code>charUnknownHigh</code> and <code>charUnknownLow</code>; `false` if the fallback buffer ignores the surrogate pair."}],"pos":[12898,13063],"yaml":true},{"content":"When overridden in a derived class, retrieves the next character in the fallback buffer.","nodes":[{"pos":[0,88],"content":"When overridden in a derived class, retrieves the next character in the fallback buffer.","nodes":[{"content":"When overridden in a derived class, retrieves the next character in the fallback buffer.","pos":[0,88]}]}],"pos":[14506,14595],"yaml":true},{"content":"An encoding operation calls the <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> method if the operation encounters an unknown character or surrogate pair in the input. For example, in the case of a replacement fallback, if the <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> method returns `true`, a substitute string exists that can be encoded instead of the unknown input. The encoding operation calls the <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> method repeatedly and obtains the substitute string one character at a time. When all characters in the fallback buffer have been returned to the encoder, the <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> method should return U+0000.  \n  \n For an exception fallback handler, the <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> method should return U+0000.","nodes":[{"pos":[0,717],"content":"An encoding operation calls the <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> method if the operation encounters an unknown character or surrogate pair in the input. For example, in the case of a replacement fallback, if the <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> method returns `true`, a substitute string exists that can be encoded instead of the unknown input. The encoding operation calls the <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> method repeatedly and obtains the substitute string one character at a time. When all characters in the fallback buffer have been returned to the encoder, the <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> method should return U+0000.","nodes":[{"content":"An encoding operation calls the <ph id=\"ph1\">&lt;xref:System.Text.EncoderFallbackBuffer.Fallback%2A&gt;</ph> method if the operation encounters an unknown character or surrogate pair in the input.","pos":[0,172],"source":"An encoding operation calls the <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> method if the operation encounters an unknown character or surrogate pair in the input."},{"content":"For example, in the case of a replacement fallback, if the <ph id=\"ph1\">&lt;xref:System.Text.EncoderFallbackBuffer.Fallback%2A&gt;</ph> method returns <ph id=\"ph2\">`true`</ph>, a substitute string exists that can be encoded instead of the unknown input.","pos":[173,384],"source":" For example, in the case of a replacement fallback, if the <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> method returns `true`, a substitute string exists that can be encoded instead of the unknown input."},{"content":"The encoding operation calls the <ph id=\"ph1\">&lt;xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A&gt;</ph> method repeatedly and obtains the substitute string one character at a time.","pos":[385,550],"source":" The encoding operation calls the <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> method repeatedly and obtains the substitute string one character at a time."},{"content":"When all characters in the fallback buffer have been returned to the encoder, the <ph id=\"ph1\">&lt;xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A&gt;</ph> method should return U+0000.","pos":[551,717],"source":" When all characters in the fallback buffer have been returned to the encoder, the <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> method should return U+0000."}]},{"pos":[724,847],"content":"For an exception fallback handler, the <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> method should return U+0000.","nodes":[{"content":"For an exception fallback handler, the <ph id=\"ph1\">&lt;xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A&gt;</ph> method should return U+0000.","pos":[0,123],"source":"For an exception fallback handler, the <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> method should return U+0000."}]}],"pos":[14606,15458],"yaml":true,"extradata":"MT"},{"content":"The next character in the fallback buffer.","nodes":[{"pos":[0,42],"content":"The next character in the fallback buffer.","nodes":[{"content":"The next character in the fallback buffer.","pos":[0,42]}]}],"pos":[15592,15635],"yaml":true},{"content":"When overridden in a derived class, causes the next call to the <xref href=\"System.Text.EncoderFallbackBuffer.GetNextChar\"></xref> method to access the data buffer character position that is prior to the current character position.","nodes":[{"pos":[0,231],"content":"When overridden in a derived class, causes the next call to the <ph id=\"ph1\">&lt;xref href=\"System.Text.EncoderFallbackBuffer.GetNextChar\"&gt;&lt;/xref&gt;</ph> method to access the data buffer character position that is prior to the current character position.","source":"When overridden in a derived class, causes the next call to the <xref href=\"System.Text.EncoderFallbackBuffer.GetNextChar\"></xref> method to access the data buffer character position that is prior to the current character position."}],"pos":[17087,17319],"yaml":true},{"content":"An exception fallback handler should return `false`.","nodes":[{"pos":[0,52],"content":"An exception fallback handler should return <ph id=\"ph1\">`false`</ph>.","source":"An exception fallback handler should return `false`."}],"pos":[17330,17383],"yaml":true,"extradata":"MT"},{"content":"`true` if the <xref href=\"System.Text.EncoderFallbackBuffer.MovePrevious\"></xref> operation was successful; otherwise, `false`.","nodes":[{"pos":[0,127],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Text.EncoderFallbackBuffer.MovePrevious\"&gt;&lt;/xref&gt;</ph> operation was successful; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <xref href=\"System.Text.EncoderFallbackBuffer.MovePrevious\"></xref> operation was successful; otherwise, `false`."}],"pos":[17521,17651],"yaml":true},{"content":"When overridden in a derived class, gets the number of characters in the current <xref href=\"System.Text.EncoderFallbackBuffer\"></xref> object that remain to be processed.","nodes":[{"pos":[0,171],"content":"When overridden in a derived class, gets the number of characters in the current <ph id=\"ph1\">&lt;xref href=\"System.Text.EncoderFallbackBuffer\"&gt;&lt;/xref&gt;</ph> object that remain to be processed.","source":"When overridden in a derived class, gets the number of characters in the current <xref href=\"System.Text.EncoderFallbackBuffer\"></xref> object that remain to be processed."}],"pos":[19082,19254],"yaml":true},{"content":"The <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> method returns `true` if <xref:System.Text.EncoderFallbackBuffer.Remaining%2A> is a nonzero value.  \n  \n For an exception fallback handler, the <xref:System.Text.DecoderFallbackBuffer.Remaining%2A> method should return zero.","nodes":[{"pos":[0,155],"content":"The <ph id=\"ph1\">&lt;xref:System.Text.EncoderFallbackBuffer.Fallback%2A&gt;</ph> method returns <ph id=\"ph2\">`true`</ph> if <ph id=\"ph3\">&lt;xref:System.Text.EncoderFallbackBuffer.Remaining%2A&gt;</ph> is a nonzero value.","source":"The <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> method returns `true` if <xref:System.Text.EncoderFallbackBuffer.Remaining%2A> is a nonzero value."},{"pos":[162,281],"content":"For an exception fallback handler, the <xref:System.Text.DecoderFallbackBuffer.Remaining%2A> method should return zero.","nodes":[{"content":"For an exception fallback handler, the <ph id=\"ph1\">&lt;xref:System.Text.DecoderFallbackBuffer.Remaining%2A&gt;</ph> method should return zero.","pos":[0,119],"source":"For an exception fallback handler, the <xref:System.Text.DecoderFallbackBuffer.Remaining%2A> method should return zero."}]}],"pos":[19265,19551],"yaml":true,"extradata":"MT"},{"content":"The number of characters in the current fallback buffer that have not yet been processed.","nodes":[{"pos":[0,89],"content":"The number of characters in the current fallback buffer that have not yet been processed.","nodes":[{"content":"The number of characters in the current fallback buffer that have not yet been processed.","pos":[0,89]}]}],"pos":[19669,19759],"yaml":true},{"content":"Initializes all data and state information pertaining to this fallback buffer.","nodes":[{"pos":[0,78],"content":"Initializes all data and state information pertaining to this fallback buffer.","nodes":[{"content":"Initializes all data and state information pertaining to this fallback buffer.","pos":[0,78]}]}],"pos":[21167,21246],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Text.EncoderFallbackBuffer\n  commentId: T:System.Text.EncoderFallbackBuffer\n  id: EncoderFallbackBuffer\n  children:\n  - System.Text.EncoderFallbackBuffer.#ctor\n  - System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Int32)\n  - System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)\n  - System.Text.EncoderFallbackBuffer.GetNextChar\n  - System.Text.EncoderFallbackBuffer.MovePrevious\n  - System.Text.EncoderFallbackBuffer.Remaining\n  - System.Text.EncoderFallbackBuffer.Reset\n  langs:\n  - csharp\n  name: EncoderFallbackBuffer\n  nameWithType: EncoderFallbackBuffer\n  fullName: System.Text.EncoderFallbackBuffer\n  type: Class\n  assemblies:\n  - System.Text.Encoding\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Text\n  summary: Provides a buffer that allows a fallback handler to return an alternate string to an encoder when it cannot encode an input character.\n  remarks: \"An encoding defines a mapping between a Unicode character and an encoded sequence of bytes. An encoding operation, which converts an input character to an output byte sequence, fails if no mapping is defined for a particular character.  \\n  \\n The .NET Framework provides a failure handling mechanism, called a fallback, if a conversion cannot be performed. All encoder fallback handlers must implement the following:  \\n  \\n-   An encoder fallback, which is represented by a class derived from the <xref:System.Text.EncoderFallback> class.  \\n  \\n-   An encoder fallback buffer, which is represented by a type derived from the <xref:System.Text.EncoderFallbackBuffer> class that can return a string to the conversion operation.  \\n  \\n Fallbacks can use three strategies to handle conversion failures:  \\n  \\n-   Best-fit mapping. The encoder fallback buffer can return a string that represents a close approximation to the input character. The .NET Framework does not provide a public best-fit <xref:System.Text.EncoderFallbackBuffer> implementation.  \\n  \\n-   Replacement. The encoder fallback buffer can return a string, such as a question mark (\\\"?\\\"), that indicates that a character could not be encoded. In the .NET Framework, the <xref:System.Text.EncoderReplacementFallback> and <xref:System.Text.EncoderReplacementFallbackBuffer> classes provide a public replacement fallback buffer implementation. The constructor of the <xref:System.Text.EncoderReplacementFallback> class enables you to define the replacement string.  \\n  \\n-   Exception. The <xref:System.Text.EncoderFallbackBuffer> implementation throws an exception, which indicates that a character cannot be encoded, and terminates the encoding operation. In this case, the fallback handler must provide an <xref:System.Text.EncoderFallbackBuffer> implementation, although it does not return a string to the encoder. In the .NET Framework, the <xref:System.Text.EncoderExceptionFallback> and <xref:System.Text.EncoderExceptionFallbackBuffer> classes provide a public exception fallback implementation that throws an <xref:System.Text.EncoderFallbackException> when a character cannot be encoded.  \\n  \\n The buffer in an <xref:System.Text.EncoderFallbackBuffer> implementation represents the entire string to be returned to the encoder in response to an encoder fallback. Generally, implementations also include state information, such as the index of the next character to return to the encoder and the number of remaining characters to be returned. Because <xref:System.Text.EncoderFallbackBuffer> is an abstract class, it requires derived classes to implement the following members at a minimum:  \\n  \\n-   The overloaded <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> method, which is called by the encoder when it cannot encode a character. The encoder passes two pieces of information to the fallback buffer implementation: the character or surrogate pair that could not be encoded and the index of the character in the input. In an encoder fallback exception handler, the exception is thrown in this method. Otherwise, the method returns `true` if it provides a fallback, or `false` if it does not.  \\n  \\n-   The <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> method, which is called repeatedly by the encoder if the <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> method returns `true`. In successive calls, the handler should return each character in its buffer. When it has returned all characters, it should return U+0000. An exception handler always returns U+0000.  \\n  \\n-   The <xref:System.Text.EncoderFallbackBuffer.MovePrevious%2A> method, which tries to move the pointer to the previous position in the buffer and indicates whether the move was successful. An exception handler always returns `false`.  \\n  \\n-   The <xref:System.Text.EncoderFallbackBuffer.Remaining%2A> property, which indicates the number of remaining characters to be returned to the encoder. An exception fallback handler always returns zero.\"\n  syntax:\n    content: public abstract class EncoderFallbackBuffer\n  inheritance:\n  - System.Object\n  derivedClasses:\n  - System.Text.EncoderExceptionFallbackBuffer\n  - System.Text.EncoderReplacementFallbackBuffer\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/EncoderFallbackBuffer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.EncoderFallbackBuffer.#ctor\n  commentId: M:System.Text.EncoderFallbackBuffer.#ctor\n  id: '#ctor'\n  parent: System.Text.EncoderFallbackBuffer\n  langs:\n  - csharp\n  name: EncoderFallbackBuffer()\n  nameWithType: EncoderFallbackBuffer.EncoderFallbackBuffer()\n  fullName: EncoderFallbackBuffer.EncoderFallbackBuffer()\n  type: Constructor\n  assemblies:\n  - System.Text.Encoding\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Text\n  summary: Initializes a new instance of the <xref href=\"System.Text.EncoderFallbackBuffer\"></xref> class.\n  syntax:\n    content: protected EncoderFallbackBuffer ();\n    parameters: []\n  overload: System.Text.EncoderFallbackBuffer.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/EncoderFallbackBuffer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Int32)\n  commentId: M:System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Int32)\n  id: Fallback(System.Char,System.Int32)\n  parent: System.Text.EncoderFallbackBuffer\n  langs:\n  - csharp\n  name: Fallback(Char, Int32)\n  nameWithType: EncoderFallbackBuffer.Fallback(Char, Int32)\n  fullName: EncoderFallbackBuffer.Fallback(Char, Int32)\n  type: Method\n  assemblies:\n  - System.Text.Encoding\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Text\n  summary: When overridden in a derived class, prepares the fallback buffer to handle the specified input character.\n  remarks: The <xref:System.Text.Encoding.GetBytes%2A?displayProperty=fullName> and <xref:System.Text.Encoder.Convert%2A?displayProperty=fullName> methods call <xref:System.Text.DecoderFallbackBuffer.Fallback%28System.Byte%5B%5D%2CSystem.Int32%29> if they encounter an unknown input character that cannot be encoded. A return value of `true` indicates that the fallback buffer can process the input character, which causes the calling method to call the <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> method to obtain each character of the fallback buffer. Because it does not process individual characters, the <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> method in an exception fallback handler throws an exception.\n  syntax:\n    content: public abstract bool Fallback (char charUnknown, int index);\n    parameters:\n    - id: charUnknown\n      type: System.Char\n      description: An input character.\n    - id: index\n      type: System.Int32\n      description: The index position of the character in the input buffer.\n    return:\n      type: System.Boolean\n      description: '`true` if the fallback buffer can process <code>charUnknown</code>; `false` if the fallback buffer ignores <code>charUnknown</code>.'\n  overload: System.Text.EncoderFallbackBuffer.Fallback*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/EncoderFallbackBuffer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)\n  commentId: M:System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)\n  id: Fallback(System.Char,System.Char,System.Int32)\n  parent: System.Text.EncoderFallbackBuffer\n  langs:\n  - csharp\n  name: Fallback(Char, Char, Int32)\n  nameWithType: EncoderFallbackBuffer.Fallback(Char, Char, Int32)\n  fullName: EncoderFallbackBuffer.Fallback(Char, Char, Int32)\n  type: Method\n  assemblies:\n  - System.Text.Encoding\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Text\n  summary: When overridden in a derived class, prepares the fallback buffer to handle the specified surrogate pair.\n  remarks: The <xref:System.Text.Encoding.GetBytes%2A?displayProperty=fullName> and <xref:System.Text.Encoder.Convert%2A?displayProperty=fullName> methods call <xref:System.Text.EncoderFallbackBuffer.Fallback%28System.Char%2CSystem.Char%2CSystem.Int32%29> if they encounter a surrogate pair in their input. A return value of `true` indicates that the fallback buffer can process the surrogate pair, which causes the calling method to call the <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> method to obtain each character of the fallback buffer.  Because it does not process individual characters, the <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> method in an exception fallback handler throws an exception.\n  syntax:\n    content: public abstract bool Fallback (char charUnknownHigh, char charUnknownLow, int index);\n    parameters:\n    - id: charUnknownHigh\n      type: System.Char\n      description: The high surrogate of the input pair.\n    - id: charUnknownLow\n      type: System.Char\n      description: The low surrogate of the input pair.\n    - id: index\n      type: System.Int32\n      description: The index position of the surrogate pair in the input buffer.\n    return:\n      type: System.Boolean\n      description: '`true` if the fallback buffer can process <code>charUnknownHigh</code> and <code>charUnknownLow</code>; `false` if the fallback buffer ignores the surrogate pair.'\n  overload: System.Text.EncoderFallbackBuffer.Fallback*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/EncoderFallbackBuffer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.EncoderFallbackBuffer.GetNextChar\n  commentId: M:System.Text.EncoderFallbackBuffer.GetNextChar\n  id: GetNextChar\n  parent: System.Text.EncoderFallbackBuffer\n  langs:\n  - csharp\n  name: GetNextChar()\n  nameWithType: EncoderFallbackBuffer.GetNextChar()\n  fullName: EncoderFallbackBuffer.GetNextChar()\n  type: Method\n  assemblies:\n  - System.Text.Encoding\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Text\n  summary: When overridden in a derived class, retrieves the next character in the fallback buffer.\n  remarks: \"An encoding operation calls the <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> method if the operation encounters an unknown character or surrogate pair in the input. For example, in the case of a replacement fallback, if the <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> method returns `true`, a substitute string exists that can be encoded instead of the unknown input. The encoding operation calls the <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> method repeatedly and obtains the substitute string one character at a time. When all characters in the fallback buffer have been returned to the encoder, the <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> method should return U+0000.  \\n  \\n For an exception fallback handler, the <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> method should return U+0000.\"\n  syntax:\n    content: public abstract char GetNextChar ();\n    parameters: []\n    return:\n      type: System.Char\n      description: The next character in the fallback buffer.\n  overload: System.Text.EncoderFallbackBuffer.GetNextChar*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/EncoderFallbackBuffer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.EncoderFallbackBuffer.MovePrevious\n  commentId: M:System.Text.EncoderFallbackBuffer.MovePrevious\n  id: MovePrevious\n  parent: System.Text.EncoderFallbackBuffer\n  langs:\n  - csharp\n  name: MovePrevious()\n  nameWithType: EncoderFallbackBuffer.MovePrevious()\n  fullName: EncoderFallbackBuffer.MovePrevious()\n  type: Method\n  assemblies:\n  - System.Text.Encoding\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Text\n  summary: When overridden in a derived class, causes the next call to the <xref href=\"System.Text.EncoderFallbackBuffer.GetNextChar\"></xref> method to access the data buffer character position that is prior to the current character position.\n  remarks: An exception fallback handler should return `false`.\n  syntax:\n    content: public abstract bool MovePrevious ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Text.EncoderFallbackBuffer.MovePrevious\"></xref> operation was successful; otherwise, `false`.'\n  overload: System.Text.EncoderFallbackBuffer.MovePrevious*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/EncoderFallbackBuffer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.EncoderFallbackBuffer.Remaining\n  commentId: P:System.Text.EncoderFallbackBuffer.Remaining\n  id: Remaining\n  parent: System.Text.EncoderFallbackBuffer\n  langs:\n  - csharp\n  name: Remaining\n  nameWithType: EncoderFallbackBuffer.Remaining\n  fullName: EncoderFallbackBuffer.Remaining\n  type: Property\n  assemblies:\n  - System.Text.Encoding\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Text\n  summary: When overridden in a derived class, gets the number of characters in the current <xref href=\"System.Text.EncoderFallbackBuffer\"></xref> object that remain to be processed.\n  remarks: \"The <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> method returns `true` if <xref:System.Text.EncoderFallbackBuffer.Remaining%2A> is a nonzero value.  \\n  \\n For an exception fallback handler, the <xref:System.Text.DecoderFallbackBuffer.Remaining%2A> method should return zero.\"\n  syntax:\n    content: public abstract int Remaining { get; }\n    return:\n      type: System.Int32\n      description: The number of characters in the current fallback buffer that have not yet been processed.\n  overload: System.Text.EncoderFallbackBuffer.Remaining*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/EncoderFallbackBuffer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.EncoderFallbackBuffer.Reset\n  commentId: M:System.Text.EncoderFallbackBuffer.Reset\n  id: Reset\n  parent: System.Text.EncoderFallbackBuffer\n  langs:\n  - csharp\n  name: Reset()\n  nameWithType: EncoderFallbackBuffer.Reset()\n  fullName: EncoderFallbackBuffer.Reset()\n  type: Method\n  assemblies:\n  - System.Text.Encoding\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Text\n  summary: Initializes all data and state information pertaining to this fallback buffer.\n  syntax:\n    content: public virtual void Reset ();\n    parameters: []\n  overload: System.Text.EncoderFallbackBuffer.Reset*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/EncoderFallbackBuffer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Text.EncoderFallbackBuffer.#ctor\n  parent: System.Text.EncoderFallbackBuffer\n  isExternal: false\n  name: EncoderFallbackBuffer()\n  nameWithType: EncoderFallbackBuffer.EncoderFallbackBuffer()\n  fullName: EncoderFallbackBuffer.EncoderFallbackBuffer()\n- uid: System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Int32)\n  parent: System.Text.EncoderFallbackBuffer\n  isExternal: false\n  name: Fallback(Char, Int32)\n  nameWithType: EncoderFallbackBuffer.Fallback(Char, Int32)\n  fullName: EncoderFallbackBuffer.Fallback(Char, Int32)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Char\n  parent: System\n  isExternal: false\n  name: Char\n  nameWithType: Char\n  fullName: System.Char\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)\n  parent: System.Text.EncoderFallbackBuffer\n  isExternal: false\n  name: Fallback(Char, Char, Int32)\n  nameWithType: EncoderFallbackBuffer.Fallback(Char, Char, Int32)\n  fullName: EncoderFallbackBuffer.Fallback(Char, Char, Int32)\n- uid: System.Text.EncoderFallbackBuffer.GetNextChar\n  parent: System.Text.EncoderFallbackBuffer\n  isExternal: false\n  name: GetNextChar()\n  nameWithType: EncoderFallbackBuffer.GetNextChar()\n  fullName: EncoderFallbackBuffer.GetNextChar()\n- uid: System.Text.EncoderFallbackBuffer.MovePrevious\n  parent: System.Text.EncoderFallbackBuffer\n  isExternal: false\n  name: MovePrevious()\n  nameWithType: EncoderFallbackBuffer.MovePrevious()\n  fullName: EncoderFallbackBuffer.MovePrevious()\n- uid: System.Text.EncoderFallbackBuffer.Remaining\n  parent: System.Text.EncoderFallbackBuffer\n  isExternal: false\n  name: Remaining\n  nameWithType: EncoderFallbackBuffer.Remaining\n  fullName: EncoderFallbackBuffer.Remaining\n- uid: System.Text.EncoderFallbackBuffer.Reset\n  parent: System.Text.EncoderFallbackBuffer\n  isExternal: false\n  name: Reset()\n  nameWithType: EncoderFallbackBuffer.Reset()\n  fullName: EncoderFallbackBuffer.Reset()\n- uid: System.Text.EncoderFallbackBuffer.#ctor*\n  parent: System.Text.EncoderFallbackBuffer\n  isExternal: false\n  name: EncoderFallbackBuffer\n  nameWithType: EncoderFallbackBuffer.EncoderFallbackBuffer\n  fullName: EncoderFallbackBuffer.EncoderFallbackBuffer\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/EncoderFallbackBuffer.xml\n- uid: System.Text.EncoderFallbackBuffer.Fallback*\n  parent: System.Text.EncoderFallbackBuffer\n  isExternal: false\n  name: Fallback\n  nameWithType: EncoderFallbackBuffer.Fallback\n  fullName: EncoderFallbackBuffer.Fallback\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/EncoderFallbackBuffer.xml\n- uid: System.Text.EncoderFallbackBuffer.GetNextChar*\n  parent: System.Text.EncoderFallbackBuffer\n  isExternal: false\n  name: GetNextChar\n  nameWithType: EncoderFallbackBuffer.GetNextChar\n  fullName: EncoderFallbackBuffer.GetNextChar\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/EncoderFallbackBuffer.xml\n- uid: System.Text.EncoderFallbackBuffer.MovePrevious*\n  parent: System.Text.EncoderFallbackBuffer\n  isExternal: false\n  name: MovePrevious\n  nameWithType: EncoderFallbackBuffer.MovePrevious\n  fullName: EncoderFallbackBuffer.MovePrevious\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/EncoderFallbackBuffer.xml\n- uid: System.Text.EncoderFallbackBuffer.Remaining*\n  parent: System.Text.EncoderFallbackBuffer\n  isExternal: false\n  name: Remaining\n  nameWithType: EncoderFallbackBuffer.Remaining\n  fullName: EncoderFallbackBuffer.Remaining\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/EncoderFallbackBuffer.xml\n- uid: System.Text.EncoderFallbackBuffer.Reset*\n  parent: System.Text.EncoderFallbackBuffer\n  isExternal: false\n  name: Reset\n  nameWithType: EncoderFallbackBuffer.Reset\n  fullName: EncoderFallbackBuffer.Reset\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/EncoderFallbackBuffer.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}