{"nodes":[{"content":"Provides an interface to add and remove the event handlers for events that add, change, remove or rename components, and provides methods to raise a <xref href=\"System.ComponentModel.Design.IComponentChangeService.ComponentChanged\"></xref> or <xref href=\"System.ComponentModel.Design.IComponentChangeService.ComponentChanging\"></xref> event.","nodes":[{"pos":[0,341],"content":"Provides an interface to add and remove the event handlers for events that add, change, remove or rename components, and provides methods to raise a <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.Design.IComponentChangeService.ComponentChanged\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph2\">&lt;xref href=\"System.ComponentModel.Design.IComponentChangeService.ComponentChanging\"&gt;&lt;/xref&gt;</ph> event.","source":"Provides an interface to add and remove the event handlers for events that add, change, remove or rename components, and provides methods to raise a <xref href=\"System.ComponentModel.Design.IComponentChangeService.ComponentChanged\"></xref> or <xref href=\"System.ComponentModel.Design.IComponentChangeService.ComponentChanging\"></xref> event."}],"pos":[1320,1662],"yaml":true},{"content":"<xref:System.ComponentModel.Design.IComponentChangeService> provides an interface that can be used to indicate the methods that handle the following events:  \n  \n-   <xref:System.ComponentModel.Design.IComponentChangeService.ComponentAdded>, raised when a component is added.  \n  \n-   <xref:System.ComponentModel.Design.IComponentChangeService.ComponentAdding>, raised when a component is about to be added.  \n  \n-   <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged>, raised when a component is changed.  \n  \n-   <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanging>, raised when a component is about to be changed.  \n  \n-   <xref:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved>, raised when a component is removed.  \n  \n-   <xref:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving>, raised when a component is about to be removed.  \n  \n-   <xref:System.ComponentModel.Design.IComponentChangeService.ComponentRename>, raised when a component is renamed.  \n  \n Typically, the design environment raises these component add, change, remove, or rename events. Designers should call the methods of this interface when using <xref:System.ComponentModel.Design.DesignerTransaction> objects to provide undo and redo functionality for design-time actions that affect components. More information is available in the documentation for <xref:System.ComponentModel.Design.DesignerTransaction>. Generally, only the root designer handles these change notifications.  \n  \n This service also provides methods that raise a component changed event or component changing event. A <xref:System.ComponentModel.PropertyDescriptor> or a component can indicate that a component has changed or is changing with the <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A> and <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A> methods, respectively.","nodes":[{"pos":[0,156],"content":"<xref:System.ComponentModel.Design.IComponentChangeService> provides an interface that can be used to indicate the methods that handle the following events:","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.ComponentModel.Design.IComponentChangeService&gt;</ph> provides an interface that can be used to indicate the methods that handle the following events:","pos":[0,156],"source":"<xref:System.ComponentModel.Design.IComponentChangeService> provides an interface that can be used to indicate the methods that handle the following events:"}]},{"pos":[166,275],"content":"<xref:System.ComponentModel.Design.IComponentChangeService.ComponentAdded>, raised when a component is added.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.ComponentModel.Design.IComponentChangeService.ComponentAdded&gt;</ph>, raised when a component is added.","pos":[0,109],"source":"<xref:System.ComponentModel.Design.IComponentChangeService.ComponentAdded>, raised when a component is added."}]},{"pos":[285,407],"content":"<xref:System.ComponentModel.Design.IComponentChangeService.ComponentAdding>, raised when a component is about to be added.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.ComponentModel.Design.IComponentChangeService.ComponentAdding&gt;</ph>, raised when a component is about to be added.","pos":[0,122],"source":"<xref:System.ComponentModel.Design.IComponentChangeService.ComponentAdding>, raised when a component is about to be added."}]},{"pos":[417,530],"content":"<xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged>, raised when a component is changed.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&gt;</ph>, raised when a component is changed.","pos":[0,113],"source":"<xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged>, raised when a component is changed."}]},{"pos":[540,666],"content":"<xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanging>, raised when a component is about to be changed.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanging&gt;</ph>, raised when a component is about to be changed.","pos":[0,126],"source":"<xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanging>, raised when a component is about to be changed."}]},{"pos":[676,789],"content":"<xref:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved>, raised when a component is removed.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved&gt;</ph>, raised when a component is removed.","pos":[0,113],"source":"<xref:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved>, raised when a component is removed."}]},{"pos":[799,925],"content":"<xref:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving>, raised when a component is about to be removed.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving&gt;</ph>, raised when a component is about to be removed.","pos":[0,126],"source":"<xref:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving>, raised when a component is about to be removed."}]},{"pos":[935,1047],"content":"<xref:System.ComponentModel.Design.IComponentChangeService.ComponentRename>, raised when a component is renamed.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.ComponentModel.Design.IComponentChangeService.ComponentRename&gt;</ph>, raised when a component is renamed.","pos":[0,112],"source":"<xref:System.ComponentModel.Design.IComponentChangeService.ComponentRename>, raised when a component is renamed."}]},{"pos":[1054,1545],"content":"Typically, the design environment raises these component add, change, remove, or rename events. Designers should call the methods of this interface when using <xref:System.ComponentModel.Design.DesignerTransaction> objects to provide undo and redo functionality for design-time actions that affect components. More information is available in the documentation for <xref:System.ComponentModel.Design.DesignerTransaction>. Generally, only the root designer handles these change notifications.","nodes":[{"content":"Typically, the design environment raises these component add, change, remove, or rename events. Designers should call the methods of this interface when using <xref:System.ComponentModel.Design.DesignerTransaction> objects to provide undo and redo functionality for design-time actions that affect components. More information is available in the documentation for <xref:System.ComponentModel.Design.DesignerTransaction>. Generally, only the root designer handles these change notifications.","pos":[0,491],"nodes":[{"content":"Typically, the design environment raises these component add, change, remove, or rename events.","pos":[0,95]},{"content":"Designers should call the methods of this interface when using <ph id=\"ph1\">&lt;xref:System.ComponentModel.Design.DesignerTransaction&gt;</ph> objects to provide undo and redo functionality for design-time actions that affect components.","pos":[96,309],"source":" Designers should call the methods of this interface when using <xref:System.ComponentModel.Design.DesignerTransaction> objects to provide undo and redo functionality for design-time actions that affect components."},{"content":"More information is available in the documentation for <ph id=\"ph1\">&lt;xref:System.ComponentModel.Design.DesignerTransaction&gt;</ph>.","pos":[310,421],"source":" More information is available in the documentation for <xref:System.ComponentModel.Design.DesignerTransaction>."},{"content":"Generally, only the root designer handles these change notifications.","pos":[422,491]}]}]},{"pos":[1552,1975],"content":"This service also provides methods that raise a component changed event or component changing event. A <xref:System.ComponentModel.PropertyDescriptor> or a component can indicate that a component has changed or is changing with the <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A> and <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A> methods, respectively.","nodes":[{"content":"This service also provides methods that raise a component changed event or component changing event. A <xref:System.ComponentModel.PropertyDescriptor> or a component can indicate that a component has changed or is changing with the <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A> and <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A> methods, respectively.","pos":[0,423],"nodes":[{"content":"This service also provides methods that raise a component changed event or component changing event.","pos":[0,100]},{"content":"A <ph id=\"ph1\">&lt;xref:System.ComponentModel.PropertyDescriptor&gt;</ph> or a component can indicate that a component has changed or is changing with the <ph id=\"ph2\">&lt;xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A&gt;</ph> methods, respectively.","pos":[101,423],"source":" A <xref:System.ComponentModel.PropertyDescriptor> or a component can indicate that a component has changed or is changing with the <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A> and <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A> methods, respectively."}]}]}],"pos":[1673,3669],"yaml":true,"extradata":"MT"},{"content":"Occurs when a component has been added.","nodes":[{"pos":[0,39],"content":"Occurs when a component has been added.","nodes":[{"content":"Occurs when a component has been added.","pos":[0,39]}]}],"pos":[5928,5968],"yaml":true},{"content":"This event occurs during load and when new components are created by the user, after the component has been sited.","nodes":[{"pos":[0,114],"content":"This event occurs during load and when new components are created by the user, after the component has been sited.","nodes":[{"content":"This event occurs during load and when new components are created by the user, after the component has been sited.","pos":[0,114]}]}],"pos":[5979,6094],"yaml":true,"extradata":"MT"},{"content":"Occurs when a component is in the process of being added.","nodes":[{"pos":[0,57],"content":"Occurs when a component is in the process of being added.","nodes":[{"content":"Occurs when a component is in the process of being added.","pos":[0,57]}]}],"pos":[7604,7662],"yaml":true},{"content":"This event occurs during load and when the user creates a new component. You can cancel the process of adding a component by throwing an exception here.","nodes":[{"pos":[0,152],"content":"This event occurs during load and when the user creates a new component. You can cancel the process of adding a component by throwing an exception here.","nodes":[{"content":"This event occurs during load and when the user creates a new component. You can cancel the process of adding a component by throwing an exception here.","pos":[0,152],"nodes":[{"content":"This event occurs during load and when the user creates a new component.","pos":[0,72]},{"content":"You can cancel the process of adding a component by throwing an exception here.","pos":[73,152]}]}]}],"pos":[7673,7826],"yaml":true,"extradata":"MT"},{"content":"Occurs when a component has been changed.","nodes":[{"pos":[0,41],"content":"Occurs when a component has been changed.","nodes":[{"content":"Occurs when a component has been changed.","pos":[0,41]}]}],"pos":[9343,9385],"yaml":true},{"content":"This event occurs when any component on the form changes. This event will not occur during form load and unload, because changes are expected at this time.  \n  \n> [!NOTE]\n>  A <xref:System.ComponentModel.Design.DesignerTransaction> can raise multiple <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged> events. Some <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged> event handlers can interfere with expected sequences of events, such as if your code alters the values of properties while a transaction is occurring. A <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged> event handler can also impair performance if it draws after each change while a <xref:System.ComponentModel.Design.DesignerTransaction> is in progress. In order to allow a <xref:System.ComponentModel.Design.DesignerTransaction> in process to complete without interruption or interference by your <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged> event handler, you can test the state of the <xref:System.ComponentModel.Design.IDesignerHost.InTransaction%2A> property, and defer handling the change events until the completion of the transaction by adding a <xref:System.ComponentModel.Design.DesignerTransactionCloseEventHandler> which will raise your <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged> event handler and remove itself upon completion of the transaction.","nodes":[{"pos":[0,155],"content":"This event occurs when any component on the form changes. This event will not occur during form load and unload, because changes are expected at this time.","nodes":[{"content":"This event occurs when any component on the form changes. This event will not occur during form load and unload, because changes are expected at this time.","pos":[0,155],"nodes":[{"content":"This event occurs when any component on the form changes.","pos":[0,57]},{"content":"This event will not occur during form load and unload, because changes are expected at this time.","pos":[58,155]}]}]},{"pos":[163,1471],"content":"[!NOTE]\n A <xref:System.ComponentModel.Design.DesignerTransaction> can raise multiple <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged> events. Some <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged> event handlers can interfere with expected sequences of events, such as if your code alters the values of properties while a transaction is occurring. A <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged> event handler can also impair performance if it draws after each change while a <xref:System.ComponentModel.Design.DesignerTransaction> is in progress. In order to allow a <xref:System.ComponentModel.Design.DesignerTransaction> in process to complete without interruption or interference by your <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged> event handler, you can test the state of the <xref:System.ComponentModel.Design.IDesignerHost.InTransaction%2A> property, and defer handling the change events until the completion of the transaction by adding a <xref:System.ComponentModel.Design.DesignerTransactionCloseEventHandler> which will raise your <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged> event handler and remove itself upon completion of the transaction.","leadings":["","> "],"nodes":[{"content":" A <xref:System.ComponentModel.Design.DesignerTransaction> can raise multiple <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged> events. Some <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged> event handlers can interfere with expected sequences of events, such as if your code alters the values of properties while a transaction is occurring. A <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged> event handler can also impair performance if it draws after each change while a <xref:System.ComponentModel.Design.DesignerTransaction> is in progress. In order to allow a <xref:System.ComponentModel.Design.DesignerTransaction> in process to complete without interruption or interference by your <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged> event handler, you can test the state of the <xref:System.ComponentModel.Design.IDesignerHost.InTransaction%2A> property, and defer handling the change events until the completion of the transaction by adding a <xref:System.ComponentModel.Design.DesignerTransactionCloseEventHandler> which will raise your <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged> event handler and remove itself upon completion of the transaction.","pos":[8,1306],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.ComponentModel.Design.DesignerTransaction&gt;</ph> can raise multiple <ph id=\"ph2\">&lt;xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&gt;</ph> events.","pos":[1,162],"source":" A <xref:System.ComponentModel.Design.DesignerTransaction> can raise multiple <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged> events."},{"content":"Some <ph id=\"ph1\">&lt;xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&gt;</ph> event handlers can interfere with expected sequences of events, such as if your code alters the values of properties while a transaction is occurring.","pos":[163,395],"source":" Some <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged> event handlers can interfere with expected sequences of events, such as if your code alters the values of properties while a transaction is occurring."},{"content":"A <ph id=\"ph1\">&lt;xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&gt;</ph> event handler can also impair performance if it draws after each change while a <ph id=\"ph2\">&lt;xref:System.ComponentModel.Design.DesignerTransaction&gt;</ph> is in progress.","pos":[396,626],"source":" A <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged> event handler can also impair performance if it draws after each change while a <xref:System.ComponentModel.Design.DesignerTransaction> is in progress."},{"content":"In order to allow a <ph id=\"ph1\">&lt;xref:System.ComponentModel.Design.DesignerTransaction&gt;</ph> in process to complete without interruption or interference by your <ph id=\"ph2\">&lt;xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&gt;</ph> event handler, you can test the state of the <ph id=\"ph3\">&lt;xref:System.ComponentModel.Design.IDesignerHost.InTransaction%2A&gt;</ph> property, and defer handling the change events until the completion of the transaction by adding a <ph id=\"ph4\">&lt;xref:System.ComponentModel.Design.DesignerTransactionCloseEventHandler&gt;</ph> which will raise your <ph id=\"ph5\">&lt;xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&gt;</ph> event handler and remove itself upon completion of the transaction.","pos":[627,1298],"source":" In order to allow a <xref:System.ComponentModel.Design.DesignerTransaction> in process to complete without interruption or interference by your <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged> event handler, you can test the state of the <xref:System.ComponentModel.Design.IDesignerHost.InTransaction%2A> property, and defer handling the change events until the completion of the transaction by adding a <xref:System.ComponentModel.Design.DesignerTransactionCloseEventHandler> which will raise your <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged> event handler and remove itself upon completion of the transaction."}]}]}],"pos":[9396,10873],"yaml":true,"extradata":"MT"},{"content":"Occurs when a component is in the process of being changed.","nodes":[{"pos":[0,59],"content":"Occurs when a component is in the process of being changed.","nodes":[{"content":"Occurs when a component is in the process of being changed.","pos":[0,59]}]}],"pos":[12411,12471],"yaml":true},{"content":"This event occurs before the component is actually changed, and gives the designer a chance to abort the change or perform any pre-change processing. This event does not occur during form load and unload, because changes are expected at this time.","nodes":[{"pos":[0,247],"content":"This event occurs before the component is actually changed, and gives the designer a chance to abort the change or perform any pre-change processing. This event does not occur during form load and unload, because changes are expected at this time.","nodes":[{"content":"This event occurs before the component is actually changed, and gives the designer a chance to abort the change or perform any pre-change processing. This event does not occur during form load and unload, because changes are expected at this time.","pos":[0,247],"nodes":[{"content":"This event occurs before the component is actually changed, and gives the designer a chance to abort the change or perform any pre-change processing.","pos":[0,149]},{"content":"This event does not occur during form load and unload, because changes are expected at this time.","pos":[150,247]}]}]}],"pos":[12482,12730],"yaml":true,"extradata":"MT"},{"content":"Occurs when a component has been removed.","nodes":[{"pos":[0,41],"content":"Occurs when a component has been removed.","nodes":[{"content":"Occurs when a component has been removed.","pos":[0,41]}]}],"pos":[14265,14307],"yaml":true},{"content":"This event occurs during unload and when a component is deleted by the user. The event occurs before the site has been removed from the component.","nodes":[{"pos":[0,146],"content":"This event occurs during unload and when a component is deleted by the user. The event occurs before the site has been removed from the component.","nodes":[{"content":"This event occurs during unload and when a component is deleted by the user. The event occurs before the site has been removed from the component.","pos":[0,146],"nodes":[{"content":"This event occurs during unload and when a component is deleted by the user.","pos":[0,76]},{"content":"The event occurs before the site has been removed from the component.","pos":[77,146]}]}]}],"pos":[14318,14465],"yaml":true,"extradata":"MT"},{"content":"Occurs when a component is in the process of being removed.","nodes":[{"pos":[0,59],"content":"Occurs when a component is in the process of being removed.","nodes":[{"content":"Occurs when a component is in the process of being removed.","pos":[0,59]}]}],"pos":[15989,16049],"yaml":true},{"content":"This event occurs during unload and when the user deletes a component. You can cancel the process of removing a component by throwing an exception here.","nodes":[{"pos":[0,152],"content":"This event occurs during unload and when the user deletes a component. You can cancel the process of removing a component by throwing an exception here.","nodes":[{"content":"This event occurs during unload and when the user deletes a component. You can cancel the process of removing a component by throwing an exception here.","pos":[0,152],"nodes":[{"content":"This event occurs during unload and when the user deletes a component.","pos":[0,70]},{"content":"You can cancel the process of removing a component by throwing an exception here.","pos":[71,152]}]}]}],"pos":[16060,16213],"yaml":true,"extradata":"MT"},{"content":"Occurs when a component is renamed.","nodes":[{"pos":[0,35],"content":"Occurs when a component is renamed.","nodes":[{"content":"Occurs when a component is renamed.","pos":[0,35]}]}],"pos":[17726,17762],"yaml":true},{"content":"This event occurs after the <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged> event when a component has been renamed.","nodes":[{"pos":[0,145],"content":"This event occurs after the <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged> event when a component has been renamed.","nodes":[{"content":"This event occurs after the <ph id=\"ph1\">&lt;xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&gt;</ph> event when a component has been renamed.","pos":[0,145],"source":"This event occurs after the <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged> event when a component has been renamed."}]}],"pos":[17773,17919],"yaml":true,"extradata":"MT"},{"content":"Announces to the component change service that a particular component has changed.","nodes":[{"pos":[0,82],"content":"Announces to the component change service that a particular component has changed.","nodes":[{"content":"Announces to the component change service that a particular component has changed.","pos":[0,82]}]}],"pos":[19833,19916],"yaml":true},{"content":"This method raises the <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged> event.  \n  \n Most designers that ship with the [!INCLUDE[winsdklong](~/includes/winsdklong-md.md)], as well as the Visual Studio design-time environment, typically raise this event for you when a component in a project is changed, so most of the time you do not need to explicitly call this method. The appropriate <xref:System.ComponentModel.Design.IComponentChangeService> events are automatically raised when a <xref:System.ComponentModel.PropertyDescriptor> is used to change a property value or components are added or removed from the <xref:System.ComponentModel.Design.IDesignerHost> container.  \n  \n Before calling <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A>, first call <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A> to indicate that a component is about to change, and make the change. Then call <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A> to raise the <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged> event.","nodes":[{"pos":[0,106],"content":"This method raises the <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged> event.","nodes":[{"content":"This method raises the <ph id=\"ph1\">&lt;xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&gt;</ph> event.","pos":[0,106],"source":"This method raises the <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged> event."}]},{"pos":[113,701],"content":"Most designers that ship with the [!INCLUDE[winsdklong](~/includes/winsdklong-md.md)], as well as the Visual Studio design-time environment, typically raise this event for you when a component in a project is changed, so most of the time you do not need to explicitly call this method. The appropriate <xref:System.ComponentModel.Design.IComponentChangeService> events are automatically raised when a <xref:System.ComponentModel.PropertyDescriptor> is used to change a property value or components are added or removed from the <xref:System.ComponentModel.Design.IDesignerHost> container.","nodes":[{"content":"Most designers that ship with the <ph id=\"ph1\">[!INCLUDE[winsdklong](~/includes/winsdklong-md.md)]</ph>, as well as the Visual Studio design-time environment, typically raise this event for you when a component in a project is changed, so most of the time you do not need to explicitly call this method.","pos":[0,285],"source":"Most designers that ship with the [!INCLUDE[winsdklong](~/includes/winsdklong-md.md)], as well as the Visual Studio design-time environment, typically raise this event for you when a component in a project is changed, so most of the time you do not need to explicitly call this method."},{"content":"The appropriate <ph id=\"ph1\">&lt;xref:System.ComponentModel.Design.IComponentChangeService&gt;</ph> events are automatically raised when a <ph id=\"ph2\">&lt;xref:System.ComponentModel.PropertyDescriptor&gt;</ph> is used to change a property value or components are added or removed from the <ph id=\"ph3\">&lt;xref:System.ComponentModel.Design.IDesignerHost&gt;</ph> container.","pos":[286,588],"source":" The appropriate <xref:System.ComponentModel.Design.IComponentChangeService> events are automatically raised when a <xref:System.ComponentModel.PropertyDescriptor> is used to change a property value or components are added or removed from the <xref:System.ComponentModel.Design.IDesignerHost> container."}]},{"pos":[708,1158],"content":"Before calling <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A>, first call <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A> to indicate that a component is about to change, and make the change. Then call <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A> to raise the <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged> event.","nodes":[{"content":"Before calling <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A>, first call <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A> to indicate that a component is about to change, and make the change. Then call <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A> to raise the <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged> event.","pos":[0,450],"nodes":[{"content":"Before calling <ph id=\"ph1\">&lt;xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A&gt;</ph>, first call <ph id=\"ph2\">&lt;xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A&gt;</ph> to indicate that a component is about to change, and make the change.","pos":[0,261],"source":"Before calling <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A>, first call <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A> to indicate that a component is about to change, and make the change."},{"content":"Then call <ph id=\"ph1\">&lt;xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A&gt;</ph> to raise the <ph id=\"ph2\">&lt;xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&gt;</ph> event.","pos":[262,450],"source":" Then call <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A> to raise the <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged> event."}]}]}],"pos":[19927,21092],"yaml":true,"extradata":"MT"},{"content":"The component that has changed.","nodes":[{"pos":[0,31],"content":"The component that has changed.","nodes":[{"content":"The component that has changed.","pos":[0,31]}]}],"pos":[21328,21360],"yaml":true},{"content":"The member that has changed. This is `null` if this change is not related to a single member.","nodes":[{"pos":[0,93],"content":"The member that has changed. This is `null` if this change is not related to a single member.","nodes":[{"content":"The member that has changed.","pos":[0,28]},{"content":"This is <ph id=\"ph1\">`null`</ph> if this change is not related to a single member.","pos":[29,93],"source":" This is `null` if this change is not related to a single member."}]}],"pos":[21447,21541],"yaml":true},{"content":"The old value of the member. This is valid only if the member is not `null`.","nodes":[{"pos":[0,76],"content":"The old value of the member. This is valid only if the member is not `null`.","nodes":[{"content":"The old value of the member.","pos":[0,28]},{"content":"This is valid only if the member is not <ph id=\"ph1\">`null`</ph>.","pos":[29,76],"source":" This is valid only if the member is not `null`."}]}],"pos":[21605,21682],"yaml":true},{"content":"The new value of the member. This is valid only if the member is not `null`.","nodes":[{"pos":[0,76],"content":"The new value of the member. This is valid only if the member is not `null`.","nodes":[{"content":"The new value of the member.","pos":[0,28]},{"content":"This is valid only if the member is not <ph id=\"ph1\">`null`</ph>.","pos":[29,76],"source":" This is valid only if the member is not `null`."}]}],"pos":[21746,21823],"yaml":true},{"content":"Announces to the component change service that a particular component is changing.","nodes":[{"pos":[0,82],"content":"Announces to the component change service that a particular component is changing.","nodes":[{"content":"Announces to the component change service that a particular component is changing.","pos":[0,82]}]}],"pos":[23483,23566],"yaml":true},{"content":"This method raises the <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanging> event.  \n  \n Most designers included with the [!INCLUDE[winsdklong](~/includes/winsdklong-md.md)], as well as the Visual Studio design-time environment, typically raise this event automatically; so most of the time, you do not need to explicitly call this method. The appropriate <xref:System.ComponentModel.Design.IComponentChangeService> events are automatically raised when a <xref:System.ComponentModel.PropertyDescriptor> is used to change a property value or components are added or removed from the <xref:System.ComponentModel.Design.IDesignerHost> container.","nodes":[{"pos":[0,107],"content":"This method raises the <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanging> event.","nodes":[{"content":"This method raises the <ph id=\"ph1\">&lt;xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanging&gt;</ph> event.","pos":[0,107],"source":"This method raises the <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanging> event."}]},{"pos":[114,667],"content":"Most designers included with the [!INCLUDE[winsdklong](~/includes/winsdklong-md.md)], as well as the Visual Studio design-time environment, typically raise this event automatically; so most of the time, you do not need to explicitly call this method. The appropriate <xref:System.ComponentModel.Design.IComponentChangeService> events are automatically raised when a <xref:System.ComponentModel.PropertyDescriptor> is used to change a property value or components are added or removed from the <xref:System.ComponentModel.Design.IDesignerHost> container.","nodes":[{"content":"Most designers included with the <ph id=\"ph1\">[!INCLUDE[winsdklong](~/includes/winsdklong-md.md)]</ph>, as well as the Visual Studio design-time environment, typically raise this event automatically; so most of the time, you do not need to explicitly call this method.","pos":[0,250],"source":"Most designers included with the [!INCLUDE[winsdklong](~/includes/winsdklong-md.md)], as well as the Visual Studio design-time environment, typically raise this event automatically; so most of the time, you do not need to explicitly call this method."},{"content":"The appropriate <ph id=\"ph1\">&lt;xref:System.ComponentModel.Design.IComponentChangeService&gt;</ph> events are automatically raised when a <ph id=\"ph2\">&lt;xref:System.ComponentModel.PropertyDescriptor&gt;</ph> is used to change a property value or components are added or removed from the <ph id=\"ph3\">&lt;xref:System.ComponentModel.Design.IDesignerHost&gt;</ph> container.","pos":[251,553],"source":" The appropriate <xref:System.ComponentModel.Design.IComponentChangeService> events are automatically raised when a <xref:System.ComponentModel.PropertyDescriptor> is used to change a property value or components are added or removed from the <xref:System.ComponentModel.Design.IDesignerHost> container."}]}],"pos":[23577,24249],"yaml":true,"extradata":"MT"},{"content":"The component that is about to change.","nodes":[{"pos":[0,38],"content":"The component that is about to change.","nodes":[{"content":"The component that is about to change.","pos":[0,38]}]}],"pos":[24452,24491],"yaml":true},{"content":"The member that is changing. This is `null` if this change is not related to a single member.","nodes":[{"pos":[0,93],"content":"The member that is changing. This is `null` if this change is not related to a single member.","nodes":[{"content":"The member that is changing.","pos":[0,28]},{"content":"This is <ph id=\"ph1\">`null`</ph> if this change is not related to a single member.","pos":[29,93],"source":" This is `null` if this change is not related to a single member."}]}],"pos":[24578,24672],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ComponentModel.Design.IComponentChangeService\n  commentId: T:System.ComponentModel.Design.IComponentChangeService\n  id: IComponentChangeService\n  children:\n  - System.ComponentModel.Design.IComponentChangeService.ComponentAdded\n  - System.ComponentModel.Design.IComponentChangeService.ComponentAdding\n  - System.ComponentModel.Design.IComponentChangeService.ComponentChanged\n  - System.ComponentModel.Design.IComponentChangeService.ComponentChanging\n  - System.ComponentModel.Design.IComponentChangeService.ComponentRemoved\n  - System.ComponentModel.Design.IComponentChangeService.ComponentRemoving\n  - System.ComponentModel.Design.IComponentChangeService.ComponentRename\n  - System.ComponentModel.Design.IComponentChangeService.OnComponentChanged(System.Object,System.ComponentModel.MemberDescriptor,System.Object,System.Object)\n  - System.ComponentModel.Design.IComponentChangeService.OnComponentChanging(System.Object,System.ComponentModel.MemberDescriptor)\n  langs:\n  - csharp\n  name: IComponentChangeService\n  nameWithType: IComponentChangeService\n  fullName: System.ComponentModel.Design.IComponentChangeService\n  type: Interface\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel.Design\n  summary: Provides an interface to add and remove the event handlers for events that add, change, remove or rename components, and provides methods to raise a <xref href=\"System.ComponentModel.Design.IComponentChangeService.ComponentChanged\"></xref> or <xref href=\"System.ComponentModel.Design.IComponentChangeService.ComponentChanging\"></xref> event.\n  remarks: \"<xref:System.ComponentModel.Design.IComponentChangeService> provides an interface that can be used to indicate the methods that handle the following events:  \\n  \\n-   <xref:System.ComponentModel.Design.IComponentChangeService.ComponentAdded>, raised when a component is added.  \\n  \\n-   <xref:System.ComponentModel.Design.IComponentChangeService.ComponentAdding>, raised when a component is about to be added.  \\n  \\n-   <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged>, raised when a component is changed.  \\n  \\n-   <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanging>, raised when a component is about to be changed.  \\n  \\n-   <xref:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved>, raised when a component is removed.  \\n  \\n-   <xref:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving>, raised when a component is about to be removed.  \\n  \\n-   <xref:System.ComponentModel.Design.IComponentChangeService.ComponentRename>, raised when a component is renamed.  \\n  \\n Typically, the design environment raises these component add, change, remove, or rename events. Designers should call the methods of this interface when using <xref:System.ComponentModel.Design.DesignerTransaction> objects to provide undo and redo functionality for design-time actions that affect components. More information is available in the documentation for <xref:System.ComponentModel.Design.DesignerTransaction>. Generally, only the root designer handles these change notifications.  \\n  \\n This service also provides methods that raise a component changed event or component changing event. A <xref:System.ComponentModel.PropertyDescriptor> or a component can indicate that a component has changed or is changing with the <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A> and <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A> methods, respectively.\"\n  example:\n  - \"This following example demonstrates how to use the <xref:System.ComponentModel.Design.IComponentChangeService> interface to receive notifications about the addition of, removal of, and changes to components in design mode.  \\n  \\n [!code-cpp[IComponentChangeServiceSample2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/IComponentChangeServiceSample2/CPP/icomponentchangeserviceexample.cpp#1)]\\n [!code-csharp[IComponentChangeServiceSample2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/IComponentChangeServiceSample2/CS/icomponentchangeserviceexample.cs#1)]\\n [!code-vb[IComponentChangeServiceSample2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IComponentChangeServiceSample2/VB/icomponentchangeserviceexample.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public interface IComponentChangeService\n  implements: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Design/IComponentChangeService.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.Design.IComponentChangeService.ComponentAdded\n  commentId: E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded\n  id: ComponentAdded\n  parent: System.ComponentModel.Design.IComponentChangeService\n  langs:\n  - csharp\n  name: ComponentAdded\n  nameWithType: IComponentChangeService.ComponentAdded\n  fullName: IComponentChangeService.ComponentAdded\n  type: Event\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel.Design\n  summary: Occurs when a component has been added.\n  remarks: This event occurs during load and when new components are created by the user, after the component has been sited.\n  syntax:\n    content: public event System.ComponentModel.Design.ComponentEventHandler ComponentAdded;\n    return:\n      type: System.ComponentModel.Design.ComponentEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Design/IComponentChangeService.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.Design.IComponentChangeService.ComponentAdding\n  commentId: E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding\n  id: ComponentAdding\n  parent: System.ComponentModel.Design.IComponentChangeService\n  langs:\n  - csharp\n  name: ComponentAdding\n  nameWithType: IComponentChangeService.ComponentAdding\n  fullName: IComponentChangeService.ComponentAdding\n  type: Event\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel.Design\n  summary: Occurs when a component is in the process of being added.\n  remarks: This event occurs during load and when the user creates a new component. You can cancel the process of adding a component by throwing an exception here.\n  syntax:\n    content: public event System.ComponentModel.Design.ComponentEventHandler ComponentAdding;\n    return:\n      type: System.ComponentModel.Design.ComponentEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Design/IComponentChangeService.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.Design.IComponentChangeService.ComponentChanged\n  commentId: E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged\n  id: ComponentChanged\n  parent: System.ComponentModel.Design.IComponentChangeService\n  langs:\n  - csharp\n  name: ComponentChanged\n  nameWithType: IComponentChangeService.ComponentChanged\n  fullName: IComponentChangeService.ComponentChanged\n  type: Event\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel.Design\n  summary: Occurs when a component has been changed.\n  remarks: \"This event occurs when any component on the form changes. This event will not occur during form load and unload, because changes are expected at this time.  \\n  \\n> [!NOTE]\\n>  A <xref:System.ComponentModel.Design.DesignerTransaction> can raise multiple <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged> events. Some <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged> event handlers can interfere with expected sequences of events, such as if your code alters the values of properties while a transaction is occurring. A <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged> event handler can also impair performance if it draws after each change while a <xref:System.ComponentModel.Design.DesignerTransaction> is in progress. In order to allow a <xref:System.ComponentModel.Design.DesignerTransaction> in process to complete without interruption or interference by your <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged> event handler, you can test the state of the <xref:System.ComponentModel.Design.IDesignerHost.InTransaction%2A> property, and defer handling the change events until the completion of the transaction by adding a <xref:System.ComponentModel.Design.DesignerTransactionCloseEventHandler> which will raise your <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged> event handler and remove itself upon completion of the transaction.\"\n  syntax:\n    content: public event System.ComponentModel.Design.ComponentChangedEventHandler ComponentChanged;\n    return:\n      type: System.ComponentModel.Design.ComponentChangedEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Design/IComponentChangeService.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.Design.IComponentChangeService.ComponentChanging\n  commentId: E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging\n  id: ComponentChanging\n  parent: System.ComponentModel.Design.IComponentChangeService\n  langs:\n  - csharp\n  name: ComponentChanging\n  nameWithType: IComponentChangeService.ComponentChanging\n  fullName: IComponentChangeService.ComponentChanging\n  type: Event\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel.Design\n  summary: Occurs when a component is in the process of being changed.\n  remarks: This event occurs before the component is actually changed, and gives the designer a chance to abort the change or perform any pre-change processing. This event does not occur during form load and unload, because changes are expected at this time.\n  syntax:\n    content: public event System.ComponentModel.Design.ComponentChangingEventHandler ComponentChanging;\n    return:\n      type: System.ComponentModel.Design.ComponentChangingEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Design/IComponentChangeService.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.Design.IComponentChangeService.ComponentRemoved\n  commentId: E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved\n  id: ComponentRemoved\n  parent: System.ComponentModel.Design.IComponentChangeService\n  langs:\n  - csharp\n  name: ComponentRemoved\n  nameWithType: IComponentChangeService.ComponentRemoved\n  fullName: IComponentChangeService.ComponentRemoved\n  type: Event\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel.Design\n  summary: Occurs when a component has been removed.\n  remarks: This event occurs during unload and when a component is deleted by the user. The event occurs before the site has been removed from the component.\n  syntax:\n    content: public event System.ComponentModel.Design.ComponentEventHandler ComponentRemoved;\n    return:\n      type: System.ComponentModel.Design.ComponentEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Design/IComponentChangeService.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.Design.IComponentChangeService.ComponentRemoving\n  commentId: E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving\n  id: ComponentRemoving\n  parent: System.ComponentModel.Design.IComponentChangeService\n  langs:\n  - csharp\n  name: ComponentRemoving\n  nameWithType: IComponentChangeService.ComponentRemoving\n  fullName: IComponentChangeService.ComponentRemoving\n  type: Event\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel.Design\n  summary: Occurs when a component is in the process of being removed.\n  remarks: This event occurs during unload and when the user deletes a component. You can cancel the process of removing a component by throwing an exception here.\n  syntax:\n    content: public event System.ComponentModel.Design.ComponentEventHandler ComponentRemoving;\n    return:\n      type: System.ComponentModel.Design.ComponentEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Design/IComponentChangeService.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.Design.IComponentChangeService.ComponentRename\n  commentId: E:System.ComponentModel.Design.IComponentChangeService.ComponentRename\n  id: ComponentRename\n  parent: System.ComponentModel.Design.IComponentChangeService\n  langs:\n  - csharp\n  name: ComponentRename\n  nameWithType: IComponentChangeService.ComponentRename\n  fullName: IComponentChangeService.ComponentRename\n  type: Event\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel.Design\n  summary: Occurs when a component is renamed.\n  remarks: This event occurs after the <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged> event when a component has been renamed.\n  syntax:\n    content: public event System.ComponentModel.Design.ComponentRenameEventHandler ComponentRename;\n    return:\n      type: System.ComponentModel.Design.ComponentRenameEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Design/IComponentChangeService.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.Design.IComponentChangeService.OnComponentChanged(System.Object,System.ComponentModel.MemberDescriptor,System.Object,System.Object)\n  commentId: M:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged(System.Object,System.ComponentModel.MemberDescriptor,System.Object,System.Object)\n  id: OnComponentChanged(System.Object,System.ComponentModel.MemberDescriptor,System.Object,System.Object)\n  parent: System.ComponentModel.Design.IComponentChangeService\n  langs:\n  - csharp\n  name: OnComponentChanged(Object, MemberDescriptor, Object, Object)\n  nameWithType: IComponentChangeService.OnComponentChanged(Object, MemberDescriptor, Object, Object)\n  fullName: IComponentChangeService.OnComponentChanged(Object, MemberDescriptor, Object, Object)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel.Design\n  summary: Announces to the component change service that a particular component has changed.\n  remarks: \"This method raises the <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged> event.  \\n  \\n Most designers that ship with the [!INCLUDE[winsdklong](~/includes/winsdklong-md.md)], as well as the Visual Studio design-time environment, typically raise this event for you when a component in a project is changed, so most of the time you do not need to explicitly call this method. The appropriate <xref:System.ComponentModel.Design.IComponentChangeService> events are automatically raised when a <xref:System.ComponentModel.PropertyDescriptor> is used to change a property value or components are added or removed from the <xref:System.ComponentModel.Design.IDesignerHost> container.  \\n  \\n Before calling <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A>, first call <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A> to indicate that a component is about to change, and make the change. Then call <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A> to raise the <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged> event.\"\n  syntax:\n    content: public void OnComponentChanged (object component, System.ComponentModel.MemberDescriptor member, object oldValue, object newValue);\n    parameters:\n    - id: component\n      type: System.Object\n      description: The component that has changed.\n    - id: member\n      type: System.ComponentModel.MemberDescriptor\n      description: The member that has changed. This is `null` if this change is not related to a single member.\n    - id: oldValue\n      type: System.Object\n      description: The old value of the member. This is valid only if the member is not `null`.\n    - id: newValue\n      type: System.Object\n      description: The new value of the member. This is valid only if the member is not `null`.\n  overload: System.ComponentModel.Design.IComponentChangeService.OnComponentChanged*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Design/IComponentChangeService.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.Design.IComponentChangeService.OnComponentChanging(System.Object,System.ComponentModel.MemberDescriptor)\n  commentId: M:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging(System.Object,System.ComponentModel.MemberDescriptor)\n  id: OnComponentChanging(System.Object,System.ComponentModel.MemberDescriptor)\n  parent: System.ComponentModel.Design.IComponentChangeService\n  langs:\n  - csharp\n  name: OnComponentChanging(Object, MemberDescriptor)\n  nameWithType: IComponentChangeService.OnComponentChanging(Object, MemberDescriptor)\n  fullName: IComponentChangeService.OnComponentChanging(Object, MemberDescriptor)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel.Design\n  summary: Announces to the component change service that a particular component is changing.\n  remarks: \"This method raises the <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanging> event.  \\n  \\n Most designers included with the [!INCLUDE[winsdklong](~/includes/winsdklong-md.md)], as well as the Visual Studio design-time environment, typically raise this event automatically; so most of the time, you do not need to explicitly call this method. The appropriate <xref:System.ComponentModel.Design.IComponentChangeService> events are automatically raised when a <xref:System.ComponentModel.PropertyDescriptor> is used to change a property value or components are added or removed from the <xref:System.ComponentModel.Design.IDesignerHost> container.\"\n  syntax:\n    content: public void OnComponentChanging (object component, System.ComponentModel.MemberDescriptor member);\n    parameters:\n    - id: component\n      type: System.Object\n      description: The component that is about to change.\n    - id: member\n      type: System.ComponentModel.MemberDescriptor\n      description: The member that is changing. This is `null` if this change is not related to a single member.\n  overload: System.ComponentModel.Design.IComponentChangeService.OnComponentChanging*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Design/IComponentChangeService.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.ComponentModel.Design.IComponentChangeService.ComponentAdded\n  parent: System.ComponentModel.Design.IComponentChangeService\n  isExternal: false\n  name: ComponentAdded\n  nameWithType: IComponentChangeService.ComponentAdded\n  fullName: IComponentChangeService.ComponentAdded\n- uid: System.ComponentModel.Design.ComponentEventHandler\n  parent: System.ComponentModel.Design\n  isExternal: false\n  name: ComponentEventHandler\n  nameWithType: ComponentEventHandler\n  fullName: System.ComponentModel.Design.ComponentEventHandler\n- uid: System.ComponentModel.Design.IComponentChangeService.ComponentAdding\n  parent: System.ComponentModel.Design.IComponentChangeService\n  isExternal: false\n  name: ComponentAdding\n  nameWithType: IComponentChangeService.ComponentAdding\n  fullName: IComponentChangeService.ComponentAdding\n- uid: System.ComponentModel.Design.IComponentChangeService.ComponentChanged\n  parent: System.ComponentModel.Design.IComponentChangeService\n  isExternal: false\n  name: ComponentChanged\n  nameWithType: IComponentChangeService.ComponentChanged\n  fullName: IComponentChangeService.ComponentChanged\n- uid: System.ComponentModel.Design.ComponentChangedEventHandler\n  parent: System.ComponentModel.Design\n  isExternal: false\n  name: ComponentChangedEventHandler\n  nameWithType: ComponentChangedEventHandler\n  fullName: System.ComponentModel.Design.ComponentChangedEventHandler\n- uid: System.ComponentModel.Design.IComponentChangeService.ComponentChanging\n  parent: System.ComponentModel.Design.IComponentChangeService\n  isExternal: false\n  name: ComponentChanging\n  nameWithType: IComponentChangeService.ComponentChanging\n  fullName: IComponentChangeService.ComponentChanging\n- uid: System.ComponentModel.Design.ComponentChangingEventHandler\n  parent: System.ComponentModel.Design\n  isExternal: false\n  name: ComponentChangingEventHandler\n  nameWithType: ComponentChangingEventHandler\n  fullName: System.ComponentModel.Design.ComponentChangingEventHandler\n- uid: System.ComponentModel.Design.IComponentChangeService.ComponentRemoved\n  parent: System.ComponentModel.Design.IComponentChangeService\n  isExternal: false\n  name: ComponentRemoved\n  nameWithType: IComponentChangeService.ComponentRemoved\n  fullName: IComponentChangeService.ComponentRemoved\n- uid: System.ComponentModel.Design.IComponentChangeService.ComponentRemoving\n  parent: System.ComponentModel.Design.IComponentChangeService\n  isExternal: false\n  name: ComponentRemoving\n  nameWithType: IComponentChangeService.ComponentRemoving\n  fullName: IComponentChangeService.ComponentRemoving\n- uid: System.ComponentModel.Design.IComponentChangeService.ComponentRename\n  parent: System.ComponentModel.Design.IComponentChangeService\n  isExternal: false\n  name: ComponentRename\n  nameWithType: IComponentChangeService.ComponentRename\n  fullName: IComponentChangeService.ComponentRename\n- uid: System.ComponentModel.Design.ComponentRenameEventHandler\n  parent: System.ComponentModel.Design\n  isExternal: false\n  name: ComponentRenameEventHandler\n  nameWithType: ComponentRenameEventHandler\n  fullName: System.ComponentModel.Design.ComponentRenameEventHandler\n- uid: System.ComponentModel.Design.IComponentChangeService.OnComponentChanged(System.Object,System.ComponentModel.MemberDescriptor,System.Object,System.Object)\n  parent: System.ComponentModel.Design.IComponentChangeService\n  isExternal: false\n  name: OnComponentChanged(Object, MemberDescriptor, Object, Object)\n  nameWithType: IComponentChangeService.OnComponentChanged(Object, MemberDescriptor, Object, Object)\n  fullName: IComponentChangeService.OnComponentChanged(Object, MemberDescriptor, Object, Object)\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ComponentModel.MemberDescriptor\n  parent: System.ComponentModel\n  isExternal: false\n  name: MemberDescriptor\n  nameWithType: MemberDescriptor\n  fullName: System.ComponentModel.MemberDescriptor\n- uid: System.ComponentModel.Design.IComponentChangeService.OnComponentChanging(System.Object,System.ComponentModel.MemberDescriptor)\n  parent: System.ComponentModel.Design.IComponentChangeService\n  isExternal: false\n  name: OnComponentChanging(Object, MemberDescriptor)\n  nameWithType: IComponentChangeService.OnComponentChanging(Object, MemberDescriptor)\n  fullName: IComponentChangeService.OnComponentChanging(Object, MemberDescriptor)\n- uid: System.ComponentModel.Design.IComponentChangeService.OnComponentChanged*\n  parent: System.ComponentModel.Design.IComponentChangeService\n  isExternal: false\n  name: OnComponentChanged\n  nameWithType: IComponentChangeService.OnComponentChanged\n  fullName: IComponentChangeService.OnComponentChanged\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Design/IComponentChangeService.xml\n- uid: System.ComponentModel.Design.IComponentChangeService.OnComponentChanging*\n  parent: System.ComponentModel.Design.IComponentChangeService\n  isExternal: false\n  name: OnComponentChanging\n  nameWithType: IComponentChangeService.OnComponentChanging\n  fullName: IComponentChangeService.OnComponentChanging\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Design/IComponentChangeService.xml\n"}