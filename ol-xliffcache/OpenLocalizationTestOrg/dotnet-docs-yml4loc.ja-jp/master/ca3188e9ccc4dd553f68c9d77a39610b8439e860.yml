### YamlMime:ManagedReference
items:
- uid: System.Collections.Concurrent.Partitioner
  commentId: T:System.Collections.Concurrent.Partitioner
  id: Partitioner
  children:
  - System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32)
  - System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64)
  - System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32,System.Int32)
  - System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64,System.Int64)
  - System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IEnumerable{``0})
  - System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Concurrent.EnumerablePartitionerOptions)
  - System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IList{``0},System.Boolean)
  - System.Collections.Concurrent.Partitioner.Create``1(``0[],System.Boolean)
  langs:
  - csharp
  name: Partitioner
  nameWithType: Partitioner
  fullName: System.Collections.Concurrent.Partitioner
  type: Class
  assemblies:
  - System.Collections.Concurrent
  - mscorlib
  - netstandard
  namespace: System.Collections.Concurrent
  summary: Provides common partitioning strategies for arrays, lists, and enumerables.
  remarks: For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).
  syntax:
    content: public static class Partitioner
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/Partitioner.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32)
  commentId: M:System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32)
  id: Create(System.Int32,System.Int32)
  parent: System.Collections.Concurrent.Partitioner
  langs:
  - csharp
  name: Create(Int32, Int32)
  nameWithType: Partitioner.Create(Int32, Int32)
  fullName: Partitioner.Create(Int32, Int32)
  type: Method
  assemblies:
  - System.Collections.Concurrent
  - mscorlib
  - netstandard
  namespace: System.Collections.Concurrent
  summary: Creates a partitioner that chunks the user-specified range.
  remarks: For more information and examples, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).
  syntax:
    content: public static System.Collections.Concurrent.OrderablePartitioner<Tuple<int,int>> Create (int fromInclusive, int toExclusive);
    parameters:
    - id: fromInclusive
      type: System.Int32
      description: The lower, inclusive bound of the range.
    - id: toExclusive
      type: System.Int32
      description: The upper, exclusive bound of the range.
    return:
      type: System.Collections.Concurrent.OrderablePartitioner{System.Tuple{System.Int32,System.Int32}}
      description: A partitioner.
  overload: System.Collections.Concurrent.Partitioner.Create*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>toExclusive</code> argument is less than or equal to the <code>fromInclusive</code> argument.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/Partitioner.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64)
  commentId: M:System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64)
  id: Create(System.Int64,System.Int64)
  parent: System.Collections.Concurrent.Partitioner
  langs:
  - csharp
  name: Create(Int64, Int64)
  nameWithType: Partitioner.Create(Int64, Int64)
  fullName: Partitioner.Create(Int64, Int64)
  type: Method
  assemblies:
  - System.Collections.Concurrent
  - mscorlib
  - netstandard
  namespace: System.Collections.Concurrent
  summary: Creates a partitioner that chunks the user-specified range.
  remarks: For more information and examples, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).
  syntax:
    content: public static System.Collections.Concurrent.OrderablePartitioner<Tuple<long,long>> Create (long fromInclusive, long toExclusive);
    parameters:
    - id: fromInclusive
      type: System.Int64
      description: The lower, inclusive bound of the range.
    - id: toExclusive
      type: System.Int64
      description: The upper, exclusive bound of the range.
    return:
      type: System.Collections.Concurrent.OrderablePartitioner{System.Tuple{System.Int64,System.Int64}}
      description: A partitioner.
  overload: System.Collections.Concurrent.Partitioner.Create*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>toExclusive</code> argument is less than or equal to the <code>fromInclusive</code> argument.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/Partitioner.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32,System.Int32)
  commentId: M:System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32,System.Int32)
  id: Create(System.Int32,System.Int32,System.Int32)
  parent: System.Collections.Concurrent.Partitioner
  langs:
  - csharp
  name: Create(Int32, Int32, Int32)
  nameWithType: Partitioner.Create(Int32, Int32, Int32)
  fullName: Partitioner.Create(Int32, Int32, Int32)
  type: Method
  assemblies:
  - System.Collections.Concurrent
  - mscorlib
  - netstandard
  namespace: System.Collections.Concurrent
  summary: Creates a partitioner that chunks the user-specified range.
  remarks: For more information and examples, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).
  syntax:
    content: public static System.Collections.Concurrent.OrderablePartitioner<Tuple<int,int>> Create (int fromInclusive, int toExclusive, int rangeSize);
    parameters:
    - id: fromInclusive
      type: System.Int32
      description: The lower, inclusive bound of the range.
    - id: toExclusive
      type: System.Int32
      description: The upper, exclusive bound of the range.
    - id: rangeSize
      type: System.Int32
      description: The size of each subrange.
    return:
      type: System.Collections.Concurrent.OrderablePartitioner{System.Tuple{System.Int32,System.Int32}}
      description: A partitioner.
  overload: System.Collections.Concurrent.Partitioner.Create*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The <code>toExclusive</code> argument is less than or equal to the <code>fromInclusive</code> argument.  \n  \n -or-  \n  \n The <code>rangeSize</code> argument is less than or equal to 0."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/Partitioner.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64,System.Int64)
  commentId: M:System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64,System.Int64)
  id: Create(System.Int64,System.Int64,System.Int64)
  parent: System.Collections.Concurrent.Partitioner
  langs:
  - csharp
  name: Create(Int64, Int64, Int64)
  nameWithType: Partitioner.Create(Int64, Int64, Int64)
  fullName: Partitioner.Create(Int64, Int64, Int64)
  type: Method
  assemblies:
  - System.Collections.Concurrent
  - mscorlib
  - netstandard
  namespace: System.Collections.Concurrent
  summary: Creates a partitioner that chunks the user-specified range.
  remarks: For more information and examples, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).
  syntax:
    content: public static System.Collections.Concurrent.OrderablePartitioner<Tuple<long,long>> Create (long fromInclusive, long toExclusive, long rangeSize);
    parameters:
    - id: fromInclusive
      type: System.Int64
      description: The lower, inclusive bound of the range.
    - id: toExclusive
      type: System.Int64
      description: The upper, exclusive bound of the range.
    - id: rangeSize
      type: System.Int64
      description: The size of each subrange.
    return:
      type: System.Collections.Concurrent.OrderablePartitioner{System.Tuple{System.Int64,System.Int64}}
      description: A partitioner.
  overload: System.Collections.Concurrent.Partitioner.Create*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The <code>toExclusive</code> argument is less than or equal to the <code>fromInclusive</code> argument.  \n  \n -or-  \n  \n The <code>rangeSize</code> argument is less than or equal to 0."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/Partitioner.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IEnumerable{``0})
  id: Create``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Collections.Concurrent.Partitioner
  langs:
  - csharp
  name: Create<TSource>(IEnumerable<TSource>)
  nameWithType: Partitioner.Create<TSource>(IEnumerable<TSource>)
  fullName: Partitioner.Create<TSource>(IEnumerable<TSource>)
  type: Method
  assemblies:
  - System.Collections.Concurrent
  - mscorlib
  - netstandard
  namespace: System.Collections.Concurrent
  summary: Creates an orderable partitioner from a <xref href="System.Collections.Generic.IEnumerable`1"></xref> instance.
  remarks: The ordering used in the created partitioner is determined by the natural order of the elements as retrieved from the source enumerable. For more information and examples, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).
  syntax:
    content: public static System.Collections.Concurrent.OrderablePartitioner<TSource> Create<TSource> (System.Collections.Generic.IEnumerable<TSource> source);
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{TSource}
      description: The enumerable to be partitioned.
    typeParameters:
    - id: TSource
      description: Type of the elements in source enumerable.
    return:
      type: System.Collections.Concurrent.OrderablePartitioner`1
      description: An orderable partitioner based on the input array.
  overload: System.Collections.Concurrent.Partitioner.Create``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/Partitioner.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Concurrent.EnumerablePartitionerOptions)
  commentId: M:System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Concurrent.EnumerablePartitionerOptions)
  id: Create``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Concurrent.EnumerablePartitionerOptions)
  parent: System.Collections.Concurrent.Partitioner
  langs:
  - csharp
  name: Create<TSource>(IEnumerable<TSource>, EnumerablePartitionerOptions)
  nameWithType: Partitioner.Create<TSource>(IEnumerable<TSource>, EnumerablePartitionerOptions)
  fullName: Partitioner.Create<TSource>(IEnumerable<TSource>, EnumerablePartitionerOptions)
  type: Method
  assemblies:
  - System.Collections.Concurrent
  - mscorlib
  - netstandard
  namespace: System.Collections.Concurrent
  summary: Creates an orderable partitioner from a <xref href="System.Collections.Generic.IEnumerable`1"></xref> instance.
  remarks: The ordering used in the created partitioner is determined by the natural order of the elements as retrieved from the source enumerable.
  syntax:
    content: public static System.Collections.Concurrent.OrderablePartitioner<TSource> Create<TSource> (System.Collections.Generic.IEnumerable<TSource> source, System.Collections.Concurrent.EnumerablePartitionerOptions partitionerOptions);
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{TSource}
      description: The enumerable to be partitioned.
    - id: partitionerOptions
      type: System.Collections.Concurrent.EnumerablePartitionerOptions
      description: Options to control the buffering behavior of the partitioner.
    typeParameters:
    - id: TSource
      description: Type of the elements in source enumerable.
    return:
      type: System.Collections.Concurrent.OrderablePartitioner`1
      description: An orderable partitioner based on the input array.
  overload: System.Collections.Concurrent.Partitioner.Create``1*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>partitionerOptions</code> argument specifies an invalid value for <xref href="System.Collections.Concurrent.EnumerablePartitionerOptions"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/Partitioner.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IList{``0},System.Boolean)
  commentId: M:System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IList{``0},System.Boolean)
  id: Create``1(System.Collections.Generic.IList{``0},System.Boolean)
  parent: System.Collections.Concurrent.Partitioner
  langs:
  - csharp
  name: Create<TSource>(IList<TSource>, Boolean)
  nameWithType: Partitioner.Create<TSource>(IList<TSource>, Boolean)
  fullName: Partitioner.Create<TSource>(IList<TSource>, Boolean)
  type: Method
  assemblies:
  - System.Collections.Concurrent
  - mscorlib
  - netstandard
  namespace: System.Collections.Concurrent
  summary: Creates an orderable partitioner from an <xref href="System.Collections.Generic.IList`1"></xref> instance.
  remarks: For more information and examples, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).
  syntax:
    content: public static System.Collections.Concurrent.OrderablePartitioner<TSource> Create<TSource> (System.Collections.Generic.IList<TSource> list, bool loadBalance);
    parameters:
    - id: list
      type: System.Collections.Generic.IList{TSource}
      description: The list to be partitioned.
    - id: loadBalance
      type: System.Boolean
      description: A Boolean value that indicates whether the created partitioner should dynamically load balance between partitions rather than statically partition.
    typeParameters:
    - id: TSource
      description: Type of the elements in source list.
    return:
      type: System.Collections.Concurrent.OrderablePartitioner`1
      description: An orderable partitioner based on the input list.
  overload: System.Collections.Concurrent.Partitioner.Create``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/Partitioner.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Concurrent.Partitioner.Create``1(``0[],System.Boolean)
  commentId: M:System.Collections.Concurrent.Partitioner.Create``1(``0[],System.Boolean)
  id: Create``1(``0[],System.Boolean)
  parent: System.Collections.Concurrent.Partitioner
  langs:
  - csharp
  name: Create<TSource>(TSource[], Boolean)
  nameWithType: Partitioner.Create<TSource>(TSource[], Boolean)
  fullName: Partitioner.Create<TSource>(TSource[], Boolean)
  type: Method
  assemblies:
  - System.Collections.Concurrent
  - mscorlib
  - netstandard
  namespace: System.Collections.Concurrent
  summary: Creates an orderable partitioner from a <xref href="System.Array"></xref> instance.
  remarks: For more information and examples, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).
  syntax:
    content: public static System.Collections.Concurrent.OrderablePartitioner<TSource> Create<TSource> (TSource[] array, bool loadBalance);
    parameters:
    - id: array
      type: TSource[]
      description: The array to be partitioned.
    - id: loadBalance
      type: System.Boolean
      description: A Boolean value that indicates whether the created partitioner should dynamically load balance between partitions rather than statically partition.
    typeParameters:
    - id: TSource
      description: Type of the elements in source array.
    return:
      type: System.Collections.Concurrent.OrderablePartitioner`1
      description: An orderable partitioner based on the input array.
  overload: System.Collections.Concurrent.Partitioner.Create``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/Partitioner.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32)
  parent: System.Collections.Concurrent.Partitioner
  isExternal: false
  name: Create(Int32, Int32)
  nameWithType: Partitioner.Create(Int32, Int32)
  fullName: Partitioner.Create(Int32, Int32)
- uid: System.Collections.Concurrent.OrderablePartitioner`1
  name: OrderablePartitioner<TSource>
  nameWithType: OrderablePartitioner<TSource>
  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>
- uid: System.Tuple`2
  name: Tuple<T1,T2>
  nameWithType: Tuple<T1,T2>
  fullName: System.Tuple<T1,T2>
- uid: System.Int32
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Concurrent.OrderablePartitioner{System.Tuple{System.Int32,System.Int32}}
  parent: System.Collections.Concurrent
  isExternal: false
  name: OrderablePartitioner<Tuple<Int32,Int32>>
  nameWithType: OrderablePartitioner<Tuple<Int32,Int32>>
  fullName: System.Collections.Concurrent.OrderablePartitioner<System.Tuple<System.Int32,System.Int32>>
  spec.csharp:
  - uid: System.Collections.Concurrent.OrderablePartitioner`1
    name: OrderablePartitioner
    nameWithType: OrderablePartitioner
    fullName: System.Collections.Concurrent.OrderablePartitioner
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64)
  parent: System.Collections.Concurrent.Partitioner
  isExternal: false
  name: Create(Int64, Int64)
  nameWithType: Partitioner.Create(Int64, Int64)
  fullName: Partitioner.Create(Int64, Int64)
- uid: System.Int64
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Collections.Concurrent.OrderablePartitioner{System.Tuple{System.Int64,System.Int64}}
  parent: System.Collections.Concurrent
  isExternal: false
  name: OrderablePartitioner<Tuple<Int64,Int64>>
  nameWithType: OrderablePartitioner<Tuple<Int64,Int64>>
  fullName: System.Collections.Concurrent.OrderablePartitioner<System.Tuple<System.Int64,System.Int64>>
  spec.csharp:
  - uid: System.Collections.Concurrent.OrderablePartitioner`1
    name: OrderablePartitioner
    nameWithType: OrderablePartitioner
    fullName: System.Collections.Concurrent.OrderablePartitioner
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32,System.Int32)
  parent: System.Collections.Concurrent.Partitioner
  isExternal: false
  name: Create(Int32, Int32, Int32)
  nameWithType: Partitioner.Create(Int32, Int32, Int32)
  fullName: Partitioner.Create(Int32, Int32, Int32)
- uid: System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64,System.Int64)
  parent: System.Collections.Concurrent.Partitioner
  isExternal: false
  name: Create(Int64, Int64, Int64)
  nameWithType: Partitioner.Create(Int64, Int64, Int64)
  fullName: Partitioner.Create(Int64, Int64, Int64)
- uid: System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Collections.Concurrent.Partitioner
  isExternal: false
  name: Create<TSource>(IEnumerable<TSource>)
  nameWithType: Partitioner.Create<TSource>(IEnumerable<TSource>)
  fullName: Partitioner.Create<TSource>(IEnumerable<TSource>)
- uid: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
- uid: TSource
  name: TSource
  nameWithType: TSource
  fullName: TSource
- uid: System.Collections.Generic.IEnumerable{TSource}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<TSource>
  nameWithType: IEnumerable<TSource>
  fullName: System.Collections.Generic.IEnumerable<TSource>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Concurrent.EnumerablePartitionerOptions)
  parent: System.Collections.Concurrent.Partitioner
  isExternal: false
  name: Create<TSource>(IEnumerable<TSource>, EnumerablePartitionerOptions)
  nameWithType: Partitioner.Create<TSource>(IEnumerable<TSource>, EnumerablePartitionerOptions)
  fullName: Partitioner.Create<TSource>(IEnumerable<TSource>, EnumerablePartitionerOptions)
- uid: System.Collections.Concurrent.EnumerablePartitionerOptions
  parent: System.Collections.Concurrent
  isExternal: false
  name: EnumerablePartitionerOptions
  nameWithType: EnumerablePartitionerOptions
  fullName: System.Collections.Concurrent.EnumerablePartitionerOptions
- uid: System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IList{``0},System.Boolean)
  parent: System.Collections.Concurrent.Partitioner
  isExternal: false
  name: Create<TSource>(IList<TSource>, Boolean)
  nameWithType: Partitioner.Create<TSource>(IList<TSource>, Boolean)
  fullName: Partitioner.Create<TSource>(IList<TSource>, Boolean)
- uid: System.Collections.Generic.IList`1
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
- uid: System.Collections.Generic.IList{TSource}
  parent: System.Collections.Generic
  isExternal: false
  name: IList<TSource>
  nameWithType: IList<TSource>
  fullName: System.Collections.Generic.IList<TSource>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
  - name: <
    nameWithType: <
    fullName: <
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Concurrent.Partitioner.Create``1(``0[],System.Boolean)
  parent: System.Collections.Concurrent.Partitioner
  isExternal: false
  name: Create<TSource>(TSource[], Boolean)
  nameWithType: Partitioner.Create<TSource>(TSource[], Boolean)
  fullName: Partitioner.Create<TSource>(TSource[], Boolean)
- uid: TSource[]
  isExternal: true
  name: TSource[]
  nameWithType: TSource[]
  fullName: TSource[]
  spec.csharp:
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Collections.Concurrent.Partitioner.Create*
  parent: System.Collections.Concurrent.Partitioner
  isExternal: false
  name: Create
  nameWithType: Partitioner.Create
  fullName: Partitioner.Create
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/Partitioner.xml
- uid: System.Collections.Concurrent.Partitioner.Create``1*
  parent: System.Collections.Concurrent.Partitioner
  isExternal: false
  name: Create<TSource>
  nameWithType: Partitioner.Create<TSource>
  fullName: Partitioner.Create<TSource>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/Partitioner.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
