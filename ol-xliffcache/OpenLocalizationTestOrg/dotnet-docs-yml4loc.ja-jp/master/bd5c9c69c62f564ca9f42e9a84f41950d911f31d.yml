### YamlMime:ManagedReference
items:
- uid: System.Reflection.Emit.DynamicILInfo
  commentId: T:System.Reflection.Emit.DynamicILInfo
  id: DynamicILInfo
  children:
  - System.Reflection.Emit.DynamicILInfo.DynamicMethod
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  - System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)
  - System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)
  - System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])
  - System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)
  - System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])
  - System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)
  langs:
  - csharp
  name: DynamicILInfo
  nameWithType: DynamicILInfo
  fullName: System.Reflection.Emit.DynamicILInfo
  type: Class
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Provides support for alternative ways to generate the Microsoft intermediate language (MSIL) and metadata for a dynamic method, including methods for creating tokens and for inserting the code, exception handling, and local variable signature blobs.
  remarks: "The <xref:System.Reflection.Emit.DynamicILInfo> class allows developers to write their own MSIL generators instead of using <xref:System.Reflection.Emit.ILGenerator>.  \n  \n To create instances of other types, call methods, and so on, the MSIL you generate must include tokens for those entities. The <xref:System.Reflection.Emit.DynamicILInfo> class provides several overloads of the <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A> method, which return tokens valid in the scope of the current <xref:System.Reflection.Emit.DynamicILInfo>. For example, if you need to call an overload of the <xref:System.Console.WriteLine%2A?displayProperty=fullName> method, you can obtain a <xref:System.RuntimeMethodHandle> for that overload and pass it to the <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A> method to obtain a token to embed in your MSIL.  \n  \n Once you have created <xref:System.Byte> arrays for your local variable signature, exceptions, and code body, you can use the <xref:System.Reflection.Emit.DynamicILInfo.SetCode%2A>, <xref:System.Reflection.Emit.DynamicILInfo.SetExceptions%2A>, and <xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A> methods to insert them into the <xref:System.Reflection.Emit.DynamicMethod> associated with your <xref:System.Reflection.Emit.DynamicILInfo> object.  \n  \n Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.  \n  \n> [!NOTE]\n>  Do not use <xref:System.Reflection.Emit.DynamicILInfo> to generate code that creates a delegate to another dynamic method by calling the delegate constructor directly. Instead, use the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method to create the delegate. A delegate that is created with the delegate constructor does not have a reference to the target dynamic method. The dynamic method might be reclaimed by garbage collection while the delegate is still in use."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class DynamicILInfo
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicILInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.DynamicILInfo.DynamicMethod
  commentId: P:System.Reflection.Emit.DynamicILInfo.DynamicMethod
  id: DynamicMethod
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: DynamicMethod
  nameWithType: DynamicILInfo.DynamicMethod
  fullName: DynamicILInfo.DynamicMethod
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets the dynamic method whose body is generated by the current instance.
  remarks: A <xref:System.Reflection.Emit.DynamicILInfo> object is always associated with a dynamic method. The purpose of the <xref:System.Reflection.Emit.DynamicILInfo> class is to provide another way of inserting the MSIL stream, exception handling, and local variable signature into a dynamic method, for developers who want to generate MSIL without using the <xref:System.Reflection.Emit.ILGenerator> class.
  syntax:
    content: public System.Reflection.Emit.DynamicMethod DynamicMethod { get; }
    return:
      type: System.Reflection.Emit.DynamicMethod
      description: A <xref href="System.Reflection.Emit.DynamicMethod"></xref> object representing the dynamic method for which the current <xref href="System.Reflection.Emit.DynamicILInfo"></xref> object is generating code.
  overload: System.Reflection.Emit.DynamicILInfo.DynamicMethod*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicILInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])
  commentId: M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])
  id: GetTokenFor(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(Byte[])
  nameWithType: DynamicILInfo.GetTokenFor(Byte[])
  fullName: DynamicILInfo.GetTokenFor(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets a token, valid in the scope of the current <xref href="System.Reflection.Emit.DynamicILInfo"></xref>, representing the signature for the associated dynamic method.
  remarks: 'For information on signature blobs, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.'
  syntax:
    content: public int GetTokenFor (byte[] signature);
    parameters:
    - id: signature
      type: System.Byte[]
      description: An array that contains the signature.
    return:
      type: System.Int32
      description: A token that can be embedded in the metadata and the MSIL stream for the associated dynamic method.
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicILInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)
  commentId: M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)
  id: GetTokenFor(System.Reflection.Emit.DynamicMethod)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(DynamicMethod)
  nameWithType: DynamicILInfo.GetTokenFor(DynamicMethod)
  fullName: DynamicILInfo.GetTokenFor(DynamicMethod)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets a token, valid in the scope of the current <xref href="System.Reflection.Emit.DynamicILInfo"></xref>, representing a dynamic method to be called from the associated method.
  remarks: The token returned by this method overload allows you to call a dynamic method from the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object. To call the associated dynamic method recursively, pass the value of the <xref:System.Reflection.Emit.DynamicILInfo.DynamicMethod%2A> property.
  syntax:
    content: public int GetTokenFor (System.Reflection.Emit.DynamicMethod method);
    parameters:
    - id: method
      type: System.Reflection.Emit.DynamicMethod
      description: The dynamic method to call.
    return:
      type: System.Int32
      description: A token that can be embedded in the MSIL stream for the associated dynamic method, as the target of an MSIL instruction.
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicILInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)
  commentId: M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)
  id: GetTokenFor(System.RuntimeFieldHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(RuntimeFieldHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeFieldHandle)
  fullName: DynamicILInfo.GetTokenFor(RuntimeFieldHandle)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets a token, valid in the scope of the current <xref href="System.Reflection.Emit.DynamicILInfo"></xref>, representing a field to be accessed from the associated dynamic method.
  remarks: You must obtain a token for any field that will be accessed by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object. Use the <xref:System.Type.GetField%2A?displayProperty=fullName> method to get a <xref:System.Reflection.FieldInfo> for the field you want to access, then use the <xref:System.Reflection.FieldInfo.FieldHandle%2A> property to get the <xref:System.RuntimeFieldHandle>.
  syntax:
    content: public int GetTokenFor (RuntimeFieldHandle field);
    parameters:
    - id: field
      type: System.RuntimeFieldHandle
      description: The field to be accessed.
    return:
      type: System.Int32
      description: A token that can be used as the operand of an MSIL instruction that accesses fields, in the scope of the current <xref href="System.Reflection.Emit.DynamicILInfo"></xref> object.
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicILInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)
  commentId: M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)
  id: GetTokenFor(System.RuntimeMethodHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(RuntimeMethodHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeMethodHandle)
  fullName: DynamicILInfo.GetTokenFor(RuntimeMethodHandle)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets a token, valid in the scope of the current <xref href="System.Reflection.Emit.DynamicILInfo"></xref>, representing a method to be accessed from the associated dynamic method.
  remarks: "You must obtain a token for any method that will be accessed by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object. Use the <xref:System.Type.GetMethod%2A?displayProperty=fullName> method to get a <xref:System.Reflection.MethodInfo> for the method you want to access, and then use the <xref:System.Reflection.MethodBase.MethodHandle%2A> property to get the <xref:System.RuntimeMethodHandle>.  \n  \n> [!NOTE]\n>  For a method that belongs to a generic type, use the <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%28System.RuntimeMethodHandle%2CSystem.RuntimeTypeHandle%29> method overload and specify a <xref:System.RuntimeTypeHandle> for the generic type."
  syntax:
    content: public int GetTokenFor (RuntimeMethodHandle method);
    parameters:
    - id: method
      type: System.RuntimeMethodHandle
      description: The method to be accessed.
    return:
      type: System.Int32
      description: A token that can be used as the operand of an MSIL instruction that accesses methods, such as <xref href="System.Reflection.Emit.OpCodes.Call"></xref> or <xref href="System.Reflection.Emit.OpCodes.Ldtoken"></xref>, in the scope of the current <xref href="System.Reflection.Emit.DynamicILInfo"></xref> object.
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicILInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)
  commentId: M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)
  id: GetTokenFor(System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeTypeHandle)
  fullName: DynamicILInfo.GetTokenFor(RuntimeTypeHandle)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets a token, valid in the scope of the current <xref href="System.Reflection.Emit.DynamicILInfo"></xref>, representing a type to be used in the associated dynamic method.
  remarks: "The token returned by this method overload allows you to define a local variable type, and emit MSIL to create an instance of a type in the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object.  \n  \n To get a <xref:System.RuntimeTypeHandle> representing a type, use the <xref:System.Type.TypeHandle%2A?displayProperty=fullName> property."
  syntax:
    content: public int GetTokenFor (RuntimeTypeHandle type);
    parameters:
    - id: type
      type: System.RuntimeTypeHandle
      description: The type to be used.
    return:
      type: System.Int32
      description: A token that can be used as the operand of an MSIL instruction that requires a type, in the scope of the current <xref href="System.Reflection.Emit.DynamicILInfo"></xref> object.
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicILInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)
  commentId: M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)
  id: GetTokenFor(System.String)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(String)
  nameWithType: DynamicILInfo.GetTokenFor(String)
  fullName: DynamicILInfo.GetTokenFor(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets a token, valid in the scope of the current <xref href="System.Reflection.Emit.DynamicILInfo"></xref>, representing a string literal to be used in the associated dynamic method.
  syntax:
    content: public int GetTokenFor (string literal);
    parameters:
    - id: literal
      type: System.String
      description: The string to be used.
    return:
      type: System.Int32
      description: A token that can be used as the operand of an MSIL instruction that requires a string, in the scope of the current <xref href="System.Reflection.Emit.DynamicILInfo"></xref> object.
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicILInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  commentId: M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  id: GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(RuntimeFieldHandle, RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeFieldHandle, RuntimeTypeHandle)
  fullName: DynamicILInfo.GetTokenFor(RuntimeFieldHandle, RuntimeTypeHandle)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets a token, valid in the scope of the current <xref href="System.Reflection.Emit.DynamicILInfo"></xref>, representing a field to be accessed from the associated dynamic method; the field is on the specified generic type.
  remarks: You must obtain a token for any field that will be accessed by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object. Use the <xref:System.Type.GetField%2A?displayProperty=fullName> method to get a <xref:System.Reflection.FieldInfo> for the field you want to access, and then use the <xref:System.Reflection.FieldInfo.FieldHandle%2A> property to get the <xref:System.RuntimeFieldHandle>.
  syntax:
    content: public int GetTokenFor (RuntimeFieldHandle field, RuntimeTypeHandle contextType);
    parameters:
    - id: field
      type: System.RuntimeFieldHandle
      description: The field to be accessed.
    - id: contextType
      type: System.RuntimeTypeHandle
      description: The generic type the field belongs to.
    return:
      type: System.Int32
      description: A token that can be used as the operand of an MSIL instruction that accesses fields in the scope of the current <xref href="System.Reflection.Emit.DynamicILInfo"></xref> object.
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicILInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  commentId: M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  id: GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(RuntimeMethodHandle, RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeMethodHandle, RuntimeTypeHandle)
  fullName: DynamicILInfo.GetTokenFor(RuntimeMethodHandle, RuntimeTypeHandle)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets a token, valid in the scope of the current <xref href="System.Reflection.Emit.DynamicILInfo"></xref>, representing a method on a generic type.
  remarks: You must obtain a token for any method that will be called by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object. Use the <xref:System.Type.GetMethod%2A?displayProperty=fullName> method to get a <xref:System.Reflection.MethodInfo> for the method you want to call, and then use the <xref:System.Reflection.MethodBase.MethodHandle%2A> property to get the <xref:System.RuntimeMethodHandle>.
  syntax:
    content: public int GetTokenFor (RuntimeMethodHandle method, RuntimeTypeHandle contextType);
    parameters:
    - id: method
      type: System.RuntimeMethodHandle
      description: The method.
    - id: contextType
      type: System.RuntimeTypeHandle
      description: The generic type the method belongs to.
    return:
      type: System.Int32
      description: A token that can be used as the operand of an MSIL instruction that accesses methods, such as <xref href="System.Reflection.Emit.OpCodes.Call"></xref> or <xref href="System.Reflection.Emit.OpCodes.Ldtoken"></xref>, in the scope of the current <xref href="System.Reflection.Emit.DynamicILInfo"></xref> object.
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicILInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)
  commentId: M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)
  id: SetCode(System.Byte[],System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetCode(Byte[], Int32)
  nameWithType: DynamicILInfo.SetCode(Byte[], Int32)
  fullName: DynamicILInfo.SetCode(Byte[], Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Sets the code body of the associated dynamic method.
  remarks: "No validity checks are performed on the MSIL stream.  \n  \n Calling this method a second time replaces the first MSIL stream with the second.  \n  \n Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."
  syntax:
    content: public void SetCode (byte[] code, int maxStackSize);
    parameters:
    - id: code
      type: System.Byte[]
      description: An array that contains the MSIL stream.
    - id: maxStackSize
      type: System.Int32
      description: The maximum number of items on the operand stack when the method is executing.
  overload: System.Reflection.Emit.DynamicILInfo.SetCode*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicILInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)
  commentId: M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)
  id: SetCode(System.Byte*,System.Int32,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetCode(Byte*, Int32, Int32)
  nameWithType: DynamicILInfo.SetCode(Byte*, Int32, Int32)
  fullName: DynamicILInfo.SetCode(Byte*, Int32, Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Sets the code body of the associated dynamic method.
  remarks: "No validity checks are performed on the MSIL stream.  \n  \n Calling this method a second time replaces the first MSIL stream with the second.  \n  \n Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set.\" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public void SetCode (byte* code, int codeSize, int maxStackSize);
    parameters:
    - id: code
      type: System.Byte*
      description: A pointer to a byte array containing the MSIL stream.
    - id: codeSize
      type: System.Int32
      description: The number of bytes in the MSIL stream.
    - id: maxStackSize
      type: System.Int32
      description: The maximum number of items on the operand stack when the method is executing.
  overload: System.Reflection.Emit.DynamicILInfo.SetCode*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>code</code> is `null` and <code>codeSize</code> is greater than 0.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>codeSize</code> is less than 0.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  altCompliant: System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicILInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])
  commentId: M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])
  id: SetExceptions(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetExceptions(Byte[])
  nameWithType: DynamicILInfo.SetExceptions(Byte[])
  fullName: DynamicILInfo.SetExceptions(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Sets the exception metadata for the associated dynamic method.
  remarks: 'The exception metadata for a method defines the location and size of all `try`, `catch`, `finally`, filter, and fault blocks. For information on the layout of this metadata, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.'
  syntax:
    content: public void SetExceptions (byte[] exceptions);
    parameters:
    - id: exceptions
      type: System.Byte[]
      description: An array that contains the exception metadata.
  overload: System.Reflection.Emit.DynamicILInfo.SetExceptions*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicILInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)
  commentId: M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)
  id: SetExceptions(System.Byte*,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetExceptions(Byte*, Int32)
  nameWithType: DynamicILInfo.SetExceptions(Byte*, Int32)
  fullName: DynamicILInfo.SetExceptions(Byte*, Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Sets the exception metadata for the associated dynamic method.
  remarks: 'The exception metadata for a method defines the location and size of all `try`, `catch`, `finally`, filter, and fault blocks. For information on the layout of this metadata, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.'
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public void SetExceptions (byte* exceptions, int exceptionsSize);
    parameters:
    - id: exceptions
      type: System.Byte*
      description: A pointer to a byte array containing the exception metadata.
    - id: exceptionsSize
      type: System.Int32
      description: The number of bytes of exception metadata.
  overload: System.Reflection.Emit.DynamicILInfo.SetExceptions*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>exceptions</code> is `null` and <code>exceptionSize</code> is greater than 0.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>exceptionSize</code> is less than 0.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  altCompliant: System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicILInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])
  commentId: M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])
  id: SetLocalSignature(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetLocalSignature(Byte[])
  nameWithType: DynamicILInfo.SetLocalSignature(Byte[])
  fullName: DynamicILInfo.SetLocalSignature(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Sets the local variable signature that describes the layout of local variables for the associated dynamic method.
  remarks: "The local variable signature describes the layout of a method's local variables. To simplify construction of the local variable signature, use the `static` (`Shared` in Visual Basic) <xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName> method to get a <xref:System.Reflection.Emit.SignatureHelper> for the local signature.  \n  \n For information on local variable signatures, see the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."
  syntax:
    content: public void SetLocalSignature (byte[] localSignature);
    parameters:
    - id: localSignature
      type: System.Byte[]
      description: An array that contains the layout of local variables for the associated <xref href="System.Reflection.Emit.DynamicMethod"></xref>.
  overload: System.Reflection.Emit.DynamicILInfo.SetLocalSignature*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicILInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)
  commentId: M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)
  id: SetLocalSignature(System.Byte*,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetLocalSignature(Byte*, Int32)
  nameWithType: DynamicILInfo.SetLocalSignature(Byte*, Int32)
  fullName: DynamicILInfo.SetLocalSignature(Byte*, Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Sets the local variable signature that describes the layout of local variables for the associated dynamic method.
  remarks: "The local variable signature describes the layout of a method's local variables. To simplify construction of the local variable signature, use the `static` (`Shared` in Visual Basic) <xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName> method to get a <xref:System.Reflection.Emit.SignatureHelper> for the local signature.  \n  \n For information on local variable signatures, see the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public void SetLocalSignature (byte* localSignature, int signatureSize);
    parameters:
    - id: localSignature
      type: System.Byte*
      description: An array that contains the layout of local variables for the associated <xref href="System.Reflection.Emit.DynamicMethod"></xref>.
    - id: signatureSize
      type: System.Int32
      description: The number of bytes in the signature.
  overload: System.Reflection.Emit.DynamicILInfo.SetLocalSignature*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>localSignature</code> is `null` and <code>signatureSize</code> is greater than 0.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>signatureSize</code> is less than 0.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  altCompliant: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicILInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.Reflection.Emit.DynamicILInfo.DynamicMethod
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: DynamicMethod
  nameWithType: DynamicILInfo.DynamicMethod
  fullName: DynamicILInfo.DynamicMethod
- uid: System.Reflection.Emit.DynamicMethod
  parent: System.Reflection.Emit
  isExternal: false
  name: DynamicMethod
  nameWithType: DynamicMethod
  fullName: System.Reflection.Emit.DynamicMethod
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(Byte[])
  nameWithType: DynamicILInfo.GetTokenFor(Byte[])
  fullName: DynamicILInfo.GetTokenFor(Byte[])
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Byte
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Byte[]
  parent: System
  isExternal: false
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(DynamicMethod)
  nameWithType: DynamicILInfo.GetTokenFor(DynamicMethod)
  fullName: DynamicILInfo.GetTokenFor(DynamicMethod)
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(RuntimeFieldHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeFieldHandle)
  fullName: DynamicILInfo.GetTokenFor(RuntimeFieldHandle)
- uid: System.RuntimeFieldHandle
  parent: System
  isExternal: false
  name: RuntimeFieldHandle
  nameWithType: RuntimeFieldHandle
  fullName: System.RuntimeFieldHandle
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(RuntimeMethodHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeMethodHandle)
  fullName: DynamicILInfo.GetTokenFor(RuntimeMethodHandle)
- uid: System.RuntimeMethodHandle
  parent: System
  isExternal: false
  name: RuntimeMethodHandle
  nameWithType: RuntimeMethodHandle
  fullName: System.RuntimeMethodHandle
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeTypeHandle)
  fullName: DynamicILInfo.GetTokenFor(RuntimeTypeHandle)
- uid: System.RuntimeTypeHandle
  parent: System
  isExternal: false
  name: RuntimeTypeHandle
  nameWithType: RuntimeTypeHandle
  fullName: System.RuntimeTypeHandle
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(String)
  nameWithType: DynamicILInfo.GetTokenFor(String)
  fullName: DynamicILInfo.GetTokenFor(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(RuntimeFieldHandle, RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeFieldHandle, RuntimeTypeHandle)
  fullName: DynamicILInfo.GetTokenFor(RuntimeFieldHandle, RuntimeTypeHandle)
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(RuntimeMethodHandle, RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeMethodHandle, RuntimeTypeHandle)
  fullName: DynamicILInfo.GetTokenFor(RuntimeMethodHandle, RuntimeTypeHandle)
- uid: System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetCode(Byte[], Int32)
  nameWithType: DynamicILInfo.SetCode(Byte[], Int32)
  fullName: DynamicILInfo.SetCode(Byte[], Int32)
- uid: System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetCode(Byte*, Int32, Int32)
  nameWithType: DynamicILInfo.SetCode(Byte*, Int32, Int32)
  fullName: DynamicILInfo.SetCode(Byte*, Int32, Int32)
- uid: System.Byte*
  parent: System
  isExternal: false
  name: Byte*
  nameWithType: Byte*
  fullName: System.Byte*
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
  - name: '*'
    nameWithType: '*'
    fullName: '*'
- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetExceptions(Byte[])
  nameWithType: DynamicILInfo.SetExceptions(Byte[])
  fullName: DynamicILInfo.SetExceptions(Byte[])
- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetExceptions(Byte*, Int32)
  nameWithType: DynamicILInfo.SetExceptions(Byte*, Int32)
  fullName: DynamicILInfo.SetExceptions(Byte*, Int32)
- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetLocalSignature(Byte[])
  nameWithType: DynamicILInfo.SetLocalSignature(Byte[])
  fullName: DynamicILInfo.SetLocalSignature(Byte[])
- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetLocalSignature(Byte*, Int32)
  nameWithType: DynamicILInfo.SetLocalSignature(Byte*, Int32)
  fullName: DynamicILInfo.SetLocalSignature(Byte*, Int32)
- uid: System.Reflection.Emit.DynamicILInfo.DynamicMethod*
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: DynamicMethod
  nameWithType: DynamicILInfo.DynamicMethod
  fullName: DynamicILInfo.DynamicMethod
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicILInfo.xml
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor
  nameWithType: DynamicILInfo.GetTokenFor
  fullName: DynamicILInfo.GetTokenFor
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicILInfo.xml
- uid: System.Reflection.Emit.DynamicILInfo.SetCode*
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetCode
  nameWithType: DynamicILInfo.SetCode
  fullName: DynamicILInfo.SetCode
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicILInfo.xml
- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions*
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetExceptions
  nameWithType: DynamicILInfo.SetExceptions
  fullName: DynamicILInfo.SetExceptions
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicILInfo.xml
- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature*
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetLocalSignature
  nameWithType: DynamicILInfo.SetLocalSignature
  fullName: DynamicILInfo.SetLocalSignature
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/DynamicILInfo.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
