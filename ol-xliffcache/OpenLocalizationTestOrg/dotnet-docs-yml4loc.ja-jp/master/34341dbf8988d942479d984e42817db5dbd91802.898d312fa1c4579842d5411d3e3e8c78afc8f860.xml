{"nodes":[{"content":"the Taiwan calendar.","nodes":[{"pos":[0,20],"content":"the Taiwan calendar.","nodes":[{"content":"the Taiwan calendar.","pos":[0,20]}]}],"pos":[2293,2314],"yaml":true},{"content":"The Taiwan calendar works exactly like the Gregorian calendar, except that the year and era are different. The <xref:System.Globalization.TaiwanCalendar> class recognizes only the current era.  \n  \n> [!NOTE]\n>  For information about using the <xref:System.Globalization.TaiwanCalendar> class and the other calendar classes in the .NET Framework, see [Working with Calendars](~/docs/standard/datetime/working-with-calendars.md).  \n  \n Leap years in the Taiwan calendar correspond to the same leap years in the Gregorian calendar. A leap year in the Gregorian calendar is defined as a Gregorian year that is evenly divisible by four, except if it is divisible by 100. However, Gregorian years that are divisible by 400 are leap years. A common year has 365 days and a leap year has 366 days.  \n  \n The Taiwan calendar has 12 months with 28 to 31 days each:  \n  \n|GetMonth value|Month|Days in common years|Days in leap years|  \n|--------------------|-----------|--------------------------|------------------------|  \n|1|1月 (January)|31|31|  \n|2|2月 (February)|28|29|  \n|3|3月 (March)|31|31|  \n|4|4月 (April)|30|30|  \n|5|5月 (May)|31|31|  \n|6|6月 (June)|30|30|  \n|7|7月 (July)|31|31|  \n|8|8月 (August)|31|31|  \n|9|9月 (September)|30|30|  \n|10|10月 (October)|31|31|  \n|11|11月 (November)|30|30|  \n|12|12月 (December)|31|31|  \n  \n February has 29 days during leap years and 28 during common years.  \n  \n The date January 1, 2001 C.E. in the Gregorian calendar is equivalent to the first day of January in the year 90 of the current era in the Taiwan calendar.  \n  \n Each <xref:System.Globalization.CultureInfo> supports a set of calendars. The <xref:System.Globalization.CultureInfo.Calendar%2A> property returns the default calendar for the culture, and the <xref:System.Globalization.CultureInfo.OptionalCalendars%2A> property returns an array containing all the calendars supported by the culture. To change the calendar used by a <xref:System.Globalization.CultureInfo>, the application should set the <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> property of <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> to a new <xref:System.Globalization.Calendar>.","nodes":[{"pos":[0,192],"content":"The Taiwan calendar works exactly like the Gregorian calendar, except that the year and era are different. The <xref:System.Globalization.TaiwanCalendar> class recognizes only the current era.","nodes":[{"content":"The Taiwan calendar works exactly like the Gregorian calendar, except that the year and era are different. The <xref:System.Globalization.TaiwanCalendar> class recognizes only the current era.","pos":[0,192],"nodes":[{"content":"The Taiwan calendar works exactly like the Gregorian calendar, except that the year and era are different.","pos":[0,106]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Globalization.TaiwanCalendar&gt;</ph> class recognizes only the current era.","pos":[107,192],"source":" The <xref:System.Globalization.TaiwanCalendar> class recognizes only the current era."}]}]},{"pos":[200,427],"content":"[!NOTE]\n For information about using the <xref:System.Globalization.TaiwanCalendar> class and the other calendar classes in the .NET Framework, see [Working with Calendars](~/docs/standard/datetime/working-with-calendars.md).","leadings":["","> "],"nodes":[{"content":"For information about using the <ph id=\"ph1\">&lt;xref:System.Globalization.TaiwanCalendar&gt;</ph> class and the other calendar classes in the .NET Framework, see <bpt id=\"p1\">[</bpt>Working with Calendars<ept id=\"p1\">](~/docs/standard/datetime/working-with-calendars.md)</ept>.","pos":[9,225],"source":" For information about using the <xref:System.Globalization.TaiwanCalendar> class and the other calendar classes in the .NET Framework, see [Working with Calendars](~/docs/standard/datetime/working-with-calendars.md)."}]},{"pos":[434,789],"content":"Leap years in the Taiwan calendar correspond to the same leap years in the Gregorian calendar. A leap year in the Gregorian calendar is defined as a Gregorian year that is evenly divisible by four, except if it is divisible by 100. However, Gregorian years that are divisible by 400 are leap years. A common year has 365 days and a leap year has 366 days.","nodes":[{"content":"Leap years in the Taiwan calendar correspond to the same leap years in the Gregorian calendar. A leap year in the Gregorian calendar is defined as a Gregorian year that is evenly divisible by four, except if it is divisible by 100. However, Gregorian years that are divisible by 400 are leap years. A common year has 365 days and a leap year has 366 days.","pos":[0,355],"nodes":[{"content":"Leap years in the Taiwan calendar correspond to the same leap years in the Gregorian calendar.","pos":[0,94]},{"content":"A leap year in the Gregorian calendar is defined as a Gregorian year that is evenly divisible by four, except if it is divisible by 100.","pos":[95,231]},{"content":"However, Gregorian years that are divisible by 400 are leap years.","pos":[232,298]},{"content":"A common year has 365 days and a leap year has 366 days.","pos":[299,355]}]}]},{"pos":[796,854],"content":"The Taiwan calendar has 12 months with 28 to 31 days each:","nodes":[{"content":"The Taiwan calendar has 12 months with 28 to 31 days each:","pos":[0,58]}]},{"pos":[861,875],"content":"GetMonth value","nodes":[{"content":"GetMonth value","pos":[0,14]}]},{"pos":[876,881],"content":"Month","nodes":[{"content":"Month","pos":[0,5]}]},{"pos":[882,902],"content":"Days in common years","nodes":[{"content":"Days in common years","pos":[0,20]}]},{"pos":[903,921],"content":"Days in leap years","nodes":[{"content":"Days in leap years","pos":[0,18]}]},{"pos":[1015,1016],"content":"1","nodes":[{"content":"1","pos":[0,1]}]},{"pos":[1017,1029],"content":"1月 (January)","nodes":[{"content":"1月 (January)","pos":[0,12]}]},{"pos":[1030,1032],"content":"31","nodes":[{"content":"31","pos":[0,2]}]},{"pos":[1033,1035],"content":"31","nodes":[{"content":"31","pos":[0,2]}]},{"pos":[1040,1041],"content":"2","nodes":[{"content":"2","pos":[0,1]}]},{"pos":[1042,1055],"content":"2月 (February)","nodes":[{"content":"2月 (February)","pos":[0,13]}]},{"pos":[1056,1058],"content":"28","nodes":[{"content":"28","pos":[0,2]}]},{"pos":[1059,1061],"content":"29","nodes":[{"content":"29","pos":[0,2]}]},{"pos":[1066,1067],"content":"3","nodes":[{"content":"3","pos":[0,1]}]},{"pos":[1068,1078],"content":"3月 (March)","nodes":[{"content":"3月 (March)","pos":[0,10]}]},{"pos":[1079,1081],"content":"31","nodes":[{"content":"31","pos":[0,2]}]},{"pos":[1082,1084],"content":"31","nodes":[{"content":"31","pos":[0,2]}]},{"pos":[1089,1090],"content":"4","nodes":[{"content":"4","pos":[0,1]}]},{"pos":[1091,1101],"content":"4月 (April)","nodes":[{"content":"4月 (April)","pos":[0,10]}]},{"pos":[1102,1104],"content":"30","nodes":[{"content":"30","pos":[0,2]}]},{"pos":[1105,1107],"content":"30","nodes":[{"content":"30","pos":[0,2]}]},{"pos":[1112,1113],"content":"5","nodes":[{"content":"5","pos":[0,1]}]},{"pos":[1114,1122],"content":"5月 (May)","nodes":[{"content":"5月 (May)","pos":[0,8]}]},{"pos":[1123,1125],"content":"31","nodes":[{"content":"31","pos":[0,2]}]},{"pos":[1126,1128],"content":"31","nodes":[{"content":"31","pos":[0,2]}]},{"pos":[1133,1134],"content":"6","nodes":[{"content":"6","pos":[0,1]}]},{"pos":[1135,1144],"content":"6月 (June)","nodes":[{"content":"6月 (June)","pos":[0,9]}]},{"pos":[1145,1147],"content":"30","nodes":[{"content":"30","pos":[0,2]}]},{"pos":[1148,1150],"content":"30","nodes":[{"content":"30","pos":[0,2]}]},{"pos":[1155,1156],"content":"7","nodes":[{"content":"7","pos":[0,1]}]},{"pos":[1157,1166],"content":"7月 (July)","nodes":[{"content":"7月 (July)","pos":[0,9]}]},{"pos":[1167,1169],"content":"31","nodes":[{"content":"31","pos":[0,2]}]},{"pos":[1170,1172],"content":"31","nodes":[{"content":"31","pos":[0,2]}]},{"pos":[1177,1178],"content":"8","nodes":[{"content":"8","pos":[0,1]}]},{"pos":[1179,1190],"content":"8月 (August)","nodes":[{"content":"8月 (August)","pos":[0,11]}]},{"pos":[1191,1193],"content":"31","nodes":[{"content":"31","pos":[0,2]}]},{"pos":[1194,1196],"content":"31","nodes":[{"content":"31","pos":[0,2]}]},{"pos":[1201,1202],"content":"9","nodes":[{"content":"9","pos":[0,1]}]},{"pos":[1203,1217],"content":"9月 (September)","nodes":[{"content":"9月 (September)","pos":[0,14]}]},{"pos":[1218,1220],"content":"30","nodes":[{"content":"30","pos":[0,2]}]},{"pos":[1221,1223],"content":"30","nodes":[{"content":"30","pos":[0,2]}]},{"pos":[1228,1230],"content":"10","nodes":[{"content":"10","pos":[0,2]}]},{"pos":[1231,1244],"content":"10月 (October)","nodes":[{"content":"10月 (October)","pos":[0,13]}]},{"pos":[1245,1247],"content":"31","nodes":[{"content":"31","pos":[0,2]}]},{"pos":[1248,1250],"content":"31","nodes":[{"content":"31","pos":[0,2]}]},{"pos":[1255,1257],"content":"11","nodes":[{"content":"11","pos":[0,2]}]},{"pos":[1258,1272],"content":"11月 (November)","nodes":[{"content":"11月 (November)","pos":[0,14]}]},{"pos":[1273,1275],"content":"30","nodes":[{"content":"30","pos":[0,2]}]},{"pos":[1276,1278],"content":"30","nodes":[{"content":"30","pos":[0,2]}]},{"pos":[1283,1285],"content":"12","nodes":[{"content":"12","pos":[0,2]}]},{"pos":[1286,1300],"content":"12月 (December)","nodes":[{"content":"12月 (December)","pos":[0,14]}]},{"pos":[1301,1303],"content":"31","nodes":[{"content":"31","pos":[0,2]}]},{"pos":[1304,1306],"content":"31","nodes":[{"content":"31","pos":[0,2]}]},{"pos":[1314,1380],"content":"February has 29 days during leap years and 28 during common years.","nodes":[{"content":"February has 29 days during leap years and 28 during common years.","pos":[0,66]}]},{"pos":[1387,1542],"content":"The date January 1, 2001 C.E. in the Gregorian calendar is equivalent to the first day of January in the year 90 of the current era in the Taiwan calendar.","nodes":[{"content":"The date January 1, 2001 C.E. in the Gregorian calendar is equivalent to the first day of January in the year 90 of the current era in the Taiwan calendar.","pos":[0,155],"nodes":[{"content":"The date January 1, 2001 C.E.","pos":[0,29]},{"content":"in the Gregorian calendar is equivalent to the first day of January in the year 90 of the current era in the Taiwan calendar.","pos":[30,155]}]}]},{"pos":[1549,2189],"content":"Each <xref:System.Globalization.CultureInfo> supports a set of calendars. The <xref:System.Globalization.CultureInfo.Calendar%2A> property returns the default calendar for the culture, and the <xref:System.Globalization.CultureInfo.OptionalCalendars%2A> property returns an array containing all the calendars supported by the culture. To change the calendar used by a <xref:System.Globalization.CultureInfo>, the application should set the <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> property of <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> to a new <xref:System.Globalization.Calendar>.","nodes":[{"content":"Each <xref:System.Globalization.CultureInfo> supports a set of calendars. The <xref:System.Globalization.CultureInfo.Calendar%2A> property returns the default calendar for the culture, and the <xref:System.Globalization.CultureInfo.OptionalCalendars%2A> property returns an array containing all the calendars supported by the culture. To change the calendar used by a <xref:System.Globalization.CultureInfo>, the application should set the <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> property of <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> to a new <xref:System.Globalization.Calendar>.","pos":[0,640],"nodes":[{"content":"Each <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo&gt;</ph> supports a set of calendars.","pos":[0,73],"source":"Each <xref:System.Globalization.CultureInfo> supports a set of calendars."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo.Calendar%2A&gt;</ph> property returns the default calendar for the culture, and the <ph id=\"ph2\">&lt;xref:System.Globalization.CultureInfo.OptionalCalendars%2A&gt;</ph> property returns an array containing all the calendars supported by the culture.","pos":[74,334],"source":" The <xref:System.Globalization.CultureInfo.Calendar%2A> property returns the default calendar for the culture, and the <xref:System.Globalization.CultureInfo.OptionalCalendars%2A> property returns an array containing all the calendars supported by the culture."},{"content":"To change the calendar used by a <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo&gt;</ph>, the application should set the <ph id=\"ph2\">&lt;xref:System.Globalization.DateTimeFormatInfo.Calendar%2A&gt;</ph> property of <ph id=\"ph3\">&lt;xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName&gt;</ph> to a new <ph id=\"ph4\">&lt;xref:System.Globalization.Calendar&gt;</ph>.","pos":[335,640],"source":" To change the calendar used by a <xref:System.Globalization.CultureInfo>, the application should set the <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> property of <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> to a new <xref:System.Globalization.Calendar>."}]}]}],"pos":[2325,4545],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Globalization.TaiwanCalendar\"></xref> class.","nodes":[{"pos":[0,97],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Globalization.TaiwanCalendar\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Globalization.TaiwanCalendar\"></xref> class."}],"pos":[8112,8210],"yaml":true},{"content":"Unable to initialize a <xref href=\"System.Globalization.TaiwanCalendar\"></xref> object because of missing culture information.","nodes":[{"pos":[0,126],"content":"Unable to initialize a <ph id=\"ph1\">&lt;xref href=\"System.Globalization.TaiwanCalendar\"&gt;&lt;/xref&gt;</ph> object because of missing culture information.","source":"Unable to initialize a <xref href=\"System.Globalization.TaiwanCalendar\"></xref> object because of missing culture information."}],"pos":[8461,8588],"yaml":true},{"content":"Returns a <xref href=\"System.DateTime\"></xref> that is the specified number of months away from the specified <xref href=\"System.DateTime\"></xref>.","nodes":[{"pos":[0,147],"content":"Returns a <ph id=\"ph1\">&lt;xref href=\"System.DateTime\"&gt;&lt;/xref&gt;</ph> that is the specified number of months away from the specified <ph id=\"ph2\">&lt;xref href=\"System.DateTime\"&gt;&lt;/xref&gt;</ph>.","source":"Returns a <xref href=\"System.DateTime\"></xref> that is the specified number of months away from the specified <xref href=\"System.DateTime\"></xref>."}],"pos":[10094,10242],"yaml":true},{"content":"The day part of the resulting <xref:System.DateTime> is affected if the resulting day is not a valid day in the resulting month of the resulting year. It is changed to the last valid day in the resulting month of the resulting year. The year part of the resulting <xref:System.DateTime> is affected if the resulting month is outside the year of the specified <xref:System.DateTime>. This implementation supports only the current era. Therefore, <xref:System.ArgumentException> is thrown if the resulting year is outside the era of the specified <xref:System.DateTime>. The time-of-day part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>.  \n  \n For example, if the specified month is October, which has 31 days, the specified day is the 31st day of that month, and the value of the `months` parameter is 6, the resulting year is one more than the specified year, the resulting month is April, and the resulting day is the 30th day, which is the last day in April.  \n  \n If the value of the `months` parameter is negative, the resulting <xref:System.DateTime> is earlier than the specified <xref:System.DateTime>.  \n  \n The<xref:System.DateTime.Kind%2A> property of the returned <xref:System.DateTime> value always equals <xref:System.DateTimeKind?displayProperty=fullName>. You can preserve the <xref:System.DateTime.Kind%2A> property of the `time` parameter by calling the <xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName> method, as the following example shows.  \n  \n [!code-csharp[System.Globalization.Calendar.AddMethods#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.calendar.addmethods/cs/add1.cs#5)]\n [!code-vb[System.Globalization.Calendar.AddMethods#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.calendar.addmethods/vb/add1.vb#5)]","nodes":[{"pos":[0,687],"content":"The day part of the resulting <xref:System.DateTime> is affected if the resulting day is not a valid day in the resulting month of the resulting year. It is changed to the last valid day in the resulting month of the resulting year. The year part of the resulting <xref:System.DateTime> is affected if the resulting month is outside the year of the specified <xref:System.DateTime>. This implementation supports only the current era. Therefore, <xref:System.ArgumentException> is thrown if the resulting year is outside the era of the specified <xref:System.DateTime>. The time-of-day part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>.","nodes":[{"content":"The day part of the resulting <xref:System.DateTime> is affected if the resulting day is not a valid day in the resulting month of the resulting year. It is changed to the last valid day in the resulting month of the resulting year. The year part of the resulting <xref:System.DateTime> is affected if the resulting month is outside the year of the specified <xref:System.DateTime>. This implementation supports only the current era. Therefore, <xref:System.ArgumentException> is thrown if the resulting year is outside the era of the specified <xref:System.DateTime>. The time-of-day part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>.","pos":[0,687],"nodes":[{"content":"The day part of the resulting <ph id=\"ph1\">&lt;xref:System.DateTime&gt;</ph> is affected if the resulting day is not a valid day in the resulting month of the resulting year.","pos":[0,150],"source":"The day part of the resulting <xref:System.DateTime> is affected if the resulting day is not a valid day in the resulting month of the resulting year."},{"content":"It is changed to the last valid day in the resulting month of the resulting year.","pos":[151,232]},{"content":"The year part of the resulting <ph id=\"ph1\">&lt;xref:System.DateTime&gt;</ph> is affected if the resulting month is outside the year of the specified <ph id=\"ph2\">&lt;xref:System.DateTime&gt;</ph>.","pos":[233,382],"source":" The year part of the resulting <xref:System.DateTime> is affected if the resulting month is outside the year of the specified <xref:System.DateTime>."},{"content":"This implementation supports only the current era.","pos":[383,433]},{"content":"Therefore, <ph id=\"ph1\">&lt;xref:System.ArgumentException&gt;</ph> is thrown if the resulting year is outside the era of the specified <ph id=\"ph2\">&lt;xref:System.DateTime&gt;</ph>.","pos":[434,568],"source":" Therefore, <xref:System.ArgumentException> is thrown if the resulting year is outside the era of the specified <xref:System.DateTime>."},{"content":"The time-of-day part of the resulting <ph id=\"ph1\">&lt;xref:System.DateTime&gt;</ph> remains the same as the specified <ph id=\"ph2\">&lt;xref:System.DateTime&gt;</ph>.","pos":[569,687],"source":" The time-of-day part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>."}]}]},{"pos":[694,1012],"content":"For example, if the specified month is October, which has 31 days, the specified day is the 31st day of that month, and the value of the <ph id=\"ph1\">`months`</ph> parameter is 6, the resulting year is one more than the specified year, the resulting month is April, and the resulting day is the 30th day, which is the last day in April.","source":"For example, if the specified month is October, which has 31 days, the specified day is the 31st day of that month, and the value of the `months` parameter is 6, the resulting year is one more than the specified year, the resulting month is April, and the resulting day is the 30th day, which is the last day in April."},{"pos":[1019,1161],"content":"If the value of the <ph id=\"ph1\">`months`</ph> parameter is negative, the resulting <ph id=\"ph2\">&lt;xref:System.DateTime&gt;</ph> is earlier than the specified <ph id=\"ph3\">&lt;xref:System.DateTime&gt;</ph>.","source":"If the value of the `months` parameter is negative, the resulting <xref:System.DateTime> is earlier than the specified <xref:System.DateTime>."},{"pos":[1168,1525],"content":"The<xref:System.DateTime.Kind%2A> property of the returned <xref:System.DateTime> value always equals <xref:System.DateTimeKind?displayProperty=fullName>. You can preserve the <xref:System.DateTime.Kind%2A> property of the `time` parameter by calling the <xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName> method, as the following example shows.","nodes":[{"content":"The<ph id=\"ph1\">&lt;xref:System.DateTime.Kind%2A&gt;</ph> property of the returned <ph id=\"ph2\">&lt;xref:System.DateTime&gt;</ph> value always equals <ph id=\"ph3\">&lt;xref:System.DateTimeKind?displayProperty=fullName&gt;</ph>.","pos":[0,154],"source":"The<xref:System.DateTime.Kind%2A> property of the returned <xref:System.DateTime> value always equals <xref:System.DateTimeKind?displayProperty=fullName>."},{"content":"You can preserve the <ph id=\"ph1\">&lt;xref:System.DateTime.Kind%2A&gt;</ph> property of the <ph id=\"ph2\">`time`</ph> parameter by calling the <ph id=\"ph3\">&lt;xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName&gt;</ph> method, as the following example shows.","pos":[155,357],"source":" You can preserve the <xref:System.DateTime.Kind%2A> property of the `time` parameter by calling the <xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName> method, as the following example shows."}]},{"pos":[1532,1859],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Globalization.Calendar.AddMethods#5<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.calendar.addmethods/cs/add1.cs#5)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Globalization.Calendar.AddMethods#5<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.calendar.addmethods/vb/add1.vb#5)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Globalization.Calendar.AddMethods#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.calendar.addmethods/cs/add1.cs#5)]\n [!code-vb[System.Globalization.Calendar.AddMethods#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.calendar.addmethods/vb/add1.vb#5)]"}],"pos":[10253,12124],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.DateTime\"></xref> to which to add months.","nodes":[{"pos":[0,64],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.DateTime\"&gt;&lt;/xref&gt;</ph> to which to add months.","source":"The <xref href=\"System.DateTime\"></xref> to which to add months."}],"pos":[12986,13051],"yaml":true},{"content":"The number of months to add.","nodes":[{"pos":[0,28],"content":"The number of months to add.","nodes":[{"content":"The number of months to add.","pos":[0,28]}]}],"pos":[13112,13141],"yaml":true},{"content":"The <xref href=\"System.DateTime\"></xref> that results from adding the specified number of months to the specified <xref href=\"System.DateTime\"></xref>.","nodes":[{"pos":[0,151],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.DateTime\"&gt;&lt;/xref&gt;</ph> that results from adding the specified number of months to the specified <ph id=\"ph2\">&lt;xref href=\"System.DateTime\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.DateTime\"></xref> that results from adding the specified number of months to the specified <xref href=\"System.DateTime\"></xref>."}],"pos":[13200,13352],"yaml":true},{"content":"The resulting <xref href=\"System.DateTime\"></xref> is outside the supported range.","nodes":[{"pos":[0,82],"content":"The resulting <ph id=\"ph1\">&lt;xref href=\"System.DateTime\"&gt;&lt;/xref&gt;</ph> is outside the supported range.","source":"The resulting <xref href=\"System.DateTime\"></xref> is outside the supported range."}],"pos":[13519,13602],"yaml":true},{"content":"<code>months</code> is less than -120000.  \n  \n -or-  \n  \n <code>months</code> is greater than 120000.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;months&lt;/code&gt;</ph> is less than -120000.","source":"<code>months</code> is less than -120000."},{"pos":[48,52],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[59,102],"content":"<ph id=\"ph1\">&lt;code&gt;months&lt;/code&gt;</ph> is greater than 120000.","source":"<code>months</code> is greater than 120000."}],"pos":[13716,13825],"yaml":true},{"content":"Returns a <xref href=\"System.DateTime\"></xref> that is the specified number of years away from the specified <xref href=\"System.DateTime\"></xref>.","nodes":[{"pos":[0,146],"content":"Returns a <ph id=\"ph1\">&lt;xref href=\"System.DateTime\"&gt;&lt;/xref&gt;</ph> that is the specified number of years away from the specified <ph id=\"ph2\">&lt;xref href=\"System.DateTime\"&gt;&lt;/xref&gt;</ph>.","source":"Returns a <xref href=\"System.DateTime\"></xref> that is the specified number of years away from the specified <xref href=\"System.DateTime\"></xref>."}],"pos":[15325,15472],"yaml":true},{"content":"The day part of the resulting <xref:System.DateTime> is affected if the resulting day is not a valid day in the resulting month of the resulting year. It is changed to the last valid day in the resulting month of the resulting year. The month part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>. This implementation supports only the current era. Therefore, <xref:System.ArgumentException> is thrown if the resulting year is outside the era of the specified <xref:System.DateTime>. The time-of-day part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>.  \n  \n For example, February has 28 days, except during leap years when it has 29 days. If the specified date is the 29th day of February in a leap year and the value of `years` is 1, the resulting date is the 28th day of February in the following year.  \n  \n If `years` is negative, the resulting <xref:System.DateTime> is earlier than the specified <xref:System.DateTime>.  \n  \n The<xref:System.DateTime.Kind%2A> property of the returned <xref:System.DateTime> value always equals <xref:System.DateTimeKind?displayProperty=fullName>. You can preserve the <xref:System.DateTime.Kind%2A> property of the `time` parameter by calling the <xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName> method, as the following example shows.  \n  \n [!code-csharp[System.Globalization.Calendar.AddMethods#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.calendar.addmethods/cs/add1.cs#8)]\n [!code-vb[System.Globalization.Calendar.AddMethods#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.calendar.addmethods/vb/add1.vb#8)]","nodes":[{"pos":[0,650],"content":"The day part of the resulting <xref:System.DateTime> is affected if the resulting day is not a valid day in the resulting month of the resulting year. It is changed to the last valid day in the resulting month of the resulting year. The month part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>. This implementation supports only the current era. Therefore, <xref:System.ArgumentException> is thrown if the resulting year is outside the era of the specified <xref:System.DateTime>. The time-of-day part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>.","nodes":[{"content":"The day part of the resulting <xref:System.DateTime> is affected if the resulting day is not a valid day in the resulting month of the resulting year. It is changed to the last valid day in the resulting month of the resulting year. The month part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>. This implementation supports only the current era. Therefore, <xref:System.ArgumentException> is thrown if the resulting year is outside the era of the specified <xref:System.DateTime>. The time-of-day part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>.","pos":[0,650],"nodes":[{"content":"The day part of the resulting <ph id=\"ph1\">&lt;xref:System.DateTime&gt;</ph> is affected if the resulting day is not a valid day in the resulting month of the resulting year.","pos":[0,150],"source":"The day part of the resulting <xref:System.DateTime> is affected if the resulting day is not a valid day in the resulting month of the resulting year."},{"content":"It is changed to the last valid day in the resulting month of the resulting year.","pos":[151,232]},{"content":"The month part of the resulting <ph id=\"ph1\">&lt;xref:System.DateTime&gt;</ph> remains the same as the specified <ph id=\"ph2\">&lt;xref:System.DateTime&gt;</ph>.","pos":[233,345],"source":" The month part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>."},{"content":"This implementation supports only the current era.","pos":[346,396]},{"content":"Therefore, <ph id=\"ph1\">&lt;xref:System.ArgumentException&gt;</ph> is thrown if the resulting year is outside the era of the specified <ph id=\"ph2\">&lt;xref:System.DateTime&gt;</ph>.","pos":[397,531],"source":" Therefore, <xref:System.ArgumentException> is thrown if the resulting year is outside the era of the specified <xref:System.DateTime>."},{"content":"The time-of-day part of the resulting <ph id=\"ph1\">&lt;xref:System.DateTime&gt;</ph> remains the same as the specified <ph id=\"ph2\">&lt;xref:System.DateTime&gt;</ph>.","pos":[532,650],"source":" The time-of-day part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>."}]}]},{"pos":[657,903],"content":"For example, February has 28 days, except during leap years when it has 29 days. If the specified date is the 29th day of February in a leap year and the value of `years` is 1, the resulting date is the 28th day of February in the following year.","nodes":[{"content":"For example, February has 28 days, except during leap years when it has 29 days.","pos":[0,80]},{"content":"If the specified date is the 29th day of February in a leap year and the value of <ph id=\"ph1\">`years`</ph> is 1, the resulting date is the 28th day of February in the following year.","pos":[81,246],"source":" If the specified date is the 29th day of February in a leap year and the value of `years` is 1, the resulting date is the 28th day of February in the following year."}]},{"pos":[910,1024],"content":"If <ph id=\"ph1\">`years`</ph> is negative, the resulting <ph id=\"ph2\">&lt;xref:System.DateTime&gt;</ph> is earlier than the specified <ph id=\"ph3\">&lt;xref:System.DateTime&gt;</ph>.","source":"If `years` is negative, the resulting <xref:System.DateTime> is earlier than the specified <xref:System.DateTime>."},{"pos":[1031,1388],"content":"The<xref:System.DateTime.Kind%2A> property of the returned <xref:System.DateTime> value always equals <xref:System.DateTimeKind?displayProperty=fullName>. You can preserve the <xref:System.DateTime.Kind%2A> property of the `time` parameter by calling the <xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName> method, as the following example shows.","nodes":[{"content":"The<ph id=\"ph1\">&lt;xref:System.DateTime.Kind%2A&gt;</ph> property of the returned <ph id=\"ph2\">&lt;xref:System.DateTime&gt;</ph> value always equals <ph id=\"ph3\">&lt;xref:System.DateTimeKind?displayProperty=fullName&gt;</ph>.","pos":[0,154],"source":"The<xref:System.DateTime.Kind%2A> property of the returned <xref:System.DateTime> value always equals <xref:System.DateTimeKind?displayProperty=fullName>."},{"content":"You can preserve the <ph id=\"ph1\">&lt;xref:System.DateTime.Kind%2A&gt;</ph> property of the <ph id=\"ph2\">`time`</ph> parameter by calling the <ph id=\"ph3\">&lt;xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName&gt;</ph> method, as the following example shows.","pos":[155,357],"source":" You can preserve the <xref:System.DateTime.Kind%2A> property of the `time` parameter by calling the <xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName> method, as the following example shows."}]},{"pos":[1395,1722],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Globalization.Calendar.AddMethods#8<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.calendar.addmethods/cs/add1.cs#8)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Globalization.Calendar.AddMethods#8<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.calendar.addmethods/vb/add1.vb#8)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Globalization.Calendar.AddMethods#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.calendar.addmethods/cs/add1.cs#8)]\n [!code-vb[System.Globalization.Calendar.AddMethods#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.calendar.addmethods/vb/add1.vb#8)]"}],"pos":[15483,17217],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.DateTime\"></xref> to which to add years.","nodes":[{"pos":[0,63],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.DateTime\"&gt;&lt;/xref&gt;</ph> to which to add years.","source":"The <xref href=\"System.DateTime\"></xref> to which to add years."}],"pos":[18072,18136],"yaml":true},{"content":"The number of years to add.","nodes":[{"pos":[0,27],"content":"The number of years to add.","nodes":[{"content":"The number of years to add.","pos":[0,27]}]}],"pos":[18196,18224],"yaml":true},{"content":"The <xref href=\"System.DateTime\"></xref> that results from adding the specified number of years to the specified <xref href=\"System.DateTime\"></xref>.","nodes":[{"pos":[0,150],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.DateTime\"&gt;&lt;/xref&gt;</ph> that results from adding the specified number of years to the specified <ph id=\"ph2\">&lt;xref href=\"System.DateTime\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.DateTime\"></xref> that results from adding the specified number of years to the specified <xref href=\"System.DateTime\"></xref>."}],"pos":[18283,18434],"yaml":true},{"content":"The resulting <xref href=\"System.DateTime\"></xref> is outside the supported range.","nodes":[{"pos":[0,82],"content":"The resulting <ph id=\"ph1\">&lt;xref href=\"System.DateTime\"&gt;&lt;/xref&gt;</ph> is outside the supported range.","source":"The resulting <xref href=\"System.DateTime\"></xref> is outside the supported range."}],"pos":[18600,18683],"yaml":true},{"content":"Gets a value that indicates whether the current calendar is solar-based, lunar-based, or a combination of both.","nodes":[{"pos":[0,111],"content":"Gets a value that indicates whether the current calendar is solar-based, lunar-based, or a combination of both.","nodes":[{"content":"Gets a value that indicates whether the current calendar is solar-based, lunar-based, or a combination of both.","pos":[0,111]}]}],"pos":[20039,20151],"yaml":true},{"content":"Always returns <xref href=\"System.Globalization.CalendarAlgorithmType.SolarCalendar\"></xref>.","nodes":[{"pos":[0,93],"content":"Always returns <ph id=\"ph1\">&lt;xref href=\"System.Globalization.CalendarAlgorithmType.SolarCalendar\"&gt;&lt;/xref&gt;</ph>.","source":"Always returns <xref href=\"System.Globalization.CalendarAlgorithmType.SolarCalendar\"></xref>."}],"pos":[21031,21125],"yaml":true},{"content":"Gets the list of eras in the <xref href=\"System.Globalization.TaiwanCalendar\"></xref>.","nodes":[{"pos":[0,86],"content":"Gets the list of eras in the <ph id=\"ph1\">&lt;xref href=\"System.Globalization.TaiwanCalendar\"&gt;&lt;/xref&gt;</ph>.","source":"Gets the list of eras in the <xref href=\"System.Globalization.TaiwanCalendar\"></xref>."}],"pos":[22433,22520],"yaml":true},{"content":"The values in the array returned by this property are numbers that range from 1 to the largest era number. The largest era number is returned in the first array element and the smallest era number is returned in the last element.","nodes":[{"pos":[0,229],"content":"The values in the array returned by this property are numbers that range from 1 to the largest era number. The largest era number is returned in the first array element and the smallest era number is returned in the last element.","nodes":[{"content":"The values in the array returned by this property are numbers that range from 1 to the largest era number. The largest era number is returned in the first array element and the smallest era number is returned in the last element.","pos":[0,229],"nodes":[{"content":"The values in the array returned by this property are numbers that range from 1 to the largest era number.","pos":[0,106]},{"content":"The largest era number is returned in the first array element and the smallest era number is returned in the last element.","pos":[107,229]}]}]}],"pos":[22531,22761],"yaml":true,"extradata":"MT"},{"content":"An array that consists of a single element for which the value is always the current era.","nodes":[{"pos":[0,89],"content":"An array that consists of a single element for which the value is always the current era.","nodes":[{"content":"An array that consists of a single element for which the value is always the current era.","pos":[0,89]}]}],"pos":[22878,22968],"yaml":true},{"content":"Returns the day of the month in the specified <xref href=\"System.DateTime\"></xref>.","nodes":[{"pos":[0,83],"content":"Returns the day of the month in the specified <ph id=\"ph1\">&lt;xref href=\"System.DateTime\"&gt;&lt;/xref&gt;</ph>.","source":"Returns the day of the month in the specified <xref href=\"System.DateTime\"></xref>."}],"pos":[24509,24593],"yaml":true},{"content":"The <xref href=\"System.DateTime\"></xref> to read.","nodes":[{"pos":[0,49],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.DateTime\"&gt;&lt;/xref&gt;</ph> to read.","source":"The <xref href=\"System.DateTime\"></xref> to read."}],"pos":[25460,25510],"yaml":true},{"content":"An integer from 1 to 31 that represents the day of the month in the specified <xref href=\"System.DateTime\"></xref>.","nodes":[{"pos":[0,115],"content":"An integer from 1 to 31 that represents the day of the month in the specified <ph id=\"ph1\">&lt;xref href=\"System.DateTime\"&gt;&lt;/xref&gt;</ph>.","source":"An integer from 1 to 31 that represents the day of the month in the specified <xref href=\"System.DateTime\"></xref>."}],"pos":[25566,25682],"yaml":true},{"content":"Returns the day of the week in the specified <xref href=\"System.DateTime\"></xref>.","nodes":[{"pos":[0,82],"content":"Returns the day of the week in the specified <ph id=\"ph1\">&lt;xref href=\"System.DateTime\"&gt;&lt;/xref&gt;</ph>.","source":"Returns the day of the week in the specified <xref href=\"System.DateTime\"></xref>."}],"pos":[27226,27309],"yaml":true},{"content":"The <xref:System.DayOfWeek> values are as follows:  \n  \n|DayOfWeek value|which indicates|  \n|---------------------|---------------------|  \n|Sunday|星期日|  \n|Monday|星期一|  \n|Tuesday|星期二|  \n|Wednesday|星期三|  \n|Thursday|星期四|  \n|Friday|星期五|  \n|Saturday|星期六|","nodes":[{"pos":[0,50],"content":"The <xref:System.DayOfWeek> values are as follows:","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.DayOfWeek&gt;</ph> values are as follows:","pos":[0,50],"source":"The <xref:System.DayOfWeek> values are as follows:"}]},{"pos":[57,72],"content":"DayOfWeek value","nodes":[{"content":"DayOfWeek value","pos":[0,15]}]},{"pos":[73,88],"content":"which indicates","nodes":[{"content":"which indicates","pos":[0,15]}]},{"pos":[141,147],"content":"Sunday","nodes":[{"content":"Sunday","pos":[0,6]}]},{"pos":[148,151],"content":"星期日","nodes":[{"content":"星期日","pos":[0,3]}]},{"pos":[156,162],"content":"Monday","nodes":[{"content":"Monday","pos":[0,6]}]},{"pos":[163,166],"content":"星期一","nodes":[{"content":"星期一","pos":[0,3]}]},{"pos":[171,178],"content":"Tuesday","nodes":[{"content":"Tuesday","pos":[0,7]}]},{"pos":[179,182],"content":"星期二","nodes":[{"content":"星期二","pos":[0,3]}]},{"pos":[187,196],"content":"Wednesday","nodes":[{"content":"Wednesday","pos":[0,9]}]},{"pos":[197,200],"content":"星期三","nodes":[{"content":"星期三","pos":[0,3]}]},{"pos":[205,213],"content":"Thursday","nodes":[{"content":"Thursday","pos":[0,8]}]},{"pos":[214,217],"content":"星期四","nodes":[{"content":"星期四","pos":[0,3]}]},{"pos":[222,228],"content":"Friday","nodes":[{"content":"Friday","pos":[0,6]}]},{"pos":[229,232],"content":"星期五","nodes":[{"content":"星期五","pos":[0,3]}]},{"pos":[237,245],"content":"Saturday","nodes":[{"content":"Saturday","pos":[0,8]}]},{"pos":[246,249],"content":"星期六","nodes":[{"content":"星期六","pos":[0,3]}]}],"pos":[27320,27583],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.DateTime\"></xref> to read.","nodes":[{"pos":[0,49],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.DateTime\"&gt;&lt;/xref&gt;</ph> to read.","source":"The <xref href=\"System.DateTime\"></xref> to read."}],"pos":[28440,28490],"yaml":true},{"content":"A <xref href=\"System.DayOfWeek\"></xref> value that represents the day of the week in the specified <xref href=\"System.DateTime\"></xref>.","nodes":[{"pos":[0,136],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.DayOfWeek\"&gt;&lt;/xref&gt;</ph> value that represents the day of the week in the specified <ph id=\"ph2\">&lt;xref href=\"System.DateTime\"&gt;&lt;/xref&gt;</ph>.","source":"A <xref href=\"System.DayOfWeek\"></xref> value that represents the day of the week in the specified <xref href=\"System.DateTime\"></xref>."}],"pos":[28550,28687],"yaml":true},{"content":"Returns the day of the year in the specified <xref href=\"System.DateTime\"></xref>.","nodes":[{"pos":[0,82],"content":"Returns the day of the year in the specified <ph id=\"ph1\">&lt;xref href=\"System.DateTime\"&gt;&lt;/xref&gt;</ph>.","source":"Returns the day of the year in the specified <xref href=\"System.DateTime\"></xref>."}],"pos":[30230,30313],"yaml":true},{"content":"The day of the year is defined as the number of days from the first day of the year. For example, <xref:System.Globalization.TaiwanCalendar.GetDayOfYear%2A> for the first day of the first month returns 1, and <xref:System.Globalization.TaiwanCalendar.GetDayOfYear%2A> for the last day of the last month returns the total number of days in that year. The total is the same as the value returned by <xref:System.Globalization.TaiwanCalendar.GetDaysInYear%2A>.","nodes":[{"pos":[0,457],"content":"The day of the year is defined as the number of days from the first day of the year. For example, <xref:System.Globalization.TaiwanCalendar.GetDayOfYear%2A> for the first day of the first month returns 1, and <xref:System.Globalization.TaiwanCalendar.GetDayOfYear%2A> for the last day of the last month returns the total number of days in that year. The total is the same as the value returned by <xref:System.Globalization.TaiwanCalendar.GetDaysInYear%2A>.","nodes":[{"content":"The day of the year is defined as the number of days from the first day of the year. For example, <xref:System.Globalization.TaiwanCalendar.GetDayOfYear%2A> for the first day of the first month returns 1, and <xref:System.Globalization.TaiwanCalendar.GetDayOfYear%2A> for the last day of the last month returns the total number of days in that year. The total is the same as the value returned by <xref:System.Globalization.TaiwanCalendar.GetDaysInYear%2A>.","pos":[0,457],"nodes":[{"content":"The day of the year is defined as the number of days from the first day of the year.","pos":[0,84]},{"content":"For example, <ph id=\"ph1\">&lt;xref:System.Globalization.TaiwanCalendar.GetDayOfYear%2A&gt;</ph> for the first day of the first month returns 1, and <ph id=\"ph2\">&lt;xref:System.Globalization.TaiwanCalendar.GetDayOfYear%2A&gt;</ph> for the last day of the last month returns the total number of days in that year.","pos":[85,349],"source":" For example, <xref:System.Globalization.TaiwanCalendar.GetDayOfYear%2A> for the first day of the first month returns 1, and <xref:System.Globalization.TaiwanCalendar.GetDayOfYear%2A> for the last day of the last month returns the total number of days in that year."},{"content":"The total is the same as the value returned by <ph id=\"ph1\">&lt;xref:System.Globalization.TaiwanCalendar.GetDaysInYear%2A&gt;</ph>.","pos":[350,457],"source":" The total is the same as the value returned by <xref:System.Globalization.TaiwanCalendar.GetDaysInYear%2A>."}]}]}],"pos":[30324,30782],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.DateTime\"></xref> to read.","nodes":[{"pos":[0,49],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.DateTime\"&gt;&lt;/xref&gt;</ph> to read.","source":"The <xref href=\"System.DateTime\"></xref> to read."}],"pos":[31633,31683],"yaml":true},{"content":"An integer from 1 to 366 that represents the day of the year in the specified <xref href=\"System.DateTime\"></xref>.","nodes":[{"pos":[0,115],"content":"An integer from 1 to 366 that represents the day of the year in the specified <ph id=\"ph1\">&lt;xref href=\"System.DateTime\"&gt;&lt;/xref&gt;</ph>.","source":"An integer from 1 to 366 that represents the day of the year in the specified <xref href=\"System.DateTime\"></xref>."}],"pos":[31739,31855],"yaml":true},{"content":"Returns the number of days in the specified month in the specified year in the specified era.","nodes":[{"pos":[0,93],"content":"Returns the number of days in the specified month in the specified year in the specified era.","nodes":[{"content":"Returns the number of days in the specified month in the specified year in the specified era.","pos":[0,93]}]}],"pos":[33512,33606],"yaml":true},{"content":"For example, this method returns 28 or 29 for February (`month` = 2), depending on whether `year` is a leap year.","nodes":[{"pos":[0,113],"content":"For example, this method returns 28 or 29 for February (<ph id=\"ph1\">`month`</ph> = 2), depending on whether <ph id=\"ph2\">`year`</ph> is a leap year.","source":"For example, this method returns 28 or 29 for February (`month` = 2), depending on whether `year` is a leap year."}],"pos":[33617,33731],"yaml":true,"extradata":"MT"},{"content":"An integer that represents the year.","nodes":[{"pos":[0,36],"content":"An integer that represents the year.","nodes":[{"content":"An integer that represents the year.","pos":[0,36]}]}],"pos":[34691,34728],"yaml":true},{"content":"An integer from 1 to 12 that represents the month.","nodes":[{"pos":[0,50],"content":"An integer from 1 to 12 that represents the month.","nodes":[{"content":"An integer from 1 to 12 that represents the month.","pos":[0,50]}]}],"pos":[34788,34839],"yaml":true},{"content":"An integer that represents the era.","nodes":[{"pos":[0,35],"content":"An integer that represents the era.","nodes":[{"content":"An integer that represents the era.","pos":[0,35]}]}],"pos":[34897,34933],"yaml":true},{"content":"The number of days in the specified month in the specified year in the specified era.","nodes":[{"pos":[0,85],"content":"The number of days in the specified month in the specified year in the specified era.","nodes":[{"content":"The number of days in the specified month in the specified year in the specified era.","pos":[0,85]}]}],"pos":[34989,35075],"yaml":true},{"content":"<code>year</code> is outside the range supported by the calendar.  \n  \n -or-  \n  \n <code>month</code> is outside the range supported by the calendar.  \n  \n -or-  \n  \n <code>era</code> is outside the range supported by the calendar.","nodes":[{"pos":[0,65],"content":"<ph id=\"ph1\">&lt;code&gt;year&lt;/code&gt;</ph> is outside the range supported by the calendar.","source":"<code>year</code> is outside the range supported by the calendar."},{"pos":[72,76],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[83,149],"content":"<ph id=\"ph1\">&lt;code&gt;month&lt;/code&gt;</ph> is outside the range supported by the calendar.","source":"<code>month</code> is outside the range supported by the calendar."},{"pos":[156,160],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[167,231],"content":"<ph id=\"ph1\">&lt;code&gt;era&lt;/code&gt;</ph> is outside the range supported by the calendar.","source":"<code>era</code> is outside the range supported by the calendar."}],"pos":[35267,35509],"yaml":true},{"content":"Returns the number of days in the specified year in the specified era.","nodes":[{"pos":[0,70],"content":"Returns the number of days in the specified year in the specified era.","nodes":[{"content":"Returns the number of days in the specified year in the specified era.","pos":[0,70]}]}],"pos":[37021,37092],"yaml":true},{"content":"For example, this method returns 365 or 366, depending on whether `year` is a leap year.","nodes":[{"pos":[0,88],"content":"For example, this method returns 365 or 366, depending on whether <ph id=\"ph1\">`year`</ph> is a leap year.","source":"For example, this method returns 365 or 366, depending on whether `year` is a leap year."}],"pos":[37103,37192],"yaml":true,"extradata":"MT"},{"content":"An integer that represents the year.","nodes":[{"pos":[0,36],"content":"An integer that represents the year.","nodes":[{"content":"An integer that represents the year.","pos":[0,36]}]}],"pos":[38102,38139],"yaml":true},{"content":"An integer that represents the era.","nodes":[{"pos":[0,35],"content":"An integer that represents the era.","nodes":[{"content":"An integer that represents the era.","pos":[0,35]}]}],"pos":[38197,38233],"yaml":true},{"content":"The number of days in the specified year in the specified era.","nodes":[{"pos":[0,62],"content":"The number of days in the specified year in the specified era.","nodes":[{"content":"The number of days in the specified year in the specified era.","pos":[0,62]}]}],"pos":[38289,38352],"yaml":true},{"content":"<code>year</code> is outside the range supported by the calendar.  \n  \n -or-  \n  \n <code>era</code> is outside the range supported by the calendar.","nodes":[{"pos":[0,65],"content":"<ph id=\"ph1\">&lt;code&gt;year&lt;/code&gt;</ph> is outside the range supported by the calendar.","source":"<code>year</code> is outside the range supported by the calendar."},{"pos":[72,76],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[83,147],"content":"<ph id=\"ph1\">&lt;code&gt;era&lt;/code&gt;</ph> is outside the range supported by the calendar.","source":"<code>era</code> is outside the range supported by the calendar."}],"pos":[38543,38697],"yaml":true},{"content":"Returns the era in the specified <xref href=\"System.DateTime\"></xref>.","nodes":[{"pos":[0,70],"content":"Returns the era in the specified <ph id=\"ph1\">&lt;xref href=\"System.DateTime\"&gt;&lt;/xref&gt;</ph>.","source":"Returns the era in the specified <xref href=\"System.DateTime\"></xref>."}],"pos":[40125,40196],"yaml":true},{"content":"The <xref:System.Globalization.TaiwanCalendar> class recognizes only the current era.","nodes":[{"pos":[0,85],"content":"The <xref:System.Globalization.TaiwanCalendar> class recognizes only the current era.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Globalization.TaiwanCalendar&gt;</ph> class recognizes only the current era.","pos":[0,85],"source":"The <xref:System.Globalization.TaiwanCalendar> class recognizes only the current era."}]}],"pos":[40207,40293],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.DateTime\"></xref> to read.","nodes":[{"pos":[0,49],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.DateTime\"&gt;&lt;/xref&gt;</ph> to read.","source":"The <xref href=\"System.DateTime\"></xref> to read."}],"pos":[41132,41182],"yaml":true},{"content":"An integer that represents the era in the specified <xref href=\"System.DateTime\"></xref>.","nodes":[{"pos":[0,89],"content":"An integer that represents the era in the specified <ph id=\"ph1\">&lt;xref href=\"System.DateTime\"&gt;&lt;/xref&gt;</ph>.","source":"An integer that represents the era in the specified <xref href=\"System.DateTime\"></xref>."}],"pos":[41238,41328],"yaml":true},{"content":"Calculates the leap month for a specified year and era.","nodes":[{"pos":[0,55],"content":"Calculates the leap month for a specified year and era.","nodes":[{"content":"Calculates the leap month for a specified year and era.","pos":[0,55]}]}],"pos":[42907,42963],"yaml":true},{"content":"In a calendar that supports the notion of a leap month, the leap month can occur either after a particular month or after any month in a year. For example, the <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> method returns a number between 1 and 13 that indicates the month associated with a specified date. If there is a leap month between the eighth and ninth months of the year, the <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> method returns 8 for the eighth month, 9 for the leap eighth month, and 10 for the ninth month.","nodes":[{"pos":[0,567],"content":"In a calendar that supports the notion of a leap month, the leap month can occur either after a particular month or after any month in a year. For example, the <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> method returns a number between 1 and 13 that indicates the month associated with a specified date. If there is a leap month between the eighth and ninth months of the year, the <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> method returns 8 for the eighth month, 9 for the leap eighth month, and 10 for the ninth month.","nodes":[{"content":"In a calendar that supports the notion of a leap month, the leap month can occur either after a particular month or after any month in a year. For example, the <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> method returns a number between 1 and 13 that indicates the month associated with a specified date. If there is a leap month between the eighth and ninth months of the year, the <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> method returns 8 for the eighth month, 9 for the leap eighth month, and 10 for the ninth month.","pos":[0,567],"nodes":[{"content":"In a calendar that supports the notion of a leap month, the leap month can occur either after a particular month or after any month in a year.","pos":[0,142]},{"content":"For example, the <ph id=\"ph1\">&lt;xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A&gt;</ph> method returns a number between 1 and 13 that indicates the month associated with a specified date.","pos":[143,326],"source":" For example, the <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> method returns a number between 1 and 13 that indicates the month associated with a specified date."},{"content":"If there is a leap month between the eighth and ninth months of the year, the <ph id=\"ph1\">&lt;xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A&gt;</ph> method returns 8 for the eighth month, 9 for the leap eighth month, and 10 for the ninth month.","pos":[327,567],"source":" If there is a leap month between the eighth and ninth months of the year, the <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> method returns 8 for the eighth month, 9 for the leap eighth month, and 10 for the ninth month."}]}]}],"pos":[42974,43542],"yaml":true,"extradata":"MT"},{"content":"A year.","nodes":[{"pos":[0,7],"content":"A year.","nodes":[{"content":"A year.","pos":[0,7]}]}],"pos":[43761,43769],"yaml":true},{"content":"An era.","nodes":[{"pos":[0,7],"content":"An era.","nodes":[{"content":"An era.","pos":[0,7]}]}],"pos":[43827,43835],"yaml":true},{"content":"The return value is always 0 because the <xref href=\"System.Globalization.TaiwanCalendar\"></xref> class does not support the notion of a leap month.","nodes":[{"pos":[0,148],"content":"The return value is always 0 because the <ph id=\"ph1\">&lt;xref href=\"System.Globalization.TaiwanCalendar\"&gt;&lt;/xref&gt;</ph> class does not support the notion of a leap month.","source":"The return value is always 0 because the <xref href=\"System.Globalization.TaiwanCalendar\"></xref> class does not support the notion of a leap month."}],"pos":[43891,44040],"yaml":true},{"content":"Returns the month in the specified <xref href=\"System.DateTime\"></xref>.","nodes":[{"pos":[0,72],"content":"Returns the month in the specified <ph id=\"ph1\">&lt;xref href=\"System.DateTime\"&gt;&lt;/xref&gt;</ph>.","source":"Returns the month in the specified <xref href=\"System.DateTime\"></xref>."}],"pos":[45634,45707],"yaml":true},{"content":"The <xref href=\"System.DateTime\"></xref> to read.","nodes":[{"pos":[0,49],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.DateTime\"&gt;&lt;/xref&gt;</ph> to read.","source":"The <xref href=\"System.DateTime\"></xref> to read."}],"pos":[46564,46614],"yaml":true},{"content":"An integer from 1 to 12 that represents the month in the specified <xref href=\"System.DateTime\"></xref>.","nodes":[{"pos":[0,104],"content":"An integer from 1 to 12 that represents the month in the specified <ph id=\"ph1\">&lt;xref href=\"System.DateTime\"&gt;&lt;/xref&gt;</ph>.","source":"An integer from 1 to 12 that represents the month in the specified <xref href=\"System.DateTime\"></xref>."}],"pos":[46670,46775],"yaml":true},{"content":"Returns the number of months in the specified year in the specified era.","nodes":[{"pos":[0,72],"content":"Returns the number of months in the specified year in the specified era.","nodes":[{"content":"Returns the number of months in the specified year in the specified era.","pos":[0,72]}]}],"pos":[48374,48447],"yaml":true},{"content":"An integer that represents the year.","nodes":[{"pos":[0,36],"content":"An integer that represents the year.","nodes":[{"content":"An integer that represents the year.","pos":[0,36]}]}],"pos":[49393,49430],"yaml":true},{"content":"An integer that represents the era.","nodes":[{"pos":[0,35],"content":"An integer that represents the era.","nodes":[{"content":"An integer that represents the era.","pos":[0,35]}]}],"pos":[49488,49524],"yaml":true},{"content":"The number of months in the specified year in the specified era.","nodes":[{"pos":[0,64],"content":"The number of months in the specified year in the specified era.","nodes":[{"content":"The number of months in the specified year in the specified era.","pos":[0,64]}]}],"pos":[49580,49645],"yaml":true},{"content":"<code>year</code> is outside the range supported by the calendar.  \n  \n -or-  \n  \n <code>era</code> is outside the range supported by the calendar.","nodes":[{"pos":[0,65],"content":"<ph id=\"ph1\">&lt;code&gt;year&lt;/code&gt;</ph> is outside the range supported by the calendar.","source":"<code>year</code> is outside the range supported by the calendar."},{"pos":[72,76],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[83,147],"content":"<ph id=\"ph1\">&lt;code&gt;era&lt;/code&gt;</ph> is outside the range supported by the calendar.","source":"<code>era</code> is outside the range supported by the calendar."}],"pos":[49838,49992],"yaml":true},{"content":"Returns the week of the year that includes the date in the specified <xref href=\"System.DateTime\"></xref>.","nodes":[{"pos":[0,106],"content":"Returns the week of the year that includes the date in the specified <ph id=\"ph1\">&lt;xref href=\"System.DateTime\"&gt;&lt;/xref&gt;</ph>.","source":"Returns the week of the year that includes the date in the specified <xref href=\"System.DateTime\"></xref>."}],"pos":[51714,51821],"yaml":true},{"content":"This method can be used to determine the number of weeks in the year by setting the `time` parameter to the last day of the year.  \n  \n The <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> property contains culture-specific values that can be used for the `rule` and `firstDayOfWeek` parameters.  \n  \n The <xref:System.Globalization.DateTimeFormatInfo.FirstDayOfWeek%2A> property of <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> contains the default <xref:System.DayOfWeek> value that represents the first day of the week for a specific culture, using the calendar specified in the <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> property of <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>.  \n  \n The <xref:System.Globalization.DateTimeFormatInfo.CalendarWeekRule%2A> property of <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> contains the default <xref:System.Globalization.CalendarWeekRule> value that defines a calendar week for a specific culture, using the calendar specified in the <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> property of <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>.  \n  \n For example, in <xref:System.Globalization.GregorianCalendar>, the <xref:System.Globalization.Calendar.GetWeekOfYear%2A> method for January 1 returns 1.","nodes":[{"pos":[0,129],"content":"This method can be used to determine the number of weeks in the year by setting the <ph id=\"ph1\">`time`</ph> parameter to the last day of the year.","source":"This method can be used to determine the number of weeks in the year by setting the `time` parameter to the last day of the year."},{"pos":[136,329],"content":"The <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName&gt;</ph> property contains culture-specific values that can be used for the <ph id=\"ph2\">`rule`</ph> and <ph id=\"ph3\">`firstDayOfWeek`</ph> parameters.","source":"The <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> property contains culture-specific values that can be used for the `rule` and `firstDayOfWeek` parameters."},{"pos":[336,807],"content":"The <xref:System.Globalization.DateTimeFormatInfo.FirstDayOfWeek%2A> property of <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> contains the default <xref:System.DayOfWeek> value that represents the first day of the week for a specific culture, using the calendar specified in the <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> property of <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Globalization.DateTimeFormatInfo.FirstDayOfWeek%2A&gt;</ph> property of <ph id=\"ph2\">&lt;xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName&gt;</ph> contains the default <ph id=\"ph3\">&lt;xref:System.DayOfWeek&gt;</ph> value that represents the first day of the week for a specific culture, using the calendar specified in the <ph id=\"ph4\">&lt;xref:System.Globalization.DateTimeFormatInfo.Calendar%2A&gt;</ph> property of <ph id=\"ph5\">&lt;xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName&gt;</ph>.","pos":[0,471],"source":"The <xref:System.Globalization.DateTimeFormatInfo.FirstDayOfWeek%2A> property of <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> contains the default <xref:System.DayOfWeek> value that represents the first day of the week for a specific culture, using the calendar specified in the <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> property of <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>."}]},{"pos":[814,1295],"content":"The <xref:System.Globalization.DateTimeFormatInfo.CalendarWeekRule%2A> property of <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> contains the default <xref:System.Globalization.CalendarWeekRule> value that defines a calendar week for a specific culture, using the calendar specified in the <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> property of <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Globalization.DateTimeFormatInfo.CalendarWeekRule%2A&gt;</ph> property of <ph id=\"ph2\">&lt;xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName&gt;</ph> contains the default <ph id=\"ph3\">&lt;xref:System.Globalization.CalendarWeekRule&gt;</ph> value that defines a calendar week for a specific culture, using the calendar specified in the <ph id=\"ph4\">&lt;xref:System.Globalization.DateTimeFormatInfo.Calendar%2A&gt;</ph> property of <ph id=\"ph5\">&lt;xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName&gt;</ph>.","pos":[0,481],"source":"The <xref:System.Globalization.DateTimeFormatInfo.CalendarWeekRule%2A> property of <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> contains the default <xref:System.Globalization.CalendarWeekRule> value that defines a calendar week for a specific culture, using the calendar specified in the <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> property of <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>."}]},{"pos":[1302,1454],"content":"For example, in <xref:System.Globalization.GregorianCalendar>, the <xref:System.Globalization.Calendar.GetWeekOfYear%2A> method for January 1 returns 1.","nodes":[{"content":"For example, in <ph id=\"ph1\">&lt;xref:System.Globalization.GregorianCalendar&gt;</ph>, the <ph id=\"ph2\">&lt;xref:System.Globalization.Calendar.GetWeekOfYear%2A&gt;</ph> method for January 1 returns 1.","pos":[0,152],"source":"For example, in <xref:System.Globalization.GregorianCalendar>, the <xref:System.Globalization.Calendar.GetWeekOfYear%2A> method for January 1 returns 1."}]}],"pos":[51832,53297],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.DateTime\"></xref> to read.","nodes":[{"pos":[0,49],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.DateTime\"&gt;&lt;/xref&gt;</ph> to read.","source":"The <xref href=\"System.DateTime\"></xref> to read."}],"pos":[54600,54650],"yaml":true},{"content":"One of the <xref href=\"System.Globalization.CalendarWeekRule\"></xref> values that defines a calendar week.","nodes":[{"pos":[0,106],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Globalization.CalendarWeekRule\"&gt;&lt;/xref&gt;</ph> values that defines a calendar week.","source":"One of the <xref href=\"System.Globalization.CalendarWeekRule\"></xref> values that defines a calendar week."}],"pos":[54734,54841],"yaml":true},{"content":"One of the <xref href=\"System.DayOfWeek\"></xref> values that represents the first day of the week.","nodes":[{"pos":[0,98],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.DayOfWeek\"&gt;&lt;/xref&gt;</ph> values that represents the first day of the week.","source":"One of the <xref href=\"System.DayOfWeek\"></xref> values that represents the first day of the week."}],"pos":[54914,55013],"yaml":true},{"content":"A positive integer that represents the week of the year that includes the date in the <code>time</code> parameter.","nodes":[{"pos":[0,114],"content":"A positive integer that represents the week of the year that includes the date in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">time</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","source":"A positive integer that represents the week of the year that includes the date in the <code>time</code> parameter."}],"pos":[55069,55184],"yaml":true},{"content":"<code>time</code> or <code>firstDayOfWeek</code> is outside the range supported by the calendar.  \n  \n -or-  \n  \n <code>rule</code> is not a valid <xref href=\"System.Globalization.CalendarWeekRule\"></xref> value.","nodes":[{"pos":[0,96],"content":"<ph id=\"ph1\">&lt;code&gt;time&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;firstDayOfWeek&lt;/code&gt;</ph> is outside the range supported by the calendar.","source":"<code>time</code> or <code>firstDayOfWeek</code> is outside the range supported by the calendar."},{"pos":[103,107],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[114,212],"content":"<ph id=\"ph1\">&lt;code&gt;rule&lt;/code&gt;</ph> is not a valid <ph id=\"ph2\">&lt;xref href=\"System.Globalization.CalendarWeekRule\"&gt;&lt;/xref&gt;</ph> value.","source":"<code>rule</code> is not a valid <xref href=\"System.Globalization.CalendarWeekRule\"></xref> value."}],"pos":[55375,55596],"yaml":true},{"content":"Returns the year in the specified <xref href=\"System.DateTime\"></xref>.","nodes":[{"pos":[0,71],"content":"Returns the year in the specified <ph id=\"ph1\">&lt;xref href=\"System.DateTime\"&gt;&lt;/xref&gt;</ph>.","source":"Returns the year in the specified <xref href=\"System.DateTime\"></xref>."}],"pos":[57105,57177],"yaml":true},{"content":"The <xref href=\"System.DateTime\"></xref> to read.","nodes":[{"pos":[0,49],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.DateTime\"&gt;&lt;/xref&gt;</ph> to read.","source":"The <xref href=\"System.DateTime\"></xref> to read."}],"pos":[58032,58082],"yaml":true},{"content":"An integer that represents the year in the specified <xref href=\"System.DateTime\"></xref>.","nodes":[{"pos":[0,90],"content":"An integer that represents the year in the specified <ph id=\"ph1\">&lt;xref href=\"System.DateTime\"&gt;&lt;/xref&gt;</ph>.","source":"An integer that represents the year in the specified <xref href=\"System.DateTime\"></xref>."}],"pos":[58138,58229],"yaml":true},{"content":"Determines whether the specified date in the specified era is a leap day.","nodes":[{"pos":[0,73],"content":"Determines whether the specified date in the specified era is a leap day.","nodes":[{"content":"Determines whether the specified date in the specified era is a leap day.","pos":[0,73]}]}],"pos":[59911,59985],"yaml":true},{"content":"Leap years in the Taiwan calendar correspond to the same leap years in the Gregorian calendar. A leap year in the Gregorian calendar is defined as a Gregorian year that is evenly divisible by four, except if it is divisible by 100. However, Gregorian years that are divisible by 400 are leap years. A common year has 365 days and a leap year has 366 days.  \n  \n A leap day is a day that occurs only in a leap year. For example, the 29th day of February is the only leap day.","nodes":[{"pos":[0,355],"content":"Leap years in the Taiwan calendar correspond to the same leap years in the Gregorian calendar. A leap year in the Gregorian calendar is defined as a Gregorian year that is evenly divisible by four, except if it is divisible by 100. However, Gregorian years that are divisible by 400 are leap years. A common year has 365 days and a leap year has 366 days.","nodes":[{"content":"Leap years in the Taiwan calendar correspond to the same leap years in the Gregorian calendar. A leap year in the Gregorian calendar is defined as a Gregorian year that is evenly divisible by four, except if it is divisible by 100. However, Gregorian years that are divisible by 400 are leap years. A common year has 365 days and a leap year has 366 days.","pos":[0,355],"nodes":[{"content":"Leap years in the Taiwan calendar correspond to the same leap years in the Gregorian calendar.","pos":[0,94]},{"content":"A leap year in the Gregorian calendar is defined as a Gregorian year that is evenly divisible by four, except if it is divisible by 100.","pos":[95,231]},{"content":"However, Gregorian years that are divisible by 400 are leap years.","pos":[232,298]},{"content":"A common year has 365 days and a leap year has 366 days.","pos":[299,355]}]}]},{"pos":[362,474],"content":"A leap day is a day that occurs only in a leap year. For example, the 29th day of February is the only leap day.","nodes":[{"content":"A leap day is a day that occurs only in a leap year. For example, the 29th day of February is the only leap day.","pos":[0,112],"nodes":[{"content":"A leap day is a day that occurs only in a leap year.","pos":[0,52]},{"content":"For example, the 29th day of February is the only leap day.","pos":[53,112]}]}]}],"pos":[59996,60475],"yaml":true,"extradata":"MT"},{"content":"An integer that represents the year.","nodes":[{"pos":[0,36],"content":"An integer that represents the year.","nodes":[{"content":"An integer that represents the year.","pos":[0,36]}]}],"pos":[61418,61455],"yaml":true},{"content":"An integer from 1 to 12 that represents the month.","nodes":[{"pos":[0,50],"content":"An integer from 1 to 12 that represents the month.","nodes":[{"content":"An integer from 1 to 12 that represents the month.","pos":[0,50]}]}],"pos":[61515,61566],"yaml":true},{"content":"An integer from 1 to 31 that represents the day.","nodes":[{"pos":[0,48],"content":"An integer from 1 to 31 that represents the day.","nodes":[{"content":"An integer from 1 to 31 that represents the day.","pos":[0,48]}]}],"pos":[61624,61673],"yaml":true},{"content":"An integer that represents the era.","nodes":[{"pos":[0,35],"content":"An integer that represents the era.","nodes":[{"content":"An integer that represents the era.","pos":[0,35]}]}],"pos":[61731,61767],"yaml":true},{"content":"`true` if the specified day is a leap day; otherwise, `false`.","nodes":[{"pos":[0,62],"content":"<ph id=\"ph1\">`true`</ph> if the specified day is a leap day; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the specified day is a leap day; otherwise, `false`."}],"pos":[61825,61890],"yaml":true},{"content":"<code>year</code> is outside the range supported by the calendar.  \n  \n -or-  \n  \n <code>month</code> is outside the range supported by the calendar.  \n  \n -or-  \n  \n <code>day</code> is outside the range supported by the calendar.  \n  \n -or-  \n  \n <code>era</code> is outside the range supported by the calendar.","nodes":[{"pos":[0,65],"content":"<ph id=\"ph1\">&lt;code&gt;year&lt;/code&gt;</ph> is outside the range supported by the calendar.","source":"<code>year</code> is outside the range supported by the calendar."},{"pos":[72,76],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[83,149],"content":"<ph id=\"ph1\">&lt;code&gt;month&lt;/code&gt;</ph> is outside the range supported by the calendar.","source":"<code>month</code> is outside the range supported by the calendar."},{"pos":[156,160],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[167,231],"content":"<ph id=\"ph1\">&lt;code&gt;day&lt;/code&gt;</ph> is outside the range supported by the calendar.","source":"<code>day</code> is outside the range supported by the calendar."},{"pos":[238,242],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[249,313],"content":"<ph id=\"ph1\">&lt;code&gt;era&lt;/code&gt;</ph> is outside the range supported by the calendar.","source":"<code>era</code> is outside the range supported by the calendar."}],"pos":[62077,62405],"yaml":true},{"content":"Determines whether the specified month in the specified year in the specified era is a leap month.","nodes":[{"pos":[0,98],"content":"Determines whether the specified month in the specified year in the specified era is a leap month.","nodes":[{"content":"Determines whether the specified month in the specified year in the specified era is a leap month.","pos":[0,98]}]}],"pos":[63965,64064],"yaml":true},{"content":"Leap years in the Taiwan calendar correspond to the same leap years in the Gregorian calendar. A leap year in the Gregorian calendar is defined as a Gregorian year that is evenly divisible by four, except if it is divisible by 100. However, Gregorian years that are divisible by 400 are leap years. A common year has 365 days and a leap year has 366 days.  \n  \n A leap month is an entire month that occurs only in a leap year. The Taiwan calendar does not have any leap months.","nodes":[{"pos":[0,355],"content":"Leap years in the Taiwan calendar correspond to the same leap years in the Gregorian calendar. A leap year in the Gregorian calendar is defined as a Gregorian year that is evenly divisible by four, except if it is divisible by 100. However, Gregorian years that are divisible by 400 are leap years. A common year has 365 days and a leap year has 366 days.","nodes":[{"content":"Leap years in the Taiwan calendar correspond to the same leap years in the Gregorian calendar. A leap year in the Gregorian calendar is defined as a Gregorian year that is evenly divisible by four, except if it is divisible by 100. However, Gregorian years that are divisible by 400 are leap years. A common year has 365 days and a leap year has 366 days.","pos":[0,355],"nodes":[{"content":"Leap years in the Taiwan calendar correspond to the same leap years in the Gregorian calendar.","pos":[0,94]},{"content":"A leap year in the Gregorian calendar is defined as a Gregorian year that is evenly divisible by four, except if it is divisible by 100.","pos":[95,231]},{"content":"However, Gregorian years that are divisible by 400 are leap years.","pos":[232,298]},{"content":"A common year has 365 days and a leap year has 366 days.","pos":[299,355]}]}]},{"pos":[362,477],"content":"A leap month is an entire month that occurs only in a leap year. The Taiwan calendar does not have any leap months.","nodes":[{"content":"A leap month is an entire month that occurs only in a leap year. The Taiwan calendar does not have any leap months.","pos":[0,115],"nodes":[{"content":"A leap month is an entire month that occurs only in a leap year.","pos":[0,64]},{"content":"The Taiwan calendar does not have any leap months.","pos":[65,115]}]}]}],"pos":[64075,64557],"yaml":true,"extradata":"MT"},{"content":"An integer that represents the year.","nodes":[{"pos":[0,36],"content":"An integer that represents the year.","nodes":[{"content":"An integer that represents the year.","pos":[0,36]}]}],"pos":[65482,65519],"yaml":true},{"content":"An integer from 1 to 12 that represents the month.","nodes":[{"pos":[0,50],"content":"An integer from 1 to 12 that represents the month.","nodes":[{"content":"An integer from 1 to 12 that represents the month.","pos":[0,50]}]}],"pos":[65579,65630],"yaml":true},{"content":"An integer that represents the era.","nodes":[{"pos":[0,35],"content":"An integer that represents the era.","nodes":[{"content":"An integer that represents the era.","pos":[0,35]}]}],"pos":[65688,65724],"yaml":true},{"content":"This method always returns `false`, unless overridden by a derived class.","nodes":[{"pos":[0,73],"content":"This method always returns <ph id=\"ph1\">`false`</ph>, unless overridden by a derived class.","source":"This method always returns `false`, unless overridden by a derived class."}],"pos":[65782,65856],"yaml":true},{"content":"<code>year</code> is outside the range supported by the calendar.  \n  \n -or-  \n  \n <code>month</code> is outside the range supported by the calendar.  \n  \n -or-  \n  \n <code>era</code> is outside the range supported by the calendar.","nodes":[{"pos":[0,65],"content":"<ph id=\"ph1\">&lt;code&gt;year&lt;/code&gt;</ph> is outside the range supported by the calendar.","source":"<code>year</code> is outside the range supported by the calendar."},{"pos":[72,76],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[83,149],"content":"<ph id=\"ph1\">&lt;code&gt;month&lt;/code&gt;</ph> is outside the range supported by the calendar.","source":"<code>month</code> is outside the range supported by the calendar."},{"pos":[156,160],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[167,231],"content":"<ph id=\"ph1\">&lt;code&gt;era&lt;/code&gt;</ph> is outside the range supported by the calendar.","source":"<code>era</code> is outside the range supported by the calendar."}],"pos":[66045,66287],"yaml":true},{"content":"Determines whether the specified year in the specified era is a leap year.","nodes":[{"pos":[0,74],"content":"Determines whether the specified year in the specified era is a leap year.","nodes":[{"content":"Determines whether the specified year in the specified era is a leap year.","pos":[0,74]}]}],"pos":[67781,67856],"yaml":true},{"content":"Leap years in the Taiwan calendar correspond to the same leap years in the Gregorian calendar. A leap year in the Gregorian calendar is defined as a Gregorian year that is evenly divisible by four, except if it is divisible by 100. However, Gregorian years that are divisible by 400 are leap years. A common year has 365 days and a leap year has 366 days.","nodes":[{"pos":[0,355],"content":"Leap years in the Taiwan calendar correspond to the same leap years in the Gregorian calendar. A leap year in the Gregorian calendar is defined as a Gregorian year that is evenly divisible by four, except if it is divisible by 100. However, Gregorian years that are divisible by 400 are leap years. A common year has 365 days and a leap year has 366 days.","nodes":[{"content":"Leap years in the Taiwan calendar correspond to the same leap years in the Gregorian calendar. A leap year in the Gregorian calendar is defined as a Gregorian year that is evenly divisible by four, except if it is divisible by 100. However, Gregorian years that are divisible by 400 are leap years. A common year has 365 days and a leap year has 366 days.","pos":[0,355],"nodes":[{"content":"Leap years in the Taiwan calendar correspond to the same leap years in the Gregorian calendar.","pos":[0,94]},{"content":"A leap year in the Gregorian calendar is defined as a Gregorian year that is evenly divisible by four, except if it is divisible by 100.","pos":[95,231]},{"content":"However, Gregorian years that are divisible by 400 are leap years.","pos":[232,298]},{"content":"A common year has 365 days and a leap year has 366 days.","pos":[299,355]}]}]}],"pos":[67867,68223],"yaml":true,"extradata":"MT"},{"content":"An integer that represents the year.","nodes":[{"pos":[0,36],"content":"An integer that represents the year.","nodes":[{"content":"An integer that represents the year.","pos":[0,36]}]}],"pos":[69109,69146],"yaml":true},{"content":"An integer that represents the era.","nodes":[{"pos":[0,35],"content":"An integer that represents the era.","nodes":[{"content":"An integer that represents the era.","pos":[0,35]}]}],"pos":[69204,69240],"yaml":true},{"content":"`true` if the specified year is a leap year; otherwise, `false`.","nodes":[{"pos":[0,64],"content":"<ph id=\"ph1\">`true`</ph> if the specified year is a leap year; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the specified year is a leap year; otherwise, `false`."}],"pos":[69298,69365],"yaml":true},{"content":"<code>year</code> is outside the range supported by the calendar.  \n  \n -or-  \n  \n <code>era</code> is outside the range supported by the calendar.","nodes":[{"pos":[0,65],"content":"<ph id=\"ph1\">&lt;code&gt;year&lt;/code&gt;</ph> is outside the range supported by the calendar.","source":"<code>year</code> is outside the range supported by the calendar."},{"pos":[72,76],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[83,147],"content":"<ph id=\"ph1\">&lt;code&gt;era&lt;/code&gt;</ph> is outside the range supported by the calendar.","source":"<code>era</code> is outside the range supported by the calendar."}],"pos":[69553,69707],"yaml":true},{"content":"Gets the latest date and time supported by the <xref href=\"System.Globalization.TaiwanCalendar\"></xref> class.","nodes":[{"pos":[0,110],"content":"Gets the latest date and time supported by the <ph id=\"ph1\">&lt;xref href=\"System.Globalization.TaiwanCalendar\"&gt;&lt;/xref&gt;</ph> class.","source":"Gets the latest date and time supported by the <xref href=\"System.Globalization.TaiwanCalendar\"></xref> class."}],"pos":[71140,71251],"yaml":true},{"content":"The latest date and time supported by the <xref href=\"System.Globalization.TaiwanCalendar\"></xref> class, which is equivalent to the last moment of December 31, 9999 C.E. in the Gregorian calendar.","nodes":[{"pos":[0,197],"content":"The latest date and time supported by the <xref href=\"System.Globalization.TaiwanCalendar\"></xref> class, which is equivalent to the last moment of December 31, 9999 C.E. in the Gregorian calendar.","nodes":[{"content":"The latest date and time supported by the <ph id=\"ph1\">&lt;xref href=\"System.Globalization.TaiwanCalendar\"&gt;&lt;/xref&gt;</ph> class, which is equivalent to the last moment of December 31, 9999 C.E.","pos":[0,170],"source":"The latest date and time supported by the <xref href=\"System.Globalization.TaiwanCalendar\"></xref> class, which is equivalent to the last moment of December 31, 9999 C.E."},{"content":"in the Gregorian calendar.","pos":[171,197]}]}],"pos":[72136,72334],"yaml":true},{"content":"Gets the earliest date and time supported by the <xref href=\"System.Globalization.TaiwanCalendar\"></xref> class.","nodes":[{"pos":[0,112],"content":"Gets the earliest date and time supported by the <ph id=\"ph1\">&lt;xref href=\"System.Globalization.TaiwanCalendar\"&gt;&lt;/xref&gt;</ph> class.","source":"Gets the earliest date and time supported by the <xref href=\"System.Globalization.TaiwanCalendar\"></xref> class."}],"pos":[73929,74042],"yaml":true},{"content":"Microsoft Visual Basic represents time of day as the specified time on the minimum date supported by <xref:System.DateTime>, which is January 1, 0001 C.E. However, the <xref:System.Globalization.TaiwanCalendar> class does not support that minimum date. Consequently, if your application calls a method to format the time of day using the current calendar but does not specify a format specifier, formatting uses the ISO 8601 sortable (\"s\") date/time pattern format specifier instead of the default general (\"G\") date/time pattern format specifier. For more information, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md).","nodes":[{"pos":[0,683],"content":"Microsoft Visual Basic represents time of day as the specified time on the minimum date supported by <xref:System.DateTime>, which is January 1, 0001 C.E. However, the <xref:System.Globalization.TaiwanCalendar> class does not support that minimum date. Consequently, if your application calls a method to format the time of day using the current calendar but does not specify a format specifier, formatting uses the ISO 8601 sortable (\"s\") date/time pattern format specifier instead of the default general (\"G\") date/time pattern format specifier. For more information, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md).","nodes":[{"content":"Microsoft Visual Basic represents time of day as the specified time on the minimum date supported by <ph id=\"ph1\">&lt;xref:System.DateTime&gt;</ph>, which is January 1, 0001 C.E.","pos":[0,154],"source":"Microsoft Visual Basic represents time of day as the specified time on the minimum date supported by <xref:System.DateTime>, which is January 1, 0001 C.E."},{"content":"However, the <ph id=\"ph1\">&lt;xref:System.Globalization.TaiwanCalendar&gt;</ph> class does not support that minimum date.","pos":[155,252],"source":" However, the <xref:System.Globalization.TaiwanCalendar> class does not support that minimum date."},{"content":"Consequently, if your application calls a method to format the time of day using the current calendar but does not specify a format specifier, formatting uses the ISO 8601 sortable (\"s\") date/time pattern format specifier instead of the default general (\"G\") date/time pattern format specifier.","pos":[253,547]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Standard Date and Time Format Strings<ept id=\"p1\">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept>.","pos":[548,683],"source":" For more information, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md)."}]}],"pos":[74053,74737],"yaml":true,"extradata":"MT"},{"content":"The earliest date and time supported by the <xref href=\"System.Globalization.TaiwanCalendar\"></xref> class, which is equivalent to the first moment of January 1, 1912 C.E. in the Gregorian calendar.","nodes":[{"pos":[0,198],"content":"The earliest date and time supported by the <xref href=\"System.Globalization.TaiwanCalendar\"></xref> class, which is equivalent to the first moment of January 1, 1912 C.E. in the Gregorian calendar.","nodes":[{"content":"The earliest date and time supported by the <ph id=\"ph1\">&lt;xref href=\"System.Globalization.TaiwanCalendar\"&gt;&lt;/xref&gt;</ph> class, which is equivalent to the first moment of January 1, 1912 C.E.","pos":[0,171],"source":"The earliest date and time supported by the <xref href=\"System.Globalization.TaiwanCalendar\"></xref> class, which is equivalent to the first moment of January 1, 1912 C.E."},{"content":"in the Gregorian calendar.","pos":[172,198]}]}],"pos":[75608,75807],"yaml":true},{"content":"Returns a <xref href=\"System.DateTime\"></xref> that is set to the specified date and time in the specified era.","nodes":[{"pos":[0,111],"content":"Returns a <ph id=\"ph1\">&lt;xref href=\"System.DateTime\"&gt;&lt;/xref&gt;</ph> that is set to the specified date and time in the specified era.","source":"Returns a <xref href=\"System.DateTime\"></xref> that is set to the specified date and time in the specified era."}],"pos":[77823,77935],"yaml":true},{"content":"An integer that represents the year.","nodes":[{"pos":[0,36],"content":"An integer that represents the year.","nodes":[{"content":"An integer that represents the year.","pos":[0,36]}]}],"pos":[78161,78198],"yaml":true},{"content":"An integer from 1 to 12 that represents the month.","nodes":[{"pos":[0,50],"content":"An integer from 1 to 12 that represents the month.","nodes":[{"content":"An integer from 1 to 12 that represents the month.","pos":[0,50]}]}],"pos":[78258,78309],"yaml":true},{"content":"An integer from 1 to 31 that represents the day.","nodes":[{"pos":[0,48],"content":"An integer from 1 to 31 that represents the day.","nodes":[{"content":"An integer from 1 to 31 that represents the day.","pos":[0,48]}]}],"pos":[78367,78416],"yaml":true},{"content":"An integer from 0 to 23 that represents the hour.","nodes":[{"pos":[0,49],"content":"An integer from 0 to 23 that represents the hour.","nodes":[{"content":"An integer from 0 to 23 that represents the hour.","pos":[0,49]}]}],"pos":[78475,78525],"yaml":true},{"content":"An integer from 0 to 59 that represents the minute.","nodes":[{"pos":[0,51],"content":"An integer from 0 to 59 that represents the minute.","nodes":[{"content":"An integer from 0 to 59 that represents the minute.","pos":[0,51]}]}],"pos":[78586,78638],"yaml":true},{"content":"An integer from 0 to 59 that represents the second.","nodes":[{"pos":[0,51],"content":"An integer from 0 to 59 that represents the second.","nodes":[{"content":"An integer from 0 to 59 that represents the second.","pos":[0,51]}]}],"pos":[78699,78751],"yaml":true},{"content":"An integer from 0 to 999 that represents the millisecond.","nodes":[{"pos":[0,57],"content":"An integer from 0 to 999 that represents the millisecond.","nodes":[{"content":"An integer from 0 to 999 that represents the millisecond.","pos":[0,57]}]}],"pos":[78817,78875],"yaml":true},{"content":"An integer that represents the era.","nodes":[{"pos":[0,35],"content":"An integer that represents the era.","nodes":[{"content":"An integer that represents the era.","pos":[0,35]}]}],"pos":[78933,78969],"yaml":true},{"content":"The <xref href=\"System.DateTime\"></xref> that is set to the specified date and time in the current era.","nodes":[{"pos":[0,103],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.DateTime\"&gt;&lt;/xref&gt;</ph> that is set to the specified date and time in the current era.","source":"The <xref href=\"System.DateTime\"></xref> that is set to the specified date and time in the current era."}],"pos":[79028,79132],"yaml":true},{"content":"<code>year</code> is outside the range supported by the calendar.  \n  \n -or-  \n  \n <code>month</code> is outside the range supported by the calendar.  \n  \n -or-  \n  \n <code>day</code> is outside the range supported by the calendar.  \n  \n -or-  \n  \n <code>hour</code> is less than zero or greater than 23.  \n  \n -or-  \n  \n <code>minute</code> is less than zero or greater than 59.  \n  \n -or-  \n  \n <code>second</code> is less than zero or greater than 59.  \n  \n -or-  \n  \n <code>millisecond</code> is less than zero or greater than 999.  \n  \n -or-  \n  \n <code>era</code> is outside the range supported by the calendar.","nodes":[{"pos":[0,65],"content":"<ph id=\"ph1\">&lt;code&gt;year&lt;/code&gt;</ph> is outside the range supported by the calendar.","source":"<code>year</code> is outside the range supported by the calendar."},{"pos":[72,76],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[83,149],"content":"<ph id=\"ph1\">&lt;code&gt;month&lt;/code&gt;</ph> is outside the range supported by the calendar.","source":"<code>month</code> is outside the range supported by the calendar."},{"pos":[156,160],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[167,231],"content":"<ph id=\"ph1\">&lt;code&gt;day&lt;/code&gt;</ph> is outside the range supported by the calendar.","source":"<code>day</code> is outside the range supported by the calendar."},{"pos":[238,242],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[249,304],"content":"<ph id=\"ph1\">&lt;code&gt;hour&lt;/code&gt;</ph> is less than zero or greater than 23.","source":"<code>hour</code> is less than zero or greater than 23."},{"pos":[311,315],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[322,379],"content":"<ph id=\"ph1\">&lt;code&gt;minute&lt;/code&gt;</ph> is less than zero or greater than 59.","source":"<code>minute</code> is less than zero or greater than 59."},{"pos":[386,390],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[397,454],"content":"<ph id=\"ph1\">&lt;code&gt;second&lt;/code&gt;</ph> is less than zero or greater than 59.","source":"<code>second</code> is less than zero or greater than 59."},{"pos":[461,465],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[472,535],"content":"<ph id=\"ph1\">&lt;code&gt;millisecond&lt;/code&gt;</ph> is less than zero or greater than 999.","source":"<code>millisecond</code> is less than zero or greater than 999."},{"pos":[542,546],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[553,617],"content":"<ph id=\"ph1\">&lt;code&gt;era&lt;/code&gt;</ph> is outside the range supported by the calendar.","source":"<code>era</code> is outside the range supported by the calendar."}],"pos":[79320,79968],"yaml":true},{"content":"Converts the specified year to a four-digit year by using the <xref href=\"System.Globalization.TaiwanCalendar.TwoDigitYearMax\"></xref> property to determine the appropriate century.","nodes":[{"pos":[0,181],"content":"Converts the specified year to a four-digit year by using the <ph id=\"ph1\">&lt;xref href=\"System.Globalization.TaiwanCalendar.TwoDigitYearMax\"&gt;&lt;/xref&gt;</ph> property to determine the appropriate century.","source":"Converts the specified year to a four-digit year by using the <xref href=\"System.Globalization.TaiwanCalendar.TwoDigitYearMax\"></xref> property to determine the appropriate century."}],"pos":[81432,81614],"yaml":true},{"content":"This method implements <xref:System.Globalization.Calendar.ToFourDigitYear%2A?displayProperty=fullName>.  \n  \n Because the year in the Taiwan calendar is typically less than four digits long, this implementation always returns the value of the `year` parameter.  \n  \n <xref:System.Globalization.TaiwanCalendar.ToFourDigitYear%2A> supports either a two-digit year or a four-digit year. Passing a two-digit year value (less than 100) causes the method to convert the value to a four-digit value according to the <xref:System.Globalization.TaiwanCalendar.TwoDigitYearMax%2A> value representing the appropriate century. If the application supplies a four-digit year value that is within the supported calendar range to <xref:System.Globalization.TaiwanCalendar.ToFourDigitYear%2A>, the method returns the actual input value. If the application supplies a four-digit value that is outside the supported calendar range, or if it supplies a negative value, the method throws an exception.","nodes":[{"pos":[0,104],"content":"This method implements <xref:System.Globalization.Calendar.ToFourDigitYear%2A?displayProperty=fullName>.","nodes":[{"content":"This method implements <ph id=\"ph1\">&lt;xref:System.Globalization.Calendar.ToFourDigitYear%2A?displayProperty=fullName&gt;</ph>.","pos":[0,104],"source":"This method implements <xref:System.Globalization.Calendar.ToFourDigitYear%2A?displayProperty=fullName>."}]},{"pos":[111,261],"content":"Because the year in the Taiwan calendar is typically less than four digits long, this implementation always returns the value of the <ph id=\"ph1\">`year`</ph> parameter.","source":"Because the year in the Taiwan calendar is typically less than four digits long, this implementation always returns the value of the `year` parameter."},{"pos":[268,981],"content":"<xref:System.Globalization.TaiwanCalendar.ToFourDigitYear%2A> supports either a two-digit year or a four-digit year. Passing a two-digit year value (less than 100) causes the method to convert the value to a four-digit value according to the <xref:System.Globalization.TaiwanCalendar.TwoDigitYearMax%2A> value representing the appropriate century. If the application supplies a four-digit year value that is within the supported calendar range to <xref:System.Globalization.TaiwanCalendar.ToFourDigitYear%2A>, the method returns the actual input value. If the application supplies a four-digit value that is outside the supported calendar range, or if it supplies a negative value, the method throws an exception.","nodes":[{"content":"<xref:System.Globalization.TaiwanCalendar.ToFourDigitYear%2A> supports either a two-digit year or a four-digit year. Passing a two-digit year value (less than 100) causes the method to convert the value to a four-digit value according to the <xref:System.Globalization.TaiwanCalendar.TwoDigitYearMax%2A> value representing the appropriate century. If the application supplies a four-digit year value that is within the supported calendar range to <xref:System.Globalization.TaiwanCalendar.ToFourDigitYear%2A>, the method returns the actual input value. If the application supplies a four-digit value that is outside the supported calendar range, or if it supplies a negative value, the method throws an exception.","pos":[0,713],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Globalization.TaiwanCalendar.ToFourDigitYear%2A&gt;</ph> supports either a two-digit year or a four-digit year.","pos":[0,116],"source":"<xref:System.Globalization.TaiwanCalendar.ToFourDigitYear%2A> supports either a two-digit year or a four-digit year."},{"content":"Passing a two-digit year value (less than 100) causes the method to convert the value to a four-digit value according to the <ph id=\"ph1\">&lt;xref:System.Globalization.TaiwanCalendar.TwoDigitYearMax%2A&gt;</ph> value representing the appropriate century.","pos":[117,347],"source":" Passing a two-digit year value (less than 100) causes the method to convert the value to a four-digit value according to the <xref:System.Globalization.TaiwanCalendar.TwoDigitYearMax%2A> value representing the appropriate century."},{"content":"If the application supplies a four-digit year value that is within the supported calendar range to <ph id=\"ph1\">&lt;xref:System.Globalization.TaiwanCalendar.ToFourDigitYear%2A&gt;</ph>, the method returns the actual input value.","pos":[348,552],"source":" If the application supplies a four-digit year value that is within the supported calendar range to <xref:System.Globalization.TaiwanCalendar.ToFourDigitYear%2A>, the method returns the actual input value."},{"content":"If the application supplies a four-digit value that is outside the supported calendar range, or if it supplies a negative value, the method throws an exception.","pos":[553,713]}]}]}],"pos":[81625,82613],"yaml":true,"extradata":"MT"},{"content":"A two-digit or four-digit integer that represents the year to convert.","nodes":[{"pos":[0,70],"content":"A two-digit or four-digit integer that represents the year to convert.","nodes":[{"content":"A two-digit or four-digit integer that represents the year to convert.","pos":[0,70]}]}],"pos":[82759,82830],"yaml":true},{"content":"An integer that contains the four-digit representation of <code>year</code>.","nodes":[{"pos":[0,76],"content":"An integer that contains the four-digit representation of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">year</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An integer that contains the four-digit representation of <code>year</code>."}],"pos":[82886,82963],"yaml":true},{"content":"<code>year</code> is outside the range supported by the calendar.","nodes":[{"pos":[0,65],"content":"<ph id=\"ph1\">&lt;code&gt;year&lt;/code&gt;</ph> is outside the range supported by the calendar.","source":"<code>year</code> is outside the range supported by the calendar."}],"pos":[83156,83222],"yaml":true},{"content":"Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.","nodes":[{"pos":[0,89],"content":"Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.","nodes":[{"content":"Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.","pos":[0,89]}]}],"pos":[84625,84715],"yaml":true},{"content":"This property implements <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=fullName>.  \n  \n Because the year in the Taiwan calendar is typically less than four digits long, this implementation returns 99 by default and does not affect the return value of <xref:System.Globalization.TaiwanCalendar.ToFourDigitYear%2A>.","nodes":[{"pos":[0,106],"content":"This property implements <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=fullName>.","nodes":[{"content":"This property implements <ph id=\"ph1\">&lt;xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=fullName&gt;</ph>.","pos":[0,106],"source":"This property implements <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=fullName>."}]},{"pos":[113,338],"content":"Because the year in the Taiwan calendar is typically less than four digits long, this implementation returns 99 by default and does not affect the return value of <xref:System.Globalization.TaiwanCalendar.ToFourDigitYear%2A>.","nodes":[{"content":"Because the year in the Taiwan calendar is typically less than four digits long, this implementation returns 99 by default and does not affect the return value of <ph id=\"ph1\">&lt;xref:System.Globalization.TaiwanCalendar.ToFourDigitYear%2A&gt;</ph>.","pos":[0,225],"source":"Because the year in the Taiwan calendar is typically less than four digits long, this implementation returns 99 by default and does not affect the return value of <xref:System.Globalization.TaiwanCalendar.ToFourDigitYear%2A>."}]}],"pos":[84726,85069],"yaml":true,"extradata":"MT"},{"content":"The last year of a 100-year range that can be represented by a 2-digit year.","nodes":[{"pos":[0,76],"content":"The last year of a 100-year range that can be represented by a 2-digit year.","nodes":[{"content":"The last year of a 100-year range that can be represented by a 2-digit year.","pos":[0,76]}]}],"pos":[85198,85275],"yaml":true},{"content":"The value specified in a set operation is less than 99.  \n  \n -or-  \n  \n The value specified in a set operation is greater than `MaxSupportedDateTime.Year`.","nodes":[{"pos":[0,55],"content":"The value specified in a set operation is less than 99.","nodes":[{"content":"The value specified in a set operation is less than 99.","pos":[0,55]}]},{"pos":[62,66],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[73,156],"content":"The value specified in a set operation is greater than <ph id=\"ph1\">`MaxSupportedDateTime.Year`</ph>.","source":"The value specified in a set operation is greater than `MaxSupportedDateTime.Year`."}],"pos":[85468,85631],"yaml":true},{"content":"In a set operation, the current instance is read-only.","nodes":[{"pos":[0,54],"content":"In a set operation, the current instance is read-only.","nodes":[{"content":"In a set operation, the current instance is read-only.","pos":[0,54]}]}],"pos":[85741,85796],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Globalization.TaiwanCalendar\n  commentId: T:System.Globalization.TaiwanCalendar\n  id: TaiwanCalendar\n  children:\n  - System.Globalization.TaiwanCalendar.#ctor\n  - System.Globalization.TaiwanCalendar.AddMonths(System.DateTime,System.Int32)\n  - System.Globalization.TaiwanCalendar.AddYears(System.DateTime,System.Int32)\n  - System.Globalization.TaiwanCalendar.AlgorithmType\n  - System.Globalization.TaiwanCalendar.Eras\n  - System.Globalization.TaiwanCalendar.GetDayOfMonth(System.DateTime)\n  - System.Globalization.TaiwanCalendar.GetDayOfWeek(System.DateTime)\n  - System.Globalization.TaiwanCalendar.GetDayOfYear(System.DateTime)\n  - System.Globalization.TaiwanCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  - System.Globalization.TaiwanCalendar.GetDaysInYear(System.Int32,System.Int32)\n  - System.Globalization.TaiwanCalendar.GetEra(System.DateTime)\n  - System.Globalization.TaiwanCalendar.GetLeapMonth(System.Int32,System.Int32)\n  - System.Globalization.TaiwanCalendar.GetMonth(System.DateTime)\n  - System.Globalization.TaiwanCalendar.GetMonthsInYear(System.Int32,System.Int32)\n  - System.Globalization.TaiwanCalendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n  - System.Globalization.TaiwanCalendar.GetYear(System.DateTime)\n  - System.Globalization.TaiwanCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.Globalization.TaiwanCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n  - System.Globalization.TaiwanCalendar.IsLeapYear(System.Int32,System.Int32)\n  - System.Globalization.TaiwanCalendar.MaxSupportedDateTime\n  - System.Globalization.TaiwanCalendar.MinSupportedDateTime\n  - System.Globalization.TaiwanCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.Globalization.TaiwanCalendar.ToFourDigitYear(System.Int32)\n  - System.Globalization.TaiwanCalendar.TwoDigitYearMax\n  langs:\n  - csharp\n  name: TaiwanCalendar\n  nameWithType: TaiwanCalendar\n  fullName: System.Globalization.TaiwanCalendar\n  type: Class\n  assemblies:\n  - System.Globalization.Calendars\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: the Taiwan calendar.\n  remarks: \"The Taiwan calendar works exactly like the Gregorian calendar, except that the year and era are different. The <xref:System.Globalization.TaiwanCalendar> class recognizes only the current era.  \\n  \\n> [!NOTE]\\n>  For information about using the <xref:System.Globalization.TaiwanCalendar> class and the other calendar classes in the .NET Framework, see [Working with Calendars](~/docs/standard/datetime/working-with-calendars.md).  \\n  \\n Leap years in the Taiwan calendar correspond to the same leap years in the Gregorian calendar. A leap year in the Gregorian calendar is defined as a Gregorian year that is evenly divisible by four, except if it is divisible by 100. However, Gregorian years that are divisible by 400 are leap years. A common year has 365 days and a leap year has 366 days.  \\n  \\n The Taiwan calendar has 12 months with 28 to 31 days each:  \\n  \\n|GetMonth value|Month|Days in common years|Days in leap years|  \\n|--------------------|-----------|--------------------------|------------------------|  \\n|1|1月 (January)|31|31|  \\n|2|2月 (February)|28|29|  \\n|3|3月 (March)|31|31|  \\n|4|4月 (April)|30|30|  \\n|5|5月 (May)|31|31|  \\n|6|6月 (June)|30|30|  \\n|7|7月 (July)|31|31|  \\n|8|8月 (August)|31|31|  \\n|9|9月 (September)|30|30|  \\n|10|10月 (October)|31|31|  \\n|11|11月 (November)|30|30|  \\n|12|12月 (December)|31|31|  \\n  \\n February has 29 days during leap years and 28 during common years.  \\n  \\n The date January 1, 2001 C.E. in the Gregorian calendar is equivalent to the first day of January in the year 90 of the current era in the Taiwan calendar.  \\n  \\n Each <xref:System.Globalization.CultureInfo> supports a set of calendars. The <xref:System.Globalization.CultureInfo.Calendar%2A> property returns the default calendar for the culture, and the <xref:System.Globalization.CultureInfo.OptionalCalendars%2A> property returns an array containing all the calendars supported by the culture. To change the calendar used by a <xref:System.Globalization.CultureInfo>, the application should set the <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> property of <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> to a new <xref:System.Globalization.Calendar>.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class TaiwanCalendar : System.Globalization.Calendar\n  inheritance:\n  - System.Object\n  - System.Globalization.Calendar\n  implements: []\n  inheritedMembers:\n  - System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)\n  - System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)\n  - System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)\n  - System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)\n  - System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)\n  - System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)\n  - System.Globalization.Calendar.Clone\n  - System.Globalization.Calendar.CurrentEra\n  - System.Globalization.Calendar.DaysInYearBeforeMinSupportedYear\n  - System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32)\n  - System.Globalization.Calendar.GetDaysInYear(System.Int32)\n  - System.Globalization.Calendar.GetHour(System.DateTime)\n  - System.Globalization.Calendar.GetLeapMonth(System.Int32)\n  - System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n  - System.Globalization.Calendar.GetMinute(System.DateTime)\n  - System.Globalization.Calendar.GetMonthsInYear(System.Int32)\n  - System.Globalization.Calendar.GetSecond(System.DateTime)\n  - System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32)\n  - System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32)\n  - System.Globalization.Calendar.IsLeapYear(System.Int32)\n  - System.Globalization.Calendar.IsReadOnly\n  - System.Globalization.Calendar.ReadOnly(System.Globalization.Calendar)\n  - System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/TaiwanCalendar.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.TaiwanCalendar.#ctor\n  commentId: M:System.Globalization.TaiwanCalendar.#ctor\n  id: '#ctor'\n  parent: System.Globalization.TaiwanCalendar\n  langs:\n  - csharp\n  name: TaiwanCalendar()\n  nameWithType: TaiwanCalendar.TaiwanCalendar()\n  fullName: TaiwanCalendar.TaiwanCalendar()\n  type: Constructor\n  assemblies:\n  - System.Globalization.Calendars\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Initializes a new instance of the <xref href=\"System.Globalization.TaiwanCalendar\"></xref> class.\n  syntax:\n    content: public TaiwanCalendar ();\n    parameters: []\n  overload: System.Globalization.TaiwanCalendar.#ctor*\n  exceptions:\n  - type: System.TypeInitializationException\n    commentId: T:System.TypeInitializationException\n    description: Unable to initialize a <xref href=\"System.Globalization.TaiwanCalendar\"></xref> object because of missing culture information.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/TaiwanCalendar.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.TaiwanCalendar.AddMonths(System.DateTime,System.Int32)\n  commentId: M:System.Globalization.TaiwanCalendar.AddMonths(System.DateTime,System.Int32)\n  id: AddMonths(System.DateTime,System.Int32)\n  parent: System.Globalization.TaiwanCalendar\n  langs:\n  - csharp\n  name: AddMonths(DateTime, Int32)\n  nameWithType: TaiwanCalendar.AddMonths(DateTime, Int32)\n  fullName: TaiwanCalendar.AddMonths(DateTime, Int32)\n  type: Method\n  assemblies:\n  - System.Globalization.Calendars\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Returns a <xref href=\"System.DateTime\"></xref> that is the specified number of months away from the specified <xref href=\"System.DateTime\"></xref>.\n  remarks: \"The day part of the resulting <xref:System.DateTime> is affected if the resulting day is not a valid day in the resulting month of the resulting year. It is changed to the last valid day in the resulting month of the resulting year. The year part of the resulting <xref:System.DateTime> is affected if the resulting month is outside the year of the specified <xref:System.DateTime>. This implementation supports only the current era. Therefore, <xref:System.ArgumentException> is thrown if the resulting year is outside the era of the specified <xref:System.DateTime>. The time-of-day part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>.  \\n  \\n For example, if the specified month is October, which has 31 days, the specified day is the 31st day of that month, and the value of the `months` parameter is 6, the resulting year is one more than the specified year, the resulting month is April, and the resulting day is the 30th day, which is the last day in April.  \\n  \\n If the value of the `months` parameter is negative, the resulting <xref:System.DateTime> is earlier than the specified <xref:System.DateTime>.  \\n  \\n The<xref:System.DateTime.Kind%2A> property of the returned <xref:System.DateTime> value always equals <xref:System.DateTimeKind?displayProperty=fullName>. You can preserve the <xref:System.DateTime.Kind%2A> property of the `time` parameter by calling the <xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName> method, as the following example shows.  \\n  \\n [!code-csharp[System.Globalization.Calendar.AddMethods#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.calendar.addmethods/cs/add1.cs#5)]\\n [!code-vb[System.Globalization.Calendar.AddMethods#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.calendar.addmethods/vb/add1.vb#5)]\"\n  example:\n  - \"The following code example demonstrates the use of the <xref:System.Globalization.TaiwanCalendar.AddMonths%2A> method.  \\n  \\n [!code-cpp[System.Globalization.TaiwanCalendar_AddGet#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.TaiwanCalendar_AddGet/CPP/taiwancalendar_addget.cpp#1)]\\n [!code-csharp[System.Globalization.TaiwanCalendar_AddGet#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.TaiwanCalendar_AddGet/CS/taiwancalendar_addget.cs#1)]\\n [!code-vb[System.Globalization.TaiwanCalendar_AddGet#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.TaiwanCalendar_AddGet/VB/taiwancalendar_addget.vb#1)]\"\n  syntax:\n    content: public override DateTime AddMonths (DateTime time, int months);\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: The <xref href=\"System.DateTime\"></xref> to which to add months.\n    - id: months\n      type: System.Int32\n      description: The number of months to add.\n    return:\n      type: System.DateTime\n      description: The <xref href=\"System.DateTime\"></xref> that results from adding the specified number of months to the specified <xref href=\"System.DateTime\"></xref>.\n  overload: System.Globalization.TaiwanCalendar.AddMonths*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The resulting <xref href=\"System.DateTime\"></xref> is outside the supported range.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>months</code> is less than -120000.  \\n  \\n -or-  \\n  \\n <code>months</code> is greater than 120000.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/TaiwanCalendar.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.TaiwanCalendar.AddYears(System.DateTime,System.Int32)\n  commentId: M:System.Globalization.TaiwanCalendar.AddYears(System.DateTime,System.Int32)\n  id: AddYears(System.DateTime,System.Int32)\n  parent: System.Globalization.TaiwanCalendar\n  langs:\n  - csharp\n  name: AddYears(DateTime, Int32)\n  nameWithType: TaiwanCalendar.AddYears(DateTime, Int32)\n  fullName: TaiwanCalendar.AddYears(DateTime, Int32)\n  type: Method\n  assemblies:\n  - System.Globalization.Calendars\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Returns a <xref href=\"System.DateTime\"></xref> that is the specified number of years away from the specified <xref href=\"System.DateTime\"></xref>.\n  remarks: \"The day part of the resulting <xref:System.DateTime> is affected if the resulting day is not a valid day in the resulting month of the resulting year. It is changed to the last valid day in the resulting month of the resulting year. The month part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>. This implementation supports only the current era. Therefore, <xref:System.ArgumentException> is thrown if the resulting year is outside the era of the specified <xref:System.DateTime>. The time-of-day part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>.  \\n  \\n For example, February has 28 days, except during leap years when it has 29 days. If the specified date is the 29th day of February in a leap year and the value of `years` is 1, the resulting date is the 28th day of February in the following year.  \\n  \\n If `years` is negative, the resulting <xref:System.DateTime> is earlier than the specified <xref:System.DateTime>.  \\n  \\n The<xref:System.DateTime.Kind%2A> property of the returned <xref:System.DateTime> value always equals <xref:System.DateTimeKind?displayProperty=fullName>. You can preserve the <xref:System.DateTime.Kind%2A> property of the `time` parameter by calling the <xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName> method, as the following example shows.  \\n  \\n [!code-csharp[System.Globalization.Calendar.AddMethods#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.calendar.addmethods/cs/add1.cs#8)]\\n [!code-vb[System.Globalization.Calendar.AddMethods#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.calendar.addmethods/vb/add1.vb#8)]\"\n  example:\n  - \"The following code example displays the use of the <xref:System.Globalization.TaiwanCalendar.AddYears%2A> method.  \\n  \\n [!code-cpp[System.Globalization.TaiwanCalendar_AddGet#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.TaiwanCalendar_AddGet/CPP/taiwancalendar_addget.cpp#1)]\\n [!code-csharp[System.Globalization.TaiwanCalendar_AddGet#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.TaiwanCalendar_AddGet/CS/taiwancalendar_addget.cs#1)]\\n [!code-vb[System.Globalization.TaiwanCalendar_AddGet#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.TaiwanCalendar_AddGet/VB/taiwancalendar_addget.vb#1)]\"\n  syntax:\n    content: public override DateTime AddYears (DateTime time, int years);\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: The <xref href=\"System.DateTime\"></xref> to which to add years.\n    - id: years\n      type: System.Int32\n      description: The number of years to add.\n    return:\n      type: System.DateTime\n      description: The <xref href=\"System.DateTime\"></xref> that results from adding the specified number of years to the specified <xref href=\"System.DateTime\"></xref>.\n  overload: System.Globalization.TaiwanCalendar.AddYears*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The resulting <xref href=\"System.DateTime\"></xref> is outside the supported range.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/TaiwanCalendar.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.TaiwanCalendar.AlgorithmType\n  commentId: P:System.Globalization.TaiwanCalendar.AlgorithmType\n  id: AlgorithmType\n  parent: System.Globalization.TaiwanCalendar\n  langs:\n  - csharp\n  name: AlgorithmType\n  nameWithType: TaiwanCalendar.AlgorithmType\n  fullName: TaiwanCalendar.AlgorithmType\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Gets a value that indicates whether the current calendar is solar-based, lunar-based, or a combination of both.\n  remarks: ''\n  example:\n  - \"The following example uses reflection to instantiate each <xref:System.Globalization.Calendar> type found in the .NET Framework and displays the value of its <xref:System.Globalization.Calendar.AlgorithmType%2A> property.  \\n  \\n [!code-csharp[System.Globalization.Calendar.AlgorithmType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.calendar.algorithmtype/cs/algorithmtype1.cs#1)]\\n [!code-vb[System.Globalization.Calendar.AlgorithmType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.calendar.algorithmtype/vb/algorithmtype1.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public override System.Globalization.CalendarAlgorithmType AlgorithmType { get; }\n    return:\n      type: System.Globalization.CalendarAlgorithmType\n      description: Always returns <xref href=\"System.Globalization.CalendarAlgorithmType.SolarCalendar\"></xref>.\n  overload: System.Globalization.TaiwanCalendar.AlgorithmType*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/TaiwanCalendar.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.TaiwanCalendar.Eras\n  commentId: P:System.Globalization.TaiwanCalendar.Eras\n  id: Eras\n  parent: System.Globalization.TaiwanCalendar\n  langs:\n  - csharp\n  name: Eras\n  nameWithType: TaiwanCalendar.Eras\n  fullName: TaiwanCalendar.Eras\n  type: Property\n  assemblies:\n  - System.Globalization.Calendars\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Gets the list of eras in the <xref href=\"System.Globalization.TaiwanCalendar\"></xref>.\n  remarks: The values in the array returned by this property are numbers that range from 1 to the largest era number. The largest era number is returned in the first array element and the smallest era number is returned in the last element.\n  syntax:\n    content: public override int[] Eras { get; }\n    return:\n      type: System.Int32[]\n      description: An array that consists of a single element for which the value is always the current era.\n  overload: System.Globalization.TaiwanCalendar.Eras*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/TaiwanCalendar.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.TaiwanCalendar.GetDayOfMonth(System.DateTime)\n  commentId: M:System.Globalization.TaiwanCalendar.GetDayOfMonth(System.DateTime)\n  id: GetDayOfMonth(System.DateTime)\n  parent: System.Globalization.TaiwanCalendar\n  langs:\n  - csharp\n  name: GetDayOfMonth(DateTime)\n  nameWithType: TaiwanCalendar.GetDayOfMonth(DateTime)\n  fullName: TaiwanCalendar.GetDayOfMonth(DateTime)\n  type: Method\n  assemblies:\n  - System.Globalization.Calendars\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Returns the day of the month in the specified <xref href=\"System.DateTime\"></xref>.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates the use of the <xref:System.Globalization.TaiwanCalendar.GetDayOfMonth%2A> method.  \\n  \\n [!code-cpp[System.Globalization.TaiwanCalendar_AddGet#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.TaiwanCalendar_AddGet/CPP/taiwancalendar_addget.cpp#1)]\\n [!code-csharp[System.Globalization.TaiwanCalendar_AddGet#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.TaiwanCalendar_AddGet/CS/taiwancalendar_addget.cs#1)]\\n [!code-vb[System.Globalization.TaiwanCalendar_AddGet#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.TaiwanCalendar_AddGet/VB/taiwancalendar_addget.vb#1)]\"\n  syntax:\n    content: public override int GetDayOfMonth (DateTime time);\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: The <xref href=\"System.DateTime\"></xref> to read.\n    return:\n      type: System.Int32\n      description: An integer from 1 to 31 that represents the day of the month in the specified <xref href=\"System.DateTime\"></xref>.\n  overload: System.Globalization.TaiwanCalendar.GetDayOfMonth*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/TaiwanCalendar.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.TaiwanCalendar.GetDayOfWeek(System.DateTime)\n  commentId: M:System.Globalization.TaiwanCalendar.GetDayOfWeek(System.DateTime)\n  id: GetDayOfWeek(System.DateTime)\n  parent: System.Globalization.TaiwanCalendar\n  langs:\n  - csharp\n  name: GetDayOfWeek(DateTime)\n  nameWithType: TaiwanCalendar.GetDayOfWeek(DateTime)\n  fullName: TaiwanCalendar.GetDayOfWeek(DateTime)\n  type: Method\n  assemblies:\n  - System.Globalization.Calendars\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Returns the day of the week in the specified <xref href=\"System.DateTime\"></xref>.\n  remarks: \"The <xref:System.DayOfWeek> values are as follows:  \\n  \\n|DayOfWeek value|which indicates|  \\n|---------------------|---------------------|  \\n|Sunday|星期日|  \\n|Monday|星期一|  \\n|Tuesday|星期二|  \\n|Wednesday|星期三|  \\n|Thursday|星期四|  \\n|Friday|星期五|  \\n|Saturday|星期六|\"\n  example:\n  - \"The following code example demonstrates the use of the <xref:System.Globalization.TaiwanCalendar.GetDayOfWeek%2A> method.  \\n  \\n [!code-cpp[System.Globalization.TaiwanCalendar_AddGet#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.TaiwanCalendar_AddGet/CPP/taiwancalendar_addget.cpp#1)]\\n [!code-csharp[System.Globalization.TaiwanCalendar_AddGet#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.TaiwanCalendar_AddGet/CS/taiwancalendar_addget.cs#1)]\\n [!code-vb[System.Globalization.TaiwanCalendar_AddGet#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.TaiwanCalendar_AddGet/VB/taiwancalendar_addget.vb#1)]\"\n  syntax:\n    content: public override DayOfWeek GetDayOfWeek (DateTime time);\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: The <xref href=\"System.DateTime\"></xref> to read.\n    return:\n      type: System.DayOfWeek\n      description: A <xref href=\"System.DayOfWeek\"></xref> value that represents the day of the week in the specified <xref href=\"System.DateTime\"></xref>.\n  overload: System.Globalization.TaiwanCalendar.GetDayOfWeek*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/TaiwanCalendar.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.TaiwanCalendar.GetDayOfYear(System.DateTime)\n  commentId: M:System.Globalization.TaiwanCalendar.GetDayOfYear(System.DateTime)\n  id: GetDayOfYear(System.DateTime)\n  parent: System.Globalization.TaiwanCalendar\n  langs:\n  - csharp\n  name: GetDayOfYear(DateTime)\n  nameWithType: TaiwanCalendar.GetDayOfYear(DateTime)\n  fullName: TaiwanCalendar.GetDayOfYear(DateTime)\n  type: Method\n  assemblies:\n  - System.Globalization.Calendars\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Returns the day of the year in the specified <xref href=\"System.DateTime\"></xref>.\n  remarks: The day of the year is defined as the number of days from the first day of the year. For example, <xref:System.Globalization.TaiwanCalendar.GetDayOfYear%2A> for the first day of the first month returns 1, and <xref:System.Globalization.TaiwanCalendar.GetDayOfYear%2A> for the last day of the last month returns the total number of days in that year. The total is the same as the value returned by <xref:System.Globalization.TaiwanCalendar.GetDaysInYear%2A>.\n  example:\n  - \"The following code example demonstrates the use of the <xref:System.Globalization.TaiwanCalendar.GetDayOfYear%2A> method.  \\n  \\n [!code-cpp[System.Globalization.TaiwanCalendar_AddGet#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.TaiwanCalendar_AddGet/CPP/taiwancalendar_addget.cpp#1)]\\n [!code-csharp[System.Globalization.TaiwanCalendar_AddGet#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.TaiwanCalendar_AddGet/CS/taiwancalendar_addget.cs#1)]\\n [!code-vb[System.Globalization.TaiwanCalendar_AddGet#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.TaiwanCalendar_AddGet/VB/taiwancalendar_addget.vb#1)]\"\n  syntax:\n    content: public override int GetDayOfYear (DateTime time);\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: The <xref href=\"System.DateTime\"></xref> to read.\n    return:\n      type: System.Int32\n      description: An integer from 1 to 366 that represents the day of the year in the specified <xref href=\"System.DateTime\"></xref>.\n  overload: System.Globalization.TaiwanCalendar.GetDayOfYear*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/TaiwanCalendar.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.TaiwanCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  commentId: M:System.Globalization.TaiwanCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  id: GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.TaiwanCalendar\n  langs:\n  - csharp\n  name: GetDaysInMonth(Int32, Int32, Int32)\n  nameWithType: TaiwanCalendar.GetDaysInMonth(Int32, Int32, Int32)\n  fullName: TaiwanCalendar.GetDaysInMonth(Int32, Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Globalization.Calendars\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Returns the number of days in the specified month in the specified year in the specified era.\n  remarks: For example, this method returns 28 or 29 for February (`month` = 2), depending on whether `year` is a leap year.\n  example:\n  - \"The following example calls <xref:System.Globalization.TaiwanCalendar.GetDaysInMonth%2A> for the second month in each of five years in each era.  \\n  \\n [!code-cpp[System.Globalization.TaiwanCalendar.GetDaysInMonth#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.TaiwanCalendar.GetDaysInMonth/CPP/taiwancalendar_getdaysinmonth.cpp#1)]\\n [!code-csharp[System.Globalization.TaiwanCalendar.GetDaysInMonth#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.TaiwanCalendar.GetDaysInMonth/CS/taiwancalendar_getdaysinmonth.cs#1)]\\n [!code-vb[System.Globalization.TaiwanCalendar.GetDaysInMonth#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.TaiwanCalendar.GetDaysInMonth/VB/taiwancalendar_getdaysinmonth.vb#1)]\"\n  syntax:\n    content: public override int GetDaysInMonth (int year, int month, int era);\n    parameters:\n    - id: year\n      type: System.Int32\n      description: An integer that represents the year.\n    - id: month\n      type: System.Int32\n      description: An integer from 1 to 12 that represents the month.\n    - id: era\n      type: System.Int32\n      description: An integer that represents the era.\n    return:\n      type: System.Int32\n      description: The number of days in the specified month in the specified year in the specified era.\n  overload: System.Globalization.TaiwanCalendar.GetDaysInMonth*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>year</code> is outside the range supported by the calendar.  \\n  \\n -or-  \\n  \\n <code>month</code> is outside the range supported by the calendar.  \\n  \\n -or-  \\n  \\n <code>era</code> is outside the range supported by the calendar.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/TaiwanCalendar.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.TaiwanCalendar.GetDaysInYear(System.Int32,System.Int32)\n  commentId: M:System.Globalization.TaiwanCalendar.GetDaysInYear(System.Int32,System.Int32)\n  id: GetDaysInYear(System.Int32,System.Int32)\n  parent: System.Globalization.TaiwanCalendar\n  langs:\n  - csharp\n  name: GetDaysInYear(Int32, Int32)\n  nameWithType: TaiwanCalendar.GetDaysInYear(Int32, Int32)\n  fullName: TaiwanCalendar.GetDaysInYear(Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Globalization.Calendars\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Returns the number of days in the specified year in the specified era.\n  remarks: For example, this method returns 365 or 366, depending on whether `year` is a leap year.\n  example:\n  - \"The following example calls <xref:System.Globalization.TaiwanCalendar.GetDaysInYear%2A> for five years in each era.  \\n  \\n [!code-cpp[System.Globalization.TaiwanCalendar.GetDaysInYear#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.TaiwanCalendar.GetDaysInYear/CPP/taiwancalendar_getdaysinyear.cpp#1)]\\n [!code-csharp[System.Globalization.TaiwanCalendar.GetDaysInYear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.TaiwanCalendar.GetDaysInYear/CS/taiwancalendar_getdaysinyear.cs#1)]\\n [!code-vb[System.Globalization.TaiwanCalendar.GetDaysInYear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.TaiwanCalendar.GetDaysInYear/VB/taiwancalendar_getdaysinyear.vb#1)]\"\n  syntax:\n    content: public override int GetDaysInYear (int year, int era);\n    parameters:\n    - id: year\n      type: System.Int32\n      description: An integer that represents the year.\n    - id: era\n      type: System.Int32\n      description: An integer that represents the era.\n    return:\n      type: System.Int32\n      description: The number of days in the specified year in the specified era.\n  overload: System.Globalization.TaiwanCalendar.GetDaysInYear*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>year</code> is outside the range supported by the calendar.  \\n  \\n -or-  \\n  \\n <code>era</code> is outside the range supported by the calendar.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/TaiwanCalendar.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.TaiwanCalendar.GetEra(System.DateTime)\n  commentId: M:System.Globalization.TaiwanCalendar.GetEra(System.DateTime)\n  id: GetEra(System.DateTime)\n  parent: System.Globalization.TaiwanCalendar\n  langs:\n  - csharp\n  name: GetEra(DateTime)\n  nameWithType: TaiwanCalendar.GetEra(DateTime)\n  fullName: TaiwanCalendar.GetEra(DateTime)\n  type: Method\n  assemblies:\n  - System.Globalization.Calendars\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Returns the era in the specified <xref href=\"System.DateTime\"></xref>.\n  remarks: The <xref:System.Globalization.TaiwanCalendar> class recognizes only the current era.\n  example:\n  - \"The following code example demonstrates the use of the <xref:System.Globalization.TaiwanCalendar.GetEra%2A> method.  \\n  \\n [!code-cpp[System.Globalization.TaiwanCalendar_AddGet#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.TaiwanCalendar_AddGet/CPP/taiwancalendar_addget.cpp#1)]\\n [!code-csharp[System.Globalization.TaiwanCalendar_AddGet#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.TaiwanCalendar_AddGet/CS/taiwancalendar_addget.cs#1)]\\n [!code-vb[System.Globalization.TaiwanCalendar_AddGet#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.TaiwanCalendar_AddGet/VB/taiwancalendar_addget.vb#1)]\"\n  syntax:\n    content: public override int GetEra (DateTime time);\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: The <xref href=\"System.DateTime\"></xref> to read.\n    return:\n      type: System.Int32\n      description: An integer that represents the era in the specified <xref href=\"System.DateTime\"></xref>.\n  overload: System.Globalization.TaiwanCalendar.GetEra*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/TaiwanCalendar.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.TaiwanCalendar.GetLeapMonth(System.Int32,System.Int32)\n  commentId: M:System.Globalization.TaiwanCalendar.GetLeapMonth(System.Int32,System.Int32)\n  id: GetLeapMonth(System.Int32,System.Int32)\n  parent: System.Globalization.TaiwanCalendar\n  langs:\n  - csharp\n  name: GetLeapMonth(Int32, Int32)\n  nameWithType: TaiwanCalendar.GetLeapMonth(Int32, Int32)\n  fullName: TaiwanCalendar.GetLeapMonth(Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Globalization.Calendars\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Calculates the leap month for a specified year and era.\n  remarks: In a calendar that supports the notion of a leap month, the leap month can occur either after a particular month or after any month in a year. For example, the <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> method returns a number between 1 and 13 that indicates the month associated with a specified date. If there is a leap month between the eighth and ninth months of the year, the <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> method returns 8 for the eighth month, 9 for the leap eighth month, and 10 for the ninth month.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public override int GetLeapMonth (int year, int era);\n    parameters:\n    - id: year\n      type: System.Int32\n      description: A year.\n    - id: era\n      type: System.Int32\n      description: An era.\n    return:\n      type: System.Int32\n      description: The return value is always 0 because the <xref href=\"System.Globalization.TaiwanCalendar\"></xref> class does not support the notion of a leap month.\n  overload: System.Globalization.TaiwanCalendar.GetLeapMonth*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/TaiwanCalendar.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.TaiwanCalendar.GetMonth(System.DateTime)\n  commentId: M:System.Globalization.TaiwanCalendar.GetMonth(System.DateTime)\n  id: GetMonth(System.DateTime)\n  parent: System.Globalization.TaiwanCalendar\n  langs:\n  - csharp\n  name: GetMonth(DateTime)\n  nameWithType: TaiwanCalendar.GetMonth(DateTime)\n  fullName: TaiwanCalendar.GetMonth(DateTime)\n  type: Method\n  assemblies:\n  - System.Globalization.Calendars\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Returns the month in the specified <xref href=\"System.DateTime\"></xref>.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates the use of the <xref:System.Globalization.TaiwanCalendar.GetMonth%2A> method.  \\n  \\n [!code-cpp[System.Globalization.TaiwanCalendar_AddGet#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.TaiwanCalendar_AddGet/CPP/taiwancalendar_addget.cpp#1)]\\n [!code-csharp[System.Globalization.TaiwanCalendar_AddGet#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.TaiwanCalendar_AddGet/CS/taiwancalendar_addget.cs#1)]\\n [!code-vb[System.Globalization.TaiwanCalendar_AddGet#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.TaiwanCalendar_AddGet/VB/taiwancalendar_addget.vb#1)]\"\n  syntax:\n    content: public override int GetMonth (DateTime time);\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: The <xref href=\"System.DateTime\"></xref> to read.\n    return:\n      type: System.Int32\n      description: An integer from 1 to 12 that represents the month in the specified <xref href=\"System.DateTime\"></xref>.\n  overload: System.Globalization.TaiwanCalendar.GetMonth*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/TaiwanCalendar.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.TaiwanCalendar.GetMonthsInYear(System.Int32,System.Int32)\n  commentId: M:System.Globalization.TaiwanCalendar.GetMonthsInYear(System.Int32,System.Int32)\n  id: GetMonthsInYear(System.Int32,System.Int32)\n  parent: System.Globalization.TaiwanCalendar\n  langs:\n  - csharp\n  name: GetMonthsInYear(Int32, Int32)\n  nameWithType: TaiwanCalendar.GetMonthsInYear(Int32, Int32)\n  fullName: TaiwanCalendar.GetMonthsInYear(Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Globalization.Calendars\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Returns the number of months in the specified year in the specified era.\n  remarks: ''\n  example:\n  - \"The following example calls <xref:System.Globalization.TaiwanCalendar.GetMonthsInYear%2A> for five years in each era.  \\n  \\n [!code-cpp[System.Globalization.TaiwanCalendar.GetMonthsInYear#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.TaiwanCalendar.GetMonthsInYear/CPP/taiwancalendar_getmonthsinyear.cpp#1)]\\n [!code-csharp[System.Globalization.TaiwanCalendar.GetMonthsInYear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.TaiwanCalendar.GetMonthsInYear/CS/taiwancalendar_getmonthsinyear.cs#1)]\\n [!code-vb[System.Globalization.TaiwanCalendar.GetMonthsInYear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.TaiwanCalendar.GetMonthsInYear/VB/taiwancalendar_getmonthsinyear.vb#1)]\"\n  syntax:\n    content: public override int GetMonthsInYear (int year, int era);\n    parameters:\n    - id: year\n      type: System.Int32\n      description: An integer that represents the year.\n    - id: era\n      type: System.Int32\n      description: An integer that represents the era.\n    return:\n      type: System.Int32\n      description: The number of months in the specified year in the specified era.\n  overload: System.Globalization.TaiwanCalendar.GetMonthsInYear*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>year</code> is outside the range supported by the calendar.  \\n  \\n -or-  \\n  \\n <code>era</code> is outside the range supported by the calendar.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/TaiwanCalendar.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.TaiwanCalendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n  commentId: M:System.Globalization.TaiwanCalendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n  id: GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n  parent: System.Globalization.TaiwanCalendar\n  langs:\n  - csharp\n  name: GetWeekOfYear(DateTime, CalendarWeekRule, DayOfWeek)\n  nameWithType: TaiwanCalendar.GetWeekOfYear(DateTime, CalendarWeekRule, DayOfWeek)\n  fullName: TaiwanCalendar.GetWeekOfYear(DateTime, CalendarWeekRule, DayOfWeek)\n  type: Method\n  assemblies:\n  - System.Globalization.Calendars\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Returns the week of the year that includes the date in the specified <xref href=\"System.DateTime\"></xref>.\n  remarks: \"This method can be used to determine the number of weeks in the year by setting the `time` parameter to the last day of the year.  \\n  \\n The <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> property contains culture-specific values that can be used for the `rule` and `firstDayOfWeek` parameters.  \\n  \\n The <xref:System.Globalization.DateTimeFormatInfo.FirstDayOfWeek%2A> property of <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> contains the default <xref:System.DayOfWeek> value that represents the first day of the week for a specific culture, using the calendar specified in the <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> property of <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>.  \\n  \\n The <xref:System.Globalization.DateTimeFormatInfo.CalendarWeekRule%2A> property of <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> contains the default <xref:System.Globalization.CalendarWeekRule> value that defines a calendar week for a specific culture, using the calendar specified in the <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> property of <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>.  \\n  \\n For example, in <xref:System.Globalization.GregorianCalendar>, the <xref:System.Globalization.Calendar.GetWeekOfYear%2A> method for January 1 returns 1.\"\n  example:\n  - \"The following code example shows how the result of <xref:System.Globalization.Calendar.GetWeekOfYear%2A> varies depending on the <xref:System.Globalization.DateTimeFormatInfo.FirstDayOfWeek%2A> and <xref:System.Globalization.CalendarWeekRule> values used. If the specified date is the last day of the year, <xref:System.Globalization.Calendar.GetWeekOfYear%2A> returns the total number of weeks in that year.  \\n  \\n [!code-cpp[System.Globalization.Calendar.GetWeekOfYear#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.Calendar.GetWeekOfYear/CPP/yslin_calendar_getweekofyear.cpp#1)]\\n [!code-csharp[System.Globalization.Calendar.GetWeekOfYear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.Calendar.GetWeekOfYear/CS/yslin_calendar_getweekofyear.cs#1)]\\n [!code-vb[System.Globalization.Calendar.GetWeekOfYear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.Calendar.GetWeekOfYear/VB/yslin_calendar_getweekofyear.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public override int GetWeekOfYear (DateTime time, System.Globalization.CalendarWeekRule rule, DayOfWeek firstDayOfWeek);\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: The <xref href=\"System.DateTime\"></xref> to read.\n    - id: rule\n      type: System.Globalization.CalendarWeekRule\n      description: One of the <xref href=\"System.Globalization.CalendarWeekRule\"></xref> values that defines a calendar week.\n    - id: firstDayOfWeek\n      type: System.DayOfWeek\n      description: One of the <xref href=\"System.DayOfWeek\"></xref> values that represents the first day of the week.\n    return:\n      type: System.Int32\n      description: A positive integer that represents the week of the year that includes the date in the <code>time</code> parameter.\n  overload: System.Globalization.TaiwanCalendar.GetWeekOfYear*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>time</code> or <code>firstDayOfWeek</code> is outside the range supported by the calendar.  \\n  \\n -or-  \\n  \\n <code>rule</code> is not a valid <xref href=\\\"System.Globalization.CalendarWeekRule\\\"></xref> value.\"\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/TaiwanCalendar.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.TaiwanCalendar.GetYear(System.DateTime)\n  commentId: M:System.Globalization.TaiwanCalendar.GetYear(System.DateTime)\n  id: GetYear(System.DateTime)\n  parent: System.Globalization.TaiwanCalendar\n  langs:\n  - csharp\n  name: GetYear(DateTime)\n  nameWithType: TaiwanCalendar.GetYear(DateTime)\n  fullName: TaiwanCalendar.GetYear(DateTime)\n  type: Method\n  assemblies:\n  - System.Globalization.Calendars\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Returns the year in the specified <xref href=\"System.DateTime\"></xref>.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates the use of the <xref:System.Globalization.TaiwanCalendar.GetYear%2A> method.  \\n  \\n [!code-cpp[System.Globalization.TaiwanCalendar_AddGet#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.TaiwanCalendar_AddGet/CPP/taiwancalendar_addget.cpp#1)]\\n [!code-csharp[System.Globalization.TaiwanCalendar_AddGet#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.TaiwanCalendar_AddGet/CS/taiwancalendar_addget.cs#1)]\\n [!code-vb[System.Globalization.TaiwanCalendar_AddGet#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.TaiwanCalendar_AddGet/VB/taiwancalendar_addget.vb#1)]\"\n  syntax:\n    content: public override int GetYear (DateTime time);\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: The <xref href=\"System.DateTime\"></xref> to read.\n    return:\n      type: System.Int32\n      description: An integer that represents the year in the specified <xref href=\"System.DateTime\"></xref>.\n  overload: System.Globalization.TaiwanCalendar.GetYear*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/TaiwanCalendar.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.TaiwanCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n  commentId: M:System.Globalization.TaiwanCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n  id: IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.TaiwanCalendar\n  langs:\n  - csharp\n  name: IsLeapDay(Int32, Int32, Int32, Int32)\n  nameWithType: TaiwanCalendar.IsLeapDay(Int32, Int32, Int32, Int32)\n  fullName: TaiwanCalendar.IsLeapDay(Int32, Int32, Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Globalization.Calendars\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Determines whether the specified date in the specified era is a leap day.\n  remarks: \"Leap years in the Taiwan calendar correspond to the same leap years in the Gregorian calendar. A leap year in the Gregorian calendar is defined as a Gregorian year that is evenly divisible by four, except if it is divisible by 100. However, Gregorian years that are divisible by 400 are leap years. A common year has 365 days and a leap year has 366 days.  \\n  \\n A leap day is a day that occurs only in a leap year. For example, the 29th day of February is the only leap day.\"\n  example:\n  - \"The following example calls <xref:System.Globalization.TaiwanCalendar.IsLeapDay%2A> for the last day of the second month (February) for five years in each of the eras.  \\n  \\n [!code-cpp[System.Globalization.TaiwanCalendar.IsLeapDay#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.TaiwanCalendar.IsLeapDay/CPP/taiwancalendar_isleapday.cpp#1)]\\n [!code-csharp[System.Globalization.TaiwanCalendar.IsLeapDay#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.TaiwanCalendar.IsLeapDay/CS/taiwancalendar_isleapday.cs#1)]\\n [!code-vb[System.Globalization.TaiwanCalendar.IsLeapDay#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.TaiwanCalendar.IsLeapDay/VB/taiwancalendar_isleapday.vb#1)]\"\n  syntax:\n    content: public override bool IsLeapDay (int year, int month, int day, int era);\n    parameters:\n    - id: year\n      type: System.Int32\n      description: An integer that represents the year.\n    - id: month\n      type: System.Int32\n      description: An integer from 1 to 12 that represents the month.\n    - id: day\n      type: System.Int32\n      description: An integer from 1 to 31 that represents the day.\n    - id: era\n      type: System.Int32\n      description: An integer that represents the era.\n    return:\n      type: System.Boolean\n      description: '`true` if the specified day is a leap day; otherwise, `false`.'\n  overload: System.Globalization.TaiwanCalendar.IsLeapDay*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>year</code> is outside the range supported by the calendar.  \\n  \\n -or-  \\n  \\n <code>month</code> is outside the range supported by the calendar.  \\n  \\n -or-  \\n  \\n <code>day</code> is outside the range supported by the calendar.  \\n  \\n -or-  \\n  \\n <code>era</code> is outside the range supported by the calendar.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/TaiwanCalendar.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.TaiwanCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n  commentId: M:System.Globalization.TaiwanCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n  id: IsLeapMonth(System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.TaiwanCalendar\n  langs:\n  - csharp\n  name: IsLeapMonth(Int32, Int32, Int32)\n  nameWithType: TaiwanCalendar.IsLeapMonth(Int32, Int32, Int32)\n  fullName: TaiwanCalendar.IsLeapMonth(Int32, Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Globalization.Calendars\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Determines whether the specified month in the specified year in the specified era is a leap month.\n  remarks: \"Leap years in the Taiwan calendar correspond to the same leap years in the Gregorian calendar. A leap year in the Gregorian calendar is defined as a Gregorian year that is evenly divisible by four, except if it is divisible by 100. However, Gregorian years that are divisible by 400 are leap years. A common year has 365 days and a leap year has 366 days.  \\n  \\n A leap month is an entire month that occurs only in a leap year. The Taiwan calendar does not have any leap months.\"\n  example:\n  - \"The following example calls <xref:System.Globalization.TaiwanCalendar.IsLeapMonth%2A> for all the months in five years in the current era.  \\n  \\n [!code-cpp[System.Globalization.TaiwanCalendar.IsLeapMonth#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.TaiwanCalendar.IsLeapMonth/CPP/taiwancalendar_isleapmonth.cpp#1)]\\n [!code-csharp[System.Globalization.TaiwanCalendar.IsLeapMonth#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.TaiwanCalendar.IsLeapMonth/CS/taiwancalendar_isleapmonth.cs#1)]\\n [!code-vb[System.Globalization.TaiwanCalendar.IsLeapMonth#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.TaiwanCalendar.IsLeapMonth/VB/taiwancalendar_isleapmonth.vb#1)]\"\n  syntax:\n    content: public override bool IsLeapMonth (int year, int month, int era);\n    parameters:\n    - id: year\n      type: System.Int32\n      description: An integer that represents the year.\n    - id: month\n      type: System.Int32\n      description: An integer from 1 to 12 that represents the month.\n    - id: era\n      type: System.Int32\n      description: An integer that represents the era.\n    return:\n      type: System.Boolean\n      description: This method always returns `false`, unless overridden by a derived class.\n  overload: System.Globalization.TaiwanCalendar.IsLeapMonth*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>year</code> is outside the range supported by the calendar.  \\n  \\n -or-  \\n  \\n <code>month</code> is outside the range supported by the calendar.  \\n  \\n -or-  \\n  \\n <code>era</code> is outside the range supported by the calendar.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/TaiwanCalendar.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.TaiwanCalendar.IsLeapYear(System.Int32,System.Int32)\n  commentId: M:System.Globalization.TaiwanCalendar.IsLeapYear(System.Int32,System.Int32)\n  id: IsLeapYear(System.Int32,System.Int32)\n  parent: System.Globalization.TaiwanCalendar\n  langs:\n  - csharp\n  name: IsLeapYear(Int32, Int32)\n  nameWithType: TaiwanCalendar.IsLeapYear(Int32, Int32)\n  fullName: TaiwanCalendar.IsLeapYear(Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Globalization.Calendars\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Determines whether the specified year in the specified era is a leap year.\n  remarks: Leap years in the Taiwan calendar correspond to the same leap years in the Gregorian calendar. A leap year in the Gregorian calendar is defined as a Gregorian year that is evenly divisible by four, except if it is divisible by 100. However, Gregorian years that are divisible by 400 are leap years. A common year has 365 days and a leap year has 366 days.\n  example:\n  - \"The following example calls <xref:System.Globalization.TaiwanCalendar.IsLeapYear%2A> for five years in each of the eras.  \\n  \\n [!code-cpp[System.Globalization.TaiwanCalendar.IsLeapYear#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.TaiwanCalendar.IsLeapYear/CPP/taiwancalendar_isleapyear.cpp#1)]\\n [!code-csharp[System.Globalization.TaiwanCalendar.IsLeapYear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.TaiwanCalendar.IsLeapYear/CS/taiwancalendar_isleapyear.cs#1)]\\n [!code-vb[System.Globalization.TaiwanCalendar.IsLeapYear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.TaiwanCalendar.IsLeapYear/VB/taiwancalendar_isleapyear.vb#1)]\"\n  syntax:\n    content: public override bool IsLeapYear (int year, int era);\n    parameters:\n    - id: year\n      type: System.Int32\n      description: An integer that represents the year.\n    - id: era\n      type: System.Int32\n      description: An integer that represents the era.\n    return:\n      type: System.Boolean\n      description: '`true` if the specified year is a leap year; otherwise, `false`.'\n  overload: System.Globalization.TaiwanCalendar.IsLeapYear*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>year</code> is outside the range supported by the calendar.  \\n  \\n -or-  \\n  \\n <code>era</code> is outside the range supported by the calendar.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/TaiwanCalendar.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.TaiwanCalendar.MaxSupportedDateTime\n  commentId: P:System.Globalization.TaiwanCalendar.MaxSupportedDateTime\n  id: MaxSupportedDateTime\n  parent: System.Globalization.TaiwanCalendar\n  langs:\n  - csharp\n  name: MaxSupportedDateTime\n  nameWithType: TaiwanCalendar.MaxSupportedDateTime\n  fullName: TaiwanCalendar.MaxSupportedDateTime\n  type: Property\n  assemblies:\n  - System.Globalization.Calendars\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Gets the latest date and time supported by the <xref href=\"System.Globalization.TaiwanCalendar\"></xref> class.\n  remarks: ''\n  example:\n  - \"The following code example gets the minimum value and the maximum value of the calendar.  \\n  \\n [!code-cpp[System.Globalization.TaiwanCalendar_MinMax#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.TaiwanCalendar_MinMax/CPP/taiwancalendar_minmax.cpp#1)]\\n [!code-csharp[System.Globalization.TaiwanCalendar_MinMax#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.TaiwanCalendar_MinMax/CS/taiwancalendar_minmax.cs#1)]\\n [!code-vb[System.Globalization.TaiwanCalendar_MinMax#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.TaiwanCalendar_MinMax/VB/taiwancalendar_minmax.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public override DateTime MaxSupportedDateTime { get; }\n    return:\n      type: System.DateTime\n      description: The latest date and time supported by the <xref href=\"System.Globalization.TaiwanCalendar\"></xref> class, which is equivalent to the last moment of December 31, 9999 C.E. in the Gregorian calendar.\n  overload: System.Globalization.TaiwanCalendar.MaxSupportedDateTime*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/TaiwanCalendar.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.TaiwanCalendar.MinSupportedDateTime\n  commentId: P:System.Globalization.TaiwanCalendar.MinSupportedDateTime\n  id: MinSupportedDateTime\n  parent: System.Globalization.TaiwanCalendar\n  langs:\n  - csharp\n  name: MinSupportedDateTime\n  nameWithType: TaiwanCalendar.MinSupportedDateTime\n  fullName: TaiwanCalendar.MinSupportedDateTime\n  type: Property\n  assemblies:\n  - System.Globalization.Calendars\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Gets the earliest date and time supported by the <xref href=\"System.Globalization.TaiwanCalendar\"></xref> class.\n  remarks: Microsoft Visual Basic represents time of day as the specified time on the minimum date supported by <xref:System.DateTime>, which is January 1, 0001 C.E. However, the <xref:System.Globalization.TaiwanCalendar> class does not support that minimum date. Consequently, if your application calls a method to format the time of day using the current calendar but does not specify a format specifier, formatting uses the ISO 8601 sortable (\"s\") date/time pattern format specifier instead of the default general (\"G\") date/time pattern format specifier. For more information, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md).\n  example:\n  - \"The following code example gets the minimum value and the maximum value of the calendar.  \\n  \\n [!code-cpp[System.Globalization.TaiwanCalendar_MinMax#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.TaiwanCalendar_MinMax/CPP/taiwancalendar_minmax.cpp#1)]\\n [!code-csharp[System.Globalization.TaiwanCalendar_MinMax#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.TaiwanCalendar_MinMax/CS/taiwancalendar_minmax.cs#1)]\\n [!code-vb[System.Globalization.TaiwanCalendar_MinMax#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.TaiwanCalendar_MinMax/VB/taiwancalendar_minmax.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public override DateTime MinSupportedDateTime { get; }\n    return:\n      type: System.DateTime\n      description: The earliest date and time supported by the <xref href=\"System.Globalization.TaiwanCalendar\"></xref> class, which is equivalent to the first moment of January 1, 1912 C.E. in the Gregorian calendar.\n  overload: System.Globalization.TaiwanCalendar.MinSupportedDateTime*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/TaiwanCalendar.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.TaiwanCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  commentId: M:System.Globalization.TaiwanCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  id: ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.TaiwanCalendar\n  langs:\n  - csharp\n  name: ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)\n  nameWithType: TaiwanCalendar.ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)\n  fullName: TaiwanCalendar.ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Globalization.Calendars\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Returns a <xref href=\"System.DateTime\"></xref> that is set to the specified date and time in the specified era.\n  syntax:\n    content: public override DateTime ToDateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, int era);\n    parameters:\n    - id: year\n      type: System.Int32\n      description: An integer that represents the year.\n    - id: month\n      type: System.Int32\n      description: An integer from 1 to 12 that represents the month.\n    - id: day\n      type: System.Int32\n      description: An integer from 1 to 31 that represents the day.\n    - id: hour\n      type: System.Int32\n      description: An integer from 0 to 23 that represents the hour.\n    - id: minute\n      type: System.Int32\n      description: An integer from 0 to 59 that represents the minute.\n    - id: second\n      type: System.Int32\n      description: An integer from 0 to 59 that represents the second.\n    - id: millisecond\n      type: System.Int32\n      description: An integer from 0 to 999 that represents the millisecond.\n    - id: era\n      type: System.Int32\n      description: An integer that represents the era.\n    return:\n      type: System.DateTime\n      description: The <xref href=\"System.DateTime\"></xref> that is set to the specified date and time in the current era.\n  overload: System.Globalization.TaiwanCalendar.ToDateTime*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>year</code> is outside the range supported by the calendar.  \\n  \\n -or-  \\n  \\n <code>month</code> is outside the range supported by the calendar.  \\n  \\n -or-  \\n  \\n <code>day</code> is outside the range supported by the calendar.  \\n  \\n -or-  \\n  \\n <code>hour</code> is less than zero or greater than 23.  \\n  \\n -or-  \\n  \\n <code>minute</code> is less than zero or greater than 59.  \\n  \\n -or-  \\n  \\n <code>second</code> is less than zero or greater than 59.  \\n  \\n -or-  \\n  \\n <code>millisecond</code> is less than zero or greater than 999.  \\n  \\n -or-  \\n  \\n <code>era</code> is outside the range supported by the calendar.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/TaiwanCalendar.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.TaiwanCalendar.ToFourDigitYear(System.Int32)\n  commentId: M:System.Globalization.TaiwanCalendar.ToFourDigitYear(System.Int32)\n  id: ToFourDigitYear(System.Int32)\n  parent: System.Globalization.TaiwanCalendar\n  langs:\n  - csharp\n  name: ToFourDigitYear(Int32)\n  nameWithType: TaiwanCalendar.ToFourDigitYear(Int32)\n  fullName: TaiwanCalendar.ToFourDigitYear(Int32)\n  type: Method\n  assemblies:\n  - System.Globalization.Calendars\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Converts the specified year to a four-digit year by using the <xref href=\"System.Globalization.TaiwanCalendar.TwoDigitYearMax\"></xref> property to determine the appropriate century.\n  remarks: \"This method implements <xref:System.Globalization.Calendar.ToFourDigitYear%2A?displayProperty=fullName>.  \\n  \\n Because the year in the Taiwan calendar is typically less than four digits long, this implementation always returns the value of the `year` parameter.  \\n  \\n <xref:System.Globalization.TaiwanCalendar.ToFourDigitYear%2A> supports either a two-digit year or a four-digit year. Passing a two-digit year value (less than 100) causes the method to convert the value to a four-digit value according to the <xref:System.Globalization.TaiwanCalendar.TwoDigitYearMax%2A> value representing the appropriate century. If the application supplies a four-digit year value that is within the supported calendar range to <xref:System.Globalization.TaiwanCalendar.ToFourDigitYear%2A>, the method returns the actual input value. If the application supplies a four-digit value that is outside the supported calendar range, or if it supplies a negative value, the method throws an exception.\"\n  syntax:\n    content: public override int ToFourDigitYear (int year);\n    parameters:\n    - id: year\n      type: System.Int32\n      description: A two-digit or four-digit integer that represents the year to convert.\n    return:\n      type: System.Int32\n      description: An integer that contains the four-digit representation of <code>year</code>.\n  overload: System.Globalization.TaiwanCalendar.ToFourDigitYear*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>year</code> is outside the range supported by the calendar.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/TaiwanCalendar.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.TaiwanCalendar.TwoDigitYearMax\n  commentId: P:System.Globalization.TaiwanCalendar.TwoDigitYearMax\n  id: TwoDigitYearMax\n  parent: System.Globalization.TaiwanCalendar\n  langs:\n  - csharp\n  name: TwoDigitYearMax\n  nameWithType: TaiwanCalendar.TwoDigitYearMax\n  fullName: TaiwanCalendar.TwoDigitYearMax\n  type: Property\n  assemblies:\n  - System.Globalization.Calendars\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.\n  remarks: \"This property implements <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=fullName>.  \\n  \\n Because the year in the Taiwan calendar is typically less than four digits long, this implementation returns 99 by default and does not affect the return value of <xref:System.Globalization.TaiwanCalendar.ToFourDigitYear%2A>.\"\n  syntax:\n    content: public override int TwoDigitYearMax { get; set; }\n    return:\n      type: System.Int32\n      description: The last year of a 100-year range that can be represented by a 2-digit year.\n  overload: System.Globalization.TaiwanCalendar.TwoDigitYearMax*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"The value specified in a set operation is less than 99.  \\n  \\n -or-  \\n  \\n The value specified in a set operation is greater than `MaxSupportedDateTime.Year`.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: In a set operation, the current instance is read-only.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/TaiwanCalendar.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Globalization.Calendar\n  parent: System.Globalization\n  isExternal: false\n  name: Calendar\n  nameWithType: Calendar\n  fullName: System.Globalization.Calendar\n- uid: System.TypeInitializationException\n  parent: System\n  isExternal: false\n  name: TypeInitializationException\n  nameWithType: TypeInitializationException\n  fullName: System.TypeInitializationException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.Globalization.TaiwanCalendar.#ctor\n  parent: System.Globalization.TaiwanCalendar\n  isExternal: false\n  name: TaiwanCalendar()\n  nameWithType: TaiwanCalendar.TaiwanCalendar()\n  fullName: TaiwanCalendar.TaiwanCalendar()\n- uid: System.Globalization.TaiwanCalendar.AddMonths(System.DateTime,System.Int32)\n  parent: System.Globalization.TaiwanCalendar\n  isExternal: false\n  name: AddMonths(DateTime, Int32)\n  nameWithType: TaiwanCalendar.AddMonths(DateTime, Int32)\n  fullName: TaiwanCalendar.AddMonths(DateTime, Int32)\n- uid: System.DateTime\n  parent: System\n  isExternal: false\n  name: DateTime\n  nameWithType: DateTime\n  fullName: System.DateTime\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Globalization.TaiwanCalendar.AddYears(System.DateTime,System.Int32)\n  parent: System.Globalization.TaiwanCalendar\n  isExternal: false\n  name: AddYears(DateTime, Int32)\n  nameWithType: TaiwanCalendar.AddYears(DateTime, Int32)\n  fullName: TaiwanCalendar.AddYears(DateTime, Int32)\n- uid: System.Globalization.TaiwanCalendar.AlgorithmType\n  parent: System.Globalization.TaiwanCalendar\n  isExternal: false\n  name: AlgorithmType\n  nameWithType: TaiwanCalendar.AlgorithmType\n  fullName: TaiwanCalendar.AlgorithmType\n- uid: System.Globalization.CalendarAlgorithmType\n  parent: System.Globalization\n  isExternal: false\n  name: CalendarAlgorithmType\n  nameWithType: CalendarAlgorithmType\n  fullName: System.Globalization.CalendarAlgorithmType\n- uid: System.Globalization.TaiwanCalendar.Eras\n  parent: System.Globalization.TaiwanCalendar\n  isExternal: false\n  name: Eras\n  nameWithType: TaiwanCalendar.Eras\n  fullName: TaiwanCalendar.Eras\n- uid: System.Int32[]\n  parent: System\n  isExternal: false\n  name: Int32[]\n  nameWithType: Int32[]\n  fullName: System.Int32[]\n  spec.csharp:\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Globalization.TaiwanCalendar.GetDayOfMonth(System.DateTime)\n  parent: System.Globalization.TaiwanCalendar\n  isExternal: false\n  name: GetDayOfMonth(DateTime)\n  nameWithType: TaiwanCalendar.GetDayOfMonth(DateTime)\n  fullName: TaiwanCalendar.GetDayOfMonth(DateTime)\n- uid: System.Globalization.TaiwanCalendar.GetDayOfWeek(System.DateTime)\n  parent: System.Globalization.TaiwanCalendar\n  isExternal: false\n  name: GetDayOfWeek(DateTime)\n  nameWithType: TaiwanCalendar.GetDayOfWeek(DateTime)\n  fullName: TaiwanCalendar.GetDayOfWeek(DateTime)\n- uid: System.DayOfWeek\n  parent: System\n  isExternal: false\n  name: DayOfWeek\n  nameWithType: DayOfWeek\n  fullName: System.DayOfWeek\n- uid: System.Globalization.TaiwanCalendar.GetDayOfYear(System.DateTime)\n  parent: System.Globalization.TaiwanCalendar\n  isExternal: false\n  name: GetDayOfYear(DateTime)\n  nameWithType: TaiwanCalendar.GetDayOfYear(DateTime)\n  fullName: TaiwanCalendar.GetDayOfYear(DateTime)\n- uid: System.Globalization.TaiwanCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.TaiwanCalendar\n  isExternal: false\n  name: GetDaysInMonth(Int32, Int32, Int32)\n  nameWithType: TaiwanCalendar.GetDaysInMonth(Int32, Int32, Int32)\n  fullName: TaiwanCalendar.GetDaysInMonth(Int32, Int32, Int32)\n- uid: System.Globalization.TaiwanCalendar.GetDaysInYear(System.Int32,System.Int32)\n  parent: System.Globalization.TaiwanCalendar\n  isExternal: false\n  name: GetDaysInYear(Int32, Int32)\n  nameWithType: TaiwanCalendar.GetDaysInYear(Int32, Int32)\n  fullName: TaiwanCalendar.GetDaysInYear(Int32, Int32)\n- uid: System.Globalization.TaiwanCalendar.GetEra(System.DateTime)\n  parent: System.Globalization.TaiwanCalendar\n  isExternal: false\n  name: GetEra(DateTime)\n  nameWithType: TaiwanCalendar.GetEra(DateTime)\n  fullName: TaiwanCalendar.GetEra(DateTime)\n- uid: System.Globalization.TaiwanCalendar.GetLeapMonth(System.Int32,System.Int32)\n  parent: System.Globalization.TaiwanCalendar\n  isExternal: false\n  name: GetLeapMonth(Int32, Int32)\n  nameWithType: TaiwanCalendar.GetLeapMonth(Int32, Int32)\n  fullName: TaiwanCalendar.GetLeapMonth(Int32, Int32)\n- uid: System.Globalization.TaiwanCalendar.GetMonth(System.DateTime)\n  parent: System.Globalization.TaiwanCalendar\n  isExternal: false\n  name: GetMonth(DateTime)\n  nameWithType: TaiwanCalendar.GetMonth(DateTime)\n  fullName: TaiwanCalendar.GetMonth(DateTime)\n- uid: System.Globalization.TaiwanCalendar.GetMonthsInYear(System.Int32,System.Int32)\n  parent: System.Globalization.TaiwanCalendar\n  isExternal: false\n  name: GetMonthsInYear(Int32, Int32)\n  nameWithType: TaiwanCalendar.GetMonthsInYear(Int32, Int32)\n  fullName: TaiwanCalendar.GetMonthsInYear(Int32, Int32)\n- uid: System.Globalization.TaiwanCalendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n  parent: System.Globalization.TaiwanCalendar\n  isExternal: false\n  name: GetWeekOfYear(DateTime, CalendarWeekRule, DayOfWeek)\n  nameWithType: TaiwanCalendar.GetWeekOfYear(DateTime, CalendarWeekRule, DayOfWeek)\n  fullName: TaiwanCalendar.GetWeekOfYear(DateTime, CalendarWeekRule, DayOfWeek)\n- uid: System.Globalization.CalendarWeekRule\n  parent: System.Globalization\n  isExternal: false\n  name: CalendarWeekRule\n  nameWithType: CalendarWeekRule\n  fullName: System.Globalization.CalendarWeekRule\n- uid: System.Globalization.TaiwanCalendar.GetYear(System.DateTime)\n  parent: System.Globalization.TaiwanCalendar\n  isExternal: false\n  name: GetYear(DateTime)\n  nameWithType: TaiwanCalendar.GetYear(DateTime)\n  fullName: TaiwanCalendar.GetYear(DateTime)\n- uid: System.Globalization.TaiwanCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.TaiwanCalendar\n  isExternal: false\n  name: IsLeapDay(Int32, Int32, Int32, Int32)\n  nameWithType: TaiwanCalendar.IsLeapDay(Int32, Int32, Int32, Int32)\n  fullName: TaiwanCalendar.IsLeapDay(Int32, Int32, Int32, Int32)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Globalization.TaiwanCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.TaiwanCalendar\n  isExternal: false\n  name: IsLeapMonth(Int32, Int32, Int32)\n  nameWithType: TaiwanCalendar.IsLeapMonth(Int32, Int32, Int32)\n  fullName: TaiwanCalendar.IsLeapMonth(Int32, Int32, Int32)\n- uid: System.Globalization.TaiwanCalendar.IsLeapYear(System.Int32,System.Int32)\n  parent: System.Globalization.TaiwanCalendar\n  isExternal: false\n  name: IsLeapYear(Int32, Int32)\n  nameWithType: TaiwanCalendar.IsLeapYear(Int32, Int32)\n  fullName: TaiwanCalendar.IsLeapYear(Int32, Int32)\n- uid: System.Globalization.TaiwanCalendar.MaxSupportedDateTime\n  parent: System.Globalization.TaiwanCalendar\n  isExternal: false\n  name: MaxSupportedDateTime\n  nameWithType: TaiwanCalendar.MaxSupportedDateTime\n  fullName: TaiwanCalendar.MaxSupportedDateTime\n- uid: System.Globalization.TaiwanCalendar.MinSupportedDateTime\n  parent: System.Globalization.TaiwanCalendar\n  isExternal: false\n  name: MinSupportedDateTime\n  nameWithType: TaiwanCalendar.MinSupportedDateTime\n  fullName: TaiwanCalendar.MinSupportedDateTime\n- uid: System.Globalization.TaiwanCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.TaiwanCalendar\n  isExternal: false\n  name: ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)\n  nameWithType: TaiwanCalendar.ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)\n  fullName: TaiwanCalendar.ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)\n- uid: System.Globalization.TaiwanCalendar.ToFourDigitYear(System.Int32)\n  parent: System.Globalization.TaiwanCalendar\n  isExternal: false\n  name: ToFourDigitYear(Int32)\n  nameWithType: TaiwanCalendar.ToFourDigitYear(Int32)\n  fullName: TaiwanCalendar.ToFourDigitYear(Int32)\n- uid: System.Globalization.TaiwanCalendar.TwoDigitYearMax\n  parent: System.Globalization.TaiwanCalendar\n  isExternal: false\n  name: TwoDigitYearMax\n  nameWithType: TaiwanCalendar.TwoDigitYearMax\n  fullName: TaiwanCalendar.TwoDigitYearMax\n- uid: System.Globalization.TaiwanCalendar.#ctor*\n  parent: System.Globalization.TaiwanCalendar\n  isExternal: false\n  name: TaiwanCalendar\n  nameWithType: TaiwanCalendar.TaiwanCalendar\n  fullName: TaiwanCalendar.TaiwanCalendar\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/TaiwanCalendar.xml\n- uid: System.Globalization.TaiwanCalendar.AddMonths*\n  parent: System.Globalization.TaiwanCalendar\n  isExternal: false\n  name: AddMonths\n  nameWithType: TaiwanCalendar.AddMonths\n  fullName: TaiwanCalendar.AddMonths\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/TaiwanCalendar.xml\n- uid: System.Globalization.TaiwanCalendar.AddYears*\n  parent: System.Globalization.TaiwanCalendar\n  isExternal: false\n  name: AddYears\n  nameWithType: TaiwanCalendar.AddYears\n  fullName: TaiwanCalendar.AddYears\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/TaiwanCalendar.xml\n- uid: System.Globalization.TaiwanCalendar.AlgorithmType*\n  parent: System.Globalization.TaiwanCalendar\n  isExternal: false\n  name: AlgorithmType\n  nameWithType: TaiwanCalendar.AlgorithmType\n  fullName: TaiwanCalendar.AlgorithmType\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/TaiwanCalendar.xml\n- uid: System.Globalization.TaiwanCalendar.Eras*\n  parent: System.Globalization.TaiwanCalendar\n  isExternal: false\n  name: Eras\n  nameWithType: TaiwanCalendar.Eras\n  fullName: TaiwanCalendar.Eras\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/TaiwanCalendar.xml\n- uid: System.Globalization.TaiwanCalendar.GetDayOfMonth*\n  parent: System.Globalization.TaiwanCalendar\n  isExternal: false\n  name: GetDayOfMonth\n  nameWithType: TaiwanCalendar.GetDayOfMonth\n  fullName: TaiwanCalendar.GetDayOfMonth\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/TaiwanCalendar.xml\n- uid: System.Globalization.TaiwanCalendar.GetDayOfWeek*\n  parent: System.Globalization.TaiwanCalendar\n  isExternal: false\n  name: GetDayOfWeek\n  nameWithType: TaiwanCalendar.GetDayOfWeek\n  fullName: TaiwanCalendar.GetDayOfWeek\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/TaiwanCalendar.xml\n- uid: System.Globalization.TaiwanCalendar.GetDayOfYear*\n  parent: System.Globalization.TaiwanCalendar\n  isExternal: false\n  name: GetDayOfYear\n  nameWithType: TaiwanCalendar.GetDayOfYear\n  fullName: TaiwanCalendar.GetDayOfYear\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/TaiwanCalendar.xml\n- uid: System.Globalization.TaiwanCalendar.GetDaysInMonth*\n  parent: System.Globalization.TaiwanCalendar\n  isExternal: false\n  name: GetDaysInMonth\n  nameWithType: TaiwanCalendar.GetDaysInMonth\n  fullName: TaiwanCalendar.GetDaysInMonth\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/TaiwanCalendar.xml\n- uid: System.Globalization.TaiwanCalendar.GetDaysInYear*\n  parent: System.Globalization.TaiwanCalendar\n  isExternal: false\n  name: GetDaysInYear\n  nameWithType: TaiwanCalendar.GetDaysInYear\n  fullName: TaiwanCalendar.GetDaysInYear\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/TaiwanCalendar.xml\n- uid: System.Globalization.TaiwanCalendar.GetEra*\n  parent: System.Globalization.TaiwanCalendar\n  isExternal: false\n  name: GetEra\n  nameWithType: TaiwanCalendar.GetEra\n  fullName: TaiwanCalendar.GetEra\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/TaiwanCalendar.xml\n- uid: System.Globalization.TaiwanCalendar.GetLeapMonth*\n  parent: System.Globalization.TaiwanCalendar\n  isExternal: false\n  name: GetLeapMonth\n  nameWithType: TaiwanCalendar.GetLeapMonth\n  fullName: TaiwanCalendar.GetLeapMonth\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/TaiwanCalendar.xml\n- uid: System.Globalization.TaiwanCalendar.GetMonth*\n  parent: System.Globalization.TaiwanCalendar\n  isExternal: false\n  name: GetMonth\n  nameWithType: TaiwanCalendar.GetMonth\n  fullName: TaiwanCalendar.GetMonth\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/TaiwanCalendar.xml\n- uid: System.Globalization.TaiwanCalendar.GetMonthsInYear*\n  parent: System.Globalization.TaiwanCalendar\n  isExternal: false\n  name: GetMonthsInYear\n  nameWithType: TaiwanCalendar.GetMonthsInYear\n  fullName: TaiwanCalendar.GetMonthsInYear\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/TaiwanCalendar.xml\n- uid: System.Globalization.TaiwanCalendar.GetWeekOfYear*\n  parent: System.Globalization.TaiwanCalendar\n  isExternal: false\n  name: GetWeekOfYear\n  nameWithType: TaiwanCalendar.GetWeekOfYear\n  fullName: TaiwanCalendar.GetWeekOfYear\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/TaiwanCalendar.xml\n- uid: System.Globalization.TaiwanCalendar.GetYear*\n  parent: System.Globalization.TaiwanCalendar\n  isExternal: false\n  name: GetYear\n  nameWithType: TaiwanCalendar.GetYear\n  fullName: TaiwanCalendar.GetYear\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/TaiwanCalendar.xml\n- uid: System.Globalization.TaiwanCalendar.IsLeapDay*\n  parent: System.Globalization.TaiwanCalendar\n  isExternal: false\n  name: IsLeapDay\n  nameWithType: TaiwanCalendar.IsLeapDay\n  fullName: TaiwanCalendar.IsLeapDay\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/TaiwanCalendar.xml\n- uid: System.Globalization.TaiwanCalendar.IsLeapMonth*\n  parent: System.Globalization.TaiwanCalendar\n  isExternal: false\n  name: IsLeapMonth\n  nameWithType: TaiwanCalendar.IsLeapMonth\n  fullName: TaiwanCalendar.IsLeapMonth\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/TaiwanCalendar.xml\n- uid: System.Globalization.TaiwanCalendar.IsLeapYear*\n  parent: System.Globalization.TaiwanCalendar\n  isExternal: false\n  name: IsLeapYear\n  nameWithType: TaiwanCalendar.IsLeapYear\n  fullName: TaiwanCalendar.IsLeapYear\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/TaiwanCalendar.xml\n- uid: System.Globalization.TaiwanCalendar.MaxSupportedDateTime*\n  parent: System.Globalization.TaiwanCalendar\n  isExternal: false\n  name: MaxSupportedDateTime\n  nameWithType: TaiwanCalendar.MaxSupportedDateTime\n  fullName: TaiwanCalendar.MaxSupportedDateTime\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/TaiwanCalendar.xml\n- uid: System.Globalization.TaiwanCalendar.MinSupportedDateTime*\n  parent: System.Globalization.TaiwanCalendar\n  isExternal: false\n  name: MinSupportedDateTime\n  nameWithType: TaiwanCalendar.MinSupportedDateTime\n  fullName: TaiwanCalendar.MinSupportedDateTime\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/TaiwanCalendar.xml\n- uid: System.Globalization.TaiwanCalendar.ToDateTime*\n  parent: System.Globalization.TaiwanCalendar\n  isExternal: false\n  name: ToDateTime\n  nameWithType: TaiwanCalendar.ToDateTime\n  fullName: TaiwanCalendar.ToDateTime\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/TaiwanCalendar.xml\n- uid: System.Globalization.TaiwanCalendar.ToFourDigitYear*\n  parent: System.Globalization.TaiwanCalendar\n  isExternal: false\n  name: ToFourDigitYear\n  nameWithType: TaiwanCalendar.ToFourDigitYear\n  fullName: TaiwanCalendar.ToFourDigitYear\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/TaiwanCalendar.xml\n- uid: System.Globalization.TaiwanCalendar.TwoDigitYearMax*\n  parent: System.Globalization.TaiwanCalendar\n  isExternal: false\n  name: TwoDigitYearMax\n  nameWithType: TaiwanCalendar.TwoDigitYearMax\n  fullName: TaiwanCalendar.TwoDigitYearMax\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/TaiwanCalendar.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: false\n  name: AddDays(DateTime, Int32)\n  nameWithType: Calendar.AddDays(DateTime, Int32)\n  fullName: Calendar.AddDays(DateTime, Int32)\n- uid: System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: false\n  name: AddHours(DateTime, Int32)\n  nameWithType: Calendar.AddHours(DateTime, Int32)\n  fullName: Calendar.AddHours(DateTime, Int32)\n- uid: System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)\n  parent: System.Globalization.Calendar\n  isExternal: false\n  name: AddMilliseconds(DateTime, Double)\n  nameWithType: Calendar.AddMilliseconds(DateTime, Double)\n  fullName: Calendar.AddMilliseconds(DateTime, Double)\n- uid: System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: false\n  name: AddMinutes(DateTime, Int32)\n  nameWithType: Calendar.AddMinutes(DateTime, Int32)\n  fullName: Calendar.AddMinutes(DateTime, Int32)\n- uid: System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: false\n  name: AddSeconds(DateTime, Int32)\n  nameWithType: Calendar.AddSeconds(DateTime, Int32)\n  fullName: Calendar.AddSeconds(DateTime, Int32)\n- uid: System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: false\n  name: AddWeeks(DateTime, Int32)\n  nameWithType: Calendar.AddWeeks(DateTime, Int32)\n  fullName: Calendar.AddWeeks(DateTime, Int32)\n- uid: System.Globalization.Calendar.Clone\n  parent: System.Globalization.Calendar\n  isExternal: false\n  name: Clone()\n  nameWithType: Calendar.Clone()\n  fullName: Calendar.Clone()\n- uid: System.Globalization.Calendar.CurrentEra\n  parent: System.Globalization.Calendar\n  isExternal: false\n  name: CurrentEra\n  nameWithType: Calendar.CurrentEra\n  fullName: Calendar.CurrentEra\n- uid: System.Globalization.Calendar.DaysInYearBeforeMinSupportedYear\n  parent: System.Globalization.Calendar\n  isExternal: false\n  name: DaysInYearBeforeMinSupportedYear\n  nameWithType: Calendar.DaysInYearBeforeMinSupportedYear\n  fullName: Calendar.DaysInYearBeforeMinSupportedYear\n- uid: System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: false\n  name: GetDaysInMonth(Int32, Int32)\n  nameWithType: Calendar.GetDaysInMonth(Int32, Int32)\n  fullName: Calendar.GetDaysInMonth(Int32, Int32)\n- uid: System.Globalization.Calendar.GetDaysInYear(System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: false\n  name: GetDaysInYear(Int32)\n  nameWithType: Calendar.GetDaysInYear(Int32)\n  fullName: Calendar.GetDaysInYear(Int32)\n- uid: System.Globalization.Calendar.GetHour(System.DateTime)\n  parent: System.Globalization.Calendar\n  isExternal: false\n  name: GetHour(DateTime)\n  nameWithType: Calendar.GetHour(DateTime)\n  fullName: Calendar.GetHour(DateTime)\n- uid: System.Globalization.Calendar.GetLeapMonth(System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: false\n  name: GetLeapMonth(Int32)\n  nameWithType: Calendar.GetLeapMonth(Int32)\n  fullName: Calendar.GetLeapMonth(Int32)\n- uid: System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n  parent: System.Globalization.Calendar\n  isExternal: false\n  name: GetMilliseconds(DateTime)\n  nameWithType: Calendar.GetMilliseconds(DateTime)\n  fullName: Calendar.GetMilliseconds(DateTime)\n- uid: System.Globalization.Calendar.GetMinute(System.DateTime)\n  parent: System.Globalization.Calendar\n  isExternal: false\n  name: GetMinute(DateTime)\n  nameWithType: Calendar.GetMinute(DateTime)\n  fullName: Calendar.GetMinute(DateTime)\n- uid: System.Globalization.Calendar.GetMonthsInYear(System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: false\n  name: GetMonthsInYear(Int32)\n  nameWithType: Calendar.GetMonthsInYear(Int32)\n  fullName: Calendar.GetMonthsInYear(Int32)\n- uid: System.Globalization.Calendar.GetSecond(System.DateTime)\n  parent: System.Globalization.Calendar\n  isExternal: false\n  name: GetSecond(DateTime)\n  nameWithType: Calendar.GetSecond(DateTime)\n  fullName: Calendar.GetSecond(DateTime)\n- uid: System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: false\n  name: IsLeapDay(Int32, Int32, Int32)\n  nameWithType: Calendar.IsLeapDay(Int32, Int32, Int32)\n  fullName: Calendar.IsLeapDay(Int32, Int32, Int32)\n- uid: System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: false\n  name: IsLeapMonth(Int32, Int32)\n  nameWithType: Calendar.IsLeapMonth(Int32, Int32)\n  fullName: Calendar.IsLeapMonth(Int32, Int32)\n- uid: System.Globalization.Calendar.IsLeapYear(System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: false\n  name: IsLeapYear(Int32)\n  nameWithType: Calendar.IsLeapYear(Int32)\n  fullName: Calendar.IsLeapYear(Int32)\n- uid: System.Globalization.Calendar.IsReadOnly\n  parent: System.Globalization.Calendar\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: Calendar.IsReadOnly\n  fullName: Calendar.IsReadOnly\n- uid: System.Globalization.Calendar.ReadOnly(System.Globalization.Calendar)\n  parent: System.Globalization.Calendar\n  isExternal: false\n  name: ReadOnly(Calendar)\n  nameWithType: Calendar.ReadOnly(Calendar)\n  fullName: Calendar.ReadOnly(Calendar)\n- uid: System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: false\n  name: ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32)\n  nameWithType: Calendar.ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32)\n  fullName: Calendar.ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32)\n"}