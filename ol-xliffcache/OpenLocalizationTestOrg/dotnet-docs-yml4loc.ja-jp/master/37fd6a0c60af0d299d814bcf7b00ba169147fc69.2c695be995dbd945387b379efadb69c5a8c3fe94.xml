{"nodes":[{"content":"Defines the security configuration settings for message sent using HTTP.","nodes":[{"pos":[0,72],"content":"Defines the security configuration settings for message sent using HTTP.","nodes":[{"content":"Defines the security configuration settings for message sent using HTTP.","pos":[0,72]}]}],"pos":[880,953],"yaml":true},{"content":"Gets or sets the message encryption and key-wrap algorithms used to secure an HTTP message.","nodes":[{"pos":[0,91],"content":"Gets or sets the message encryption and key-wrap algorithms used to secure an HTTP message.","nodes":[{"content":"Gets or sets the message encryption and key-wrap algorithms used to secure an HTTP message.","pos":[0,91]}]}],"pos":[5513,5605],"yaml":true},{"content":"A valid <xref href=\"System.ServiceModel.Security.SecurityAlgorithmSuite\"></xref> value that specifies the message encryption and key-wrap algorithms used to secure an HTTP message. The default value is <xref href=\"System.ServiceModel.Security.SecurityAlgorithmSuite.Basic256\"></xref>.","nodes":[{"pos":[0,284],"content":"A valid <xref href=\"System.ServiceModel.Security.SecurityAlgorithmSuite\"></xref> value that specifies the message encryption and key-wrap algorithms used to secure an HTTP message. The default value is <xref href=\"System.ServiceModel.Security.SecurityAlgorithmSuite.Basic256\"></xref>.","nodes":[{"content":"A valid <ph id=\"ph1\">&lt;xref href=\"System.ServiceModel.Security.SecurityAlgorithmSuite\"&gt;&lt;/xref&gt;</ph> value that specifies the message encryption and key-wrap algorithms used to secure an HTTP message.","pos":[0,180],"source":"A valid <xref href=\"System.ServiceModel.Security.SecurityAlgorithmSuite\"></xref> value that specifies the message encryption and key-wrap algorithms used to secure an HTTP message."},{"content":"The default value is <ph id=\"ph1\">&lt;xref href=\"System.ServiceModel.Security.SecurityAlgorithmSuite.Basic256\"&gt;&lt;/xref&gt;</ph>.","pos":[181,284],"source":" The default value is <xref href=\"System.ServiceModel.Security.SecurityAlgorithmSuite.Basic256\"></xref>."}]}],"pos":[6059,6344],"yaml":true},{"content":"Specifies the type of credential to be used when performing client authentication using message-based security or `TransportWithMessageCredential`.","nodes":[{"pos":[0,147],"content":"Specifies the type of credential to be used when performing client authentication using message-based security or <ph id=\"ph1\">`TransportWithMessageCredential`</ph>.","source":"Specifies the type of credential to be used when performing client authentication using message-based security or `TransportWithMessageCredential`."}],"pos":[7735,7883],"yaml":true},{"content":"A valid <xref href=\"System.ServiceModel.MessageCredentialType\"></xref> value that specifies the type of credential to be used when performing client authentication using message-based security or `TransportWithMessageCredential`. The default value is <xref href=\"System.ServiceModel.MessageCredentialType.Windows\"></xref>.","nodes":[{"pos":[0,322],"content":"A valid <xref href=\"System.ServiceModel.MessageCredentialType\"></xref> value that specifies the type of credential to be used when performing client authentication using message-based security or `TransportWithMessageCredential`. The default value is <xref href=\"System.ServiceModel.MessageCredentialType.Windows\"></xref>.","nodes":[{"content":"A valid <ph id=\"ph1\">&lt;xref href=\"System.ServiceModel.MessageCredentialType\"&gt;&lt;/xref&gt;</ph> value that specifies the type of credential to be used when performing client authentication using message-based security or <ph id=\"ph2\">`TransportWithMessageCredential`</ph>.","pos":[0,229],"source":"A valid <xref href=\"System.ServiceModel.MessageCredentialType\"></xref> value that specifies the type of credential to be used when performing client authentication using message-based security or `TransportWithMessageCredential`."},{"content":"The default value is <ph id=\"ph1\">&lt;xref href=\"System.ServiceModel.MessageCredentialType.Windows\"&gt;&lt;/xref&gt;</ph>.","pos":[230,322],"source":" The default value is <xref href=\"System.ServiceModel.MessageCredentialType.Windows\"></xref>."}]}],"pos":[8209,8532],"yaml":true},{"content":"Gets or sets a Boolean value that specifies whether the service credential is provisioned at the client out-of-band, or is obtained from the service to the client through a process of negotiation.","nodes":[{"pos":[0,196],"content":"Gets or sets a Boolean value that specifies whether the service credential is provisioned at the client out-of-band, or is obtained from the service to the client through a process of negotiation.","nodes":[{"content":"Gets or sets a Boolean value that specifies whether the service credential is provisioned at the client out-of-band, or is obtained from the service to the client through a process of negotiation.","pos":[0,196]}]}],"pos":[9910,10107],"yaml":true},{"content":"This property specifies whether the service credential is provisioned at the client out-of-band or is obtained from the service to the client through a process of negotiation. Such a negotiation is a precursor to the usual message exchange.  \n  \n If the <xref:System.ServiceModel.MessageSecurityOverHttp.ClientCredentialType%2A> property is equal to Anonymous, <xref:System.ServiceModel.MessageCredentialType.UserName>, or <xref:System.ServiceModel.MessageCredentialType.Certificate>, setting this property to `false` implies that the service certificate is available at the client out-of-band, and that the client must specify the <xref:System.ServiceModel.Configuration.ServiceCredentialsElement.ServiceCertificate%2A> property of <xref:System.ServiceModel.Configuration.ServiceCredentialsElement> class. This mode is interoperable with SOAP stacks that implement WS-Trust and WS-SecureConversation.  \n  \n If the <xref:System.ServiceModel.MessageSecurityOverHttp.ClientCredentialType%2A> property is equal to <xref:System.ServiceModel.MessageCredentialType.Windows>, setting this property to `false` causes a Kerberos-based authentication. This requires that the client and service be part of a Kerberos domain. This mode is interoperable with SOAP stacks that implement the Kerberos token profile (as defined at OASIS WSS TC) as well as WS-Trust and WS-SecureConversation.  \n  \n When this property is `true`, it causes a .NET SOAP negotiation that tunnels SPNego exchange over SOAP messages.  \n  \n This property indicates whether the service credential is negotiated automatically between the client and the service. If this property is `true`, then such negotiation occurs. If this property is `false`, then the service credentials must be specified at the client before communication with the service can occur.  \n  \n If this property is set to `false`, and the binding is configured to use Windows as a client credential type, the service account must be associated with a Service Principal Name (SPN). To do this, run the service under the NETWORK SERVICE account, or LOCAL SYSTEM account. Alternatively, use the SetSpn.exe tool to create an SPN for the service account. In either case, the client must use the correct SPN in the [\\&lt;servicePrincipalName\\&gt;](~/docs/framework/configure-apps/file-schema/wcf/serviceprincipalname.md) element, or by using the <xref:System.ServiceModel.EndpointAddress> constructor. For more information, see [Service Identity and Authentication](~/docs/framework/wcf/feature-details/service-identity-and-authentication.md).","nodes":[{"pos":[0,240],"content":"This property specifies whether the service credential is provisioned at the client out-of-band or is obtained from the service to the client through a process of negotiation. Such a negotiation is a precursor to the usual message exchange.","nodes":[{"content":"This property specifies whether the service credential is provisioned at the client out-of-band or is obtained from the service to the client through a process of negotiation. Such a negotiation is a precursor to the usual message exchange.","pos":[0,240],"nodes":[{"content":"This property specifies whether the service credential is provisioned at the client out-of-band or is obtained from the service to the client through a process of negotiation.","pos":[0,175]},{"content":"Such a negotiation is a precursor to the usual message exchange.","pos":[176,240]}]}]},{"pos":[247,901],"content":"If the <xref:System.ServiceModel.MessageSecurityOverHttp.ClientCredentialType%2A> property is equal to Anonymous, <xref:System.ServiceModel.MessageCredentialType.UserName>, or <xref:System.ServiceModel.MessageCredentialType.Certificate>, setting this property to `false` implies that the service certificate is available at the client out-of-band, and that the client must specify the <xref:System.ServiceModel.Configuration.ServiceCredentialsElement.ServiceCertificate%2A> property of <xref:System.ServiceModel.Configuration.ServiceCredentialsElement> class. This mode is interoperable with SOAP stacks that implement WS-Trust and WS-SecureConversation.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.ServiceModel.MessageSecurityOverHttp.ClientCredentialType%2A&gt;</ph> property is equal to Anonymous, <ph id=\"ph2\">&lt;xref:System.ServiceModel.MessageCredentialType.UserName&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.ServiceModel.MessageCredentialType.Certificate&gt;</ph>, setting this property to <ph id=\"ph4\">`false`</ph> implies that the service certificate is available at the client out-of-band, and that the client must specify the <ph id=\"ph5\">&lt;xref:System.ServiceModel.Configuration.ServiceCredentialsElement.ServiceCertificate%2A&gt;</ph> property of <ph id=\"ph6\">&lt;xref:System.ServiceModel.Configuration.ServiceCredentialsElement&gt;</ph> class.","pos":[0,559],"source":"If the <xref:System.ServiceModel.MessageSecurityOverHttp.ClientCredentialType%2A> property is equal to Anonymous, <xref:System.ServiceModel.MessageCredentialType.UserName>, or <xref:System.ServiceModel.MessageCredentialType.Certificate>, setting this property to `false` implies that the service certificate is available at the client out-of-band, and that the client must specify the <xref:System.ServiceModel.Configuration.ServiceCredentialsElement.ServiceCertificate%2A> property of <xref:System.ServiceModel.Configuration.ServiceCredentialsElement> class."},{"content":"This mode is interoperable with SOAP stacks that implement WS-Trust and WS-SecureConversation.","pos":[560,654]}]},{"pos":[908,1375],"content":"If the <xref:System.ServiceModel.MessageSecurityOverHttp.ClientCredentialType%2A> property is equal to <xref:System.ServiceModel.MessageCredentialType.Windows>, setting this property to `false` causes a Kerberos-based authentication. This requires that the client and service be part of a Kerberos domain. This mode is interoperable with SOAP stacks that implement the Kerberos token profile (as defined at OASIS WSS TC) as well as WS-Trust and WS-SecureConversation.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.ServiceModel.MessageSecurityOverHttp.ClientCredentialType%2A&gt;</ph> property is equal to <ph id=\"ph2\">&lt;xref:System.ServiceModel.MessageCredentialType.Windows&gt;</ph>, setting this property to <ph id=\"ph3\">`false`</ph> causes a Kerberos-based authentication.","pos":[0,233],"source":"If the <xref:System.ServiceModel.MessageSecurityOverHttp.ClientCredentialType%2A> property is equal to <xref:System.ServiceModel.MessageCredentialType.Windows>, setting this property to `false` causes a Kerberos-based authentication."},{"content":"This requires that the client and service be part of a Kerberos domain.","pos":[234,305]},{"content":"This mode is interoperable with SOAP stacks that implement the Kerberos token profile (as defined at OASIS WSS TC) as well as WS-Trust and WS-SecureConversation.","pos":[306,467]}]},{"pos":[1382,1494],"content":"When this property is <ph id=\"ph1\">`true`</ph>, it causes a .NET SOAP negotiation that tunnels SPNego exchange over SOAP messages.","source":"When this property is `true`, it causes a .NET SOAP negotiation that tunnels SPNego exchange over SOAP messages."},{"pos":[1501,1816],"content":"This property indicates whether the service credential is negotiated automatically between the client and the service. If this property is `true`, then such negotiation occurs. If this property is `false`, then the service credentials must be specified at the client before communication with the service can occur.","nodes":[{"content":"This property indicates whether the service credential is negotiated automatically between the client and the service.","pos":[0,118]},{"content":"If this property is <ph id=\"ph1\">`true`</ph>, then such negotiation occurs.","pos":[119,176],"source":" If this property is `true`, then such negotiation occurs."},{"content":"If this property is <ph id=\"ph1\">`false`</ph>, then the service credentials must be specified at the client before communication with the service can occur.","pos":[177,315],"source":" If this property is `false`, then the service credentials must be specified at the client before communication with the service can occur."}]},{"pos":[1823,2565],"content":"If this property is set to `false`, and the binding is configured to use Windows as a client credential type, the service account must be associated with a Service Principal Name (SPN). To do this, run the service under the NETWORK SERVICE account, or LOCAL SYSTEM account. Alternatively, use the SetSpn.exe tool to create an SPN for the service account. In either case, the client must use the correct SPN in the [\\&lt;servicePrincipalName\\&gt;](~/docs/framework/configure-apps/file-schema/wcf/serviceprincipalname.md) element, or by using the <xref:System.ServiceModel.EndpointAddress> constructor. For more information, see [Service Identity and Authentication](~/docs/framework/wcf/feature-details/service-identity-and-authentication.md).","nodes":[{"content":"If this property is set to <ph id=\"ph1\">`false`</ph>, and the binding is configured to use Windows as a client credential type, the service account must be associated with a Service Principal Name (SPN).","pos":[0,185],"source":"If this property is set to `false`, and the binding is configured to use Windows as a client credential type, the service account must be associated with a Service Principal Name (SPN)."},{"content":"To do this, run the service under the NETWORK SERVICE account, or LOCAL SYSTEM account.","pos":[186,273]},{"content":"Alternatively, use the SetSpn.exe tool to create an SPN for the service account.","pos":[274,354]},{"content":"In either case, the client must use the correct SPN in the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&amp;</ph>lt;servicePrincipalName<ph id=\"ph2\">\\&amp;</ph>gt;<ept id=\"p1\">](~/docs/framework/configure-apps/file-schema/wcf/serviceprincipalname.md)</ept> element, or by using the <ph id=\"ph3\">&lt;xref:System.ServiceModel.EndpointAddress&gt;</ph> constructor.","pos":[355,600],"source":" In either case, the client must use the correct SPN in the [\\&lt;servicePrincipalName\\&gt;](~/docs/framework/configure-apps/file-schema/wcf/serviceprincipalname.md) element, or by using the <xref:System.ServiceModel.EndpointAddress> constructor."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Service Identity and Authentication<ept id=\"p1\">](~/docs/framework/wcf/feature-details/service-identity-and-authentication.md)</ept>.","pos":[601,742],"source":" For more information, see [Service Identity and Authentication](~/docs/framework/wcf/feature-details/service-identity-and-authentication.md)."}]}],"pos":[10118,12698],"yaml":true,"extradata":"MT"},{"content":"`true` if the service credential is provisioned at the client out-of-band; otherwise, `false`.","nodes":[{"pos":[0,94],"content":"<ph id=\"ph1\">`true`</ph> if the service credential is provisioned at the client out-of-band; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the service credential is provisioned at the client out-of-band; otherwise, `false`."}],"pos":[12972,13069],"yaml":true},{"content":"Gets a <xref href=\"System.Configuration.ConfigurationPropertyCollection\"></xref> instance that contains a collection of <xref href=\"System.Configuration.ConfigurationProperty\"></xref> objects that can be attributes or <xref href=\"System.Configuration.ConfigurationElement\"></xref> objects of this configuration element.","nodes":[{"pos":[0,319],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"System.Configuration.ConfigurationPropertyCollection\"&gt;&lt;/xref&gt;</ph> instance that contains a collection of <ph id=\"ph2\">&lt;xref href=\"System.Configuration.ConfigurationProperty\"&gt;&lt;/xref&gt;</ph> objects that can be attributes or <ph id=\"ph3\">&lt;xref href=\"System.Configuration.ConfigurationElement\"&gt;&lt;/xref&gt;</ph> objects of this configuration element.","source":"Gets a <xref href=\"System.Configuration.ConfigurationPropertyCollection\"></xref> instance that contains a collection of <xref href=\"System.Configuration.ConfigurationProperty\"></xref> objects that can be attributes or <xref href=\"System.Configuration.ConfigurationElement\"></xref> objects of this configuration element."}],"pos":[14357,14677],"yaml":true},{"content":"A <xref href=\"System.Configuration.ConfigurationPropertyCollection\"></xref> instance that contains a collection of <xref href=\"System.Configuration.ConfigurationProperty\"></xref> objects that can be attributes or <xref href=\"System.Configuration.ConfigurationElement\"></xref> objects of this configuration element.","nodes":[{"pos":[0,314],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Configuration.ConfigurationPropertyCollection\"&gt;&lt;/xref&gt;</ph> instance that contains a collection of <ph id=\"ph2\">&lt;xref href=\"System.Configuration.ConfigurationProperty\"&gt;&lt;/xref&gt;</ph> objects that can be attributes or <ph id=\"ph3\">&lt;xref href=\"System.Configuration.ConfigurationElement\"&gt;&lt;/xref&gt;</ph> objects of this configuration element.","source":"A <xref href=\"System.Configuration.ConfigurationPropertyCollection\"></xref> instance that contains a collection of <xref href=\"System.Configuration.ConfigurationProperty\"></xref> objects that can be attributes or <xref href=\"System.Configuration.ConfigurationElement\"></xref> objects of this configuration element."}],"pos":[14888,15203],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ServiceModel.Configuration.MessageSecurityOverHttpElement\n  commentId: T:System.ServiceModel.Configuration.MessageSecurityOverHttpElement\n  id: MessageSecurityOverHttpElement\n  children:\n  - System.ServiceModel.Configuration.MessageSecurityOverHttpElement.AlgorithmSuite\n  - System.ServiceModel.Configuration.MessageSecurityOverHttpElement.ClientCredentialType\n  - System.ServiceModel.Configuration.MessageSecurityOverHttpElement.NegotiateServiceCredential\n  - System.ServiceModel.Configuration.MessageSecurityOverHttpElement.Properties\n  langs:\n  - csharp\n  name: MessageSecurityOverHttpElement\n  nameWithType: MessageSecurityOverHttpElement\n  fullName: System.ServiceModel.Configuration.MessageSecurityOverHttpElement\n  type: Class\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Configuration\n  summary: Defines the security configuration settings for message sent using HTTP.\n  syntax:\n    content: 'public class MessageSecurityOverHttpElement : System.ServiceModel.Configuration.ServiceModelConfigurationElement'\n  inheritance:\n  - System.Object\n  - System.Configuration.ConfigurationElement\n  - System.ServiceModel.Configuration.ServiceModelConfigurationElement\n  derivedClasses:\n  - System.ServiceModel.Configuration.NonDualMessageSecurityOverHttpElement\n  implements: []\n  inheritedMembers:\n  - System.Configuration.ConfigurationElement.CurrentConfiguration\n  - System.Configuration.ConfigurationElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)\n  - System.Configuration.ConfigurationElement.ElementInformation\n  - System.Configuration.ConfigurationElement.ElementProperty\n  - System.Configuration.ConfigurationElement.Equals(System.Object)\n  - System.Configuration.ConfigurationElement.EvaluationContext\n  - System.Configuration.ConfigurationElement.GetHashCode\n  - System.Configuration.ConfigurationElement.GetTransformedAssemblyString(System.String)\n  - System.Configuration.ConfigurationElement.GetTransformedTypeString(System.String)\n  - System.Configuration.ConfigurationElement.HasContext\n  - System.Configuration.ConfigurationElement.Init\n  - System.Configuration.ConfigurationElement.InitializeDefault\n  - System.Configuration.ConfigurationElement.IsModified\n  - System.Configuration.ConfigurationElement.IsReadOnly\n  - System.Configuration.ConfigurationElement.Item(System.Configuration.ConfigurationProperty)\n  - System.Configuration.ConfigurationElement.Item(System.String)\n  - System.Configuration.ConfigurationElement.ListErrors(System.Collections.IList)\n  - System.Configuration.ConfigurationElement.LockAllAttributesExcept\n  - System.Configuration.ConfigurationElement.LockAllElementsExcept\n  - System.Configuration.ConfigurationElement.LockAttributes\n  - System.Configuration.ConfigurationElement.LockElements\n  - System.Configuration.ConfigurationElement.LockItem\n  - System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedAttribute(System.String,System.String)\n  - System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)\n  - System.Configuration.ConfigurationElement.OnRequiredPropertyNotFound(System.String)\n  - System.Configuration.ConfigurationElement.PostDeserialize\n  - System.Configuration.ConfigurationElement.PreSerialize(System.Xml.XmlWriter)\n  - System.Configuration.ConfigurationElement.Reset(System.Configuration.ConfigurationElement)\n  - System.Configuration.ConfigurationElement.ResetModified\n  - System.Configuration.ConfigurationElement.SerializeElement(System.Xml.XmlWriter,System.Boolean)\n  - System.Configuration.ConfigurationElement.SerializeToXmlElement(System.Xml.XmlWriter,System.String)\n  - System.Configuration.ConfigurationElement.SetPropertyValue(System.Configuration.ConfigurationProperty,System.Object,System.Boolean)\n  - System.Configuration.ConfigurationElement.SetReadOnly\n  - System.Configuration.ConfigurationElement.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.ServiceModel.Configuration.ServiceModelConfigurationElement.SetPropertyValueIfNotDefaultValue``1(System.String,``0)\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Configuration/MessageSecurityOverHttpElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.ServiceModel.Configuration.MessageSecurityOverHttpElement.AlgorithmSuite\n  commentId: P:System.ServiceModel.Configuration.MessageSecurityOverHttpElement.AlgorithmSuite\n  id: AlgorithmSuite\n  parent: System.ServiceModel.Configuration.MessageSecurityOverHttpElement\n  langs:\n  - csharp\n  name: AlgorithmSuite\n  nameWithType: MessageSecurityOverHttpElement.AlgorithmSuite\n  fullName: MessageSecurityOverHttpElement.AlgorithmSuite\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Configuration\n  summary: Gets or sets the message encryption and key-wrap algorithms used to secure an HTTP message.\n  syntax:\n    content: >-\n      [System.ComponentModel.TypeConverter(typeof(System.ServiceModel.Configuration.SecurityAlgorithmSuiteConverter))]\n\n      [System.Configuration.ConfigurationProperty(\"algorithmSuite\", DefaultValue=Mono.Cecil.CustomAttributeArgument)]\n\n      public System.ServiceModel.Security.SecurityAlgorithmSuite AlgorithmSuite { get; set; }\n    return:\n      type: System.ServiceModel.Security.SecurityAlgorithmSuite\n      description: A valid <xref href=\"System.ServiceModel.Security.SecurityAlgorithmSuite\"></xref> value that specifies the message encryption and key-wrap algorithms used to secure an HTTP message. The default value is <xref href=\"System.ServiceModel.Security.SecurityAlgorithmSuite.Basic256\"></xref>.\n  overload: System.ServiceModel.Configuration.MessageSecurityOverHttpElement.AlgorithmSuite*\n  exceptions: []\n  attributes:\n  - type: System.ComponentModel.TypeConverterAttribute\n  - type: System.Configuration.ConfigurationPropertyAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Configuration/MessageSecurityOverHttpElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.ServiceModel.Configuration.MessageSecurityOverHttpElement.ClientCredentialType\n  commentId: P:System.ServiceModel.Configuration.MessageSecurityOverHttpElement.ClientCredentialType\n  id: ClientCredentialType\n  parent: System.ServiceModel.Configuration.MessageSecurityOverHttpElement\n  langs:\n  - csharp\n  name: ClientCredentialType\n  nameWithType: MessageSecurityOverHttpElement.ClientCredentialType\n  fullName: MessageSecurityOverHttpElement.ClientCredentialType\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Configuration\n  summary: Specifies the type of credential to be used when performing client authentication using message-based security or `TransportWithMessageCredential`.\n  syntax:\n    content: >-\n      [System.Configuration.ConfigurationProperty(\"clientCredentialType\", DefaultValue=Mono.Cecil.CustomAttributeArgument)]\n\n      public System.ServiceModel.MessageCredentialType ClientCredentialType { get; set; }\n    return:\n      type: System.ServiceModel.MessageCredentialType\n      description: A valid <xref href=\"System.ServiceModel.MessageCredentialType\"></xref> value that specifies the type of credential to be used when performing client authentication using message-based security or `TransportWithMessageCredential`. The default value is <xref href=\"System.ServiceModel.MessageCredentialType.Windows\"></xref>.\n  overload: System.ServiceModel.Configuration.MessageSecurityOverHttpElement.ClientCredentialType*\n  exceptions: []\n  attributes:\n  - type: System.Configuration.ConfigurationPropertyAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Configuration/MessageSecurityOverHttpElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.ServiceModel.Configuration.MessageSecurityOverHttpElement.NegotiateServiceCredential\n  commentId: P:System.ServiceModel.Configuration.MessageSecurityOverHttpElement.NegotiateServiceCredential\n  id: NegotiateServiceCredential\n  parent: System.ServiceModel.Configuration.MessageSecurityOverHttpElement\n  langs:\n  - csharp\n  name: NegotiateServiceCredential\n  nameWithType: MessageSecurityOverHttpElement.NegotiateServiceCredential\n  fullName: MessageSecurityOverHttpElement.NegotiateServiceCredential\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Configuration\n  summary: Gets or sets a Boolean value that specifies whether the service credential is provisioned at the client out-of-band, or is obtained from the service to the client through a process of negotiation.\n  remarks: \"This property specifies whether the service credential is provisioned at the client out-of-band or is obtained from the service to the client through a process of negotiation. Such a negotiation is a precursor to the usual message exchange.  \\n  \\n If the <xref:System.ServiceModel.MessageSecurityOverHttp.ClientCredentialType%2A> property is equal to Anonymous, <xref:System.ServiceModel.MessageCredentialType.UserName>, or <xref:System.ServiceModel.MessageCredentialType.Certificate>, setting this property to `false` implies that the service certificate is available at the client out-of-band, and that the client must specify the <xref:System.ServiceModel.Configuration.ServiceCredentialsElement.ServiceCertificate%2A> property of <xref:System.ServiceModel.Configuration.ServiceCredentialsElement> class. This mode is interoperable with SOAP stacks that implement WS-Trust and WS-SecureConversation.  \\n  \\n If the <xref:System.ServiceModel.MessageSecurityOverHttp.ClientCredentialType%2A> property is equal to <xref:System.ServiceModel.MessageCredentialType.Windows>, setting this property to `false` causes a Kerberos-based authentication. This requires that the client and service be part of a Kerberos domain. This mode is interoperable with SOAP stacks that implement the Kerberos token profile (as defined at OASIS WSS TC) as well as WS-Trust and WS-SecureConversation.  \\n  \\n When this property is `true`, it causes a .NET SOAP negotiation that tunnels SPNego exchange over SOAP messages.  \\n  \\n This property indicates whether the service credential is negotiated automatically between the client and the service. If this property is `true`, then such negotiation occurs. If this property is `false`, then the service credentials must be specified at the client before communication with the service can occur.  \\n  \\n If this property is set to `false`, and the binding is configured to use Windows as a client credential type, the service account must be associated with a Service Principal Name (SPN). To do this, run the service under the NETWORK SERVICE account, or LOCAL SYSTEM account. Alternatively, use the SetSpn.exe tool to create an SPN for the service account. In either case, the client must use the correct SPN in the [\\\\&lt;servicePrincipalName\\\\&gt;](~/docs/framework/configure-apps/file-schema/wcf/serviceprincipalname.md) element, or by using the <xref:System.ServiceModel.EndpointAddress> constructor. For more information, see [Service Identity and Authentication](~/docs/framework/wcf/feature-details/service-identity-and-authentication.md).\"\n  syntax:\n    content: >-\n      [System.Configuration.ConfigurationProperty(\"negotiateServiceCredential\", DefaultValue=Mono.Cecil.CustomAttributeArgument)]\n\n      public bool NegotiateServiceCredential { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if the service credential is provisioned at the client out-of-band; otherwise, `false`.'\n  overload: System.ServiceModel.Configuration.MessageSecurityOverHttpElement.NegotiateServiceCredential*\n  exceptions: []\n  attributes:\n  - type: System.Configuration.ConfigurationPropertyAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Configuration/MessageSecurityOverHttpElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.ServiceModel.Configuration.MessageSecurityOverHttpElement.Properties\n  commentId: P:System.ServiceModel.Configuration.MessageSecurityOverHttpElement.Properties\n  id: Properties\n  parent: System.ServiceModel.Configuration.MessageSecurityOverHttpElement\n  langs:\n  - csharp\n  name: Properties\n  nameWithType: MessageSecurityOverHttpElement.Properties\n  fullName: MessageSecurityOverHttpElement.Properties\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Configuration\n  summary: Gets a <xref href=\"System.Configuration.ConfigurationPropertyCollection\"></xref> instance that contains a collection of <xref href=\"System.Configuration.ConfigurationProperty\"></xref> objects that can be attributes or <xref href=\"System.Configuration.ConfigurationElement\"></xref> objects of this configuration element.\n  syntax:\n    content: protected override System.Configuration.ConfigurationPropertyCollection Properties { get; }\n    return:\n      type: System.Configuration.ConfigurationPropertyCollection\n      description: A <xref href=\"System.Configuration.ConfigurationPropertyCollection\"></xref> instance that contains a collection of <xref href=\"System.Configuration.ConfigurationProperty\"></xref> objects that can be attributes or <xref href=\"System.Configuration.ConfigurationElement\"></xref> objects of this configuration element.\n  overload: System.ServiceModel.Configuration.MessageSecurityOverHttpElement.Properties*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Configuration/MessageSecurityOverHttpElement.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\nreferences:\n- uid: System.ServiceModel.Configuration.ServiceModelConfigurationElement\n  parent: System.ServiceModel.Configuration\n  isExternal: false\n  name: ServiceModelConfigurationElement\n  nameWithType: ServiceModelConfigurationElement\n  fullName: System.ServiceModel.Configuration.ServiceModelConfigurationElement\n- uid: System.ServiceModel.Configuration.MessageSecurityOverHttpElement.AlgorithmSuite\n  parent: System.ServiceModel.Configuration.MessageSecurityOverHttpElement\n  isExternal: false\n  name: AlgorithmSuite\n  nameWithType: MessageSecurityOverHttpElement.AlgorithmSuite\n  fullName: MessageSecurityOverHttpElement.AlgorithmSuite\n- uid: System.ServiceModel.Security.SecurityAlgorithmSuite\n  parent: System.ServiceModel.Security\n  isExternal: false\n  name: SecurityAlgorithmSuite\n  nameWithType: SecurityAlgorithmSuite\n  fullName: System.ServiceModel.Security.SecurityAlgorithmSuite\n- uid: System.ServiceModel.Configuration.MessageSecurityOverHttpElement.ClientCredentialType\n  parent: System.ServiceModel.Configuration.MessageSecurityOverHttpElement\n  isExternal: false\n  name: ClientCredentialType\n  nameWithType: MessageSecurityOverHttpElement.ClientCredentialType\n  fullName: MessageSecurityOverHttpElement.ClientCredentialType\n- uid: System.ServiceModel.MessageCredentialType\n  parent: System.ServiceModel\n  isExternal: false\n  name: MessageCredentialType\n  nameWithType: MessageCredentialType\n  fullName: System.ServiceModel.MessageCredentialType\n- uid: System.ServiceModel.Configuration.MessageSecurityOverHttpElement.NegotiateServiceCredential\n  parent: System.ServiceModel.Configuration.MessageSecurityOverHttpElement\n  isExternal: false\n  name: NegotiateServiceCredential\n  nameWithType: MessageSecurityOverHttpElement.NegotiateServiceCredential\n  fullName: MessageSecurityOverHttpElement.NegotiateServiceCredential\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.ServiceModel.Configuration.MessageSecurityOverHttpElement.Properties\n  parent: System.ServiceModel.Configuration.MessageSecurityOverHttpElement\n  isExternal: false\n  name: Properties\n  nameWithType: MessageSecurityOverHttpElement.Properties\n  fullName: MessageSecurityOverHttpElement.Properties\n- uid: System.Configuration.ConfigurationPropertyCollection\n  parent: System.Configuration\n  isExternal: false\n  name: ConfigurationPropertyCollection\n  nameWithType: ConfigurationPropertyCollection\n  fullName: System.Configuration.ConfigurationPropertyCollection\n- uid: System.ServiceModel.Configuration.MessageSecurityOverHttpElement.AlgorithmSuite*\n  parent: System.ServiceModel.Configuration.MessageSecurityOverHttpElement\n  isExternal: false\n  name: AlgorithmSuite\n  nameWithType: MessageSecurityOverHttpElement.AlgorithmSuite\n  fullName: MessageSecurityOverHttpElement.AlgorithmSuite\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Configuration/MessageSecurityOverHttpElement.xml\n- uid: System.ServiceModel.Configuration.MessageSecurityOverHttpElement.ClientCredentialType*\n  parent: System.ServiceModel.Configuration.MessageSecurityOverHttpElement\n  isExternal: false\n  name: ClientCredentialType\n  nameWithType: MessageSecurityOverHttpElement.ClientCredentialType\n  fullName: MessageSecurityOverHttpElement.ClientCredentialType\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Configuration/MessageSecurityOverHttpElement.xml\n- uid: System.ServiceModel.Configuration.MessageSecurityOverHttpElement.NegotiateServiceCredential*\n  parent: System.ServiceModel.Configuration.MessageSecurityOverHttpElement\n  isExternal: false\n  name: NegotiateServiceCredential\n  nameWithType: MessageSecurityOverHttpElement.NegotiateServiceCredential\n  fullName: MessageSecurityOverHttpElement.NegotiateServiceCredential\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Configuration/MessageSecurityOverHttpElement.xml\n- uid: System.ServiceModel.Configuration.MessageSecurityOverHttpElement.Properties*\n  parent: System.ServiceModel.Configuration.MessageSecurityOverHttpElement\n  isExternal: false\n  name: Properties\n  nameWithType: MessageSecurityOverHttpElement.Properties\n  fullName: MessageSecurityOverHttpElement.Properties\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Configuration/MessageSecurityOverHttpElement.xml\n- uid: System.Configuration.ConfigurationElement.Equals(System.Object)\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: ConfigurationElement.Equals(Object)\n  fullName: ConfigurationElement.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Configuration.ConfigurationElement.GetHashCode\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: ConfigurationElement.GetHashCode()\n  fullName: ConfigurationElement.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Configuration.ConfigurationElement.CurrentConfiguration\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: CurrentConfiguration\n  nameWithType: ConfigurationElement.CurrentConfiguration\n  fullName: ConfigurationElement.CurrentConfiguration\n- uid: System.Configuration.ConfigurationElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: DeserializeElement(XmlReader, Boolean)\n  nameWithType: ConfigurationElement.DeserializeElement(XmlReader, Boolean)\n  fullName: ConfigurationElement.DeserializeElement(XmlReader, Boolean)\n- uid: System.Configuration.ConfigurationElement.ElementInformation\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: ElementInformation\n  nameWithType: ConfigurationElement.ElementInformation\n  fullName: ConfigurationElement.ElementInformation\n- uid: System.Configuration.ConfigurationElement.ElementProperty\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: ElementProperty\n  nameWithType: ConfigurationElement.ElementProperty\n  fullName: ConfigurationElement.ElementProperty\n- uid: System.Configuration.ConfigurationElement.EvaluationContext\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: EvaluationContext\n  nameWithType: ConfigurationElement.EvaluationContext\n  fullName: ConfigurationElement.EvaluationContext\n- uid: System.Configuration.ConfigurationElement.GetTransformedAssemblyString(System.String)\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: GetTransformedAssemblyString(String)\n  nameWithType: ConfigurationElement.GetTransformedAssemblyString(String)\n  fullName: ConfigurationElement.GetTransformedAssemblyString(String)\n- uid: System.Configuration.ConfigurationElement.GetTransformedTypeString(System.String)\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: GetTransformedTypeString(String)\n  nameWithType: ConfigurationElement.GetTransformedTypeString(String)\n  fullName: ConfigurationElement.GetTransformedTypeString(String)\n- uid: System.Configuration.ConfigurationElement.HasContext\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: HasContext\n  nameWithType: ConfigurationElement.HasContext\n  fullName: ConfigurationElement.HasContext\n- uid: System.Configuration.ConfigurationElement.Init\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: Init()\n  nameWithType: ConfigurationElement.Init()\n  fullName: ConfigurationElement.Init()\n- uid: System.Configuration.ConfigurationElement.InitializeDefault\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: InitializeDefault()\n  nameWithType: ConfigurationElement.InitializeDefault()\n  fullName: ConfigurationElement.InitializeDefault()\n- uid: System.Configuration.ConfigurationElement.IsModified\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: IsModified()\n  nameWithType: ConfigurationElement.IsModified()\n  fullName: ConfigurationElement.IsModified()\n- uid: System.Configuration.ConfigurationElement.IsReadOnly\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: IsReadOnly()\n  nameWithType: ConfigurationElement.IsReadOnly()\n  fullName: ConfigurationElement.IsReadOnly()\n- uid: System.Configuration.ConfigurationElement.Item(System.Configuration.ConfigurationProperty)\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: Item(ConfigurationProperty)\n  nameWithType: ConfigurationElement.Item(ConfigurationProperty)\n  fullName: ConfigurationElement.Item(ConfigurationProperty)\n- uid: System.Configuration.ConfigurationElement.Item(System.String)\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: Item(String)\n  nameWithType: ConfigurationElement.Item(String)\n  fullName: ConfigurationElement.Item(String)\n- uid: System.Configuration.ConfigurationElement.ListErrors(System.Collections.IList)\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: ListErrors(IList)\n  nameWithType: ConfigurationElement.ListErrors(IList)\n  fullName: ConfigurationElement.ListErrors(IList)\n- uid: System.Configuration.ConfigurationElement.LockAllAttributesExcept\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: LockAllAttributesExcept\n  nameWithType: ConfigurationElement.LockAllAttributesExcept\n  fullName: ConfigurationElement.LockAllAttributesExcept\n- uid: System.Configuration.ConfigurationElement.LockAllElementsExcept\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: LockAllElementsExcept\n  nameWithType: ConfigurationElement.LockAllElementsExcept\n  fullName: ConfigurationElement.LockAllElementsExcept\n- uid: System.Configuration.ConfigurationElement.LockAttributes\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: LockAttributes\n  nameWithType: ConfigurationElement.LockAttributes\n  fullName: ConfigurationElement.LockAttributes\n- uid: System.Configuration.ConfigurationElement.LockElements\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: LockElements\n  nameWithType: ConfigurationElement.LockElements\n  fullName: ConfigurationElement.LockElements\n- uid: System.Configuration.ConfigurationElement.LockItem\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: LockItem\n  nameWithType: ConfigurationElement.LockItem\n  fullName: ConfigurationElement.LockItem\n- uid: System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedAttribute(System.String,System.String)\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: OnDeserializeUnrecognizedAttribute(String, String)\n  nameWithType: ConfigurationElement.OnDeserializeUnrecognizedAttribute(String, String)\n  fullName: ConfigurationElement.OnDeserializeUnrecognizedAttribute(String, String)\n- uid: System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: OnDeserializeUnrecognizedElement(String, XmlReader)\n  nameWithType: ConfigurationElement.OnDeserializeUnrecognizedElement(String, XmlReader)\n  fullName: ConfigurationElement.OnDeserializeUnrecognizedElement(String, XmlReader)\n- uid: System.Configuration.ConfigurationElement.OnRequiredPropertyNotFound(System.String)\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: OnRequiredPropertyNotFound(String)\n  nameWithType: ConfigurationElement.OnRequiredPropertyNotFound(String)\n  fullName: ConfigurationElement.OnRequiredPropertyNotFound(String)\n- uid: System.Configuration.ConfigurationElement.PostDeserialize\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: PostDeserialize()\n  nameWithType: ConfigurationElement.PostDeserialize()\n  fullName: ConfigurationElement.PostDeserialize()\n- uid: System.Configuration.ConfigurationElement.PreSerialize(System.Xml.XmlWriter)\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: PreSerialize(XmlWriter)\n  nameWithType: ConfigurationElement.PreSerialize(XmlWriter)\n  fullName: ConfigurationElement.PreSerialize(XmlWriter)\n- uid: System.Configuration.ConfigurationElement.Reset(System.Configuration.ConfigurationElement)\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: Reset(ConfigurationElement)\n  nameWithType: ConfigurationElement.Reset(ConfigurationElement)\n  fullName: ConfigurationElement.Reset(ConfigurationElement)\n- uid: System.Configuration.ConfigurationElement.ResetModified\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: ResetModified()\n  nameWithType: ConfigurationElement.ResetModified()\n  fullName: ConfigurationElement.ResetModified()\n- uid: System.Configuration.ConfigurationElement.SerializeElement(System.Xml.XmlWriter,System.Boolean)\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: SerializeElement(XmlWriter, Boolean)\n  nameWithType: ConfigurationElement.SerializeElement(XmlWriter, Boolean)\n  fullName: ConfigurationElement.SerializeElement(XmlWriter, Boolean)\n- uid: System.Configuration.ConfigurationElement.SerializeToXmlElement(System.Xml.XmlWriter,System.String)\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: SerializeToXmlElement(XmlWriter, String)\n  nameWithType: ConfigurationElement.SerializeToXmlElement(XmlWriter, String)\n  fullName: ConfigurationElement.SerializeToXmlElement(XmlWriter, String)\n- uid: System.Configuration.ConfigurationElement.SetPropertyValue(System.Configuration.ConfigurationProperty,System.Object,System.Boolean)\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: SetPropertyValue(ConfigurationProperty, Object, Boolean)\n  nameWithType: ConfigurationElement.SetPropertyValue(ConfigurationProperty, Object, Boolean)\n  fullName: ConfigurationElement.SetPropertyValue(ConfigurationProperty, Object, Boolean)\n- uid: System.Configuration.ConfigurationElement.SetReadOnly\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: SetReadOnly()\n  nameWithType: ConfigurationElement.SetReadOnly()\n  fullName: ConfigurationElement.SetReadOnly()\n- uid: System.Configuration.ConfigurationElement.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: Unmerge(ConfigurationElement, ConfigurationElement, ConfigurationSaveMode)\n  nameWithType: ConfigurationElement.Unmerge(ConfigurationElement, ConfigurationElement, ConfigurationSaveMode)\n  fullName: ConfigurationElement.Unmerge(ConfigurationElement, ConfigurationElement, ConfigurationSaveMode)\n- uid: System.ServiceModel.Configuration.ServiceModelConfigurationElement.SetPropertyValueIfNotDefaultValue``1(System.String,``0)\n  parent: System.ServiceModel.Configuration.ServiceModelConfigurationElement\n  isExternal: false\n  name: SetPropertyValueIfNotDefaultValue<T>(String, T)\n  nameWithType: ServiceModelConfigurationElement.SetPropertyValueIfNotDefaultValue<T>(String, T)\n  fullName: ServiceModelConfigurationElement.SetPropertyValueIfNotDefaultValue<T>(String, T)\n"}