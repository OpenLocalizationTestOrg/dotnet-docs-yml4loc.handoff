{"nodes":[{"content":"Provides data for the <xref href=\"System.Windows.Input.CommandBinding.CanExecute\"></xref> and <xref href=\"System.Windows.Input.CommandManager.PreviewCanExecute\"></xref> routed events.","nodes":[{"pos":[0,183],"content":"Provides data for the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.CommandBinding.CanExecute\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"System.Windows.Input.CommandManager.PreviewCanExecute\"&gt;&lt;/xref&gt;</ph> routed events.","source":"Provides data for the <xref href=\"System.Windows.Input.CommandBinding.CanExecute\"></xref> and <xref href=\"System.Windows.Input.CommandManager.PreviewCanExecute\"></xref> routed events."}],"pos":[795,979],"yaml":true},{"content":"Typically, a command source, such a <xref:System.Windows.Controls.MenuItem>, will call the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method on a <xref:System.Windows.Input.RoutedCommand> to determine if the command can or cannot execute on the current command target.  If <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is set to `false` from an event handler, the command source will disable itself.  For example, if a <xref:System.Windows.Controls.MenuItem> is acting as the command source for a command and the command cannot execute on the current command target, then the <xref:System.Windows.Controls.MenuItem> will gray itself out.  \n  \n The <xref:System.Windows.Input.ICommand.CanExecuteChanged> event notifies a command source when the ability of a command to execute may have changed.","nodes":[{"pos":[0,672],"content":"Typically, a command source, such a <xref:System.Windows.Controls.MenuItem>, will call the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method on a <xref:System.Windows.Input.RoutedCommand> to determine if the command can or cannot execute on the current command target.  If <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is set to `false` from an event handler, the command source will disable itself.  For example, if a <xref:System.Windows.Controls.MenuItem> is acting as the command source for a command and the command cannot execute on the current command target, then the <xref:System.Windows.Controls.MenuItem> will gray itself out.","nodes":[{"content":"Typically, a command source, such a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.MenuItem&gt;</ph>, will call the <ph id=\"ph2\">&lt;xref:System.Windows.Input.RoutedCommand.CanExecute%2A&gt;</ph> method on a <ph id=\"ph3\">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> to determine if the command can or cannot execute on the current command target.","pos":[0,281],"source":"Typically, a command source, such a <xref:System.Windows.Controls.MenuItem>, will call the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method on a <xref:System.Windows.Input.RoutedCommand> to determine if the command can or cannot execute on the current command target."},{"content":"If <ph id=\"ph1\">&lt;xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A&gt;</ph> is set to <ph id=\"ph2\">`false`</ph> from an event handler, the command source will disable itself.","pos":[283,434],"source":"  If <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is set to `false` from an event handler, the command source will disable itself."},{"content":"For example, if a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.MenuItem&gt;</ph> is acting as the command source for a command and the command cannot execute on the current command target, then the <ph id=\"ph2\">&lt;xref:System.Windows.Controls.MenuItem&gt;</ph> will gray itself out.","pos":[436,672],"source":"  For example, if a <xref:System.Windows.Controls.MenuItem> is acting as the command source for a command and the command cannot execute on the current command target, then the <xref:System.Windows.Controls.MenuItem> will gray itself out."}]},{"pos":[679,828],"content":"The <xref:System.Windows.Input.ICommand.CanExecuteChanged> event notifies a command source when the ability of a command to execute may have changed.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Input.ICommand.CanExecuteChanged&gt;</ph> event notifies a command source when the ability of a command to execute may have changed.","pos":[0,149],"source":"The <xref:System.Windows.Input.ICommand.CanExecuteChanged> event notifies a command source when the ability of a command to execute may have changed."}]}],"pos":[990,1823],"yaml":true,"extradata":"MT"},{"content":"Gets or sets a value that indicates whether the <xref href=\"System.Windows.Input.RoutedCommand\"></xref> associated with this event can be executed on the command target.","nodes":[{"pos":[0,169],"content":"Gets or sets a value that indicates whether the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.RoutedCommand\"&gt;&lt;/xref&gt;</ph> associated with this event can be executed on the command target.","source":"Gets or sets a value that indicates whether the <xref href=\"System.Windows.Input.RoutedCommand\"></xref> associated with this event can be executed on the command target."}],"pos":[4482,4652],"yaml":true},{"content":"Many command sources, such as <xref:System.Windows.Controls.MenuItem> and <xref:System.Windows.Controls.Button>, are disabled when <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is `false` and enabled when the <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is `true`.","nodes":[{"pos":[0,309],"content":"Many command sources, such as <ph id=\"ph1\">&lt;xref:System.Windows.Controls.MenuItem&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Button&gt;</ph>, are disabled when <ph id=\"ph3\">&lt;xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A&gt;</ph> is <ph id=\"ph4\">`false`</ph> and enabled when the <ph id=\"ph5\">&lt;xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A&gt;</ph> is <ph id=\"ph6\">`true`</ph>.","source":"Many command sources, such as <xref:System.Windows.Controls.MenuItem> and <xref:System.Windows.Controls.Button>, are disabled when <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is `false` and enabled when the <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is `true`."}],"pos":[4663,4973],"yaml":true,"extradata":"MT"},{"content":"`true` if the event can be executed on the command target; otherwise, `false`.  The default value is `false`.","nodes":[{"pos":[0,109],"content":"`true` if the event can be executed on the command target; otherwise, `false`.  The default value is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the event can be executed on the command target; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,78],"source":"`true` if the event can be executed on the command target; otherwise, `false`."},{"content":"The default value is <ph id=\"ph1\">`false`</ph>.","pos":[80,109],"source":"  The default value is `false`."}]}],"pos":[5951,6063],"yaml":true},{"content":"Gets the command associated with this event.","nodes":[{"pos":[0,44],"content":"Gets the command associated with this event.","nodes":[{"content":"Gets the command associated with this event.","pos":[0,44]}]}],"pos":[7124,7169],"yaml":true},{"content":"For more information on commanding, see the [Commanding Overview](~/docs/framework/wpf/advanced/commanding-overview.md).","nodes":[{"pos":[0,120],"content":"For more information on commanding, see the <bpt id=\"p1\">[</bpt>Commanding Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/commanding-overview.md)</ept>.","source":"For more information on commanding, see the [Commanding Overview](~/docs/framework/wpf/advanced/commanding-overview.md)."}],"pos":[7180,7301],"yaml":true,"extradata":"MT"},{"content":"The command. Unless the command is a custom command, this is generally a <xref href=\"System.Windows.Input.RoutedCommand\"></xref>. There is no default value.","nodes":[{"pos":[0,156],"content":"The command. Unless the command is a custom command, this is generally a <xref href=\"System.Windows.Input.RoutedCommand\"></xref>. There is no default value.","nodes":[{"content":"The command.","pos":[0,12]},{"content":"Unless the command is a custom command, this is generally a <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.RoutedCommand\"&gt;&lt;/xref&gt;</ph>.","pos":[13,129],"source":" Unless the command is a custom command, this is generally a <xref href=\"System.Windows.Input.RoutedCommand\"></xref>."},{"content":"There is no default value.","pos":[130,156]}]}],"pos":[8793,8950],"yaml":true},{"content":"Determines whether the input routed event that invoked the command should continue to route through the element tree.","nodes":[{"pos":[0,117],"content":"Determines whether the input routed event that invoked the command should continue to route through the element tree.","nodes":[{"content":"Determines whether the input routed event that invoked the command should continue to route through the element tree.","pos":[0,117]}]}],"pos":[10056,10174],"yaml":true},{"content":"`true` if the routed event should continue to route through element tree; otherwise, `false`.   The default value is `false`.","nodes":[{"pos":[0,125],"content":"`true` if the routed event should continue to route through element tree; otherwise, `false`.   The default value is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the routed event should continue to route through element tree; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,93],"source":"`true` if the routed event should continue to route through element tree; otherwise, `false`."},{"content":"The default value is <ph id=\"ph1\">`false`</ph>.","pos":[96,125],"source":"   The default value is `false`."}]}],"pos":[10297,10425],"yaml":true},{"content":"Gets the command specific data.","nodes":[{"pos":[0,31],"content":"Gets the command specific data.","nodes":[{"content":"Gets the command specific data.","pos":[0,31]}]}],"pos":[12945,12977],"yaml":true},{"content":"The command parameter is used to pass specific information to the command when it is executed.  The type of the data is defined by the command.  \n  \n <xref:System.Windows.Input.CanExecuteRoutedEventArgs.Parameter%2A> can be `null`. Many commands do not process or expect command parameters.","nodes":[{"pos":[0,143],"content":"The command parameter is used to pass specific information to the command when it is executed.  The type of the data is defined by the command.","nodes":[{"content":"The command parameter is used to pass specific information to the command when it is executed.  The type of the data is defined by the command.","pos":[0,143],"nodes":[{"content":"The command parameter is used to pass specific information to the command when it is executed.","pos":[0,94]},{"content":"The type of the data is defined by the command.","pos":[96,143]}]}]},{"pos":[150,290],"content":"<xref:System.Windows.Input.CanExecuteRoutedEventArgs.Parameter%2A> can be `null`. Many commands do not process or expect command parameters.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Input.CanExecuteRoutedEventArgs.Parameter%2A&gt;</ph> can be <ph id=\"ph2\">`null`</ph>.","pos":[0,81],"source":"<xref:System.Windows.Input.CanExecuteRoutedEventArgs.Parameter%2A> can be `null`."},{"content":"Many commands do not process or expect command parameters.","pos":[82,140]}]}],"pos":[12988,13283],"yaml":true,"extradata":"MT"},{"content":"The command data.  The default value is `null`.","nodes":[{"pos":[0,47],"content":"The command data.  The default value is `null`.","nodes":[{"content":"The command data.","pos":[0,17]},{"content":"The default value is <ph id=\"ph1\">`null`</ph>.","pos":[19,47],"source":"  The default value is `null`."}]}],"pos":[14682,14730],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Input.CanExecuteRoutedEventArgs\n  commentId: T:System.Windows.Input.CanExecuteRoutedEventArgs\n  id: CanExecuteRoutedEventArgs\n  children:\n  - System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute\n  - System.Windows.Input.CanExecuteRoutedEventArgs.Command\n  - System.Windows.Input.CanExecuteRoutedEventArgs.ContinueRouting\n  - System.Windows.Input.CanExecuteRoutedEventArgs.InvokeEventHandler(System.Delegate,System.Object)\n  - System.Windows.Input.CanExecuteRoutedEventArgs.Parameter\n  langs:\n  - csharp\n  name: CanExecuteRoutedEventArgs\n  nameWithType: CanExecuteRoutedEventArgs\n  fullName: System.Windows.Input.CanExecuteRoutedEventArgs\n  type: Class\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Provides data for the <xref href=\"System.Windows.Input.CommandBinding.CanExecute\"></xref> and <xref href=\"System.Windows.Input.CommandManager.PreviewCanExecute\"></xref> routed events.\n  remarks: \"Typically, a command source, such a <xref:System.Windows.Controls.MenuItem>, will call the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method on a <xref:System.Windows.Input.RoutedCommand> to determine if the command can or cannot execute on the current command target.  If <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is set to `false` from an event handler, the command source will disable itself.  For example, if a <xref:System.Windows.Controls.MenuItem> is acting as the command source for a command and the command cannot execute on the current command target, then the <xref:System.Windows.Controls.MenuItem> will gray itself out.  \\n  \\n The <xref:System.Windows.Input.ICommand.CanExecuteChanged> event notifies a command source when the ability of a command to execute may have changed.\"\n  example:\n  - \"The follow example creates a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> that returns `true` only if the command target is a control.  First, <xref:System.Windows.RoutedEventArgs.Source%2A> is cast to a <xref:System.Windows.Controls.Control>.  If <xref:System.Windows.RoutedEventArgs.Source%2A> is a <xref:System.Windows.Controls.Control>, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is set to `true`; otherwise, it is set to `false`.  \\n  \\n [!code-csharp[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcanexecute)]\\n [!code-vb[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcanexecute)]\"\n  syntax:\n    content: 'public sealed class CanExecuteRoutedEventArgs : System.Windows.RoutedEventArgs'\n  inheritance:\n  - System.Object\n  - System.EventArgs\n  - System.Windows.RoutedEventArgs\n  implements: []\n  inheritedMembers:\n  - System.EventArgs.Empty\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Windows.RoutedEventArgs.Handled\n  - System.Windows.RoutedEventArgs.OnSetSource(System.Object)\n  - System.Windows.RoutedEventArgs.OriginalSource\n  - System.Windows.RoutedEventArgs.RoutedEvent\n  - System.Windows.RoutedEventArgs.Source\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/CanExecuteRoutedEventArgs.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute\n  commentId: P:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute\n  id: CanExecute\n  parent: System.Windows.Input.CanExecuteRoutedEventArgs\n  langs:\n  - csharp\n  name: CanExecute\n  nameWithType: CanExecuteRoutedEventArgs.CanExecute\n  fullName: CanExecuteRoutedEventArgs.CanExecute\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets or sets a value that indicates whether the <xref href=\"System.Windows.Input.RoutedCommand\"></xref> associated with this event can be executed on the command target.\n  remarks: Many command sources, such as <xref:System.Windows.Controls.MenuItem> and <xref:System.Windows.Controls.Button>, are disabled when <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is `false` and enabled when the <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is `true`.\n  example:\n  - \"The follow example creates a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> that only returns true if the command target is a control.  First the <xref:System.Windows.RoutedEventArgs.Source%2A> event data is cast to a <xref:System.Windows.Controls.Control>.  If it is a <xref:System.Windows.Controls.Control>, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is set to `true`; otherwise, it is set to `false`.  \\n  \\n [!code-csharp[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcanexecute)]\\n [!code-vb[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcanexecute)]\"\n  syntax:\n    content: public bool CanExecute { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if the event can be executed on the command target; otherwise, `false`.  The default value is `false`.'\n  overload: System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/CanExecuteRoutedEventArgs.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.CanExecuteRoutedEventArgs.Command\n  commentId: P:System.Windows.Input.CanExecuteRoutedEventArgs.Command\n  id: Command\n  parent: System.Windows.Input.CanExecuteRoutedEventArgs\n  langs:\n  - csharp\n  name: Command\n  nameWithType: CanExecuteRoutedEventArgs.Command\n  fullName: CanExecuteRoutedEventArgs.Command\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the command associated with this event.\n  remarks: For more information on commanding, see the [Commanding Overview](~/docs/framework/wpf/advanced/commanding-overview.md).\n  example:\n  - \"The following example creates a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> which handles multiple commands.  If the <xref:System.Windows.Input.CanExecuteRoutedEventArgs.Command%2A> property is equal to the <xref:System.Windows.Input.MediaCommands.Play%2A> command and the method `IsPlaying` returns `false`, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is set to `true`; otherwise, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is set to `false`.  If the <xref:System.Windows.Input.CanExecuteRoutedEventArgs.Command%2A> property is equal to the <xref:System.Windows.Input.MediaCommands.Stop%2A> command and the method `IsPlaying` returns `true`, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is set to `true`; otherwise, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is set to `false`.  \\n  \\n [!code-csharp[commandingoverviewsnippets#CommandingOverviewMultipleCanExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewmultiplecanexecute)]\\n [!code-vb[commandingoverviewsnippets#CommandingOverviewMultipleCanExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewmultiplecanexecute)]\"\n  syntax:\n    content: public System.Windows.Input.ICommand Command { get; }\n    return:\n      type: System.Windows.Input.ICommand\n      description: The command. Unless the command is a custom command, this is generally a <xref href=\"System.Windows.Input.RoutedCommand\"></xref>. There is no default value.\n  overload: System.Windows.Input.CanExecuteRoutedEventArgs.Command*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/CanExecuteRoutedEventArgs.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.CanExecuteRoutedEventArgs.ContinueRouting\n  commentId: P:System.Windows.Input.CanExecuteRoutedEventArgs.ContinueRouting\n  id: ContinueRouting\n  parent: System.Windows.Input.CanExecuteRoutedEventArgs\n  langs:\n  - csharp\n  name: ContinueRouting\n  nameWithType: CanExecuteRoutedEventArgs.ContinueRouting\n  fullName: CanExecuteRoutedEventArgs.ContinueRouting\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Determines whether the input routed event that invoked the command should continue to route through the element tree.\n  syntax:\n    content: public bool ContinueRouting { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if the routed event should continue to route through element tree; otherwise, `false`.   The default value is `false`.'\n  overload: System.Windows.Input.CanExecuteRoutedEventArgs.ContinueRouting*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/CanExecuteRoutedEventArgs.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.CanExecuteRoutedEventArgs.InvokeEventHandler(System.Delegate,System.Object)\n  commentId: M:System.Windows.Input.CanExecuteRoutedEventArgs.InvokeEventHandler(System.Delegate,System.Object)\n  id: InvokeEventHandler(System.Delegate,System.Object)\n  parent: System.Windows.Input.CanExecuteRoutedEventArgs\n  langs:\n  - csharp\n  name: InvokeEventHandler(Delegate, Object)\n  nameWithType: CanExecuteRoutedEventArgs.InvokeEventHandler(Delegate, Object)\n  fullName: CanExecuteRoutedEventArgs.InvokeEventHandler(Delegate, Object)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  syntax:\n    content: protected override void InvokeEventHandler (Delegate genericHandler, object target);\n    parameters:\n    - id: genericHandler\n      type: System.Delegate\n      description: ''\n    - id: target\n      type: System.Object\n      description: ''\n  overload: System.Windows.Input.CanExecuteRoutedEventArgs.InvokeEventHandler*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/CanExecuteRoutedEventArgs.xml\n- uid: System.Windows.Input.CanExecuteRoutedEventArgs.Parameter\n  commentId: P:System.Windows.Input.CanExecuteRoutedEventArgs.Parameter\n  id: Parameter\n  parent: System.Windows.Input.CanExecuteRoutedEventArgs\n  langs:\n  - csharp\n  name: Parameter\n  nameWithType: CanExecuteRoutedEventArgs.Parameter\n  fullName: CanExecuteRoutedEventArgs.Parameter\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the command specific data.\n  remarks: \"The command parameter is used to pass specific information to the command when it is executed.  The type of the data is defined by the command.  \\n  \\n <xref:System.Windows.Input.CanExecuteRoutedEventArgs.Parameter%2A> can be `null`. Many commands do not process or expect command parameters.\"\n  example:\n  - \"The following example shows up to use a <xref:System.Windows.Controls.Button> as the command source for a custom command.  The <xref:System.Windows.Input.ICommandSource.Command%2A> property of the <xref:System.Windows.Controls.Button> is set to the custom <xref:System.Windows.Input.RoutedCommand> called `customComand` and the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A> is used to pass the value of the <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> property of a <xref:System.Windows.Controls.Slider> control.  This is accomplishment by using databinding to bind the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A> to the <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> property.  The converter in the binding expression is a custom <xref:System.Windows.Data.IValueConverter> which converts <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> into an <xref:System.Int32> before binding it to the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  \\n  \\n [!code-xml[invalidaterequerywithdispatchertimer#InvalidateSampleSliderCommandParameter](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml#invalidatesampleslidercommandparameter)]\"\n  syntax:\n    content: public object Parameter { get; }\n    return:\n      type: System.Object\n      description: The command data.  The default value is `null`.\n  overload: System.Windows.Input.CanExecuteRoutedEventArgs.Parameter*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/CanExecuteRoutedEventArgs.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.Windows.RoutedEventArgs\n  parent: System.Windows\n  isExternal: false\n  name: RoutedEventArgs\n  nameWithType: RoutedEventArgs\n  fullName: System.Windows.RoutedEventArgs\n- uid: System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute\n  parent: System.Windows.Input.CanExecuteRoutedEventArgs\n  isExternal: false\n  name: CanExecute\n  nameWithType: CanExecuteRoutedEventArgs.CanExecute\n  fullName: CanExecuteRoutedEventArgs.CanExecute\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.Input.CanExecuteRoutedEventArgs.Command\n  parent: System.Windows.Input.CanExecuteRoutedEventArgs\n  isExternal: false\n  name: Command\n  nameWithType: CanExecuteRoutedEventArgs.Command\n  fullName: CanExecuteRoutedEventArgs.Command\n- uid: System.Windows.Input.ICommand\n  parent: System.Windows.Input\n  isExternal: false\n  name: ICommand\n  nameWithType: ICommand\n  fullName: System.Windows.Input.ICommand\n- uid: System.Windows.Input.CanExecuteRoutedEventArgs.ContinueRouting\n  parent: System.Windows.Input.CanExecuteRoutedEventArgs\n  isExternal: false\n  name: ContinueRouting\n  nameWithType: CanExecuteRoutedEventArgs.ContinueRouting\n  fullName: CanExecuteRoutedEventArgs.ContinueRouting\n- uid: System.Windows.Input.CanExecuteRoutedEventArgs.InvokeEventHandler(System.Delegate,System.Object)\n  parent: System.Windows.Input.CanExecuteRoutedEventArgs\n  isExternal: false\n  name: InvokeEventHandler(Delegate, Object)\n  nameWithType: CanExecuteRoutedEventArgs.InvokeEventHandler(Delegate, Object)\n  fullName: CanExecuteRoutedEventArgs.InvokeEventHandler(Delegate, Object)\n- uid: System.Delegate\n  parent: System\n  isExternal: false\n  name: Delegate\n  nameWithType: Delegate\n  fullName: System.Delegate\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Windows.Input.CanExecuteRoutedEventArgs.Parameter\n  parent: System.Windows.Input.CanExecuteRoutedEventArgs\n  isExternal: false\n  name: Parameter\n  nameWithType: CanExecuteRoutedEventArgs.Parameter\n  fullName: CanExecuteRoutedEventArgs.Parameter\n- uid: System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute*\n  parent: System.Windows.Input.CanExecuteRoutedEventArgs\n  isExternal: false\n  name: CanExecute\n  nameWithType: CanExecuteRoutedEventArgs.CanExecute\n  fullName: CanExecuteRoutedEventArgs.CanExecute\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/CanExecuteRoutedEventArgs.xml\n- uid: System.Windows.Input.CanExecuteRoutedEventArgs.Command*\n  parent: System.Windows.Input.CanExecuteRoutedEventArgs\n  isExternal: false\n  name: Command\n  nameWithType: CanExecuteRoutedEventArgs.Command\n  fullName: CanExecuteRoutedEventArgs.Command\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/CanExecuteRoutedEventArgs.xml\n- uid: System.Windows.Input.CanExecuteRoutedEventArgs.ContinueRouting*\n  parent: System.Windows.Input.CanExecuteRoutedEventArgs\n  isExternal: false\n  name: ContinueRouting\n  nameWithType: CanExecuteRoutedEventArgs.ContinueRouting\n  fullName: CanExecuteRoutedEventArgs.ContinueRouting\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/CanExecuteRoutedEventArgs.xml\n- uid: System.Windows.Input.CanExecuteRoutedEventArgs.InvokeEventHandler*\n  parent: System.Windows.Input.CanExecuteRoutedEventArgs\n  isExternal: false\n  name: InvokeEventHandler\n  nameWithType: CanExecuteRoutedEventArgs.InvokeEventHandler\n  fullName: CanExecuteRoutedEventArgs.InvokeEventHandler\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/CanExecuteRoutedEventArgs.xml\n- uid: System.Windows.Input.CanExecuteRoutedEventArgs.Parameter*\n  parent: System.Windows.Input.CanExecuteRoutedEventArgs\n  isExternal: false\n  name: Parameter\n  nameWithType: CanExecuteRoutedEventArgs.Parameter\n  fullName: CanExecuteRoutedEventArgs.Parameter\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/CanExecuteRoutedEventArgs.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.EventArgs.Empty\n  parent: System.EventArgs\n  isExternal: false\n  name: Empty\n  nameWithType: EventArgs.Empty\n  fullName: EventArgs.Empty\n- uid: System.Windows.RoutedEventArgs.Handled\n  parent: System.Windows.RoutedEventArgs\n  isExternal: false\n  name: Handled\n  nameWithType: RoutedEventArgs.Handled\n  fullName: RoutedEventArgs.Handled\n- uid: System.Windows.RoutedEventArgs.OnSetSource(System.Object)\n  parent: System.Windows.RoutedEventArgs\n  isExternal: false\n  name: OnSetSource(Object)\n  nameWithType: RoutedEventArgs.OnSetSource(Object)\n  fullName: RoutedEventArgs.OnSetSource(Object)\n- uid: System.Windows.RoutedEventArgs.OriginalSource\n  parent: System.Windows.RoutedEventArgs\n  isExternal: false\n  name: OriginalSource\n  nameWithType: RoutedEventArgs.OriginalSource\n  fullName: RoutedEventArgs.OriginalSource\n- uid: System.Windows.RoutedEventArgs.RoutedEvent\n  parent: System.Windows.RoutedEventArgs\n  isExternal: false\n  name: RoutedEvent\n  nameWithType: RoutedEventArgs.RoutedEvent\n  fullName: RoutedEventArgs.RoutedEvent\n- uid: System.Windows.RoutedEventArgs.Source\n  parent: System.Windows.RoutedEventArgs\n  isExternal: false\n  name: Source\n  nameWithType: RoutedEventArgs.Source\n  fullName: RoutedEventArgs.Source\n"}