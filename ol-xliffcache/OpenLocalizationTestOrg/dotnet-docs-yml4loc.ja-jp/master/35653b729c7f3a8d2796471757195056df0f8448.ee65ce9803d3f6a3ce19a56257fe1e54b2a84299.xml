{"nodes":[{"content":"Represents a predicate text string that is used to filter property searches.","nodes":[{"pos":[0,76],"content":"Represents a predicate text string that is used to filter property searches.","nodes":[{"content":"Represents a predicate text string that is used to filter property searches.","pos":[0,76]}]}],"pos":[828,905],"yaml":true},{"content":"Creates a new instance of the <xref href=\"System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate\"></xref> class with the specified search string.","nodes":[{"pos":[0,161],"content":"Creates a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate\"&gt;&lt;/xref&gt;</ph> class with the specified search string.","source":"Creates a new instance of the <xref href=\"System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate\"></xref> class with the specified search string."}],"pos":[2531,2693],"yaml":true},{"content":"The predicate string that is used for the match process.","nodes":[{"pos":[0,56],"content":"The predicate string that is used for the match process.","nodes":[{"content":"The predicate string that is used for the match process.","pos":[0,56]}]}],"pos":[2848,2905],"yaml":true},{"content":"Indicates whether a case-insensitive match of the predicate string is contained within the target string.","nodes":[{"pos":[0,105],"content":"Indicates whether a case-insensitive match of the predicate string is contained within the target string.","nodes":[{"content":"Indicates whether a case-insensitive match of the predicate string is contained within the target string.","pos":[0,105]}]}],"pos":[4173,4279],"yaml":true},{"content":"The string filter.","nodes":[{"pos":[0,18],"content":"The string filter.","nodes":[{"content":"The string filter.","pos":[0,18]}]}],"pos":[4423,4442],"yaml":true},{"content":"`true` if a case-insensitive match of the predicate string is contained within the target string; otherwise, `false`.","nodes":[{"pos":[0,117],"content":"<ph id=\"ph1\">`true`</ph> if a case-insensitive match of the predicate string is contained within the target string; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if a case-insensitive match of the predicate string is contained within the target string; otherwise, `false`."}],"pos":[4500,4620],"yaml":true},{"content":"Gets the <xref href=\"System.String\"></xref> that is used to match a property filter predicate string to a target string.","nodes":[{"pos":[0,120],"content":"Gets the <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> that is used to match a property filter predicate string to a target string.","source":"Gets the <xref href=\"System.String\"></xref> that is used to match a property filter predicate string to a target string."}],"pos":[5845,5966],"yaml":true},{"content":"A predicate string that contains text for matching.","nodes":[{"pos":[0,51],"content":"A predicate string that contains text for matching.","nodes":[{"content":"A predicate string that contains text for matching.","pos":[0,51]}]}],"pos":[6082,6134],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate\n  commentId: T:System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate\n  id: PropertyFilterPredicate\n  children:\n  - System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate.#ctor(System.String)\n  - System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate.Match(System.String)\n  - System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate.MatchText\n  langs:\n  - csharp\n  name: PropertyFilterPredicate\n  nameWithType: PropertyFilterPredicate\n  fullName: System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate\n  type: Class\n  assemblies:\n  - System.Activities.Presentation\n  namespace: System.Activities.Presentation.PropertyEditing\n  summary: Represents a predicate text string that is used to filter property searches.\n  syntax:\n    content: public class PropertyFilterPredicate\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Presentation.PropertyEditing/PropertyFilterPredicate.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate.#ctor(System.String)\n  commentId: M:System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate\n  langs:\n  - csharp\n  name: PropertyFilterPredicate(String)\n  nameWithType: PropertyFilterPredicate.PropertyFilterPredicate(String)\n  fullName: PropertyFilterPredicate.PropertyFilterPredicate(String)\n  type: Constructor\n  assemblies:\n  - System.Activities.Presentation\n  namespace: System.Activities.Presentation.PropertyEditing\n  summary: Creates a new instance of the <xref href=\"System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate\"></xref> class with the specified search string.\n  syntax:\n    content: public PropertyFilterPredicate (string matchText);\n    parameters:\n    - id: matchText\n      type: System.String\n      description: The predicate string that is used for the match process.\n  overload: System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Presentation.PropertyEditing/PropertyFilterPredicate.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate.Match(System.String)\n  commentId: M:System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate.Match(System.String)\n  id: Match(System.String)\n  parent: System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate\n  langs:\n  - csharp\n  name: Match(String)\n  nameWithType: PropertyFilterPredicate.Match(String)\n  fullName: PropertyFilterPredicate.Match(String)\n  type: Method\n  assemblies:\n  - System.Activities.Presentation\n  namespace: System.Activities.Presentation.PropertyEditing\n  summary: Indicates whether a case-insensitive match of the predicate string is contained within the target string.\n  syntax:\n    content: public virtual bool Match (string target);\n    parameters:\n    - id: target\n      type: System.String\n      description: The string filter.\n    return:\n      type: System.Boolean\n      description: '`true` if a case-insensitive match of the predicate string is contained within the target string; otherwise, `false`.'\n  overload: System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate.Match*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Presentation.PropertyEditing/PropertyFilterPredicate.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate.MatchText\n  commentId: P:System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate.MatchText\n  id: MatchText\n  parent: System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate\n  langs:\n  - csharp\n  name: MatchText\n  nameWithType: PropertyFilterPredicate.MatchText\n  fullName: PropertyFilterPredicate.MatchText\n  type: Property\n  assemblies:\n  - System.Activities.Presentation\n  namespace: System.Activities.Presentation.PropertyEditing\n  summary: Gets the <xref href=\"System.String\"></xref> that is used to match a property filter predicate string to a target string.\n  syntax:\n    content: protected string MatchText { get; }\n    return:\n      type: System.String\n      description: A predicate string that contains text for matching.\n  overload: System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate.MatchText*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Presentation.PropertyEditing/PropertyFilterPredicate.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate.#ctor(System.String)\n  parent: System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate\n  isExternal: false\n  name: PropertyFilterPredicate(String)\n  nameWithType: PropertyFilterPredicate.PropertyFilterPredicate(String)\n  fullName: PropertyFilterPredicate.PropertyFilterPredicate(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate.Match(System.String)\n  parent: System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate\n  isExternal: false\n  name: Match(String)\n  nameWithType: PropertyFilterPredicate.Match(String)\n  fullName: PropertyFilterPredicate.Match(String)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate.MatchText\n  parent: System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate\n  isExternal: false\n  name: MatchText\n  nameWithType: PropertyFilterPredicate.MatchText\n  fullName: PropertyFilterPredicate.MatchText\n- uid: System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate.#ctor*\n  parent: System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate\n  isExternal: false\n  name: PropertyFilterPredicate\n  nameWithType: PropertyFilterPredicate.PropertyFilterPredicate\n  fullName: PropertyFilterPredicate.PropertyFilterPredicate\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Presentation.PropertyEditing/PropertyFilterPredicate.xml\n- uid: System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate.Match*\n  parent: System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate\n  isExternal: false\n  name: Match\n  nameWithType: PropertyFilterPredicate.Match\n  fullName: PropertyFilterPredicate.Match\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Presentation.PropertyEditing/PropertyFilterPredicate.xml\n- uid: System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate.MatchText*\n  parent: System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate\n  isExternal: false\n  name: MatchText\n  nameWithType: PropertyFilterPredicate.MatchText\n  fullName: PropertyFilterPredicate.MatchText\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities.Presentation.PropertyEditing/PropertyFilterPredicate.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}