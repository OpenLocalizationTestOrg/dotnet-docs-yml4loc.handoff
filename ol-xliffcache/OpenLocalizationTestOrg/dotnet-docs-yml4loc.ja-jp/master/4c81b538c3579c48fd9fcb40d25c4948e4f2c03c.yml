### YamlMime:ManagedReference
items:
- uid: System.Runtime.InteropServices.SafeHandle
  commentId: T:System.Runtime.InteropServices.SafeHandle
  id: SafeHandle
  children:
  - System.Runtime.InteropServices.SafeHandle.#ctor
  - System.Runtime.InteropServices.SafeHandle.#ctor(System.IntPtr,System.Boolean)
  - System.Runtime.InteropServices.SafeHandle.Close
  - System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)
  - System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
  - System.Runtime.InteropServices.SafeHandle.DangerousRelease
  - System.Runtime.InteropServices.SafeHandle.Dispose
  - System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
  - System.Runtime.InteropServices.SafeHandle.Finalize
  - System.Runtime.InteropServices.SafeHandle.handle
  - System.Runtime.InteropServices.SafeHandle.IsClosed
  - System.Runtime.InteropServices.SafeHandle.IsInvalid
  - System.Runtime.InteropServices.SafeHandle.ReleaseHandle
  - System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
  - System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
  langs:
  - csharp
  name: SafeHandle
  nameWithType: SafeHandle
  fullName: System.Runtime.InteropServices.SafeHandle
  type: Class
  assemblies:
  - System.Runtime.Handles
  - mscorlib
  - System.Runtime.InteropServices
  - netstandard
  - System.Runtime
  namespace: System.Runtime.InteropServices
  summary: Represents a wrapper class for operating system handles. This class must be inherited.
  remarks: "The <xref:System.Runtime.InteropServices.SafeHandle> class provides critical finalization of handle resources, preventing handles from being reclaimed prematurely by garbage collection and from being recycled by Windows to reference unintended unmanaged objects.  \n  \n This topic includes the following sections:  \n  \n [Why SafeHandle?](#Why)   \n [What SafeHandle does](#Does)   \n [Classes derived from SafeHandle](#Derived)  \n  \n<a name=\"Why\"></a>   \n## Why SafeHandle?  \n Before the .NET Framework version 2.0, all operating system handles could only be encapsulated in the <xref:System.IntPtr> managed wrapper object. While this was a convenient way to interoperate with native code, handles could be leaked by asynchronous exceptions, such as a thread aborting unexpectedly or a stack overflow. These asynchronous exceptions are an obstacle to cleaning up operating system resources, and they can occur almost anywhere in your app.  \n  \n Although overrides to the <xref:System.Object.Finalize%2A?displayProperty=fullName> method allow cleanup of unmanaged resources when an object is being garbage collected, in some circumstances, finalizable objects can be reclaimed by garbage collection while executing a method within a platform invoke call. If a finalizer frees the handle passed to that platform invoke call, it could lead to handle corruption. The handle could also be reclaimed while your method is blocked during a platform invoke call, such as while reading a file.  \n  \n More critically, because Windows aggressively recycles handles, a handle could be recycled and point to another resource that might contain sensitive data. This is known as a recycle attack and can potentially corrupt data and be a security threat.  \n  \n<a name=\"Does\"></a>   \n## What SafeHandle does  \n The <xref:System.Runtime.InteropServices.SafeHandle> class simplifies several of these object lifetime issues, and is integrated with platform invoke so that operating system resources are not leaked. The <xref:System.Runtime.InteropServices.SafeHandle> class resolves object lifetime issues by assigning and releasing handles without interruption. It contains a critical finalizer that ensures that the handle is closed and is guaranteed to run during unexpected <xref:System.AppDomain> unloads, even in cases when the platform invoke call is assumed to be in a corrupted state.  \n  \n Because <xref:System.Runtime.InteropServices.SafeHandle> inherits from <xref:System.Runtime.ConstrainedExecution.CriticalFinalizerObject>, all the noncritical finalizers are called before any of the critical finalizers. The finalizers are called on objects that are no longer live during the same garbage collection pass. For example, a <xref:System.IO.FileStream> object can run a normal finalizer to flush out existing buffered data without the risk of the handle being leaked or recycled. This very weak ordering between critical and noncritical finalizers is not intended for general use. It exists primarily to assist in the migration of existing libraries by allowing those libraries to use <xref:System.Runtime.InteropServices.SafeHandle> without altering their semantics. Additionally, the critical finalizer and anything it calls, such as the <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle?displayProperty=fullName> method, must be in a constrained execution region. This imposes constraints on what code can be written within the finalizer's call graph.  \n  \n Platform invoke operations automatically increment the reference count of handles encapsulated by a <xref:System.Runtime.InteropServices.SafeHandle> and decrement them upon completion. This ensures that the handle will not be recycled or closed unexpectedly.  \n  \n You can specify ownership of the underlying handle when constructing <xref:System.Runtime.InteropServices.SafeHandle> objects by supplying a value to the `ownsHandle` argument in the <xref:System.Runtime.InteropServices.SafeHandle> class constructor. This controls whether the <xref:System.Runtime.InteropServices.SafeHandle> object will release the handle after the object has been disposed.  This is useful for handles with peculiar lifetime requirements or for consuming a handle whose lifetime is controlled by someone else.  \n  \n<a name=\"Derived\"></a>   \n## Classes derived from SafeHandle  \n <xref:System.Runtime.InteropServices.SafeHandle> is an abstract wrapper class for operating system handles. Deriving from this class is difficult. Instead, use the derived classes in the <xref:Microsoft.Win32.SafeHandles> namespace that provide safe handles for the following:  \n  \n-   Files (the <xref:Microsoft.Win32.SafeHandles.SafeFileHandle> class).  \n  \n-   Memory mapped files (the <xref:Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle> class).  \n  \n-   Pipes (the <xref:Microsoft.Win32.SafeHandles.SafePipeHandle> class).  \n  \n-   Memory views (the <xref:Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle> class).  \n  \n-   Cryptography constructs (the <xref:Microsoft.Win32.SafeHandles.SafeNCryptHandle>, <xref:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle>, <xref:Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle>, and <xref:Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle> classes).  \n  \n-   Processes (the <xref:Microsoft.Win32.SafeHandles.SafeProcessHandle> class).  \n  \n-   Registry keys (the <xref:Microsoft.Win32.SafeHandles.SafeRegistryHandle> class).  \n  \n-   Wait handles (the <xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> class)."
  example:
  - "The following code example creates a custom safe handle for an operating system file handle, deriving from <xref:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid>. It reads bytes from a file and displays their hexadecimal values. It also contains a fault testing harness that causes the thread to abort, but the handle value is freed.  When using an <xref:System.IntPtr> to represent handles, the handle is occasionally leaked due to the asynchronous thread abort.  \n  \n You will need a text file in the same folder as the compiled application. Assuming that you name the application \"HexViewer\", the command line usage is:  \n  \n `HexViewer <filename> -Fault`  \n  \n Optionally specify `-Fault` to intentionally attempt to leak the handle by aborting the thread in a certain window. Use the Windows Perform.exe tool to monitor handle counts while injecting faults.  \n  \n [!code-csharp[SafeHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/SafeHandle/CS/program.cs#1)]"
  syntax:
    content: >-
      [System.Security.SecurityCritical]

      public abstract class SafeHandle : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, IDisposable
  inheritance:
  - System.Object
  derivedClasses:
  - Microsoft.Win32.SafeHandles.SafeAccessTokenHandle
  - Microsoft.Win32.SafeHandles.SafeFileHandle
  - Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid
  - Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
  - Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle
  - Microsoft.Win32.SafeHandles.SafeNCryptHandle
  - Microsoft.Win32.SafeHandles.SafePipeHandle
  - Microsoft.Win32.SafeHandles.SafeProcessHandle
  - Microsoft.Win32.SafeHandles.SafeRegistryHandle
  - Microsoft.Win32.SafeHandles.SafeWaitHandle
  - Microsoft.Win32.SafeHandles.SafeX509ChainHandle
  - System.Runtime.InteropServices.SafeBuffer
  - System.Security.Authentication.ExtendedProtection.ChannelBinding
  - System.Security.Cryptography.SafeEvpPKeyHandle
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: System.Security.SecurityCriticalAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeHandle.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.SafeHandle.#ctor
  commentId: M:System.Runtime.InteropServices.SafeHandle.#ctor
  id: '#ctor'
  parent: System.Runtime.InteropServices.SafeHandle
  langs:
  - csharp
  name: SafeHandle()
  nameWithType: SafeHandle.SafeHandle()
  fullName: SafeHandle.SafeHandle()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  syntax:
    content: protected SafeHandle ();
    parameters: []
  overload: System.Runtime.InteropServices.SafeHandle.#ctor*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeHandle.xml
- uid: System.Runtime.InteropServices.SafeHandle.#ctor(System.IntPtr,System.Boolean)
  commentId: M:System.Runtime.InteropServices.SafeHandle.#ctor(System.IntPtr,System.Boolean)
  id: '#ctor(System.IntPtr,System.Boolean)'
  parent: System.Runtime.InteropServices.SafeHandle
  langs:
  - csharp
  name: SafeHandle(IntPtr, Boolean)
  nameWithType: SafeHandle.SafeHandle(IntPtr, Boolean)
  fullName: SafeHandle.SafeHandle(IntPtr, Boolean)
  type: Constructor
  assemblies:
  - System.Runtime.Handles
  - mscorlib
  - System.Runtime.InteropServices
  - netstandard
  - System.Runtime
  namespace: System.Runtime.InteropServices
  summary: Initializes a new instance of the <xref href="System.Runtime.InteropServices.SafeHandle"></xref> class with the specified invalid handle value.
  remarks: If the `ownsHandle` parameter is `false`, <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> is never called; thus, it is not recommended to use this parameter value as your code may leak resources.
  syntax:
    content: protected SafeHandle (IntPtr invalidHandleValue, bool ownsHandle);
    parameters:
    - id: invalidHandleValue
      type: System.IntPtr
      description: The value of an invalid handle (usually 0 or -1).  Your implementation of <xref href="System.Runtime.InteropServices.SafeHandle.IsInvalid"></xref> should return `true` for this value.
    - id: ownsHandle
      type: System.Boolean
      description: '`true` to reliably let <xref href="System.Runtime.InteropServices.SafeHandle"></xref> release the handle during the finalization phase; otherwise, `false` (not recommended).'
  overload: System.Runtime.InteropServices.SafeHandle.#ctor*
  exceptions:
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: The derived class resides in an assembly without unmanaged code access permission.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeHandle.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.SafeHandle.Close
  commentId: M:System.Runtime.InteropServices.SafeHandle.Close
  id: Close
  parent: System.Runtime.InteropServices.SafeHandle
  langs:
  - csharp
  name: Close()
  nameWithType: SafeHandle.Close()
  fullName: SafeHandle.Close()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Runtime.InteropServices
  summary: Marks the handle for releasing and freeing resources.
  remarks: "Calling the <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> or <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> method allows the resources to be freed. This might not happen immediately if other threads are using the same safe handle object, but will happen as soon as that is no longer the case. Although most classes that use the <xref:System.Runtime.InteropServices.SafeHandle> class do not need to provide a finalizer, this is sometimes necessary (for example, to flush out file buffers or to write some data back into memory). In this case, the class can provide a finalizer that is guaranteed to run before the <xref:System.Runtime.InteropServices.SafeHandle> critical finalizer runs.  \n  \n Call the <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> or <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> method when you are finished using the <xref:System.Runtime.InteropServices.SafeHandle> object.  \n  \n> [!NOTE]\n>  Always call <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> or <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> before you release your last reference to the <xref:System.Runtime.InteropServices.SafeHandle> object. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Runtime.InteropServices.SafeHandle> object's <xref:System.Runtime.InteropServices.SafeHandle.Finalize%2A> method."
  syntax:
    content: >-
      [System.Security.SecurityCritical]

      public void Close ();
    parameters: []
  overload: System.Runtime.InteropServices.SafeHandle.Close*
  exceptions: []
  attributes:
  - type: System.Security.SecurityCriticalAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeHandle.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)
  commentId: M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)
  id: DangerousAddRef(System.Boolean@)
  parent: System.Runtime.InteropServices.SafeHandle
  langs:
  - csharp
  name: DangerousAddRef(Boolean)
  nameWithType: SafeHandle.DangerousAddRef(Boolean)
  fullName: SafeHandle.DangerousAddRef(Boolean)
  type: Method
  assemblies:
  - System.Runtime.Handles
  - mscorlib
  - System.Runtime.InteropServices
  - netstandard
  - System.Runtime
  namespace: System.Runtime.InteropServices
  summary: Manually increments the reference counter on <xref href="System.Runtime.InteropServices.SafeHandle"></xref> instances.
  remarks: "The <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> method prevents the common language runtime from reclaiming memory used by a handle (which occurs when the runtime calls the <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> method). You can use this method to manually increment the reference count on a <xref:System.Runtime.InteropServices.SafeHandle> instance. <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> returns a Boolean value using a `ref` parameter (`success`) that indicates whether the reference count was incremented successfully. This allows your program logic to back out in case of failure. You should set `success` to `false` before calling <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A>. If `success` is `true`, avoid resource leaks by matching the call to <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> with a corresponding call to <xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A>.  \n  \n> [!CAUTION]\n>  This method is intended for advanced users and must always be used carefully. To avoid leaking handle resources, always call this method inside a constrained execution region (CER), where a thread abort cannot interrupt processing."
  syntax:
    content: public void DangerousAddRef (ref bool success);
    parameters:
    - id: success
      type: System.Boolean
      description: '`true` if the reference counter was successfully incremented; otherwise, `false`.'
  overload: System.Runtime.InteropServices.SafeHandle.DangerousAddRef*
  exceptions: []
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeHandle.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
  commentId: M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
  id: DangerousGetHandle
  parent: System.Runtime.InteropServices.SafeHandle
  langs:
  - csharp
  name: DangerousGetHandle()
  nameWithType: SafeHandle.DangerousGetHandle()
  fullName: SafeHandle.DangerousGetHandle()
  type: Method
  assemblies:
  - System.Runtime.Handles
  - mscorlib
  - System.Runtime.InteropServices
  - netstandard
  - System.Runtime
  namespace: System.Runtime.InteropServices
  summary: Returns the value of the <xref href="System.Runtime.InteropServices.SafeHandle.handle"></xref> field.
  remarks: "You can use this method to retrieve the actual handle value from an instance of the <xref:System.Runtime.InteropServices.SafeHandle> derived class. This method is needed for backwards compatibility because many properties in the .NET Framework return `IntPtr` handle types. `IntPtr` handle types are platform-specific types used to represent a pointer or a handle.  \n  \n> [!CAUTION]\n>  Using the <xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A> method can pose security risks because, if the handle has been marked as invalid with <xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A>, <xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A> still returns the original, potentially stale handle value. The returned handle can also be recycled at any point. At best, this means the handle might suddenly stop working. At worst, if the handle or the resource that the handle represents is exposed to untrusted code, this can lead to a recycling security attack on the reused or returned handle. For example, an untrusted caller can query data on the handle just returned and receive information for an entirely unrelated resource. See the <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> and the <xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A> methods for more information about using the <xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A> methodsafely."
  syntax:
    content: public IntPtr DangerousGetHandle ();
    parameters: []
    return:
      type: System.IntPtr
      description: An `IntPtr` representing the value of the <xref href="System.Runtime.InteropServices.SafeHandle.handle"></xref> field. If the handle has been marked invalid with <xref href="System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid"></xref>, this method still returns the original handle value, which can be a stale value.
  overload: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle*
  exceptions: []
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeHandle.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.SafeHandle.DangerousRelease
  commentId: M:System.Runtime.InteropServices.SafeHandle.DangerousRelease
  id: DangerousRelease
  parent: System.Runtime.InteropServices.SafeHandle
  langs:
  - csharp
  name: DangerousRelease()
  nameWithType: SafeHandle.DangerousRelease()
  fullName: SafeHandle.DangerousRelease()
  type: Method
  assemblies:
  - System.Runtime.Handles
  - mscorlib
  - System.Runtime.InteropServices
  - netstandard
  - System.Runtime
  namespace: System.Runtime.InteropServices
  summary: Manually decrements the reference counter on a <xref href="System.Runtime.InteropServices.SafeHandle"></xref> instance.
  remarks: "The <xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A> method is the counterpart to <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A>. You should always match a call to the <xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A> method with a successful call to <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A>.  \n  \n> [!CAUTION]\n>  This method is intended for advanced users and must always be used carefully. To avoid leaking handle resources, always call this method inside a constrained execution region (CER), where a thread abort cannot interrupt processing. In the same way that unmatched <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> calls can cause resource leaks, unmatched <xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A> calls can cause invalid handle states to become visible to other threads. Do not expose <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> or <xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A> calls to untrusted code."
  syntax:
    content: public void DangerousRelease ();
    parameters: []
  overload: System.Runtime.InteropServices.SafeHandle.DangerousRelease*
  exceptions: []
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeHandle.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.SafeHandle.Dispose
  commentId: M:System.Runtime.InteropServices.SafeHandle.Dispose
  id: Dispose
  parent: System.Runtime.InteropServices.SafeHandle
  langs:
  - csharp
  name: Dispose()
  nameWithType: SafeHandle.Dispose()
  fullName: SafeHandle.Dispose()
  type: Method
  assemblies:
  - System.Runtime.Handles
  - mscorlib
  - System.Runtime.InteropServices
  - netstandard
  - System.Runtime
  namespace: System.Runtime.InteropServices
  summary: Releases all resources used by the <xref href="System.Runtime.InteropServices.SafeHandle"></xref> class.
  remarks: "Calling the <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> or <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> method allows the resources to be freed. This might not happen immediately if other threads are using the same instance of the safe handle, but will happen as soon as that is no longer the case. Although most classes using <xref:System.Runtime.InteropServices.SafeHandle> do not need to provide a finalizer, this is sometimes necessary (for example, to flush out file buffers or to write some data back into memory). In this case, they can provide a finalizer that is guaranteed to run before the <xref:System.Runtime.InteropServices.SafeHandle> critical finalizer runs.  \n  \n Call the <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> or <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> method when you are finished using the <xref:System.Runtime.InteropServices.SafeHandle> object. The <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> method leaves the <xref:System.Runtime.InteropServices.SafeHandle> object in an unusable state.  \n  \n> [!NOTE]\n>  Always call the <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> or <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> method before you release your last reference to the <xref:System.Runtime.InteropServices.SafeHandle> object. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Runtime.InteropServices.SafeHandle> object's <xref:System.Runtime.InteropServices.SafeHandle.Finalize%2A> method."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Runtime.InteropServices.SafeHandle.Dispose*
  exceptions: []
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeHandle.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
  commentId: M:System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Runtime.InteropServices.SafeHandle
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: SafeHandle.Dispose(Boolean)
  fullName: SafeHandle.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Runtime.Handles
  - mscorlib
  - System.Runtime.InteropServices
  - netstandard
  - System.Runtime
  namespace: System.Runtime.InteropServices
  summary: Releases the unmanaged resources used by the <xref href="System.Runtime.InteropServices.SafeHandle"></xref> class specifying whether to perform a normal dispose operation.
  remarks: You should never explicitly call the <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> method with the `disposing` parameter set to `false`.
  syntax:
    content: >-
      [System.Security.SecurityCritical]

      protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: '`true` for a normal dispose operation; `false` to finalize the handle.'
  overload: System.Runtime.InteropServices.SafeHandle.Dispose*
  exceptions: []
  attributes:
  - type: System.Security.SecurityCriticalAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeHandle.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.SafeHandle.Finalize
  commentId: M:System.Runtime.InteropServices.SafeHandle.Finalize
  id: Finalize
  parent: System.Runtime.InteropServices.SafeHandle
  langs:
  - csharp
  name: Finalize()
  nameWithType: SafeHandle.Finalize()
  fullName: SafeHandle.Finalize()
  type: Method
  assemblies:
  - System.Runtime.Handles
  - mscorlib
  - System.Runtime.InteropServices
  - netstandard
  - System.Runtime
  namespace: System.Runtime.InteropServices
  summary: Frees all resources associated with the handle.
  remarks: The <xref:System.Runtime.InteropServices.SafeHandle.Finalize%2A> method is the destructor for the <xref:System.Runtime.InteropServices.SafeHandle> class. Application code should not call this method directly.
  syntax:
    content: ~SafeHandle ();
    parameters: []
  overload: System.Runtime.InteropServices.SafeHandle.Finalize*
  exceptions: []
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeHandle.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.SafeHandle.handle
  commentId: F:System.Runtime.InteropServices.SafeHandle.handle
  id: handle
  parent: System.Runtime.InteropServices.SafeHandle
  langs:
  - csharp
  name: handle
  nameWithType: SafeHandle.handle
  fullName: SafeHandle.handle
  type: Field
  assemblies:
  - System.Runtime.Handles
  - mscorlib
  - System.Runtime.InteropServices
  - netstandard
  - System.Runtime
  namespace: System.Runtime.InteropServices
  summary: Specifies the handle to be wrapped.
  remarks: Do not expose the handle publicly (that is, outside of the derived class).
  syntax:
    content: protected IntPtr handle;
    return:
      type: System.IntPtr
      description: ''
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeHandle.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.SafeHandle.IsClosed
  commentId: P:System.Runtime.InteropServices.SafeHandle.IsClosed
  id: IsClosed
  parent: System.Runtime.InteropServices.SafeHandle
  langs:
  - csharp
  name: IsClosed
  nameWithType: SafeHandle.IsClosed
  fullName: SafeHandle.IsClosed
  type: Property
  assemblies:
  - System.Runtime.Handles
  - mscorlib
  - System.Runtime.InteropServices
  - netstandard
  - System.Runtime
  namespace: System.Runtime.InteropServices
  summary: Gets a value indicating whether the handle is closed.
  remarks: "The <xref:System.Runtime.InteropServices.SafeHandle.IsClosed%2A> method returns a value indicating whether the <xref:System.Runtime.InteropServices.SafeHandle> object's handle is no longer associated with a native resource. This differs from the definition of the <xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A> property, which computes whether a given handle is always considered invalid. The <xref:System.Runtime.InteropServices.SafeHandle.IsClosed%2A> method returns a `true` value in the following cases:  \n  \n-   The <xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A> method was called.  \n  \n-   The <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> method or <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> method was called and there are no references to the <xref:System.Runtime.InteropServices.SafeHandle> object on other threads."
  syntax:
    content: >-
      [get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)]

      public bool IsClosed { get; }
    return:
      type: System.Boolean
      description: '`true` if the handle is closed; otherwise, `false`.'
  overload: System.Runtime.InteropServices.SafeHandle.IsClosed*
  exceptions: []
  attributes:
  - type: 'get: System.Runtime.ConstrainedExecution.ReliabilityContract'
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeHandle.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.SafeHandle.IsInvalid
  commentId: P:System.Runtime.InteropServices.SafeHandle.IsInvalid
  id: IsInvalid
  parent: System.Runtime.InteropServices.SafeHandle
  langs:
  - csharp
  name: IsInvalid
  nameWithType: SafeHandle.IsInvalid
  fullName: SafeHandle.IsInvalid
  type: Property
  assemblies:
  - System.Runtime.Handles
  - mscorlib
  - System.Runtime.InteropServices
  - netstandard
  - System.Runtime
  namespace: System.Runtime.InteropServices
  summary: When overridden in a derived class, gets a value indicating whether the handle value is invalid.
  remarks: "Derived classes must implement the <xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A> property so that the common language runtime can determine whether critical finalization is required. Derived classes must provide an implementation that suits the general type of handle they support (0 or -1 is invalid). These classes can then be further derived for specific safe handle types.  \n  \n Unlike the <xref:System.Runtime.InteropServices.SafeHandle.IsClosed%2A> property, which reports whether the <xref:System.Runtime.InteropServices.SafeHandle> object has finished using the underlying handle, the <xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A> property calculates whether the given handle value is always considered invalid. Therefore, the <xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A> property always returns the same value for any one handle value."
  example:
  - "The following example checks if a file was opened successfully. This code example is part of a larger example provided for the <xref:System.Runtime.InteropServices.SafeHandle> class.  \n  \n [!code-csharp[SafeHandle#2](~/samples/snippets/csharp/VS_Snippets_CLR/SafeHandle/CS/program.cs#2)]"
  syntax:
    content: >-
      [get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)]

      public abstract bool IsInvalid { get; }
    return:
      type: System.Boolean
      description: '`true` if the handle value is invalid; otherwise, `false`.'
  overload: System.Runtime.InteropServices.SafeHandle.IsInvalid*
  exceptions: []
  attributes:
  - type: 'get: System.Runtime.ConstrainedExecution.ReliabilityContract'
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeHandle.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.SafeHandle.ReleaseHandle
  commentId: M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle
  id: ReleaseHandle
  parent: System.Runtime.InteropServices.SafeHandle
  langs:
  - csharp
  name: ReleaseHandle()
  nameWithType: SafeHandle.ReleaseHandle()
  fullName: SafeHandle.ReleaseHandle()
  type: Method
  assemblies:
  - System.Runtime.Handles
  - mscorlib
  - System.Runtime.InteropServices
  - netstandard
  - System.Runtime
  namespace: System.Runtime.InteropServices
  summary: When overridden in a derived class, executes the code required to free the handle.
  remarks: "The <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> method is guaranteed to be called only once and only if the handle is valid as defined by the <xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A> property. Implement this method in your <xref:System.Runtime.InteropServices.SafeHandle> derived classes to execute any code that is required to free the handle. Because one of the functions of <xref:System.Runtime.InteropServices.SafeHandle> is to guarantee prevention of resource leaks, the code in your implementation of <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> must never fail. The garbage collector calls <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A>after normal finalizers have been run for objects that were garbage collected at the same time. The garbage collector guarantees the resources to invoke this method and that the method will not be interrupted while it is in progress. This method will be prepared as a constrained execution region (CER) at instance construction time (along with all the methods in its statically determinable call graph). Although this prevents thread abort interrupts, you must still be careful not to introduce any fault paths in your overridden <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> method. In particular, apply the <xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute> attribute to any methods you call from <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A>. In most cases this code should be:  \n  \n `ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)`  \n  \n Additionally, for simple cleanup (for example, calling the Win32 API `CloseHandle` on a file handle) you can check the return value for the single platform invoke call. For complex cleanup, you may have a lot of program logic and many method calls, some of which might fail. You must ensure that your program logic has fallback code for each of those cases.  \n  \n If <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> returns `false` for any reason, it generates a [releaseHandleFailed](~/docs/framework/debug-trace-profile/releasehandlefailed-mda.md) Managed Debugging Assistant.  This helps you detect cases where your attempt to release resources fails."
  example:
  - "The following code example releases the handle and is part of a larger example provided for the <xref:System.Runtime.InteropServices.SafeHandle> class.  \n  \n [!code-csharp[SafeHandle#3](~/samples/snippets/csharp/VS_Snippets_CLR/SafeHandle/CS/program.cs#3)]"
  syntax:
    content: protected abstract bool ReleaseHandle ();
    parameters: []
    return:
      type: System.Boolean
      description: '`true` if the handle is released successfully; otherwise, in the event of a catastrophic failure, `false`. In this case, it generates a [releaseHandleFailed](~/docs/framework/debug-trace-profile/releasehandlefailed-mda.md) Managed Debugging Assistant.'
  overload: System.Runtime.InteropServices.SafeHandle.ReleaseHandle*
  exceptions: []
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeHandle.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
  id: SetHandle(System.IntPtr)
  parent: System.Runtime.InteropServices.SafeHandle
  langs:
  - csharp
  name: SetHandle(IntPtr)
  nameWithType: SafeHandle.SetHandle(IntPtr)
  fullName: SafeHandle.SetHandle(IntPtr)
  type: Method
  assemblies:
  - System.Runtime.Handles
  - mscorlib
  - System.Runtime.InteropServices
  - netstandard
  - System.Runtime
  namespace: System.Runtime.InteropServices
  summary: Sets the handle to the specified pre-existing handle.
  remarks: Use the <xref:System.Runtime.InteropServices.SafeHandle.SetHandle%2A> method only if you need to support a pre-existing handle (for example, if the handle is returned in a structure) because the .NET Framework COM interop infrastructure does not support marshaling output handles in a structure.
  syntax:
    content: protected void SetHandle (IntPtr handle);
    parameters:
    - id: handle
      type: System.IntPtr
      description: The pre-existing handle to use.
  overload: System.Runtime.InteropServices.SafeHandle.SetHandle*
  exceptions: []
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeHandle.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
  commentId: M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
  id: SetHandleAsInvalid
  parent: System.Runtime.InteropServices.SafeHandle
  langs:
  - csharp
  name: SetHandleAsInvalid()
  nameWithType: SafeHandle.SetHandleAsInvalid()
  fullName: SafeHandle.SetHandleAsInvalid()
  type: Method
  assemblies:
  - System.Runtime.Handles
  - mscorlib
  - System.Runtime.InteropServices
  - netstandard
  - System.Runtime
  namespace: System.Runtime.InteropServices
  summary: Marks a handle as no longer used.
  remarks: "Call the <xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A> method only when you know that your handle no longer references a resource. Doing so does not change the value of the <xref:System.Runtime.InteropServices.SafeHandle.handle> field; it only marks the handle as closed. The handle might then contain a potentially stale value. The effect of this call is that no attempt is made to free the resources.  \n  \n As with the <xref:System.Runtime.InteropServices.SafeHandle.SetHandle%2A> method, use <xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A> only if you need to support a pre-existing handle."
  syntax:
    content: public void SetHandleAsInvalid ();
    parameters: []
  overload: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid*
  exceptions: []
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeHandle.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.TypeLoadException
  parent: System
  isExternal: false
  name: TypeLoadException
  nameWithType: TypeLoadException
  fullName: System.TypeLoadException
- uid: System.Runtime.InteropServices.SafeHandle.#ctor
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: SafeHandle()
  nameWithType: SafeHandle.SafeHandle()
  fullName: SafeHandle.SafeHandle()
- uid: System.Runtime.InteropServices.SafeHandle.#ctor(System.IntPtr,System.Boolean)
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: SafeHandle(IntPtr, Boolean)
  nameWithType: SafeHandle.SafeHandle(IntPtr, Boolean)
  fullName: SafeHandle.SafeHandle(IntPtr, Boolean)
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Runtime.InteropServices.SafeHandle.Close
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: Close()
  nameWithType: SafeHandle.Close()
  fullName: SafeHandle.Close()
- uid: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: DangerousAddRef(Boolean)
  nameWithType: SafeHandle.DangerousAddRef(Boolean)
  fullName: SafeHandle.DangerousAddRef(Boolean)
- uid: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: DangerousGetHandle()
  nameWithType: SafeHandle.DangerousGetHandle()
  fullName: SafeHandle.DangerousGetHandle()
- uid: System.Runtime.InteropServices.SafeHandle.DangerousRelease
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: DangerousRelease()
  nameWithType: SafeHandle.DangerousRelease()
  fullName: SafeHandle.DangerousRelease()
- uid: System.Runtime.InteropServices.SafeHandle.Dispose
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: Dispose()
  nameWithType: SafeHandle.Dispose()
  fullName: SafeHandle.Dispose()
- uid: System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: SafeHandle.Dispose(Boolean)
  fullName: SafeHandle.Dispose(Boolean)
- uid: System.Runtime.InteropServices.SafeHandle.Finalize
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: Finalize()
  nameWithType: SafeHandle.Finalize()
  fullName: SafeHandle.Finalize()
- uid: System.Runtime.InteropServices.SafeHandle.handle
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: handle
  nameWithType: SafeHandle.handle
  fullName: SafeHandle.handle
- uid: System.Runtime.InteropServices.SafeHandle.IsClosed
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: IsClosed
  nameWithType: SafeHandle.IsClosed
  fullName: SafeHandle.IsClosed
- uid: System.Runtime.InteropServices.SafeHandle.IsInvalid
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: IsInvalid
  nameWithType: SafeHandle.IsInvalid
  fullName: SafeHandle.IsInvalid
- uid: System.Runtime.InteropServices.SafeHandle.ReleaseHandle
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: ReleaseHandle()
  nameWithType: SafeHandle.ReleaseHandle()
  fullName: SafeHandle.ReleaseHandle()
- uid: System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: SetHandle(IntPtr)
  nameWithType: SafeHandle.SetHandle(IntPtr)
  fullName: SafeHandle.SetHandle(IntPtr)
- uid: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: SetHandleAsInvalid()
  nameWithType: SafeHandle.SetHandleAsInvalid()
  fullName: SafeHandle.SetHandleAsInvalid()
- uid: System.Runtime.InteropServices.SafeHandle.#ctor*
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: SafeHandle
  nameWithType: SafeHandle.SafeHandle
  fullName: SafeHandle.SafeHandle
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeHandle.xml
- uid: System.Runtime.InteropServices.SafeHandle.Close*
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: Close
  nameWithType: SafeHandle.Close
  fullName: SafeHandle.Close
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeHandle.xml
- uid: System.Runtime.InteropServices.SafeHandle.DangerousAddRef*
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: DangerousAddRef
  nameWithType: SafeHandle.DangerousAddRef
  fullName: SafeHandle.DangerousAddRef
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeHandle.xml
- uid: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle*
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: DangerousGetHandle
  nameWithType: SafeHandle.DangerousGetHandle
  fullName: SafeHandle.DangerousGetHandle
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeHandle.xml
- uid: System.Runtime.InteropServices.SafeHandle.DangerousRelease*
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: DangerousRelease
  nameWithType: SafeHandle.DangerousRelease
  fullName: SafeHandle.DangerousRelease
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeHandle.xml
- uid: System.Runtime.InteropServices.SafeHandle.Dispose*
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: Dispose
  nameWithType: SafeHandle.Dispose
  fullName: SafeHandle.Dispose
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeHandle.xml
- uid: System.Runtime.InteropServices.SafeHandle.Finalize*
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: Finalize
  nameWithType: SafeHandle.Finalize
  fullName: SafeHandle.Finalize
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeHandle.xml
- uid: System.Runtime.InteropServices.SafeHandle.IsClosed*
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: IsClosed
  nameWithType: SafeHandle.IsClosed
  fullName: SafeHandle.IsClosed
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeHandle.xml
- uid: System.Runtime.InteropServices.SafeHandle.IsInvalid*
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: IsInvalid
  nameWithType: SafeHandle.IsInvalid
  fullName: SafeHandle.IsInvalid
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeHandle.xml
- uid: System.Runtime.InteropServices.SafeHandle.ReleaseHandle*
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: ReleaseHandle
  nameWithType: SafeHandle.ReleaseHandle
  fullName: SafeHandle.ReleaseHandle
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeHandle.xml
- uid: System.Runtime.InteropServices.SafeHandle.SetHandle*
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: SetHandle
  nameWithType: SafeHandle.SetHandle
  fullName: SafeHandle.SetHandle
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeHandle.xml
- uid: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid*
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: SetHandleAsInvalid
  nameWithType: SafeHandle.SetHandleAsInvalid
  fullName: SafeHandle.SetHandleAsInvalid
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeHandle.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
