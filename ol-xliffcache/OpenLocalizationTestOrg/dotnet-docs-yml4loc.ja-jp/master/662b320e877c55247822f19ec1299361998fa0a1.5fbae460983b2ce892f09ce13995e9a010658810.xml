{"nodes":[{"content":"Represents a local variable within a method or constructor.","nodes":[{"pos":[0,59],"content":"Represents a local variable within a method or constructor.","nodes":[{"content":"Represents a local variable within a method or constructor.","pos":[0,59]}]}],"pos":[1355,1415],"yaml":true},{"content":"A `LocalBuilder` object can be defined using the <xref:System.Reflection.Emit.ILGenerator.DeclareLocal%2A> method.","nodes":[{"pos":[0,114],"content":"A <ph id=\"ph1\">`LocalBuilder`</ph> object can be defined using the <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.ILGenerator.DeclareLocal%2A&gt;</ph> method.","source":"A `LocalBuilder` object can be defined using the <xref:System.Reflection.Emit.ILGenerator.DeclareLocal%2A> method."}],"pos":[1426,1541],"yaml":true,"extradata":"MT"},{"content":"Gets a value indicating whether the object referred to by the local variable is pinned in memory.","nodes":[{"pos":[0,97],"content":"Gets a value indicating whether the object referred to by the local variable is pinned in memory.","nodes":[{"content":"Gets a value indicating whether the object referred to by the local variable is pinned in memory.","pos":[0,97]}]}],"pos":[4683,4781],"yaml":true},{"content":"In unsafe code, an object must be pinned before it can be referred to by an unmanaged pointer. While the referenced object is pinned, it cannot be moved by garbage collection.","nodes":[{"pos":[0,175],"content":"In unsafe code, an object must be pinned before it can be referred to by an unmanaged pointer. While the referenced object is pinned, it cannot be moved by garbage collection.","nodes":[{"content":"In unsafe code, an object must be pinned before it can be referred to by an unmanaged pointer. While the referenced object is pinned, it cannot be moved by garbage collection.","pos":[0,175],"nodes":[{"content":"In unsafe code, an object must be pinned before it can be referred to by an unmanaged pointer.","pos":[0,94]},{"content":"While the referenced object is pinned, it cannot be moved by garbage collection.","pos":[95,175]}]}]}],"pos":[4792,4968],"yaml":true,"extradata":"MT"},{"content":"`true` if the object referred to by the local variable is pinned in memory; otherwise, `false`.","nodes":[{"pos":[0,95],"content":"<ph id=\"ph1\">`true`</ph> if the object referred to by the local variable is pinned in memory; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the object referred to by the local variable is pinned in memory; otherwise, `false`."}],"pos":[5088,5186],"yaml":true},{"content":"Gets the zero-based index of the local variable within the method body.","nodes":[{"pos":[0,71],"content":"Gets the zero-based index of the local variable within the method body.","nodes":[{"content":"Gets the zero-based index of the local variable within the method body.","pos":[0,71]}]}],"pos":[6442,6514],"yaml":true},{"content":"Index numbers are assigned to local variables in the order in which they are declared or emitted, beginning with zero.","nodes":[{"pos":[0,118],"content":"Index numbers are assigned to local variables in the order in which they are declared or emitted, beginning with zero.","nodes":[{"content":"Index numbers are assigned to local variables in the order in which they are declared or emitted, beginning with zero.","pos":[0,118]}]}],"pos":[6525,6644],"yaml":true,"extradata":"MT"},{"content":"An integer value that represents the order of declaration of the local variable within the method body.","nodes":[{"pos":[0,103],"content":"An integer value that represents the order of declaration of the local variable within the method body.","nodes":[{"content":"An integer value that represents the order of declaration of the local variable within the method body.","pos":[0,103]}]}],"pos":[6763,6867],"yaml":true},{"content":"Gets the type of the local variable.","nodes":[{"pos":[0,36],"content":"Gets the type of the local variable.","nodes":[{"content":"Gets the type of the local variable.","pos":[0,36]}]}],"pos":[8119,8156],"yaml":true},{"content":"The <xref href=\"System.Type\"></xref> of the local variable.","nodes":[{"pos":[0,59],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> of the local variable.","source":"The <xref href=\"System.Type\"></xref> of the local variable."}],"pos":[8961,9021],"yaml":true},{"content":"Sets the name of this local variable.","nodes":[{"pos":[0,37],"content":"Sets the name of this local variable.","nodes":[{"content":"Sets the name of this local variable.","pos":[0,37]}]}],"pos":[10335,10373],"yaml":true},{"content":"The <xref:System.Reflection.Emit.LocalBuilder.SetLocalSymInfo%2A> method is supported for methods defined in dynamic types. It is not supported for dynamic methods defined using the <xref:System.Reflection.Emit.DynamicMethod> class.","nodes":[{"pos":[0,232],"content":"The <xref:System.Reflection.Emit.LocalBuilder.SetLocalSymInfo%2A> method is supported for methods defined in dynamic types. It is not supported for dynamic methods defined using the <xref:System.Reflection.Emit.DynamicMethod> class.","nodes":[{"content":"The <xref:System.Reflection.Emit.LocalBuilder.SetLocalSymInfo%2A> method is supported for methods defined in dynamic types. It is not supported for dynamic methods defined using the <xref:System.Reflection.Emit.DynamicMethod> class.","pos":[0,232],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.LocalBuilder.SetLocalSymInfo%2A&gt;</ph> method is supported for methods defined in dynamic types.","pos":[0,123],"source":"The <xref:System.Reflection.Emit.LocalBuilder.SetLocalSymInfo%2A> method is supported for methods defined in dynamic types."},{"content":"It is not supported for dynamic methods defined using the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> class.","pos":[124,232],"source":" It is not supported for dynamic methods defined using the <xref:System.Reflection.Emit.DynamicMethod> class."}]}]}],"pos":[10384,10617],"yaml":true,"extradata":"MT"},{"content":"The name of the local variable.","nodes":[{"pos":[0,31],"content":"The name of the local variable.","nodes":[{"content":"The name of the local variable.","pos":[0,31]}]}],"pos":[11493,11525],"yaml":true},{"content":"The containing type has been created with <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>.  \n  \n -or-  \n  \n There is no symbolic writer defined for the containing module.","nodes":[{"pos":[0,109],"content":"The containing type has been created with <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"&gt;&lt;/xref&gt;</ph>.","source":"The containing type has been created with <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>."},{"pos":[116,120],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[127,189],"content":"There is no symbolic writer defined for the containing module.","nodes":[{"content":"There is no symbolic writer defined for the containing module.","pos":[0,62]}]}],"pos":[11714,11912],"yaml":true},{"content":"This local is defined in a dynamic method, rather than in a method of a dynamic type.","nodes":[{"pos":[0,85],"content":"This local is defined in a dynamic method, rather than in a method of a dynamic type.","nodes":[{"content":"This local is defined in a dynamic method, rather than in a method of a dynamic type.","pos":[0,85]}]}],"pos":[12014,12100],"yaml":true},{"content":"Sets the name and lexical scope of this local variable.","nodes":[{"pos":[0,55],"content":"Sets the name and lexical scope of this local variable.","nodes":[{"content":"Sets the name and lexical scope of this local variable.","pos":[0,55]}]}],"pos":[13362,13418],"yaml":true},{"content":"The <xref:System.Reflection.Emit.LocalBuilder.SetLocalSymInfo%2A> method is supported for methods defined in dynamic types. It is not supported for dynamic methods defined using the <xref:System.Reflection.Emit.DynamicMethod> class.","nodes":[{"pos":[0,232],"content":"The <xref:System.Reflection.Emit.LocalBuilder.SetLocalSymInfo%2A> method is supported for methods defined in dynamic types. It is not supported for dynamic methods defined using the <xref:System.Reflection.Emit.DynamicMethod> class.","nodes":[{"content":"The <xref:System.Reflection.Emit.LocalBuilder.SetLocalSymInfo%2A> method is supported for methods defined in dynamic types. It is not supported for dynamic methods defined using the <xref:System.Reflection.Emit.DynamicMethod> class.","pos":[0,232],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.LocalBuilder.SetLocalSymInfo%2A&gt;</ph> method is supported for methods defined in dynamic types.","pos":[0,123],"source":"The <xref:System.Reflection.Emit.LocalBuilder.SetLocalSymInfo%2A> method is supported for methods defined in dynamic types."},{"content":"It is not supported for dynamic methods defined using the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> class.","pos":[124,232],"source":" It is not supported for dynamic methods defined using the <xref:System.Reflection.Emit.DynamicMethod> class."}]}]}],"pos":[13429,13662],"yaml":true,"extradata":"MT"},{"content":"The name of the local variable.","nodes":[{"pos":[0,31],"content":"The name of the local variable.","nodes":[{"content":"The name of the local variable.","pos":[0,31]}]}],"pos":[14570,14602],"yaml":true},{"content":"The beginning offset of the lexical scope of the local variable.","nodes":[{"pos":[0,64],"content":"The beginning offset of the lexical scope of the local variable.","nodes":[{"content":"The beginning offset of the lexical scope of the local variable.","pos":[0,64]}]}],"pos":[14668,14733],"yaml":true},{"content":"The ending offset of the lexical scope of the local variable.","nodes":[{"pos":[0,61],"content":"The ending offset of the lexical scope of the local variable.","nodes":[{"content":"The ending offset of the lexical scope of the local variable.","pos":[0,61]}]}],"pos":[14797,14859],"yaml":true},{"content":"The containing type has been created with <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>.  \n  \n -or-  \n  \n There is no symbolic writer defined for the containing module.","nodes":[{"pos":[0,109],"content":"The containing type has been created with <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"&gt;&lt;/xref&gt;</ph>.","source":"The containing type has been created with <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>."},{"pos":[116,120],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[127,189],"content":"There is no symbolic writer defined for the containing module.","nodes":[{"content":"There is no symbolic writer defined for the containing module.","pos":[0,62]}]}],"pos":[15048,15246],"yaml":true},{"content":"This local is defined in a dynamic method, rather than in a method of a dynamic type.","nodes":[{"pos":[0,85],"content":"This local is defined in a dynamic method, rather than in a method of a dynamic type.","nodes":[{"content":"This local is defined in a dynamic method, rather than in a method of a dynamic type.","pos":[0,85]}]}],"pos":[15348,15434],"yaml":true},{"content":"Maps a set of names to a corresponding set of dispatch identifiers.","nodes":[{"pos":[0,67],"content":"Maps a set of names to a corresponding set of dispatch identifiers.","nodes":[{"content":"Maps a set of names to a corresponding set of dispatch identifiers.","pos":[0,67]}]}],"pos":[17010,17078],"yaml":true},{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.","nodes":[{"pos":[0,186],"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.","nodes":[{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::GetIDsOfNames`</ph>, see the MSDN Library.","pos":[110,186],"source":" For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library."}]}],"pos":[17089,17276],"yaml":true,"extradata":"MT"},{"content":"Reserved for future use. Must be IID_NULL.","nodes":[{"pos":[0,42],"content":"Reserved for future use. Must be IID_NULL.","nodes":[{"content":"Reserved for future use. Must be IID_NULL.","pos":[0,42],"nodes":[{"content":"Reserved for future use.","pos":[0,24]},{"content":"Must be IID_NULL.","pos":[25,42]}]}]}],"pos":[17482,17525],"yaml":true},{"content":"Passed-in array of names to be mapped.","nodes":[{"pos":[0,38],"content":"Passed-in array of names to be mapped.","nodes":[{"content":"Passed-in array of names to be mapped.","pos":[0,38]}]}],"pos":[17590,17629],"yaml":true},{"content":"Count of the names to be mapped.","nodes":[{"pos":[0,32],"content":"Count of the names to be mapped.","nodes":[{"content":"Count of the names to be mapped.","pos":[0,32]}]}],"pos":[17691,17724],"yaml":true},{"content":"The locale context in which to interpret the names.","nodes":[{"pos":[0,51],"content":"The locale context in which to interpret the names.","nodes":[{"content":"The locale context in which to interpret the names.","pos":[0,51]}]}],"pos":[17784,17836],"yaml":true},{"content":"Caller-allocated array which receives the IDs corresponding to the names.","nodes":[{"pos":[0,73],"content":"Caller-allocated array which receives the IDs corresponding to the names.","nodes":[{"content":"Caller-allocated array which receives the IDs corresponding to the names.","pos":[0,73]}]}],"pos":[17900,17974],"yaml":true},{"content":"Late-bound access using the COM <code>IDispatch</code> interface is not supported.","nodes":[{"pos":[0,82],"content":"Late-bound access using the COM <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IDispatch</ph><ept id=\"p1\">&lt;/code&gt;</ept> interface is not supported.","source":"Late-bound access using the COM <code>IDispatch</code> interface is not supported."}],"pos":[18202,18285],"yaml":true},{"content":"Retrieves the type information for an object, which can then be used to get the type information for an interface.","nodes":[{"pos":[0,114],"content":"Retrieves the type information for an object, which can then be used to get the type information for an interface.","nodes":[{"content":"Retrieves the type information for an object, which can then be used to get the type information for an interface.","pos":[0,114]}]}],"pos":[19686,19801],"yaml":true},{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.","nodes":[{"pos":[0,184],"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.","nodes":[{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::GetTypeInfo`</ph>, see the MSDN Library.","pos":[110,184],"source":" For more information about `IDispatch::GetTypeInfo`, see the MSDN Library."}]}],"pos":[19812,19997],"yaml":true,"extradata":"MT"},{"content":"The type information to return.","nodes":[{"pos":[0,31],"content":"The type information to return.","nodes":[{"content":"The type information to return.","pos":[0,31]}]}],"pos":[20171,20203],"yaml":true},{"content":"The locale identifier for the type information.","nodes":[{"pos":[0,47],"content":"The locale identifier for the type information.","nodes":[{"content":"The locale identifier for the type information.","pos":[0,47]}]}],"pos":[20263,20311],"yaml":true},{"content":"Receives a pointer to the requested type information object.","nodes":[{"pos":[0,60],"content":"Receives a pointer to the requested type information object.","nodes":[{"content":"Receives a pointer to the requested type information object.","pos":[0,60]}]}],"pos":[20374,20435],"yaml":true},{"content":"Late-bound access using the COM <code>IDispatch</code> interface is not supported.","nodes":[{"pos":[0,82],"content":"Late-bound access using the COM <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IDispatch</ph><ept id=\"p1\">&lt;/code&gt;</ept> interface is not supported.","source":"Late-bound access using the COM <code>IDispatch</code> interface is not supported."}],"pos":[20661,20744],"yaml":true},{"content":"Retrieves the number of type information interfaces that an object provides (either 0 or 1).","nodes":[{"pos":[0,92],"content":"Retrieves the number of type information interfaces that an object provides (either 0 or 1).","nodes":[{"content":"Retrieves the number of type information interfaces that an object provides (either 0 or 1).","pos":[0,92]}]}],"pos":[22046,22139],"yaml":true},{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.","nodes":[{"pos":[0,189],"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.","nodes":[{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::GetTypeInfoCount`</ph>, see the MSDN Library.","pos":[110,189],"source":" For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library."}]}],"pos":[22150,22340],"yaml":true,"extradata":"MT"},{"content":"Points to a location that receives the number of type information interfaces provided by the object.","nodes":[{"pos":[0,100],"content":"Points to a location that receives the number of type information interfaces provided by the object.","nodes":[{"content":"Points to a location that receives the number of type information interfaces provided by the object.","pos":[0,100]}]}],"pos":[22498,22599],"yaml":true},{"content":"Late-bound access using the COM <code>IDispatch</code> interface is not supported.","nodes":[{"pos":[0,82],"content":"Late-bound access using the COM <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IDispatch</ph><ept id=\"p1\">&lt;/code&gt;</ept> interface is not supported.","source":"Late-bound access using the COM <code>IDispatch</code> interface is not supported."}],"pos":[22830,22913],"yaml":true},{"content":"Provides access to properties and methods exposed by an object.","nodes":[{"pos":[0,63],"content":"Provides access to properties and methods exposed by an object.","nodes":[{"content":"Provides access to properties and methods exposed by an object.","pos":[0,63]}]}],"pos":[24599,24663],"yaml":true},{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.","nodes":[{"pos":[0,179],"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.","nodes":[{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::Invoke`</ph>, see the MSDN Library.","pos":[110,179],"source":" For more information about `IDispatch::Invoke`, see the MSDN Library."}]}],"pos":[24674,24854],"yaml":true,"extradata":"MT"},{"content":"Identifies the member.","nodes":[{"pos":[0,22],"content":"Identifies the member.","nodes":[{"content":"Identifies the member.","pos":[0,22]}]}],"pos":[25123,25146],"yaml":true},{"content":"Reserved for future use. Must be IID_NULL.","nodes":[{"pos":[0,42],"content":"Reserved for future use. Must be IID_NULL.","nodes":[{"content":"Reserved for future use. Must be IID_NULL.","pos":[0,42],"nodes":[{"content":"Reserved for future use.","pos":[0,24]},{"content":"Must be IID_NULL.","pos":[25,42]}]}]}],"pos":[25204,25247],"yaml":true},{"content":"The locale context in which to interpret arguments.","nodes":[{"pos":[0,51],"content":"The locale context in which to interpret arguments.","nodes":[{"content":"The locale context in which to interpret arguments.","pos":[0,51]}]}],"pos":[25307,25359],"yaml":true},{"content":"Flags describing the context of the call.","nodes":[{"pos":[0,41],"content":"Flags describing the context of the call.","nodes":[{"content":"Flags describing the context of the call.","pos":[0,41]}]}],"pos":[25420,25462],"yaml":true},{"content":"Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.","nodes":[{"pos":[0,159],"content":"Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.","nodes":[{"content":"Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.","pos":[0,159]}]}],"pos":[25529,25689],"yaml":true},{"content":"Pointer to the location where the result is to be stored.","nodes":[{"pos":[0,57],"content":"Pointer to the location where the result is to be stored.","nodes":[{"content":"Pointer to the location where the result is to be stored.","pos":[0,57]}]}],"pos":[25755,25813],"yaml":true},{"content":"Pointer to a structure that contains exception information.","nodes":[{"pos":[0,59],"content":"Pointer to a structure that contains exception information.","nodes":[{"content":"Pointer to a structure that contains exception information.","pos":[0,59]}]}],"pos":[25879,25939],"yaml":true},{"content":"The index of the first argument that has an error.","nodes":[{"pos":[0,50],"content":"The index of the first argument that has an error.","nodes":[{"content":"The index of the first argument that has an error.","pos":[0,50]}]}],"pos":[26003,26054],"yaml":true},{"content":"Late-bound access using the COM <code>IDispatch</code> interface is not supported.","nodes":[{"pos":[0,82],"content":"Late-bound access using the COM <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IDispatch</ph><ept id=\"p1\">&lt;/code&gt;</ept> interface is not supported.","source":"Late-bound access using the COM <code>IDispatch</code> interface is not supported."}],"pos":[26275,26358],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Reflection.Emit.LocalBuilder\n  commentId: T:System.Reflection.Emit.LocalBuilder\n  id: LocalBuilder\n  children:\n  - System.Reflection.Emit.LocalBuilder.IsPinned\n  - System.Reflection.Emit.LocalBuilder.LocalIndex\n  - System.Reflection.Emit.LocalBuilder.LocalType\n  - System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(System.String)\n  - System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(System.String,System.Int32,System.Int32)\n  - System.Reflection.Emit.LocalBuilder.System#Runtime#InteropServices#_LocalBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.Emit.LocalBuilder.System#Runtime#InteropServices#_LocalBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.Emit.LocalBuilder.System#Runtime#InteropServices#_LocalBuilder#GetTypeInfoCount(System.UInt32@)\n  - System.Reflection.Emit.LocalBuilder.System#Runtime#InteropServices#_LocalBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  langs:\n  - csharp\n  name: LocalBuilder\n  nameWithType: LocalBuilder\n  fullName: System.Reflection.Emit.LocalBuilder\n  type: Class\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Represents a local variable within a method or constructor.\n  remarks: A `LocalBuilder` object can be defined using the <xref:System.Reflection.Emit.ILGenerator.DeclareLocal%2A> method.\n  example:\n  - \"The following example creates a `static` method (`Shared` in Visual Basic) named `Function1` that returns a string and has a parameter of type <xref:System.Int32>. In the body of the method, the code example creates <xref:System.Reflection.Emit.LocalBuilder> objects representing two local variables, and sets symbol information for the local variables. The method does not do anything significant, but the method body demonstrates storing a parameter to a local variable, storing a literal string to a local variable, and loading a local variable.  \\n  \\n [!code-cpp[LocalBuilder_Sample_SetLocalSymInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/LocalBuilder_Sample_SetLocalSymInfo/CPP/localbuilder_sample_4.cpp#1)]\\n [!code-csharp[LocalBuilder_Sample_SetLocalSymInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/LocalBuilder_Sample_SetLocalSymInfo/CS/localbuilder_sample_4.cs#1)]\\n [!code-vb[LocalBuilder_Sample_SetLocalSymInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/LocalBuilder_Sample_SetLocalSymInfo/VB/localbuilder_sample_4.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class LocalBuilder : System.Reflection.LocalVariableInfo, System.Runtime.InteropServices._LocalBuilder\n  inheritance:\n  - System.Object\n  - System.Reflection.LocalVariableInfo\n  implements:\n  - System.Runtime.InteropServices._LocalBuilder\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Reflection.LocalVariableInfo.ToString\n  attributes:\n  - type: System.Runtime.InteropServices.ClassInterfaceAttribute\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/LocalBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.LocalBuilder.IsPinned\n  commentId: P:System.Reflection.Emit.LocalBuilder.IsPinned\n  id: IsPinned\n  parent: System.Reflection.Emit.LocalBuilder\n  langs:\n  - csharp\n  name: IsPinned\n  nameWithType: LocalBuilder.IsPinned\n  fullName: LocalBuilder.IsPinned\n  type: Property\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets a value indicating whether the object referred to by the local variable is pinned in memory.\n  remarks: In unsafe code, an object must be pinned before it can be referred to by an unmanaged pointer. While the referenced object is pinned, it cannot be moved by garbage collection.\n  syntax:\n    content: public override bool IsPinned { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the object referred to by the local variable is pinned in memory; otherwise, `false`.'\n  overload: System.Reflection.Emit.LocalBuilder.IsPinned*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/LocalBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.LocalBuilder.LocalIndex\n  commentId: P:System.Reflection.Emit.LocalBuilder.LocalIndex\n  id: LocalIndex\n  parent: System.Reflection.Emit.LocalBuilder\n  langs:\n  - csharp\n  name: LocalIndex\n  nameWithType: LocalBuilder.LocalIndex\n  fullName: LocalBuilder.LocalIndex\n  type: Property\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets the zero-based index of the local variable within the method body.\n  remarks: Index numbers are assigned to local variables in the order in which they are declared or emitted, beginning with zero.\n  syntax:\n    content: public override int LocalIndex { get; }\n    return:\n      type: System.Int32\n      description: An integer value that represents the order of declaration of the local variable within the method body.\n  overload: System.Reflection.Emit.LocalBuilder.LocalIndex*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/LocalBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.LocalBuilder.LocalType\n  commentId: P:System.Reflection.Emit.LocalBuilder.LocalType\n  id: LocalType\n  parent: System.Reflection.Emit.LocalBuilder\n  langs:\n  - csharp\n  name: LocalType\n  nameWithType: LocalBuilder.LocalType\n  fullName: LocalBuilder.LocalType\n  type: Property\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets the type of the local variable.\n  remarks: ''\n  example:\n  - \"The following code sample illustrates the use of `LocalType`. This code is part of a larger example for the <xref:System.Reflection.Emit.LocalBuilder> class.  \\n  \\n [!code-cpp[LocalBuilder_Sample_SetLocalSymInfo#2](~/samples/snippets/cpp/VS_Snippets_CLR/LocalBuilder_Sample_SetLocalSymInfo/CPP/localbuilder_sample_4.cpp#2)]\\n [!code-csharp[LocalBuilder_Sample_SetLocalSymInfo#2](~/samples/snippets/csharp/VS_Snippets_CLR/LocalBuilder_Sample_SetLocalSymInfo/CS/localbuilder_sample_4.cs#2)]\\n [!code-vb[LocalBuilder_Sample_SetLocalSymInfo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/LocalBuilder_Sample_SetLocalSymInfo/VB/localbuilder_sample_4.vb#2)]\"\n  syntax:\n    content: public override Type LocalType { get; }\n    return:\n      type: System.Type\n      description: The <xref href=\"System.Type\"></xref> of the local variable.\n  overload: System.Reflection.Emit.LocalBuilder.LocalType*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/LocalBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(System.String)\n  commentId: M:System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(System.String)\n  id: SetLocalSymInfo(System.String)\n  parent: System.Reflection.Emit.LocalBuilder\n  langs:\n  - csharp\n  name: SetLocalSymInfo(String)\n  nameWithType: LocalBuilder.SetLocalSymInfo(String)\n  fullName: LocalBuilder.SetLocalSymInfo(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Sets the name of this local variable.\n  remarks: The <xref:System.Reflection.Emit.LocalBuilder.SetLocalSymInfo%2A> method is supported for methods defined in dynamic types. It is not supported for dynamic methods defined using the <xref:System.Reflection.Emit.DynamicMethod> class.\n  example:\n  - \"The following code sample illustrates the use of the <xref:System.Reflection.Emit.LocalBuilder.SetLocalSymInfo%2A> method. This code is part of a larger example for the <xref:System.Reflection.Emit.LocalBuilder> class.  \\n  \\n [!code-cpp[LocalBuilder_Sample_SetLocalSymInfo#2](~/samples/snippets/cpp/VS_Snippets_CLR/LocalBuilder_Sample_SetLocalSymInfo/CPP/localbuilder_sample_4.cpp#2)]\\n [!code-csharp[LocalBuilder_Sample_SetLocalSymInfo#2](~/samples/snippets/csharp/VS_Snippets_CLR/LocalBuilder_Sample_SetLocalSymInfo/CS/localbuilder_sample_4.cs#2)]\\n [!code-vb[LocalBuilder_Sample_SetLocalSymInfo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/LocalBuilder_Sample_SetLocalSymInfo/VB/localbuilder_sample_4.vb#2)]\"\n  syntax:\n    content: public void SetLocalSymInfo (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the local variable.\n  overload: System.Reflection.Emit.LocalBuilder.SetLocalSymInfo*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The containing type has been created with <xref href=\\\"System.Reflection.Emit.TypeBuilder.CreateType\\\"></xref>.  \\n  \\n -or-  \\n  \\n There is no symbolic writer defined for the containing module.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This local is defined in a dynamic method, rather than in a method of a dynamic type.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/LocalBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(System.String,System.Int32,System.Int32)\n  commentId: M:System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(System.String,System.Int32,System.Int32)\n  id: SetLocalSymInfo(System.String,System.Int32,System.Int32)\n  parent: System.Reflection.Emit.LocalBuilder\n  langs:\n  - csharp\n  name: SetLocalSymInfo(String, Int32, Int32)\n  nameWithType: LocalBuilder.SetLocalSymInfo(String, Int32, Int32)\n  fullName: LocalBuilder.SetLocalSymInfo(String, Int32, Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Sets the name and lexical scope of this local variable.\n  remarks: The <xref:System.Reflection.Emit.LocalBuilder.SetLocalSymInfo%2A> method is supported for methods defined in dynamic types. It is not supported for dynamic methods defined using the <xref:System.Reflection.Emit.DynamicMethod> class.\n  example:\n  - \"The following code sample illustrates the use of the <xref:System.Reflection.Emit.LocalBuilder.SetLocalSymInfo%2A> method. This code is part of a larger example for the <xref:System.Reflection.Emit.LocalBuilder> class.  \\n  \\n [!code-cpp[LocalBuilder_Sample_SetLocalSymInfo#2](~/samples/snippets/cpp/VS_Snippets_CLR/LocalBuilder_Sample_SetLocalSymInfo/CPP/localbuilder_sample_4.cpp#2)]\\n [!code-csharp[LocalBuilder_Sample_SetLocalSymInfo#2](~/samples/snippets/csharp/VS_Snippets_CLR/LocalBuilder_Sample_SetLocalSymInfo/CS/localbuilder_sample_4.cs#2)]\\n [!code-vb[LocalBuilder_Sample_SetLocalSymInfo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/LocalBuilder_Sample_SetLocalSymInfo/VB/localbuilder_sample_4.vb#2)]\"\n  syntax:\n    content: public void SetLocalSymInfo (string name, int startOffset, int endOffset);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the local variable.\n    - id: startOffset\n      type: System.Int32\n      description: The beginning offset of the lexical scope of the local variable.\n    - id: endOffset\n      type: System.Int32\n      description: The ending offset of the lexical scope of the local variable.\n  overload: System.Reflection.Emit.LocalBuilder.SetLocalSymInfo*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The containing type has been created with <xref href=\\\"System.Reflection.Emit.TypeBuilder.CreateType\\\"></xref>.  \\n  \\n -or-  \\n  \\n There is no symbolic writer defined for the containing module.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This local is defined in a dynamic method, rather than in a method of a dynamic type.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/LocalBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.LocalBuilder.System#Runtime#InteropServices#_LocalBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  commentId: M:System.Reflection.Emit.LocalBuilder.System#Runtime#InteropServices#_LocalBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  id: System#Runtime#InteropServices#_LocalBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  isEii: true\n  parent: System.Reflection.Emit.LocalBuilder\n  langs:\n  - csharp\n  name: _LocalBuilder.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: LocalBuilder._LocalBuilder.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: LocalBuilder._LocalBuilder.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Maps a set of names to a corresponding set of dispatch identifiers.\n  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.\n  syntax:\n    content: void _LocalBuilder.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);\n    parameters:\n    - id: riid\n      type: System.Guid\n      description: Reserved for future use. Must be IID_NULL.\n    - id: rgszNames\n      type: System.IntPtr\n      description: Passed-in array of names to be mapped.\n    - id: cNames\n      type: System.UInt32\n      description: Count of the names to be mapped.\n    - id: lcid\n      type: System.UInt32\n      description: The locale context in which to interpret the names.\n    - id: rgDispId\n      type: System.IntPtr\n      description: Caller-allocated array which receives the IDs corresponding to the names.\n  overload: System.Reflection.Emit.LocalBuilder.System#Runtime#InteropServices#_LocalBuilder#GetIDsOfNames*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/LocalBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.LocalBuilder.System#Runtime#InteropServices#_LocalBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  commentId: M:System.Reflection.Emit.LocalBuilder.System#Runtime#InteropServices#_LocalBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  id: System#Runtime#InteropServices#_LocalBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  isEii: true\n  parent: System.Reflection.Emit.LocalBuilder\n  langs:\n  - csharp\n  name: _LocalBuilder.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: LocalBuilder._LocalBuilder.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: LocalBuilder._LocalBuilder.GetTypeInfo(UInt32, UInt32, IntPtr)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Retrieves the type information for an object, which can then be used to get the type information for an interface.\n  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.\n  syntax:\n    content: void _LocalBuilder.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);\n    parameters:\n    - id: iTInfo\n      type: System.UInt32\n      description: The type information to return.\n    - id: lcid\n      type: System.UInt32\n      description: The locale identifier for the type information.\n    - id: ppTInfo\n      type: System.IntPtr\n      description: Receives a pointer to the requested type information object.\n  overload: System.Reflection.Emit.LocalBuilder.System#Runtime#InteropServices#_LocalBuilder#GetTypeInfo*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/LocalBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.LocalBuilder.System#Runtime#InteropServices#_LocalBuilder#GetTypeInfoCount(System.UInt32@)\n  commentId: M:System.Reflection.Emit.LocalBuilder.System#Runtime#InteropServices#_LocalBuilder#GetTypeInfoCount(System.UInt32@)\n  id: System#Runtime#InteropServices#_LocalBuilder#GetTypeInfoCount(System.UInt32@)\n  isEii: true\n  parent: System.Reflection.Emit.LocalBuilder\n  langs:\n  - csharp\n  name: _LocalBuilder.GetTypeInfoCount(UInt32)\n  nameWithType: LocalBuilder._LocalBuilder.GetTypeInfoCount(UInt32)\n  fullName: LocalBuilder._LocalBuilder.GetTypeInfoCount(UInt32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Retrieves the number of type information interfaces that an object provides (either 0 or 1).\n  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.\n  syntax:\n    content: void _LocalBuilder.GetTypeInfoCount (out uint pcTInfo);\n    parameters:\n    - id: pcTInfo\n      type: System.UInt32\n      description: Points to a location that receives the number of type information interfaces provided by the object.\n  overload: System.Reflection.Emit.LocalBuilder.System#Runtime#InteropServices#_LocalBuilder#GetTypeInfoCount*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/LocalBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.LocalBuilder.System#Runtime#InteropServices#_LocalBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  commentId: M:System.Reflection.Emit.LocalBuilder.System#Runtime#InteropServices#_LocalBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  id: System#Runtime#InteropServices#_LocalBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  isEii: true\n  parent: System.Reflection.Emit.LocalBuilder\n  langs:\n  - csharp\n  name: _LocalBuilder.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: LocalBuilder._LocalBuilder.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: LocalBuilder._LocalBuilder.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Provides access to properties and methods exposed by an object.\n  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.\n  syntax:\n    content: void _LocalBuilder.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);\n    parameters:\n    - id: dispIdMember\n      type: System.UInt32\n      description: Identifies the member.\n    - id: riid\n      type: System.Guid\n      description: Reserved for future use. Must be IID_NULL.\n    - id: lcid\n      type: System.UInt32\n      description: The locale context in which to interpret arguments.\n    - id: wFlags\n      type: System.Int16\n      description: Flags describing the context of the call.\n    - id: pDispParams\n      type: System.IntPtr\n      description: Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.\n    - id: pVarResult\n      type: System.IntPtr\n      description: Pointer to the location where the result is to be stored.\n    - id: pExcepInfo\n      type: System.IntPtr\n      description: Pointer to a structure that contains exception information.\n    - id: puArgErr\n      type: System.IntPtr\n      description: The index of the first argument that has an error.\n  overload: System.Reflection.Emit.LocalBuilder.System#Runtime#InteropServices#_LocalBuilder#Invoke*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/LocalBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Reflection.LocalVariableInfo\n  parent: System.Reflection\n  isExternal: false\n  name: LocalVariableInfo\n  nameWithType: LocalVariableInfo\n  fullName: System.Reflection.LocalVariableInfo\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  nameWithType: NotSupportedException\n  fullName: System.NotSupportedException\n- uid: System.NotImplementedException\n  parent: System\n  isExternal: false\n  name: NotImplementedException\n  nameWithType: NotImplementedException\n  fullName: System.NotImplementedException\n- uid: System.Reflection.Emit.LocalBuilder.IsPinned\n  parent: System.Reflection.Emit.LocalBuilder\n  isExternal: false\n  name: IsPinned\n  nameWithType: LocalBuilder.IsPinned\n  fullName: LocalBuilder.IsPinned\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Reflection.Emit.LocalBuilder.LocalIndex\n  parent: System.Reflection.Emit.LocalBuilder\n  isExternal: false\n  name: LocalIndex\n  nameWithType: LocalBuilder.LocalIndex\n  fullName: LocalBuilder.LocalIndex\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Reflection.Emit.LocalBuilder.LocalType\n  parent: System.Reflection.Emit.LocalBuilder\n  isExternal: false\n  name: LocalType\n  nameWithType: LocalBuilder.LocalType\n  fullName: LocalBuilder.LocalType\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(System.String)\n  parent: System.Reflection.Emit.LocalBuilder\n  isExternal: false\n  name: SetLocalSymInfo(String)\n  nameWithType: LocalBuilder.SetLocalSymInfo(String)\n  fullName: LocalBuilder.SetLocalSymInfo(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(System.String,System.Int32,System.Int32)\n  parent: System.Reflection.Emit.LocalBuilder\n  isExternal: false\n  name: SetLocalSymInfo(String, Int32, Int32)\n  nameWithType: LocalBuilder.SetLocalSymInfo(String, Int32, Int32)\n  fullName: LocalBuilder.SetLocalSymInfo(String, Int32, Int32)\n- uid: System.Reflection.Emit.LocalBuilder.System#Runtime#InteropServices#_LocalBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.Emit.LocalBuilder\n  isExternal: false\n  name: _LocalBuilder.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: LocalBuilder._LocalBuilder.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: LocalBuilder._LocalBuilder.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n- uid: System.Guid\n  parent: System\n  isExternal: false\n  name: Guid\n  nameWithType: Guid\n  fullName: System.Guid\n- uid: System.IntPtr\n  parent: System\n  isExternal: false\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.UInt32\n  parent: System\n  isExternal: false\n  name: UInt32\n  nameWithType: UInt32\n  fullName: System.UInt32\n- uid: System.Reflection.Emit.LocalBuilder.System#Runtime#InteropServices#_LocalBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.Emit.LocalBuilder\n  isExternal: false\n  name: _LocalBuilder.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: LocalBuilder._LocalBuilder.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: LocalBuilder._LocalBuilder.GetTypeInfo(UInt32, UInt32, IntPtr)\n- uid: System.Reflection.Emit.LocalBuilder.System#Runtime#InteropServices#_LocalBuilder#GetTypeInfoCount(System.UInt32@)\n  parent: System.Reflection.Emit.LocalBuilder\n  isExternal: false\n  name: _LocalBuilder.GetTypeInfoCount(UInt32)\n  nameWithType: LocalBuilder._LocalBuilder.GetTypeInfoCount(UInt32)\n  fullName: LocalBuilder._LocalBuilder.GetTypeInfoCount(UInt32)\n- uid: System.Reflection.Emit.LocalBuilder.System#Runtime#InteropServices#_LocalBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  parent: System.Reflection.Emit.LocalBuilder\n  isExternal: false\n  name: _LocalBuilder.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: LocalBuilder._LocalBuilder.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: LocalBuilder._LocalBuilder.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n- uid: System.Int16\n  parent: System\n  isExternal: false\n  name: Int16\n  nameWithType: Int16\n  fullName: System.Int16\n- uid: System.Reflection.Emit.LocalBuilder.IsPinned*\n  parent: System.Reflection.Emit.LocalBuilder\n  isExternal: false\n  name: IsPinned\n  nameWithType: LocalBuilder.IsPinned\n  fullName: LocalBuilder.IsPinned\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/LocalBuilder.xml\n- uid: System.Reflection.Emit.LocalBuilder.LocalIndex*\n  parent: System.Reflection.Emit.LocalBuilder\n  isExternal: false\n  name: LocalIndex\n  nameWithType: LocalBuilder.LocalIndex\n  fullName: LocalBuilder.LocalIndex\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/LocalBuilder.xml\n- uid: System.Reflection.Emit.LocalBuilder.LocalType*\n  parent: System.Reflection.Emit.LocalBuilder\n  isExternal: false\n  name: LocalType\n  nameWithType: LocalBuilder.LocalType\n  fullName: LocalBuilder.LocalType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/LocalBuilder.xml\n- uid: System.Reflection.Emit.LocalBuilder.SetLocalSymInfo*\n  parent: System.Reflection.Emit.LocalBuilder\n  isExternal: false\n  name: SetLocalSymInfo\n  nameWithType: LocalBuilder.SetLocalSymInfo\n  fullName: LocalBuilder.SetLocalSymInfo\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/LocalBuilder.xml\n- uid: System.Reflection.Emit.LocalBuilder.System#Runtime#InteropServices#_LocalBuilder#GetIDsOfNames*\n  parent: System.Reflection.Emit.LocalBuilder\n  isExternal: false\n  name: System.Runtime.InteropServices._LocalBuilder.GetIDsOfNames\n  nameWithType: LocalBuilder.System.Runtime.InteropServices._LocalBuilder.GetIDsOfNames\n  fullName: LocalBuilder.System.Runtime.InteropServices._LocalBuilder.GetIDsOfNames\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/LocalBuilder.xml\n- uid: System.Reflection.Emit.LocalBuilder.System#Runtime#InteropServices#_LocalBuilder#GetTypeInfo*\n  parent: System.Reflection.Emit.LocalBuilder\n  isExternal: false\n  name: System.Runtime.InteropServices._LocalBuilder.GetTypeInfo\n  nameWithType: LocalBuilder.System.Runtime.InteropServices._LocalBuilder.GetTypeInfo\n  fullName: LocalBuilder.System.Runtime.InteropServices._LocalBuilder.GetTypeInfo\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/LocalBuilder.xml\n- uid: System.Reflection.Emit.LocalBuilder.System#Runtime#InteropServices#_LocalBuilder#GetTypeInfoCount*\n  parent: System.Reflection.Emit.LocalBuilder\n  isExternal: false\n  name: System.Runtime.InteropServices._LocalBuilder.GetTypeInfoCount\n  nameWithType: LocalBuilder.System.Runtime.InteropServices._LocalBuilder.GetTypeInfoCount\n  fullName: LocalBuilder.System.Runtime.InteropServices._LocalBuilder.GetTypeInfoCount\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/LocalBuilder.xml\n- uid: System.Reflection.Emit.LocalBuilder.System#Runtime#InteropServices#_LocalBuilder#Invoke*\n  parent: System.Reflection.Emit.LocalBuilder\n  isExternal: false\n  name: System.Runtime.InteropServices._LocalBuilder.Invoke\n  nameWithType: LocalBuilder.System.Runtime.InteropServices._LocalBuilder.Invoke\n  fullName: LocalBuilder.System.Runtime.InteropServices._LocalBuilder.Invoke\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/LocalBuilder.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Reflection.LocalVariableInfo.ToString\n  parent: System.Reflection.LocalVariableInfo\n  isExternal: false\n  name: ToString()\n  nameWithType: LocalVariableInfo.ToString()\n  fullName: LocalVariableInfo.ToString()\n- uid: System.Runtime.InteropServices._LocalBuilder\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: _LocalBuilder\n  nameWithType: _LocalBuilder\n  fullName: System.Runtime.InteropServices._LocalBuilder\n"}