{"nodes":[{"content":"The `DateAndTime` module contains the procedures and properties used in date and time operations.","nodes":[{"pos":[0,97],"content":"The <ph id=\"ph1\">`DateAndTime`</ph> module contains the procedures and properties used in date and time operations.","source":"The `DateAndTime` module contains the procedures and properties used in date and time operations."}],"pos":[2488,2586],"yaml":true},{"content":"This module supports the Visual Basic language keywords and run-time library members that get the current date or time, perform date calculations, return a date or time, set the date or time, or time the duration of a process.","nodes":[{"pos":[0,226],"content":"This module supports the Visual Basic language keywords and run-time library members that get the current date or time, perform date calculations, return a date or time, set the date or time, or time the duration of a process.","nodes":[{"content":"This module supports the Visual Basic language keywords and run-time library members that get the current date or time, perform date calculations, return a date or time, set the date or time, or time the duration of a process.","pos":[0,226]}]}],"pos":[2597,2824],"yaml":true,"extradata":"MT"},{"content":"Returns a `Date` value containing a date and time value to which a specified time interval has been added.","nodes":[{"pos":[0,106],"content":"Returns a <ph id=\"ph1\">`Date`</ph> value containing a date and time value to which a specified time interval has been added.","source":"Returns a `Date` value containing a date and time value to which a specified time interval has been added."}],"pos":[4695,4802],"yaml":true},{"content":"You can use the `DateAdd` function to add or subtract a specified time interval from a date. For example, you can calculate a date 30 days from today or a time 45 minutes before now.  \n  \n To add days to `DateValue`, you can use `DateInterval.Day`, `DateInterval.DayOfYear`, or `DateInterval.Weekday`. These are treated as equivalent because `DayOfYear` and `Weekday` are not meaningful time intervals.  \n  \n The `DateAdd` function never returns an invalid date. If necessary, the day part of the resulting date is adjusted downward to the last day of the resulting month in the resulting year. The following example adds one month to January 31:  \n  \n```vb  \nDim NextMonth As Date = DateAdd(DateInterval.Month, 1, #1/31/1995#)  \n```  \n  \n In this example, `DateAdd` returns `#2/28/1995#`, not `#2/31/1995#`. If `DateValue` is `#1/31/1996#`, it returns `#2/29/1996#` because 1996 is a leap year.  \n  \n> [!NOTE]\n>  `DateAdd` uses the current calendar setting from the <xref:System.Globalization.CultureInfo.CurrentCulture%2A> property of the <xref:System.Globalization.CultureInfo> class in the <xref:System.Globalization> namespace. The default <xref:System.Globalization.CultureInfo.CurrentCulture%2A> values are determined by **Control Panel** settings.  \n  \n Since every `Date` value is supported by a <xref:System.DateTime> structure, its methods give you additional options in adding time intervals. For example, you can add a fractional number of days, rounded to the nearest millisecond, to a `Date` variable as follows:  \n  \n```vb  \nDim NextTime As Date = Now        ' Current date and time.  \nNextTime = NextTime.AddDays(3.4)  ' Increment by 3 2/5 days.  \n```  \n  \n The `Interval` argument can have one of the following settings.  \n  \n|Enumeration value|String|Unit of time interval to add|  \n|-----------------------|------------|----------------------------------|  \n|`DateInterval.Day`|d|Day; truncated to integral value|  \n|`DateInterval.DayOfYear`|y|Day; truncated to integral value|  \n|`DateInterval.Hour`|h|Hour; rounded to nearest millisecond|  \n|`DateInterval.Minute`|n|Minute; rounded to nearest millisecond|  \n|`DateInterval.Month`|m|Month; truncated to integral value|  \n|`DateInterval.Quarter`|q|Quarter; truncated to integral value|  \n|`DateInterval.Second`|s|Second; rounded to nearest millisecond|  \n|`DateInterval.Weekday`|w|Day; truncated to integral value|  \n|`DateInterval.WeekOfYear`|ww|Week; truncated to integral value|  \n|`DateInterval.Year`|yyyy|Year; truncated to integral value|","nodes":[{"pos":[0,182],"content":"You can use the `DateAdd` function to add or subtract a specified time interval from a date. For example, you can calculate a date 30 days from today or a time 45 minutes before now.","nodes":[{"content":"You can use the <ph id=\"ph1\">`DateAdd`</ph> function to add or subtract a specified time interval from a date.","pos":[0,92],"source":"You can use the `DateAdd` function to add or subtract a specified time interval from a date."},{"content":"For example, you can calculate a date 30 days from today or a time 45 minutes before now.","pos":[93,182]}]},{"pos":[189,402],"content":"To add days to `DateValue`, you can use `DateInterval.Day`, `DateInterval.DayOfYear`, or `DateInterval.Weekday`. These are treated as equivalent because `DayOfYear` and `Weekday` are not meaningful time intervals.","nodes":[{"content":"To add days to <ph id=\"ph1\">`DateValue`</ph>, you can use <ph id=\"ph2\">`DateInterval.Day`</ph>, <ph id=\"ph3\">`DateInterval.DayOfYear`</ph>, or <ph id=\"ph4\">`DateInterval.Weekday`</ph>.","pos":[0,112],"source":"To add days to `DateValue`, you can use `DateInterval.Day`, `DateInterval.DayOfYear`, or `DateInterval.Weekday`."},{"content":"These are treated as equivalent because <ph id=\"ph1\">`DayOfYear`</ph> and <ph id=\"ph2\">`Weekday`</ph> are not meaningful time intervals.","pos":[113,213],"source":" These are treated as equivalent because `DayOfYear` and `Weekday` are not meaningful time intervals."}]},{"pos":[409,646],"content":"The `DateAdd` function never returns an invalid date. If necessary, the day part of the resulting date is adjusted downward to the last day of the resulting month in the resulting year. The following example adds one month to January 31:","nodes":[{"content":"The <ph id=\"ph1\">`DateAdd`</ph> function never returns an invalid date.","pos":[0,53],"source":"The `DateAdd` function never returns an invalid date."},{"content":"If necessary, the day part of the resulting date is adjusted downward to the last day of the resulting month in the resulting year.","pos":[54,185]},{"content":"The following example adds one month to January 31:","pos":[186,237]}]},{"pos":[740,895],"content":"In this example, `DateAdd` returns `#2/28/1995#`, not `#2/31/1995#`. If `DateValue` is `#1/31/1996#`, it returns `#2/29/1996#` because 1996 is a leap year.","nodes":[{"content":"In this example, <ph id=\"ph1\">`DateAdd`</ph> returns <ph id=\"ph2\">`#2/28/1995#`</ph>, not <ph id=\"ph3\">`#2/31/1995#`</ph>.","pos":[0,68],"source":"In this example, `DateAdd` returns `#2/28/1995#`, not `#2/31/1995#`."},{"content":"If <ph id=\"ph1\">`DateValue`</ph> is <ph id=\"ph2\">`#1/31/1996#`</ph>, it returns <ph id=\"ph3\">`#2/29/1996#`</ph> because 1996 is a leap year.","pos":[69,155],"source":" If `DateValue` is `#1/31/1996#`, it returns `#2/29/1996#` because 1996 is a leap year."}]},{"pos":[903,1255],"content":"[!NOTE]\n `DateAdd` uses the current calendar setting from the <xref:System.Globalization.CultureInfo.CurrentCulture%2A> property of the <xref:System.Globalization.CultureInfo> class in the <xref:System.Globalization> namespace. The default <xref:System.Globalization.CultureInfo.CurrentCulture%2A> values are determined by **Control Panel** settings.","leadings":["","> "],"nodes":[{"content":" `DateAdd` uses the current calendar setting from the <xref:System.Globalization.CultureInfo.CurrentCulture%2A> property of the <xref:System.Globalization.CultureInfo> class in the <xref:System.Globalization> namespace. The default <xref:System.Globalization.CultureInfo.CurrentCulture%2A> values are determined by **Control Panel** settings.","pos":[8,350],"nodes":[{"content":"<ph id=\"ph1\"> `DateAdd`</ph> uses the current calendar setting from the <ph id=\"ph2\">&lt;xref:System.Globalization.CultureInfo.CurrentCulture%2A&gt;</ph> property of the <ph id=\"ph3\">&lt;xref:System.Globalization.CultureInfo&gt;</ph> class in the <ph id=\"ph4\">&lt;xref:System.Globalization&gt;</ph> namespace.","pos":[0,219],"source":" `DateAdd` uses the current calendar setting from the <xref:System.Globalization.CultureInfo.CurrentCulture%2A> property of the <xref:System.Globalization.CultureInfo> class in the <xref:System.Globalization> namespace."},{"content":"The default <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo.CurrentCulture%2A&gt;</ph> values are determined by <bpt id=\"p1\">**</bpt>Control Panel<ept id=\"p1\">**</ept> settings.","pos":[220,342],"source":" The default <xref:System.Globalization.CultureInfo.CurrentCulture%2A> values are determined by **Control Panel** settings."}]}]},{"pos":[1262,1527],"content":"Since every `Date` value is supported by a <xref:System.DateTime> structure, its methods give you additional options in adding time intervals. For example, you can add a fractional number of days, rounded to the nearest millisecond, to a `Date` variable as follows:","nodes":[{"content":"Since every <ph id=\"ph1\">`Date`</ph> value is supported by a <ph id=\"ph2\">&lt;xref:System.DateTime&gt;</ph> structure, its methods give you additional options in adding time intervals.","pos":[0,142],"source":"Since every `Date` value is supported by a <xref:System.DateTime> structure, its methods give you additional options in adding time intervals."},{"content":"For example, you can add a fractional number of days, rounded to the nearest millisecond, to a <ph id=\"ph1\">`Date`</ph> variable as follows:","pos":[143,265],"source":" For example, you can add a fractional number of days, rounded to the nearest millisecond, to a `Date` variable as follows:"}]},{"pos":[1675,1738],"content":"The <ph id=\"ph1\">`Interval`</ph> argument can have one of the following settings.","source":"The `Interval` argument can have one of the following settings."},{"pos":[1745,1762],"content":"Enumeration value","nodes":[{"content":"Enumeration value","pos":[0,17]}]},{"pos":[1763,1769],"content":"String","nodes":[{"content":"String","pos":[0,6]}]},{"pos":[1770,1798],"content":"Unit of time interval to add","nodes":[{"content":"Unit of time interval to add","pos":[0,28]}]},{"pos":[1898,1899],"content":"d","nodes":[{"content":"d","pos":[0,1]}]},{"pos":[1900,1932],"content":"Day; truncated to integral value","nodes":[{"content":"Day; truncated to integral value","pos":[0,32]}]},{"pos":[1962,1963],"content":"y","nodes":[{"content":"y","pos":[0,1]}]},{"pos":[1964,1996],"content":"Day; truncated to integral value","nodes":[{"content":"Day; truncated to integral value","pos":[0,32]}]},{"pos":[2021,2022],"content":"h","nodes":[{"content":"h","pos":[0,1]}]},{"pos":[2023,2059],"content":"Hour; rounded to nearest millisecond","nodes":[{"content":"Hour; rounded to nearest millisecond","pos":[0,36]}]},{"pos":[2086,2087],"content":"n","nodes":[]},{"pos":[2088,2126],"content":"Minute; rounded to nearest millisecond","nodes":[{"content":"Minute; rounded to nearest millisecond","pos":[0,38]}]},{"pos":[2152,2153],"content":"m","nodes":[{"content":"m","pos":[0,1]}]},{"pos":[2154,2188],"content":"Month; truncated to integral value","nodes":[{"content":"Month; truncated to integral value","pos":[0,34]}]},{"pos":[2216,2217],"content":"q","nodes":[{"content":"q","pos":[0,1]}]},{"pos":[2218,2254],"content":"Quarter; truncated to integral value","nodes":[{"content":"Quarter; truncated to integral value","pos":[0,36]}]},{"pos":[2281,2282],"content":"s","nodes":[{"content":"s","pos":[0,1]}]},{"pos":[2283,2321],"content":"Second; rounded to nearest millisecond","nodes":[{"content":"Second; rounded to nearest millisecond","pos":[0,38]}]},{"pos":[2349,2350],"content":"w","nodes":[{"content":"w","pos":[0,1]}]},{"pos":[2351,2383],"content":"Day; truncated to integral value","nodes":[{"content":"Day; truncated to integral value","pos":[0,32]}]},{"pos":[2414,2416],"content":"ww","nodes":[{"content":"ww","pos":[0,2]}]},{"pos":[2417,2450],"content":"Week; truncated to integral value","nodes":[{"content":"Week; truncated to integral value","pos":[0,33]}]},{"pos":[2475,2479],"content":"yyyy","nodes":[{"content":"yyyy","pos":[0,4]}]},{"pos":[2480,2513],"content":"Year; truncated to integral value","nodes":[{"content":"Year; truncated to integral value","pos":[0,33]}]}],"pos":[4813,7365],"yaml":true,"extradata":"MT"},{"content":"Required. `DateInterval` enumeration value or `String` expression representing the time interval you want to add.","nodes":[{"pos":[0,113],"content":"Required. `DateInterval` enumeration value or `String` expression representing the time interval you want to add.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`DateInterval`</ph> enumeration value or <ph id=\"ph2\">`String`</ph> expression representing the time interval you want to add.","pos":[10,113],"source":"`DateInterval` enumeration value or `String` expression representing the time interval you want to add."}]}],"pos":[7880,7994],"yaml":true},{"content":"Required. `Double`. Floating-point expression representing the number of intervals you want to add. <code>Number</code> can be positive (to get date/time values in the future) or negative (to get date/time values in the past). It can contain a fractional part when <code>Interval</code> specifies hours, minutes, or seconds. For other values of <code>Interval</code>, any fractional part of <code>Number</code> is ignored.","nodes":[{"pos":[0,422],"content":"Required. `Double`. Floating-point expression representing the number of intervals you want to add. <code>Number</code> can be positive (to get date/time values in the future) or negative (to get date/time values in the past). It can contain a fractional part when <code>Interval</code> specifies hours, minutes, or seconds. For other values of <code>Interval</code>, any fractional part of <code>Number</code> is ignored.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Double`</ph>.","pos":[10,19],"source":"`Double`."},{"content":"Floating-point expression representing the number of intervals you want to add.","pos":[20,99]},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Number</ph><ept id=\"p1\">&lt;/code&gt;</ept> can be positive (to get date/time values in the future) or negative (to get date/time values in the past).","pos":[100,226],"source":"<code>Number</code> can be positive (to get date/time values in the future) or negative (to get date/time values in the past)."},{"content":"It can contain a fractional part when <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Interval</ph><ept id=\"p1\">&lt;/code&gt;</ept> specifies hours, minutes, or seconds.","pos":[227,324],"source":" It can contain a fractional part when <code>Interval</code> specifies hours, minutes, or seconds."},{"content":"For other values of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Interval</ph><ept id=\"p1\">&lt;/code&gt;</ept>, any fractional part of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">Number</ph><ept id=\"p2\">&lt;/code&gt;</ept> is ignored.","pos":[325,422],"source":" For other values of <code>Interval</code>, any fractional part of <code>Number</code> is ignored."}]}],"pos":[8056,8479],"yaml":true},{"content":"Required. `Date`. An expression representing the date and time to which the interval is to be added. <code>DateValue</code> itself is not changed in the calling program.","nodes":[{"pos":[0,169],"content":"Required. `Date`. An expression representing the date and time to which the interval is to be added. <code>DateValue</code> itself is not changed in the calling program.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Date`</ph>.","pos":[10,17],"source":"`Date`."},{"content":"An expression representing the date and time to which the interval is to be added.","pos":[18,100]},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">DateValue</ph><ept id=\"p1\">&lt;/code&gt;</ept> itself is not changed in the calling program.","pos":[101,169],"source":"<code>DateValue</code> itself is not changed in the calling program."}]}],"pos":[8546,8716],"yaml":true},{"content":"Returns a `Date` value containing a date and time value to which a specified time interval has been added.","nodes":[{"pos":[0,106],"content":"Returns a <ph id=\"ph1\">`Date`</ph> value containing a date and time value to which a specified time interval has been added.","source":"Returns a `Date` value containing a date and time value to which a specified time interval has been added."}],"pos":[8775,8882],"yaml":true},{"content":"<code>DateValue</code> is not coercible to `Date`.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;DateValue&lt;/code&gt;</ph> is not coercible to <ph id=\"ph2\">`Date`</ph>.","source":"<code>DateValue</code> is not coercible to `Date`."}],"pos":[9051,9102],"yaml":true},{"content":"<code>Interval</code> is not valid.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;Interval&lt;/code&gt;</ph> is not valid.","source":"<code>Interval</code> is not valid."}],"pos":[9196,9232],"yaml":true},{"content":"Calculated date is before 00:00:00 on January 1 of the year 1, or later than 23:59:59 on December 31, 9999.","nodes":[{"pos":[0,107],"content":"Calculated date is before 00:00:00 on January 1 of the year 1, or later than 23:59:59 on December 31, 9999.","nodes":[{"content":"Calculated date is before 00:00:00 on January 1 of the year 1, or later than 23:59:59 on December 31, 9999.","pos":[0,107]}]}],"pos":[9346,9454],"yaml":true},{"content":"Returns a `Date` value containing a date and time value to which a specified time interval has been added.","nodes":[{"pos":[0,106],"content":"Returns a <ph id=\"ph1\">`Date`</ph> value containing a date and time value to which a specified time interval has been added.","source":"Returns a `Date` value containing a date and time value to which a specified time interval has been added."}],"pos":[10520,10627],"yaml":true},{"content":"You can use the `DateAdd` function to add or subtract a specified time interval from a date. For example, you can calculate a date 30 days from today or a time 45 minutes before now.  \n  \n To add days to `DateValue`, you can use `DateInterval.Day`, `DateInterval.DayOfYear`, or `DateInterval.Weekday`. These are treated as equivalent because `DayOfYear` and `Weekday` are not meaningful time intervals.  \n  \n The `DateAdd` function never returns an invalid date. If necessary, the day part of the resulting date is adjusted downward to the last day of the resulting month in the resulting year. The following example adds one month to January 31:  \n  \n```vb  \nDim NextMonth As Date = DateAdd(DateInterval.Month, 1, #1/31/1995#)  \n```  \n  \n In this example, `DateAdd` returns `#2/28/1995#`, not `#2/31/1995#`. If `DateValue` is `#1/31/1996#`, it returns `#2/29/1996#` because 1996 is a leap year.  \n  \n> [!NOTE]\n>  `DateAdd` uses the current calendar setting from the <xref:System.Globalization.CultureInfo.CurrentCulture%2A> property of the <xref:System.Globalization.CultureInfo> class in the <xref:System.Globalization> namespace. The default <xref:System.Globalization.CultureInfo.CurrentCulture%2A> values are determined by **Control Panel** settings.  \n  \n Since every `Date` value is supported by a <xref:System.DateTime> structure, its methods give you additional options in adding time intervals. For example, you can add a fractional number of days, rounded to the nearest millisecond, to a `Date` variable as follows:  \n  \n```vb  \nDim NextTime As Date = Now        ' Current date and time.  \nNextTime = NextTime.AddDays(3.4)  ' Increment by 3 2/5 days.  \n```  \n  \n The `Interval` argument can have one of the following settings.  \n  \n|Enumeration value|String|Unit of time interval to add|  \n|-----------------------|------------|----------------------------------|  \n|`DateInterval.Day`|d|Day; truncated to integral value|  \n|`DateInterval.DayOfYear`|y|Day; truncated to integral value|  \n|`DateInterval.Hour`|h|Hour; rounded to nearest millisecond|  \n|`DateInterval.Minute`|n|Minute; rounded to nearest millisecond|  \n|`DateInterval.Month`|m|Month; truncated to integral value|  \n|`DateInterval.Quarter`|q|Quarter; truncated to integral value|  \n|`DateInterval.Second`|s|Second; rounded to nearest millisecond|  \n|`DateInterval.Weekday`|w|Day; truncated to integral value|  \n|`DateInterval.WeekOfYear`|ww|Week; truncated to integral value|  \n|`DateInterval.Year`|yyyy|Year; truncated to integral value|","nodes":[{"pos":[0,182],"content":"You can use the `DateAdd` function to add or subtract a specified time interval from a date. For example, you can calculate a date 30 days from today or a time 45 minutes before now.","nodes":[{"content":"You can use the <ph id=\"ph1\">`DateAdd`</ph> function to add or subtract a specified time interval from a date.","pos":[0,92],"source":"You can use the `DateAdd` function to add or subtract a specified time interval from a date."},{"content":"For example, you can calculate a date 30 days from today or a time 45 minutes before now.","pos":[93,182]}]},{"pos":[189,402],"content":"To add days to `DateValue`, you can use `DateInterval.Day`, `DateInterval.DayOfYear`, or `DateInterval.Weekday`. These are treated as equivalent because `DayOfYear` and `Weekday` are not meaningful time intervals.","nodes":[{"content":"To add days to <ph id=\"ph1\">`DateValue`</ph>, you can use <ph id=\"ph2\">`DateInterval.Day`</ph>, <ph id=\"ph3\">`DateInterval.DayOfYear`</ph>, or <ph id=\"ph4\">`DateInterval.Weekday`</ph>.","pos":[0,112],"source":"To add days to `DateValue`, you can use `DateInterval.Day`, `DateInterval.DayOfYear`, or `DateInterval.Weekday`."},{"content":"These are treated as equivalent because <ph id=\"ph1\">`DayOfYear`</ph> and <ph id=\"ph2\">`Weekday`</ph> are not meaningful time intervals.","pos":[113,213],"source":" These are treated as equivalent because `DayOfYear` and `Weekday` are not meaningful time intervals."}]},{"pos":[409,646],"content":"The `DateAdd` function never returns an invalid date. If necessary, the day part of the resulting date is adjusted downward to the last day of the resulting month in the resulting year. The following example adds one month to January 31:","nodes":[{"content":"The <ph id=\"ph1\">`DateAdd`</ph> function never returns an invalid date.","pos":[0,53],"source":"The `DateAdd` function never returns an invalid date."},{"content":"If necessary, the day part of the resulting date is adjusted downward to the last day of the resulting month in the resulting year.","pos":[54,185]},{"content":"The following example adds one month to January 31:","pos":[186,237]}]},{"pos":[740,895],"content":"In this example, `DateAdd` returns `#2/28/1995#`, not `#2/31/1995#`. If `DateValue` is `#1/31/1996#`, it returns `#2/29/1996#` because 1996 is a leap year.","nodes":[{"content":"In this example, <ph id=\"ph1\">`DateAdd`</ph> returns <ph id=\"ph2\">`#2/28/1995#`</ph>, not <ph id=\"ph3\">`#2/31/1995#`</ph>.","pos":[0,68],"source":"In this example, `DateAdd` returns `#2/28/1995#`, not `#2/31/1995#`."},{"content":"If <ph id=\"ph1\">`DateValue`</ph> is <ph id=\"ph2\">`#1/31/1996#`</ph>, it returns <ph id=\"ph3\">`#2/29/1996#`</ph> because 1996 is a leap year.","pos":[69,155],"source":" If `DateValue` is `#1/31/1996#`, it returns `#2/29/1996#` because 1996 is a leap year."}]},{"pos":[903,1255],"content":"[!NOTE]\n `DateAdd` uses the current calendar setting from the <xref:System.Globalization.CultureInfo.CurrentCulture%2A> property of the <xref:System.Globalization.CultureInfo> class in the <xref:System.Globalization> namespace. The default <xref:System.Globalization.CultureInfo.CurrentCulture%2A> values are determined by **Control Panel** settings.","leadings":["","> "],"nodes":[{"content":" `DateAdd` uses the current calendar setting from the <xref:System.Globalization.CultureInfo.CurrentCulture%2A> property of the <xref:System.Globalization.CultureInfo> class in the <xref:System.Globalization> namespace. The default <xref:System.Globalization.CultureInfo.CurrentCulture%2A> values are determined by **Control Panel** settings.","pos":[8,350],"nodes":[{"content":"<ph id=\"ph1\"> `DateAdd`</ph> uses the current calendar setting from the <ph id=\"ph2\">&lt;xref:System.Globalization.CultureInfo.CurrentCulture%2A&gt;</ph> property of the <ph id=\"ph3\">&lt;xref:System.Globalization.CultureInfo&gt;</ph> class in the <ph id=\"ph4\">&lt;xref:System.Globalization&gt;</ph> namespace.","pos":[0,219],"source":" `DateAdd` uses the current calendar setting from the <xref:System.Globalization.CultureInfo.CurrentCulture%2A> property of the <xref:System.Globalization.CultureInfo> class in the <xref:System.Globalization> namespace."},{"content":"The default <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo.CurrentCulture%2A&gt;</ph> values are determined by <bpt id=\"p1\">**</bpt>Control Panel<ept id=\"p1\">**</ept> settings.","pos":[220,342],"source":" The default <xref:System.Globalization.CultureInfo.CurrentCulture%2A> values are determined by **Control Panel** settings."}]}]},{"pos":[1262,1527],"content":"Since every `Date` value is supported by a <xref:System.DateTime> structure, its methods give you additional options in adding time intervals. For example, you can add a fractional number of days, rounded to the nearest millisecond, to a `Date` variable as follows:","nodes":[{"content":"Since every <ph id=\"ph1\">`Date`</ph> value is supported by a <ph id=\"ph2\">&lt;xref:System.DateTime&gt;</ph> structure, its methods give you additional options in adding time intervals.","pos":[0,142],"source":"Since every `Date` value is supported by a <xref:System.DateTime> structure, its methods give you additional options in adding time intervals."},{"content":"For example, you can add a fractional number of days, rounded to the nearest millisecond, to a <ph id=\"ph1\">`Date`</ph> variable as follows:","pos":[143,265],"source":" For example, you can add a fractional number of days, rounded to the nearest millisecond, to a `Date` variable as follows:"}]},{"pos":[1675,1738],"content":"The <ph id=\"ph1\">`Interval`</ph> argument can have one of the following settings.","source":"The `Interval` argument can have one of the following settings."},{"pos":[1745,1762],"content":"Enumeration value","nodes":[{"content":"Enumeration value","pos":[0,17]}]},{"pos":[1763,1769],"content":"String","nodes":[{"content":"String","pos":[0,6]}]},{"pos":[1770,1798],"content":"Unit of time interval to add","nodes":[{"content":"Unit of time interval to add","pos":[0,28]}]},{"pos":[1898,1899],"content":"d","nodes":[{"content":"d","pos":[0,1]}]},{"pos":[1900,1932],"content":"Day; truncated to integral value","nodes":[{"content":"Day; truncated to integral value","pos":[0,32]}]},{"pos":[1962,1963],"content":"y","nodes":[{"content":"y","pos":[0,1]}]},{"pos":[1964,1996],"content":"Day; truncated to integral value","nodes":[{"content":"Day; truncated to integral value","pos":[0,32]}]},{"pos":[2021,2022],"content":"h","nodes":[{"content":"h","pos":[0,1]}]},{"pos":[2023,2059],"content":"Hour; rounded to nearest millisecond","nodes":[{"content":"Hour; rounded to nearest millisecond","pos":[0,36]}]},{"pos":[2086,2087],"content":"n","nodes":[]},{"pos":[2088,2126],"content":"Minute; rounded to nearest millisecond","nodes":[{"content":"Minute; rounded to nearest millisecond","pos":[0,38]}]},{"pos":[2152,2153],"content":"m","nodes":[{"content":"m","pos":[0,1]}]},{"pos":[2154,2188],"content":"Month; truncated to integral value","nodes":[{"content":"Month; truncated to integral value","pos":[0,34]}]},{"pos":[2216,2217],"content":"q","nodes":[{"content":"q","pos":[0,1]}]},{"pos":[2218,2254],"content":"Quarter; truncated to integral value","nodes":[{"content":"Quarter; truncated to integral value","pos":[0,36]}]},{"pos":[2281,2282],"content":"s","nodes":[{"content":"s","pos":[0,1]}]},{"pos":[2283,2321],"content":"Second; rounded to nearest millisecond","nodes":[{"content":"Second; rounded to nearest millisecond","pos":[0,38]}]},{"pos":[2349,2350],"content":"w","nodes":[{"content":"w","pos":[0,1]}]},{"pos":[2351,2383],"content":"Day; truncated to integral value","nodes":[{"content":"Day; truncated to integral value","pos":[0,32]}]},{"pos":[2414,2416],"content":"ww","nodes":[{"content":"ww","pos":[0,2]}]},{"pos":[2417,2450],"content":"Week; truncated to integral value","nodes":[{"content":"Week; truncated to integral value","pos":[0,33]}]},{"pos":[2475,2479],"content":"yyyy","nodes":[{"content":"yyyy","pos":[0,4]}]},{"pos":[2480,2513],"content":"Year; truncated to integral value","nodes":[{"content":"Year; truncated to integral value","pos":[0,33]}]}],"pos":[10638,13190],"yaml":true,"extradata":"MT"},{"content":"Required. `DateInterval` enumeration value or `String` expression representing the time interval you want to add.","nodes":[{"pos":[0,113],"content":"Required. `DateInterval` enumeration value or `String` expression representing the time interval you want to add.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`DateInterval`</ph> enumeration value or <ph id=\"ph2\">`String`</ph> expression representing the time interval you want to add.","pos":[10,113],"source":"`DateInterval` enumeration value or `String` expression representing the time interval you want to add."}]}],"pos":[13654,13768],"yaml":true},{"content":"Required. `Double`. Floating-point expression representing the number of intervals you want to add. <code>Number</code> can be positive (to get date/time values in the future) or negative (to get date/time values in the past). It can contain a fractional part when <code>Interval</code> specifies hours, minutes, or seconds. For other values of <code>Interval</code>, any fractional part of <code>Number</code> is ignored.","nodes":[{"pos":[0,422],"content":"Required. `Double`. Floating-point expression representing the number of intervals you want to add. <code>Number</code> can be positive (to get date/time values in the future) or negative (to get date/time values in the past). It can contain a fractional part when <code>Interval</code> specifies hours, minutes, or seconds. For other values of <code>Interval</code>, any fractional part of <code>Number</code> is ignored.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Double`</ph>.","pos":[10,19],"source":"`Double`."},{"content":"Floating-point expression representing the number of intervals you want to add.","pos":[20,99]},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Number</ph><ept id=\"p1\">&lt;/code&gt;</ept> can be positive (to get date/time values in the future) or negative (to get date/time values in the past).","pos":[100,226],"source":"<code>Number</code> can be positive (to get date/time values in the future) or negative (to get date/time values in the past)."},{"content":"It can contain a fractional part when <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Interval</ph><ept id=\"p1\">&lt;/code&gt;</ept> specifies hours, minutes, or seconds.","pos":[227,324],"source":" It can contain a fractional part when <code>Interval</code> specifies hours, minutes, or seconds."},{"content":"For other values of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Interval</ph><ept id=\"p1\">&lt;/code&gt;</ept>, any fractional part of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">Number</ph><ept id=\"p2\">&lt;/code&gt;</ept> is ignored.","pos":[325,422],"source":" For other values of <code>Interval</code>, any fractional part of <code>Number</code> is ignored."}]}],"pos":[13830,14253],"yaml":true},{"content":"Required. `Date`. An expression representing the date and time to which the interval is to be added. <code>DateValue</code> itself is not changed in the calling program.","nodes":[{"pos":[0,169],"content":"Required. `Date`. An expression representing the date and time to which the interval is to be added. <code>DateValue</code> itself is not changed in the calling program.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Date`</ph>.","pos":[10,17],"source":"`Date`."},{"content":"An expression representing the date and time to which the interval is to be added.","pos":[18,100]},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">DateValue</ph><ept id=\"p1\">&lt;/code&gt;</ept> itself is not changed in the calling program.","pos":[101,169],"source":"<code>DateValue</code> itself is not changed in the calling program."}]}],"pos":[14318,14488],"yaml":true},{"content":"Returns a `Date` value containing a date and time value to which a specified time interval has been added.","nodes":[{"pos":[0,106],"content":"Returns a <ph id=\"ph1\">`Date`</ph> value containing a date and time value to which a specified time interval has been added.","source":"Returns a `Date` value containing a date and time value to which a specified time interval has been added."}],"pos":[14547,14654],"yaml":true},{"content":"<code>DateValue</code> is not coercible to `Date`.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;DateValue&lt;/code&gt;</ph> is not coercible to <ph id=\"ph2\">`Date`</ph>.","source":"<code>DateValue</code> is not coercible to `Date`."}],"pos":[14823,14874],"yaml":true},{"content":"<code>Interval</code> is not valid.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;Interval&lt;/code&gt;</ph> is not valid.","source":"<code>Interval</code> is not valid."}],"pos":[14968,15004],"yaml":true},{"content":"Calculated date is before 00:00:00 on January 1 of the year 1, or later than 23:59:59 on December 31, 9999.","nodes":[{"pos":[0,107],"content":"Calculated date is before 00:00:00 on January 1 of the year 1, or later than 23:59:59 on December 31, 9999.","nodes":[{"content":"Calculated date is before 00:00:00 on January 1 of the year 1, or later than 23:59:59 on December 31, 9999.","pos":[0,107]}]}],"pos":[15118,15226],"yaml":true},{"content":"Returns a `Long` value specifying the number of time intervals between two `Date` values.","nodes":[{"pos":[0,89],"content":"Returns a <ph id=\"ph1\">`Long`</ph> value specifying the number of time intervals between two <ph id=\"ph2\">`Date`</ph> values.","source":"Returns a `Long` value specifying the number of time intervals between two `Date` values."}],"pos":[16727,16817],"yaml":true},{"content":"You can use the `DateDiff` function to determine how many specified time intervals exist between two date/time values. For example, you might use `DateDiff` to calculate the number of days between two dates, or the number of weeks between today and the end of the year.  \n  \n## Behavior  \n  \n-   **Treatment of Parameters.** `DateDiff` subtracts the value of `Date1` from the value of `Date2` to produce the difference. Neither value is changed in the calling program.  \n  \n-   **Return Values.** Because `Date1` and `Date2` are of the `Date` data type, they hold date and time values accurate to 100-nanosecond ticks on the system timer. However, `DateDiff` always returns the number of time intervals as a `Long` value.  \n  \n     If `Date1` represents a later date and time than `Date2`, `DateDiff` returns a negative number.  \n  \n-   **Day Intervals.** If `Interval` is set to `DateInterval.DayOfYear`, it is treated the same as `DateInterval.Day`, because `DayOfYear` is not a meaningful unit for a time interval.  \n  \n-   **Week Intervals.** If `Interval` is set to `DateInterval.WeekOfYear`, the return value represents the number of weeks between the first day of the week containing `Date1` and the first day of the week containing `Date2`. The following example shows how this produces different results from `DateInterval.Weekday`.  \n  \n     [!code-vb[VbVbalrFunctions#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#60)]  \n  \n     In the preceding example, `DateDiff` returns 0 to `wD` because the difference between the two dates is less than seven days, but it returns 1 to `wY` because there is a seven-day difference between the first days of the respective calendar weeks.  \n  \n-   **Larger Intervals.** If `Interval` is set to `DateInterval.Year`, the return value is calculated purely from the year parts of `Date1` and `Date2`. Similarly, the return value for `DateInterval.Month` is calculated purely from the year and month parts of the arguments, and for `DateInterval.Quarter` from the quarters containing the two dates.  \n  \n     For example, when comparing December 31 to January 1 of the following year, `DateDiff` returns 1 for `DateInterval.Year`, `DateInterval.Quarter`, or `DateInterval.Month`, even though at most only one day has elapsed.  \n  \n     For cultures such as Japanese that have multiple eras, the `DateDiff` method does not return a difference in years if the difference spans two or more eras. Instead, you can calculate the difference in values returned by the <xref:System.DateTime.Year%2A> property, as shown in the following example: `date2.Year - date1.Year`.  \n  \n-   **Other Intervals.** Since every `Date` value is supported by a <xref:System.DateTime> structure, its methods give you additional options in finding time intervals. For example, you can use the `Subtract` method in either of its overloaded forms: <xref:System.DateTime.Subtract%2A?displayProperty=fullName> subtracts a <xref:System.TimeSpan> from a `Date` variable to return another `Date` value, and <xref:System.DateTime.Subtract%2A?displayProperty=fullName> subtracts a `Date` value to return a <xref:System.TimeSpan>. You can time a process to find out how many milliseconds it takes, as the following example shows.  \n  \n     [!code-vb[VbVbalrFunctions#61](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#61)]  \n  \n The `Interval` argument can have one of the following settings.  \n  \n|Enumeration value|String value|Unit of time difference|  \n|-----------------------|------------------|-----------------------------|  \n|`DateInterval.Day`|\"d\"|Day|  \n|`DateInterval.DayOfYear`|\"y\"|Day|  \n|`DateInterval.Hour`|\"h\"|Hour|  \n|`DateInterval.Minute`|\"n\"|Minute|  \n|`DateInterval.Month`|\"m\"|Month|  \n|`DateInterval.Quarter`|\"q\"|Quarter|  \n|`DateInterval.Second`|\"s\"|Second|  \n|`DateInterval.Weekday`|\"w\"|Week|  \n|`DateInterval.WeekOfYear`|\"ww\"|Calendar week|  \n|`DateInterval.Year`|\"yyyy\"|Year|  \n  \n The `DayOfWeek` argument can have one of the following settings.  \n  \n|Enumeration value|Value|Description|  \n|-----------------------|-----------|-----------------|  \n|`FirstDayOfWeek.System`|0|First day of week specified in system settings|  \n|`FirstDayOfWeek.Sunday`|1|Sunday (default)|  \n|`FirstDayOfWeek.Monday`|2|Monday (complies with ISO standard 8601, section 3.17)|  \n|`FirstDayOfWeek.Tuesday`|3|Tuesday|  \n|`FirstDayOfWeek.Wednesday`|4|Wednesday|  \n|`FirstDayOfWeek.Thursday`|5|Thursday|  \n|`FirstDayOfWeek.Friday`|6|Friday|  \n|`FirstDayOfWeek.Saturday`|7|Saturday|  \n  \n The `WeekOfYear` argument can have one of the following settings.  \n  \n|Enumeration value|Value|Description|  \n|-----------------------|-----------|-----------------|  \n|`FirstWeekOfYear.System`|0|First week of year specified in system settings|  \n|`FirstWeekOfYear.Jan1`|1|Week in which January 1 occurs (default)|  \n|`FirstWeekOfYear.FirstFourDays`|2|Week that has at least four days in the new year (complies with ISO standard 8601, section 3.17)|  \n|`FirstWeekOfYear.FirstFullWeek`|3|First full week in the new year|","nodes":[{"pos":[0,269],"content":"You can use the `DateDiff` function to determine how many specified time intervals exist between two date/time values. For example, you might use `DateDiff` to calculate the number of days between two dates, or the number of weeks between today and the end of the year.","nodes":[{"content":"You can use the <ph id=\"ph1\">`DateDiff`</ph> function to determine how many specified time intervals exist between two date/time values.","pos":[0,118],"source":"You can use the `DateDiff` function to determine how many specified time intervals exist between two date/time values."},{"content":"For example, you might use <ph id=\"ph1\">`DateDiff`</ph> to calculate the number of days between two dates, or the number of weeks between today and the end of the year.","pos":[119,269],"source":" For example, you might use `DateDiff` to calculate the number of days between two dates, or the number of weeks between today and the end of the year."}]},{"pos":[278,286],"content":"Behavior","linkify":"Behavior","nodes":[{"content":"Behavior","pos":[0,8]}]},{"pos":[296,468],"content":"**Treatment of Parameters.** `DateDiff` subtracts the value of `Date1` from the value of `Date2` to produce the difference. Neither value is changed in the calling program.","nodes":[{"content":"<bpt id=\"p1\">**</bpt>Treatment of Parameters.<ept id=\"p1\">**</ept>","pos":[0,28],"source":"**Treatment of Parameters.**"},{"content":"<ph id=\"ph1\">`DateDiff`</ph> subtracts the value of <ph id=\"ph2\">`Date1`</ph> from the value of <ph id=\"ph3\">`Date2`</ph> to produce the difference.","pos":[29,123],"source":"`DateDiff` subtracts the value of `Date1` from the value of `Date2` to produce the difference."},{"content":"Neither value is changed in the calling program.","pos":[124,172]}]},{"pos":[478,721],"content":"**Return Values.** Because `Date1` and `Date2` are of the `Date` data type, they hold date and time values accurate to 100-nanosecond ticks on the system timer. However, `DateDiff` always returns the number of time intervals as a `Long` value.","nodes":[{"content":"<bpt id=\"p1\">**</bpt>Return Values.<ept id=\"p1\">**</ept>","pos":[0,18],"source":"**Return Values.**"},{"content":"Because <ph id=\"ph1\">`Date1`</ph> and <ph id=\"ph2\">`Date2`</ph> are of the <ph id=\"ph3\">`Date`</ph> data type, they hold date and time values accurate to 100-nanosecond ticks on the system timer.","pos":[19,160],"source":" Because `Date1` and `Date2` are of the `Date` data type, they hold date and time values accurate to 100-nanosecond ticks on the system timer."},{"content":"However, <ph id=\"ph1\">`DateDiff`</ph> always returns the number of time intervals as a <ph id=\"ph2\">`Long`</ph> value.","pos":[161,243],"source":" However, `DateDiff` always returns the number of time intervals as a `Long` value."}]},{"pos":[732,827],"content":"If <ph id=\"ph1\">`Date1`</ph> represents a later date and time than <ph id=\"ph2\">`Date2`</ph>, <ph id=\"ph3\">`DateDiff`</ph> returns a negative number.","source":"If `Date1` represents a later date and time than `Date2`, `DateDiff` returns a negative number."},{"pos":[837,1017],"content":"**Day Intervals.** If `Interval` is set to `DateInterval.DayOfYear`, it is treated the same as `DateInterval.Day`, because `DayOfYear` is not a meaningful unit for a time interval.","nodes":[{"content":"<bpt id=\"p1\">**</bpt>Day Intervals.<ept id=\"p1\">**</ept>","pos":[0,18],"source":"**Day Intervals.**"},{"content":"If <ph id=\"ph1\">`Interval`</ph> is set to <ph id=\"ph2\">`DateInterval.DayOfYear`</ph>, it is treated the same as <ph id=\"ph3\">`DateInterval.Day`</ph>, because <ph id=\"ph4\">`DayOfYear`</ph> is not a meaningful unit for a time interval.","pos":[19,180],"source":" If `Interval` is set to `DateInterval.DayOfYear`, it is treated the same as `DateInterval.Day`, because `DayOfYear` is not a meaningful unit for a time interval."}]},{"pos":[1027,1341],"content":"**Week Intervals.** If `Interval` is set to `DateInterval.WeekOfYear`, the return value represents the number of weeks between the first day of the week containing `Date1` and the first day of the week containing `Date2`. The following example shows how this produces different results from `DateInterval.Weekday`.","nodes":[{"content":"<bpt id=\"p1\">**</bpt>Week Intervals.<ept id=\"p1\">**</ept>","pos":[0,19],"source":"**Week Intervals.**"},{"content":"If <ph id=\"ph1\">`Interval`</ph> is set to <ph id=\"ph2\">`DateInterval.WeekOfYear`</ph>, the return value represents the number of weeks between the first day of the week containing <ph id=\"ph3\">`Date1`</ph> and the first day of the week containing <ph id=\"ph4\">`Date2`</ph>.","pos":[20,221],"source":" If `Interval` is set to `DateInterval.WeekOfYear`, the return value represents the number of weeks between the first day of the week containing `Date1` and the first day of the week containing `Date2`."},{"content":"The following example shows how this produces different results from <ph id=\"ph1\">`DateInterval.Weekday`</ph>.","pos":[222,314],"source":" The following example shows how this produces different results from `DateInterval.Weekday`."}]},{"pos":[1352,1469],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrFunctions#60<ept id=\"p2\">](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#60)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrFunctions#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#60)]"},{"pos":[1480,1726],"content":"In the preceding example, <ph id=\"ph1\">`DateDiff`</ph> returns 0 to <ph id=\"ph2\">`wD`</ph> because the difference between the two dates is less than seven days, but it returns 1 to <ph id=\"ph3\">`wY`</ph> because there is a seven-day difference between the first days of the respective calendar weeks.","source":"In the preceding example, `DateDiff` returns 0 to `wD` because the difference between the two dates is less than seven days, but it returns 1 to `wY` because there is a seven-day difference between the first days of the respective calendar weeks."},{"pos":[1736,2081],"content":"**Larger Intervals.** If `Interval` is set to `DateInterval.Year`, the return value is calculated purely from the year parts of `Date1` and `Date2`. Similarly, the return value for `DateInterval.Month` is calculated purely from the year and month parts of the arguments, and for `DateInterval.Quarter` from the quarters containing the two dates.","nodes":[{"content":"<bpt id=\"p1\">**</bpt>Larger Intervals.<ept id=\"p1\">**</ept>","pos":[0,21],"source":"**Larger Intervals.**"},{"content":"If <ph id=\"ph1\">`Interval`</ph> is set to <ph id=\"ph2\">`DateInterval.Year`</ph>, the return value is calculated purely from the year parts of <ph id=\"ph3\">`Date1`</ph> and <ph id=\"ph4\">`Date2`</ph>.","pos":[22,148],"source":" If `Interval` is set to `DateInterval.Year`, the return value is calculated purely from the year parts of `Date1` and `Date2`."},{"content":"Similarly, the return value for <ph id=\"ph1\">`DateInterval.Month`</ph> is calculated purely from the year and month parts of the arguments, and for <ph id=\"ph2\">`DateInterval.Quarter`</ph> from the quarters containing the two dates.","pos":[149,345],"source":" Similarly, the return value for `DateInterval.Month` is calculated purely from the year and month parts of the arguments, and for `DateInterval.Quarter` from the quarters containing the two dates."}]},{"pos":[2092,2308],"content":"For example, when comparing December 31 to January 1 of the following year, <ph id=\"ph1\">`DateDiff`</ph> returns 1 for <ph id=\"ph2\">`DateInterval.Year`</ph>, <ph id=\"ph3\">`DateInterval.Quarter`</ph>, or <ph id=\"ph4\">`DateInterval.Month`</ph>, even though at most only one day has elapsed.","source":"For example, when comparing December 31 to January 1 of the following year, `DateDiff` returns 1 for `DateInterval.Year`, `DateInterval.Quarter`, or `DateInterval.Month`, even though at most only one day has elapsed."},{"pos":[2319,2646],"content":"For cultures such as Japanese that have multiple eras, the `DateDiff` method does not return a difference in years if the difference spans two or more eras. Instead, you can calculate the difference in values returned by the <xref:System.DateTime.Year%2A> property, as shown in the following example: `date2.Year - date1.Year`.","nodes":[{"content":"For cultures such as Japanese that have multiple eras, the <ph id=\"ph1\">`DateDiff`</ph> method does not return a difference in years if the difference spans two or more eras.","pos":[0,156],"source":"For cultures such as Japanese that have multiple eras, the `DateDiff` method does not return a difference in years if the difference spans two or more eras."},{"content":"Instead, you can calculate the difference in values returned by the <ph id=\"ph1\">&lt;xref:System.DateTime.Year%2A&gt;</ph> property, as shown in the following example: <ph id=\"ph2\">`date2.Year - date1.Year`</ph>.","pos":[157,327],"source":" Instead, you can calculate the difference in values returned by the <xref:System.DateTime.Year%2A> property, as shown in the following example: `date2.Year - date1.Year`."}]},{"pos":[2656,3276],"content":"**Other Intervals.** Since every `Date` value is supported by a <xref:System.DateTime> structure, its methods give you additional options in finding time intervals. For example, you can use the `Subtract` method in either of its overloaded forms: <xref:System.DateTime.Subtract%2A?displayProperty=fullName> subtracts a <xref:System.TimeSpan> from a `Date` variable to return another `Date` value, and <xref:System.DateTime.Subtract%2A?displayProperty=fullName> subtracts a `Date` value to return a <xref:System.TimeSpan>. You can time a process to find out how many milliseconds it takes, as the following example shows.","nodes":[{"content":"<bpt id=\"p1\">**</bpt>Other Intervals.<ept id=\"p1\">**</ept>","pos":[0,20],"source":"**Other Intervals.**"},{"content":"Since every <ph id=\"ph1\">`Date`</ph> value is supported by a <ph id=\"ph2\">&lt;xref:System.DateTime&gt;</ph> structure, its methods give you additional options in finding time intervals.","pos":[21,164],"source":" Since every `Date` value is supported by a <xref:System.DateTime> structure, its methods give you additional options in finding time intervals."},{"content":"For example, you can use the <ph id=\"ph1\">`Subtract`</ph> method in either of its overloaded forms: <ph id=\"ph2\">&lt;xref:System.DateTime.Subtract%2A?displayProperty=fullName&gt;</ph> subtracts a <ph id=\"ph3\">&lt;xref:System.TimeSpan&gt;</ph> from a <ph id=\"ph4\">`Date`</ph> variable to return another <ph id=\"ph5\">`Date`</ph> value, and <ph id=\"ph6\">&lt;xref:System.DateTime.Subtract%2A?displayProperty=fullName&gt;</ph> subtracts a <ph id=\"ph7\">`Date`</ph> value to return a <ph id=\"ph8\">&lt;xref:System.TimeSpan&gt;</ph>.","pos":[165,521],"source":" For example, you can use the `Subtract` method in either of its overloaded forms: <xref:System.DateTime.Subtract%2A?displayProperty=fullName> subtracts a <xref:System.TimeSpan> from a `Date` variable to return another `Date` value, and <xref:System.DateTime.Subtract%2A?displayProperty=fullName> subtracts a `Date` value to return a <xref:System.TimeSpan>."},{"content":"You can time a process to find out how many milliseconds it takes, as the following example shows.","pos":[522,620]}]},{"pos":[3287,3404],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrFunctions#61<ept id=\"p2\">](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#61)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrFunctions#61](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#61)]"},{"pos":[3411,3474],"content":"The <ph id=\"ph1\">`Interval`</ph> argument can have one of the following settings.","source":"The `Interval` argument can have one of the following settings."},{"pos":[3481,3498],"content":"Enumeration value","nodes":[{"content":"Enumeration value","pos":[0,17]}]},{"pos":[3499,3511],"content":"String value","nodes":[{"content":"String value","pos":[0,12]}]},{"pos":[3512,3535],"content":"Unit of time difference","nodes":[{"content":"Unit of time difference","pos":[0,23]}]},{"pos":[3636,3639],"content":"\"d\"","nodes":[{"content":"\"d\"","pos":[0,3]}]},{"pos":[3640,3643],"content":"Day","nodes":[{"content":"Day","pos":[0,3]}]},{"pos":[3673,3676],"content":"\"y\"","nodes":[{"content":"\"y\"","pos":[0,3]}]},{"pos":[3677,3680],"content":"Day","nodes":[{"content":"Day","pos":[0,3]}]},{"pos":[3705,3708],"content":"\"h\"","nodes":[{"content":"\"h\"","pos":[0,3]}]},{"pos":[3709,3713],"content":"Hour","nodes":[{"content":"Hour","pos":[0,4]}]},{"pos":[3740,3743],"content":"\"n\"","nodes":[{"content":"\"n\"","pos":[0,3]}]},{"pos":[3744,3750],"content":"Minute","nodes":[{"content":"Minute","pos":[0,6]}]},{"pos":[3776,3779],"content":"\"m\"","nodes":[{"content":"\"m\"","pos":[0,3]}]},{"pos":[3780,3785],"content":"Month","nodes":[{"content":"Month","pos":[0,5]}]},{"pos":[3813,3816],"content":"\"q\"","nodes":[{"content":"\"q\"","pos":[0,3]}]},{"pos":[3817,3824],"content":"Quarter","nodes":[{"content":"Quarter","pos":[0,7]}]},{"pos":[3851,3854],"content":"\"s\"","nodes":[{"content":"\"s\"","pos":[0,3]}]},{"pos":[3855,3861],"content":"Second","nodes":[{"content":"Second","pos":[0,6]}]},{"pos":[3889,3892],"content":"\"w\"","nodes":[{"content":"\"w\"","pos":[0,3]}]},{"pos":[3893,3897],"content":"Week","nodes":[{"content":"Week","pos":[0,4]}]},{"pos":[3928,3932],"content":"\"ww\"","nodes":[{"content":"\"ww\"","pos":[0,4]}]},{"pos":[3933,3946],"content":"Calendar week","nodes":[{"content":"Calendar week","pos":[0,13]}]},{"pos":[3971,3977],"content":"\"yyyy\"","nodes":[{"content":"\"yyyy\"","pos":[0,6]}]},{"pos":[3978,3982],"content":"Year","nodes":[{"content":"Year","pos":[0,4]}]},{"pos":[3990,4054],"content":"The <ph id=\"ph1\">`DayOfWeek`</ph> argument can have one of the following settings.","source":"The `DayOfWeek` argument can have one of the following settings."},{"pos":[4061,4078],"content":"Enumeration value","nodes":[{"content":"Enumeration value","pos":[0,17]}]},{"pos":[4079,4084],"content":"Value","nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[4085,4096],"content":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"pos":[4183,4184],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[4185,4231],"content":"First day of week specified in system settings","nodes":[{"content":"First day of week specified in system settings","pos":[0,46]}]},{"pos":[4260,4261],"content":"1","nodes":[{"content":"1","pos":[0,1]}]},{"pos":[4262,4278],"content":"Sunday (default)","nodes":[{"content":"Sunday (default)","pos":[0,16]}]},{"pos":[4307,4308],"content":"2","nodes":[{"content":"2","pos":[0,1]}]},{"pos":[4309,4363],"content":"Monday (complies with ISO standard 8601, section 3.17)","nodes":[{"content":"Monday (complies with ISO standard 8601, section 3.17)","pos":[0,54]}]},{"pos":[4393,4394],"content":"3","nodes":[{"content":"3","pos":[0,1]}]},{"pos":[4395,4402],"content":"Tuesday","nodes":[{"content":"Tuesday","pos":[0,7]}]},{"pos":[4434,4435],"content":"4","nodes":[{"content":"4","pos":[0,1]}]},{"pos":[4436,4445],"content":"Wednesday","nodes":[{"content":"Wednesday","pos":[0,9]}]},{"pos":[4476,4477],"content":"5","nodes":[{"content":"5","pos":[0,1]}]},{"pos":[4478,4486],"content":"Thursday","nodes":[{"content":"Thursday","pos":[0,8]}]},{"pos":[4515,4516],"content":"6","nodes":[{"content":"6","pos":[0,1]}]},{"pos":[4517,4523],"content":"Friday","nodes":[{"content":"Friday","pos":[0,6]}]},{"pos":[4554,4555],"content":"7","nodes":[{"content":"7","pos":[0,1]}]},{"pos":[4556,4564],"content":"Saturday","nodes":[{"content":"Saturday","pos":[0,8]}]},{"pos":[4572,4637],"content":"The <ph id=\"ph1\">`WeekOfYear`</ph> argument can have one of the following settings.","source":"The `WeekOfYear` argument can have one of the following settings."},{"pos":[4644,4661],"content":"Enumeration value","nodes":[{"content":"Enumeration value","pos":[0,17]}]},{"pos":[4662,4667],"content":"Value","nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[4668,4679],"content":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"pos":[4767,4768],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[4769,4816],"content":"First week of year specified in system settings","nodes":[{"content":"First week of year specified in system settings","pos":[0,47]}]},{"pos":[4844,4845],"content":"1","nodes":[{"content":"1","pos":[0,1]}]},{"pos":[4846,4886],"content":"Week in which January 1 occurs (default)","nodes":[{"content":"Week in which January 1 occurs (default)","pos":[0,40]}]},{"pos":[4923,4924],"content":"2","nodes":[{"content":"2","pos":[0,1]}]},{"pos":[4925,5021],"content":"Week that has at least four days in the new year (complies with ISO standard 8601, section 3.17)","nodes":[{"content":"Week that has at least four days in the new year (complies with ISO standard 8601, section 3.17)","pos":[0,96]}]},{"pos":[5058,5059],"content":"3","nodes":[{"content":"3","pos":[0,1]}]},{"pos":[5060,5091],"content":"First full week in the new year","nodes":[{"content":"First full week in the new year","pos":[0,31]}]}],"pos":[16828,22006],"yaml":true,"extradata":"MT"},{"content":"Required. `DateInterval` enumeration value or `String` expression representing the time interval you want to use as the unit of difference between <code>Date1</code> and <code>Date2</code>.","nodes":[{"pos":[0,189],"content":"Required. `DateInterval` enumeration value or `String` expression representing the time interval you want to use as the unit of difference between <code>Date1</code> and <code>Date2</code>.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`DateInterval`</ph> enumeration value or <ph id=\"ph2\">`String`</ph> expression representing the time interval you want to use as the unit of difference between <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">Date1</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph4\">Date2</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","pos":[10,189],"source":"`DateInterval` enumeration value or `String` expression representing the time interval you want to use as the unit of difference between <code>Date1</code> and <code>Date2</code>."}]}],"pos":[22673,22863],"yaml":true},{"content":"Required. `Date`. The first date/time value you want to use in the calculation.","nodes":[{"pos":[0,79],"content":"Required. `Date`. The first date/time value you want to use in the calculation.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Date`</ph>.","pos":[10,17],"source":"`Date`."},{"content":"The first date/time value you want to use in the calculation.","pos":[18,79]}]}],"pos":[22926,23006],"yaml":true},{"content":"Required. `Date`. The second date/time value you want to use in the calculation.","nodes":[{"pos":[0,80],"content":"Required. `Date`. The second date/time value you want to use in the calculation.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Date`</ph>.","pos":[10,17],"source":"`Date`."},{"content":"The second date/time value you want to use in the calculation.","pos":[18,80]}]}],"pos":[23069,23150],"yaml":true},{"content":"Optional. A value chosen from the `FirstDayOfWeek` enumeration that specifies the first day of the week. If not specified, `FirstDayOfWeek.Sunday` is used.","nodes":[{"pos":[0,155],"content":"Optional. A value chosen from the `FirstDayOfWeek` enumeration that specifies the first day of the week. If not specified, `FirstDayOfWeek.Sunday` is used.","nodes":[{"content":"Optional.","pos":[0,9]},{"content":"A value chosen from the <ph id=\"ph1\">`FirstDayOfWeek`</ph> enumeration that specifies the first day of the week.","pos":[10,104],"source":" A value chosen from the `FirstDayOfWeek` enumeration that specifies the first day of the week."},{"content":"If not specified, <ph id=\"ph1\">`FirstDayOfWeek.Sunday`</ph> is used.","pos":[105,155],"source":" If not specified, `FirstDayOfWeek.Sunday` is used."}]}],"pos":[23238,23394],"yaml":true},{"content":"Optional. A value chosen from the `FirstWeekOfYear` enumeration that specifies the first week of the year. If not specified, `FirstWeekOfYear.Jan1` is used.","nodes":[{"pos":[0,156],"content":"Optional. A value chosen from the `FirstWeekOfYear` enumeration that specifies the first week of the year. If not specified, `FirstWeekOfYear.Jan1` is used.","nodes":[{"content":"Optional.","pos":[0,9]},{"content":"A value chosen from the <ph id=\"ph1\">`FirstWeekOfYear`</ph> enumeration that specifies the first week of the year.","pos":[10,106],"source":" A value chosen from the `FirstWeekOfYear` enumeration that specifies the first week of the year."},{"content":"If not specified, <ph id=\"ph1\">`FirstWeekOfYear.Jan1`</ph> is used.","pos":[107,156],"source":" If not specified, `FirstWeekOfYear.Jan1` is used."}]}],"pos":[23484,23641],"yaml":true},{"content":"Returns a `Long` value specifying the number of time intervals between two `Date` values.","nodes":[{"pos":[0,89],"content":"Returns a <ph id=\"ph1\">`Long`</ph> value specifying the number of time intervals between two <ph id=\"ph2\">`Date`</ph> values.","source":"Returns a `Long` value specifying the number of time intervals between two `Date` values."}],"pos":[23697,23787],"yaml":true},{"content":"<code>Date1</code>, <code>Date2</code>, or <code>DayofWeek</code> is out of range.","nodes":[{"pos":[0,82],"content":"<ph id=\"ph1\">&lt;code&gt;Date1&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;Date2&lt;/code&gt;</ph>, or <ph id=\"ph3\">&lt;code&gt;DayofWeek&lt;/code&gt;</ph> is out of range.","source":"<code>Date1</code>, <code>Date2</code>, or <code>DayofWeek</code> is out of range."}],"pos":[23951,24034],"yaml":true},{"content":"<code>Date1</code> or <code>Date2</code> is of an invalid type.","nodes":[{"pos":[0,63],"content":"<ph id=\"ph1\">&lt;code&gt;Date1&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;Date2&lt;/code&gt;</ph> is of an invalid type.","source":"<code>Date1</code> or <code>Date2</code> is of an invalid type."}],"pos":[24134,24198],"yaml":true},{"content":"Returns a `Long` value specifying the number of time intervals between two `Date` values.","nodes":[{"pos":[0,89],"content":"Returns a <ph id=\"ph1\">`Long`</ph> value specifying the number of time intervals between two <ph id=\"ph2\">`Date`</ph> values.","source":"Returns a `Long` value specifying the number of time intervals between two `Date` values."}],"pos":[25594,25684],"yaml":true},{"content":"You can use the `DateDiff` function to determine how many specified time intervals exist between two date/time values. For example, you might use `DateDiff` to calculate the number of days between two dates, or the number of weeks between today and the end of the year.  \n  \n## Behavior  \n  \n-   **Treatment of Parameters.** `DateDiff` subtracts the value of `Date1` from the value of `Date2` to produce the difference. Neither value is changed in the calling program.  \n  \n-   **Return Values.** Because `Date1` and `Date2` are of the `Date` data type, they hold date and time values accurate to 100-nanosecond ticks on the system timer. However, `DateDiff` always returns the number of time intervals as a `Long` value.  \n  \n     If `Date1` represents a later date and time than `Date2`, `DateDiff` returns a negative number.  \n  \n-   **Day Intervals.** If `Interval` is set to `DateInterval.DayOfYear`, it is treated the same as `DateInterval.Day`, because `DayOfYear` is not a meaningful unit for a time interval.  \n  \n-   **Week Intervals.** If `Interval` is set to `DateInterval.WeekOfYear`, the return value represents the number of weeks between the first day of the week containing `Date1` and the first day of the week containing `Date2`. The following example shows how this produces different results from `DateInterval.Weekday`.  \n  \n     [!code-vb[VbVbalrFunctions#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#60)]  \n  \n     In the preceding example, `DateDiff` returns 0 to `wD` because the difference between the two dates is less than seven days, but it returns 1 to `wY` because there is a seven-day difference between the first days of the respective calendar weeks.  \n  \n-   **Larger Intervals.** If `Interval` is set to `DateInterval.Year`, the return value is calculated purely from the year parts of `Date1` and `Date2`. Similarly, the return value for `DateInterval.Month` is calculated purely from the year and month parts of the arguments, and for `DateInterval.Quarter` from the quarters containing the two dates.  \n  \n     For example, when comparing December 31 to January 1 of the following year, `DateDiff` returns 1 for `DateInterval.Year`, `DateInterval.Quarter`, or `DateInterval.Month`, even though at most only one day has elapsed.  \n  \n     For cultures such as Japanese that have multiple eras, the `DateDiff` method does not return a difference in years if the difference spans two or more eras. Instead, you can calculate the difference in values returned by the <xref:System.DateTime.Year%2A> property, as shown in the following example: `date2.Year - date1.Year`.  \n  \n-   **Other Intervals.** Since every `Date` value is supported by a <xref:System.DateTime> structure, its methods give you additional options in finding time intervals. For example, you can use the `Subtract` method in either of its overloaded forms: <xref:System.DateTime.Subtract%2A?displayProperty=fullName> subtracts a <xref:System.TimeSpan> from a `Date` variable to return another `Date` value, and <xref:System.DateTime.Subtract%2A?displayProperty=fullName> subtracts a `Date` value to return a <xref:System.TimeSpan>. You can time a process to find out how many milliseconds it takes, as the following example shows.  \n  \n     [!code-vb[VbVbalrFunctions#61](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#61)]  \n  \n The `Interval` argument can have one of the following settings.  \n  \n|Enumeration value|String value|Unit of time difference|  \n|-----------------------|------------------|-----------------------------|  \n|`DateInterval.Day`|\"d\"|Day|  \n|`DateInterval.DayOfYear`|\"y\"|Day|  \n|`DateInterval.Hour`|\"h\"|Hour|  \n|`DateInterval.Minute`|\"n\"|Minute|  \n|`DateInterval.Month`|\"m\"|Month|  \n|`DateInterval.Quarter`|\"q\"|Quarter|  \n|`DateInterval.Second`|\"s\"|Second|  \n|`DateInterval.Weekday`|\"w\"|Week|  \n|`DateInterval.WeekOfYear`|\"ww\"|Calendar week|  \n|`DateInterval.Year`|\"yyyy\"|Year|  \n  \n The `DayOfWeek` argument can have one of the following settings.  \n  \n|Enumeration value|Value|Description|  \n|-----------------------|-----------|-----------------|  \n|`FirstDayOfWeek.System`|0|First day of week specified in system settings|  \n|`FirstDayOfWeek.Sunday`|1|Sunday (default)|  \n|`FirstDayOfWeek.Monday`|2|Monday (complies with ISO standard 8601, section 3.17)|  \n|`FirstDayOfWeek.Tuesday`|3|Tuesday|  \n|`FirstDayOfWeek.Wednesday`|4|Wednesday|  \n|`FirstDayOfWeek.Thursday`|5|Thursday|  \n|`FirstDayOfWeek.Friday`|6|Friday|  \n|`FirstDayOfWeek.Saturday`|7|Saturday|  \n  \n The `WeekOfYear` argument can have one of the following settings.  \n  \n|Enumeration value|Value|Description|  \n|-----------------------|-----------|-----------------|  \n|`FirstWeekOfYear.System`|0|First week of year specified in system settings|  \n|`FirstWeekOfYear.Jan1`|1|Week in which January 1 occurs (default)|  \n|`FirstWeekOfYear.FirstFourDays`|2|Week that has at least four days in the new year (complies with ISO standard 8601, section 3.17)|  \n|`FirstWeekOfYear.FirstFullWeek`|3|First full week in the new year|","nodes":[{"pos":[0,269],"content":"You can use the `DateDiff` function to determine how many specified time intervals exist between two date/time values. For example, you might use `DateDiff` to calculate the number of days between two dates, or the number of weeks between today and the end of the year.","nodes":[{"content":"You can use the <ph id=\"ph1\">`DateDiff`</ph> function to determine how many specified time intervals exist between two date/time values.","pos":[0,118],"source":"You can use the `DateDiff` function to determine how many specified time intervals exist between two date/time values."},{"content":"For example, you might use <ph id=\"ph1\">`DateDiff`</ph> to calculate the number of days between two dates, or the number of weeks between today and the end of the year.","pos":[119,269],"source":" For example, you might use `DateDiff` to calculate the number of days between two dates, or the number of weeks between today and the end of the year."}]},{"pos":[278,286],"content":"Behavior","linkify":"Behavior","nodes":[{"content":"Behavior","pos":[0,8]}]},{"pos":[296,468],"content":"**Treatment of Parameters.** `DateDiff` subtracts the value of `Date1` from the value of `Date2` to produce the difference. Neither value is changed in the calling program.","nodes":[{"content":"<bpt id=\"p1\">**</bpt>Treatment of Parameters.<ept id=\"p1\">**</ept>","pos":[0,28],"source":"**Treatment of Parameters.**"},{"content":"<ph id=\"ph1\">`DateDiff`</ph> subtracts the value of <ph id=\"ph2\">`Date1`</ph> from the value of <ph id=\"ph3\">`Date2`</ph> to produce the difference.","pos":[29,123],"source":"`DateDiff` subtracts the value of `Date1` from the value of `Date2` to produce the difference."},{"content":"Neither value is changed in the calling program.","pos":[124,172]}]},{"pos":[478,721],"content":"**Return Values.** Because `Date1` and `Date2` are of the `Date` data type, they hold date and time values accurate to 100-nanosecond ticks on the system timer. However, `DateDiff` always returns the number of time intervals as a `Long` value.","nodes":[{"content":"<bpt id=\"p1\">**</bpt>Return Values.<ept id=\"p1\">**</ept>","pos":[0,18],"source":"**Return Values.**"},{"content":"Because <ph id=\"ph1\">`Date1`</ph> and <ph id=\"ph2\">`Date2`</ph> are of the <ph id=\"ph3\">`Date`</ph> data type, they hold date and time values accurate to 100-nanosecond ticks on the system timer.","pos":[19,160],"source":" Because `Date1` and `Date2` are of the `Date` data type, they hold date and time values accurate to 100-nanosecond ticks on the system timer."},{"content":"However, <ph id=\"ph1\">`DateDiff`</ph> always returns the number of time intervals as a <ph id=\"ph2\">`Long`</ph> value.","pos":[161,243],"source":" However, `DateDiff` always returns the number of time intervals as a `Long` value."}]},{"pos":[732,827],"content":"If <ph id=\"ph1\">`Date1`</ph> represents a later date and time than <ph id=\"ph2\">`Date2`</ph>, <ph id=\"ph3\">`DateDiff`</ph> returns a negative number.","source":"If `Date1` represents a later date and time than `Date2`, `DateDiff` returns a negative number."},{"pos":[837,1017],"content":"**Day Intervals.** If `Interval` is set to `DateInterval.DayOfYear`, it is treated the same as `DateInterval.Day`, because `DayOfYear` is not a meaningful unit for a time interval.","nodes":[{"content":"<bpt id=\"p1\">**</bpt>Day Intervals.<ept id=\"p1\">**</ept>","pos":[0,18],"source":"**Day Intervals.**"},{"content":"If <ph id=\"ph1\">`Interval`</ph> is set to <ph id=\"ph2\">`DateInterval.DayOfYear`</ph>, it is treated the same as <ph id=\"ph3\">`DateInterval.Day`</ph>, because <ph id=\"ph4\">`DayOfYear`</ph> is not a meaningful unit for a time interval.","pos":[19,180],"source":" If `Interval` is set to `DateInterval.DayOfYear`, it is treated the same as `DateInterval.Day`, because `DayOfYear` is not a meaningful unit for a time interval."}]},{"pos":[1027,1341],"content":"**Week Intervals.** If `Interval` is set to `DateInterval.WeekOfYear`, the return value represents the number of weeks between the first day of the week containing `Date1` and the first day of the week containing `Date2`. The following example shows how this produces different results from `DateInterval.Weekday`.","nodes":[{"content":"<bpt id=\"p1\">**</bpt>Week Intervals.<ept id=\"p1\">**</ept>","pos":[0,19],"source":"**Week Intervals.**"},{"content":"If <ph id=\"ph1\">`Interval`</ph> is set to <ph id=\"ph2\">`DateInterval.WeekOfYear`</ph>, the return value represents the number of weeks between the first day of the week containing <ph id=\"ph3\">`Date1`</ph> and the first day of the week containing <ph id=\"ph4\">`Date2`</ph>.","pos":[20,221],"source":" If `Interval` is set to `DateInterval.WeekOfYear`, the return value represents the number of weeks between the first day of the week containing `Date1` and the first day of the week containing `Date2`."},{"content":"The following example shows how this produces different results from <ph id=\"ph1\">`DateInterval.Weekday`</ph>.","pos":[222,314],"source":" The following example shows how this produces different results from `DateInterval.Weekday`."}]},{"pos":[1352,1469],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrFunctions#60<ept id=\"p2\">](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#60)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrFunctions#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#60)]"},{"pos":[1480,1726],"content":"In the preceding example, <ph id=\"ph1\">`DateDiff`</ph> returns 0 to <ph id=\"ph2\">`wD`</ph> because the difference between the two dates is less than seven days, but it returns 1 to <ph id=\"ph3\">`wY`</ph> because there is a seven-day difference between the first days of the respective calendar weeks.","source":"In the preceding example, `DateDiff` returns 0 to `wD` because the difference between the two dates is less than seven days, but it returns 1 to `wY` because there is a seven-day difference between the first days of the respective calendar weeks."},{"pos":[1736,2081],"content":"**Larger Intervals.** If `Interval` is set to `DateInterval.Year`, the return value is calculated purely from the year parts of `Date1` and `Date2`. Similarly, the return value for `DateInterval.Month` is calculated purely from the year and month parts of the arguments, and for `DateInterval.Quarter` from the quarters containing the two dates.","nodes":[{"content":"<bpt id=\"p1\">**</bpt>Larger Intervals.<ept id=\"p1\">**</ept>","pos":[0,21],"source":"**Larger Intervals.**"},{"content":"If <ph id=\"ph1\">`Interval`</ph> is set to <ph id=\"ph2\">`DateInterval.Year`</ph>, the return value is calculated purely from the year parts of <ph id=\"ph3\">`Date1`</ph> and <ph id=\"ph4\">`Date2`</ph>.","pos":[22,148],"source":" If `Interval` is set to `DateInterval.Year`, the return value is calculated purely from the year parts of `Date1` and `Date2`."},{"content":"Similarly, the return value for <ph id=\"ph1\">`DateInterval.Month`</ph> is calculated purely from the year and month parts of the arguments, and for <ph id=\"ph2\">`DateInterval.Quarter`</ph> from the quarters containing the two dates.","pos":[149,345],"source":" Similarly, the return value for `DateInterval.Month` is calculated purely from the year and month parts of the arguments, and for `DateInterval.Quarter` from the quarters containing the two dates."}]},{"pos":[2092,2308],"content":"For example, when comparing December 31 to January 1 of the following year, <ph id=\"ph1\">`DateDiff`</ph> returns 1 for <ph id=\"ph2\">`DateInterval.Year`</ph>, <ph id=\"ph3\">`DateInterval.Quarter`</ph>, or <ph id=\"ph4\">`DateInterval.Month`</ph>, even though at most only one day has elapsed.","source":"For example, when comparing December 31 to January 1 of the following year, `DateDiff` returns 1 for `DateInterval.Year`, `DateInterval.Quarter`, or `DateInterval.Month`, even though at most only one day has elapsed."},{"pos":[2319,2646],"content":"For cultures such as Japanese that have multiple eras, the `DateDiff` method does not return a difference in years if the difference spans two or more eras. Instead, you can calculate the difference in values returned by the <xref:System.DateTime.Year%2A> property, as shown in the following example: `date2.Year - date1.Year`.","nodes":[{"content":"For cultures such as Japanese that have multiple eras, the <ph id=\"ph1\">`DateDiff`</ph> method does not return a difference in years if the difference spans two or more eras.","pos":[0,156],"source":"For cultures such as Japanese that have multiple eras, the `DateDiff` method does not return a difference in years if the difference spans two or more eras."},{"content":"Instead, you can calculate the difference in values returned by the <ph id=\"ph1\">&lt;xref:System.DateTime.Year%2A&gt;</ph> property, as shown in the following example: <ph id=\"ph2\">`date2.Year - date1.Year`</ph>.","pos":[157,327],"source":" Instead, you can calculate the difference in values returned by the <xref:System.DateTime.Year%2A> property, as shown in the following example: `date2.Year - date1.Year`."}]},{"pos":[2656,3276],"content":"**Other Intervals.** Since every `Date` value is supported by a <xref:System.DateTime> structure, its methods give you additional options in finding time intervals. For example, you can use the `Subtract` method in either of its overloaded forms: <xref:System.DateTime.Subtract%2A?displayProperty=fullName> subtracts a <xref:System.TimeSpan> from a `Date` variable to return another `Date` value, and <xref:System.DateTime.Subtract%2A?displayProperty=fullName> subtracts a `Date` value to return a <xref:System.TimeSpan>. You can time a process to find out how many milliseconds it takes, as the following example shows.","nodes":[{"content":"<bpt id=\"p1\">**</bpt>Other Intervals.<ept id=\"p1\">**</ept>","pos":[0,20],"source":"**Other Intervals.**"},{"content":"Since every <ph id=\"ph1\">`Date`</ph> value is supported by a <ph id=\"ph2\">&lt;xref:System.DateTime&gt;</ph> structure, its methods give you additional options in finding time intervals.","pos":[21,164],"source":" Since every `Date` value is supported by a <xref:System.DateTime> structure, its methods give you additional options in finding time intervals."},{"content":"For example, you can use the <ph id=\"ph1\">`Subtract`</ph> method in either of its overloaded forms: <ph id=\"ph2\">&lt;xref:System.DateTime.Subtract%2A?displayProperty=fullName&gt;</ph> subtracts a <ph id=\"ph3\">&lt;xref:System.TimeSpan&gt;</ph> from a <ph id=\"ph4\">`Date`</ph> variable to return another <ph id=\"ph5\">`Date`</ph> value, and <ph id=\"ph6\">&lt;xref:System.DateTime.Subtract%2A?displayProperty=fullName&gt;</ph> subtracts a <ph id=\"ph7\">`Date`</ph> value to return a <ph id=\"ph8\">&lt;xref:System.TimeSpan&gt;</ph>.","pos":[165,521],"source":" For example, you can use the `Subtract` method in either of its overloaded forms: <xref:System.DateTime.Subtract%2A?displayProperty=fullName> subtracts a <xref:System.TimeSpan> from a `Date` variable to return another `Date` value, and <xref:System.DateTime.Subtract%2A?displayProperty=fullName> subtracts a `Date` value to return a <xref:System.TimeSpan>."},{"content":"You can time a process to find out how many milliseconds it takes, as the following example shows.","pos":[522,620]}]},{"pos":[3287,3404],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrFunctions#61<ept id=\"p2\">](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#61)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrFunctions#61](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#61)]"},{"pos":[3411,3474],"content":"The <ph id=\"ph1\">`Interval`</ph> argument can have one of the following settings.","source":"The `Interval` argument can have one of the following settings."},{"pos":[3481,3498],"content":"Enumeration value","nodes":[{"content":"Enumeration value","pos":[0,17]}]},{"pos":[3499,3511],"content":"String value","nodes":[{"content":"String value","pos":[0,12]}]},{"pos":[3512,3535],"content":"Unit of time difference","nodes":[{"content":"Unit of time difference","pos":[0,23]}]},{"pos":[3636,3639],"content":"\"d\"","nodes":[{"content":"\"d\"","pos":[0,3]}]},{"pos":[3640,3643],"content":"Day","nodes":[{"content":"Day","pos":[0,3]}]},{"pos":[3673,3676],"content":"\"y\"","nodes":[{"content":"\"y\"","pos":[0,3]}]},{"pos":[3677,3680],"content":"Day","nodes":[{"content":"Day","pos":[0,3]}]},{"pos":[3705,3708],"content":"\"h\"","nodes":[{"content":"\"h\"","pos":[0,3]}]},{"pos":[3709,3713],"content":"Hour","nodes":[{"content":"Hour","pos":[0,4]}]},{"pos":[3740,3743],"content":"\"n\"","nodes":[{"content":"\"n\"","pos":[0,3]}]},{"pos":[3744,3750],"content":"Minute","nodes":[{"content":"Minute","pos":[0,6]}]},{"pos":[3776,3779],"content":"\"m\"","nodes":[{"content":"\"m\"","pos":[0,3]}]},{"pos":[3780,3785],"content":"Month","nodes":[{"content":"Month","pos":[0,5]}]},{"pos":[3813,3816],"content":"\"q\"","nodes":[{"content":"\"q\"","pos":[0,3]}]},{"pos":[3817,3824],"content":"Quarter","nodes":[{"content":"Quarter","pos":[0,7]}]},{"pos":[3851,3854],"content":"\"s\"","nodes":[{"content":"\"s\"","pos":[0,3]}]},{"pos":[3855,3861],"content":"Second","nodes":[{"content":"Second","pos":[0,6]}]},{"pos":[3889,3892],"content":"\"w\"","nodes":[{"content":"\"w\"","pos":[0,3]}]},{"pos":[3893,3897],"content":"Week","nodes":[{"content":"Week","pos":[0,4]}]},{"pos":[3928,3932],"content":"\"ww\"","nodes":[{"content":"\"ww\"","pos":[0,4]}]},{"pos":[3933,3946],"content":"Calendar week","nodes":[{"content":"Calendar week","pos":[0,13]}]},{"pos":[3971,3977],"content":"\"yyyy\"","nodes":[{"content":"\"yyyy\"","pos":[0,6]}]},{"pos":[3978,3982],"content":"Year","nodes":[{"content":"Year","pos":[0,4]}]},{"pos":[3990,4054],"content":"The <ph id=\"ph1\">`DayOfWeek`</ph> argument can have one of the following settings.","source":"The `DayOfWeek` argument can have one of the following settings."},{"pos":[4061,4078],"content":"Enumeration value","nodes":[{"content":"Enumeration value","pos":[0,17]}]},{"pos":[4079,4084],"content":"Value","nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[4085,4096],"content":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"pos":[4183,4184],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[4185,4231],"content":"First day of week specified in system settings","nodes":[{"content":"First day of week specified in system settings","pos":[0,46]}]},{"pos":[4260,4261],"content":"1","nodes":[{"content":"1","pos":[0,1]}]},{"pos":[4262,4278],"content":"Sunday (default)","nodes":[{"content":"Sunday (default)","pos":[0,16]}]},{"pos":[4307,4308],"content":"2","nodes":[{"content":"2","pos":[0,1]}]},{"pos":[4309,4363],"content":"Monday (complies with ISO standard 8601, section 3.17)","nodes":[{"content":"Monday (complies with ISO standard 8601, section 3.17)","pos":[0,54]}]},{"pos":[4393,4394],"content":"3","nodes":[{"content":"3","pos":[0,1]}]},{"pos":[4395,4402],"content":"Tuesday","nodes":[{"content":"Tuesday","pos":[0,7]}]},{"pos":[4434,4435],"content":"4","nodes":[{"content":"4","pos":[0,1]}]},{"pos":[4436,4445],"content":"Wednesday","nodes":[{"content":"Wednesday","pos":[0,9]}]},{"pos":[4476,4477],"content":"5","nodes":[{"content":"5","pos":[0,1]}]},{"pos":[4478,4486],"content":"Thursday","nodes":[{"content":"Thursday","pos":[0,8]}]},{"pos":[4515,4516],"content":"6","nodes":[{"content":"6","pos":[0,1]}]},{"pos":[4517,4523],"content":"Friday","nodes":[{"content":"Friday","pos":[0,6]}]},{"pos":[4554,4555],"content":"7","nodes":[{"content":"7","pos":[0,1]}]},{"pos":[4556,4564],"content":"Saturday","nodes":[{"content":"Saturday","pos":[0,8]}]},{"pos":[4572,4637],"content":"The <ph id=\"ph1\">`WeekOfYear`</ph> argument can have one of the following settings.","source":"The `WeekOfYear` argument can have one of the following settings."},{"pos":[4644,4661],"content":"Enumeration value","nodes":[{"content":"Enumeration value","pos":[0,17]}]},{"pos":[4662,4667],"content":"Value","nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[4668,4679],"content":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"pos":[4767,4768],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[4769,4816],"content":"First week of year specified in system settings","nodes":[{"content":"First week of year specified in system settings","pos":[0,47]}]},{"pos":[4844,4845],"content":"1","nodes":[{"content":"1","pos":[0,1]}]},{"pos":[4846,4886],"content":"Week in which January 1 occurs (default)","nodes":[{"content":"Week in which January 1 occurs (default)","pos":[0,40]}]},{"pos":[4923,4924],"content":"2","nodes":[{"content":"2","pos":[0,1]}]},{"pos":[4925,5021],"content":"Week that has at least four days in the new year (complies with ISO standard 8601, section 3.17)","nodes":[{"content":"Week that has at least four days in the new year (complies with ISO standard 8601, section 3.17)","pos":[0,96]}]},{"pos":[5058,5059],"content":"3","nodes":[{"content":"3","pos":[0,1]}]},{"pos":[5060,5091],"content":"First full week in the new year","nodes":[{"content":"First full week in the new year","pos":[0,31]}]}],"pos":[25695,30873],"yaml":true,"extradata":"MT"},{"content":"Required. `DateInterval` enumeration value or `String` expression representing the time interval you want to use as the unit of difference between <code>Date1</code> and <code>Date2</code>.","nodes":[{"pos":[0,189],"content":"Required. `DateInterval` enumeration value or `String` expression representing the time interval you want to use as the unit of difference between <code>Date1</code> and <code>Date2</code>.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`DateInterval`</ph> enumeration value or <ph id=\"ph2\">`String`</ph> expression representing the time interval you want to use as the unit of difference between <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">Date1</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph4\">Date2</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","pos":[10,189],"source":"`DateInterval` enumeration value or `String` expression representing the time interval you want to use as the unit of difference between <code>Date1</code> and <code>Date2</code>."}]}],"pos":[31487,31677],"yaml":true},{"content":"Required. `Date`. The first date/time value you want to use in the calculation.","nodes":[{"pos":[0,79],"content":"Required. `Date`. The first date/time value you want to use in the calculation.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Date`</ph>.","pos":[10,17],"source":"`Date`."},{"content":"The first date/time value you want to use in the calculation.","pos":[18,79]}]}],"pos":[31738,31818],"yaml":true},{"content":"Required. `Date`. The second date/time value you want to use in the calculation.","nodes":[{"pos":[0,80],"content":"Required. `Date`. The second date/time value you want to use in the calculation.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Date`</ph>.","pos":[10,17],"source":"`Date`."},{"content":"The second date/time value you want to use in the calculation.","pos":[18,80]}]}],"pos":[31879,31960],"yaml":true},{"content":"Optional. A value chosen from the `FirstDayOfWeek` enumeration that specifies the first day of the week. If not specified, `FirstDayOfWeek.Sunday` is used.","nodes":[{"pos":[0,155],"content":"Optional. A value chosen from the `FirstDayOfWeek` enumeration that specifies the first day of the week. If not specified, `FirstDayOfWeek.Sunday` is used.","nodes":[{"content":"Optional.","pos":[0,9]},{"content":"A value chosen from the <ph id=\"ph1\">`FirstDayOfWeek`</ph> enumeration that specifies the first day of the week.","pos":[10,104],"source":" A value chosen from the `FirstDayOfWeek` enumeration that specifies the first day of the week."},{"content":"If not specified, <ph id=\"ph1\">`FirstDayOfWeek.Sunday`</ph> is used.","pos":[105,155],"source":" If not specified, `FirstDayOfWeek.Sunday` is used."}]}],"pos":[32048,32204],"yaml":true},{"content":"Optional. A value chosen from the `FirstWeekOfYear` enumeration that specifies the first week of the year. If not specified, `FirstWeekOfYear.Jan1` is used.","nodes":[{"pos":[0,156],"content":"Optional. A value chosen from the `FirstWeekOfYear` enumeration that specifies the first week of the year. If not specified, `FirstWeekOfYear.Jan1` is used.","nodes":[{"content":"Optional.","pos":[0,9]},{"content":"A value chosen from the <ph id=\"ph1\">`FirstWeekOfYear`</ph> enumeration that specifies the first week of the year.","pos":[10,106],"source":" A value chosen from the `FirstWeekOfYear` enumeration that specifies the first week of the year."},{"content":"If not specified, <ph id=\"ph1\">`FirstWeekOfYear.Jan1`</ph> is used.","pos":[107,156],"source":" If not specified, `FirstWeekOfYear.Jan1` is used."}]}],"pos":[32294,32451],"yaml":true},{"content":"Returns a `Long` value specifying the number of time intervals between two `Date` values.","nodes":[{"pos":[0,89],"content":"Returns a <ph id=\"ph1\">`Long`</ph> value specifying the number of time intervals between two <ph id=\"ph2\">`Date`</ph> values.","source":"Returns a `Long` value specifying the number of time intervals between two `Date` values."}],"pos":[32507,32597],"yaml":true},{"content":"<code>Date1</code>, <code>Date2</code>, or <code>DayofWeek</code> is out of range.","nodes":[{"pos":[0,82],"content":"<ph id=\"ph1\">&lt;code&gt;Date1&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;Date2&lt;/code&gt;</ph>, or <ph id=\"ph3\">&lt;code&gt;DayofWeek&lt;/code&gt;</ph> is out of range.","source":"<code>Date1</code>, <code>Date2</code>, or <code>DayofWeek</code> is out of range."}],"pos":[32761,32844],"yaml":true},{"content":"<code>Date1</code> or <code>Date2</code> is of an invalid type.","nodes":[{"pos":[0,63],"content":"<ph id=\"ph1\">&lt;code&gt;Date1&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;Date2&lt;/code&gt;</ph> is of an invalid type.","source":"<code>Date1</code> or <code>Date2</code> is of an invalid type."}],"pos":[32944,33008],"yaml":true},{"content":"Returns an `Integer` value containing the specified component of a given `Date` value.","nodes":[{"pos":[0,86],"content":"Returns an <ph id=\"ph1\">`Integer`</ph> value containing the specified component of a given <ph id=\"ph2\">`Date`</ph> value.","source":"Returns an `Integer` value containing the specified component of a given `Date` value."}],"pos":[34431,34518],"yaml":true},{"content":"You can use the `DatePart` function to evaluate a date/time value and return a specific component. For example, you might use `DatePart` to calculate the day of the week or the current hour.  \n  \n If you choose `DateInterval.Weekday` for the `Interval` argument, the returned value is consistent with the values of the `FirstDayOfWeek` enumeration. If you choose `DateInterval.WeekOfYear`, `DatePart` uses the <xref:System.Globalization.Calendar> and <xref:System.Globalization.CultureInfo> classes of the <xref:System.Globalization> namespace to determine your current settings.  \n  \n The `FirstDayOfWeekValue` argument affects calculations that use the `DateInterval.Weekday` and `DateInterval.WeekOfYear` `Interval` settings. The `FirstWeekOfYearValue` argument affects calculations that specify `DateInterval.WeekOfYear` for `Interval`.  \n  \n Since every `Date` value is supported by a <xref:System.DateTime> structure, its methods give you additional options in retrieving date/time parts. For example, you can obtain the entire date value of a `Date` variable, with the time value set to midnight, as follows:  \n  \n```vb  \nDim CurrDatTim As Date = Now   ' Current date and time.  \nDim LastMidnight As Date = CurrDatTim.Date   ' At midnight.  \n```  \n  \n The `Interval` argument can have one of the following settings.  \n  \n|Enumeration value|String|Part of date/time value to return|  \n|-----------------------|------------|----------------------------------------|  \n|`DateInterval.Day`|d|Day of month (1 through 31)|  \n|`DateInterval.DayOfYear`|y|Day of year (1 through 366)|  \n|`DateInterval.Hour`|h|Hour|  \n|`DateInterval.Minute`|n|Minute|  \n|`DateInterval.Month`|m|Month|  \n|`DateInterval.Quarter`|q|Quarter|  \n|`DateInterval.Second`|s|Second|  \n|`DateInterval.Weekday`|w|Day of week (1 through 7)|  \n|`DateInterval.WeekOfYear`|ww|Week of year (1 through 53)|  \n|`DateInterval.Year`|yyyy|Year|  \n  \n The `FirstDayOfWeekValue` argument can have one of the following settings.  \n  \n|Enumeration value|Value|Description|  \n|-----------------------|-----------|-----------------|  \n|`FirstDayOfWeek.System`|0|First day of week specified in system settings|  \n|`FirstDayOfWeek.Sunday`|1|Sunday (default)|  \n|`FirstDayOfWeek.Monday`|2|Monday (complies with ISO standard 8601, section 3.17)|  \n|`FirstDayOfWeek.Tuesday`|3|Tuesday|  \n|`FirstDayOfWeek.Wednesday`|4|Wednesday|  \n|`FirstDayOfWeek.Thursday`|5|Thursday|  \n|`FirstDayOfWeek.Friday`|6|Friday|  \n|`FirstDayOfWeek.Saturday`|7|Saturday|  \n  \n The `FirstWeekOfYearValue` argument can have one of the following settings.  \n  \n|Enumeration value|Value|Description|  \n|-----------------------|-----------|-----------------|  \n|`FirstWeekOfYear.System`|0|First week of year specified in system settings|  \n|`FirstWeekOfYear.Jan1`|1|Week in which January 1 occurs (default)|  \n|`FirstWeekOfYear.FirstFourDays`|2|Week that has at least four days in the new year (complies with ISO standard 8601, section 3.17)|  \n|`FirstWeekOfYear.FirstFullWeek`|3|First full week in new year|","nodes":[{"pos":[0,190],"content":"You can use the `DatePart` function to evaluate a date/time value and return a specific component. For example, you might use `DatePart` to calculate the day of the week or the current hour.","nodes":[{"content":"You can use the <ph id=\"ph1\">`DatePart`</ph> function to evaluate a date/time value and return a specific component.","pos":[0,98],"source":"You can use the `DatePart` function to evaluate a date/time value and return a specific component."},{"content":"For example, you might use <ph id=\"ph1\">`DatePart`</ph> to calculate the day of the week or the current hour.","pos":[99,190],"source":" For example, you might use `DatePart` to calculate the day of the week or the current hour."}]},{"pos":[197,579],"content":"If you choose `DateInterval.Weekday` for the `Interval` argument, the returned value is consistent with the values of the `FirstDayOfWeek` enumeration. If you choose `DateInterval.WeekOfYear`, `DatePart` uses the <xref:System.Globalization.Calendar> and <xref:System.Globalization.CultureInfo> classes of the <xref:System.Globalization> namespace to determine your current settings.","nodes":[{"content":"If you choose <ph id=\"ph1\">`DateInterval.Weekday`</ph> for the <ph id=\"ph2\">`Interval`</ph> argument, the returned value is consistent with the values of the <ph id=\"ph3\">`FirstDayOfWeek`</ph> enumeration.","pos":[0,151],"source":"If you choose `DateInterval.Weekday` for the `Interval` argument, the returned value is consistent with the values of the `FirstDayOfWeek` enumeration."},{"content":"If you choose <ph id=\"ph1\">`DateInterval.WeekOfYear`</ph>, <ph id=\"ph2\">`DatePart`</ph> uses the <ph id=\"ph3\">&lt;xref:System.Globalization.Calendar&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.Globalization.CultureInfo&gt;</ph> classes of the <ph id=\"ph5\">&lt;xref:System.Globalization&gt;</ph> namespace to determine your current settings.","pos":[152,382],"source":" If you choose `DateInterval.WeekOfYear`, `DatePart` uses the <xref:System.Globalization.Calendar> and <xref:System.Globalization.CultureInfo> classes of the <xref:System.Globalization> namespace to determine your current settings."}]},{"pos":[586,840],"content":"The `FirstDayOfWeekValue` argument affects calculations that use the `DateInterval.Weekday` and `DateInterval.WeekOfYear` `Interval` settings. The `FirstWeekOfYearValue` argument affects calculations that specify `DateInterval.WeekOfYear` for `Interval`.","nodes":[{"content":"The <ph id=\"ph1\">`FirstDayOfWeekValue`</ph> argument affects calculations that use the <ph id=\"ph2\">`DateInterval.Weekday`</ph> and <ph id=\"ph3\">`DateInterval.WeekOfYear`</ph> <ph id=\"ph4\">`Interval`</ph> settings.","pos":[0,142],"source":"The `FirstDayOfWeekValue` argument affects calculations that use the `DateInterval.Weekday` and `DateInterval.WeekOfYear` `Interval` settings."},{"content":"The <ph id=\"ph1\">`FirstWeekOfYearValue`</ph> argument affects calculations that specify <ph id=\"ph2\">`DateInterval.WeekOfYear`</ph> for <ph id=\"ph3\">`Interval`</ph>.","pos":[143,254],"source":" The `FirstWeekOfYearValue` argument affects calculations that specify `DateInterval.WeekOfYear` for `Interval`."}]},{"pos":[847,1115],"content":"Since every `Date` value is supported by a <xref:System.DateTime> structure, its methods give you additional options in retrieving date/time parts. For example, you can obtain the entire date value of a `Date` variable, with the time value set to midnight, as follows:","nodes":[{"content":"Since every <ph id=\"ph1\">`Date`</ph> value is supported by a <ph id=\"ph2\">&lt;xref:System.DateTime&gt;</ph> structure, its methods give you additional options in retrieving date/time parts.","pos":[0,147],"source":"Since every `Date` value is supported by a <xref:System.DateTime> structure, its methods give you additional options in retrieving date/time parts."},{"content":"For example, you can obtain the entire date value of a <ph id=\"ph1\">`Date`</ph> variable, with the time value set to midnight, as follows:","pos":[148,268],"source":" For example, you can obtain the entire date value of a `Date` variable, with the time value set to midnight, as follows:"}]},{"pos":[1259,1322],"content":"The <ph id=\"ph1\">`Interval`</ph> argument can have one of the following settings.","source":"The `Interval` argument can have one of the following settings."},{"pos":[1329,1346],"content":"Enumeration value","nodes":[{"content":"Enumeration value","pos":[0,17]}]},{"pos":[1347,1353],"content":"String","nodes":[{"content":"String","pos":[0,6]}]},{"pos":[1354,1387],"content":"Part of date/time value to return","nodes":[{"content":"Part of date/time value to return","pos":[0,33]}]},{"pos":[1493,1494],"content":"d","nodes":[{"content":"d","pos":[0,1]}]},{"pos":[1495,1522],"content":"Day of month (1 through 31)","nodes":[{"content":"Day of month (1 through 31)","pos":[0,27]}]},{"pos":[1552,1553],"content":"y","nodes":[{"content":"y","pos":[0,1]}]},{"pos":[1554,1581],"content":"Day of year (1 through 366)","nodes":[{"content":"Day of year (1 through 366)","pos":[0,27]}]},{"pos":[1606,1607],"content":"h","nodes":[{"content":"h","pos":[0,1]}]},{"pos":[1608,1612],"content":"Hour","nodes":[{"content":"Hour","pos":[0,4]}]},{"pos":[1639,1640],"content":"n","nodes":[]},{"pos":[1641,1647],"content":"Minute","nodes":[{"content":"Minute","pos":[0,6]}]},{"pos":[1673,1674],"content":"m","nodes":[{"content":"m","pos":[0,1]}]},{"pos":[1675,1680],"content":"Month","nodes":[{"content":"Month","pos":[0,5]}]},{"pos":[1708,1709],"content":"q","nodes":[{"content":"q","pos":[0,1]}]},{"pos":[1710,1717],"content":"Quarter","nodes":[{"content":"Quarter","pos":[0,7]}]},{"pos":[1744,1745],"content":"s","nodes":[{"content":"s","pos":[0,1]}]},{"pos":[1746,1752],"content":"Second","nodes":[{"content":"Second","pos":[0,6]}]},{"pos":[1780,1781],"content":"w","nodes":[{"content":"w","pos":[0,1]}]},{"pos":[1782,1807],"content":"Day of week (1 through 7)","nodes":[{"content":"Day of week (1 through 7)","pos":[0,25]}]},{"pos":[1838,1840],"content":"ww","nodes":[{"content":"ww","pos":[0,2]}]},{"pos":[1841,1868],"content":"Week of year (1 through 53)","nodes":[{"content":"Week of year (1 through 53)","pos":[0,27]}]},{"pos":[1893,1897],"content":"yyyy","nodes":[{"content":"yyyy","pos":[0,4]}]},{"pos":[1898,1902],"content":"Year","nodes":[{"content":"Year","pos":[0,4]}]},{"pos":[1910,1984],"content":"The <ph id=\"ph1\">`FirstDayOfWeekValue`</ph> argument can have one of the following settings.","source":"The `FirstDayOfWeekValue` argument can have one of the following settings."},{"pos":[1991,2008],"content":"Enumeration value","nodes":[{"content":"Enumeration value","pos":[0,17]}]},{"pos":[2009,2014],"content":"Value","nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[2015,2026],"content":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"pos":[2113,2114],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[2115,2161],"content":"First day of week specified in system settings","nodes":[{"content":"First day of week specified in system settings","pos":[0,46]}]},{"pos":[2190,2191],"content":"1","nodes":[{"content":"1","pos":[0,1]}]},{"pos":[2192,2208],"content":"Sunday (default)","nodes":[{"content":"Sunday (default)","pos":[0,16]}]},{"pos":[2237,2238],"content":"2","nodes":[{"content":"2","pos":[0,1]}]},{"pos":[2239,2293],"content":"Monday (complies with ISO standard 8601, section 3.17)","nodes":[{"content":"Monday (complies with ISO standard 8601, section 3.17)","pos":[0,54]}]},{"pos":[2323,2324],"content":"3","nodes":[{"content":"3","pos":[0,1]}]},{"pos":[2325,2332],"content":"Tuesday","nodes":[{"content":"Tuesday","pos":[0,7]}]},{"pos":[2364,2365],"content":"4","nodes":[{"content":"4","pos":[0,1]}]},{"pos":[2366,2375],"content":"Wednesday","nodes":[{"content":"Wednesday","pos":[0,9]}]},{"pos":[2406,2407],"content":"5","nodes":[{"content":"5","pos":[0,1]}]},{"pos":[2408,2416],"content":"Thursday","nodes":[{"content":"Thursday","pos":[0,8]}]},{"pos":[2445,2446],"content":"6","nodes":[{"content":"6","pos":[0,1]}]},{"pos":[2447,2453],"content":"Friday","nodes":[{"content":"Friday","pos":[0,6]}]},{"pos":[2484,2485],"content":"7","nodes":[{"content":"7","pos":[0,1]}]},{"pos":[2486,2494],"content":"Saturday","nodes":[{"content":"Saturday","pos":[0,8]}]},{"pos":[2502,2577],"content":"The <ph id=\"ph1\">`FirstWeekOfYearValue`</ph> argument can have one of the following settings.","source":"The `FirstWeekOfYearValue` argument can have one of the following settings."},{"pos":[2584,2601],"content":"Enumeration value","nodes":[{"content":"Enumeration value","pos":[0,17]}]},{"pos":[2602,2607],"content":"Value","nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[2608,2619],"content":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"pos":[2707,2708],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[2709,2756],"content":"First week of year specified in system settings","nodes":[{"content":"First week of year specified in system settings","pos":[0,47]}]},{"pos":[2784,2785],"content":"1","nodes":[{"content":"1","pos":[0,1]}]},{"pos":[2786,2826],"content":"Week in which January 1 occurs (default)","nodes":[{"content":"Week in which January 1 occurs (default)","pos":[0,40]}]},{"pos":[2863,2864],"content":"2","nodes":[{"content":"2","pos":[0,1]}]},{"pos":[2865,2961],"content":"Week that has at least four days in the new year (complies with ISO standard 8601, section 3.17)","nodes":[{"content":"Week that has at least four days in the new year (complies with ISO standard 8601, section 3.17)","pos":[0,96]}]},{"pos":[2998,2999],"content":"3","nodes":[{"content":"3","pos":[0,1]}]},{"pos":[3000,3027],"content":"First full week in new year","nodes":[{"content":"First full week in new year","pos":[0,27]}]}],"pos":[34529,37608],"yaml":true,"extradata":"MT"},{"content":"Required. `DateInterval` enumeration value or `String` expression representing the part of the date/time value you want to return.","nodes":[{"pos":[0,130],"content":"Required. `DateInterval` enumeration value or `String` expression representing the part of the date/time value you want to return.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`DateInterval`</ph> enumeration value or <ph id=\"ph2\">`String`</ph> expression representing the part of the date/time value you want to return.","pos":[10,130],"source":"`DateInterval` enumeration value or `String` expression representing the part of the date/time value you want to return."}]}],"pos":[38293,38424],"yaml":true},{"content":"Required. `Date` value that you want to evaluate.","nodes":[{"pos":[0,49],"content":"Required. `Date` value that you want to evaluate.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Date`</ph> value that you want to evaluate.","pos":[10,49],"source":"`Date` value that you want to evaluate."}]}],"pos":[38491,38541],"yaml":true},{"content":"Optional. A value chosen from the `FirstDayOfWeek` enumeration that specifies the first day of the week. If not specified, `FirstDayOfWeek.Sunday` is used.","nodes":[{"pos":[0,155],"content":"Optional. A value chosen from the `FirstDayOfWeek` enumeration that specifies the first day of the week. If not specified, `FirstDayOfWeek.Sunday` is used.","nodes":[{"content":"Optional.","pos":[0,9]},{"content":"A value chosen from the <ph id=\"ph1\">`FirstDayOfWeek`</ph> enumeration that specifies the first day of the week.","pos":[10,104],"source":" A value chosen from the `FirstDayOfWeek` enumeration that specifies the first day of the week."},{"content":"If not specified, <ph id=\"ph1\">`FirstDayOfWeek.Sunday`</ph> is used.","pos":[105,155],"source":" If not specified, `FirstDayOfWeek.Sunday` is used."}]}],"pos":[38639,38795],"yaml":true},{"content":"Optional. A value chosen from the `FirstWeekOfYear` enumeration that specifies the first week of the year. If not specified, `FirstWeekOfYear.Jan1` is used.","nodes":[{"pos":[0,156],"content":"Optional. A value chosen from the `FirstWeekOfYear` enumeration that specifies the first week of the year. If not specified, `FirstWeekOfYear.Jan1` is used.","nodes":[{"content":"Optional.","pos":[0,9]},{"content":"A value chosen from the <ph id=\"ph1\">`FirstWeekOfYear`</ph> enumeration that specifies the first week of the year.","pos":[10,106],"source":" A value chosen from the `FirstWeekOfYear` enumeration that specifies the first week of the year."},{"content":"If not specified, <ph id=\"ph1\">`FirstWeekOfYear.Jan1`</ph> is used.","pos":[107,156],"source":" If not specified, `FirstWeekOfYear.Jan1` is used."}]}],"pos":[38895,39052],"yaml":true},{"content":"Returns an `Integer` value containing the specified component of a given `Date` value.","nodes":[{"pos":[0,86],"content":"Returns an <ph id=\"ph1\">`Integer`</ph> value containing the specified component of a given <ph id=\"ph2\">`Date`</ph> value.","source":"Returns an `Integer` value containing the specified component of a given `Date` value."}],"pos":[39108,39195],"yaml":true},{"content":"<code>Interval</code> is not valid.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;Interval&lt;/code&gt;</ph> is not valid.","source":"<code>Interval</code> is not valid."}],"pos":[39359,39395],"yaml":true},{"content":"<code>DateValue</code> is not coercible to `Date`.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;DateValue&lt;/code&gt;</ph> is not coercible to <ph id=\"ph2\">`Date`</ph>.","source":"<code>DateValue</code> is not coercible to `Date`."}],"pos":[39495,39546],"yaml":true},{"content":"Returns an `Integer` value containing the specified component of a given `Date` value.","nodes":[{"pos":[0,86],"content":"Returns an <ph id=\"ph1\">`Integer`</ph> value containing the specified component of a given <ph id=\"ph2\">`Date`</ph> value.","source":"Returns an `Integer` value containing the specified component of a given `Date` value."}],"pos":[40876,40963],"yaml":true},{"content":"You can use the `DatePart` function to evaluate a date/time value and return a specific component. For example, you might use `DatePart` to calculate the day of the week or the current hour.  \n  \n If you choose `DateInterval.Weekday` for the `Interval` argument, the returned value is consistent with the values of the `FirstDayOfWeek` enumeration. If you choose `DateInterval.WeekOfYear`, `DatePart` uses the <xref:System.Globalization.Calendar> and <xref:System.Globalization.CultureInfo> classes of the <xref:System.Globalization> namespace to determine your current settings.  \n  \n The `FirstDayOfWeekValue` argument affects calculations that use the `DateInterval.Weekday` and `DateInterval.WeekOfYear` `Interval` settings. The `FirstWeekOfYearValue` argument affects calculations that specify `DateInterval.WeekOfYear` for `Interval`.  \n  \n Since every `Date` value is supported by a <xref:System.DateTime> structure, its methods give you additional options in retrieving date/time parts. For example, you can obtain the entire date value of a `Date` variable, with the time value set to midnight, as follows:  \n  \n```vb  \nDim CurrDatTim As Date = Now   ' Current date and time.  \nDim LastMidnight As Date = CurrDatTim.Date   ' At midnight.  \n```  \n  \n The `Interval` argument can have one of the following settings.  \n  \n|Enumeration value|String|Part of date/time value to return|  \n|-----------------------|------------|----------------------------------------|  \n|`DateInterval.Day`|d|Day of month (1 through 31)|  \n|`DateInterval.DayOfYear`|y|Day of year (1 through 366)|  \n|`DateInterval.Hour`|h|Hour|  \n|`DateInterval.Minute`|n|Minute|  \n|`DateInterval.Month`|m|Month|  \n|`DateInterval.Quarter`|q|Quarter|  \n|`DateInterval.Second`|s|Second|  \n|`DateInterval.Weekday`|w|Day of week (1 through 7)|  \n|`DateInterval.WeekOfYear`|ww|Week of year (1 through 53)|  \n|`DateInterval.Year`|yyyy|Year|  \n  \n The `FirstDayOfWeekValue` argument can have one of the following settings.  \n  \n|Enumeration value|Value|Description|  \n|-----------------------|-----------|-----------------|  \n|`FirstDayOfWeek.System`|0|First day of week specified in system settings|  \n|`FirstDayOfWeek.Sunday`|1|Sunday (default)|  \n|`FirstDayOfWeek.Monday`|2|Monday (complies with ISO standard 8601, section 3.17)|  \n|`FirstDayOfWeek.Tuesday`|3|Tuesday|  \n|`FirstDayOfWeek.Wednesday`|4|Wednesday|  \n|`FirstDayOfWeek.Thursday`|5|Thursday|  \n|`FirstDayOfWeek.Friday`|6|Friday|  \n|`FirstDayOfWeek.Saturday`|7|Saturday|  \n  \n The `FirstWeekOfYearValue` argument can have one of the following settings.  \n  \n|Enumeration value|Value|Description|  \n|-----------------------|-----------|-----------------|  \n|`FirstWeekOfYear.System`|0|First week of year specified in system settings|  \n|`FirstWeekOfYear.Jan1`|1|Week in which January 1 occurs (default)|  \n|`FirstWeekOfYear.FirstFourDays`|2|Week that has at least four days in the new year (complies with ISO standard 8601, section 3.17)|  \n|`FirstWeekOfYear.FirstFullWeek`|3|First full week in new year|","nodes":[{"pos":[0,190],"content":"You can use the `DatePart` function to evaluate a date/time value and return a specific component. For example, you might use `DatePart` to calculate the day of the week or the current hour.","nodes":[{"content":"You can use the <ph id=\"ph1\">`DatePart`</ph> function to evaluate a date/time value and return a specific component.","pos":[0,98],"source":"You can use the `DatePart` function to evaluate a date/time value and return a specific component."},{"content":"For example, you might use <ph id=\"ph1\">`DatePart`</ph> to calculate the day of the week or the current hour.","pos":[99,190],"source":" For example, you might use `DatePart` to calculate the day of the week or the current hour."}]},{"pos":[197,579],"content":"If you choose `DateInterval.Weekday` for the `Interval` argument, the returned value is consistent with the values of the `FirstDayOfWeek` enumeration. If you choose `DateInterval.WeekOfYear`, `DatePart` uses the <xref:System.Globalization.Calendar> and <xref:System.Globalization.CultureInfo> classes of the <xref:System.Globalization> namespace to determine your current settings.","nodes":[{"content":"If you choose <ph id=\"ph1\">`DateInterval.Weekday`</ph> for the <ph id=\"ph2\">`Interval`</ph> argument, the returned value is consistent with the values of the <ph id=\"ph3\">`FirstDayOfWeek`</ph> enumeration.","pos":[0,151],"source":"If you choose `DateInterval.Weekday` for the `Interval` argument, the returned value is consistent with the values of the `FirstDayOfWeek` enumeration."},{"content":"If you choose <ph id=\"ph1\">`DateInterval.WeekOfYear`</ph>, <ph id=\"ph2\">`DatePart`</ph> uses the <ph id=\"ph3\">&lt;xref:System.Globalization.Calendar&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.Globalization.CultureInfo&gt;</ph> classes of the <ph id=\"ph5\">&lt;xref:System.Globalization&gt;</ph> namespace to determine your current settings.","pos":[152,382],"source":" If you choose `DateInterval.WeekOfYear`, `DatePart` uses the <xref:System.Globalization.Calendar> and <xref:System.Globalization.CultureInfo> classes of the <xref:System.Globalization> namespace to determine your current settings."}]},{"pos":[586,840],"content":"The `FirstDayOfWeekValue` argument affects calculations that use the `DateInterval.Weekday` and `DateInterval.WeekOfYear` `Interval` settings. The `FirstWeekOfYearValue` argument affects calculations that specify `DateInterval.WeekOfYear` for `Interval`.","nodes":[{"content":"The <ph id=\"ph1\">`FirstDayOfWeekValue`</ph> argument affects calculations that use the <ph id=\"ph2\">`DateInterval.Weekday`</ph> and <ph id=\"ph3\">`DateInterval.WeekOfYear`</ph> <ph id=\"ph4\">`Interval`</ph> settings.","pos":[0,142],"source":"The `FirstDayOfWeekValue` argument affects calculations that use the `DateInterval.Weekday` and `DateInterval.WeekOfYear` `Interval` settings."},{"content":"The <ph id=\"ph1\">`FirstWeekOfYearValue`</ph> argument affects calculations that specify <ph id=\"ph2\">`DateInterval.WeekOfYear`</ph> for <ph id=\"ph3\">`Interval`</ph>.","pos":[143,254],"source":" The `FirstWeekOfYearValue` argument affects calculations that specify `DateInterval.WeekOfYear` for `Interval`."}]},{"pos":[847,1115],"content":"Since every `Date` value is supported by a <xref:System.DateTime> structure, its methods give you additional options in retrieving date/time parts. For example, you can obtain the entire date value of a `Date` variable, with the time value set to midnight, as follows:","nodes":[{"content":"Since every <ph id=\"ph1\">`Date`</ph> value is supported by a <ph id=\"ph2\">&lt;xref:System.DateTime&gt;</ph> structure, its methods give you additional options in retrieving date/time parts.","pos":[0,147],"source":"Since every `Date` value is supported by a <xref:System.DateTime> structure, its methods give you additional options in retrieving date/time parts."},{"content":"For example, you can obtain the entire date value of a <ph id=\"ph1\">`Date`</ph> variable, with the time value set to midnight, as follows:","pos":[148,268],"source":" For example, you can obtain the entire date value of a `Date` variable, with the time value set to midnight, as follows:"}]},{"pos":[1259,1322],"content":"The <ph id=\"ph1\">`Interval`</ph> argument can have one of the following settings.","source":"The `Interval` argument can have one of the following settings."},{"pos":[1329,1346],"content":"Enumeration value","nodes":[{"content":"Enumeration value","pos":[0,17]}]},{"pos":[1347,1353],"content":"String","nodes":[{"content":"String","pos":[0,6]}]},{"pos":[1354,1387],"content":"Part of date/time value to return","nodes":[{"content":"Part of date/time value to return","pos":[0,33]}]},{"pos":[1493,1494],"content":"d","nodes":[{"content":"d","pos":[0,1]}]},{"pos":[1495,1522],"content":"Day of month (1 through 31)","nodes":[{"content":"Day of month (1 through 31)","pos":[0,27]}]},{"pos":[1552,1553],"content":"y","nodes":[{"content":"y","pos":[0,1]}]},{"pos":[1554,1581],"content":"Day of year (1 through 366)","nodes":[{"content":"Day of year (1 through 366)","pos":[0,27]}]},{"pos":[1606,1607],"content":"h","nodes":[{"content":"h","pos":[0,1]}]},{"pos":[1608,1612],"content":"Hour","nodes":[{"content":"Hour","pos":[0,4]}]},{"pos":[1639,1640],"content":"n","nodes":[]},{"pos":[1641,1647],"content":"Minute","nodes":[{"content":"Minute","pos":[0,6]}]},{"pos":[1673,1674],"content":"m","nodes":[{"content":"m","pos":[0,1]}]},{"pos":[1675,1680],"content":"Month","nodes":[{"content":"Month","pos":[0,5]}]},{"pos":[1708,1709],"content":"q","nodes":[{"content":"q","pos":[0,1]}]},{"pos":[1710,1717],"content":"Quarter","nodes":[{"content":"Quarter","pos":[0,7]}]},{"pos":[1744,1745],"content":"s","nodes":[{"content":"s","pos":[0,1]}]},{"pos":[1746,1752],"content":"Second","nodes":[{"content":"Second","pos":[0,6]}]},{"pos":[1780,1781],"content":"w","nodes":[{"content":"w","pos":[0,1]}]},{"pos":[1782,1807],"content":"Day of week (1 through 7)","nodes":[{"content":"Day of week (1 through 7)","pos":[0,25]}]},{"pos":[1838,1840],"content":"ww","nodes":[{"content":"ww","pos":[0,2]}]},{"pos":[1841,1868],"content":"Week of year (1 through 53)","nodes":[{"content":"Week of year (1 through 53)","pos":[0,27]}]},{"pos":[1893,1897],"content":"yyyy","nodes":[{"content":"yyyy","pos":[0,4]}]},{"pos":[1898,1902],"content":"Year","nodes":[{"content":"Year","pos":[0,4]}]},{"pos":[1910,1984],"content":"The <ph id=\"ph1\">`FirstDayOfWeekValue`</ph> argument can have one of the following settings.","source":"The `FirstDayOfWeekValue` argument can have one of the following settings."},{"pos":[1991,2008],"content":"Enumeration value","nodes":[{"content":"Enumeration value","pos":[0,17]}]},{"pos":[2009,2014],"content":"Value","nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[2015,2026],"content":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"pos":[2113,2114],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[2115,2161],"content":"First day of week specified in system settings","nodes":[{"content":"First day of week specified in system settings","pos":[0,46]}]},{"pos":[2190,2191],"content":"1","nodes":[{"content":"1","pos":[0,1]}]},{"pos":[2192,2208],"content":"Sunday (default)","nodes":[{"content":"Sunday (default)","pos":[0,16]}]},{"pos":[2237,2238],"content":"2","nodes":[{"content":"2","pos":[0,1]}]},{"pos":[2239,2293],"content":"Monday (complies with ISO standard 8601, section 3.17)","nodes":[{"content":"Monday (complies with ISO standard 8601, section 3.17)","pos":[0,54]}]},{"pos":[2323,2324],"content":"3","nodes":[{"content":"3","pos":[0,1]}]},{"pos":[2325,2332],"content":"Tuesday","nodes":[{"content":"Tuesday","pos":[0,7]}]},{"pos":[2364,2365],"content":"4","nodes":[{"content":"4","pos":[0,1]}]},{"pos":[2366,2375],"content":"Wednesday","nodes":[{"content":"Wednesday","pos":[0,9]}]},{"pos":[2406,2407],"content":"5","nodes":[{"content":"5","pos":[0,1]}]},{"pos":[2408,2416],"content":"Thursday","nodes":[{"content":"Thursday","pos":[0,8]}]},{"pos":[2445,2446],"content":"6","nodes":[{"content":"6","pos":[0,1]}]},{"pos":[2447,2453],"content":"Friday","nodes":[{"content":"Friday","pos":[0,6]}]},{"pos":[2484,2485],"content":"7","nodes":[{"content":"7","pos":[0,1]}]},{"pos":[2486,2494],"content":"Saturday","nodes":[{"content":"Saturday","pos":[0,8]}]},{"pos":[2502,2577],"content":"The <ph id=\"ph1\">`FirstWeekOfYearValue`</ph> argument can have one of the following settings.","source":"The `FirstWeekOfYearValue` argument can have one of the following settings."},{"pos":[2584,2601],"content":"Enumeration value","nodes":[{"content":"Enumeration value","pos":[0,17]}]},{"pos":[2602,2607],"content":"Value","nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[2608,2619],"content":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"pos":[2707,2708],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[2709,2756],"content":"First week of year specified in system settings","nodes":[{"content":"First week of year specified in system settings","pos":[0,47]}]},{"pos":[2784,2785],"content":"1","nodes":[{"content":"1","pos":[0,1]}]},{"pos":[2786,2826],"content":"Week in which January 1 occurs (default)","nodes":[{"content":"Week in which January 1 occurs (default)","pos":[0,40]}]},{"pos":[2863,2864],"content":"2","nodes":[{"content":"2","pos":[0,1]}]},{"pos":[2865,2961],"content":"Week that has at least four days in the new year (complies with ISO standard 8601, section 3.17)","nodes":[{"content":"Week that has at least four days in the new year (complies with ISO standard 8601, section 3.17)","pos":[0,96]}]},{"pos":[2998,2999],"content":"3","nodes":[{"content":"3","pos":[0,1]}]},{"pos":[3000,3027],"content":"First full week in new year","nodes":[{"content":"First full week in new year","pos":[0,27]}]}],"pos":[40974,44053],"yaml":true,"extradata":"MT"},{"content":"Required. `DateInterval` enumeration value or `String` expression representing the part of the date/time value you want to return.","nodes":[{"pos":[0,130],"content":"Required. `DateInterval` enumeration value or `String` expression representing the part of the date/time value you want to return.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`DateInterval`</ph> enumeration value or <ph id=\"ph2\">`String`</ph> expression representing the part of the date/time value you want to return.","pos":[10,130],"source":"`DateInterval` enumeration value or `String` expression representing the part of the date/time value you want to return."}]}],"pos":[44667,44798],"yaml":true},{"content":"Required. `Date` value that you want to evaluate.","nodes":[{"pos":[0,49],"content":"Required. `Date` value that you want to evaluate.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Date`</ph> value that you want to evaluate.","pos":[10,49],"source":"`Date` value that you want to evaluate."}]}],"pos":[44863,44913],"yaml":true},{"content":"Optional. A value chosen from the `FirstDayOfWeek` enumeration that specifies the first day of the week. If not specified, `FirstDayOfWeek.Sunday` is used.","nodes":[{"pos":[0,155],"content":"Optional. A value chosen from the `FirstDayOfWeek` enumeration that specifies the first day of the week. If not specified, `FirstDayOfWeek.Sunday` is used.","nodes":[{"content":"Optional.","pos":[0,9]},{"content":"A value chosen from the <ph id=\"ph1\">`FirstDayOfWeek`</ph> enumeration that specifies the first day of the week.","pos":[10,104],"source":" A value chosen from the `FirstDayOfWeek` enumeration that specifies the first day of the week."},{"content":"If not specified, <ph id=\"ph1\">`FirstDayOfWeek.Sunday`</ph> is used.","pos":[105,155],"source":" If not specified, `FirstDayOfWeek.Sunday` is used."}]}],"pos":[45001,45157],"yaml":true},{"content":"Optional. A value chosen from the `FirstWeekOfYear` enumeration that specifies the first week of the year. If not specified, `FirstWeekOfYear.Jan1` is used.","nodes":[{"pos":[0,156],"content":"Optional. A value chosen from the `FirstWeekOfYear` enumeration that specifies the first week of the year. If not specified, `FirstWeekOfYear.Jan1` is used.","nodes":[{"content":"Optional.","pos":[0,9]},{"content":"A value chosen from the <ph id=\"ph1\">`FirstWeekOfYear`</ph> enumeration that specifies the first week of the year.","pos":[10,106],"source":" A value chosen from the `FirstWeekOfYear` enumeration that specifies the first week of the year."},{"content":"If not specified, <ph id=\"ph1\">`FirstWeekOfYear.Jan1`</ph> is used.","pos":[107,156],"source":" If not specified, `FirstWeekOfYear.Jan1` is used."}]}],"pos":[45247,45404],"yaml":true},{"content":"Returns an `Integer` value containing the specified component of a given `Date` value.","nodes":[{"pos":[0,86],"content":"Returns an <ph id=\"ph1\">`Integer`</ph> value containing the specified component of a given <ph id=\"ph2\">`Date`</ph> value.","source":"Returns an `Integer` value containing the specified component of a given `Date` value."}],"pos":[45460,45547],"yaml":true},{"content":"<code>Interval</code> is invalid.","nodes":[{"pos":[0,33],"content":"<ph id=\"ph1\">&lt;code&gt;Interval&lt;/code&gt;</ph> is invalid.","source":"<code>Interval</code> is invalid."}],"pos":[45711,45745],"yaml":true},{"content":"<code>DateValue</code> is not coercible to `Date`.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;DateValue&lt;/code&gt;</ph> is not coercible to <ph id=\"ph2\">`Date`</ph>.","source":"<code>DateValue</code> is not coercible to `Date`."}],"pos":[45845,45896],"yaml":true},{"content":"Returns a `Date` value representing a specified year, month, and day, with the time information set to midnight (00:00:00).","nodes":[{"pos":[0,123],"content":"Returns a <ph id=\"ph1\">`Date`</ph> value representing a specified year, month, and day, with the time information set to midnight (00:00:00).","source":"Returns a `Date` value representing a specified year, month, and day, with the time information set to midnight (00:00:00)."}],"pos":[46962,47086],"yaml":true},{"content":"Under Windows 98 or Windows 2000, two-digit years for the `Year` argument are interpreted based on user-defined computer settings. The default settings are that values from 0 through 29 are interpreted as the years 2000–2029, and values from 30 through 99 are interpreted as the years 1930–1999. For all other `Year` arguments, use a four-digit year; for example, 1924.  \n  \n Earlier versions of Windows interpret two-digit years based on the defaults described previously. To be sure the function returns the proper value, use a four-digit `Year`.  \n  \n The following example demonstrates negative, zero, and positive argument values. Here, the `DateSerial` function returns a `Date` representing the day before the first day of March in the year 10 years before the current year; in other words, the last day of February ten years ago.  \n  \n```vb  \nDim EndFeb As Date = DateSerial(-10, 3, 0)  \n```  \n  \n If either `Month` or `Day` exceeds its normal range, it is applied to the next larger unit as appropriate. For example, if you specify 32 days, it is evaluated as one month and from one to four days, depending on the value of `Month`. If `Year` is greater than 9999, or if any argument is outside the range -2,147,483,648 through 2,147,483,647, an <xref:System.ArgumentException> error occurs. If the date specified by the three arguments is earlier than 00:00:00 on January 1 of the year 1, or later than 23:59:59 on December 31, 9999, an <xref:System.ArgumentOutOfRangeException> error occurs.  \n  \n The `Date` data type includes time components. `DateSerial` sets all of these to 0, so the returned value represents the beginning of the calculated day.  \n  \n Since every `Date` value is supported by a <xref:System.DateTime> structure, its methods give you additional options in assembling a `Date` value. For example, you can use one of the overloaded <xref:System.DateTime.%23ctor%2A> constructors to populate a `Date` variable using the desired combination of components. The following example sets `NewDateTime` to May 6, 1978 at one tenth of a second before 8:30 in the morning:  \n  \n```vb  \nDim NewDateTime As Date = New Date(1978, 5, 6, 8, 29, 59, 900)  \n```","nodes":[{"pos":[0,369],"content":"Under Windows 98 or Windows 2000, two-digit years for the `Year` argument are interpreted based on user-defined computer settings. The default settings are that values from 0 through 29 are interpreted as the years 2000–2029, and values from 30 through 99 are interpreted as the years 1930–1999. For all other `Year` arguments, use a four-digit year; for example, 1924.","nodes":[{"content":"Under Windows 98 or Windows 2000, two-digit years for the <ph id=\"ph1\">`Year`</ph> argument are interpreted based on user-defined computer settings.","pos":[0,130],"source":"Under Windows 98 or Windows 2000, two-digit years for the `Year` argument are interpreted based on user-defined computer settings."},{"content":"The default settings are that values from 0 through 29 are interpreted as the years 2000–2029, and values from 30 through 99 are interpreted as the years 1930–1999.","pos":[131,295]},{"content":"For all other <ph id=\"ph1\">`Year`</ph> arguments, use a four-digit year; for example, 1924.","pos":[296,369],"source":" For all other `Year` arguments, use a four-digit year; for example, 1924."}]},{"pos":[376,548],"content":"Earlier versions of Windows interpret two-digit years based on the defaults described previously. To be sure the function returns the proper value, use a four-digit `Year`.","nodes":[{"content":"Earlier versions of Windows interpret two-digit years based on the defaults described previously.","pos":[0,97]},{"content":"To be sure the function returns the proper value, use a four-digit <ph id=\"ph1\">`Year`</ph>.","pos":[98,172],"source":" To be sure the function returns the proper value, use a four-digit `Year`."}]},{"pos":[555,837],"content":"The following example demonstrates negative, zero, and positive argument values. Here, the `DateSerial` function returns a `Date` representing the day before the first day of March in the year 10 years before the current year; in other words, the last day of February ten years ago.","nodes":[{"content":"The following example demonstrates negative, zero, and positive argument values.","pos":[0,80]},{"content":"Here, the <ph id=\"ph1\">`DateSerial`</ph> function returns a <ph id=\"ph2\">`Date`</ph> representing the day before the first day of March in the year 10 years before the current year; in other words, the last day of February ten years ago.","pos":[81,282],"source":" Here, the `DateSerial` function returns a `Date` representing the day before the first day of March in the year 10 years before the current year; in other words, the last day of February ten years ago."}]},{"pos":[906,1501],"content":"If either `Month` or `Day` exceeds its normal range, it is applied to the next larger unit as appropriate. For example, if you specify 32 days, it is evaluated as one month and from one to four days, depending on the value of `Month`. If `Year` is greater than 9999, or if any argument is outside the range -2,147,483,648 through 2,147,483,647, an <xref:System.ArgumentException> error occurs. If the date specified by the three arguments is earlier than 00:00:00 on January 1 of the year 1, or later than 23:59:59 on December 31, 9999, an <xref:System.ArgumentOutOfRangeException> error occurs.","nodes":[{"content":"If either <ph id=\"ph1\">`Month`</ph> or <ph id=\"ph2\">`Day`</ph> exceeds its normal range, it is applied to the next larger unit as appropriate.","pos":[0,106],"source":"If either `Month` or `Day` exceeds its normal range, it is applied to the next larger unit as appropriate."},{"content":"For example, if you specify 32 days, it is evaluated as one month and from one to four days, depending on the value of <ph id=\"ph1\">`Month`</ph>.","pos":[107,234],"source":" For example, if you specify 32 days, it is evaluated as one month and from one to four days, depending on the value of `Month`."},{"content":"If <ph id=\"ph1\">`Year`</ph> is greater than 9999, or if any argument is outside the range -2,147,483,648 through 2,147,483,647, an <ph id=\"ph2\">&lt;xref:System.ArgumentException&gt;</ph> error occurs.","pos":[235,393],"source":" If `Year` is greater than 9999, or if any argument is outside the range -2,147,483,648 through 2,147,483,647, an <xref:System.ArgumentException> error occurs."},{"content":"If the date specified by the three arguments is earlier than 00:00:00 on January 1 of the year 1, or later than 23:59:59 on December 31, 9999, an <ph id=\"ph1\">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> error occurs.","pos":[394,595],"source":" If the date specified by the three arguments is earlier than 00:00:00 on January 1 of the year 1, or later than 23:59:59 on December 31, 9999, an <xref:System.ArgumentOutOfRangeException> error occurs."}]},{"pos":[1508,1661],"content":"The `Date` data type includes time components. `DateSerial` sets all of these to 0, so the returned value represents the beginning of the calculated day.","nodes":[{"content":"The <ph id=\"ph1\">`Date`</ph> data type includes time components.","pos":[0,46],"source":"The `Date` data type includes time components."},{"content":"<ph id=\"ph1\">`DateSerial`</ph> sets all of these to 0, so the returned value represents the beginning of the calculated day.","pos":[47,153],"source":"`DateSerial` sets all of these to 0, so the returned value represents the beginning of the calculated day."}]},{"pos":[1668,2092],"content":"Since every `Date` value is supported by a <xref:System.DateTime> structure, its methods give you additional options in assembling a `Date` value. For example, you can use one of the overloaded <xref:System.DateTime.%23ctor%2A> constructors to populate a `Date` variable using the desired combination of components. The following example sets `NewDateTime` to May 6, 1978 at one tenth of a second before 8:30 in the morning:","nodes":[{"content":"Since every <ph id=\"ph1\">`Date`</ph> value is supported by a <ph id=\"ph2\">&lt;xref:System.DateTime&gt;</ph> structure, its methods give you additional options in assembling a <ph id=\"ph3\">`Date`</ph> value.","pos":[0,146],"source":"Since every `Date` value is supported by a <xref:System.DateTime> structure, its methods give you additional options in assembling a `Date` value."},{"content":"For example, you can use one of the overloaded <ph id=\"ph1\">&lt;xref:System.DateTime.%23ctor%2A&gt;</ph> constructors to populate a <ph id=\"ph2\">`Date`</ph> variable using the desired combination of components.","pos":[147,315],"source":" For example, you can use one of the overloaded <xref:System.DateTime.%23ctor%2A> constructors to populate a `Date` variable using the desired combination of components."},{"content":"The following example sets <ph id=\"ph1\">`NewDateTime`</ph> to May 6, 1978 at one tenth of a second before 8:30 in the morning:","pos":[316,424],"source":" The following example sets `NewDateTime` to May 6, 1978 at one tenth of a second before 8:30 in the morning:"}]}],"pos":[47097,49292],"yaml":true,"extradata":"MT"},{"content":"Required. `Integer` expression from 1 through 9999. However, values below this range are also accepted. If <code>Year</code> is 0 through 99, it is interpreted as being between 1930 and 2029, as explained in the \"Remarks\" section below. If <code>Year</code> is less than 1, it is subtracted from the current year.","nodes":[{"pos":[0,313],"content":"Required. `Integer` expression from 1 through 9999. However, values below this range are also accepted. If <code>Year</code> is 0 through 99, it is interpreted as being between 1930 and 2029, as explained in the \"Remarks\" section below. If <code>Year</code> is less than 1, it is subtracted from the current year.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Integer`</ph> expression from 1 through 9999.","pos":[10,51],"source":"`Integer` expression from 1 through 9999."},{"content":"However, values below this range are also accepted.","pos":[52,103]},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Year</ph><ept id=\"p1\">&lt;/code&gt;</ept> is 0 through 99, it is interpreted as being between 1930 and 2029, as explained in the \"Remarks\" section below.","pos":[104,236],"source":" If <code>Year</code> is 0 through 99, it is interpreted as being between 1930 and 2029, as explained in the \"Remarks\" section below."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Year</ph><ept id=\"p1\">&lt;/code&gt;</ept> is less than 1, it is subtracted from the current year.","pos":[237,313],"source":" If <code>Year</code> is less than 1, it is subtracted from the current year."}]}],"pos":[49702,50016],"yaml":true},{"content":"Required. `Integer` expression from 1 through 12. However, values outside this range are also accepted. The value of <code>Month</code> is offset by 1 and applied to January of the calculated year. In other words, (<code>Month</code> - 1) is added to January. The year is recalculated if necessary. The following results illustrate this effect:  \n  \n If <code>Month</code> is 1, the result is January of the calculated year.  \n  \n If <code>Month</code> is 0, the result is December of the previous year.  \n  \n If <code>Month</code> is -1, the result is November of the previous year.  \n  \n If <code>Month</code> is 13, the result is January of the following year.","nodes":[{"pos":[0,344],"content":"Required. `Integer` expression from 1 through 12. However, values outside this range are also accepted. The value of <code>Month</code> is offset by 1 and applied to January of the calculated year. In other words, (<code>Month</code> - 1) is added to January. The year is recalculated if necessary. The following results illustrate this effect:","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Integer`</ph> expression from 1 through 12.","pos":[10,49],"source":"`Integer` expression from 1 through 12."},{"content":"However, values outside this range are also accepted.","pos":[50,103]},{"content":"The value of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Month</ph><ept id=\"p1\">&lt;/code&gt;</ept> is offset by 1 and applied to January of the calculated year.","pos":[104,197],"source":" The value of <code>Month</code> is offset by 1 and applied to January of the calculated year."},{"content":"In other words, (<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Month</ph><ept id=\"p1\">&lt;/code&gt;</ept> - 1) is added to January.","pos":[198,259],"source":" In other words, (<code>Month</code> - 1) is added to January."},{"content":"The year is recalculated if necessary.","pos":[260,298]},{"content":"The following results illustrate this effect:","pos":[299,344]}]},{"pos":[351,424],"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Month</ph><ept id=\"p1\">&lt;/code&gt;</ept> is 1, the result is January of the calculated year.","source":"If <code>Month</code> is 1, the result is January of the calculated year."},{"pos":[431,503],"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Month</ph><ept id=\"p1\">&lt;/code&gt;</ept> is 0, the result is December of the previous year.","source":"If <code>Month</code> is 0, the result is December of the previous year."},{"pos":[510,583],"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Month</ph><ept id=\"p1\">&lt;/code&gt;</ept> is -1, the result is November of the previous year.","source":"If <code>Month</code> is -1, the result is November of the previous year."},{"pos":[590,663],"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Month</ph><ept id=\"p1\">&lt;/code&gt;</ept> is 13, the result is January of the following year.","source":"If <code>Month</code> is 13, the result is January of the following year."}],"pos":[50076,50750],"yaml":true},{"content":"Required. `Integer` expression from 1 through 31. However, values outside this range are also accepted. The value of <code>Day</code> is offset by 1 and applied to the first day of the calculated month. In other words, (<code>Day</code> - 1) is added to the first of the month. The month and year are recalculated if necessary. The following results illustrate this effect:  \n  \n If <code>Day</code> is 1, the result is the first day of the calculated month.  \n  \n If <code>Day</code> is 0, the result is the last day of the previous month.  \n  \n If <code>Day</code> is -1, the result is the penultimate day of the previous month.  \n  \n If <code>Day</code> is past the end of the current month, the result is the appropriate day of the following month. For example, if <code>Month</code> is 4 and <code>Day</code> is 31, the result is May 1.","nodes":[{"pos":[0,373],"content":"Required. `Integer` expression from 1 through 31. However, values outside this range are also accepted. The value of <code>Day</code> is offset by 1 and applied to the first day of the calculated month. In other words, (<code>Day</code> - 1) is added to the first of the month. The month and year are recalculated if necessary. The following results illustrate this effect:","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Integer`</ph> expression from 1 through 31.","pos":[10,49],"source":"`Integer` expression from 1 through 31."},{"content":"However, values outside this range are also accepted.","pos":[50,103]},{"content":"The value of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Day</ph><ept id=\"p1\">&lt;/code&gt;</ept> is offset by 1 and applied to the first day of the calculated month.","pos":[104,202],"source":" The value of <code>Day</code> is offset by 1 and applied to the first day of the calculated month."},{"content":"In other words, (<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Day</ph><ept id=\"p1\">&lt;/code&gt;</ept> - 1) is added to the first of the month.","pos":[203,277],"source":" In other words, (<code>Day</code> - 1) is added to the first of the month."},{"content":"The month and year are recalculated if necessary.","pos":[278,327]},{"content":"The following results illustrate this effect:","pos":[328,373]}]},{"pos":[380,458],"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Day</ph><ept id=\"p1\">&lt;/code&gt;</ept> is 1, the result is the first day of the calculated month.","source":"If <code>Day</code> is 1, the result is the first day of the calculated month."},{"pos":[465,540],"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Day</ph><ept id=\"p1\">&lt;/code&gt;</ept> is 0, the result is the last day of the previous month.","source":"If <code>Day</code> is 0, the result is the last day of the previous month."},{"pos":[547,630],"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Day</ph><ept id=\"p1\">&lt;/code&gt;</ept> is -1, the result is the penultimate day of the previous month.","source":"If <code>Day</code> is -1, the result is the penultimate day of the previous month."},{"pos":[637,841],"content":"If <code>Day</code> is past the end of the current month, the result is the appropriate day of the following month. For example, if <code>Month</code> is 4 and <code>Day</code> is 31, the result is May 1.","nodes":[{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Day</ph><ept id=\"p1\">&lt;/code&gt;</ept> is past the end of the current month, the result is the appropriate day of the following month.","pos":[0,115],"source":"If <code>Day</code> is past the end of the current month, the result is the appropriate day of the following month."},{"content":"For example, if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Month</ph><ept id=\"p1\">&lt;/code&gt;</ept> is 4 and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">Day</ph><ept id=\"p2\">&lt;/code&gt;</ept> is 31, the result is May 1.","pos":[116,204],"source":" For example, if <code>Month</code> is 4 and <code>Day</code> is 31, the result is May 1."}]}],"pos":[50808,51660],"yaml":true},{"content":"Returns a `Date` value representing a specified year, month, and day, with the time information set to midnight (00:00:00).","nodes":[{"pos":[0,123],"content":"Returns a <ph id=\"ph1\">`Date`</ph> value representing a specified year, month, and day, with the time information set to midnight (00:00:00).","source":"Returns a `Date` value representing a specified year, month, and day, with the time information set to midnight (00:00:00)."}],"pos":[51719,51843],"yaml":true},{"content":"Returns or sets a `String` value representing the current date according to your system.","nodes":[{"pos":[0,88],"content":"Returns or sets a <ph id=\"ph1\">`String`</ph> value representing the current date according to your system.","source":"Returns or sets a `String` value representing the current date according to your system."}],"pos":[52803,52892],"yaml":true},{"content":"`DateString` returns the system date in the MM-dd-yyyy format, which uses the abbreviated month name. The accepted formats for the date are M-d-yyyy, M-d-y, M/d/yyyy, and M/d/y. This is true for all system locales except those that use a double-byte character set (DBCS). If the system locale uses a double-byte character set, `DateString` returns the system date in the yyyy-MM-dd format. The system locale is set by using the **Clock, Language, and Region** item in **Control Panel**.  \n  \n **Note** The `DateString` property returns the system date only in the yyyy-MM-dd format for the `zh` (Chinese simplified), `ko` (Korean), and `ja` (Japanese) system locales if you are running Visual Basic within Silverlight.  \n  \n To get or set the current system time as a `String`, use the <xref:Microsoft.VisualBasic.DateAndTime.TimeString%2A> property.  \n  \n To get the current system date or time in the format of your locale, or in a custom format, supply the <xref:Microsoft.VisualBasic.DateAndTime.Now%2A> property to the <xref:Microsoft.VisualBasic.Strings.Format%2A> function, specifying either a predefined or user-defined date/time format. The following example demonstrates this.  \n  \n```  \nMsgBox(\"The formatted date is \" & Format(Now, \"dddd, d MMM yyyy\"))  \n```  \n  \n To access the current system date as a `Date`, use the <xref:Microsoft.VisualBasic.DateAndTime.Today%2A> property.  \n  \n> [!IMPORTANT]\n>  Setting the system date or time requires unmanaged code permission, which might affect its execution in partial-trust situations. For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675).","nodes":[{"pos":[0,486],"content":"`DateString` returns the system date in the MM-dd-yyyy format, which uses the abbreviated month name. The accepted formats for the date are M-d-yyyy, M-d-y, M/d/yyyy, and M/d/y. This is true for all system locales except those that use a double-byte character set (DBCS). If the system locale uses a double-byte character set, `DateString` returns the system date in the yyyy-MM-dd format. The system locale is set by using the **Clock, Language, and Region** item in **Control Panel**.","nodes":[{"content":"<ph id=\"ph1\">`DateString`</ph> returns the system date in the MM-dd-yyyy format, which uses the abbreviated month name.","pos":[0,101],"source":"`DateString` returns the system date in the MM-dd-yyyy format, which uses the abbreviated month name."},{"content":"The accepted formats for the date are M-d-yyyy, M-d-y, M/d/yyyy, and M/d/y.","pos":[102,177]},{"content":"This is true for all system locales except those that use a double-byte character set (DBCS).","pos":[178,271]},{"content":"If the system locale uses a double-byte character set, <ph id=\"ph1\">`DateString`</ph> returns the system date in the yyyy-MM-dd format.","pos":[272,389],"source":" If the system locale uses a double-byte character set, `DateString` returns the system date in the yyyy-MM-dd format."},{"content":"The system locale is set by using the <bpt id=\"p1\">**</bpt>Clock, Language, and Region<ept id=\"p1\">**</ept> item in <bpt id=\"p2\">**</bpt>Control Panel<ept id=\"p2\">**</ept>.","pos":[390,486],"source":" The system locale is set by using the **Clock, Language, and Region** item in **Control Panel**."}]},{"pos":[493,718],"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept> The <ph id=\"ph1\">`DateString`</ph> property returns the system date only in the yyyy-MM-dd format for the <ph id=\"ph2\">`zh`</ph> (Chinese simplified), <ph id=\"ph3\">`ko`</ph> (Korean), and <ph id=\"ph4\">`ja`</ph> (Japanese) system locales if you are running Visual Basic within Silverlight.","source":"**Note** The `DateString` property returns the system date only in the yyyy-MM-dd format for the `zh` (Chinese simplified), `ko` (Korean), and `ja` (Japanese) system locales if you are running Visual Basic within Silverlight."},{"pos":[725,850],"content":"To get or set the current system time as a <ph id=\"ph1\">`String`</ph>, use the <ph id=\"ph2\">&lt;xref:Microsoft.VisualBasic.DateAndTime.TimeString%2A&gt;</ph> property.","source":"To get or set the current system time as a `String`, use the <xref:Microsoft.VisualBasic.DateAndTime.TimeString%2A> property."},{"pos":[857,1186],"content":"To get the current system date or time in the format of your locale, or in a custom format, supply the <xref:Microsoft.VisualBasic.DateAndTime.Now%2A> property to the <xref:Microsoft.VisualBasic.Strings.Format%2A> function, specifying either a predefined or user-defined date/time format. The following example demonstrates this.","nodes":[{"content":"To get the current system date or time in the format of your locale, or in a custom format, supply the <xref:Microsoft.VisualBasic.DateAndTime.Now%2A> property to the <xref:Microsoft.VisualBasic.Strings.Format%2A> function, specifying either a predefined or user-defined date/time format. The following example demonstrates this.","pos":[0,329],"nodes":[{"content":"To get the current system date or time in the format of your locale, or in a custom format, supply the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.DateAndTime.Now%2A&gt;</ph> property to the <ph id=\"ph2\">&lt;xref:Microsoft.VisualBasic.Strings.Format%2A&gt;</ph> function, specifying either a predefined or user-defined date/time format.","pos":[0,288],"source":"To get the current system date or time in the format of your locale, or in a custom format, supply the <xref:Microsoft.VisualBasic.DateAndTime.Now%2A> property to the <xref:Microsoft.VisualBasic.Strings.Format%2A> function, specifying either a predefined or user-defined date/time format."},{"content":"The following example demonstrates this.","pos":[289,329]}]}]},{"pos":[1277,1391],"content":"To access the current system date as a <ph id=\"ph1\">`Date`</ph>, use the <ph id=\"ph2\">&lt;xref:Microsoft.VisualBasic.DateAndTime.Today%2A&gt;</ph> property.","source":"To access the current system date as a `Date`, use the <xref:Microsoft.VisualBasic.DateAndTime.Today%2A> property."},{"pos":[1399,1725],"content":"[!IMPORTANT]\n Setting the system date or time requires unmanaged code permission, which might affect its execution in partial-trust situations. For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675).","leadings":["","> "],"nodes":[{"content":" Setting the system date or time requires unmanaged code permission, which might affect its execution in partial-trust situations. For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675).","pos":[13,324],"nodes":[{"content":"Setting the system date or time requires unmanaged code permission, which might affect its execution in partial-trust situations.","pos":[1,130]},{"content":"For more information, see <ph id=\"ph1\">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> and <bpt id=\"p1\">[</bpt>Code Access Permissions<ept id=\"p1\">](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675)</ept>.","pos":[131,311],"source":" For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675)."}]}]}],"pos":[52903,54650],"yaml":true,"extradata":"MT"},{"content":"Returns or sets a `String` value representing the current date according to your system.","nodes":[{"pos":[0,88],"content":"Returns or sets a <ph id=\"ph1\">`String`</ph> value representing the current date according to your system.","source":"Returns or sets a `String` value representing the current date according to your system."}],"pos":[55017,55106],"yaml":true},{"content":"Invalid format used to set the value of `DateString`.","nodes":[{"pos":[0,53],"content":"Invalid format used to set the value of <ph id=\"ph1\">`DateString`</ph>.","source":"Invalid format used to set the value of `DateString`."}],"pos":[55278,55332],"yaml":true},{"content":"Returns a `Date` value containing the date information represented by a string, with the time information set to midnight (00:00:00).","nodes":[{"pos":[0,133],"content":"Returns a <ph id=\"ph1\">`Date`</ph> value containing the date information represented by a string, with the time information set to midnight (00:00:00).","source":"Returns a `Date` value containing the date information represented by a string, with the time information set to midnight (00:00:00)."}],"pos":[56278,56412],"yaml":true},{"content":"If `StringDate` includes only numbers from 1 through 12 separated by valid date separators, `DateValue` recognizes the order for month, day, and year according to the Short Date format specified for your system. `DateValue` uses the current calendar setting from the <xref:System.Globalization.CultureInfo.CurrentCulture%2A> property of the <xref:System.Globalization.CultureInfo> class in the <xref:System.Globalization> namespace. The default <xref:System.Globalization.CultureInfo.CurrentCulture%2A> values are determined by **Control Panel** settings. You can override the Short Date format by setting the <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A> property of the <xref:System.Globalization.DateTimeFormatInfo> class in the <xref:System.Globalization> namespace.  \n  \n `DateValue` recognizes month names in long, abbreviated, and numeric form. For example, in addition to recognizing 12/30/1991 and 12/30/91, `DateValue` also recognizes December 30, 1991 and Dec 30, 1991.  \n  \n If the year part of `StringDate` is omitted, `DateValue` uses the current year from your computer's system date.  \n  \n If the `StringDate` argument includes time information, `DateValue` does not include it in the returned value. However, if `StringDate` includes invalid time information, such as \"89:98\", an <xref:System.InvalidCastException> error occurs.","nodes":[{"pos":[0,791],"content":"If `StringDate` includes only numbers from 1 through 12 separated by valid date separators, `DateValue` recognizes the order for month, day, and year according to the Short Date format specified for your system. `DateValue` uses the current calendar setting from the <xref:System.Globalization.CultureInfo.CurrentCulture%2A> property of the <xref:System.Globalization.CultureInfo> class in the <xref:System.Globalization> namespace. The default <xref:System.Globalization.CultureInfo.CurrentCulture%2A> values are determined by **Control Panel** settings. You can override the Short Date format by setting the <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A> property of the <xref:System.Globalization.DateTimeFormatInfo> class in the <xref:System.Globalization> namespace.","nodes":[{"content":"If <ph id=\"ph1\">`StringDate`</ph> includes only numbers from 1 through 12 separated by valid date separators, <ph id=\"ph2\">`DateValue`</ph> recognizes the order for month, day, and year according to the Short Date format specified for your system.","pos":[0,211],"source":"If `StringDate` includes only numbers from 1 through 12 separated by valid date separators, `DateValue` recognizes the order for month, day, and year according to the Short Date format specified for your system."},{"content":"<ph id=\"ph1\">`DateValue`</ph> uses the current calendar setting from the <ph id=\"ph2\">&lt;xref:System.Globalization.CultureInfo.CurrentCulture%2A&gt;</ph> property of the <ph id=\"ph3\">&lt;xref:System.Globalization.CultureInfo&gt;</ph> class in the <ph id=\"ph4\">&lt;xref:System.Globalization&gt;</ph> namespace.","pos":[212,432],"source":"`DateValue` uses the current calendar setting from the <xref:System.Globalization.CultureInfo.CurrentCulture%2A> property of the <xref:System.Globalization.CultureInfo> class in the <xref:System.Globalization> namespace."},{"content":"The default <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo.CurrentCulture%2A&gt;</ph> values are determined by <bpt id=\"p1\">**</bpt>Control Panel<ept id=\"p1\">**</ept> settings.","pos":[433,555],"source":" The default <xref:System.Globalization.CultureInfo.CurrentCulture%2A> values are determined by **Control Panel** settings."},{"content":"You can override the Short Date format by setting the <ph id=\"ph1\">&lt;xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A&gt;</ph> property of the <ph id=\"ph2\">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> class in the <ph id=\"ph3\">&lt;xref:System.Globalization&gt;</ph> namespace.","pos":[556,791],"source":" You can override the Short Date format by setting the <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A> property of the <xref:System.Globalization.DateTimeFormatInfo> class in the <xref:System.Globalization> namespace."}]},{"pos":[798,1001],"content":"`DateValue` recognizes month names in long, abbreviated, and numeric form. For example, in addition to recognizing 12/30/1991 and 12/30/91, `DateValue` also recognizes December 30, 1991 and Dec 30, 1991.","nodes":[{"content":"<ph id=\"ph1\">`DateValue`</ph> recognizes month names in long, abbreviated, and numeric form.","pos":[0,74],"source":"`DateValue` recognizes month names in long, abbreviated, and numeric form."},{"content":"For example, in addition to recognizing 12/30/1991 and 12/30/91, <ph id=\"ph1\">`DateValue`</ph> also recognizes December 30, 1991 and Dec 30, 1991.","pos":[75,203],"source":" For example, in addition to recognizing 12/30/1991 and 12/30/91, `DateValue` also recognizes December 30, 1991 and Dec 30, 1991."}]},{"pos":[1008,1120],"content":"If the year part of <ph id=\"ph1\">`StringDate`</ph> is omitted, <ph id=\"ph2\">`DateValue`</ph> uses the current year from your computer's system date.","source":"If the year part of `StringDate` is omitted, `DateValue` uses the current year from your computer's system date."},{"pos":[1127,1366],"content":"If the `StringDate` argument includes time information, `DateValue` does not include it in the returned value. However, if `StringDate` includes invalid time information, such as \"89:98\", an <xref:System.InvalidCastException> error occurs.","nodes":[{"content":"If the <ph id=\"ph1\">`StringDate`</ph> argument includes time information, <ph id=\"ph2\">`DateValue`</ph> does not include it in the returned value.","pos":[0,110],"source":"If the `StringDate` argument includes time information, `DateValue` does not include it in the returned value."},{"content":"However, if <ph id=\"ph1\">`StringDate`</ph> includes invalid time information, such as \"89:98\", an <ph id=\"ph2\">&lt;xref:System.InvalidCastException&gt;</ph> error occurs.","pos":[111,239],"source":" However, if `StringDate` includes invalid time information, such as \"89:98\", an <xref:System.InvalidCastException> error occurs."}]}],"pos":[56423,57800],"yaml":true,"extradata":"MT"},{"content":"Required. `String` expression representing a date/time value from 00:00:00 on January 1 of the year 1 through 23:59:59 on December 31, 9999.","nodes":[{"pos":[0,140],"content":"Required. `String` expression representing a date/time value from 00:00:00 on January 1 of the year 1 through 23:59:59 on December 31, 9999.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`String`</ph> expression representing a date/time value from 00:00:00 on January 1 of the year 1 through 23:59:59 on December 31, 9999.","pos":[10,140],"source":"`String` expression representing a date/time value from 00:00:00 on January 1 of the year 1 through 23:59:59 on December 31, 9999."}]}],"pos":[58304,58445],"yaml":true},{"content":"`Date` value containing the date information represented by a string, with the time information set to midnight (00:00:00).","nodes":[{"pos":[0,123],"content":"<ph id=\"ph1\">`Date`</ph> value containing the date information represented by a string, with the time information set to midnight (00:00:00).","source":"`Date` value containing the date information represented by a string, with the time information set to midnight (00:00:00)."}],"pos":[58504,58630],"yaml":true},{"content":"<code>StringDate</code> includes invalid time information.","nodes":[{"pos":[0,58],"content":"<ph id=\"ph1\">&lt;code&gt;StringDate&lt;/code&gt;</ph> includes invalid time information.","source":"<code>StringDate</code> includes invalid time information."}],"pos":[58801,58860],"yaml":true},{"content":"Returns an `Integer` value from 1 through 31 representing the day of the month.","nodes":[{"pos":[0,79],"content":"Returns an <ph id=\"ph1\">`Integer`</ph> value from 1 through 31 representing the day of the month.","source":"Returns an `Integer` value from 1 through 31 representing the day of the month."}],"pos":[59782,59862],"yaml":true},{"content":"If you use the `Day` function, you might have to qualify it with the `Microsoft.VisualBasic` namespace, because the <xref:System.Windows.Forms> namespace defines <xref:System.Windows.Forms.Day> as an enumeration. The following example shows how qualifying `Day` resolves this ambiguity:  \n  \n```vb  \nDim thisDay As Integer = Microsoft.VisualBasic.DateAndTime.Day(Now)  \n```  \n  \n You can also obtain the day of the month by calling `DatePart` and specifying `DateInterval.Day` for the *Interval* argument.","nodes":[{"pos":[0,286],"content":"If you use the `Day` function, you might have to qualify it with the `Microsoft.VisualBasic` namespace, because the <xref:System.Windows.Forms> namespace defines <xref:System.Windows.Forms.Day> as an enumeration. The following example shows how qualifying `Day` resolves this ambiguity:","nodes":[{"content":"If you use the <ph id=\"ph1\">`Day`</ph> function, you might have to qualify it with the <ph id=\"ph2\">`Microsoft.VisualBasic`</ph> namespace, because the <ph id=\"ph3\">&lt;xref:System.Windows.Forms&gt;</ph> namespace defines <ph id=\"ph4\">&lt;xref:System.Windows.Forms.Day&gt;</ph> as an enumeration.","pos":[0,212],"source":"If you use the `Day` function, you might have to qualify it with the `Microsoft.VisualBasic` namespace, because the <xref:System.Windows.Forms> namespace defines <xref:System.Windows.Forms.Day> as an enumeration."},{"content":"The following example shows how qualifying <ph id=\"ph1\">`Day`</ph> resolves this ambiguity:","pos":[213,286],"source":" The following example shows how qualifying `Day` resolves this ambiguity:"}]},{"pos":[380,505],"content":"You can also obtain the day of the month by calling <ph id=\"ph1\">`DatePart`</ph> and specifying <ph id=\"ph2\">`DateInterval.Day`</ph> for the <bpt id=\"p1\">*</bpt>Interval<ept id=\"p1\">*</ept> argument.","source":"You can also obtain the day of the month by calling `DatePart` and specifying `DateInterval.Day` for the *Interval* argument."}],"pos":[59873,60387],"yaml":true,"extradata":"MT"},{"content":"Required. `Date` value from which you want to extract the day.","nodes":[{"pos":[0,62],"content":"Required. `Date` value from which you want to extract the day.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Date`</ph> value from which you want to extract the day.","pos":[10,62],"source":"`Date` value from which you want to extract the day."}]}],"pos":[61056,61119],"yaml":true},{"content":"Returns an `Integer` value from 1 through 31 representing the day of the month.","nodes":[{"pos":[0,79],"content":"Returns an <ph id=\"ph1\">`Integer`</ph> value from 1 through 31 representing the day of the month.","source":"Returns an `Integer` value from 1 through 31 representing the day of the month."}],"pos":[61175,61255],"yaml":true},{"content":"Returns an `Integer` value from 0 through 23 representing the hour of the day.","nodes":[{"pos":[0,78],"content":"Returns an <ph id=\"ph1\">`Integer`</ph> value from 0 through 23 representing the hour of the day.","source":"Returns an `Integer` value from 0 through 23 representing the hour of the day."}],"pos":[62251,62330],"yaml":true},{"content":"You can also obtain the hour of the day by calling `DatePart` and specifying `DateInterval.Hour` for the `Interval` argument.","nodes":[{"pos":[0,125],"content":"You can also obtain the hour of the day by calling <ph id=\"ph1\">`DatePart`</ph> and specifying <ph id=\"ph2\">`DateInterval.Hour`</ph> for the <ph id=\"ph3\">`Interval`</ph> argument.","source":"You can also obtain the hour of the day by calling `DatePart` and specifying `DateInterval.Hour` for the `Interval` argument."}],"pos":[62341,62467],"yaml":true,"extradata":"MT"},{"content":"Required. `Date` value from which you want to extract the hour.","nodes":[{"pos":[0,63],"content":"Required. `Date` value from which you want to extract the hour.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Date`</ph> value from which you want to extract the hour.","pos":[10,63],"source":"`Date` value from which you want to extract the hour."}]}],"pos":[62964,63028],"yaml":true},{"content":"Returns an `Integer` value from 0 through 23 representing the hour of the day.","nodes":[{"pos":[0,78],"content":"Returns an <ph id=\"ph1\">`Integer`</ph> value from 0 through 23 representing the hour of the day.","source":"Returns an `Integer` value from 0 through 23 representing the hour of the day."}],"pos":[63084,63163],"yaml":true},{"content":"Returns an `Integer` value from 0 through 59 representing the minute of the hour.","nodes":[{"pos":[0,81],"content":"Returns an <ph id=\"ph1\">`Integer`</ph> value from 0 through 59 representing the minute of the hour.","source":"Returns an `Integer` value from 0 through 59 representing the minute of the hour."}],"pos":[64172,64254],"yaml":true},{"content":"You can also obtain the minute of the hour by calling `DatePart` and specifying `DateInterval.Minute` for the `Interval` argument.","nodes":[{"pos":[0,130],"content":"You can also obtain the minute of the hour by calling <ph id=\"ph1\">`DatePart`</ph> and specifying <ph id=\"ph2\">`DateInterval.Minute`</ph> for the <ph id=\"ph3\">`Interval`</ph> argument.","source":"You can also obtain the minute of the hour by calling `DatePart` and specifying `DateInterval.Minute` for the `Interval` argument."}],"pos":[64265,64396],"yaml":true,"extradata":"MT"},{"content":"Required. `Date` value from which you want to extract the minute.","nodes":[{"pos":[0,65],"content":"Required. `Date` value from which you want to extract the minute.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Date`</ph> value from which you want to extract the minute.","pos":[10,65],"source":"`Date` value from which you want to extract the minute."}]}],"pos":[64911,64977],"yaml":true},{"content":"Returns an `Integer` value from 0 through 59 representing the minute of the hour.","nodes":[{"pos":[0,81],"content":"Returns an <ph id=\"ph1\">`Integer`</ph> value from 0 through 59 representing the minute of the hour.","source":"Returns an `Integer` value from 0 through 59 representing the minute of the hour."}],"pos":[65033,65115],"yaml":true},{"content":"Returns an `Integer` value from 1 through 12 representing the month of the year.","nodes":[{"pos":[0,80],"content":"Returns an <ph id=\"ph1\">`Integer`</ph> value from 1 through 12 representing the month of the year.","source":"Returns an `Integer` value from 1 through 12 representing the month of the year."}],"pos":[66120,66201],"yaml":true},{"content":"You can also obtain the month of the year by calling `DatePart` and specifying `DateInterval.Month` for the `Interval` argument.","nodes":[{"pos":[0,128],"content":"You can also obtain the month of the year by calling <ph id=\"ph1\">`DatePart`</ph> and specifying <ph id=\"ph2\">`DateInterval.Month`</ph> for the <ph id=\"ph3\">`Interval`</ph> argument.","source":"You can also obtain the month of the year by calling `DatePart` and specifying `DateInterval.Month` for the `Interval` argument."}],"pos":[66212,66341],"yaml":true,"extradata":"MT"},{"content":"Required. `Date` value from which you want to extract the month.","nodes":[{"pos":[0,64],"content":"Required. `Date` value from which you want to extract the month.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Date`</ph> value from which you want to extract the month.","pos":[10,64],"source":"`Date` value from which you want to extract the month."}]}],"pos":[66841,66906],"yaml":true},{"content":"Returns an `Integer` value from 1 through 12 representing the month of the year.","nodes":[{"pos":[0,80],"content":"Returns an <ph id=\"ph1\">`Integer`</ph> value from 1 through 12 representing the month of the year.","source":"Returns an `Integer` value from 1 through 12 representing the month of the year."}],"pos":[66962,67043],"yaml":true},{"content":"Returns a `String` value containing the name of the specified month.","nodes":[{"pos":[0,68],"content":"Returns a <ph id=\"ph1\">`String`</ph> value containing the name of the specified month.","source":"Returns a `String` value containing the name of the specified month."}],"pos":[68125,68194],"yaml":true},{"content":"The string returned by `MonthName` depends not only on the input arguments, but also on the **Regional Options** settings specified in the Windows **Control Panel**.  \n  \n> [!NOTE]\n>  `MonthName` uses the current calendar setting from the <xref:System.Globalization.CultureInfo.CurrentCulture%2A> property of the <xref:System.Globalization.CultureInfo> class in the <xref:System.Globalization> namespace. The default <xref:System.Globalization.CultureInfo.CurrentCulture%2A> values are determined by **Control Panel** settings.","nodes":[{"pos":[0,165],"content":"The string returned by <ph id=\"ph1\">`MonthName`</ph> depends not only on the input arguments, but also on the <bpt id=\"p1\">**</bpt>Regional Options<ept id=\"p1\">**</ept> settings specified in the Windows <bpt id=\"p2\">**</bpt>Control Panel<ept id=\"p2\">**</ept>.","source":"The string returned by `MonthName` depends not only on the input arguments, but also on the **Regional Options** settings specified in the Windows **Control Panel**."},{"pos":[173,527],"content":"[!NOTE]\n `MonthName` uses the current calendar setting from the <xref:System.Globalization.CultureInfo.CurrentCulture%2A> property of the <xref:System.Globalization.CultureInfo> class in the <xref:System.Globalization> namespace. The default <xref:System.Globalization.CultureInfo.CurrentCulture%2A> values are determined by **Control Panel** settings.","leadings":["","> "],"nodes":[{"content":" `MonthName` uses the current calendar setting from the <xref:System.Globalization.CultureInfo.CurrentCulture%2A> property of the <xref:System.Globalization.CultureInfo> class in the <xref:System.Globalization> namespace. The default <xref:System.Globalization.CultureInfo.CurrentCulture%2A> values are determined by **Control Panel** settings.","pos":[8,352],"nodes":[{"content":"<ph id=\"ph1\"> `MonthName`</ph> uses the current calendar setting from the <ph id=\"ph2\">&lt;xref:System.Globalization.CultureInfo.CurrentCulture%2A&gt;</ph> property of the <ph id=\"ph3\">&lt;xref:System.Globalization.CultureInfo&gt;</ph> class in the <ph id=\"ph4\">&lt;xref:System.Globalization&gt;</ph> namespace.","pos":[0,221],"source":" `MonthName` uses the current calendar setting from the <xref:System.Globalization.CultureInfo.CurrentCulture%2A> property of the <xref:System.Globalization.CultureInfo> class in the <xref:System.Globalization> namespace."},{"content":"The default <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo.CurrentCulture%2A&gt;</ph> values are determined by <bpt id=\"p1\">**</bpt>Control Panel<ept id=\"p1\">**</ept> settings.","pos":[222,344],"source":" The default <xref:System.Globalization.CultureInfo.CurrentCulture%2A> values are determined by **Control Panel** settings."}]}]}],"pos":[68205,68738],"yaml":true,"extradata":"MT"},{"content":"Required. `Integer`. The numeric designation of the month, from 1 through 13; 1 indicates January and 12 indicates December. You can use the value 13 with a 13-month calendar. If your system is using a 12-month calendar and <code>Month</code> is 13, `MonthName` returns an empty string.","nodes":[{"pos":[0,286],"content":"Required. `Integer`. The numeric designation of the month, from 1 through 13; 1 indicates January and 12 indicates December. You can use the value 13 with a 13-month calendar. If your system is using a 12-month calendar and <code>Month</code> is 13, `MonthName` returns an empty string.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Integer`</ph>.","pos":[10,20],"source":"`Integer`."},{"content":"The numeric designation of the month, from 1 through 13; 1 indicates January and 12 indicates December.","pos":[21,124]},{"content":"You can use the value 13 with a 13-month calendar.","pos":[125,175]},{"content":"If your system is using a 12-month calendar and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Month</ph><ept id=\"p1\">&lt;/code&gt;</ept> is 13, <ph id=\"ph2\">`MonthName`</ph> returns an empty string.","pos":[176,286],"source":" If your system is using a 12-month calendar and <code>Month</code> is 13, `MonthName` returns an empty string."}]}],"pos":[69267,69554],"yaml":true},{"content":"Optional. `Boolean` value that indicates if the month name is to be abbreviated. If omitted, the default is `False`, which means the month name is not abbreviated.","nodes":[{"pos":[0,163],"content":"Optional. `Boolean` value that indicates if the month name is to be abbreviated. If omitted, the default is `False`, which means the month name is not abbreviated.","nodes":[{"content":"Optional.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Boolean`</ph> value that indicates if the month name is to be abbreviated.","pos":[10,80],"source":"`Boolean` value that indicates if the month name is to be abbreviated."},{"content":"If omitted, the default is <ph id=\"ph1\">`False`</ph>, which means the month name is not abbreviated.","pos":[81,163],"source":" If omitted, the default is `False`, which means the month name is not abbreviated."}]}],"pos":[69621,69785],"yaml":true},{"content":"Returns a `String` value containing the name of the specified month.","nodes":[{"pos":[0,68],"content":"Returns a <ph id=\"ph1\">`String`</ph> value containing the name of the specified month.","source":"Returns a `String` value containing the name of the specified month."}],"pos":[69842,69911],"yaml":true},{"content":"<code>Month</code> is less than 1 or greater than 13.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">&lt;code&gt;Month&lt;/code&gt;</ph> is less than 1 or greater than 13.","source":"<code>Month</code> is less than 1 or greater than 13."}],"pos":[70076,70130],"yaml":true},{"content":"Returns a `Date` value containing the current date and time according to your system.","nodes":[{"pos":[0,85],"content":"Returns a <ph id=\"ph1\">`Date`</ph> value containing the current date and time according to your system.","source":"Returns a `Date` value containing the current date and time according to your system."}],"pos":[70973,71059],"yaml":true},{"content":"To set the system date, use the <xref:Microsoft.VisualBasic.DateAndTime.Today%2A> property. To set the system time, use the <xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A> property.","nodes":[{"pos":[0,187],"content":"To set the system date, use the <xref:Microsoft.VisualBasic.DateAndTime.Today%2A> property. To set the system time, use the <xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A> property.","nodes":[{"content":"To set the system date, use the <xref:Microsoft.VisualBasic.DateAndTime.Today%2A> property. To set the system time, use the <xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A> property.","pos":[0,187],"nodes":[{"content":"To set the system date, use the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.DateAndTime.Today%2A&gt;</ph> property.","pos":[0,91],"source":"To set the system date, use the <xref:Microsoft.VisualBasic.DateAndTime.Today%2A> property."},{"content":"To set the system time, use the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A&gt;</ph> property.","pos":[92,187],"source":" To set the system time, use the <xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A> property."}]}]}],"pos":[71070,71258],"yaml":true,"extradata":"MT"},{"content":"Returns a `Date` value containing the current date and time according to your system.","nodes":[{"pos":[0,85],"content":"Returns a <ph id=\"ph1\">`Date`</ph> value containing the current date and time according to your system.","source":"Returns a `Date` value containing the current date and time according to your system."}],"pos":[71618,71704],"yaml":true},{"content":"Returns an `Integer` value from 0 through 59 representing the second of the minute.","nodes":[{"pos":[0,83],"content":"Returns an <ph id=\"ph1\">`Integer`</ph> value from 0 through 59 representing the second of the minute.","source":"Returns an `Integer` value from 0 through 59 representing the second of the minute."}],"pos":[72712,72796],"yaml":true},{"content":"You can also obtain the second of the minute by calling `DatePart` and specifying `DateInterval.Second` for the `Interval` argument.","nodes":[{"pos":[0,132],"content":"You can also obtain the second of the minute by calling <ph id=\"ph1\">`DatePart`</ph> and specifying <ph id=\"ph2\">`DateInterval.Second`</ph> for the <ph id=\"ph3\">`Interval`</ph> argument.","source":"You can also obtain the second of the minute by calling `DatePart` and specifying `DateInterval.Second` for the `Interval` argument."}],"pos":[72807,72940],"yaml":true,"extradata":"MT"},{"content":"Required. `Date` value from which you want to extract the second.","nodes":[{"pos":[0,65],"content":"Required. `Date` value from which you want to extract the second.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Date`</ph> value from which you want to extract the second.","pos":[10,65],"source":"`Date` value from which you want to extract the second."}]}],"pos":[73466,73532],"yaml":true},{"content":"Returns an `Integer` value from 0 through 59 representing the second of the minute.","nodes":[{"pos":[0,83],"content":"Returns an <ph id=\"ph1\">`Integer`</ph> value from 0 through 59 representing the second of the minute.","source":"Returns an `Integer` value from 0 through 59 representing the second of the minute."}],"pos":[73588,73672],"yaml":true},{"content":"Returns or sets a `Date` value containing the current time of day according to your system.","nodes":[{"pos":[0,91],"content":"Returns or sets a <ph id=\"ph1\">`Date`</ph> value containing the current time of day according to your system.","source":"Returns or sets a `Date` value containing the current time of day according to your system."}],"pos":[74622,74714],"yaml":true},{"content":"The `Date` data type includes date components. When returning the system time, `TimeOfDay` sets these all to 1, so the returned value represents the first day of the year 1. When setting the system time, `TimeOfDay` ignores the date components.  \n  \n To access the current system time as a `String`, use the <xref:Microsoft.VisualBasic.DateAndTime.TimeString%2A> property.  \n  \n To get or set the current system date, use the <xref:Microsoft.VisualBasic.DateAndTime.Today%2A> property.  \n  \n> [!IMPORTANT]\n>  Setting the system date or time requires unmanaged code permission, which might affect its execution in partial-trust situations. For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675).","nodes":[{"pos":[0,244],"content":"The `Date` data type includes date components. When returning the system time, `TimeOfDay` sets these all to 1, so the returned value represents the first day of the year 1. When setting the system time, `TimeOfDay` ignores the date components.","nodes":[{"content":"The <ph id=\"ph1\">`Date`</ph> data type includes date components.","pos":[0,46],"source":"The `Date` data type includes date components."},{"content":"When returning the system time, <ph id=\"ph1\">`TimeOfDay`</ph> sets these all to 1, so the returned value represents the first day of the year 1.","pos":[47,173],"source":" When returning the system time, `TimeOfDay` sets these all to 1, so the returned value represents the first day of the year 1."},{"content":"When setting the system time, <ph id=\"ph1\">`TimeOfDay`</ph> ignores the date components.","pos":[174,244],"source":" When setting the system time, `TimeOfDay` ignores the date components."}]},{"pos":[251,372],"content":"To access the current system time as a <ph id=\"ph1\">`String`</ph>, use the <ph id=\"ph2\">&lt;xref:Microsoft.VisualBasic.DateAndTime.TimeString%2A&gt;</ph> property.","source":"To access the current system time as a `String`, use the <xref:Microsoft.VisualBasic.DateAndTime.TimeString%2A> property."},{"pos":[379,485],"content":"To get or set the current system date, use the <xref:Microsoft.VisualBasic.DateAndTime.Today%2A> property.","nodes":[{"content":"To get or set the current system date, use the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.DateAndTime.Today%2A&gt;</ph> property.","pos":[0,106],"source":"To get or set the current system date, use the <xref:Microsoft.VisualBasic.DateAndTime.Today%2A> property."}]},{"pos":[493,819],"content":"[!IMPORTANT]\n Setting the system date or time requires unmanaged code permission, which might affect its execution in partial-trust situations. For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675).","leadings":["","> "],"nodes":[{"content":" Setting the system date or time requires unmanaged code permission, which might affect its execution in partial-trust situations. For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675).","pos":[13,324],"nodes":[{"content":"Setting the system date or time requires unmanaged code permission, which might affect its execution in partial-trust situations.","pos":[1,130]},{"content":"For more information, see <ph id=\"ph1\">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> and <bpt id=\"p1\">[</bpt>Code Access Permissions<ept id=\"p1\">](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675)</ept>.","pos":[131,311],"source":" For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675)."}]}]}],"pos":[74725,75554],"yaml":true,"extradata":"MT"},{"content":"Returns or sets a `Date` value containing the current time of day according to your system.","nodes":[{"pos":[0,91],"content":"Returns or sets a <ph id=\"ph1\">`Date`</ph> value containing the current time of day according to your system.","source":"Returns or sets a `Date` value containing the current time of day according to your system."}],"pos":[75913,76005],"yaml":true},{"content":"Returns a `Double` value representing the number of seconds elapsed since midnight.","nodes":[{"pos":[0,83],"content":"Returns a <ph id=\"ph1\">`Double`</ph> value representing the number of seconds elapsed since midnight.","source":"Returns a `Double` value representing the number of seconds elapsed since midnight."}],"pos":[76934,77018],"yaml":true},{"content":"The `Timer` property returns both the seconds and the milliseconds since the most recent midnight. The seconds are in the integral part of the return value, and the milliseconds are in the fractional part.","nodes":[{"pos":[0,205],"content":"The `Timer` property returns both the seconds and the milliseconds since the most recent midnight. The seconds are in the integral part of the return value, and the milliseconds are in the fractional part.","nodes":[{"content":"The <ph id=\"ph1\">`Timer`</ph> property returns both the seconds and the milliseconds since the most recent midnight.","pos":[0,98],"source":"The `Timer` property returns both the seconds and the milliseconds since the most recent midnight."},{"content":"The seconds are in the integral part of the return value, and the milliseconds are in the fractional part.","pos":[99,205]}]}],"pos":[77029,77235],"yaml":true,"extradata":"MT"},{"content":"Returns a `Double` value representing the number of seconds elapsed since midnight.","nodes":[{"pos":[0,83],"content":"Returns a <ph id=\"ph1\">`Double`</ph> value representing the number of seconds elapsed since midnight.","source":"Returns a `Double` value representing the number of seconds elapsed since midnight."}],"pos":[77957,78041],"yaml":true},{"content":"Returns a `Date` value representing a specified hour, minute, and second, with the date information set relative to January 1 of the year 1.","nodes":[{"pos":[0,140],"content":"Returns a <ph id=\"ph1\">`Date`</ph> value representing a specified hour, minute, and second, with the date information set relative to January 1 of the year 1.","source":"Returns a `Date` value representing a specified hour, minute, and second, with the date information set relative to January 1 of the year 1."}],"pos":[79177,79318],"yaml":true},{"content":"The following example demonstrates negative, zero, and positive argument values. The `TimeSerial` function returns a time representing 15 minutes before three hours before noon, or 8:45:00 AM.  \n  \n```vb  \nDim alarmTime As Date = TimeSerial(12 - 3, -15, 0)  \n```  \n  \n If either `Minute` or `Second` exceeds its normal range, it is applied to the next larger unit as appropriate. For example, if you specify 75 minutes, it is evaluated as one hour and 15 minutes.  \n  \n `TimeSerial` reduces the total seconds modulo 86,400, which is the number of seconds in a day. Therefore, the returned time is always between 00:00:00 and 23:59:59.  \n  \n The `Date` data type includes date components. `TimeSerial` sets all of these to 1, so the returned value represents the first day of the year 1. However, if the values of the arguments cause the calculated time to exceed 24 hours, the day is incremented as necessary. In the following example, the values of `Hour` and `Minute` result in a combined time of more than 24 hours.  \n  \n```vb  \nMsgBox(TimeSerial(23, 75, 0))   \n' The preceding statement displays \"1/2/0001 12:15:00 AM\".  \n```  \n  \n If the values of the arguments result in a negative calculated time, the date information is set to 1/1/0001 and the time information is adjusted to be between 00:00:00 and 23:59:59. However, if the calculated time is less than negative 24 hours, an <xref:System.ArgumentOutOfRangeException> error occurs.  \n  \n Since every `Date` value is supported by a <xref:System.DateTime?displayProperty=fullName> structure, its methods give you additional options in assembling a `Date` value. For example, you can employ one of the overloaded <xref:System.DateTime.%23ctor%2A> constructors to populate a `Date` variable using the desired combination of components. The following example sets `newDateTime` to May 6, 1978 at one tenth of a second before 8:30 in the morning:  \n  \n```vb  \nDim newDateTime As Date = New Date(1978, 5, 6, 8, 29, 59, 900)  \n```","nodes":[{"pos":[0,192],"content":"The following example demonstrates negative, zero, and positive argument values. The `TimeSerial` function returns a time representing 15 minutes before three hours before noon, or 8:45:00 AM.","nodes":[{"content":"The following example demonstrates negative, zero, and positive argument values.","pos":[0,80]},{"content":"The <ph id=\"ph1\">`TimeSerial`</ph> function returns a time representing 15 minutes before three hours before noon, or 8:45:00 AM.","pos":[81,192],"source":" The `TimeSerial` function returns a time representing 15 minutes before three hours before noon, or 8:45:00 AM."}]},{"pos":[269,463],"content":"If either `Minute` or `Second` exceeds its normal range, it is applied to the next larger unit as appropriate. For example, if you specify 75 minutes, it is evaluated as one hour and 15 minutes.","nodes":[{"content":"If either <ph id=\"ph1\">`Minute`</ph> or <ph id=\"ph2\">`Second`</ph> exceeds its normal range, it is applied to the next larger unit as appropriate.","pos":[0,110],"source":"If either `Minute` or `Second` exceeds its normal range, it is applied to the next larger unit as appropriate."},{"content":"For example, if you specify 75 minutes, it is evaluated as one hour and 15 minutes.","pos":[111,194]}]},{"pos":[470,634],"content":"`TimeSerial` reduces the total seconds modulo 86,400, which is the number of seconds in a day. Therefore, the returned time is always between 00:00:00 and 23:59:59.","nodes":[{"content":"<ph id=\"ph1\">`TimeSerial`</ph> reduces the total seconds modulo 86,400, which is the number of seconds in a day.","pos":[0,94],"source":"`TimeSerial` reduces the total seconds modulo 86,400, which is the number of seconds in a day."},{"content":"Therefore, the returned time is always between 00:00:00 and 23:59:59.","pos":[95,164]}]},{"pos":[641,1018],"content":"The `Date` data type includes date components. `TimeSerial` sets all of these to 1, so the returned value represents the first day of the year 1. However, if the values of the arguments cause the calculated time to exceed 24 hours, the day is incremented as necessary. In the following example, the values of `Hour` and `Minute` result in a combined time of more than 24 hours.","nodes":[{"content":"The <ph id=\"ph1\">`Date`</ph> data type includes date components.","pos":[0,46],"source":"The `Date` data type includes date components."},{"content":"<ph id=\"ph1\">`TimeSerial`</ph> sets all of these to 1, so the returned value represents the first day of the year 1.","pos":[47,145],"source":"`TimeSerial` sets all of these to 1, so the returned value represents the first day of the year 1."},{"content":"However, if the values of the arguments cause the calculated time to exceed 24 hours, the day is incremented as necessary.","pos":[146,268]},{"content":"In the following example, the values of <ph id=\"ph1\">`Hour`</ph> and <ph id=\"ph2\">`Minute`</ph> result in a combined time of more than 24 hours.","pos":[269,377],"source":" In the following example, the values of `Hour` and `Minute` result in a combined time of more than 24 hours."}]},{"pos":[1136,1441],"content":"If the values of the arguments result in a negative calculated time, the date information is set to 1/1/0001 and the time information is adjusted to be between 00:00:00 and 23:59:59. However, if the calculated time is less than negative 24 hours, an <xref:System.ArgumentOutOfRangeException> error occurs.","nodes":[{"content":"If the values of the arguments result in a negative calculated time, the date information is set to 1/1/0001 and the time information is adjusted to be between 00:00:00 and 23:59:59. However, if the calculated time is less than negative 24 hours, an <xref:System.ArgumentOutOfRangeException> error occurs.","pos":[0,305],"nodes":[{"content":"If the values of the arguments result in a negative calculated time, the date information is set to 1/1/0001 and the time information is adjusted to be between 00:00:00 and 23:59:59.","pos":[0,182]},{"content":"However, if the calculated time is less than negative 24 hours, an <ph id=\"ph1\">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> error occurs.","pos":[183,305],"source":" However, if the calculated time is less than negative 24 hours, an <xref:System.ArgumentOutOfRangeException> error occurs."}]}]},{"pos":[1448,1900],"content":"Since every `Date` value is supported by a <xref:System.DateTime?displayProperty=fullName> structure, its methods give you additional options in assembling a `Date` value. For example, you can employ one of the overloaded <xref:System.DateTime.%23ctor%2A> constructors to populate a `Date` variable using the desired combination of components. The following example sets `newDateTime` to May 6, 1978 at one tenth of a second before 8:30 in the morning:","nodes":[{"content":"Since every <ph id=\"ph1\">`Date`</ph> value is supported by a <ph id=\"ph2\">&lt;xref:System.DateTime?displayProperty=fullName&gt;</ph> structure, its methods give you additional options in assembling a <ph id=\"ph3\">`Date`</ph> value.","pos":[0,171],"source":"Since every `Date` value is supported by a <xref:System.DateTime?displayProperty=fullName> structure, its methods give you additional options in assembling a `Date` value."},{"content":"For example, you can employ one of the overloaded <ph id=\"ph1\">&lt;xref:System.DateTime.%23ctor%2A&gt;</ph> constructors to populate a <ph id=\"ph2\">`Date`</ph> variable using the desired combination of components.","pos":[172,343],"source":" For example, you can employ one of the overloaded <xref:System.DateTime.%23ctor%2A> constructors to populate a `Date` variable using the desired combination of components."},{"content":"The following example sets <ph id=\"ph1\">`newDateTime`</ph> to May 6, 1978 at one tenth of a second before 8:30 in the morning:","pos":[344,452],"source":" The following example sets `newDateTime` to May 6, 1978 at one tenth of a second before 8:30 in the morning:"}]}],"pos":[79329,81339],"yaml":true,"extradata":"MT"},{"content":"Required. `Integer` expression from 0 through 23. However, values outside this range are also accepted.","nodes":[{"pos":[0,103],"content":"Required. `Integer` expression from 0 through 23. However, values outside this range are also accepted.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Integer`</ph> expression from 0 through 23.","pos":[10,49],"source":"`Integer` expression from 0 through 23."},{"content":"However, values outside this range are also accepted.","pos":[50,103]}]}],"pos":[81764,81868],"yaml":true},{"content":"Required. `Integer` expression from 0 through 59. However, values outside this range are also accepted. The value of <code>Minute</code> is added to the calculated hour, so a negative value specifies minutes before that hour.","nodes":[{"pos":[0,225],"content":"Required. `Integer` expression from 0 through 59. However, values outside this range are also accepted. The value of <code>Minute</code> is added to the calculated hour, so a negative value specifies minutes before that hour.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Integer`</ph> expression from 0 through 59.","pos":[10,49],"source":"`Integer` expression from 0 through 59."},{"content":"However, values outside this range are also accepted.","pos":[50,103]},{"content":"The value of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Minute</ph><ept id=\"p1\">&lt;/code&gt;</ept> is added to the calculated hour, so a negative value specifies minutes before that hour.","pos":[104,225],"source":" The value of <code>Minute</code> is added to the calculated hour, so a negative value specifies minutes before that hour."}]}],"pos":[81929,82155],"yaml":true},{"content":"Required. `Integer` expression from 0 through 59. However, values outside this range are also accepted. The value of <code>Second</code> is added to the calculated minute, so a negative value specifies seconds before that minute.","nodes":[{"pos":[0,229],"content":"Required. `Integer` expression from 0 through 59. However, values outside this range are also accepted. The value of <code>Second</code> is added to the calculated minute, so a negative value specifies seconds before that minute.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Integer`</ph> expression from 0 through 59.","pos":[10,49],"source":"`Integer` expression from 0 through 59."},{"content":"However, values outside this range are also accepted.","pos":[50,103]},{"content":"The value of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Second</ph><ept id=\"p1\">&lt;/code&gt;</ept> is added to the calculated minute, so a negative value specifies seconds before that minute.","pos":[104,229],"source":" The value of <code>Second</code> is added to the calculated minute, so a negative value specifies seconds before that minute."}]}],"pos":[82216,82446],"yaml":true},{"content":"Returns a `Date` value representing a specified hour, minute, and second, with the date information set relative to January 1 of the year 1.","nodes":[{"pos":[0,140],"content":"Returns a <ph id=\"ph1\">`Date`</ph> value representing a specified hour, minute, and second, with the date information set relative to January 1 of the year 1.","source":"Returns a `Date` value representing a specified hour, minute, and second, with the date information set relative to January 1 of the year 1."}],"pos":[82505,82646],"yaml":true},{"content":"An argument is outside the range -2,147,483,648 through 2,147,483,647","nodes":[{"pos":[0,69],"content":"An argument is outside the range -2,147,483,648 through 2,147,483,647","nodes":[{"content":"An argument is outside the range -2,147,483,648 through 2,147,483,647","pos":[0,69]}]}],"pos":[82812,82882],"yaml":true},{"content":"Calculated time is less than negative 24 hours.","nodes":[{"pos":[0,47],"content":"Calculated time is less than negative 24 hours.","nodes":[{"content":"Calculated time is less than negative 24 hours.","pos":[0,47]}]}],"pos":[82996,83044],"yaml":true},{"content":"Returns or sets a `String` value representing the current time of day according to your system.","nodes":[{"pos":[0,95],"content":"Returns or sets a <ph id=\"ph1\">`String`</ph> value representing the current time of day according to your system.","source":"Returns or sets a `String` value representing the current time of day according to your system."}],"pos":[83929,84025],"yaml":true},{"content":"`TimeString` always returns the system time as \"HH:mm:ss\", which is a 24-hour format. This format is culture-invariant, which means it does not change even if you change the **Regional Options** in **Control Panel**.  \n  \n To get or set the current system date as a `String`, use the <xref:Microsoft.VisualBasic.DateAndTime.DateString%2A> property.  \n  \n To get the current system date or time in the format of your locale, or in a custom format, supply the <xref:Microsoft.VisualBasic.DateAndTime.Now%2A> property to the <xref:Microsoft.VisualBasic.Strings.Format%2A> function, specifying either a predefined or user-defined date/time format. The following example demonstrates this.  \n  \n```  \nMsgBox(\"The formatted time is \" & Format(Now, \"hh.mm.ss.fff tt\"))  \n```  \n  \n To access the current system time as a `Date`, use the <xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A> property.  \n  \n> [!IMPORTANT]\n>  Setting the system date or time requires unmanaged code permission, which might affect its execution in partial trust situations. For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675).","nodes":[{"pos":[0,216],"content":"`TimeString` always returns the system time as \"HH:mm:ss\", which is a 24-hour format. This format is culture-invariant, which means it does not change even if you change the **Regional Options** in **Control Panel**.","nodes":[{"content":"<ph id=\"ph1\">`TimeString`</ph> always returns the system time as \"HH:mm:ss\", which is a 24-hour format.","pos":[0,85],"source":"`TimeString` always returns the system time as \"HH:mm:ss\", which is a 24-hour format."},{"content":"This format is culture-invariant, which means it does not change even if you change the <bpt id=\"p1\">**</bpt>Regional Options<ept id=\"p1\">**</ept> in <bpt id=\"p2\">**</bpt>Control Panel<ept id=\"p2\">**</ept>.","pos":[86,216],"source":" This format is culture-invariant, which means it does not change even if you change the **Regional Options** in **Control Panel**."}]},{"pos":[223,348],"content":"To get or set the current system date as a <ph id=\"ph1\">`String`</ph>, use the <ph id=\"ph2\">&lt;xref:Microsoft.VisualBasic.DateAndTime.DateString%2A&gt;</ph> property.","source":"To get or set the current system date as a `String`, use the <xref:Microsoft.VisualBasic.DateAndTime.DateString%2A> property."},{"pos":[355,684],"content":"To get the current system date or time in the format of your locale, or in a custom format, supply the <xref:Microsoft.VisualBasic.DateAndTime.Now%2A> property to the <xref:Microsoft.VisualBasic.Strings.Format%2A> function, specifying either a predefined or user-defined date/time format. The following example demonstrates this.","nodes":[{"content":"To get the current system date or time in the format of your locale, or in a custom format, supply the <xref:Microsoft.VisualBasic.DateAndTime.Now%2A> property to the <xref:Microsoft.VisualBasic.Strings.Format%2A> function, specifying either a predefined or user-defined date/time format. The following example demonstrates this.","pos":[0,329],"nodes":[{"content":"To get the current system date or time in the format of your locale, or in a custom format, supply the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.DateAndTime.Now%2A&gt;</ph> property to the <ph id=\"ph2\">&lt;xref:Microsoft.VisualBasic.Strings.Format%2A&gt;</ph> function, specifying either a predefined or user-defined date/time format.","pos":[0,288],"source":"To get the current system date or time in the format of your locale, or in a custom format, supply the <xref:Microsoft.VisualBasic.DateAndTime.Now%2A> property to the <xref:Microsoft.VisualBasic.Strings.Format%2A> function, specifying either a predefined or user-defined date/time format."},{"content":"The following example demonstrates this.","pos":[289,329]}]}]},{"pos":[774,892],"content":"To access the current system time as a <ph id=\"ph1\">`Date`</ph>, use the <ph id=\"ph2\">&lt;xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A&gt;</ph> property.","source":"To access the current system time as a `Date`, use the <xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A> property."},{"pos":[900,1226],"content":"[!IMPORTANT]\n Setting the system date or time requires unmanaged code permission, which might affect its execution in partial trust situations. For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675).","leadings":["","> "],"nodes":[{"content":" Setting the system date or time requires unmanaged code permission, which might affect its execution in partial trust situations. For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675).","pos":[13,324],"nodes":[{"content":"Setting the system date or time requires unmanaged code permission, which might affect its execution in partial trust situations.","pos":[1,130]},{"content":"For more information, see <ph id=\"ph1\">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> and <bpt id=\"p1\">[</bpt>Code Access Permissions<ept id=\"p1\">](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675)</ept>.","pos":[131,311],"source":" For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675)."}]}]}],"pos":[84036,85284],"yaml":true,"extradata":"MT"},{"content":"Returns or sets a `String` value representing the current time of day according to your system.","nodes":[{"pos":[0,95],"content":"Returns or sets a <ph id=\"ph1\">`String`</ph> value representing the current time of day according to your system.","source":"Returns or sets a `String` value representing the current time of day according to your system."}],"pos":[85642,85738],"yaml":true},{"content":"Invalid format used to set the value of `TimeString`.","nodes":[{"pos":[0,53],"content":"Invalid format used to set the value of <ph id=\"ph1\">`TimeString`</ph>.","source":"Invalid format used to set the value of `TimeString`."}],"pos":[85910,85964],"yaml":true},{"content":"Returns a `Date` value containing the time information represented by a string, with the date information set to January 1 of the year 1.","nodes":[{"pos":[0,137],"content":"Returns a <ph id=\"ph1\">`Date`</ph> value containing the time information represented by a string, with the date information set to January 1 of the year 1.","source":"Returns a `Date` value containing the time information represented by a string, with the date information set to January 1 of the year 1."}],"pos":[86910,87048],"yaml":true},{"content":"You can enter valid times using a 12-hour or 24-hour clock. For example, `\"2:24 P.M.\"` and `\"14:24\"` are both valid `StringTime` arguments.  \n  \n If the `StringTime` argument includes date information, `TimeValue` does not include it in the returned value. However, if `StringTime` includes invalid date information, for example \"January 32,\" an <xref:System.InvalidCastException> error occurs.","nodes":[{"pos":[0,139],"content":"You can enter valid times using a 12-hour or 24-hour clock. For example, `\"2:24 P.M.\"` and `\"14:24\"` are both valid `StringTime` arguments.","nodes":[{"content":"You can enter valid times using a 12-hour or 24-hour clock.","pos":[0,59]},{"content":"For example, <ph id=\"ph1\">`\"2:24 P.M.\"`</ph> and <ph id=\"ph2\">`\"14:24\"`</ph> are both valid <ph id=\"ph3\">`StringTime`</ph> arguments.","pos":[60,139],"source":" For example, `\"2:24 P.M.\"` and `\"14:24\"` are both valid `StringTime` arguments."}]},{"pos":[146,394],"content":"If the `StringTime` argument includes date information, `TimeValue` does not include it in the returned value. However, if `StringTime` includes invalid date information, for example \"January 32,\" an <xref:System.InvalidCastException> error occurs.","nodes":[{"content":"If the <ph id=\"ph1\">`StringTime`</ph> argument includes date information, <ph id=\"ph2\">`TimeValue`</ph> does not include it in the returned value.","pos":[0,110],"source":"If the `StringTime` argument includes date information, `TimeValue` does not include it in the returned value."},{"content":"However, if <ph id=\"ph1\">`StringTime`</ph> includes invalid date information, for example \"January 32,\" an <ph id=\"ph2\">&lt;xref:System.InvalidCastException&gt;</ph> error occurs.","pos":[111,248],"source":" However, if `StringTime` includes invalid date information, for example \"January 32,\" an <xref:System.InvalidCastException> error occurs."}]}],"pos":[87059,87464],"yaml":true,"extradata":"MT"},{"content":"Required. `String` expression representing a date/time value from 00:00:00 on January 1 of the year 1 through 23:59:59 on December 31, 9999.","nodes":[{"pos":[0,140],"content":"Required. `String` expression representing a date/time value from 00:00:00 on January 1 of the year 1 through 23:59:59 on December 31, 9999.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`String`</ph> expression representing a date/time value from 00:00:00 on January 1 of the year 1 through 23:59:59 on December 31, 9999.","pos":[10,140],"source":"`String` expression representing a date/time value from 00:00:00 on January 1 of the year 1 through 23:59:59 on December 31, 9999."}]}],"pos":[87928,88069],"yaml":true},{"content":"Returns a `Date` value containing the time information represented by a string, with the date information set to January 1 of the year 1.","nodes":[{"pos":[0,137],"content":"Returns a <ph id=\"ph1\">`Date`</ph> value containing the time information represented by a string, with the date information set to January 1 of the year 1.","source":"Returns a `Date` value containing the time information represented by a string, with the date information set to January 1 of the year 1."}],"pos":[88128,88266],"yaml":true},{"content":"<code>StringTime</code> includes invalid date information.","nodes":[{"pos":[0,58],"content":"<ph id=\"ph1\">&lt;code&gt;StringTime&lt;/code&gt;</ph> includes invalid date information.","source":"<code>StringTime</code> includes invalid date information."}],"pos":[88437,88496],"yaml":true},{"content":"Returns or sets a `Date` value containing the current date according to your system.","nodes":[{"pos":[0,84],"content":"Returns or sets a <ph id=\"ph1\">`Date`</ph> value containing the current date according to your system.","source":"Returns or sets a `Date` value containing the current date according to your system."}],"pos":[89351,89436],"yaml":true},{"content":"The `Date` data type includes time components. When returning the system date, `Today` sets all of these to 0, so the returned value represents midnight (00:00:00). When setting the system date, `Today` ignores the time components.  \n  \n To access the current system date as a `String`, use the <xref:Microsoft.VisualBasic.DateAndTime.DateString%2A> property.  \n  \n To get or set the current system time, use the <xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A> property.  \n  \n> [!IMPORTANT]\n>  Setting the system date or time requires unmanaged code permission, which might affect its execution in partial-trust situations. For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675).","nodes":[{"pos":[0,231],"content":"The `Date` data type includes time components. When returning the system date, `Today` sets all of these to 0, so the returned value represents midnight (00:00:00). When setting the system date, `Today` ignores the time components.","nodes":[{"content":"The <ph id=\"ph1\">`Date`</ph> data type includes time components.","pos":[0,46],"source":"The `Date` data type includes time components."},{"content":"When returning the system date, <ph id=\"ph1\">`Today`</ph> sets all of these to 0, so the returned value represents midnight (00:00:00).","pos":[47,164],"source":" When returning the system date, `Today` sets all of these to 0, so the returned value represents midnight (00:00:00)."},{"content":"When setting the system date, <ph id=\"ph1\">`Today`</ph> ignores the time components.","pos":[165,231],"source":" When setting the system date, `Today` ignores the time components."}]},{"pos":[238,359],"content":"To access the current system date as a <ph id=\"ph1\">`String`</ph>, use the <ph id=\"ph2\">&lt;xref:Microsoft.VisualBasic.DateAndTime.DateString%2A&gt;</ph> property.","source":"To access the current system date as a `String`, use the <xref:Microsoft.VisualBasic.DateAndTime.DateString%2A> property."},{"pos":[366,476],"content":"To get or set the current system time, use the <xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A> property.","nodes":[{"content":"To get or set the current system time, use the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A&gt;</ph> property.","pos":[0,110],"source":"To get or set the current system time, use the <xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A> property."}]},{"pos":[484,810],"content":"[!IMPORTANT]\n Setting the system date or time requires unmanaged code permission, which might affect its execution in partial-trust situations. For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675).","leadings":["","> "],"nodes":[{"content":" Setting the system date or time requires unmanaged code permission, which might affect its execution in partial-trust situations. For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675).","pos":[13,324],"nodes":[{"content":"Setting the system date or time requires unmanaged code permission, which might affect its execution in partial-trust situations.","pos":[1,130]},{"content":"For more information, see <ph id=\"ph1\">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> and <bpt id=\"p1\">[</bpt>Code Access Permissions<ept id=\"p1\">](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675)</ept>.","pos":[131,311],"source":" For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675)."}]}]}],"pos":[89447,90267],"yaml":true,"extradata":"MT"},{"content":"Returns or sets a `Date` value containing the current date according to your system.","nodes":[{"pos":[0,84],"content":"Returns or sets a <ph id=\"ph1\">`Date`</ph> value containing the current date according to your system.","source":"Returns or sets a `Date` value containing the current date according to your system."}],"pos":[90618,90703],"yaml":true},{"content":"Returns an `Integer` value containing a number representing the day of the week.","nodes":[{"pos":[0,80],"content":"Returns an <ph id=\"ph1\">`Integer`</ph> value containing a number representing the day of the week.","source":"Returns an `Integer` value containing a number representing the day of the week."}],"pos":[91878,91959],"yaml":true},{"content":"The value returned by the `Weekday` function corresponds to the values of the `FirstDayOfWeek` enumeration; that is, 1 indicates Sunday and 7 indicates Saturday.  \n  \n> [!NOTE]\n>  `Weekday` uses the current calendar setting from the <xref:System.Globalization.CultureInfo.CurrentCulture%2A> property of the <xref:System.Globalization.CultureInfo> class in the <xref:System.Globalization> namespace. The default <xref:System.Globalization.CultureInfo.CurrentCulture%2A> values are determined by **Control Panel** settings.  \n  \n The `DayOfWeek` argument can have one of the following settings.  \n  \n|Enumeration value|Value|Description|  \n|-----------------------|-----------|-----------------|  \n|`FirstDayOfWeek.System`|0|First day of week specified in system settings|  \n|`FirstDayOfWeek.Sunday`|1|Sunday (default)|  \n|`FirstDayOfWeek.Monday`|2|Monday (complies with ISO standard 8601, section 3.17)|  \n|`FirstDayOfWeek.Tuesday`|3|Tuesday|  \n|`FirstDayOfWeek.Wednesday`|4|Wednesday|  \n|`FirstDayOfWeek.Thursday`|5|Thursday|  \n|`FirstDayOfWeek.Friday`|6|Friday|  \n|`FirstDayOfWeek.Saturday`|7|Saturday|","nodes":[{"pos":[0,161],"content":"The value returned by the <ph id=\"ph1\">`Weekday`</ph> function corresponds to the values of the <ph id=\"ph2\">`FirstDayOfWeek`</ph> enumeration; that is, 1 indicates Sunday and 7 indicates Saturday.","source":"The value returned by the `Weekday` function corresponds to the values of the `FirstDayOfWeek` enumeration; that is, 1 indicates Sunday and 7 indicates Saturday."},{"pos":[169,521],"content":"[!NOTE]\n `Weekday` uses the current calendar setting from the <xref:System.Globalization.CultureInfo.CurrentCulture%2A> property of the <xref:System.Globalization.CultureInfo> class in the <xref:System.Globalization> namespace. The default <xref:System.Globalization.CultureInfo.CurrentCulture%2A> values are determined by **Control Panel** settings.","leadings":["","> "],"nodes":[{"content":" `Weekday` uses the current calendar setting from the <xref:System.Globalization.CultureInfo.CurrentCulture%2A> property of the <xref:System.Globalization.CultureInfo> class in the <xref:System.Globalization> namespace. The default <xref:System.Globalization.CultureInfo.CurrentCulture%2A> values are determined by **Control Panel** settings.","pos":[8,350],"nodes":[{"content":"<ph id=\"ph1\"> `Weekday`</ph> uses the current calendar setting from the <ph id=\"ph2\">&lt;xref:System.Globalization.CultureInfo.CurrentCulture%2A&gt;</ph> property of the <ph id=\"ph3\">&lt;xref:System.Globalization.CultureInfo&gt;</ph> class in the <ph id=\"ph4\">&lt;xref:System.Globalization&gt;</ph> namespace.","pos":[0,219],"source":" `Weekday` uses the current calendar setting from the <xref:System.Globalization.CultureInfo.CurrentCulture%2A> property of the <xref:System.Globalization.CultureInfo> class in the <xref:System.Globalization> namespace."},{"content":"The default <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo.CurrentCulture%2A&gt;</ph> values are determined by <bpt id=\"p1\">**</bpt>Control Panel<ept id=\"p1\">**</ept> settings.","pos":[220,342],"source":" The default <xref:System.Globalization.CultureInfo.CurrentCulture%2A> values are determined by **Control Panel** settings."}]}]},{"pos":[528,592],"content":"The <ph id=\"ph1\">`DayOfWeek`</ph> argument can have one of the following settings.","source":"The `DayOfWeek` argument can have one of the following settings."},{"pos":[599,616],"content":"Enumeration value","nodes":[{"content":"Enumeration value","pos":[0,17]}]},{"pos":[617,622],"content":"Value","nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[623,634],"content":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"pos":[721,722],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[723,769],"content":"First day of week specified in system settings","nodes":[{"content":"First day of week specified in system settings","pos":[0,46]}]},{"pos":[798,799],"content":"1","nodes":[{"content":"1","pos":[0,1]}]},{"pos":[800,816],"content":"Sunday (default)","nodes":[{"content":"Sunday (default)","pos":[0,16]}]},{"pos":[845,846],"content":"2","nodes":[{"content":"2","pos":[0,1]}]},{"pos":[847,901],"content":"Monday (complies with ISO standard 8601, section 3.17)","nodes":[{"content":"Monday (complies with ISO standard 8601, section 3.17)","pos":[0,54]}]},{"pos":[931,932],"content":"3","nodes":[{"content":"3","pos":[0,1]}]},{"pos":[933,940],"content":"Tuesday","nodes":[{"content":"Tuesday","pos":[0,7]}]},{"pos":[972,973],"content":"4","nodes":[{"content":"4","pos":[0,1]}]},{"pos":[974,983],"content":"Wednesday","nodes":[{"content":"Wednesday","pos":[0,9]}]},{"pos":[1014,1015],"content":"5","nodes":[{"content":"5","pos":[0,1]}]},{"pos":[1016,1024],"content":"Thursday","nodes":[{"content":"Thursday","pos":[0,8]}]},{"pos":[1053,1054],"content":"6","nodes":[{"content":"6","pos":[0,1]}]},{"pos":[1055,1061],"content":"Friday","nodes":[{"content":"Friday","pos":[0,6]}]},{"pos":[1092,1093],"content":"7","nodes":[{"content":"7","pos":[0,1]}]},{"pos":[1094,1102],"content":"Saturday","nodes":[{"content":"Saturday","pos":[0,8]}]}],"pos":[91970,93092],"yaml":true,"extradata":"MT"},{"content":"Required. `Date` value for which you want to determine the day of the week.","nodes":[{"pos":[0,75],"content":"Required. `Date` value for which you want to determine the day of the week.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Date`</ph> value for which you want to determine the day of the week.","pos":[10,75],"source":"`Date` value for which you want to determine the day of the week."}]}],"pos":[93586,93662],"yaml":true},{"content":"Optional. A value chosen from the `FirstDayOfWeek` enumeration that specifies the first day of the week. If not specified, `FirstDayOfWeek.Sunday` is used.","nodes":[{"pos":[0,155],"content":"Optional. A value chosen from the `FirstDayOfWeek` enumeration that specifies the first day of the week. If not specified, `FirstDayOfWeek.Sunday` is used.","nodes":[{"content":"Optional.","pos":[0,9]},{"content":"A value chosen from the <ph id=\"ph1\">`FirstDayOfWeek`</ph> enumeration that specifies the first day of the week.","pos":[10,104],"source":" A value chosen from the `FirstDayOfWeek` enumeration that specifies the first day of the week."},{"content":"If not specified, <ph id=\"ph1\">`FirstDayOfWeek.Sunday`</ph> is used.","pos":[105,155],"source":" If not specified, `FirstDayOfWeek.Sunday` is used."}]}],"pos":[93750,93906],"yaml":true},{"content":"Returns an `Integer` value containing a number representing the day of the week.","nodes":[{"pos":[0,80],"content":"Returns an <ph id=\"ph1\">`Integer`</ph> value containing a number representing the day of the week.","source":"Returns an `Integer` value containing a number representing the day of the week."}],"pos":[93962,94043],"yaml":true},{"content":"<code>DayOfWeek</code> is less than 0 or more than 7.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">&lt;code&gt;DayOfWeek&lt;/code&gt;</ph> is less than 0 or more than 7.","source":"<code>DayOfWeek</code> is less than 0 or more than 7."}],"pos":[94206,94260],"yaml":true},{"content":"Returns a `String` value containing the name of the specified weekday.","nodes":[{"pos":[0,70],"content":"Returns a <ph id=\"ph1\">`String`</ph> value containing the name of the specified weekday.","source":"Returns a `String` value containing the name of the specified weekday."}],"pos":[95443,95514],"yaml":true},{"content":"The string returned by `WeekdayName` depends not only on the input arguments, but also on the **Regional Options** settings specified in the Windows **Control Panel**.  \n  \n> [!NOTE]\n>  `WeekdayName` uses the current calendar setting from the <xref:System.Globalization.CultureInfo.CurrentCulture%2A> property of the <xref:System.Globalization.CultureInfo> class in the <xref:System.Globalization> namespace. The default <xref:System.Globalization.CultureInfo.CurrentCulture%2A> values are determined by **Control Panel** settings.  \n  \n The `FirstDayOfWeekValue` argument can have one of the following settings.  \n  \n|Enumeration value|Value|Description|  \n|-----------------------|-----------|-----------------|  \n|`FirstDayOfWeek.System`|0|First day of week specified in system settings (default)|  \n|`FirstDayOfWeek.Sunday`|1|Sunday|  \n|`FirstDayOfWeek.Monday`|2|Monday (complies with ISO standard 8601, section 3.17)|  \n|`FirstDayOfWeek.Tuesday`|3|Tuesday|  \n|`FirstDayOfWeek.Wednesday`|4|Wednesday|  \n|`FirstDayOfWeek.Thursday`|5|Thursday|  \n|`FirstDayOfWeek.Friday`|6|Friday|  \n|`FirstDayOfWeek.Saturday`|7|Saturday|","nodes":[{"pos":[0,167],"content":"The string returned by <ph id=\"ph1\">`WeekdayName`</ph> depends not only on the input arguments, but also on the <bpt id=\"p1\">**</bpt>Regional Options<ept id=\"p1\">**</ept> settings specified in the Windows <bpt id=\"p2\">**</bpt>Control Panel<ept id=\"p2\">**</ept>.","source":"The string returned by `WeekdayName` depends not only on the input arguments, but also on the **Regional Options** settings specified in the Windows **Control Panel**."},{"pos":[175,531],"content":"[!NOTE]\n `WeekdayName` uses the current calendar setting from the <xref:System.Globalization.CultureInfo.CurrentCulture%2A> property of the <xref:System.Globalization.CultureInfo> class in the <xref:System.Globalization> namespace. The default <xref:System.Globalization.CultureInfo.CurrentCulture%2A> values are determined by **Control Panel** settings.","leadings":["","> "],"nodes":[{"content":" `WeekdayName` uses the current calendar setting from the <xref:System.Globalization.CultureInfo.CurrentCulture%2A> property of the <xref:System.Globalization.CultureInfo> class in the <xref:System.Globalization> namespace. The default <xref:System.Globalization.CultureInfo.CurrentCulture%2A> values are determined by **Control Panel** settings.","pos":[8,354],"nodes":[{"content":"<ph id=\"ph1\"> `WeekdayName`</ph> uses the current calendar setting from the <ph id=\"ph2\">&lt;xref:System.Globalization.CultureInfo.CurrentCulture%2A&gt;</ph> property of the <ph id=\"ph3\">&lt;xref:System.Globalization.CultureInfo&gt;</ph> class in the <ph id=\"ph4\">&lt;xref:System.Globalization&gt;</ph> namespace.","pos":[0,223],"source":" `WeekdayName` uses the current calendar setting from the <xref:System.Globalization.CultureInfo.CurrentCulture%2A> property of the <xref:System.Globalization.CultureInfo> class in the <xref:System.Globalization> namespace."},{"content":"The default <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo.CurrentCulture%2A&gt;</ph> values are determined by <bpt id=\"p1\">**</bpt>Control Panel<ept id=\"p1\">**</ept> settings.","pos":[224,346],"source":" The default <xref:System.Globalization.CultureInfo.CurrentCulture%2A> values are determined by **Control Panel** settings."}]}]},{"pos":[538,612],"content":"The <ph id=\"ph1\">`FirstDayOfWeekValue`</ph> argument can have one of the following settings.","source":"The `FirstDayOfWeekValue` argument can have one of the following settings."},{"pos":[619,636],"content":"Enumeration value","nodes":[{"content":"Enumeration value","pos":[0,17]}]},{"pos":[637,642],"content":"Value","nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[643,654],"content":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"pos":[741,742],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[743,799],"content":"First day of week specified in system settings (default)","nodes":[{"content":"First day of week specified in system settings (default)","pos":[0,56]}]},{"pos":[828,829],"content":"1","nodes":[{"content":"1","pos":[0,1]}]},{"pos":[830,836],"content":"Sunday","nodes":[{"content":"Sunday","pos":[0,6]}]},{"pos":[865,866],"content":"2","nodes":[{"content":"2","pos":[0,1]}]},{"pos":[867,921],"content":"Monday (complies with ISO standard 8601, section 3.17)","nodes":[{"content":"Monday (complies with ISO standard 8601, section 3.17)","pos":[0,54]}]},{"pos":[951,952],"content":"3","nodes":[{"content":"3","pos":[0,1]}]},{"pos":[953,960],"content":"Tuesday","nodes":[{"content":"Tuesday","pos":[0,7]}]},{"pos":[992,993],"content":"4","nodes":[{"content":"4","pos":[0,1]}]},{"pos":[994,1003],"content":"Wednesday","nodes":[{"content":"Wednesday","pos":[0,9]}]},{"pos":[1034,1035],"content":"5","nodes":[{"content":"5","pos":[0,1]}]},{"pos":[1036,1044],"content":"Thursday","nodes":[{"content":"Thursday","pos":[0,8]}]},{"pos":[1073,1074],"content":"6","nodes":[{"content":"6","pos":[0,1]}]},{"pos":[1075,1081],"content":"Friday","nodes":[{"content":"Friday","pos":[0,6]}]},{"pos":[1112,1113],"content":"7","nodes":[{"content":"7","pos":[0,1]}]},{"pos":[1114,1122],"content":"Saturday","nodes":[{"content":"Saturday","pos":[0,8]}]}],"pos":[95525,96667],"yaml":true,"extradata":"MT"},{"content":"Required. `Integer`. The numeric designation for the weekday, from 1 through 7; 1 indicates the first day of the week and 7 indicates the last day of the week. The identities of the first and last days depend on the setting of <code>FirstDayOfWeekValue</code>.","nodes":[{"pos":[0,260],"content":"Required. `Integer`. The numeric designation for the weekday, from 1 through 7; 1 indicates the first day of the week and 7 indicates the last day of the week. The identities of the first and last days depend on the setting of <code>FirstDayOfWeekValue</code>.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Integer`</ph>.","pos":[10,20],"source":"`Integer`."},{"content":"The numeric designation for the weekday, from 1 through 7; 1 indicates the first day of the week and 7 indicates the last day of the week.","pos":[21,159]},{"content":"The identities of the first and last days depend on the setting of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">FirstDayOfWeekValue</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[160,260],"source":" The identities of the first and last days depend on the setting of <code>FirstDayOfWeekValue</code>."}]}],"pos":[97278,97539],"yaml":true},{"content":"Optional. `Boolean` value that indicates if the weekday name is to be abbreviated. If omitted, the default is `False`, which means the weekday name is not abbreviated.","nodes":[{"pos":[0,167],"content":"Optional. `Boolean` value that indicates if the weekday name is to be abbreviated. If omitted, the default is `False`, which means the weekday name is not abbreviated.","nodes":[{"content":"Optional.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Boolean`</ph> value that indicates if the weekday name is to be abbreviated.","pos":[10,82],"source":"`Boolean` value that indicates if the weekday name is to be abbreviated."},{"content":"If omitted, the default is <ph id=\"ph1\">`False`</ph>, which means the weekday name is not abbreviated.","pos":[83,167],"source":" If omitted, the default is `False`, which means the weekday name is not abbreviated."}]}],"pos":[97606,97774],"yaml":true},{"content":"Optional. A value chosen from the `FirstDayOfWeek` enumeration that specifies the first day of the week. If not specified, `FirstDayOfWeek.System` is used.","nodes":[{"pos":[0,155],"content":"Optional. A value chosen from the `FirstDayOfWeek` enumeration that specifies the first day of the week. If not specified, `FirstDayOfWeek.System` is used.","nodes":[{"content":"Optional.","pos":[0,9]},{"content":"A value chosen from the <ph id=\"ph1\">`FirstDayOfWeek`</ph> enumeration that specifies the first day of the week.","pos":[10,104],"source":" A value chosen from the `FirstDayOfWeek` enumeration that specifies the first day of the week."},{"content":"If not specified, <ph id=\"ph1\">`FirstDayOfWeek.System`</ph> is used.","pos":[105,155],"source":" If not specified, `FirstDayOfWeek.System` is used."}]}],"pos":[97872,98028],"yaml":true},{"content":"Returns a `String` value containing the name of the specified weekday.","nodes":[{"pos":[0,70],"content":"Returns a <ph id=\"ph1\">`String`</ph> value containing the name of the specified weekday.","source":"Returns a `String` value containing the name of the specified weekday."}],"pos":[98085,98156],"yaml":true},{"content":"<code>Weekday</code> is less than 1 or greater than 7, or <code>FirstDayOfWeekValue</code> is less than 0 or greater than 7.","nodes":[{"pos":[0,124],"content":"<ph id=\"ph1\">&lt;code&gt;Weekday&lt;/code&gt;</ph> is less than 1 or greater than 7, or <ph id=\"ph2\">&lt;code&gt;FirstDayOfWeekValue&lt;/code&gt;</ph> is less than 0 or greater than 7.","source":"<code>Weekday</code> is less than 1 or greater than 7, or <code>FirstDayOfWeekValue</code> is less than 0 or greater than 7."}],"pos":[98323,98448],"yaml":true},{"content":"Returns an `Integer` value from 1 through 9999 representing the year.","nodes":[{"pos":[0,69],"content":"Returns an <ph id=\"ph1\">`Integer`</ph> value from 1 through 9999 representing the year.","source":"Returns an `Integer` value from 1 through 9999 representing the year."}],"pos":[99376,99446],"yaml":true},{"content":"You can also obtain the year by calling `DatePart` and specifying `DateInterval.Year` for the `Interval` argument.","nodes":[{"pos":[0,114],"content":"You can also obtain the year by calling <ph id=\"ph1\">`DatePart`</ph> and specifying <ph id=\"ph2\">`DateInterval.Year`</ph> for the <ph id=\"ph3\">`Interval`</ph> argument.","source":"You can also obtain the year by calling `DatePart` and specifying `DateInterval.Year` for the `Interval` argument."}],"pos":[99457,99572],"yaml":true,"extradata":"MT"},{"content":"Required. `Date` value from which you want to extract the year.","nodes":[{"pos":[0,63],"content":"Required. `Date` value from which you want to extract the year.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`Date`</ph> value from which you want to extract the year.","pos":[10,63],"source":"`Date` value from which you want to extract the year."}]}],"pos":[100078,100142],"yaml":true},{"content":"Returns an `Integer` value from 1 through 9999 representing the year.","nodes":[{"pos":[0,69],"content":"Returns an <ph id=\"ph1\">`Integer`</ph> value from 1 through 9999 representing the year.","source":"Returns an `Integer` value from 1 through 9999 representing the year."}],"pos":[100198,100268],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.VisualBasic.DateAndTime\n  commentId: T:Microsoft.VisualBasic.DateAndTime\n  id: DateAndTime\n  children:\n  - Microsoft.VisualBasic.DateAndTime.DateAdd(Microsoft.VisualBasic.DateInterval,System.Double,System.DateTime)\n  - Microsoft.VisualBasic.DateAndTime.DateAdd(System.String,System.Double,System.Object)\n  - Microsoft.VisualBasic.DateAndTime.DateDiff(Microsoft.VisualBasic.DateInterval,System.DateTime,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)\n  - Microsoft.VisualBasic.DateAndTime.DateDiff(System.String,System.Object,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)\n  - Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)\n  - Microsoft.VisualBasic.DateAndTime.DatePart(System.String,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)\n  - Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)\n  - Microsoft.VisualBasic.DateAndTime.DateString\n  - Microsoft.VisualBasic.DateAndTime.DateValue(System.String)\n  - Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)\n  - Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)\n  - Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)\n  - Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)\n  - Microsoft.VisualBasic.DateAndTime.MonthName(System.Int32,System.Boolean)\n  - Microsoft.VisualBasic.DateAndTime.Now\n  - Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)\n  - Microsoft.VisualBasic.DateAndTime.TimeOfDay\n  - Microsoft.VisualBasic.DateAndTime.Timer\n  - Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)\n  - Microsoft.VisualBasic.DateAndTime.TimeString\n  - Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)\n  - Microsoft.VisualBasic.DateAndTime.Today\n  - Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)\n  - Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)\n  - Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)\n  langs:\n  - csharp\n  name: DateAndTime\n  nameWithType: DateAndTime\n  fullName: Microsoft.VisualBasic.DateAndTime\n  type: Class\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: The `DateAndTime` module contains the procedures and properties used in date and time operations.\n  remarks: This module supports the Visual Basic language keywords and run-time library members that get the current date or time, perform date calculations, return a date or time, set the date or time, or time the duration of a process.\n  example:\n  - \"This example uses the `Today` property to return the current system date.  \\n  \\n```  \\nDim thisDate As Date  \\nthisDate = Today   \\n```\"\n  syntax:\n    content: >-\n      [Microsoft.VisualBasic.CompilerServices.StandardModule]\n\n      public sealed class DateAndTime\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/DateAndTime.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.DateAndTime.DateAdd(Microsoft.VisualBasic.DateInterval,System.Double,System.DateTime)\n  commentId: M:Microsoft.VisualBasic.DateAndTime.DateAdd(Microsoft.VisualBasic.DateInterval,System.Double,System.DateTime)\n  id: DateAdd(Microsoft.VisualBasic.DateInterval,System.Double,System.DateTime)\n  parent: Microsoft.VisualBasic.DateAndTime\n  langs:\n  - csharp\n  name: DateAdd(DateInterval, Double, DateTime)\n  nameWithType: DateAndTime.DateAdd(DateInterval, Double, DateTime)\n  fullName: DateAndTime.DateAdd(DateInterval, Double, DateTime)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a `Date` value containing a date and time value to which a specified time interval has been added.\n  remarks: \"You can use the `DateAdd` function to add or subtract a specified time interval from a date. For example, you can calculate a date 30 days from today or a time 45 minutes before now.  \\n  \\n To add days to `DateValue`, you can use `DateInterval.Day`, `DateInterval.DayOfYear`, or `DateInterval.Weekday`. These are treated as equivalent because `DayOfYear` and `Weekday` are not meaningful time intervals.  \\n  \\n The `DateAdd` function never returns an invalid date. If necessary, the day part of the resulting date is adjusted downward to the last day of the resulting month in the resulting year. The following example adds one month to January 31:  \\n  \\n```vb  \\nDim NextMonth As Date = DateAdd(DateInterval.Month, 1, #1/31/1995#)  \\n```  \\n  \\n In this example, `DateAdd` returns `#2/28/1995#`, not `#2/31/1995#`. If `DateValue` is `#1/31/1996#`, it returns `#2/29/1996#` because 1996 is a leap year.  \\n  \\n> [!NOTE]\\n>  `DateAdd` uses the current calendar setting from the <xref:System.Globalization.CultureInfo.CurrentCulture%2A> property of the <xref:System.Globalization.CultureInfo> class in the <xref:System.Globalization> namespace. The default <xref:System.Globalization.CultureInfo.CurrentCulture%2A> values are determined by **Control Panel** settings.  \\n  \\n Since every `Date` value is supported by a <xref:System.DateTime> structure, its methods give you additional options in adding time intervals. For example, you can add a fractional number of days, rounded to the nearest millisecond, to a `Date` variable as follows:  \\n  \\n```vb  \\nDim NextTime As Date = Now        ' Current date and time.  \\nNextTime = NextTime.AddDays(3.4)  ' Increment by 3 2/5 days.  \\n```  \\n  \\n The `Interval` argument can have one of the following settings.  \\n  \\n|Enumeration value|String|Unit of time interval to add|  \\n|-----------------------|------------|----------------------------------|  \\n|`DateInterval.Day`|d|Day; truncated to integral value|  \\n|`DateInterval.DayOfYear`|y|Day; truncated to integral value|  \\n|`DateInterval.Hour`|h|Hour; rounded to nearest millisecond|  \\n|`DateInterval.Minute`|n|Minute; rounded to nearest millisecond|  \\n|`DateInterval.Month`|m|Month; truncated to integral value|  \\n|`DateInterval.Quarter`|q|Quarter; truncated to integral value|  \\n|`DateInterval.Second`|s|Second; rounded to nearest millisecond|  \\n|`DateInterval.Weekday`|w|Day; truncated to integral value|  \\n|`DateInterval.WeekOfYear`|ww|Week; truncated to integral value|  \\n|`DateInterval.Year`|yyyy|Year; truncated to integral value|\"\n  example:\n  - \"This example takes a date and, using the `DateAdd` function, displays a corresponding date a specified number of months in the future.  \\n  \\n [!code-vb[VbVbalrFunctions#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#25)]\"\n  syntax:\n    content: public static DateTime DateAdd (Microsoft.VisualBasic.DateInterval Interval, double Number, DateTime DateValue);\n    parameters:\n    - id: Interval\n      type: Microsoft.VisualBasic.DateInterval\n      description: Required. `DateInterval` enumeration value or `String` expression representing the time interval you want to add.\n    - id: Number\n      type: System.Double\n      description: Required. `Double`. Floating-point expression representing the number of intervals you want to add. <code>Number</code> can be positive (to get date/time values in the future) or negative (to get date/time values in the past). It can contain a fractional part when <code>Interval</code> specifies hours, minutes, or seconds. For other values of <code>Interval</code>, any fractional part of <code>Number</code> is ignored.\n    - id: DateValue\n      type: System.DateTime\n      description: Required. `Date`. An expression representing the date and time to which the interval is to be added. <code>DateValue</code> itself is not changed in the calling program.\n    return:\n      type: System.DateTime\n      description: Returns a `Date` value containing a date and time value to which a specified time interval has been added.\n  overload: Microsoft.VisualBasic.DateAndTime.DateAdd*\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: <code>DateValue</code> is not coercible to `Date`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Interval</code> is not valid.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: Calculated date is before 00:00:00 on January 1 of the year 1, or later than 23:59:59 on December 31, 9999.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/DateAndTime.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.DateAndTime.DateAdd(System.String,System.Double,System.Object)\n  commentId: M:Microsoft.VisualBasic.DateAndTime.DateAdd(System.String,System.Double,System.Object)\n  id: DateAdd(System.String,System.Double,System.Object)\n  parent: Microsoft.VisualBasic.DateAndTime\n  langs:\n  - csharp\n  name: DateAdd(String, Double, Object)\n  nameWithType: DateAndTime.DateAdd(String, Double, Object)\n  fullName: DateAndTime.DateAdd(String, Double, Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a `Date` value containing a date and time value to which a specified time interval has been added.\n  remarks: \"You can use the `DateAdd` function to add or subtract a specified time interval from a date. For example, you can calculate a date 30 days from today or a time 45 minutes before now.  \\n  \\n To add days to `DateValue`, you can use `DateInterval.Day`, `DateInterval.DayOfYear`, or `DateInterval.Weekday`. These are treated as equivalent because `DayOfYear` and `Weekday` are not meaningful time intervals.  \\n  \\n The `DateAdd` function never returns an invalid date. If necessary, the day part of the resulting date is adjusted downward to the last day of the resulting month in the resulting year. The following example adds one month to January 31:  \\n  \\n```vb  \\nDim NextMonth As Date = DateAdd(DateInterval.Month, 1, #1/31/1995#)  \\n```  \\n  \\n In this example, `DateAdd` returns `#2/28/1995#`, not `#2/31/1995#`. If `DateValue` is `#1/31/1996#`, it returns `#2/29/1996#` because 1996 is a leap year.  \\n  \\n> [!NOTE]\\n>  `DateAdd` uses the current calendar setting from the <xref:System.Globalization.CultureInfo.CurrentCulture%2A> property of the <xref:System.Globalization.CultureInfo> class in the <xref:System.Globalization> namespace. The default <xref:System.Globalization.CultureInfo.CurrentCulture%2A> values are determined by **Control Panel** settings.  \\n  \\n Since every `Date` value is supported by a <xref:System.DateTime> structure, its methods give you additional options in adding time intervals. For example, you can add a fractional number of days, rounded to the nearest millisecond, to a `Date` variable as follows:  \\n  \\n```vb  \\nDim NextTime As Date = Now        ' Current date and time.  \\nNextTime = NextTime.AddDays(3.4)  ' Increment by 3 2/5 days.  \\n```  \\n  \\n The `Interval` argument can have one of the following settings.  \\n  \\n|Enumeration value|String|Unit of time interval to add|  \\n|-----------------------|------------|----------------------------------|  \\n|`DateInterval.Day`|d|Day; truncated to integral value|  \\n|`DateInterval.DayOfYear`|y|Day; truncated to integral value|  \\n|`DateInterval.Hour`|h|Hour; rounded to nearest millisecond|  \\n|`DateInterval.Minute`|n|Minute; rounded to nearest millisecond|  \\n|`DateInterval.Month`|m|Month; truncated to integral value|  \\n|`DateInterval.Quarter`|q|Quarter; truncated to integral value|  \\n|`DateInterval.Second`|s|Second; rounded to nearest millisecond|  \\n|`DateInterval.Weekday`|w|Day; truncated to integral value|  \\n|`DateInterval.WeekOfYear`|ww|Week; truncated to integral value|  \\n|`DateInterval.Year`|yyyy|Year; truncated to integral value|\"\n  example:\n  - \"This example takes a date and, using the `DateAdd` function, displays a corresponding date a specified number of months in the future.  \\n  \\n [!code-vb[VbVbalrFunctions#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#25)]\"\n  syntax:\n    content: public static DateTime DateAdd (string Interval, double Number, object DateValue);\n    parameters:\n    - id: Interval\n      type: System.String\n      description: Required. `DateInterval` enumeration value or `String` expression representing the time interval you want to add.\n    - id: Number\n      type: System.Double\n      description: Required. `Double`. Floating-point expression representing the number of intervals you want to add. <code>Number</code> can be positive (to get date/time values in the future) or negative (to get date/time values in the past). It can contain a fractional part when <code>Interval</code> specifies hours, minutes, or seconds. For other values of <code>Interval</code>, any fractional part of <code>Number</code> is ignored.\n    - id: DateValue\n      type: System.Object\n      description: Required. `Date`. An expression representing the date and time to which the interval is to be added. <code>DateValue</code> itself is not changed in the calling program.\n    return:\n      type: System.DateTime\n      description: Returns a `Date` value containing a date and time value to which a specified time interval has been added.\n  overload: Microsoft.VisualBasic.DateAndTime.DateAdd*\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: <code>DateValue</code> is not coercible to `Date`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Interval</code> is not valid.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: Calculated date is before 00:00:00 on January 1 of the year 1, or later than 23:59:59 on December 31, 9999.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/DateAndTime.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.DateAndTime.DateDiff(Microsoft.VisualBasic.DateInterval,System.DateTime,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)\n  commentId: M:Microsoft.VisualBasic.DateAndTime.DateDiff(Microsoft.VisualBasic.DateInterval,System.DateTime,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)\n  id: DateDiff(Microsoft.VisualBasic.DateInterval,System.DateTime,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)\n  parent: Microsoft.VisualBasic.DateAndTime\n  langs:\n  - csharp\n  name: DateDiff(DateInterval, DateTime, DateTime, FirstDayOfWeek, FirstWeekOfYear)\n  nameWithType: DateAndTime.DateDiff(DateInterval, DateTime, DateTime, FirstDayOfWeek, FirstWeekOfYear)\n  fullName: DateAndTime.DateDiff(DateInterval, DateTime, DateTime, FirstDayOfWeek, FirstWeekOfYear)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a `Long` value specifying the number of time intervals between two `Date` values.\n  remarks: \"You can use the `DateDiff` function to determine how many specified time intervals exist between two date/time values. For example, you might use `DateDiff` to calculate the number of days between two dates, or the number of weeks between today and the end of the year.  \\n  \\n## Behavior  \\n  \\n-   **Treatment of Parameters.** `DateDiff` subtracts the value of `Date1` from the value of `Date2` to produce the difference. Neither value is changed in the calling program.  \\n  \\n-   **Return Values.** Because `Date1` and `Date2` are of the `Date` data type, they hold date and time values accurate to 100-nanosecond ticks on the system timer. However, `DateDiff` always returns the number of time intervals as a `Long` value.  \\n  \\n     If `Date1` represents a later date and time than `Date2`, `DateDiff` returns a negative number.  \\n  \\n-   **Day Intervals.** If `Interval` is set to `DateInterval.DayOfYear`, it is treated the same as `DateInterval.Day`, because `DayOfYear` is not a meaningful unit for a time interval.  \\n  \\n-   **Week Intervals.** If `Interval` is set to `DateInterval.WeekOfYear`, the return value represents the number of weeks between the first day of the week containing `Date1` and the first day of the week containing `Date2`. The following example shows how this produces different results from `DateInterval.Weekday`.  \\n  \\n     [!code-vb[VbVbalrFunctions#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#60)]  \\n  \\n     In the preceding example, `DateDiff` returns 0 to `wD` because the difference between the two dates is less than seven days, but it returns 1 to `wY` because there is a seven-day difference between the first days of the respective calendar weeks.  \\n  \\n-   **Larger Intervals.** If `Interval` is set to `DateInterval.Year`, the return value is calculated purely from the year parts of `Date1` and `Date2`. Similarly, the return value for `DateInterval.Month` is calculated purely from the year and month parts of the arguments, and for `DateInterval.Quarter` from the quarters containing the two dates.  \\n  \\n     For example, when comparing December 31 to January 1 of the following year, `DateDiff` returns 1 for `DateInterval.Year`, `DateInterval.Quarter`, or `DateInterval.Month`, even though at most only one day has elapsed.  \\n  \\n     For cultures such as Japanese that have multiple eras, the `DateDiff` method does not return a difference in years if the difference spans two or more eras. Instead, you can calculate the difference in values returned by the <xref:System.DateTime.Year%2A> property, as shown in the following example: `date2.Year - date1.Year`.  \\n  \\n-   **Other Intervals.** Since every `Date` value is supported by a <xref:System.DateTime> structure, its methods give you additional options in finding time intervals. For example, you can use the `Subtract` method in either of its overloaded forms: <xref:System.DateTime.Subtract%2A?displayProperty=fullName> subtracts a <xref:System.TimeSpan> from a `Date` variable to return another `Date` value, and <xref:System.DateTime.Subtract%2A?displayProperty=fullName> subtracts a `Date` value to return a <xref:System.TimeSpan>. You can time a process to find out how many milliseconds it takes, as the following example shows.  \\n  \\n     [!code-vb[VbVbalrFunctions#61](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#61)]  \\n  \\n The `Interval` argument can have one of the following settings.  \\n  \\n|Enumeration value|String value|Unit of time difference|  \\n|-----------------------|------------------|-----------------------------|  \\n|`DateInterval.Day`|\\\"d\\\"|Day|  \\n|`DateInterval.DayOfYear`|\\\"y\\\"|Day|  \\n|`DateInterval.Hour`|\\\"h\\\"|Hour|  \\n|`DateInterval.Minute`|\\\"n\\\"|Minute|  \\n|`DateInterval.Month`|\\\"m\\\"|Month|  \\n|`DateInterval.Quarter`|\\\"q\\\"|Quarter|  \\n|`DateInterval.Second`|\\\"s\\\"|Second|  \\n|`DateInterval.Weekday`|\\\"w\\\"|Week|  \\n|`DateInterval.WeekOfYear`|\\\"ww\\\"|Calendar week|  \\n|`DateInterval.Year`|\\\"yyyy\\\"|Year|  \\n  \\n The `DayOfWeek` argument can have one of the following settings.  \\n  \\n|Enumeration value|Value|Description|  \\n|-----------------------|-----------|-----------------|  \\n|`FirstDayOfWeek.System`|0|First day of week specified in system settings|  \\n|`FirstDayOfWeek.Sunday`|1|Sunday (default)|  \\n|`FirstDayOfWeek.Monday`|2|Monday (complies with ISO standard 8601, section 3.17)|  \\n|`FirstDayOfWeek.Tuesday`|3|Tuesday|  \\n|`FirstDayOfWeek.Wednesday`|4|Wednesday|  \\n|`FirstDayOfWeek.Thursday`|5|Thursday|  \\n|`FirstDayOfWeek.Friday`|6|Friday|  \\n|`FirstDayOfWeek.Saturday`|7|Saturday|  \\n  \\n The `WeekOfYear` argument can have one of the following settings.  \\n  \\n|Enumeration value|Value|Description|  \\n|-----------------------|-----------|-----------------|  \\n|`FirstWeekOfYear.System`|0|First week of year specified in system settings|  \\n|`FirstWeekOfYear.Jan1`|1|Week in which January 1 occurs (default)|  \\n|`FirstWeekOfYear.FirstFourDays`|2|Week that has at least four days in the new year (complies with ISO standard 8601, section 3.17)|  \\n|`FirstWeekOfYear.FirstFullWeek`|3|First full week in the new year|\"\n  example:\n  - \"This example uses the `DateDiff` function to display the number of days between a given date and today.  \\n  \\n [!code-vb[VbVbalrFunctions#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#26)]\"\n  syntax:\n    content: public static long DateDiff (Microsoft.VisualBasic.DateInterval Interval, DateTime Date1, DateTime Date2, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);\n    parameters:\n    - id: Interval\n      type: Microsoft.VisualBasic.DateInterval\n      description: Required. `DateInterval` enumeration value or `String` expression representing the time interval you want to use as the unit of difference between <code>Date1</code> and <code>Date2</code>.\n    - id: Date1\n      type: System.DateTime\n      description: Required. `Date`. The first date/time value you want to use in the calculation.\n    - id: Date2\n      type: System.DateTime\n      description: Required. `Date`. The second date/time value you want to use in the calculation.\n    - id: DayOfWeek\n      type: Microsoft.VisualBasic.FirstDayOfWeek\n      description: Optional. A value chosen from the `FirstDayOfWeek` enumeration that specifies the first day of the week. If not specified, `FirstDayOfWeek.Sunday` is used.\n    - id: WeekOfYear\n      type: Microsoft.VisualBasic.FirstWeekOfYear\n      description: Optional. A value chosen from the `FirstWeekOfYear` enumeration that specifies the first week of the year. If not specified, `FirstWeekOfYear.Jan1` is used.\n    return:\n      type: System.Int64\n      description: Returns a `Long` value specifying the number of time intervals between two `Date` values.\n  overload: Microsoft.VisualBasic.DateAndTime.DateDiff*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Date1</code>, <code>Date2</code>, or <code>DayofWeek</code> is out of range.\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: <code>Date1</code> or <code>Date2</code> is of an invalid type.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/DateAndTime.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.DateAndTime.DateDiff(System.String,System.Object,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)\n  commentId: M:Microsoft.VisualBasic.DateAndTime.DateDiff(System.String,System.Object,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)\n  id: DateDiff(System.String,System.Object,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)\n  parent: Microsoft.VisualBasic.DateAndTime\n  langs:\n  - csharp\n  name: DateDiff(String, Object, Object, FirstDayOfWeek, FirstWeekOfYear)\n  nameWithType: DateAndTime.DateDiff(String, Object, Object, FirstDayOfWeek, FirstWeekOfYear)\n  fullName: DateAndTime.DateDiff(String, Object, Object, FirstDayOfWeek, FirstWeekOfYear)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a `Long` value specifying the number of time intervals between two `Date` values.\n  remarks: \"You can use the `DateDiff` function to determine how many specified time intervals exist between two date/time values. For example, you might use `DateDiff` to calculate the number of days between two dates, or the number of weeks between today and the end of the year.  \\n  \\n## Behavior  \\n  \\n-   **Treatment of Parameters.** `DateDiff` subtracts the value of `Date1` from the value of `Date2` to produce the difference. Neither value is changed in the calling program.  \\n  \\n-   **Return Values.** Because `Date1` and `Date2` are of the `Date` data type, they hold date and time values accurate to 100-nanosecond ticks on the system timer. However, `DateDiff` always returns the number of time intervals as a `Long` value.  \\n  \\n     If `Date1` represents a later date and time than `Date2`, `DateDiff` returns a negative number.  \\n  \\n-   **Day Intervals.** If `Interval` is set to `DateInterval.DayOfYear`, it is treated the same as `DateInterval.Day`, because `DayOfYear` is not a meaningful unit for a time interval.  \\n  \\n-   **Week Intervals.** If `Interval` is set to `DateInterval.WeekOfYear`, the return value represents the number of weeks between the first day of the week containing `Date1` and the first day of the week containing `Date2`. The following example shows how this produces different results from `DateInterval.Weekday`.  \\n  \\n     [!code-vb[VbVbalrFunctions#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#60)]  \\n  \\n     In the preceding example, `DateDiff` returns 0 to `wD` because the difference between the two dates is less than seven days, but it returns 1 to `wY` because there is a seven-day difference between the first days of the respective calendar weeks.  \\n  \\n-   **Larger Intervals.** If `Interval` is set to `DateInterval.Year`, the return value is calculated purely from the year parts of `Date1` and `Date2`. Similarly, the return value for `DateInterval.Month` is calculated purely from the year and month parts of the arguments, and for `DateInterval.Quarter` from the quarters containing the two dates.  \\n  \\n     For example, when comparing December 31 to January 1 of the following year, `DateDiff` returns 1 for `DateInterval.Year`, `DateInterval.Quarter`, or `DateInterval.Month`, even though at most only one day has elapsed.  \\n  \\n     For cultures such as Japanese that have multiple eras, the `DateDiff` method does not return a difference in years if the difference spans two or more eras. Instead, you can calculate the difference in values returned by the <xref:System.DateTime.Year%2A> property, as shown in the following example: `date2.Year - date1.Year`.  \\n  \\n-   **Other Intervals.** Since every `Date` value is supported by a <xref:System.DateTime> structure, its methods give you additional options in finding time intervals. For example, you can use the `Subtract` method in either of its overloaded forms: <xref:System.DateTime.Subtract%2A?displayProperty=fullName> subtracts a <xref:System.TimeSpan> from a `Date` variable to return another `Date` value, and <xref:System.DateTime.Subtract%2A?displayProperty=fullName> subtracts a `Date` value to return a <xref:System.TimeSpan>. You can time a process to find out how many milliseconds it takes, as the following example shows.  \\n  \\n     [!code-vb[VbVbalrFunctions#61](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#61)]  \\n  \\n The `Interval` argument can have one of the following settings.  \\n  \\n|Enumeration value|String value|Unit of time difference|  \\n|-----------------------|------------------|-----------------------------|  \\n|`DateInterval.Day`|\\\"d\\\"|Day|  \\n|`DateInterval.DayOfYear`|\\\"y\\\"|Day|  \\n|`DateInterval.Hour`|\\\"h\\\"|Hour|  \\n|`DateInterval.Minute`|\\\"n\\\"|Minute|  \\n|`DateInterval.Month`|\\\"m\\\"|Month|  \\n|`DateInterval.Quarter`|\\\"q\\\"|Quarter|  \\n|`DateInterval.Second`|\\\"s\\\"|Second|  \\n|`DateInterval.Weekday`|\\\"w\\\"|Week|  \\n|`DateInterval.WeekOfYear`|\\\"ww\\\"|Calendar week|  \\n|`DateInterval.Year`|\\\"yyyy\\\"|Year|  \\n  \\n The `DayOfWeek` argument can have one of the following settings.  \\n  \\n|Enumeration value|Value|Description|  \\n|-----------------------|-----------|-----------------|  \\n|`FirstDayOfWeek.System`|0|First day of week specified in system settings|  \\n|`FirstDayOfWeek.Sunday`|1|Sunday (default)|  \\n|`FirstDayOfWeek.Monday`|2|Monday (complies with ISO standard 8601, section 3.17)|  \\n|`FirstDayOfWeek.Tuesday`|3|Tuesday|  \\n|`FirstDayOfWeek.Wednesday`|4|Wednesday|  \\n|`FirstDayOfWeek.Thursday`|5|Thursday|  \\n|`FirstDayOfWeek.Friday`|6|Friday|  \\n|`FirstDayOfWeek.Saturday`|7|Saturday|  \\n  \\n The `WeekOfYear` argument can have one of the following settings.  \\n  \\n|Enumeration value|Value|Description|  \\n|-----------------------|-----------|-----------------|  \\n|`FirstWeekOfYear.System`|0|First week of year specified in system settings|  \\n|`FirstWeekOfYear.Jan1`|1|Week in which January 1 occurs (default)|  \\n|`FirstWeekOfYear.FirstFourDays`|2|Week that has at least four days in the new year (complies with ISO standard 8601, section 3.17)|  \\n|`FirstWeekOfYear.FirstFullWeek`|3|First full week in the new year|\"\n  example:\n  - \"This example uses the `DateDiff` function to display the number of days between a given date and today.  \\n  \\n [!code-vb[VbVbalrFunctions#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#26)]\"\n  syntax:\n    content: public static long DateDiff (string Interval, object Date1, object Date2, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);\n    parameters:\n    - id: Interval\n      type: System.String\n      description: Required. `DateInterval` enumeration value or `String` expression representing the time interval you want to use as the unit of difference between <code>Date1</code> and <code>Date2</code>.\n    - id: Date1\n      type: System.Object\n      description: Required. `Date`. The first date/time value you want to use in the calculation.\n    - id: Date2\n      type: System.Object\n      description: Required. `Date`. The second date/time value you want to use in the calculation.\n    - id: DayOfWeek\n      type: Microsoft.VisualBasic.FirstDayOfWeek\n      description: Optional. A value chosen from the `FirstDayOfWeek` enumeration that specifies the first day of the week. If not specified, `FirstDayOfWeek.Sunday` is used.\n    - id: WeekOfYear\n      type: Microsoft.VisualBasic.FirstWeekOfYear\n      description: Optional. A value chosen from the `FirstWeekOfYear` enumeration that specifies the first week of the year. If not specified, `FirstWeekOfYear.Jan1` is used.\n    return:\n      type: System.Int64\n      description: Returns a `Long` value specifying the number of time intervals between two `Date` values.\n  overload: Microsoft.VisualBasic.DateAndTime.DateDiff*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Date1</code>, <code>Date2</code>, or <code>DayofWeek</code> is out of range.\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: <code>Date1</code> or <code>Date2</code> is of an invalid type.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/DateAndTime.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)\n  commentId: M:Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)\n  id: DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)\n  parent: Microsoft.VisualBasic.DateAndTime\n  langs:\n  - csharp\n  name: DatePart(DateInterval, DateTime, FirstDayOfWeek, FirstWeekOfYear)\n  nameWithType: DateAndTime.DatePart(DateInterval, DateTime, FirstDayOfWeek, FirstWeekOfYear)\n  fullName: DateAndTime.DatePart(DateInterval, DateTime, FirstDayOfWeek, FirstWeekOfYear)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns an `Integer` value containing the specified component of a given `Date` value.\n  remarks: \"You can use the `DatePart` function to evaluate a date/time value and return a specific component. For example, you might use `DatePart` to calculate the day of the week or the current hour.  \\n  \\n If you choose `DateInterval.Weekday` for the `Interval` argument, the returned value is consistent with the values of the `FirstDayOfWeek` enumeration. If you choose `DateInterval.WeekOfYear`, `DatePart` uses the <xref:System.Globalization.Calendar> and <xref:System.Globalization.CultureInfo> classes of the <xref:System.Globalization> namespace to determine your current settings.  \\n  \\n The `FirstDayOfWeekValue` argument affects calculations that use the `DateInterval.Weekday` and `DateInterval.WeekOfYear` `Interval` settings. The `FirstWeekOfYearValue` argument affects calculations that specify `DateInterval.WeekOfYear` for `Interval`.  \\n  \\n Since every `Date` value is supported by a <xref:System.DateTime> structure, its methods give you additional options in retrieving date/time parts. For example, you can obtain the entire date value of a `Date` variable, with the time value set to midnight, as follows:  \\n  \\n```vb  \\nDim CurrDatTim As Date = Now   ' Current date and time.  \\nDim LastMidnight As Date = CurrDatTim.Date   ' At midnight.  \\n```  \\n  \\n The `Interval` argument can have one of the following settings.  \\n  \\n|Enumeration value|String|Part of date/time value to return|  \\n|-----------------------|------------|----------------------------------------|  \\n|`DateInterval.Day`|d|Day of month (1 through 31)|  \\n|`DateInterval.DayOfYear`|y|Day of year (1 through 366)|  \\n|`DateInterval.Hour`|h|Hour|  \\n|`DateInterval.Minute`|n|Minute|  \\n|`DateInterval.Month`|m|Month|  \\n|`DateInterval.Quarter`|q|Quarter|  \\n|`DateInterval.Second`|s|Second|  \\n|`DateInterval.Weekday`|w|Day of week (1 through 7)|  \\n|`DateInterval.WeekOfYear`|ww|Week of year (1 through 53)|  \\n|`DateInterval.Year`|yyyy|Year|  \\n  \\n The `FirstDayOfWeekValue` argument can have one of the following settings.  \\n  \\n|Enumeration value|Value|Description|  \\n|-----------------------|-----------|-----------------|  \\n|`FirstDayOfWeek.System`|0|First day of week specified in system settings|  \\n|`FirstDayOfWeek.Sunday`|1|Sunday (default)|  \\n|`FirstDayOfWeek.Monday`|2|Monday (complies with ISO standard 8601, section 3.17)|  \\n|`FirstDayOfWeek.Tuesday`|3|Tuesday|  \\n|`FirstDayOfWeek.Wednesday`|4|Wednesday|  \\n|`FirstDayOfWeek.Thursday`|5|Thursday|  \\n|`FirstDayOfWeek.Friday`|6|Friday|  \\n|`FirstDayOfWeek.Saturday`|7|Saturday|  \\n  \\n The `FirstWeekOfYearValue` argument can have one of the following settings.  \\n  \\n|Enumeration value|Value|Description|  \\n|-----------------------|-----------|-----------------|  \\n|`FirstWeekOfYear.System`|0|First week of year specified in system settings|  \\n|`FirstWeekOfYear.Jan1`|1|Week in which January 1 occurs (default)|  \\n|`FirstWeekOfYear.FirstFourDays`|2|Week that has at least four days in the new year (complies with ISO standard 8601, section 3.17)|  \\n|`FirstWeekOfYear.FirstFullWeek`|3|First full week in new year|\"\n  example:\n  - \"This example takes a date and, using the `DatePart` function, displays the quarter of the year in which it occurs.  \\n  \\n [!code-vb[VbVbalrFunctions#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#27)]\"\n  syntax:\n    content: public static int DatePart (Microsoft.VisualBasic.DateInterval Interval, DateTime DateValue, Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear FirstWeekOfYearValue = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);\n    parameters:\n    - id: Interval\n      type: Microsoft.VisualBasic.DateInterval\n      description: Required. `DateInterval` enumeration value or `String` expression representing the part of the date/time value you want to return.\n    - id: DateValue\n      type: System.DateTime\n      description: Required. `Date` value that you want to evaluate.\n    - id: FirstDayOfWeekValue\n      type: Microsoft.VisualBasic.FirstDayOfWeek\n      description: Optional. A value chosen from the `FirstDayOfWeek` enumeration that specifies the first day of the week. If not specified, `FirstDayOfWeek.Sunday` is used.\n    - id: FirstWeekOfYearValue\n      type: Microsoft.VisualBasic.FirstWeekOfYear\n      description: Optional. A value chosen from the `FirstWeekOfYear` enumeration that specifies the first week of the year. If not specified, `FirstWeekOfYear.Jan1` is used.\n    return:\n      type: System.Int32\n      description: Returns an `Integer` value containing the specified component of a given `Date` value.\n  overload: Microsoft.VisualBasic.DateAndTime.DatePart*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Interval</code> is not valid.\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: <code>DateValue</code> is not coercible to `Date`.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/DateAndTime.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.DateAndTime.DatePart(System.String,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)\n  commentId: M:Microsoft.VisualBasic.DateAndTime.DatePart(System.String,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)\n  id: DatePart(System.String,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)\n  parent: Microsoft.VisualBasic.DateAndTime\n  langs:\n  - csharp\n  name: DatePart(String, Object, FirstDayOfWeek, FirstWeekOfYear)\n  nameWithType: DateAndTime.DatePart(String, Object, FirstDayOfWeek, FirstWeekOfYear)\n  fullName: DateAndTime.DatePart(String, Object, FirstDayOfWeek, FirstWeekOfYear)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns an `Integer` value containing the specified component of a given `Date` value.\n  remarks: \"You can use the `DatePart` function to evaluate a date/time value and return a specific component. For example, you might use `DatePart` to calculate the day of the week or the current hour.  \\n  \\n If you choose `DateInterval.Weekday` for the `Interval` argument, the returned value is consistent with the values of the `FirstDayOfWeek` enumeration. If you choose `DateInterval.WeekOfYear`, `DatePart` uses the <xref:System.Globalization.Calendar> and <xref:System.Globalization.CultureInfo> classes of the <xref:System.Globalization> namespace to determine your current settings.  \\n  \\n The `FirstDayOfWeekValue` argument affects calculations that use the `DateInterval.Weekday` and `DateInterval.WeekOfYear` `Interval` settings. The `FirstWeekOfYearValue` argument affects calculations that specify `DateInterval.WeekOfYear` for `Interval`.  \\n  \\n Since every `Date` value is supported by a <xref:System.DateTime> structure, its methods give you additional options in retrieving date/time parts. For example, you can obtain the entire date value of a `Date` variable, with the time value set to midnight, as follows:  \\n  \\n```vb  \\nDim CurrDatTim As Date = Now   ' Current date and time.  \\nDim LastMidnight As Date = CurrDatTim.Date   ' At midnight.  \\n```  \\n  \\n The `Interval` argument can have one of the following settings.  \\n  \\n|Enumeration value|String|Part of date/time value to return|  \\n|-----------------------|------------|----------------------------------------|  \\n|`DateInterval.Day`|d|Day of month (1 through 31)|  \\n|`DateInterval.DayOfYear`|y|Day of year (1 through 366)|  \\n|`DateInterval.Hour`|h|Hour|  \\n|`DateInterval.Minute`|n|Minute|  \\n|`DateInterval.Month`|m|Month|  \\n|`DateInterval.Quarter`|q|Quarter|  \\n|`DateInterval.Second`|s|Second|  \\n|`DateInterval.Weekday`|w|Day of week (1 through 7)|  \\n|`DateInterval.WeekOfYear`|ww|Week of year (1 through 53)|  \\n|`DateInterval.Year`|yyyy|Year|  \\n  \\n The `FirstDayOfWeekValue` argument can have one of the following settings.  \\n  \\n|Enumeration value|Value|Description|  \\n|-----------------------|-----------|-----------------|  \\n|`FirstDayOfWeek.System`|0|First day of week specified in system settings|  \\n|`FirstDayOfWeek.Sunday`|1|Sunday (default)|  \\n|`FirstDayOfWeek.Monday`|2|Monday (complies with ISO standard 8601, section 3.17)|  \\n|`FirstDayOfWeek.Tuesday`|3|Tuesday|  \\n|`FirstDayOfWeek.Wednesday`|4|Wednesday|  \\n|`FirstDayOfWeek.Thursday`|5|Thursday|  \\n|`FirstDayOfWeek.Friday`|6|Friday|  \\n|`FirstDayOfWeek.Saturday`|7|Saturday|  \\n  \\n The `FirstWeekOfYearValue` argument can have one of the following settings.  \\n  \\n|Enumeration value|Value|Description|  \\n|-----------------------|-----------|-----------------|  \\n|`FirstWeekOfYear.System`|0|First week of year specified in system settings|  \\n|`FirstWeekOfYear.Jan1`|1|Week in which January 1 occurs (default)|  \\n|`FirstWeekOfYear.FirstFourDays`|2|Week that has at least four days in the new year (complies with ISO standard 8601, section 3.17)|  \\n|`FirstWeekOfYear.FirstFullWeek`|3|First full week in new year|\"\n  example:\n  - \"This example takes a date and, using the `DatePart` function, displays the quarter of the year in which it occurs.  \\n  \\n [!code-vb[VbVbalrFunctions#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#27)]\"\n  syntax:\n    content: public static int DatePart (string Interval, object DateValue, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);\n    parameters:\n    - id: Interval\n      type: System.String\n      description: Required. `DateInterval` enumeration value or `String` expression representing the part of the date/time value you want to return.\n    - id: DateValue\n      type: System.Object\n      description: Required. `Date` value that you want to evaluate.\n    - id: DayOfWeek\n      type: Microsoft.VisualBasic.FirstDayOfWeek\n      description: Optional. A value chosen from the `FirstDayOfWeek` enumeration that specifies the first day of the week. If not specified, `FirstDayOfWeek.Sunday` is used.\n    - id: WeekOfYear\n      type: Microsoft.VisualBasic.FirstWeekOfYear\n      description: Optional. A value chosen from the `FirstWeekOfYear` enumeration that specifies the first week of the year. If not specified, `FirstWeekOfYear.Jan1` is used.\n    return:\n      type: System.Int32\n      description: Returns an `Integer` value containing the specified component of a given `Date` value.\n  overload: Microsoft.VisualBasic.DateAndTime.DatePart*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Interval</code> is invalid.\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: <code>DateValue</code> is not coercible to `Date`.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/DateAndTime.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)\n  commentId: M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)\n  id: DateSerial(System.Int32,System.Int32,System.Int32)\n  parent: Microsoft.VisualBasic.DateAndTime\n  langs:\n  - csharp\n  name: DateSerial(Int32, Int32, Int32)\n  nameWithType: DateAndTime.DateSerial(Int32, Int32, Int32)\n  fullName: DateAndTime.DateSerial(Int32, Int32, Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a `Date` value representing a specified year, month, and day, with the time information set to midnight (00:00:00).\n  remarks: \"Under Windows 98 or Windows 2000, two-digit years for the `Year` argument are interpreted based on user-defined computer settings. The default settings are that values from 0 through 29 are interpreted as the years 2000–2029, and values from 30 through 99 are interpreted as the years 1930–1999. For all other `Year` arguments, use a four-digit year; for example, 1924.  \\n  \\n Earlier versions of Windows interpret two-digit years based on the defaults described previously. To be sure the function returns the proper value, use a four-digit `Year`.  \\n  \\n The following example demonstrates negative, zero, and positive argument values. Here, the `DateSerial` function returns a `Date` representing the day before the first day of March in the year 10 years before the current year; in other words, the last day of February ten years ago.  \\n  \\n```vb  \\nDim EndFeb As Date = DateSerial(-10, 3, 0)  \\n```  \\n  \\n If either `Month` or `Day` exceeds its normal range, it is applied to the next larger unit as appropriate. For example, if you specify 32 days, it is evaluated as one month and from one to four days, depending on the value of `Month`. If `Year` is greater than 9999, or if any argument is outside the range -2,147,483,648 through 2,147,483,647, an <xref:System.ArgumentException> error occurs. If the date specified by the three arguments is earlier than 00:00:00 on January 1 of the year 1, or later than 23:59:59 on December 31, 9999, an <xref:System.ArgumentOutOfRangeException> error occurs.  \\n  \\n The `Date` data type includes time components. `DateSerial` sets all of these to 0, so the returned value represents the beginning of the calculated day.  \\n  \\n Since every `Date` value is supported by a <xref:System.DateTime> structure, its methods give you additional options in assembling a `Date` value. For example, you can use one of the overloaded <xref:System.DateTime.%23ctor%2A> constructors to populate a `Date` variable using the desired combination of components. The following example sets `NewDateTime` to May 6, 1978 at one tenth of a second before 8:30 in the morning:  \\n  \\n```vb  \\nDim NewDateTime As Date = New Date(1978, 5, 6, 8, 29, 59, 900)  \\n```\"\n  example:\n  - \"This example uses the `DateSerial` function to return the date for the specified year, month, and day.  \\n  \\n [!code-vb[VbVbalrFunctions#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#28)]\"\n  syntax:\n    content: public static DateTime DateSerial (int Year, int Month, int Day);\n    parameters:\n    - id: Year\n      type: System.Int32\n      description: Required. `Integer` expression from 1 through 9999. However, values below this range are also accepted. If <code>Year</code> is 0 through 99, it is interpreted as being between 1930 and 2029, as explained in the \"Remarks\" section below. If <code>Year</code> is less than 1, it is subtracted from the current year.\n    - id: Month\n      type: System.Int32\n      description: \"Required. `Integer` expression from 1 through 12. However, values outside this range are also accepted. The value of <code>Month</code> is offset by 1 and applied to January of the calculated year. In other words, (<code>Month</code> - 1) is added to January. The year is recalculated if necessary. The following results illustrate this effect:  \\n  \\n If <code>Month</code> is 1, the result is January of the calculated year.  \\n  \\n If <code>Month</code> is 0, the result is December of the previous year.  \\n  \\n If <code>Month</code> is -1, the result is November of the previous year.  \\n  \\n If <code>Month</code> is 13, the result is January of the following year.\"\n    - id: Day\n      type: System.Int32\n      description: \"Required. `Integer` expression from 1 through 31. However, values outside this range are also accepted. The value of <code>Day</code> is offset by 1 and applied to the first day of the calculated month. In other words, (<code>Day</code> - 1) is added to the first of the month. The month and year are recalculated if necessary. The following results illustrate this effect:  \\n  \\n If <code>Day</code> is 1, the result is the first day of the calculated month.  \\n  \\n If <code>Day</code> is 0, the result is the last day of the previous month.  \\n  \\n If <code>Day</code> is -1, the result is the penultimate day of the previous month.  \\n  \\n If <code>Day</code> is past the end of the current month, the result is the appropriate day of the following month. For example, if <code>Month</code> is 4 and <code>Day</code> is 31, the result is May 1.\"\n    return:\n      type: System.DateTime\n      description: Returns a `Date` value representing a specified year, month, and day, with the time information set to midnight (00:00:00).\n  overload: Microsoft.VisualBasic.DateAndTime.DateSerial*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/DateAndTime.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.DateAndTime.DateString\n  commentId: P:Microsoft.VisualBasic.DateAndTime.DateString\n  id: DateString\n  parent: Microsoft.VisualBasic.DateAndTime\n  langs:\n  - csharp\n  name: DateString\n  nameWithType: DateAndTime.DateString\n  fullName: DateAndTime.DateString\n  type: Property\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns or sets a `String` value representing the current date according to your system.\n  remarks: \"`DateString` returns the system date in the MM-dd-yyyy format, which uses the abbreviated month name. The accepted formats for the date are M-d-yyyy, M-d-y, M/d/yyyy, and M/d/y. This is true for all system locales except those that use a double-byte character set (DBCS). If the system locale uses a double-byte character set, `DateString` returns the system date in the yyyy-MM-dd format. The system locale is set by using the **Clock, Language, and Region** item in **Control Panel**.  \\n  \\n **Note** The `DateString` property returns the system date only in the yyyy-MM-dd format for the `zh` (Chinese simplified), `ko` (Korean), and `ja` (Japanese) system locales if you are running Visual Basic within Silverlight.  \\n  \\n To get or set the current system time as a `String`, use the <xref:Microsoft.VisualBasic.DateAndTime.TimeString%2A> property.  \\n  \\n To get the current system date or time in the format of your locale, or in a custom format, supply the <xref:Microsoft.VisualBasic.DateAndTime.Now%2A> property to the <xref:Microsoft.VisualBasic.Strings.Format%2A> function, specifying either a predefined or user-defined date/time format. The following example demonstrates this.  \\n  \\n```  \\nMsgBox(\\\"The formatted date is \\\" & Format(Now, \\\"dddd, d MMM yyyy\\\"))  \\n```  \\n  \\n To access the current system date as a `Date`, use the <xref:Microsoft.VisualBasic.DateAndTime.Today%2A> property.  \\n  \\n> [!IMPORTANT]\\n>  Setting the system date or time requires unmanaged code permission, which might affect its execution in partial-trust situations. For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675).\"\n  example:\n  - \"The following example uses the `DateString` property to display the current system date.  \\n  \\n [!code-vb[VbVbalrDateProperties#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#1)]\"\n  syntax:\n    content: public static string DateString { get; set; }\n    return:\n      type: System.String\n      description: Returns or sets a `String` value representing the current date according to your system.\n  overload: Microsoft.VisualBasic.DateAndTime.DateString*\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: Invalid format used to set the value of `DateString`.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/DateAndTime.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.DateAndTime.DateValue(System.String)\n  commentId: M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)\n  id: DateValue(System.String)\n  parent: Microsoft.VisualBasic.DateAndTime\n  langs:\n  - csharp\n  name: DateValue(String)\n  nameWithType: DateAndTime.DateValue(String)\n  fullName: DateAndTime.DateValue(String)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a `Date` value containing the date information represented by a string, with the time information set to midnight (00:00:00).\n  remarks: \"If `StringDate` includes only numbers from 1 through 12 separated by valid date separators, `DateValue` recognizes the order for month, day, and year according to the Short Date format specified for your system. `DateValue` uses the current calendar setting from the <xref:System.Globalization.CultureInfo.CurrentCulture%2A> property of the <xref:System.Globalization.CultureInfo> class in the <xref:System.Globalization> namespace. The default <xref:System.Globalization.CultureInfo.CurrentCulture%2A> values are determined by **Control Panel** settings. You can override the Short Date format by setting the <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A> property of the <xref:System.Globalization.DateTimeFormatInfo> class in the <xref:System.Globalization> namespace.  \\n  \\n `DateValue` recognizes month names in long, abbreviated, and numeric form. For example, in addition to recognizing 12/30/1991 and 12/30/91, `DateValue` also recognizes December 30, 1991 and Dec 30, 1991.  \\n  \\n If the year part of `StringDate` is omitted, `DateValue` uses the current year from your computer's system date.  \\n  \\n If the `StringDate` argument includes time information, `DateValue` does not include it in the returned value. However, if `StringDate` includes invalid time information, such as \\\"89:98\\\", an <xref:System.InvalidCastException> error occurs.\"\n  example:\n  - \"This example uses the `DateValue` function to convert a string to a date. You can also use date literals to directly assign a date to an `Object` or `Date` variable, for example, `oldDate = #2/12/69#`.  \\n  \\n [!code-vb[VbVbalrFunctions#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#29)]\"\n  syntax:\n    content: public static DateTime DateValue (string StringDate);\n    parameters:\n    - id: StringDate\n      type: System.String\n      description: Required. `String` expression representing a date/time value from 00:00:00 on January 1 of the year 1 through 23:59:59 on December 31, 9999.\n    return:\n      type: System.DateTime\n      description: '`Date` value containing the date information represented by a string, with the time information set to midnight (00:00:00).'\n  overload: Microsoft.VisualBasic.DateAndTime.DateValue*\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: <code>StringDate</code> includes invalid time information.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/DateAndTime.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)\n  commentId: M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)\n  id: Day(System.DateTime)\n  parent: Microsoft.VisualBasic.DateAndTime\n  langs:\n  - csharp\n  name: Day(DateTime)\n  nameWithType: DateAndTime.Day(DateTime)\n  fullName: DateAndTime.Day(DateTime)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns an `Integer` value from 1 through 31 representing the day of the month.\n  remarks: \"If you use the `Day` function, you might have to qualify it with the `Microsoft.VisualBasic` namespace, because the <xref:System.Windows.Forms> namespace defines <xref:System.Windows.Forms.Day> as an enumeration. The following example shows how qualifying `Day` resolves this ambiguity:  \\n  \\n```vb  \\nDim thisDay As Integer = Microsoft.VisualBasic.DateAndTime.Day(Now)  \\n```  \\n  \\n You can also obtain the day of the month by calling `DatePart` and specifying `DateInterval.Day` for the *Interval* argument.\"\n  example:\n  - \"The following example uses the `Day` function to obtain the day of the month from a specified date. In the development environment, the date literal is displayed in standard short format (such as \\\"02/12/1969\\\") using the locale settings of your code.  \\n  \\n [!code-vb[VbVbalrFunctions#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#30)]  \\n  \\n `Day` is qualified to distinguish it from the <xref:System.Windows.Forms.Day?displayProperty=fullName> enumeration.\"\n  syntax:\n    content: public static int Day (DateTime DateValue);\n    parameters:\n    - id: DateValue\n      type: System.DateTime\n      description: Required. `Date` value from which you want to extract the day.\n    return:\n      type: System.Int32\n      description: Returns an `Integer` value from 1 through 31 representing the day of the month.\n  overload: Microsoft.VisualBasic.DateAndTime.Day*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/DateAndTime.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)\n  commentId: M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)\n  id: Hour(System.DateTime)\n  parent: Microsoft.VisualBasic.DateAndTime\n  langs:\n  - csharp\n  name: Hour(DateTime)\n  nameWithType: DateAndTime.Hour(DateTime)\n  fullName: DateAndTime.Hour(DateTime)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns an `Integer` value from 0 through 23 representing the hour of the day.\n  remarks: You can also obtain the hour of the day by calling `DatePart` and specifying `DateInterval.Hour` for the `Interval` argument.\n  example:\n  - \"This example uses the `Hour` function to obtain the hour from a specified time. In the development environment, the time literal is displayed in short time format using the locale settings of your code.  \\n  \\n [!code-vb[VbVbalrFunctions#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#32)]\"\n  syntax:\n    content: public static int Hour (DateTime TimeValue);\n    parameters:\n    - id: TimeValue\n      type: System.DateTime\n      description: Required. `Date` value from which you want to extract the hour.\n    return:\n      type: System.Int32\n      description: Returns an `Integer` value from 0 through 23 representing the hour of the day.\n  overload: Microsoft.VisualBasic.DateAndTime.Hour*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/DateAndTime.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)\n  commentId: M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)\n  id: Minute(System.DateTime)\n  parent: Microsoft.VisualBasic.DateAndTime\n  langs:\n  - csharp\n  name: Minute(DateTime)\n  nameWithType: DateAndTime.Minute(DateTime)\n  fullName: DateAndTime.Minute(DateTime)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns an `Integer` value from 0 through 59 representing the minute of the hour.\n  remarks: You can also obtain the minute of the hour by calling `DatePart` and specifying `DateInterval.Minute` for the `Interval` argument.\n  example:\n  - \"This example uses the `Minute` function to obtain the minute of the hour from a specified time. In the development environment, the time literal is displayed in short time format using the locale settings of your code.  \\n  \\n [!code-vb[VbVbalrFunctions#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#42)]\"\n  syntax:\n    content: public static int Minute (DateTime TimeValue);\n    parameters:\n    - id: TimeValue\n      type: System.DateTime\n      description: Required. `Date` value from which you want to extract the minute.\n    return:\n      type: System.Int32\n      description: Returns an `Integer` value from 0 through 59 representing the minute of the hour.\n  overload: Microsoft.VisualBasic.DateAndTime.Minute*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/DateAndTime.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)\n  commentId: M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)\n  id: Month(System.DateTime)\n  parent: Microsoft.VisualBasic.DateAndTime\n  langs:\n  - csharp\n  name: Month(DateTime)\n  nameWithType: DateAndTime.Month(DateTime)\n  fullName: DateAndTime.Month(DateTime)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns an `Integer` value from 1 through 12 representing the month of the year.\n  remarks: You can also obtain the month of the year by calling `DatePart` and specifying `DateInterval.Month` for the `Interval` argument.\n  example:\n  - \"This example uses the `Month` function to obtain the month from a specified date. In the development environment, the date literal is displayed in short date format using the locale settings of your code.  \\n  \\n [!code-vb[VbVbalrFunctions#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#43)]\"\n  syntax:\n    content: public static int Month (DateTime DateValue);\n    parameters:\n    - id: DateValue\n      type: System.DateTime\n      description: Required. `Date` value from which you want to extract the month.\n    return:\n      type: System.Int32\n      description: Returns an `Integer` value from 1 through 12 representing the month of the year.\n  overload: Microsoft.VisualBasic.DateAndTime.Month*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/DateAndTime.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.DateAndTime.MonthName(System.Int32,System.Boolean)\n  commentId: M:Microsoft.VisualBasic.DateAndTime.MonthName(System.Int32,System.Boolean)\n  id: MonthName(System.Int32,System.Boolean)\n  parent: Microsoft.VisualBasic.DateAndTime\n  langs:\n  - csharp\n  name: MonthName(Int32, Boolean)\n  nameWithType: DateAndTime.MonthName(Int32, Boolean)\n  fullName: DateAndTime.MonthName(Int32, Boolean)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a `String` value containing the name of the specified month.\n  remarks: \"The string returned by `MonthName` depends not only on the input arguments, but also on the **Regional Options** settings specified in the Windows **Control Panel**.  \\n  \\n> [!NOTE]\\n>  `MonthName` uses the current calendar setting from the <xref:System.Globalization.CultureInfo.CurrentCulture%2A> property of the <xref:System.Globalization.CultureInfo> class in the <xref:System.Globalization> namespace. The default <xref:System.Globalization.CultureInfo.CurrentCulture%2A> values are determined by **Control Panel** settings.\"\n  example:\n  - \"This example uses the `MonthName` function to determine the name of the month, by the integer given. The Boolean value will determine whether the full name (`False`) or the abbreviated name (`True`) will be displayed.  \\n  \\n [!code-vb[VbVbalrFunctions#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#44)]\"\n  syntax:\n    content: public static string MonthName (int Month, bool Abbreviate = false);\n    parameters:\n    - id: Month\n      type: System.Int32\n      description: Required. `Integer`. The numeric designation of the month, from 1 through 13; 1 indicates January and 12 indicates December. You can use the value 13 with a 13-month calendar. If your system is using a 12-month calendar and <code>Month</code> is 13, `MonthName` returns an empty string.\n    - id: Abbreviate\n      type: System.Boolean\n      description: Optional. `Boolean` value that indicates if the month name is to be abbreviated. If omitted, the default is `False`, which means the month name is not abbreviated.\n    return:\n      type: System.String\n      description: Returns a `String` value containing the name of the specified month.\n  overload: Microsoft.VisualBasic.DateAndTime.MonthName*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Month</code> is less than 1 or greater than 13.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/DateAndTime.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.DateAndTime.Now\n  commentId: P:Microsoft.VisualBasic.DateAndTime.Now\n  id: Now\n  parent: Microsoft.VisualBasic.DateAndTime\n  langs:\n  - csharp\n  name: Now\n  nameWithType: DateAndTime.Now\n  fullName: DateAndTime.Now\n  type: Property\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a `Date` value containing the current date and time according to your system.\n  remarks: To set the system date, use the <xref:Microsoft.VisualBasic.DateAndTime.Today%2A> property. To set the system time, use the <xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A> property.\n  example:\n  - \"The following example uses the `Now` property to return the current system date and time.  \\n  \\n [!code-vb[VbVbalrDateProperties#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#4)]\"\n  syntax:\n    content: public static DateTime Now { get; }\n    return:\n      type: System.DateTime\n      description: Returns a `Date` value containing the current date and time according to your system.\n  overload: Microsoft.VisualBasic.DateAndTime.Now*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/DateAndTime.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)\n  commentId: M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)\n  id: Second(System.DateTime)\n  parent: Microsoft.VisualBasic.DateAndTime\n  langs:\n  - csharp\n  name: Second(DateTime)\n  nameWithType: DateAndTime.Second(DateTime)\n  fullName: DateAndTime.Second(DateTime)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns an `Integer` value from 0 through 59 representing the second of the minute.\n  remarks: You can also obtain the second of the minute by calling `DatePart` and specifying `DateInterval.Second` for the `Interval` argument.\n  example:\n  - \"The following example uses the `Second` function to obtain the second of the minute from a specified time. In the development environment, the time literal is displayed in short time format using the locale settings of your code.  \\n  \\n [!code-vb[VbVbalrFunctions#46](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#46)]\"\n  syntax:\n    content: public static int Second (DateTime TimeValue);\n    parameters:\n    - id: TimeValue\n      type: System.DateTime\n      description: Required. `Date` value from which you want to extract the second.\n    return:\n      type: System.Int32\n      description: Returns an `Integer` value from 0 through 59 representing the second of the minute.\n  overload: Microsoft.VisualBasic.DateAndTime.Second*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/DateAndTime.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.DateAndTime.TimeOfDay\n  commentId: P:Microsoft.VisualBasic.DateAndTime.TimeOfDay\n  id: TimeOfDay\n  parent: Microsoft.VisualBasic.DateAndTime\n  langs:\n  - csharp\n  name: TimeOfDay\n  nameWithType: DateAndTime.TimeOfDay\n  fullName: DateAndTime.TimeOfDay\n  type: Property\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns or sets a `Date` value containing the current time of day according to your system.\n  remarks: \"The `Date` data type includes date components. When returning the system time, `TimeOfDay` sets these all to 1, so the returned value represents the first day of the year 1. When setting the system time, `TimeOfDay` ignores the date components.  \\n  \\n To access the current system time as a `String`, use the <xref:Microsoft.VisualBasic.DateAndTime.TimeString%2A> property.  \\n  \\n To get or set the current system date, use the <xref:Microsoft.VisualBasic.DateAndTime.Today%2A> property.  \\n  \\n> [!IMPORTANT]\\n>  Setting the system date or time requires unmanaged code permission, which might affect its execution in partial-trust situations. For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675).\"\n  example:\n  - \"This example uses the `TimeOfDay` property to return the current system time.  \\n  \\n [!code-vb[VbVbalrDateProperties#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#3)]\"\n  syntax:\n    content: public static DateTime TimeOfDay { get; set; }\n    return:\n      type: System.DateTime\n      description: Returns or sets a `Date` value containing the current time of day according to your system.\n  overload: Microsoft.VisualBasic.DateAndTime.TimeOfDay*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/DateAndTime.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.DateAndTime.Timer\n  commentId: P:Microsoft.VisualBasic.DateAndTime.Timer\n  id: Timer\n  parent: Microsoft.VisualBasic.DateAndTime\n  langs:\n  - csharp\n  name: Timer\n  nameWithType: DateAndTime.Timer\n  fullName: DateAndTime.Timer\n  type: Property\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a `Double` value representing the number of seconds elapsed since midnight.\n  remarks: The `Timer` property returns both the seconds and the milliseconds since the most recent midnight. The seconds are in the integral part of the return value, and the milliseconds are in the fractional part.\n  example:\n  - \"This example uses the `Timer` property to pause the application. It can perform other processing during the pause.  \\n  \\n [!code-vb[VbVbalrTimerProperty#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTimerProperty/VB/Form1.vb#1)]  \\n  \\n Note that you must qualify the `Timer` property with the <xref:Microsoft.VisualBasic?displayProperty=fullName> namespace, because `Timer` is also a defined class in the <xref:System.Threading?displayProperty=fullName>, <xref:System.Timers?displayProperty=fullName>, and <xref:System.Windows.Forms?displayProperty=fullName> namespaces.\"\n  syntax:\n    content: public static double Timer { get; }\n    return:\n      type: System.Double\n      description: Returns a `Double` value representing the number of seconds elapsed since midnight.\n  overload: Microsoft.VisualBasic.DateAndTime.Timer*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/DateAndTime.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)\n  commentId: M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)\n  id: TimeSerial(System.Int32,System.Int32,System.Int32)\n  parent: Microsoft.VisualBasic.DateAndTime\n  langs:\n  - csharp\n  name: TimeSerial(Int32, Int32, Int32)\n  nameWithType: DateAndTime.TimeSerial(Int32, Int32, Int32)\n  fullName: DateAndTime.TimeSerial(Int32, Int32, Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a `Date` value representing a specified hour, minute, and second, with the date information set relative to January 1 of the year 1.\n  remarks: \"The following example demonstrates negative, zero, and positive argument values. The `TimeSerial` function returns a time representing 15 minutes before three hours before noon, or 8:45:00 AM.  \\n  \\n```vb  \\nDim alarmTime As Date = TimeSerial(12 - 3, -15, 0)  \\n```  \\n  \\n If either `Minute` or `Second` exceeds its normal range, it is applied to the next larger unit as appropriate. For example, if you specify 75 minutes, it is evaluated as one hour and 15 minutes.  \\n  \\n `TimeSerial` reduces the total seconds modulo 86,400, which is the number of seconds in a day. Therefore, the returned time is always between 00:00:00 and 23:59:59.  \\n  \\n The `Date` data type includes date components. `TimeSerial` sets all of these to 1, so the returned value represents the first day of the year 1. However, if the values of the arguments cause the calculated time to exceed 24 hours, the day is incremented as necessary. In the following example, the values of `Hour` and `Minute` result in a combined time of more than 24 hours.  \\n  \\n```vb  \\nMsgBox(TimeSerial(23, 75, 0))   \\n' The preceding statement displays \\\"1/2/0001 12:15:00 AM\\\".  \\n```  \\n  \\n If the values of the arguments result in a negative calculated time, the date information is set to 1/1/0001 and the time information is adjusted to be between 00:00:00 and 23:59:59. However, if the calculated time is less than negative 24 hours, an <xref:System.ArgumentOutOfRangeException> error occurs.  \\n  \\n Since every `Date` value is supported by a <xref:System.DateTime?displayProperty=fullName> structure, its methods give you additional options in assembling a `Date` value. For example, you can employ one of the overloaded <xref:System.DateTime.%23ctor%2A> constructors to populate a `Date` variable using the desired combination of components. The following example sets `newDateTime` to May 6, 1978 at one tenth of a second before 8:30 in the morning:  \\n  \\n```vb  \\nDim newDateTime As Date = New Date(1978, 5, 6, 8, 29, 59, 900)  \\n```\"\n  example:\n  - \"The following example uses the `TimeSerial` function to return a time for the specified hour, minute, and second.  \\n  \\n [!code-vb[VbVbalrFunctions#50](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#50)]\"\n  syntax:\n    content: public static DateTime TimeSerial (int Hour, int Minute, int Second);\n    parameters:\n    - id: Hour\n      type: System.Int32\n      description: Required. `Integer` expression from 0 through 23. However, values outside this range are also accepted.\n    - id: Minute\n      type: System.Int32\n      description: Required. `Integer` expression from 0 through 59. However, values outside this range are also accepted. The value of <code>Minute</code> is added to the calculated hour, so a negative value specifies minutes before that hour.\n    - id: Second\n      type: System.Int32\n      description: Required. `Integer` expression from 0 through 59. However, values outside this range are also accepted. The value of <code>Second</code> is added to the calculated minute, so a negative value specifies seconds before that minute.\n    return:\n      type: System.DateTime\n      description: Returns a `Date` value representing a specified hour, minute, and second, with the date information set relative to January 1 of the year 1.\n  overload: Microsoft.VisualBasic.DateAndTime.TimeSerial*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: An argument is outside the range -2,147,483,648 through 2,147,483,647\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: Calculated time is less than negative 24 hours.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/DateAndTime.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.DateAndTime.TimeString\n  commentId: P:Microsoft.VisualBasic.DateAndTime.TimeString\n  id: TimeString\n  parent: Microsoft.VisualBasic.DateAndTime\n  langs:\n  - csharp\n  name: TimeString\n  nameWithType: DateAndTime.TimeString\n  fullName: DateAndTime.TimeString\n  type: Property\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns or sets a `String` value representing the current time of day according to your system.\n  remarks: \"`TimeString` always returns the system time as \\\"HH:mm:ss\\\", which is a 24-hour format. This format is culture-invariant, which means it does not change even if you change the **Regional Options** in **Control Panel**.  \\n  \\n To get or set the current system date as a `String`, use the <xref:Microsoft.VisualBasic.DateAndTime.DateString%2A> property.  \\n  \\n To get the current system date or time in the format of your locale, or in a custom format, supply the <xref:Microsoft.VisualBasic.DateAndTime.Now%2A> property to the <xref:Microsoft.VisualBasic.Strings.Format%2A> function, specifying either a predefined or user-defined date/time format. The following example demonstrates this.  \\n  \\n```  \\nMsgBox(\\\"The formatted time is \\\" & Format(Now, \\\"hh.mm.ss.fff tt\\\"))  \\n```  \\n  \\n To access the current system time as a `Date`, use the <xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A> property.  \\n  \\n> [!IMPORTANT]\\n>  Setting the system date or time requires unmanaged code permission, which might affect its execution in partial trust situations. For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675).\"\n  example:\n  - \"This example uses the `TimeString` property to display the current system time.  \\n  \\n [!code-vb[VbVbalrDateProperties#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#2)]\"\n  syntax:\n    content: public static string TimeString { get; set; }\n    return:\n      type: System.String\n      description: Returns or sets a `String` value representing the current time of day according to your system.\n  overload: Microsoft.VisualBasic.DateAndTime.TimeString*\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: Invalid format used to set the value of `TimeString`.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/DateAndTime.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)\n  commentId: M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)\n  id: TimeValue(System.String)\n  parent: Microsoft.VisualBasic.DateAndTime\n  langs:\n  - csharp\n  name: TimeValue(String)\n  nameWithType: DateAndTime.TimeValue(String)\n  fullName: DateAndTime.TimeValue(String)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a `Date` value containing the time information represented by a string, with the date information set to January 1 of the year 1.\n  remarks: \"You can enter valid times using a 12-hour or 24-hour clock. For example, `\\\"2:24 P.M.\\\"` and `\\\"14:24\\\"` are both valid `StringTime` arguments.  \\n  \\n If the `StringTime` argument includes date information, `TimeValue` does not include it in the returned value. However, if `StringTime` includes invalid date information, for example \\\"January 32,\\\" an <xref:System.InvalidCastException> error occurs.\"\n  example:\n  - \"The following example uses the `TimeValue` function to convert a string to a time. You can also use date literals to directly assign a time to a `Date` variable.  \\n  \\n [!code-vb[VbVbalrFunctions#51](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#51)]\"\n  syntax:\n    content: public static DateTime TimeValue (string StringTime);\n    parameters:\n    - id: StringTime\n      type: System.String\n      description: Required. `String` expression representing a date/time value from 00:00:00 on January 1 of the year 1 through 23:59:59 on December 31, 9999.\n    return:\n      type: System.DateTime\n      description: Returns a `Date` value containing the time information represented by a string, with the date information set to January 1 of the year 1.\n  overload: Microsoft.VisualBasic.DateAndTime.TimeValue*\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: <code>StringTime</code> includes invalid date information.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/DateAndTime.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.DateAndTime.Today\n  commentId: P:Microsoft.VisualBasic.DateAndTime.Today\n  id: Today\n  parent: Microsoft.VisualBasic.DateAndTime\n  langs:\n  - csharp\n  name: Today\n  nameWithType: DateAndTime.Today\n  fullName: DateAndTime.Today\n  type: Property\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns or sets a `Date` value containing the current date according to your system.\n  remarks: \"The `Date` data type includes time components. When returning the system date, `Today` sets all of these to 0, so the returned value represents midnight (00:00:00). When setting the system date, `Today` ignores the time components.  \\n  \\n To access the current system date as a `String`, use the <xref:Microsoft.VisualBasic.DateAndTime.DateString%2A> property.  \\n  \\n To get or set the current system time, use the <xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A> property.  \\n  \\n> [!IMPORTANT]\\n>  Setting the system date or time requires unmanaged code permission, which might affect its execution in partial-trust situations. For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675).\"\n  example:\n  - \"This example uses the `Today` property to return the current system date.  \\n  \\n [!code-vb[VbVbalrDateProperties#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#5)]\"\n  syntax:\n    content: public static DateTime Today { get; set; }\n    return:\n      type: System.DateTime\n      description: Returns or sets a `Date` value containing the current date according to your system.\n  overload: Microsoft.VisualBasic.DateAndTime.Today*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/DateAndTime.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)\n  commentId: M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)\n  id: Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)\n  parent: Microsoft.VisualBasic.DateAndTime\n  langs:\n  - csharp\n  name: Weekday(DateTime, FirstDayOfWeek)\n  nameWithType: DateAndTime.Weekday(DateTime, FirstDayOfWeek)\n  fullName: DateAndTime.Weekday(DateTime, FirstDayOfWeek)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns an `Integer` value containing a number representing the day of the week.\n  remarks: \"The value returned by the `Weekday` function corresponds to the values of the `FirstDayOfWeek` enumeration; that is, 1 indicates Sunday and 7 indicates Saturday.  \\n  \\n> [!NOTE]\\n>  `Weekday` uses the current calendar setting from the <xref:System.Globalization.CultureInfo.CurrentCulture%2A> property of the <xref:System.Globalization.CultureInfo> class in the <xref:System.Globalization> namespace. The default <xref:System.Globalization.CultureInfo.CurrentCulture%2A> values are determined by **Control Panel** settings.  \\n  \\n The `DayOfWeek` argument can have one of the following settings.  \\n  \\n|Enumeration value|Value|Description|  \\n|-----------------------|-----------|-----------------|  \\n|`FirstDayOfWeek.System`|0|First day of week specified in system settings|  \\n|`FirstDayOfWeek.Sunday`|1|Sunday (default)|  \\n|`FirstDayOfWeek.Monday`|2|Monday (complies with ISO standard 8601, section 3.17)|  \\n|`FirstDayOfWeek.Tuesday`|3|Tuesday|  \\n|`FirstDayOfWeek.Wednesday`|4|Wednesday|  \\n|`FirstDayOfWeek.Thursday`|5|Thursday|  \\n|`FirstDayOfWeek.Friday`|6|Friday|  \\n|`FirstDayOfWeek.Saturday`|7|Saturday|\"\n  example:\n  - \"The following example uses the `Weekday` function to obtain the day of the week from a specified date.  \\n  \\n [!code-vb[VbVbalrFunctions#57](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#57)]\"\n  syntax:\n    content: public static int Weekday (DateTime DateValue, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday);\n    parameters:\n    - id: DateValue\n      type: System.DateTime\n      description: Required. `Date` value for which you want to determine the day of the week.\n    - id: DayOfWeek\n      type: Microsoft.VisualBasic.FirstDayOfWeek\n      description: Optional. A value chosen from the `FirstDayOfWeek` enumeration that specifies the first day of the week. If not specified, `FirstDayOfWeek.Sunday` is used.\n    return:\n      type: System.Int32\n      description: Returns an `Integer` value containing a number representing the day of the week.\n  overload: Microsoft.VisualBasic.DateAndTime.Weekday*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>DayOfWeek</code> is less than 0 or more than 7.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/DateAndTime.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)\n  commentId: M:Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)\n  id: WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)\n  parent: Microsoft.VisualBasic.DateAndTime\n  langs:\n  - csharp\n  name: WeekdayName(Int32, Boolean, FirstDayOfWeek)\n  nameWithType: DateAndTime.WeekdayName(Int32, Boolean, FirstDayOfWeek)\n  fullName: DateAndTime.WeekdayName(Int32, Boolean, FirstDayOfWeek)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a `String` value containing the name of the specified weekday.\n  remarks: \"The string returned by `WeekdayName` depends not only on the input arguments, but also on the **Regional Options** settings specified in the Windows **Control Panel**.  \\n  \\n> [!NOTE]\\n>  `WeekdayName` uses the current calendar setting from the <xref:System.Globalization.CultureInfo.CurrentCulture%2A> property of the <xref:System.Globalization.CultureInfo> class in the <xref:System.Globalization> namespace. The default <xref:System.Globalization.CultureInfo.CurrentCulture%2A> values are determined by **Control Panel** settings.  \\n  \\n The `FirstDayOfWeekValue` argument can have one of the following settings.  \\n  \\n|Enumeration value|Value|Description|  \\n|-----------------------|-----------|-----------------|  \\n|`FirstDayOfWeek.System`|0|First day of week specified in system settings (default)|  \\n|`FirstDayOfWeek.Sunday`|1|Sunday|  \\n|`FirstDayOfWeek.Monday`|2|Monday (complies with ISO standard 8601, section 3.17)|  \\n|`FirstDayOfWeek.Tuesday`|3|Tuesday|  \\n|`FirstDayOfWeek.Wednesday`|4|Wednesday|  \\n|`FirstDayOfWeek.Thursday`|5|Thursday|  \\n|`FirstDayOfWeek.Friday`|6|Friday|  \\n|`FirstDayOfWeek.Saturday`|7|Saturday|\"\n  example:\n  - \"The following example uses the `Weekday` function to obtain the day of the week from a specified date, and then the `WeekDayName` function to obtain the name of the weekday from its number.  \\n  \\n [!code-vb[VbVbalrFunctions#58](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#58)]\"\n  syntax:\n    content: public static string WeekdayName (int Weekday, bool Abbreviate = false, Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue = Microsoft.VisualBasic.FirstDayOfWeek.System);\n    parameters:\n    - id: Weekday\n      type: System.Int32\n      description: Required. `Integer`. The numeric designation for the weekday, from 1 through 7; 1 indicates the first day of the week and 7 indicates the last day of the week. The identities of the first and last days depend on the setting of <code>FirstDayOfWeekValue</code>.\n    - id: Abbreviate\n      type: System.Boolean\n      description: Optional. `Boolean` value that indicates if the weekday name is to be abbreviated. If omitted, the default is `False`, which means the weekday name is not abbreviated.\n    - id: FirstDayOfWeekValue\n      type: Microsoft.VisualBasic.FirstDayOfWeek\n      description: Optional. A value chosen from the `FirstDayOfWeek` enumeration that specifies the first day of the week. If not specified, `FirstDayOfWeek.System` is used.\n    return:\n      type: System.String\n      description: Returns a `String` value containing the name of the specified weekday.\n  overload: Microsoft.VisualBasic.DateAndTime.WeekdayName*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Weekday</code> is less than 1 or greater than 7, or <code>FirstDayOfWeekValue</code> is less than 0 or greater than 7.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/DateAndTime.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)\n  commentId: M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)\n  id: Year(System.DateTime)\n  parent: Microsoft.VisualBasic.DateAndTime\n  langs:\n  - csharp\n  name: Year(DateTime)\n  nameWithType: DateAndTime.Year(DateTime)\n  fullName: DateAndTime.Year(DateTime)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns an `Integer` value from 1 through 9999 representing the year.\n  remarks: You can also obtain the year by calling `DatePart` and specifying `DateInterval.Year` for the `Interval` argument.\n  example:\n  - \"The following example uses the `Year` function to obtain the year from a specified date. In the development environment, the date literal is displayed in short date format using the locale settings of your code.  \\n  \\n [!code-vb[VbVbalrFunctions#59](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#59)]\"\n  syntax:\n    content: public static int Year (DateTime DateValue);\n    parameters:\n    - id: DateValue\n      type: System.DateTime\n      description: Required. `Date` value from which you want to extract the year.\n    return:\n      type: System.Int32\n      description: Returns an `Integer` value from 1 through 9999 representing the year.\n  overload: Microsoft.VisualBasic.DateAndTime.Year*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/DateAndTime.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.InvalidCastException\n  parent: System\n  isExternal: false\n  name: InvalidCastException\n  nameWithType: InvalidCastException\n  fullName: System.InvalidCastException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: Microsoft.VisualBasic.DateAndTime.DateAdd(Microsoft.VisualBasic.DateInterval,System.Double,System.DateTime)\n  parent: Microsoft.VisualBasic.DateAndTime\n  isExternal: false\n  name: DateAdd(DateInterval, Double, DateTime)\n  nameWithType: DateAndTime.DateAdd(DateInterval, Double, DateTime)\n  fullName: DateAndTime.DateAdd(DateInterval, Double, DateTime)\n- uid: System.DateTime\n  parent: System\n  isExternal: false\n  name: DateTime\n  nameWithType: DateTime\n  fullName: System.DateTime\n- uid: Microsoft.VisualBasic.DateInterval\n  parent: Microsoft.VisualBasic\n  isExternal: false\n  name: DateInterval\n  nameWithType: DateInterval\n  fullName: Microsoft.VisualBasic.DateInterval\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: Microsoft.VisualBasic.DateAndTime.DateAdd(System.String,System.Double,System.Object)\n  parent: Microsoft.VisualBasic.DateAndTime\n  isExternal: false\n  name: DateAdd(String, Double, Object)\n  nameWithType: DateAndTime.DateAdd(String, Double, Object)\n  fullName: DateAndTime.DateAdd(String, Double, Object)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: Microsoft.VisualBasic.DateAndTime.DateDiff(Microsoft.VisualBasic.DateInterval,System.DateTime,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)\n  parent: Microsoft.VisualBasic.DateAndTime\n  isExternal: false\n  name: DateDiff(DateInterval, DateTime, DateTime, FirstDayOfWeek, FirstWeekOfYear)\n  nameWithType: DateAndTime.DateDiff(DateInterval, DateTime, DateTime, FirstDayOfWeek, FirstWeekOfYear)\n  fullName: DateAndTime.DateDiff(DateInterval, DateTime, DateTime, FirstDayOfWeek, FirstWeekOfYear)\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: Microsoft.VisualBasic.FirstDayOfWeek\n  parent: Microsoft.VisualBasic\n  isExternal: false\n  name: FirstDayOfWeek\n  nameWithType: FirstDayOfWeek\n  fullName: Microsoft.VisualBasic.FirstDayOfWeek\n- uid: Microsoft.VisualBasic.FirstWeekOfYear\n  parent: Microsoft.VisualBasic\n  isExternal: false\n  name: FirstWeekOfYear\n  nameWithType: FirstWeekOfYear\n  fullName: Microsoft.VisualBasic.FirstWeekOfYear\n- uid: Microsoft.VisualBasic.DateAndTime.DateDiff(System.String,System.Object,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)\n  parent: Microsoft.VisualBasic.DateAndTime\n  isExternal: false\n  name: DateDiff(String, Object, Object, FirstDayOfWeek, FirstWeekOfYear)\n  nameWithType: DateAndTime.DateDiff(String, Object, Object, FirstDayOfWeek, FirstWeekOfYear)\n  fullName: DateAndTime.DateDiff(String, Object, Object, FirstDayOfWeek, FirstWeekOfYear)\n- uid: Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)\n  parent: Microsoft.VisualBasic.DateAndTime\n  isExternal: false\n  name: DatePart(DateInterval, DateTime, FirstDayOfWeek, FirstWeekOfYear)\n  nameWithType: DateAndTime.DatePart(DateInterval, DateTime, FirstDayOfWeek, FirstWeekOfYear)\n  fullName: DateAndTime.DatePart(DateInterval, DateTime, FirstDayOfWeek, FirstWeekOfYear)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: Microsoft.VisualBasic.DateAndTime.DatePart(System.String,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)\n  parent: Microsoft.VisualBasic.DateAndTime\n  isExternal: false\n  name: DatePart(String, Object, FirstDayOfWeek, FirstWeekOfYear)\n  nameWithType: DateAndTime.DatePart(String, Object, FirstDayOfWeek, FirstWeekOfYear)\n  fullName: DateAndTime.DatePart(String, Object, FirstDayOfWeek, FirstWeekOfYear)\n- uid: Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)\n  parent: Microsoft.VisualBasic.DateAndTime\n  isExternal: false\n  name: DateSerial(Int32, Int32, Int32)\n  nameWithType: DateAndTime.DateSerial(Int32, Int32, Int32)\n  fullName: DateAndTime.DateSerial(Int32, Int32, Int32)\n- uid: Microsoft.VisualBasic.DateAndTime.DateString\n  parent: Microsoft.VisualBasic.DateAndTime\n  isExternal: false\n  name: DateString\n  nameWithType: DateAndTime.DateString\n  fullName: DateAndTime.DateString\n- uid: Microsoft.VisualBasic.DateAndTime.DateValue(System.String)\n  parent: Microsoft.VisualBasic.DateAndTime\n  isExternal: false\n  name: DateValue(String)\n  nameWithType: DateAndTime.DateValue(String)\n  fullName: DateAndTime.DateValue(String)\n- uid: Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)\n  parent: Microsoft.VisualBasic.DateAndTime\n  isExternal: false\n  name: Day(DateTime)\n  nameWithType: DateAndTime.Day(DateTime)\n  fullName: DateAndTime.Day(DateTime)\n- uid: Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)\n  parent: Microsoft.VisualBasic.DateAndTime\n  isExternal: false\n  name: Hour(DateTime)\n  nameWithType: DateAndTime.Hour(DateTime)\n  fullName: DateAndTime.Hour(DateTime)\n- uid: Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)\n  parent: Microsoft.VisualBasic.DateAndTime\n  isExternal: false\n  name: Minute(DateTime)\n  nameWithType: DateAndTime.Minute(DateTime)\n  fullName: DateAndTime.Minute(DateTime)\n- uid: Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)\n  parent: Microsoft.VisualBasic.DateAndTime\n  isExternal: false\n  name: Month(DateTime)\n  nameWithType: DateAndTime.Month(DateTime)\n  fullName: DateAndTime.Month(DateTime)\n- uid: Microsoft.VisualBasic.DateAndTime.MonthName(System.Int32,System.Boolean)\n  parent: Microsoft.VisualBasic.DateAndTime\n  isExternal: false\n  name: MonthName(Int32, Boolean)\n  nameWithType: DateAndTime.MonthName(Int32, Boolean)\n  fullName: DateAndTime.MonthName(Int32, Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: Microsoft.VisualBasic.DateAndTime.Now\n  parent: Microsoft.VisualBasic.DateAndTime\n  isExternal: false\n  name: Now\n  nameWithType: DateAndTime.Now\n  fullName: DateAndTime.Now\n- uid: Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)\n  parent: Microsoft.VisualBasic.DateAndTime\n  isExternal: false\n  name: Second(DateTime)\n  nameWithType: DateAndTime.Second(DateTime)\n  fullName: DateAndTime.Second(DateTime)\n- uid: Microsoft.VisualBasic.DateAndTime.TimeOfDay\n  parent: Microsoft.VisualBasic.DateAndTime\n  isExternal: false\n  name: TimeOfDay\n  nameWithType: DateAndTime.TimeOfDay\n  fullName: DateAndTime.TimeOfDay\n- uid: Microsoft.VisualBasic.DateAndTime.Timer\n  parent: Microsoft.VisualBasic.DateAndTime\n  isExternal: false\n  name: Timer\n  nameWithType: DateAndTime.Timer\n  fullName: DateAndTime.Timer\n- uid: Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)\n  parent: Microsoft.VisualBasic.DateAndTime\n  isExternal: false\n  name: TimeSerial(Int32, Int32, Int32)\n  nameWithType: DateAndTime.TimeSerial(Int32, Int32, Int32)\n  fullName: DateAndTime.TimeSerial(Int32, Int32, Int32)\n- uid: Microsoft.VisualBasic.DateAndTime.TimeString\n  parent: Microsoft.VisualBasic.DateAndTime\n  isExternal: false\n  name: TimeString\n  nameWithType: DateAndTime.TimeString\n  fullName: DateAndTime.TimeString\n- uid: Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)\n  parent: Microsoft.VisualBasic.DateAndTime\n  isExternal: false\n  name: TimeValue(String)\n  nameWithType: DateAndTime.TimeValue(String)\n  fullName: DateAndTime.TimeValue(String)\n- uid: Microsoft.VisualBasic.DateAndTime.Today\n  parent: Microsoft.VisualBasic.DateAndTime\n  isExternal: false\n  name: Today\n  nameWithType: DateAndTime.Today\n  fullName: DateAndTime.Today\n- uid: Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)\n  parent: Microsoft.VisualBasic.DateAndTime\n  isExternal: false\n  name: Weekday(DateTime, FirstDayOfWeek)\n  nameWithType: DateAndTime.Weekday(DateTime, FirstDayOfWeek)\n  fullName: DateAndTime.Weekday(DateTime, FirstDayOfWeek)\n- uid: Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)\n  parent: Microsoft.VisualBasic.DateAndTime\n  isExternal: false\n  name: WeekdayName(Int32, Boolean, FirstDayOfWeek)\n  nameWithType: DateAndTime.WeekdayName(Int32, Boolean, FirstDayOfWeek)\n  fullName: DateAndTime.WeekdayName(Int32, Boolean, FirstDayOfWeek)\n- uid: Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)\n  parent: Microsoft.VisualBasic.DateAndTime\n  isExternal: false\n  name: Year(DateTime)\n  nameWithType: DateAndTime.Year(DateTime)\n  fullName: DateAndTime.Year(DateTime)\n- uid: Microsoft.VisualBasic.DateAndTime.DateAdd*\n  parent: Microsoft.VisualBasic.DateAndTime\n  isExternal: false\n  name: DateAdd\n  nameWithType: DateAndTime.DateAdd\n  fullName: DateAndTime.DateAdd\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/DateAndTime.xml\n- uid: Microsoft.VisualBasic.DateAndTime.DateDiff*\n  parent: Microsoft.VisualBasic.DateAndTime\n  isExternal: false\n  name: DateDiff\n  nameWithType: DateAndTime.DateDiff\n  fullName: DateAndTime.DateDiff\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/DateAndTime.xml\n- uid: Microsoft.VisualBasic.DateAndTime.DatePart*\n  parent: Microsoft.VisualBasic.DateAndTime\n  isExternal: false\n  name: DatePart\n  nameWithType: DateAndTime.DatePart\n  fullName: DateAndTime.DatePart\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/DateAndTime.xml\n- uid: Microsoft.VisualBasic.DateAndTime.DateSerial*\n  parent: Microsoft.VisualBasic.DateAndTime\n  isExternal: false\n  name: DateSerial\n  nameWithType: DateAndTime.DateSerial\n  fullName: DateAndTime.DateSerial\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/DateAndTime.xml\n- uid: Microsoft.VisualBasic.DateAndTime.DateString*\n  parent: Microsoft.VisualBasic.DateAndTime\n  isExternal: false\n  name: DateString\n  nameWithType: DateAndTime.DateString\n  fullName: DateAndTime.DateString\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/DateAndTime.xml\n- uid: Microsoft.VisualBasic.DateAndTime.DateValue*\n  parent: Microsoft.VisualBasic.DateAndTime\n  isExternal: false\n  name: DateValue\n  nameWithType: DateAndTime.DateValue\n  fullName: DateAndTime.DateValue\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/DateAndTime.xml\n- uid: Microsoft.VisualBasic.DateAndTime.Day*\n  parent: Microsoft.VisualBasic.DateAndTime\n  isExternal: false\n  name: Day\n  nameWithType: DateAndTime.Day\n  fullName: DateAndTime.Day\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/DateAndTime.xml\n- uid: Microsoft.VisualBasic.DateAndTime.Hour*\n  parent: Microsoft.VisualBasic.DateAndTime\n  isExternal: false\n  name: Hour\n  nameWithType: DateAndTime.Hour\n  fullName: DateAndTime.Hour\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/DateAndTime.xml\n- uid: Microsoft.VisualBasic.DateAndTime.Minute*\n  parent: Microsoft.VisualBasic.DateAndTime\n  isExternal: false\n  name: Minute\n  nameWithType: DateAndTime.Minute\n  fullName: DateAndTime.Minute\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/DateAndTime.xml\n- uid: Microsoft.VisualBasic.DateAndTime.Month*\n  parent: Microsoft.VisualBasic.DateAndTime\n  isExternal: false\n  name: Month\n  nameWithType: DateAndTime.Month\n  fullName: DateAndTime.Month\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/DateAndTime.xml\n- uid: Microsoft.VisualBasic.DateAndTime.MonthName*\n  parent: Microsoft.VisualBasic.DateAndTime\n  isExternal: false\n  name: MonthName\n  nameWithType: DateAndTime.MonthName\n  fullName: DateAndTime.MonthName\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/DateAndTime.xml\n- uid: Microsoft.VisualBasic.DateAndTime.Now*\n  parent: Microsoft.VisualBasic.DateAndTime\n  isExternal: false\n  name: Now\n  nameWithType: DateAndTime.Now\n  fullName: DateAndTime.Now\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/DateAndTime.xml\n- uid: Microsoft.VisualBasic.DateAndTime.Second*\n  parent: Microsoft.VisualBasic.DateAndTime\n  isExternal: false\n  name: Second\n  nameWithType: DateAndTime.Second\n  fullName: DateAndTime.Second\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/DateAndTime.xml\n- uid: Microsoft.VisualBasic.DateAndTime.TimeOfDay*\n  parent: Microsoft.VisualBasic.DateAndTime\n  isExternal: false\n  name: TimeOfDay\n  nameWithType: DateAndTime.TimeOfDay\n  fullName: DateAndTime.TimeOfDay\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/DateAndTime.xml\n- uid: Microsoft.VisualBasic.DateAndTime.Timer*\n  parent: Microsoft.VisualBasic.DateAndTime\n  isExternal: false\n  name: Timer\n  nameWithType: DateAndTime.Timer\n  fullName: DateAndTime.Timer\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/DateAndTime.xml\n- uid: Microsoft.VisualBasic.DateAndTime.TimeSerial*\n  parent: Microsoft.VisualBasic.DateAndTime\n  isExternal: false\n  name: TimeSerial\n  nameWithType: DateAndTime.TimeSerial\n  fullName: DateAndTime.TimeSerial\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/DateAndTime.xml\n- uid: Microsoft.VisualBasic.DateAndTime.TimeString*\n  parent: Microsoft.VisualBasic.DateAndTime\n  isExternal: false\n  name: TimeString\n  nameWithType: DateAndTime.TimeString\n  fullName: DateAndTime.TimeString\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/DateAndTime.xml\n- uid: Microsoft.VisualBasic.DateAndTime.TimeValue*\n  parent: Microsoft.VisualBasic.DateAndTime\n  isExternal: false\n  name: TimeValue\n  nameWithType: DateAndTime.TimeValue\n  fullName: DateAndTime.TimeValue\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/DateAndTime.xml\n- uid: Microsoft.VisualBasic.DateAndTime.Today*\n  parent: Microsoft.VisualBasic.DateAndTime\n  isExternal: false\n  name: Today\n  nameWithType: DateAndTime.Today\n  fullName: DateAndTime.Today\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/DateAndTime.xml\n- uid: Microsoft.VisualBasic.DateAndTime.Weekday*\n  parent: Microsoft.VisualBasic.DateAndTime\n  isExternal: false\n  name: Weekday\n  nameWithType: DateAndTime.Weekday\n  fullName: DateAndTime.Weekday\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/DateAndTime.xml\n- uid: Microsoft.VisualBasic.DateAndTime.WeekdayName*\n  parent: Microsoft.VisualBasic.DateAndTime\n  isExternal: false\n  name: WeekdayName\n  nameWithType: DateAndTime.WeekdayName\n  fullName: DateAndTime.WeekdayName\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/DateAndTime.xml\n- uid: Microsoft.VisualBasic.DateAndTime.Year*\n  parent: Microsoft.VisualBasic.DateAndTime\n  isExternal: false\n  name: Year\n  nameWithType: DateAndTime.Year\n  fullName: DateAndTime.Year\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/DateAndTime.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}