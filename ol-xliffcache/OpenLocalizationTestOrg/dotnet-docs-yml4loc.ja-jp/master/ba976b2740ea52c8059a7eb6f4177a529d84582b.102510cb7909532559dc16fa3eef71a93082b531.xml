{"nodes":[{"content":"Provides an implementation of a <xref href=\"System.ComponentModel.LicenseProvider\"></xref>. The provider works in a similar fashion to the Microsoft .NET Framework standard licensing model.","nodes":[{"pos":[0,189],"content":"Provides an implementation of a <xref href=\"System.ComponentModel.LicenseProvider\"></xref>. The provider works in a similar fashion to the Microsoft .NET Framework standard licensing model.","nodes":[{"content":"Provides an implementation of a <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.LicenseProvider\"&gt;&lt;/xref&gt;</ph>.","pos":[0,91],"source":"Provides an implementation of a <xref href=\"System.ComponentModel.LicenseProvider\"></xref>."},{"content":"The provider works in a similar fashion to the Microsoft .NET Framework standard licensing model.","pos":[92,189]}]}],"pos":[827,1017],"yaml":true},{"content":"The <xref:System.ComponentModel.LicFileLicenseProvider> offers <xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A> and <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> methods. The <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> method determines whether the <xref:System.ComponentModel.License.LicenseKey%2A> retrieved by the <xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A> method is valid. When you inherit from this class, you can override the <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> method to provide your own validation logic.  \n  \n This class exists to provide similar licensing functionality to COM licensing and uses text license files.  \n  \n For more information on licensing, see [How to: License Components and Controls](http://msdn.microsoft.com/library/8e66c1ed-a445-4b26-8185-990b6e2bbd57).","nodes":[{"pos":[0,624],"content":"The <xref:System.ComponentModel.LicFileLicenseProvider> offers <xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A> and <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> methods. The <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> method determines whether the <xref:System.ComponentModel.License.LicenseKey%2A> retrieved by the <xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A> method is valid. When you inherit from this class, you can override the <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> method to provide your own validation logic.","nodes":[{"content":"The <xref:System.ComponentModel.LicFileLicenseProvider> offers <xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A> and <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> methods. The <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> method determines whether the <xref:System.ComponentModel.License.LicenseKey%2A> retrieved by the <xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A> method is valid. When you inherit from this class, you can override the <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> method to provide your own validation logic.","pos":[0,624],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.ComponentModel.LicFileLicenseProvider&gt;</ph> offers <ph id=\"ph2\">&lt;xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A&gt;</ph> methods.","pos":[0,207],"source":"The <xref:System.ComponentModel.LicFileLicenseProvider> offers <xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A> and <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> methods."},{"content":"The <ph id=\"ph1\">&lt;xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A&gt;</ph> method determines whether the <ph id=\"ph2\">&lt;xref:System.ComponentModel.License.LicenseKey%2A&gt;</ph> retrieved by the <ph id=\"ph3\">&lt;xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A&gt;</ph> method is valid.","pos":[208,458],"source":" The <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> method determines whether the <xref:System.ComponentModel.License.LicenseKey%2A> retrieved by the <xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A> method is valid."},{"content":"When you inherit from this class, you can override the <ph id=\"ph1\">&lt;xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A&gt;</ph> method to provide your own validation logic.","pos":[459,624],"source":" When you inherit from this class, you can override the <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> method to provide your own validation logic."}]}]},{"pos":[631,737],"content":"This class exists to provide similar licensing functionality to COM licensing and uses text license files.","nodes":[{"content":"This class exists to provide similar licensing functionality to COM licensing and uses text license files.","pos":[0,106]}]},{"pos":[744,897],"content":"For more information on licensing, see <bpt id=\"p1\">[</bpt>How to: License Components and Controls<ept id=\"p1\">](http://msdn.microsoft.com/library/8e66c1ed-a445-4b26-8185-990b6e2bbd57)</ept>.","source":"For more information on licensing, see [How to: License Components and Controls](http://msdn.microsoft.com/library/8e66c1ed-a445-4b26-8185-990b6e2bbd57)."}],"pos":[1028,1932],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.ComponentModel.LicFileLicenseProvider\"></xref> class.","nodes":[{"pos":[0,106],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.LicFileLicenseProvider\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.ComponentModel.LicFileLicenseProvider\"></xref> class."}],"pos":[4339,4446],"yaml":true},{"content":"Returns a key for the specified type.","nodes":[{"pos":[0,37],"content":"Returns a key for the specified type.","nodes":[{"content":"Returns a key for the specified type.","pos":[0,37]}]}],"pos":[5859,5897],"yaml":true},{"content":"The object type to return the key.","nodes":[{"pos":[0,34],"content":"The object type to return the key.","nodes":[{"content":"The object type to return the key.","pos":[0,34]}]}],"pos":[6039,6074],"yaml":true},{"content":"A confirmation that the <code>type</code> parameter is licensed.","nodes":[{"pos":[0,64],"content":"A confirmation that the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">type</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is licensed.","source":"A confirmation that the <code>type</code> parameter is licensed."}],"pos":[6131,6196],"yaml":true},{"content":"Returns a license for the instance of the component, if one is available.","nodes":[{"pos":[0,73],"content":"Returns a license for the instance of the component, if one is available.","nodes":[{"content":"Returns a license for the instance of the component, if one is available.","pos":[0,73]}]}],"pos":[7855,7929],"yaml":true},{"content":"At design time, the <xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A> method looks for a license file named `myClassName.LIC`, where `myClassName` is the <xref:System.Type.FullName%2A> of the component to create. This file must be in the same directory as the .dll file that contains the component.  \n  \n Next, this method checks the first line of the license file against a key specified in the <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> method. If the key is valid, this line is used as the <xref:System.ComponentModel.License.LicenseKey%2A>.","nodes":[{"pos":[0,314],"content":"At design time, the <xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A> method looks for a license file named `myClassName.LIC`, where `myClassName` is the <xref:System.Type.FullName%2A> of the component to create. This file must be in the same directory as the .dll file that contains the component.","nodes":[{"content":"At design time, the <ph id=\"ph1\">&lt;xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A&gt;</ph> method looks for a license file named <ph id=\"ph2\">`myClassName.LIC`</ph>, where <ph id=\"ph3\">`myClassName`</ph> is the <ph id=\"ph4\">&lt;xref:System.Type.FullName%2A&gt;</ph> of the component to create.","pos":[0,228],"source":"At design time, the <xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A> method looks for a license file named `myClassName.LIC`, where `myClassName` is the <xref:System.Type.FullName%2A> of the component to create."},{"content":"This file must be in the same directory as the .dll file that contains the component.","pos":[229,314]}]},{"pos":[321,583],"content":"Next, this method checks the first line of the license file against a key specified in the <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> method. If the key is valid, this line is used as the <xref:System.ComponentModel.License.LicenseKey%2A>.","nodes":[{"content":"Next, this method checks the first line of the license file against a key specified in the <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> method. If the key is valid, this line is used as the <xref:System.ComponentModel.License.LicenseKey%2A>.","pos":[0,262],"nodes":[{"content":"Next, this method checks the first line of the license file against a key specified in the <ph id=\"ph1\">&lt;xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A&gt;</ph> method.","pos":[0,164],"source":"Next, this method checks the first line of the license file against a key specified in the <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> method."},{"content":"If the key is valid, this line is used as the <ph id=\"ph1\">&lt;xref:System.ComponentModel.License.LicenseKey%2A&gt;</ph>.","pos":[165,262],"source":" If the key is valid, this line is used as the <xref:System.ComponentModel.License.LicenseKey%2A>."}]}]}],"pos":[7940,8528],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.ComponentModel.LicenseContext\"></xref> that specifies where you can use the licensed object.","nodes":[{"pos":[0,113],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.LicenseContext\"&gt;&lt;/xref&gt;</ph> that specifies where you can use the licensed object.","source":"A <xref href=\"System.ComponentModel.LicenseContext\"></xref> that specifies where you can use the licensed object."}],"pos":[8808,8922],"yaml":true},{"content":"A <xref href=\"System.Type\"></xref> that represents the component requesting the <xref href=\"System.ComponentModel.License\"></xref>.","nodes":[{"pos":[0,131],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> that represents the component requesting the <ph id=\"ph2\">&lt;xref href=\"System.ComponentModel.License\"&gt;&lt;/xref&gt;</ph>.","source":"A <xref href=\"System.Type\"></xref> that represents the component requesting the <xref href=\"System.ComponentModel.License\"></xref>."}],"pos":[8980,9112],"yaml":true},{"content":"An object that requests the <xref href=\"System.ComponentModel.License\"></xref>.","nodes":[{"pos":[0,79],"content":"An object that requests the <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.License\"&gt;&lt;/xref&gt;</ph>.","source":"An object that requests the <xref href=\"System.ComponentModel.License\"></xref>."}],"pos":[9176,9256],"yaml":true},{"content":"`true` if a <xref href=\"System.ComponentModel.LicenseException\"></xref> should be thrown when a component cannot be granted a license; otherwise, `false`.","nodes":[{"pos":[0,154],"content":"<ph id=\"ph1\">`true`</ph> if a <ph id=\"ph2\">&lt;xref href=\"System.ComponentModel.LicenseException\"&gt;&lt;/xref&gt;</ph> should be thrown when a component cannot be granted a license; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if a <xref href=\"System.ComponentModel.LicenseException\"></xref> should be thrown when a component cannot be granted a license; otherwise, `false`."}],"pos":[9328,9485],"yaml":true},{"content":"A valid <xref href=\"System.ComponentModel.License\"></xref>. If this method cannot find a valid <xref href=\"System.ComponentModel.License\"></xref> or a valid <code>context</code> parameter, it returns `null`.","nodes":[{"pos":[0,207],"content":"A valid <xref href=\"System.ComponentModel.License\"></xref>. If this method cannot find a valid <xref href=\"System.ComponentModel.License\"></xref> or a valid <code>context</code> parameter, it returns `null`.","nodes":[{"content":"A valid <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.License\"&gt;&lt;/xref&gt;</ph>.","pos":[0,59],"source":"A valid <xref href=\"System.ComponentModel.License\"></xref>."},{"content":"If this method cannot find a valid <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.License\"&gt;&lt;/xref&gt;</ph> or a valid <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">context</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter, it returns <ph id=\"ph3\">`null`</ph>.","pos":[60,207],"source":" If this method cannot find a valid <xref href=\"System.ComponentModel.License\"></xref> or a valid <code>context</code> parameter, it returns `null`."}]}],"pos":[9558,9766],"yaml":true},{"content":"Determines whether the key that the <xref href=\"System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)\"></xref> method retrieves is valid for the specified type.","nodes":[{"pos":[0,241],"content":"Determines whether the key that the <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)\"&gt;&lt;/xref&gt;</ph> method retrieves is valid for the specified type.","source":"Determines whether the key that the <xref href=\"System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)\"></xref> method retrieves is valid for the specified type."}],"pos":[11198,11440],"yaml":true},{"content":"This method checks the key against the phrase: \" `myClassName is a licensed component.` \", where `myClassName` is the <xref:System.Type.FullName%2A> of the component you want to create.","nodes":[{"pos":[0,185],"content":"This method checks the key against the phrase: \" <ph id=\"ph1\">`myClassName is a licensed component.`</ph> \", where <ph id=\"ph2\">`myClassName`</ph> is the <ph id=\"ph3\">&lt;xref:System.Type.FullName%2A&gt;</ph> of the component you want to create.","source":"This method checks the key against the phrase: \" `myClassName is a licensed component.` \", where `myClassName` is the <xref:System.Type.FullName%2A> of the component you want to create."}],"pos":[11451,11639],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.ComponentModel.License.LicenseKey\"></xref> to check.","nodes":[{"pos":[0,75],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.License.LicenseKey\"&gt;&lt;/xref&gt;</ph> to check.","source":"The <xref href=\"System.ComponentModel.License.LicenseKey\"></xref> to check."}],"pos":[11796,11872],"yaml":true},{"content":"A <xref href=\"System.Type\"></xref> that represents the component requesting the <xref href=\"System.ComponentModel.License\"></xref>.","nodes":[{"pos":[0,131],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> that represents the component requesting the <ph id=\"ph2\">&lt;xref href=\"System.ComponentModel.License\"&gt;&lt;/xref&gt;</ph>.","source":"A <xref href=\"System.Type\"></xref> that represents the component requesting the <xref href=\"System.ComponentModel.License\"></xref>."}],"pos":[11930,12062],"yaml":true},{"content":"`true` if the key is a valid <xref href=\"System.ComponentModel.License.LicenseKey\"></xref> for the specified type; otherwise, `false`.","nodes":[{"pos":[0,134],"content":"<ph id=\"ph1\">`true`</ph> if the key is a valid <ph id=\"ph2\">&lt;xref href=\"System.ComponentModel.License.LicenseKey\"&gt;&lt;/xref&gt;</ph> for the specified type; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the key is a valid <xref href=\"System.ComponentModel.License.LicenseKey\"></xref> for the specified type; otherwise, `false`."}],"pos":[12120,12257],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ComponentModel.LicFileLicenseProvider\n  commentId: T:System.ComponentModel.LicFileLicenseProvider\n  id: LicFileLicenseProvider\n  children:\n  - System.ComponentModel.LicFileLicenseProvider.#ctor\n  - System.ComponentModel.LicFileLicenseProvider.GetKey(System.Type)\n  - System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)\n  - System.ComponentModel.LicFileLicenseProvider.IsKeyValid(System.String,System.Type)\n  langs:\n  - csharp\n  name: LicFileLicenseProvider\n  nameWithType: LicFileLicenseProvider\n  fullName: System.ComponentModel.LicFileLicenseProvider\n  type: Class\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: Provides an implementation of a <xref href=\"System.ComponentModel.LicenseProvider\"></xref>. The provider works in a similar fashion to the Microsoft .NET Framework standard licensing model.\n  remarks: \"The <xref:System.ComponentModel.LicFileLicenseProvider> offers <xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A> and <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> methods. The <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> method determines whether the <xref:System.ComponentModel.License.LicenseKey%2A> retrieved by the <xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A> method is valid. When you inherit from this class, you can override the <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> method to provide your own validation logic.  \\n  \\n This class exists to provide similar licensing functionality to COM licensing and uses text license files.  \\n  \\n For more information on licensing, see [How to: License Components and Controls](http://msdn.microsoft.com/library/8e66c1ed-a445-4b26-8185-990b6e2bbd57).\"\n  example:\n  - \"The following example creates a licensed control using the <xref:System.ComponentModel.LicenseManager.Validate%2A> method. It uses <xref:System.ComponentModel.LicFileLicenseProvider> for the license manager.  \\n  \\n [!code-cpp[Classic LicenseManager Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic LicenseManager Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic LicenseManager Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic LicenseManager Example/CS/source.cs#1)]\\n [!code-vb[Classic LicenseManager Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic LicenseManager Example/VB/source.vb#1)]\"\n  syntax:\n    content: 'public class LicFileLicenseProvider : System.ComponentModel.LicenseProvider'\n  inheritance:\n  - System.Object\n  - System.ComponentModel.LicenseProvider\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/LicFileLicenseProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.LicFileLicenseProvider.#ctor\n  commentId: M:System.ComponentModel.LicFileLicenseProvider.#ctor\n  id: '#ctor'\n  parent: System.ComponentModel.LicFileLicenseProvider\n  langs:\n  - csharp\n  name: LicFileLicenseProvider()\n  nameWithType: LicFileLicenseProvider.LicFileLicenseProvider()\n  fullName: LicFileLicenseProvider.LicFileLicenseProvider()\n  type: Constructor\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: Initializes a new instance of the <xref href=\"System.ComponentModel.LicFileLicenseProvider\"></xref> class.\n  syntax:\n    content: public LicFileLicenseProvider ();\n    parameters: []\n  overload: System.ComponentModel.LicFileLicenseProvider.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/LicFileLicenseProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.LicFileLicenseProvider.GetKey(System.Type)\n  commentId: M:System.ComponentModel.LicFileLicenseProvider.GetKey(System.Type)\n  id: GetKey(System.Type)\n  parent: System.ComponentModel.LicFileLicenseProvider\n  langs:\n  - csharp\n  name: GetKey(Type)\n  nameWithType: LicFileLicenseProvider.GetKey(Type)\n  fullName: LicFileLicenseProvider.GetKey(Type)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: Returns a key for the specified type.\n  syntax:\n    content: protected virtual string GetKey (Type type);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The object type to return the key.\n    return:\n      type: System.String\n      description: A confirmation that the <code>type</code> parameter is licensed.\n  overload: System.ComponentModel.LicFileLicenseProvider.GetKey*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/LicFileLicenseProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)\n  commentId: M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)\n  id: GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)\n  parent: System.ComponentModel.LicFileLicenseProvider\n  langs:\n  - csharp\n  name: GetLicense(LicenseContext, Type, Object, Boolean)\n  nameWithType: LicFileLicenseProvider.GetLicense(LicenseContext, Type, Object, Boolean)\n  fullName: LicFileLicenseProvider.GetLicense(LicenseContext, Type, Object, Boolean)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: Returns a license for the instance of the component, if one is available.\n  remarks: \"At design time, the <xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A> method looks for a license file named `myClassName.LIC`, where `myClassName` is the <xref:System.Type.FullName%2A> of the component to create. This file must be in the same directory as the .dll file that contains the component.  \\n  \\n Next, this method checks the first line of the license file against a key specified in the <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> method. If the key is valid, this line is used as the <xref:System.ComponentModel.License.LicenseKey%2A>.\"\n  syntax:\n    content: public override System.ComponentModel.License GetLicense (System.ComponentModel.LicenseContext context, Type type, object instance, bool allowExceptions);\n    parameters:\n    - id: context\n      type: System.ComponentModel.LicenseContext\n      description: A <xref href=\"System.ComponentModel.LicenseContext\"></xref> that specifies where you can use the licensed object.\n    - id: type\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> that represents the component requesting the <xref href=\"System.ComponentModel.License\"></xref>.\n    - id: instance\n      type: System.Object\n      description: An object that requests the <xref href=\"System.ComponentModel.License\"></xref>.\n    - id: allowExceptions\n      type: System.Boolean\n      description: '`true` if a <xref href=\"System.ComponentModel.LicenseException\"></xref> should be thrown when a component cannot be granted a license; otherwise, `false`.'\n    return:\n      type: System.ComponentModel.License\n      description: A valid <xref href=\"System.ComponentModel.License\"></xref>. If this method cannot find a valid <xref href=\"System.ComponentModel.License\"></xref> or a valid <code>context</code> parameter, it returns `null`.\n  overload: System.ComponentModel.LicFileLicenseProvider.GetLicense*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/LicFileLicenseProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.LicFileLicenseProvider.IsKeyValid(System.String,System.Type)\n  commentId: M:System.ComponentModel.LicFileLicenseProvider.IsKeyValid(System.String,System.Type)\n  id: IsKeyValid(System.String,System.Type)\n  parent: System.ComponentModel.LicFileLicenseProvider\n  langs:\n  - csharp\n  name: IsKeyValid(String, Type)\n  nameWithType: LicFileLicenseProvider.IsKeyValid(String, Type)\n  fullName: LicFileLicenseProvider.IsKeyValid(String, Type)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: Determines whether the key that the <xref href=\"System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)\"></xref> method retrieves is valid for the specified type.\n  remarks: 'This method checks the key against the phrase: \" `myClassName is a licensed component.` \", where `myClassName` is the <xref:System.Type.FullName%2A> of the component you want to create.'\n  syntax:\n    content: protected virtual bool IsKeyValid (string key, Type type);\n    parameters:\n    - id: key\n      type: System.String\n      description: The <xref href=\"System.ComponentModel.License.LicenseKey\"></xref> to check.\n    - id: type\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> that represents the component requesting the <xref href=\"System.ComponentModel.License\"></xref>.\n    return:\n      type: System.Boolean\n      description: '`true` if the key is a valid <xref href=\"System.ComponentModel.License.LicenseKey\"></xref> for the specified type; otherwise, `false`.'\n  overload: System.ComponentModel.LicFileLicenseProvider.IsKeyValid*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/LicFileLicenseProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.ComponentModel.LicenseProvider\n  parent: System.ComponentModel\n  isExternal: false\n  name: LicenseProvider\n  nameWithType: LicenseProvider\n  fullName: System.ComponentModel.LicenseProvider\n- uid: System.ComponentModel.LicFileLicenseProvider.#ctor\n  parent: System.ComponentModel.LicFileLicenseProvider\n  isExternal: false\n  name: LicFileLicenseProvider()\n  nameWithType: LicFileLicenseProvider.LicFileLicenseProvider()\n  fullName: LicFileLicenseProvider.LicFileLicenseProvider()\n- uid: System.ComponentModel.LicFileLicenseProvider.GetKey(System.Type)\n  parent: System.ComponentModel.LicFileLicenseProvider\n  isExternal: false\n  name: GetKey(Type)\n  nameWithType: LicFileLicenseProvider.GetKey(Type)\n  fullName: LicFileLicenseProvider.GetKey(Type)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)\n  parent: System.ComponentModel.LicFileLicenseProvider\n  isExternal: false\n  name: GetLicense(LicenseContext, Type, Object, Boolean)\n  nameWithType: LicFileLicenseProvider.GetLicense(LicenseContext, Type, Object, Boolean)\n  fullName: LicFileLicenseProvider.GetLicense(LicenseContext, Type, Object, Boolean)\n- uid: System.ComponentModel.License\n  parent: System.ComponentModel\n  isExternal: false\n  name: License\n  nameWithType: License\n  fullName: System.ComponentModel.License\n- uid: System.ComponentModel.LicenseContext\n  parent: System.ComponentModel\n  isExternal: false\n  name: LicenseContext\n  nameWithType: LicenseContext\n  fullName: System.ComponentModel.LicenseContext\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.ComponentModel.LicFileLicenseProvider.IsKeyValid(System.String,System.Type)\n  parent: System.ComponentModel.LicFileLicenseProvider\n  isExternal: false\n  name: IsKeyValid(String, Type)\n  nameWithType: LicFileLicenseProvider.IsKeyValid(String, Type)\n  fullName: LicFileLicenseProvider.IsKeyValid(String, Type)\n- uid: System.ComponentModel.LicFileLicenseProvider.#ctor*\n  parent: System.ComponentModel.LicFileLicenseProvider\n  isExternal: false\n  name: LicFileLicenseProvider\n  nameWithType: LicFileLicenseProvider.LicFileLicenseProvider\n  fullName: LicFileLicenseProvider.LicFileLicenseProvider\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/LicFileLicenseProvider.xml\n- uid: System.ComponentModel.LicFileLicenseProvider.GetKey*\n  parent: System.ComponentModel.LicFileLicenseProvider\n  isExternal: false\n  name: GetKey\n  nameWithType: LicFileLicenseProvider.GetKey\n  fullName: LicFileLicenseProvider.GetKey\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/LicFileLicenseProvider.xml\n- uid: System.ComponentModel.LicFileLicenseProvider.GetLicense*\n  parent: System.ComponentModel.LicFileLicenseProvider\n  isExternal: false\n  name: GetLicense\n  nameWithType: LicFileLicenseProvider.GetLicense\n  fullName: LicFileLicenseProvider.GetLicense\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/LicFileLicenseProvider.xml\n- uid: System.ComponentModel.LicFileLicenseProvider.IsKeyValid*\n  parent: System.ComponentModel.LicFileLicenseProvider\n  isExternal: false\n  name: IsKeyValid\n  nameWithType: LicFileLicenseProvider.IsKeyValid\n  fullName: LicFileLicenseProvider.IsKeyValid\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/LicFileLicenseProvider.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}