{"nodes":[{"content":"Defines the methods that enable custom inspection or modification of inbound and outbound application messages in service applications.","nodes":[{"pos":[0,135],"content":"Defines the methods that enable custom inspection or modification of inbound and outbound application messages in service applications.","nodes":[{"content":"Defines the methods that enable custom inspection or modification of inbound and outbound application messages in service applications.","pos":[0,135]}]}],"pos":[813,949],"yaml":true},{"content":"Implement <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> to inspect or modify inbound or outbound application messages either prior to dispatching a request message to an operation or before returning a reply message to a caller. There are a large number of scenarios that require intercepting messages prior to invoking the operation for which it is destined. For example, you can log incoming application messages or perform some feature based on a message header.  \n  \n Typically, message inspectors are inserted by a service behavior (<xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=fullName>), an endpoint behavior (<xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=fullName>), or a contract behavior (<xref:System.ServiceModel.Description.IContractBehavior?displayProperty=fullName>). The behavior then adds the message inspector to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=fullName> collection. For more information about extending the runtime using behaviors, see [Extending ServiceHost and the Service Model Layer](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md).  \n  \n-   The <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> method enables custom behavior after receiving the message but before dispatching it to the intended operation.  \n  \n-   The <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> method enables custom behavior after the operation returns but before the reply is sent.  \n  \n> [!NOTE]\n>  <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> objects are always called at the same point during message dispatch regardless of whether an operation is one-way or request-reply.","nodes":[{"pos":[0,483],"content":"Implement <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> to inspect or modify inbound or outbound application messages either prior to dispatching a request message to an operation or before returning a reply message to a caller. There are a large number of scenarios that require intercepting messages prior to invoking the operation for which it is destined. For example, you can log incoming application messages or perform some feature based on a message header.","nodes":[{"content":"Implement <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> to inspect or modify inbound or outbound application messages either prior to dispatching a request message to an operation or before returning a reply message to a caller. There are a large number of scenarios that require intercepting messages prior to invoking the operation for which it is destined. For example, you can log incoming application messages or perform some feature based on a message header.","pos":[0,483],"nodes":[{"content":"Implement <ph id=\"ph1\">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph> to inspect or modify inbound or outbound application messages either prior to dispatching a request message to an operation or before returning a reply message to a caller.","pos":[0,246],"source":"Implement <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> to inspect or modify inbound or outbound application messages either prior to dispatching a request message to an operation or before returning a reply message to a caller."},{"content":"There are a large number of scenarios that require intercepting messages prior to invoking the operation for which it is destined.","pos":[247,377]},{"content":"For example, you can log incoming application messages or perform some feature based on a message header.","pos":[378,483]}]}]},{"pos":[490,1224],"content":"Typically, message inspectors are inserted by a service behavior (<xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=fullName>), an endpoint behavior (<xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=fullName>), or a contract behavior (<xref:System.ServiceModel.Description.IContractBehavior?displayProperty=fullName>). The behavior then adds the message inspector to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=fullName> collection. For more information about extending the runtime using behaviors, see [Extending ServiceHost and the Service Model Layer](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md).","nodes":[{"content":"Typically, message inspectors are inserted by a service behavior (<ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=fullName&gt;</ph>), an endpoint behavior (<ph id=\"ph2\">&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=fullName&gt;</ph>), or a contract behavior (<ph id=\"ph3\">&lt;xref:System.ServiceModel.Description.IContractBehavior?displayProperty=fullName&gt;</ph>).","pos":[0,362],"source":"Typically, message inspectors are inserted by a service behavior (<xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=fullName>), an endpoint behavior (<xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=fullName>), or a contract behavior (<xref:System.ServiceModel.Description.IContractBehavior?displayProperty=fullName>)."},{"content":"The behavior then adds the message inspector to the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=fullName&gt;</ph> collection.","pos":[363,526],"source":" The behavior then adds the message inspector to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=fullName> collection."},{"content":"For more information about extending the runtime using behaviors, see <bpt id=\"p1\">[</bpt>Extending ServiceHost and the Service Model Layer<ept id=\"p1\">](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md)</ept>.","pos":[527,734],"source":" For more information about extending the runtime using behaviors, see [Extending ServiceHost and the Service Model Layer](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md)."}]},{"pos":[1234,1436],"content":"The <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> method enables custom behavior after receiving the message but before dispatching it to the intended operation.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A&gt;</ph> method enables custom behavior after receiving the message but before dispatching it to the intended operation.","pos":[0,202],"source":"The <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> method enables custom behavior after receiving the message but before dispatching it to the intended operation."}]},{"pos":[1446,1621],"content":"The <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> method enables custom behavior after the operation returns but before the reply is sent.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A&gt;</ph> method enables custom behavior after the operation returns but before the reply is sent.","pos":[0,175],"source":"The <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> method enables custom behavior after the operation returns but before the reply is sent."}]},{"pos":[1629,1835],"content":"[!NOTE]\n <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> objects are always called at the same point during message dispatch regardless of whether an operation is one-way or request-reply.","leadings":["","> "],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector&gt;</ph> objects are always called at the same point during message dispatch regardless of whether an operation is one-way or request-reply.","pos":[9,204],"source":" <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> objects are always called at the same point during message dispatch regardless of whether an operation is one-way or request-reply."}]}],"pos":[960,2807],"yaml":true,"extradata":"MT"},{"content":"Called after an inbound message has been received but before the message is dispatched to the intended operation.","nodes":[{"pos":[0,113],"content":"Called after an inbound message has been received but before the message is dispatched to the intended operation.","nodes":[{"content":"Called after an inbound message has been received but before the message is dispatched to the intended operation.","pos":[0,113]}]}],"pos":[5749,5863],"yaml":true},{"content":"Use the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> method to inspect or modify the incoming message, the client channel that provided it, and the current service instance. The return value can be any object that you want to use for correlation purposes; it is returned to you as the `correlationState` parameter in the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> method.  \n  \n> [!IMPORTANT]\n>  You cannot use the body of the message unless you buffer the entire message and make a copy. If you do this, you must make two copies of the message: one to inspect, and the other to overwrite the `request` parameter.","nodes":[{"pos":[0,453],"content":"Use the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> method to inspect or modify the incoming message, the client channel that provided it, and the current service instance. The return value can be any object that you want to use for correlation purposes; it is returned to you as the `correlationState` parameter in the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> method.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A&gt;</ph> method to inspect or modify the incoming message, the client channel that provided it, and the current service instance.","pos":[0,215],"source":"Use the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> method to inspect or modify the incoming message, the client channel that provided it, and the current service instance."},{"content":"The return value can be any object that you want to use for correlation purposes; it is returned to you as the <ph id=\"ph1\">`correlationState`</ph> parameter in the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A&gt;</ph> method.","pos":[216,453],"source":" The return value can be any object that you want to use for correlation purposes; it is returned to you as the `correlationState` parameter in the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> method."}]},{"pos":[461,694],"content":"[!IMPORTANT]\n You cannot use the body of the message unless you buffer the entire message and make a copy. If you do this, you must make two copies of the message: one to inspect, and the other to overwrite the `request` parameter.","leadings":["","> "],"nodes":[{"content":" You cannot use the body of the message unless you buffer the entire message and make a copy. If you do this, you must make two copies of the message: one to inspect, and the other to overwrite the `request` parameter.","pos":[13,231],"nodes":[{"content":"You cannot use the body of the message unless you buffer the entire message and make a copy.","pos":[1,93]},{"content":"If you do this, you must make two copies of the message: one to inspect, and the other to overwrite the <ph id=\"ph1\">`request`</ph> parameter.","pos":[94,218],"source":" If you do this, you must make two copies of the message: one to inspect, and the other to overwrite the `request` parameter."}]}]}],"pos":[5874,6574],"yaml":true,"extradata":"MT"},{"content":"The request message.","nodes":[{"pos":[0,20],"content":"The request message.","nodes":[{"content":"The request message.","pos":[0,20]}]}],"pos":[8188,8209],"yaml":true},{"content":"The incoming channel.","nodes":[{"pos":[0,21],"content":"The incoming channel.","nodes":[{"content":"The incoming channel.","pos":[0,21]}]}],"pos":[8293,8315],"yaml":true},{"content":"The current service instance.","nodes":[{"pos":[0,29],"content":"The current service instance.","nodes":[{"content":"The current service instance.","pos":[0,29]}]}],"pos":[8408,8438],"yaml":true},{"content":"The object used to correlate state. This object is passed back in the <xref href=\"System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)\"></xref> method.","nodes":[{"pos":[0,224],"content":"The object used to correlate state. This object is passed back in the <xref href=\"System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)\"></xref> method.","nodes":[{"content":"The object used to correlate state.","pos":[0,35]},{"content":"This object is passed back in the <ph id=\"ph1\">&lt;xref href=\"System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)\"&gt;&lt;/xref&gt;</ph> method.","pos":[36,224],"source":" This object is passed back in the <xref href=\"System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)\"></xref> method."}]}],"pos":[8495,8720],"yaml":true},{"content":"Called after the operation has returned but before the reply message is sent.","nodes":[{"pos":[0,77],"content":"Called after the operation has returned but before the reply message is sent.","nodes":[{"content":"Called after the operation has returned but before the reply message is sent.","pos":[0,77]}]}],"pos":[10110,10188],"yaml":true},{"content":"Use the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> method to perform custom behavior prior to sending the return message. The `correlationState` is the object returned from the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> method that you can use to perform correlation between inbound and outbound calls to support your behavior.","nodes":[{"pos":[0,411],"content":"Use the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> method to perform custom behavior prior to sending the return message. The `correlationState` is the object returned from the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> method that you can use to perform correlation between inbound and outbound calls to support your behavior.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A&gt;</ph> method to perform custom behavior prior to sending the return message.","pos":[0,161],"source":"Use the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> method to perform custom behavior prior to sending the return message."},{"content":"The <ph id=\"ph1\">`correlationState`</ph> is the object returned from the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A&gt;</ph> method that you can use to perform correlation between inbound and outbound calls to support your behavior.","pos":[162,411],"source":" The `correlationState` is the object returned from the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> method that you can use to perform correlation between inbound and outbound calls to support your behavior."}]}],"pos":[10199,10611],"yaml":true,"extradata":"MT"},{"content":"The reply message. This value is null if the operation is one way.","nodes":[{"pos":[0,66],"content":"The reply message. This value is null if the operation is one way.","nodes":[{"content":"The reply message. This value is null if the operation is one way.","pos":[0,66],"nodes":[{"content":"The reply message.","pos":[0,18]},{"content":"This value is null if the operation is one way.","pos":[19,66]}]}]}],"pos":[12143,12210],"yaml":true},{"content":"The correlation object returned from the <xref href=\"System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)\"></xref> method.","nodes":[{"pos":[0,256],"content":"The correlation object returned from the <ph id=\"ph1\">&lt;xref href=\"System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)\"&gt;&lt;/xref&gt;</ph> method.","source":"The correlation object returned from the <xref href=\"System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)\"></xref> method."}],"pos":[12282,12539],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ServiceModel.Dispatcher.IDispatchMessageInspector\n  commentId: T:System.ServiceModel.Dispatcher.IDispatchMessageInspector\n  id: IDispatchMessageInspector\n  children:\n  - System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)\n  - System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)\n  langs:\n  - csharp\n  name: IDispatchMessageInspector\n  nameWithType: IDispatchMessageInspector\n  fullName: System.ServiceModel.Dispatcher.IDispatchMessageInspector\n  type: Interface\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Dispatcher\n  summary: Defines the methods that enable custom inspection or modification of inbound and outbound application messages in service applications.\n  remarks: \"Implement <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> to inspect or modify inbound or outbound application messages either prior to dispatching a request message to an operation or before returning a reply message to a caller. There are a large number of scenarios that require intercepting messages prior to invoking the operation for which it is destined. For example, you can log incoming application messages or perform some feature based on a message header.  \\n  \\n Typically, message inspectors are inserted by a service behavior (<xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=fullName>), an endpoint behavior (<xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=fullName>), or a contract behavior (<xref:System.ServiceModel.Description.IContractBehavior?displayProperty=fullName>). The behavior then adds the message inspector to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=fullName> collection. For more information about extending the runtime using behaviors, see [Extending ServiceHost and the Service Model Layer](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md).  \\n  \\n-   The <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> method enables custom behavior after receiving the message but before dispatching it to the intended operation.  \\n  \\n-   The <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> method enables custom behavior after the operation returns but before the reply is sent.  \\n  \\n> [!NOTE]\\n>  <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> objects are always called at the same point during message dispatch regardless of whether an operation is one-way or request-reply.\"\n  example:\n  - \"The following code example shows a basic <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> that writes a string to the console when it is invoked.  \\n  \\n [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]\\n [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  \\n  \\n The following code example shows the implementation of an <xref:System.ServiceModel.Description.IServiceBehavior> that adds the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=fullName> collection.  \\n  \\n [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]\\n [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  \\n  \\n The following code example shows the use of an application configuration file to load the service behavior that inserts the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.  \\n  \\n [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]\"\n  syntax:\n    content: public interface IDispatchMessageInspector\n  implements: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Dispatcher/IDispatchMessageInspector.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)\n  commentId: M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)\n  id: AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)\n  parent: System.ServiceModel.Dispatcher.IDispatchMessageInspector\n  langs:\n  - csharp\n  name: AfterReceiveRequest(Message, IClientChannel, InstanceContext)\n  nameWithType: IDispatchMessageInspector.AfterReceiveRequest(Message, IClientChannel, InstanceContext)\n  fullName: IDispatchMessageInspector.AfterReceiveRequest(Message, IClientChannel, InstanceContext)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Dispatcher\n  summary: Called after an inbound message has been received but before the message is dispatched to the intended operation.\n  remarks: \"Use the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> method to inspect or modify the incoming message, the client channel that provided it, and the current service instance. The return value can be any object that you want to use for correlation purposes; it is returned to you as the `correlationState` parameter in the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> method.  \\n  \\n> [!IMPORTANT]\\n>  You cannot use the body of the message unless you buffer the entire message and make a copy. If you do this, you must make two copies of the message: one to inspect, and the other to overwrite the `request` parameter.\"\n  example:\n  - \"The following code example shows a basic <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> that writes a string to the console when it is invoked.  \\n  \\n [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]\\n [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  \\n  \\n The following code example shows the implementation of an <xref:System.ServiceModel.Description.IServiceBehavior> that adds the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=fullName> collection.  \\n  \\n [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]\\n [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  \\n  \\n The following code example shows the use of an application configuration file to load the service behavior that inserts the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.  \\n  \\n [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]\"\n  syntax:\n    content: public object AfterReceiveRequest (ref System.ServiceModel.Channels.Message request, System.ServiceModel.IClientChannel channel, System.ServiceModel.InstanceContext instanceContext);\n    parameters:\n    - id: request\n      type: System.ServiceModel.Channels.Message\n      description: The request message.\n    - id: channel\n      type: System.ServiceModel.IClientChannel\n      description: The incoming channel.\n    - id: instanceContext\n      type: System.ServiceModel.InstanceContext\n      description: The current service instance.\n    return:\n      type: System.Object\n      description: The object used to correlate state. This object is passed back in the <xref href=\"System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)\"></xref> method.\n  overload: System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Dispatcher/IDispatchMessageInspector.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)\n  commentId: M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)\n  id: BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)\n  parent: System.ServiceModel.Dispatcher.IDispatchMessageInspector\n  langs:\n  - csharp\n  name: BeforeSendReply(Message, Object)\n  nameWithType: IDispatchMessageInspector.BeforeSendReply(Message, Object)\n  fullName: IDispatchMessageInspector.BeforeSendReply(Message, Object)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Dispatcher\n  summary: Called after the operation has returned but before the reply message is sent.\n  remarks: Use the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> method to perform custom behavior prior to sending the return message. The `correlationState` is the object returned from the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> method that you can use to perform correlation between inbound and outbound calls to support your behavior.\n  example:\n  - \"The following code example shows a basic <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> that writes a string to the console when it is invoked.  \\n  \\n [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]\\n [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  \\n  \\n The following code example shows the implementation of an <xref:System.ServiceModel.Description.IServiceBehavior> that adds the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=fullName> collection.  \\n  \\n [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]\\n [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  \\n  \\n The following code example shows the use of an application configuration file to load the service behavior that inserts the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.  \\n  \\n [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]\"\n  syntax:\n    content: public void BeforeSendReply (ref System.ServiceModel.Channels.Message reply, object correlationState);\n    parameters:\n    - id: reply\n      type: System.ServiceModel.Channels.Message\n      description: The reply message. This value is null if the operation is one way.\n    - id: correlationState\n      type: System.Object\n      description: The correlation object returned from the <xref href=\"System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)\"></xref> method.\n  overload: System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Dispatcher/IDispatchMessageInspector.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\nreferences:\n- uid: System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)\n  parent: System.ServiceModel.Dispatcher.IDispatchMessageInspector\n  isExternal: false\n  name: AfterReceiveRequest(Message, IClientChannel, InstanceContext)\n  nameWithType: IDispatchMessageInspector.AfterReceiveRequest(Message, IClientChannel, InstanceContext)\n  fullName: IDispatchMessageInspector.AfterReceiveRequest(Message, IClientChannel, InstanceContext)\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ServiceModel.Channels.Message\n  parent: System.ServiceModel.Channels\n  isExternal: false\n  name: Message\n  nameWithType: Message\n  fullName: System.ServiceModel.Channels.Message\n- uid: System.ServiceModel.IClientChannel\n  parent: System.ServiceModel\n  isExternal: false\n  name: IClientChannel\n  nameWithType: IClientChannel\n  fullName: System.ServiceModel.IClientChannel\n- uid: System.ServiceModel.InstanceContext\n  parent: System.ServiceModel\n  isExternal: false\n  name: InstanceContext\n  nameWithType: InstanceContext\n  fullName: System.ServiceModel.InstanceContext\n- uid: System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)\n  parent: System.ServiceModel.Dispatcher.IDispatchMessageInspector\n  isExternal: false\n  name: BeforeSendReply(Message, Object)\n  nameWithType: IDispatchMessageInspector.BeforeSendReply(Message, Object)\n  fullName: IDispatchMessageInspector.BeforeSendReply(Message, Object)\n- uid: System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest*\n  parent: System.ServiceModel.Dispatcher.IDispatchMessageInspector\n  isExternal: false\n  name: AfterReceiveRequest\n  nameWithType: IDispatchMessageInspector.AfterReceiveRequest\n  fullName: IDispatchMessageInspector.AfterReceiveRequest\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Dispatcher/IDispatchMessageInspector.xml\n- uid: System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply*\n  parent: System.ServiceModel.Dispatcher.IDispatchMessageInspector\n  isExternal: false\n  name: BeforeSendReply\n  nameWithType: IDispatchMessageInspector.BeforeSendReply\n  fullName: IDispatchMessageInspector.BeforeSendReply\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Dispatcher/IDispatchMessageInspector.xml\n"}