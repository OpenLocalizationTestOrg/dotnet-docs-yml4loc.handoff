<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e49b54554305566df1dfa1b0aad86b933ec67d4d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Web.UI.PageAsyncTask.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a50598b9ab0240c613c9658f4600a8c84b09714b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3ec6766af86080c04a9e56b7fed81c75a05b6eee</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Contains information about an asynchronous task registered to a page.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class cannot be inherited.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>ASP.NET version 2.0 allows you to register multiple tasks to a page and run them asynchronously prior to rendering the page.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>You might specify that a task be run asynchronously if it is a slow process and you do not want other processes to be tied up while it is executing.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The asynchronous tasks can be executed in parallel or sequentially.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask&gt;</ph> object must be registered to the page through the <ph id="ph2">&lt;xref:System.Web.UI.Page.RegisterAsyncTask%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The page itself does not have to be processed asynchronously to execute asynchronous tasks.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can set the <ph id="ph1">`Async`</ph> attribute to either <ph id="ph2">`true`</ph> (as shown in the following code example) or <ph id="ph3">`false`</ph> on the page directive and the asynchronous tasks will still be processed asynchronously:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">`Async`</ph> attribute is set to <ph id="ph2">`false`</ph>, the thread that executes the page will be blocked until all asynchronous tasks are complete.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any asynchronous tasks registered before the <ph id="ph1">&lt;xref:System.Web.UI.Page.PreRenderComplete&gt;</ph> event will be executed automatically by the page if they have not already been executed.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>Those asynchronous tasks registered after the <ph id="ph1">&lt;xref:System.Web.UI.Page.PreRenderComplete&gt;</ph> event must be executed explicitly through the <ph id="ph2">&lt;xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A&gt;</ph> method can also be used to start tasks before the <ph id="ph2">&lt;xref:System.Web.UI.Page.PreRenderComplete&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A&gt;</ph> method executes all the registered asynchronous tasks on the page that have not been executed.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, an asynchronous task will time out if it has not completed within 45 seconds.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can specify a different time-out value in either the Web.config file or the page directive.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`&lt;pages&gt;`</ph> section of the Web.config file contains an <ph id="ph2">`asyncTimeout`</ph> attribute, as shown below.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>The page directive contains an <ph id="ph1">`AsyncTimeout`</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Web.UI.PageAsyncTask"&gt;&lt;/xref&gt;</ph> class using an event handler that enables the task to be canceled.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor wraps a <ph id="ph1">&lt;xref:System.Web.TaskEventHandler&gt;</ph> delegate so that the <ph id="ph2">&lt;xref:System.Web.UI.PageAsyncTask&gt;</ph> object can integrate asynchronous code (based on <ph id="ph3">&lt;xref:System.Threading.Tasks.Task&gt;</ph> objects) with the existing ASP.NET Web Forms asynchronous pages feature.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>ASP.NET will signal the <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> object that is passed to a <ph id="ph2">&lt;xref:System.Web.TaskEventHandler&gt;</ph> delegate for cancellation based on the <ph id="ph3">&lt;xref:System.Web.UI.Page.AsyncTimeout%2A&gt;</ph> attribute set in the <ph id="ph4">`@ Page`</ph> directive of the Web page.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">&lt;xref:System.Web.UI.Page.AsyncTimeout%2A&gt;</ph> value has been reached, the <ph id="ph2">&lt;xref:System.Threading.CancellationToken&gt;</ph> object will be signaled.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`CancellationToken`</ph> parameter must be passed to any asynchronous APIs that are called by your implementation of the <ph id="ph2">&lt;xref:System.Web.TaskEventHandler&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>An event handler.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Web.UI.PageAsyncTask"&gt;&lt;/xref&gt;</ph> class using an event handler that enables the task to be handled.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>An event handler.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Web.UI.PageAsyncTask"&gt;&lt;/xref&gt;</ph> class using the default value for executing in parallel.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>This implementation of the constructor sets the <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A&gt;</ph> property to <ph id="ph2">`false`</ph> so the asynchronous task is not processed in parallel with other tasks on the page.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The handler to call when beginning an asynchronous task.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The handler to call when the task is completed successfully within the time-out period.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The handler to call when the task is not completed successfully within the time-out period.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The object that represents the state of the task.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">beginHandler</ph><ept id="p1">&lt;/code&gt;</ept> parameter or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">endHandler</ph><ept id="p2">&lt;/code&gt;</ept> parameter is not specified.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Web.UI.PageAsyncTask"&gt;&lt;/xref&gt;</ph> class using the specified value for executing in parallel.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>This implementation of the constructor allows you to set whether the asynchronous task will be processed in parallel with other tasks on the page.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The handler to call when beginning an asynchronous task.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The handler to call when the task is completed successfully within the time-out period.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The handler to call when the task is not completed successfully within the time-out period.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The object that represents the state of the task.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The value that indicates whether the task can be processed in parallel with other tasks.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">beginHandler</ph><ept id="p1">&lt;/code&gt;</ept> parameter or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">endHandler</ph><ept id="p2">&lt;/code&gt;</ept> parameter is not specified.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Gets the method to call when beginning an asynchronous task.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.BeginHandler%2A&gt;</ph> delegate is set in the constructor.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Web.BeginEventHandler"&gt;&lt;/xref&gt;</ph> delegate that represents the method to call when beginning the asynchronous task.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Gets the method to call when the task completes successfully within the time-out period.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.EndHandler%2A&gt;</ph> delegate is set in the constructor.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Web.EndEventHandler"&gt;&lt;/xref&gt;</ph> delegate that represents the method to call when the task completes successfully within the time-out period.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the task can be processed in parallel with other tasks.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A&gt;</ph> property is set in the constructor.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>When multiple tasks are registered in a page and the <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A&gt;</ph> property is set to <ph id="ph2">`true`</ph>, then those tasks are processed concurrently.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if the <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A&gt;</ph> property is set to <ph id="ph2">`false`</ph>, then those tasks are processed sequentially.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if a page contained two asynchronous tasks that each took 5 seconds to complete and <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A&gt;</ph> is set to <ph id="ph2">`true`</ph>, both tasks will complete in 5 seconds.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A&gt;</ph> is set to <ph id="ph2">`false`</ph> for these same two tasks, then the first task will complete in 5 seconds and the second task will complete 5 seconds after the completion of the first task.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the task should be processed in parallel with other tasks; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Gets an object that represents the state of the task.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.State%2A&gt;</ph> property is set in the constructor and cannot be modified during execution of the asynchronous task.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can differentiate asynchronous tasks in a page by assigning unique string values to their respective <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.State%2A&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Object"&gt;&lt;/xref&gt;</ph> that represents the state of the task.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Gets the method to call when the task does not complete successfully within the time-out period.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.TimeoutHandler%2A&gt;</ph> delegate is set in the constructor.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Web.EndEventHandler"&gt;&lt;/xref&gt;</ph> delegate that represents the method to call when the task does not complete successfully within the time-out period.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>