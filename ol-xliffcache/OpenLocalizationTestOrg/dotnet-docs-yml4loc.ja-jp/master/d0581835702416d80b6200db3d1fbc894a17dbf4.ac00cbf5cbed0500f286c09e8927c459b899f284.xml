{"nodes":[{"content":"Defines a method for objects that import custom policy assertions about bindings.","nodes":[{"pos":[0,81],"content":"Defines a method for objects that import custom policy assertions about bindings.","nodes":[{"content":"Defines a method for objects that import custom policy assertions about bindings.","pos":[0,81]}]}],"pos":[656,738],"yaml":true},{"content":"Implement the <xref:System.ServiceModel.Description.IPolicyImportExtension> interface to search WSDL information exposed by a particular endpoint for custom policy assertions about endpoint capabilities or requirements. Typically, a policy importer searches for a specific assertion and either inserts a binding element, configures a binding element, or modifies the contract to support the requirements of the assertion.  \n  \n Unlike its counterpart, <xref:System.ServiceModel.Description.IPolicyExportExtension>, <xref:System.ServiceModel.Description.IPolicyImportExtension> does not require implementation by a <xref:System.ServiceModel.Channels.BindingElement> object; you can load it using the client configuration section shown in the Examples section or programmatically by adding it to the <xref:System.ServiceModel.Description.WsdlImporter?displayProperty=fullName> constructor.  \n  \n [!INCLUDE[indigo1](~/includes/indigo1-md.md)] passes two objects to the <xref:System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy%2A> method, a <xref:System.ServiceModel.Description.MetadataImporter> and a <xref:System.ServiceModel.Description.PolicyConversionContext>. Typically the <xref:System.ServiceModel.Description.PolicyConversionContext> object already contains the policy assertions for each binding scope.  \n  \n An <xref:System.ServiceModel.Description.IPolicyImportExtension> implementation performs the following steps:  \n  \n1.  Locates the custom policy assertion for which it is responsible by calling either the <xref:System.ServiceModel.Description.PolicyConversionContext.GetBindingAssertions%2A>, <xref:System.ServiceModel.Description.PolicyConversionContext.GetMessageBindingAssertions%2A>, or <xref:System.ServiceModel.Description.PolicyConversionContext.GetOperationBindingAssertions%2A> methods, depending upon the scope.  \n  \n2.  Removes the policy assertion from the assertion collection. The <xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=fullName> method locates, returns, and removes the assertion in one step.  \n  \n3.  Modify the binding stack or the contract by either adding a required custom <xref:System.ServiceModel.Channels.BindingElement> to the <xref:System.ServiceModel.Description.PolicyConversionContext.BindingElements%2A> property or by modifying the <xref:System.ServiceModel.Description.PolicyConversionContext.Contract%2A?displayProperty=fullName> property.  \n  \n Step 2 is important. After all policy importers have been called, [!INCLUDE[indigo2](~/includes/indigo2-md.md)] checks for the existence of any policy assertions that remain. If one exists, [!INCLUDE[indigo2](~/includes/indigo2-md.md)] assumes that the policy import was unsuccessful and does not import the associated binding.  \n  \n> [!IMPORTANT]\n>  A malicious metadata supplier can attempt to send malformed XML as part of metadata in an attempt to exploit a policy importer. It is strongly recommended that custom policy importers be robust to all forms of XML that can be passed to it.  \n  \n Custom <xref:System.ServiceModel.Description.MetadataImporter> implementations must implement their own <xref:System.ServiceModel.Description.PolicyConversionContext> object to extract the policy assertions attached to the custom metadata format.  \n  \n If you want to export and import custom WSDL elements that are not policy assertions, see <xref:System.ServiceModel.Description.IWsdlExportExtension?displayProperty=fullName> and <xref:System.ServiceModel.Description.IWsdlImportExtension?displayProperty=fullName>.  \n  \n> [!NOTE]\n>  You can use custom policy importers and exporters with the [ServiceModel Metadata Utility Tool (Svcutil.exe)](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md) by using the same configuration elements in a configuration file and the `/svcutilConfig:<configFile>` option.","nodes":[{"pos":[0,421],"content":"Implement the <xref:System.ServiceModel.Description.IPolicyImportExtension> interface to search WSDL information exposed by a particular endpoint for custom policy assertions about endpoint capabilities or requirements. Typically, a policy importer searches for a specific assertion and either inserts a binding element, configures a binding element, or modifies the contract to support the requirements of the assertion.","nodes":[{"content":"Implement the <xref:System.ServiceModel.Description.IPolicyImportExtension> interface to search WSDL information exposed by a particular endpoint for custom policy assertions about endpoint capabilities or requirements. Typically, a policy importer searches for a specific assertion and either inserts a binding element, configures a binding element, or modifies the contract to support the requirements of the assertion.","pos":[0,421],"nodes":[{"content":"Implement the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.IPolicyImportExtension&gt;</ph> interface to search WSDL information exposed by a particular endpoint for custom policy assertions about endpoint capabilities or requirements.","pos":[0,219],"source":"Implement the <xref:System.ServiceModel.Description.IPolicyImportExtension> interface to search WSDL information exposed by a particular endpoint for custom policy assertions about endpoint capabilities or requirements."},{"content":"Typically, a policy importer searches for a specific assertion and either inserts a binding element, configures a binding element, or modifies the contract to support the requirements of the assertion.","pos":[220,421]}]}]},{"pos":[428,887],"content":"Unlike its counterpart, <xref:System.ServiceModel.Description.IPolicyExportExtension>, <xref:System.ServiceModel.Description.IPolicyImportExtension> does not require implementation by a <xref:System.ServiceModel.Channels.BindingElement> object; you can load it using the client configuration section shown in the Examples section or programmatically by adding it to the <xref:System.ServiceModel.Description.WsdlImporter?displayProperty=fullName> constructor.","nodes":[{"content":"Unlike its counterpart, <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.IPolicyExportExtension&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.ServiceModel.Description.IPolicyImportExtension&gt;</ph> does not require implementation by a <ph id=\"ph3\">&lt;xref:System.ServiceModel.Channels.BindingElement&gt;</ph> object; you can load it using the client configuration section shown in the Examples section or programmatically by adding it to the <ph id=\"ph4\">&lt;xref:System.ServiceModel.Description.WsdlImporter?displayProperty=fullName&gt;</ph> constructor.","pos":[0,459],"source":"Unlike its counterpart, <xref:System.ServiceModel.Description.IPolicyExportExtension>, <xref:System.ServiceModel.Description.IPolicyImportExtension> does not require implementation by a <xref:System.ServiceModel.Channels.BindingElement> object; you can load it using the client configuration section shown in the Examples section or programmatically by adding it to the <xref:System.ServiceModel.Description.WsdlImporter?displayProperty=fullName> constructor."}]},{"pos":[894,1326],"content":"[!INCLUDE[indigo1](~/includes/indigo1-md.md)] passes two objects to the <xref:System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy%2A> method, a <xref:System.ServiceModel.Description.MetadataImporter> and a <xref:System.ServiceModel.Description.PolicyConversionContext>. Typically the <xref:System.ServiceModel.Description.PolicyConversionContext> object already contains the policy assertions for each binding scope.","nodes":[{"content":"<ph id=\"ph1\">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> passes two objects to the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy%2A&gt;</ph> method, a <ph id=\"ph3\">&lt;xref:System.ServiceModel.Description.MetadataImporter&gt;</ph> and a <ph id=\"ph4\">&lt;xref:System.ServiceModel.Description.PolicyConversionContext&gt;</ph>.","pos":[0,285],"source":"[!INCLUDE[indigo1](~/includes/indigo1-md.md)] passes two objects to the <xref:System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy%2A> method, a <xref:System.ServiceModel.Description.MetadataImporter> and a <xref:System.ServiceModel.Description.PolicyConversionContext>."},{"content":"Typically the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.PolicyConversionContext&gt;</ph> object already contains the policy assertions for each binding scope.","pos":[286,432],"source":" Typically the <xref:System.ServiceModel.Description.PolicyConversionContext> object already contains the policy assertions for each binding scope."}]},{"pos":[1333,1442],"content":"An <xref:System.ServiceModel.Description.IPolicyImportExtension> implementation performs the following steps:","nodes":[{"content":"An <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.IPolicyImportExtension&gt;</ph> implementation performs the following steps:","pos":[0,109],"source":"An <xref:System.ServiceModel.Description.IPolicyImportExtension> implementation performs the following steps:"}]},{"pos":[1452,1854],"content":"Locates the custom policy assertion for which it is responsible by calling either the <xref:System.ServiceModel.Description.PolicyConversionContext.GetBindingAssertions%2A>, <xref:System.ServiceModel.Description.PolicyConversionContext.GetMessageBindingAssertions%2A>, or <xref:System.ServiceModel.Description.PolicyConversionContext.GetOperationBindingAssertions%2A> methods, depending upon the scope.","nodes":[{"content":"Locates the custom policy assertion for which it is responsible by calling either the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.PolicyConversionContext.GetBindingAssertions%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.ServiceModel.Description.PolicyConversionContext.GetMessageBindingAssertions%2A&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.ServiceModel.Description.PolicyConversionContext.GetOperationBindingAssertions%2A&gt;</ph> methods, depending upon the scope.","pos":[0,402],"source":"Locates the custom policy assertion for which it is responsible by calling either the <xref:System.ServiceModel.Description.PolicyConversionContext.GetBindingAssertions%2A>, <xref:System.ServiceModel.Description.PolicyConversionContext.GetMessageBindingAssertions%2A>, or <xref:System.ServiceModel.Description.PolicyConversionContext.GetOperationBindingAssertions%2A> methods, depending upon the scope."}]},{"pos":[1864,2091],"content":"Removes the policy assertion from the assertion collection. The <xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=fullName> method locates, returns, and removes the assertion in one step.","nodes":[{"content":"Removes the policy assertion from the assertion collection. The <xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=fullName> method locates, returns, and removes the assertion in one step.","pos":[0,227],"nodes":[{"content":"Removes the policy assertion from the assertion collection.","pos":[0,59]},{"content":"The <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=fullName&gt;</ph> method locates, returns, and removes the assertion in one step.","pos":[60,227],"source":" The <xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=fullName> method locates, returns, and removes the assertion in one step."}]}]},{"pos":[2101,2455],"content":"Modify the binding stack or the contract by either adding a required custom <xref:System.ServiceModel.Channels.BindingElement> to the <xref:System.ServiceModel.Description.PolicyConversionContext.BindingElements%2A> property or by modifying the <xref:System.ServiceModel.Description.PolicyConversionContext.Contract%2A?displayProperty=fullName> property.","nodes":[{"content":"Modify the binding stack or the contract by either adding a required custom <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.BindingElement&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Description.PolicyConversionContext.BindingElements%2A&gt;</ph> property or by modifying the <ph id=\"ph3\">&lt;xref:System.ServiceModel.Description.PolicyConversionContext.Contract%2A?displayProperty=fullName&gt;</ph> property.","pos":[0,354],"source":"Modify the binding stack or the contract by either adding a required custom <xref:System.ServiceModel.Channels.BindingElement> to the <xref:System.ServiceModel.Description.PolicyConversionContext.BindingElements%2A> property or by modifying the <xref:System.ServiceModel.Description.PolicyConversionContext.Contract%2A?displayProperty=fullName> property."}]},{"pos":[2462,2789],"content":"Step 2 is important. After all policy importers have been called, [!INCLUDE[indigo2](~/includes/indigo2-md.md)] checks for the existence of any policy assertions that remain. If one exists, [!INCLUDE[indigo2](~/includes/indigo2-md.md)] assumes that the policy import was unsuccessful and does not import the associated binding.","nodes":[{"content":"Step 2 is important.","pos":[0,20]},{"content":"After all policy importers have been called, <ph id=\"ph1\">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> checks for the existence of any policy assertions that remain.","pos":[21,174],"source":" After all policy importers have been called, [!INCLUDE[indigo2](~/includes/indigo2-md.md)] checks for the existence of any policy assertions that remain."},{"content":"If one exists, <ph id=\"ph1\">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> assumes that the policy import was unsuccessful and does not import the associated binding.","pos":[175,327],"source":" If one exists, [!INCLUDE[indigo2](~/includes/indigo2-md.md)] assumes that the policy import was unsuccessful and does not import the associated binding."}]},{"pos":[2797,3052],"content":"[!IMPORTANT]\n A malicious metadata supplier can attempt to send malformed XML as part of metadata in an attempt to exploit a policy importer. It is strongly recommended that custom policy importers be robust to all forms of XML that can be passed to it.","leadings":["","> "],"nodes":[{"content":" A malicious metadata supplier can attempt to send malformed XML as part of metadata in an attempt to exploit a policy importer. It is strongly recommended that custom policy importers be robust to all forms of XML that can be passed to it.","pos":[13,253],"nodes":[{"content":"A malicious metadata supplier can attempt to send malformed XML as part of metadata in an attempt to exploit a policy importer.","pos":[1,128]},{"content":"It is strongly recommended that custom policy importers be robust to all forms of XML that can be passed to it.","pos":[129,240]}]}]},{"pos":[3059,3305],"content":"Custom <xref:System.ServiceModel.Description.MetadataImporter> implementations must implement their own <xref:System.ServiceModel.Description.PolicyConversionContext> object to extract the policy assertions attached to the custom metadata format.","nodes":[{"content":"Custom <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.MetadataImporter&gt;</ph> implementations must implement their own <ph id=\"ph2\">&lt;xref:System.ServiceModel.Description.PolicyConversionContext&gt;</ph> object to extract the policy assertions attached to the custom metadata format.","pos":[0,246],"source":"Custom <xref:System.ServiceModel.Description.MetadataImporter> implementations must implement their own <xref:System.ServiceModel.Description.PolicyConversionContext> object to extract the policy assertions attached to the custom metadata format."}]},{"pos":[3312,3576],"content":"If you want to export and import custom WSDL elements that are not policy assertions, see <xref:System.ServiceModel.Description.IWsdlExportExtension?displayProperty=fullName> and <xref:System.ServiceModel.Description.IWsdlImportExtension?displayProperty=fullName>.","nodes":[{"content":"If you want to export and import custom WSDL elements that are not policy assertions, see <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.IWsdlExportExtension?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.ServiceModel.Description.IWsdlImportExtension?displayProperty=fullName&gt;</ph>.","pos":[0,264],"source":"If you want to export and import custom WSDL elements that are not policy assertions, see <xref:System.ServiceModel.Description.IWsdlExportExtension?displayProperty=fullName> and <xref:System.ServiceModel.Description.IWsdlImportExtension?displayProperty=fullName>."}]},{"pos":[3584,3887],"content":"[!NOTE]\n You can use custom policy importers and exporters with the [ServiceModel Metadata Utility Tool (Svcutil.exe)](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md) by using the same configuration elements in a configuration file and the `/svcutilConfig:<configFile>` option.","leadings":["","> "],"nodes":[{"content":"You can use custom policy importers and exporters with the <bpt id=\"p1\">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id=\"p1\">](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept> by using the same configuration elements in a configuration file and the <ph id=\"ph1\">`/svcutilConfig:&lt;configFile&gt;`</ph> option.","pos":[9,301],"source":" You can use custom policy importers and exporters with the [ServiceModel Metadata Utility Tool (Svcutil.exe)](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md) by using the same configuration elements in a configuration file and the `/svcutilConfig:<configFile>` option."}]}],"pos":[749,4663],"yaml":true,"extradata":"MT"},{"content":"Defines a method that can import custom policy assertions and add implementing binding elements.","nodes":[{"pos":[0,96],"content":"Defines a method that can import custom policy assertions and add implementing binding elements.","nodes":[{"content":"Defines a method that can import custom policy assertions and add implementing binding elements.","pos":[0,96]}]}],"pos":[8212,8309],"yaml":true},{"content":"Implement the `ImportPolicy` method to obtain policy assertions and perform some modification of the imported contract or binding to support the assertion. Typically, a policy importer responds to finding a custom policy assertion by configuring or inserting a binding element into the binding being imported.  \n  \n [!INCLUDE[indigo1](~/includes/indigo1-md.md)] passes two objects to the <xref:System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy%2A> method, a <xref:System.ServiceModel.Description.MetadataImporter> and a <xref:System.ServiceModel.Description.PolicyConversionContext>. Typically the <xref:System.ServiceModel.Description.PolicyConversionContext> object already contains the policy assertions for each binding scope.  \n  \n An <xref:System.ServiceModel.Description.IPolicyImportExtension> implementation performs the following steps:  \n  \n1.  Locates the custom policy assertion for which it is responsible by calling either the <xref:System.ServiceModel.Description.PolicyConversionContext.GetBindingAssertions%2A>, <xref:System.ServiceModel.Description.PolicyConversionContext.GetMessageBindingAssertions%2A>, or <xref:System.ServiceModel.Description.PolicyConversionContext.GetOperationBindingAssertions%2A> methods, depending upon the scope.  \n  \n2.  Removes the policy assertion from the assertion collection. The <xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=fullName> method locates, returns, and removes the assertion in one step.  \n  \n3.  Modifies the binding stack or the contract by either adding a required custom <xref:System.ServiceModel.Channels.BindingElement> to the <xref:System.ServiceModel.Description.PolicyConversionContext.BindingElements%2A> property or by modifying the <xref:System.ServiceModel.Description.PolicyConversionContext.Contract%2A?displayProperty=fullName> property.  \n  \n Step 2 is important. After all policy importers have been called, [!INCLUDE[indigo2](~/includes/indigo2-md.md)] checks for the existence of any policy assertions that remain. If one exists, [!INCLUDE[indigo2](~/includes/indigo2-md.md)] assumes that the policy import was unsuccessful and does not import the associated binding.","nodes":[{"pos":[0,309],"content":"Implement the `ImportPolicy` method to obtain policy assertions and perform some modification of the imported contract or binding to support the assertion. Typically, a policy importer responds to finding a custom policy assertion by configuring or inserting a binding element into the binding being imported.","nodes":[{"content":"Implement the <ph id=\"ph1\">`ImportPolicy`</ph> method to obtain policy assertions and perform some modification of the imported contract or binding to support the assertion.","pos":[0,155],"source":"Implement the `ImportPolicy` method to obtain policy assertions and perform some modification of the imported contract or binding to support the assertion."},{"content":"Typically, a policy importer responds to finding a custom policy assertion by configuring or inserting a binding element into the binding being imported.","pos":[156,309]}]},{"pos":[316,748],"content":"[!INCLUDE[indigo1](~/includes/indigo1-md.md)] passes two objects to the <xref:System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy%2A> method, a <xref:System.ServiceModel.Description.MetadataImporter> and a <xref:System.ServiceModel.Description.PolicyConversionContext>. Typically the <xref:System.ServiceModel.Description.PolicyConversionContext> object already contains the policy assertions for each binding scope.","nodes":[{"content":"<ph id=\"ph1\">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> passes two objects to the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy%2A&gt;</ph> method, a <ph id=\"ph3\">&lt;xref:System.ServiceModel.Description.MetadataImporter&gt;</ph> and a <ph id=\"ph4\">&lt;xref:System.ServiceModel.Description.PolicyConversionContext&gt;</ph>.","pos":[0,285],"source":"[!INCLUDE[indigo1](~/includes/indigo1-md.md)] passes two objects to the <xref:System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy%2A> method, a <xref:System.ServiceModel.Description.MetadataImporter> and a <xref:System.ServiceModel.Description.PolicyConversionContext>."},{"content":"Typically the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.PolicyConversionContext&gt;</ph> object already contains the policy assertions for each binding scope.","pos":[286,432],"source":" Typically the <xref:System.ServiceModel.Description.PolicyConversionContext> object already contains the policy assertions for each binding scope."}]},{"pos":[755,864],"content":"An <xref:System.ServiceModel.Description.IPolicyImportExtension> implementation performs the following steps:","nodes":[{"content":"An <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.IPolicyImportExtension&gt;</ph> implementation performs the following steps:","pos":[0,109],"source":"An <xref:System.ServiceModel.Description.IPolicyImportExtension> implementation performs the following steps:"}]},{"pos":[874,1276],"content":"Locates the custom policy assertion for which it is responsible by calling either the <xref:System.ServiceModel.Description.PolicyConversionContext.GetBindingAssertions%2A>, <xref:System.ServiceModel.Description.PolicyConversionContext.GetMessageBindingAssertions%2A>, or <xref:System.ServiceModel.Description.PolicyConversionContext.GetOperationBindingAssertions%2A> methods, depending upon the scope.","nodes":[{"content":"Locates the custom policy assertion for which it is responsible by calling either the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.PolicyConversionContext.GetBindingAssertions%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.ServiceModel.Description.PolicyConversionContext.GetMessageBindingAssertions%2A&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.ServiceModel.Description.PolicyConversionContext.GetOperationBindingAssertions%2A&gt;</ph> methods, depending upon the scope.","pos":[0,402],"source":"Locates the custom policy assertion for which it is responsible by calling either the <xref:System.ServiceModel.Description.PolicyConversionContext.GetBindingAssertions%2A>, <xref:System.ServiceModel.Description.PolicyConversionContext.GetMessageBindingAssertions%2A>, or <xref:System.ServiceModel.Description.PolicyConversionContext.GetOperationBindingAssertions%2A> methods, depending upon the scope."}]},{"pos":[1286,1513],"content":"Removes the policy assertion from the assertion collection. The <xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=fullName> method locates, returns, and removes the assertion in one step.","nodes":[{"content":"Removes the policy assertion from the assertion collection. The <xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=fullName> method locates, returns, and removes the assertion in one step.","pos":[0,227],"nodes":[{"content":"Removes the policy assertion from the assertion collection.","pos":[0,59]},{"content":"The <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=fullName&gt;</ph> method locates, returns, and removes the assertion in one step.","pos":[60,227],"source":" The <xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=fullName> method locates, returns, and removes the assertion in one step."}]}]},{"pos":[1523,1879],"content":"Modifies the binding stack or the contract by either adding a required custom <xref:System.ServiceModel.Channels.BindingElement> to the <xref:System.ServiceModel.Description.PolicyConversionContext.BindingElements%2A> property or by modifying the <xref:System.ServiceModel.Description.PolicyConversionContext.Contract%2A?displayProperty=fullName> property.","nodes":[{"content":"Modifies the binding stack or the contract by either adding a required custom <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.BindingElement&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Description.PolicyConversionContext.BindingElements%2A&gt;</ph> property or by modifying the <ph id=\"ph3\">&lt;xref:System.ServiceModel.Description.PolicyConversionContext.Contract%2A?displayProperty=fullName&gt;</ph> property.","pos":[0,356],"source":"Modifies the binding stack or the contract by either adding a required custom <xref:System.ServiceModel.Channels.BindingElement> to the <xref:System.ServiceModel.Description.PolicyConversionContext.BindingElements%2A> property or by modifying the <xref:System.ServiceModel.Description.PolicyConversionContext.Contract%2A?displayProperty=fullName> property."}]},{"pos":[1886,2213],"content":"Step 2 is important. After all policy importers have been called, [!INCLUDE[indigo2](~/includes/indigo2-md.md)] checks for the existence of any policy assertions that remain. If one exists, [!INCLUDE[indigo2](~/includes/indigo2-md.md)] assumes that the policy import was unsuccessful and does not import the associated binding.","nodes":[{"content":"Step 2 is important.","pos":[0,20]},{"content":"After all policy importers have been called, <ph id=\"ph1\">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> checks for the existence of any policy assertions that remain.","pos":[21,174],"source":" After all policy importers have been called, [!INCLUDE[indigo2](~/includes/indigo2-md.md)] checks for the existence of any policy assertions that remain."},{"content":"If one exists, <ph id=\"ph1\">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> assumes that the policy import was unsuccessful and does not import the associated binding.","pos":[175,327],"source":" If one exists, [!INCLUDE[indigo2](~/includes/indigo2-md.md)] assumes that the policy import was unsuccessful and does not import the associated binding."}]}],"pos":[8320,10548],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.ServiceModel.Description.MetadataImporter\"></xref> object in use.","nodes":[{"pos":[0,88],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.ServiceModel.Description.MetadataImporter\"&gt;&lt;/xref&gt;</ph> object in use.","source":"The <xref href=\"System.ServiceModel.Description.MetadataImporter\"></xref> object in use."}],"pos":[12083,12172],"yaml":true},{"content":"The <xref href=\"System.ServiceModel.Description.PolicyConversionContext\"></xref> that contains both the policy assertions that can be imported and the collections of binding elements to which implementing binding elements can be added.","nodes":[{"pos":[0,235],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.ServiceModel.Description.PolicyConversionContext\"&gt;&lt;/xref&gt;</ph> that contains both the policy assertions that can be imported and the collections of binding elements to which implementing binding elements can be added.","source":"The <xref href=\"System.ServiceModel.Description.PolicyConversionContext\"></xref> that contains both the policy assertions that can be imported and the collections of binding elements to which implementing binding elements can be added."}],"pos":[12277,12513],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ServiceModel.Description.IPolicyImportExtension\n  commentId: T:System.ServiceModel.Description.IPolicyImportExtension\n  id: IPolicyImportExtension\n  children:\n  - System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy(System.ServiceModel.Description.MetadataImporter,System.ServiceModel.Description.PolicyConversionContext)\n  langs:\n  - csharp\n  name: IPolicyImportExtension\n  nameWithType: IPolicyImportExtension\n  fullName: System.ServiceModel.Description.IPolicyImportExtension\n  type: Interface\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Description\n  summary: Defines a method for objects that import custom policy assertions about bindings.\n  remarks: \"Implement the <xref:System.ServiceModel.Description.IPolicyImportExtension> interface to search WSDL information exposed by a particular endpoint for custom policy assertions about endpoint capabilities or requirements. Typically, a policy importer searches for a specific assertion and either inserts a binding element, configures a binding element, or modifies the contract to support the requirements of the assertion.  \\n  \\n Unlike its counterpart, <xref:System.ServiceModel.Description.IPolicyExportExtension>, <xref:System.ServiceModel.Description.IPolicyImportExtension> does not require implementation by a <xref:System.ServiceModel.Channels.BindingElement> object; you can load it using the client configuration section shown in the Examples section or programmatically by adding it to the <xref:System.ServiceModel.Description.WsdlImporter?displayProperty=fullName> constructor.  \\n  \\n [!INCLUDE[indigo1](~/includes/indigo1-md.md)] passes two objects to the <xref:System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy%2A> method, a <xref:System.ServiceModel.Description.MetadataImporter> and a <xref:System.ServiceModel.Description.PolicyConversionContext>. Typically the <xref:System.ServiceModel.Description.PolicyConversionContext> object already contains the policy assertions for each binding scope.  \\n  \\n An <xref:System.ServiceModel.Description.IPolicyImportExtension> implementation performs the following steps:  \\n  \\n1.  Locates the custom policy assertion for which it is responsible by calling either the <xref:System.ServiceModel.Description.PolicyConversionContext.GetBindingAssertions%2A>, <xref:System.ServiceModel.Description.PolicyConversionContext.GetMessageBindingAssertions%2A>, or <xref:System.ServiceModel.Description.PolicyConversionContext.GetOperationBindingAssertions%2A> methods, depending upon the scope.  \\n  \\n2.  Removes the policy assertion from the assertion collection. The <xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=fullName> method locates, returns, and removes the assertion in one step.  \\n  \\n3.  Modify the binding stack or the contract by either adding a required custom <xref:System.ServiceModel.Channels.BindingElement> to the <xref:System.ServiceModel.Description.PolicyConversionContext.BindingElements%2A> property or by modifying the <xref:System.ServiceModel.Description.PolicyConversionContext.Contract%2A?displayProperty=fullName> property.  \\n  \\n Step 2 is important. After all policy importers have been called, [!INCLUDE[indigo2](~/includes/indigo2-md.md)] checks for the existence of any policy assertions that remain. If one exists, [!INCLUDE[indigo2](~/includes/indigo2-md.md)] assumes that the policy import was unsuccessful and does not import the associated binding.  \\n  \\n> [!IMPORTANT]\\n>  A malicious metadata supplier can attempt to send malformed XML as part of metadata in an attempt to exploit a policy importer. It is strongly recommended that custom policy importers be robust to all forms of XML that can be passed to it.  \\n  \\n Custom <xref:System.ServiceModel.Description.MetadataImporter> implementations must implement their own <xref:System.ServiceModel.Description.PolicyConversionContext> object to extract the policy assertions attached to the custom metadata format.  \\n  \\n If you want to export and import custom WSDL elements that are not policy assertions, see <xref:System.ServiceModel.Description.IWsdlExportExtension?displayProperty=fullName> and <xref:System.ServiceModel.Description.IWsdlImportExtension?displayProperty=fullName>.  \\n  \\n> [!NOTE]\\n>  You can use custom policy importers and exporters with the [ServiceModel Metadata Utility Tool (Svcutil.exe)](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md) by using the same configuration elements in a configuration file and the `/svcutilConfig:<configFile>` option.\"\n  example:\n  - \"The following code example shows the use of the <xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=fullName> method to locate, return, and remove the assertion in one step.  \\n  \\n [!code-csharp[CustomPolicySample#1](~/samples/snippets/csharp/VS_Snippets_CFX/custompolicysample/cs/policyimporter.cs#1)]\\n [!code-vb[CustomPolicySample#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/custompolicysample/vb/policyimporter.vb#1)]  \\n  \\n The following code example shows the client application configuration file to load the custom policy importer when the <xref:System.ServiceModel.Description.MetadataResolver?displayProperty=fullName> is invoked.  \\n  \\n [!code-xml[CustomPolicySample#7](~/samples/snippets/csharp/VS_Snippets_CFX/custompolicysample/cs/client.exe.config#7)]   \\n  \\n The following code example shows the use of the <xref:System.ServiceModel.Description.MetadataResolver> to download and resolve metadata into description objects.  \\n  \\n [!code-csharp[CustomPolicySample#10](~/samples/snippets/csharp/VS_Snippets_CFX/custompolicysample/cs/client.cs#10)]\\n [!code-vb[CustomPolicySample#10](~/samples/snippets/visualbasic/VS_Snippets_CFX/custompolicysample/vb/client.vb#10)]\"\n  syntax:\n    content: public interface IPolicyImportExtension\n  derivedClasses:\n  - System.ServiceModel.Channels.CompositeDuplexBindingElementImporter\n  - System.ServiceModel.Channels.ContextBindingElementImporter\n  - System.ServiceModel.Channels.MessageEncodingBindingElementImporter\n  - System.ServiceModel.Channels.OneWayBindingElementImporter\n  - System.ServiceModel.Channels.ReliableSessionBindingElementImporter\n  - System.ServiceModel.Channels.SecurityBindingElementImporter\n  - System.ServiceModel.Channels.TransactionFlowBindingElementImporter\n  - System.ServiceModel.Channels.TransportBindingElementImporter\n  - System.ServiceModel.Channels.UdpTransportImporter\n  implements: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Description/IPolicyImportExtension.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy(System.ServiceModel.Description.MetadataImporter,System.ServiceModel.Description.PolicyConversionContext)\n  commentId: M:System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy(System.ServiceModel.Description.MetadataImporter,System.ServiceModel.Description.PolicyConversionContext)\n  id: ImportPolicy(System.ServiceModel.Description.MetadataImporter,System.ServiceModel.Description.PolicyConversionContext)\n  parent: System.ServiceModel.Description.IPolicyImportExtension\n  langs:\n  - csharp\n  name: ImportPolicy(MetadataImporter, PolicyConversionContext)\n  nameWithType: IPolicyImportExtension.ImportPolicy(MetadataImporter, PolicyConversionContext)\n  fullName: IPolicyImportExtension.ImportPolicy(MetadataImporter, PolicyConversionContext)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Description\n  summary: Defines a method that can import custom policy assertions and add implementing binding elements.\n  remarks: \"Implement the `ImportPolicy` method to obtain policy assertions and perform some modification of the imported contract or binding to support the assertion. Typically, a policy importer responds to finding a custom policy assertion by configuring or inserting a binding element into the binding being imported.  \\n  \\n [!INCLUDE[indigo1](~/includes/indigo1-md.md)] passes two objects to the <xref:System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy%2A> method, a <xref:System.ServiceModel.Description.MetadataImporter> and a <xref:System.ServiceModel.Description.PolicyConversionContext>. Typically the <xref:System.ServiceModel.Description.PolicyConversionContext> object already contains the policy assertions for each binding scope.  \\n  \\n An <xref:System.ServiceModel.Description.IPolicyImportExtension> implementation performs the following steps:  \\n  \\n1.  Locates the custom policy assertion for which it is responsible by calling either the <xref:System.ServiceModel.Description.PolicyConversionContext.GetBindingAssertions%2A>, <xref:System.ServiceModel.Description.PolicyConversionContext.GetMessageBindingAssertions%2A>, or <xref:System.ServiceModel.Description.PolicyConversionContext.GetOperationBindingAssertions%2A> methods, depending upon the scope.  \\n  \\n2.  Removes the policy assertion from the assertion collection. The <xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=fullName> method locates, returns, and removes the assertion in one step.  \\n  \\n3.  Modifies the binding stack or the contract by either adding a required custom <xref:System.ServiceModel.Channels.BindingElement> to the <xref:System.ServiceModel.Description.PolicyConversionContext.BindingElements%2A> property or by modifying the <xref:System.ServiceModel.Description.PolicyConversionContext.Contract%2A?displayProperty=fullName> property.  \\n  \\n Step 2 is important. After all policy importers have been called, [!INCLUDE[indigo2](~/includes/indigo2-md.md)] checks for the existence of any policy assertions that remain. If one exists, [!INCLUDE[indigo2](~/includes/indigo2-md.md)] assumes that the policy import was unsuccessful and does not import the associated binding.\"\n  example:\n  - \"The following code example shows the use of the <xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=fullName> method to locate, return, and remove the assertion in one step.  \\n  \\n [!code-csharp[CustomPolicySample#1](~/samples/snippets/csharp/VS_Snippets_CFX/custompolicysample/cs/policyimporter.cs#1)]\\n [!code-vb[CustomPolicySample#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/custompolicysample/vb/policyimporter.vb#1)]  \\n  \\n The following code example shows the client application configuration file to load the custom policy importer when the <xref:System.ServiceModel.Description.MetadataResolver?displayProperty=fullName> is invoked.  \\n  \\n [!code-xml[CustomPolicySample#7](~/samples/snippets/csharp/VS_Snippets_CFX/custompolicysample/cs/client.exe.config#7)]   \\n  \\n The following code example shows the use of the <xref:System.ServiceModel.Description.MetadataResolver> to download and resolve metadata into description objects.  \\n  \\n [!code-csharp[CustomPolicySample#10](~/samples/snippets/csharp/VS_Snippets_CFX/custompolicysample/cs/client.cs#10)]\\n [!code-vb[CustomPolicySample#10](~/samples/snippets/visualbasic/VS_Snippets_CFX/custompolicysample/vb/client.vb#10)]\"\n  syntax:\n    content: public void ImportPolicy (System.ServiceModel.Description.MetadataImporter importer, System.ServiceModel.Description.PolicyConversionContext context);\n    parameters:\n    - id: importer\n      type: System.ServiceModel.Description.MetadataImporter\n      description: The <xref href=\"System.ServiceModel.Description.MetadataImporter\"></xref> object in use.\n    - id: context\n      type: System.ServiceModel.Description.PolicyConversionContext\n      description: The <xref href=\"System.ServiceModel.Description.PolicyConversionContext\"></xref> that contains both the policy assertions that can be imported and the collections of binding elements to which implementing binding elements can be added.\n  overload: System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Description/IPolicyImportExtension.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\nreferences:\n- uid: System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy(System.ServiceModel.Description.MetadataImporter,System.ServiceModel.Description.PolicyConversionContext)\n  parent: System.ServiceModel.Description.IPolicyImportExtension\n  isExternal: false\n  name: ImportPolicy(MetadataImporter, PolicyConversionContext)\n  nameWithType: IPolicyImportExtension.ImportPolicy(MetadataImporter, PolicyConversionContext)\n  fullName: IPolicyImportExtension.ImportPolicy(MetadataImporter, PolicyConversionContext)\n- uid: System.ServiceModel.Description.MetadataImporter\n  parent: System.ServiceModel.Description\n  isExternal: false\n  name: MetadataImporter\n  nameWithType: MetadataImporter\n  fullName: System.ServiceModel.Description.MetadataImporter\n- uid: System.ServiceModel.Description.PolicyConversionContext\n  parent: System.ServiceModel.Description\n  isExternal: false\n  name: PolicyConversionContext\n  nameWithType: PolicyConversionContext\n  fullName: System.ServiceModel.Description.PolicyConversionContext\n- uid: System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy*\n  parent: System.ServiceModel.Description.IPolicyImportExtension\n  isExternal: false\n  name: ImportPolicy\n  nameWithType: IPolicyImportExtension.ImportPolicy\n  fullName: IPolicyImportExtension.ImportPolicy\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Description/IPolicyImportExtension.xml\n"}