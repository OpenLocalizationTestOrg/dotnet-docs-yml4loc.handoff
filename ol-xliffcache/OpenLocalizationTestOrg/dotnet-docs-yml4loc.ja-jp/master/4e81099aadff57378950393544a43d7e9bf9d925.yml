### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.RandomNumberGenerator
  commentId: T:System.Security.Cryptography.RandomNumberGenerator
  id: RandomNumberGenerator
  children:
  - System.Security.Cryptography.RandomNumberGenerator.#ctor
  - System.Security.Cryptography.RandomNumberGenerator.Create
  - System.Security.Cryptography.RandomNumberGenerator.Create(System.String)
  - System.Security.Cryptography.RandomNumberGenerator.Dispose
  - System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)
  - System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[])
  - System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes(System.Byte[])
  langs:
  - csharp
  name: RandomNumberGenerator
  nameWithType: RandomNumberGenerator
  fullName: System.Security.Cryptography.RandomNumberGenerator
  type: Class
  assemblies:
  - System.Security.Cryptography.Algorithms
  - mscorlib
  - netstandard
  namespace: System.Security.Cryptography
  summary: Represents the abstract class from which all implementations of cryptographic random number generators derive.
  remarks: "Cryptographic random number generators create cryptographically strong random values.  \n  \n Application code does not directly use this class. This abstract class is provided as the base class for all cryptographic random number generators.  \n  \n For an implementation of a cryptographic random number generator, use the derived class <xref:System.Security.Cryptography.RNGCryptoServiceProvider>."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class RandomNumberGenerator : IDisposable
  inheritance:
  - System.Object
  derivedClasses:
  - System.Security.Cryptography.RNGCryptoServiceProvider
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RandomNumberGenerator.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.RandomNumberGenerator.#ctor
  commentId: M:System.Security.Cryptography.RandomNumberGenerator.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.RandomNumberGenerator
  langs:
  - csharp
  name: RandomNumberGenerator()
  nameWithType: RandomNumberGenerator.RandomNumberGenerator()
  fullName: RandomNumberGenerator.RandomNumberGenerator()
  type: Constructor
  assemblies:
  - System.Security.Cryptography.Algorithms
  - mscorlib
  - netstandard
  namespace: System.Security.Cryptography
  summary: Initializes a new instance of <xref href="System.Security.Cryptography.RandomNumberGenerator"></xref>.
  remarks: You cannot create an instance of an abstract class. Application code will create a new instance of a derived class. For an implementation of a cryptographic random number generator, use the derived class <xref:System.Security.Cryptography.RNGCryptoServiceProvider>.
  syntax:
    content: protected RandomNumberGenerator ();
    parameters: []
  overload: System.Security.Cryptography.RandomNumberGenerator.#ctor*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RandomNumberGenerator.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.RandomNumberGenerator.Create
  commentId: M:System.Security.Cryptography.RandomNumberGenerator.Create
  id: Create
  parent: System.Security.Cryptography.RandomNumberGenerator
  langs:
  - csharp
  name: Create()
  nameWithType: RandomNumberGenerator.Create()
  fullName: RandomNumberGenerator.Create()
  type: Method
  assemblies:
  - System.Security.Cryptography.Algorithms
  - mscorlib
  - netstandard
  namespace: System.Security.Cryptography
  summary: When overridden in a derived class, creates an instance of the default implementation of a cryptographic random number generator that can be used to generate random data.
  syntax:
    content: public static System.Security.Cryptography.RandomNumberGenerator Create ();
    parameters: []
    return:
      type: System.Security.Cryptography.RandomNumberGenerator
      description: A new instance of a cryptographic random number generator.
  overload: System.Security.Cryptography.RandomNumberGenerator.Create*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RandomNumberGenerator.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.RandomNumberGenerator.Create(System.String)
  commentId: M:System.Security.Cryptography.RandomNumberGenerator.Create(System.String)
  id: Create(System.String)
  parent: System.Security.Cryptography.RandomNumberGenerator
  langs:
  - csharp
  name: Create(String)
  nameWithType: RandomNumberGenerator.Create(String)
  fullName: RandomNumberGenerator.Create(String)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: When overridden in a derived class, creates an instance of the specified implementation of a cryptographic random number generator.
  syntax:
    content: public static System.Security.Cryptography.RandomNumberGenerator Create (string rngName);
    parameters:
    - id: rngName
      type: System.String
      description: The name of the random number generator implementation to use.
    return:
      type: System.Security.Cryptography.RandomNumberGenerator
      description: A new instance of a cryptographic random number generator.
  overload: System.Security.Cryptography.RandomNumberGenerator.Create*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RandomNumberGenerator.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.RandomNumberGenerator.Dispose
  commentId: M:System.Security.Cryptography.RandomNumberGenerator.Dispose
  id: Dispose
  parent: System.Security.Cryptography.RandomNumberGenerator
  langs:
  - csharp
  name: Dispose()
  nameWithType: RandomNumberGenerator.Dispose()
  fullName: RandomNumberGenerator.Dispose()
  type: Method
  assemblies:
  - System.Security.Cryptography.Algorithms
  - mscorlib
  - netstandard
  namespace: System.Security.Cryptography
  summary: When overridden in a derived class, releases all resources used by the current instance of the <xref href="System.Security.Cryptography.RandomNumberGenerator"></xref> class.
  remarks: "Call `Dispose` when you are finished using the <xref:System.Security.Cryptography.RandomNumberGenerator>. The `Dispose` method leaves the <xref:System.Security.Cryptography.RandomNumberGenerator> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Security.Cryptography.RandomNumberGenerator> so the garbage collector can reclaim the memory that the <xref:System.Security.Cryptography.RandomNumberGenerator> was occupying.  \n  \n For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  \n  \n> [!NOTE]\n>  Always call `Dispose` before you release your last reference to the <xref:System.Security.Cryptography.RandomNumberGenerator>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Security.Cryptography.RandomNumberGenerator> object's `Finalize` method."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Security.Cryptography.RandomNumberGenerator.Dispose*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RandomNumberGenerator.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)
  commentId: M:System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.RandomNumberGenerator
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: RandomNumberGenerator.Dispose(Boolean)
  fullName: RandomNumberGenerator.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Security.Cryptography.Algorithms
  - mscorlib
  - netstandard
  namespace: System.Security.Cryptography
  summary: When overridden in a derived class, releases the unmanaged resources used by the <xref href="System.Security.Cryptography.RandomNumberGenerator"></xref> and optionally releases the managed resources.
  remarks: "This method is called by the public `Dispose()` method and the `Finalize` method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. `Finalize` invokes `Dispose` with `disposing` set to `false`.  \n  \n When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.RandomNumberGenerator> references. This method invokes the `Dispose()` method of each referenced object."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: '`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.'
  overload: System.Security.Cryptography.RandomNumberGenerator.Dispose*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RandomNumberGenerator.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[])
  commentId: M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[])
  id: GetBytes(System.Byte[])
  parent: System.Security.Cryptography.RandomNumberGenerator
  langs:
  - csharp
  name: GetBytes(Byte[])
  nameWithType: RandomNumberGenerator.GetBytes(Byte[])
  fullName: RandomNumberGenerator.GetBytes(Byte[])
  type: Method
  assemblies:
  - System.Security.Cryptography.Algorithms
  - mscorlib
  - netstandard
  namespace: System.Security.Cryptography
  summary: When overridden in a derived class, fills an array of bytes with a cryptographically strong random sequence of values.
  remarks: The length of the byte array determines how many random bytes are produced.
  example:
  - "The following example creates a random sequence 100 bytes long and stores it in `random`.  \n  \n [!code-cpp[Classic RandomNumberGenerator.GetBytes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic RandomNumberGenerator.GetBytes Example/CPP/source.cpp#1)]\n [!code-csharp[Classic RandomNumberGenerator.GetBytes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic RandomNumberGenerator.GetBytes Example/CS/source.cs#1)]\n [!code-vb[Classic RandomNumberGenerator.GetBytes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic RandomNumberGenerator.GetBytes Example/VB/source.vb#1)]"
  syntax:
    content: public abstract void GetBytes (byte[] data);
    parameters:
    - id: data
      type: System.Byte[]
      description: The array to fill with cryptographically strong random bytes.
  overload: System.Security.Cryptography.RandomNumberGenerator.GetBytes*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RandomNumberGenerator.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[],System.Int32,System.Int32)
  id: GetBytes(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.RandomNumberGenerator
  langs:
  - csharp
  name: GetBytes(Byte[], Int32, Int32)
  nameWithType: RandomNumberGenerator.GetBytes(Byte[], Int32, Int32)
  fullName: RandomNumberGenerator.GetBytes(Byte[], Int32, Int32)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: Fills the specified byte array with a cryptographically strong random sequence of values.
  syntax:
    content: public virtual void GetBytes (byte[] data, int offset, int count);
    parameters:
    - id: data
      type: System.Byte[]
      description: The array to fill with cryptographically strong random bytes.
    - id: offset
      type: System.Int32
      description: The index of the array to start the fill operation.
    - id: count
      type: System.Int32
      description: The number of bytes to fill.
  overload: System.Security.Cryptography.RandomNumberGenerator.GetBytes*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>data</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>offset</code> or <code>count</code> is less than 0
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>offset</code> plus <code>count</code> exceeds the length of <code>data</code>.
  version:
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RandomNumberGenerator.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes(System.Byte[])
  commentId: M:System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes(System.Byte[])
  id: GetNonZeroBytes(System.Byte[])
  parent: System.Security.Cryptography.RandomNumberGenerator
  langs:
  - csharp
  name: GetNonZeroBytes(Byte[])
  nameWithType: RandomNumberGenerator.GetNonZeroBytes(Byte[])
  fullName: RandomNumberGenerator.GetNonZeroBytes(Byte[])
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: When overridden in a derived class, fills an array of bytes with a cryptographically strong random sequence of nonzero values.
  remarks: The length of the byte array determines how many random bytes are produced.
  example:
  - "The following example creates a random sequence of 100 nonzero bytes and stores it in `random`.  \n  \n [!code-cpp[Classic RandomNumberGenerator.GetNonZeroBytes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic RandomNumberGenerator.GetNonZeroBytes Example/CPP/source.cpp#1)]\n [!code-csharp[Classic RandomNumberGenerator.GetNonZeroBytes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic RandomNumberGenerator.GetNonZeroBytes Example/CS/source.cs#1)]\n [!code-vb[Classic RandomNumberGenerator.GetNonZeroBytes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic RandomNumberGenerator.GetNonZeroBytes Example/VB/source.vb#1)]"
  syntax:
    content: public virtual void GetNonZeroBytes (byte[] data);
    parameters:
    - id: data
      type: System.Byte[]
      description: The array to fill with cryptographically strong random nonzero bytes.
  overload: System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RandomNumberGenerator.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.Security.Cryptography.RandomNumberGenerator.#ctor
  parent: System.Security.Cryptography.RandomNumberGenerator
  isExternal: false
  name: RandomNumberGenerator()
  nameWithType: RandomNumberGenerator.RandomNumberGenerator()
  fullName: RandomNumberGenerator.RandomNumberGenerator()
- uid: System.Security.Cryptography.RandomNumberGenerator.Create
  parent: System.Security.Cryptography.RandomNumberGenerator
  isExternal: false
  name: Create()
  nameWithType: RandomNumberGenerator.Create()
  fullName: RandomNumberGenerator.Create()
- uid: System.Security.Cryptography.RandomNumberGenerator
  parent: System.Security.Cryptography
  isExternal: false
  name: RandomNumberGenerator
  nameWithType: RandomNumberGenerator
  fullName: System.Security.Cryptography.RandomNumberGenerator
- uid: System.Security.Cryptography.RandomNumberGenerator.Create(System.String)
  parent: System.Security.Cryptography.RandomNumberGenerator
  isExternal: false
  name: Create(String)
  nameWithType: RandomNumberGenerator.Create(String)
  fullName: RandomNumberGenerator.Create(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.RandomNumberGenerator.Dispose
  parent: System.Security.Cryptography.RandomNumberGenerator
  isExternal: false
  name: Dispose()
  nameWithType: RandomNumberGenerator.Dispose()
  fullName: RandomNumberGenerator.Dispose()
- uid: System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)
  parent: System.Security.Cryptography.RandomNumberGenerator
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: RandomNumberGenerator.Dispose(Boolean)
  fullName: RandomNumberGenerator.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[])
  parent: System.Security.Cryptography.RandomNumberGenerator
  isExternal: false
  name: GetBytes(Byte[])
  nameWithType: RandomNumberGenerator.GetBytes(Byte[])
  fullName: RandomNumberGenerator.GetBytes(Byte[])
- uid: System.Byte
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Byte[]
  parent: System
  isExternal: false
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.RandomNumberGenerator
  isExternal: false
  name: GetBytes(Byte[], Int32, Int32)
  nameWithType: RandomNumberGenerator.GetBytes(Byte[], Int32, Int32)
  fullName: RandomNumberGenerator.GetBytes(Byte[], Int32, Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes(System.Byte[])
  parent: System.Security.Cryptography.RandomNumberGenerator
  isExternal: false
  name: GetNonZeroBytes(Byte[])
  nameWithType: RandomNumberGenerator.GetNonZeroBytes(Byte[])
  fullName: RandomNumberGenerator.GetNonZeroBytes(Byte[])
- uid: System.Security.Cryptography.RandomNumberGenerator.#ctor*
  parent: System.Security.Cryptography.RandomNumberGenerator
  isExternal: false
  name: RandomNumberGenerator
  nameWithType: RandomNumberGenerator.RandomNumberGenerator
  fullName: RandomNumberGenerator.RandomNumberGenerator
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RandomNumberGenerator.xml
- uid: System.Security.Cryptography.RandomNumberGenerator.Create*
  parent: System.Security.Cryptography.RandomNumberGenerator
  isExternal: false
  name: Create
  nameWithType: RandomNumberGenerator.Create
  fullName: RandomNumberGenerator.Create
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RandomNumberGenerator.xml
- uid: System.Security.Cryptography.RandomNumberGenerator.Dispose*
  parent: System.Security.Cryptography.RandomNumberGenerator
  isExternal: false
  name: Dispose
  nameWithType: RandomNumberGenerator.Dispose
  fullName: RandomNumberGenerator.Dispose
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RandomNumberGenerator.xml
- uid: System.Security.Cryptography.RandomNumberGenerator.GetBytes*
  parent: System.Security.Cryptography.RandomNumberGenerator
  isExternal: false
  name: GetBytes
  nameWithType: RandomNumberGenerator.GetBytes
  fullName: RandomNumberGenerator.GetBytes
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RandomNumberGenerator.xml
- uid: System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes*
  parent: System.Security.Cryptography.RandomNumberGenerator
  isExternal: false
  name: GetNonZeroBytes
  nameWithType: RandomNumberGenerator.GetNonZeroBytes
  fullName: RandomNumberGenerator.GetNonZeroBytes
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RandomNumberGenerator.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
