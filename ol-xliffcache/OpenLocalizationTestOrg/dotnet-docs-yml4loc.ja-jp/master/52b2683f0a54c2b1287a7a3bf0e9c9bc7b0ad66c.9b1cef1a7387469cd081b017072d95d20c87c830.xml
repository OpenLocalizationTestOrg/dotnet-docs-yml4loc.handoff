{"nodes":[{"content":"Stores mappings between delegates and event tokens, to support the implementation of a Windows Runtime event in managed code.","nodes":[{"pos":[0,125],"content":"Stores mappings between delegates and event tokens, to support the implementation of a Windows Runtime event in managed code.","nodes":[{"content":"Stores mappings between delegates and event tokens, to support the implementation of a Windows Runtime event in managed code.","pos":[0,125]}]}],"pos":[1366,1492],"yaml":true},{"content":"Use this type when you need to manage the addition and removal of events manually.  \n  \n An instance of this table stores the delegates that represent the event handlers that have been added to an event. To raise the event, invoke the delegate that is returned by the <xref:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable%601.InvocationList%2A> property, if it is not `null`. An instance of this table is required for each event.","nodes":[{"pos":[0,82],"content":"Use this type when you need to manage the addition and removal of events manually.","nodes":[{"content":"Use this type when you need to manage the addition and removal of events manually.","pos":[0,82]}]},{"pos":[89,455],"content":"An instance of this table stores the delegates that represent the event handlers that have been added to an event. To raise the event, invoke the delegate that is returned by the <xref:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable%601.InvocationList%2A> property, if it is not `null`. An instance of this table is required for each event.","nodes":[{"content":"An instance of this table stores the delegates that represent the event handlers that have been added to an event.","pos":[0,114]},{"content":"To raise the event, invoke the delegate that is returned by the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable%601.InvocationList%2A&gt;</ph> property, if it is not <ph id=\"ph2\">`null`</ph>.","pos":[115,312],"source":" To raise the event, invoke the delegate that is returned by the <xref:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable%601.InvocationList%2A> property, if it is not `null`."},{"content":"An instance of this table is required for each event.","pos":[313,366]}]}],"pos":[1503,1963],"yaml":true,"extradata":"MT"},{"content":"The type of the event handler delegate for a particular event.","nodes":[{"pos":[0,62],"content":"The type of the event handler delegate for a particular event.","nodes":[{"content":"The type of the event handler delegate for a particular event.","pos":[0,62]}]}],"pos":[2106,2169],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1\"></xref> class.","nodes":[{"pos":[0,137],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1\"></xref> class."}],"pos":[3979,4117],"yaml":true},{"content":"<code>T</code> is not a delegate type.","nodes":[{"pos":[0,38],"content":"<ph id=\"ph1\">&lt;code&gt;T&lt;/code&gt;</ph> is not a delegate type.","source":"<code>T</code> is not a delegate type."}],"pos":[4417,4456],"yaml":true},{"content":"Adds the specified event handler to the table and to the invocation list, and returns a token that can be used to remove the event handler.","nodes":[{"pos":[0,139],"content":"Adds the specified event handler to the table and to the invocation list, and returns a token that can be used to remove the event handler.","nodes":[{"content":"Adds the specified event handler to the table and to the invocation list, and returns a token that can be used to remove the event handler.","pos":[0,139]}]}],"pos":[5915,6055],"yaml":true},{"content":"The event handler to add.","nodes":[{"pos":[0,25],"content":"The event handler to add.","nodes":[{"content":"The event handler to add.","pos":[0,25]}]}],"pos":[6250,6276],"yaml":true},{"content":"A token that can be used to remove the event handler from the table and the invocation list.","nodes":[{"pos":[0,92],"content":"A token that can be used to remove the event handler from the table and the invocation list.","nodes":[{"content":"A token that can be used to remove the event handler from the table and the invocation list.","pos":[0,92]}]}],"pos":[6388,6481],"yaml":true},{"content":"Returns the specified event registration token table, if it is not `null`; otherwise, returns a new event registration token table.","nodes":[{"pos":[0,131],"content":"Returns the specified event registration token table, if it is not <ph id=\"ph1\">`null`</ph>; otherwise, returns a new event registration token table.","source":"Returns the specified event registration token table, if it is not `null`; otherwise, returns a new event registration token table."}],"pos":[8515,8647],"yaml":true},{"content":"Use the <xref:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable%601.GetOrCreateEventRegistrationTokenTable%2A> method to initialize an event registration token table in scenarios where any of several threads can create the table. If this method is called on multiple threads at the same time, the same event registration token table is returned on all threads.","nodes":[{"pos":[0,384],"content":"Use the <xref:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable%601.GetOrCreateEventRegistrationTokenTable%2A> method to initialize an event registration token table in scenarios where any of several threads can create the table. If this method is called on multiple threads at the same time, the same event registration token table is returned on all threads.","nodes":[{"content":"Use the <xref:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable%601.GetOrCreateEventRegistrationTokenTable%2A> method to initialize an event registration token table in scenarios where any of several threads can create the table. If this method is called on multiple threads at the same time, the same event registration token table is returned on all threads.","pos":[0,384],"nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable%601.GetOrCreateEventRegistrationTokenTable%2A&gt;</ph> method to initialize an event registration token table in scenarios where any of several threads can create the table.","pos":[0,253],"source":"Use the <xref:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable%601.GetOrCreateEventRegistrationTokenTable%2A> method to initialize an event registration token table in scenarios where any of several threads can create the table."},{"content":"If this method is called on multiple threads at the same time, the same event registration token table is returned on all threads.","pos":[254,384]}]}]}],"pos":[8658,9043],"yaml":true,"extradata":"MT"},{"content":"An event registration token table, passed by reference.","nodes":[{"pos":[0,55],"content":"An event registration token table, passed by reference.","nodes":[{"content":"An event registration token table, passed by reference.","pos":[0,55]}]}],"pos":[9441,9497],"yaml":true},{"content":"The event registration token table that is specified by <code>refEventTable</code>, if it is not `null`; otherwise, a new event registration token table.","nodes":[{"pos":[0,153],"content":"The event registration token table that is specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">refEventTable</ph><ept id=\"p1\">&lt;/code&gt;</ept>, if it is not <ph id=\"ph2\">`null`</ph>; otherwise, a new event registration token table.","source":"The event registration token table that is specified by <code>refEventTable</code>, if it is not `null`; otherwise, a new event registration token table."}],"pos":[9616,9770],"yaml":true},{"content":"Gets or sets a delegate of type <code>T</code> whose invocation list includes all the event handler delegates that have been added, and that have not yet been removed. Invoking this delegate invokes all the event handlers.","nodes":[{"pos":[0,222],"content":"Gets or sets a delegate of type <code>T</code> whose invocation list includes all the event handler delegates that have been added, and that have not yet been removed. Invoking this delegate invokes all the event handlers.","nodes":[{"content":"Gets or sets a delegate of type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">T</ph><ept id=\"p1\">&lt;/code&gt;</ept> whose invocation list includes all the event handler delegates that have been added, and that have not yet been removed.","pos":[0,167],"source":"Gets or sets a delegate of type <code>T</code> whose invocation list includes all the event handler delegates that have been added, and that have not yet been removed."},{"content":"Invoking this delegate invokes all the event handlers.","pos":[168,222]}]}],"pos":[11349,11572],"yaml":true},{"content":"A delegate of type <code>T</code> that represents all the event handler delegates that are currently registered for an event.","nodes":[{"pos":[0,125],"content":"A delegate of type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">T</ph><ept id=\"p1\">&lt;/code&gt;</ept> that represents all the event handler delegates that are currently registered for an event.","source":"A delegate of type <code>T</code> that represents all the event handler delegates that are currently registered for an event."}],"pos":[11678,11804],"yaml":true},{"content":"Removes the event handler that is associated with the specified token from the table and the invocation list.","nodes":[{"pos":[0,109],"content":"Removes the event handler that is associated with the specified token from the table and the invocation list.","nodes":[{"content":"Removes the event handler that is associated with the specified token from the table and the invocation list.","pos":[0,109]}]}],"pos":[13663,13773],"yaml":true},{"content":"If the token is not registered, the table and the invocation list are not modified.","nodes":[{"pos":[0,83],"content":"If the token is not registered, the table and the invocation list are not modified.","nodes":[{"content":"If the token is not registered, the table and the invocation list are not modified.","pos":[0,83]}]}],"pos":[13784,13868],"yaml":true,"extradata":"MT"},{"content":"The token that was returned when the event handler was added.","nodes":[{"pos":[0,61],"content":"The token that was returned when the event handler was added.","nodes":[{"content":"The token that was returned when the event handler was added.","pos":[0,61]}]}],"pos":[14132,14194],"yaml":true},{"content":"Removes the specified event handler delegate from the table and the invocation list.","nodes":[{"pos":[0,84],"content":"Removes the specified event handler delegate from the table and the invocation list.","nodes":[{"content":"Removes the specified event handler delegate from the table and the invocation list.","pos":[0,84]}]}],"pos":[15796,15881],"yaml":true},{"content":"If the handler is not registered, the table and the invocation list are not modified.","nodes":[{"pos":[0,85],"content":"If the handler is not registered, the table and the invocation list are not modified.","nodes":[{"content":"If the handler is not registered, the table and the invocation list are not modified.","pos":[0,85]}]}],"pos":[15892,15978],"yaml":true,"extradata":"MT"},{"content":"The event handler to remove.","nodes":[{"pos":[0,28],"content":"The event handler to remove.","nodes":[{"content":"The event handler to remove.","pos":[0,28]}]}],"pos":[16112,16141],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1\n  commentId: T:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1\n  id: EventRegistrationTokenTable`1\n  children:\n  - System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.#ctor\n  - System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.AddEventHandler(`0)\n  - System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.GetOrCreateEventRegistrationTokenTable(System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable{`0}@)\n  - System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.InvocationList\n  - System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.RemoveEventHandler(System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken)\n  - System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.RemoveEventHandler(`0)\n  langs:\n  - csharp\n  name: EventRegistrationTokenTable<T>\n  nameWithType: EventRegistrationTokenTable<T>\n  fullName: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable<T>\n  type: Class\n  assemblies:\n  - System.Runtime.InteropServices.WindowsRuntime\n  - mscorlib\n  namespace: System.Runtime.InteropServices.WindowsRuntime\n  summary: Stores mappings between delegates and event tokens, to support the implementation of a Windows Runtime event in managed code.\n  remarks: \"Use this type when you need to manage the addition and removal of events manually.  \\n  \\n An instance of this table stores the delegates that represent the event handlers that have been added to an event. To raise the event, invoke the delegate that is returned by the <xref:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable%601.InvocationList%2A> property, if it is not `null`. An instance of this table is required for each event.\"\n  syntax:\n    content: 'public sealed class EventRegistrationTokenTable<T> where T : class'\n    typeParameters:\n    - id: T\n      description: The type of the event handler delegate for a particular event.\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices.WindowsRuntime/EventRegistrationTokenTable`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.#ctor\n  commentId: M:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.#ctor\n  id: '#ctor'\n  parent: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1\n  langs:\n  - csharp\n  name: EventRegistrationTokenTable<T>()\n  nameWithType: EventRegistrationTokenTable<T>.EventRegistrationTokenTable<T>()\n  fullName: EventRegistrationTokenTable<T>.EventRegistrationTokenTable<T>()\n  type: Constructor\n  assemblies:\n  - System.Runtime.InteropServices.WindowsRuntime\n  - mscorlib\n  namespace: System.Runtime.InteropServices.WindowsRuntime\n  summary: Initializes a new instance of the <xref href=\"System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1\"></xref> class.\n  syntax:\n    content: public EventRegistrationTokenTable ();\n    parameters: []\n  overload: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.#ctor*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>T</code> is not a delegate type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices.WindowsRuntime/EventRegistrationTokenTable`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.AddEventHandler(`0)\n  commentId: M:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.AddEventHandler(`0)\n  id: AddEventHandler(`0)\n  parent: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1\n  langs:\n  - csharp\n  name: AddEventHandler(T)\n  nameWithType: EventRegistrationTokenTable<T>.AddEventHandler(T)\n  fullName: EventRegistrationTokenTable<T>.AddEventHandler(T)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices.WindowsRuntime\n  - mscorlib\n  namespace: System.Runtime.InteropServices.WindowsRuntime\n  summary: Adds the specified event handler to the table and to the invocation list, and returns a token that can be used to remove the event handler.\n  syntax:\n    content: public System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken AddEventHandler (T handler);\n    parameters:\n    - id: handler\n      type: T\n      description: The event handler to add.\n    return:\n      type: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken\n      description: A token that can be used to remove the event handler from the table and the invocation list.\n  overload: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.AddEventHandler*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices.WindowsRuntime/EventRegistrationTokenTable`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.GetOrCreateEventRegistrationTokenTable(System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable{`0}@)\n  commentId: M:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.GetOrCreateEventRegistrationTokenTable(System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable{`0}@)\n  id: GetOrCreateEventRegistrationTokenTable(System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable{`0}@)\n  parent: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1\n  langs:\n  - csharp\n  name: GetOrCreateEventRegistrationTokenTable(EventRegistrationTokenTable<T>)\n  nameWithType: EventRegistrationTokenTable<T>.GetOrCreateEventRegistrationTokenTable(EventRegistrationTokenTable<T>)\n  fullName: EventRegistrationTokenTable<T>.GetOrCreateEventRegistrationTokenTable(EventRegistrationTokenTable<T>)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices.WindowsRuntime\n  - mscorlib\n  namespace: System.Runtime.InteropServices.WindowsRuntime\n  summary: Returns the specified event registration token table, if it is not `null`; otherwise, returns a new event registration token table.\n  remarks: Use the <xref:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable%601.GetOrCreateEventRegistrationTokenTable%2A> method to initialize an event registration token table in scenarios where any of several threads can create the table. If this method is called on multiple threads at the same time, the same event registration token table is returned on all threads.\n  syntax:\n    content: public static System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable<T> GetOrCreateEventRegistrationTokenTable (ref System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable<T> refEventTable);\n    parameters:\n    - id: refEventTable\n      type: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1\n      description: An event registration token table, passed by reference.\n    return:\n      type: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1\n      description: The event registration token table that is specified by <code>refEventTable</code>, if it is not `null`; otherwise, a new event registration token table.\n  overload: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.GetOrCreateEventRegistrationTokenTable*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices.WindowsRuntime/EventRegistrationTokenTable`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.InvocationList\n  commentId: P:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.InvocationList\n  id: InvocationList\n  parent: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1\n  langs:\n  - csharp\n  name: InvocationList\n  nameWithType: EventRegistrationTokenTable<T>.InvocationList\n  fullName: EventRegistrationTokenTable<T>.InvocationList\n  type: Property\n  assemblies:\n  - System.Runtime.InteropServices.WindowsRuntime\n  - mscorlib\n  namespace: System.Runtime.InteropServices.WindowsRuntime\n  summary: Gets or sets a delegate of type <code>T</code> whose invocation list includes all the event handler delegates that have been added, and that have not yet been removed. Invoking this delegate invokes all the event handlers.\n  syntax:\n    content: public T InvocationList { get; set; }\n    return:\n      type: T\n      description: A delegate of type <code>T</code> that represents all the event handler delegates that are currently registered for an event.\n  overload: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.InvocationList*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices.WindowsRuntime/EventRegistrationTokenTable`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.RemoveEventHandler(System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken)\n  commentId: M:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.RemoveEventHandler(System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken)\n  id: RemoveEventHandler(System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken)\n  parent: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1\n  langs:\n  - csharp\n  name: RemoveEventHandler(EventRegistrationToken)\n  nameWithType: EventRegistrationTokenTable<T>.RemoveEventHandler(EventRegistrationToken)\n  fullName: EventRegistrationTokenTable<T>.RemoveEventHandler(EventRegistrationToken)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices.WindowsRuntime\n  - mscorlib\n  namespace: System.Runtime.InteropServices.WindowsRuntime\n  summary: Removes the event handler that is associated with the specified token from the table and the invocation list.\n  remarks: If the token is not registered, the table and the invocation list are not modified.\n  syntax:\n    content: public void RemoveEventHandler (System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);\n    parameters:\n    - id: token\n      type: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken\n      description: The token that was returned when the event handler was added.\n  overload: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.RemoveEventHandler*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices.WindowsRuntime/EventRegistrationTokenTable`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.RemoveEventHandler(`0)\n  commentId: M:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.RemoveEventHandler(`0)\n  id: RemoveEventHandler(`0)\n  parent: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1\n  langs:\n  - csharp\n  name: RemoveEventHandler(T)\n  nameWithType: EventRegistrationTokenTable<T>.RemoveEventHandler(T)\n  fullName: EventRegistrationTokenTable<T>.RemoveEventHandler(T)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices.WindowsRuntime\n  - mscorlib\n  namespace: System.Runtime.InteropServices.WindowsRuntime\n  summary: Removes the specified event handler delegate from the table and the invocation list.\n  remarks: If the handler is not registered, the table and the invocation list are not modified.\n  syntax:\n    content: public void RemoveEventHandler (T handler);\n    parameters:\n    - id: handler\n      type: T\n      description: The event handler to remove.\n  overload: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.RemoveEventHandler*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices.WindowsRuntime/EventRegistrationTokenTable`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.#ctor\n  parent: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1\n  isExternal: false\n  name: EventRegistrationTokenTable<T>()\n  nameWithType: EventRegistrationTokenTable<T>.EventRegistrationTokenTable<T>()\n  fullName: EventRegistrationTokenTable<T>.EventRegistrationTokenTable<T>()\n- uid: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.AddEventHandler(`0)\n  parent: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1\n  isExternal: false\n  name: AddEventHandler(T)\n  nameWithType: EventRegistrationTokenTable<T>.AddEventHandler(T)\n  fullName: EventRegistrationTokenTable<T>.AddEventHandler(T)\n- uid: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken\n  parent: System.Runtime.InteropServices.WindowsRuntime\n  isExternal: false\n  name: EventRegistrationToken\n  nameWithType: EventRegistrationToken\n  fullName: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken\n- uid: T\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.GetOrCreateEventRegistrationTokenTable(System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable{`0}@)\n  parent: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1\n  isExternal: false\n  name: GetOrCreateEventRegistrationTokenTable(EventRegistrationTokenTable<T>)\n  nameWithType: EventRegistrationTokenTable<T>.GetOrCreateEventRegistrationTokenTable(EventRegistrationTokenTable<T>)\n  fullName: EventRegistrationTokenTable<T>.GetOrCreateEventRegistrationTokenTable(EventRegistrationTokenTable<T>)\n- uid: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1\n  parent: System.Runtime.InteropServices.WindowsRuntime\n  isExternal: false\n  name: EventRegistrationTokenTable<T>\n  nameWithType: EventRegistrationTokenTable<T>\n  fullName: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable<T>\n- uid: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.InvocationList\n  parent: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1\n  isExternal: false\n  name: InvocationList\n  nameWithType: EventRegistrationTokenTable<T>.InvocationList\n  fullName: EventRegistrationTokenTable<T>.InvocationList\n- uid: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.RemoveEventHandler(System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken)\n  parent: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1\n  isExternal: false\n  name: RemoveEventHandler(EventRegistrationToken)\n  nameWithType: EventRegistrationTokenTable<T>.RemoveEventHandler(EventRegistrationToken)\n  fullName: EventRegistrationTokenTable<T>.RemoveEventHandler(EventRegistrationToken)\n- uid: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.RemoveEventHandler(`0)\n  parent: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1\n  isExternal: false\n  name: RemoveEventHandler(T)\n  nameWithType: EventRegistrationTokenTable<T>.RemoveEventHandler(T)\n  fullName: EventRegistrationTokenTable<T>.RemoveEventHandler(T)\n- uid: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.#ctor*\n  parent: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1\n  isExternal: false\n  name: EventRegistrationTokenTable<T>\n  nameWithType: EventRegistrationTokenTable<T>.EventRegistrationTokenTable<T>\n  fullName: EventRegistrationTokenTable<T>.EventRegistrationTokenTable<T>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices.WindowsRuntime/EventRegistrationTokenTable`1.xml\n- uid: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.AddEventHandler*\n  parent: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1\n  isExternal: false\n  name: AddEventHandler\n  nameWithType: EventRegistrationTokenTable<T>.AddEventHandler\n  fullName: EventRegistrationTokenTable<T>.AddEventHandler\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices.WindowsRuntime/EventRegistrationTokenTable`1.xml\n- uid: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.GetOrCreateEventRegistrationTokenTable*\n  parent: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1\n  isExternal: false\n  name: GetOrCreateEventRegistrationTokenTable\n  nameWithType: EventRegistrationTokenTable<T>.GetOrCreateEventRegistrationTokenTable\n  fullName: EventRegistrationTokenTable<T>.GetOrCreateEventRegistrationTokenTable\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices.WindowsRuntime/EventRegistrationTokenTable`1.xml\n- uid: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.InvocationList*\n  parent: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1\n  isExternal: false\n  name: InvocationList\n  nameWithType: EventRegistrationTokenTable<T>.InvocationList\n  fullName: EventRegistrationTokenTable<T>.InvocationList\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices.WindowsRuntime/EventRegistrationTokenTable`1.xml\n- uid: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.RemoveEventHandler*\n  parent: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1\n  isExternal: false\n  name: RemoveEventHandler\n  nameWithType: EventRegistrationTokenTable<T>.RemoveEventHandler\n  fullName: EventRegistrationTokenTable<T>.RemoveEventHandler\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices.WindowsRuntime/EventRegistrationTokenTable`1.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}