{"nodes":[{"content":"Allows checks against the active principal (see <xref href=\"System.Security.Principal.IPrincipal\"></xref>) using the language constructs defined for both declarative and imperative security actions. This class cannot be inherited.","nodes":[{"pos":[0,230],"content":"Allows checks against the active principal (see <xref href=\"System.Security.Principal.IPrincipal\"></xref>) using the language constructs defined for both declarative and imperative security actions. This class cannot be inherited.","nodes":[{"content":"Allows checks against the active principal (see <ph id=\"ph1\">&lt;xref href=\"System.Security.Principal.IPrincipal\"&gt;&lt;/xref&gt;</ph>) using the language constructs defined for both declarative and imperative security actions.","pos":[0,198],"source":"Allows checks against the active principal (see <xref href=\"System.Security.Principal.IPrincipal\"></xref>) using the language constructs defined for both declarative and imperative security actions."},{"content":"This class cannot be inherited.","pos":[199,230]}]}],"pos":[1556,1787],"yaml":true},{"content":"By passing identity information (user name and role) to the constructor, <xref:System.Security.Permissions.PrincipalPermission> can be used to demand that the identity of the active principal matches this information.  \n  \n To match the active <xref:System.Security.Principal.IPrincipal> and associated <xref:System.Security.Principal.IIdentity>, both the specified identity and role must match. If `null` identity string is used, it is interpreted as a request to match any identity. Use of `null` role string will match any role. By implication, passing `null` parameter for `name` or `role` to <xref:System.Security.Permissions.PrincipalPermission> will match the identity and roles in any <xref:System.Security.Principal.IPrincipal>. It is also possible to construct a <xref:System.Security.Permissions.PrincipalPermission> that only determines whether the <xref:System.Security.Principal.IIdentity> represents an authenticated or unauthenticated entity. In this case, `name` and `role` are ignored.  \n  \n Unlike most other permissions, <xref:System.Security.Permissions.PrincipalPermission> does not extend <xref:System.Security.CodeAccessPermission>. It does, however, implement the <xref:System.Security.IPermission> interface. This is because <xref:System.Security.Permissions.PrincipalPermission> is not a code access permission; that is, it is not granted based on the identity of the executing assembly. Instead, it allows code to perform actions (<xref:System.Security.Permissions.PrincipalPermission.Demand%2A>, <xref:System.Security.Permissions.PrincipalPermission.Union%2A>, <xref:System.Security.Permissions.PrincipalPermission.Intersect%2A>, and so on) against the current user identity in a manner consistent with the way those actions are performed for code access and code identity permissions.  \n  \n> [!IMPORTANT]\n>  Prior to a demand for principal permission it is necessary to set the current application domain's principal policy to the enumeration value <xref:System.Security.Principal.PrincipalPolicy.WindowsPrincipal>. By default, the principal policy is set to <xref:System.Security.Principal.PrincipalPolicy.UnauthenticatedPrincipal>. If you do not set the principal policy to <xref:System.Security.Principal.PrincipalPolicy.WindowsPrincipal>, a demand for principal permission will fail. The following code should be executed before the principal permission is demanded:  \n>   \n>  `AppDomain.CurrentDomain.SetPrincipalPolicy(PrincipalPolicy.WindowsPrincipal).`","nodes":[{"pos":[0,217],"content":"By passing identity information (user name and role) to the constructor, <xref:System.Security.Permissions.PrincipalPermission> can be used to demand that the identity of the active principal matches this information.","nodes":[{"content":"By passing identity information (user name and role) to the constructor, <ph id=\"ph1\">&lt;xref:System.Security.Permissions.PrincipalPermission&gt;</ph> can be used to demand that the identity of the active principal matches this information.","pos":[0,217],"source":"By passing identity information (user name and role) to the constructor, <xref:System.Security.Permissions.PrincipalPermission> can be used to demand that the identity of the active principal matches this information."}]},{"pos":[224,1003],"content":"To match the active <xref:System.Security.Principal.IPrincipal> and associated <xref:System.Security.Principal.IIdentity>, both the specified identity and role must match. If `null` identity string is used, it is interpreted as a request to match any identity. Use of `null` role string will match any role. By implication, passing `null` parameter for `name` or `role` to <xref:System.Security.Permissions.PrincipalPermission> will match the identity and roles in any <xref:System.Security.Principal.IPrincipal>. It is also possible to construct a <xref:System.Security.Permissions.PrincipalPermission> that only determines whether the <xref:System.Security.Principal.IIdentity> represents an authenticated or unauthenticated entity. In this case, `name` and `role` are ignored.","nodes":[{"content":"To match the active <ph id=\"ph1\">&lt;xref:System.Security.Principal.IPrincipal&gt;</ph> and associated <ph id=\"ph2\">&lt;xref:System.Security.Principal.IIdentity&gt;</ph>, both the specified identity and role must match.","pos":[0,171],"source":"To match the active <xref:System.Security.Principal.IPrincipal> and associated <xref:System.Security.Principal.IIdentity>, both the specified identity and role must match."},{"content":"If <ph id=\"ph1\">`null`</ph> identity string is used, it is interpreted as a request to match any identity.","pos":[172,260],"source":" If `null` identity string is used, it is interpreted as a request to match any identity."},{"content":"Use of <ph id=\"ph1\">`null`</ph> role string will match any role.","pos":[261,307],"source":" Use of `null` role string will match any role."},{"content":"By implication, passing <ph id=\"ph1\">`null`</ph> parameter for <ph id=\"ph2\">`name`</ph> or <ph id=\"ph3\">`role`</ph> to <ph id=\"ph4\">&lt;xref:System.Security.Permissions.PrincipalPermission&gt;</ph> will match the identity and roles in any <ph id=\"ph5\">&lt;xref:System.Security.Principal.IPrincipal&gt;</ph>.","pos":[308,513],"source":" By implication, passing `null` parameter for `name` or `role` to <xref:System.Security.Permissions.PrincipalPermission> will match the identity and roles in any <xref:System.Security.Principal.IPrincipal>."},{"content":"It is also possible to construct a <ph id=\"ph1\">&lt;xref:System.Security.Permissions.PrincipalPermission&gt;</ph> that only determines whether the <ph id=\"ph2\">&lt;xref:System.Security.Principal.IIdentity&gt;</ph> represents an authenticated or unauthenticated entity.","pos":[514,734],"source":" It is also possible to construct a <xref:System.Security.Permissions.PrincipalPermission> that only determines whether the <xref:System.Security.Principal.IIdentity> represents an authenticated or unauthenticated entity."},{"content":"In this case, <ph id=\"ph1\">`name`</ph> and <ph id=\"ph2\">`role`</ph> are ignored.","pos":[735,779],"source":" In this case, `name` and `role` are ignored."}]},{"pos":[1010,1814],"content":"Unlike most other permissions, <xref:System.Security.Permissions.PrincipalPermission> does not extend <xref:System.Security.CodeAccessPermission>. It does, however, implement the <xref:System.Security.IPermission> interface. This is because <xref:System.Security.Permissions.PrincipalPermission> is not a code access permission; that is, it is not granted based on the identity of the executing assembly. Instead, it allows code to perform actions (<xref:System.Security.Permissions.PrincipalPermission.Demand%2A>, <xref:System.Security.Permissions.PrincipalPermission.Union%2A>, <xref:System.Security.Permissions.PrincipalPermission.Intersect%2A>, and so on) against the current user identity in a manner consistent with the way those actions are performed for code access and code identity permissions.","nodes":[{"content":"Unlike most other permissions, <xref:System.Security.Permissions.PrincipalPermission> does not extend <xref:System.Security.CodeAccessPermission>. It does, however, implement the <xref:System.Security.IPermission> interface. This is because <xref:System.Security.Permissions.PrincipalPermission> is not a code access permission; that is, it is not granted based on the identity of the executing assembly. Instead, it allows code to perform actions (<xref:System.Security.Permissions.PrincipalPermission.Demand%2A>, <xref:System.Security.Permissions.PrincipalPermission.Union%2A>, <xref:System.Security.Permissions.PrincipalPermission.Intersect%2A>, and so on) against the current user identity in a manner consistent with the way those actions are performed for code access and code identity permissions.","pos":[0,804],"nodes":[{"content":"Unlike most other permissions, <ph id=\"ph1\">&lt;xref:System.Security.Permissions.PrincipalPermission&gt;</ph> does not extend <ph id=\"ph2\">&lt;xref:System.Security.CodeAccessPermission&gt;</ph>.","pos":[0,146],"source":"Unlike most other permissions, <xref:System.Security.Permissions.PrincipalPermission> does not extend <xref:System.Security.CodeAccessPermission>."},{"content":"It does, however, implement the <ph id=\"ph1\">&lt;xref:System.Security.IPermission&gt;</ph> interface.","pos":[147,224],"source":" It does, however, implement the <xref:System.Security.IPermission> interface."},{"content":"This is because <ph id=\"ph1\">&lt;xref:System.Security.Permissions.PrincipalPermission&gt;</ph> is not a code access permission; that is, it is not granted based on the identity of the executing assembly.","pos":[225,404],"source":" This is because <xref:System.Security.Permissions.PrincipalPermission> is not a code access permission; that is, it is not granted based on the identity of the executing assembly."},{"content":"Instead, it allows code to perform actions (<ph id=\"ph1\">&lt;xref:System.Security.Permissions.PrincipalPermission.Demand%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Security.Permissions.PrincipalPermission.Union%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Security.Permissions.PrincipalPermission.Intersect%2A&gt;</ph>, and so on) against the current user identity in a manner consistent with the way those actions are performed for code access and code identity permissions.","pos":[405,804],"source":" Instead, it allows code to perform actions (<xref:System.Security.Permissions.PrincipalPermission.Demand%2A>, <xref:System.Security.Permissions.PrincipalPermission.Union%2A>, <xref:System.Security.Permissions.PrincipalPermission.Intersect%2A>, and so on) against the current user identity in a manner consistent with the way those actions are performed for code access and code identity permissions."}]}]},{"pos":[1822,2400],"content":"[!IMPORTANT]\n Prior to a demand for principal permission it is necessary to set the current application domain's principal policy to the enumeration value <xref:System.Security.Principal.PrincipalPolicy.WindowsPrincipal>. By default, the principal policy is set to <xref:System.Security.Principal.PrincipalPolicy.UnauthenticatedPrincipal>. If you do not set the principal policy to <xref:System.Security.Principal.PrincipalPolicy.WindowsPrincipal>, a demand for principal permission will fail. The following code should be executed before the principal permission is demanded:","leadings":["","> "],"nodes":[{"content":" Prior to a demand for principal permission it is necessary to set the current application domain's principal policy to the enumeration value <xref:System.Security.Principal.PrincipalPolicy.WindowsPrincipal>. By default, the principal policy is set to <xref:System.Security.Principal.PrincipalPolicy.UnauthenticatedPrincipal>. If you do not set the principal policy to <xref:System.Security.Principal.PrincipalPolicy.WindowsPrincipal>, a demand for principal permission will fail. The following code should be executed before the principal permission is demanded:","pos":[13,576],"nodes":[{"content":"Prior to a demand for principal permission it is necessary to set the current application domain's principal policy to the enumeration value <ph id=\"ph1\">&lt;xref:System.Security.Principal.PrincipalPolicy.WindowsPrincipal&gt;</ph>.","pos":[1,208],"source":" Prior to a demand for principal permission it is necessary to set the current application domain's principal policy to the enumeration value <xref:System.Security.Principal.PrincipalPolicy.WindowsPrincipal>."},{"content":"By default, the principal policy is set to <ph id=\"ph1\">&lt;xref:System.Security.Principal.PrincipalPolicy.UnauthenticatedPrincipal&gt;</ph>.","pos":[209,326],"source":" By default, the principal policy is set to <xref:System.Security.Principal.PrincipalPolicy.UnauthenticatedPrincipal>."},{"content":"If you do not set the principal policy to <ph id=\"ph1\">&lt;xref:System.Security.Principal.PrincipalPolicy.WindowsPrincipal&gt;</ph>, a demand for principal permission will fail.","pos":[327,480],"source":" If you do not set the principal policy to <xref:System.Security.Principal.PrincipalPolicy.WindowsPrincipal>, a demand for principal permission will fail."},{"content":"The following code should be executed before the principal permission is demanded:","pos":[481,563]}]}]}],"pos":[1798,4300],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Security.Permissions.PrincipalPermission\"></xref> class with the specified <xref href=\"System.Security.Permissions.PermissionState\"></xref>.","nodes":[{"pos":[0,193],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.PrincipalPermission\"&gt;&lt;/xref&gt;</ph> class with the specified <ph id=\"ph2\">&lt;xref href=\"System.Security.Permissions.PermissionState\"&gt;&lt;/xref&gt;</ph>.","source":"Initializes a new instance of the <xref href=\"System.Security.Permissions.PrincipalPermission\"></xref> class with the specified <xref href=\"System.Security.Permissions.PermissionState\"></xref>."}],"pos":[7561,7755],"yaml":true},{"content":"`None` matches only the unauthenticated principal (<xref:System.Security.Permissions.PrincipalPermissionAttribute.Name%2A> is the empty string (\"\"), no <xref:System.Security.Permissions.PrincipalPermissionAttribute.Role%2A>, <xref:System.Security.Permissions.PrincipalPermissionAttribute.Authenticated%2A> is `false`). `Unrestricted` matches all principals (<xref:System.Security.Permissions.PrincipalPermissionAttribute.Name%2A> is `null`, <xref:System.Security.Permissions.PrincipalPermissionAttribute.Role%2A> is `null`).  \n  \n> [!NOTE]\n>  This constructor is included for consistency with the design of other permissions, but is not useful in practice.","nodes":[{"pos":[0,524],"content":"`None` matches only the unauthenticated principal (<xref:System.Security.Permissions.PrincipalPermissionAttribute.Name%2A> is the empty string (\"\"), no <xref:System.Security.Permissions.PrincipalPermissionAttribute.Role%2A>, <xref:System.Security.Permissions.PrincipalPermissionAttribute.Authenticated%2A> is `false`). `Unrestricted` matches all principals (<xref:System.Security.Permissions.PrincipalPermissionAttribute.Name%2A> is `null`, <xref:System.Security.Permissions.PrincipalPermissionAttribute.Role%2A> is `null`).","nodes":[{"content":"<ph id=\"ph1\">`None`</ph> matches only the unauthenticated principal (<ph id=\"ph2\">&lt;xref:System.Security.Permissions.PrincipalPermissionAttribute.Name%2A&gt;</ph> is the empty string (\"\"), no <ph id=\"ph3\">&lt;xref:System.Security.Permissions.PrincipalPermissionAttribute.Role%2A&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Security.Permissions.PrincipalPermissionAttribute.Authenticated%2A&gt;</ph> is <ph id=\"ph5\">`false`</ph>).","pos":[0,318],"source":"`None` matches only the unauthenticated principal (<xref:System.Security.Permissions.PrincipalPermissionAttribute.Name%2A> is the empty string (\"\"), no <xref:System.Security.Permissions.PrincipalPermissionAttribute.Role%2A>, <xref:System.Security.Permissions.PrincipalPermissionAttribute.Authenticated%2A> is `false`)."},{"content":"<ph id=\"ph1\">`Unrestricted`</ph> matches all principals (<ph id=\"ph2\">&lt;xref:System.Security.Permissions.PrincipalPermissionAttribute.Name%2A&gt;</ph> is <ph id=\"ph3\">`null`</ph>, <ph id=\"ph4\">&lt;xref:System.Security.Permissions.PrincipalPermissionAttribute.Role%2A&gt;</ph> is <ph id=\"ph5\">`null`</ph>).","pos":[319,524],"source":"`Unrestricted` matches all principals (<xref:System.Security.Permissions.PrincipalPermissionAttribute.Name%2A> is `null`, <xref:System.Security.Permissions.PrincipalPermissionAttribute.Role%2A> is `null`)."}]},{"pos":[532,656],"content":"[!NOTE]\n This constructor is included for consistency with the design of other permissions, but is not useful in practice.","leadings":["","> "],"nodes":[{"content":"This constructor is included for consistency with the design of other permissions, but is not useful in practice.","pos":[9,122]}]}],"pos":[7766,8430],"yaml":true,"extradata":"MT"},{"content":"One of the <xref href=\"System.Security.Permissions.PermissionState\"></xref> values.","nodes":[{"pos":[0,83],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.PermissionState\"&gt;&lt;/xref&gt;</ph> values.","source":"One of the <xref href=\"System.Security.Permissions.PermissionState\"></xref> values."}],"pos":[8640,8724],"yaml":true},{"content":"The <code>state</code> parameter is not a valid <xref href=\"System.Security.Permissions.PermissionState\"></xref>.","nodes":[{"pos":[0,113],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">state</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid <ph id=\"ph2\">&lt;xref href=\"System.Security.Permissions.PermissionState\"&gt;&lt;/xref&gt;</ph>.","source":"The <code>state</code> parameter is not a valid <xref href=\"System.Security.Permissions.PermissionState\"></xref>."}],"pos":[8899,9013],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Security.Permissions.PrincipalPermission\"></xref> class for the specified <code>name</code> and <code>role</code>.","nodes":[{"pos":[0,167],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.PrincipalPermission\"&gt;&lt;/xref&gt;</ph> class for the specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">role</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"Initializes a new instance of the <xref href=\"System.Security.Permissions.PrincipalPermission\"></xref> class for the specified <code>name</code> and <code>role</code>."}],"pos":[10338,10506],"yaml":true},{"content":"Both the `name` parameter and the `role` parameter must match for this permission to match the active <xref:System.Security.Principal.IPrincipal> and associated <xref:System.Security.Principal.IIdentity>. Set `name` to `null` to check for any user in a role.","nodes":[{"pos":[0,258],"content":"Both the `name` parameter and the `role` parameter must match for this permission to match the active <xref:System.Security.Principal.IPrincipal> and associated <xref:System.Security.Principal.IIdentity>. Set `name` to `null` to check for any user in a role.","nodes":[{"content":"Both the <ph id=\"ph1\">`name`</ph> parameter and the <ph id=\"ph2\">`role`</ph> parameter must match for this permission to match the active <ph id=\"ph3\">&lt;xref:System.Security.Principal.IPrincipal&gt;</ph> and associated <ph id=\"ph4\">&lt;xref:System.Security.Principal.IIdentity&gt;</ph>.","pos":[0,204],"source":"Both the `name` parameter and the `role` parameter must match for this permission to match the active <xref:System.Security.Principal.IPrincipal> and associated <xref:System.Security.Principal.IIdentity>."},{"content":"Set <ph id=\"ph1\">`name`</ph> to <ph id=\"ph2\">`null`</ph> to check for any user in a role.","pos":[205,258],"source":" Set `name` to `null` to check for any user in a role."}]}],"pos":[10517,10776],"yaml":true,"extradata":"MT"},{"content":"The name of the <xref href=\"System.Security.Principal.IPrincipal\"></xref> object's user.","nodes":[{"pos":[0,88],"content":"The name of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Principal.IPrincipal\"&gt;&lt;/xref&gt;</ph> object's user.","source":"The name of the <xref href=\"System.Security.Principal.IPrincipal\"></xref> object's user."}],"pos":[12192,12281],"yaml":true},{"content":"The role of the <xref href=\"System.Security.Principal.IPrincipal\"></xref> object's user (for example, Administrator).","nodes":[{"pos":[0,117],"content":"The role of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Principal.IPrincipal\"&gt;&lt;/xref&gt;</ph> object's user (for example, Administrator).","source":"The role of the <xref href=\"System.Security.Principal.IPrincipal\"></xref> object's user (for example, Administrator)."}],"pos":[12341,12459],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Security.Permissions.PrincipalPermission\"></xref> class for the specified <code>name</code>, <code>role</code>, and authentication status.","nodes":[{"pos":[0,191],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.PrincipalPermission\"&gt;&lt;/xref&gt;</ph> class for the specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept>, <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">role</ph><ept id=\"p2\">&lt;/code&gt;</ept>, and authentication status.","source":"Initializes a new instance of the <xref href=\"System.Security.Permissions.PrincipalPermission\"></xref> class for the specified <code>name</code>, <code>role</code>, and authentication status."}],"pos":[13940,14132],"yaml":true},{"content":"Both the `name` parameter and the `role` parameter must match for this permission to match the active <xref:System.Security.Principal.IPrincipal> and associated <xref:System.Security.Principal.IIdentity>.","nodes":[{"pos":[0,204],"content":"Both the <ph id=\"ph1\">`name`</ph> parameter and the <ph id=\"ph2\">`role`</ph> parameter must match for this permission to match the active <ph id=\"ph3\">&lt;xref:System.Security.Principal.IPrincipal&gt;</ph> and associated <ph id=\"ph4\">&lt;xref:System.Security.Principal.IIdentity&gt;</ph>.","source":"Both the `name` parameter and the `role` parameter must match for this permission to match the active <xref:System.Security.Principal.IPrincipal> and associated <xref:System.Security.Principal.IIdentity>."}],"pos":[14143,14348],"yaml":true,"extradata":"MT"},{"content":"The name of the <xref href=\"System.Security.Principal.IPrincipal\"></xref> object's user.","nodes":[{"pos":[0,88],"content":"The name of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Principal.IPrincipal\"&gt;&lt;/xref&gt;</ph> object's user.","source":"The name of the <xref href=\"System.Security.Principal.IPrincipal\"></xref> object's user."}],"pos":[14524,14613],"yaml":true},{"content":"The role of the <xref href=\"System.Security.Principal.IPrincipal\"></xref> object's user (for example, Administrator).","nodes":[{"pos":[0,117],"content":"The role of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Principal.IPrincipal\"&gt;&lt;/xref&gt;</ph> object's user (for example, Administrator).","source":"The role of the <xref href=\"System.Security.Principal.IPrincipal\"></xref> object's user (for example, Administrator)."}],"pos":[14673,14791],"yaml":true},{"content":"`true` to signify that the user is authenticated; otherwise, `false`.","nodes":[{"pos":[0,69],"content":"<ph id=\"ph1\">`true`</ph> to signify that the user is authenticated; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to signify that the user is authenticated; otherwise, `false`."}],"pos":[14863,14935],"yaml":true},{"content":"Creates and returns an identical copy of the current permission.","nodes":[{"pos":[0,64],"content":"Creates and returns an identical copy of the current permission.","nodes":[{"content":"Creates and returns an identical copy of the current permission.","pos":[0,64]}]}],"pos":[16160,16225],"yaml":true},{"content":"A copy of the permission represents the same principal and identity as the original permission.","nodes":[{"pos":[0,95],"content":"A copy of the permission represents the same principal and identity as the original permission.","nodes":[{"content":"A copy of the permission represents the same principal and identity as the original permission.","pos":[0,95]}]}],"pos":[16236,16332],"yaml":true,"extradata":"MT"},{"content":"A copy of the current permission.","nodes":[{"pos":[0,33],"content":"A copy of the current permission.","nodes":[{"content":"A copy of the current permission.","pos":[0,33]}]}],"pos":[16489,16523],"yaml":true},{"content":"Determines at run time whether the current principal matches the principal specified by the current permission.","nodes":[{"pos":[0,111],"content":"Determines at run time whether the current principal matches the principal specified by the current permission.","nodes":[{"content":"Determines at run time whether the current principal matches the principal specified by the current permission.","pos":[0,111]}]}],"pos":[17759,17871],"yaml":true},{"content":"If no <xref:System.Security.SecurityException> is raised, <xref:System.Security.Permissions.PrincipalPermission.Demand%2A> succeeds.  \n  \n This method acts against the principal attached to the calling thread.  \n  \n> [!IMPORTANT]\n>  Prior to calling the <xref:System.Security.Permissions.PrincipalPermission.Demand%2A> method, it is necessary to set the current application domain's principal policy to the enumeration value <xref:System.Security.Principal.PrincipalPolicy.WindowsPrincipal>. By default the principal policy is set to <xref:System.Security.Principal.PrincipalPolicy.UnauthenticatedPrincipal>. If you do not set the principal policy to <xref:System.Security.Principal.PrincipalPolicy.WindowsPrincipal>, a demand for principal permission will fail. The following code should be executed before the demand for principal permission occurs:  \n>   \n>  `AppDomain.CurrentDomain.SetPrincipalPolicy(PrincipalPolicy.WindowsPrincipal).`","nodes":[{"pos":[0,132],"content":"If no <xref:System.Security.SecurityException> is raised, <xref:System.Security.Permissions.PrincipalPermission.Demand%2A> succeeds.","nodes":[{"content":"If no <ph id=\"ph1\">&lt;xref:System.Security.SecurityException&gt;</ph> is raised, <ph id=\"ph2\">&lt;xref:System.Security.Permissions.PrincipalPermission.Demand%2A&gt;</ph> succeeds.","pos":[0,132],"source":"If no <xref:System.Security.SecurityException> is raised, <xref:System.Security.Permissions.PrincipalPermission.Demand%2A> succeeds."}]},{"pos":[139,209],"content":"This method acts against the principal attached to the calling thread.","nodes":[{"content":"This method acts against the principal attached to the calling thread.","pos":[0,70]}]},{"pos":[217,851],"content":"[!IMPORTANT]\n Prior to calling the <xref:System.Security.Permissions.PrincipalPermission.Demand%2A> method, it is necessary to set the current application domain's principal policy to the enumeration value <xref:System.Security.Principal.PrincipalPolicy.WindowsPrincipal>. By default the principal policy is set to <xref:System.Security.Principal.PrincipalPolicy.UnauthenticatedPrincipal>. If you do not set the principal policy to <xref:System.Security.Principal.PrincipalPolicy.WindowsPrincipal>, a demand for principal permission will fail. The following code should be executed before the demand for principal permission occurs:","leadings":["","> "],"nodes":[{"content":" Prior to calling the <xref:System.Security.Permissions.PrincipalPermission.Demand%2A> method, it is necessary to set the current application domain's principal policy to the enumeration value <xref:System.Security.Principal.PrincipalPolicy.WindowsPrincipal>. By default the principal policy is set to <xref:System.Security.Principal.PrincipalPolicy.UnauthenticatedPrincipal>. If you do not set the principal policy to <xref:System.Security.Principal.PrincipalPolicy.WindowsPrincipal>, a demand for principal permission will fail. The following code should be executed before the demand for principal permission occurs:","pos":[13,632],"nodes":[{"content":"Prior to calling the <ph id=\"ph1\">&lt;xref:System.Security.Permissions.PrincipalPermission.Demand%2A&gt;</ph> method, it is necessary to set the current application domain's principal policy to the enumeration value <ph id=\"ph2\">&lt;xref:System.Security.Principal.PrincipalPolicy.WindowsPrincipal&gt;</ph>.","pos":[1,259],"source":" Prior to calling the <xref:System.Security.Permissions.PrincipalPermission.Demand%2A> method, it is necessary to set the current application domain's principal policy to the enumeration value <xref:System.Security.Principal.PrincipalPolicy.WindowsPrincipal>."},{"content":"By default the principal policy is set to <ph id=\"ph1\">&lt;xref:System.Security.Principal.PrincipalPolicy.UnauthenticatedPrincipal&gt;</ph>.","pos":[260,376],"source":" By default the principal policy is set to <xref:System.Security.Principal.PrincipalPolicy.UnauthenticatedPrincipal>."},{"content":"If you do not set the principal policy to <ph id=\"ph1\">&lt;xref:System.Security.Principal.PrincipalPolicy.WindowsPrincipal&gt;</ph>, a demand for principal permission will fail.","pos":[377,530],"source":" If you do not set the principal policy to <xref:System.Security.Principal.PrincipalPolicy.WindowsPrincipal>, a demand for principal permission will fail."},{"content":"The following code should be executed before the demand for principal permission occurs:","pos":[531,619]}]}]}],"pos":[17882,18833],"yaml":true,"extradata":"MT"},{"content":"The current principal does not pass the security check for the principal specified by the current permission.  \n  \n -or-  \n  \n The current <xref href=\"System.Security.Principal.IPrincipal\"></xref> is `null`.","nodes":[{"pos":[0,109],"content":"The current principal does not pass the security check for the principal specified by the current permission.","nodes":[{"content":"The current principal does not pass the security check for the principal specified by the current permission.","pos":[0,109]}]},{"pos":[116,120],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[127,207],"content":"The current <ph id=\"ph1\">&lt;xref href=\"System.Security.Principal.IPrincipal\"&gt;&lt;/xref&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"The current <xref href=\"System.Security.Principal.IPrincipal\"></xref> is `null`."}],"pos":[19092,19308],"yaml":true},{"content":"Determines whether the specified <xref href=\"System.Security.Permissions.PrincipalPermission\"></xref> object is equal to the current <xref href=\"System.Security.Permissions.PrincipalPermission\"></xref>.","nodes":[{"pos":[0,202],"content":"Determines whether the specified <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.PrincipalPermission\"&gt;&lt;/xref&gt;</ph> object is equal to the current <ph id=\"ph2\">&lt;xref href=\"System.Security.Permissions.PrincipalPermission\"&gt;&lt;/xref&gt;</ph>.","source":"Determines whether the specified <xref href=\"System.Security.Permissions.PrincipalPermission\"></xref> object is equal to the current <xref href=\"System.Security.Permissions.PrincipalPermission\"></xref>."}],"pos":[20524,20727],"yaml":true},{"content":"For more information, see <xref:System.Object.Equals%2A>.","nodes":[{"pos":[0,57],"content":"For more information, see <xref:System.Object.Equals%2A>.","nodes":[{"content":"For more information, see <ph id=\"ph1\">&lt;xref:System.Object.Equals%2A&gt;</ph>.","pos":[0,57],"source":"For more information, see <xref:System.Object.Equals%2A>."}]}],"pos":[20738,20796],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Security.Permissions.PrincipalPermission\"></xref> object to compare with the current <xref href=\"System.Security.Permissions.PrincipalPermission\"></xref>.","nodes":[{"pos":[0,177],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.PrincipalPermission\"&gt;&lt;/xref&gt;</ph> object to compare with the current <ph id=\"ph2\">&lt;xref href=\"System.Security.Permissions.PrincipalPermission\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Security.Permissions.PrincipalPermission\"></xref> object to compare with the current <xref href=\"System.Security.Permissions.PrincipalPermission\"></xref>."}],"pos":[21003,21181],"yaml":true},{"content":"`true` if the specified <xref href=\"System.Security.Permissions.PrincipalPermission\"></xref> is equal to the current <xref href=\"System.Security.Permissions.PrincipalPermission\"></xref> object; otherwise, `false`.","nodes":[{"pos":[0,213],"content":"<ph id=\"ph1\">`true`</ph> if the specified <ph id=\"ph2\">&lt;xref href=\"System.Security.Permissions.PrincipalPermission\"&gt;&lt;/xref&gt;</ph> is equal to the current <ph id=\"ph3\">&lt;xref href=\"System.Security.Permissions.PrincipalPermission\"&gt;&lt;/xref&gt;</ph> object; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if the specified <xref href=\"System.Security.Permissions.PrincipalPermission\"></xref> is equal to the current <xref href=\"System.Security.Permissions.PrincipalPermission\"></xref> object; otherwise, `false`."}],"pos":[21239,21455],"yaml":true},{"content":"Reconstructs a permission with a specified state from an XML encoding.","nodes":[{"pos":[0,70],"content":"Reconstructs a permission with a specified state from an XML encoding.","nodes":[{"content":"Reconstructs a permission with a specified state from an XML encoding.","pos":[0,70]}]}],"pos":[22918,22989],"yaml":true},{"content":"The XML encoding to use to reconstruct the permission.","nodes":[{"pos":[0,54],"content":"The XML encoding to use to reconstruct the permission.","nodes":[{"content":"The XML encoding to use to reconstruct the permission.","pos":[0,54]}]}],"pos":[23166,23221],"yaml":true},{"content":"The <code>elem</code> parameter is `null`.","nodes":[{"pos":[0,42],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">elem</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>elem</code> parameter is `null`."}],"pos":[23406,23449],"yaml":true},{"content":"The <code>elem</code> parameter is not a valid permission element.  \n  \n -or-  \n  \n The <code>elem</code> parameter's version number is not valid.","nodes":[{"pos":[0,66],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">elem</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid permission element.","source":"The <code>elem</code> parameter is not a valid permission element."},{"pos":[73,77],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[84,146],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">elem</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter's version number is not valid.","source":"The <code>elem</code> parameter's version number is not valid."}],"pos":[23543,23696],"yaml":true},{"content":"Gets a hash code for the <xref href=\"System.Security.Permissions.PrincipalPermission\"></xref> object that is suitable for use in hashing algorithms and data structures such as a hash table.","nodes":[{"pos":[0,189],"content":"Gets a hash code for the <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.PrincipalPermission\"&gt;&lt;/xref&gt;</ph> object that is suitable for use in hashing algorithms and data structures such as a hash table.","source":"Gets a hash code for the <xref href=\"System.Security.Permissions.PrincipalPermission\"></xref> object that is suitable for use in hashing algorithms and data structures such as a hash table."}],"pos":[24879,25069],"yaml":true},{"content":"The hash code for two instances of the same permission might be different, hence a hash code should not be used to compare two <xref:System.Security.Permissions.PrincipalPermission> objects.","nodes":[{"pos":[0,190],"content":"The hash code for two instances of the same permission might be different, hence a hash code should not be used to compare two <xref:System.Security.Permissions.PrincipalPermission> objects.","nodes":[{"content":"The hash code for two instances of the same permission might be different, hence a hash code should not be used to compare two <ph id=\"ph1\">&lt;xref:System.Security.Permissions.PrincipalPermission&gt;</ph> objects.","pos":[0,190],"source":"The hash code for two instances of the same permission might be different, hence a hash code should not be used to compare two <xref:System.Security.Permissions.PrincipalPermission> objects."}]}],"pos":[25080,25271],"yaml":true,"extradata":"MT"},{"content":"A hash code for the current <xref href=\"System.Security.Permissions.PrincipalPermission\"></xref> object.","nodes":[{"pos":[0,104],"content":"A hash code for the current <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.PrincipalPermission\"&gt;&lt;/xref&gt;</ph> object.","source":"A hash code for the current <xref href=\"System.Security.Permissions.PrincipalPermission\"></xref> object."}],"pos":[25472,25577],"yaml":true},{"content":"Creates and returns a permission that is the intersection of the current permission and the specified permission.","nodes":[{"pos":[0,113],"content":"Creates and returns a permission that is the intersection of the current permission and the specified permission.","nodes":[{"content":"Creates and returns a permission that is the intersection of the current permission and the specified permission.","pos":[0,113]}]}],"pos":[27033,27147],"yaml":true},{"content":"Because two users never intersect, this method is not useful for <xref:System.Security.Permissions.PrincipalPermission>. For example,  \n  \n [!code-cpp[System.Security.Permissions.PrincipalPermission#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.security.permissions.principalpermission/cpp/remarks.cpp#1)]\n [!code-csharp[System.Security.Permissions.PrincipalPermission#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.security.permissions.principalpermission/cs/remarks.cs#1)]\n [!code-vb[System.Security.Permissions.PrincipalPermission#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.security.permissions.principalpermission/vb/remarks.vb#1)]  \n  \n is equivalent to  \n  \n [!code-cpp[System.Security.Permissions.PrincipalPermission#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.security.permissions.principalpermission/cpp/remarks.cpp#2)]\n [!code-csharp[System.Security.Permissions.PrincipalPermission#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.security.permissions.principalpermission/cs/remarks.cs#2)]\n [!code-vb[System.Security.Permissions.PrincipalPermission#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.security.permissions.principalpermission/vb/remarks.vb#2)]  \n  \n because no identity can simultaneously represent both Bob and Louise. In effect, `pp1.Demand()` only succeeds if an unauthenticated principal (with name equal to the empty string (\"\")) is allowed to act in the Administrator role.","nodes":[{"pos":[0,133],"content":"Because two users never intersect, this method is not useful for <xref:System.Security.Permissions.PrincipalPermission>. For example,","nodes":[{"content":"Because two users never intersect, this method is not useful for <xref:System.Security.Permissions.PrincipalPermission>. For example,","pos":[0,133],"nodes":[{"content":"Because two users never intersect, this method is not useful for <ph id=\"ph1\">&lt;xref:System.Security.Permissions.PrincipalPermission&gt;</ph>.","pos":[0,120],"source":"Because two users never intersect, this method is not useful for <xref:System.Security.Permissions.PrincipalPermission>."},{"content":"For example,","pos":[121,133]}]}]},{"pos":[140,678],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.Security.Permissions.PrincipalPermission#1<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.security.permissions.principalpermission/cpp/remarks.cpp#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.Security.Permissions.PrincipalPermission#1<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.security.permissions.principalpermission/cs/remarks.cs#1)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.Security.Permissions.PrincipalPermission#1<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.security.permissions.principalpermission/vb/remarks.vb#1)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[System.Security.Permissions.PrincipalPermission#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.security.permissions.principalpermission/cpp/remarks.cpp#1)]\n [!code-csharp[System.Security.Permissions.PrincipalPermission#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.security.permissions.principalpermission/cs/remarks.cs#1)]\n [!code-vb[System.Security.Permissions.PrincipalPermission#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.security.permissions.principalpermission/vb/remarks.vb#1)]"},{"pos":[685,701],"content":"is equivalent to","nodes":[{"content":"is equivalent to","pos":[0,16]}]},{"pos":[708,1246],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.Security.Permissions.PrincipalPermission#2<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.security.permissions.principalpermission/cpp/remarks.cpp#2)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.Security.Permissions.PrincipalPermission#2<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.security.permissions.principalpermission/cs/remarks.cs#2)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.Security.Permissions.PrincipalPermission#2<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.security.permissions.principalpermission/vb/remarks.vb#2)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[System.Security.Permissions.PrincipalPermission#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.security.permissions.principalpermission/cpp/remarks.cpp#2)]\n [!code-csharp[System.Security.Permissions.PrincipalPermission#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.security.permissions.principalpermission/cs/remarks.cs#2)]\n [!code-vb[System.Security.Permissions.PrincipalPermission#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.security.permissions.principalpermission/vb/remarks.vb#2)]"},{"pos":[1253,1482],"content":"because no identity can simultaneously represent both Bob and Louise. In effect, `pp1.Demand()` only succeeds if an unauthenticated principal (with name equal to the empty string (\"\")) is allowed to act in the Administrator role.","nodes":[{"content":"because no identity can simultaneously represent both Bob and Louise.","pos":[0,69]},{"content":"In effect, <ph id=\"ph1\">`pp1.Demand()`</ph> only succeeds if an unauthenticated principal (with name equal to the empty string (\"\")) is allowed to act in the Administrator role.","pos":[70,229],"source":" In effect, `pp1.Demand()` only succeeds if an unauthenticated principal (with name equal to the empty string (\"\")) is allowed to act in the Administrator role."}]}],"pos":[27158,28657],"yaml":true,"extradata":"MT"},{"content":"A permission to intersect with the current permission. It must be of the same type as the current permission.","nodes":[{"pos":[0,109],"content":"A permission to intersect with the current permission. It must be of the same type as the current permission.","nodes":[{"content":"A permission to intersect with the current permission. It must be of the same type as the current permission.","pos":[0,109],"nodes":[{"content":"A permission to intersect with the current permission.","pos":[0,54]},{"content":"It must be of the same type as the current permission.","pos":[55,109]}]}]}],"pos":[28855,28965],"yaml":true},{"content":"A new permission that represents the intersection of the current permission and the specified permission. This new permission will be `null` if the intersection is empty.","nodes":[{"pos":[0,170],"content":"A new permission that represents the intersection of the current permission and the specified permission. This new permission will be `null` if the intersection is empty.","nodes":[{"content":"A new permission that represents the intersection of the current permission and the specified permission.","pos":[0,105]},{"content":"This new permission will be <ph id=\"ph1\">`null`</ph> if the intersection is empty.","pos":[106,170],"source":" This new permission will be `null` if the intersection is empty."}]}],"pos":[29036,29207],"yaml":true},{"content":"The <code>target</code> parameter is not `null` and is not an instance of the same class as the current permission.","nodes":[{"pos":[0,115],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">target</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not <ph id=\"ph2\">`null`</ph> and is not an instance of the same class as the current permission.","source":"The <code>target</code> parameter is not `null` and is not an instance of the same class as the current permission."}],"pos":[29386,29502],"yaml":true},{"content":"Determines whether the current permission is a subset of the specified permission.","nodes":[{"pos":[0,82],"content":"Determines whether the current permission is a subset of the specified permission.","nodes":[{"content":"Determines whether the current permission is a subset of the specified permission.","pos":[0,82]}]}],"pos":[30799,30882],"yaml":true},{"content":"The current permission is a subset of the specified permission if all demands that succeed for the current permission also succeed for the specified permission.","nodes":[{"pos":[0,160],"content":"The current permission is a subset of the specified permission if all demands that succeed for the current permission also succeed for the specified permission.","nodes":[{"content":"The current permission is a subset of the specified permission if all demands that succeed for the current permission also succeed for the specified permission.","pos":[0,160]}]}],"pos":[30893,31054],"yaml":true,"extradata":"MT"},{"content":"A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.","nodes":[{"pos":[0,130],"content":"A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.","nodes":[{"content":"A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.","pos":[0,130],"nodes":[{"content":"A permission that is to be tested for the subset relationship.","pos":[0,62]},{"content":"This permission must be of the same type as the current permission.","pos":[63,130]}]}]}],"pos":[32184,32315],"yaml":true},{"content":"`true` if the current permission is a subset of the specified permission; otherwise, `false`.","nodes":[{"pos":[0,93],"content":"<ph id=\"ph1\">`true`</ph> if the current permission is a subset of the specified permission; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the current permission is a subset of the specified permission; otherwise, `false`."}],"pos":[32373,32469],"yaml":true},{"content":"The <code>target</code> parameter is an object that is not of the same type as the current permission.","nodes":[{"pos":[0,102],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">target</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is an object that is not of the same type as the current permission.","source":"The <code>target</code> parameter is an object that is not of the same type as the current permission."}],"pos":[32649,32752],"yaml":true},{"content":"Returns a value indicating whether the current permission is unrestricted.","nodes":[{"pos":[0,74],"content":"Returns a value indicating whether the current permission is unrestricted.","nodes":[{"content":"Returns a value indicating whether the current permission is unrestricted.","pos":[0,74]}]}],"pos":[33953,34028],"yaml":true},{"content":"An unrestricted <xref:System.Security.Permissions.PrincipalPermission> matches any principal.","nodes":[{"pos":[0,93],"content":"An unrestricted <xref:System.Security.Permissions.PrincipalPermission> matches any principal.","nodes":[{"content":"An unrestricted <ph id=\"ph1\">&lt;xref:System.Security.Permissions.PrincipalPermission&gt;</ph> matches any principal.","pos":[0,93],"source":"An unrestricted <xref:System.Security.Permissions.PrincipalPermission> matches any principal."}]}],"pos":[34039,34133],"yaml":true,"extradata":"MT"},{"content":"`true` if the current permission is unrestricted; otherwise, `false`.","nodes":[{"pos":[0,69],"content":"<ph id=\"ph1\">`true`</ph> if the current permission is unrestricted; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the current permission is unrestricted; otherwise, `false`."}],"pos":[34264,34336],"yaml":true},{"content":"Creates and returns a string representing the current permission.","nodes":[{"pos":[0,65],"content":"Creates and returns a string representing the current permission.","nodes":[{"content":"Creates and returns a string representing the current permission.","pos":[0,65]}]}],"pos":[35594,35660],"yaml":true},{"content":"A representation of the current permission.","nodes":[{"pos":[0,43],"content":"A representation of the current permission.","nodes":[{"content":"A representation of the current permission.","pos":[0,43]}]}],"pos":[35795,35839],"yaml":true},{"content":"Creates an XML encoding of the permission and its current state.","nodes":[{"pos":[0,64],"content":"Creates an XML encoding of the permission and its current state.","nodes":[{"content":"Creates an XML encoding of the permission and its current state.","pos":[0,64]}]}],"pos":[37073,37138],"yaml":true},{"content":"An XML encoding of the permission, including any state information.","nodes":[{"pos":[0,67],"content":"An XML encoding of the permission, including any state information.","nodes":[{"content":"An XML encoding of the permission, including any state information.","pos":[0,67]}]}],"pos":[37304,37372],"yaml":true},{"content":"Creates a permission that is the union of the current permission and the specified permission.","nodes":[{"pos":[0,94],"content":"Creates a permission that is the union of the current permission and the specified permission.","nodes":[{"content":"Creates a permission that is the union of the current permission and the specified permission.","pos":[0,94]}]}],"pos":[38723,38818],"yaml":true},{"content":"<xref:System.Security.Permissions.PrincipalPermission.Union%2A> creates a permission representing the criteria of a given set of individual <xref:System.Security.Permissions.PrincipalPermission> objects. It is useful for compactly representing a set of conditions to test. For example, with the declarations  \n  \n [!code-cpp[System.Security.Permissions.PrincipalPermission#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.security.permissions.principalpermission/cpp/remarks.cpp#3)]\n [!code-csharp[System.Security.Permissions.PrincipalPermission#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.security.permissions.principalpermission/cs/remarks.cs#3)]\n [!code-vb[System.Security.Permissions.PrincipalPermission#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.security.permissions.principalpermission/vb/remarks.vb#3)]  \n  \n `(ppBob.Union(ppLouise)).Demand()` will succeed if the current principal represents Bob in the role of Administrator or Louise in the role of Administrator.","nodes":[{"pos":[0,307],"content":"<xref:System.Security.Permissions.PrincipalPermission.Union%2A> creates a permission representing the criteria of a given set of individual <xref:System.Security.Permissions.PrincipalPermission> objects. It is useful for compactly representing a set of conditions to test. For example, with the declarations","nodes":[{"content":"<xref:System.Security.Permissions.PrincipalPermission.Union%2A> creates a permission representing the criteria of a given set of individual <xref:System.Security.Permissions.PrincipalPermission> objects. It is useful for compactly representing a set of conditions to test. For example, with the declarations","pos":[0,307],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Security.Permissions.PrincipalPermission.Union%2A&gt;</ph> creates a permission representing the criteria of a given set of individual <ph id=\"ph2\">&lt;xref:System.Security.Permissions.PrincipalPermission&gt;</ph> objects.","pos":[0,203],"source":"<xref:System.Security.Permissions.PrincipalPermission.Union%2A> creates a permission representing the criteria of a given set of individual <xref:System.Security.Permissions.PrincipalPermission> objects."},{"content":"It is useful for compactly representing a set of conditions to test.","pos":[204,272]},{"content":"For example, with the declarations","pos":[273,307]}]}]},{"pos":[314,852],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.Security.Permissions.PrincipalPermission#3<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.security.permissions.principalpermission/cpp/remarks.cpp#3)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.Security.Permissions.PrincipalPermission#3<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.security.permissions.principalpermission/cs/remarks.cs#3)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.Security.Permissions.PrincipalPermission#3<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.security.permissions.principalpermission/vb/remarks.vb#3)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[System.Security.Permissions.PrincipalPermission#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.security.permissions.principalpermission/cpp/remarks.cpp#3)]\n [!code-csharp[System.Security.Permissions.PrincipalPermission#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.security.permissions.principalpermission/cs/remarks.cs#3)]\n [!code-vb[System.Security.Permissions.PrincipalPermission#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.security.permissions.principalpermission/vb/remarks.vb#3)]"},{"pos":[859,1015],"content":"<ph id=\"ph1\">`(ppBob.Union(ppLouise)).Demand()`</ph> will succeed if the current principal represents Bob in the role of Administrator or Louise in the role of Administrator.","source":"`(ppBob.Union(ppLouise)).Demand()` will succeed if the current principal represents Bob in the role of Administrator or Louise in the role of Administrator."}],"pos":[38829,39853],"yaml":true,"extradata":"MT"},{"content":"A permission to combine with the current permission. It must be of the same type as the current permission.","nodes":[{"pos":[0,107],"content":"A permission to combine with the current permission. It must be of the same type as the current permission.","nodes":[{"content":"A permission to combine with the current permission. It must be of the same type as the current permission.","pos":[0,107],"nodes":[{"content":"A permission to combine with the current permission.","pos":[0,52]},{"content":"It must be of the same type as the current permission.","pos":[53,107]}]}]}],"pos":[40045,40153],"yaml":true},{"content":"A new permission that represents the union of the current permission and the specified permission.","nodes":[{"pos":[0,98],"content":"A new permission that represents the union of the current permission and the specified permission.","nodes":[{"content":"A new permission that represents the union of the current permission and the specified permission.","pos":[0,98]}]}],"pos":[40224,40323],"yaml":true},{"content":"The <code>other</code> parameter is an object that is not of the same type as the current permission.","nodes":[{"pos":[0,101],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">other</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is an object that is not of the same type as the current permission.","source":"The <code>other</code> parameter is an object that is not of the same type as the current permission."}],"pos":[40498,40600],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Permissions.PrincipalPermission\n  commentId: T:System.Security.Permissions.PrincipalPermission\n  id: PrincipalPermission\n  children:\n  - System.Security.Permissions.PrincipalPermission.#ctor(System.Security.Permissions.PermissionState)\n  - System.Security.Permissions.PrincipalPermission.#ctor(System.String,System.String)\n  - System.Security.Permissions.PrincipalPermission.#ctor(System.String,System.String,System.Boolean)\n  - System.Security.Permissions.PrincipalPermission.Copy\n  - System.Security.Permissions.PrincipalPermission.Demand\n  - System.Security.Permissions.PrincipalPermission.Equals(System.Object)\n  - System.Security.Permissions.PrincipalPermission.FromXml(System.Security.SecurityElement)\n  - System.Security.Permissions.PrincipalPermission.GetHashCode\n  - System.Security.Permissions.PrincipalPermission.Intersect(System.Security.IPermission)\n  - System.Security.Permissions.PrincipalPermission.IsSubsetOf(System.Security.IPermission)\n  - System.Security.Permissions.PrincipalPermission.IsUnrestricted\n  - System.Security.Permissions.PrincipalPermission.ToString\n  - System.Security.Permissions.PrincipalPermission.ToXml\n  - System.Security.Permissions.PrincipalPermission.Union(System.Security.IPermission)\n  langs:\n  - csharp\n  name: PrincipalPermission\n  nameWithType: PrincipalPermission\n  fullName: System.Security.Permissions.PrincipalPermission\n  type: Class\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Allows checks against the active principal (see <xref href=\"System.Security.Principal.IPrincipal\"></xref>) using the language constructs defined for both declarative and imperative security actions. This class cannot be inherited.\n  remarks: \"By passing identity information (user name and role) to the constructor, <xref:System.Security.Permissions.PrincipalPermission> can be used to demand that the identity of the active principal matches this information.  \\n  \\n To match the active <xref:System.Security.Principal.IPrincipal> and associated <xref:System.Security.Principal.IIdentity>, both the specified identity and role must match. If `null` identity string is used, it is interpreted as a request to match any identity. Use of `null` role string will match any role. By implication, passing `null` parameter for `name` or `role` to <xref:System.Security.Permissions.PrincipalPermission> will match the identity and roles in any <xref:System.Security.Principal.IPrincipal>. It is also possible to construct a <xref:System.Security.Permissions.PrincipalPermission> that only determines whether the <xref:System.Security.Principal.IIdentity> represents an authenticated or unauthenticated entity. In this case, `name` and `role` are ignored.  \\n  \\n Unlike most other permissions, <xref:System.Security.Permissions.PrincipalPermission> does not extend <xref:System.Security.CodeAccessPermission>. It does, however, implement the <xref:System.Security.IPermission> interface. This is because <xref:System.Security.Permissions.PrincipalPermission> is not a code access permission; that is, it is not granted based on the identity of the executing assembly. Instead, it allows code to perform actions (<xref:System.Security.Permissions.PrincipalPermission.Demand%2A>, <xref:System.Security.Permissions.PrincipalPermission.Union%2A>, <xref:System.Security.Permissions.PrincipalPermission.Intersect%2A>, and so on) against the current user identity in a manner consistent with the way those actions are performed for code access and code identity permissions.  \\n  \\n> [!IMPORTANT]\\n>  Prior to a demand for principal permission it is necessary to set the current application domain's principal policy to the enumeration value <xref:System.Security.Principal.PrincipalPolicy.WindowsPrincipal>. By default, the principal policy is set to <xref:System.Security.Principal.PrincipalPolicy.UnauthenticatedPrincipal>. If you do not set the principal policy to <xref:System.Security.Principal.PrincipalPolicy.WindowsPrincipal>, a demand for principal permission will fail. The following code should be executed before the principal permission is demanded:  \\n>   \\n>  `AppDomain.CurrentDomain.SetPrincipalPolicy(PrincipalPolicy.WindowsPrincipal).`\"\n  example:\n  - \"The following example requires the active principal to be an administrator. The `name` parameter is `null`, which enables any user who is an administrator to pass the demand.  \\n  \\n> [!NOTE]\\n>  In Windows Vista, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that requires you to be an administrator, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator.  \\n  \\n [!code-cpp[Classic PrincipalPermission Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic PrincipalPermission Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic PrincipalPermission Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic PrincipalPermission Example/CS/source.cs#1)]\\n [!code-vb[Classic PrincipalPermission Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic PrincipalPermission Example/VB/source.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class PrincipalPermission : System.Security.IPermission, System.Security.Permissions.IUnrestrictedPermission\n  inheritance:\n  - System.Object\n  implements:\n  - System.Security.IPermission\n  - System.Security.Permissions.IUnrestrictedPermission\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/PrincipalPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.PrincipalPermission.#ctor(System.Security.Permissions.PermissionState)\n  commentId: M:System.Security.Permissions.PrincipalPermission.#ctor(System.Security.Permissions.PermissionState)\n  id: '#ctor(System.Security.Permissions.PermissionState)'\n  parent: System.Security.Permissions.PrincipalPermission\n  langs:\n  - csharp\n  name: PrincipalPermission(PermissionState)\n  nameWithType: PrincipalPermission.PrincipalPermission(PermissionState)\n  fullName: PrincipalPermission.PrincipalPermission(PermissionState)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Initializes a new instance of the <xref href=\"System.Security.Permissions.PrincipalPermission\"></xref> class with the specified <xref href=\"System.Security.Permissions.PermissionState\"></xref>.\n  remarks: \"`None` matches only the unauthenticated principal (<xref:System.Security.Permissions.PrincipalPermissionAttribute.Name%2A> is the empty string (\\\"\\\"), no <xref:System.Security.Permissions.PrincipalPermissionAttribute.Role%2A>, <xref:System.Security.Permissions.PrincipalPermissionAttribute.Authenticated%2A> is `false`). `Unrestricted` matches all principals (<xref:System.Security.Permissions.PrincipalPermissionAttribute.Name%2A> is `null`, <xref:System.Security.Permissions.PrincipalPermissionAttribute.Role%2A> is `null`).  \\n  \\n> [!NOTE]\\n>  This constructor is included for consistency with the design of other permissions, but is not useful in practice.\"\n  syntax:\n    content: public PrincipalPermission (System.Security.Permissions.PermissionState state);\n    parameters:\n    - id: state\n      type: System.Security.Permissions.PermissionState\n      description: One of the <xref href=\"System.Security.Permissions.PermissionState\"></xref> values.\n  overload: System.Security.Permissions.PrincipalPermission.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>state</code> parameter is not a valid <xref href=\"System.Security.Permissions.PermissionState\"></xref>.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/PrincipalPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.PrincipalPermission.#ctor(System.String,System.String)\n  commentId: M:System.Security.Permissions.PrincipalPermission.#ctor(System.String,System.String)\n  id: '#ctor(System.String,System.String)'\n  parent: System.Security.Permissions.PrincipalPermission\n  langs:\n  - csharp\n  name: PrincipalPermission(String, String)\n  nameWithType: PrincipalPermission.PrincipalPermission(String, String)\n  fullName: PrincipalPermission.PrincipalPermission(String, String)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Initializes a new instance of the <xref href=\"System.Security.Permissions.PrincipalPermission\"></xref> class for the specified <code>name</code> and <code>role</code>.\n  remarks: Both the `name` parameter and the `role` parameter must match for this permission to match the active <xref:System.Security.Principal.IPrincipal> and associated <xref:System.Security.Principal.IIdentity>. Set `name` to `null` to check for any user in a role.\n  example:\n  - \"The following example requires the active principal to be an administrator. The `name` parameter is `null`, which enables any user who is an administrator to pass the demand.  \\n  \\n **Note** In Windows Vista, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that requires you to be an administrator, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator.  \\n  \\n [!code-cpp[Classic PrincipalPermission Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic PrincipalPermission Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic PrincipalPermission Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic PrincipalPermission Example/CS/source.cs#1)]\\n [!code-vb[Classic PrincipalPermission Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic PrincipalPermission Example/VB/source.vb#1)]\"\n  syntax:\n    content: public PrincipalPermission (string name, string role);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the <xref href=\"System.Security.Principal.IPrincipal\"></xref> object's user.\n    - id: role\n      type: System.String\n      description: The role of the <xref href=\"System.Security.Principal.IPrincipal\"></xref> object's user (for example, Administrator).\n  overload: System.Security.Permissions.PrincipalPermission.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/PrincipalPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.PrincipalPermission.#ctor(System.String,System.String,System.Boolean)\n  commentId: M:System.Security.Permissions.PrincipalPermission.#ctor(System.String,System.String,System.Boolean)\n  id: '#ctor(System.String,System.String,System.Boolean)'\n  parent: System.Security.Permissions.PrincipalPermission\n  langs:\n  - csharp\n  name: PrincipalPermission(String, String, Boolean)\n  nameWithType: PrincipalPermission.PrincipalPermission(String, String, Boolean)\n  fullName: PrincipalPermission.PrincipalPermission(String, String, Boolean)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Initializes a new instance of the <xref href=\"System.Security.Permissions.PrincipalPermission\"></xref> class for the specified <code>name</code>, <code>role</code>, and authentication status.\n  remarks: Both the `name` parameter and the `role` parameter must match for this permission to match the active <xref:System.Security.Principal.IPrincipal> and associated <xref:System.Security.Principal.IIdentity>.\n  syntax:\n    content: public PrincipalPermission (string name, string role, bool isAuthenticated);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the <xref href=\"System.Security.Principal.IPrincipal\"></xref> object's user.\n    - id: role\n      type: System.String\n      description: The role of the <xref href=\"System.Security.Principal.IPrincipal\"></xref> object's user (for example, Administrator).\n    - id: isAuthenticated\n      type: System.Boolean\n      description: '`true` to signify that the user is authenticated; otherwise, `false`.'\n  overload: System.Security.Permissions.PrincipalPermission.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/PrincipalPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.PrincipalPermission.Copy\n  commentId: M:System.Security.Permissions.PrincipalPermission.Copy\n  id: Copy\n  parent: System.Security.Permissions.PrincipalPermission\n  langs:\n  - csharp\n  name: Copy()\n  nameWithType: PrincipalPermission.Copy()\n  fullName: PrincipalPermission.Copy()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Creates and returns an identical copy of the current permission.\n  remarks: A copy of the permission represents the same principal and identity as the original permission.\n  syntax:\n    content: public System.Security.IPermission Copy ();\n    parameters: []\n    return:\n      type: System.Security.IPermission\n      description: A copy of the current permission.\n  overload: System.Security.Permissions.PrincipalPermission.Copy*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/PrincipalPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.PrincipalPermission.Demand\n  commentId: M:System.Security.Permissions.PrincipalPermission.Demand\n  id: Demand\n  parent: System.Security.Permissions.PrincipalPermission\n  langs:\n  - csharp\n  name: Demand()\n  nameWithType: PrincipalPermission.Demand()\n  fullName: PrincipalPermission.Demand()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Determines at run time whether the current principal matches the principal specified by the current permission.\n  remarks: \"If no <xref:System.Security.SecurityException> is raised, <xref:System.Security.Permissions.PrincipalPermission.Demand%2A> succeeds.  \\n  \\n This method acts against the principal attached to the calling thread.  \\n  \\n> [!IMPORTANT]\\n>  Prior to calling the <xref:System.Security.Permissions.PrincipalPermission.Demand%2A> method, it is necessary to set the current application domain's principal policy to the enumeration value <xref:System.Security.Principal.PrincipalPolicy.WindowsPrincipal>. By default the principal policy is set to <xref:System.Security.Principal.PrincipalPolicy.UnauthenticatedPrincipal>. If you do not set the principal policy to <xref:System.Security.Principal.PrincipalPolicy.WindowsPrincipal>, a demand for principal permission will fail. The following code should be executed before the demand for principal permission occurs:  \\n>   \\n>  `AppDomain.CurrentDomain.SetPrincipalPolicy(PrincipalPolicy.WindowsPrincipal).`\"\n  syntax:\n    content: public void Demand ();\n    parameters: []\n  overload: System.Security.Permissions.PrincipalPermission.Demand*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"The current principal does not pass the security check for the principal specified by the current permission.  \\n  \\n -or-  \\n  \\n The current <xref href=\\\"System.Security.Principal.IPrincipal\\\"></xref> is `null`.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/PrincipalPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.PrincipalPermission.Equals(System.Object)\n  commentId: M:System.Security.Permissions.PrincipalPermission.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Security.Permissions.PrincipalPermission\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: PrincipalPermission.Equals(Object)\n  fullName: PrincipalPermission.Equals(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Determines whether the specified <xref href=\"System.Security.Permissions.PrincipalPermission\"></xref> object is equal to the current <xref href=\"System.Security.Permissions.PrincipalPermission\"></xref>.\n  remarks: For more information, see <xref:System.Object.Equals%2A>.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public override bool Equals (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The <xref href=\"System.Security.Permissions.PrincipalPermission\"></xref> object to compare with the current <xref href=\"System.Security.Permissions.PrincipalPermission\"></xref>.\n    return:\n      type: System.Boolean\n      description: '`true` if the specified <xref href=\"System.Security.Permissions.PrincipalPermission\"></xref> is equal to the current <xref href=\"System.Security.Permissions.PrincipalPermission\"></xref> object; otherwise, `false`.'\n  overload: System.Security.Permissions.PrincipalPermission.Equals*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/PrincipalPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.PrincipalPermission.FromXml(System.Security.SecurityElement)\n  commentId: M:System.Security.Permissions.PrincipalPermission.FromXml(System.Security.SecurityElement)\n  id: FromXml(System.Security.SecurityElement)\n  parent: System.Security.Permissions.PrincipalPermission\n  langs:\n  - csharp\n  name: FromXml(SecurityElement)\n  nameWithType: PrincipalPermission.FromXml(SecurityElement)\n  fullName: PrincipalPermission.FromXml(SecurityElement)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Reconstructs a permission with a specified state from an XML encoding.\n  syntax:\n    content: public void FromXml (System.Security.SecurityElement elem);\n    parameters:\n    - id: elem\n      type: System.Security.SecurityElement\n      description: The XML encoding to use to reconstruct the permission.\n  overload: System.Security.Permissions.PrincipalPermission.FromXml*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>elem</code> parameter is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>elem</code> parameter is not a valid permission element.  \\n  \\n -or-  \\n  \\n The <code>elem</code> parameter's version number is not valid.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/PrincipalPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.PrincipalPermission.GetHashCode\n  commentId: M:System.Security.Permissions.PrincipalPermission.GetHashCode\n  id: GetHashCode\n  parent: System.Security.Permissions.PrincipalPermission\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: PrincipalPermission.GetHashCode()\n  fullName: PrincipalPermission.GetHashCode()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Gets a hash code for the <xref href=\"System.Security.Permissions.PrincipalPermission\"></xref> object that is suitable for use in hashing algorithms and data structures such as a hash table.\n  remarks: The hash code for two instances of the same permission might be different, hence a hash code should not be used to compare two <xref:System.Security.Permissions.PrincipalPermission> objects.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: A hash code for the current <xref href=\"System.Security.Permissions.PrincipalPermission\"></xref> object.\n  overload: System.Security.Permissions.PrincipalPermission.GetHashCode*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/PrincipalPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.PrincipalPermission.Intersect(System.Security.IPermission)\n  commentId: M:System.Security.Permissions.PrincipalPermission.Intersect(System.Security.IPermission)\n  id: Intersect(System.Security.IPermission)\n  parent: System.Security.Permissions.PrincipalPermission\n  langs:\n  - csharp\n  name: Intersect(IPermission)\n  nameWithType: PrincipalPermission.Intersect(IPermission)\n  fullName: PrincipalPermission.Intersect(IPermission)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Creates and returns a permission that is the intersection of the current permission and the specified permission.\n  remarks: \"Because two users never intersect, this method is not useful for <xref:System.Security.Permissions.PrincipalPermission>. For example,  \\n  \\n [!code-cpp[System.Security.Permissions.PrincipalPermission#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.security.permissions.principalpermission/cpp/remarks.cpp#1)]\\n [!code-csharp[System.Security.Permissions.PrincipalPermission#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.security.permissions.principalpermission/cs/remarks.cs#1)]\\n [!code-vb[System.Security.Permissions.PrincipalPermission#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.security.permissions.principalpermission/vb/remarks.vb#1)]  \\n  \\n is equivalent to  \\n  \\n [!code-cpp[System.Security.Permissions.PrincipalPermission#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.security.permissions.principalpermission/cpp/remarks.cpp#2)]\\n [!code-csharp[System.Security.Permissions.PrincipalPermission#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.security.permissions.principalpermission/cs/remarks.cs#2)]\\n [!code-vb[System.Security.Permissions.PrincipalPermission#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.security.permissions.principalpermission/vb/remarks.vb#2)]  \\n  \\n because no identity can simultaneously represent both Bob and Louise. In effect, `pp1.Demand()` only succeeds if an unauthenticated principal (with name equal to the empty string (\\\"\\\")) is allowed to act in the Administrator role.\"\n  syntax:\n    content: public System.Security.IPermission Intersect (System.Security.IPermission target);\n    parameters:\n    - id: target\n      type: System.Security.IPermission\n      description: A permission to intersect with the current permission. It must be of the same type as the current permission.\n    return:\n      type: System.Security.IPermission\n      description: A new permission that represents the intersection of the current permission and the specified permission. This new permission will be `null` if the intersection is empty.\n  overload: System.Security.Permissions.PrincipalPermission.Intersect*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>target</code> parameter is not `null` and is not an instance of the same class as the current permission.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/PrincipalPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.PrincipalPermission.IsSubsetOf(System.Security.IPermission)\n  commentId: M:System.Security.Permissions.PrincipalPermission.IsSubsetOf(System.Security.IPermission)\n  id: IsSubsetOf(System.Security.IPermission)\n  parent: System.Security.Permissions.PrincipalPermission\n  langs:\n  - csharp\n  name: IsSubsetOf(IPermission)\n  nameWithType: PrincipalPermission.IsSubsetOf(IPermission)\n  fullName: PrincipalPermission.IsSubsetOf(IPermission)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Determines whether the current permission is a subset of the specified permission.\n  remarks: The current permission is a subset of the specified permission if all demands that succeed for the current permission also succeed for the specified permission.\n  example:\n  - \"The following example defines instances of <xref:System.Security.Permissions.PrincipalPermission> corresponding to three distinct users. Two additional instances are then created as groups of users. `pp1` represents Bob and Louise, `pp2` represents Bob, Louise, and Greg.  \\n  \\n [!code-cpp[Classic PrincipalPermission.IsSubsetOf Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic PrincipalPermission.IsSubsetOf Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic PrincipalPermission.IsSubsetOf Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic PrincipalPermission.IsSubsetOf Example/CS/source.cs#1)]\\n [!code-vb[Classic PrincipalPermission.IsSubsetOf Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic PrincipalPermission.IsSubsetOf Example/VB/source.vb#1)]  \\n  \\n With the preceding declarations, `pp1.IsSubsetOf(pp2)` returns `true`, and `pp2.IsSubsetOf(pp1)` returns `false`.\"\n  syntax:\n    content: public bool IsSubsetOf (System.Security.IPermission target);\n    parameters:\n    - id: target\n      type: System.Security.IPermission\n      description: A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.\n    return:\n      type: System.Boolean\n      description: '`true` if the current permission is a subset of the specified permission; otherwise, `false`.'\n  overload: System.Security.Permissions.PrincipalPermission.IsSubsetOf*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>target</code> parameter is an object that is not of the same type as the current permission.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/PrincipalPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.PrincipalPermission.IsUnrestricted\n  commentId: M:System.Security.Permissions.PrincipalPermission.IsUnrestricted\n  id: IsUnrestricted\n  parent: System.Security.Permissions.PrincipalPermission\n  langs:\n  - csharp\n  name: IsUnrestricted()\n  nameWithType: PrincipalPermission.IsUnrestricted()\n  fullName: PrincipalPermission.IsUnrestricted()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Returns a value indicating whether the current permission is unrestricted.\n  remarks: An unrestricted <xref:System.Security.Permissions.PrincipalPermission> matches any principal.\n  syntax:\n    content: public bool IsUnrestricted ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`true` if the current permission is unrestricted; otherwise, `false`.'\n  overload: System.Security.Permissions.PrincipalPermission.IsUnrestricted*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/PrincipalPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.PrincipalPermission.ToString\n  commentId: M:System.Security.Permissions.PrincipalPermission.ToString\n  id: ToString\n  parent: System.Security.Permissions.PrincipalPermission\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: PrincipalPermission.ToString()\n  fullName: PrincipalPermission.ToString()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Creates and returns a string representing the current permission.\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: A representation of the current permission.\n  overload: System.Security.Permissions.PrincipalPermission.ToString*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/PrincipalPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.PrincipalPermission.ToXml\n  commentId: M:System.Security.Permissions.PrincipalPermission.ToXml\n  id: ToXml\n  parent: System.Security.Permissions.PrincipalPermission\n  langs:\n  - csharp\n  name: ToXml()\n  nameWithType: PrincipalPermission.ToXml()\n  fullName: PrincipalPermission.ToXml()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Creates an XML encoding of the permission and its current state.\n  syntax:\n    content: public System.Security.SecurityElement ToXml ();\n    parameters: []\n    return:\n      type: System.Security.SecurityElement\n      description: An XML encoding of the permission, including any state information.\n  overload: System.Security.Permissions.PrincipalPermission.ToXml*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/PrincipalPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.PrincipalPermission.Union(System.Security.IPermission)\n  commentId: M:System.Security.Permissions.PrincipalPermission.Union(System.Security.IPermission)\n  id: Union(System.Security.IPermission)\n  parent: System.Security.Permissions.PrincipalPermission\n  langs:\n  - csharp\n  name: Union(IPermission)\n  nameWithType: PrincipalPermission.Union(IPermission)\n  fullName: PrincipalPermission.Union(IPermission)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Creates a permission that is the union of the current permission and the specified permission.\n  remarks: \"<xref:System.Security.Permissions.PrincipalPermission.Union%2A> creates a permission representing the criteria of a given set of individual <xref:System.Security.Permissions.PrincipalPermission> objects. It is useful for compactly representing a set of conditions to test. For example, with the declarations  \\n  \\n [!code-cpp[System.Security.Permissions.PrincipalPermission#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.security.permissions.principalpermission/cpp/remarks.cpp#3)]\\n [!code-csharp[System.Security.Permissions.PrincipalPermission#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.security.permissions.principalpermission/cs/remarks.cs#3)]\\n [!code-vb[System.Security.Permissions.PrincipalPermission#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.security.permissions.principalpermission/vb/remarks.vb#3)]  \\n  \\n `(ppBob.Union(ppLouise)).Demand()` will succeed if the current principal represents Bob in the role of Administrator or Louise in the role of Administrator.\"\n  syntax:\n    content: public System.Security.IPermission Union (System.Security.IPermission other);\n    parameters:\n    - id: other\n      type: System.Security.IPermission\n      description: A permission to combine with the current permission. It must be of the same type as the current permission.\n    return:\n      type: System.Security.IPermission\n      description: A new permission that represents the union of the current permission and the specified permission.\n  overload: System.Security.Permissions.PrincipalPermission.Union*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>other</code> parameter is an object that is not of the same type as the current permission.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/PrincipalPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.Security.SecurityException\n  parent: System.Security\n  isExternal: false\n  name: SecurityException\n  nameWithType: SecurityException\n  fullName: System.Security.SecurityException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.Security.Permissions.PrincipalPermission.#ctor(System.Security.Permissions.PermissionState)\n  parent: System.Security.Permissions.PrincipalPermission\n  isExternal: false\n  name: PrincipalPermission(PermissionState)\n  nameWithType: PrincipalPermission.PrincipalPermission(PermissionState)\n  fullName: PrincipalPermission.PrincipalPermission(PermissionState)\n- uid: System.Security.Permissions.PermissionState\n  parent: System.Security.Permissions\n  isExternal: false\n  name: PermissionState\n  nameWithType: PermissionState\n  fullName: System.Security.Permissions.PermissionState\n- uid: System.Security.Permissions.PrincipalPermission.#ctor(System.String,System.String)\n  parent: System.Security.Permissions.PrincipalPermission\n  isExternal: false\n  name: PrincipalPermission(String, String)\n  nameWithType: PrincipalPermission.PrincipalPermission(String, String)\n  fullName: PrincipalPermission.PrincipalPermission(String, String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Permissions.PrincipalPermission.#ctor(System.String,System.String,System.Boolean)\n  parent: System.Security.Permissions.PrincipalPermission\n  isExternal: false\n  name: PrincipalPermission(String, String, Boolean)\n  nameWithType: PrincipalPermission.PrincipalPermission(String, String, Boolean)\n  fullName: PrincipalPermission.PrincipalPermission(String, String, Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Permissions.PrincipalPermission.Copy\n  parent: System.Security.Permissions.PrincipalPermission\n  isExternal: false\n  name: Copy()\n  nameWithType: PrincipalPermission.Copy()\n  fullName: PrincipalPermission.Copy()\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Security.Permissions.PrincipalPermission.Demand\n  parent: System.Security.Permissions.PrincipalPermission\n  isExternal: false\n  name: Demand()\n  nameWithType: PrincipalPermission.Demand()\n  fullName: PrincipalPermission.Demand()\n- uid: System.Security.Permissions.PrincipalPermission.Equals(System.Object)\n  parent: System.Security.Permissions.PrincipalPermission\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: PrincipalPermission.Equals(Object)\n  fullName: PrincipalPermission.Equals(Object)\n- uid: System.Security.Permissions.PrincipalPermission.FromXml(System.Security.SecurityElement)\n  parent: System.Security.Permissions.PrincipalPermission\n  isExternal: false\n  name: FromXml(SecurityElement)\n  nameWithType: PrincipalPermission.FromXml(SecurityElement)\n  fullName: PrincipalPermission.FromXml(SecurityElement)\n- uid: System.Security.SecurityElement\n  parent: System.Security\n  isExternal: false\n  name: SecurityElement\n  nameWithType: SecurityElement\n  fullName: System.Security.SecurityElement\n- uid: System.Security.Permissions.PrincipalPermission.GetHashCode\n  parent: System.Security.Permissions.PrincipalPermission\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: PrincipalPermission.GetHashCode()\n  fullName: PrincipalPermission.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Permissions.PrincipalPermission.Intersect(System.Security.IPermission)\n  parent: System.Security.Permissions.PrincipalPermission\n  isExternal: false\n  name: Intersect(IPermission)\n  nameWithType: PrincipalPermission.Intersect(IPermission)\n  fullName: PrincipalPermission.Intersect(IPermission)\n- uid: System.Security.Permissions.PrincipalPermission.IsSubsetOf(System.Security.IPermission)\n  parent: System.Security.Permissions.PrincipalPermission\n  isExternal: false\n  name: IsSubsetOf(IPermission)\n  nameWithType: PrincipalPermission.IsSubsetOf(IPermission)\n  fullName: PrincipalPermission.IsSubsetOf(IPermission)\n- uid: System.Security.Permissions.PrincipalPermission.IsUnrestricted\n  parent: System.Security.Permissions.PrincipalPermission\n  isExternal: false\n  name: IsUnrestricted()\n  nameWithType: PrincipalPermission.IsUnrestricted()\n  fullName: PrincipalPermission.IsUnrestricted()\n- uid: System.Security.Permissions.PrincipalPermission.ToString\n  parent: System.Security.Permissions.PrincipalPermission\n  isExternal: false\n  name: ToString()\n  nameWithType: PrincipalPermission.ToString()\n  fullName: PrincipalPermission.ToString()\n- uid: System.Security.Permissions.PrincipalPermission.ToXml\n  parent: System.Security.Permissions.PrincipalPermission\n  isExternal: false\n  name: ToXml()\n  nameWithType: PrincipalPermission.ToXml()\n  fullName: PrincipalPermission.ToXml()\n- uid: System.Security.Permissions.PrincipalPermission.Union(System.Security.IPermission)\n  parent: System.Security.Permissions.PrincipalPermission\n  isExternal: false\n  name: Union(IPermission)\n  nameWithType: PrincipalPermission.Union(IPermission)\n  fullName: PrincipalPermission.Union(IPermission)\n- uid: System.Security.Permissions.PrincipalPermission.#ctor*\n  parent: System.Security.Permissions.PrincipalPermission\n  isExternal: false\n  name: PrincipalPermission\n  nameWithType: PrincipalPermission.PrincipalPermission\n  fullName: PrincipalPermission.PrincipalPermission\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/PrincipalPermission.xml\n- uid: System.Security.Permissions.PrincipalPermission.Copy*\n  parent: System.Security.Permissions.PrincipalPermission\n  isExternal: false\n  name: Copy\n  nameWithType: PrincipalPermission.Copy\n  fullName: PrincipalPermission.Copy\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/PrincipalPermission.xml\n- uid: System.Security.Permissions.PrincipalPermission.Demand*\n  parent: System.Security.Permissions.PrincipalPermission\n  isExternal: false\n  name: Demand\n  nameWithType: PrincipalPermission.Demand\n  fullName: PrincipalPermission.Demand\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/PrincipalPermission.xml\n- uid: System.Security.Permissions.PrincipalPermission.Equals*\n  parent: System.Security.Permissions.PrincipalPermission\n  isExternal: false\n  name: Equals\n  nameWithType: PrincipalPermission.Equals\n  fullName: PrincipalPermission.Equals\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/PrincipalPermission.xml\n- uid: System.Security.Permissions.PrincipalPermission.FromXml*\n  parent: System.Security.Permissions.PrincipalPermission\n  isExternal: false\n  name: FromXml\n  nameWithType: PrincipalPermission.FromXml\n  fullName: PrincipalPermission.FromXml\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/PrincipalPermission.xml\n- uid: System.Security.Permissions.PrincipalPermission.GetHashCode*\n  parent: System.Security.Permissions.PrincipalPermission\n  isExternal: false\n  name: GetHashCode\n  nameWithType: PrincipalPermission.GetHashCode\n  fullName: PrincipalPermission.GetHashCode\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/PrincipalPermission.xml\n- uid: System.Security.Permissions.PrincipalPermission.Intersect*\n  parent: System.Security.Permissions.PrincipalPermission\n  isExternal: false\n  name: Intersect\n  nameWithType: PrincipalPermission.Intersect\n  fullName: PrincipalPermission.Intersect\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/PrincipalPermission.xml\n- uid: System.Security.Permissions.PrincipalPermission.IsSubsetOf*\n  parent: System.Security.Permissions.PrincipalPermission\n  isExternal: false\n  name: IsSubsetOf\n  nameWithType: PrincipalPermission.IsSubsetOf\n  fullName: PrincipalPermission.IsSubsetOf\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/PrincipalPermission.xml\n- uid: System.Security.Permissions.PrincipalPermission.IsUnrestricted*\n  parent: System.Security.Permissions.PrincipalPermission\n  isExternal: false\n  name: IsUnrestricted\n  nameWithType: PrincipalPermission.IsUnrestricted\n  fullName: PrincipalPermission.IsUnrestricted\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/PrincipalPermission.xml\n- uid: System.Security.Permissions.PrincipalPermission.ToString*\n  parent: System.Security.Permissions.PrincipalPermission\n  isExternal: false\n  name: ToString\n  nameWithType: PrincipalPermission.ToString\n  fullName: PrincipalPermission.ToString\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/PrincipalPermission.xml\n- uid: System.Security.Permissions.PrincipalPermission.ToXml*\n  parent: System.Security.Permissions.PrincipalPermission\n  isExternal: false\n  name: ToXml\n  nameWithType: PrincipalPermission.ToXml\n  fullName: PrincipalPermission.ToXml\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/PrincipalPermission.xml\n- uid: System.Security.Permissions.PrincipalPermission.Union*\n  parent: System.Security.Permissions.PrincipalPermission\n  isExternal: false\n  name: Union\n  nameWithType: PrincipalPermission.Union\n  fullName: PrincipalPermission.Union\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/PrincipalPermission.xml\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Security.Permissions.IUnrestrictedPermission\n  parent: System.Security.Permissions\n  isExternal: false\n  name: IUnrestrictedPermission\n  nameWithType: IUnrestrictedPermission\n  fullName: System.Security.Permissions.IUnrestrictedPermission\n"}