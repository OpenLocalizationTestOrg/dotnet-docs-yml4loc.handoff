{"nodes":[{"content":"Specifies how the operating system should open a file.","nodes":[{"pos":[0,54],"content":"Specifies how the operating system should open a file.","nodes":[{"content":"Specifies how the operating system should open a file.","pos":[0,54]}]}],"pos":[550,605],"yaml":true},{"content":"For an example of creating a file and writing text to a file, see [How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md). For an example of reading text from a file, see [How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md). For an example of reading from and writing to a binary file, see [How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md).  \n  \n A `FileMode` parameter is specified in many of the constructors for <xref:System.IO.FileStream>, <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream>, and in the `Open` methods of <xref:System.IO.File> and <xref:System.IO.FileInfo> to control how a file is opened.  \n  \n `FileMode` parameters control whether a file is overwritten, created, opened, or some combination thereof. Use `Open` to open an existing file. To append to a file, use `Append`. To truncate a file or create a file if it doesn't exist, use `Create`.","nodes":[{"pos":[0,475],"content":"For an example of creating a file and writing text to a file, see [How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md). For an example of reading text from a file, see [How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md). For an example of reading from and writing to a binary file, see [How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md).","nodes":[{"content":"For an example of creating a file and writing text to a file, see <bpt id=\"p1\">[</bpt>How to: Write Text to a File<ept id=\"p1\">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept>.","pos":[0,148],"source":"For an example of creating a file and writing text to a file, see [How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md)."},{"content":"For an example of reading text from a file, see <bpt id=\"p1\">[</bpt>How to: Read Text from a File<ept id=\"p1\">](~/docs/standard/io/how-to-read-text-from-a-file.md)</ept>.","pos":[149,281],"source":" For an example of reading text from a file, see [How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md)."},{"content":"For an example of reading from and writing to a binary file, see <bpt id=\"p1\">[</bpt>How to: Read and Write to a Newly Created Data File<ept id=\"p1\">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept>.","pos":[282,475],"source":" For an example of reading from and writing to a binary file, see [How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)."}]},{"pos":[482,752],"content":"A <ph id=\"ph1\">`FileMode`</ph> parameter is specified in many of the constructors for <ph id=\"ph2\">&lt;xref:System.IO.FileStream&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFileStream&gt;</ph>, and in the <ph id=\"ph4\">`Open`</ph> methods of <ph id=\"ph5\">&lt;xref:System.IO.File&gt;</ph> and <ph id=\"ph6\">&lt;xref:System.IO.FileInfo&gt;</ph> to control how a file is opened.","source":"A `FileMode` parameter is specified in many of the constructors for <xref:System.IO.FileStream>, <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream>, and in the `Open` methods of <xref:System.IO.File> and <xref:System.IO.FileInfo> to control how a file is opened."},{"pos":[759,1008],"content":"`FileMode` parameters control whether a file is overwritten, created, opened, or some combination thereof. Use `Open` to open an existing file. To append to a file, use `Append`. To truncate a file or create a file if it doesn't exist, use `Create`.","nodes":[{"content":"<ph id=\"ph1\">`FileMode`</ph> parameters control whether a file is overwritten, created, opened, or some combination thereof.","pos":[0,106],"source":"`FileMode` parameters control whether a file is overwritten, created, opened, or some combination thereof."},{"content":"Use <ph id=\"ph1\">`Open`</ph> to open an existing file.","pos":[107,143],"source":" Use `Open` to open an existing file."},{"content":"To append to a file, use <ph id=\"ph1\">`Append`</ph>.","pos":[144,178],"source":" To append to a file, use `Append`."},{"content":"To truncate a file or create a file if it doesn't exist, use <ph id=\"ph1\">`Create`</ph>.","pos":[179,249],"source":" To truncate a file or create a file if it doesn't exist, use `Create`."}]}],"pos":[616,1631],"yaml":true,"extradata":"MT"},{"content":"Opens the file if it exists and seeks to the end of the file, or creates a new file. This requires <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Append\"></xref> permission. `FileMode.Append` can be used only in conjunction with `FileAccess.Write`. Trying to seek to a position before the end of the file throws an <xref href=\"System.IO.IOException\"></xref> exception, and any attempt to read fails and throws a <xref href=\"System.NotSupportedException\"></xref> exception.","nodes":[{"pos":[0,488],"content":"Opens the file if it exists and seeks to the end of the file, or creates a new file. This requires <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Append\"></xref> permission. `FileMode.Append` can be used only in conjunction with `FileAccess.Write`. Trying to seek to a position before the end of the file throws an <xref href=\"System.IO.IOException\"></xref> exception, and any attempt to read fails and throws a <xref href=\"System.NotSupportedException\"></xref> exception.","nodes":[{"content":"Opens the file if it exists and seeks to the end of the file, or creates a new file.","pos":[0,84]},{"content":"This requires <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.FileIOPermissionAccess.Append\"&gt;&lt;/xref&gt;</ph> permission.","pos":[85,189],"source":" This requires <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Append\"></xref> permission."},{"content":"<ph id=\"ph1\">`FileMode.Append`</ph> can be used only in conjunction with <ph id=\"ph2\">`FileAccess.Write`</ph>.","pos":[190,264],"source":"`FileMode.Append` can be used only in conjunction with `FileAccess.Write`."},{"content":"Trying to seek to a position before the end of the file throws an <ph id=\"ph1\">&lt;xref href=\"System.IO.IOException\"&gt;&lt;/xref&gt;</ph> exception, and any attempt to read fails and throws a <ph id=\"ph2\">&lt;xref href=\"System.NotSupportedException\"&gt;&lt;/xref&gt;</ph> exception.","pos":[265,488],"source":" Trying to seek to a position before the end of the file throws an <xref href=\"System.IO.IOException\"></xref> exception, and any attempt to read fails and throws a <xref href=\"System.NotSupportedException\"></xref> exception."}]}],"pos":[3660,4149],"yaml":true},{"content":"Specifies that the operating system should create a new file. If the file already exists, it will be overwritten. This requires <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Write\"></xref> permission. `FileMode.Create` is equivalent to requesting that if the file does not exist, use <xref href=\"System.IO.FileMode.CreateNew\"></xref>; otherwise, use <xref href=\"System.IO.FileMode.Truncate\"></xref>. If the file already exists but is a hidden file, an <xref href=\"System.UnauthorizedAccessException\"></xref> exception is thrown.","nodes":[{"pos":[0,545],"content":"Specifies that the operating system should create a new file. If the file already exists, it will be overwritten. This requires <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Write\"></xref> permission. `FileMode.Create` is equivalent to requesting that if the file does not exist, use <xref href=\"System.IO.FileMode.CreateNew\"></xref>; otherwise, use <xref href=\"System.IO.FileMode.Truncate\"></xref>. If the file already exists but is a hidden file, an <xref href=\"System.UnauthorizedAccessException\"></xref> exception is thrown.","nodes":[{"content":"Specifies that the operating system should create a new file.","pos":[0,61]},{"content":"If the file already exists, it will be overwritten.","pos":[62,113]},{"content":"This requires <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.FileIOPermissionAccess.Write\"&gt;&lt;/xref&gt;</ph> permission.","pos":[114,217],"source":" This requires <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Write\"></xref> permission."},{"content":"<ph id=\"ph1\">`FileMode.Create`</ph> is equivalent to requesting that if the file does not exist, use <ph id=\"ph2\">&lt;xref href=\"System.IO.FileMode.CreateNew\"&gt;&lt;/xref&gt;</ph>; otherwise, use <ph id=\"ph3\">&lt;xref href=\"System.IO.FileMode.Truncate\"&gt;&lt;/xref&gt;</ph>.","pos":[218,416],"source":"`FileMode.Create` is equivalent to requesting that if the file does not exist, use <xref href=\"System.IO.FileMode.CreateNew\"></xref>; otherwise, use <xref href=\"System.IO.FileMode.Truncate\"></xref>."},{"content":"If the file already exists but is a hidden file, an <ph id=\"ph1\">&lt;xref href=\"System.UnauthorizedAccessException\"&gt;&lt;/xref&gt;</ph> exception is thrown.","pos":[417,545],"source":" If the file already exists but is a hidden file, an <xref href=\"System.UnauthorizedAccessException\"></xref> exception is thrown."}]}],"pos":[5420,5966],"yaml":true},{"content":"Specifies that the operating system should create a new file. This requires <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Write\"></xref> permission. If the file already exists, an <xref href=\"System.IO.IOException\"></xref> exception is thrown.","nodes":[{"pos":[0,260],"content":"Specifies that the operating system should create a new file. This requires <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Write\"></xref> permission. If the file already exists, an <xref href=\"System.IO.IOException\"></xref> exception is thrown.","nodes":[{"content":"Specifies that the operating system should create a new file.","pos":[0,61]},{"content":"This requires <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.FileIOPermissionAccess.Write\"&gt;&lt;/xref&gt;</ph> permission.","pos":[62,165],"source":" This requires <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Write\"></xref> permission."},{"content":"If the file already exists, an <ph id=\"ph1\">&lt;xref href=\"System.IO.IOException\"&gt;&lt;/xref&gt;</ph> exception is thrown.","pos":[166,260],"source":" If the file already exists, an <xref href=\"System.IO.IOException\"></xref> exception is thrown."}]}],"pos":[7255,7516],"yaml":true},{"content":"Specifies that the operating system should open an existing file. The ability to open the file is dependent on the value specified by the <xref href=\"System.IO.FileAccess\"></xref> enumeration. A <xref href=\"System.IO.FileNotFoundException\"></xref> exception is thrown if the file does not exist.","nodes":[{"pos":[0,295],"content":"Specifies that the operating system should open an existing file. The ability to open the file is dependent on the value specified by the <xref href=\"System.IO.FileAccess\"></xref> enumeration. A <xref href=\"System.IO.FileNotFoundException\"></xref> exception is thrown if the file does not exist.","nodes":[{"content":"Specifies that the operating system should open an existing file.","pos":[0,65]},{"content":"The ability to open the file is dependent on the value specified by the <ph id=\"ph1\">&lt;xref href=\"System.IO.FileAccess\"&gt;&lt;/xref&gt;</ph> enumeration.","pos":[66,192],"source":" The ability to open the file is dependent on the value specified by the <xref href=\"System.IO.FileAccess\"></xref> enumeration."},{"content":"A <ph id=\"ph1\">&lt;xref href=\"System.IO.FileNotFoundException\"&gt;&lt;/xref&gt;</ph> exception is thrown if the file does not exist.","pos":[193,295],"source":" A <xref href=\"System.IO.FileNotFoundException\"></xref> exception is thrown if the file does not exist."}]}],"pos":[8778,9074],"yaml":true},{"content":"Specifies that the operating system should open a file if it exists; otherwise, a new file should be created. If the file is opened with `FileAccess.Read`, <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Read\"></xref> permission is required. If the file access is `FileAccess.Write`, <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Write\"></xref> permission is required. If the file is opened with `FileAccess.ReadWrite`, both <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Read\"></xref> and <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Write\"></xref> permissions are required.","nodes":[{"pos":[0,641],"content":"Specifies that the operating system should open a file if it exists; otherwise, a new file should be created. If the file is opened with `FileAccess.Read`, <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Read\"></xref> permission is required. If the file access is `FileAccess.Write`, <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Write\"></xref> permission is required. If the file is opened with `FileAccess.ReadWrite`, both <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Read\"></xref> and <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Write\"></xref> permissions are required.","nodes":[{"content":"Specifies that the operating system should open a file if it exists; otherwise, a new file should be created.","pos":[0,109]},{"content":"If the file is opened with <ph id=\"ph1\">`FileAccess.Read`</ph>, <ph id=\"ph2\">&lt;xref href=\"System.Security.Permissions.FileIOPermissionAccess.Read\"&gt;&lt;/xref&gt;</ph> permission is required.","pos":[110,256],"source":" If the file is opened with `FileAccess.Read`, <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Read\"></xref> permission is required."},{"content":"If the file access is <ph id=\"ph1\">`FileAccess.Write`</ph>, <ph id=\"ph2\">&lt;xref href=\"System.Security.Permissions.FileIOPermissionAccess.Write\"&gt;&lt;/xref&gt;</ph> permission is required.","pos":[257,400],"source":" If the file access is `FileAccess.Write`, <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Write\"></xref> permission is required."},{"content":"If the file is opened with <ph id=\"ph1\">`FileAccess.ReadWrite`</ph>, both <ph id=\"ph2\">&lt;xref href=\"System.Security.Permissions.FileIOPermissionAccess.Read\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph3\">&lt;xref href=\"System.Security.Permissions.FileIOPermissionAccess.Write\"&gt;&lt;/xref&gt;</ph> permissions are required.","pos":[401,641],"source":" If the file is opened with `FileAccess.ReadWrite`, both <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Read\"></xref> and <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Write\"></xref> permissions are required."}]}],"pos":[10379,11021],"yaml":true},{"content":"Specifies that the operating system should open an existing file. When the file is opened, it should be truncated so that its size is zero bytes. This requires <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Write\"></xref> permission. Attempts to read from a file opened with `FileMode.Truncate` cause an <xref href=\"System.ArgumentException\"></xref> exception.","nodes":[{"pos":[0,376],"content":"Specifies that the operating system should open an existing file. When the file is opened, it should be truncated so that its size is zero bytes. This requires <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Write\"></xref> permission. Attempts to read from a file opened with `FileMode.Truncate` cause an <xref href=\"System.ArgumentException\"></xref> exception.","nodes":[{"content":"Specifies that the operating system should open an existing file.","pos":[0,65]},{"content":"When the file is opened, it should be truncated so that its size is zero bytes.","pos":[66,145]},{"content":"This requires <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.FileIOPermissionAccess.Write\"&gt;&lt;/xref&gt;</ph> permission.","pos":[146,249],"source":" This requires <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Write\"></xref> permission."},{"content":"Attempts to read from a file opened with <ph id=\"ph1\">`FileMode.Truncate`</ph> cause an <ph id=\"ph2\">&lt;xref href=\"System.ArgumentException\"&gt;&lt;/xref&gt;</ph> exception.","pos":[250,376],"source":" Attempts to read from a file opened with `FileMode.Truncate` cause an <xref href=\"System.ArgumentException\"></xref> exception."}]}],"pos":[12310,12687],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.IO.FileMode\n  commentId: T:System.IO.FileMode\n  id: FileMode\n  children:\n  - System.IO.FileMode.Append\n  - System.IO.FileMode.Create\n  - System.IO.FileMode.CreateNew\n  - System.IO.FileMode.Open\n  - System.IO.FileMode.OpenOrCreate\n  - System.IO.FileMode.Truncate\n  langs:\n  - csharp\n  name: FileMode\n  nameWithType: FileMode\n  fullName: System.IO.FileMode\n  type: Enum\n  assemblies:\n  - System.IO.FileSystem.Primitives\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Specifies how the operating system should open a file.\n  remarks: \"For an example of creating a file and writing text to a file, see [How to: Write Text to a File](~/docs/standard/io/how-to-write-text-to-a-file.md). For an example of reading text from a file, see [How to: Read Text from a File](~/docs/standard/io/how-to-read-text-from-a-file.md). For an example of reading from and writing to a binary file, see [How to: Read and Write to a Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md).  \\n  \\n A `FileMode` parameter is specified in many of the constructors for <xref:System.IO.FileStream>, <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream>, and in the `Open` methods of <xref:System.IO.File> and <xref:System.IO.FileInfo> to control how a file is opened.  \\n  \\n `FileMode` parameters control whether a file is overwritten, created, opened, or some combination thereof. Use `Open` to open an existing file. To append to a file, use `Append`. To truncate a file or create a file if it doesn't exist, use `Create`.\"\n  example:\n  - \"The following `FileStream` constructor opens an existing file (`FileMode.Open`).  \\n  \\n [!code-cpp[Classic FileAccess Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FileAccess Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic FileAccess Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FileAccess Example/CS/source.cs#1)]\\n [!code-vb[Classic FileAccess Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FileAccess Example/VB/source.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public enum FileMode\n  inheritance:\n  - System.Object\n  - System.ValueType\n  - System.Enum\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileMode.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.FileMode.Append\n  commentId: F:System.IO.FileMode.Append\n  id: Append\n  parent: System.IO.FileMode\n  langs:\n  - csharp\n  name: Append\n  nameWithType: FileMode.Append\n  fullName: FileMode.Append\n  type: Field\n  assemblies:\n  - System.IO.FileSystem.Primitives\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Opens the file if it exists and seeks to the end of the file, or creates a new file. This requires <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Append\"></xref> permission. `FileMode.Append` can be used only in conjunction with `FileAccess.Write`. Trying to seek to a position before the end of the file throws an <xref href=\"System.IO.IOException\"></xref> exception, and any attempt to read fails and throws a <xref href=\"System.NotSupportedException\"></xref> exception.\n  syntax:\n    content: Append\n    return:\n      type: System.IO.FileMode\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileMode.xml\n- uid: System.IO.FileMode.Create\n  commentId: F:System.IO.FileMode.Create\n  id: Create\n  parent: System.IO.FileMode\n  langs:\n  - csharp\n  name: Create\n  nameWithType: FileMode.Create\n  fullName: FileMode.Create\n  type: Field\n  assemblies:\n  - System.IO.FileSystem.Primitives\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Specifies that the operating system should create a new file. If the file already exists, it will be overwritten. This requires <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Write\"></xref> permission. `FileMode.Create` is equivalent to requesting that if the file does not exist, use <xref href=\"System.IO.FileMode.CreateNew\"></xref>; otherwise, use <xref href=\"System.IO.FileMode.Truncate\"></xref>. If the file already exists but is a hidden file, an <xref href=\"System.UnauthorizedAccessException\"></xref> exception is thrown.\n  syntax:\n    content: Create\n    return:\n      type: System.IO.FileMode\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileMode.xml\n- uid: System.IO.FileMode.CreateNew\n  commentId: F:System.IO.FileMode.CreateNew\n  id: CreateNew\n  parent: System.IO.FileMode\n  langs:\n  - csharp\n  name: CreateNew\n  nameWithType: FileMode.CreateNew\n  fullName: FileMode.CreateNew\n  type: Field\n  assemblies:\n  - System.IO.FileSystem.Primitives\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Specifies that the operating system should create a new file. This requires <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Write\"></xref> permission. If the file already exists, an <xref href=\"System.IO.IOException\"></xref> exception is thrown.\n  syntax:\n    content: CreateNew\n    return:\n      type: System.IO.FileMode\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileMode.xml\n- uid: System.IO.FileMode.Open\n  commentId: F:System.IO.FileMode.Open\n  id: Open\n  parent: System.IO.FileMode\n  langs:\n  - csharp\n  name: Open\n  nameWithType: FileMode.Open\n  fullName: FileMode.Open\n  type: Field\n  assemblies:\n  - System.IO.FileSystem.Primitives\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Specifies that the operating system should open an existing file. The ability to open the file is dependent on the value specified by the <xref href=\"System.IO.FileAccess\"></xref> enumeration. A <xref href=\"System.IO.FileNotFoundException\"></xref> exception is thrown if the file does not exist.\n  syntax:\n    content: Open\n    return:\n      type: System.IO.FileMode\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileMode.xml\n- uid: System.IO.FileMode.OpenOrCreate\n  commentId: F:System.IO.FileMode.OpenOrCreate\n  id: OpenOrCreate\n  parent: System.IO.FileMode\n  langs:\n  - csharp\n  name: OpenOrCreate\n  nameWithType: FileMode.OpenOrCreate\n  fullName: FileMode.OpenOrCreate\n  type: Field\n  assemblies:\n  - System.IO.FileSystem.Primitives\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Specifies that the operating system should open a file if it exists; otherwise, a new file should be created. If the file is opened with `FileAccess.Read`, <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Read\"></xref> permission is required. If the file access is `FileAccess.Write`, <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Write\"></xref> permission is required. If the file is opened with `FileAccess.ReadWrite`, both <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Read\"></xref> and <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Write\"></xref> permissions are required.\n  syntax:\n    content: OpenOrCreate\n    return:\n      type: System.IO.FileMode\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileMode.xml\n- uid: System.IO.FileMode.Truncate\n  commentId: F:System.IO.FileMode.Truncate\n  id: Truncate\n  parent: System.IO.FileMode\n  langs:\n  - csharp\n  name: Truncate\n  nameWithType: FileMode.Truncate\n  fullName: FileMode.Truncate\n  type: Field\n  assemblies:\n  - System.IO.FileSystem.Primitives\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Specifies that the operating system should open an existing file. When the file is opened, it should be truncated so that its size is zero bytes. This requires <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Write\"></xref> permission. Attempts to read from a file opened with `FileMode.Truncate` cause an <xref href=\"System.ArgumentException\"></xref> exception.\n  syntax:\n    content: Truncate\n    return:\n      type: System.IO.FileMode\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileMode.xml\nreferences:\n- uid: System.Enum\n  parent: System\n  isExternal: false\n  name: Enum\n  nameWithType: Enum\n  fullName: System.Enum\n- uid: System.IO.FileMode.Append\n  parent: System.IO.FileMode\n  isExternal: false\n  name: Append\n  nameWithType: FileMode.Append\n  fullName: FileMode.Append\n- uid: System.IO.FileMode\n  parent: System.IO\n  isExternal: false\n  name: FileMode\n  nameWithType: FileMode\n  fullName: System.IO.FileMode\n- uid: System.IO.FileMode.Create\n  parent: System.IO.FileMode\n  isExternal: false\n  name: Create\n  nameWithType: FileMode.Create\n  fullName: FileMode.Create\n- uid: System.IO.FileMode.CreateNew\n  parent: System.IO.FileMode\n  isExternal: false\n  name: CreateNew\n  nameWithType: FileMode.CreateNew\n  fullName: FileMode.CreateNew\n- uid: System.IO.FileMode.Open\n  parent: System.IO.FileMode\n  isExternal: false\n  name: Open\n  nameWithType: FileMode.Open\n  fullName: FileMode.Open\n- uid: System.IO.FileMode.OpenOrCreate\n  parent: System.IO.FileMode\n  isExternal: false\n  name: OpenOrCreate\n  nameWithType: FileMode.OpenOrCreate\n  fullName: FileMode.OpenOrCreate\n- uid: System.IO.FileMode.Truncate\n  parent: System.IO.FileMode\n  isExternal: false\n  name: Truncate\n  nameWithType: FileMode.Truncate\n  fullName: FileMode.Truncate\n"}