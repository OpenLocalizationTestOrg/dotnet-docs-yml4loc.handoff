{"nodes":[{"content":"Specifies when you can use a licensed object and provides a way of obtaining additional services needed to support licenses running within its domain.","nodes":[{"pos":[0,150],"content":"Specifies when you can use a licensed object and provides a way of obtaining additional services needed to support licenses running within its domain.","nodes":[{"content":"Specifies when you can use a licensed object and provides a way of obtaining additional services needed to support licenses running within its domain.","pos":[0,150]}]}],"pos":[779,930],"yaml":true},{"content":"This class provides the default <xref:System.ComponentModel.LicenseContext>. It implements only run-time support and does not support saved license keys.","nodes":[{"pos":[0,153],"content":"This class provides the default <xref:System.ComponentModel.LicenseContext>. It implements only run-time support and does not support saved license keys.","nodes":[{"content":"This class provides the default <xref:System.ComponentModel.LicenseContext>. It implements only run-time support and does not support saved license keys.","pos":[0,153],"nodes":[{"content":"This class provides the default <ph id=\"ph1\">&lt;xref:System.ComponentModel.LicenseContext&gt;</ph>.","pos":[0,76],"source":"This class provides the default <xref:System.ComponentModel.LicenseContext>."},{"content":"It implements only run-time support and does not support saved license keys.","pos":[77,153]}]}]}],"pos":[941,1095],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.ComponentModel.LicenseContext\"></xref> class.","nodes":[{"pos":[0,98],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.LicenseContext\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.ComponentModel.LicenseContext\"></xref> class."}],"pos":[2797,2896],"yaml":true},{"content":"When overridden in a derived class, returns a saved license key for the specified type, from the specified resource assembly.","nodes":[{"pos":[0,125],"content":"When overridden in a derived class, returns a saved license key for the specified type, from the specified resource assembly.","nodes":[{"content":"When overridden in a derived class, returns a saved license key for the specified type, from the specified resource assembly.","pos":[0,125]}]}],"pos":[4428,4554],"yaml":true},{"content":"A <xref href=\"System.Type\"></xref> that represents the type of component.","nodes":[{"pos":[0,73],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> that represents the type of component.","source":"A <xref href=\"System.Type\"></xref> that represents the type of component."}],"pos":[4750,4824],"yaml":true},{"content":"An <xref href=\"System.Reflection.Assembly\"></xref> with the license key.","nodes":[{"pos":[0,72],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Assembly\"&gt;&lt;/xref&gt;</ph> with the license key.","source":"An <xref href=\"System.Reflection.Assembly\"></xref> with the license key."}],"pos":[4909,4982],"yaml":true},{"content":"The <xref href=\"System.ComponentModel.License.LicenseKey\"></xref> for the specified type. This method returns `null` unless you override it.","nodes":[{"pos":[0,140],"content":"The <xref href=\"System.ComponentModel.License.LicenseKey\"></xref> for the specified type. This method returns `null` unless you override it.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.License.LicenseKey\"&gt;&lt;/xref&gt;</ph> for the specified type.","pos":[0,89],"source":"The <xref href=\"System.ComponentModel.License.LicenseKey\"></xref> for the specified type."},{"content":"This method returns <ph id=\"ph1\">`null`</ph> unless you override it.","pos":[90,140],"source":" This method returns `null` unless you override it."}]}],"pos":[5039,5180],"yaml":true},{"content":"Gets the requested service, if it is available.","nodes":[{"pos":[0,47],"content":"Gets the requested service, if it is available.","nodes":[{"content":"Gets the requested service, if it is available.","pos":[0,47]}]}],"pos":[6498,6546],"yaml":true},{"content":"The type of service to retrieve.","nodes":[{"pos":[0,32],"content":"The type of service to retrieve.","nodes":[{"content":"The type of service to retrieve.","pos":[0,32]}]}],"pos":[6689,6722],"yaml":true},{"content":"An instance of the service, or `null` if the service cannot be found.","nodes":[{"pos":[0,69],"content":"An instance of the service, or <ph id=\"ph1\">`null`</ph> if the service cannot be found.","source":"An instance of the service, or `null` if the service cannot be found."}],"pos":[6779,6849],"yaml":true},{"content":"When overridden in a derived class, sets a license key for the specified type.","nodes":[{"pos":[0,78],"content":"When overridden in a derived class, sets a license key for the specified type.","nodes":[{"content":"When overridden in a derived class, sets a license key for the specified type.","pos":[0,78]}]}],"pos":[8273,8352],"yaml":true},{"content":"Typically, call this method when you set <xref:System.ComponentModel.LicenseUsageMode> at design time. You must override the <xref:System.ComponentModel.LicenseContext.UsageMode%2A> property to implement design-time license support.","nodes":[{"pos":[0,232],"content":"Typically, call this method when you set <xref:System.ComponentModel.LicenseUsageMode> at design time. You must override the <xref:System.ComponentModel.LicenseContext.UsageMode%2A> property to implement design-time license support.","nodes":[{"content":"Typically, call this method when you set <xref:System.ComponentModel.LicenseUsageMode> at design time. You must override the <xref:System.ComponentModel.LicenseContext.UsageMode%2A> property to implement design-time license support.","pos":[0,232],"nodes":[{"content":"Typically, call this method when you set <ph id=\"ph1\">&lt;xref:System.ComponentModel.LicenseUsageMode&gt;</ph> at design time.","pos":[0,102],"source":"Typically, call this method when you set <xref:System.ComponentModel.LicenseUsageMode> at design time."},{"content":"You must override the <ph id=\"ph1\">&lt;xref:System.ComponentModel.LicenseContext.UsageMode%2A&gt;</ph> property to implement design-time license support.","pos":[103,232],"source":" You must override the <xref:System.ComponentModel.LicenseContext.UsageMode%2A> property to implement design-time license support."}]}]}],"pos":[8363,8596],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Type\"></xref> that represents the component associated with the license key.","nodes":[{"pos":[0,97],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> that represents the component associated with the license key.","source":"A <xref href=\"System.Type\"></xref> that represents the component associated with the license key."}],"pos":[8757,8855],"yaml":true},{"content":"The <xref href=\"System.ComponentModel.License.LicenseKey\"></xref> to save for the type of component.","nodes":[{"pos":[0,100],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.License.LicenseKey\"&gt;&lt;/xref&gt;</ph> to save for the type of component.","source":"The <xref href=\"System.ComponentModel.License.LicenseKey\"></xref> to save for the type of component."}],"pos":[8914,9015],"yaml":true},{"content":"When overridden in a derived class, gets a value that specifies when you can use a license.","nodes":[{"pos":[0,91],"content":"When overridden in a derived class, gets a value that specifies when you can use a license.","nodes":[{"content":"When overridden in a derived class, gets a value that specifies when you can use a license.","pos":[0,91]}]}],"pos":[10272,10364],"yaml":true},{"content":"One of the <xref href=\"System.ComponentModel.LicenseUsageMode\"></xref> values that specifies when you can use a license. The default is <xref href=\"System.ComponentModel.LicenseUsageMode.Runtime\"></xref>.","nodes":[{"pos":[0,204],"content":"One of the <xref href=\"System.ComponentModel.LicenseUsageMode\"></xref> values that specifies when you can use a license. The default is <xref href=\"System.ComponentModel.LicenseUsageMode.Runtime\"></xref>.","nodes":[{"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.LicenseUsageMode\"&gt;&lt;/xref&gt;</ph> values that specifies when you can use a license.","pos":[0,120],"source":"One of the <xref href=\"System.ComponentModel.LicenseUsageMode\"></xref> values that specifies when you can use a license."},{"content":"The default is <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.LicenseUsageMode.Runtime\"&gt;&lt;/xref&gt;</ph>.","pos":[121,204],"source":" The default is <xref href=\"System.ComponentModel.LicenseUsageMode.Runtime\"></xref>."}]}],"pos":[10542,10747],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ComponentModel.LicenseContext\n  commentId: T:System.ComponentModel.LicenseContext\n  id: LicenseContext\n  children:\n  - System.ComponentModel.LicenseContext.#ctor\n  - System.ComponentModel.LicenseContext.GetSavedLicenseKey(System.Type,System.Reflection.Assembly)\n  - System.ComponentModel.LicenseContext.GetService(System.Type)\n  - System.ComponentModel.LicenseContext.SetSavedLicenseKey(System.Type,System.String)\n  - System.ComponentModel.LicenseContext.UsageMode\n  langs:\n  - csharp\n  name: LicenseContext\n  nameWithType: LicenseContext\n  fullName: System.ComponentModel.LicenseContext\n  type: Class\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: Specifies when you can use a licensed object and provides a way of obtaining additional services needed to support licenses running within its domain.\n  remarks: This class provides the default <xref:System.ComponentModel.LicenseContext>. It implements only run-time support and does not support saved license keys.\n  syntax:\n    content: 'public class LicenseContext : IServiceProvider'\n  inheritance:\n  - System.Object\n  derivedClasses:\n  - System.ComponentModel.Design.DesigntimeLicenseContext\n  implements:\n  - System.IServiceProvider\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/LicenseContext.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.LicenseContext.#ctor\n  commentId: M:System.ComponentModel.LicenseContext.#ctor\n  id: '#ctor'\n  parent: System.ComponentModel.LicenseContext\n  langs:\n  - csharp\n  name: LicenseContext()\n  nameWithType: LicenseContext.LicenseContext()\n  fullName: LicenseContext.LicenseContext()\n  type: Constructor\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: Initializes a new instance of the <xref href=\"System.ComponentModel.LicenseContext\"></xref> class.\n  syntax:\n    content: public LicenseContext ();\n    parameters: []\n  overload: System.ComponentModel.LicenseContext.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/LicenseContext.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.LicenseContext.GetSavedLicenseKey(System.Type,System.Reflection.Assembly)\n  commentId: M:System.ComponentModel.LicenseContext.GetSavedLicenseKey(System.Type,System.Reflection.Assembly)\n  id: GetSavedLicenseKey(System.Type,System.Reflection.Assembly)\n  parent: System.ComponentModel.LicenseContext\n  langs:\n  - csharp\n  name: GetSavedLicenseKey(Type, Assembly)\n  nameWithType: LicenseContext.GetSavedLicenseKey(Type, Assembly)\n  fullName: LicenseContext.GetSavedLicenseKey(Type, Assembly)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: When overridden in a derived class, returns a saved license key for the specified type, from the specified resource assembly.\n  syntax:\n    content: public virtual string GetSavedLicenseKey (Type type, System.Reflection.Assembly resourceAssembly);\n    parameters:\n    - id: type\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> that represents the type of component.\n    - id: resourceAssembly\n      type: System.Reflection.Assembly\n      description: An <xref href=\"System.Reflection.Assembly\"></xref> with the license key.\n    return:\n      type: System.String\n      description: The <xref href=\"System.ComponentModel.License.LicenseKey\"></xref> for the specified type. This method returns `null` unless you override it.\n  overload: System.ComponentModel.LicenseContext.GetSavedLicenseKey*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/LicenseContext.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.LicenseContext.GetService(System.Type)\n  commentId: M:System.ComponentModel.LicenseContext.GetService(System.Type)\n  id: GetService(System.Type)\n  parent: System.ComponentModel.LicenseContext\n  langs:\n  - csharp\n  name: GetService(Type)\n  nameWithType: LicenseContext.GetService(Type)\n  fullName: LicenseContext.GetService(Type)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: Gets the requested service, if it is available.\n  syntax:\n    content: public virtual object GetService (Type type);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The type of service to retrieve.\n    return:\n      type: System.Object\n      description: An instance of the service, or `null` if the service cannot be found.\n  overload: System.ComponentModel.LicenseContext.GetService*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/LicenseContext.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.LicenseContext.SetSavedLicenseKey(System.Type,System.String)\n  commentId: M:System.ComponentModel.LicenseContext.SetSavedLicenseKey(System.Type,System.String)\n  id: SetSavedLicenseKey(System.Type,System.String)\n  parent: System.ComponentModel.LicenseContext\n  langs:\n  - csharp\n  name: SetSavedLicenseKey(Type, String)\n  nameWithType: LicenseContext.SetSavedLicenseKey(Type, String)\n  fullName: LicenseContext.SetSavedLicenseKey(Type, String)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: When overridden in a derived class, sets a license key for the specified type.\n  remarks: Typically, call this method when you set <xref:System.ComponentModel.LicenseUsageMode> at design time. You must override the <xref:System.ComponentModel.LicenseContext.UsageMode%2A> property to implement design-time license support.\n  syntax:\n    content: public virtual void SetSavedLicenseKey (Type type, string key);\n    parameters:\n    - id: type\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> that represents the component associated with the license key.\n    - id: key\n      type: System.String\n      description: The <xref href=\"System.ComponentModel.License.LicenseKey\"></xref> to save for the type of component.\n  overload: System.ComponentModel.LicenseContext.SetSavedLicenseKey*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/LicenseContext.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.LicenseContext.UsageMode\n  commentId: P:System.ComponentModel.LicenseContext.UsageMode\n  id: UsageMode\n  parent: System.ComponentModel.LicenseContext\n  langs:\n  - csharp\n  name: UsageMode\n  nameWithType: LicenseContext.UsageMode\n  fullName: LicenseContext.UsageMode\n  type: Property\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: When overridden in a derived class, gets a value that specifies when you can use a license.\n  syntax:\n    content: public virtual System.ComponentModel.LicenseUsageMode UsageMode { get; }\n    return:\n      type: System.ComponentModel.LicenseUsageMode\n      description: One of the <xref href=\"System.ComponentModel.LicenseUsageMode\"></xref> values that specifies when you can use a license. The default is <xref href=\"System.ComponentModel.LicenseUsageMode.Runtime\"></xref>.\n  overload: System.ComponentModel.LicenseContext.UsageMode*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/LicenseContext.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ComponentModel.LicenseContext.#ctor\n  parent: System.ComponentModel.LicenseContext\n  isExternal: false\n  name: LicenseContext()\n  nameWithType: LicenseContext.LicenseContext()\n  fullName: LicenseContext.LicenseContext()\n- uid: System.ComponentModel.LicenseContext.GetSavedLicenseKey(System.Type,System.Reflection.Assembly)\n  parent: System.ComponentModel.LicenseContext\n  isExternal: false\n  name: GetSavedLicenseKey(Type, Assembly)\n  nameWithType: LicenseContext.GetSavedLicenseKey(Type, Assembly)\n  fullName: LicenseContext.GetSavedLicenseKey(Type, Assembly)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Reflection.Assembly\n  parent: System.Reflection\n  isExternal: false\n  name: Assembly\n  nameWithType: Assembly\n  fullName: System.Reflection.Assembly\n- uid: System.ComponentModel.LicenseContext.GetService(System.Type)\n  parent: System.ComponentModel.LicenseContext\n  isExternal: false\n  name: GetService(Type)\n  nameWithType: LicenseContext.GetService(Type)\n  fullName: LicenseContext.GetService(Type)\n- uid: System.ComponentModel.LicenseContext.SetSavedLicenseKey(System.Type,System.String)\n  parent: System.ComponentModel.LicenseContext\n  isExternal: false\n  name: SetSavedLicenseKey(Type, String)\n  nameWithType: LicenseContext.SetSavedLicenseKey(Type, String)\n  fullName: LicenseContext.SetSavedLicenseKey(Type, String)\n- uid: System.ComponentModel.LicenseContext.UsageMode\n  parent: System.ComponentModel.LicenseContext\n  isExternal: false\n  name: UsageMode\n  nameWithType: LicenseContext.UsageMode\n  fullName: LicenseContext.UsageMode\n- uid: System.ComponentModel.LicenseUsageMode\n  parent: System.ComponentModel\n  isExternal: false\n  name: LicenseUsageMode\n  nameWithType: LicenseUsageMode\n  fullName: System.ComponentModel.LicenseUsageMode\n- uid: System.ComponentModel.LicenseContext.#ctor*\n  parent: System.ComponentModel.LicenseContext\n  isExternal: false\n  name: LicenseContext\n  nameWithType: LicenseContext.LicenseContext\n  fullName: LicenseContext.LicenseContext\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/LicenseContext.xml\n- uid: System.ComponentModel.LicenseContext.GetSavedLicenseKey*\n  parent: System.ComponentModel.LicenseContext\n  isExternal: false\n  name: GetSavedLicenseKey\n  nameWithType: LicenseContext.GetSavedLicenseKey\n  fullName: LicenseContext.GetSavedLicenseKey\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/LicenseContext.xml\n- uid: System.ComponentModel.LicenseContext.GetService*\n  parent: System.ComponentModel.LicenseContext\n  isExternal: false\n  name: GetService\n  nameWithType: LicenseContext.GetService\n  fullName: LicenseContext.GetService\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/LicenseContext.xml\n- uid: System.ComponentModel.LicenseContext.SetSavedLicenseKey*\n  parent: System.ComponentModel.LicenseContext\n  isExternal: false\n  name: SetSavedLicenseKey\n  nameWithType: LicenseContext.SetSavedLicenseKey\n  fullName: LicenseContext.SetSavedLicenseKey\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/LicenseContext.xml\n- uid: System.ComponentModel.LicenseContext.UsageMode*\n  parent: System.ComponentModel.LicenseContext\n  isExternal: false\n  name: UsageMode\n  nameWithType: LicenseContext.UsageMode\n  fullName: LicenseContext.UsageMode\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/LicenseContext.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.IServiceProvider\n  parent: System\n  isExternal: false\n  name: IServiceProvider\n  nameWithType: IServiceProvider\n  fullName: System.IServiceProvider\n"}