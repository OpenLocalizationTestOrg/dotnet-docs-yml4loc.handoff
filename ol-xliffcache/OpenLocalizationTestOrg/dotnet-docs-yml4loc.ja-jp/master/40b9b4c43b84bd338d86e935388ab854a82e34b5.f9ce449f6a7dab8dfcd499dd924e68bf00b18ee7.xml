{"nodes":[{"content":"Provides methods and data for the <xref href=\"System.Diagnostics.Contracts.Contract.ContractFailed\"></xref> event.","nodes":[{"pos":[0,114],"content":"Provides methods and data for the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.Contracts.Contract.ContractFailed\"&gt;&lt;/xref&gt;</ph> event.","source":"Provides methods and data for the <xref href=\"System.Diagnostics.Contracts.Contract.ContractFailed\"></xref> event."}],"pos":[1204,1319],"yaml":true},{"content":"A <xref:System.Diagnostics.Contracts.ContractFailedEventArgs> object is passed to the <xref:System.Diagnostics.Contracts.Contract.ContractFailed?displayProperty=fullName> event when a contract fails. The <xref:System.Diagnostics.Contracts.Contract.ContractFailed> event enables a managed application environment such as an interactive interpreter, a Web browser host, a test harness, or a logging infrastructure to be notified of contract failures. The event requires full trust.","nodes":[{"pos":[0,479],"content":"A <xref:System.Diagnostics.Contracts.ContractFailedEventArgs> object is passed to the <xref:System.Diagnostics.Contracts.Contract.ContractFailed?displayProperty=fullName> event when a contract fails. The <xref:System.Diagnostics.Contracts.Contract.ContractFailed> event enables a managed application environment such as an interactive interpreter, a Web browser host, a test harness, or a logging infrastructure to be notified of contract failures. The event requires full trust.","nodes":[{"content":"A <xref:System.Diagnostics.Contracts.ContractFailedEventArgs> object is passed to the <xref:System.Diagnostics.Contracts.Contract.ContractFailed?displayProperty=fullName> event when a contract fails. The <xref:System.Diagnostics.Contracts.Contract.ContractFailed> event enables a managed application environment such as an interactive interpreter, a Web browser host, a test harness, or a logging infrastructure to be notified of contract failures. The event requires full trust.","pos":[0,479],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Diagnostics.Contracts.ContractFailedEventArgs&gt;</ph> object is passed to the <ph id=\"ph2\">&lt;xref:System.Diagnostics.Contracts.Contract.ContractFailed?displayProperty=fullName&gt;</ph> event when a contract fails.","pos":[0,199],"source":"A <xref:System.Diagnostics.Contracts.ContractFailedEventArgs> object is passed to the <xref:System.Diagnostics.Contracts.Contract.ContractFailed?displayProperty=fullName> event when a contract fails."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Diagnostics.Contracts.Contract.ContractFailed&gt;</ph> event enables a managed application environment such as an interactive interpreter, a Web browser host, a test harness, or a logging infrastructure to be notified of contract failures.","pos":[200,448],"source":" The <xref:System.Diagnostics.Contracts.Contract.ContractFailed> event enables a managed application environment such as an interactive interpreter, a Web browser host, a test harness, or a logging infrastructure to be notified of contract failures."},{"content":"The event requires full trust.","pos":[449,479]}]}]}],"pos":[1330,1810],"yaml":true,"extradata":"MT"},{"content":"Provides data for the <xref href=\"System.Diagnostics.Contracts.Contract.ContractFailed\"></xref> event.","nodes":[{"pos":[0,102],"content":"Provides data for the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.Contracts.Contract.ContractFailed\"&gt;&lt;/xref&gt;</ph> event.","source":"Provides data for the <xref href=\"System.Diagnostics.Contracts.Contract.ContractFailed\"></xref> event."}],"pos":[4067,4170],"yaml":true},{"content":"One of the enumeration values that specifies the contract that failed.","nodes":[{"pos":[0,70],"content":"One of the enumeration values that specifies the contract that failed.","nodes":[{"content":"One of the enumeration values that specifies the contract that failed.","pos":[0,70]}]}],"pos":[4469,4540],"yaml":true},{"content":"The message for the event.","nodes":[{"pos":[0,26],"content":"The message for the event.","nodes":[{"content":"The message for the event.","pos":[0,26]}]}],"pos":[4603,4630],"yaml":true},{"content":"The condition for the event.","nodes":[{"pos":[0,28],"content":"The condition for the event.","nodes":[{"content":"The condition for the event.","pos":[0,28]}]}],"pos":[4695,4724],"yaml":true},{"content":"The exception that caused the event.","nodes":[{"pos":[0,36],"content":"The exception that caused the event.","nodes":[{"content":"The exception that caused the event.","pos":[0,36]}]}],"pos":[4800,4837],"yaml":true},{"content":"Gets the condition for the failure of the contract.","nodes":[{"pos":[0,51],"content":"Gets the condition for the failure of the contract.","nodes":[{"content":"Gets the condition for the failure of the contract.","pos":[0,51]}]}],"pos":[6263,6315],"yaml":true},{"content":"The condition for the failure.","nodes":[{"pos":[0,30],"content":"The condition for the failure.","nodes":[{"content":"The condition for the failure.","pos":[0,30]}]}],"pos":[6428,6459],"yaml":true},{"content":"Gets the type of contract that failed.","nodes":[{"pos":[0,38],"content":"Gets the type of contract that failed.","nodes":[{"content":"Gets the type of contract that failed.","pos":[0,38]}]}],"pos":[7884,7923],"yaml":true},{"content":"One of the enumeration values that specifies the type of contract that failed.","nodes":[{"pos":[0,78],"content":"One of the enumeration values that specifies the type of contract that failed.","nodes":[{"content":"One of the enumeration values that specifies the type of contract that failed.","pos":[0,78]}]}],"pos":[8115,8194],"yaml":true},{"content":"Indicates whether the <xref href=\"System.Diagnostics.Contracts.Contract.ContractFailed\"></xref> event has been handled.","nodes":[{"pos":[0,119],"content":"Indicates whether the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.Contracts.Contract.ContractFailed\"&gt;&lt;/xref&gt;</ph> event has been handled.","source":"Indicates whether the <xref href=\"System.Diagnostics.Contracts.Contract.ContractFailed\"></xref> event has been handled."}],"pos":[9597,9717],"yaml":true},{"content":"If the <xref:System.Diagnostics.Contracts.Contract.ContractFailed?displayProperty=fullName> event has not been handled, the debugger is notified. If no debugger is attached, an **Assert** dialog box is displayed.","nodes":[{"pos":[0,212],"content":"If the <xref:System.Diagnostics.Contracts.Contract.ContractFailed?displayProperty=fullName> event has not been handled, the debugger is notified. If no debugger is attached, an **Assert** dialog box is displayed.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Contracts.Contract.ContractFailed?displayProperty=fullName&gt;</ph> event has not been handled, the debugger is notified.","pos":[0,145],"source":"If the <xref:System.Diagnostics.Contracts.Contract.ContractFailed?displayProperty=fullName> event has not been handled, the debugger is notified."},{"content":"If no debugger is attached, an <bpt id=\"p1\">**</bpt>Assert<ept id=\"p1\">**</ept> dialog box is displayed.","pos":[146,212],"source":" If no debugger is attached, an **Assert** dialog box is displayed."}]}],"pos":[9728,9941],"yaml":true,"extradata":"MT"},{"content":"`true` if the event has been handled; otherwise, `false`.","nodes":[{"pos":[0,57],"content":"<ph id=\"ph1\">`true`</ph> if the event has been handled; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the event has been handled; otherwise, `false`."}],"pos":[10051,10111],"yaml":true},{"content":"Gets the message that describes the <xref href=\"System.Diagnostics.Contracts.Contract.ContractFailed\"></xref> event.","nodes":[{"pos":[0,116],"content":"Gets the message that describes the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.Contracts.Contract.ContractFailed\"&gt;&lt;/xref&gt;</ph> event.","source":"Gets the message that describes the <xref href=\"System.Diagnostics.Contracts.Contract.ContractFailed\"></xref> event."}],"pos":[11510,11627],"yaml":true},{"content":"The message that describes the event.","nodes":[{"pos":[0,37],"content":"The message that describes the event.","nodes":[{"content":"The message that describes the event.","pos":[0,37]}]}],"pos":[11738,11776],"yaml":true},{"content":"Gets the original exception that caused the <xref href=\"System.Diagnostics.Contracts.Contract.ContractFailed\"></xref> event.","nodes":[{"pos":[0,124],"content":"Gets the original exception that caused the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.Contracts.Contract.ContractFailed\"&gt;&lt;/xref&gt;</ph> event.","source":"Gets the original exception that caused the <xref href=\"System.Diagnostics.Contracts.Contract.ContractFailed\"></xref> event."}],"pos":[13235,13360],"yaml":true},{"content":"The exception that caused the event.","nodes":[{"pos":[0,36],"content":"The exception that caused the event.","nodes":[{"content":"The exception that caused the event.","pos":[0,36]}]}],"pos":[13487,13524],"yaml":true},{"content":"Sets the <xref href=\"System.Diagnostics.Contracts.ContractFailedEventArgs.Handled\"></xref> property to `true`.","nodes":[{"pos":[0,110],"content":"Sets the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.Contracts.ContractFailedEventArgs.Handled\"&gt;&lt;/xref&gt;</ph> property to <ph id=\"ph2\">`true`</ph>.","source":"Sets the <xref href=\"System.Diagnostics.Contracts.ContractFailedEventArgs.Handled\"></xref> property to `true`."}],"pos":[14955,15066],"yaml":true},{"content":"The <xref:System.Diagnostics.Contracts.ContractFailedEventArgs.SetHandled%2A> method provides a way for the runtime analysis checker to indicate that a contract exception has been handled. See the <xref:System.Diagnostics.Contracts.ContractFailedEventArgs.Handled%2A?displayProperty=fullName> property for more information.","nodes":[{"pos":[0,323],"content":"The <xref:System.Diagnostics.Contracts.ContractFailedEventArgs.SetHandled%2A> method provides a way for the runtime analysis checker to indicate that a contract exception has been handled. See the <xref:System.Diagnostics.Contracts.ContractFailedEventArgs.Handled%2A?displayProperty=fullName> property for more information.","nodes":[{"content":"The <xref:System.Diagnostics.Contracts.ContractFailedEventArgs.SetHandled%2A> method provides a way for the runtime analysis checker to indicate that a contract exception has been handled. See the <xref:System.Diagnostics.Contracts.ContractFailedEventArgs.Handled%2A?displayProperty=fullName> property for more information.","pos":[0,323],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Diagnostics.Contracts.ContractFailedEventArgs.SetHandled%2A&gt;</ph> method provides a way for the runtime analysis checker to indicate that a contract exception has been handled.","pos":[0,188],"source":"The <xref:System.Diagnostics.Contracts.ContractFailedEventArgs.SetHandled%2A> method provides a way for the runtime analysis checker to indicate that a contract exception has been handled."},{"content":"See the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Contracts.ContractFailedEventArgs.Handled%2A?displayProperty=fullName&gt;</ph> property for more information.","pos":[189,323],"source":" See the <xref:System.Diagnostics.Contracts.ContractFailedEventArgs.Handled%2A?displayProperty=fullName> property for more information."}]}]}],"pos":[15077,15401],"yaml":true,"extradata":"MT"},{"content":"Sets the <xref href=\"System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind\"></xref> property to `true`.","nodes":[{"pos":[0,109],"content":"Sets the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind\"&gt;&lt;/xref&gt;</ph> property to <ph id=\"ph2\">`true`</ph>.","source":"Sets the <xref href=\"System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind\"></xref> property to `true`."}],"pos":[17005,17115],"yaml":true},{"content":"The <xref:System.Diagnostics.Contracts.ContractFailedEventArgs.SetUnwind%2A> method provides a way to indicate that the escalation policy for the code contract should be applied. See the <xref:System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind%2A?displayProperty=fullName> property for more information.","nodes":[{"pos":[0,312],"content":"The <xref:System.Diagnostics.Contracts.ContractFailedEventArgs.SetUnwind%2A> method provides a way to indicate that the escalation policy for the code contract should be applied. See the <xref:System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind%2A?displayProperty=fullName> property for more information.","nodes":[{"content":"The <xref:System.Diagnostics.Contracts.ContractFailedEventArgs.SetUnwind%2A> method provides a way to indicate that the escalation policy for the code contract should be applied. See the <xref:System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind%2A?displayProperty=fullName> property for more information.","pos":[0,312],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Diagnostics.Contracts.ContractFailedEventArgs.SetUnwind%2A&gt;</ph> method provides a way to indicate that the escalation policy for the code contract should be applied.","pos":[0,178],"source":"The <xref:System.Diagnostics.Contracts.ContractFailedEventArgs.SetUnwind%2A> method provides a way to indicate that the escalation policy for the code contract should be applied."},{"content":"See the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind%2A?displayProperty=fullName&gt;</ph> property for more information.","pos":[179,312],"source":" See the <xref:System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind%2A?displayProperty=fullName> property for more information."}]}]}],"pos":[17126,17439],"yaml":true,"extradata":"MT"},{"content":"Indicates whether the code contract escalation policy should be applied.","nodes":[{"pos":[0,72],"content":"Indicates whether the code contract escalation policy should be applied.","nodes":[{"content":"Indicates whether the code contract escalation policy should be applied.","pos":[0,72]}]}],"pos":[19019,19092],"yaml":true},{"content":"If the return value is `true`, the escalation policy is to notify the attached debugger about a contract failure or to display an **Assert** dialog box if a debugger is not attached.  \n  \n> [!WARNING]\n>  This value should be set to `false` for analysis tools that run on a server (for example, ASP.NET).","nodes":[{"pos":[0,182],"content":"If the return value is <ph id=\"ph1\">`true`</ph>, the escalation policy is to notify the attached debugger about a contract failure or to display an <bpt id=\"p1\">**</bpt>Assert<ept id=\"p1\">**</ept> dialog box if a debugger is not attached.","source":"If the return value is `true`, the escalation policy is to notify the attached debugger about a contract failure or to display an **Assert** dialog box if a debugger is not attached."},{"pos":[190,303],"content":"[!WARNING]\n This value should be set to `false` for analysis tools that run on a server (for example, ASP.NET).","leadings":["","> "],"nodes":[{"content":"This value should be set to <ph id=\"ph1\">`false`</ph> for analysis tools that run on a server (for example, ASP.NET).","pos":[12,111],"source":" This value should be set to `false` for analysis tools that run on a server (for example, ASP.NET)."}]}],"pos":[19103,19412],"yaml":true,"extradata":"MT"},{"content":"`true` to apply the escalation policy; otherwise, `false`. The default is `false`.","nodes":[{"pos":[0,82],"content":"`true` to apply the escalation policy; otherwise, `false`. The default is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> to apply the escalation policy; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,58],"source":"`true` to apply the escalation policy; otherwise, `false`."},{"content":"The default is <ph id=\"ph1\">`false`</ph>.","pos":[59,82],"source":" The default is `false`."}]}],"pos":[19521,19606],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Diagnostics.Contracts.ContractFailedEventArgs\n  commentId: T:System.Diagnostics.Contracts.ContractFailedEventArgs\n  id: ContractFailedEventArgs\n  children:\n  - System.Diagnostics.Contracts.ContractFailedEventArgs.#ctor(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.Exception)\n  - System.Diagnostics.Contracts.ContractFailedEventArgs.Condition\n  - System.Diagnostics.Contracts.ContractFailedEventArgs.FailureKind\n  - System.Diagnostics.Contracts.ContractFailedEventArgs.Handled\n  - System.Diagnostics.Contracts.ContractFailedEventArgs.Message\n  - System.Diagnostics.Contracts.ContractFailedEventArgs.OriginalException\n  - System.Diagnostics.Contracts.ContractFailedEventArgs.SetHandled\n  - System.Diagnostics.Contracts.ContractFailedEventArgs.SetUnwind\n  - System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind\n  langs:\n  - csharp\n  name: ContractFailedEventArgs\n  nameWithType: ContractFailedEventArgs\n  fullName: System.Diagnostics.Contracts.ContractFailedEventArgs\n  type: Class\n  assemblies:\n  - System.Diagnostics.Contracts\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Contracts\n  summary: Provides methods and data for the <xref href=\"System.Diagnostics.Contracts.Contract.ContractFailed\"></xref> event.\n  remarks: A <xref:System.Diagnostics.Contracts.ContractFailedEventArgs> object is passed to the <xref:System.Diagnostics.Contracts.Contract.ContractFailed?displayProperty=fullName> event when a contract fails. The <xref:System.Diagnostics.Contracts.Contract.ContractFailed> event enables a managed application environment such as an interactive interpreter, a Web browser host, a test harness, or a logging infrastructure to be notified of contract failures. The event requires full trust.\n  syntax:\n    content: 'public sealed class ContractFailedEventArgs : EventArgs'\n  inheritance:\n  - System.Object\n  - System.EventArgs\n  implements: []\n  inheritedMembers:\n  - System.EventArgs.Empty\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/ContractFailedEventArgs.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Diagnostics.Contracts.ContractFailedEventArgs.#ctor(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.Exception)\n  commentId: M:System.Diagnostics.Contracts.ContractFailedEventArgs.#ctor(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.Exception)\n  id: '#ctor(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.Exception)'\n  parent: System.Diagnostics.Contracts.ContractFailedEventArgs\n  langs:\n  - csharp\n  name: ContractFailedEventArgs(ContractFailureKind, String, String, Exception)\n  nameWithType: ContractFailedEventArgs.ContractFailedEventArgs(ContractFailureKind, String, String, Exception)\n  fullName: ContractFailedEventArgs.ContractFailedEventArgs(ContractFailureKind, String, String, Exception)\n  type: Constructor\n  assemblies:\n  - System.Diagnostics.Contracts\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Contracts\n  summary: Provides data for the <xref href=\"System.Diagnostics.Contracts.Contract.ContractFailed\"></xref> event.\n  syntax:\n    content: public ContractFailedEventArgs (System.Diagnostics.Contracts.ContractFailureKind failureKind, string message, string condition, Exception originalException);\n    parameters:\n    - id: failureKind\n      type: System.Diagnostics.Contracts.ContractFailureKind\n      description: One of the enumeration values that specifies the contract that failed.\n    - id: message\n      type: System.String\n      description: The message for the event.\n    - id: condition\n      type: System.String\n      description: The condition for the event.\n    - id: originalException\n      type: System.Exception\n      description: The exception that caused the event.\n  overload: System.Diagnostics.Contracts.ContractFailedEventArgs.#ctor*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/ContractFailedEventArgs.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Diagnostics.Contracts.ContractFailedEventArgs.Condition\n  commentId: P:System.Diagnostics.Contracts.ContractFailedEventArgs.Condition\n  id: Condition\n  parent: System.Diagnostics.Contracts.ContractFailedEventArgs\n  langs:\n  - csharp\n  name: Condition\n  nameWithType: ContractFailedEventArgs.Condition\n  fullName: ContractFailedEventArgs.Condition\n  type: Property\n  assemblies:\n  - System.Diagnostics.Contracts\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Contracts\n  summary: Gets the condition for the failure of the contract.\n  syntax:\n    content: public string Condition { get; }\n    return:\n      type: System.String\n      description: The condition for the failure.\n  overload: System.Diagnostics.Contracts.ContractFailedEventArgs.Condition*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/ContractFailedEventArgs.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Diagnostics.Contracts.ContractFailedEventArgs.FailureKind\n  commentId: P:System.Diagnostics.Contracts.ContractFailedEventArgs.FailureKind\n  id: FailureKind\n  parent: System.Diagnostics.Contracts.ContractFailedEventArgs\n  langs:\n  - csharp\n  name: FailureKind\n  nameWithType: ContractFailedEventArgs.FailureKind\n  fullName: ContractFailedEventArgs.FailureKind\n  type: Property\n  assemblies:\n  - System.Diagnostics.Contracts\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Contracts\n  summary: Gets the type of contract that failed.\n  syntax:\n    content: public System.Diagnostics.Contracts.ContractFailureKind FailureKind { get; }\n    return:\n      type: System.Diagnostics.Contracts.ContractFailureKind\n      description: One of the enumeration values that specifies the type of contract that failed.\n  overload: System.Diagnostics.Contracts.ContractFailedEventArgs.FailureKind*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/ContractFailedEventArgs.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Diagnostics.Contracts.ContractFailedEventArgs.Handled\n  commentId: P:System.Diagnostics.Contracts.ContractFailedEventArgs.Handled\n  id: Handled\n  parent: System.Diagnostics.Contracts.ContractFailedEventArgs\n  langs:\n  - csharp\n  name: Handled\n  nameWithType: ContractFailedEventArgs.Handled\n  fullName: ContractFailedEventArgs.Handled\n  type: Property\n  assemblies:\n  - System.Diagnostics.Contracts\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Contracts\n  summary: Indicates whether the <xref href=\"System.Diagnostics.Contracts.Contract.ContractFailed\"></xref> event has been handled.\n  remarks: If the <xref:System.Diagnostics.Contracts.Contract.ContractFailed?displayProperty=fullName> event has not been handled, the debugger is notified. If no debugger is attached, an **Assert** dialog box is displayed.\n  syntax:\n    content: public bool Handled { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the event has been handled; otherwise, `false`.'\n  overload: System.Diagnostics.Contracts.ContractFailedEventArgs.Handled*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/ContractFailedEventArgs.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Diagnostics.Contracts.ContractFailedEventArgs.Message\n  commentId: P:System.Diagnostics.Contracts.ContractFailedEventArgs.Message\n  id: Message\n  parent: System.Diagnostics.Contracts.ContractFailedEventArgs\n  langs:\n  - csharp\n  name: Message\n  nameWithType: ContractFailedEventArgs.Message\n  fullName: ContractFailedEventArgs.Message\n  type: Property\n  assemblies:\n  - System.Diagnostics.Contracts\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Contracts\n  summary: Gets the message that describes the <xref href=\"System.Diagnostics.Contracts.Contract.ContractFailed\"></xref> event.\n  syntax:\n    content: public string Message { get; }\n    return:\n      type: System.String\n      description: The message that describes the event.\n  overload: System.Diagnostics.Contracts.ContractFailedEventArgs.Message*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/ContractFailedEventArgs.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Diagnostics.Contracts.ContractFailedEventArgs.OriginalException\n  commentId: P:System.Diagnostics.Contracts.ContractFailedEventArgs.OriginalException\n  id: OriginalException\n  parent: System.Diagnostics.Contracts.ContractFailedEventArgs\n  langs:\n  - csharp\n  name: OriginalException\n  nameWithType: ContractFailedEventArgs.OriginalException\n  fullName: ContractFailedEventArgs.OriginalException\n  type: Property\n  assemblies:\n  - System.Diagnostics.Contracts\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Contracts\n  summary: Gets the original exception that caused the <xref href=\"System.Diagnostics.Contracts.Contract.ContractFailed\"></xref> event.\n  syntax:\n    content: public Exception OriginalException { get; }\n    return:\n      type: System.Exception\n      description: The exception that caused the event.\n  overload: System.Diagnostics.Contracts.ContractFailedEventArgs.OriginalException*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/ContractFailedEventArgs.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Diagnostics.Contracts.ContractFailedEventArgs.SetHandled\n  commentId: M:System.Diagnostics.Contracts.ContractFailedEventArgs.SetHandled\n  id: SetHandled\n  parent: System.Diagnostics.Contracts.ContractFailedEventArgs\n  langs:\n  - csharp\n  name: SetHandled()\n  nameWithType: ContractFailedEventArgs.SetHandled()\n  fullName: ContractFailedEventArgs.SetHandled()\n  type: Method\n  assemblies:\n  - System.Diagnostics.Contracts\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Contracts\n  summary: Sets the <xref href=\"System.Diagnostics.Contracts.ContractFailedEventArgs.Handled\"></xref> property to `true`.\n  remarks: The <xref:System.Diagnostics.Contracts.ContractFailedEventArgs.SetHandled%2A> method provides a way for the runtime analysis checker to indicate that a contract exception has been handled. See the <xref:System.Diagnostics.Contracts.ContractFailedEventArgs.Handled%2A?displayProperty=fullName> property for more information.\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public void SetHandled ();\n    parameters: []\n  overload: System.Diagnostics.Contracts.ContractFailedEventArgs.SetHandled*\n  exceptions: []\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/ContractFailedEventArgs.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Diagnostics.Contracts.ContractFailedEventArgs.SetUnwind\n  commentId: M:System.Diagnostics.Contracts.ContractFailedEventArgs.SetUnwind\n  id: SetUnwind\n  parent: System.Diagnostics.Contracts.ContractFailedEventArgs\n  langs:\n  - csharp\n  name: SetUnwind()\n  nameWithType: ContractFailedEventArgs.SetUnwind()\n  fullName: ContractFailedEventArgs.SetUnwind()\n  type: Method\n  assemblies:\n  - System.Diagnostics.Contracts\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Contracts\n  summary: Sets the <xref href=\"System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind\"></xref> property to `true`.\n  remarks: The <xref:System.Diagnostics.Contracts.ContractFailedEventArgs.SetUnwind%2A> method provides a way to indicate that the escalation policy for the code contract should be applied. See the <xref:System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind%2A?displayProperty=fullName> property for more information.\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public void SetUnwind ();\n    parameters: []\n  overload: System.Diagnostics.Contracts.ContractFailedEventArgs.SetUnwind*\n  exceptions: []\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/ContractFailedEventArgs.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind\n  commentId: P:System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind\n  id: Unwind\n  parent: System.Diagnostics.Contracts.ContractFailedEventArgs\n  langs:\n  - csharp\n  name: Unwind\n  nameWithType: ContractFailedEventArgs.Unwind\n  fullName: ContractFailedEventArgs.Unwind\n  type: Property\n  assemblies:\n  - System.Diagnostics.Contracts\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Contracts\n  summary: Indicates whether the code contract escalation policy should be applied.\n  remarks: \"If the return value is `true`, the escalation policy is to notify the attached debugger about a contract failure or to display an **Assert** dialog box if a debugger is not attached.  \\n  \\n> [!WARNING]\\n>  This value should be set to `false` for analysis tools that run on a server (for example, ASP.NET).\"\n  syntax:\n    content: public bool Unwind { get; }\n    return:\n      type: System.Boolean\n      description: '`true` to apply the escalation policy; otherwise, `false`. The default is `false`.'\n  overload: System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/ContractFailedEventArgs.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.EventArgs\n  parent: System\n  isExternal: false\n  name: EventArgs\n  nameWithType: EventArgs\n  fullName: System.EventArgs\n- uid: System.Diagnostics.Contracts.ContractFailedEventArgs.#ctor(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.Exception)\n  parent: System.Diagnostics.Contracts.ContractFailedEventArgs\n  isExternal: false\n  name: ContractFailedEventArgs(ContractFailureKind, String, String, Exception)\n  nameWithType: ContractFailedEventArgs.ContractFailedEventArgs(ContractFailureKind, String, String, Exception)\n  fullName: ContractFailedEventArgs.ContractFailedEventArgs(ContractFailureKind, String, String, Exception)\n- uid: System.Diagnostics.Contracts.ContractFailureKind\n  parent: System.Diagnostics.Contracts\n  isExternal: false\n  name: ContractFailureKind\n  nameWithType: ContractFailureKind\n  fullName: System.Diagnostics.Contracts.ContractFailureKind\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Exception\n  parent: System\n  isExternal: false\n  name: Exception\n  nameWithType: Exception\n  fullName: System.Exception\n- uid: System.Diagnostics.Contracts.ContractFailedEventArgs.Condition\n  parent: System.Diagnostics.Contracts.ContractFailedEventArgs\n  isExternal: false\n  name: Condition\n  nameWithType: ContractFailedEventArgs.Condition\n  fullName: ContractFailedEventArgs.Condition\n- uid: System.Diagnostics.Contracts.ContractFailedEventArgs.FailureKind\n  parent: System.Diagnostics.Contracts.ContractFailedEventArgs\n  isExternal: false\n  name: FailureKind\n  nameWithType: ContractFailedEventArgs.FailureKind\n  fullName: ContractFailedEventArgs.FailureKind\n- uid: System.Diagnostics.Contracts.ContractFailedEventArgs.Handled\n  parent: System.Diagnostics.Contracts.ContractFailedEventArgs\n  isExternal: false\n  name: Handled\n  nameWithType: ContractFailedEventArgs.Handled\n  fullName: ContractFailedEventArgs.Handled\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Diagnostics.Contracts.ContractFailedEventArgs.Message\n  parent: System.Diagnostics.Contracts.ContractFailedEventArgs\n  isExternal: false\n  name: Message\n  nameWithType: ContractFailedEventArgs.Message\n  fullName: ContractFailedEventArgs.Message\n- uid: System.Diagnostics.Contracts.ContractFailedEventArgs.OriginalException\n  parent: System.Diagnostics.Contracts.ContractFailedEventArgs\n  isExternal: false\n  name: OriginalException\n  nameWithType: ContractFailedEventArgs.OriginalException\n  fullName: ContractFailedEventArgs.OriginalException\n- uid: System.Diagnostics.Contracts.ContractFailedEventArgs.SetHandled\n  parent: System.Diagnostics.Contracts.ContractFailedEventArgs\n  isExternal: false\n  name: SetHandled()\n  nameWithType: ContractFailedEventArgs.SetHandled()\n  fullName: ContractFailedEventArgs.SetHandled()\n- uid: System.Diagnostics.Contracts.ContractFailedEventArgs.SetUnwind\n  parent: System.Diagnostics.Contracts.ContractFailedEventArgs\n  isExternal: false\n  name: SetUnwind()\n  nameWithType: ContractFailedEventArgs.SetUnwind()\n  fullName: ContractFailedEventArgs.SetUnwind()\n- uid: System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind\n  parent: System.Diagnostics.Contracts.ContractFailedEventArgs\n  isExternal: false\n  name: Unwind\n  nameWithType: ContractFailedEventArgs.Unwind\n  fullName: ContractFailedEventArgs.Unwind\n- uid: System.Diagnostics.Contracts.ContractFailedEventArgs.#ctor*\n  parent: System.Diagnostics.Contracts.ContractFailedEventArgs\n  isExternal: false\n  name: ContractFailedEventArgs\n  nameWithType: ContractFailedEventArgs.ContractFailedEventArgs\n  fullName: ContractFailedEventArgs.ContractFailedEventArgs\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/ContractFailedEventArgs.xml\n- uid: System.Diagnostics.Contracts.ContractFailedEventArgs.Condition*\n  parent: System.Diagnostics.Contracts.ContractFailedEventArgs\n  isExternal: false\n  name: Condition\n  nameWithType: ContractFailedEventArgs.Condition\n  fullName: ContractFailedEventArgs.Condition\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/ContractFailedEventArgs.xml\n- uid: System.Diagnostics.Contracts.ContractFailedEventArgs.FailureKind*\n  parent: System.Diagnostics.Contracts.ContractFailedEventArgs\n  isExternal: false\n  name: FailureKind\n  nameWithType: ContractFailedEventArgs.FailureKind\n  fullName: ContractFailedEventArgs.FailureKind\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/ContractFailedEventArgs.xml\n- uid: System.Diagnostics.Contracts.ContractFailedEventArgs.Handled*\n  parent: System.Diagnostics.Contracts.ContractFailedEventArgs\n  isExternal: false\n  name: Handled\n  nameWithType: ContractFailedEventArgs.Handled\n  fullName: ContractFailedEventArgs.Handled\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/ContractFailedEventArgs.xml\n- uid: System.Diagnostics.Contracts.ContractFailedEventArgs.Message*\n  parent: System.Diagnostics.Contracts.ContractFailedEventArgs\n  isExternal: false\n  name: Message\n  nameWithType: ContractFailedEventArgs.Message\n  fullName: ContractFailedEventArgs.Message\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/ContractFailedEventArgs.xml\n- uid: System.Diagnostics.Contracts.ContractFailedEventArgs.OriginalException*\n  parent: System.Diagnostics.Contracts.ContractFailedEventArgs\n  isExternal: false\n  name: OriginalException\n  nameWithType: ContractFailedEventArgs.OriginalException\n  fullName: ContractFailedEventArgs.OriginalException\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/ContractFailedEventArgs.xml\n- uid: System.Diagnostics.Contracts.ContractFailedEventArgs.SetHandled*\n  parent: System.Diagnostics.Contracts.ContractFailedEventArgs\n  isExternal: false\n  name: SetHandled\n  nameWithType: ContractFailedEventArgs.SetHandled\n  fullName: ContractFailedEventArgs.SetHandled\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/ContractFailedEventArgs.xml\n- uid: System.Diagnostics.Contracts.ContractFailedEventArgs.SetUnwind*\n  parent: System.Diagnostics.Contracts.ContractFailedEventArgs\n  isExternal: false\n  name: SetUnwind\n  nameWithType: ContractFailedEventArgs.SetUnwind\n  fullName: ContractFailedEventArgs.SetUnwind\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/ContractFailedEventArgs.xml\n- uid: System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind*\n  parent: System.Diagnostics.Contracts.ContractFailedEventArgs\n  isExternal: false\n  name: Unwind\n  nameWithType: ContractFailedEventArgs.Unwind\n  fullName: ContractFailedEventArgs.Unwind\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/ContractFailedEventArgs.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.EventArgs.Empty\n  parent: System.EventArgs\n  isExternal: false\n  name: Empty\n  nameWithType: EventArgs.Empty\n  fullName: EventArgs.Empty\n"}