{"nodes":[{"content":"The abstract base class for security token handlers.","nodes":[{"pos":[0,52],"content":"The abstract base class for security token handlers.","nodes":[{"content":"The abstract base class for security token handlers.","pos":[0,52]}]}],"pos":[2971,3024],"yaml":true},{"content":"The <xref:System.IdentityModel.Tokens.SecurityTokenHandler> class is the base class from which all security token handlers derive. A security token handler is responsible for:  \n  \n-   Validating security tokens (<xref:System.IdentityModel.Tokens.SecurityToken>) of the type it is designed to process and packaging the claims contained in the token into a <xref:System.Security.Claims.ClaimsIdentity> object.  \n  \n-   Serializing and deserializing security tokens of the type it is designed to process.  \n  \n-   Serializing and deserializing key identifier clauses (<xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause>) that refer to tokens of the type it is designed to process to and from `<wsse:SecurityTokenReference>` elements.  \n  \n-   Creating security tokens from a <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor> object passed by implementations of the <xref:System.IdentityModel.SecurityTokenService> class.  \n  \n-   Creating key identifier clauses from a security token for implementations of the <xref:System.IdentityModel.SecurityTokenService> class.  \n  \n Windows Identity Foundation (WIF) ships the following security token handlers out of the box:  \n  \n-   <xref:System.IdentityModel.Tokens.EncryptedSecurityTokenHandler>  \n  \n-   <xref:System.IdentityModel.Tokens.KerberosSecurityTokenHandler>  \n  \n-   <xref:System.IdentityModel.Services.Tokens.MachineKeySessionSecurityTokenHandler>  \n  \n-   <xref:System.IdentityModel.Services.Tokens.MembershipUserNameSecurityTokenHandler>  \n  \n-   <xref:System.IdentityModel.Tokens.RsaSecurityTokenHandler>  \n  \n-   <xref:System.IdentityModel.Tokens.Saml2SecurityTokenHandler>  \n  \n-   <xref:System.IdentityModel.Tokens.SamlSecurityTokenHandler>  \n  \n-   <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler>  \n  \n-   <xref:System.IdentityModel.Tokens.UserNameSecurityTokenHandler>  \n  \n-   <xref:System.IdentityModel.Tokens.WindowsUserNameSecurityTokenHandler>  \n  \n-   <xref:System.IdentityModel.Tokens.X509SecurityTokenHandler>  \n  \n Most of these classes expose additional members that implement functionality that is specific to the processing of the tokens for which the class is designed. In many cases it may be better to derive from one of these classes rather than directly from the <xref:System.IdentityModel.Tokens.SecurityTokenHandler> class.  \n  \n A security token handler can be added or removed from  a token handler collection by specifying the [\\&lt;add\\&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/add.md), [\\&lt;remove\\&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/remove.md), or [\\&lt;clear\\&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/clear.md) elements under the [\\&lt;securityTokenHandlers\\&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/securitytokenhandlers.md) element in a configuration file. The <xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration> object that contains the configuration settings for the handler collection can be accessed through the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> property and the handler collection that the token handler is a member of can be accessed from the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection%2A> property. You can override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration%2A> method to process any custom configuration elements that your handler takes.  \n  \n The <xref:System.IdentityModel.Tokens.SecurityTokenHandler> class exposes several other properties and methods. Depending on the functionality that you choose to implement, you may override some or all of these members.  \n  \n You must override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A> property and the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A> method to provide the WIF infrastructure with information about the type of security token that your class is designed to process.  \n  \n Validation, serialization, and deserialization functionality is exposed through properties or methods that indicate whether the handler can perform a specific function combined with the method or methods that implement the functionality. The following list pairs the properties or methods that indicate functionality with the methods that implement that functionality:  \n  \n-   The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken%2A> property and  the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method: Validates a token and packages the claims contained in the token into a <xref:System.Security.Claims.ClaimsIdentity>.  \n  \n-   The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A> property and the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A> methods: Token serialization.  \n  \n-   The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A> methods and the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A> methods: Token deserialization.  \n  \n-   The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A> method and the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause%2A> method: Deserializing key identifier clauses.  \n  \n-   The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A> method and the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause%2A> method: Serializing key identifier clauses.  \n  \n The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken%2A> and the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference%2A> methods are called from the pipeline in implementations of the <xref:System.IdentityModel.SecurityTokenService> class.  \n  \n The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken%2A> method is called by the WIF infrastructure to determine whether the specified token has already been received. By default this method returns `false`, which indicates that the token has not already been received. You can override the method and provide logic to detect replayed tokens.","nodes":[{"pos":[0,175],"content":"The <xref:System.IdentityModel.Tokens.SecurityTokenHandler> class is the base class from which all security token handlers derive. A security token handler is responsible for:","nodes":[{"content":"The <xref:System.IdentityModel.Tokens.SecurityTokenHandler> class is the base class from which all security token handlers derive. A security token handler is responsible for:","pos":[0,175],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler&gt;</ph> class is the base class from which all security token handlers derive.","pos":[0,130],"source":"The <xref:System.IdentityModel.Tokens.SecurityTokenHandler> class is the base class from which all security token handlers derive."},{"content":"A security token handler is responsible for:","pos":[131,175]}]}]},{"pos":[185,408],"content":"Validating security tokens (<xref:System.IdentityModel.Tokens.SecurityToken>) of the type it is designed to process and packaging the claims contained in the token into a <xref:System.Security.Claims.ClaimsIdentity> object.","nodes":[{"content":"Validating security tokens (<ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityToken&gt;</ph>) of the type it is designed to process and packaging the claims contained in the token into a <ph id=\"ph2\">&lt;xref:System.Security.Claims.ClaimsIdentity&gt;</ph> object.","pos":[0,223],"source":"Validating security tokens (<xref:System.IdentityModel.Tokens.SecurityToken>) of the type it is designed to process and packaging the claims contained in the token into a <xref:System.Security.Claims.ClaimsIdentity> object."}]},{"pos":[418,502],"content":"Serializing and deserializing security tokens of the type it is designed to process.","nodes":[{"content":"Serializing and deserializing security tokens of the type it is designed to process.","pos":[0,84]}]},{"pos":[512,742],"content":"Serializing and deserializing key identifier clauses (<ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause&gt;</ph>) that refer to tokens of the type it is designed to process to and from <ph id=\"ph2\">`&lt;wsse:SecurityTokenReference&gt;`</ph> elements.","source":"Serializing and deserializing key identifier clauses (<xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause>) that refer to tokens of the type it is designed to process to and from `<wsse:SecurityTokenReference>` elements."},{"pos":[752,938],"content":"Creating security tokens from a <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor> object passed by implementations of the <xref:System.IdentityModel.SecurityTokenService> class.","nodes":[{"content":"Creating security tokens from a <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenDescriptor&gt;</ph> object passed by implementations of the <ph id=\"ph2\">&lt;xref:System.IdentityModel.SecurityTokenService&gt;</ph> class.","pos":[0,186],"source":"Creating security tokens from a <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor> object passed by implementations of the <xref:System.IdentityModel.SecurityTokenService> class."}]},{"pos":[948,1084],"content":"Creating key identifier clauses from a security token for implementations of the <xref:System.IdentityModel.SecurityTokenService> class.","nodes":[{"content":"Creating key identifier clauses from a security token for implementations of the <ph id=\"ph1\">&lt;xref:System.IdentityModel.SecurityTokenService&gt;</ph> class.","pos":[0,136],"source":"Creating key identifier clauses from a security token for implementations of the <xref:System.IdentityModel.SecurityTokenService> class."}]},{"pos":[1091,1184],"content":"Windows Identity Foundation (WIF) ships the following security token handlers out of the box:","nodes":[{"content":"Windows Identity Foundation (WIF) ships the following security token handlers out of the box:","pos":[0,93]}]},{"pos":[1194,1258],"content":"<xref:System.IdentityModel.Tokens.EncryptedSecurityTokenHandler>","nodes":[]},{"pos":[1268,1331],"content":"<xref:System.IdentityModel.Tokens.KerberosSecurityTokenHandler>","nodes":[]},{"pos":[1341,1422],"content":"<xref:System.IdentityModel.Services.Tokens.MachineKeySessionSecurityTokenHandler>","nodes":[]},{"pos":[1432,1514],"content":"<xref:System.IdentityModel.Services.Tokens.MembershipUserNameSecurityTokenHandler>","nodes":[]},{"pos":[1524,1582],"content":"<xref:System.IdentityModel.Tokens.RsaSecurityTokenHandler>","nodes":[]},{"pos":[1592,1652],"content":"<xref:System.IdentityModel.Tokens.Saml2SecurityTokenHandler>","nodes":[]},{"pos":[1662,1721],"content":"<xref:System.IdentityModel.Tokens.SamlSecurityTokenHandler>","nodes":[]},{"pos":[1731,1793],"content":"<xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler>","nodes":[]},{"pos":[1803,1866],"content":"<xref:System.IdentityModel.Tokens.UserNameSecurityTokenHandler>","nodes":[]},{"pos":[1876,1946],"content":"<xref:System.IdentityModel.Tokens.WindowsUserNameSecurityTokenHandler>","nodes":[]},{"pos":[1956,2015],"content":"<xref:System.IdentityModel.Tokens.X509SecurityTokenHandler>","nodes":[]},{"pos":[2022,2340],"content":"Most of these classes expose additional members that implement functionality that is specific to the processing of the tokens for which the class is designed. In many cases it may be better to derive from one of these classes rather than directly from the <xref:System.IdentityModel.Tokens.SecurityTokenHandler> class.","nodes":[{"content":"Most of these classes expose additional members that implement functionality that is specific to the processing of the tokens for which the class is designed. In many cases it may be better to derive from one of these classes rather than directly from the <xref:System.IdentityModel.Tokens.SecurityTokenHandler> class.","pos":[0,318],"nodes":[{"content":"Most of these classes expose additional members that implement functionality that is specific to the processing of the tokens for which the class is designed.","pos":[0,158]},{"content":"In many cases it may be better to derive from one of these classes rather than directly from the <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler&gt;</ph> class.","pos":[159,318],"source":" In many cases it may be better to derive from one of these classes rather than directly from the <xref:System.IdentityModel.Tokens.SecurityTokenHandler> class."}]}]},{"pos":[2347,3552],"content":"A security token handler can be added or removed from  a token handler collection by specifying the [\\&lt;add\\&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/add.md), [\\&lt;remove\\&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/remove.md), or [\\&lt;clear\\&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/clear.md) elements under the [\\&lt;securityTokenHandlers\\&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/securitytokenhandlers.md) element in a configuration file. The <xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration> object that contains the configuration settings for the handler collection can be accessed through the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> property and the handler collection that the token handler is a member of can be accessed from the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection%2A> property. You can override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration%2A> method to process any custom configuration elements that your handler takes.","nodes":[{"content":"A security token handler can be added or removed from  a token handler collection by specifying the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&amp;</ph>lt;add<ph id=\"ph2\">\\&amp;</ph>gt;<ept id=\"p1\">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/add.md)</ept>, <bpt id=\"p2\">[</bpt><ph id=\"ph3\">\\&amp;</ph>lt;remove<ph id=\"ph4\">\\&amp;</ph>gt;<ept id=\"p2\">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/remove.md)</ept>, or <bpt id=\"p3\">[</bpt><ph id=\"ph5\">\\&amp;</ph>lt;clear<ph id=\"ph6\">\\&amp;</ph>gt;<ept id=\"p3\">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/clear.md)</ept> elements under the <bpt id=\"p4\">[</bpt><ph id=\"ph7\">\\&amp;</ph>lt;securityTokenHandlers<ph id=\"ph8\">\\&amp;</ph>gt;<ept id=\"p4\">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/securitytokenhandlers.md)</ept> element in a configuration file.","pos":[0,586],"source":"A security token handler can be added or removed from  a token handler collection by specifying the [\\&lt;add\\&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/add.md), [\\&lt;remove\\&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/remove.md), or [\\&lt;clear\\&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/clear.md) elements under the [\\&lt;securityTokenHandlers\\&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/securitytokenhandlers.md) element in a configuration file."},{"content":"The <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration&gt;</ph> object that contains the configuration settings for the handler collection can be accessed through the <ph id=\"ph2\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A&gt;</ph> property and the handler collection that the token handler is a member of can be accessed from the <ph id=\"ph3\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection%2A&gt;</ph> property.","pos":[587,1024],"source":" The <xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration> object that contains the configuration settings for the handler collection can be accessed through the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> property and the handler collection that the token handler is a member of can be accessed from the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection%2A> property."},{"content":"You can override the <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration%2A&gt;</ph> method to process any custom configuration elements that your handler takes.","pos":[1025,1205],"source":" You can override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration%2A> method to process any custom configuration elements that your handler takes."}]},{"pos":[3559,3778],"content":"The <xref:System.IdentityModel.Tokens.SecurityTokenHandler> class exposes several other properties and methods. Depending on the functionality that you choose to implement, you may override some or all of these members.","nodes":[{"content":"The <xref:System.IdentityModel.Tokens.SecurityTokenHandler> class exposes several other properties and methods. Depending on the functionality that you choose to implement, you may override some or all of these members.","pos":[0,219],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler&gt;</ph> class exposes several other properties and methods.","pos":[0,111],"source":"The <xref:System.IdentityModel.Tokens.SecurityTokenHandler> class exposes several other properties and methods."},{"content":"Depending on the functionality that you choose to implement, you may override some or all of these members.","pos":[112,219]}]}]},{"pos":[3785,4106],"content":"You must override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A> property and the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A> method to provide the WIF infrastructure with information about the type of security token that your class is designed to process.","nodes":[{"content":"You must override the <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A&gt;</ph> property and the <ph id=\"ph2\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A&gt;</ph> method to provide the WIF infrastructure with information about the type of security token that your class is designed to process.","pos":[0,321],"source":"You must override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A> property and the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A> method to provide the WIF infrastructure with information about the type of security token that your class is designed to process."}]},{"pos":[4113,4481],"content":"Validation, serialization, and deserialization functionality is exposed through properties or methods that indicate whether the handler can perform a specific function combined with the method or methods that implement the functionality. The following list pairs the properties or methods that indicate functionality with the methods that implement that functionality:","nodes":[{"content":"Validation, serialization, and deserialization functionality is exposed through properties or methods that indicate whether the handler can perform a specific function combined with the method or methods that implement the functionality. The following list pairs the properties or methods that indicate functionality with the methods that implement that functionality:","pos":[0,368],"nodes":[{"content":"Validation, serialization, and deserialization functionality is exposed through properties or methods that indicate whether the handler can perform a specific function combined with the method or methods that implement the functionality.","pos":[0,237]},{"content":"The following list pairs the properties or methods that indicate functionality with the methods that implement that functionality:","pos":[238,368]}]}]},{"pos":[4491,4787],"content":"The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken%2A> property and  the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method: Validates a token and packages the claims contained in the token into a <xref:System.Security.Claims.ClaimsIdentity>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken%2A&gt;</ph> property and  the <ph id=\"ph2\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> method: Validates a token and packages the claims contained in the token into a <ph id=\"ph3\">&lt;xref:System.Security.Claims.ClaimsIdentity&gt;</ph>.","pos":[0,296],"source":"The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken%2A> property and  the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method: Validates a token and packages the claims contained in the token into a <xref:System.Security.Claims.ClaimsIdentity>."}]},{"pos":[4797,4990],"content":"The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A> property and the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A> methods: Token serialization.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A&gt;</ph> property and the <ph id=\"ph2\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A&gt;</ph> methods: Token serialization.","pos":[0,193],"source":"The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A> property and the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A> methods: Token serialization."}]},{"pos":[5000,5192],"content":"The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A> methods and the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A> methods: Token deserialization.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A&gt;</ph> methods and the <ph id=\"ph2\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A&gt;</ph> methods: Token deserialization.","pos":[0,192],"source":"The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A> methods and the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A> methods: Token deserialization."}]},{"pos":[5202,5435],"content":"The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A> method and the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause%2A> method: Deserializing key identifier clauses.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A&gt;</ph> method and the <ph id=\"ph2\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause%2A&gt;</ph> method: Deserializing key identifier clauses.","pos":[0,233],"source":"The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A> method and the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause%2A> method: Deserializing key identifier clauses."}]},{"pos":[5445,5678],"content":"The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A> method and the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause%2A> method: Serializing key identifier clauses.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A&gt;</ph> method and the <ph id=\"ph2\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause%2A&gt;</ph> method: Serializing key identifier clauses.","pos":[0,233],"source":"The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A> method and the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause%2A> method: Serializing key identifier clauses."}]},{"pos":[5685,5974],"content":"The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken%2A> and the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference%2A> methods are called from the pipeline in implementations of the <xref:System.IdentityModel.SecurityTokenService> class.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken%2A&gt;</ph> and the <ph id=\"ph2\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference%2A&gt;</ph> methods are called from the pipeline in implementations of the <ph id=\"ph3\">&lt;xref:System.IdentityModel.SecurityTokenService&gt;</ph> class.","pos":[0,289],"source":"The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken%2A> and the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference%2A> methods are called from the pipeline in implementations of the <xref:System.IdentityModel.SecurityTokenService> class."}]},{"pos":[5981,6349],"content":"The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken%2A> method is called by the WIF infrastructure to determine whether the specified token has already been received. By default this method returns `false`, which indicates that the token has not already been received. You can override the method and provide logic to detect replayed tokens.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken%2A&gt;</ph> method is called by the WIF infrastructure to determine whether the specified token has already been received.","pos":[0,193],"source":"The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken%2A> method is called by the WIF infrastructure to determine whether the specified token has already been received."},{"content":"By default this method returns <ph id=\"ph1\">`false`</ph>, which indicates that the token has not already been received.","pos":[194,295],"source":" By default this method returns `false`, which indicates that the token has not already been received."},{"content":"You can override the method and provide logic to detect replayed tokens.","pos":[296,368]}]}],"pos":[3035,9453],"yaml":true,"extradata":"MT"},{"content":"Called from constructors in derived classes to initialize the <xref href=\"System.IdentityModel.Tokens.SecurityTokenHandler\"></xref> class.","nodes":[{"pos":[0,138],"content":"Called from constructors in derived classes to initialize the <ph id=\"ph1\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityTokenHandler\"&gt;&lt;/xref&gt;</ph> class.","source":"Called from constructors in derived classes to initialize the <xref href=\"System.IdentityModel.Tokens.SecurityTokenHandler\"></xref> class."}],"pos":[12796,12935],"yaml":true},{"content":"Returns a value that indicates whether the XML element referred to by the specified XML reader is a key identifier clause that can be deserialized by this instance.","nodes":[{"pos":[0,164],"content":"Returns a value that indicates whether the XML element referred to by the specified XML reader is a key identifier clause that can be deserialized by this instance.","nodes":[{"content":"Returns a value that indicates whether the XML element referred to by the specified XML reader is a key identifier clause that can be deserialized by this instance.","pos":[0,164]}]}],"pos":[14315,14480],"yaml":true},{"content":"The default implementation returns `false` to indicate that the key identifier clause cannot be read.  \n  \n A derived class checks the element that the reader is referring to in order to determine whether the instance can deserialize a key identifier clause. This is typically accomplished through a call to the <xref:System.Xml.XmlReader.IsStartElement%2A?displayProperty=fullName> method with the appropriate element and namespace strings specified. If you override <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A>, you must also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause%2A> method to provide the logic to deserialize the key identifier clause.","nodes":[{"pos":[0,101],"content":"The default implementation returns <ph id=\"ph1\">`false`</ph> to indicate that the key identifier clause cannot be read.","source":"The default implementation returns `false` to indicate that the key identifier clause cannot be read."},{"pos":[108,734],"content":"A derived class checks the element that the reader is referring to in order to determine whether the instance can deserialize a key identifier clause. This is typically accomplished through a call to the <xref:System.Xml.XmlReader.IsStartElement%2A?displayProperty=fullName> method with the appropriate element and namespace strings specified. If you override <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A>, you must also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause%2A> method to provide the logic to deserialize the key identifier clause.","nodes":[{"content":"A derived class checks the element that the reader is referring to in order to determine whether the instance can deserialize a key identifier clause. This is typically accomplished through a call to the <xref:System.Xml.XmlReader.IsStartElement%2A?displayProperty=fullName> method with the appropriate element and namespace strings specified. If you override <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A>, you must also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause%2A> method to provide the logic to deserialize the key identifier clause.","pos":[0,626],"nodes":[{"content":"A derived class checks the element that the reader is referring to in order to determine whether the instance can deserialize a key identifier clause.","pos":[0,150]},{"content":"This is typically accomplished through a call to the <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader.IsStartElement%2A?displayProperty=fullName&gt;</ph> method with the appropriate element and namespace strings specified.","pos":[151,343],"source":" This is typically accomplished through a call to the <xref:System.Xml.XmlReader.IsStartElement%2A?displayProperty=fullName> method with the appropriate element and namespace strings specified."},{"content":"If you override <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A&gt;</ph>, you must also override the <ph id=\"ph2\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause%2A&gt;</ph> method to provide the logic to deserialize the key identifier clause.","pos":[344,626],"source":" If you override <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A>, you must also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause%2A> method to provide the logic to deserialize the key identifier clause."}]}]}],"pos":[14491,15230],"yaml":true,"extradata":"MT"},{"content":"An XML reader positioned at the start element. The reader should not be advanced by this method.","nodes":[{"pos":[0,96],"content":"An XML reader positioned at the start element. The reader should not be advanced by this method.","nodes":[{"content":"An XML reader positioned at the start element. The reader should not be advanced by this method.","pos":[0,96],"nodes":[{"content":"An XML reader positioned at the start element.","pos":[0,46]},{"content":"The reader should not be advanced by this method.","pos":[47,96]}]}]}],"pos":[15416,15513],"yaml":true},{"content":"`true` if the <xref href=\"System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)\"></xref> method can read the element; otherwise, `false`. The default is `false`.","nodes":[{"pos":[0,202],"content":"`true` if the <xref href=\"System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)\"></xref> method can read the element; otherwise, `false`. The default is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)\"&gt;&lt;/xref&gt;</ph> method can read the element; otherwise, <ph id=\"ph3\">`false`</ph>.","pos":[0,178],"source":"`true` if the <xref href=\"System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)\"></xref> method can read the element; otherwise, `false`."},{"content":"The default is <ph id=\"ph1\">`false`</ph>.","pos":[179,202],"source":" The default is `false`."}]}],"pos":[15571,15776],"yaml":true},{"content":"Returns a value that indicates whether the specified string can be deserialized as a token of the type processed by this instance.","nodes":[{"pos":[0,130],"content":"Returns a value that indicates whether the specified string can be deserialized as a token of the type processed by this instance.","nodes":[{"content":"Returns a value that indicates whether the specified string can be deserialized as a token of the type processed by this instance.","pos":[0,130]}]}],"pos":[16986,17117],"yaml":true},{"content":"The default implementation always returns `false`.  \n  \n If you override this method, you must also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=fullName> method to provide the logic to deserialize the token.","nodes":[{"pos":[0,50],"content":"The default implementation always returns <ph id=\"ph1\">`false`</ph>.","source":"The default implementation always returns `false`."},{"pos":[57,260],"content":"If you override this method, you must also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=fullName> method to provide the logic to deserialize the token.","nodes":[{"content":"If you override this method, you must also override the <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=fullName&gt;</ph> method to provide the logic to deserialize the token.","pos":[0,203],"source":"If you override this method, you must also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=fullName> method to provide the logic to deserialize the token."}]}],"pos":[17128,17393],"yaml":true,"extradata":"MT"},{"content":"The token string to read.","nodes":[{"pos":[0,25],"content":"The token string to read.","nodes":[{"content":"The token string to read.","pos":[0,25]}]}],"pos":[17554,17580],"yaml":true},{"content":"`true` if the <xref href=\"System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)\"></xref> method can read the element; otherwise, `false`. The default is `false`.","nodes":[{"pos":[0,181],"content":"`true` if the <xref href=\"System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)\"></xref> method can read the element; otherwise, `false`. The default is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)\"&gt;&lt;/xref&gt;</ph> method can read the element; otherwise, <ph id=\"ph3\">`false`</ph>.","pos":[0,157],"source":"`true` if the <xref href=\"System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)\"></xref> method can read the element; otherwise, `false`."},{"content":"The default is <ph id=\"ph1\">`false`</ph>.","pos":[158,181],"source":" The default is `false`."}]}],"pos":[17638,17822],"yaml":true},{"content":"Returns a value that indicates whether the XML element referenced by the specified XML reader can be read as a token of the type processed by this instance.","nodes":[{"pos":[0,156],"content":"Returns a value that indicates whether the XML element referenced by the specified XML reader can be read as a token of the type processed by this instance.","nodes":[{"content":"Returns a value that indicates whether the XML element referenced by the specified XML reader can be read as a token of the type processed by this instance.","pos":[0,156]}]}],"pos":[19048,19205],"yaml":true},{"content":"The default implementation always returns `false`.  \n  \n A derived class checks the element that the reader is referring to in order to determine whether the instance can deserialize a security token. This is typically accomplished through a call to the <xref:System.Xml.XmlReader.IsStartElement%2A> method with the appropriate element and namespace strings specified. If you override <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A>, you must also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=fullName> method or the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=fullName> method to provide the logic to deserialize the key identifier clause.","nodes":[{"pos":[0,50],"content":"The default implementation always returns <ph id=\"ph1\">`false`</ph>.","source":"The default implementation always returns `false`."},{"pos":[57,770],"content":"A derived class checks the element that the reader is referring to in order to determine whether the instance can deserialize a security token. This is typically accomplished through a call to the <xref:System.Xml.XmlReader.IsStartElement%2A> method with the appropriate element and namespace strings specified. If you override <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A>, you must also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=fullName> method or the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=fullName> method to provide the logic to deserialize the key identifier clause.","nodes":[{"content":"A derived class checks the element that the reader is referring to in order to determine whether the instance can deserialize a security token. This is typically accomplished through a call to the <xref:System.Xml.XmlReader.IsStartElement%2A> method with the appropriate element and namespace strings specified. If you override <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A>, you must also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=fullName> method or the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=fullName> method to provide the logic to deserialize the key identifier clause.","pos":[0,713],"nodes":[{"content":"A derived class checks the element that the reader is referring to in order to determine whether the instance can deserialize a security token.","pos":[0,143]},{"content":"This is typically accomplished through a call to the <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader.IsStartElement%2A&gt;</ph> method with the appropriate element and namespace strings specified.","pos":[144,311],"source":" This is typically accomplished through a call to the <xref:System.Xml.XmlReader.IsStartElement%2A> method with the appropriate element and namespace strings specified."},{"content":"If you override <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A&gt;</ph>, you must also override the <ph id=\"ph2\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=fullName&gt;</ph> method or the <ph id=\"ph3\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=fullName&gt;</ph> method to provide the logic to deserialize the key identifier clause.","pos":[312,713],"source":" If you override <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A>, you must also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=fullName> method or the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=fullName> method to provide the logic to deserialize the key identifier clause."}]}]}],"pos":[19216,19991],"yaml":true,"extradata":"MT"},{"content":"An XML reader positioned at a start element. The reader should not be advanced by this method.","nodes":[{"pos":[0,94],"content":"An XML reader positioned at a start element. The reader should not be advanced by this method.","nodes":[{"content":"An XML reader positioned at a start element. The reader should not be advanced by this method.","pos":[0,94],"nodes":[{"content":"An XML reader positioned at a start element.","pos":[0,44]},{"content":"The reader should not be advanced by this method.","pos":[45,94]}]}]}],"pos":[20824,20919],"yaml":true},{"content":"`true` if the <xref href=\"System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)\"></xref> method can read the element; otherwise, `false`. The default is `false`.","nodes":[{"pos":[0,188],"content":"`true` if the <xref href=\"System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)\"></xref> method can read the element; otherwise, `false`. The default is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)\"&gt;&lt;/xref&gt;</ph> method can read the element; otherwise, <ph id=\"ph3\">`false`</ph>.","pos":[0,164],"source":"`true` if the <xref href=\"System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)\"></xref> method can read the element; otherwise, `false`."},{"content":"The default is <ph id=\"ph1\">`false`</ph>.","pos":[165,188],"source":" The default is `false`."}]}],"pos":[20977,21168],"yaml":true},{"content":"Gets a value that indicates whether the handler supports validation of security tokens.","nodes":[{"pos":[0,87],"content":"Gets a value that indicates whether the handler supports validation of security tokens.","nodes":[{"content":"Gets a value that indicates whether the handler supports validation of security tokens.","pos":[0,87]}]}],"pos":[22321,22409],"yaml":true},{"content":"To implement validation in a derived class, override this property to return `true` and override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method to implement the validation logic.","nodes":[{"pos":[0,215],"content":"To implement validation in a derived class, override this property to return <ph id=\"ph1\">`true`</ph> and override the <ph id=\"ph2\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> method to implement the validation logic.","source":"To implement validation in a derived class, override this property to return `true` and override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method to implement the validation logic."}],"pos":[22420,22636],"yaml":true,"extradata":"MT"},{"content":"`true` if the class is capable of validating security tokens; otherwise, `false`. The default is `false`.","nodes":[{"pos":[0,105],"content":"`true` if the class is capable of validating security tokens; otherwise, `false`. The default is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the class is capable of validating security tokens; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,81],"source":"`true` if the class is capable of validating security tokens; otherwise, `false`."},{"content":"The default is <ph id=\"ph1\">`false`</ph>.","pos":[82,105],"source":" The default is `false`."}]}],"pos":[23430,23538],"yaml":true},{"content":"Returns a value that indicates whether the specified key identifier clause can be serialized by this instance.","nodes":[{"pos":[0,110],"content":"Returns a value that indicates whether the specified key identifier clause can be serialized by this instance.","nodes":[{"content":"Returns a value that indicates whether the specified key identifier clause can be serialized by this instance.","pos":[0,110]}]}],"pos":[25017,25128],"yaml":true},{"content":"The default implementation always returns `false`.  \n  \n If you override <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A>, you must also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause%2A> method to provide the logic to serialize the key identifier clause.","nodes":[{"pos":[0,50],"content":"The default implementation always returns <ph id=\"ph1\">`false`</ph>.","source":"The default implementation always returns `false`."},{"pos":[57,339],"content":"If you override <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A>, you must also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause%2A> method to provide the logic to serialize the key identifier clause.","nodes":[{"content":"If you override <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A&gt;</ph>, you must also override the <ph id=\"ph2\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause%2A&gt;</ph> method to provide the logic to serialize the key identifier clause.","pos":[0,282],"source":"If you override <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A>, you must also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause%2A> method to provide the logic to serialize the key identifier clause."}]}],"pos":[25139,25483],"yaml":true,"extradata":"MT"},{"content":"The key identifier clause to be checked.","nodes":[{"pos":[0,40],"content":"The key identifier clause to be checked.","nodes":[{"content":"The key identifier clause to be checked.","pos":[0,40]}]}],"pos":[25782,25823],"yaml":true},{"content":"`true` if the key identifier clause can be serialized; otherwise, `false`. The default is `false`.","nodes":[{"pos":[0,98],"content":"`true` if the key identifier clause can be serialized; otherwise, `false`. The default is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the key identifier clause can be serialized; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,74],"source":"`true` if the key identifier clause can be serialized; otherwise, `false`."},{"content":"The default is <ph id=\"ph1\">`false`</ph>.","pos":[75,98],"source":" The default is `false`."}]}],"pos":[25881,25982],"yaml":true},{"content":"Gets a value that indicates whether the handler can serialize security tokens.","nodes":[{"pos":[0,78],"content":"Gets a value that indicates whether the handler can serialize security tokens.","nodes":[{"content":"Gets a value that indicates whether the handler can serialize security tokens.","pos":[0,78]}]}],"pos":[27132,27211],"yaml":true},{"content":"To implement serialization in a derived class, override this property to return `true` and override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A> methods to implement the serialization logic.","nodes":[{"pos":[0,219],"content":"To implement serialization in a derived class, override this property to return <ph id=\"ph1\">`true`</ph> and override the <ph id=\"ph2\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A&gt;</ph> methods to implement the serialization logic.","source":"To implement serialization in a derived class, override this property to return `true` and override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A> methods to implement the serialization logic."}],"pos":[27222,27442],"yaml":true,"extradata":"MT"},{"content":"`true` if the class is capable of serializing tokens; otherwise `false`. The default is `false`.","nodes":[{"pos":[0,96],"content":"`true` if the class is capable of serializing tokens; otherwise `false`. The default is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the class is capable of serializing tokens; otherwise <ph id=\"ph2\">`false`</ph>.","pos":[0,72],"source":"`true` if the class is capable of serializing tokens; otherwise `false`."},{"content":"The default is <ph id=\"ph1\">`false`</ph>.","pos":[73,96],"source":" The default is `false`."}]}],"pos":[28231,28330],"yaml":true},{"content":"Gets or sets the <xref href=\"System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration\"></xref> object that provides configuration for the current instance.","nodes":[{"pos":[0,160],"content":"Gets or sets the <ph id=\"ph1\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration\"&gt;&lt;/xref&gt;</ph> object that provides configuration for the current instance.","source":"Gets or sets the <xref href=\"System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration\"></xref> object that provides configuration for the current instance."}],"pos":[29466,29627],"yaml":true},{"content":"The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> property is typically set by the configuration infrastructure from the [\\&lt;securityTokenHandlerConfiguration\\&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/securitytokenhandlerconfiguration.md) element in the configuration file during application start up.  \n  \n In derived classes, you use the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> property to access configuration settings; for example, the issuer name registry to use in the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method can be accessed from the <xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.IssuerNameRegistry%2A?displayProperty=fullName> property of the configuration object.","nodes":[{"pos":[0,366],"content":"The <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A&gt;</ph> property is typically set by the configuration infrastructure from the <bpt id=\"p1\">[</bpt><ph id=\"ph2\">\\&amp;</ph>lt;securityTokenHandlerConfiguration<ph id=\"ph3\">\\&amp;</ph>gt;<ept id=\"p1\">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/securitytokenhandlerconfiguration.md)</ept> element in the configuration file during application start up.","source":"The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> property is typically set by the configuration infrastructure from the [\\&lt;securityTokenHandlerConfiguration\\&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/securitytokenhandlerconfiguration.md) element in the configuration file during application start up."},{"pos":[373,831],"content":"In derived classes, you use the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> property to access configuration settings; for example, the issuer name registry to use in the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method can be accessed from the <xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.IssuerNameRegistry%2A?displayProperty=fullName> property of the configuration object.","nodes":[{"content":"In derived classes, you use the <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A&gt;</ph> property to access configuration settings; for example, the issuer name registry to use in the <ph id=\"ph2\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> method can be accessed from the <ph id=\"ph3\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.IssuerNameRegistry%2A?displayProperty=fullName&gt;</ph> property of the configuration object.","pos":[0,458],"source":"In derived classes, you use the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> property to access configuration settings; for example, the issuer name registry to use in the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method can be accessed from the <xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.IssuerNameRegistry%2A?displayProperty=fullName> property of the configuration object."}]}],"pos":[29638,30476],"yaml":true,"extradata":"MT"},{"content":"The configuration object for the current instance.","nodes":[{"pos":[0,50],"content":"The configuration object for the current instance.","nodes":[{"content":"The configuration object for the current instance.","pos":[0,50]}]}],"pos":[30701,30752],"yaml":true},{"content":"Gets the token handler collection that contains the current instance.","nodes":[{"pos":[0,69],"content":"Gets the token handler collection that contains the current instance.","nodes":[{"content":"Gets the token handler collection that contains the current instance.","pos":[0,69]}]}],"pos":[31930,32000],"yaml":true},{"content":"When the token handler is added to a <xref:System.IdentityModel.Tokens.SecurityTokenHandlerCollection> instance, this property is automatically set.","nodes":[{"pos":[0,148],"content":"When the token handler is added to a <xref:System.IdentityModel.Tokens.SecurityTokenHandlerCollection> instance, this property is automatically set.","nodes":[{"content":"When the token handler is added to a <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandlerCollection&gt;</ph> instance, this property is automatically set.","pos":[0,148],"source":"When the token handler is added to a <xref:System.IdentityModel.Tokens.SecurityTokenHandlerCollection> instance, this property is automatically set."}]}],"pos":[32011,32160],"yaml":true,"extradata":"MT"},{"content":"The token handler collection that contains the current instance.","nodes":[{"pos":[0,64],"content":"The token handler collection that contains the current instance.","nodes":[{"content":"The token handler collection that contains the current instance.","pos":[0,64]}]}],"pos":[32381,32446],"yaml":true},{"content":"When overridden in a derived class, creates the security token reference for tokens processed by that class. This method is typically called by a security token service (STS).","nodes":[{"pos":[0,175],"content":"When overridden in a derived class, creates the security token reference for tokens processed by that class. This method is typically called by a security token service (STS).","nodes":[{"content":"When overridden in a derived class, creates the security token reference for tokens processed by that class. This method is typically called by a security token service (STS).","pos":[0,175],"nodes":[{"content":"When overridden in a derived class, creates the security token reference for tokens processed by that class.","pos":[0,108]},{"content":"This method is typically called by a security token service (STS).","pos":[109,175]}]}]}],"pos":[33923,34099],"yaml":true},{"content":"By default this method throws a <xref:System.NotImplementedException> exception.  \n  \n Derived classes override this method to return a key identifier clause (<xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause>) that can be used to create a `<wsse:SecurityTokenReference>` element for the specified token.  \n  \n Called from implementations of the <xref:System.IdentityModel.SecurityTokenService> class.  \n  \n Typically, a <xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause> does not need to be used, other than when a custom security token service is created. When a security token service returns a security token, the issued security token contains references to attached and unattached security tokens. Attached references refer to security tokens that are contained within the security header of a SOAP message and unattached references reference security tokens that are not included within the security header of a SOAP message. These references typically affirm the authenticity of the issued security token.","nodes":[{"pos":[0,80],"content":"By default this method throws a <xref:System.NotImplementedException> exception.","nodes":[{"content":"By default this method throws a <ph id=\"ph1\">&lt;xref:System.NotImplementedException&gt;</ph> exception.","pos":[0,80],"source":"By default this method throws a <xref:System.NotImplementedException> exception."}]},{"pos":[87,316],"content":"Derived classes override this method to return a key identifier clause (<ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause&gt;</ph>) that can be used to create a <ph id=\"ph2\">`&lt;wsse:SecurityTokenReference&gt;`</ph> element for the specified token.","source":"Derived classes override this method to return a key identifier clause (<xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause>) that can be used to create a `<wsse:SecurityTokenReference>` element for the specified token."},{"pos":[323,413],"content":"Called from implementations of the <xref:System.IdentityModel.SecurityTokenService> class.","nodes":[{"content":"Called from implementations of the <ph id=\"ph1\">&lt;xref:System.IdentityModel.SecurityTokenService&gt;</ph> class.","pos":[0,90],"source":"Called from implementations of the <xref:System.IdentityModel.SecurityTokenService> class."}]},{"pos":[420,1037],"content":"Typically, a <xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause> does not need to be used, other than when a custom security token service is created. When a security token service returns a security token, the issued security token contains references to attached and unattached security tokens. Attached references refer to security tokens that are contained within the security header of a SOAP message and unattached references reference security tokens that are not included within the security header of a SOAP message. These references typically affirm the authenticity of the issued security token.","nodes":[{"content":"Typically, a <xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause> does not need to be used, other than when a custom security token service is created. When a security token service returns a security token, the issued security token contains references to attached and unattached security tokens. Attached references refer to security tokens that are contained within the security header of a SOAP message and unattached references reference security tokens that are not included within the security header of a SOAP message. These references typically affirm the authenticity of the issued security token.","pos":[0,617],"nodes":[{"content":"Typically, a <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause&gt;</ph> does not need to be used, other than when a custom security token service is created.","pos":[0,161],"source":"Typically, a <xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause> does not need to be used, other than when a custom security token service is created."},{"content":"When a security token service returns a security token, the issued security token contains references to attached and unattached security tokens.","pos":[162,307]},{"content":"Attached references refer to security tokens that are contained within the security header of a SOAP message and unattached references reference security tokens that are not included within the security header of a SOAP message.","pos":[308,536]},{"content":"These references typically affirm the authenticity of the issued security token.","pos":[537,617]}]}]}],"pos":[34110,35156],"yaml":true,"extradata":"MT"},{"content":"The token for which the reference is to be created.","nodes":[{"pos":[0,51],"content":"The token for which the reference is to be created.","nodes":[{"content":"The token for which the reference is to be created.","pos":[0,51]}]}],"pos":[36132,36184],"yaml":true},{"content":"`true` if an attached reference should be created; `false` if an unattached reference should be created.","nodes":[{"pos":[0,104],"content":"<ph id=\"ph1\">`true`</ph> if an attached reference should be created; <ph id=\"ph2\">`false`</ph> if an unattached reference should be created.","source":"`true` if an attached reference should be created; `false` if an unattached reference should be created."}],"pos":[36249,36356],"yaml":true},{"content":"A key identifier clause that references the specified token.","nodes":[{"pos":[0,60],"content":"A key identifier clause that references the specified token.","nodes":[{"content":"A key identifier clause that references the specified token.","pos":[0,60]}]}],"pos":[36455,36516],"yaml":true},{"content":"When overridden in a derived class, creates a security token using the specified token descriptor. This method is called by a security token service (STS).","nodes":[{"pos":[0,155],"content":"When overridden in a derived class, creates a security token using the specified token descriptor. This method is called by a security token service (STS).","nodes":[{"content":"When overridden in a derived class, creates a security token using the specified token descriptor. This method is called by a security token service (STS).","pos":[0,155],"nodes":[{"content":"When overridden in a derived class, creates a security token using the specified token descriptor.","pos":[0,98]},{"content":"This method is called by a security token service (STS).","pos":[99,155]}]}]}],"pos":[37887,38043],"yaml":true},{"content":"By default this method throws a <xref:System.NotImplementedException> exception.  \n  \n Called from implementations of the <xref:System.IdentityModel.SecurityTokenService> class.","nodes":[{"pos":[0,80],"content":"By default this method throws a <xref:System.NotImplementedException> exception.","nodes":[{"content":"By default this method throws a <ph id=\"ph1\">&lt;xref:System.NotImplementedException&gt;</ph> exception.","pos":[0,80],"source":"By default this method throws a <xref:System.NotImplementedException> exception."}]},{"pos":[87,177],"content":"Called from implementations of the <xref:System.IdentityModel.SecurityTokenService> class.","nodes":[{"content":"Called from implementations of the <ph id=\"ph1\">&lt;xref:System.IdentityModel.SecurityTokenService&gt;</ph> class.","pos":[0,90],"source":"Called from implementations of the <xref:System.IdentityModel.SecurityTokenService> class."}]}],"pos":[38054,38236],"yaml":true,"extradata":"MT"},{"content":"The security token descriptor from which the token is to be created. Properties of the token descriptor are set before this method is called.","nodes":[{"pos":[0,141],"content":"The security token descriptor from which the token is to be created. Properties of the token descriptor are set before this method is called.","nodes":[{"content":"The security token descriptor from which the token is to be created. Properties of the token descriptor are set before this method is called.","pos":[0,141],"nodes":[{"content":"The security token descriptor from which the token is to be created.","pos":[0,68]},{"content":"Properties of the token descriptor are set before this method is called.","pos":[69,141]}]}]}],"pos":[39183,39325],"yaml":true},{"content":"A security token that matches the properties of the token descriptor.","nodes":[{"pos":[0,69],"content":"A security token that matches the properties of the token descriptor.","nodes":[{"content":"A security token that matches the properties of the token descriptor.","pos":[0,69]}]}],"pos":[39410,39480],"yaml":true},{"content":"When overridden in a derived class, throws an exception if the specified token is detected as being replayed.","nodes":[{"pos":[0,109],"content":"When overridden in a derived class, throws an exception if the specified token is detected as being replayed.","nodes":[{"content":"When overridden in a derived class, throws an exception if the specified token is detected as being replayed.","pos":[0,109]}]}],"pos":[40822,40932],"yaml":true},{"content":"The default implementation does nothing.  \n  \n Derived classes should throw a <xref:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException> if the token has already been used.  \n  \n Windows Identity Foundation (WIF) provides the <xref:System.IdentityModel.Tokens.TokenReplayCache> class from which replay caches may be derived and the [\\&lt;tokenReplayCache\\&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/tokenreplaycache.md) configuration element, which can be used to configure the replay cache used by token handlers in an application; however, the exact implementation of the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken%2A> method is up to the designer of the derived class.","nodes":[{"pos":[0,40],"content":"The default implementation does nothing.","nodes":[{"content":"The default implementation does nothing.","pos":[0,40]}]},{"pos":[47,185],"content":"Derived classes should throw a <xref:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException> if the token has already been used.","nodes":[{"content":"Derived classes should throw a <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException&gt;</ph> if the token has already been used.","pos":[0,138],"source":"Derived classes should throw a <xref:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException> if the token has already been used."}]},{"pos":[192,750],"content":"Windows Identity Foundation (WIF) provides the <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.TokenReplayCache&gt;</ph> class from which replay caches may be derived and the <bpt id=\"p1\">[</bpt><ph id=\"ph2\">\\&amp;</ph>lt;tokenReplayCache<ph id=\"ph3\">\\&amp;</ph>gt;<ept id=\"p1\">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/tokenreplaycache.md)</ept> configuration element, which can be used to configure the replay cache used by token handlers in an application; however, the exact implementation of the <ph id=\"ph4\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken%2A&gt;</ph> method is up to the designer of the derived class.","source":"Windows Identity Foundation (WIF) provides the <xref:System.IdentityModel.Tokens.TokenReplayCache> class from which replay caches may be derived and the [\\&lt;tokenReplayCache\\&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/tokenreplaycache.md) configuration element, which can be used to configure the replay cache used by token handlers in an application; however, the exact implementation of the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken%2A> method is up to the designer of the derived class."}],"pos":[40943,41702],"yaml":true,"extradata":"MT"},{"content":"The token to check for replay.","nodes":[{"pos":[0,30],"content":"The token to check for replay.","nodes":[{"content":"The token to check for replay.","pos":[0,30]}]}],"pos":[41924,41955],"yaml":true},{"content":"When overridden in a derived class, returns the set of URIs that are used in requests to identify a token of the type processed by the derived class.","nodes":[{"pos":[0,149],"content":"When overridden in a derived class, returns the set of URIs that are used in requests to identify a token of the type processed by the derived class.","nodes":[{"content":"When overridden in a derived class, returns the set of URIs that are used in requests to identify a token of the type processed by the derived class.","pos":[0,149]}]}],"pos":[43161,43311],"yaml":true},{"content":"The <xref:System.Type> of the token processed by the current instance is accessed through the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A> property. The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A> method returns the set of acceptable identifiers that can be used in messages to refer to the token type. For example, the URI value used in the `<wst:TokenType>` element under the `<wst:RequestSecurityToken>` element to request a specific kind of token (represented by the <xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.TokenType%2A?displayProperty=fullName> property in the object model).","nodes":[{"pos":[0,663],"content":"The <xref:System.Type> of the token processed by the current instance is accessed through the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A> property. The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A> method returns the set of acceptable identifiers that can be used in messages to refer to the token type. For example, the URI value used in the `<wst:TokenType>` element under the `<wst:RequestSecurityToken>` element to request a specific kind of token (represented by the <xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.TokenType%2A?displayProperty=fullName> property in the object model).","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph> of the token processed by the current instance is accessed through the <ph id=\"ph2\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A&gt;</ph> property.","pos":[0,172],"source":"The <xref:System.Type> of the token processed by the current instance is accessed through the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A> property."},{"content":"The <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A&gt;</ph> method returns the set of acceptable identifiers that can be used in messages to refer to the token type.","pos":[173,365],"source":" The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A> method returns the set of acceptable identifiers that can be used in messages to refer to the token type."},{"content":"For example, the URI value used in the <ph id=\"ph1\">`&lt;wst:TokenType&gt;`</ph> element under the <ph id=\"ph2\">`&lt;wst:RequestSecurityToken&gt;`</ph> element to request a specific kind of token (represented by the <ph id=\"ph3\">&lt;xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.TokenType%2A?displayProperty=fullName&gt;</ph> property in the object model).","pos":[366,663],"source":" For example, the URI value used in the `<wst:TokenType>` element under the `<wst:RequestSecurityToken>` element to request a specific kind of token (represented by the <xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.TokenType%2A?displayProperty=fullName> property in the object model)."}]}],"pos":[43322,43986],"yaml":true,"extradata":"MT"},{"content":"The set of URIs that identify the token type that this handler supports.","nodes":[{"pos":[0,72],"content":"The set of URIs that identify the token type that this handler supports.","nodes":[{"content":"The set of URIs that identify the token type that this handler supports.","pos":[0,72]}]}],"pos":[44960,45033],"yaml":true},{"content":"When overridden in a derived class, loads custom configuration from XML.","nodes":[{"pos":[0,72],"content":"When overridden in a derived class, loads custom configuration from XML.","nodes":[{"content":"When overridden in a derived class, loads custom configuration from XML.","pos":[0,72]}]}],"pos":[46348,46421],"yaml":true},{"content":"The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration%2A> method is called by the configuration infrastructure. When this method is called, the `nodelist` will contain the top-level child elements of the token handler’s [\\&lt;add\\&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/add.md) element from the configuration file. Each of these may, in turn, contain attributes or child elements depending on the configuration schema you define for your derived class.  \n  \n The default implementation throws a <xref:System.NotImplementedException>. Override this method in your derived class to enable initialization of your security token handler from a configuration file.","nodes":[{"pos":[0,519],"content":"The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration%2A> method is called by the configuration infrastructure. When this method is called, the `nodelist` will contain the top-level child elements of the token handler’s [\\&lt;add\\&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/add.md) element from the configuration file. Each of these may, in turn, contain attributes or child elements depending on the configuration schema you define for your derived class.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration%2A&gt;</ph> method is called by the configuration infrastructure.","pos":[0,140],"source":"The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration%2A> method is called by the configuration infrastructure."},{"content":"When this method is called, the <ph id=\"ph1\">`nodelist`</ph> will contain the top-level child elements of the token handler’s <bpt id=\"p1\">[</bpt><ph id=\"ph2\">\\&amp;</ph>lt;add<ph id=\"ph3\">\\&amp;</ph>gt;<ept id=\"p1\">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/add.md)</ept> element from the configuration file.","pos":[141,381],"source":" When this method is called, the `nodelist` will contain the top-level child elements of the token handler’s [\\&lt;add\\&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/add.md) element from the configuration file."},{"content":"Each of these may, in turn, contain attributes or child elements depending on the configuration schema you define for your derived class.","pos":[382,519]}]},{"pos":[526,726],"content":"The default implementation throws a <xref:System.NotImplementedException>. Override this method in your derived class to enable initialization of your security token handler from a configuration file.","nodes":[{"content":"The default implementation throws a <xref:System.NotImplementedException>. Override this method in your derived class to enable initialization of your security token handler from a configuration file.","pos":[0,200],"nodes":[{"content":"The default implementation throws a <ph id=\"ph1\">&lt;xref:System.NotImplementedException&gt;</ph>.","pos":[0,74],"source":"The default implementation throws a <xref:System.NotImplementedException>."},{"content":"Override this method in your derived class to enable initialization of your security token handler from a configuration file.","pos":[75,200]}]}]}],"pos":[46432,47165],"yaml":true,"extradata":"MT"},{"content":"The configuration XML elements. Each node in the list is of type <xref href=\"System.Xml.XmlElement\"></xref>.","nodes":[{"pos":[0,108],"content":"The configuration XML elements. Each node in the list is of type <xref href=\"System.Xml.XmlElement\"></xref>.","nodes":[{"content":"The configuration XML elements.","pos":[0,31]},{"content":"Each node in the list is of type <ph id=\"ph1\">&lt;xref href=\"System.Xml.XmlElement\"&gt;&lt;/xref&gt;</ph>.","pos":[32,108],"source":" Each node in the list is of type <xref href=\"System.Xml.XmlElement\"></xref>."}]}],"pos":[47356,47465],"yaml":true},{"content":"When overridden in a derived class, deserializes the XML referenced by the specified XML reader to a key identifier clause that references a token processed by the derived class.","nodes":[{"pos":[0,178],"content":"When overridden in a derived class, deserializes the XML referenced by the specified XML reader to a key identifier clause that references a token processed by the derived class.","nodes":[{"content":"When overridden in a derived class, deserializes the XML referenced by the specified XML reader to a key identifier clause that references a token processed by the derived class.","pos":[0,178]}]}],"pos":[48768,48947],"yaml":true},{"content":"By default this method throws a <xref:System.NotImplementedException> exception.  \n  \n Override this method to provide the logic to deserialize a key identifier clause from XML. If you override this method, you should also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A?displayProperty=fullName> method.","nodes":[{"pos":[0,80],"content":"By default this method throws a <xref:System.NotImplementedException> exception.","nodes":[{"content":"By default this method throws a <ph id=\"ph1\">&lt;xref:System.NotImplementedException&gt;</ph> exception.","pos":[0,80],"source":"By default this method throws a <xref:System.NotImplementedException> exception."}]},{"pos":[87,354],"content":"Override this method to provide the logic to deserialize a key identifier clause from XML. If you override this method, you should also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A?displayProperty=fullName> method.","nodes":[{"content":"Override this method to provide the logic to deserialize a key identifier clause from XML. If you override this method, you should also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A?displayProperty=fullName> method.","pos":[0,267],"nodes":[{"content":"Override this method to provide the logic to deserialize a key identifier clause from XML.","pos":[0,90]},{"content":"If you override this method, you should also override the <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A?displayProperty=fullName&gt;</ph> method.","pos":[91,267],"source":" If you override this method, you should also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A?displayProperty=fullName> method."}]}]}],"pos":[48958,49317],"yaml":true,"extradata":"MT"},{"content":"An XML reader positioned at the start element of the XML to be deserialized into the key identifier clause.","nodes":[{"pos":[0,107],"content":"An XML reader positioned at the start element of the XML to be deserialized into the key identifier clause.","nodes":[{"content":"An XML reader positioned at the start element of the XML to be deserialized into the key identifier clause.","pos":[0,107]}]}],"pos":[49551,49659],"yaml":true},{"content":"The key identifier clause that was deserialized from the XML.","nodes":[{"pos":[0,61],"content":"The key identifier clause that was deserialized from the XML.","nodes":[{"content":"The key identifier clause that was deserialized from the XML.","pos":[0,61]}]}],"pos":[49758,49820],"yaml":true},{"content":"When overridden in a derived class, deserializes the specified string to a token of the type processed by the derived class.","nodes":[{"pos":[0,124],"content":"When overridden in a derived class, deserializes the specified string to a token of the type processed by the derived class.","nodes":[{"content":"When overridden in a derived class, deserializes the specified string to a token of the type processed by the derived class.","pos":[0,124]}]}],"pos":[51009,51134],"yaml":true},{"content":"> [!IMPORTANT]\n>  Calling this method with untrusted data is a security risk. Call this method only with trusted data. For more information, see [Untrusted Data Security Risks](http://go.microsoft.com/fwlink/?LinkId=330378).  \n  \n By default this method throws a <xref:System.NotImplementedException> exception.  \n  \n Override this method to provide functionality that can deserialize a security token from a string. If you override, this method, you should also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=fullName> method.","nodes":[{"pos":[2,224],"content":"[!IMPORTANT]\n Calling this method with untrusted data is a security risk. Call this method only with trusted data. For more information, see [Untrusted Data Security Risks](http://go.microsoft.com/fwlink/?LinkId=330378).","leadings":["","> "],"nodes":[{"content":" Calling this method with untrusted data is a security risk. Call this method only with trusted data. For more information, see [Untrusted Data Security Risks](http://go.microsoft.com/fwlink/?LinkId=330378).","pos":[13,220],"nodes":[{"content":"Calling this method with untrusted data is a security risk.","pos":[1,60]},{"content":"Call this method only with trusted data.","pos":[61,101]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Untrusted Data Security Risks<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=330378)</ept>.","pos":[102,207],"source":" For more information, see [Untrusted Data Security Risks](http://go.microsoft.com/fwlink/?LinkId=330378)."}]}]},{"pos":[231,311],"content":"By default this method throws a <xref:System.NotImplementedException> exception.","nodes":[{"content":"By default this method throws a <ph id=\"ph1\">&lt;xref:System.NotImplementedException&gt;</ph> exception.","pos":[0,80],"source":"By default this method throws a <xref:System.NotImplementedException> exception."}]},{"pos":[318,580],"content":"Override this method to provide functionality that can deserialize a security token from a string. If you override, this method, you should also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=fullName> method.","nodes":[{"content":"Override this method to provide functionality that can deserialize a security token from a string. If you override, this method, you should also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=fullName> method.","pos":[0,262],"nodes":[{"content":"Override this method to provide functionality that can deserialize a security token from a string.","pos":[0,98]},{"content":"If you override, this method, you should also override the <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=fullName&gt;</ph> method.","pos":[99,262],"source":" If you override, this method, you should also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=fullName> method."}]}]}],"pos":[51145,51733],"yaml":true,"extradata":"MT"},{"content":"The string to be deserialized.","nodes":[{"pos":[0,30],"content":"The string to be deserialized.","nodes":[{"content":"The string to be deserialized.","pos":[0,30]}]}],"pos":[51928,51959],"yaml":true},{"content":"The security token that was deserialized from the specified string.","nodes":[{"pos":[0,67],"content":"The security token that was deserialized from the specified string.","nodes":[{"content":"The security token that was deserialized from the specified string.","pos":[0,67]}]}],"pos":[52044,52112],"yaml":true},{"content":"When overridden in a derived class, deserializes the XML referenced by the specified XML reader to a token of the type processed by the derived class.","nodes":[{"pos":[0,150],"content":"When overridden in a derived class, deserializes the XML referenced by the specified XML reader to a token of the type processed by the derived class.","nodes":[{"content":"When overridden in a derived class, deserializes the XML referenced by the specified XML reader to a token of the type processed by the derived class.","pos":[0,150]}]}],"pos":[53317,53468],"yaml":true},{"content":"> [!IMPORTANT]\n>  Calling this method with untrusted data is a security risk. Call this method only with trusted data. For more information, see [Untrusted Data Security Risks](http://go.microsoft.com/fwlink/?LinkId=330378).  \n  \n By default this method throws a <xref:System.NotImplementedException> exception.  \n  \n Override this method to provide the logic to deserialize a security token from XML. If you override this method, you should also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=fullName> method. Typically, in derived classes, if the method cannot deserialize the token from the referenced XML, it throws an <xref:System.Xml.XmlException>.","nodes":[{"pos":[2,224],"content":"[!IMPORTANT]\n Calling this method with untrusted data is a security risk. Call this method only with trusted data. For more information, see [Untrusted Data Security Risks](http://go.microsoft.com/fwlink/?LinkId=330378).","leadings":["","> "],"nodes":[{"content":" Calling this method with untrusted data is a security risk. Call this method only with trusted data. For more information, see [Untrusted Data Security Risks](http://go.microsoft.com/fwlink/?LinkId=330378).","pos":[13,220],"nodes":[{"content":"Calling this method with untrusted data is a security risk.","pos":[1,60]},{"content":"Call this method only with trusted data.","pos":[61,101]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Untrusted Data Security Risks<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=330378)</ept>.","pos":[102,207],"source":" For more information, see [Untrusted Data Security Risks](http://go.microsoft.com/fwlink/?LinkId=330378)."}]}]},{"pos":[231,311],"content":"By default this method throws a <xref:System.NotImplementedException> exception.","nodes":[{"content":"By default this method throws a <ph id=\"ph1\">&lt;xref:System.NotImplementedException&gt;</ph> exception.","pos":[0,80],"source":"By default this method throws a <xref:System.NotImplementedException> exception."}]},{"pos":[318,708],"content":"Override this method to provide the logic to deserialize a security token from XML. If you override this method, you should also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=fullName> method. Typically, in derived classes, if the method cannot deserialize the token from the referenced XML, it throws an <xref:System.Xml.XmlException>.","nodes":[{"content":"Override this method to provide the logic to deserialize a security token from XML. If you override this method, you should also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=fullName> method. Typically, in derived classes, if the method cannot deserialize the token from the referenced XML, it throws an <xref:System.Xml.XmlException>.","pos":[0,390],"nodes":[{"content":"Override this method to provide the logic to deserialize a security token from XML.","pos":[0,83]},{"content":"If you override this method, you should also override the <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=fullName&gt;</ph> method.","pos":[84,246],"source":" If you override this method, you should also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=fullName> method."},{"content":"Typically, in derived classes, if the method cannot deserialize the token from the referenced XML, it throws an <ph id=\"ph1\">&lt;xref:System.Xml.XmlException&gt;</ph>.","pos":[247,390],"source":" Typically, in derived classes, if the method cannot deserialize the token from the referenced XML, it throws an <xref:System.Xml.XmlException>."}]}]}],"pos":[53479,54195],"yaml":true,"extradata":"MT"},{"content":"An XML reader positioned at the start element of the token.","nodes":[{"pos":[0,59],"content":"An XML reader positioned at the start element of the token.","nodes":[{"content":"An XML reader positioned at the start element of the token.","pos":[0,59]}]}],"pos":[55348,55408],"yaml":true},{"content":"The security token that was deserialized from the XML.","nodes":[{"pos":[0,54],"content":"The security token that was deserialized from the XML.","nodes":[{"content":"The security token that was deserialized from the XML.","pos":[0,54]}]}],"pos":[55493,55548],"yaml":true},{"content":"When overridden in a derived class, deserializes the XML referenced by the specified XML reader to a token of the type processed by the derived class by using the specified token resolver.","nodes":[{"pos":[0,188],"content":"When overridden in a derived class, deserializes the XML referenced by the specified XML reader to a token of the type processed by the derived class by using the specified token resolver.","nodes":[{"content":"When overridden in a derived class, deserializes the XML referenced by the specified XML reader to a token of the type processed by the derived class by using the specified token resolver.","pos":[0,188]}]}],"pos":[56981,57170],"yaml":true},{"content":"> [!IMPORTANT]\n>  Calling this method with untrusted data is a security risk. Call this method only with trusted data. For more information, see [Untrusted Data Security Risks](http://go.microsoft.com/fwlink/?LinkId=330378).  \n  \n The default implementation ignores the `tokenResolver` parameter and delegates the call to the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=fullName> method.  \n  \n Override this method to provide the logic to deserialize a security token from XML. If you override this method, you should also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=fullName> method. Typically, in derived classes, if the method cannot deserialize the token from the referenced XML, it throws an <xref:System.Xml.XmlException>.","nodes":[{"pos":[2,224],"content":"[!IMPORTANT]\n Calling this method with untrusted data is a security risk. Call this method only with trusted data. For more information, see [Untrusted Data Security Risks](http://go.microsoft.com/fwlink/?LinkId=330378).","leadings":["","> "],"nodes":[{"content":" Calling this method with untrusted data is a security risk. Call this method only with trusted data. For more information, see [Untrusted Data Security Risks](http://go.microsoft.com/fwlink/?LinkId=330378).","pos":[13,220],"nodes":[{"content":"Calling this method with untrusted data is a security risk.","pos":[1,60]},{"content":"Call this method only with trusted data.","pos":[61,101]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Untrusted Data Security Risks<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=330378)</ept>.","pos":[102,207],"source":" For more information, see [Untrusted Data Security Risks](http://go.microsoft.com/fwlink/?LinkId=330378)."}]}]},{"pos":[231,427],"content":"The default implementation ignores the <ph id=\"ph1\">`tokenResolver`</ph> parameter and delegates the call to the <ph id=\"ph2\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=fullName&gt;</ph> method.","source":"The default implementation ignores the `tokenResolver` parameter and delegates the call to the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=fullName> method."},{"pos":[434,824],"content":"Override this method to provide the logic to deserialize a security token from XML. If you override this method, you should also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=fullName> method. Typically, in derived classes, if the method cannot deserialize the token from the referenced XML, it throws an <xref:System.Xml.XmlException>.","nodes":[{"content":"Override this method to provide the logic to deserialize a security token from XML. If you override this method, you should also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=fullName> method. Typically, in derived classes, if the method cannot deserialize the token from the referenced XML, it throws an <xref:System.Xml.XmlException>.","pos":[0,390],"nodes":[{"content":"Override this method to provide the logic to deserialize a security token from XML.","pos":[0,83]},{"content":"If you override this method, you should also override the <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=fullName&gt;</ph> method.","pos":[84,246],"source":" If you override this method, you should also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=fullName> method."},{"content":"Typically, in derived classes, if the method cannot deserialize the token from the referenced XML, it throws an <ph id=\"ph1\">&lt;xref:System.Xml.XmlException&gt;</ph>.","pos":[247,390],"source":" Typically, in derived classes, if the method cannot deserialize the token from the referenced XML, it throws an <xref:System.Xml.XmlException>."}]}]}],"pos":[57181,58013],"yaml":true,"extradata":"MT"},{"content":"An XML reader positioned at the start element of the token.","nodes":[{"pos":[0,59],"content":"An XML reader positioned at the start element of the token.","nodes":[{"content":"An XML reader positioned at the start element of the token.","pos":[0,59]}]}],"pos":[58287,58347],"yaml":true},{"content":"A token resolver that contains out-of-band and cached tokens.","nodes":[{"pos":[0,61],"content":"A token resolver that contains out-of-band and cached tokens.","nodes":[{"content":"A token resolver that contains out-of-band and cached tokens.","pos":[0,61]}]}],"pos":[58455,58517],"yaml":true},{"content":"The security token that was deserialized from the XML.","nodes":[{"pos":[0,54],"content":"The security token that was deserialized from the XML.","nodes":[{"content":"The security token that was deserialized from the XML.","pos":[0,54]}]}],"pos":[58602,58657],"yaml":true},{"content":"When overridden in a derived class, gets the type of the security token that is processed by this instance.","nodes":[{"pos":[0,107],"content":"When overridden in a derived class, gets the type of the security token that is processed by this instance.","nodes":[{"content":"When overridden in a derived class, gets the type of the security token that is processed by this instance.","pos":[0,107]}]}],"pos":[59765,59873],"yaml":true},{"content":"You must override this property in derived classes and return the <xref:System.Type> of the security token (<xref:System.IdentityModel.Tokens.SecurityToken>) that is processed by the derived class.","nodes":[{"pos":[0,197],"content":"You must override this property in derived classes and return the <xref:System.Type> of the security token (<xref:System.IdentityModel.Tokens.SecurityToken>) that is processed by the derived class.","nodes":[{"content":"You must override this property in derived classes and return the <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph> of the security token (<ph id=\"ph2\">&lt;xref:System.IdentityModel.Tokens.SecurityToken&gt;</ph>) that is processed by the derived class.","pos":[0,197],"source":"You must override this property in derived classes and return the <xref:System.Type> of the security token (<xref:System.IdentityModel.Tokens.SecurityToken>) that is processed by the derived class."}]}],"pos":[59884,60082],"yaml":true,"extradata":"MT"},{"content":"The type of the security token that is processed by this instance.","nodes":[{"pos":[0,66],"content":"The type of the security token that is processed by this instance.","nodes":[{"content":"The type of the security token that is processed by this instance.","pos":[0,66]}]}],"pos":[60903,60970],"yaml":true},{"content":"Traces the failure event during the validation of security tokens when tracing is enabled.","nodes":[{"pos":[0,90],"content":"Traces the failure event during the validation of security tokens when tracing is enabled.","nodes":[{"content":"Traces the failure event during the validation of security tokens when tracing is enabled.","pos":[0,90]}]}],"pos":[62424,62515],"yaml":true},{"content":"This method should be called from the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method when validation of the token fails.","nodes":[{"pos":[0,153],"content":"This method should be called from the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method when validation of the token fails.","nodes":[{"content":"This method should be called from the <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> method when validation of the token fails.","pos":[0,153],"source":"This method should be called from the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method when validation of the token fails."}]}],"pos":[62526,62680],"yaml":true,"extradata":"MT"},{"content":"The security token that is being validated.","nodes":[{"pos":[0,43],"content":"The security token that is being validated.","nodes":[{"content":"The security token that is being validated.","pos":[0,43]}]}],"pos":[62923,62967],"yaml":true},{"content":"The message to write to the trace.","nodes":[{"pos":[0,34],"content":"The message to write to the trace.","nodes":[{"content":"The message to write to the trace.","pos":[0,34]}]}],"pos":[63035,63070],"yaml":true},{"content":"Traces the successful validation of security tokens event when tracing is enabled.","nodes":[{"pos":[0,82],"content":"Traces the successful validation of security tokens event when tracing is enabled.","nodes":[{"content":"Traces the successful validation of security tokens event when tracing is enabled.","pos":[0,82]}]}],"pos":[64476,64559],"yaml":true},{"content":"This method should be called from the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method after the token has been successfully validated.","nodes":[{"pos":[0,166],"content":"This method should be called from the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method after the token has been successfully validated.","nodes":[{"content":"This method should be called from the <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> method after the token has been successfully validated.","pos":[0,166],"source":"This method should be called from the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method after the token has been successfully validated."}]}],"pos":[64570,64737],"yaml":true,"extradata":"MT"},{"content":"The token that was validated.","nodes":[{"pos":[0,29],"content":"The token that was validated.","nodes":[{"content":"The token that was validated.","pos":[0,29]}]}],"pos":[64959,64989],"yaml":true},{"content":"When overridden in a derived class, validates the specified security token. The token must be of the type processed by the derived class.","nodes":[{"pos":[0,137],"content":"When overridden in a derived class, validates the specified security token. The token must be of the type processed by the derived class.","nodes":[{"content":"When overridden in a derived class, validates the specified security token. The token must be of the type processed by the derived class.","pos":[0,137],"nodes":[{"content":"When overridden in a derived class, validates the specified security token.","pos":[0,75]},{"content":"The token must be of the type processed by the derived class.","pos":[76,137]}]}]}],"pos":[66311,66449],"yaml":true},{"content":"By default this method throws a <xref:System.NotImplementedException> exception.  \n  \n The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method is called by the infrastructure to validate and extract the claims from the deserialized security token. These claims are returned in the collection of <xref:System.Security.Claims.ClaimsIdentity> objects returned by the method. In the typical case, this collection will contain a single identity.  \n  \n In derived classes, validation typically includes validating the intended audience specified in the token against the audience URIs specified in the <xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.AudienceRestriction%2A?displayProperty=fullName> property of the token handler configuration object specified on the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> property. These URIs are typically set in the configuration file under the [\\&lt;audienceUris\\&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/audienceuris.md) element. If the audience cannot be validated, an <xref:System.IdentityModel.Tokens.AudienceUriValidationFailedException> exception should be thrown.  \n  \n When processing the token, the issuer is typically validated by passing the issuer token to one of the <xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A> methods on the <xref:System.IdentityModel.Tokens.IssuerNameRegistry> object that is configured for the handler through the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> property. The issuer name registry is typically configured through the [\\&lt;issuerNameRegistry\\&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/issuernameregistry.md) element in the configuration file. The <xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A> returns the name of the issuer. This name should be used to set the <xref:System.Security.Claims.Claim.Issuer%2A?displayProperty=fullName> property in claims contained in the token. If the issuer name registry does not contain an entry for the issuer token, <xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A> returns `null`. In this case a <xref:System.IdentityModel.Tokens.SecurityTokenException> is typically thrown in derived classes, but this behavior is up to the designer of the class.","nodes":[{"pos":[0,80],"content":"By default this method throws a <xref:System.NotImplementedException> exception.","nodes":[{"content":"By default this method throws a <ph id=\"ph1\">&lt;xref:System.NotImplementedException&gt;</ph> exception.","pos":[0,80],"source":"By default this method throws a <xref:System.NotImplementedException> exception."}]},{"pos":[87,468],"content":"The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method is called by the infrastructure to validate and extract the claims from the deserialized security token. These claims are returned in the collection of <xref:System.Security.Claims.ClaimsIdentity> objects returned by the method. In the typical case, this collection will contain a single identity.","nodes":[{"content":"The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method is called by the infrastructure to validate and extract the claims from the deserialized security token. These claims are returned in the collection of <xref:System.Security.Claims.ClaimsIdentity> objects returned by the method. In the typical case, this collection will contain a single identity.","pos":[0,381],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> method is called by the infrastructure to validate and extract the claims from the deserialized security token.","pos":[0,188],"source":"The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method is called by the infrastructure to validate and extract the claims from the deserialized security token."},{"content":"These claims are returned in the collection of <ph id=\"ph1\">&lt;xref:System.Security.Claims.ClaimsIdentity&gt;</ph> objects returned by the method.","pos":[189,312],"source":" These claims are returned in the collection of <xref:System.Security.Claims.ClaimsIdentity> objects returned by the method."},{"content":"In the typical case, this collection will contain a single identity.","pos":[313,381]}]}]},{"pos":[475,1219],"content":"In derived classes, validation typically includes validating the intended audience specified in the token against the audience URIs specified in the <xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.AudienceRestriction%2A?displayProperty=fullName> property of the token handler configuration object specified on the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> property. These URIs are typically set in the configuration file under the [\\&lt;audienceUris\\&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/audienceuris.md) element. If the audience cannot be validated, an <xref:System.IdentityModel.Tokens.AudienceUriValidationFailedException> exception should be thrown.","nodes":[{"content":"In derived classes, validation typically includes validating the intended audience specified in the token against the audience URIs specified in the <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.AudienceRestriction%2A?displayProperty=fullName&gt;</ph> property of the token handler configuration object specified on the <ph id=\"ph2\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A&gt;</ph> property.","pos":[0,416],"source":"In derived classes, validation typically includes validating the intended audience specified in the token against the audience URIs specified in the <xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.AudienceRestriction%2A?displayProperty=fullName> property of the token handler configuration object specified on the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> property."},{"content":"These URIs are typically set in the configuration file under the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&amp;</ph>lt;audienceUris<ph id=\"ph2\">\\&amp;</ph>gt;<ept id=\"p1\">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/audienceuris.md)</ept> element.","pos":[417,604],"source":" These URIs are typically set in the configuration file under the [\\&lt;audienceUris\\&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/audienceuris.md) element."},{"content":"If the audience cannot be validated, an <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.AudienceUriValidationFailedException&gt;</ph> exception should be thrown.","pos":[605,744],"source":" If the audience cannot be validated, an <xref:System.IdentityModel.Tokens.AudienceUriValidationFailedException> exception should be thrown."}]},{"pos":[1226,2414],"content":"When processing the token, the issuer is typically validated by passing the issuer token to one of the <xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A> methods on the <xref:System.IdentityModel.Tokens.IssuerNameRegistry> object that is configured for the handler through the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> property. The issuer name registry is typically configured through the [\\&lt;issuerNameRegistry\\&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/issuernameregistry.md) element in the configuration file. The <xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A> returns the name of the issuer. This name should be used to set the <xref:System.Security.Claims.Claim.Issuer%2A?displayProperty=fullName> property in claims contained in the token. If the issuer name registry does not contain an entry for the issuer token, <xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A> returns `null`. In this case a <xref:System.IdentityModel.Tokens.SecurityTokenException> is typically thrown in derived classes, but this behavior is up to the designer of the class.","nodes":[{"content":"When processing the token, the issuer is typically validated by passing the issuer token to one of the <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A&gt;</ph> methods on the <ph id=\"ph2\">&lt;xref:System.IdentityModel.Tokens.IssuerNameRegistry&gt;</ph> object that is configured for the handler through the <ph id=\"ph3\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A&gt;</ph> property.","pos":[0,379],"source":"When processing the token, the issuer is typically validated by passing the issuer token to one of the <xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A> methods on the <xref:System.IdentityModel.Tokens.IssuerNameRegistry> object that is configured for the handler through the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> property."},{"content":"The issuer name registry is typically configured through the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&amp;</ph>lt;issuerNameRegistry<ph id=\"ph2\">\\&amp;</ph>gt;<ept id=\"p1\">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/issuernameregistry.md)</ept> element in the configuration file.","pos":[380,601],"source":" The issuer name registry is typically configured through the [\\&lt;issuerNameRegistry\\&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/issuernameregistry.md) element in the configuration file."},{"content":"The <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A&gt;</ph> returns the name of the issuer.","pos":[602,708],"source":" The <xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A> returns the name of the issuer."},{"content":"This name should be used to set the <ph id=\"ph1\">&lt;xref:System.Security.Claims.Claim.Issuer%2A?displayProperty=fullName&gt;</ph> property in claims contained in the token.","pos":[709,858],"source":" This name should be used to set the <xref:System.Security.Claims.Claim.Issuer%2A?displayProperty=fullName> property in claims contained in the token."},{"content":"If the issuer name registry does not contain an entry for the issuer token, <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A&gt;</ph> returns <ph id=\"ph2\">`null`</ph>.","pos":[859,1021],"source":" If the issuer name registry does not contain an entry for the issuer token, <xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A> returns `null`."},{"content":"In this case a <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenException&gt;</ph> is typically thrown in derived classes, but this behavior is up to the designer of the class.","pos":[1022,1188],"source":" In this case a <xref:System.IdentityModel.Tokens.SecurityTokenException> is typically thrown in derived classes, but this behavior is up to the designer of the class."}]}],"pos":[66460,68887],"yaml":true,"extradata":"MT"},{"content":"The token to validate.","nodes":[{"pos":[0,22],"content":"The token to validate.","nodes":[{"content":"The token to validate.","pos":[0,22]}]}],"pos":[72053,72076],"yaml":true},{"content":"The identities contained in the token.","nodes":[{"pos":[0,38],"content":"The identities contained in the token.","nodes":[{"content":"The identities contained in the token.","pos":[0,38]}]}],"pos":[72208,72247],"yaml":true},{"content":"When overridden in a derived class, serializes the specified key identifier clause to XML. The key identifier clause must be of the type supported by the derived class.","nodes":[{"pos":[0,168],"content":"When overridden in a derived class, serializes the specified key identifier clause to XML. The key identifier clause must be of the type supported by the derived class.","nodes":[{"content":"When overridden in a derived class, serializes the specified key identifier clause to XML. The key identifier clause must be of the type supported by the derived class.","pos":[0,168],"nodes":[{"content":"When overridden in a derived class, serializes the specified key identifier clause to XML.","pos":[0,90]},{"content":"The key identifier clause must be of the type supported by the derived class.","pos":[91,168]}]}]}],"pos":[73801,73970],"yaml":true},{"content":"By default this method throws a <xref:System.NotImplementedException> exception.  \n  \n Override this method to provide the logic to serialize a key identifier clause to XML. If you override this method, you should also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A> method.","nodes":[{"pos":[0,80],"content":"By default this method throws a <xref:System.NotImplementedException> exception.","nodes":[{"content":"By default this method throws a <ph id=\"ph1\">&lt;xref:System.NotImplementedException&gt;</ph> exception.","pos":[0,80],"source":"By default this method throws a <xref:System.NotImplementedException> exception."}]},{"pos":[87,326],"content":"Override this method to provide the logic to serialize a key identifier clause to XML. If you override this method, you should also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A> method.","nodes":[{"content":"Override this method to provide the logic to serialize a key identifier clause to XML. If you override this method, you should also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A> method.","pos":[0,239],"nodes":[{"content":"Override this method to provide the logic to serialize a key identifier clause to XML.","pos":[0,86]},{"content":"If you override this method, you should also override the <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A&gt;</ph> method.","pos":[87,239],"source":" If you override this method, you should also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A> method."}]}]}],"pos":[73981,74312],"yaml":true,"extradata":"MT"},{"content":"The XML writer.","nodes":[{"pos":[0,15],"content":"The XML writer.","nodes":[{"content":"The XML writer.","pos":[0,15]}]}],"pos":[74581,74597],"yaml":true},{"content":"The key identifier clause to serialize.","nodes":[{"pos":[0,39],"content":"The key identifier clause to serialize.","nodes":[{"content":"The key identifier clause to serialize.","pos":[0,39]}]}],"pos":[74722,74762],"yaml":true},{"content":"When overridden in a derived class, serializes the specified security token to a string. The token must be of the type processed by the derived class.","nodes":[{"pos":[0,150],"content":"When overridden in a derived class, serializes the specified security token to a string. The token must be of the type processed by the derived class.","nodes":[{"content":"When overridden in a derived class, serializes the specified security token to a string. The token must be of the type processed by the derived class.","pos":[0,150],"nodes":[{"content":"When overridden in a derived class, serializes the specified security token to a string.","pos":[0,88]},{"content":"The token must be of the type processed by the derived class.","pos":[89,150]}]}]}],"pos":[76063,76214],"yaml":true},{"content":"By default this method throws a <xref:System.NotImplementedException> exception.  \n  \n Override this method to provide the logic to serialize a security token to XML. If you override this method, you should also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A> property.","nodes":[{"pos":[0,80],"content":"By default this method throws a <xref:System.NotImplementedException> exception.","nodes":[{"content":"By default this method throws a <ph id=\"ph1\">&lt;xref:System.NotImplementedException&gt;</ph> exception.","pos":[0,80],"source":"By default this method throws a <xref:System.NotImplementedException> exception."}]},{"pos":[87,307],"content":"Override this method to provide the logic to serialize a security token to XML. If you override this method, you should also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A> property.","nodes":[{"content":"Override this method to provide the logic to serialize a security token to XML. If you override this method, you should also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A> property.","pos":[0,220],"nodes":[{"content":"Override this method to provide the logic to serialize a security token to XML.","pos":[0,79]},{"content":"If you override this method, you should also override the <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A&gt;</ph> property.","pos":[80,220],"source":" If you override this method, you should also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A> property."}]}]}],"pos":[76225,76537],"yaml":true,"extradata":"MT"},{"content":"The token to serialize.","nodes":[{"pos":[0,23],"content":"The token to serialize.","nodes":[{"content":"The token to serialize.","pos":[0,23]}]}],"pos":[76749,76773],"yaml":true},{"content":"The serialized token.","nodes":[{"pos":[0,21],"content":"The serialized token.","nodes":[{"content":"The serialized token.","pos":[0,21]}]}],"pos":[76830,76852],"yaml":true},{"content":"When overridden in a derived class, serializes the specified security token to XML. The token must be of the type processed by the derived class.","nodes":[{"pos":[0,145],"content":"When overridden in a derived class, serializes the specified security token to XML. The token must be of the type processed by the derived class.","nodes":[{"content":"When overridden in a derived class, serializes the specified security token to XML. The token must be of the type processed by the derived class.","pos":[0,145],"nodes":[{"content":"When overridden in a derived class, serializes the specified security token to XML.","pos":[0,83]},{"content":"The token must be of the type processed by the derived class.","pos":[84,145]}]}]}],"pos":[78235,78381],"yaml":true},{"content":"By default this method throws a <xref:System.NotImplementedException> exception.  \n  \n Override this method to provide the logic to serialize a security token to XML. If you override this method, you should also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A> property.","nodes":[{"pos":[0,80],"content":"By default this method throws a <xref:System.NotImplementedException> exception.","nodes":[{"content":"By default this method throws a <ph id=\"ph1\">&lt;xref:System.NotImplementedException&gt;</ph> exception.","pos":[0,80],"source":"By default this method throws a <xref:System.NotImplementedException> exception."}]},{"pos":[87,307],"content":"Override this method to provide the logic to serialize a security token to XML. If you override this method, you should also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A> property.","nodes":[{"content":"Override this method to provide the logic to serialize a security token to XML. If you override this method, you should also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A> property.","pos":[0,220],"nodes":[{"content":"Override this method to provide the logic to serialize a security token to XML.","pos":[0,79]},{"content":"If you override this method, you should also override the <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A&gt;</ph> property.","pos":[80,220],"source":" If you override this method, you should also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A> property."}]}]}],"pos":[78392,78704],"yaml":true,"extradata":"MT"},{"content":"The XML writer.","nodes":[{"pos":[0,15],"content":"The XML writer.","nodes":[{"content":"The XML writer.","pos":[0,15]}]}],"pos":[79704,79720],"yaml":true},{"content":"The token to serialize.","nodes":[{"pos":[0,23],"content":"The token to serialize.","nodes":[{"content":"The token to serialize.","pos":[0,23]}]}],"pos":[79809,79833],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler\n  commentId: T:System.IdentityModel.Tokens.SecurityTokenHandler\n  id: SecurityTokenHandler\n  children:\n  - System.IdentityModel.Tokens.SecurityTokenHandler.#ctor\n  - System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)\n  - System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.String)\n  - System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)\n  - System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken\n  - System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)\n  - System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken\n  - System.IdentityModel.Tokens.SecurityTokenHandler.Configuration\n  - System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection\n  - System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)\n  - System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)\n  - System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken(System.IdentityModel.Tokens.SecurityToken)\n  - System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers\n  - System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)\n  - System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)\n  - System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)\n  - System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)\n  - System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)\n  - System.IdentityModel.Tokens.SecurityTokenHandler.TokenType\n  - System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationFailure(System.IdentityModel.Tokens.SecurityToken,System.String)\n  - System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationSuccess(System.IdentityModel.Tokens.SecurityToken)\n  - System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)\n  - System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)\n  - System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)\n  - System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)\n  langs:\n  - csharp\n  name: SecurityTokenHandler\n  nameWithType: SecurityTokenHandler\n  fullName: System.IdentityModel.Tokens.SecurityTokenHandler\n  type: Class\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: The abstract base class for security token handlers.\n  remarks: \"The <xref:System.IdentityModel.Tokens.SecurityTokenHandler> class is the base class from which all security token handlers derive. A security token handler is responsible for:  \\n  \\n-   Validating security tokens (<xref:System.IdentityModel.Tokens.SecurityToken>) of the type it is designed to process and packaging the claims contained in the token into a <xref:System.Security.Claims.ClaimsIdentity> object.  \\n  \\n-   Serializing and deserializing security tokens of the type it is designed to process.  \\n  \\n-   Serializing and deserializing key identifier clauses (<xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause>) that refer to tokens of the type it is designed to process to and from `<wsse:SecurityTokenReference>` elements.  \\n  \\n-   Creating security tokens from a <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor> object passed by implementations of the <xref:System.IdentityModel.SecurityTokenService> class.  \\n  \\n-   Creating key identifier clauses from a security token for implementations of the <xref:System.IdentityModel.SecurityTokenService> class.  \\n  \\n Windows Identity Foundation (WIF) ships the following security token handlers out of the box:  \\n  \\n-   <xref:System.IdentityModel.Tokens.EncryptedSecurityTokenHandler>  \\n  \\n-   <xref:System.IdentityModel.Tokens.KerberosSecurityTokenHandler>  \\n  \\n-   <xref:System.IdentityModel.Services.Tokens.MachineKeySessionSecurityTokenHandler>  \\n  \\n-   <xref:System.IdentityModel.Services.Tokens.MembershipUserNameSecurityTokenHandler>  \\n  \\n-   <xref:System.IdentityModel.Tokens.RsaSecurityTokenHandler>  \\n  \\n-   <xref:System.IdentityModel.Tokens.Saml2SecurityTokenHandler>  \\n  \\n-   <xref:System.IdentityModel.Tokens.SamlSecurityTokenHandler>  \\n  \\n-   <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler>  \\n  \\n-   <xref:System.IdentityModel.Tokens.UserNameSecurityTokenHandler>  \\n  \\n-   <xref:System.IdentityModel.Tokens.WindowsUserNameSecurityTokenHandler>  \\n  \\n-   <xref:System.IdentityModel.Tokens.X509SecurityTokenHandler>  \\n  \\n Most of these classes expose additional members that implement functionality that is specific to the processing of the tokens for which the class is designed. In many cases it may be better to derive from one of these classes rather than directly from the <xref:System.IdentityModel.Tokens.SecurityTokenHandler> class.  \\n  \\n A security token handler can be added or removed from  a token handler collection by specifying the [\\\\&lt;add\\\\&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/add.md), [\\\\&lt;remove\\\\&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/remove.md), or [\\\\&lt;clear\\\\&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/clear.md) elements under the [\\\\&lt;securityTokenHandlers\\\\&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/securitytokenhandlers.md) element in a configuration file. The <xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration> object that contains the configuration settings for the handler collection can be accessed through the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> property and the handler collection that the token handler is a member of can be accessed from the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection%2A> property. You can override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration%2A> method to process any custom configuration elements that your handler takes.  \\n  \\n The <xref:System.IdentityModel.Tokens.SecurityTokenHandler> class exposes several other properties and methods. Depending on the functionality that you choose to implement, you may override some or all of these members.  \\n  \\n You must override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A> property and the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A> method to provide the WIF infrastructure with information about the type of security token that your class is designed to process.  \\n  \\n Validation, serialization, and deserialization functionality is exposed through properties or methods that indicate whether the handler can perform a specific function combined with the method or methods that implement the functionality. The following list pairs the properties or methods that indicate functionality with the methods that implement that functionality:  \\n  \\n-   The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken%2A> property and  the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method: Validates a token and packages the claims contained in the token into a <xref:System.Security.Claims.ClaimsIdentity>.  \\n  \\n-   The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A> property and the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A> methods: Token serialization.  \\n  \\n-   The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A> methods and the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A> methods: Token deserialization.  \\n  \\n-   The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A> method and the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause%2A> method: Deserializing key identifier clauses.  \\n  \\n-   The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A> method and the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause%2A> method: Serializing key identifier clauses.  \\n  \\n The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken%2A> and the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference%2A> methods are called from the pipeline in implementations of the <xref:System.IdentityModel.SecurityTokenService> class.  \\n  \\n The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken%2A> method is called by the WIF infrastructure to determine whether the specified token has already been received. By default this method returns `false`, which indicates that the token has not already been received. You can override the method and provide logic to detect replayed tokens.\"\n  example:\n  - \"The code examples in all of the <xref:System.IdentityModel.Tokens.SecurityTokenHandler> topics are taken from the `Custom Token` sample. This sample provides custom classes that enable processing of Simple Web Tokens (SWT). For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md). The following XML shows how to add the SWT token handler to the token handlers collection.  \\n  \\n```xml  \\n<system.identityModel>  \\n  <identityConfiguration saveBootstrapContext=\\\"true\\\">  \\n    <issuerTokenResolver type=\\\"SimpleWebToken.CustomIssuerTokenResolver, SimpleWebToken\\\">  \\n      <AddAudienceKeyPair  symmetricKey=\\\"wAVkldQiFypTQ+kdNdGWCYCHRcee8XmXxOvgmak8vSY=\\\" audience=\\\"http://localhost:19851/\\\" />  \\n    </issuerTokenResolver>  \\n    <issuerNameRegistry type=\\\"RelyingParty.TrustedIssuerNameRegistry, RelyingParty\\\"/>  \\n    <audienceUris>  \\n      <add value=\\\"http://localhost:19851/\\\"/>  \\n    </audienceUris>  \\n    <securityTokenHandlers>  \\n      <add type=\\\"SimpleWebToken.SimpleWebTokenHandler, SimpleWebToken\\\" />  \\n    </securityTokenHandlers>  \\n  </identityConfiguration>  \\n</system.identityModel>  \\n```\"\n  syntax:\n    content: 'public abstract class SecurityTokenHandler : System.IdentityModel.Configuration.ICustomIdentityConfiguration'\n  inheritance:\n  - System.Object\n  derivedClasses:\n  - System.IdentityModel.Tokens.EncryptedSecurityTokenHandler\n  - System.IdentityModel.Tokens.KerberosSecurityTokenHandler\n  - System.IdentityModel.Tokens.RsaSecurityTokenHandler\n  - System.IdentityModel.Tokens.Saml2SecurityTokenHandler\n  - System.IdentityModel.Tokens.SamlSecurityTokenHandler\n  - System.IdentityModel.Tokens.SessionSecurityTokenHandler\n  - System.IdentityModel.Tokens.UserNameSecurityTokenHandler\n  - System.IdentityModel.Tokens.X509SecurityTokenHandler\n  implements:\n  - System.IdentityModel.Configuration.ICustomIdentityConfiguration\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityTokenHandler.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.#ctor\n  commentId: M:System.IdentityModel.Tokens.SecurityTokenHandler.#ctor\n  id: '#ctor'\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  langs:\n  - csharp\n  name: SecurityTokenHandler()\n  nameWithType: SecurityTokenHandler.SecurityTokenHandler()\n  fullName: SecurityTokenHandler.SecurityTokenHandler()\n  type: Constructor\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Called from constructors in derived classes to initialize the <xref href=\"System.IdentityModel.Tokens.SecurityTokenHandler\"></xref> class.\n  syntax:\n    content: protected SecurityTokenHandler ();\n    parameters: []\n  overload: System.IdentityModel.Tokens.SecurityTokenHandler.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityTokenHandler.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)\n  commentId: M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)\n  id: CanReadKeyIdentifierClause(System.Xml.XmlReader)\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  langs:\n  - csharp\n  name: CanReadKeyIdentifierClause(XmlReader)\n  nameWithType: SecurityTokenHandler.CanReadKeyIdentifierClause(XmlReader)\n  fullName: SecurityTokenHandler.CanReadKeyIdentifierClause(XmlReader)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Returns a value that indicates whether the XML element referred to by the specified XML reader is a key identifier clause that can be deserialized by this instance.\n  remarks: \"The default implementation returns `false` to indicate that the key identifier clause cannot be read.  \\n  \\n A derived class checks the element that the reader is referring to in order to determine whether the instance can deserialize a key identifier clause. This is typically accomplished through a call to the <xref:System.Xml.XmlReader.IsStartElement%2A?displayProperty=fullName> method with the appropriate element and namespace strings specified. If you override <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A>, you must also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause%2A> method to provide the logic to deserialize the key identifier clause.\"\n  syntax:\n    content: public virtual bool CanReadKeyIdentifierClause (System.Xml.XmlReader reader);\n    parameters:\n    - id: reader\n      type: System.Xml.XmlReader\n      description: An XML reader positioned at the start element. The reader should not be advanced by this method.\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)\"></xref> method can read the element; otherwise, `false`. The default is `false`.'\n  overload: System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityTokenHandler.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.String)\n  commentId: M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.String)\n  id: CanReadToken(System.String)\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  langs:\n  - csharp\n  name: CanReadToken(String)\n  nameWithType: SecurityTokenHandler.CanReadToken(String)\n  fullName: SecurityTokenHandler.CanReadToken(String)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Returns a value that indicates whether the specified string can be deserialized as a token of the type processed by this instance.\n  remarks: \"The default implementation always returns `false`.  \\n  \\n If you override this method, you must also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=fullName> method to provide the logic to deserialize the token.\"\n  syntax:\n    content: public virtual bool CanReadToken (string tokenString);\n    parameters:\n    - id: tokenString\n      type: System.String\n      description: The token string to read.\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)\"></xref> method can read the element; otherwise, `false`. The default is `false`.'\n  overload: System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityTokenHandler.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)\n  commentId: M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)\n  id: CanReadToken(System.Xml.XmlReader)\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  langs:\n  - csharp\n  name: CanReadToken(XmlReader)\n  nameWithType: SecurityTokenHandler.CanReadToken(XmlReader)\n  fullName: SecurityTokenHandler.CanReadToken(XmlReader)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Returns a value that indicates whether the XML element referenced by the specified XML reader can be read as a token of the type processed by this instance.\n  remarks: \"The default implementation always returns `false`.  \\n  \\n A derived class checks the element that the reader is referring to in order to determine whether the instance can deserialize a security token. This is typically accomplished through a call to the <xref:System.Xml.XmlReader.IsStartElement%2A> method with the appropriate element and namespace strings specified. If you override <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A>, you must also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=fullName> method or the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=fullName> method to provide the logic to deserialize the key identifier clause.\"\n  example:\n  - \"The following code shows how to override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A> method to determine whether a token can be read by a handler. The code is taken from the `Custom Token` sample. This sample provides custom classes that enable processing of Simple Web Tokens (SWT). For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).  \\n  \\n [!code-csharp[WifRcCustomToken#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#1)]\"\n  syntax:\n    content: public virtual bool CanReadToken (System.Xml.XmlReader reader);\n    parameters:\n    - id: reader\n      type: System.Xml.XmlReader\n      description: An XML reader positioned at a start element. The reader should not be advanced by this method.\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)\"></xref> method can read the element; otherwise, `false`. The default is `false`.'\n  overload: System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityTokenHandler.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken\n  commentId: P:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken\n  id: CanValidateToken\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  langs:\n  - csharp\n  name: CanValidateToken\n  nameWithType: SecurityTokenHandler.CanValidateToken\n  fullName: SecurityTokenHandler.CanValidateToken\n  type: Property\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Gets a value that indicates whether the handler supports validation of security tokens.\n  remarks: To implement validation in a derived class, override this property to return `true` and override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method to implement the validation logic.\n  example:\n  - \"The following code shows how to override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken%2A> property to indicate that a custom handler can validate tokens. The code is taken from the `Custom Token` sample. This sample provides custom classes that enable processing of Simple Web Tokens (SWT). For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).  \\n  \\n [!code-csharp[WifRcCustomToken#2](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#2)]\"\n  syntax:\n    content: public virtual bool CanValidateToken { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the class is capable of validating security tokens; otherwise, `false`. The default is `false`.'\n  overload: System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityTokenHandler.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)\n  commentId: M:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)\n  id: CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  langs:\n  - csharp\n  name: CanWriteKeyIdentifierClause(SecurityKeyIdentifierClause)\n  nameWithType: SecurityTokenHandler.CanWriteKeyIdentifierClause(SecurityKeyIdentifierClause)\n  fullName: SecurityTokenHandler.CanWriteKeyIdentifierClause(SecurityKeyIdentifierClause)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Returns a value that indicates whether the specified key identifier clause can be serialized by this instance.\n  remarks: \"The default implementation always returns `false`.  \\n  \\n If you override <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A>, you must also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause%2A> method to provide the logic to serialize the key identifier clause.\"\n  syntax:\n    content: public virtual bool CanWriteKeyIdentifierClause (System.IdentityModel.Tokens.SecurityKeyIdentifierClause securityKeyIdentifierClause);\n    parameters:\n    - id: securityKeyIdentifierClause\n      type: System.IdentityModel.Tokens.SecurityKeyIdentifierClause\n      description: The key identifier clause to be checked.\n    return:\n      type: System.Boolean\n      description: '`true` if the key identifier clause can be serialized; otherwise, `false`. The default is `false`.'\n  overload: System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityTokenHandler.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken\n  commentId: P:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken\n  id: CanWriteToken\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  langs:\n  - csharp\n  name: CanWriteToken\n  nameWithType: SecurityTokenHandler.CanWriteToken\n  fullName: SecurityTokenHandler.CanWriteToken\n  type: Property\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Gets a value that indicates whether the handler can serialize security tokens.\n  remarks: To implement serialization in a derived class, override this property to return `true` and override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A> methods to implement the serialization logic.\n  example:\n  - \"The following code shows how to override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A> property to indicate that a custom handler can serialize tokens. The code is taken from the `Custom Token` sample. This sample provides custom classes that enable processing of Simple Web Tokens (SWT). For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).  \\n  \\n [!code-csharp[WifRcCustomToken#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#3)]\"\n  syntax:\n    content: public virtual bool CanWriteToken { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the class is capable of serializing tokens; otherwise `false`. The default is `false`.'\n  overload: System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityTokenHandler.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.Configuration\n  commentId: P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration\n  id: Configuration\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  langs:\n  - csharp\n  name: Configuration\n  nameWithType: SecurityTokenHandler.Configuration\n  fullName: SecurityTokenHandler.Configuration\n  type: Property\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Gets or sets the <xref href=\"System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration\"></xref> object that provides configuration for the current instance.\n  remarks: \"The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> property is typically set by the configuration infrastructure from the [\\\\&lt;securityTokenHandlerConfiguration\\\\&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/securitytokenhandlerconfiguration.md) element in the configuration file during application start up.  \\n  \\n In derived classes, you use the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> property to access configuration settings; for example, the issuer name registry to use in the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method can be accessed from the <xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.IssuerNameRegistry%2A?displayProperty=fullName> property of the configuration object.\"\n  syntax:\n    content: public System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration Configuration { get; set; }\n    return:\n      type: System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration\n      description: The configuration object for the current instance.\n  overload: System.IdentityModel.Tokens.SecurityTokenHandler.Configuration*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityTokenHandler.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection\n  commentId: P:System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection\n  id: ContainingCollection\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  langs:\n  - csharp\n  name: ContainingCollection\n  nameWithType: SecurityTokenHandler.ContainingCollection\n  fullName: SecurityTokenHandler.ContainingCollection\n  type: Property\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Gets the token handler collection that contains the current instance.\n  remarks: When the token handler is added to a <xref:System.IdentityModel.Tokens.SecurityTokenHandlerCollection> instance, this property is automatically set.\n  syntax:\n    content: public System.IdentityModel.Tokens.SecurityTokenHandlerCollection ContainingCollection { get; }\n    return:\n      type: System.IdentityModel.Tokens.SecurityTokenHandlerCollection\n      description: The token handler collection that contains the current instance.\n  overload: System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityTokenHandler.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)\n  commentId: M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)\n  id: CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  langs:\n  - csharp\n  name: CreateSecurityTokenReference(SecurityToken, Boolean)\n  nameWithType: SecurityTokenHandler.CreateSecurityTokenReference(SecurityToken, Boolean)\n  fullName: SecurityTokenHandler.CreateSecurityTokenReference(SecurityToken, Boolean)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: When overridden in a derived class, creates the security token reference for tokens processed by that class. This method is typically called by a security token service (STS).\n  remarks: \"By default this method throws a <xref:System.NotImplementedException> exception.  \\n  \\n Derived classes override this method to return a key identifier clause (<xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause>) that can be used to create a `<wsse:SecurityTokenReference>` element for the specified token.  \\n  \\n Called from implementations of the <xref:System.IdentityModel.SecurityTokenService> class.  \\n  \\n Typically, a <xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause> does not need to be used, other than when a custom security token service is created. When a security token service returns a security token, the issued security token contains references to attached and unattached security tokens. Attached references refer to security tokens that are contained within the security header of a SOAP message and unattached references reference security tokens that are not included within the security header of a SOAP message. These references typically affirm the authenticity of the issued security token.\"\n  example:\n  - \"The following code shows how to override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference%2A> method to create a key identifier clause from the specified token. The code is taken from the `Custom Token` sample. This sample provides custom classes that enable processing of Simple Web Tokens (SWT). For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).  \\n  \\n [!code-csharp[WifRcCustomToken#5](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#5)]\"\n  syntax:\n    content: public virtual System.IdentityModel.Tokens.SecurityKeyIdentifierClause CreateSecurityTokenReference (System.IdentityModel.Tokens.SecurityToken token, bool attached);\n    parameters:\n    - id: token\n      type: System.IdentityModel.Tokens.SecurityToken\n      description: The token for which the reference is to be created.\n    - id: attached\n      type: System.Boolean\n      description: '`true` if an attached reference should be created; `false` if an unattached reference should be created.'\n    return:\n      type: System.IdentityModel.Tokens.SecurityKeyIdentifierClause\n      description: A key identifier clause that references the specified token.\n  overload: System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityTokenHandler.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)\n  commentId: M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)\n  id: CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  langs:\n  - csharp\n  name: CreateToken(SecurityTokenDescriptor)\n  nameWithType: SecurityTokenHandler.CreateToken(SecurityTokenDescriptor)\n  fullName: SecurityTokenHandler.CreateToken(SecurityTokenDescriptor)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: When overridden in a derived class, creates a security token using the specified token descriptor. This method is called by a security token service (STS).\n  remarks: \"By default this method throws a <xref:System.NotImplementedException> exception.  \\n  \\n Called from implementations of the <xref:System.IdentityModel.SecurityTokenService> class.\"\n  example:\n  - \"The following code shows how to override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken%2A> method to create and return a token from a token descriptor. The code is taken from the `Custom Token` sample. This sample provides custom classes that enable processing of Simple Web Tokens (SWT). For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).  \\n  \\n [!code-csharp[WifRcCustomToken#4](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#4)]\"\n  syntax:\n    content: public virtual System.IdentityModel.Tokens.SecurityToken CreateToken (System.IdentityModel.Tokens.SecurityTokenDescriptor tokenDescriptor);\n    parameters:\n    - id: tokenDescriptor\n      type: System.IdentityModel.Tokens.SecurityTokenDescriptor\n      description: The security token descriptor from which the token is to be created. Properties of the token descriptor are set before this method is called.\n    return:\n      type: System.IdentityModel.Tokens.SecurityToken\n      description: A security token that matches the properties of the token descriptor.\n  overload: System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityTokenHandler.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken(System.IdentityModel.Tokens.SecurityToken)\n  commentId: M:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken(System.IdentityModel.Tokens.SecurityToken)\n  id: DetectReplayedToken(System.IdentityModel.Tokens.SecurityToken)\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  langs:\n  - csharp\n  name: DetectReplayedToken(SecurityToken)\n  nameWithType: SecurityTokenHandler.DetectReplayedToken(SecurityToken)\n  fullName: SecurityTokenHandler.DetectReplayedToken(SecurityToken)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: When overridden in a derived class, throws an exception if the specified token is detected as being replayed.\n  remarks: \"The default implementation does nothing.  \\n  \\n Derived classes should throw a <xref:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException> if the token has already been used.  \\n  \\n Windows Identity Foundation (WIF) provides the <xref:System.IdentityModel.Tokens.TokenReplayCache> class from which replay caches may be derived and the [\\\\&lt;tokenReplayCache\\\\&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/tokenreplaycache.md) configuration element, which can be used to configure the replay cache used by token handlers in an application; however, the exact implementation of the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken%2A> method is up to the designer of the derived class.\"\n  syntax:\n    content: protected virtual void DetectReplayedToken (System.IdentityModel.Tokens.SecurityToken token);\n    parameters:\n    - id: token\n      type: System.IdentityModel.Tokens.SecurityToken\n      description: The token to check for replay.\n  overload: System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityTokenHandler.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers\n  commentId: M:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers\n  id: GetTokenTypeIdentifiers\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  langs:\n  - csharp\n  name: GetTokenTypeIdentifiers()\n  nameWithType: SecurityTokenHandler.GetTokenTypeIdentifiers()\n  fullName: SecurityTokenHandler.GetTokenTypeIdentifiers()\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: When overridden in a derived class, returns the set of URIs that are used in requests to identify a token of the type processed by the derived class.\n  remarks: The <xref:System.Type> of the token processed by the current instance is accessed through the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A> property. The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A> method returns the set of acceptable identifiers that can be used in messages to refer to the token type. For example, the URI value used in the `<wst:TokenType>` element under the `<wst:RequestSecurityToken>` element to request a specific kind of token (represented by the <xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.TokenType%2A?displayProperty=fullName> property in the object model).\n  example:\n  - \"The following code shows how to override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A> method to return the token type identifiers for a custom token. The code is taken from the `Custom Token` sample. This sample provides custom classes that enable processing of Simple Web Tokens (SWT). For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).  \\n  \\n [!code-csharp[WifRcCustomToken#17](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#17)]  \\n[!code-csharp[WifRcCustomToken#6](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#6)]\"\n  syntax:\n    content: public abstract string[] GetTokenTypeIdentifiers ();\n    parameters: []\n    return:\n      type: System.String[]\n      description: The set of URIs that identify the token type that this handler supports.\n  overload: System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityTokenHandler.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)\n  commentId: M:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)\n  id: LoadCustomConfiguration(System.Xml.XmlNodeList)\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  langs:\n  - csharp\n  name: LoadCustomConfiguration(XmlNodeList)\n  nameWithType: SecurityTokenHandler.LoadCustomConfiguration(XmlNodeList)\n  fullName: SecurityTokenHandler.LoadCustomConfiguration(XmlNodeList)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: When overridden in a derived class, loads custom configuration from XML.\n  remarks: \"The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration%2A> method is called by the configuration infrastructure. When this method is called, the `nodelist` will contain the top-level child elements of the token handler’s [\\\\&lt;add\\\\&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/add.md) element from the configuration file. Each of these may, in turn, contain attributes or child elements depending on the configuration schema you define for your derived class.  \\n  \\n The default implementation throws a <xref:System.NotImplementedException>. Override this method in your derived class to enable initialization of your security token handler from a configuration file.\"\n  syntax:\n    content: public virtual void LoadCustomConfiguration (System.Xml.XmlNodeList nodelist);\n    parameters:\n    - id: nodelist\n      type: System.Xml.XmlNodeList\n      description: The configuration XML elements. Each node in the list is of type <xref href=\"System.Xml.XmlElement\"></xref>.\n  overload: System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityTokenHandler.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)\n  commentId: M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)\n  id: ReadKeyIdentifierClause(System.Xml.XmlReader)\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  langs:\n  - csharp\n  name: ReadKeyIdentifierClause(XmlReader)\n  nameWithType: SecurityTokenHandler.ReadKeyIdentifierClause(XmlReader)\n  fullName: SecurityTokenHandler.ReadKeyIdentifierClause(XmlReader)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: When overridden in a derived class, deserializes the XML referenced by the specified XML reader to a key identifier clause that references a token processed by the derived class.\n  remarks: \"By default this method throws a <xref:System.NotImplementedException> exception.  \\n  \\n Override this method to provide the logic to deserialize a key identifier clause from XML. If you override this method, you should also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A?displayProperty=fullName> method.\"\n  syntax:\n    content: public virtual System.IdentityModel.Tokens.SecurityKeyIdentifierClause ReadKeyIdentifierClause (System.Xml.XmlReader reader);\n    parameters:\n    - id: reader\n      type: System.Xml.XmlReader\n      description: An XML reader positioned at the start element of the XML to be deserialized into the key identifier clause.\n    return:\n      type: System.IdentityModel.Tokens.SecurityKeyIdentifierClause\n      description: The key identifier clause that was deserialized from the XML.\n  overload: System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityTokenHandler.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)\n  commentId: M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)\n  id: ReadToken(System.String)\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  langs:\n  - csharp\n  name: ReadToken(String)\n  nameWithType: SecurityTokenHandler.ReadToken(String)\n  fullName: SecurityTokenHandler.ReadToken(String)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: When overridden in a derived class, deserializes the specified string to a token of the type processed by the derived class.\n  remarks: \"> [!IMPORTANT]\\n>  Calling this method with untrusted data is a security risk. Call this method only with trusted data. For more information, see [Untrusted Data Security Risks](http://go.microsoft.com/fwlink/?LinkId=330378).  \\n  \\n By default this method throws a <xref:System.NotImplementedException> exception.  \\n  \\n Override this method to provide functionality that can deserialize a security token from a string. If you override, this method, you should also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=fullName> method.\"\n  syntax:\n    content: public virtual System.IdentityModel.Tokens.SecurityToken ReadToken (string tokenString);\n    parameters:\n    - id: tokenString\n      type: System.String\n      description: The string to be deserialized.\n    return:\n      type: System.IdentityModel.Tokens.SecurityToken\n      description: The security token that was deserialized from the specified string.\n  overload: System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityTokenHandler.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)\n  commentId: M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)\n  id: ReadToken(System.Xml.XmlReader)\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  langs:\n  - csharp\n  name: ReadToken(XmlReader)\n  nameWithType: SecurityTokenHandler.ReadToken(XmlReader)\n  fullName: SecurityTokenHandler.ReadToken(XmlReader)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: When overridden in a derived class, deserializes the XML referenced by the specified XML reader to a token of the type processed by the derived class.\n  remarks: \"> [!IMPORTANT]\\n>  Calling this method with untrusted data is a security risk. Call this method only with trusted data. For more information, see [Untrusted Data Security Risks](http://go.microsoft.com/fwlink/?LinkId=330378).  \\n  \\n By default this method throws a <xref:System.NotImplementedException> exception.  \\n  \\n Override this method to provide the logic to deserialize a security token from XML. If you override this method, you should also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=fullName> method. Typically, in derived classes, if the method cannot deserialize the token from the referenced XML, it throws an <xref:System.Xml.XmlException>.\"\n  example:\n  - \"The following code shows how to override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A> method to read a custom token from the specified XML reader. The code is taken from the `Custom Token` sample. This sample provides custom classes that enable processing of Simple Web Tokens (SWT). For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).  \\n  \\n [!code-csharp[WifRcCustomToken#7](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#7)]  \\n[!code-csharp[WifRcCustomToken#8](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#8)]  \\n[!code-csharp[WifRcCustomToken#14](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#14)]\"\n  syntax:\n    content: public virtual System.IdentityModel.Tokens.SecurityToken ReadToken (System.Xml.XmlReader reader);\n    parameters:\n    - id: reader\n      type: System.Xml.XmlReader\n      description: An XML reader positioned at the start element of the token.\n    return:\n      type: System.IdentityModel.Tokens.SecurityToken\n      description: The security token that was deserialized from the XML.\n  overload: System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityTokenHandler.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)\n  commentId: M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)\n  id: ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  langs:\n  - csharp\n  name: ReadToken(XmlReader, SecurityTokenResolver)\n  nameWithType: SecurityTokenHandler.ReadToken(XmlReader, SecurityTokenResolver)\n  fullName: SecurityTokenHandler.ReadToken(XmlReader, SecurityTokenResolver)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: When overridden in a derived class, deserializes the XML referenced by the specified XML reader to a token of the type processed by the derived class by using the specified token resolver.\n  remarks: \"> [!IMPORTANT]\\n>  Calling this method with untrusted data is a security risk. Call this method only with trusted data. For more information, see [Untrusted Data Security Risks](http://go.microsoft.com/fwlink/?LinkId=330378).  \\n  \\n The default implementation ignores the `tokenResolver` parameter and delegates the call to the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=fullName> method.  \\n  \\n Override this method to provide the logic to deserialize a security token from XML. If you override this method, you should also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=fullName> method. Typically, in derived classes, if the method cannot deserialize the token from the referenced XML, it throws an <xref:System.Xml.XmlException>.\"\n  syntax:\n    content: public virtual System.IdentityModel.Tokens.SecurityToken ReadToken (System.Xml.XmlReader reader, System.IdentityModel.Selectors.SecurityTokenResolver tokenResolver);\n    parameters:\n    - id: reader\n      type: System.Xml.XmlReader\n      description: An XML reader positioned at the start element of the token.\n    - id: tokenResolver\n      type: System.IdentityModel.Selectors.SecurityTokenResolver\n      description: A token resolver that contains out-of-band and cached tokens.\n    return:\n      type: System.IdentityModel.Tokens.SecurityToken\n      description: The security token that was deserialized from the XML.\n  overload: System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityTokenHandler.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.TokenType\n  commentId: P:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType\n  id: TokenType\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  langs:\n  - csharp\n  name: TokenType\n  nameWithType: SecurityTokenHandler.TokenType\n  fullName: SecurityTokenHandler.TokenType\n  type: Property\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: When overridden in a derived class, gets the type of the security token that is processed by this instance.\n  remarks: You must override this property in derived classes and return the <xref:System.Type> of the security token (<xref:System.IdentityModel.Tokens.SecurityToken>) that is processed by the derived class.\n  example:\n  - \"The following code shows how to override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A> property to return the <xref:System.Type> of the security tokens that are processed by a custom handler. The code is taken from the `Custom Token` sample. This sample provides custom classes that enable processing of Simple Web Tokens (SWT). For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).  \\n  \\n [!code-csharp[WifRcCustomToken#18](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#18)]\"\n  syntax:\n    content: public abstract Type TokenType { get; }\n    return:\n      type: System.Type\n      description: The type of the security token that is processed by this instance.\n  overload: System.IdentityModel.Tokens.SecurityTokenHandler.TokenType*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityTokenHandler.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationFailure(System.IdentityModel.Tokens.SecurityToken,System.String)\n  commentId: M:System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationFailure(System.IdentityModel.Tokens.SecurityToken,System.String)\n  id: TraceTokenValidationFailure(System.IdentityModel.Tokens.SecurityToken,System.String)\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  langs:\n  - csharp\n  name: TraceTokenValidationFailure(SecurityToken, String)\n  nameWithType: SecurityTokenHandler.TraceTokenValidationFailure(SecurityToken, String)\n  fullName: SecurityTokenHandler.TraceTokenValidationFailure(SecurityToken, String)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Traces the failure event during the validation of security tokens when tracing is enabled.\n  remarks: This method should be called from the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method when validation of the token fails.\n  syntax:\n    content: protected void TraceTokenValidationFailure (System.IdentityModel.Tokens.SecurityToken token, string errorMessage);\n    parameters:\n    - id: token\n      type: System.IdentityModel.Tokens.SecurityToken\n      description: The security token that is being validated.\n    - id: errorMessage\n      type: System.String\n      description: The message to write to the trace.\n  overload: System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationFailure*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityTokenHandler.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationSuccess(System.IdentityModel.Tokens.SecurityToken)\n  commentId: M:System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationSuccess(System.IdentityModel.Tokens.SecurityToken)\n  id: TraceTokenValidationSuccess(System.IdentityModel.Tokens.SecurityToken)\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  langs:\n  - csharp\n  name: TraceTokenValidationSuccess(SecurityToken)\n  nameWithType: SecurityTokenHandler.TraceTokenValidationSuccess(SecurityToken)\n  fullName: SecurityTokenHandler.TraceTokenValidationSuccess(SecurityToken)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Traces the successful validation of security tokens event when tracing is enabled.\n  remarks: This method should be called from the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method after the token has been successfully validated.\n  syntax:\n    content: protected void TraceTokenValidationSuccess (System.IdentityModel.Tokens.SecurityToken token);\n    parameters:\n    - id: token\n      type: System.IdentityModel.Tokens.SecurityToken\n      description: The token that was validated.\n  overload: System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationSuccess*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityTokenHandler.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)\n  commentId: M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)\n  id: ValidateToken(System.IdentityModel.Tokens.SecurityToken)\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  langs:\n  - csharp\n  name: ValidateToken(SecurityToken)\n  nameWithType: SecurityTokenHandler.ValidateToken(SecurityToken)\n  fullName: SecurityTokenHandler.ValidateToken(SecurityToken)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: When overridden in a derived class, validates the specified security token. The token must be of the type processed by the derived class.\n  remarks: \"By default this method throws a <xref:System.NotImplementedException> exception.  \\n  \\n The <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method is called by the infrastructure to validate and extract the claims from the deserialized security token. These claims are returned in the collection of <xref:System.Security.Claims.ClaimsIdentity> objects returned by the method. In the typical case, this collection will contain a single identity.  \\n  \\n In derived classes, validation typically includes validating the intended audience specified in the token against the audience URIs specified in the <xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.AudienceRestriction%2A?displayProperty=fullName> property of the token handler configuration object specified on the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> property. These URIs are typically set in the configuration file under the [\\\\&lt;audienceUris\\\\&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/audienceuris.md) element. If the audience cannot be validated, an <xref:System.IdentityModel.Tokens.AudienceUriValidationFailedException> exception should be thrown.  \\n  \\n When processing the token, the issuer is typically validated by passing the issuer token to one of the <xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A> methods on the <xref:System.IdentityModel.Tokens.IssuerNameRegistry> object that is configured for the handler through the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> property. The issuer name registry is typically configured through the [\\\\&lt;issuerNameRegistry\\\\&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/issuernameregistry.md) element in the configuration file. The <xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A> returns the name of the issuer. This name should be used to set the <xref:System.Security.Claims.Claim.Issuer%2A?displayProperty=fullName> property in claims contained in the token. If the issuer name registry does not contain an entry for the issuer token, <xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A> returns `null`. In this case a <xref:System.IdentityModel.Tokens.SecurityTokenException> is typically thrown in derived classes, but this behavior is up to the designer of the class.\"\n  example:\n  - \"The following code shows an override of the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method for a security token handler that processes simple web tokens (SWT). The code is taken from the `CustomToken` sample. For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).  \\n  \\n [!code-csharp[WifRcCustomToken#9](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#9)]  \\n  \\n The following code shows `CreateClaims` method that is invoked from the override of the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method in the previous example. This method returns a <xref:System.Security.Claims.ClaimsIdentity> object that is created from the claims in the token. The code is taken from the `CustomToken` sample. For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).  \\n  \\n [!code-csharp[WifRcCustomToken#15](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#15)]  \\n  \\n The following code shows `ValidateSignature` method that is invoked from the override of the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method in the simple web token handler. This method validates the signature on the token by using the configured <xref:System.IdentityModel.Tokens.IssuerTokenResolver>. The code is taken from the `CustomToken` sample. For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).  \\n  \\n [!code-csharp[WifRcCustomToken#12](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#12)]  \\n[!code-csharp[WifRcCustomToken#11](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#11)]  \\n  \\n The following code shows `ValidateAudience` method that is invoked from the override of the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method in the simple web token handler. This method validates the audience contained in the token against the audience URIs that were specified in configuration. The code is taken from the `CustomToken` sample. For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).  \\n  \\n [!code-csharp[WifRcCustomToken#13](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#13)]\"\n  syntax:\n    content: public virtual System.Collections.ObjectModel.ReadOnlyCollection<System.Security.Claims.ClaimsIdentity> ValidateToken (System.IdentityModel.Tokens.SecurityToken token);\n    parameters:\n    - id: token\n      type: System.IdentityModel.Tokens.SecurityToken\n      description: The token to validate.\n    return:\n      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Security.Claims.ClaimsIdentity}\n      description: The identities contained in the token.\n  overload: System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityTokenHandler.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)\n  commentId: M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)\n  id: WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  langs:\n  - csharp\n  name: WriteKeyIdentifierClause(XmlWriter, SecurityKeyIdentifierClause)\n  nameWithType: SecurityTokenHandler.WriteKeyIdentifierClause(XmlWriter, SecurityKeyIdentifierClause)\n  fullName: SecurityTokenHandler.WriteKeyIdentifierClause(XmlWriter, SecurityKeyIdentifierClause)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: When overridden in a derived class, serializes the specified key identifier clause to XML. The key identifier clause must be of the type supported by the derived class.\n  remarks: \"By default this method throws a <xref:System.NotImplementedException> exception.  \\n  \\n Override this method to provide the logic to serialize a key identifier clause to XML. If you override this method, you should also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A> method.\"\n  syntax:\n    content: public virtual void WriteKeyIdentifierClause (System.Xml.XmlWriter writer, System.IdentityModel.Tokens.SecurityKeyIdentifierClause securityKeyIdentifierClause);\n    parameters:\n    - id: writer\n      type: System.Xml.XmlWriter\n      description: The XML writer.\n    - id: securityKeyIdentifierClause\n      type: System.IdentityModel.Tokens.SecurityKeyIdentifierClause\n      description: The key identifier clause to serialize.\n  overload: System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityTokenHandler.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)\n  commentId: M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)\n  id: WriteToken(System.IdentityModel.Tokens.SecurityToken)\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  langs:\n  - csharp\n  name: WriteToken(SecurityToken)\n  nameWithType: SecurityTokenHandler.WriteToken(SecurityToken)\n  fullName: SecurityTokenHandler.WriteToken(SecurityToken)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: When overridden in a derived class, serializes the specified security token to a string. The token must be of the type processed by the derived class.\n  remarks: \"By default this method throws a <xref:System.NotImplementedException> exception.  \\n  \\n Override this method to provide the logic to serialize a security token to XML. If you override this method, you should also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A> property.\"\n  syntax:\n    content: public virtual string WriteToken (System.IdentityModel.Tokens.SecurityToken token);\n    parameters:\n    - id: token\n      type: System.IdentityModel.Tokens.SecurityToken\n      description: The token to serialize.\n    return:\n      type: System.String\n      description: The serialized token.\n  overload: System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityTokenHandler.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)\n  commentId: M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)\n  id: WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  langs:\n  - csharp\n  name: WriteToken(XmlWriter, SecurityToken)\n  nameWithType: SecurityTokenHandler.WriteToken(XmlWriter, SecurityToken)\n  fullName: SecurityTokenHandler.WriteToken(XmlWriter, SecurityToken)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: When overridden in a derived class, serializes the specified security token to XML. The token must be of the type processed by the derived class.\n  remarks: \"By default this method throws a <xref:System.NotImplementedException> exception.  \\n  \\n Override this method to provide the logic to serialize a security token to XML. If you override this method, you should also override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A> property.\"\n  example:\n  - \"The following code shows how to override the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A> method to serialize a custom token. The code is taken from the `Custom Token` sample. This sample provides custom classes that enable processing of Simple Web Tokens (SWT). For information about this sample and other samples available for WIF and where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).  \\n  \\n [!code-csharp[WifRcCustomToken#10](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#10)]  \\n[!code-csharp[WifRcCustomToken#11](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#11)]\"\n  syntax:\n    content: public virtual void WriteToken (System.Xml.XmlWriter writer, System.IdentityModel.Tokens.SecurityToken token);\n    parameters:\n    - id: writer\n      type: System.Xml.XmlWriter\n      description: The XML writer.\n    - id: token\n      type: System.IdentityModel.Tokens.SecurityToken\n      description: The token to serialize.\n  overload: System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityTokenHandler.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.#ctor\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  isExternal: false\n  name: SecurityTokenHandler()\n  nameWithType: SecurityTokenHandler.SecurityTokenHandler()\n  fullName: SecurityTokenHandler.SecurityTokenHandler()\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  isExternal: false\n  name: CanReadKeyIdentifierClause(XmlReader)\n  nameWithType: SecurityTokenHandler.CanReadKeyIdentifierClause(XmlReader)\n  fullName: SecurityTokenHandler.CanReadKeyIdentifierClause(XmlReader)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Xml.XmlReader\n  parent: System.Xml\n  isExternal: false\n  name: XmlReader\n  nameWithType: XmlReader\n  fullName: System.Xml.XmlReader\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.String)\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  isExternal: false\n  name: CanReadToken(String)\n  nameWithType: SecurityTokenHandler.CanReadToken(String)\n  fullName: SecurityTokenHandler.CanReadToken(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  isExternal: false\n  name: CanReadToken(XmlReader)\n  nameWithType: SecurityTokenHandler.CanReadToken(XmlReader)\n  fullName: SecurityTokenHandler.CanReadToken(XmlReader)\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  isExternal: false\n  name: CanValidateToken\n  nameWithType: SecurityTokenHandler.CanValidateToken\n  fullName: SecurityTokenHandler.CanValidateToken\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  isExternal: false\n  name: CanWriteKeyIdentifierClause(SecurityKeyIdentifierClause)\n  nameWithType: SecurityTokenHandler.CanWriteKeyIdentifierClause(SecurityKeyIdentifierClause)\n  fullName: SecurityTokenHandler.CanWriteKeyIdentifierClause(SecurityKeyIdentifierClause)\n- uid: System.IdentityModel.Tokens.SecurityKeyIdentifierClause\n  parent: System.IdentityModel.Tokens\n  isExternal: false\n  name: SecurityKeyIdentifierClause\n  nameWithType: SecurityKeyIdentifierClause\n  fullName: System.IdentityModel.Tokens.SecurityKeyIdentifierClause\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  isExternal: false\n  name: CanWriteToken\n  nameWithType: SecurityTokenHandler.CanWriteToken\n  fullName: SecurityTokenHandler.CanWriteToken\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.Configuration\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  isExternal: false\n  name: Configuration\n  nameWithType: SecurityTokenHandler.Configuration\n  fullName: SecurityTokenHandler.Configuration\n- uid: System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration\n  parent: System.IdentityModel.Tokens\n  isExternal: false\n  name: SecurityTokenHandlerConfiguration\n  nameWithType: SecurityTokenHandlerConfiguration\n  fullName: System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  isExternal: false\n  name: ContainingCollection\n  nameWithType: SecurityTokenHandler.ContainingCollection\n  fullName: SecurityTokenHandler.ContainingCollection\n- uid: System.IdentityModel.Tokens.SecurityTokenHandlerCollection\n  parent: System.IdentityModel.Tokens\n  isExternal: false\n  name: SecurityTokenHandlerCollection\n  nameWithType: SecurityTokenHandlerCollection\n  fullName: System.IdentityModel.Tokens.SecurityTokenHandlerCollection\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  isExternal: false\n  name: CreateSecurityTokenReference(SecurityToken, Boolean)\n  nameWithType: SecurityTokenHandler.CreateSecurityTokenReference(SecurityToken, Boolean)\n  fullName: SecurityTokenHandler.CreateSecurityTokenReference(SecurityToken, Boolean)\n- uid: System.IdentityModel.Tokens.SecurityToken\n  parent: System.IdentityModel.Tokens\n  isExternal: false\n  name: SecurityToken\n  nameWithType: SecurityToken\n  fullName: System.IdentityModel.Tokens.SecurityToken\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  isExternal: false\n  name: CreateToken(SecurityTokenDescriptor)\n  nameWithType: SecurityTokenHandler.CreateToken(SecurityTokenDescriptor)\n  fullName: SecurityTokenHandler.CreateToken(SecurityTokenDescriptor)\n- uid: System.IdentityModel.Tokens.SecurityTokenDescriptor\n  parent: System.IdentityModel.Tokens\n  isExternal: false\n  name: SecurityTokenDescriptor\n  nameWithType: SecurityTokenDescriptor\n  fullName: System.IdentityModel.Tokens.SecurityTokenDescriptor\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken(System.IdentityModel.Tokens.SecurityToken)\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  isExternal: false\n  name: DetectReplayedToken(SecurityToken)\n  nameWithType: SecurityTokenHandler.DetectReplayedToken(SecurityToken)\n  fullName: SecurityTokenHandler.DetectReplayedToken(SecurityToken)\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  isExternal: false\n  name: GetTokenTypeIdentifiers()\n  nameWithType: SecurityTokenHandler.GetTokenTypeIdentifiers()\n  fullName: SecurityTokenHandler.GetTokenTypeIdentifiers()\n- uid: System.String[]\n  parent: System\n  isExternal: false\n  name: String[]\n  nameWithType: String[]\n  fullName: System.String[]\n  spec.csharp:\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: System.String\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  isExternal: false\n  name: LoadCustomConfiguration(XmlNodeList)\n  nameWithType: SecurityTokenHandler.LoadCustomConfiguration(XmlNodeList)\n  fullName: SecurityTokenHandler.LoadCustomConfiguration(XmlNodeList)\n- uid: System.Xml.XmlNodeList\n  parent: System.Xml\n  isExternal: false\n  name: XmlNodeList\n  nameWithType: XmlNodeList\n  fullName: System.Xml.XmlNodeList\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  isExternal: false\n  name: ReadKeyIdentifierClause(XmlReader)\n  nameWithType: SecurityTokenHandler.ReadKeyIdentifierClause(XmlReader)\n  fullName: SecurityTokenHandler.ReadKeyIdentifierClause(XmlReader)\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  isExternal: false\n  name: ReadToken(String)\n  nameWithType: SecurityTokenHandler.ReadToken(String)\n  fullName: SecurityTokenHandler.ReadToken(String)\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  isExternal: false\n  name: ReadToken(XmlReader)\n  nameWithType: SecurityTokenHandler.ReadToken(XmlReader)\n  fullName: SecurityTokenHandler.ReadToken(XmlReader)\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  isExternal: false\n  name: ReadToken(XmlReader, SecurityTokenResolver)\n  nameWithType: SecurityTokenHandler.ReadToken(XmlReader, SecurityTokenResolver)\n  fullName: SecurityTokenHandler.ReadToken(XmlReader, SecurityTokenResolver)\n- uid: System.IdentityModel.Selectors.SecurityTokenResolver\n  parent: System.IdentityModel.Selectors\n  isExternal: false\n  name: SecurityTokenResolver\n  nameWithType: SecurityTokenResolver\n  fullName: System.IdentityModel.Selectors.SecurityTokenResolver\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.TokenType\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  isExternal: false\n  name: TokenType\n  nameWithType: SecurityTokenHandler.TokenType\n  fullName: SecurityTokenHandler.TokenType\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationFailure(System.IdentityModel.Tokens.SecurityToken,System.String)\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  isExternal: false\n  name: TraceTokenValidationFailure(SecurityToken, String)\n  nameWithType: SecurityTokenHandler.TraceTokenValidationFailure(SecurityToken, String)\n  fullName: SecurityTokenHandler.TraceTokenValidationFailure(SecurityToken, String)\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationSuccess(System.IdentityModel.Tokens.SecurityToken)\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  isExternal: false\n  name: TraceTokenValidationSuccess(SecurityToken)\n  nameWithType: SecurityTokenHandler.TraceTokenValidationSuccess(SecurityToken)\n  fullName: SecurityTokenHandler.TraceTokenValidationSuccess(SecurityToken)\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  isExternal: false\n  name: ValidateToken(SecurityToken)\n  nameWithType: SecurityTokenHandler.ValidateToken(SecurityToken)\n  fullName: SecurityTokenHandler.ValidateToken(SecurityToken)\n- uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n  name: ReadOnlyCollection<T>\n  nameWithType: ReadOnlyCollection<T>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>\n- uid: System.Security.Claims.ClaimsIdentity\n  name: ClaimsIdentity\n  nameWithType: ClaimsIdentity\n  fullName: System.Security.Claims.ClaimsIdentity\n- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Security.Claims.ClaimsIdentity}\n  parent: System.Collections.ObjectModel\n  isExternal: false\n  name: ReadOnlyCollection<ClaimsIdentity>\n  nameWithType: ReadOnlyCollection<ClaimsIdentity>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Security.Claims.ClaimsIdentity>\n  spec.csharp:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    nameWithType: ReadOnlyCollection\n    fullName: System.Collections.ObjectModel.ReadOnlyCollection\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Security.Claims.ClaimsIdentity\n    name: ClaimsIdentity\n    nameWithType: ClaimsIdentity\n    fullName: System.Security.Claims.ClaimsIdentity\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  isExternal: false\n  name: WriteKeyIdentifierClause(XmlWriter, SecurityKeyIdentifierClause)\n  nameWithType: SecurityTokenHandler.WriteKeyIdentifierClause(XmlWriter, SecurityKeyIdentifierClause)\n  fullName: SecurityTokenHandler.WriteKeyIdentifierClause(XmlWriter, SecurityKeyIdentifierClause)\n- uid: System.Xml.XmlWriter\n  parent: System.Xml\n  isExternal: false\n  name: XmlWriter\n  nameWithType: XmlWriter\n  fullName: System.Xml.XmlWriter\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  isExternal: false\n  name: WriteToken(SecurityToken)\n  nameWithType: SecurityTokenHandler.WriteToken(SecurityToken)\n  fullName: SecurityTokenHandler.WriteToken(SecurityToken)\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  isExternal: false\n  name: WriteToken(XmlWriter, SecurityToken)\n  nameWithType: SecurityTokenHandler.WriteToken(XmlWriter, SecurityToken)\n  fullName: SecurityTokenHandler.WriteToken(XmlWriter, SecurityToken)\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.#ctor*\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  isExternal: false\n  name: SecurityTokenHandler\n  nameWithType: SecurityTokenHandler.SecurityTokenHandler\n  fullName: SecurityTokenHandler.SecurityTokenHandler\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityTokenHandler.xml\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause*\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  isExternal: false\n  name: CanReadKeyIdentifierClause\n  nameWithType: SecurityTokenHandler.CanReadKeyIdentifierClause\n  fullName: SecurityTokenHandler.CanReadKeyIdentifierClause\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityTokenHandler.xml\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken*\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  isExternal: false\n  name: CanReadToken\n  nameWithType: SecurityTokenHandler.CanReadToken\n  fullName: SecurityTokenHandler.CanReadToken\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityTokenHandler.xml\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken*\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  isExternal: false\n  name: CanValidateToken\n  nameWithType: SecurityTokenHandler.CanValidateToken\n  fullName: SecurityTokenHandler.CanValidateToken\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityTokenHandler.xml\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause*\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  isExternal: false\n  name: CanWriteKeyIdentifierClause\n  nameWithType: SecurityTokenHandler.CanWriteKeyIdentifierClause\n  fullName: SecurityTokenHandler.CanWriteKeyIdentifierClause\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityTokenHandler.xml\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken*\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  isExternal: false\n  name: CanWriteToken\n  nameWithType: SecurityTokenHandler.CanWriteToken\n  fullName: SecurityTokenHandler.CanWriteToken\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityTokenHandler.xml\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.Configuration*\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  isExternal: false\n  name: Configuration\n  nameWithType: SecurityTokenHandler.Configuration\n  fullName: SecurityTokenHandler.Configuration\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityTokenHandler.xml\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection*\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  isExternal: false\n  name: ContainingCollection\n  nameWithType: SecurityTokenHandler.ContainingCollection\n  fullName: SecurityTokenHandler.ContainingCollection\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityTokenHandler.xml\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference*\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  isExternal: false\n  name: CreateSecurityTokenReference\n  nameWithType: SecurityTokenHandler.CreateSecurityTokenReference\n  fullName: SecurityTokenHandler.CreateSecurityTokenReference\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityTokenHandler.xml\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken*\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  isExternal: false\n  name: CreateToken\n  nameWithType: SecurityTokenHandler.CreateToken\n  fullName: SecurityTokenHandler.CreateToken\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityTokenHandler.xml\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken*\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  isExternal: false\n  name: DetectReplayedToken\n  nameWithType: SecurityTokenHandler.DetectReplayedToken\n  fullName: SecurityTokenHandler.DetectReplayedToken\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityTokenHandler.xml\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers*\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  isExternal: false\n  name: GetTokenTypeIdentifiers\n  nameWithType: SecurityTokenHandler.GetTokenTypeIdentifiers\n  fullName: SecurityTokenHandler.GetTokenTypeIdentifiers\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityTokenHandler.xml\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration*\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  isExternal: false\n  name: LoadCustomConfiguration\n  nameWithType: SecurityTokenHandler.LoadCustomConfiguration\n  fullName: SecurityTokenHandler.LoadCustomConfiguration\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityTokenHandler.xml\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause*\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  isExternal: false\n  name: ReadKeyIdentifierClause\n  nameWithType: SecurityTokenHandler.ReadKeyIdentifierClause\n  fullName: SecurityTokenHandler.ReadKeyIdentifierClause\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityTokenHandler.xml\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken*\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  isExternal: false\n  name: ReadToken\n  nameWithType: SecurityTokenHandler.ReadToken\n  fullName: SecurityTokenHandler.ReadToken\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityTokenHandler.xml\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.TokenType*\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  isExternal: false\n  name: TokenType\n  nameWithType: SecurityTokenHandler.TokenType\n  fullName: SecurityTokenHandler.TokenType\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityTokenHandler.xml\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationFailure*\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  isExternal: false\n  name: TraceTokenValidationFailure\n  nameWithType: SecurityTokenHandler.TraceTokenValidationFailure\n  fullName: SecurityTokenHandler.TraceTokenValidationFailure\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityTokenHandler.xml\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationSuccess*\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  isExternal: false\n  name: TraceTokenValidationSuccess\n  nameWithType: SecurityTokenHandler.TraceTokenValidationSuccess\n  fullName: SecurityTokenHandler.TraceTokenValidationSuccess\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityTokenHandler.xml\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken*\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  isExternal: false\n  name: ValidateToken\n  nameWithType: SecurityTokenHandler.ValidateToken\n  fullName: SecurityTokenHandler.ValidateToken\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityTokenHandler.xml\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause*\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  isExternal: false\n  name: WriteKeyIdentifierClause\n  nameWithType: SecurityTokenHandler.WriteKeyIdentifierClause\n  fullName: SecurityTokenHandler.WriteKeyIdentifierClause\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityTokenHandler.xml\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken*\n  parent: System.IdentityModel.Tokens.SecurityTokenHandler\n  isExternal: false\n  name: WriteToken\n  nameWithType: SecurityTokenHandler.WriteToken\n  fullName: SecurityTokenHandler.WriteToken\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SecurityTokenHandler.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.IdentityModel.Configuration.ICustomIdentityConfiguration\n  parent: System.IdentityModel.Configuration\n  isExternal: false\n  name: ICustomIdentityConfiguration\n  nameWithType: ICustomIdentityConfiguration\n  fullName: System.IdentityModel.Configuration.ICustomIdentityConfiguration\n"}