{"nodes":[{"content":"Provides an iterator that supports the following operations: moving forward one position by calling <code>operator--</code>, moving backward one position by calling <code>operator++</code>, accessing an element by using <code>operator[]</code>, and accessing an element by using pointer arithmetic. The element accessed by the iterator cannot be modified.","nodes":[{"pos":[0,355],"content":"Provides an iterator that supports the following operations: moving forward one position by calling <code>operator--</code>, moving backward one position by calling <code>operator++</code>, accessing an element by using <code>operator[]</code>, and accessing an element by using pointer arithmetic. The element accessed by the iterator cannot be modified.","nodes":[{"content":"Provides an iterator that supports the following operations: moving forward one position by calling <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">operator--</ph><ept id=\"p1\">&lt;/code&gt;</ept>, moving backward one position by calling <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">operator++</ph><ept id=\"p2\">&lt;/code&gt;</ept>, accessing an element by using <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">operator[]</ph><ept id=\"p3\">&lt;/code&gt;</ept>, and accessing an element by using pointer arithmetic.","pos":[0,298],"source":"Provides an iterator that supports the following operations: moving forward one position by calling <code>operator--</code>, moving backward one position by calling <code>operator++</code>, accessing an element by using <code>operator[]</code>, and accessing an element by using pointer arithmetic."},{"content":"The element accessed by the iterator cannot be modified.","pos":[299,355]}]}],"pos":[5588,5946],"yaml":true},{"content":"[!INCLUDE[unnamed_parm](~/includes/unnamed-parm-md.md)]","nodes":[],"pos":[5957,6015],"yaml":true,"extradata":"MT"},{"content":"[!INCLUDE[cpp_iter_arg](~/includes/cpp-iter-arg-md.md)]","nodes":[],"pos":[6215,6273],"yaml":true},{"content":"Allocates and initializes a new <xref href=\"Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\"></xref> object.","nodes":[{"pos":[0,128],"content":"Allocates and initializes a new <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\"&gt;&lt;/xref&gt;</ph> object.","source":"Allocates and initializes a new <xref href=\"Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\"></xref> object."}],"pos":[7839,7968],"yaml":true},{"content":"Allocates and initializes a new <xref href=\"Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\"></xref> object from an existing <xref href=\"Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1\"></xref> object.","nodes":[{"pos":[0,230],"content":"Allocates and initializes a new <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\"&gt;&lt;/xref&gt;</ph> object from an existing <ph id=\"ph2\">&lt;xref href=\"Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1\"&gt;&lt;/xref&gt;</ph> object.","source":"Allocates and initializes a new <xref href=\"Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\"></xref> object from an existing <xref href=\"Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1\"></xref> object."}],"pos":[11426,11657],"yaml":true},{"content":"An existing <xref href=\"Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1\"></xref> object to be copied to the current container.","nodes":[{"pos":[0,135],"content":"An existing <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1\"&gt;&lt;/xref&gt;</ph> object to be copied to the current container.","source":"An existing <xref href=\"Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1\"></xref> object to be copied to the current container."}],"pos":[11912,12048],"yaml":true},{"content":"Gets the underlying base iterator for the <xref href=\"Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\"></xref> object.","nodes":[{"pos":[0,138],"content":"Gets the underlying base iterator for the <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\"&gt;&lt;/xref&gt;</ph> object.","source":"Gets the underlying base iterator for the <xref href=\"Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\"></xref> object."}],"pos":[14993,15132],"yaml":true},{"content":"The underlying base iterator for the <xref href=\"Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\"></xref> object.","nodes":[{"pos":[0,133],"content":"The underlying base iterator for the <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\"&gt;&lt;/xref&gt;</ph> object.","source":"The underlying base iterator for the <xref href=\"Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\"></xref> object."}],"pos":[15353,15487],"yaml":true},{"content":"Creates a copy of the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\"></xref> object.","nodes":[{"pos":[0,126],"content":"Creates a copy of the current <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\"&gt;&lt;/xref&gt;</ph> object.","source":"Creates a copy of the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\"></xref> object."}],"pos":[16636,16763],"yaml":true},{"content":"A copy of the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\"></xref> object.","nodes":[{"pos":[0,118],"content":"A copy of the current <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\"&gt;&lt;/xref&gt;</ph> object.","source":"A copy of the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\"></xref> object."}],"pos":[16894,17013],"yaml":true},{"content":"Gets the container that the iterator is traversing.","nodes":[{"pos":[0,51],"content":"Gets the container that the iterator is traversing.","nodes":[{"content":"Gets the container that the iterator is traversing.","pos":[0,51]}]}],"pos":[18187,18239],"yaml":true},{"content":"The container that the iterator is traversing.","nodes":[{"pos":[0,46],"content":"The container that the iterator is traversing.","nodes":[{"content":"The container that the iterator is traversing.","pos":[0,46]}]}],"pos":[18374,18421],"yaml":true},{"content":"Determines the distance between the element that the current iterator is pointing to and the element that the given iterator is pointing to.","nodes":[{"pos":[0,140],"content":"Determines the distance between the element that the current iterator is pointing to and the element that the given iterator is pointing to.","nodes":[{"content":"Determines the distance between the element that the current iterator is pointing to and the element that the given iterator is pointing to.","pos":[0,140]}]}],"pos":[21651,21792],"yaml":true},{"content":"A valid iterator that points to the same container as the current iterator.","nodes":[{"pos":[0,75],"content":"A valid iterator that points to the same container as the current iterator.","nodes":[{"content":"A valid iterator that points to the same container as the current iterator.","pos":[0,75]}]}],"pos":[22037,22113],"yaml":true},{"content":"The distance, in number of elements, between the element that the current iterator is pointing to and the element that <code>_Right</code> is pointing to. This number is negative if <code>_Right</code> points to an element that is before the element that the current iterator points to.","nodes":[{"pos":[0,286],"content":"The distance, in number of elements, between the element that the current iterator is pointing to and the element that <code>_Right</code> is pointing to. This number is negative if <code>_Right</code> points to an element that is before the element that the current iterator points to.","nodes":[{"content":"The distance, in number of elements, between the element that the current iterator is pointing to and the element that <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">_Right</ph><ept id=\"p1\">&lt;/code&gt;</ept> is pointing to.","pos":[0,154],"source":"The distance, in number of elements, between the element that the current iterator is pointing to and the element that <code>_Right</code> is pointing to."},{"content":"This number is negative if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">_Right</ph><ept id=\"p1\">&lt;/code&gt;</ept> points to an element that is before the element that the current iterator points to.","pos":[155,286],"source":" This number is negative if <code>_Right</code> points to an element that is before the element that the current iterator points to."}]}],"pos":[22169,22456],"yaml":true},{"content":"Determines whether the given <xref href=\"Microsoft.VisualC.StlClr.Generic.IInputIterator`1\"></xref> object is the same as the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\"></xref> object.","nodes":[{"pos":[0,230],"content":"Determines whether the given <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualC.StlClr.Generic.IInputIterator`1\"&gt;&lt;/xref&gt;</ph> object is the same as the current <ph id=\"ph2\">&lt;xref href=\"Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\"&gt;&lt;/xref&gt;</ph> object.","source":"Determines whether the given <xref href=\"Microsoft.VisualC.StlClr.Generic.IInputIterator`1\"></xref> object is the same as the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\"></xref> object."}],"pos":[23852,24083],"yaml":true},{"content":"The <xref href=\"Microsoft.VisualC.StlClr.Generic.IInputIterator`1\"></xref> object to compare with the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\"></xref> object.","nodes":[{"pos":[0,206],"content":"The <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualC.StlClr.Generic.IInputIterator`1\"&gt;&lt;/xref&gt;</ph> object to compare with the current <ph id=\"ph2\">&lt;xref href=\"Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\"&gt;&lt;/xref&gt;</ph> object.","source":"The <xref href=\"Microsoft.VisualC.StlClr.Generic.IInputIterator`1\"></xref> object to compare with the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\"></xref> object."}],"pos":[24315,24522],"yaml":true},{"content":"`true` if the two iterators are the same object; otherwise, `false`.","nodes":[{"pos":[0,68],"content":"<ph id=\"ph1\">`true`</ph> if the two iterators are the same object; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the two iterators are the same object; otherwise, `false`."}],"pos":[24580,24651],"yaml":true},{"content":"Accesses the element at the given position in the container.","nodes":[{"pos":[0,60],"content":"Accesses the element at the given position in the container.","nodes":[{"content":"Accesses the element at the given position in the container.","pos":[0,60]}]}],"pos":[27651,27712],"yaml":true},{"content":"The position of the element to access.","nodes":[{"pos":[0,38],"content":"The position of the element to access.","nodes":[{"content":"The position of the element to access.","pos":[0,38]}]}],"pos":[27848,27887],"yaml":true},{"content":"The element at the given position in the container.","nodes":[{"pos":[0,51],"content":"The element at the given position in the container.","nodes":[{"content":"The element at the given position in the container.","pos":[0,51]}]}],"pos":[27938,27990],"yaml":true},{"content":"Determines whether the current iterator is pointing to an element in the container that is before the element that the given iterator points to.","nodes":[{"pos":[0,144],"content":"Determines whether the current iterator is pointing to an element in the container that is before the element that the given iterator points to.","nodes":[{"content":"Determines whether the current iterator is pointing to an element in the container that is before the element that the given iterator points to.","pos":[0,144]}]}],"pos":[31232,31377],"yaml":true},{"content":"A valid iterator pointing to the same container as the current iterator.","nodes":[{"pos":[0,72],"content":"A valid iterator pointing to the same container as the current iterator.","nodes":[{"content":"A valid iterator pointing to the same container as the current iterator.","pos":[0,72]}]}],"pos":[31624,31697],"yaml":true},{"content":"`true` if the current iterator is pointing to an element that comes before the element that <code>_Right</code> is pointing to; otherwise, `false`.","nodes":[{"pos":[0,147],"content":"<ph id=\"ph1\">`true`</ph> if the current iterator is pointing to an element that comes before the element that <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">_Right</ph><ept id=\"p1\">&lt;/code&gt;</ept> is pointing to; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the current iterator is pointing to an element that comes before the element that <code>_Right</code> is pointing to; otherwise, `false`."}],"pos":[31755,31905],"yaml":true},{"content":"Moves the iterator by the given number of elements.","nodes":[{"pos":[0,51],"content":"Moves the iterator by the given number of elements.","nodes":[{"content":"Moves the iterator by the given number of elements.","pos":[0,51]}]}],"pos":[33110,33162],"yaml":true},{"content":"The number of elements to traverse. To move the iterator forward, specify a negative number. To move the iterator backward, use a positive number.","nodes":[{"pos":[0,146],"content":"The number of elements to traverse. To move the iterator forward, specify a negative number. To move the iterator backward, use a positive number.","nodes":[{"content":"The number of elements to traverse. To move the iterator forward, specify a negative number. To move the iterator backward, use a positive number.","pos":[0,146],"nodes":[{"content":"The number of elements to traverse.","pos":[0,35]},{"content":"To move the iterator forward, specify a negative number.","pos":[36,92]},{"content":"To move the iterator backward, use a positive number.","pos":[93,146]}]}]}],"pos":[33302,33449],"yaml":true},{"content":"The actual number of elements traversed. This number will differ from <code>_Offset</code> if the beginning or end of the container is reached before iterating the desired number of elements.","nodes":[{"pos":[0,191],"content":"The actual number of elements traversed. This number will differ from <code>_Offset</code> if the beginning or end of the container is reached before iterating the desired number of elements.","nodes":[{"content":"The actual number of elements traversed.","pos":[0,40]},{"content":"This number will differ from <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">_Offset</ph><ept id=\"p1\">&lt;/code&gt;</ept> if the beginning or end of the container is reached before iterating the desired number of elements.","pos":[41,191],"source":" This number will differ from <code>_Offset</code> if the beginning or end of the container is reached before iterating the desired number of elements."}]}],"pos":[33505,33697],"yaml":true},{"content":"Increments the reverse iterator to the next position in the underlying container, or to the first position in front of the beginning of container if the container has been completely traversed.","nodes":[{"pos":[0,193],"content":"Increments the reverse iterator to the next position in the underlying container, or to the first position in front of the beginning of container if the container has been completely traversed.","nodes":[{"content":"Increments the reverse iterator to the next position in the underlying container, or to the first position in front of the beginning of container if the container has been completely traversed.","pos":[0,193]}]}],"pos":[34840,35034],"yaml":true},{"content":"Increments the reverse iterator by the given number of elements. The integer parameter is specified on the right side of the addition operator.","nodes":[{"pos":[0,143],"content":"Increments the reverse iterator by the given number of elements. The integer parameter is specified on the right side of the addition operator.","nodes":[{"content":"Increments the reverse iterator by the given number of elements. The integer parameter is specified on the right side of the addition operator.","pos":[0,143],"nodes":[{"content":"Increments the reverse iterator by the given number of elements.","pos":[0,64]},{"content":"The integer parameter is specified on the right side of the addition operator.","pos":[65,143]}]}]}],"pos":[36688,36832],"yaml":true},{"content":"The equivalent method for this operator is <xref:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator%601.Add%28Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator%7B%600%7D%40%2CSystem.Int32%29?displayProperty=fullName>","nodes":[{"pos":[0,247],"content":"The equivalent method for this operator is <xref:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator%601.Add%28Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator%7B%600%7D%40%2CSystem.Int32%29?displayProperty=fullName>","nodes":[{"content":"The equivalent method for this operator is <ph id=\"ph1\">&lt;xref:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator%601.Add%28Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator%7B%600%7D%40%2CSystem.Int32%29?displayProperty=fullName&gt;</ph>","pos":[0,247],"source":"The equivalent method for this operator is <xref:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator%601.Add%28Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator%7B%600%7D%40%2CSystem.Int32%29?displayProperty=fullName>"}]}],"pos":[36843,37091],"yaml":true,"extradata":"MT"},{"content":"The number of elements to increment.","nodes":[{"pos":[0,36],"content":"The number of elements to increment.","nodes":[{"content":"The number of elements to increment.","pos":[0,36]}]}],"pos":[37476,37513],"yaml":true},{"content":"An iterator.","nodes":[{"pos":[0,12],"content":"An iterator.","nodes":[{"content":"An iterator.","pos":[0,12]}]}],"pos":[37620,37633],"yaml":true},{"content":"Decrements the reverse iterator by one element. This is the prefix version of the decrement operator.","nodes":[{"pos":[0,101],"content":"Decrements the reverse iterator by one element. This is the prefix version of the decrement operator.","nodes":[{"content":"Decrements the reverse iterator by one element. This is the prefix version of the decrement operator.","pos":[0,101],"nodes":[{"content":"Decrements the reverse iterator by one element.","pos":[0,47]},{"content":"This is the prefix version of the decrement operator.","pos":[48,101]}]}]}],"pos":[45574,45676],"yaml":true},{"content":"An iterator.","nodes":[{"pos":[0,12],"content":"An iterator.","nodes":[{"content":"An iterator.","pos":[0,12]}]}],"pos":[46096,46109],"yaml":true},{"content":"Decrements the reverse iterator by one element. This is the postfix version of the decrement operator.","nodes":[{"pos":[0,102],"content":"Decrements the reverse iterator by one element. This is the postfix version of the decrement operator.","nodes":[{"content":"Decrements the reverse iterator by one element. This is the postfix version of the decrement operator.","pos":[0,102],"nodes":[{"content":"Decrements the reverse iterator by one element.","pos":[0,47]},{"content":"This is the postfix version of the decrement operator.","pos":[48,102]}]}]}],"pos":[47706,47809],"yaml":true},{"content":"An iterator.","nodes":[{"pos":[0,12],"content":"An iterator.","nodes":[{"content":"An iterator.","pos":[0,12]}]}],"pos":[48299,48312],"yaml":true},{"content":"Increments the reverse iterator by one element. This is the prefix version of the increment operator.","nodes":[{"pos":[0,101],"content":"Increments the reverse iterator by one element. This is the prefix version of the increment operator.","nodes":[{"content":"Increments the reverse iterator by one element. This is the prefix version of the increment operator.","pos":[0,101],"nodes":[{"content":"Increments the reverse iterator by one element.","pos":[0,47]},{"content":"This is the prefix version of the increment operator.","pos":[48,101]}]}]}],"pos":[57262,57364],"yaml":true},{"content":"An iterator.","nodes":[{"pos":[0,12],"content":"An iterator.","nodes":[{"content":"An iterator.","pos":[0,12]}]}],"pos":[57784,57797],"yaml":true},{"content":"Increments the reverse iterator by one element. This is the postfix version of the increment operator.","nodes":[{"pos":[0,102],"content":"Increments the reverse iterator by one element. This is the postfix version of the increment operator.","nodes":[{"content":"Increments the reverse iterator by one element. This is the postfix version of the increment operator.","pos":[0,102],"nodes":[{"content":"Increments the reverse iterator by one element.","pos":[0,47]},{"content":"This is the postfix version of the increment operator.","pos":[48,102]}]}]}],"pos":[59394,59497],"yaml":true},{"content":"An iterator.","nodes":[{"pos":[0,12],"content":"An iterator.","nodes":[{"content":"An iterator.","pos":[0,12]}]}],"pos":[59987,60000],"yaml":true},{"content":"Determines the difference between two iterators.","nodes":[{"pos":[0,48],"content":"Determines the difference between two iterators.","nodes":[{"content":"Determines the difference between two iterators.","pos":[0,48]}]}],"pos":[71418,71467],"yaml":true},{"content":"The equivalent method for this operator is <xref:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator%601.Subtract%28Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator%7B%600%7D%29?displayProperty=fullName>","nodes":[{"pos":[0,223],"content":"The equivalent method for this operator is <xref:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator%601.Subtract%28Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator%7B%600%7D%29?displayProperty=fullName>","nodes":[{"content":"The equivalent method for this operator is <ph id=\"ph1\">&lt;xref:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator%601.Subtract%28Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator%7B%600%7D%29?displayProperty=fullName&gt;</ph>","pos":[0,223],"source":"The equivalent method for this operator is <xref:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator%601.Subtract%28Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator%7B%600%7D%29?displayProperty=fullName>"}]}],"pos":[71478,71702],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1\"></xref> to be subtracted from the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\"></xref> object.","nodes":[{"pos":[0,212],"content":"The <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1\"&gt;&lt;/xref&gt;</ph> to be subtracted from the current <ph id=\"ph2\">&lt;xref href=\"Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\"&gt;&lt;/xref&gt;</ph> object.","source":"The <xref href=\"Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1\"></xref> to be subtracted from the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\"></xref> object."}],"pos":[72084,72297],"yaml":true},{"content":"The difference (number of elements) between the two iterators.","nodes":[{"pos":[0,62],"content":"The difference (number of elements) between the two iterators.","nodes":[{"content":"The difference (number of elements) between the two iterators.","pos":[0,62]}]}],"pos":[72353,72416],"yaml":true},{"content":"Decrements the iterator by the given number of elements. The integer parameter is specified on the right side of the subtraction operator.","nodes":[{"pos":[0,138],"content":"Decrements the iterator by the given number of elements. The integer parameter is specified on the right side of the subtraction operator.","nodes":[{"content":"Decrements the iterator by the given number of elements. The integer parameter is specified on the right side of the subtraction operator.","pos":[0,138],"nodes":[{"content":"Decrements the iterator by the given number of elements.","pos":[0,56]},{"content":"The integer parameter is specified on the right side of the subtraction operator.","pos":[57,138]}]}]}],"pos":[74098,74237],"yaml":true},{"content":"The equivalent method for this operator is <xref:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator%601.Subtract%28Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator%7B%600%7D%40%2CSystem.Int32%29?displayProperty=fullName>","nodes":[{"pos":[0,252],"content":"The equivalent method for this operator is <xref:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator%601.Subtract%28Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator%7B%600%7D%40%2CSystem.Int32%29?displayProperty=fullName>","nodes":[{"content":"The equivalent method for this operator is <ph id=\"ph1\">&lt;xref:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator%601.Subtract%28Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator%7B%600%7D%40%2CSystem.Int32%29?displayProperty=fullName&gt;</ph>","pos":[0,252],"source":"The equivalent method for this operator is <xref:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator%601.Subtract%28Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator%7B%600%7D%40%2CSystem.Int32%29?displayProperty=fullName>"}]}],"pos":[74248,74501],"yaml":true,"extradata":"MT"},{"content":"The number of elements to decrement.","nodes":[{"pos":[0,36],"content":"The number of elements to decrement.","nodes":[{"content":"The number of elements to decrement.","pos":[0,36]}]}],"pos":[74889,74926],"yaml":true},{"content":"An iterator.","nodes":[{"pos":[0,12],"content":"An iterator.","nodes":[{"content":"An iterator.","pos":[0,12]}]}],"pos":[75033,75046],"yaml":true},{"content":"Positions the iterator to the element immediately after the current element.","nodes":[{"pos":[0,76],"content":"Positions the iterator to the element immediately after the current element.","nodes":[{"content":"Positions the iterator to the element immediately after the current element.","pos":[0,76]}]}],"pos":[76199,76276],"yaml":true},{"content":"Determines whether the iterator is valid and can be safely used to traverse the underlying container.","nodes":[{"pos":[0,101],"content":"Determines whether the iterator is valid and can be safely used to traverse the underlying container.","nodes":[{"content":"Determines whether the iterator is valid and can be safely used to traverse the underlying container.","pos":[0,101]}]}],"pos":[77496,77598],"yaml":true},{"content":"`true` if the iterator is valid and safe to use; otherwise, `false`.","nodes":[{"pos":[0,68],"content":"<ph id=\"ph1\">`true`</ph> if the iterator is valid and safe to use; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the iterator is valid and safe to use; otherwise, `false`."}],"pos":[77728,77799],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  commentId: T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  id: ConstReverseRandomAccessIterator`1\n  children:\n  - Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor\n  - Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator)\n  - Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})\n  - Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator)\n  - Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.base\n  - Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.Clone\n  - Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.container\n  - Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator)\n  - Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})\n  - Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})\n  - Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator)\n  - Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.Item(System.Int32)\n  - Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator)\n  - Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})\n  - Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.move(System.Int32)\n  - Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.next\n  - Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)\n  - Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator)\n  - Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator)\n  - Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator)\n  - Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@)\n  - Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)\n  - Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator)\n  - Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator)\n  - Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator)\n  - Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Implicit\n  - Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@)\n  - Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)\n  - Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator)\n  - Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator)\n  - Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator)\n  - Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator)\n  - Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator)\n  - Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})\n  - Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)\n  - Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.prev\n  - Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.valid\n  langs:\n  - csharp\n  name: ConstReverseRandomAccessIterator<TValue>\n  nameWithType: ConstReverseRandomAccessIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator<TValue>\n  type: Class\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: 'Provides an iterator that supports the following operations: moving forward one position by calling <code>operator--</code>, moving backward one position by calling <code>operator++</code>, accessing an element by using <code>operator[]</code>, and accessing an element by using pointer arithmetic. The element accessed by the iterator cannot be modified.'\n  remarks: '[!INCLUDE[unnamed_parm](~/includes/unnamed-parm-md.md)]'\n  syntax:\n    content: 'public class ConstReverseRandomAccessIterator<TValue> : Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator<TValue>'\n    typeParameters:\n    - id: TValue\n      description: '[!INCLUDE[cpp_iter_arg](~/includes/cpp-iter-arg-md.md)]'\n  inheritance:\n  - System.Object\n  implements:\n  - Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{TValue}\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor\n  id: '#ctor'\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  langs:\n  - csharp\n  name: ConstReverseRandomAccessIterator<TValue>()\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.ConstReverseRandomAccessIterator<TValue>()\n  fullName: ConstReverseRandomAccessIterator<TValue>.ConstReverseRandomAccessIterator<TValue>()\n  type: Constructor\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Allocates and initializes a new <xref href=\"Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\"></xref> object.\n  syntax:\n    content: public ConstReverseRandomAccessIterator ();\n    parameters: []\n  overload: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)\n  id: '#ctor(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator)'\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  langs:\n  - csharp\n  name: ConstReverseRandomAccessIterator<TValue>(ConstReverseRandomAccessIterator)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.ConstReverseRandomAccessIterator<TValue>(ConstReverseRandomAccessIterator)\n  fullName: ConstReverseRandomAccessIterator<TValue>.ConstReverseRandomAccessIterator<TValue>(ConstReverseRandomAccessIterator)\n  type: Constructor\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: public ConstReverseRandomAccessIterator (Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator\n      description: ''\n  overload: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})\n  id: '#ctor(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})'\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  langs:\n  - csharp\n  name: ConstReverseRandomAccessIterator<TValue>(IRandomAccessIterator<TValue>)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.ConstReverseRandomAccessIterator<TValue>(IRandomAccessIterator<TValue>)\n  fullName: ConstReverseRandomAccessIterator<TValue>.ConstReverseRandomAccessIterator<TValue>(IRandomAccessIterator<TValue>)\n  type: Constructor\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Allocates and initializes a new <xref href=\"Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\"></xref> object from an existing <xref href=\"Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1\"></xref> object.\n  syntax:\n    content: public ConstReverseRandomAccessIterator (Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator<TValue> _Iter);\n    parameters:\n    - id: _Iter\n      type: Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1\n      description: An existing <xref href=\"Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1\"></xref> object to be copied to the current container.\n  overload: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)\n  id: '#ctor(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator)'\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  langs:\n  - csharp\n  name: ConstReverseRandomAccessIterator<TValue>(ReverseRandomAccessIterator)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.ConstReverseRandomAccessIterator<TValue>(ReverseRandomAccessIterator)\n  fullName: ConstReverseRandomAccessIterator<TValue>.ConstReverseRandomAccessIterator<TValue>(ReverseRandomAccessIterator)\n  type: Constructor\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: public ConstReverseRandomAccessIterator (Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator _Iter);\n    parameters:\n    - id: _Iter\n      type: Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator\n      description: ''\n  overload: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.base\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.base\n  id: base\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  langs:\n  - csharp\n  name: base()\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.base()\n  fullName: ConstReverseRandomAccessIterator<TValue>.base()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Gets the underlying base iterator for the <xref href=\"Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\"></xref> object.\n  syntax:\n    content: public Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator<TValue> base ();\n    parameters: []\n    return:\n      type: Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1\n      description: The underlying base iterator for the <xref href=\"Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\"></xref> object.\n  overload: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.base*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.Clone\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.Clone\n  id: Clone\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  langs:\n  - csharp\n  name: Clone()\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.Clone()\n  fullName: ConstReverseRandomAccessIterator<TValue>.Clone()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Creates a copy of the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\"></xref> object.\n  syntax:\n    content: public virtual object Clone ();\n    parameters: []\n    return:\n      type: System.Object\n      description: A copy of the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\"></xref> object.\n  overload: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.Clone*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.container\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.container\n  id: container\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  langs:\n  - csharp\n  name: container()\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.container()\n  fullName: ConstReverseRandomAccessIterator<TValue>.container()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Gets the container that the iterator is traversing.\n  syntax:\n    content: public virtual object container ();\n    parameters: []\n    return:\n      type: System.Object\n      description: The container that the iterator is traversing.\n  overload: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.container*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)\n  id: distance(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  langs:\n  - csharp\n  name: distance(ConstReverseRandomAccessIterator)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.distance(ConstReverseRandomAccessIterator)\n  fullName: ConstReverseRandomAccessIterator<TValue>.distance(ConstReverseRandomAccessIterator)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: public int distance (Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator\n      description: ''\n    return:\n      type: System.Int32\n      description: ''\n  overload: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.distance*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})\n  id: distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  langs:\n  - csharp\n  name: distance(IRandomAccessIterator<TValue>)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.distance(IRandomAccessIterator<TValue>)\n  fullName: ConstReverseRandomAccessIterator<TValue>.distance(IRandomAccessIterator<TValue>)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Determines the distance between the element that the current iterator is pointing to and the element that the given iterator is pointing to.\n  syntax:\n    content: public virtual int distance (Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator<TValue> _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1\n      description: A valid iterator that points to the same container as the current iterator.\n    return:\n      type: System.Int32\n      description: The distance, in number of elements, between the element that the current iterator is pointing to and the element that <code>_Right</code> is pointing to. This number is negative if <code>_Right</code> points to an element that is before the element that the current iterator points to.\n  overload: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.distance*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})\n  id: equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  langs:\n  - csharp\n  name: equal_to(IInputIterator<TValue>)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.equal_to(IInputIterator<TValue>)\n  fullName: ConstReverseRandomAccessIterator<TValue>.equal_to(IInputIterator<TValue>)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Determines whether the given <xref href=\"Microsoft.VisualC.StlClr.Generic.IInputIterator`1\"></xref> object is the same as the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\"></xref> object.\n  syntax:\n    content: public virtual bool equal_to (Microsoft.VisualC.StlClr.Generic.IInputIterator<TValue> _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.Generic.IInputIterator`1\n      description: The <xref href=\"Microsoft.VisualC.StlClr.Generic.IInputIterator`1\"></xref> object to compare with the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\"></xref> object.\n    return:\n      type: System.Boolean\n      description: '`true` if the two iterators are the same object; otherwise, `false`.'\n  overload: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.equal_to*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)\n  id: equal_to(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  langs:\n  - csharp\n  name: equal_to(ConstReverseRandomAccessIterator)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.equal_to(ConstReverseRandomAccessIterator)\n  fullName: ConstReverseRandomAccessIterator<TValue>.equal_to(ConstReverseRandomAccessIterator)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: public bool equal_to (Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator\n      description: ''\n    return:\n      type: System.Boolean\n      description: ''\n  overload: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.equal_to*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.Item(System.Int32)\n  commentId: P:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  langs:\n  - csharp\n  name: Item(Int32)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.Item(Int32)\n  fullName: ConstReverseRandomAccessIterator<TValue>.Item(Int32)\n  type: Property\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Accesses the element at the given position in the container.\n  syntax:\n    content: public TValue this[int _Pos] { get; }\n    parameters:\n    - id: _Pos\n      type: System.Int32\n      description: The position of the element to access.\n    return:\n      type: TValue@\n      description: The element at the given position in the container.\n  overload: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.Item*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)\n  id: less_than(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  langs:\n  - csharp\n  name: less_than(ConstReverseRandomAccessIterator)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.less_than(ConstReverseRandomAccessIterator)\n  fullName: ConstReverseRandomAccessIterator<TValue>.less_than(ConstReverseRandomAccessIterator)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: public bool less_than (Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator\n      description: ''\n    return:\n      type: System.Boolean\n      description: ''\n  overload: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.less_than*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})\n  id: less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  langs:\n  - csharp\n  name: less_than(IRandomAccessIterator<TValue>)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.less_than(IRandomAccessIterator<TValue>)\n  fullName: ConstReverseRandomAccessIterator<TValue>.less_than(IRandomAccessIterator<TValue>)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Determines whether the current iterator is pointing to an element in the container that is before the element that the given iterator points to.\n  syntax:\n    content: public virtual bool less_than (Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator<TValue> _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1\n      description: A valid iterator pointing to the same container as the current iterator.\n    return:\n      type: System.Boolean\n      description: '`true` if the current iterator is pointing to an element that comes before the element that <code>_Right</code> is pointing to; otherwise, `false`.'\n  overload: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.less_than*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.move(System.Int32)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.move(System.Int32)\n  id: move(System.Int32)\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  langs:\n  - csharp\n  name: move(Int32)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.move(Int32)\n  fullName: ConstReverseRandomAccessIterator<TValue>.move(Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Moves the iterator by the given number of elements.\n  syntax:\n    content: public virtual int move (int _Offset);\n    parameters:\n    - id: _Offset\n      type: System.Int32\n      description: The number of elements to traverse. To move the iterator forward, specify a negative number. To move the iterator backward, use a positive number.\n    return:\n      type: System.Int32\n      description: The actual number of elements traversed. This number will differ from <code>_Offset</code> if the beginning or end of the container is reached before iterating the desired number of elements.\n  overload: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.move*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.next\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.next\n  id: next\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  langs:\n  - csharp\n  name: next()\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.next()\n  fullName: ConstReverseRandomAccessIterator<TValue>.next()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Increments the reverse iterator to the next position in the underlying container, or to the first position in front of the beginning of container if the container has been completely traversed.\n  syntax:\n    content: public virtual void next ();\n    parameters: []\n  overload: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.next*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)\n  id: op_Addition(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  langs:\n  - csharp\n  name: op_Addition(ConstReverseRandomAccessIterator<TValue>, Int32)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.op_Addition(ConstReverseRandomAccessIterator<TValue>, Int32)\n  fullName: ConstReverseRandomAccessIterator<TValue>.op_Addition(ConstReverseRandomAccessIterator<TValue>, Int32)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Increments the reverse iterator by the given number of elements. The integer parameter is specified on the right side of the addition operator.\n  remarks: The equivalent method for this operator is <xref:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator%601.Add%28Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator%7B%600%7D%40%2CSystem.Int32%29?displayProperty=fullName>\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Addition (ref Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator<TValue> , int _Right);\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n      description: ''\n    - id: _Right\n      type: System.Int32\n      description: The number of elements to increment.\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: An iterator.\n  overload: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Addition*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)\n  id: op_Addition(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  langs:\n  - csharp\n  name: op_Addition(ConstReverseRandomAccessIterator<TValue>, Int32, ConstReverseRandomAccessIterator)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.op_Addition(ConstReverseRandomAccessIterator<TValue>, Int32, ConstReverseRandomAccessIterator)\n  fullName: ConstReverseRandomAccessIterator<TValue>.op_Addition(ConstReverseRandomAccessIterator<TValue>, Int32, ConstReverseRandomAccessIterator)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: public static Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Addition (ref Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator<TValue> , int _Left, Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator _Right);\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n      description: ''\n    - id: _Left\n      type: System.Int32\n      description: ''\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator\n      description: ''\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: ''\n  overload: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Addition*\n  exceptions: []\n  attributes: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)\n  id: op_Assign(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  langs:\n  - csharp\n  name: op_Assign(ReverseRandomAccessIterator)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.op_Assign(ReverseRandomAccessIterator)\n  fullName: ConstReverseRandomAccessIterator<TValue>.op_Assign(ReverseRandomAccessIterator)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: public Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator op_Assign (Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator\n      description: ''\n    return:\n      type: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator\n      description: ''\n  overload: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Assign*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)\n  id: op_Assign(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  langs:\n  - csharp\n  name: op_Assign(ConstReverseRandomAccessIterator)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.op_Assign(ConstReverseRandomAccessIterator)\n  fullName: ConstReverseRandomAccessIterator<TValue>.op_Assign(ConstReverseRandomAccessIterator)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: public Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator op_Assign (Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator\n      description: ''\n    return:\n      type: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator\n      description: ''\n  overload: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Assign*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@)\n  id: op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@)\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  langs:\n  - csharp\n  name: op_Decrement(ConstReverseRandomAccessIterator<TValue>)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.op_Decrement(ConstReverseRandomAccessIterator<TValue>)\n  fullName: ConstReverseRandomAccessIterator<TValue>.op_Decrement(ConstReverseRandomAccessIterator<TValue>)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Decrements the reverse iterator by one element. This is the prefix version of the decrement operator.\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Decrement (ref Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator<TValue> );\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n      description: ''\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: An iterator.\n  overload: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Decrement*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)\n  id: op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  langs:\n  - csharp\n  name: op_Decrement(ConstReverseRandomAccessIterator<TValue>, Int32)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.op_Decrement(ConstReverseRandomAccessIterator<TValue>, Int32)\n  fullName: ConstReverseRandomAccessIterator<TValue>.op_Decrement(ConstReverseRandomAccessIterator<TValue>, Int32)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Decrements the reverse iterator by one element. This is the postfix version of the decrement operator.\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Decrement (ref Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator<TValue> , int A_0);\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n      description: ''\n    - id: A_0\n      type: System.Int32\n      description: ''\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: An iterator.\n  overload: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Decrement*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)\n  id: op_Equality(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  langs:\n  - csharp\n  name: op_Equality(ConstReverseRandomAccessIterator)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.op_Equality(ConstReverseRandomAccessIterator)\n  fullName: ConstReverseRandomAccessIterator<TValue>.op_Equality(ConstReverseRandomAccessIterator)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: >-\n      [System.Runtime.TargetedPatchingOptOut(\"Performance critical to inline this type of method across NGen image boundaries\")]\n\n      public bool op_Equality (Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator\n      description: ''\n    return:\n      type: System.Boolean\n      description: ''\n  overload: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Equality*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.TargetedPatchingOptOutAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)\n  id: op_GreaterThan(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  langs:\n  - csharp\n  name: op_GreaterThan(ConstReverseRandomAccessIterator)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.op_GreaterThan(ConstReverseRandomAccessIterator)\n  fullName: ConstReverseRandomAccessIterator<TValue>.op_GreaterThan(ConstReverseRandomAccessIterator)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: >-\n      [System.Runtime.TargetedPatchingOptOut(\"Performance critical to inline this type of method across NGen image boundaries\")]\n\n      public bool op_GreaterThan (Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator\n      description: ''\n    return:\n      type: System.Boolean\n      description: ''\n  overload: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_GreaterThan*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.TargetedPatchingOptOutAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)\n  id: op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  langs:\n  - csharp\n  name: op_GreaterThanOrEqual(ConstReverseRandomAccessIterator)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.op_GreaterThanOrEqual(ConstReverseRandomAccessIterator)\n  fullName: ConstReverseRandomAccessIterator<TValue>.op_GreaterThanOrEqual(ConstReverseRandomAccessIterator)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: public bool op_GreaterThanOrEqual (Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator\n      description: ''\n    return:\n      type: System.Boolean\n      description: ''\n  overload: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_GreaterThanOrEqual*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Implicit\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0}\n  id: op_Implicit\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  langs:\n  - csharp\n  name: op_Implicit\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.op_Implicit\n  fullName: ConstReverseRandomAccessIterator<TValue>.op_Implicit\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: public Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator<TValue> op_Implicit ();\n    parameters: []\n    return:\n      type: Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1\n      description: ''\n  overload: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Implicit*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@)\n  id: op_Increment(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@)\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  langs:\n  - csharp\n  name: op_Increment(ConstReverseRandomAccessIterator<TValue>)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.op_Increment(ConstReverseRandomAccessIterator<TValue>)\n  fullName: ConstReverseRandomAccessIterator<TValue>.op_Increment(ConstReverseRandomAccessIterator<TValue>)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Increments the reverse iterator by one element. This is the prefix version of the increment operator.\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Increment (ref Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator<TValue> );\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n      description: ''\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: An iterator.\n  overload: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Increment*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)\n  id: op_Increment(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  langs:\n  - csharp\n  name: op_Increment(ConstReverseRandomAccessIterator<TValue>, Int32)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.op_Increment(ConstReverseRandomAccessIterator<TValue>, Int32)\n  fullName: ConstReverseRandomAccessIterator<TValue>.op_Increment(ConstReverseRandomAccessIterator<TValue>, Int32)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Increments the reverse iterator by one element. This is the postfix version of the increment operator.\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Increment (ref Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator<TValue> , int A_0);\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n      description: ''\n    - id: A_0\n      type: System.Int32\n      description: ''\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: An iterator.\n  overload: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Increment*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)\n  id: op_Inequality(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  langs:\n  - csharp\n  name: op_Inequality(ConstReverseRandomAccessIterator)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.op_Inequality(ConstReverseRandomAccessIterator)\n  fullName: ConstReverseRandomAccessIterator<TValue>.op_Inequality(ConstReverseRandomAccessIterator)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: public bool op_Inequality (Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator\n      description: ''\n    return:\n      type: System.Boolean\n      description: ''\n  overload: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Inequality*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)\n  id: op_LessThan(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  langs:\n  - csharp\n  name: op_LessThan(ConstReverseRandomAccessIterator)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.op_LessThan(ConstReverseRandomAccessIterator)\n  fullName: ConstReverseRandomAccessIterator<TValue>.op_LessThan(ConstReverseRandomAccessIterator)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: >-\n      [System.Runtime.TargetedPatchingOptOut(\"Performance critical to inline this type of method across NGen image boundaries\")]\n\n      public bool op_LessThan (Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator\n      description: ''\n    return:\n      type: System.Boolean\n      description: ''\n  overload: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_LessThan*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.TargetedPatchingOptOutAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)\n  id: op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  langs:\n  - csharp\n  name: op_LessThanOrEqual(ConstReverseRandomAccessIterator)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.op_LessThanOrEqual(ConstReverseRandomAccessIterator)\n  fullName: ConstReverseRandomAccessIterator<TValue>.op_LessThanOrEqual(ConstReverseRandomAccessIterator)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: public bool op_LessThanOrEqual (Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator\n      description: ''\n    return:\n      type: System.Boolean\n      description: ''\n  overload: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_LessThanOrEqual*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)\n  id: op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  langs:\n  - csharp\n  name: op_MemberSelection(ConstReverseRandomAccessIterator)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.op_MemberSelection(ConstReverseRandomAccessIterator)\n  fullName: ConstReverseRandomAccessIterator<TValue>.op_MemberSelection(ConstReverseRandomAccessIterator)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: >-\n      [System.Runtime.TargetedPatchingOptOut(\"Performance critical to inline this type of method across NGen image boundaries\")]\n\n      public static TValue op_MemberSelection (Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator _Left);\n    parameters:\n    - id: _Left\n      type: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator\n      description: ''\n    return:\n      type: TValue@\n      description: ''\n  overload: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_MemberSelection*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.TargetedPatchingOptOutAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)\n  id: op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  langs:\n  - csharp\n  name: op_PointerDereference(ConstReverseRandomAccessIterator)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.op_PointerDereference(ConstReverseRandomAccessIterator)\n  fullName: ConstReverseRandomAccessIterator<TValue>.op_PointerDereference(ConstReverseRandomAccessIterator)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: >-\n      [System.Runtime.TargetedPatchingOptOut(\"Performance critical to inline this type of method across NGen image boundaries\")]\n\n      public static TValue op_PointerDereference (Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator _Left);\n    parameters:\n    - id: _Left\n      type: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator\n      description: ''\n    return:\n      type: TValue@\n      description: ''\n  overload: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_PointerDereference*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.TargetedPatchingOptOutAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})\n  id: op_Subtraction(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  langs:\n  - csharp\n  name: op_Subtraction(IRandomAccessIterator<TValue>)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.op_Subtraction(IRandomAccessIterator<TValue>)\n  fullName: ConstReverseRandomAccessIterator<TValue>.op_Subtraction(IRandomAccessIterator<TValue>)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Determines the difference between two iterators.\n  remarks: The equivalent method for this operator is <xref:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator%601.Subtract%28Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator%7B%600%7D%29?displayProperty=fullName>\n  syntax:\n    content: >-\n      [System.Runtime.TargetedPatchingOptOut(\"Performance critical to inline this type of method across NGen image boundaries\")]\n\n      public int op_Subtraction (Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator<TValue> _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1\n      description: The <xref href=\"Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1\"></xref> to be subtracted from the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\"></xref> object.\n    return:\n      type: System.Int32\n      description: The difference (number of elements) between the two iterators.\n  overload: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Subtraction*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.TargetedPatchingOptOutAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)\n  id: op_Subtraction(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  langs:\n  - csharp\n  name: op_Subtraction(ConstReverseRandomAccessIterator<TValue>, Int32)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.op_Subtraction(ConstReverseRandomAccessIterator<TValue>, Int32)\n  fullName: ConstReverseRandomAccessIterator<TValue>.op_Subtraction(ConstReverseRandomAccessIterator<TValue>, Int32)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Decrements the iterator by the given number of elements. The integer parameter is specified on the right side of the subtraction operator.\n  remarks: The equivalent method for this operator is <xref:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator%601.Subtract%28Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator%7B%600%7D%40%2CSystem.Int32%29?displayProperty=fullName>\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Subtraction (ref Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator<TValue> , int _Right);\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n      description: ''\n    - id: _Right\n      type: System.Int32\n      description: The number of elements to decrement.\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: An iterator.\n  overload: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Subtraction*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.prev\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.prev\n  id: prev\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  langs:\n  - csharp\n  name: prev()\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.prev()\n  fullName: ConstReverseRandomAccessIterator<TValue>.prev()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Positions the iterator to the element immediately after the current element.\n  syntax:\n    content: public virtual void prev ();\n    parameters: []\n  overload: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.prev*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.valid\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.valid\n  id: valid\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  langs:\n  - csharp\n  name: valid()\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.valid()\n  fullName: ConstReverseRandomAccessIterator<TValue>.valid()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Determines whether the iterator is valid and can be safely used to traverse the underlying container.\n  syntax:\n    content: public virtual bool valid ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`true` if the iterator is valid and safe to use; otherwise, `false`.'\n  overload: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.valid*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: ConstReverseRandomAccessIterator<TValue>()\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.ConstReverseRandomAccessIterator<TValue>()\n  fullName: ConstReverseRandomAccessIterator<TValue>.ConstReverseRandomAccessIterator<TValue>()\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: ConstReverseRandomAccessIterator<TValue>(ConstReverseRandomAccessIterator)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.ConstReverseRandomAccessIterator<TValue>(ConstReverseRandomAccessIterator)\n  fullName: ConstReverseRandomAccessIterator<TValue>.ConstReverseRandomAccessIterator<TValue>(ConstReverseRandomAccessIterator)\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: true\n  name: ConstReverseRandomAccessIterator\n  nameWithType: ConstReverseRandomAccessIterator\n  fullName: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: ConstReverseRandomAccessIterator<TValue>(IRandomAccessIterator<TValue>)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.ConstReverseRandomAccessIterator<TValue>(IRandomAccessIterator<TValue>)\n  fullName: ConstReverseRandomAccessIterator<TValue>.ConstReverseRandomAccessIterator<TValue>(IRandomAccessIterator<TValue>)\n- uid: Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: IRandomAccessIterator<TValue>\n  nameWithType: IRandomAccessIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator<TValue>\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: ConstReverseRandomAccessIterator<TValue>(ReverseRandomAccessIterator)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.ConstReverseRandomAccessIterator<TValue>(ReverseRandomAccessIterator)\n  fullName: ConstReverseRandomAccessIterator<TValue>.ConstReverseRandomAccessIterator<TValue>(ReverseRandomAccessIterator)\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: true\n  name: ReverseRandomAccessIterator\n  nameWithType: ReverseRandomAccessIterator\n  fullName: Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.base\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: base()\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.base()\n  fullName: ConstReverseRandomAccessIterator<TValue>.base()\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.Clone\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: Clone()\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.Clone()\n  fullName: ConstReverseRandomAccessIterator<TValue>.Clone()\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.container\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: container()\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.container()\n  fullName: ConstReverseRandomAccessIterator<TValue>.container()\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: distance(ConstReverseRandomAccessIterator)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.distance(ConstReverseRandomAccessIterator)\n  fullName: ConstReverseRandomAccessIterator<TValue>.distance(ConstReverseRandomAccessIterator)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: distance(IRandomAccessIterator<TValue>)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.distance(IRandomAccessIterator<TValue>)\n  fullName: ConstReverseRandomAccessIterator<TValue>.distance(IRandomAccessIterator<TValue>)\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: equal_to(IInputIterator<TValue>)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.equal_to(IInputIterator<TValue>)\n  fullName: ConstReverseRandomAccessIterator<TValue>.equal_to(IInputIterator<TValue>)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: Microsoft.VisualC.StlClr.Generic.IInputIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: IInputIterator<TValue>\n  nameWithType: IInputIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.IInputIterator<TValue>\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: equal_to(ConstReverseRandomAccessIterator)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.equal_to(ConstReverseRandomAccessIterator)\n  fullName: ConstReverseRandomAccessIterator<TValue>.equal_to(ConstReverseRandomAccessIterator)\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.Item(System.Int32)\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: Item(Int32)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.Item(Int32)\n  fullName: ConstReverseRandomAccessIterator<TValue>.Item(Int32)\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: less_than(ConstReverseRandomAccessIterator)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.less_than(ConstReverseRandomAccessIterator)\n  fullName: ConstReverseRandomAccessIterator<TValue>.less_than(ConstReverseRandomAccessIterator)\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: less_than(IRandomAccessIterator<TValue>)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.less_than(IRandomAccessIterator<TValue>)\n  fullName: ConstReverseRandomAccessIterator<TValue>.less_than(IRandomAccessIterator<TValue>)\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.move(System.Int32)\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: move(Int32)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.move(Int32)\n  fullName: ConstReverseRandomAccessIterator<TValue>.move(Int32)\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.next\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: next()\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.next()\n  fullName: ConstReverseRandomAccessIterator<TValue>.next()\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: op_Addition(ConstReverseRandomAccessIterator<TValue>, Int32)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.op_Addition(ConstReverseRandomAccessIterator<TValue>, Int32)\n  fullName: ConstReverseRandomAccessIterator<TValue>.op_Addition(ConstReverseRandomAccessIterator<TValue>, Int32)\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: ConstReverseRandomAccessIterator<TValue>\n  nameWithType: ConstReverseRandomAccessIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator<TValue>\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: op_Addition(ConstReverseRandomAccessIterator<TValue>, Int32, ConstReverseRandomAccessIterator)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.op_Addition(ConstReverseRandomAccessIterator<TValue>, Int32, ConstReverseRandomAccessIterator)\n  fullName: ConstReverseRandomAccessIterator<TValue>.op_Addition(ConstReverseRandomAccessIterator<TValue>, Int32, ConstReverseRandomAccessIterator)\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: op_Assign(ReverseRandomAccessIterator)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.op_Assign(ReverseRandomAccessIterator)\n  fullName: ConstReverseRandomAccessIterator<TValue>.op_Assign(ReverseRandomAccessIterator)\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: op_Assign(ConstReverseRandomAccessIterator)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.op_Assign(ConstReverseRandomAccessIterator)\n  fullName: ConstReverseRandomAccessIterator<TValue>.op_Assign(ConstReverseRandomAccessIterator)\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@)\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: op_Decrement(ConstReverseRandomAccessIterator<TValue>)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.op_Decrement(ConstReverseRandomAccessIterator<TValue>)\n  fullName: ConstReverseRandomAccessIterator<TValue>.op_Decrement(ConstReverseRandomAccessIterator<TValue>)\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: op_Decrement(ConstReverseRandomAccessIterator<TValue>, Int32)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.op_Decrement(ConstReverseRandomAccessIterator<TValue>, Int32)\n  fullName: ConstReverseRandomAccessIterator<TValue>.op_Decrement(ConstReverseRandomAccessIterator<TValue>, Int32)\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: op_Equality(ConstReverseRandomAccessIterator)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.op_Equality(ConstReverseRandomAccessIterator)\n  fullName: ConstReverseRandomAccessIterator<TValue>.op_Equality(ConstReverseRandomAccessIterator)\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: op_GreaterThan(ConstReverseRandomAccessIterator)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.op_GreaterThan(ConstReverseRandomAccessIterator)\n  fullName: ConstReverseRandomAccessIterator<TValue>.op_GreaterThan(ConstReverseRandomAccessIterator)\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: op_GreaterThanOrEqual(ConstReverseRandomAccessIterator)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.op_GreaterThanOrEqual(ConstReverseRandomAccessIterator)\n  fullName: ConstReverseRandomAccessIterator<TValue>.op_GreaterThanOrEqual(ConstReverseRandomAccessIterator)\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Implicit\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: op_Implicit\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.op_Implicit\n  fullName: ConstReverseRandomAccessIterator<TValue>.op_Implicit\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@)\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: op_Increment(ConstReverseRandomAccessIterator<TValue>)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.op_Increment(ConstReverseRandomAccessIterator<TValue>)\n  fullName: ConstReverseRandomAccessIterator<TValue>.op_Increment(ConstReverseRandomAccessIterator<TValue>)\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: op_Increment(ConstReverseRandomAccessIterator<TValue>, Int32)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.op_Increment(ConstReverseRandomAccessIterator<TValue>, Int32)\n  fullName: ConstReverseRandomAccessIterator<TValue>.op_Increment(ConstReverseRandomAccessIterator<TValue>, Int32)\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: op_Inequality(ConstReverseRandomAccessIterator)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.op_Inequality(ConstReverseRandomAccessIterator)\n  fullName: ConstReverseRandomAccessIterator<TValue>.op_Inequality(ConstReverseRandomAccessIterator)\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: op_LessThan(ConstReverseRandomAccessIterator)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.op_LessThan(ConstReverseRandomAccessIterator)\n  fullName: ConstReverseRandomAccessIterator<TValue>.op_LessThan(ConstReverseRandomAccessIterator)\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: op_LessThanOrEqual(ConstReverseRandomAccessIterator)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.op_LessThanOrEqual(ConstReverseRandomAccessIterator)\n  fullName: ConstReverseRandomAccessIterator<TValue>.op_LessThanOrEqual(ConstReverseRandomAccessIterator)\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: op_MemberSelection(ConstReverseRandomAccessIterator)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.op_MemberSelection(ConstReverseRandomAccessIterator)\n  fullName: ConstReverseRandomAccessIterator<TValue>.op_MemberSelection(ConstReverseRandomAccessIterator)\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: op_PointerDereference(ConstReverseRandomAccessIterator)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.op_PointerDereference(ConstReverseRandomAccessIterator)\n  fullName: ConstReverseRandomAccessIterator<TValue>.op_PointerDereference(ConstReverseRandomAccessIterator)\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: op_Subtraction(IRandomAccessIterator<TValue>)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.op_Subtraction(IRandomAccessIterator<TValue>)\n  fullName: ConstReverseRandomAccessIterator<TValue>.op_Subtraction(IRandomAccessIterator<TValue>)\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: op_Subtraction(ConstReverseRandomAccessIterator<TValue>, Int32)\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.op_Subtraction(ConstReverseRandomAccessIterator<TValue>, Int32)\n  fullName: ConstReverseRandomAccessIterator<TValue>.op_Subtraction(ConstReverseRandomAccessIterator<TValue>, Int32)\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.prev\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: prev()\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.prev()\n  fullName: ConstReverseRandomAccessIterator<TValue>.prev()\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.valid\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: valid()\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.valid()\n  fullName: ConstReverseRandomAccessIterator<TValue>.valid()\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor*\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: ConstReverseRandomAccessIterator<TValue>\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.ConstReverseRandomAccessIterator<TValue>\n  fullName: ConstReverseRandomAccessIterator<TValue>.ConstReverseRandomAccessIterator<TValue>\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.base*\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: base\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.base\n  fullName: ConstReverseRandomAccessIterator<TValue>.base\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.Clone*\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: Clone\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.Clone\n  fullName: ConstReverseRandomAccessIterator<TValue>.Clone\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.container*\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: container\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.container\n  fullName: ConstReverseRandomAccessIterator<TValue>.container\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.distance*\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: distance\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.distance\n  fullName: ConstReverseRandomAccessIterator<TValue>.distance\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.equal_to*\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: equal_to\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.equal_to\n  fullName: ConstReverseRandomAccessIterator<TValue>.equal_to\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.Item*\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: Item\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.Item\n  fullName: ConstReverseRandomAccessIterator<TValue>.Item\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.less_than*\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: less_than\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.less_than\n  fullName: ConstReverseRandomAccessIterator<TValue>.less_than\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.move*\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: move\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.move\n  fullName: ConstReverseRandomAccessIterator<TValue>.move\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.next*\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: next\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.next\n  fullName: ConstReverseRandomAccessIterator<TValue>.next\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Addition*\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: op_Addition\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.op_Addition\n  fullName: ConstReverseRandomAccessIterator<TValue>.op_Addition\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Assign*\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: op_Assign\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.op_Assign\n  fullName: ConstReverseRandomAccessIterator<TValue>.op_Assign\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Decrement*\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: op_Decrement\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.op_Decrement\n  fullName: ConstReverseRandomAccessIterator<TValue>.op_Decrement\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Equality*\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: op_Equality\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.op_Equality\n  fullName: ConstReverseRandomAccessIterator<TValue>.op_Equality\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_GreaterThan*\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: op_GreaterThan\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.op_GreaterThan\n  fullName: ConstReverseRandomAccessIterator<TValue>.op_GreaterThan\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_GreaterThanOrEqual*\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: op_GreaterThanOrEqual\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.op_GreaterThanOrEqual\n  fullName: ConstReverseRandomAccessIterator<TValue>.op_GreaterThanOrEqual\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Implicit*\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: op_Implicit\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.op_Implicit\n  fullName: ConstReverseRandomAccessIterator<TValue>.op_Implicit\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Increment*\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: op_Increment\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.op_Increment\n  fullName: ConstReverseRandomAccessIterator<TValue>.op_Increment\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Inequality*\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: op_Inequality\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.op_Inequality\n  fullName: ConstReverseRandomAccessIterator<TValue>.op_Inequality\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_LessThan*\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: op_LessThan\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.op_LessThan\n  fullName: ConstReverseRandomAccessIterator<TValue>.op_LessThan\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_LessThanOrEqual*\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: op_LessThanOrEqual\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.op_LessThanOrEqual\n  fullName: ConstReverseRandomAccessIterator<TValue>.op_LessThanOrEqual\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_MemberSelection*\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: op_MemberSelection\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.op_MemberSelection\n  fullName: ConstReverseRandomAccessIterator<TValue>.op_MemberSelection\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_PointerDereference*\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: op_PointerDereference\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.op_PointerDereference\n  fullName: ConstReverseRandomAccessIterator<TValue>.op_PointerDereference\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Subtraction*\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: op_Subtraction\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.op_Subtraction\n  fullName: ConstReverseRandomAccessIterator<TValue>.op_Subtraction\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.prev*\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: prev\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.prev\n  fullName: ConstReverseRandomAccessIterator<TValue>.prev\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.valid*\n  parent: Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  isExternal: false\n  name: valid\n  nameWithType: ConstReverseRandomAccessIterator<TValue>.valid\n  fullName: ConstReverseRandomAccessIterator<TValue>.valid\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ConstReverseRandomAccessIterator`1.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}