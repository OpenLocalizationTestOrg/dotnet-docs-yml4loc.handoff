{"nodes":[{"content":"Provides a mechanism for dynamically mapping types to and from `xsi:type` representations during serialization and deserialization.","nodes":[{"pos":[0,131],"content":"Provides a mechanism for dynamically mapping types to and from <ph id=\"ph1\">`xsi:type`</ph> representations during serialization and deserialization.","source":"Provides a mechanism for dynamically mapping types to and from `xsi:type` representations during serialization and deserialization."}],"pos":[937,1069],"yaml":true},{"content":"Developers should be careful about what data is being sent over the wire. You can use transport or message security to secure that data. [!INCLUDE[crdefault](~/includes/crdefault-md.md)] see [Security](~/docs/framework/wcf/samples/security-in-wcf.md).  \n  \n> [!WARNING]\n>  Only use <xref:System.Runtime.Serialization.DataContractResolver> if you are completely sure of what information is being serialized. Malicious types can cause unexpected behavior.","nodes":[{"pos":[0,251],"content":"Developers should be careful about what data is being sent over the wire. You can use transport or message security to secure that data. [!INCLUDE[crdefault](~/includes/crdefault-md.md)] see [Security](~/docs/framework/wcf/samples/security-in-wcf.md).","nodes":[{"content":"Developers should be careful about what data is being sent over the wire.","pos":[0,73]},{"content":"You can use transport or message security to secure that data.","pos":[74,136]},{"content":"<ph id=\"ph1\">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> see <bpt id=\"p1\">[</bpt>Security<ept id=\"p1\">](~/docs/framework/wcf/samples/security-in-wcf.md)</ept>.","pos":[137,251],"source":"[!INCLUDE[crdefault](~/includes/crdefault-md.md)] see [Security](~/docs/framework/wcf/samples/security-in-wcf.md)."}]},{"pos":[259,453],"content":"[!WARNING]\n Only use <xref:System.Runtime.Serialization.DataContractResolver> if you are completely sure of what information is being serialized. Malicious types can cause unexpected behavior.","leadings":["","> "],"nodes":[{"content":" Only use <xref:System.Runtime.Serialization.DataContractResolver> if you are completely sure of what information is being serialized. Malicious types can cause unexpected behavior.","pos":[11,192],"nodes":[{"content":"Only use <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.DataContractResolver&gt;</ph> if you are completely sure of what information is being serialized.","pos":[1,134],"source":" Only use <xref:System.Runtime.Serialization.DataContractResolver> if you are completely sure of what information is being serialized."},{"content":"Malicious types can cause unexpected behavior.","pos":[135,181]}]}]}],"pos":[1080,1539],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Runtime.Serialization.DataContractResolver\"></xref> class.","nodes":[{"pos":[0,111],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Serialization.DataContractResolver\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Runtime.Serialization.DataContractResolver\"></xref> class."}],"pos":[3744,3856],"yaml":true},{"content":"Override this method to map the specified `xsi:type` name and namespace to a data contract type during deserialization.","nodes":[{"pos":[0,119],"content":"Override this method to map the specified <ph id=\"ph1\">`xsi:type`</ph> name and namespace to a data contract type during deserialization.","source":"Override this method to map the specified `xsi:type` name and namespace to a data contract type during deserialization."}],"pos":[5755,5875],"yaml":true},{"content":"If you want to use the known type resolution logic inside your implementation, a reference to it is passed in as the `knownTypeResolver` parameter.","nodes":[{"pos":[0,147],"content":"If you want to use the known type resolution logic inside your implementation, a reference to it is passed in as the <ph id=\"ph1\">`knownTypeResolver`</ph> parameter.","source":"If you want to use the known type resolution logic inside your implementation, a reference to it is passed in as the `knownTypeResolver` parameter."}],"pos":[5886,6034],"yaml":true,"extradata":"MT"},{"content":"The `xsi:type` name to map.","nodes":[{"pos":[0,27],"content":"The <ph id=\"ph1\">`xsi:type`</ph> name to map.","source":"The `xsi:type` name to map."}],"pos":[6589,6617],"yaml":true},{"content":"The `xsi:type` namespace to map.","nodes":[{"pos":[0,32],"content":"The <ph id=\"ph1\">`xsi:type`</ph> namespace to map.","source":"The `xsi:type` namespace to map."}],"pos":[6686,6719],"yaml":true},{"content":"The type declared in the data contract.","nodes":[{"pos":[0,39],"content":"The type declared in the data contract.","nodes":[{"content":"The type declared in the data contract.","pos":[0,39]}]}],"pos":[6785,6825],"yaml":true},{"content":"The known type resolver.","nodes":[{"pos":[0,24],"content":"The known type resolver.","nodes":[{"content":"The known type resolver.","pos":[0,24]}]}],"pos":[6934,6959],"yaml":true},{"content":"The type the `xsi:type` name and namespace is mapped to.","nodes":[{"pos":[0,56],"content":"The type the <ph id=\"ph1\">`xsi:type`</ph> name and namespace is mapped to.","source":"The type the `xsi:type` name and namespace is mapped to."}],"pos":[7014,7071],"yaml":true},{"content":"Override this method to map a data contract type to an `xsi:type` name and namespace during serialization.","nodes":[{"pos":[0,106],"content":"Override this method to map a data contract type to an <ph id=\"ph1\">`xsi:type`</ph> name and namespace during serialization.","source":"Override this method to map a data contract type to an `xsi:type` name and namespace during serialization."}],"pos":[9157,9264],"yaml":true},{"content":"If you want to use the known type resolution logic inside your implementation, a reference to it is passed in as the `knownTypeResolver` parameter.","nodes":[{"pos":[0,147],"content":"If you want to use the known type resolution logic inside your implementation, a reference to it is passed in as the <ph id=\"ph1\">`knownTypeResolver`</ph> parameter.","source":"If you want to use the known type resolution logic inside your implementation, a reference to it is passed in as the `knownTypeResolver` parameter."}],"pos":[9275,9423],"yaml":true,"extradata":"MT"},{"content":"The type to map.","nodes":[{"pos":[0,16],"content":"The type to map.","nodes":[{"content":"The type to map.","pos":[0,16]}]}],"pos":[10045,10062],"yaml":true},{"content":"The type declared in the data contract.","nodes":[{"pos":[0,39],"content":"The type declared in the data contract.","nodes":[{"content":"The type declared in the data contract.","pos":[0,39]}]}],"pos":[10128,10168],"yaml":true},{"content":"The known type resolver.","nodes":[{"pos":[0,24],"content":"The known type resolver.","nodes":[{"content":"The known type resolver.","pos":[0,24]}]}],"pos":[10277,10302],"yaml":true},{"content":"The xsi:type name.","nodes":[{"pos":[0,18],"content":"The xsi:type name.","nodes":[{"content":"The xsi:type name.","pos":[0,18]}]}],"pos":[10383,10402],"yaml":true},{"content":"The xsi:type namespace.","nodes":[{"pos":[0,23],"content":"The xsi:type namespace.","nodes":[{"content":"The xsi:type namespace.","pos":[0,23]}]}],"pos":[10488,10512],"yaml":true},{"content":"`true` if mapping succeeded; otherwise, `false`.","nodes":[{"pos":[0,48],"content":"<ph id=\"ph1\">`true`</ph> if mapping succeeded; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if mapping succeeded; otherwise, `false`."}],"pos":[10570,10621],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Runtime.Serialization.DataContractResolver\n  commentId: T:System.Runtime.Serialization.DataContractResolver\n  id: DataContractResolver\n  children:\n  - System.Runtime.Serialization.DataContractResolver.#ctor\n  - System.Runtime.Serialization.DataContractResolver.ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)\n  - System.Runtime.Serialization.DataContractResolver.TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)\n  langs:\n  - csharp\n  name: DataContractResolver\n  nameWithType: DataContractResolver\n  fullName: System.Runtime.Serialization.DataContractResolver\n  type: Class\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  - System.Runtime.Serialization\n  - netstandard\n  namespace: System.Runtime.Serialization\n  summary: Provides a mechanism for dynamically mapping types to and from `xsi:type` representations during serialization and deserialization.\n  remarks: \"Developers should be careful about what data is being sent over the wire. You can use transport or message security to secure that data. [!INCLUDE[crdefault](~/includes/crdefault-md.md)] see [Security](~/docs/framework/wcf/samples/security-in-wcf.md).  \\n  \\n> [!WARNING]\\n>  Only use <xref:System.Runtime.Serialization.DataContractResolver> if you are completely sure of what information is being serialized. Malicious types can cause unexpected behavior.\"\n  example:\n  - \"The following example shows how to derive a class from <xref:System.Runtime.Serialization.DataContractResolver>. For a working sample, see [DataContractResolver](~/docs/framework/wcf/samples/datacontractresolver.md).  \\n  \\n [!code-csharp[DataContractResolver#2](~/samples/snippets/csharp/VS_Snippets_CFX/datacontractresolver/cs/datacontractresolver.cs#2)]\"\n  syntax:\n    content: public abstract class DataContractResolver\n  inheritance:\n  - System.Object\n  derivedClasses:\n  - System.Data.Objects.ProxyDataContractResolver\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Serialization/DataContractResolver.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.Serialization.DataContractResolver.#ctor\n  commentId: M:System.Runtime.Serialization.DataContractResolver.#ctor\n  id: '#ctor'\n  parent: System.Runtime.Serialization.DataContractResolver\n  langs:\n  - csharp\n  name: DataContractResolver()\n  nameWithType: DataContractResolver.DataContractResolver()\n  fullName: DataContractResolver.DataContractResolver()\n  type: Constructor\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  - System.Runtime.Serialization\n  - netstandard\n  namespace: System.Runtime.Serialization\n  summary: Initializes a new instance of the <xref href=\"System.Runtime.Serialization.DataContractResolver\"></xref> class.\n  syntax:\n    content: protected DataContractResolver ();\n    parameters: []\n  overload: System.Runtime.Serialization.DataContractResolver.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Serialization/DataContractResolver.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.Serialization.DataContractResolver.ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)\n  commentId: M:System.Runtime.Serialization.DataContractResolver.ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)\n  id: ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)\n  parent: System.Runtime.Serialization.DataContractResolver\n  langs:\n  - csharp\n  name: ResolveName(String, String, Type, DataContractResolver)\n  nameWithType: DataContractResolver.ResolveName(String, String, Type, DataContractResolver)\n  fullName: DataContractResolver.ResolveName(String, String, Type, DataContractResolver)\n  type: Method\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  - System.Runtime.Serialization\n  - netstandard\n  namespace: System.Runtime.Serialization\n  summary: Override this method to map the specified `xsi:type` name and namespace to a data contract type during deserialization.\n  remarks: If you want to use the known type resolution logic inside your implementation, a reference to it is passed in as the `knownTypeResolver` parameter.\n  example:\n  - \"The following example shows an implementation of the <xref:System.Runtime.Serialization.DataContractResolver.ResolveName%2A> method.  \\n  \\n [!code-csharp[DataContractResolver#0](~/samples/snippets/csharp/VS_Snippets_CFX/datacontractresolver/cs/datacontractresolver.cs#0)]\"\n  syntax:\n    content: public abstract Type ResolveName (string typeName, string typeNamespace, Type declaredType, System.Runtime.Serialization.DataContractResolver knownTypeResolver);\n    parameters:\n    - id: typeName\n      type: System.String\n      description: The `xsi:type` name to map.\n    - id: typeNamespace\n      type: System.String\n      description: The `xsi:type` namespace to map.\n    - id: declaredType\n      type: System.Type\n      description: The type declared in the data contract.\n    - id: knownTypeResolver\n      type: System.Runtime.Serialization.DataContractResolver\n      description: The known type resolver.\n    return:\n      type: System.Type\n      description: The type the `xsi:type` name and namespace is mapped to.\n  overload: System.Runtime.Serialization.DataContractResolver.ResolveName*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Serialization/DataContractResolver.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.Serialization.DataContractResolver.TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)\n  commentId: M:System.Runtime.Serialization.DataContractResolver.TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)\n  id: TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)\n  parent: System.Runtime.Serialization.DataContractResolver\n  langs:\n  - csharp\n  name: TryResolveType(Type, Type, DataContractResolver, XmlDictionaryString, XmlDictionaryString)\n  nameWithType: DataContractResolver.TryResolveType(Type, Type, DataContractResolver, XmlDictionaryString, XmlDictionaryString)\n  fullName: DataContractResolver.TryResolveType(Type, Type, DataContractResolver, XmlDictionaryString, XmlDictionaryString)\n  type: Method\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  - System.Runtime.Serialization\n  - netstandard\n  namespace: System.Runtime.Serialization\n  summary: Override this method to map a data contract type to an `xsi:type` name and namespace during serialization.\n  remarks: If you want to use the known type resolution logic inside your implementation, a reference to it is passed in as the `knownTypeResolver` parameter.\n  example:\n  - \"The following example shows an implementation of the <xref:System.Runtime.Serialization.DataContractResolver.TryResolveType%2A> method.  \\n  \\n [!code-csharp[DataContractResolver#1](~/samples/snippets/csharp/VS_Snippets_CFX/datacontractresolver/cs/datacontractresolver.cs#1)]\"\n  syntax:\n    content: public abstract bool TryResolveType (Type type, Type declaredType, System.Runtime.Serialization.DataContractResolver knownTypeResolver, out System.Xml.XmlDictionaryString typeName, out System.Xml.XmlDictionaryString typeNamespace);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The type to map.\n    - id: declaredType\n      type: System.Type\n      description: The type declared in the data contract.\n    - id: knownTypeResolver\n      type: System.Runtime.Serialization.DataContractResolver\n      description: The known type resolver.\n    - id: typeName\n      type: System.Xml.XmlDictionaryString\n      description: The xsi:type name.\n    - id: typeNamespace\n      type: System.Xml.XmlDictionaryString\n      description: The xsi:type namespace.\n    return:\n      type: System.Boolean\n      description: '`true` if mapping succeeded; otherwise, `false`.'\n  overload: System.Runtime.Serialization.DataContractResolver.TryResolveType*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Serialization/DataContractResolver.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Runtime.Serialization.DataContractResolver.#ctor\n  parent: System.Runtime.Serialization.DataContractResolver\n  isExternal: false\n  name: DataContractResolver()\n  nameWithType: DataContractResolver.DataContractResolver()\n  fullName: DataContractResolver.DataContractResolver()\n- uid: System.Runtime.Serialization.DataContractResolver.ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)\n  parent: System.Runtime.Serialization.DataContractResolver\n  isExternal: false\n  name: ResolveName(String, String, Type, DataContractResolver)\n  nameWithType: DataContractResolver.ResolveName(String, String, Type, DataContractResolver)\n  fullName: DataContractResolver.ResolveName(String, String, Type, DataContractResolver)\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Runtime.Serialization.DataContractResolver\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: DataContractResolver\n  nameWithType: DataContractResolver\n  fullName: System.Runtime.Serialization.DataContractResolver\n- uid: System.Runtime.Serialization.DataContractResolver.TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)\n  parent: System.Runtime.Serialization.DataContractResolver\n  isExternal: false\n  name: TryResolveType(Type, Type, DataContractResolver, XmlDictionaryString, XmlDictionaryString)\n  nameWithType: DataContractResolver.TryResolveType(Type, Type, DataContractResolver, XmlDictionaryString, XmlDictionaryString)\n  fullName: DataContractResolver.TryResolveType(Type, Type, DataContractResolver, XmlDictionaryString, XmlDictionaryString)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Xml.XmlDictionaryString\n  parent: System.Xml\n  isExternal: false\n  name: XmlDictionaryString\n  nameWithType: XmlDictionaryString\n  fullName: System.Xml.XmlDictionaryString\n- uid: System.Runtime.Serialization.DataContractResolver.#ctor*\n  parent: System.Runtime.Serialization.DataContractResolver\n  isExternal: false\n  name: DataContractResolver\n  nameWithType: DataContractResolver.DataContractResolver\n  fullName: DataContractResolver.DataContractResolver\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Serialization/DataContractResolver.xml\n- uid: System.Runtime.Serialization.DataContractResolver.ResolveName*\n  parent: System.Runtime.Serialization.DataContractResolver\n  isExternal: false\n  name: ResolveName\n  nameWithType: DataContractResolver.ResolveName\n  fullName: DataContractResolver.ResolveName\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Serialization/DataContractResolver.xml\n- uid: System.Runtime.Serialization.DataContractResolver.TryResolveType*\n  parent: System.Runtime.Serialization.DataContractResolver\n  isExternal: false\n  name: TryResolveType\n  nameWithType: DataContractResolver.TryResolveType\n  fullName: DataContractResolver.TryResolveType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Serialization/DataContractResolver.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}