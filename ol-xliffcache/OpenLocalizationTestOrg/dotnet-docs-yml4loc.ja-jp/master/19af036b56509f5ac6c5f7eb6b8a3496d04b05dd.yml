### YamlMime:ManagedReference
items:
- uid: System.Runtime.InteropServices.SafeBuffer
  commentId: T:System.Runtime.InteropServices.SafeBuffer
  id: SafeBuffer
  children:
  - System.Runtime.InteropServices.SafeBuffer.#ctor(System.Boolean)
  - System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)
  - System.Runtime.InteropServices.SafeBuffer.ByteLength
  - System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt64)
  - System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)
  - System.Runtime.InteropServices.SafeBuffer.Initialize``1(System.UInt32)
  - System.Runtime.InteropServices.SafeBuffer.IsInvalid
  - System.Runtime.InteropServices.SafeBuffer.Read``1(System.UInt64)
  - System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)
  - System.Runtime.InteropServices.SafeBuffer.ReleasePointer
  - System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)
  - System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)
  langs:
  - csharp
  name: SafeBuffer
  nameWithType: SafeBuffer
  fullName: System.Runtime.InteropServices.SafeBuffer
  type: Class
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Provides a controlled memory buffer that can be used for reading and writing. Attempts to access memory outside the controlled buffer (underruns and overruns) raise exceptions.
  remarks: "You must call the <xref:System.Runtime.InteropServices.SafeBuffer.Initialize%2A?displayProperty=fullName> method before you use any instance of <xref:System.Runtime.InteropServices.SafeBuffer>. To avoid races when you store an instance of a <xref:System.Runtime.InteropServices.SafeBuffer> object in a static variable, you should use one of the following approaches:  \n  \n-   Create a lock when publishing the <xref:System.Runtime.InteropServices.SafeBuffer>.  \n  \n-   Create a local variable, initialize the <xref:System.Runtime.InteropServices.SafeBuffer>, and then assign the <xref:System.Runtime.InteropServices.SafeBuffer> to the static variable, for example, by using the <xref:System.Threading.Interlocked.CompareExchange%2A?displayProperty=fullName> method.  \n  \n> [!NOTE]\n>  Assignments in a static class constructor are implicitly locked."
  syntax:
    content: 'public abstract class SafeBuffer : Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid'
  inheritance:
  - System.Object
  - System.Runtime.InteropServices.SafeHandle
  derivedClasses:
  - Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  - System.Runtime.InteropServices.SafeHandle.Close
  - System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)
  - System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
  - System.Runtime.InteropServices.SafeHandle.DangerousRelease
  - System.Runtime.InteropServices.SafeHandle.Dispose
  - System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
  - System.Runtime.InteropServices.SafeHandle.handle
  - System.Runtime.InteropServices.SafeHandle.IsClosed
  - System.Runtime.InteropServices.SafeHandle.ReleaseHandle
  - System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
  - System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeBuffer.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.SafeBuffer.#ctor(System.Boolean)
  commentId: M:System.Runtime.InteropServices.SafeBuffer.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: System.Runtime.InteropServices.SafeBuffer
  langs:
  - csharp
  name: SafeBuffer(Boolean)
  nameWithType: SafeBuffer.SafeBuffer(Boolean)
  fullName: SafeBuffer.SafeBuffer(Boolean)
  type: Constructor
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Creates a new instance of the <xref href="System.Runtime.InteropServices.SafeBuffer"></xref> class, and specifies whether the buffer handle is to be reliably released.
  syntax:
    content: protected SafeBuffer (bool ownsHandle);
    parameters:
    - id: ownsHandle
      type: System.Boolean
      description: '`true` to reliably release the handle during the finalization phase; `false` to prevent reliable release (not recommended).'
  overload: System.Runtime.InteropServices.SafeBuffer.#ctor*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeBuffer.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)
  commentId: M:System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)
  id: AcquirePointer(System.Byte*@)
  parent: System.Runtime.InteropServices.SafeBuffer
  langs:
  - csharp
  name: AcquirePointer(Byte*)
  nameWithType: SafeBuffer.AcquirePointer(Byte*)
  fullName: SafeBuffer.AcquirePointer(Byte*)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Obtains a pointer from a <xref href="System.Runtime.InteropServices.SafeBuffer"></xref> object for a block of memory.
  remarks: "When <xref:System.Runtime.InteropServices.SafeBuffer.AcquirePointer%2A> returns, you should perform bounds checking by verifying that the `pointer` parameter is `null`. If it is not `null`, you must call the <xref:System.Runtime.InteropServices.SafeBuffer.ReleasePointer%2A?displayProperty=fullName> method in a constrained execution region (CER).  \n  \n <xref:System.Runtime.InteropServices.SafeBuffer.AcquirePointer%2A> calls the <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A?displayProperty=fullName> method and exposes the pointer. Unlike the <xref:System.Runtime.InteropServices.SafeBuffer.Read%2A> method, it does not change the current position of the pointer.  \n  \n The following exampledemonstrates how to use the <xref:System.Runtime.InteropServices.SafeBuffer.AcquirePointer%2A> method:  \n  \n```  \nbyte* pointer = null;  \nRuntimeHelpers.PrepareConstrainedRegions();  \ntry {  \n    MySafeBuffer.AcquirePointer(ref pointer);  \n    // Use pointer here, with your own bounds checking.  \n    }  \nfinally {  \n    if (pointer != null)  \n        MySafeBuffer.ReleasePointer();  \n    }  \n```  \n  \n If you cast `pointer` (which is a pointer to a byte) as a pointer to a different type (T*), you may have pointer alignment issues.  \n  \n You must take responsibility for all bounds checking with this pointer."
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public void AcquirePointer (ref byte* pointer);
    parameters:
    - id: pointer
      type: System.Byte*
      description: A byte pointer, passed by reference, to receive the pointer from within the <xref href="System.Runtime.InteropServices.SafeBuffer"></xref> object. You must set this pointer to `null` before you call this method.
  overload: System.Runtime.InteropServices.SafeBuffer.AcquirePointer*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <xref href="System.Runtime.InteropServices.SafeBuffer.Initialize*"></xref> method has not been called.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeBuffer.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.SafeBuffer.ByteLength
  commentId: P:System.Runtime.InteropServices.SafeBuffer.ByteLength
  id: ByteLength
  parent: System.Runtime.InteropServices.SafeBuffer
  langs:
  - csharp
  name: ByteLength
  nameWithType: SafeBuffer.ByteLength
  fullName: SafeBuffer.ByteLength
  type: Property
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Gets the size of the buffer, in bytes.
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public ulong ByteLength { get; }
    return:
      type: System.UInt64
      description: The number of bytes in the memory buffer.
  overload: System.Runtime.InteropServices.SafeBuffer.ByteLength*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <xref href="System.Runtime.InteropServices.SafeBuffer.Initialize*"></xref> method has not been called.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeBuffer.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt64)
  commentId: M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt64)
  id: Initialize(System.UInt64)
  parent: System.Runtime.InteropServices.SafeBuffer
  langs:
  - csharp
  name: Initialize(UInt64)
  nameWithType: SafeBuffer.Initialize(UInt64)
  fullName: SafeBuffer.Initialize(UInt64)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Defines the allocation size of the memory region in bytes. You must call this method before you use the <xref href="System.Runtime.InteropServices.SafeBuffer"></xref> instance.
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public void Initialize (ulong numBytes);
    parameters:
    - id: numBytes
      type: System.UInt64
      description: The number of bytes in the buffer.
  overload: System.Runtime.InteropServices.SafeBuffer.Initialize*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>numBytes</code> is less than zero.  \n  \n -or-  \n  \n <code>numBytes</code> is greater than the available address space."
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeBuffer.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)
  commentId: M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)
  id: Initialize(System.UInt32,System.UInt32)
  parent: System.Runtime.InteropServices.SafeBuffer
  langs:
  - csharp
  name: Initialize(UInt32, UInt32)
  nameWithType: SafeBuffer.Initialize(UInt32, UInt32)
  fullName: SafeBuffer.Initialize(UInt32, UInt32)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Specifies the allocation size of the memory buffer by using the specified number of elements and element size. You must call this method before you use the <xref href="System.Runtime.InteropServices.SafeBuffer"></xref> instance.
  remarks: This method defines the required size of the memory region as the number of elements in an array multiplied by the size of each element.
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public void Initialize (uint numElements, uint sizeOfEachElement);
    parameters:
    - id: numElements
      type: System.UInt32
      description: The number of elements in the buffer.
    - id: sizeOfEachElement
      type: System.UInt32
      description: The size of each element in the buffer.
  overload: System.Runtime.InteropServices.SafeBuffer.Initialize*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>numElements</code> is less than zero.  \n  \n -or-  \n  \n <code>sizeOfEachElement</code> is less than zero.  \n  \n -or-  \n  \n <code>numElements</code> multiplied by <code>sizeOfEachElement</code> is greater than the available address space."
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeBuffer.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.SafeBuffer.Initialize``1(System.UInt32)
  commentId: M:System.Runtime.InteropServices.SafeBuffer.Initialize``1(System.UInt32)
  id: Initialize``1(System.UInt32)
  parent: System.Runtime.InteropServices.SafeBuffer
  langs:
  - csharp
  name: Initialize<T>(UInt32)
  nameWithType: SafeBuffer.Initialize<T>(UInt32)
  fullName: SafeBuffer.Initialize<T>(UInt32)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Defines the allocation size of the memory region by specifying the number of value types. You must call this method before you use the <xref href="System.Runtime.InteropServices.SafeBuffer"></xref> instance.
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public void Initialize<T> (uint numElements) where T : struct;
    parameters:
    - id: numElements
      type: System.UInt32
      description: The number of elements of the value type to allocate memory for.
    typeParameters:
    - id: T
      description: The value type to allocate memory for.
  overload: System.Runtime.InteropServices.SafeBuffer.Initialize``1*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>numElements</code> is less than zero.  \n  \n -or-  \n  \n <code>numElements</code> multiplied by the size of each element is greater than the available address space."
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeBuffer.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.SafeBuffer.IsInvalid
  commentId: P:System.Runtime.InteropServices.SafeBuffer.IsInvalid
  id: IsInvalid
  parent: System.Runtime.InteropServices.SafeBuffer
  langs:
  - csharp
  name: IsInvalid
  nameWithType: SafeBuffer.IsInvalid
  fullName: SafeBuffer.IsInvalid
  type: Property
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  syntax:
    content: public override bool IsInvalid { get; }
    return:
      type: System.Boolean
      description: ''
  overload: System.Runtime.InteropServices.SafeBuffer.IsInvalid*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeBuffer.xml
- uid: System.Runtime.InteropServices.SafeBuffer.Read``1(System.UInt64)
  commentId: M:System.Runtime.InteropServices.SafeBuffer.Read``1(System.UInt64)
  id: Read``1(System.UInt64)
  parent: System.Runtime.InteropServices.SafeBuffer
  langs:
  - csharp
  name: Read<T>(UInt64)
  nameWithType: SafeBuffer.Read<T>(UInt64)
  fullName: SafeBuffer.Read<T>(UInt64)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Reads a value type from memory at the specified offset.
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public T Read<T> (ulong byteOffset) where T : struct;
    parameters:
    - id: byteOffset
      type: System.UInt64
      description: The location from which to read the value type. You may have to consider alignment issues.
    typeParameters:
    - id: T
      description: The value type to read.
    return:
      type: T
      description: The value type that was read from memory.
  overload: System.Runtime.InteropServices.SafeBuffer.Read``1*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <xref href="System.Runtime.InteropServices.SafeBuffer.Initialize*"></xref> method has not been called.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeBuffer.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)
  commentId: M:System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)
  id: ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)
  parent: System.Runtime.InteropServices.SafeBuffer
  langs:
  - csharp
  name: ReadArray<T>(UInt64, T[], Int32, Int32)
  nameWithType: SafeBuffer.ReadArray<T>(UInt64, T[], Int32, Int32)
  fullName: SafeBuffer.ReadArray<T>(UInt64, T[], Int32, Int32)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Reads the specified number of value types from memory starting at the offset, and writes them into an array starting at the index.
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public void ReadArray<T> (ulong byteOffset, T[] array, int index, int count) where T : struct;
    parameters:
    - id: byteOffset
      type: System.UInt64
      description: The location from which to start reading.
    - id: array
      type: T[]
      description: The output array to write to.
    - id: index
      type: System.Int32
      description: The location in the output array to begin writing to.
    - id: count
      type: System.Int32
      description: The number of value types to read from the input array and to write to the output array.
    typeParameters:
    - id: T
      description: The value type to read.
  overload: System.Runtime.InteropServices.SafeBuffer.ReadArray``1*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> is less than zero.  \n  \n -or-  \n  \n <code>count</code> is less than zero."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The length of the array minus the index is less than <code>count</code>.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <xref href="System.Runtime.InteropServices.SafeBuffer.Initialize*"></xref> method has not been called.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeBuffer.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.SafeBuffer.ReleasePointer
  commentId: M:System.Runtime.InteropServices.SafeBuffer.ReleasePointer
  id: ReleasePointer
  parent: System.Runtime.InteropServices.SafeBuffer
  langs:
  - csharp
  name: ReleasePointer()
  nameWithType: SafeBuffer.ReleasePointer()
  fullName: SafeBuffer.ReleasePointer()
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Releases a pointer that was obtained by the <xref href="System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)"></xref> method.
  remarks: After this method returns, the pointer cannot be used.
  syntax:
    content: public void ReleasePointer ();
    parameters: []
  overload: System.Runtime.InteropServices.SafeBuffer.ReleasePointer*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <xref href="System.Runtime.InteropServices.SafeBuffer.Initialize*"></xref> method has not been called.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeBuffer.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)
  commentId: M:System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)
  id: Write``1(System.UInt64,``0)
  parent: System.Runtime.InteropServices.SafeBuffer
  langs:
  - csharp
  name: Write<T>(UInt64, T)
  nameWithType: SafeBuffer.Write<T>(UInt64, T)
  fullName: SafeBuffer.Write<T>(UInt64, T)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Writes a value type to memory at the given location.
  remarks: "This method is equivalent to the following code:  \n  \n```  \n*(T*)(bytePtr + byteOffset) = value;  \n```"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public void Write<T> (ulong byteOffset, T value) where T : struct;
    parameters:
    - id: byteOffset
      type: System.UInt64
      description: The location at which to start writing. You may have to consider alignment issues.
    - id: value
      type: T
      description: The value to write.
    typeParameters:
    - id: T
      description: The value type to write.
  overload: System.Runtime.InteropServices.SafeBuffer.Write``1*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <xref href="System.Runtime.InteropServices.SafeBuffer.Initialize*"></xref> method has not been called.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeBuffer.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)
  commentId: M:System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)
  id: WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)
  parent: System.Runtime.InteropServices.SafeBuffer
  langs:
  - csharp
  name: WriteArray<T>(UInt64, T[], Int32, Int32)
  nameWithType: SafeBuffer.WriteArray<T>(UInt64, T[], Int32, Int32)
  fullName: SafeBuffer.WriteArray<T>(UInt64, T[], Int32, Int32)
  type: Method
  assemblies:
  - System.Runtime.InteropServices
  - mscorlib
  - netstandard
  namespace: System.Runtime.InteropServices
  summary: Writes the specified number of value types to a memory location by reading bytes starting from the specified location in the input array.
  remarks: Each element in the input array consists of the generic value type of the class.
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public void WriteArray<T> (ulong byteOffset, T[] array, int index, int count) where T : struct;
    parameters:
    - id: byteOffset
      type: System.UInt64
      description: The location in memory to write to.
    - id: array
      type: T[]
      description: The input array.
    - id: index
      type: System.Int32
      description: The offset in the array to start reading from.
    - id: count
      type: System.Int32
      description: The number of value types to write.
    typeParameters:
    - id: T
      description: The value type to write.
  overload: System.Runtime.InteropServices.SafeBuffer.WriteArray``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>index</code> or <code>count</code> is less than zero.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The length of the input array minus <code>index</code> is less than <code>count</code>.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <xref href="System.Runtime.InteropServices.SafeBuffer.Initialize*"></xref> method has not been called.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeBuffer.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
references:
- uid: System.Runtime.InteropServices.SafeHandle
  parent: System.Runtime.InteropServices
  isExternal: false
  name: SafeHandle
  nameWithType: SafeHandle
  fullName: System.Runtime.InteropServices.SafeHandle
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.Runtime.InteropServices.SafeBuffer.#ctor(System.Boolean)
  parent: System.Runtime.InteropServices.SafeBuffer
  isExternal: false
  name: SafeBuffer(Boolean)
  nameWithType: SafeBuffer.SafeBuffer(Boolean)
  fullName: SafeBuffer.SafeBuffer(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)
  parent: System.Runtime.InteropServices.SafeBuffer
  isExternal: false
  name: AcquirePointer(Byte*)
  nameWithType: SafeBuffer.AcquirePointer(Byte*)
  fullName: SafeBuffer.AcquirePointer(Byte*)
- uid: System.Byte
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Byte*
  parent: System
  isExternal: false
  name: Byte*
  nameWithType: Byte*
  fullName: System.Byte*
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
  - name: '*'
    nameWithType: '*'
    fullName: '*'
- uid: System.Runtime.InteropServices.SafeBuffer.ByteLength
  parent: System.Runtime.InteropServices.SafeBuffer
  isExternal: false
  name: ByteLength
  nameWithType: SafeBuffer.ByteLength
  fullName: SafeBuffer.ByteLength
- uid: System.UInt64
  parent: System
  isExternal: false
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt64)
  parent: System.Runtime.InteropServices.SafeBuffer
  isExternal: false
  name: Initialize(UInt64)
  nameWithType: SafeBuffer.Initialize(UInt64)
  fullName: SafeBuffer.Initialize(UInt64)
- uid: System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)
  parent: System.Runtime.InteropServices.SafeBuffer
  isExternal: false
  name: Initialize(UInt32, UInt32)
  nameWithType: SafeBuffer.Initialize(UInt32, UInt32)
  fullName: SafeBuffer.Initialize(UInt32, UInt32)
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Runtime.InteropServices.SafeBuffer.Initialize``1(System.UInt32)
  parent: System.Runtime.InteropServices.SafeBuffer
  isExternal: false
  name: Initialize<T>(UInt32)
  nameWithType: SafeBuffer.Initialize<T>(UInt32)
  fullName: SafeBuffer.Initialize<T>(UInt32)
- uid: System.Runtime.InteropServices.SafeBuffer.IsInvalid
  parent: System.Runtime.InteropServices.SafeBuffer
  isExternal: false
  name: IsInvalid
  nameWithType: SafeBuffer.IsInvalid
  fullName: SafeBuffer.IsInvalid
- uid: System.Runtime.InteropServices.SafeBuffer.Read``1(System.UInt64)
  parent: System.Runtime.InteropServices.SafeBuffer
  isExternal: false
  name: Read<T>(UInt64)
  nameWithType: SafeBuffer.Read<T>(UInt64)
  fullName: SafeBuffer.Read<T>(UInt64)
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)
  parent: System.Runtime.InteropServices.SafeBuffer
  isExternal: false
  name: ReadArray<T>(UInt64, T[], Int32, Int32)
  nameWithType: SafeBuffer.ReadArray<T>(UInt64, T[], Int32, Int32)
  fullName: SafeBuffer.ReadArray<T>(UInt64, T[], Int32, Int32)
- uid: T[]
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  spec.csharp:
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Runtime.InteropServices.SafeBuffer.ReleasePointer
  parent: System.Runtime.InteropServices.SafeBuffer
  isExternal: false
  name: ReleasePointer()
  nameWithType: SafeBuffer.ReleasePointer()
  fullName: SafeBuffer.ReleasePointer()
- uid: System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)
  parent: System.Runtime.InteropServices.SafeBuffer
  isExternal: false
  name: Write<T>(UInt64, T)
  nameWithType: SafeBuffer.Write<T>(UInt64, T)
  fullName: SafeBuffer.Write<T>(UInt64, T)
- uid: System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)
  parent: System.Runtime.InteropServices.SafeBuffer
  isExternal: false
  name: WriteArray<T>(UInt64, T[], Int32, Int32)
  nameWithType: SafeBuffer.WriteArray<T>(UInt64, T[], Int32, Int32)
  fullName: SafeBuffer.WriteArray<T>(UInt64, T[], Int32, Int32)
- uid: System.Runtime.InteropServices.SafeBuffer.#ctor*
  parent: System.Runtime.InteropServices.SafeBuffer
  isExternal: false
  name: SafeBuffer
  nameWithType: SafeBuffer.SafeBuffer
  fullName: SafeBuffer.SafeBuffer
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeBuffer.xml
- uid: System.Runtime.InteropServices.SafeBuffer.AcquirePointer*
  parent: System.Runtime.InteropServices.SafeBuffer
  isExternal: false
  name: AcquirePointer
  nameWithType: SafeBuffer.AcquirePointer
  fullName: SafeBuffer.AcquirePointer
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeBuffer.xml
- uid: System.Runtime.InteropServices.SafeBuffer.ByteLength*
  parent: System.Runtime.InteropServices.SafeBuffer
  isExternal: false
  name: ByteLength
  nameWithType: SafeBuffer.ByteLength
  fullName: SafeBuffer.ByteLength
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeBuffer.xml
- uid: System.Runtime.InteropServices.SafeBuffer.Initialize*
  parent: System.Runtime.InteropServices.SafeBuffer
  isExternal: false
  name: Initialize
  nameWithType: SafeBuffer.Initialize
  fullName: SafeBuffer.Initialize
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeBuffer.xml
- uid: System.Runtime.InteropServices.SafeBuffer.Initialize``1*
  parent: System.Runtime.InteropServices.SafeBuffer
  isExternal: false
  name: Initialize<T>
  nameWithType: SafeBuffer.Initialize<T>
  fullName: SafeBuffer.Initialize<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeBuffer.xml
- uid: System.Runtime.InteropServices.SafeBuffer.IsInvalid*
  parent: System.Runtime.InteropServices.SafeBuffer
  isExternal: false
  name: IsInvalid
  nameWithType: SafeBuffer.IsInvalid
  fullName: SafeBuffer.IsInvalid
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeBuffer.xml
- uid: System.Runtime.InteropServices.SafeBuffer.Read``1*
  parent: System.Runtime.InteropServices.SafeBuffer
  isExternal: false
  name: Read<T>
  nameWithType: SafeBuffer.Read<T>
  fullName: SafeBuffer.Read<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeBuffer.xml
- uid: System.Runtime.InteropServices.SafeBuffer.ReadArray``1*
  parent: System.Runtime.InteropServices.SafeBuffer
  isExternal: false
  name: ReadArray<T>
  nameWithType: SafeBuffer.ReadArray<T>
  fullName: SafeBuffer.ReadArray<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeBuffer.xml
- uid: System.Runtime.InteropServices.SafeBuffer.ReleasePointer*
  parent: System.Runtime.InteropServices.SafeBuffer
  isExternal: false
  name: ReleasePointer
  nameWithType: SafeBuffer.ReleasePointer
  fullName: SafeBuffer.ReleasePointer
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeBuffer.xml
- uid: System.Runtime.InteropServices.SafeBuffer.Write``1*
  parent: System.Runtime.InteropServices.SafeBuffer
  isExternal: false
  name: Write<T>
  nameWithType: SafeBuffer.Write<T>
  fullName: SafeBuffer.Write<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeBuffer.xml
- uid: System.Runtime.InteropServices.SafeBuffer.WriteArray``1*
  parent: System.Runtime.InteropServices.SafeBuffer
  isExternal: false
  name: WriteArray<T>
  nameWithType: SafeBuffer.WriteArray<T>
  fullName: SafeBuffer.WriteArray<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeBuffer.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
- uid: System.Runtime.InteropServices.SafeHandle.Close
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: Close()
  nameWithType: SafeHandle.Close()
  fullName: SafeHandle.Close()
- uid: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: DangerousAddRef(Boolean)
  nameWithType: SafeHandle.DangerousAddRef(Boolean)
  fullName: SafeHandle.DangerousAddRef(Boolean)
- uid: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: DangerousGetHandle()
  nameWithType: SafeHandle.DangerousGetHandle()
  fullName: SafeHandle.DangerousGetHandle()
- uid: System.Runtime.InteropServices.SafeHandle.DangerousRelease
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: DangerousRelease()
  nameWithType: SafeHandle.DangerousRelease()
  fullName: SafeHandle.DangerousRelease()
- uid: System.Runtime.InteropServices.SafeHandle.Dispose
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: Dispose()
  nameWithType: SafeHandle.Dispose()
  fullName: SafeHandle.Dispose()
- uid: System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: SafeHandle.Dispose(Boolean)
  fullName: SafeHandle.Dispose(Boolean)
- uid: System.Runtime.InteropServices.SafeHandle.handle
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: handle
  nameWithType: SafeHandle.handle
  fullName: SafeHandle.handle
- uid: System.Runtime.InteropServices.SafeHandle.IsClosed
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: IsClosed
  nameWithType: SafeHandle.IsClosed
  fullName: SafeHandle.IsClosed
- uid: System.Runtime.InteropServices.SafeHandle.ReleaseHandle
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: ReleaseHandle()
  nameWithType: SafeHandle.ReleaseHandle()
  fullName: SafeHandle.ReleaseHandle()
- uid: System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: SetHandle(IntPtr)
  nameWithType: SafeHandle.SetHandle(IntPtr)
  fullName: SafeHandle.SetHandle(IntPtr)
- uid: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: SetHandleAsInvalid()
  nameWithType: SafeHandle.SetHandleAsInvalid()
  fullName: SafeHandle.SetHandleAsInvalid()
