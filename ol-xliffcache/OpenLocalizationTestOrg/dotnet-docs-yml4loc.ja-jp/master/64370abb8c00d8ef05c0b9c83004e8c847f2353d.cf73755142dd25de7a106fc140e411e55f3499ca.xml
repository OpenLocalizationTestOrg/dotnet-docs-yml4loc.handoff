{"nodes":[{"content":"Represents an access control list (ACL) and is the base class for the <xref href=\"System.Security.AccessControl.DiscretionaryAcl\"></xref> and <xref href=\"System.Security.AccessControl.SystemAcl\"></xref> classes.","nodes":[{"pos":[0,211],"content":"Represents an access control list (ACL) and is the base class for the <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.DiscretionaryAcl\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"System.Security.AccessControl.SystemAcl\"&gt;&lt;/xref&gt;</ph> classes.","source":"Represents an access control list (ACL) and is the base class for the <xref href=\"System.Security.AccessControl.DiscretionaryAcl\"></xref> and <xref href=\"System.Security.AccessControl.SystemAcl\"></xref> classes."}],"pos":[1041,1253],"yaml":true},{"content":"-   Certain combinations of inheritance and access mask flags are meaningless:  \n  \n-   Any access control entry (ACE) with a zero-access mask is removed.  \n  \n-   Inherit-only ACEs inside object ACLs are removed.  \n  \n-   <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>, <xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>, <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit>, and <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flags on all ACEs in leaf object ACLs are cleared.  \n  \n-   ACEs that have an <xref:System.Security.AccessControl.PropagationFlags.InheritOnly> flag in the absence of the <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> or <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag are meaningless; they are removed.  \n  \n-   The <xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit> flag in the absence of the <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> or <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag can be removed.  \n  \n-   ACEs that have an <xref:System.Security.AccessControl.AuditFlags> value of <xref:System.Security.AccessControl.AuditFlags.Success> or <xref:System.Security.AccessControl.AuditFlags.Failure> in discretionary access control lists (DACLs) are removed.  \n  \n-   Any audit ACE that does not specify either <xref:System.Security.AccessControl.AuditFlags.Success> or <xref:System.Security.AccessControl.AuditFlags.Failure> is removed.  \n  \n-   On DACLs, SystemAudit and SystemAlarm ACEs are removed.  \n  \n-   On system access control lists (SACLs), AccessAllowed and AccessDenied ACEs are removed.  \n  \n Canonical order is maintained according to the following algorithm:  \n  \n-   Explicit ACEs take precedence over inherited ACEs; this rule applies to both DACLs and SACLs.  \n  \n-   In DACLs, among the explicit ACEs, ACEs that deny access take precedence over ACEs that allow access. For directory object ACLs, the nonobject ACEs come before object ACEs.  \n  \n-   All common ACEs take precedence over noncommon ACEs.  \n  \n-   Inherited ACEs maintain their relative order after canonicity.  \n  \n-   Unrecognized and custom ACEs are disallowed in both DACLs and SACLs.  \n  \n-   Within contiguous ranges (explicit AccessDenied and AccessAllowed ACEs on DACLs, all explicit ACEs on SACLs), the ACEs are sorted by using the <xref:System.Security.Principal.SecurityIdentifier.CompareTo%2A> methods of the <xref:System.Security.Principal.SecurityIdentifier> objects associated with the ACEs.  \n  \n Adjacent ACEs are combined, if appropriate.  This reduces the size of the ACL without affecting the access control semantics it grants.","nodes":[{"pos":[4,78],"content":"Certain combinations of inheritance and access mask flags are meaningless:","nodes":[{"content":"Certain combinations of inheritance and access mask flags are meaningless:","pos":[0,74]}]},{"pos":[88,154],"content":"Any access control entry (ACE) with a zero-access mask is removed.","nodes":[{"content":"Any access control entry (ACE) with a zero-access mask is removed.","pos":[0,66]}]},{"pos":[164,213],"content":"Inherit-only ACEs inside object ACLs are removed.","nodes":[{"content":"Inherit-only ACEs inside object ACLs are removed.","pos":[0,49]}]},{"pos":[223,558],"content":"<xref:System.Security.AccessControl.PropagationFlags.InheritOnly>, <xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>, <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit>, and <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flags on all ACEs in leaf object ACLs are cleared.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Security.AccessControl.PropagationFlags.InheritOnly&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit&gt;</ph> flags on all ACEs in leaf object ACLs are cleared.","pos":[0,335],"source":"<xref:System.Security.AccessControl.PropagationFlags.InheritOnly>, <xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>, <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit>, and <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flags on all ACEs in leaf object ACLs are cleared."}]},{"pos":[568,860],"content":"ACEs that have an <xref:System.Security.AccessControl.PropagationFlags.InheritOnly> flag in the absence of the <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> or <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag are meaningless; they are removed.","nodes":[{"content":"ACEs that have an <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.PropagationFlags.InheritOnly&gt;</ph> flag in the absence of the <ph id=\"ph2\">&lt;xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit&gt;</ph> flag are meaningless; they are removed.","pos":[0,292],"source":"ACEs that have an <xref:System.Security.AccessControl.PropagationFlags.InheritOnly> flag in the absence of the <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> or <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag are meaningless; they are removed."}]},{"pos":[870,1136],"content":"The <xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit> flag in the absence of the <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> or <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag can be removed.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit&gt;</ph> flag in the absence of the <ph id=\"ph2\">&lt;xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit&gt;</ph> flag can be removed.","pos":[0,266],"source":"The <xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit> flag in the absence of the <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> or <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag can be removed."}]},{"pos":[1146,1394],"content":"ACEs that have an <xref:System.Security.AccessControl.AuditFlags> value of <xref:System.Security.AccessControl.AuditFlags.Success> or <xref:System.Security.AccessControl.AuditFlags.Failure> in discretionary access control lists (DACLs) are removed.","nodes":[{"content":"ACEs that have an <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.AuditFlags&gt;</ph> value of <ph id=\"ph2\">&lt;xref:System.Security.AccessControl.AuditFlags.Success&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Security.AccessControl.AuditFlags.Failure&gt;</ph> in discretionary access control lists (DACLs) are removed.","pos":[0,248],"source":"ACEs that have an <xref:System.Security.AccessControl.AuditFlags> value of <xref:System.Security.AccessControl.AuditFlags.Success> or <xref:System.Security.AccessControl.AuditFlags.Failure> in discretionary access control lists (DACLs) are removed."}]},{"pos":[1404,1573],"content":"Any audit ACE that does not specify either <xref:System.Security.AccessControl.AuditFlags.Success> or <xref:System.Security.AccessControl.AuditFlags.Failure> is removed.","nodes":[{"content":"Any audit ACE that does not specify either <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.AuditFlags.Success&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Security.AccessControl.AuditFlags.Failure&gt;</ph> is removed.","pos":[0,169],"source":"Any audit ACE that does not specify either <xref:System.Security.AccessControl.AuditFlags.Success> or <xref:System.Security.AccessControl.AuditFlags.Failure> is removed."}]},{"pos":[1583,1638],"content":"On DACLs, SystemAudit and SystemAlarm ACEs are removed.","nodes":[{"content":"On DACLs, SystemAudit and SystemAlarm ACEs are removed.","pos":[0,55]}]},{"pos":[1648,1736],"content":"On system access control lists (SACLs), AccessAllowed and AccessDenied ACEs are removed.","nodes":[{"content":"On system access control lists (SACLs), AccessAllowed and AccessDenied ACEs are removed.","pos":[0,88]}]},{"pos":[1743,1810],"content":"Canonical order is maintained according to the following algorithm:","nodes":[{"content":"Canonical order is maintained according to the following algorithm:","pos":[0,67]}]},{"pos":[1820,1913],"content":"Explicit ACEs take precedence over inherited ACEs; this rule applies to both DACLs and SACLs.","nodes":[{"content":"Explicit ACEs take precedence over inherited ACEs; this rule applies to both DACLs and SACLs.","pos":[0,93]}]},{"pos":[1923,2095],"content":"In DACLs, among the explicit ACEs, ACEs that deny access take precedence over ACEs that allow access. For directory object ACLs, the nonobject ACEs come before object ACEs.","nodes":[{"content":"In DACLs, among the explicit ACEs, ACEs that deny access take precedence over ACEs that allow access. For directory object ACLs, the nonobject ACEs come before object ACEs.","pos":[0,172],"nodes":[{"content":"In DACLs, among the explicit ACEs, ACEs that deny access take precedence over ACEs that allow access.","pos":[0,101]},{"content":"For directory object ACLs, the nonobject ACEs come before object ACEs.","pos":[102,172]}]}]},{"pos":[2105,2157],"content":"All common ACEs take precedence over noncommon ACEs.","nodes":[{"content":"All common ACEs take precedence over noncommon ACEs.","pos":[0,52]}]},{"pos":[2167,2229],"content":"Inherited ACEs maintain their relative order after canonicity.","nodes":[{"content":"Inherited ACEs maintain their relative order after canonicity.","pos":[0,62]}]},{"pos":[2239,2307],"content":"Unrecognized and custom ACEs are disallowed in both DACLs and SACLs.","nodes":[{"content":"Unrecognized and custom ACEs are disallowed in both DACLs and SACLs.","pos":[0,68]}]},{"pos":[2317,2625],"content":"Within contiguous ranges (explicit AccessDenied and AccessAllowed ACEs on DACLs, all explicit ACEs on SACLs), the ACEs are sorted by using the <xref:System.Security.Principal.SecurityIdentifier.CompareTo%2A> methods of the <xref:System.Security.Principal.SecurityIdentifier> objects associated with the ACEs.","nodes":[{"content":"Within contiguous ranges (explicit AccessDenied and AccessAllowed ACEs on DACLs, all explicit ACEs on SACLs), the ACEs are sorted by using the <ph id=\"ph1\">&lt;xref:System.Security.Principal.SecurityIdentifier.CompareTo%2A&gt;</ph> methods of the <ph id=\"ph2\">&lt;xref:System.Security.Principal.SecurityIdentifier&gt;</ph> objects associated with the ACEs.","pos":[0,308],"source":"Within contiguous ranges (explicit AccessDenied and AccessAllowed ACEs on DACLs, all explicit ACEs on SACLs), the ACEs are sorted by using the <xref:System.Security.Principal.SecurityIdentifier.CompareTo%2A> methods of the <xref:System.Security.Principal.SecurityIdentifier> objects associated with the ACEs."}]},{"pos":[2632,2767],"content":"Adjacent ACEs are combined, if appropriate.  This reduces the size of the ACL without affecting the access control semantics it grants.","nodes":[{"content":"Adjacent ACEs are combined, if appropriate.  This reduces the size of the ACL without affecting the access control semantics it grants.","pos":[0,135],"nodes":[{"content":"Adjacent ACEs are combined, if appropriate.","pos":[0,43]},{"content":"This reduces the size of the ACL without affecting the access control semantics it grants.","pos":[45,135]}]}]}],"pos":[1264,4068],"yaml":true,"extradata":"MT"},{"content":"Gets the length, in bytes, of the binary representation of the current <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object. This length should be used before marshaling the access control list (ACL) into a binary array by using the <xref href=\"System.Security.AccessControl.CommonAcl.GetBinaryForm(System.Byte[],System.Int32)\"></xref> method.","nodes":[{"pos":[0,358],"content":"Gets the length, in bytes, of the binary representation of the current <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object. This length should be used before marshaling the access control list (ACL) into a binary array by using the <xref href=\"System.Security.AccessControl.CommonAcl.GetBinaryForm(System.Byte[],System.Int32)\"></xref> method.","nodes":[{"content":"Gets the length, in bytes, of the binary representation of the current <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.CommonAcl\"&gt;&lt;/xref&gt;</ph> object.","pos":[0,139],"source":"Gets the length, in bytes, of the binary representation of the current <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object."},{"content":"This length should be used before marshaling the access control list (ACL) into a binary array by using the <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.CommonAcl.GetBinaryForm(System.Byte[],System.Int32)\"&gt;&lt;/xref&gt;</ph> method.","pos":[140,358],"source":" This length should be used before marshaling the access control list (ACL) into a binary array by using the <xref href=\"System.Security.AccessControl.CommonAcl.GetBinaryForm(System.Byte[],System.Int32)\"></xref> method."}]}],"pos":[6834,7193],"yaml":true},{"content":"The length, in bytes, of the binary representation of the current <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object.","nodes":[{"pos":[0,134],"content":"The length, in bytes, of the binary representation of the current <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.CommonAcl\"&gt;&lt;/xref&gt;</ph> object.","source":"The length, in bytes, of the binary representation of the current <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object."}],"pos":[7321,7456],"yaml":true},{"content":"Gets the number of access control entries (ACEs) in the current <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object.","nodes":[{"pos":[0,132],"content":"Gets the number of access control entries (ACEs) in the current <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.CommonAcl\"&gt;&lt;/xref&gt;</ph> object.","source":"Gets the number of access control entries (ACEs) in the current <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object."}],"pos":[8698,8831],"yaml":true},{"content":"The number of ACEs in the current <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object.","nodes":[{"pos":[0,102],"content":"The number of ACEs in the current <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.CommonAcl\"&gt;&lt;/xref&gt;</ph> object.","source":"The number of ACEs in the current <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object."}],"pos":[8952,9055],"yaml":true},{"content":"Marshals the contents of the <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object into the specified byte array beginning at the specified offset.","nodes":[{"pos":[0,161],"content":"Marshals the contents of the <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.CommonAcl\"&gt;&lt;/xref&gt;</ph> object into the specified byte array beginning at the specified offset.","source":"Marshals the contents of the <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object into the specified byte array beginning at the specified offset."}],"pos":[10465,10627],"yaml":true},{"content":"The byte array into which the contents of the <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> is marshaled.","nodes":[{"pos":[0,120],"content":"The byte array into which the contents of the <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.CommonAcl\"&gt;&lt;/xref&gt;</ph> is marshaled.","source":"The byte array into which the contents of the <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> is marshaled."}],"pos":[10807,10928],"yaml":true},{"content":"The offset at which to start marshaling.","nodes":[{"pos":[0,40],"content":"The offset at which to start marshaling.","nodes":[{"content":"The offset at which to start marshaling.","pos":[0,40]}]}],"pos":[10989,11030],"yaml":true},{"content":"Gets a Boolean value that specifies whether the access control entries (ACEs) in the current <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object are in canonical order.","nodes":[{"pos":[0,184],"content":"Gets a Boolean value that specifies whether the access control entries (ACEs) in the current <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.CommonAcl\"&gt;&lt;/xref&gt;</ph> object are in canonical order.","source":"Gets a Boolean value that specifies whether the access control entries (ACEs) in the current <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object are in canonical order."}],"pos":[12309,12494],"yaml":true},{"content":"`true` if the ACEs in the current <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object are in canonical order; otherwise, `false`.","nodes":[{"pos":[0,145],"content":"<ph id=\"ph1\">`true`</ph> if the ACEs in the current <ph id=\"ph2\">&lt;xref href=\"System.Security.AccessControl.CommonAcl\"&gt;&lt;/xref&gt;</ph> object are in canonical order; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the ACEs in the current <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object are in canonical order; otherwise, `false`."}],"pos":[12608,12756],"yaml":true},{"content":"Sets whether the <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object is a container.","nodes":[{"pos":[0,100],"content":"Sets whether the <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.CommonAcl\"&gt;&lt;/xref&gt;</ph> object is a container.","source":"Sets whether the <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object is a container."}],"pos":[14033,14134],"yaml":true},{"content":"`true` if the current <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object is a container.","nodes":[{"pos":[0,105],"content":"<ph id=\"ph1\">`true`</ph> if the current <ph id=\"ph2\">&lt;xref href=\"System.Security.AccessControl.CommonAcl\"&gt;&lt;/xref&gt;</ph> object is a container.","source":"`true` if the current <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object is a container."}],"pos":[14248,14356],"yaml":true},{"content":"Sets whether the current <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object is a directory object access control list (ACL).","nodes":[{"pos":[0,141],"content":"Sets whether the current <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.CommonAcl\"&gt;&lt;/xref&gt;</ph> object is a directory object access control list (ACL).","source":"Sets whether the current <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object is a directory object access control list (ACL)."}],"pos":[15591,15733],"yaml":true},{"content":"`true` if the current <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object is a directory object ACL.","nodes":[{"pos":[0,116],"content":"<ph id=\"ph1\">`true`</ph> if the current <ph id=\"ph2\">&lt;xref href=\"System.Security.AccessControl.CommonAcl\"&gt;&lt;/xref&gt;</ph> object is a directory object ACL.","source":"`true` if the current <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object is a directory object ACL."}],"pos":[15840,15959],"yaml":true},{"content":"Gets or sets the <xref href=\"System.Security.AccessControl.CommonAce\"></xref> at the specified index.","nodes":[{"pos":[0,101],"content":"Gets or sets the <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.CommonAce\"&gt;&lt;/xref&gt;</ph> at the specified index.","source":"Gets or sets the <xref href=\"System.Security.AccessControl.CommonAce\"></xref> at the specified index."}],"pos":[17250,17352],"yaml":true},{"content":"The zero-based index of the <xref href=\"System.Security.AccessControl.CommonAce\"></xref> to get or set.","nodes":[{"pos":[0,103],"content":"The zero-based index of the <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.CommonAce\"&gt;&lt;/xref&gt;</ph> to get or set.","source":"The zero-based index of the <xref href=\"System.Security.AccessControl.CommonAce\"></xref> to get or set."}],"pos":[17545,17649],"yaml":true},{"content":"The <xref href=\"System.Security.AccessControl.CommonAce\"></xref> at the specified index.","nodes":[{"pos":[0,88],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.CommonAce\"&gt;&lt;/xref&gt;</ph> at the specified index.","source":"The <xref href=\"System.Security.AccessControl.CommonAce\"></xref> at the specified index."}],"pos":[17733,17822],"yaml":true},{"content":"Removes all access control entries (ACEs) contained by this <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object that are associated with the specified <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref> object.","nodes":[{"pos":[0,240],"content":"Removes all access control entries (ACEs) contained by this <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.CommonAcl\"&gt;&lt;/xref&gt;</ph> object that are associated with the specified <ph id=\"ph2\">&lt;xref href=\"System.Security.Principal.SecurityIdentifier\"&gt;&lt;/xref&gt;</ph> object.","source":"Removes all access control entries (ACEs) contained by this <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object that are associated with the specified <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref> object."}],"pos":[19252,19493],"yaml":true},{"content":"The <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref> object to check for.","nodes":[{"pos":[0,90],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Security.Principal.SecurityIdentifier\"&gt;&lt;/xref&gt;</ph> object to check for.","source":"The <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref> object to check for."}],"pos":[19692,19783],"yaml":true},{"content":"Removes all inherited access control entries (ACEs) from this <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object.","nodes":[{"pos":[0,130],"content":"Removes all inherited access control entries (ACEs) from this <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.CommonAcl\"&gt;&lt;/xref&gt;</ph> object.","source":"Removes all inherited access control entries (ACEs) from this <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object."}],"pos":[21106,21237],"yaml":true},{"content":"Gets the revision level of the <xref href=\"System.Security.AccessControl.CommonAcl\"></xref>.","nodes":[{"pos":[0,92],"content":"Gets the revision level of the <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.CommonAcl\"&gt;&lt;/xref&gt;</ph>.","source":"Gets the revision level of the <xref href=\"System.Security.AccessControl.CommonAcl\"></xref>."}],"pos":[22582,22675],"yaml":true},{"content":"A byte value that specifies the revision level of the <xref href=\"System.Security.AccessControl.CommonAcl\"></xref>.","nodes":[{"pos":[0,115],"content":"A byte value that specifies the revision level of the <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.CommonAcl\"&gt;&lt;/xref&gt;</ph>.","source":"A byte value that specifies the revision level of the <xref href=\"System.Security.AccessControl.CommonAcl\"></xref>."}],"pos":[22799,22915],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.AccessControl.CommonAcl\n  commentId: T:System.Security.AccessControl.CommonAcl\n  id: CommonAcl\n  children:\n  - System.Security.AccessControl.CommonAcl.BinaryLength\n  - System.Security.AccessControl.CommonAcl.Count\n  - System.Security.AccessControl.CommonAcl.GetBinaryForm(System.Byte[],System.Int32)\n  - System.Security.AccessControl.CommonAcl.IsCanonical\n  - System.Security.AccessControl.CommonAcl.IsContainer\n  - System.Security.AccessControl.CommonAcl.IsDS\n  - System.Security.AccessControl.CommonAcl.Item(System.Int32)\n  - System.Security.AccessControl.CommonAcl.Purge(System.Security.Principal.SecurityIdentifier)\n  - System.Security.AccessControl.CommonAcl.RemoveInheritedAces\n  - System.Security.AccessControl.CommonAcl.Revision\n  langs:\n  - csharp\n  name: CommonAcl\n  nameWithType: CommonAcl\n  fullName: System.Security.AccessControl.CommonAcl\n  type: Class\n  assemblies:\n  - System.Security.AccessControl\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Represents an access control list (ACL) and is the base class for the <xref href=\"System.Security.AccessControl.DiscretionaryAcl\"></xref> and <xref href=\"System.Security.AccessControl.SystemAcl\"></xref> classes.\n  remarks: \"-   Certain combinations of inheritance and access mask flags are meaningless:  \\n  \\n-   Any access control entry (ACE) with a zero-access mask is removed.  \\n  \\n-   Inherit-only ACEs inside object ACLs are removed.  \\n  \\n-   <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>, <xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>, <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit>, and <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flags on all ACEs in leaf object ACLs are cleared.  \\n  \\n-   ACEs that have an <xref:System.Security.AccessControl.PropagationFlags.InheritOnly> flag in the absence of the <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> or <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag are meaningless; they are removed.  \\n  \\n-   The <xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit> flag in the absence of the <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> or <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag can be removed.  \\n  \\n-   ACEs that have an <xref:System.Security.AccessControl.AuditFlags> value of <xref:System.Security.AccessControl.AuditFlags.Success> or <xref:System.Security.AccessControl.AuditFlags.Failure> in discretionary access control lists (DACLs) are removed.  \\n  \\n-   Any audit ACE that does not specify either <xref:System.Security.AccessControl.AuditFlags.Success> or <xref:System.Security.AccessControl.AuditFlags.Failure> is removed.  \\n  \\n-   On DACLs, SystemAudit and SystemAlarm ACEs are removed.  \\n  \\n-   On system access control lists (SACLs), AccessAllowed and AccessDenied ACEs are removed.  \\n  \\n Canonical order is maintained according to the following algorithm:  \\n  \\n-   Explicit ACEs take precedence over inherited ACEs; this rule applies to both DACLs and SACLs.  \\n  \\n-   In DACLs, among the explicit ACEs, ACEs that deny access take precedence over ACEs that allow access. For directory object ACLs, the nonobject ACEs come before object ACEs.  \\n  \\n-   All common ACEs take precedence over noncommon ACEs.  \\n  \\n-   Inherited ACEs maintain their relative order after canonicity.  \\n  \\n-   Unrecognized and custom ACEs are disallowed in both DACLs and SACLs.  \\n  \\n-   Within contiguous ranges (explicit AccessDenied and AccessAllowed ACEs on DACLs, all explicit ACEs on SACLs), the ACEs are sorted by using the <xref:System.Security.Principal.SecurityIdentifier.CompareTo%2A> methods of the <xref:System.Security.Principal.SecurityIdentifier> objects associated with the ACEs.  \\n  \\n Adjacent ACEs are combined, if appropriate.  This reduces the size of the ACL without affecting the access control semantics it grants.\"\n  syntax:\n    content: 'public abstract class CommonAcl : System.Security.AccessControl.GenericAcl'\n  inheritance:\n  - System.Object\n  - System.Security.AccessControl.GenericAcl\n  derivedClasses:\n  - System.Security.AccessControl.DiscretionaryAcl\n  - System.Security.AccessControl.SystemAcl\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Security.AccessControl.GenericAcl.AclRevision\n  - System.Security.AccessControl.GenericAcl.AclRevisionDS\n  - System.Security.AccessControl.GenericAcl.CopyTo(System.Security.AccessControl.GenericAce[],System.Int32)\n  - System.Security.AccessControl.GenericAcl.GetEnumerator\n  - System.Security.AccessControl.GenericAcl.IsSynchronized\n  - System.Security.AccessControl.GenericAcl.MaxBinaryLength\n  - System.Security.AccessControl.GenericAcl.SyncRoot\n  - System.Security.AccessControl.GenericAcl.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  - System.Security.AccessControl.GenericAcl.System#Collections#IEnumerable#GetEnumerator\n  extensionMethods:\n  - System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  - System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  - System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  - System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonAcl.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.CommonAcl.BinaryLength\n  commentId: P:System.Security.AccessControl.CommonAcl.BinaryLength\n  id: BinaryLength\n  parent: System.Security.AccessControl.CommonAcl\n  langs:\n  - csharp\n  name: BinaryLength\n  nameWithType: CommonAcl.BinaryLength\n  fullName: CommonAcl.BinaryLength\n  type: Property\n  assemblies:\n  - System.Security.AccessControl\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Gets the length, in bytes, of the binary representation of the current <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object. This length should be used before marshaling the access control list (ACL) into a binary array by using the <xref href=\"System.Security.AccessControl.CommonAcl.GetBinaryForm(System.Byte[],System.Int32)\"></xref> method.\n  syntax:\n    content: public override sealed int BinaryLength { get; }\n    return:\n      type: System.Int32\n      description: The length, in bytes, of the binary representation of the current <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object.\n  overload: System.Security.AccessControl.CommonAcl.BinaryLength*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonAcl.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.CommonAcl.Count\n  commentId: P:System.Security.AccessControl.CommonAcl.Count\n  id: Count\n  parent: System.Security.AccessControl.CommonAcl\n  langs:\n  - csharp\n  name: Count\n  nameWithType: CommonAcl.Count\n  fullName: CommonAcl.Count\n  type: Property\n  assemblies:\n  - System.Security.AccessControl\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Gets the number of access control entries (ACEs) in the current <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object.\n  syntax:\n    content: public override sealed int Count { get; }\n    return:\n      type: System.Int32\n      description: The number of ACEs in the current <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object.\n  overload: System.Security.AccessControl.CommonAcl.Count*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonAcl.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.CommonAcl.GetBinaryForm(System.Byte[],System.Int32)\n  commentId: M:System.Security.AccessControl.CommonAcl.GetBinaryForm(System.Byte[],System.Int32)\n  id: GetBinaryForm(System.Byte[],System.Int32)\n  parent: System.Security.AccessControl.CommonAcl\n  langs:\n  - csharp\n  name: GetBinaryForm(Byte[], Int32)\n  nameWithType: CommonAcl.GetBinaryForm(Byte[], Int32)\n  fullName: CommonAcl.GetBinaryForm(Byte[], Int32)\n  type: Method\n  assemblies:\n  - System.Security.AccessControl\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Marshals the contents of the <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object into the specified byte array beginning at the specified offset.\n  syntax:\n    content: public override sealed void GetBinaryForm (byte[] binaryForm, int offset);\n    parameters:\n    - id: binaryForm\n      type: System.Byte[]\n      description: The byte array into which the contents of the <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> is marshaled.\n    - id: offset\n      type: System.Int32\n      description: The offset at which to start marshaling.\n  overload: System.Security.AccessControl.CommonAcl.GetBinaryForm*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonAcl.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.CommonAcl.IsCanonical\n  commentId: P:System.Security.AccessControl.CommonAcl.IsCanonical\n  id: IsCanonical\n  parent: System.Security.AccessControl.CommonAcl\n  langs:\n  - csharp\n  name: IsCanonical\n  nameWithType: CommonAcl.IsCanonical\n  fullName: CommonAcl.IsCanonical\n  type: Property\n  assemblies:\n  - System.Security.AccessControl\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Gets a Boolean value that specifies whether the access control entries (ACEs) in the current <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object are in canonical order.\n  syntax:\n    content: public bool IsCanonical { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the ACEs in the current <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object are in canonical order; otherwise, `false`.'\n  overload: System.Security.AccessControl.CommonAcl.IsCanonical*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonAcl.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.CommonAcl.IsContainer\n  commentId: P:System.Security.AccessControl.CommonAcl.IsContainer\n  id: IsContainer\n  parent: System.Security.AccessControl.CommonAcl\n  langs:\n  - csharp\n  name: IsContainer\n  nameWithType: CommonAcl.IsContainer\n  fullName: CommonAcl.IsContainer\n  type: Property\n  assemblies:\n  - System.Security.AccessControl\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Sets whether the <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object is a container.\n  syntax:\n    content: public bool IsContainer { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the current <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object is a container.'\n  overload: System.Security.AccessControl.CommonAcl.IsContainer*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonAcl.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.CommonAcl.IsDS\n  commentId: P:System.Security.AccessControl.CommonAcl.IsDS\n  id: IsDS\n  parent: System.Security.AccessControl.CommonAcl\n  langs:\n  - csharp\n  name: IsDS\n  nameWithType: CommonAcl.IsDS\n  fullName: CommonAcl.IsDS\n  type: Property\n  assemblies:\n  - System.Security.AccessControl\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Sets whether the current <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object is a directory object access control list (ACL).\n  syntax:\n    content: public bool IsDS { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the current <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object is a directory object ACL.'\n  overload: System.Security.AccessControl.CommonAcl.IsDS*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonAcl.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.CommonAcl.Item(System.Int32)\n  commentId: P:System.Security.AccessControl.CommonAcl.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.Security.AccessControl.CommonAcl\n  langs:\n  - csharp\n  name: Item(Int32)\n  nameWithType: CommonAcl.Item(Int32)\n  fullName: CommonAcl.Item(Int32)\n  type: Property\n  assemblies:\n  - System.Security.AccessControl\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Gets or sets the <xref href=\"System.Security.AccessControl.CommonAce\"></xref> at the specified index.\n  syntax:\n    content: public override sealed System.Security.AccessControl.GenericAce this[int index] { get; set; }\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index of the <xref href=\"System.Security.AccessControl.CommonAce\"></xref> to get or set.\n    return:\n      type: System.Security.AccessControl.GenericAce\n      description: The <xref href=\"System.Security.AccessControl.CommonAce\"></xref> at the specified index.\n  overload: System.Security.AccessControl.CommonAcl.Item*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonAcl.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.CommonAcl.Purge(System.Security.Principal.SecurityIdentifier)\n  commentId: M:System.Security.AccessControl.CommonAcl.Purge(System.Security.Principal.SecurityIdentifier)\n  id: Purge(System.Security.Principal.SecurityIdentifier)\n  parent: System.Security.AccessControl.CommonAcl\n  langs:\n  - csharp\n  name: Purge(SecurityIdentifier)\n  nameWithType: CommonAcl.Purge(SecurityIdentifier)\n  fullName: CommonAcl.Purge(SecurityIdentifier)\n  type: Method\n  assemblies:\n  - System.Security.AccessControl\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Removes all access control entries (ACEs) contained by this <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object that are associated with the specified <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref> object.\n  syntax:\n    content: public void Purge (System.Security.Principal.SecurityIdentifier sid);\n    parameters:\n    - id: sid\n      type: System.Security.Principal.SecurityIdentifier\n      description: The <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref> object to check for.\n  overload: System.Security.AccessControl.CommonAcl.Purge*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonAcl.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.CommonAcl.RemoveInheritedAces\n  commentId: M:System.Security.AccessControl.CommonAcl.RemoveInheritedAces\n  id: RemoveInheritedAces\n  parent: System.Security.AccessControl.CommonAcl\n  langs:\n  - csharp\n  name: RemoveInheritedAces()\n  nameWithType: CommonAcl.RemoveInheritedAces()\n  fullName: CommonAcl.RemoveInheritedAces()\n  type: Method\n  assemblies:\n  - System.Security.AccessControl\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Removes all inherited access control entries (ACEs) from this <xref href=\"System.Security.AccessControl.CommonAcl\"></xref> object.\n  syntax:\n    content: public void RemoveInheritedAces ();\n    parameters: []\n  overload: System.Security.AccessControl.CommonAcl.RemoveInheritedAces*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonAcl.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.CommonAcl.Revision\n  commentId: P:System.Security.AccessControl.CommonAcl.Revision\n  id: Revision\n  parent: System.Security.AccessControl.CommonAcl\n  langs:\n  - csharp\n  name: Revision\n  nameWithType: CommonAcl.Revision\n  fullName: CommonAcl.Revision\n  type: Property\n  assemblies:\n  - System.Security.AccessControl\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Gets the revision level of the <xref href=\"System.Security.AccessControl.CommonAcl\"></xref>.\n  syntax:\n    content: public override sealed byte Revision { get; }\n    return:\n      type: System.Byte\n      description: A byte value that specifies the revision level of the <xref href=\"System.Security.AccessControl.CommonAcl\"></xref>.\n  overload: System.Security.AccessControl.CommonAcl.Revision*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonAcl.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Security.AccessControl.GenericAcl\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: GenericAcl\n  nameWithType: GenericAcl\n  fullName: System.Security.AccessControl.GenericAcl\n- uid: System.Security.AccessControl.CommonAcl.BinaryLength\n  parent: System.Security.AccessControl.CommonAcl\n  isExternal: false\n  name: BinaryLength\n  nameWithType: CommonAcl.BinaryLength\n  fullName: CommonAcl.BinaryLength\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.AccessControl.CommonAcl.Count\n  parent: System.Security.AccessControl.CommonAcl\n  isExternal: false\n  name: Count\n  nameWithType: CommonAcl.Count\n  fullName: CommonAcl.Count\n- uid: System.Security.AccessControl.CommonAcl.GetBinaryForm(System.Byte[],System.Int32)\n  parent: System.Security.AccessControl.CommonAcl\n  isExternal: false\n  name: GetBinaryForm(Byte[], Int32)\n  nameWithType: CommonAcl.GetBinaryForm(Byte[], Int32)\n  fullName: CommonAcl.GetBinaryForm(Byte[], Int32)\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.AccessControl.CommonAcl.IsCanonical\n  parent: System.Security.AccessControl.CommonAcl\n  isExternal: false\n  name: IsCanonical\n  nameWithType: CommonAcl.IsCanonical\n  fullName: CommonAcl.IsCanonical\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.AccessControl.CommonAcl.IsContainer\n  parent: System.Security.AccessControl.CommonAcl\n  isExternal: false\n  name: IsContainer\n  nameWithType: CommonAcl.IsContainer\n  fullName: CommonAcl.IsContainer\n- uid: System.Security.AccessControl.CommonAcl.IsDS\n  parent: System.Security.AccessControl.CommonAcl\n  isExternal: false\n  name: IsDS\n  nameWithType: CommonAcl.IsDS\n  fullName: CommonAcl.IsDS\n- uid: System.Security.AccessControl.CommonAcl.Item(System.Int32)\n  parent: System.Security.AccessControl.CommonAcl\n  isExternal: false\n  name: Item(Int32)\n  nameWithType: CommonAcl.Item(Int32)\n  fullName: CommonAcl.Item(Int32)\n- uid: System.Security.AccessControl.GenericAce\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: GenericAce\n  nameWithType: GenericAce\n  fullName: System.Security.AccessControl.GenericAce\n- uid: System.Security.AccessControl.CommonAcl.Purge(System.Security.Principal.SecurityIdentifier)\n  parent: System.Security.AccessControl.CommonAcl\n  isExternal: false\n  name: Purge(SecurityIdentifier)\n  nameWithType: CommonAcl.Purge(SecurityIdentifier)\n  fullName: CommonAcl.Purge(SecurityIdentifier)\n- uid: System.Security.Principal.SecurityIdentifier\n  parent: System.Security.Principal\n  isExternal: false\n  name: SecurityIdentifier\n  nameWithType: SecurityIdentifier\n  fullName: System.Security.Principal.SecurityIdentifier\n- uid: System.Security.AccessControl.CommonAcl.RemoveInheritedAces\n  parent: System.Security.AccessControl.CommonAcl\n  isExternal: false\n  name: RemoveInheritedAces()\n  nameWithType: CommonAcl.RemoveInheritedAces()\n  fullName: CommonAcl.RemoveInheritedAces()\n- uid: System.Security.AccessControl.CommonAcl.Revision\n  parent: System.Security.AccessControl.CommonAcl\n  isExternal: false\n  name: Revision\n  nameWithType: CommonAcl.Revision\n  fullName: CommonAcl.Revision\n- uid: System.Security.AccessControl.CommonAcl.BinaryLength*\n  parent: System.Security.AccessControl.CommonAcl\n  isExternal: false\n  name: BinaryLength\n  nameWithType: CommonAcl.BinaryLength\n  fullName: CommonAcl.BinaryLength\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonAcl.xml\n- uid: System.Security.AccessControl.CommonAcl.Count*\n  parent: System.Security.AccessControl.CommonAcl\n  isExternal: false\n  name: Count\n  nameWithType: CommonAcl.Count\n  fullName: CommonAcl.Count\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonAcl.xml\n- uid: System.Security.AccessControl.CommonAcl.GetBinaryForm*\n  parent: System.Security.AccessControl.CommonAcl\n  isExternal: false\n  name: GetBinaryForm\n  nameWithType: CommonAcl.GetBinaryForm\n  fullName: CommonAcl.GetBinaryForm\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonAcl.xml\n- uid: System.Security.AccessControl.CommonAcl.IsCanonical*\n  parent: System.Security.AccessControl.CommonAcl\n  isExternal: false\n  name: IsCanonical\n  nameWithType: CommonAcl.IsCanonical\n  fullName: CommonAcl.IsCanonical\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonAcl.xml\n- uid: System.Security.AccessControl.CommonAcl.IsContainer*\n  parent: System.Security.AccessControl.CommonAcl\n  isExternal: false\n  name: IsContainer\n  nameWithType: CommonAcl.IsContainer\n  fullName: CommonAcl.IsContainer\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonAcl.xml\n- uid: System.Security.AccessControl.CommonAcl.IsDS*\n  parent: System.Security.AccessControl.CommonAcl\n  isExternal: false\n  name: IsDS\n  nameWithType: CommonAcl.IsDS\n  fullName: CommonAcl.IsDS\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonAcl.xml\n- uid: System.Security.AccessControl.CommonAcl.Item*\n  parent: System.Security.AccessControl.CommonAcl\n  isExternal: false\n  name: Item\n  nameWithType: CommonAcl.Item\n  fullName: CommonAcl.Item\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonAcl.xml\n- uid: System.Security.AccessControl.CommonAcl.Purge*\n  parent: System.Security.AccessControl.CommonAcl\n  isExternal: false\n  name: Purge\n  nameWithType: CommonAcl.Purge\n  fullName: CommonAcl.Purge\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonAcl.xml\n- uid: System.Security.AccessControl.CommonAcl.RemoveInheritedAces*\n  parent: System.Security.AccessControl.CommonAcl\n  isExternal: false\n  name: RemoveInheritedAces\n  nameWithType: CommonAcl.RemoveInheritedAces\n  fullName: CommonAcl.RemoveInheritedAces\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonAcl.xml\n- uid: System.Security.AccessControl.CommonAcl.Revision*\n  parent: System.Security.AccessControl.CommonAcl\n  isExternal: false\n  name: Revision\n  nameWithType: CommonAcl.Revision\n  fullName: CommonAcl.Revision\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonAcl.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Security.AccessControl.GenericAcl.AclRevision\n  parent: System.Security.AccessControl.GenericAcl\n  isExternal: false\n  name: AclRevision\n  nameWithType: GenericAcl.AclRevision\n  fullName: GenericAcl.AclRevision\n- uid: System.Security.AccessControl.GenericAcl.AclRevisionDS\n  parent: System.Security.AccessControl.GenericAcl\n  isExternal: false\n  name: AclRevisionDS\n  nameWithType: GenericAcl.AclRevisionDS\n  fullName: GenericAcl.AclRevisionDS\n- uid: System.Security.AccessControl.GenericAcl.CopyTo(System.Security.AccessControl.GenericAce[],System.Int32)\n  parent: System.Security.AccessControl.GenericAcl\n  isExternal: false\n  name: CopyTo(GenericAce[], Int32)\n  nameWithType: GenericAcl.CopyTo(GenericAce[], Int32)\n  fullName: GenericAcl.CopyTo(GenericAce[], Int32)\n- uid: System.Security.AccessControl.GenericAcl.GetEnumerator\n  parent: System.Security.AccessControl.GenericAcl\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: GenericAcl.GetEnumerator()\n  fullName: GenericAcl.GetEnumerator()\n- uid: System.Security.AccessControl.GenericAcl.IsSynchronized\n  parent: System.Security.AccessControl.GenericAcl\n  isExternal: false\n  name: IsSynchronized\n  nameWithType: GenericAcl.IsSynchronized\n  fullName: GenericAcl.IsSynchronized\n- uid: System.Security.AccessControl.GenericAcl.MaxBinaryLength\n  parent: System.Security.AccessControl.GenericAcl\n  isExternal: false\n  name: MaxBinaryLength\n  nameWithType: GenericAcl.MaxBinaryLength\n  fullName: GenericAcl.MaxBinaryLength\n- uid: System.Security.AccessControl.GenericAcl.SyncRoot\n  parent: System.Security.AccessControl.GenericAcl\n  isExternal: false\n  name: SyncRoot\n  nameWithType: GenericAcl.SyncRoot\n  fullName: GenericAcl.SyncRoot\n- uid: System.Security.AccessControl.GenericAcl.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  parent: System.Security.AccessControl.GenericAcl\n  isExternal: false\n  name: ICollection.CopyTo(Array, Int32)\n  nameWithType: GenericAcl.ICollection.CopyTo(Array, Int32)\n  fullName: GenericAcl.ICollection.CopyTo(Array, Int32)\n- uid: System.Security.AccessControl.GenericAcl.System#Collections#IEnumerable#GetEnumerator\n  parent: System.Security.AccessControl.GenericAcl\n  isExternal: false\n  name: IEnumerable.GetEnumerator()\n  nameWithType: GenericAcl.IEnumerable.GetEnumerator()\n  fullName: GenericAcl.IEnumerable.GetEnumerator()\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Cast<TResult>(IEnumerable)\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  fullName: Enumerable.Cast<TResult>(IEnumerable)\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OfType<TResult>(IEnumerable)\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  fullName: Enumerable.OfType<TResult>(IEnumerable)\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  parent: System.Linq.ParallelEnumerable\n  isExternal: false\n  name: AsParallel(IEnumerable)\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n  fullName: ParallelEnumerable.AsParallel(IEnumerable)\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: AsQueryable(IEnumerable)\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n  fullName: Queryable.AsQueryable(IEnumerable)\n"}