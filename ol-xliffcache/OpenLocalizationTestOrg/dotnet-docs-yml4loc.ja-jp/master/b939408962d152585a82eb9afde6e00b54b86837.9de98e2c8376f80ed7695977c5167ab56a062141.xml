{"nodes":[{"content":"Defines an iterator that accesses elements in a container in the reverse direction. Elements can be accessed in the forward direction by using the decrement operator and in the backward direction by using the increment operator. The element that the iterator points to can be both written to and read from any number of times. Reverse bidirectional iterators can be used anywhere that a reverse input or reverse output iterator is required.","nodes":[{"pos":[0,440],"content":"Defines an iterator that accesses elements in a container in the reverse direction. Elements can be accessed in the forward direction by using the decrement operator and in the backward direction by using the increment operator. The element that the iterator points to can be both written to and read from any number of times. Reverse bidirectional iterators can be used anywhere that a reverse input or reverse output iterator is required.","nodes":[{"content":"Defines an iterator that accesses elements in a container in the reverse direction. Elements can be accessed in the forward direction by using the decrement operator and in the backward direction by using the increment operator. The element that the iterator points to can be both written to and read from any number of times. Reverse bidirectional iterators can be used anywhere that a reverse input or reverse output iterator is required.","pos":[0,440],"nodes":[{"content":"Defines an iterator that accesses elements in a container in the reverse direction.","pos":[0,83]},{"content":"Elements can be accessed in the forward direction by using the decrement operator and in the backward direction by using the increment operator.","pos":[84,228]},{"content":"The element that the iterator points to can be both written to and read from any number of times.","pos":[229,326]},{"content":"Reverse bidirectional iterators can be used anywhere that a reverse input or reverse output iterator is required.","pos":[327,440]}]}]}],"pos":[3312,3753],"yaml":true},{"content":"[!INCLUDE[unnamed_parm](~/includes/unnamed-parm-md.md)]","nodes":[],"pos":[3764,3822],"yaml":true,"extradata":"MT"},{"content":"[!INCLUDE[cpp_iter_arg](~/includes/cpp-iter-arg-md.md)]","nodes":[],"pos":[4019,4077],"yaml":true},{"content":"Allocates and initializes a new <xref href=\"Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\"></xref> object.","nodes":[{"pos":[0,124],"content":"Allocates and initializes a new <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\"&gt;&lt;/xref&gt;</ph> object.","source":"Allocates and initializes a new <xref href=\"Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\"></xref> object."}],"pos":[5608,5733],"yaml":true},{"content":"Allocates and initializes a new <xref href=\"Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\"></xref> object from an existing <xref href=\"Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1\"></xref> object.","nodes":[{"pos":[0,227],"content":"Allocates and initializes a new <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\"&gt;&lt;/xref&gt;</ph> object from an existing <ph id=\"ph2\">&lt;xref href=\"Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1\"&gt;&lt;/xref&gt;</ph> object.","source":"Allocates and initializes a new <xref href=\"Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\"></xref> object from an existing <xref href=\"Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1\"></xref> object."}],"pos":[7310,7538],"yaml":true},{"content":"An existing <xref href=\"Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1\"></xref> object to copy.","nodes":[{"pos":[0,106],"content":"An existing <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1\"&gt;&lt;/xref&gt;</ph> object to copy.","source":"An existing <xref href=\"Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1\"></xref> object to copy."}],"pos":[7791,7898],"yaml":true},{"content":"Gets the underlying base iterator for the <xref href=\"Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\"></xref> object.","nodes":[{"pos":[0,134],"content":"Gets the underlying base iterator for the <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\"&gt;&lt;/xref&gt;</ph> object.","source":"Gets the underlying base iterator for the <xref href=\"Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\"></xref> object."}],"pos":[10781,10916],"yaml":true},{"content":"The underlying base iterator for the <xref href=\"Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\"></xref> object.","nodes":[{"pos":[0,129],"content":"The underlying base iterator for the <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\"&gt;&lt;/xref&gt;</ph> object.","source":"The underlying base iterator for the <xref href=\"Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\"></xref> object."}],"pos":[11139,11269],"yaml":true},{"content":"Returns a copy of the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\"></xref> object.","nodes":[{"pos":[0,122],"content":"Returns a copy of the current <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\"&gt;&lt;/xref&gt;</ph> object.","source":"Returns a copy of the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\"></xref> object."}],"pos":[12390,12513],"yaml":true},{"content":"A copy of the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\"></xref> object.","nodes":[{"pos":[0,114],"content":"A copy of the current <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\"&gt;&lt;/xref&gt;</ph> object.","source":"A copy of the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\"></xref> object."}],"pos":[12644,12759],"yaml":true},{"content":"Gets the container that the iterator is traversing.","nodes":[{"pos":[0,51],"content":"Gets the container that the iterator is traversing.","nodes":[{"content":"Gets the container that the iterator is traversing.","pos":[0,51]}]}],"pos":[13905,13957],"yaml":true},{"content":"The container that the iterator is traversing.","nodes":[{"pos":[0,46],"content":"The container that the iterator is traversing.","nodes":[{"content":"The container that the iterator is traversing.","pos":[0,46]}]}],"pos":[14092,14139],"yaml":true},{"content":"Determines whether the given <xref href=\"Microsoft.VisualC.StlClr.Generic.IInputIterator`1\"></xref> object is the same as the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\"></xref> object.","nodes":[{"pos":[0,226],"content":"Determines whether the given <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualC.StlClr.Generic.IInputIterator`1\"&gt;&lt;/xref&gt;</ph> object is the same as the current <ph id=\"ph2\">&lt;xref href=\"Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\"&gt;&lt;/xref&gt;</ph> object.","source":"Determines whether the given <xref href=\"Microsoft.VisualC.StlClr.Generic.IInputIterator`1\"></xref> object is the same as the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\"></xref> object."}],"pos":[15508,15735],"yaml":true},{"content":"The <xref href=\"Microsoft.VisualC.StlClr.Generic.IInputIterator`1\"></xref> object to compare with the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\"></xref> object.","nodes":[{"pos":[0,202],"content":"The <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualC.StlClr.Generic.IInputIterator`1\"&gt;&lt;/xref&gt;</ph> object to compare with the current <ph id=\"ph2\">&lt;xref href=\"Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\"&gt;&lt;/xref&gt;</ph> object.","source":"The <xref href=\"Microsoft.VisualC.StlClr.Generic.IInputIterator`1\"></xref> object to compare with the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\"></xref> object."}],"pos":[15967,16170],"yaml":true},{"content":"`true` if the two iterators are the same object; otherwise, `false`.","nodes":[{"pos":[0,68],"content":"<ph id=\"ph1\">`true`</ph> if the two iterators are the same object; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the two iterators are the same object; otherwise, `false`."}],"pos":[16228,16299],"yaml":true},{"content":"Decrements the iterator to the previous position in the underlying container, or to the first position in front of the beginning of container if the container has been completely traversed.","nodes":[{"pos":[0,189],"content":"Decrements the iterator to the previous position in the underlying container, or to the first position in front of the beginning of container if the container has been completely traversed.","nodes":[{"content":"Decrements the iterator to the previous position in the underlying container, or to the first position in front of the beginning of container if the container has been completely traversed.","pos":[0,189]}]}],"pos":[19169,19359],"yaml":true},{"content":"Decrements the iterator by one element. Decrementing a reverse iterator is the same as incrementing a regular iterator. This is the postfix version of the decrement operator.","nodes":[{"pos":[0,174],"content":"Decrements the iterator by one element. Decrementing a reverse iterator is the same as incrementing a regular iterator. This is the postfix version of the decrement operator.","nodes":[{"content":"Decrements the iterator by one element. Decrementing a reverse iterator is the same as incrementing a regular iterator. This is the postfix version of the decrement operator.","pos":[0,174],"nodes":[{"content":"Decrements the iterator by one element.","pos":[0,39]},{"content":"Decrementing a reverse iterator is the same as incrementing a regular iterator.","pos":[40,119]},{"content":"This is the postfix version of the decrement operator.","pos":[120,174]}]}]}],"pos":[22815,22990],"yaml":true},{"content":"An unused parameter that indicates this is the postfix version of the operator.","nodes":[{"pos":[0,79],"content":"An unused parameter that indicates this is the postfix version of the operator.","nodes":[{"content":"An unused parameter that indicates this is the postfix version of the operator.","pos":[0,79]}]}],"pos":[23362,23442],"yaml":true},{"content":"An iterator.","nodes":[{"pos":[0,12],"content":"An iterator.","nodes":[{"content":"An iterator.","pos":[0,12]}]}],"pos":[23549,23562],"yaml":true},{"content":"Decrements the iterator by one element. Decrementing a reverse iterator is the same as incrementing a regular iterator. This is the prefix version of the decrement operator.","nodes":[{"pos":[0,173],"content":"Decrements the iterator by one element. Decrementing a reverse iterator is the same as incrementing a regular iterator. This is the prefix version of the decrement operator.","nodes":[{"content":"Decrements the iterator by one element. Decrementing a reverse iterator is the same as incrementing a regular iterator. This is the prefix version of the decrement operator.","pos":[0,173],"nodes":[{"content":"Decrements the iterator by one element.","pos":[0,39]},{"content":"Decrementing a reverse iterator is the same as incrementing a regular iterator.","pos":[40,119]},{"content":"This is the prefix version of the decrement operator.","pos":[120,173]}]}]}],"pos":[25047,25221],"yaml":true},{"content":"An iterator.","nodes":[{"pos":[0,12],"content":"An iterator.","nodes":[{"content":"An iterator.","pos":[0,12]}]}],"pos":[25633,25646],"yaml":true},{"content":"Determines whether the given <xref href=\"Microsoft.VisualC.StlClr.Generic.IInputIterator`1\"></xref> object is the same as the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\"></xref> object.","nodes":[{"pos":[0,226],"content":"Determines whether the given <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualC.StlClr.Generic.IInputIterator`1\"&gt;&lt;/xref&gt;</ph> object is the same as the current <ph id=\"ph2\">&lt;xref href=\"Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\"&gt;&lt;/xref&gt;</ph> object.","source":"Determines whether the given <xref href=\"Microsoft.VisualC.StlClr.Generic.IInputIterator`1\"></xref> object is the same as the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\"></xref> object."}],"pos":[27038,27265],"yaml":true},{"content":"The equivalent method for this operator is <xref:Microsoft.VisualC.StlClr.%2A> Gene ric.ReverseBidirectionalIterator`1.Equals(Microsoft.VisualC.StlClr. Gene ric.IInputIterator{`0})?qualifyHint=True&autoUpgrade=False","nodes":[{"pos":[0,215],"content":"The equivalent method for this operator is <ph id=\"ph1\">&lt;xref:Microsoft.VisualC.StlClr.%2A&gt;</ph> Gene ric.ReverseBidirectionalIterator<ph id=\"ph2\">`1.Equals(Microsoft.VisualC.StlClr. Gene ric.IInputIterator{`</ph>0})?qualifyHint=True&amp;autoUpgrade=False","source":"The equivalent method for this operator is <xref:Microsoft.VisualC.StlClr.%2A> Gene ric.ReverseBidirectionalIterator`1.Equals(Microsoft.VisualC.StlClr. Gene ric.IInputIterator{`0})?qualifyHint=True&autoUpgrade=False"}],"pos":[27276,27492],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"Microsoft.VisualC.StlClr.Generic.IInputIterator`1\"></xref> object to compare with the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\"></xref> object.","nodes":[{"pos":[0,202],"content":"The <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualC.StlClr.Generic.IInputIterator`1\"&gt;&lt;/xref&gt;</ph> object to compare with the current <ph id=\"ph2\">&lt;xref href=\"Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\"&gt;&lt;/xref&gt;</ph> object.","source":"The <xref href=\"Microsoft.VisualC.StlClr.Generic.IInputIterator`1\"></xref> object to compare with the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\"></xref> object."}],"pos":[27858,28061],"yaml":true},{"content":"`true` if the two iterators are the same object; otherwise, `false`.","nodes":[{"pos":[0,68],"content":"<ph id=\"ph1\">`true`</ph> if the two iterators are the same object; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the two iterators are the same object; otherwise, `false`."}],"pos":[28119,28190],"yaml":true},{"content":"Increments the iterator by one element. Incrementing a reverse iterator is the same as decrementing a regular iterator. This is the prefix version of the increment operator.","nodes":[{"pos":[0,173],"content":"Increments the iterator by one element. Incrementing a reverse iterator is the same as decrementing a regular iterator. This is the prefix version of the increment operator.","nodes":[{"content":"Increments the iterator by one element. Incrementing a reverse iterator is the same as decrementing a regular iterator. This is the prefix version of the increment operator.","pos":[0,173],"nodes":[{"content":"Increments the iterator by one element.","pos":[0,39]},{"content":"Incrementing a reverse iterator is the same as decrementing a regular iterator.","pos":[40,119]},{"content":"This is the prefix version of the increment operator.","pos":[120,173]}]}]}],"pos":[33119,33293],"yaml":true},{"content":"An iterator.","nodes":[{"pos":[0,12],"content":"An iterator.","nodes":[{"content":"An iterator.","pos":[0,12]}]}],"pos":[33705,33718],"yaml":true},{"content":"Increments the iterator by one element. Incrementing a reverse iterator is the same as decrementing a regular iterator. This is the postfix version of the increment operator.","nodes":[{"pos":[0,174],"content":"Increments the iterator by one element. Incrementing a reverse iterator is the same as decrementing a regular iterator. This is the postfix version of the increment operator.","nodes":[{"content":"Increments the iterator by one element. Incrementing a reverse iterator is the same as decrementing a regular iterator. This is the postfix version of the increment operator.","pos":[0,174],"nodes":[{"content":"Increments the iterator by one element.","pos":[0,39]},{"content":"Incrementing a reverse iterator is the same as decrementing a regular iterator.","pos":[40,119]},{"content":"This is the postfix version of the increment operator.","pos":[120,174]}]}]}],"pos":[35263,35438],"yaml":true},{"content":"An unused parameter that indicates this is the postfix version of the operator.","nodes":[{"pos":[0,79],"content":"An unused parameter that indicates this is the postfix version of the operator.","nodes":[{"content":"An unused parameter that indicates this is the postfix version of the operator.","pos":[0,79]}]}],"pos":[35810,35890],"yaml":true},{"content":"An iterator.","nodes":[{"pos":[0,12],"content":"An iterator.","nodes":[{"content":"An iterator.","pos":[0,12]}]}],"pos":[35997,36010],"yaml":true},{"content":"Determines whether the given <xref href=\"Microsoft.VisualC.StlClr.Generic.IInputIterator`1\"></xref> object differs from the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\"></xref> object.","nodes":[{"pos":[0,224],"content":"Determines whether the given <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualC.StlClr.Generic.IInputIterator`1\"&gt;&lt;/xref&gt;</ph> object differs from the current <ph id=\"ph2\">&lt;xref href=\"Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\"&gt;&lt;/xref&gt;</ph> object.","source":"Determines whether the given <xref href=\"Microsoft.VisualC.StlClr.Generic.IInputIterator`1\"></xref> object differs from the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\"></xref> object."}],"pos":[37414,37639],"yaml":true},{"content":"The equivalent method for this operator is <xref:Microsoft.VisualC.StlClr.%2A> Gene ric.ReverseBidirectionalIterator`1.Compare(Microsoft.VisualC.StlClr. Gene ric.IInputIterator{`0})?qualifyHint=True&autoUpgrade=False","nodes":[{"pos":[0,216],"content":"The equivalent method for this operator is <ph id=\"ph1\">&lt;xref:Microsoft.VisualC.StlClr.%2A&gt;</ph> Gene ric.ReverseBidirectionalIterator<ph id=\"ph2\">`1.Compare(Microsoft.VisualC.StlClr. Gene ric.IInputIterator{`</ph>0})?qualifyHint=True&amp;autoUpgrade=False","source":"The equivalent method for this operator is <xref:Microsoft.VisualC.StlClr.%2A> Gene ric.ReverseBidirectionalIterator`1.Compare(Microsoft.VisualC.StlClr. Gene ric.IInputIterator{`0})?qualifyHint=True&autoUpgrade=False"}],"pos":[37650,37867],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"Microsoft.VisualC.StlClr.Generic.IInputIterator`1\"></xref> object to compare with the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\"></xref> object.","nodes":[{"pos":[0,202],"content":"The <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualC.StlClr.Generic.IInputIterator`1\"&gt;&lt;/xref&gt;</ph> object to compare with the current <ph id=\"ph2\">&lt;xref href=\"Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\"&gt;&lt;/xref&gt;</ph> object.","source":"The <xref href=\"Microsoft.VisualC.StlClr.Generic.IInputIterator`1\"></xref> object to compare with the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\"></xref> object."}],"pos":[38096,38299],"yaml":true},{"content":"`true` if the two iterators are different objects; otherwise, `false`.","nodes":[{"pos":[0,70],"content":"<ph id=\"ph1\">`true`</ph> if the two iterators are different objects; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the two iterators are different objects; otherwise, `false`."}],"pos":[38357,38430],"yaml":true},{"content":"Increments the iterator to the next position in the underlying container, or to the first position beyond the end of container if the container has been completely traversed.","nodes":[{"pos":[0,174],"content":"Increments the iterator to the next position in the underlying container, or to the first position beyond the end of container if the container has been completely traversed.","nodes":[{"content":"Increments the iterator to the next position in the underlying container, or to the first position beyond the end of container if the container has been completely traversed.","pos":[0,174]}]}],"pos":[45406,45581],"yaml":true},{"content":"Determines whether the iterator is valid and can be safely used to traverse the underlying container.","nodes":[{"pos":[0,101],"content":"Determines whether the iterator is valid and can be safely used to traverse the underlying container.","nodes":[{"content":"Determines whether the iterator is valid and can be safely used to traverse the underlying container.","pos":[0,101]}]}],"pos":[46773,46875],"yaml":true},{"content":"`true` if the iterator is valid and safe to use; otherwise, `false`.","nodes":[{"pos":[0,68],"content":"<ph id=\"ph1\">`true`</ph> if the iterator is valid and safe to use; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the iterator is valid and safe to use; otherwise, `false`."}],"pos":[47005,47076],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  commentId: T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  id: ReverseBidirectionalIterator`1\n  children:\n  - Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.#ctor\n  - Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator{`0})\n  - Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator)\n  - Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.base\n  - Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.Clone\n  - Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.container\n  - Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})\n  - Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator)\n  - Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.next\n  - Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator)\n  - Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@,System.Int32)\n  - Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@)\n  - Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})\n  - Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator)\n  - Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Implicit\n  - Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@)\n  - Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@,System.Int32)\n  - Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})\n  - Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator)\n  - Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator)\n  - Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator)\n  - Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.prev\n  - Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.valid\n  langs:\n  - csharp\n  name: ReverseBidirectionalIterator<TValue>\n  nameWithType: ReverseBidirectionalIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator<TValue>\n  type: Class\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Defines an iterator that accesses elements in a container in the reverse direction. Elements can be accessed in the forward direction by using the decrement operator and in the backward direction by using the increment operator. The element that the iterator points to can be both written to and read from any number of times. Reverse bidirectional iterators can be used anywhere that a reverse input or reverse output iterator is required.\n  remarks: '[!INCLUDE[unnamed_parm](~/includes/unnamed-parm-md.md)]'\n  syntax:\n    content: 'public class ReverseBidirectionalIterator<TValue> : Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator<TValue>'\n    typeParameters:\n    - id: TValue\n      description: '[!INCLUDE[cpp_iter_arg](~/includes/cpp-iter-arg-md.md)]'\n  inheritance:\n  - System.Object\n  implements:\n  - Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator{TValue}\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ReverseBidirectionalIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.#ctor\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.#ctor\n  id: '#ctor'\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  langs:\n  - csharp\n  name: ReverseBidirectionalIterator<TValue>()\n  nameWithType: ReverseBidirectionalIterator<TValue>.ReverseBidirectionalIterator<TValue>()\n  fullName: ReverseBidirectionalIterator<TValue>.ReverseBidirectionalIterator<TValue>()\n  type: Constructor\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Allocates and initializes a new <xref href=\"Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\"></xref> object.\n  syntax:\n    content: public ReverseBidirectionalIterator ();\n    parameters: []\n  overload: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ReverseBidirectionalIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator{`0})\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator{`0})\n  id: '#ctor(Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator{`0})'\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  langs:\n  - csharp\n  name: ReverseBidirectionalIterator<TValue>(IBidirectionalIterator<TValue>)\n  nameWithType: ReverseBidirectionalIterator<TValue>.ReverseBidirectionalIterator<TValue>(IBidirectionalIterator<TValue>)\n  fullName: ReverseBidirectionalIterator<TValue>.ReverseBidirectionalIterator<TValue>(IBidirectionalIterator<TValue>)\n  type: Constructor\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Allocates and initializes a new <xref href=\"Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\"></xref> object from an existing <xref href=\"Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1\"></xref> object.\n  syntax:\n    content: public ReverseBidirectionalIterator (Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator<TValue> _Iter);\n    parameters:\n    - id: _Iter\n      type: Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1\n      description: An existing <xref href=\"Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1\"></xref> object to copy.\n  overload: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ReverseBidirectionalIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)\n  id: '#ctor(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator)'\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  langs:\n  - csharp\n  name: ReverseBidirectionalIterator<TValue>(ReverseBidirectionalIterator)\n  nameWithType: ReverseBidirectionalIterator<TValue>.ReverseBidirectionalIterator<TValue>(ReverseBidirectionalIterator)\n  fullName: ReverseBidirectionalIterator<TValue>.ReverseBidirectionalIterator<TValue>(ReverseBidirectionalIterator)\n  type: Constructor\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: public ReverseBidirectionalIterator (Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator\n      description: ''\n  overload: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ReverseBidirectionalIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.base\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.base\n  id: base\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  langs:\n  - csharp\n  name: base()\n  nameWithType: ReverseBidirectionalIterator<TValue>.base()\n  fullName: ReverseBidirectionalIterator<TValue>.base()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Gets the underlying base iterator for the <xref href=\"Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\"></xref> object.\n  syntax:\n    content: public Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator<TValue> base ();\n    parameters: []\n    return:\n      type: Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1\n      description: The underlying base iterator for the <xref href=\"Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\"></xref> object.\n  overload: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.base*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ReverseBidirectionalIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.Clone\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.Clone\n  id: Clone\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  langs:\n  - csharp\n  name: Clone()\n  nameWithType: ReverseBidirectionalIterator<TValue>.Clone()\n  fullName: ReverseBidirectionalIterator<TValue>.Clone()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Returns a copy of the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\"></xref> object.\n  syntax:\n    content: public virtual object Clone ();\n    parameters: []\n    return:\n      type: System.Object\n      description: A copy of the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\"></xref> object.\n  overload: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.Clone*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ReverseBidirectionalIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.container\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.container\n  id: container\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  langs:\n  - csharp\n  name: container()\n  nameWithType: ReverseBidirectionalIterator<TValue>.container()\n  fullName: ReverseBidirectionalIterator<TValue>.container()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Gets the container that the iterator is traversing.\n  syntax:\n    content: public virtual object container ();\n    parameters: []\n    return:\n      type: System.Object\n      description: The container that the iterator is traversing.\n  overload: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.container*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ReverseBidirectionalIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})\n  id: equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  langs:\n  - csharp\n  name: equal_to(IInputIterator<TValue>)\n  nameWithType: ReverseBidirectionalIterator<TValue>.equal_to(IInputIterator<TValue>)\n  fullName: ReverseBidirectionalIterator<TValue>.equal_to(IInputIterator<TValue>)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Determines whether the given <xref href=\"Microsoft.VisualC.StlClr.Generic.IInputIterator`1\"></xref> object is the same as the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\"></xref> object.\n  syntax:\n    content: public virtual bool equal_to (Microsoft.VisualC.StlClr.Generic.IInputIterator<TValue> _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.Generic.IInputIterator`1\n      description: The <xref href=\"Microsoft.VisualC.StlClr.Generic.IInputIterator`1\"></xref> object to compare with the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\"></xref> object.\n    return:\n      type: System.Boolean\n      description: '`true` if the two iterators are the same object; otherwise, `false`.'\n  overload: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.equal_to*\n  exceptions: []\n  attributes: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ReverseBidirectionalIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)\n  id: equal_to(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  langs:\n  - csharp\n  name: equal_to(ReverseBidirectionalIterator)\n  nameWithType: ReverseBidirectionalIterator<TValue>.equal_to(ReverseBidirectionalIterator)\n  fullName: ReverseBidirectionalIterator<TValue>.equal_to(ReverseBidirectionalIterator)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: public bool equal_to (Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator\n      description: ''\n    return:\n      type: System.Boolean\n      description: ''\n  overload: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.equal_to*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ReverseBidirectionalIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.next\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.next\n  id: next\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  langs:\n  - csharp\n  name: next()\n  nameWithType: ReverseBidirectionalIterator<TValue>.next()\n  fullName: ReverseBidirectionalIterator<TValue>.next()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Decrements the iterator to the previous position in the underlying container, or to the first position in front of the beginning of container if the container has been completely traversed.\n  syntax:\n    content: public virtual void next ();\n    parameters: []\n  overload: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.next*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ReverseBidirectionalIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)\n  id: op_Assign(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  langs:\n  - csharp\n  name: op_Assign(ReverseBidirectionalIterator)\n  nameWithType: ReverseBidirectionalIterator<TValue>.op_Assign(ReverseBidirectionalIterator)\n  fullName: ReverseBidirectionalIterator<TValue>.op_Assign(ReverseBidirectionalIterator)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: public Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator op_Assign (Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator\n      description: ''\n    return:\n      type: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator\n      description: ''\n  overload: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Assign*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ReverseBidirectionalIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@,System.Int32)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@,System.Int32)\n  id: op_Decrement(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@,System.Int32)\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  langs:\n  - csharp\n  name: op_Decrement(ReverseBidirectionalIterator<TValue>, Int32)\n  nameWithType: ReverseBidirectionalIterator<TValue>.op_Decrement(ReverseBidirectionalIterator<TValue>, Int32)\n  fullName: ReverseBidirectionalIterator<TValue>.op_Decrement(ReverseBidirectionalIterator<TValue>, Int32)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Decrements the iterator by one element. Decrementing a reverse iterator is the same as incrementing a regular iterator. This is the postfix version of the decrement operator.\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Decrement (ref Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator<TValue> , int A_0);\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n      description: ''\n    - id: A_0\n      type: System.Int32\n      description: An unused parameter that indicates this is the postfix version of the operator.\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: An iterator.\n  overload: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Decrement*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ReverseBidirectionalIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@)\n  id: op_Decrement(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@)\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  langs:\n  - csharp\n  name: op_Decrement(ReverseBidirectionalIterator<TValue>)\n  nameWithType: ReverseBidirectionalIterator<TValue>.op_Decrement(ReverseBidirectionalIterator<TValue>)\n  fullName: ReverseBidirectionalIterator<TValue>.op_Decrement(ReverseBidirectionalIterator<TValue>)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Decrements the iterator by one element. Decrementing a reverse iterator is the same as incrementing a regular iterator. This is the prefix version of the decrement operator.\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Decrement (ref Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator<TValue> );\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n      description: ''\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: An iterator.\n  overload: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Decrement*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ReverseBidirectionalIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})\n  id: op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  langs:\n  - csharp\n  name: op_Equality(IInputIterator<TValue>)\n  nameWithType: ReverseBidirectionalIterator<TValue>.op_Equality(IInputIterator<TValue>)\n  fullName: ReverseBidirectionalIterator<TValue>.op_Equality(IInputIterator<TValue>)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Determines whether the given <xref href=\"Microsoft.VisualC.StlClr.Generic.IInputIterator`1\"></xref> object is the same as the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\"></xref> object.\n  remarks: The equivalent method for this operator is <xref:Microsoft.VisualC.StlClr.%2A> Gene ric.ReverseBidirectionalIterator`1.Equals(Microsoft.VisualC.StlClr. Gene ric.IInputIterator{`0})?qualifyHint=True&autoUpgrade=False\n  syntax:\n    content: >-\n      [System.Runtime.TargetedPatchingOptOut(\"Performance critical to inline this type of method across NGen image boundaries\")]\n\n      public bool op_Equality (Microsoft.VisualC.StlClr.Generic.IInputIterator<TValue> _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.Generic.IInputIterator`1\n      description: The <xref href=\"Microsoft.VisualC.StlClr.Generic.IInputIterator`1\"></xref> object to compare with the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\"></xref> object.\n    return:\n      type: System.Boolean\n      description: '`true` if the two iterators are the same object; otherwise, `false`.'\n  overload: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Equality*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.TargetedPatchingOptOutAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ReverseBidirectionalIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)\n  id: op_Equality(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  langs:\n  - csharp\n  name: op_Equality(ReverseBidirectionalIterator)\n  nameWithType: ReverseBidirectionalIterator<TValue>.op_Equality(ReverseBidirectionalIterator)\n  fullName: ReverseBidirectionalIterator<TValue>.op_Equality(ReverseBidirectionalIterator)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: >-\n      [System.Runtime.TargetedPatchingOptOut(\"Performance critical to inline this type of method across NGen image boundaries\")]\n\n      public bool op_Equality (Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator\n      description: ''\n    return:\n      type: System.Boolean\n      description: ''\n  overload: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Equality*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.TargetedPatchingOptOutAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ReverseBidirectionalIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Implicit\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator{`0}\n  id: op_Implicit\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  langs:\n  - csharp\n  name: op_Implicit\n  nameWithType: ReverseBidirectionalIterator<TValue>.op_Implicit\n  fullName: ReverseBidirectionalIterator<TValue>.op_Implicit\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: public Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator<TValue> op_Implicit ();\n    parameters: []\n    return:\n      type: Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1\n      description: ''\n  overload: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Implicit*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ReverseBidirectionalIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@)\n  id: op_Increment(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@)\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  langs:\n  - csharp\n  name: op_Increment(ReverseBidirectionalIterator<TValue>)\n  nameWithType: ReverseBidirectionalIterator<TValue>.op_Increment(ReverseBidirectionalIterator<TValue>)\n  fullName: ReverseBidirectionalIterator<TValue>.op_Increment(ReverseBidirectionalIterator<TValue>)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Increments the iterator by one element. Incrementing a reverse iterator is the same as decrementing a regular iterator. This is the prefix version of the increment operator.\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Increment (ref Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator<TValue> );\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n      description: ''\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: An iterator.\n  overload: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Increment*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ReverseBidirectionalIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@,System.Int32)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@,System.Int32)\n  id: op_Increment(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@,System.Int32)\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  langs:\n  - csharp\n  name: op_Increment(ReverseBidirectionalIterator<TValue>, Int32)\n  nameWithType: ReverseBidirectionalIterator<TValue>.op_Increment(ReverseBidirectionalIterator<TValue>, Int32)\n  fullName: ReverseBidirectionalIterator<TValue>.op_Increment(ReverseBidirectionalIterator<TValue>, Int32)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Increments the iterator by one element. Incrementing a reverse iterator is the same as decrementing a regular iterator. This is the postfix version of the increment operator.\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Increment (ref Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator<TValue> , int A_0);\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n      description: ''\n    - id: A_0\n      type: System.Int32\n      description: An unused parameter that indicates this is the postfix version of the operator.\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: An iterator.\n  overload: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Increment*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ReverseBidirectionalIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})\n  id: op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  langs:\n  - csharp\n  name: op_Inequality(IInputIterator<TValue>)\n  nameWithType: ReverseBidirectionalIterator<TValue>.op_Inequality(IInputIterator<TValue>)\n  fullName: ReverseBidirectionalIterator<TValue>.op_Inequality(IInputIterator<TValue>)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Determines whether the given <xref href=\"Microsoft.VisualC.StlClr.Generic.IInputIterator`1\"></xref> object differs from the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\"></xref> object.\n  remarks: The equivalent method for this operator is <xref:Microsoft.VisualC.StlClr.%2A> Gene ric.ReverseBidirectionalIterator`1.Compare(Microsoft.VisualC.StlClr. Gene ric.IInputIterator{`0})?qualifyHint=True&autoUpgrade=False\n  syntax:\n    content: public bool op_Inequality (Microsoft.VisualC.StlClr.Generic.IInputIterator<TValue> _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.Generic.IInputIterator`1\n      description: The <xref href=\"Microsoft.VisualC.StlClr.Generic.IInputIterator`1\"></xref> object to compare with the current <xref href=\"Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\"></xref> object.\n    return:\n      type: System.Boolean\n      description: '`true` if the two iterators are different objects; otherwise, `false`.'\n  overload: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Inequality*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ReverseBidirectionalIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)\n  id: op_Inequality(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  langs:\n  - csharp\n  name: op_Inequality(ReverseBidirectionalIterator)\n  nameWithType: ReverseBidirectionalIterator<TValue>.op_Inequality(ReverseBidirectionalIterator)\n  fullName: ReverseBidirectionalIterator<TValue>.op_Inequality(ReverseBidirectionalIterator)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: public bool op_Inequality (Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator\n      description: ''\n    return:\n      type: System.Boolean\n      description: ''\n  overload: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Inequality*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ReverseBidirectionalIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)\n  id: op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  langs:\n  - csharp\n  name: op_MemberSelection(ReverseBidirectionalIterator)\n  nameWithType: ReverseBidirectionalIterator<TValue>.op_MemberSelection(ReverseBidirectionalIterator)\n  fullName: ReverseBidirectionalIterator<TValue>.op_MemberSelection(ReverseBidirectionalIterator)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: >-\n      [System.Runtime.TargetedPatchingOptOut(\"Performance critical to inline this type of method across NGen image boundaries\")]\n\n      public static TValue op_MemberSelection (Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator _Left);\n    parameters:\n    - id: _Left\n      type: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator\n      description: ''\n    return:\n      type: TValue@\n      description: ''\n  overload: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_MemberSelection*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.TargetedPatchingOptOutAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ReverseBidirectionalIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)\n  id: op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  langs:\n  - csharp\n  name: op_PointerDereference(ReverseBidirectionalIterator)\n  nameWithType: ReverseBidirectionalIterator<TValue>.op_PointerDereference(ReverseBidirectionalIterator)\n  fullName: ReverseBidirectionalIterator<TValue>.op_PointerDereference(ReverseBidirectionalIterator)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: >-\n      [System.Runtime.TargetedPatchingOptOut(\"Performance critical to inline this type of method across NGen image boundaries\")]\n\n      public static TValue op_PointerDereference (Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator _Left);\n    parameters:\n    - id: _Left\n      type: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator\n      description: ''\n    return:\n      type: TValue@\n      description: ''\n  overload: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_PointerDereference*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.TargetedPatchingOptOutAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ReverseBidirectionalIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.prev\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.prev\n  id: prev\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  langs:\n  - csharp\n  name: prev()\n  nameWithType: ReverseBidirectionalIterator<TValue>.prev()\n  fullName: ReverseBidirectionalIterator<TValue>.prev()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Increments the iterator to the next position in the underlying container, or to the first position beyond the end of container if the container has been completely traversed.\n  syntax:\n    content: public virtual void prev ();\n    parameters: []\n  overload: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.prev*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ReverseBidirectionalIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.valid\n  commentId: M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.valid\n  id: valid\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  langs:\n  - csharp\n  name: valid()\n  nameWithType: ReverseBidirectionalIterator<TValue>.valid()\n  fullName: ReverseBidirectionalIterator<TValue>.valid()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Determines whether the iterator is valid and can be safely used to traverse the underlying container.\n  syntax:\n    content: public virtual bool valid ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`true` if the iterator is valid and safe to use; otherwise, `false`.'\n  overload: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.valid*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ReverseBidirectionalIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.#ctor\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  isExternal: false\n  name: ReverseBidirectionalIterator<TValue>()\n  nameWithType: ReverseBidirectionalIterator<TValue>.ReverseBidirectionalIterator<TValue>()\n  fullName: ReverseBidirectionalIterator<TValue>.ReverseBidirectionalIterator<TValue>()\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator{`0})\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  isExternal: false\n  name: ReverseBidirectionalIterator<TValue>(IBidirectionalIterator<TValue>)\n  nameWithType: ReverseBidirectionalIterator<TValue>.ReverseBidirectionalIterator<TValue>(IBidirectionalIterator<TValue>)\n  fullName: ReverseBidirectionalIterator<TValue>.ReverseBidirectionalIterator<TValue>(IBidirectionalIterator<TValue>)\n- uid: Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: IBidirectionalIterator<TValue>\n  nameWithType: IBidirectionalIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator<TValue>\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  isExternal: false\n  name: ReverseBidirectionalIterator<TValue>(ReverseBidirectionalIterator)\n  nameWithType: ReverseBidirectionalIterator<TValue>.ReverseBidirectionalIterator<TValue>(ReverseBidirectionalIterator)\n  fullName: ReverseBidirectionalIterator<TValue>.ReverseBidirectionalIterator<TValue>(ReverseBidirectionalIterator)\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: true\n  name: ReverseBidirectionalIterator\n  nameWithType: ReverseBidirectionalIterator\n  fullName: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.base\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  isExternal: false\n  name: base()\n  nameWithType: ReverseBidirectionalIterator<TValue>.base()\n  fullName: ReverseBidirectionalIterator<TValue>.base()\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.Clone\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  isExternal: false\n  name: Clone()\n  nameWithType: ReverseBidirectionalIterator<TValue>.Clone()\n  fullName: ReverseBidirectionalIterator<TValue>.Clone()\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.container\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  isExternal: false\n  name: container()\n  nameWithType: ReverseBidirectionalIterator<TValue>.container()\n  fullName: ReverseBidirectionalIterator<TValue>.container()\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  isExternal: false\n  name: equal_to(IInputIterator<TValue>)\n  nameWithType: ReverseBidirectionalIterator<TValue>.equal_to(IInputIterator<TValue>)\n  fullName: ReverseBidirectionalIterator<TValue>.equal_to(IInputIterator<TValue>)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: Microsoft.VisualC.StlClr.Generic.IInputIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: IInputIterator<TValue>\n  nameWithType: IInputIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.IInputIterator<TValue>\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  isExternal: false\n  name: equal_to(ReverseBidirectionalIterator)\n  nameWithType: ReverseBidirectionalIterator<TValue>.equal_to(ReverseBidirectionalIterator)\n  fullName: ReverseBidirectionalIterator<TValue>.equal_to(ReverseBidirectionalIterator)\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.next\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  isExternal: false\n  name: next()\n  nameWithType: ReverseBidirectionalIterator<TValue>.next()\n  fullName: ReverseBidirectionalIterator<TValue>.next()\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  isExternal: false\n  name: op_Assign(ReverseBidirectionalIterator)\n  nameWithType: ReverseBidirectionalIterator<TValue>.op_Assign(ReverseBidirectionalIterator)\n  fullName: ReverseBidirectionalIterator<TValue>.op_Assign(ReverseBidirectionalIterator)\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@,System.Int32)\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  isExternal: false\n  name: op_Decrement(ReverseBidirectionalIterator<TValue>, Int32)\n  nameWithType: ReverseBidirectionalIterator<TValue>.op_Decrement(ReverseBidirectionalIterator<TValue>, Int32)\n  fullName: ReverseBidirectionalIterator<TValue>.op_Decrement(ReverseBidirectionalIterator<TValue>, Int32)\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: ReverseBidirectionalIterator<TValue>\n  nameWithType: ReverseBidirectionalIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator<TValue>\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@)\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  isExternal: false\n  name: op_Decrement(ReverseBidirectionalIterator<TValue>)\n  nameWithType: ReverseBidirectionalIterator<TValue>.op_Decrement(ReverseBidirectionalIterator<TValue>)\n  fullName: ReverseBidirectionalIterator<TValue>.op_Decrement(ReverseBidirectionalIterator<TValue>)\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  isExternal: false\n  name: op_Equality(IInputIterator<TValue>)\n  nameWithType: ReverseBidirectionalIterator<TValue>.op_Equality(IInputIterator<TValue>)\n  fullName: ReverseBidirectionalIterator<TValue>.op_Equality(IInputIterator<TValue>)\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  isExternal: false\n  name: op_Equality(ReverseBidirectionalIterator)\n  nameWithType: ReverseBidirectionalIterator<TValue>.op_Equality(ReverseBidirectionalIterator)\n  fullName: ReverseBidirectionalIterator<TValue>.op_Equality(ReverseBidirectionalIterator)\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Implicit\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  isExternal: false\n  name: op_Implicit\n  nameWithType: ReverseBidirectionalIterator<TValue>.op_Implicit\n  fullName: ReverseBidirectionalIterator<TValue>.op_Implicit\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@)\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  isExternal: false\n  name: op_Increment(ReverseBidirectionalIterator<TValue>)\n  nameWithType: ReverseBidirectionalIterator<TValue>.op_Increment(ReverseBidirectionalIterator<TValue>)\n  fullName: ReverseBidirectionalIterator<TValue>.op_Increment(ReverseBidirectionalIterator<TValue>)\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@,System.Int32)\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  isExternal: false\n  name: op_Increment(ReverseBidirectionalIterator<TValue>, Int32)\n  nameWithType: ReverseBidirectionalIterator<TValue>.op_Increment(ReverseBidirectionalIterator<TValue>, Int32)\n  fullName: ReverseBidirectionalIterator<TValue>.op_Increment(ReverseBidirectionalIterator<TValue>, Int32)\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  isExternal: false\n  name: op_Inequality(IInputIterator<TValue>)\n  nameWithType: ReverseBidirectionalIterator<TValue>.op_Inequality(IInputIterator<TValue>)\n  fullName: ReverseBidirectionalIterator<TValue>.op_Inequality(IInputIterator<TValue>)\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  isExternal: false\n  name: op_Inequality(ReverseBidirectionalIterator)\n  nameWithType: ReverseBidirectionalIterator<TValue>.op_Inequality(ReverseBidirectionalIterator)\n  fullName: ReverseBidirectionalIterator<TValue>.op_Inequality(ReverseBidirectionalIterator)\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  isExternal: false\n  name: op_MemberSelection(ReverseBidirectionalIterator)\n  nameWithType: ReverseBidirectionalIterator<TValue>.op_MemberSelection(ReverseBidirectionalIterator)\n  fullName: ReverseBidirectionalIterator<TValue>.op_MemberSelection(ReverseBidirectionalIterator)\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  isExternal: false\n  name: op_PointerDereference(ReverseBidirectionalIterator)\n  nameWithType: ReverseBidirectionalIterator<TValue>.op_PointerDereference(ReverseBidirectionalIterator)\n  fullName: ReverseBidirectionalIterator<TValue>.op_PointerDereference(ReverseBidirectionalIterator)\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.prev\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  isExternal: false\n  name: prev()\n  nameWithType: ReverseBidirectionalIterator<TValue>.prev()\n  fullName: ReverseBidirectionalIterator<TValue>.prev()\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.valid\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  isExternal: false\n  name: valid()\n  nameWithType: ReverseBidirectionalIterator<TValue>.valid()\n  fullName: ReverseBidirectionalIterator<TValue>.valid()\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.#ctor*\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  isExternal: false\n  name: ReverseBidirectionalIterator<TValue>\n  nameWithType: ReverseBidirectionalIterator<TValue>.ReverseBidirectionalIterator<TValue>\n  fullName: ReverseBidirectionalIterator<TValue>.ReverseBidirectionalIterator<TValue>\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ReverseBidirectionalIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.base*\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  isExternal: false\n  name: base\n  nameWithType: ReverseBidirectionalIterator<TValue>.base\n  fullName: ReverseBidirectionalIterator<TValue>.base\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ReverseBidirectionalIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.Clone*\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  isExternal: false\n  name: Clone\n  nameWithType: ReverseBidirectionalIterator<TValue>.Clone\n  fullName: ReverseBidirectionalIterator<TValue>.Clone\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ReverseBidirectionalIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.container*\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  isExternal: false\n  name: container\n  nameWithType: ReverseBidirectionalIterator<TValue>.container\n  fullName: ReverseBidirectionalIterator<TValue>.container\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ReverseBidirectionalIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.equal_to*\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  isExternal: false\n  name: equal_to\n  nameWithType: ReverseBidirectionalIterator<TValue>.equal_to\n  fullName: ReverseBidirectionalIterator<TValue>.equal_to\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ReverseBidirectionalIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.next*\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  isExternal: false\n  name: next\n  nameWithType: ReverseBidirectionalIterator<TValue>.next\n  fullName: ReverseBidirectionalIterator<TValue>.next\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ReverseBidirectionalIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Assign*\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  isExternal: false\n  name: op_Assign\n  nameWithType: ReverseBidirectionalIterator<TValue>.op_Assign\n  fullName: ReverseBidirectionalIterator<TValue>.op_Assign\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ReverseBidirectionalIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Decrement*\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  isExternal: false\n  name: op_Decrement\n  nameWithType: ReverseBidirectionalIterator<TValue>.op_Decrement\n  fullName: ReverseBidirectionalIterator<TValue>.op_Decrement\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ReverseBidirectionalIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Equality*\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  isExternal: false\n  name: op_Equality\n  nameWithType: ReverseBidirectionalIterator<TValue>.op_Equality\n  fullName: ReverseBidirectionalIterator<TValue>.op_Equality\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ReverseBidirectionalIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Implicit*\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  isExternal: false\n  name: op_Implicit\n  nameWithType: ReverseBidirectionalIterator<TValue>.op_Implicit\n  fullName: ReverseBidirectionalIterator<TValue>.op_Implicit\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ReverseBidirectionalIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Increment*\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  isExternal: false\n  name: op_Increment\n  nameWithType: ReverseBidirectionalIterator<TValue>.op_Increment\n  fullName: ReverseBidirectionalIterator<TValue>.op_Increment\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ReverseBidirectionalIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Inequality*\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  isExternal: false\n  name: op_Inequality\n  nameWithType: ReverseBidirectionalIterator<TValue>.op_Inequality\n  fullName: ReverseBidirectionalIterator<TValue>.op_Inequality\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ReverseBidirectionalIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_MemberSelection*\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  isExternal: false\n  name: op_MemberSelection\n  nameWithType: ReverseBidirectionalIterator<TValue>.op_MemberSelection\n  fullName: ReverseBidirectionalIterator<TValue>.op_MemberSelection\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ReverseBidirectionalIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_PointerDereference*\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  isExternal: false\n  name: op_PointerDereference\n  nameWithType: ReverseBidirectionalIterator<TValue>.op_PointerDereference\n  fullName: ReverseBidirectionalIterator<TValue>.op_PointerDereference\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ReverseBidirectionalIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.prev*\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  isExternal: false\n  name: prev\n  nameWithType: ReverseBidirectionalIterator<TValue>.prev\n  fullName: ReverseBidirectionalIterator<TValue>.prev\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ReverseBidirectionalIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.valid*\n  parent: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  isExternal: false\n  name: valid\n  nameWithType: ReverseBidirectionalIterator<TValue>.valid\n  fullName: ReverseBidirectionalIterator<TValue>.valid\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/ReverseBidirectionalIterator`1.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}