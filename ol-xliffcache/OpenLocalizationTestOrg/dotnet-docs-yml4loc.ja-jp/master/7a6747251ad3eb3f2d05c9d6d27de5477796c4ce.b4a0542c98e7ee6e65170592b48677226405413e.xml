{"nodes":[{"content":"Provides an implementation of <xref href=\"System.IAsyncResult\"></xref> for use by XML Web service proxies to implement the standard asynchronous method pattern.","nodes":[{"pos":[0,160],"content":"Provides an implementation of <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> for use by XML Web service proxies to implement the standard asynchronous method pattern.","source":"Provides an implementation of <xref href=\"System.IAsyncResult\"></xref> for use by XML Web service proxies to implement the standard asynchronous method pattern."}],"pos":[797,958],"yaml":true},{"content":"When you call the `BeginMyMethodName` method, where `MyMethodName` is the synchronous version of the method, on an XML Web service proxy class, an instance of the <xref:System.Web.Services.Protocols.WebClientAsyncResult> is returned. Following the standard asynchronous design pattern, that instance of <xref:System.Web.Services.Protocols.WebClientAsyncResult> must later be passed to `EndMyMethodName` to complete the asynchronous method call.  \n  \n For details on calling XML Web services asynchronously, see [&#91;\\<topic://cpconInvokingWebServicesAsynchronously>&#93;](http://msdn.microsoft.com/en-us/f9e26a43-063a-440a-8c73-a02f2ccf3ea0).","nodes":[{"pos":[0,444],"content":"When you call the `BeginMyMethodName` method, where `MyMethodName` is the synchronous version of the method, on an XML Web service proxy class, an instance of the <xref:System.Web.Services.Protocols.WebClientAsyncResult> is returned. Following the standard asynchronous design pattern, that instance of <xref:System.Web.Services.Protocols.WebClientAsyncResult> must later be passed to `EndMyMethodName` to complete the asynchronous method call.","nodes":[{"content":"When you call the <ph id=\"ph1\">`BeginMyMethodName`</ph> method, where <ph id=\"ph2\">`MyMethodName`</ph> is the synchronous version of the method, on an XML Web service proxy class, an instance of the <ph id=\"ph3\">&lt;xref:System.Web.Services.Protocols.WebClientAsyncResult&gt;</ph> is returned.","pos":[0,233],"source":"When you call the `BeginMyMethodName` method, where `MyMethodName` is the synchronous version of the method, on an XML Web service proxy class, an instance of the <xref:System.Web.Services.Protocols.WebClientAsyncResult> is returned."},{"content":"Following the standard asynchronous design pattern, that instance of <ph id=\"ph1\">&lt;xref:System.Web.Services.Protocols.WebClientAsyncResult&gt;</ph> must later be passed to <ph id=\"ph2\">`EndMyMethodName`</ph> to complete the asynchronous method call.","pos":[234,444],"source":" Following the standard asynchronous design pattern, that instance of <xref:System.Web.Services.Protocols.WebClientAsyncResult> must later be passed to `EndMyMethodName` to complete the asynchronous method call."}]},{"pos":[451,643],"content":"For details on calling XML Web services asynchronously, see <bpt id=\"p1\">[</bpt>&amp;#91;<ph id=\"ph1\">\\&lt;</ph>topic://cpconInvokingWebServicesAsynchronously&gt;&amp;#93;<ept id=\"p1\">](http://msdn.microsoft.com/en-us/f9e26a43-063a-440a-8c73-a02f2ccf3ea0)</ept>.","source":"For details on calling XML Web services asynchronously, see [&#91;\\<topic://cpconInvokingWebServicesAsynchronously>&#93;](http://msdn.microsoft.com/en-us/f9e26a43-063a-440a-8c73-a02f2ccf3ea0)."}],"pos":[969,1618],"yaml":true,"extradata":"MT"},{"content":"Cancels an asynchronous XML Web service request.","nodes":[{"pos":[0,48],"content":"Cancels an asynchronous XML Web service request.","nodes":[{"content":"Cancels an asynchronous XML Web service request.","pos":[0,48]}]}],"pos":[3165,3214],"yaml":true},{"content":"Gets the object provided in the last parameter to the `Begin` method asynchronous call.","nodes":[{"pos":[0,87],"content":"Gets the object provided in the last parameter to the <ph id=\"ph1\">`Begin`</ph> method asynchronous call.","source":"Gets the object provided in the last parameter to the `Begin` method asynchronous call."}],"pos":[4985,5073],"yaml":true},{"content":"The <xref href=\"System.Object\"></xref> provided in the last parameter to the `Begin` method call.","nodes":[{"pos":[0,97],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> provided in the last parameter to the <ph id=\"ph2\">`Begin`</ph> method call.","source":"The <xref href=\"System.Object\"></xref> provided in the last parameter to the `Begin` method call."}],"pos":[5187,5285],"yaml":true},{"content":"Gets a <xref href=\"System.Threading.WaitHandle\"></xref> that is used to wait for an asynchronous operation to complete.","nodes":[{"pos":[0,119],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"System.Threading.WaitHandle\"&gt;&lt;/xref&gt;</ph> that is used to wait for an asynchronous operation to complete.","source":"Gets a <xref href=\"System.Threading.WaitHandle\"></xref> that is used to wait for an asynchronous operation to complete."}],"pos":[6541,6661],"yaml":true},{"content":"The <xref:System.Threading.WaitHandle> can be used to perform a <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, or <xref:System.Threading.WaitHandle.WaitAll%2A> to wait for the asynchronous call to complete.  \n  \n For more details, see <xref:System.IAsyncResult.AsyncWaitHandle%2A>.","nodes":[{"pos":[0,253],"content":"The <xref:System.Threading.WaitHandle> can be used to perform a <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, or <xref:System.Threading.WaitHandle.WaitAll%2A> to wait for the asynchronous call to complete.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.WaitHandle&gt;</ph> can be used to perform a <ph id=\"ph2\">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph>, or <ph id=\"ph4\">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> to wait for the asynchronous call to complete.","pos":[0,253],"source":"The <xref:System.Threading.WaitHandle> can be used to perform a <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, or <xref:System.Threading.WaitHandle.WaitAll%2A> to wait for the asynchronous call to complete."}]},{"pos":[260,328],"content":"For more details, see <xref:System.IAsyncResult.AsyncWaitHandle%2A>.","nodes":[{"content":"For more details, see <ph id=\"ph1\">&lt;xref:System.IAsyncResult.AsyncWaitHandle%2A&gt;</ph>.","pos":[0,68],"source":"For more details, see <xref:System.IAsyncResult.AsyncWaitHandle%2A>."}]}],"pos":[6672,7005],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Threading.WaitHandle\"></xref> that is used to wait for an asynchronous operation to complete.","nodes":[{"pos":[0,114],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Threading.WaitHandle\"&gt;&lt;/xref&gt;</ph> that is used to wait for an asynchronous operation to complete.","source":"A <xref href=\"System.Threading.WaitHandle\"></xref> that is used to wait for an asynchronous operation to complete."}],"pos":[7159,7274],"yaml":true},{"content":"Gets a value indicating whether the Begin call completed synchronously.","nodes":[{"pos":[0,71],"content":"Gets a value indicating whether the Begin call completed synchronously.","nodes":[{"content":"Gets a value indicating whether the Begin call completed synchronously.","pos":[0,71]}]}],"pos":[8577,8649],"yaml":true},{"content":"If <xref:System.Web.Services.Protocols.WebClientAsyncResult.CompletedSynchronously%2A> is set to `true` within the <xref:System.AsyncCallback> delegate, it is probable that the thread that called <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> is the current thread. In this case, you should be careful about making another asynchronous Begin call from the callback method, since it can cause the stack to grow without bound if the calls continue to complete synchronously. Instead, the call should be completed at the original call site, outside the callback method.","nodes":[{"pos":[0,594],"content":"If <xref:System.Web.Services.Protocols.WebClientAsyncResult.CompletedSynchronously%2A> is set to `true` within the <xref:System.AsyncCallback> delegate, it is probable that the thread that called <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> is the current thread. In this case, you should be careful about making another asynchronous Begin call from the callback method, since it can cause the stack to grow without bound if the calls continue to complete synchronously. Instead, the call should be completed at the original call site, outside the callback method.","nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.Web.Services.Protocols.WebClientAsyncResult.CompletedSynchronously%2A&gt;</ph> is set to <ph id=\"ph2\">`true`</ph> within the <ph id=\"ph3\">&lt;xref:System.AsyncCallback&gt;</ph> delegate, it is probable that the thread that called <ph id=\"ph4\">&lt;xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A&gt;</ph> is the current thread.","pos":[0,293],"source":"If <xref:System.Web.Services.Protocols.WebClientAsyncResult.CompletedSynchronously%2A> is set to `true` within the <xref:System.AsyncCallback> delegate, it is probable that the thread that called <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> is the current thread."},{"content":"In this case, you should be careful about making another asynchronous Begin call from the callback method, since it can cause the stack to grow without bound if the calls continue to complete synchronously.","pos":[294,500]},{"content":"Instead, the call should be completed at the original call site, outside the callback method.","pos":[501,594]}]}],"pos":[8660,9255],"yaml":true,"extradata":"MT"},{"content":"`true` if the Begin call completed synchronously; otherwise, `false`.","nodes":[{"pos":[0,69],"content":"<ph id=\"ph1\">`true`</ph> if the Begin call completed synchronously; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the Begin call completed synchronously; otherwise, `false`."}],"pos":[9380,9452],"yaml":true},{"content":"Gets a value indicating whether the asynchronous XML Web service request has completed.","nodes":[{"pos":[0,87],"content":"Gets a value indicating whether the asynchronous XML Web service request has completed.","nodes":[{"content":"Gets a value indicating whether the asynchronous XML Web service request has completed.","pos":[0,87]}]}],"pos":[10696,10784],"yaml":true},{"content":"`true` if the asynchronous XML Web service request has completed; otherwise, `false`.","nodes":[{"pos":[0,85],"content":"<ph id=\"ph1\">`true`</ph> if the asynchronous XML Web service request has completed; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the asynchronous XML Web service request has completed; otherwise, `false`."}],"pos":[10898,10986],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.Services.Protocols.WebClientAsyncResult\n  commentId: T:System.Web.Services.Protocols.WebClientAsyncResult\n  id: WebClientAsyncResult\n  children:\n  - System.Web.Services.Protocols.WebClientAsyncResult.Abort\n  - System.Web.Services.Protocols.WebClientAsyncResult.AsyncState\n  - System.Web.Services.Protocols.WebClientAsyncResult.AsyncWaitHandle\n  - System.Web.Services.Protocols.WebClientAsyncResult.CompletedSynchronously\n  - System.Web.Services.Protocols.WebClientAsyncResult.IsCompleted\n  langs:\n  - csharp\n  name: WebClientAsyncResult\n  nameWithType: WebClientAsyncResult\n  fullName: System.Web.Services.Protocols.WebClientAsyncResult\n  type: Class\n  assemblies:\n  - System.Web.Services\n  namespace: System.Web.Services.Protocols\n  summary: Provides an implementation of <xref href=\"System.IAsyncResult\"></xref> for use by XML Web service proxies to implement the standard asynchronous method pattern.\n  remarks: \"When you call the `BeginMyMethodName` method, where `MyMethodName` is the synchronous version of the method, on an XML Web service proxy class, an instance of the <xref:System.Web.Services.Protocols.WebClientAsyncResult> is returned. Following the standard asynchronous design pattern, that instance of <xref:System.Web.Services.Protocols.WebClientAsyncResult> must later be passed to `EndMyMethodName` to complete the asynchronous method call.  \\n  \\n For details on calling XML Web services asynchronously, see [&#91;\\\\<topic://cpconInvokingWebServicesAsynchronously>&#93;](http://msdn.microsoft.com/en-us/f9e26a43-063a-440a-8c73-a02f2ccf3ea0).\"\n  syntax:\n    content: 'public class WebClientAsyncResult : IAsyncResult'\n  inheritance:\n  - System.Object\n  implements:\n  - System.IAsyncResult\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Services.Protocols/WebClientAsyncResult.xml\n  ms.technology:\n  - dotnet-webforms\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Web.Services.Protocols.WebClientAsyncResult.Abort\n  commentId: M:System.Web.Services.Protocols.WebClientAsyncResult.Abort\n  id: Abort\n  parent: System.Web.Services.Protocols.WebClientAsyncResult\n  langs:\n  - csharp\n  name: Abort()\n  nameWithType: WebClientAsyncResult.Abort()\n  fullName: WebClientAsyncResult.Abort()\n  type: Method\n  assemblies:\n  - System.Web.Services\n  namespace: System.Web.Services.Protocols\n  summary: Cancels an asynchronous XML Web service request.\n  remarks: ''\n  example:\n  - The XML Web service request is canceled if the underlying transport supports the <xref:System.Net.WebRequest.Abort%2A?displayProperty=fullName> method. If the corresponding `End` method is subsequently called after the <xref:System.Web.Services.Protocols.WebClientAsyncResult.Abort%2A> method, a <xref:System.Net.WebException> is thrown, setting the <xref:System.Net.WebException.Status%2A> property to <xref:System.Net.WebExceptionStatus.RequestCanceled>.\n  syntax:\n    content: public void Abort ();\n    parameters: []\n  overload: System.Web.Services.Protocols.WebClientAsyncResult.Abort*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Services.Protocols/WebClientAsyncResult.xml\n  ms.technology:\n  - dotnet-webforms\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Web.Services.Protocols.WebClientAsyncResult.AsyncState\n  commentId: P:System.Web.Services.Protocols.WebClientAsyncResult.AsyncState\n  id: AsyncState\n  parent: System.Web.Services.Protocols.WebClientAsyncResult\n  langs:\n  - csharp\n  name: AsyncState\n  nameWithType: WebClientAsyncResult.AsyncState\n  fullName: WebClientAsyncResult.AsyncState\n  type: Property\n  assemblies:\n  - System.Web.Services\n  namespace: System.Web.Services.Protocols\n  summary: Gets the object provided in the last parameter to the `Begin` method asynchronous call.\n  syntax:\n    content: public object AsyncState { get; }\n    return:\n      type: System.Object\n      description: The <xref href=\"System.Object\"></xref> provided in the last parameter to the `Begin` method call.\n  overload: System.Web.Services.Protocols.WebClientAsyncResult.AsyncState*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Services.Protocols/WebClientAsyncResult.xml\n  ms.technology:\n  - dotnet-webforms\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Web.Services.Protocols.WebClientAsyncResult.AsyncWaitHandle\n  commentId: P:System.Web.Services.Protocols.WebClientAsyncResult.AsyncWaitHandle\n  id: AsyncWaitHandle\n  parent: System.Web.Services.Protocols.WebClientAsyncResult\n  langs:\n  - csharp\n  name: AsyncWaitHandle\n  nameWithType: WebClientAsyncResult.AsyncWaitHandle\n  fullName: WebClientAsyncResult.AsyncWaitHandle\n  type: Property\n  assemblies:\n  - System.Web.Services\n  namespace: System.Web.Services.Protocols\n  summary: Gets a <xref href=\"System.Threading.WaitHandle\"></xref> that is used to wait for an asynchronous operation to complete.\n  remarks: \"The <xref:System.Threading.WaitHandle> can be used to perform a <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, or <xref:System.Threading.WaitHandle.WaitAll%2A> to wait for the asynchronous call to complete.  \\n  \\n For more details, see <xref:System.IAsyncResult.AsyncWaitHandle%2A>.\"\n  syntax:\n    content: public System.Threading.WaitHandle AsyncWaitHandle { get; }\n    return:\n      type: System.Threading.WaitHandle\n      description: A <xref href=\"System.Threading.WaitHandle\"></xref> that is used to wait for an asynchronous operation to complete.\n  overload: System.Web.Services.Protocols.WebClientAsyncResult.AsyncWaitHandle*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Services.Protocols/WebClientAsyncResult.xml\n  ms.technology:\n  - dotnet-webforms\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Web.Services.Protocols.WebClientAsyncResult.CompletedSynchronously\n  commentId: P:System.Web.Services.Protocols.WebClientAsyncResult.CompletedSynchronously\n  id: CompletedSynchronously\n  parent: System.Web.Services.Protocols.WebClientAsyncResult\n  langs:\n  - csharp\n  name: CompletedSynchronously\n  nameWithType: WebClientAsyncResult.CompletedSynchronously\n  fullName: WebClientAsyncResult.CompletedSynchronously\n  type: Property\n  assemblies:\n  - System.Web.Services\n  namespace: System.Web.Services.Protocols\n  summary: Gets a value indicating whether the Begin call completed synchronously.\n  remarks: If <xref:System.Web.Services.Protocols.WebClientAsyncResult.CompletedSynchronously%2A> is set to `true` within the <xref:System.AsyncCallback> delegate, it is probable that the thread that called <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> is the current thread. In this case, you should be careful about making another asynchronous Begin call from the callback method, since it can cause the stack to grow without bound if the calls continue to complete synchronously. Instead, the call should be completed at the original call site, outside the callback method.\n  syntax:\n    content: public bool CompletedSynchronously { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the Begin call completed synchronously; otherwise, `false`.'\n  overload: System.Web.Services.Protocols.WebClientAsyncResult.CompletedSynchronously*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Services.Protocols/WebClientAsyncResult.xml\n  ms.technology:\n  - dotnet-webforms\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Web.Services.Protocols.WebClientAsyncResult.IsCompleted\n  commentId: P:System.Web.Services.Protocols.WebClientAsyncResult.IsCompleted\n  id: IsCompleted\n  parent: System.Web.Services.Protocols.WebClientAsyncResult\n  langs:\n  - csharp\n  name: IsCompleted\n  nameWithType: WebClientAsyncResult.IsCompleted\n  fullName: WebClientAsyncResult.IsCompleted\n  type: Property\n  assemblies:\n  - System.Web.Services\n  namespace: System.Web.Services.Protocols\n  summary: Gets a value indicating whether the asynchronous XML Web service request has completed.\n  syntax:\n    content: public bool IsCompleted { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the asynchronous XML Web service request has completed; otherwise, `false`.'\n  overload: System.Web.Services.Protocols.WebClientAsyncResult.IsCompleted*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Services.Protocols/WebClientAsyncResult.xml\n  ms.technology:\n  - dotnet-webforms\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Web.Services.Protocols.WebClientAsyncResult.Abort\n  parent: System.Web.Services.Protocols.WebClientAsyncResult\n  isExternal: false\n  name: Abort()\n  nameWithType: WebClientAsyncResult.Abort()\n  fullName: WebClientAsyncResult.Abort()\n- uid: System.Web.Services.Protocols.WebClientAsyncResult.AsyncState\n  parent: System.Web.Services.Protocols.WebClientAsyncResult\n  isExternal: false\n  name: AsyncState\n  nameWithType: WebClientAsyncResult.AsyncState\n  fullName: WebClientAsyncResult.AsyncState\n- uid: System.Web.Services.Protocols.WebClientAsyncResult.AsyncWaitHandle\n  parent: System.Web.Services.Protocols.WebClientAsyncResult\n  isExternal: false\n  name: AsyncWaitHandle\n  nameWithType: WebClientAsyncResult.AsyncWaitHandle\n  fullName: WebClientAsyncResult.AsyncWaitHandle\n- uid: System.Threading.WaitHandle\n  parent: System.Threading\n  isExternal: false\n  name: WaitHandle\n  nameWithType: WaitHandle\n  fullName: System.Threading.WaitHandle\n- uid: System.Web.Services.Protocols.WebClientAsyncResult.CompletedSynchronously\n  parent: System.Web.Services.Protocols.WebClientAsyncResult\n  isExternal: false\n  name: CompletedSynchronously\n  nameWithType: WebClientAsyncResult.CompletedSynchronously\n  fullName: WebClientAsyncResult.CompletedSynchronously\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Web.Services.Protocols.WebClientAsyncResult.IsCompleted\n  parent: System.Web.Services.Protocols.WebClientAsyncResult\n  isExternal: false\n  name: IsCompleted\n  nameWithType: WebClientAsyncResult.IsCompleted\n  fullName: WebClientAsyncResult.IsCompleted\n- uid: System.Web.Services.Protocols.WebClientAsyncResult.Abort*\n  parent: System.Web.Services.Protocols.WebClientAsyncResult\n  isExternal: false\n  name: Abort\n  nameWithType: WebClientAsyncResult.Abort\n  fullName: WebClientAsyncResult.Abort\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Services.Protocols/WebClientAsyncResult.xml\n- uid: System.Web.Services.Protocols.WebClientAsyncResult.AsyncState*\n  parent: System.Web.Services.Protocols.WebClientAsyncResult\n  isExternal: false\n  name: AsyncState\n  nameWithType: WebClientAsyncResult.AsyncState\n  fullName: WebClientAsyncResult.AsyncState\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Services.Protocols/WebClientAsyncResult.xml\n- uid: System.Web.Services.Protocols.WebClientAsyncResult.AsyncWaitHandle*\n  parent: System.Web.Services.Protocols.WebClientAsyncResult\n  isExternal: false\n  name: AsyncWaitHandle\n  nameWithType: WebClientAsyncResult.AsyncWaitHandle\n  fullName: WebClientAsyncResult.AsyncWaitHandle\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Services.Protocols/WebClientAsyncResult.xml\n- uid: System.Web.Services.Protocols.WebClientAsyncResult.CompletedSynchronously*\n  parent: System.Web.Services.Protocols.WebClientAsyncResult\n  isExternal: false\n  name: CompletedSynchronously\n  nameWithType: WebClientAsyncResult.CompletedSynchronously\n  fullName: WebClientAsyncResult.CompletedSynchronously\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Services.Protocols/WebClientAsyncResult.xml\n- uid: System.Web.Services.Protocols.WebClientAsyncResult.IsCompleted*\n  parent: System.Web.Services.Protocols.WebClientAsyncResult\n  isExternal: false\n  name: IsCompleted\n  nameWithType: WebClientAsyncResult.IsCompleted\n  fullName: WebClientAsyncResult.IsCompleted\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Services.Protocols/WebClientAsyncResult.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.IAsyncResult\n  parent: System\n  isExternal: false\n  name: IAsyncResult\n  nameWithType: IAsyncResult\n  fullName: System.IAsyncResult\n"}