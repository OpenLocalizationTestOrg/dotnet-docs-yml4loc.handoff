{"nodes":[{"content":"Wraps marshal-by-value object references, allowing them to be returned through an indirection.","nodes":[{"pos":[0,94],"content":"Wraps marshal-by-value object references, allowing them to be returned through an indirection.","nodes":[{"content":"Wraps marshal-by-value object references, allowing them to be returned through an indirection.","pos":[0,94]}]}],"pos":[548,643],"yaml":true},{"content":"The <xref:System.Runtime.Remoting.ObjectHandle> class is used to pass an object (in a wrapped state) between multiple application domains without loading the metadata for the wrapped object in each <xref:System.AppDomain> through which the <xref:System.Runtime.Remoting.ObjectHandle> travels. Thus, the <xref:System.Runtime.Remoting.ObjectHandle> class gives the caller control of when the <xref:System.Type> of the remote object is loaded into a domain.","nodes":[{"pos":[0,454],"content":"The <xref:System.Runtime.Remoting.ObjectHandle> class is used to pass an object (in a wrapped state) between multiple application domains without loading the metadata for the wrapped object in each <xref:System.AppDomain> through which the <xref:System.Runtime.Remoting.ObjectHandle> travels. Thus, the <xref:System.Runtime.Remoting.ObjectHandle> class gives the caller control of when the <xref:System.Type> of the remote object is loaded into a domain.","nodes":[{"content":"The <xref:System.Runtime.Remoting.ObjectHandle> class is used to pass an object (in a wrapped state) between multiple application domains without loading the metadata for the wrapped object in each <xref:System.AppDomain> through which the <xref:System.Runtime.Remoting.ObjectHandle> travels. Thus, the <xref:System.Runtime.Remoting.ObjectHandle> class gives the caller control of when the <xref:System.Type> of the remote object is loaded into a domain.","pos":[0,454],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.Remoting.ObjectHandle&gt;</ph> class is used to pass an object (in a wrapped state) between multiple application domains without loading the metadata for the wrapped object in each <ph id=\"ph2\">&lt;xref:System.AppDomain&gt;</ph> through which the <ph id=\"ph3\">&lt;xref:System.Runtime.Remoting.ObjectHandle&gt;</ph> travels.","pos":[0,292],"source":"The <xref:System.Runtime.Remoting.ObjectHandle> class is used to pass an object (in a wrapped state) between multiple application domains without loading the metadata for the wrapped object in each <xref:System.AppDomain> through which the <xref:System.Runtime.Remoting.ObjectHandle> travels."},{"content":"Thus, the <ph id=\"ph1\">&lt;xref:System.Runtime.Remoting.ObjectHandle&gt;</ph> class gives the caller control of when the <ph id=\"ph2\">&lt;xref:System.Type&gt;</ph> of the remote object is loaded into a domain.","pos":[293,454],"source":" Thus, the <xref:System.Runtime.Remoting.ObjectHandle> class gives the caller control of when the <xref:System.Type> of the remote object is loaded into a domain."}]}]}],"pos":[654,1109],"yaml":true,"extradata":"MT"},{"content":"Initializes an instance of the <xref href=\"System.Runtime.Remoting.ObjectHandle\"></xref> class, wrapping the given object <code>o</code>.","nodes":[{"pos":[0,137],"content":"Initializes an instance of the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Remoting.ObjectHandle\"&gt;&lt;/xref&gt;</ph> class, wrapping the given object <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">o</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"Initializes an instance of the <xref href=\"System.Runtime.Remoting.ObjectHandle\"></xref> class, wrapping the given object <code>o</code>."}],"pos":[3891,4029],"yaml":true},{"content":"The object that is wrapped by the new <xref href=\"System.Runtime.Remoting.ObjectHandle\"></xref>.","nodes":[{"pos":[0,96],"content":"The object that is wrapped by the new <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Remoting.ObjectHandle\"&gt;&lt;/xref&gt;</ph>.","source":"The object that is wrapped by the new <xref href=\"System.Runtime.Remoting.ObjectHandle\"></xref>."}],"pos":[4157,4254],"yaml":true},{"content":"Initializes the lifetime lease of the wrapped object.","nodes":[{"pos":[0,53],"content":"Initializes the lifetime lease of the wrapped object.","nodes":[{"content":"Initializes the lifetime lease of the wrapped object.","pos":[0,53]}]}],"pos":[5429,5483],"yaml":true},{"content":"An initialized <xref href=\"System.Runtime.Remoting.Lifetime.ILease\"></xref> that allows you to control the lifetime of the wrapped object.","nodes":[{"pos":[0,138],"content":"An initialized <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Remoting.Lifetime.ILease\"&gt;&lt;/xref&gt;</ph> that allows you to control the lifetime of the wrapped object.","source":"An initialized <xref href=\"System.Runtime.Remoting.Lifetime.ILease\"></xref> that allows you to control the lifetime of the wrapped object."}],"pos":[5635,5774],"yaml":true},{"content":"Returns the wrapped object.","nodes":[{"pos":[0,27],"content":"Returns the wrapped object.","nodes":[{"content":"Returns the wrapped object.","pos":[0,27]}]}],"pos":[6855,6883],"yaml":true},{"content":"The wrapped object.","nodes":[{"pos":[0,19],"content":"The wrapped object.","nodes":[{"content":"The wrapped object.","pos":[0,19]}]}],"pos":[7653,7673],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Runtime.Remoting.ObjectHandle\n  commentId: T:System.Runtime.Remoting.ObjectHandle\n  id: ObjectHandle\n  children:\n  - System.Runtime.Remoting.ObjectHandle.#ctor(System.Object)\n  - System.Runtime.Remoting.ObjectHandle.InitializeLifetimeService\n  - System.Runtime.Remoting.ObjectHandle.Unwrap\n  langs:\n  - csharp\n  name: ObjectHandle\n  nameWithType: ObjectHandle\n  fullName: System.Runtime.Remoting.ObjectHandle\n  type: Class\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting\n  summary: Wraps marshal-by-value object references, allowing them to be returned through an indirection.\n  remarks: The <xref:System.Runtime.Remoting.ObjectHandle> class is used to pass an object (in a wrapped state) between multiple application domains without loading the metadata for the wrapped object in each <xref:System.AppDomain> through which the <xref:System.Runtime.Remoting.ObjectHandle> travels. Thus, the <xref:System.Runtime.Remoting.ObjectHandle> class gives the caller control of when the <xref:System.Type> of the remote object is loaded into a domain.\n  example:\n  - \"The following code example shows how to create an object in another <xref:System.AppDomain>, and retrieve a proxy to the object from a <xref:System.Runtime.Remoting.ObjectHandle>. In this example, you can assume that the code of the `MyType` class is compiled into an assembly called \\\"ObjectHandleAssembly\\\".  \\n  \\n [!code-cpp[ObjectHandle#1](~/samples/snippets/cpp/VS_Snippets_Remoting/ObjectHandle/CPP/objecthandleassembly.cpp#1)]\\n [!code-csharp[ObjectHandle#1](~/samples/snippets/csharp/VS_Snippets_Remoting/ObjectHandle/CS/objecthandleassembly.cs#1)]\\n [!code-vb[ObjectHandle#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ObjectHandle/VB/objecthandleassembly.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDual)]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class ObjectHandle : MarshalByRefObject, System.Runtime.Remoting.IObjectHandle\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  implements:\n  - System.Runtime.Remoting.IObjectHandle\n  inheritedMembers:\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.Runtime.InteropServices.ClassInterfaceAttribute\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/ObjectHandle.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Runtime.Remoting.ObjectHandle.#ctor(System.Object)\n  commentId: M:System.Runtime.Remoting.ObjectHandle.#ctor(System.Object)\n  id: '#ctor(System.Object)'\n  parent: System.Runtime.Remoting.ObjectHandle\n  langs:\n  - csharp\n  name: ObjectHandle(Object)\n  nameWithType: ObjectHandle.ObjectHandle(Object)\n  fullName: ObjectHandle.ObjectHandle(Object)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting\n  summary: Initializes an instance of the <xref href=\"System.Runtime.Remoting.ObjectHandle\"></xref> class, wrapping the given object <code>o</code>.\n  syntax:\n    content: public ObjectHandle (object o);\n    parameters:\n    - id: o\n      type: System.Object\n      description: The object that is wrapped by the new <xref href=\"System.Runtime.Remoting.ObjectHandle\"></xref>.\n  overload: System.Runtime.Remoting.ObjectHandle.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/ObjectHandle.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Runtime.Remoting.ObjectHandle.InitializeLifetimeService\n  commentId: M:System.Runtime.Remoting.ObjectHandle.InitializeLifetimeService\n  id: InitializeLifetimeService\n  parent: System.Runtime.Remoting.ObjectHandle\n  langs:\n  - csharp\n  name: InitializeLifetimeService()\n  nameWithType: ObjectHandle.InitializeLifetimeService()\n  fullName: ObjectHandle.InitializeLifetimeService()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting\n  summary: Initializes the lifetime lease of the wrapped object.\n  syntax:\n    content: public override object InitializeLifetimeService ();\n    parameters: []\n    return:\n      type: System.Object\n      description: An initialized <xref href=\"System.Runtime.Remoting.Lifetime.ILease\"></xref> that allows you to control the lifetime of the wrapped object.\n  overload: System.Runtime.Remoting.ObjectHandle.InitializeLifetimeService*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/ObjectHandle.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Runtime.Remoting.ObjectHandle.Unwrap\n  commentId: M:System.Runtime.Remoting.ObjectHandle.Unwrap\n  id: Unwrap\n  parent: System.Runtime.Remoting.ObjectHandle\n  langs:\n  - csharp\n  name: Unwrap()\n  nameWithType: ObjectHandle.Unwrap()\n  fullName: ObjectHandle.Unwrap()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting\n  summary: Returns the wrapped object.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates how to activate an object in another <xref:System.AppDomain>, retrieve a proxy to it with the <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A> method, and use the proxy to access the remote object.  \\n  \\n [!code-cpp[ObjectHandle#2](~/samples/snippets/cpp/VS_Snippets_Remoting/ObjectHandle/CPP/objecthandleassembly.cpp#2)]\\n [!code-csharp[ObjectHandle#2](~/samples/snippets/csharp/VS_Snippets_Remoting/ObjectHandle/CS/objecthandleassembly.cs#2)]\\n [!code-vb[ObjectHandle#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ObjectHandle/VB/objecthandleassembly.vb#2)]\"\n  syntax:\n    content: public object Unwrap ();\n    parameters: []\n    return:\n      type: System.Object\n      description: The wrapped object.\n  overload: System.Runtime.Remoting.ObjectHandle.Unwrap*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/ObjectHandle.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\nreferences:\n- uid: System.MarshalByRefObject\n  parent: System\n  isExternal: false\n  name: MarshalByRefObject\n  nameWithType: MarshalByRefObject\n  fullName: System.MarshalByRefObject\n- uid: System.Runtime.Remoting.ObjectHandle.#ctor(System.Object)\n  parent: System.Runtime.Remoting.ObjectHandle\n  isExternal: false\n  name: ObjectHandle(Object)\n  nameWithType: ObjectHandle.ObjectHandle(Object)\n  fullName: ObjectHandle.ObjectHandle(Object)\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Runtime.Remoting.ObjectHandle.InitializeLifetimeService\n  parent: System.Runtime.Remoting.ObjectHandle\n  isExternal: false\n  name: InitializeLifetimeService()\n  nameWithType: ObjectHandle.InitializeLifetimeService()\n  fullName: ObjectHandle.InitializeLifetimeService()\n- uid: System.Runtime.Remoting.ObjectHandle.Unwrap\n  parent: System.Runtime.Remoting.ObjectHandle\n  isExternal: false\n  name: Unwrap()\n  nameWithType: ObjectHandle.Unwrap()\n  fullName: ObjectHandle.Unwrap()\n- uid: System.Runtime.Remoting.ObjectHandle.#ctor*\n  parent: System.Runtime.Remoting.ObjectHandle\n  isExternal: false\n  name: ObjectHandle\n  nameWithType: ObjectHandle.ObjectHandle\n  fullName: ObjectHandle.ObjectHandle\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/ObjectHandle.xml\n- uid: System.Runtime.Remoting.ObjectHandle.InitializeLifetimeService*\n  parent: System.Runtime.Remoting.ObjectHandle\n  isExternal: false\n  name: InitializeLifetimeService\n  nameWithType: ObjectHandle.InitializeLifetimeService\n  fullName: ObjectHandle.InitializeLifetimeService\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/ObjectHandle.xml\n- uid: System.Runtime.Remoting.ObjectHandle.Unwrap*\n  parent: System.Runtime.Remoting.ObjectHandle\n  isExternal: false\n  name: Unwrap\n  nameWithType: ObjectHandle.Unwrap\n  fullName: ObjectHandle.Unwrap\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/ObjectHandle.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.MarshalByRefObject.CreateObjRef(System.Type)\n  parent: System.MarshalByRefObject\n  isExternal: false\n  name: CreateObjRef(Type)\n  nameWithType: MarshalByRefObject.CreateObjRef(Type)\n  fullName: MarshalByRefObject.CreateObjRef(Type)\n- uid: System.MarshalByRefObject.GetLifetimeService\n  parent: System.MarshalByRefObject\n  isExternal: false\n  name: GetLifetimeService()\n  nameWithType: MarshalByRefObject.GetLifetimeService()\n  fullName: MarshalByRefObject.GetLifetimeService()\n- uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  parent: System.MarshalByRefObject\n  isExternal: false\n  name: MemberwiseClone(Boolean)\n  nameWithType: MarshalByRefObject.MemberwiseClone(Boolean)\n  fullName: MarshalByRefObject.MemberwiseClone(Boolean)\n- uid: System.Runtime.Remoting.IObjectHandle\n  parent: System.Runtime.Remoting\n  isExternal: false\n  name: IObjectHandle\n  nameWithType: IObjectHandle\n  fullName: System.Runtime.Remoting.IObjectHandle\n"}