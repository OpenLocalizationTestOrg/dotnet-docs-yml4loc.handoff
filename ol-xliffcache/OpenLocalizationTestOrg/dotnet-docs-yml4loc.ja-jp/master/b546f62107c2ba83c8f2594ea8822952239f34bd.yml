### YamlMime:ManagedReference
items:
- uid: System.Threading.AsyncLocal`1
  commentId: T:System.Threading.AsyncLocal`1
  id: AsyncLocal`1
  children:
  - System.Threading.AsyncLocal`1.#ctor
  - System.Threading.AsyncLocal`1.#ctor(System.Action{System.Threading.AsyncLocalValueChangedArgs{`0}})
  - System.Threading.AsyncLocal`1.Value
  langs:
  - csharp
  name: AsyncLocal<T>
  nameWithType: AsyncLocal<T>
  fullName: System.Threading.AsyncLocal<T>
  type: Class
  assemblies:
  - System.Threading
  - mscorlib
  - netstandard
  namespace: System.Threading
  summary: Represents ambient data that is local to a given asynchronous control flow, such as an asynchronous method.
  remarks: "Because the task-based asynchronous programming model tends to abstract the use of threads, <xref:System.Threading.AsyncLocal%601> instances can be used to persist data across threads.  \n  \n The <xref:System.Threading.AsyncLocal%601> class also provides optional notifications when the value associated with the current thread changes, either because it was explicitly changed by setting the <xref:System.Threading.AsyncLocal%601.Value%2A> property, or implicitly changed when the thread encountered an `await` or other context transition."
  example:
  - "The following example uses the <xref:System.Threading.AsyncLocal%601> class to persist a string value across an asynchronous flow. It also contrasts the use of  <xref:System.Threading.AsyncLocal%601> with <xref:System.Threading.ThreadLocal%601>.  \n  \n [!code-csharp[System.Threading.AsyncLocal#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.asynclocal/cs/Example1.cs#1)]\n [!code-vb[System.Threading.AsyncLocal#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.asynclocal/vb/Example1.vb#1)]"
  syntax:
    content: public sealed class AsyncLocal<T>
    typeParameters:
    - id: T
      description: The type of the ambient data.
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/AsyncLocal`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.AsyncLocal`1.#ctor
  commentId: M:System.Threading.AsyncLocal`1.#ctor
  id: '#ctor'
  parent: System.Threading.AsyncLocal`1
  langs:
  - csharp
  name: AsyncLocal<T>()
  nameWithType: AsyncLocal<T>.AsyncLocal<T>()
  fullName: AsyncLocal<T>.AsyncLocal<T>()
  type: Constructor
  assemblies:
  - System.Threading
  - mscorlib
  - netstandard
  namespace: System.Threading
  summary: Instantiates an <xref href="System.Threading.AsyncLocal`1"></xref> instance that does not receive change notifications.
  syntax:
    content: public AsyncLocal ();
    parameters: []
  overload: System.Threading.AsyncLocal`1.#ctor*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/AsyncLocal`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.AsyncLocal`1.#ctor(System.Action{System.Threading.AsyncLocalValueChangedArgs{`0}})
  commentId: M:System.Threading.AsyncLocal`1.#ctor(System.Action{System.Threading.AsyncLocalValueChangedArgs{`0}})
  id: '#ctor(System.Action{System.Threading.AsyncLocalValueChangedArgs{`0}})'
  parent: System.Threading.AsyncLocal`1
  langs:
  - csharp
  name: AsyncLocal<T>(Action<AsyncLocalValueChangedArgs<T>>)
  nameWithType: AsyncLocal<T>.AsyncLocal<T>(Action<AsyncLocalValueChangedArgs<T>>)
  fullName: AsyncLocal<T>.AsyncLocal<T>(Action<AsyncLocalValueChangedArgs<T>>)
  type: Constructor
  assemblies:
  - System.Threading
  - mscorlib
  - netstandard
  namespace: System.Threading
  summary: Instantiates an <xref href="System.Threading.AsyncLocal`1"></xref> local instance that receives change notifications.
  remarks: The delegate's signature is `Action<ASyncLocalValueChangedArgs<T>`.
  syntax:
    content: >-
      [System.Security.SecurityCritical]

      public AsyncLocal (Action<System.Threading.AsyncLocalValueChangedArgs<T>> valueChangedHandler);
    parameters:
    - id: valueChangedHandler
      type: System.Action{System.Threading.AsyncLocalValueChangedArgs{T}}
      description: The delegate that is called whenever the current value changes on any thread.
  overload: System.Threading.AsyncLocal`1.#ctor*
  exceptions: []
  attributes:
  - type: System.Security.SecurityCriticalAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/AsyncLocal`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.AsyncLocal`1.Value
  commentId: P:System.Threading.AsyncLocal`1.Value
  id: Value
  parent: System.Threading.AsyncLocal`1
  langs:
  - csharp
  name: Value
  nameWithType: AsyncLocal<T>.Value
  fullName: AsyncLocal<T>.Value
  type: Property
  assemblies:
  - System.Threading
  - mscorlib
  - netstandard
  namespace: System.Threading
  summary: Gets or sets the value of the ambient data.
  syntax:
    content: >-
      [get: System.Security.SecuritySafeCritical]

      [set: System.Security.SecuritySafeCritical]

      public T Value { get; set; }
    return:
      type: T
      description: The value of the ambient data.
  overload: System.Threading.AsyncLocal`1.Value*
  exceptions: []
  attributes:
  - type: 'get: System.Security.SecuritySafeCritical'
  - type: 'set: System.Security.SecuritySafeCritical'
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/AsyncLocal`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.AsyncLocal`1.#ctor
  parent: System.Threading.AsyncLocal`1
  isExternal: false
  name: AsyncLocal<T>()
  nameWithType: AsyncLocal<T>.AsyncLocal<T>()
  fullName: AsyncLocal<T>.AsyncLocal<T>()
- uid: System.Threading.AsyncLocal`1.#ctor(System.Action{System.Threading.AsyncLocalValueChangedArgs{`0}})
  parent: System.Threading.AsyncLocal`1
  isExternal: false
  name: AsyncLocal<T>(Action<AsyncLocalValueChangedArgs<T>>)
  nameWithType: AsyncLocal<T>.AsyncLocal<T>(Action<AsyncLocalValueChangedArgs<T>>)
  fullName: AsyncLocal<T>.AsyncLocal<T>(Action<AsyncLocalValueChangedArgs<T>>)
- uid: System.Action`1
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
- uid: System.Threading.AsyncLocalValueChangedArgs`1
  name: AsyncLocalValueChangedArgs<T>
  nameWithType: AsyncLocalValueChangedArgs<T>
  fullName: System.Threading.AsyncLocalValueChangedArgs<T>
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Action{System.Threading.AsyncLocalValueChangedArgs{T}}
  parent: System
  isExternal: false
  name: Action<AsyncLocalValueChangedArgs<T>>
  nameWithType: Action<AsyncLocalValueChangedArgs<T>>
  fullName: System.Action<System.Threading.AsyncLocalValueChangedArgs<T>>
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.AsyncLocalValueChangedArgs`1
    name: AsyncLocalValueChangedArgs
    nameWithType: AsyncLocalValueChangedArgs
    fullName: System.Threading.AsyncLocalValueChangedArgs
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.AsyncLocal`1.Value
  parent: System.Threading.AsyncLocal`1
  isExternal: false
  name: Value
  nameWithType: AsyncLocal<T>.Value
  fullName: AsyncLocal<T>.Value
- uid: System.Threading.AsyncLocal`1.#ctor*
  parent: System.Threading.AsyncLocal`1
  isExternal: false
  name: AsyncLocal<T>
  nameWithType: AsyncLocal<T>.AsyncLocal<T>
  fullName: AsyncLocal<T>.AsyncLocal<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/AsyncLocal`1.xml
- uid: System.Threading.AsyncLocal`1.Value*
  parent: System.Threading.AsyncLocal`1
  isExternal: false
  name: Value
  nameWithType: AsyncLocal<T>.Value
  fullName: AsyncLocal<T>.Value
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/AsyncLocal`1.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
