### YamlMime:ManagedReference
items:
- uid: Microsoft.Win32.Registry
  commentId: T:Microsoft.Win32.Registry
  id: Registry
  children:
  - Microsoft.Win32.Registry.ClassesRoot
  - Microsoft.Win32.Registry.CurrentConfig
  - Microsoft.Win32.Registry.CurrentUser
  - Microsoft.Win32.Registry.DynData
  - Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)
  - Microsoft.Win32.Registry.LocalMachine
  - Microsoft.Win32.Registry.PerformanceData
  - Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)
  - Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)
  - Microsoft.Win32.Registry.Users
  langs:
  - csharp
  name: Registry
  nameWithType: Registry
  fullName: Microsoft.Win32.Registry
  type: Class
  assemblies:
  - Microsoft.Win32.Registry
  - mscorlib
  namespace: Microsoft.Win32
  summary: Provides <xref href="Microsoft.Win32.RegistryKey"></xref> objects that represent the root keys in the Windows registry, and `static` methods to access key/value pairs.
  remarks: "This class provides the set of standard root keys found in the registry on machines running Windows. The registry is a storage facility for information about applications, users, and default system settings. For example, applications can use the registry for storing information that needs to be preserved after the application is closed, and access that same information when the application is reloaded. For instance, you can store color preferences, screen locations, or the size of the window. You can control this data for each user by storing the information in a different location in the registry.  \n  \n The base, or root <xref:Microsoft.Win32.RegistryKey> instances that are exposed by the `Registry` class delineate the basic storage mechanism for subkeys and values in the registry. All keys are read-only because the registry depends on their existence. The keys exposed by `Registry` are:  \n  \n <xref:Microsoft.Win32.Registry.CurrentUser>  \n Stores information about user preferences.  \n  \n <xref:Microsoft.Win32.Registry.LocalMachine>  \n Stores configuration information for the local machine.  \n  \n <xref:Microsoft.Win32.Registry.ClassesRoot>  \n Stores information about types (and classes) and their properties.  \n  \n <xref:Microsoft.Win32.Registry.Users>  \n Stores information about the default user configuration.  \n  \n <xref:Microsoft.Win32.Registry.PerformanceData>  \n Stores performance information for software components.  \n  \n <xref:Microsoft.Win32.Registry.CurrentConfig>  \n Stores non-user-specific hardware information.  \n  \n <xref:Microsoft.Win32.Registry.DynData>  \n Stores dynamic data.  \n  \n Once you have identified the root key under which you want to store/retrieve information from the registry, you can use the <xref:Microsoft.Win32.RegistryKey> class to add or remove subkeys, and manipulate the values for a given key.  \n  \n Hardware devices can place information in the registry automatically using the Plug and Play interface. Software for installing device drivers can place information in the registry by writing to standard APIs.  \n  \n## Static Methods for Getting and Setting Values  \n In the .NET Framework version 2.0, the <xref:Microsoft.Win32.Registry> class also contains `static`<xref:Microsoft.Win32.Registry.GetValue%2A> and <xref:Microsoft.Win32.Registry.SetValue%2A> methods for setting and retrieving values from registry keys. These methods open and close registry keys each time they are used, so they do not perform as well as analogous methods in the <xref:Microsoft.Win32.RegistryKey> class, when you access a large number of values.  \n  \n The <xref:Microsoft.Win32.RegistryKey> class also provides methods that allow you to set Windows access control security for registry keys, to test the data type of a value before retrieving it, and to delete keys."
  example:
  - "This section contains two code examples. The first example demonstrates root keys, and the second example demonstrates the `static`<xref:Microsoft.Win32.Registry.GetValue%2A> and <xref:Microsoft.Win32.Registry.SetValue%2A> methods.  \n  \n Example 1  \n  \n The following code example demonstrates how to retrieve the subkeys of the HKEY_USERS key, and print their names to the screen. Use the <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A> method to create an instance of the particular subkey of interest. You can then use other operations in `RegistryKey` to manipulate that key.  \n  \n [!code-cpp[Classic Registry.Users Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Registry.Users Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Registry.Users Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Registry.Users Example/CS/source.cs#1)]\n [!code-vb[Classic Registry.Users Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Registry.Users Example/VB/source.vb#1)]  \n  \n Example 2  \n  \n The following code example stores values of several data types in an example key, creating the key as it does so, and then retrieves and displays the values. The example demonstrates storing and retrieving the default (nameless) name/value pair, and the use of `defaultValue` when a name/value pair does not exist.  \n  \n [!code-cpp[Microsoft.Win32.Registry.GetSet#1](~/samples/snippets/cpp/VS_Snippets_CLR/Microsoft.Win32.Registry.GetSet/CPP/source.cpp#1)]\n [!code-csharp[Microsoft.Win32.Registry.GetSet#1](~/samples/snippets/csharp/VS_Snippets_CLR/Microsoft.Win32.Registry.GetSet/CS/source.cs#1)]\n [!code-vb[Microsoft.Win32.Registry.GetSet#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Microsoft.Win32.Registry.GetSet/VB/source.vb#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public static class Registry
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32/Registry.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: Microsoft.Win32.Registry.ClassesRoot
  commentId: F:Microsoft.Win32.Registry.ClassesRoot
  id: ClassesRoot
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: ClassesRoot
  nameWithType: Registry.ClassesRoot
  fullName: Registry.ClassesRoot
  type: Field
  assemblies:
  - Microsoft.Win32.Registry
  - mscorlib
  namespace: Microsoft.Win32
  summary: Defines the types (or classes) of documents and the properties associated with those types. This field reads the Windows registry base key HKEY_CLASSES_ROOT.
  remarks: Both conventional applications and OLE applications use data that is stored under this key. This key also provides backward compatibility with the Windows 3.1 registration database by storing information for DDE and OLE support. File viewers and user interface extensions store their OLE class identifiers in this key, and processing servers are registered in this key.
  example:
  - "The following example demonstrates how to retrieve the subkeys of this key, and prints their names to the screen. Use the <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A> method to create an instance of the particular subkey of interest. You can then use other operations in <xref:Microsoft.Win32.RegistryKey> to manipulate that key.  \n  \n [!code-cpp[Classic Registry.ClassesRoot Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Registry.ClassesRoot Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Registry.ClassesRoot Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Registry.ClassesRoot Example/CS/source.cs#1)]\n [!code-vb[Classic Registry.ClassesRoot Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Registry.ClassesRoot Example/VB/source.vb#1)]"
  syntax:
    content: public static readonly Microsoft.Win32.RegistryKey ClassesRoot;
    return:
      type: Microsoft.Win32.RegistryKey
      description: ''
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32/Registry.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: Microsoft.Win32.Registry.CurrentConfig
  commentId: F:Microsoft.Win32.Registry.CurrentConfig
  id: CurrentConfig
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: CurrentConfig
  nameWithType: Registry.CurrentConfig
  fullName: Registry.CurrentConfig
  type: Field
  assemblies:
  - Microsoft.Win32.Registry
  - mscorlib
  namespace: Microsoft.Win32
  summary: Contains configuration information pertaining to the hardware that is not specific to the user. This field reads the Windows registry base key HKEY_CURRENT_CONFIG.
  remarks: "This member is mapped to a subkey within <xref:Microsoft.Win32.Registry.LocalMachine>.  \n  \n An example of using this member is an application that stores a different server name for its data depending on whether the system is attached to a network."
  example:
  - "The following example demonstrates how to retrieve the subkeys of this key, and prints their names to the screen. Use the <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A> method to create an instance of the particular subkey of interest. You can then use other operations in <xref:Microsoft.Win32.RegistryKey> to manipulate that key.  \n  \n [!code-cpp[Classic Registry.CurrentConfig Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Registry.CurrentConfig Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Registry.CurrentConfig Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Registry.CurrentConfig Example/CS/source.cs#1)]\n [!code-vb[Classic Registry.CurrentConfig Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Registry.CurrentConfig Example/VB/source.vb#1)]"
  syntax:
    content: public static readonly Microsoft.Win32.RegistryKey CurrentConfig;
    return:
      type: Microsoft.Win32.RegistryKey
      description: ''
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32/Registry.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: Microsoft.Win32.Registry.CurrentUser
  commentId: F:Microsoft.Win32.Registry.CurrentUser
  id: CurrentUser
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: CurrentUser
  nameWithType: Registry.CurrentUser
  fullName: Registry.CurrentUser
  type: Field
  assemblies:
  - Microsoft.Win32.Registry
  - mscorlib
  namespace: Microsoft.Win32
  summary: Contains information about the current user preferences. This field reads the Windows registry base key HKEY_CURRENT_USER
  remarks: Information stored in this key includes the settings of environment variables and data about program groups, colors, printers, network connections, and application preferences. This key makes it easier to establish the current user's settings. In this key, software vendors store the current user-specific preferences to be used within their applications. Microsoft, for example, creates the HKEY_CURRENT_USER\Software\Microsoft key for its applications to use, with each application creating its own subkey under the Microsoft key.
  example:
  - "The following example demonstrates how to retrieve the subkeys of this key, and prints their names to the screen. Use the <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A> method to create an instance of the particular subkey of interest. You can then use other operations in <xref:Microsoft.Win32.RegistryKey> to manipulate that key.  \n  \n [!code-cpp[Classic Registry.CurrentUser Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Registry.CurrentUser Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Registry.CurrentUser Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Registry.CurrentUser Example/CS/source.cs#1)]\n [!code-vb[Classic Registry.CurrentUser Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Registry.CurrentUser Example/VB/source.vb#1)]"
  syntax:
    content: public static readonly Microsoft.Win32.RegistryKey CurrentUser;
    return:
      type: Microsoft.Win32.RegistryKey
      description: ''
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32/Registry.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: Microsoft.Win32.Registry.DynData
  commentId: F:Microsoft.Win32.Registry.DynData
  id: DynData
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: DynData
  nameWithType: Registry.DynData
  fullName: Registry.DynData
  type: Field
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32
  summary: Contains dynamic registry data. This field reads the Windows registry base key HKEY_DYN_DATA.
  remarks: "The Windows 98/Windows Me registry supports both static data (which is stored on disk in the registry) and dynamic data (which changes frequently, such as performance statistics). This dynamic data area is the mechanism that allows Virtual Device Drivers (VxDs) to provide real-time data to Win32 applications that can run remotely as well as locally. It also allows the system monitor to provide performance statistics on remote Windows 98/Windows Me systems.  \n  \n VxDs are not limited to performance data. They can provide any data they want to pass from Ring 0 to Ring 3 efficiently without monopolizing the CPU. The registry supports dynamic data by storing a pointer to a function that returns a value (or many values). When a Registry call queries values associated with a dynamic key, that function is called to return the desired value or values.  \n  \n> [!NOTE]\n>  Dynamic keys were introduced in Microsoft Windows 95 to handle dynamic Registry data. They are supported only in Windows 98/Windows Me."
  example:
  - "The following example demonstrates how to retrieve the subkeys of this key, and prints their names to the screen. Use the <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A> method to create an instance of the particular subkey of interest. You can then use other operations in <xref:Microsoft.Win32.RegistryKey> to manipulate that key. Note that this example can return no results, since there might not be dynamic data available, or you might not be running Windows 98/ME. Using this key may cause an error on other systems.  \n  \n [!code-cpp[Classic Registry.DynData Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Registry.DynData Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Registry.DynData Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Registry.DynData Example/CS/source.cs#1)]\n [!code-vb[Classic Registry.DynData Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Registry.DynData Example/VB/source.vb#1)]"
  syntax:
    content: >-
      [System.Obsolete("Use PerformanceData instead")]

      public static readonly Microsoft.Win32.RegistryKey DynData;
    return:
      type: Microsoft.Win32.RegistryKey
      description: ''
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The operating system does not support dynamic data; that is, it is not Windows 98, Windows 98 Second Edition, or Windows Millennium Edition (Windows Me).
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32/Registry.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)
  commentId: M:Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)
  id: GetValue(System.String,System.String,System.Object)
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: GetValue(String, String, Object)
  nameWithType: Registry.GetValue(String, String, Object)
  fullName: Registry.GetValue(String, String, Object)
  type: Method
  assemblies:
  - Microsoft.Win32.Registry
  - mscorlib
  namespace: Microsoft.Win32
  summary: Retrieves the value associated with the specified name, in the specified registry key. If the name is not found in the specified key, returns a default value that you provide, or `null` if the specified key does not exist.
  remarks: "The string `valueName` is not case-sensitive.  \n  \n> [!NOTE]\n>  A registry key can contain one value that is not associated with any name. When this unnamed value is displayed in the registry editor, the string \"(Default)\" appears instead of a name. To retrieve this unnamed value, specify either `null` or the empty string (\"\") for `valuName`.  \n  \n Valid root names are HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, HKEY_CLASSES_ROOT, HKEY_USERS, HKEY_PERFORMANCE_DATA, HKEY_CURRENT_CONFIG, and HKEY_DYN_DATA. For example, in Visual Basic the string \"HKEY_CURRENT_USER\\MyTestKey\" accesses key/value pairs for the subkey \"MyTestKey\" in the HKEY_CURRENT_USER root.  \n  \n When the <xref:Microsoft.Win32.RegistryKey.GetValue%2A> method retrieves expandable string values (<xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>), it expands environment strings using data from the local environment. If a value containing expandable references to environment variables has been stored as a string (<xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>), rather than as an expandable string (<xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>), <xref:Microsoft.Win32.RegistryKey.GetValue%2A> does not expand it. You can expand such a string after it has been retrieved by calling the <xref:System.Environment.ExpandEnvironmentVariables%2A?displayProperty=fullName> method.  \n  \n> [!NOTE]\n>  The recommended way to retrieve data from HKEY_PERFORMANCE_DATA is to use the <xref:System.Diagnostics.PerformanceCounter> class rather than the <xref:Microsoft.Win32.RegistryKey.GetValue%2A?displayProperty=fullName> method.  \n  \n The <xref:Microsoft.Win32.Registry.GetValue%2A> and <xref:Microsoft.Win32.Registry.SetValue%2A> methods open and close registry keys each time they are used, so they do not perform as well as the methods of the <xref:Microsoft.Win32.RegistryKey> class if you access a large number of values.  \n  \n <xref:Microsoft.Win32.RegistryKey> also provides methods that allow you to add an access control list (ACL) to a registry key, to test the data type of a value before retrieving it, and to delete keys."
  example:
  - "The following code example stores values of several data types in an example key, creating the key as it does so, and then retrieves and displays the values. The example demonstrates storing and retrieving the default (nameless) name/value pair, and the use of `defaultValue` when a name/value pair does not exist.  \n  \n [!code-cpp[Microsoft.Win32.Registry.GetSet#1](~/samples/snippets/cpp/VS_Snippets_CLR/Microsoft.Win32.Registry.GetSet/CPP/source.cpp#1)]\n [!code-csharp[Microsoft.Win32.Registry.GetSet#1](~/samples/snippets/csharp/VS_Snippets_CLR/Microsoft.Win32.Registry.GetSet/CS/source.cs#1)]\n [!code-vb[Microsoft.Win32.Registry.GetSet#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Microsoft.Win32.Registry.GetSet/VB/source.vb#1)]"
  syntax:
    content: public static object GetValue (string keyName, string valueName, object defaultValue);
    parameters:
    - id: keyName
      type: System.String
      description: The full registry path of the key, beginning with a valid registry root, such as "HKEY_CURRENT_USER".
    - id: valueName
      type: System.String
      description: The name of the name/value pair.
    - id: defaultValue
      type: System.Object
      description: The value to return if <code>valueName</code> does not exist.
    return:
      type: System.Object
      description: '`null` if the subkey specified by <code>keyName</code> does not exist; otherwise, the value associated with <code>valueName</code>, or <code>defaultValue</code> if <code>valueName</code> is not found.'
  overload: Microsoft.Win32.Registry.GetValue*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: The user does not have the permissions required to read from the registry key.
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: The <xref href="Microsoft.Win32.RegistryKey"></xref> that contains the specified value has been marked for deletion.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>keyName</code> does not begin with a valid registry root.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32/Registry.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: Microsoft.Win32.Registry.LocalMachine
  commentId: F:Microsoft.Win32.Registry.LocalMachine
  id: LocalMachine
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: LocalMachine
  nameWithType: Registry.LocalMachine
  fullName: Registry.LocalMachine
  type: Field
  assemblies:
  - Microsoft.Win32.Registry
  - mscorlib
  namespace: Microsoft.Win32
  summary: Contains the configuration data for the local machine. This field reads the Windows registry base key HKEY_LOCAL_MACHINE.
  remarks: "`LocalMachine` contains five keys:  \n  \n Hardware  \n Describes the physical hardware in the computer, the way device drivers use that hardware, and mappings and related data that link kernel-mode drivers with user-mode code. All data in this key is recreated each time the system is started. The Description subkey describes the actual computer hardware. The DeviceMap subkey contains miscellaneous data in formats specific to particular classes of drivers. The ResourceMap subkey describes which device drivers claim which hardware resources. The Windows NT Diagnostics program (Winmsdp.exe) can report on its contents in an easy-to-read form.  \n  \n SAM  \n The directory services database of security information for user and group accounts, and for the domains in Windows 2000 Server (SAM is the Security Account Manager, known as the directory services database).  \n  \n Security  \n Contains the local security policy, such as specific user rights. This key is used only by the Windows 2000 security subsystem.  \n  \n Software  \n The per-computer software database. This key contains data about software installed on the local computer, along with various items of miscellaneous configuration data.  \n  \n System  \n Controls system startup, device driver loading, Windows 2000 services, and operating system behavior.  \n  \n By convention, if similar data exists under <xref:Microsoft.Win32.Registry.CurrentUser> and under <xref:Microsoft.Win32.Registry.LocalMachine>, the data in <xref:Microsoft.Win32.Registry.CurrentUser> takes precedence. However, values in this key can also extend (rather than replace) data in Registry.LocalMachine. Also, some items (such as device driver loading entries) are meaningless if they occur outside of Registry.LocalMachine."
  example:
  - "The following example demonstrates how to retrieve the subkeys of this key, and prints their names to the screen. Use the <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A> method to create an instance of the particular subkey of interest. You can then use other operations in <xref:Microsoft.Win32.RegistryKey> to manipulate that key.  \n  \n [!code-cpp[Classic Registry.LocalMachine Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Registry.LocalMachine Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Registry.LocalMachine Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Registry.LocalMachine Example/CS/source.cs#1)]\n [!code-vb[Classic Registry.LocalMachine Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Registry.LocalMachine Example/VB/source.vb#1)]"
  syntax:
    content: public static readonly Microsoft.Win32.RegistryKey LocalMachine;
    return:
      type: Microsoft.Win32.RegistryKey
      description: ''
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32/Registry.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: Microsoft.Win32.Registry.PerformanceData
  commentId: F:Microsoft.Win32.Registry.PerformanceData
  id: PerformanceData
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: PerformanceData
  nameWithType: Registry.PerformanceData
  fullName: Registry.PerformanceData
  type: Field
  assemblies:
  - Microsoft.Win32.Registry
  - mscorlib
  namespace: Microsoft.Win32
  summary: Contains performance information for software components. This field reads the Windows registry base key HKEY_PERFORMANCE_DATA.
  remarks: "Each software component creates keys for its objects, counters when it is installed, and writes counter data while it is executing. You can access this data as you would access any other registry data, using the <xref:Microsoft.Win32.RegistryKey> functions.  \n  \n Although you use the registry to collect performance data, the data is not stored in the registry database. Instead, accessing the registry with this key causes the system to collect the data from the appropriate system object managers.  \n  \n To obtain performance data from the local system, use the <xref:Microsoft.Win32.RegistryKey.GetValue%2A> method, with the Registry.PerformanceData key. The first call opens the key (you do not need to explicitly open the key first). However, be sure to use the <xref:Microsoft.Win32.RegistryKey.Close%2A> method to close the handle to the key when you are finished obtaining performance data. The user cannot install or remove a software component while its performance data is in use.  \n  \n To obtain performance data from a remote system, you must use the <xref:Microsoft.Win32.RegistryKey.OpenRemoteBaseKey%2A> method, with the computer name of the remote system and the Registry.PerformanceData key. This call retrieves a key representing the performance data for the remote system. To retrieve the data, call <xref:Microsoft.Win32.RegistryKey.GetValue%2A> using this key, rather than the Registry.PerformanceData key.  \n  \n> [!NOTE]\n>  On Windows Server 2003, a user must at least belong to the Performance Monitor Users group in order to access subkeys of this base key."
  example:
  - "The following example demonstrates how to retrieve the subkeys of this key, and prints their names to the screen. Use the <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A> method to create an instance of the particular subkey of interest. You can then use other operations in <xref:Microsoft.Win32.RegistryKey> to manipulate that key. Note that this example can often return no results, since there might be no performance data.  \n  \n [!code-cpp[Classic Registry.PerformanceData Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Registry.PerformanceData Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Registry.PerformanceData Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Registry.PerformanceData Example/CS/source.cs#1)]\n [!code-vb[Classic Registry.PerformanceData Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Registry.PerformanceData Example/VB/source.vb#1)]"
  syntax:
    content: public static readonly Microsoft.Win32.RegistryKey PerformanceData;
    return:
      type: Microsoft.Win32.RegistryKey
      description: ''
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32/Registry.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)
  commentId: M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)
  id: SetValue(System.String,System.String,System.Object)
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: SetValue(String, String, Object)
  nameWithType: Registry.SetValue(String, String, Object)
  fullName: Registry.SetValue(String, String, Object)
  type: Method
  assemblies:
  - Microsoft.Win32.Registry
  - mscorlib
  namespace: Microsoft.Win32
  summary: Sets the specified name/value pair on the specified registry key. If the specified key does not exist, it is created.
  remarks: "Starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the `valueName` parameter is no longer restricted to a maximum of 255 characters; however, the `keyName` parameter continues to have the 255-character restriction.  \n  \n Because many values can be stored in each key in the registry, you must use the `valueName` parameter to specify the particular value you want to set.  \n  \n> [!NOTE]\n>  A registry key can contain one value that is not associated with any name. When this unnamed value is displayed in the registry editor, the string \"(Default)\" appears instead of a name. To set this unnamed value, specify either `null` or the empty string (\"\") for `valueName`.  \n  \n If `valueName` does not exist in the key, it is created and the associated value is set to `value`.  \n  \n If `keyName` specifies a subkey that does not exist, the subkey is created in the specified root. For example, in Visual Basic the string \"HKEY_CURRENT_USER\\MyTestKey\" creates the subkey \"MyTestKey\" in the HKEY_CURRENT_USER root. The string \"HKEY_CURRENT_USER\\MyTestKey\\Key2\\Key3\" creates the nested subkeys \"MyTestKey\", \"MyTestKey\\Key2\", and \"MyTestKey\\Key2\\Key3\".  \n  \n Valid root names include HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, HKEY_CLASSES_ROOT, HKEY_USERS, HKEY_PERFORMANCE_DATA, HKEY_CURRENT_CONFIG, and HKEY_DYN_DATA.  \n  \n> [!NOTE]\n>  The <xref:Microsoft.Win32.Registry.SetValue%2A> method opens a registry key, sets the value, and closes the key each time it is called. If you need to modify a large number of values, the <xref:Microsoft.Win32.RegistryKey.SetValue%2A?displayProperty=fullName> method might provide better performance. The <xref:Microsoft.Win32.RegistryKey> class also provides methods that allow you to add an access control list (ACL) to a registry key, to test the data type of a value before retrieving it, and to delete keys.  \n  \n This overload of <xref:Microsoft.Win32.Registry.SetValue%2A> stores 64-bit integers as strings (<xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>). To store 64-bit numbers as <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName> values, use the <xref:Microsoft.Win32.Registry.SetValue%28System.String%2CSystem.String%2CSystem.Object%2CMicrosoft.Win32.RegistryValueKind%29> method overload.  \n  \n This overload of <xref:Microsoft.Win32.Registry.SetValue%2A> stores all string values as <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName> objects, even if they contain expandable references to environment variables. To save string values as expandable strings (<xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>), use the <xref:Microsoft.Win32.Registry.SetValue%28System.String%2CSystem.String%2CSystem.Object%2CMicrosoft.Win32.RegistryValueKind%29> method overload.  \n  \n This overload is equivalent to calling the <xref:Microsoft.Win32.Registry.SetValue%28System.String%2CSystem.String%2CSystem.Object%2CMicrosoft.Win32.RegistryValueKind%29> method overload with <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>.  \n  \n> [!NOTE]\n>  On Windows 98 and Windows Millennium Edition (Windows Me), the registry is not Unicode, and not all Unicode characters are valid for all code pages. A Unicode character that is invalid for the current code page is replaced by the best available match. No exception is thrown."
  example:
  - "The following code example stores values of several data types in an example key, creating the key as it does so, and then retrieves and displays the values. The example demonstrates storing and retrieving the default (nameless) name/value pair, and the use of `defaultValue` when a name/value pair does not exist.  \n  \n [!code-cpp[Microsoft.Win32.Registry.GetSet#1](~/samples/snippets/cpp/VS_Snippets_CLR/Microsoft.Win32.Registry.GetSet/CPP/source.cpp#1)]\n [!code-csharp[Microsoft.Win32.Registry.GetSet#1](~/samples/snippets/csharp/VS_Snippets_CLR/Microsoft.Win32.Registry.GetSet/CS/source.cs#1)]\n [!code-vb[Microsoft.Win32.Registry.GetSet#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Microsoft.Win32.Registry.GetSet/VB/source.vb#1)]"
  syntax:
    content: public static void SetValue (string keyName, string valueName, object value);
    parameters:
    - id: keyName
      type: System.String
      description: The full registry path of the key, beginning with a valid registry root, such as "HKEY_CURRENT_USER".
    - id: valueName
      type: System.String
      description: The name of the name/value pair.
    - id: value
      type: System.Object
      description: The value to be stored.
  overload: Microsoft.Win32.Registry.SetValue*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>value</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>keyName</code> does not begin with a valid registry root.  \n  \n -or-  \n  \n <code>keyName</code> is longer than the maximum length allowed (255 characters)."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: The <xref href="Microsoft.Win32.RegistryKey"></xref> is read-only, and thus cannot be written to; for example, it is a root-level node.
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: The user does not have the permissions required to create or modify registry keys.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32/Registry.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)
  commentId: M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)
  id: SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: SetValue(String, String, Object, RegistryValueKind)
  nameWithType: Registry.SetValue(String, String, Object, RegistryValueKind)
  fullName: Registry.SetValue(String, String, Object, RegistryValueKind)
  type: Method
  assemblies:
  - Microsoft.Win32.Registry
  - mscorlib
  namespace: Microsoft.Win32
  summary: Sets the name/value pair on the specified registry key, using the specified registry data type. If the specified key does not exist, it is created.
  remarks: "Starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the `valueName` parameter is no longer restricted to a maximum of 255 characters; however, the `keyName` parameter continues have the 255-character restriction.  \n  \n Because many values can be stored in each key in the registry, you must use the `valueName` parameter to specify the particular value you want to set.  \n  \n> [!NOTE]\n>  A registry key can contain one value that is not associated with any name. When this unnamed value is displayed in the registry editor, the string \"(Default)\" appears instead of a name. To set this unnamed value, specify either `null` or the empty string (\"\") for `valueName`.  \n  \n If `valueName` does not exist in the key, it is created and the associated value is set to `value`.  \n  \n If `keyName` specifies a subkey that does not exist, the subkey is created in the specified root. For example, in Visual Basic the string \"HKEY_CURRENT_USER\\MyTestKey\" creates the subkey \"MyTestKey\" in the HKEY_CURRENT_USER root. The string \"HKEY_CURRENT_USER\\MyTestKey\\Key2\\Key3\" creates the nested subkeys \"MyTestKey\", \"MyTestKey\\Key2\", and \"MyTestKey\\Key2\\Key3\".  \n  \n Valid root names include HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, HKEY_CLASSES_ROOT, HKEY_USERS, HKEY_PERFORMANCE_DATA, HKEY_CURRENT_CONFIG, and HKEY_DYN_DATA.  \n  \n> [!NOTE]\n>  The <xref:Microsoft.Win32.Registry.SetValue%2A> method opens a registry key, sets the value, and closes the key each time it is called. If you need to modify a large number of values, the <xref:Microsoft.Win32.RegistryKey.SetValue%2A?displayProperty=fullName> method might provide better performance. The <xref:Microsoft.Win32.RegistryKey> class also provides methods that allow you to add an access control list (ACL) to a registry key, to test the data type of a value before retrieving it, and to delete keys.  \n  \n If the type of the specified `value` does not match the specified `valueKind`, and the data cannot be converted, <xref:System.ArgumentException> is thrown. For example, you can store a <xref:System.Int64?displayProperty=fullName> as a <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>, but only if its value is less than the maximum value of a <xref:System.Int32?displayProperty=fullName>. You cannot store a single string value as a <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>.  \n  \n> [!NOTE]\n>  If boxed values are passed for <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName> or <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>, the conversion is done using the invariant culture.  \n  \n> [!NOTE]\n>  On Windows 98 and Windows Millennium Edition (Windows Me), the registry is not Unicode, and not all Unicode characters are valid for all code pages. A Unicode character that is invalid for the current code page is replaced by the best available match. No exception is thrown."
  example:
  - "The following code example stores values of several data types in an example key, creating the key as it does so, and then retrieves and displays the values. The example demonstrates storing and retrieving the default (nameless) name/value pair, and the use of `defaultValue` when a name/value pair does not exist.  \n  \n [!code-cpp[Microsoft.Win32.Registry.GetSet#1](~/samples/snippets/cpp/VS_Snippets_CLR/Microsoft.Win32.Registry.GetSet/CPP/source.cpp#1)]\n [!code-csharp[Microsoft.Win32.Registry.GetSet#1](~/samples/snippets/csharp/VS_Snippets_CLR/Microsoft.Win32.Registry.GetSet/CS/source.cs#1)]\n [!code-vb[Microsoft.Win32.Registry.GetSet#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Microsoft.Win32.Registry.GetSet/VB/source.vb#1)]"
  syntax:
    content: public static void SetValue (string keyName, string valueName, object value, Microsoft.Win32.RegistryValueKind valueKind);
    parameters:
    - id: keyName
      type: System.String
      description: The full registry path of the key, beginning with a valid registry root, such as "HKEY_CURRENT_USER".
    - id: valueName
      type: System.String
      description: The name of the name/value pair.
    - id: value
      type: System.Object
      description: The value to be stored.
    - id: valueKind
      type: Microsoft.Win32.RegistryValueKind
      description: The registry data type to use when storing the data.
  overload: Microsoft.Win32.Registry.SetValue*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>value</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>keyName</code> does not begin with a valid registry root.  \n  \n -or-  \n  \n <code>keyName</code> is longer than the maximum length allowed (255 characters).  \n  \n -or-  \n  \n The type of <code>value</code> did not match the registry data type specified by <code>valueKind</code>, therefore the data could not be converted properly."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: The <xref href="Microsoft.Win32.RegistryKey"></xref> is read-only, and thus cannot be written to; for example, it is a root-level node, or the key has not been opened with write access.
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: The user does not have the permissions required to create or modify registry keys.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32/Registry.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: Microsoft.Win32.Registry.Users
  commentId: F:Microsoft.Win32.Registry.Users
  id: Users
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: Users
  nameWithType: Registry.Users
  fullName: Registry.Users
  type: Field
  assemblies:
  - Microsoft.Win32.Registry
  - mscorlib
  namespace: Microsoft.Win32
  summary: Contains information about the default user configuration. This field reads the Windows registry base key HKEY_USERS.
  remarks: This key contains a branch for each user of the computer. The default configuration is supplied for new users on the local computer and for the default current user if the user has not changed preferences. Because Windows 98/ME also supports Registry.Users, applications can access the user-specific information the same way they do under Windows 2000. Each user's information is stored in a separate file, which can be stored locally or on a network server. Windows 98/ME can copy this file to the user's current system so that settings can move from one computer to another with the user.
  example:
  - "The following example demonstrates how to retrieve the subkeys of this key, and prints their names to the screen. Use the <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A> method to create an instance of the particular subkey of interest. You can then use other operations in <xref:Microsoft.Win32.RegistryKey> to manipulate that key.  \n  \n [!code-cpp[Classic Registry.Users Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Registry.Users Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Registry.Users Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Registry.Users Example/CS/source.cs#1)]\n [!code-vb[Classic Registry.Users Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Registry.Users Example/VB/source.vb#1)]"
  syntax:
    content: public static readonly Microsoft.Win32.RegistryKey Users;
    return:
      type: Microsoft.Win32.RegistryKey
      description: ''
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32/Registry.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ObjectDisposedException
  parent: System
  isExternal: false
  name: ObjectDisposedException
  nameWithType: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.Security.SecurityException
  parent: System.Security
  isExternal: false
  name: SecurityException
  nameWithType: SecurityException
  fullName: System.Security.SecurityException
- uid: System.IO.IOException
  parent: System.IO
  isExternal: false
  name: IOException
  nameWithType: IOException
  fullName: System.IO.IOException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.UnauthorizedAccessException
  parent: System
  isExternal: false
  name: UnauthorizedAccessException
  nameWithType: UnauthorizedAccessException
  fullName: System.UnauthorizedAccessException
- uid: Microsoft.Win32.Registry.ClassesRoot
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: ClassesRoot
  nameWithType: Registry.ClassesRoot
  fullName: Registry.ClassesRoot
- uid: Microsoft.Win32.RegistryKey
  parent: Microsoft.Win32
  isExternal: false
  name: RegistryKey
  nameWithType: RegistryKey
  fullName: Microsoft.Win32.RegistryKey
- uid: Microsoft.Win32.Registry.CurrentConfig
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: CurrentConfig
  nameWithType: Registry.CurrentConfig
  fullName: Registry.CurrentConfig
- uid: Microsoft.Win32.Registry.CurrentUser
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: CurrentUser
  nameWithType: Registry.CurrentUser
  fullName: Registry.CurrentUser
- uid: Microsoft.Win32.Registry.DynData
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: DynData
  nameWithType: Registry.DynData
  fullName: Registry.DynData
- uid: Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: GetValue(String, String, Object)
  nameWithType: Registry.GetValue(String, String, Object)
  fullName: Registry.GetValue(String, String, Object)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Win32.Registry.LocalMachine
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: LocalMachine
  nameWithType: Registry.LocalMachine
  fullName: Registry.LocalMachine
- uid: Microsoft.Win32.Registry.PerformanceData
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: PerformanceData
  nameWithType: Registry.PerformanceData
  fullName: Registry.PerformanceData
- uid: Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: SetValue(String, String, Object)
  nameWithType: Registry.SetValue(String, String, Object)
  fullName: Registry.SetValue(String, String, Object)
- uid: Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: SetValue(String, String, Object, RegistryValueKind)
  nameWithType: Registry.SetValue(String, String, Object, RegistryValueKind)
  fullName: Registry.SetValue(String, String, Object, RegistryValueKind)
- uid: Microsoft.Win32.RegistryValueKind
  parent: Microsoft.Win32
  isExternal: false
  name: RegistryValueKind
  nameWithType: RegistryValueKind
  fullName: Microsoft.Win32.RegistryValueKind
- uid: Microsoft.Win32.Registry.Users
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: Users
  nameWithType: Registry.Users
  fullName: Registry.Users
- uid: Microsoft.Win32.Registry.SetValue*
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: SetValue
  nameWithType: Registry.SetValue
  fullName: Registry.SetValue
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32/Registry.xml
- uid: Microsoft.Win32.Registry.GetValue*
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: GetValue
  nameWithType: Registry.GetValue
  fullName: Registry.GetValue
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32/Registry.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
