{"nodes":[{"content":"Provides an application-level service that processes multitouch input from the operating system and raises the <xref href=\"System.Windows.Input.Touch.FrameReported\"></xref> event.","nodes":[{"pos":[0,179],"content":"Provides an application-level service that processes multitouch input from the operating system and raises the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Touch.FrameReported\"&gt;&lt;/xref&gt;</ph> event.","source":"Provides an application-level service that processes multitouch input from the operating system and raises the <xref href=\"System.Windows.Input.Touch.FrameReported\"></xref> event."}],"pos":[370,550],"yaml":true},{"content":"The <xref:System.Windows.Input.Touch.FrameReported> event is included in [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] to support compatibility with Silverlight. If you do not have to ensure compatibility with Silverlight, use the touch events, such as <xref:System.Windows.UIElement.TouchDown> and <xref:System.Windows.UIElement.TouchMove>, on <xref:System.Windows.UIElement>, <xref:System.Windows.UIElement3D>, or <xref:System.Windows.ContentElement>.  \n  \n The <xref:System.Windows.Input.Touch.FrameReported> event does not use the same event model as other WPF input events, such as <xref:System.Windows.UIElement.TouchDown> and <xref:System.Windows.UIElement.TouchMove>. Instead of being exposed as an element-specific event that potentially routes through the object tree of a UI, the <xref:System.Windows.Input.Touch.FrameReported> event is a single event that is handled at the application level. Therefore, you cannot use the `sender` parameter of the event handler to determine what element is touched.  \n  \n Use the <xref:System.Windows.Input.TouchFrameEventArgs> to get the <xref:System.Windows.Input.TouchPoint> values that are relevant to the touch event. From the <xref:System.Windows.Input.TouchPoint>, you can get the <xref:System.Windows.Input.TouchPoint.Position%2A> of the touch and determine whether the <xref:System.Windows.Input.TouchAction> was a <xref:System.Windows.Input.TouchAction.Down>, <xref:System.Windows.Input.TouchAction.Move>, or <xref:System.Windows.Input.TouchAction.Up> action. You can also use the <xref:System.Windows.Input.TouchPoint> to get the <xref:System.Windows.Input.TouchDevice>. From the <xref:System.Windows.Input.TouchDevice>, you can determine the device <xref:System.Windows.Input.TouchDevice.Id%2A> and get information about the element that is touched.","nodes":[{"pos":[0,477],"content":"The <xref:System.Windows.Input.Touch.FrameReported> event is included in [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] to support compatibility with Silverlight. If you do not have to ensure compatibility with Silverlight, use the touch events, such as <xref:System.Windows.UIElement.TouchDown> and <xref:System.Windows.UIElement.TouchMove>, on <xref:System.Windows.UIElement>, <xref:System.Windows.UIElement3D>, or <xref:System.Windows.ContentElement>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Input.Touch.FrameReported&gt;</ph> event is included in <ph id=\"ph2\">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> to support compatibility with Silverlight.","pos":[0,185],"source":"The <xref:System.Windows.Input.Touch.FrameReported> event is included in [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] to support compatibility with Silverlight."},{"content":"If you do not have to ensure compatibility with Silverlight, use the touch events, such as <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.TouchDown&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.TouchMove&gt;</ph>, on <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Windows.UIElement3D&gt;</ph>, or <ph id=\"ph5\">&lt;xref:System.Windows.ContentElement&gt;</ph>.","pos":[186,477],"source":" If you do not have to ensure compatibility with Silverlight, use the touch events, such as <xref:System.Windows.UIElement.TouchDown> and <xref:System.Windows.UIElement.TouchMove>, on <xref:System.Windows.UIElement>, <xref:System.Windows.UIElement3D>, or <xref:System.Windows.ContentElement>."}]},{"pos":[484,1036],"content":"The <xref:System.Windows.Input.Touch.FrameReported> event does not use the same event model as other WPF input events, such as <xref:System.Windows.UIElement.TouchDown> and <xref:System.Windows.UIElement.TouchMove>. Instead of being exposed as an element-specific event that potentially routes through the object tree of a UI, the <xref:System.Windows.Input.Touch.FrameReported> event is a single event that is handled at the application level. Therefore, you cannot use the `sender` parameter of the event handler to determine what element is touched.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Input.Touch.FrameReported&gt;</ph> event does not use the same event model as other WPF input events, such as <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.TouchDown&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Windows.UIElement.TouchMove&gt;</ph>.","pos":[0,215],"source":"The <xref:System.Windows.Input.Touch.FrameReported> event does not use the same event model as other WPF input events, such as <xref:System.Windows.UIElement.TouchDown> and <xref:System.Windows.UIElement.TouchMove>."},{"content":"Instead of being exposed as an element-specific event that potentially routes through the object tree of a UI, the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Touch.FrameReported&gt;</ph> event is a single event that is handled at the application level.","pos":[216,444],"source":" Instead of being exposed as an element-specific event that potentially routes through the object tree of a UI, the <xref:System.Windows.Input.Touch.FrameReported> event is a single event that is handled at the application level."},{"content":"Therefore, you cannot use the <ph id=\"ph1\">`sender`</ph> parameter of the event handler to determine what element is touched.","pos":[445,552],"source":" Therefore, you cannot use the `sender` parameter of the event handler to determine what element is touched."}]},{"pos":[1043,1832],"content":"Use the <xref:System.Windows.Input.TouchFrameEventArgs> to get the <xref:System.Windows.Input.TouchPoint> values that are relevant to the touch event. From the <xref:System.Windows.Input.TouchPoint>, you can get the <xref:System.Windows.Input.TouchPoint.Position%2A> of the touch and determine whether the <xref:System.Windows.Input.TouchAction> was a <xref:System.Windows.Input.TouchAction.Down>, <xref:System.Windows.Input.TouchAction.Move>, or <xref:System.Windows.Input.TouchAction.Up> action. You can also use the <xref:System.Windows.Input.TouchPoint> to get the <xref:System.Windows.Input.TouchDevice>. From the <xref:System.Windows.Input.TouchDevice>, you can determine the device <xref:System.Windows.Input.TouchDevice.Id%2A> and get information about the element that is touched.","nodes":[{"content":"Use the <xref:System.Windows.Input.TouchFrameEventArgs> to get the <xref:System.Windows.Input.TouchPoint> values that are relevant to the touch event. From the <xref:System.Windows.Input.TouchPoint>, you can get the <xref:System.Windows.Input.TouchPoint.Position%2A> of the touch and determine whether the <xref:System.Windows.Input.TouchAction> was a <xref:System.Windows.Input.TouchAction.Down>, <xref:System.Windows.Input.TouchAction.Move>, or <xref:System.Windows.Input.TouchAction.Up> action. You can also use the <xref:System.Windows.Input.TouchPoint> to get the <xref:System.Windows.Input.TouchDevice>. From the <xref:System.Windows.Input.TouchDevice>, you can determine the device <xref:System.Windows.Input.TouchDevice.Id%2A> and get information about the element that is touched.","pos":[0,789],"nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Windows.Input.TouchFrameEventArgs&gt;</ph> to get the <ph id=\"ph2\">&lt;xref:System.Windows.Input.TouchPoint&gt;</ph> values that are relevant to the touch event.","pos":[0,150],"source":"Use the <xref:System.Windows.Input.TouchFrameEventArgs> to get the <xref:System.Windows.Input.TouchPoint> values that are relevant to the touch event."},{"content":"From the <ph id=\"ph1\">&lt;xref:System.Windows.Input.TouchPoint&gt;</ph>, you can get the <ph id=\"ph2\">&lt;xref:System.Windows.Input.TouchPoint.Position%2A&gt;</ph> of the touch and determine whether the <ph id=\"ph3\">&lt;xref:System.Windows.Input.TouchAction&gt;</ph> was a <ph id=\"ph4\">&lt;xref:System.Windows.Input.TouchAction.Down&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.Windows.Input.TouchAction.Move&gt;</ph>, or <ph id=\"ph6\">&lt;xref:System.Windows.Input.TouchAction.Up&gt;</ph> action.","pos":[151,497],"source":" From the <xref:System.Windows.Input.TouchPoint>, you can get the <xref:System.Windows.Input.TouchPoint.Position%2A> of the touch and determine whether the <xref:System.Windows.Input.TouchAction> was a <xref:System.Windows.Input.TouchAction.Down>, <xref:System.Windows.Input.TouchAction.Move>, or <xref:System.Windows.Input.TouchAction.Up> action."},{"content":"You can also use the <ph id=\"ph1\">&lt;xref:System.Windows.Input.TouchPoint&gt;</ph> to get the <ph id=\"ph2\">&lt;xref:System.Windows.Input.TouchDevice&gt;</ph>.","pos":[498,609],"source":" You can also use the <xref:System.Windows.Input.TouchPoint> to get the <xref:System.Windows.Input.TouchDevice>."},{"content":"From the <ph id=\"ph1\">&lt;xref:System.Windows.Input.TouchDevice&gt;</ph>, you can determine the device <ph id=\"ph2\">&lt;xref:System.Windows.Input.TouchDevice.Id%2A&gt;</ph> and get information about the element that is touched.","pos":[610,789],"source":" From the <xref:System.Windows.Input.TouchDevice>, you can determine the device <xref:System.Windows.Input.TouchDevice.Id%2A> and get information about the element that is touched."}]}]}],"pos":[561,2400],"yaml":true,"extradata":"MT"},{"content":"Occurs when a touch message is sent.","nodes":[{"pos":[0,36],"content":"Occurs when a touch message is sent.","nodes":[{"content":"Occurs when a touch message is sent.","pos":[0,36]}]}],"pos":[5292,5329],"yaml":true},{"content":"A frame is one in a series of multitouch messages or touch points. You can respond to touches by handling the <xref:System.Windows.Input.Touch.FrameReported> event and accessing the details of the <xref:System.Windows.Input.TouchPoint> from the <xref:System.Windows.Input.TouchFrameEventArgs> event data.  \n  \n The <xref:System.Windows.Input.Touch.FrameReported> event does not use the same event model as other [!INCLUDE[TLA#tla_titlewinclient](~/includes/tlasharptla-titlewinclient-md.md)] input events, such as <xref:System.Windows.UIElement.TouchDown> and <xref:System.Windows.UIElement.TouchMove>. Instead of being exposed as an element-specific event that potentially routes through the object tree of a UI, the <xref:System.Windows.Input.Touch.FrameReported> event is a single event that is handled at the application level. Therefore, you cannot use the `sender` parameter of the event handler to determine what element is touched.","nodes":[{"pos":[0,304],"content":"A frame is one in a series of multitouch messages or touch points. You can respond to touches by handling the <xref:System.Windows.Input.Touch.FrameReported> event and accessing the details of the <xref:System.Windows.Input.TouchPoint> from the <xref:System.Windows.Input.TouchFrameEventArgs> event data.","nodes":[{"content":"A frame is one in a series of multitouch messages or touch points. You can respond to touches by handling the <xref:System.Windows.Input.Touch.FrameReported> event and accessing the details of the <xref:System.Windows.Input.TouchPoint> from the <xref:System.Windows.Input.TouchFrameEventArgs> event data.","pos":[0,304],"nodes":[{"content":"A frame is one in a series of multitouch messages or touch points.","pos":[0,66]},{"content":"You can respond to touches by handling the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Touch.FrameReported&gt;</ph> event and accessing the details of the <ph id=\"ph2\">&lt;xref:System.Windows.Input.TouchPoint&gt;</ph> from the <ph id=\"ph3\">&lt;xref:System.Windows.Input.TouchFrameEventArgs&gt;</ph> event data.","pos":[67,304],"source":" You can respond to touches by handling the <xref:System.Windows.Input.Touch.FrameReported> event and accessing the details of the <xref:System.Windows.Input.TouchPoint> from the <xref:System.Windows.Input.TouchFrameEventArgs> event data."}]}]},{"pos":[311,939],"content":"The <xref:System.Windows.Input.Touch.FrameReported> event does not use the same event model as other [!INCLUDE[TLA#tla_titlewinclient](~/includes/tlasharptla-titlewinclient-md.md)] input events, such as <xref:System.Windows.UIElement.TouchDown> and <xref:System.Windows.UIElement.TouchMove>. Instead of being exposed as an element-specific event that potentially routes through the object tree of a UI, the <xref:System.Windows.Input.Touch.FrameReported> event is a single event that is handled at the application level. Therefore, you cannot use the `sender` parameter of the event handler to determine what element is touched.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Input.Touch.FrameReported&gt;</ph> event does not use the same event model as other <ph id=\"ph2\">[!INCLUDE[TLA#tla_titlewinclient](~/includes/tlasharptla-titlewinclient-md.md)]</ph> input events, such as <ph id=\"ph3\">&lt;xref:System.Windows.UIElement.TouchDown&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.Windows.UIElement.TouchMove&gt;</ph>.","pos":[0,291],"source":"The <xref:System.Windows.Input.Touch.FrameReported> event does not use the same event model as other [!INCLUDE[TLA#tla_titlewinclient](~/includes/tlasharptla-titlewinclient-md.md)] input events, such as <xref:System.Windows.UIElement.TouchDown> and <xref:System.Windows.UIElement.TouchMove>."},{"content":"Instead of being exposed as an element-specific event that potentially routes through the object tree of a UI, the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Touch.FrameReported&gt;</ph> event is a single event that is handled at the application level.","pos":[292,520],"source":" Instead of being exposed as an element-specific event that potentially routes through the object tree of a UI, the <xref:System.Windows.Input.Touch.FrameReported> event is a single event that is handled at the application level."},{"content":"Therefore, you cannot use the <ph id=\"ph1\">`sender`</ph> parameter of the event handler to determine what element is touched.","pos":[521,628],"source":" Therefore, you cannot use the `sender` parameter of the event handler to determine what element is touched."}]}],"pos":[5340,6284],"yaml":true,"extradata":"MT"}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Input.Touch\n  commentId: T:System.Windows.Input.Touch\n  id: Touch\n  children:\n  - System.Windows.Input.Touch.FrameReported\n  langs:\n  - csharp\n  name: Touch\n  nameWithType: Touch\n  fullName: System.Windows.Input.Touch\n  type: Class\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Provides an application-level service that processes multitouch input from the operating system and raises the <xref href=\"System.Windows.Input.Touch.FrameReported\"></xref> event.\n  remarks: \"The <xref:System.Windows.Input.Touch.FrameReported> event is included in [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] to support compatibility with Silverlight. If you do not have to ensure compatibility with Silverlight, use the touch events, such as <xref:System.Windows.UIElement.TouchDown> and <xref:System.Windows.UIElement.TouchMove>, on <xref:System.Windows.UIElement>, <xref:System.Windows.UIElement3D>, or <xref:System.Windows.ContentElement>.  \\n  \\n The <xref:System.Windows.Input.Touch.FrameReported> event does not use the same event model as other WPF input events, such as <xref:System.Windows.UIElement.TouchDown> and <xref:System.Windows.UIElement.TouchMove>. Instead of being exposed as an element-specific event that potentially routes through the object tree of a UI, the <xref:System.Windows.Input.Touch.FrameReported> event is a single event that is handled at the application level. Therefore, you cannot use the `sender` parameter of the event handler to determine what element is touched.  \\n  \\n Use the <xref:System.Windows.Input.TouchFrameEventArgs> to get the <xref:System.Windows.Input.TouchPoint> values that are relevant to the touch event. From the <xref:System.Windows.Input.TouchPoint>, you can get the <xref:System.Windows.Input.TouchPoint.Position%2A> of the touch and determine whether the <xref:System.Windows.Input.TouchAction> was a <xref:System.Windows.Input.TouchAction.Down>, <xref:System.Windows.Input.TouchAction.Move>, or <xref:System.Windows.Input.TouchAction.Up> action. You can also use the <xref:System.Windows.Input.TouchPoint> to get the <xref:System.Windows.Input.TouchDevice>. From the <xref:System.Windows.Input.TouchDevice>, you can determine the device <xref:System.Windows.Input.TouchDevice.Id%2A> and get information about the element that is touched.\"\n  example:\n  - \"The following example enables you to create simple patterns on a <xref:System.Windows.Controls.Canvas> by dragging two fingers across a touchscreen. Each touch is represented by a <xref:System.Windows.Input.TouchDevice>.The pattern is created by drawing a line between the touch points provided by the touches. This example requires a Windows Touch–compatible screen.  \\n  \\n The following markup creates the user interface, which consists of a <xref:System.Windows.Controls.Canvas> that is centered in a <xref:System.Windows.Controls.Grid>.  \\n  \\n [!code-xml[TouchFrameSample#000](~/samples/snippets/csharp/VS_Snippets_Wpf/touchframesample/cs/mainwindow.xaml#000)]  \\n  \\n The following code handles the <xref:System.Windows.Input.Touch.FrameReported> event. When a touch presses on the <xref:System.Windows.Controls.Canvas>, the <xref:System.Windows.Input.TouchDevice> is captured to the <xref:System.Windows.Controls.Canvas>. When the touch is lifted, the <xref:System.Windows.Input.TouchDevice> is released. When a touch moves across the <xref:System.Windows.Controls.Canvas>, the <xref:System.Windows.Input.TouchDevice.Id%2A> is checked. If the move came from the first touch, its location is recorded. If the move came from the second touch, a line is drawn from the position of the first touch to the position of the second touch.  \\n  \\n [!code-csharp[TouchFrameSample#100](~/samples/snippets/csharp/VS_Snippets_Wpf/touchframesample/cs/mainwindow.xaml.cs#100)]\\n [!code-vb[TouchFrameSample#100](~/samples/snippets/visualbasic/VS_Snippets_Wpf/touchframesample/vb/mainwindow.xaml.vb#100)]\"\n  syntax:\n    content: public static class Touch\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/Touch.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.Touch.FrameReported\n  commentId: E:System.Windows.Input.Touch.FrameReported\n  id: FrameReported\n  parent: System.Windows.Input.Touch\n  langs:\n  - csharp\n  name: FrameReported\n  nameWithType: Touch.FrameReported\n  fullName: Touch.FrameReported\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Occurs when a touch message is sent.\n  remarks: \"A frame is one in a series of multitouch messages or touch points. You can respond to touches by handling the <xref:System.Windows.Input.Touch.FrameReported> event and accessing the details of the <xref:System.Windows.Input.TouchPoint> from the <xref:System.Windows.Input.TouchFrameEventArgs> event data.  \\n  \\n The <xref:System.Windows.Input.Touch.FrameReported> event does not use the same event model as other [!INCLUDE[TLA#tla_titlewinclient](~/includes/tlasharptla-titlewinclient-md.md)] input events, such as <xref:System.Windows.UIElement.TouchDown> and <xref:System.Windows.UIElement.TouchMove>. Instead of being exposed as an element-specific event that potentially routes through the object tree of a UI, the <xref:System.Windows.Input.Touch.FrameReported> event is a single event that is handled at the application level. Therefore, you cannot use the `sender` parameter of the event handler to determine what element is touched.\"\n  example:\n  - \"The following example handles the <xref:System.Windows.Input.Touch.FrameReported> event. When a touch presses on the <xref:System.Windows.Controls.Canvas>, the <xref:System.Windows.Input.TouchDevice> is captured to the <xref:System.Windows.Controls.Canvas>. When the touch is lifted, the <xref:System.Windows.Input.TouchDevice> is released. When a touch moves across the <xref:System.Windows.Controls.Canvas>, the <xref:System.Windows.Input.TouchDevice.Id%2A> is checked. If the move came from the first touch, its location is recorded. If the move came from the second touch, a line is drawn from the position of the first touch to the position of the second touch.  \\n  \\n This example is part of a larger example that is available in the <xref:System.Windows.Input.Touch> class overview.  \\n  \\n [!code-csharp[TouchFrameSample#110](~/samples/snippets/csharp/VS_Snippets_Wpf/touchframesample/cs/mainwindow.xaml.cs#110)]\\n [!code-vb[TouchFrameSample#110](~/samples/snippets/visualbasic/VS_Snippets_Wpf/touchframesample/vb/mainwindow.xaml.vb#110)]\"\n  syntax:\n    content: public static event System.Windows.Input.TouchFrameEventHandler FrameReported;\n    return:\n      type: System.Windows.Input.TouchFrameEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/Touch.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Windows.Input.Touch.FrameReported\n  parent: System.Windows.Input.Touch\n  isExternal: false\n  name: FrameReported\n  nameWithType: Touch.FrameReported\n  fullName: Touch.FrameReported\n- uid: System.Windows.Input.TouchFrameEventHandler\n  parent: System.Windows.Input\n  isExternal: false\n  name: TouchFrameEventHandler\n  nameWithType: TouchFrameEventHandler\n  fullName: System.Windows.Input.TouchFrameEventHandler\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}