{"nodes":[{"content":"Provides information about a time zone adjustment, such as the transition to and from daylight saving time.","nodes":[{"pos":[0,107],"content":"Provides information about a time zone adjustment, such as the transition to and from daylight saving time.","nodes":[{"content":"Provides information about a time zone adjustment, such as the transition to and from daylight saving time.","pos":[0,107]}]}],"pos":[1329,1437],"yaml":true},{"content":"The <xref:System.TimeZoneInfo.AdjustmentRule> class defines the effective start and end dates of a particular time change to and from daylight saving time, respectively, as well as its delta (the exact amount by which the adjustment causes the time zone's standard time to change). In addition, two properties return <xref:System.TimeZoneInfo.TransitionTime> objects that define when each transition to and from standard time occurs.  \n  \n> [!NOTE]\n>  An instance of the <xref:System.TimeZoneInfo.AdjustmentRule> class is immutable. Once an object has been created, its values cannot be modified.  \n  \n To create a <xref:System.TimeZoneInfo.AdjustmentRule> object, call the `static` (`Shared` in Visual Basic) <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A?displayProperty=fullName> method. You can then supply an array of <xref:System.TimeZoneInfo.AdjustmentRule> objects to two of the overloads of the <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=fullName> method. To retrieve the adjustment rules of a particular time zone, call its <xref:System.TimeZoneInfo.GetAdjustmentRules%2A?displayProperty=fullName> method, which returns an array of <xref:System.TimeZoneInfo.AdjustmentRule> objects.","nodes":[{"pos":[0,433],"content":"The <xref:System.TimeZoneInfo.AdjustmentRule> class defines the effective start and end dates of a particular time change to and from daylight saving time, respectively, as well as its delta (the exact amount by which the adjustment causes the time zone's standard time to change). In addition, two properties return <xref:System.TimeZoneInfo.TransitionTime> objects that define when each transition to and from standard time occurs.","nodes":[{"content":"The <xref:System.TimeZoneInfo.AdjustmentRule> class defines the effective start and end dates of a particular time change to and from daylight saving time, respectively, as well as its delta (the exact amount by which the adjustment causes the time zone's standard time to change). In addition, two properties return <xref:System.TimeZoneInfo.TransitionTime> objects that define when each transition to and from standard time occurs.","pos":[0,433],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.TimeZoneInfo.AdjustmentRule&gt;</ph> class defines the effective start and end dates of a particular time change to and from daylight saving time, respectively, as well as its delta (the exact amount by which the adjustment causes the time zone's standard time to change).","pos":[0,281],"source":"The <xref:System.TimeZoneInfo.AdjustmentRule> class defines the effective start and end dates of a particular time change to and from daylight saving time, respectively, as well as its delta (the exact amount by which the adjustment causes the time zone's standard time to change)."},{"content":"In addition, two properties return <ph id=\"ph1\">&lt;xref:System.TimeZoneInfo.TransitionTime&gt;</ph> objects that define when each transition to and from standard time occurs.","pos":[282,433],"source":" In addition, two properties return <xref:System.TimeZoneInfo.TransitionTime> objects that define when each transition to and from standard time occurs."}]}]},{"pos":[441,596],"content":"[!NOTE]\n An instance of the <xref:System.TimeZoneInfo.AdjustmentRule> class is immutable. Once an object has been created, its values cannot be modified.","leadings":["","> "],"nodes":[{"content":" An instance of the <xref:System.TimeZoneInfo.AdjustmentRule> class is immutable. Once an object has been created, its values cannot be modified.","pos":[8,153],"nodes":[{"content":"An instance of the <ph id=\"ph1\">&lt;xref:System.TimeZoneInfo.AdjustmentRule&gt;</ph> class is immutable.","pos":[1,81],"source":" An instance of the <xref:System.TimeZoneInfo.AdjustmentRule> class is immutable."},{"content":"Once an object has been created, its values cannot be modified.","pos":[82,145]}]}]},{"pos":[603,1233],"content":"To create a <xref:System.TimeZoneInfo.AdjustmentRule> object, call the `static` (`Shared` in Visual Basic) <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A?displayProperty=fullName> method. You can then supply an array of <xref:System.TimeZoneInfo.AdjustmentRule> objects to two of the overloads of the <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=fullName> method. To retrieve the adjustment rules of a particular time zone, call its <xref:System.TimeZoneInfo.GetAdjustmentRules%2A?displayProperty=fullName> method, which returns an array of <xref:System.TimeZoneInfo.AdjustmentRule> objects.","nodes":[{"content":"To create a <ph id=\"ph1\">&lt;xref:System.TimeZoneInfo.AdjustmentRule&gt;</ph> object, call the <ph id=\"ph2\">`static`</ph> (<ph id=\"ph3\">`Shared`</ph> in Visual Basic) <ph id=\"ph4\">&lt;xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,205],"source":"To create a <xref:System.TimeZoneInfo.AdjustmentRule> object, call the `static` (`Shared` in Visual Basic) <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A?displayProperty=fullName> method."},{"content":"You can then supply an array of <ph id=\"ph1\">&lt;xref:System.TimeZoneInfo.AdjustmentRule&gt;</ph> objects to two of the overloads of the <ph id=\"ph2\">&lt;xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=fullName&gt;</ph> method.","pos":[206,402],"source":" You can then supply an array of <xref:System.TimeZoneInfo.AdjustmentRule> objects to two of the overloads of the <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=fullName> method."},{"content":"To retrieve the adjustment rules of a particular time zone, call its <ph id=\"ph1\">&lt;xref:System.TimeZoneInfo.GetAdjustmentRules%2A?displayProperty=fullName&gt;</ph> method, which returns an array of <ph id=\"ph2\">&lt;xref:System.TimeZoneInfo.AdjustmentRule&gt;</ph> objects.","pos":[403,630],"source":" To retrieve the adjustment rules of a particular time zone, call its <xref:System.TimeZoneInfo.GetAdjustmentRules%2A?displayProperty=fullName> method, which returns an array of <xref:System.TimeZoneInfo.AdjustmentRule> objects."}]}],"pos":[1448,2689],"yaml":true,"extradata":"MT"},{"content":"Creates a new adjustment rule for a particular time zone.","nodes":[{"pos":[0,57],"content":"Creates a new adjustment rule for a particular time zone.","nodes":[{"content":"Creates a new adjustment rule for a particular time zone.","pos":[0,57]}]}],"pos":[8119,8177],"yaml":true},{"content":"You can use this method to create one or more adjustment rules for a custom time zone. An array of the <xref:System.TimeZoneInfo.AdjustmentRule> objects returned by calls to this method can then be passed as the `adjustmentRules` parameter to two overloads of the <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> method. The example illustrates this procedure.  \n  \n> [!NOTE]\n>  The <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A> method can be used only to define an adjustment rule for a new time zone; it cannot be used to modify an adjustment rule for an existing time zone.  \n  \n The `dateStart` and `dateEnd` parameters must be date values without a time component or an <xref:System.ArgumentException> is thrown. The time component can be removed by retrieving a <xref:System.DateTime> value from the date and time's <xref:System.DateTime.Date%2A> property as shown in the following statements:  \n  \n```  \nDateTime.MinValue.Date  \nDateTime.MaxValue.Date  \nDateTime.Now.Date   \ndateVariable.Date  \n```  \n  \n The <xref:System.DateTime.Kind%2A> property of the `dateStart` and `dateEnd` parameters must also be <xref:System.DateTimeKind?displayProperty=fullName>.  \n  \n The value of the `daylightDelta` parameter can range from -14 to 14. The sum of the `daylightDelta` parameter and the `baseUtcOffset` parameter used in the call to the <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=fullName> method must also range from -14 to 14 or an <xref:System.InvalidTimeZoneException> is thrown.  \n  \n> [!NOTE]\n>  The `daylightDelta` parameter defines the difference between a time zone's standard time and its daylight saving time. It is not intended to define the time zone's standard time offset from Coordinated Universal Time (UTC). The <xref:System.TimeZoneInfo> class assumes that this offset from UTC is constant throughout the life of the time zone. To reflect a change in a time zone's offset from UTC that is not caused by the application of an adjustment rule, you must use the <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> method to create a new custom time zone.","nodes":[{"pos":[0,362],"content":"You can use this method to create one or more adjustment rules for a custom time zone. An array of the <xref:System.TimeZoneInfo.AdjustmentRule> objects returned by calls to this method can then be passed as the `adjustmentRules` parameter to two overloads of the <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> method. The example illustrates this procedure.","nodes":[{"content":"You can use this method to create one or more adjustment rules for a custom time zone.","pos":[0,86]},{"content":"An array of the <ph id=\"ph1\">&lt;xref:System.TimeZoneInfo.AdjustmentRule&gt;</ph> objects returned by calls to this method can then be passed as the <ph id=\"ph2\">`adjustmentRules`</ph> parameter to two overloads of the <ph id=\"ph3\">&lt;xref:System.TimeZoneInfo.CreateCustomTimeZone%2A&gt;</ph> method.","pos":[87,322],"source":" An array of the <xref:System.TimeZoneInfo.AdjustmentRule> objects returned by calls to this method can then be passed as the `adjustmentRules` parameter to two overloads of the <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> method."},{"content":"The example illustrates this procedure.","pos":[323,362]}]},{"pos":[370,598],"content":"[!NOTE]\n The <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A> method can be used only to define an adjustment rule for a new time zone; it cannot be used to modify an adjustment rule for an existing time zone.","leadings":["","> "],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A&gt;</ph> method can be used only to define an adjustment rule for a new time zone; it cannot be used to modify an adjustment rule for an existing time zone.","pos":[9,226],"source":" The <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A> method can be used only to define an adjustment rule for a new time zone; it cannot be used to modify an adjustment rule for an existing time zone."}]},{"pos":[605,921],"content":"The `dateStart` and `dateEnd` parameters must be date values without a time component or an <xref:System.ArgumentException> is thrown. The time component can be removed by retrieving a <xref:System.DateTime> value from the date and time's <xref:System.DateTime.Date%2A> property as shown in the following statements:","nodes":[{"content":"The <ph id=\"ph1\">`dateStart`</ph> and <ph id=\"ph2\">`dateEnd`</ph> parameters must be date values without a time component or an <ph id=\"ph3\">&lt;xref:System.ArgumentException&gt;</ph> is thrown.","pos":[0,134],"source":"The `dateStart` and `dateEnd` parameters must be date values without a time component or an <xref:System.ArgumentException> is thrown."},{"content":"The time component can be removed by retrieving a <ph id=\"ph1\">&lt;xref:System.DateTime&gt;</ph> value from the date and time's <ph id=\"ph2\">&lt;xref:System.DateTime.Date%2A&gt;</ph> property as shown in the following statements:","pos":[135,316],"source":" The time component can be removed by retrieving a <xref:System.DateTime> value from the date and time's <xref:System.DateTime.Date%2A> property as shown in the following statements:"}]},{"pos":[1034,1187],"content":"The <ph id=\"ph1\">&lt;xref:System.DateTime.Kind%2A&gt;</ph> property of the <ph id=\"ph2\">`dateStart`</ph> and <ph id=\"ph3\">`dateEnd`</ph> parameters must also be <ph id=\"ph4\">&lt;xref:System.DateTimeKind?displayProperty=fullName&gt;</ph>.","source":"The <xref:System.DateTime.Kind%2A> property of the `dateStart` and `dateEnd` parameters must also be <xref:System.DateTimeKind?displayProperty=fullName>."},{"pos":[1194,1531],"content":"The value of the `daylightDelta` parameter can range from -14 to 14. The sum of the `daylightDelta` parameter and the `baseUtcOffset` parameter used in the call to the <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=fullName> method must also range from -14 to 14 or an <xref:System.InvalidTimeZoneException> is thrown.","nodes":[{"content":"The value of the <ph id=\"ph1\">`daylightDelta`</ph> parameter can range from -14 to 14.","pos":[0,68],"source":"The value of the `daylightDelta` parameter can range from -14 to 14."},{"content":"The sum of the <ph id=\"ph1\">`daylightDelta`</ph> parameter and the <ph id=\"ph2\">`baseUtcOffset`</ph> parameter used in the call to the <ph id=\"ph3\">&lt;xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=fullName&gt;</ph> method must also range from -14 to 14 or an <ph id=\"ph4\">&lt;xref:System.InvalidTimeZoneException&gt;</ph> is thrown.","pos":[69,337],"source":" The sum of the `daylightDelta` parameter and the `baseUtcOffset` parameter used in the call to the <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=fullName> method must also range from -14 to 14 or an <xref:System.InvalidTimeZoneException> is thrown."}]},{"pos":[1539,2117],"content":"[!NOTE]\n The `daylightDelta` parameter defines the difference between a time zone's standard time and its daylight saving time. It is not intended to define the time zone's standard time offset from Coordinated Universal Time (UTC). The <xref:System.TimeZoneInfo> class assumes that this offset from UTC is constant throughout the life of the time zone. To reflect a change in a time zone's offset from UTC that is not caused by the application of an adjustment rule, you must use the <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> method to create a new custom time zone.","leadings":["","> "],"nodes":[{"content":" The `daylightDelta` parameter defines the difference between a time zone's standard time and its daylight saving time. It is not intended to define the time zone's standard time offset from Coordinated Universal Time (UTC). The <xref:System.TimeZoneInfo> class assumes that this offset from UTC is constant throughout the life of the time zone. To reflect a change in a time zone's offset from UTC that is not caused by the application of an adjustment rule, you must use the <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> method to create a new custom time zone.","pos":[8,576],"nodes":[{"content":"The <ph id=\"ph1\">`daylightDelta`</ph> parameter defines the difference between a time zone's standard time and its daylight saving time.","pos":[1,119],"source":" The `daylightDelta` parameter defines the difference between a time zone's standard time and its daylight saving time."},{"content":"It is not intended to define the time zone's standard time offset from Coordinated Universal Time (UTC).","pos":[120,224]},{"content":"The <ph id=\"ph1\">&lt;xref:System.TimeZoneInfo&gt;</ph> class assumes that this offset from UTC is constant throughout the life of the time zone.","pos":[225,345],"source":" The <xref:System.TimeZoneInfo> class assumes that this offset from UTC is constant throughout the life of the time zone."},{"content":"To reflect a change in a time zone's offset from UTC that is not caused by the application of an adjustment rule, you must use the <ph id=\"ph1\">&lt;xref:System.TimeZoneInfo.CreateCustomTimeZone%2A&gt;</ph> method to create a new custom time zone.","pos":[346,568],"source":" To reflect a change in a time zone's offset from UTC that is not caused by the application of an adjustment rule, you must use the <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> method to create a new custom time zone."}]}]}],"pos":[8188,10327],"yaml":true,"extradata":"MT"},{"content":"The effective date of the adjustment rule. If the value of the <code>dateStart</code> parameter is `DateTime.MinValue.Date`, this is the first adjustment rule in effect for a time zone.","nodes":[{"pos":[0,185],"content":"The effective date of the adjustment rule. If the value of the <code>dateStart</code> parameter is `DateTime.MinValue.Date`, this is the first adjustment rule in effect for a time zone.","nodes":[{"content":"The effective date of the adjustment rule.","pos":[0,42]},{"content":"If the value of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">dateStart</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`DateTime.MinValue.Date`</ph>, this is the first adjustment rule in effect for a time zone.","pos":[43,185],"source":" If the value of the <code>dateStart</code> parameter is `DateTime.MinValue.Date`, this is the first adjustment rule in effect for a time zone."}]}],"pos":[11658,11844],"yaml":true},{"content":"The last date that the adjustment rule is in force. If the value of the <code>dateEnd</code> parameter is `DateTime.MaxValue.Date`, the adjustment rule has no end date.","nodes":[{"pos":[0,168],"content":"The last date that the adjustment rule is in force. If the value of the <code>dateEnd</code> parameter is `DateTime.MaxValue.Date`, the adjustment rule has no end date.","nodes":[{"content":"The last date that the adjustment rule is in force.","pos":[0,51]},{"content":"If the value of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">dateEnd</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`DateTime.MaxValue.Date`</ph>, the adjustment rule has no end date.","pos":[52,168],"source":" If the value of the <code>dateEnd</code> parameter is `DateTime.MaxValue.Date`, the adjustment rule has no end date."}]}],"pos":[11909,12078],"yaml":true},{"content":"The time change that results from the adjustment. This value is added to the time zone's <xref href=\"System.TimeZoneInfo.BaseUtcOffset\"></xref> property to obtain the correct daylight offset from Coordinated Universal Time (UTC). This value can range from -14 to 14.","nodes":[{"pos":[0,266],"content":"The time change that results from the adjustment. This value is added to the time zone's <xref href=\"System.TimeZoneInfo.BaseUtcOffset\"></xref> property to obtain the correct daylight offset from Coordinated Universal Time (UTC). This value can range from -14 to 14.","nodes":[{"content":"The time change that results from the adjustment.","pos":[0,49]},{"content":"This value is added to the time zone's <ph id=\"ph1\">&lt;xref href=\"System.TimeZoneInfo.BaseUtcOffset\"&gt;&lt;/xref&gt;</ph> property to obtain the correct daylight offset from Coordinated Universal Time (UTC).","pos":[50,229],"source":" This value is added to the time zone's <xref href=\"System.TimeZoneInfo.BaseUtcOffset\"></xref> property to obtain the correct daylight offset from Coordinated Universal Time (UTC)."},{"content":"This value can range from -14 to 14.","pos":[230,266]}]}],"pos":[12149,12416],"yaml":true},{"content":"An object that defines the start of daylight saving time.","nodes":[{"pos":[0,57],"content":"An object that defines the start of daylight saving time.","nodes":[{"content":"An object that defines the start of daylight saving time.","pos":[0,57]}]}],"pos":[12516,12574],"yaml":true},{"content":"An object that defines the end of daylight saving time.","nodes":[{"pos":[0,55],"content":"An object that defines the end of daylight saving time.","nodes":[{"content":"An object that defines the end of daylight saving time.","pos":[0,55]}]}],"pos":[12672,12728],"yaml":true},{"content":"An object that represents the new adjustment rule.","nodes":[{"pos":[0,50],"content":"An object that represents the new adjustment rule.","nodes":[{"content":"An object that represents the new adjustment rule.","pos":[0,50]}]}],"pos":[12806,12857],"yaml":true},{"content":"The <xref href=\"System.DateTime.Kind\"></xref> property of the <code>dateStart</code> or <code>dateEnd</code> parameter does not equal <xref href=\"System.DateTimeKind.Unspecified\"></xref>.  \n  \n -or-  \n  \n The <code>daylightTransitionStart</code> parameter is equal to the <code>daylightTransitionEnd</code> parameter.  \n  \n -or-  \n  \n The <code>dateStart</code> or <code>dateEnd</code> parameter includes a time of day value.","nodes":[{"pos":[0,187],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.DateTime.Kind\"&gt;&lt;/xref&gt;</ph> property of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">dateStart</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">dateEnd</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter does not equal <ph id=\"ph4\">&lt;xref href=\"System.DateTimeKind.Unspecified\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.DateTime.Kind\"></xref> property of the <code>dateStart</code> or <code>dateEnd</code> parameter does not equal <xref href=\"System.DateTimeKind.Unspecified\"></xref>."},{"pos":[194,198],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[205,317],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">daylightTransitionStart</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is equal to the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">daylightTransitionEnd</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter.","source":"The <code>daylightTransitionStart</code> parameter is equal to the <code>daylightTransitionEnd</code> parameter."},{"pos":[324,328],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[335,425],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">dateStart</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">dateEnd</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter includes a time of day value.","source":"The <code>dateStart</code> or <code>dateEnd</code> parameter includes a time of day value."}],"pos":[13034,13474],"yaml":true},{"content":"<code>dateEnd</code> is earlier than <code>dateStart</code>.  \n  \n -or-  \n  \n <code>daylightDelta</code> is less than -14 or greater than 14.  \n  \n -or-  \n  \n The <xref href=\"System.TimeSpan.Milliseconds\"></xref> property of the <code>daylightDelta</code> parameter is not equal to 0.  \n  \n -or-  \n  \n The <xref href=\"System.TimeSpan.Ticks\"></xref> property of the <code>daylightDelta</code> parameter does not equal a whole number of seconds.","nodes":[{"pos":[0,60],"content":"<ph id=\"ph1\">&lt;code&gt;dateEnd&lt;/code&gt;</ph> is earlier than <ph id=\"ph2\">&lt;code&gt;dateStart&lt;/code&gt;</ph>.","source":"<code>dateEnd</code> is earlier than <code>dateStart</code>."},{"pos":[67,71],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[78,141],"content":"<ph id=\"ph1\">&lt;code&gt;daylightDelta&lt;/code&gt;</ph> is less than -14 or greater than 14.","source":"<code>daylightDelta</code> is less than -14 or greater than 14."},{"pos":[148,152],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[159,284],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.TimeSpan.Milliseconds\"&gt;&lt;/xref&gt;</ph> property of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">daylightDelta</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not equal to 0.","source":"The <xref href=\"System.TimeSpan.Milliseconds\"></xref> property of the <code>daylightDelta</code> parameter is not equal to 0."},{"pos":[291,295],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[302,443],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.TimeSpan.Ticks\"&gt;&lt;/xref&gt;</ph> property of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">daylightDelta</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter does not equal a whole number of seconds.","source":"The <xref href=\"System.TimeSpan.Ticks\"></xref> property of the <code>daylightDelta</code> parameter does not equal a whole number of seconds."}],"pos":[13588,14050],"yaml":true},{"content":"Gets the date when the adjustment rule ceases to be in effect.","nodes":[{"pos":[0,62],"content":"Gets the date when the adjustment rule ceases to be in effect.","nodes":[{"content":"Gets the date when the adjustment rule ceases to be in effect.","pos":[0,62]}]}],"pos":[15194,15257],"yaml":true},{"content":"The value of the <xref:System.TimeZoneInfo.AdjustmentRule.DateEnd%2A> property is a date value without a time component.  \n  \n Because the end date of the current adjustment rule is typically not known, you can assign `DateTime.MaxValue.Date` to the <xref:System.TimeZoneInfo.AdjustmentRule.DateEnd%2A> property when you create a custom adjustment rule.  \n  \n> [!IMPORTANT]\n>  Unless there is a compelling reason to do otherwise, you should define the adjustment rule's end date to occur within the time interval during which the time zone observes standard time. Unless there is a compelling reason to do so, you should not define the adjustment rule's end date to occur within the time interval during which the time zone observes daylight saving time. For example, if a time zone's transition from daylight saving time occurs on the third Sunday of March and its transition to daylight saving time occurs on the first Sunday of October, the effective end date of the adjustment rule should not be December 31 of a particular year, since that date occurs within the period of daylight saving time.  \n  \n By default, the registry in Windows XP defines a single adjustment rule whose end date is Friday, December 31, 9999 (the value of `DateTime.MaxValue.Date`), for each time zone. For time zones in the United States, the registry in Windows Vista defines two adjustment rules:  \n  \n-   Monday, January 01, 0001, to Sunday, December 31, 2006.  \n  \n-   Monday, January 01, 2007, to Friday, December 31, 9999.  \n  \n This means that, although time zone adjustment rules stored in the registry are useful for performing current time zone-related operations, they cannot be reliably used for retrieving historical time zone information. For information about defining a custom time zone with multiple adjustment rules that can be used in a historical time zone-aware application, see [How to: Create Time Zones with Adjustment Rules](~/docs/standard/datetime/create-time-zones-with-adjustment-rules.md).","nodes":[{"pos":[0,120],"content":"The value of the <xref:System.TimeZoneInfo.AdjustmentRule.DateEnd%2A> property is a date value without a time component.","nodes":[{"content":"The value of the <ph id=\"ph1\">&lt;xref:System.TimeZoneInfo.AdjustmentRule.DateEnd%2A&gt;</ph> property is a date value without a time component.","pos":[0,120],"source":"The value of the <xref:System.TimeZoneInfo.AdjustmentRule.DateEnd%2A> property is a date value without a time component."}]},{"pos":[127,353],"content":"Because the end date of the current adjustment rule is typically not known, you can assign <ph id=\"ph1\">`DateTime.MaxValue.Date`</ph> to the <ph id=\"ph2\">&lt;xref:System.TimeZoneInfo.AdjustmentRule.DateEnd%2A&gt;</ph> property when you create a custom adjustment rule.","source":"Because the end date of the current adjustment rule is typically not known, you can assign `DateTime.MaxValue.Date` to the <xref:System.TimeZoneInfo.AdjustmentRule.DateEnd%2A> property when you create a custom adjustment rule."},{"pos":[361,1099],"content":"[!IMPORTANT]\n Unless there is a compelling reason to do otherwise, you should define the adjustment rule's end date to occur within the time interval during which the time zone observes standard time. Unless there is a compelling reason to do so, you should not define the adjustment rule's end date to occur within the time interval during which the time zone observes daylight saving time. For example, if a time zone's transition from daylight saving time occurs on the third Sunday of March and its transition to daylight saving time occurs on the first Sunday of October, the effective end date of the adjustment rule should not be December 31 of a particular year, since that date occurs within the period of daylight saving time.","leadings":["","> "],"nodes":[{"content":" Unless there is a compelling reason to do otherwise, you should define the adjustment rule's end date to occur within the time interval during which the time zone observes standard time. Unless there is a compelling reason to do so, you should not define the adjustment rule's end date to occur within the time interval during which the time zone observes daylight saving time. For example, if a time zone's transition from daylight saving time occurs on the third Sunday of March and its transition to daylight saving time occurs on the first Sunday of October, the effective end date of the adjustment rule should not be December 31 of a particular year, since that date occurs within the period of daylight saving time.","pos":[13,736],"nodes":[{"content":"Unless there is a compelling reason to do otherwise, you should define the adjustment rule's end date to occur within the time interval during which the time zone observes standard time.","pos":[1,187]},{"content":"Unless there is a compelling reason to do so, you should not define the adjustment rule's end date to occur within the time interval during which the time zone observes daylight saving time.","pos":[188,378]},{"content":"For example, if a time zone's transition from daylight saving time occurs on the third Sunday of March and its transition to daylight saving time occurs on the first Sunday of October, the effective end date of the adjustment rule should not be December 31 of a particular year, since that date occurs within the period of daylight saving time.","pos":[379,723]}]}]},{"pos":[1106,1379],"content":"By default, the registry in Windows XP defines a single adjustment rule whose end date is Friday, December 31, 9999 (the value of `DateTime.MaxValue.Date`), for each time zone. For time zones in the United States, the registry in Windows Vista defines two adjustment rules:","nodes":[{"content":"By default, the registry in Windows XP defines a single adjustment rule whose end date is Friday, December 31, 9999 (the value of <ph id=\"ph1\">`DateTime.MaxValue.Date`</ph>), for each time zone.","pos":[0,176],"source":"By default, the registry in Windows XP defines a single adjustment rule whose end date is Friday, December 31, 9999 (the value of `DateTime.MaxValue.Date`), for each time zone."},{"content":"For time zones in the United States, the registry in Windows Vista defines two adjustment rules:","pos":[177,273]}]},{"pos":[1389,1444],"content":"Monday, January 01, 0001, to Sunday, December 31, 2006.","nodes":[{"content":"Monday, January 01, 0001, to Sunday, December 31, 2006.","pos":[0,55]}]},{"pos":[1454,1509],"content":"Monday, January 01, 2007, to Friday, December 31, 9999.","nodes":[{"content":"Monday, January 01, 2007, to Friday, December 31, 9999.","pos":[0,55]}]},{"pos":[1516,2000],"content":"This means that, although time zone adjustment rules stored in the registry are useful for performing current time zone-related operations, they cannot be reliably used for retrieving historical time zone information. For information about defining a custom time zone with multiple adjustment rules that can be used in a historical time zone-aware application, see [How to: Create Time Zones with Adjustment Rules](~/docs/standard/datetime/create-time-zones-with-adjustment-rules.md).","nodes":[{"content":"This means that, although time zone adjustment rules stored in the registry are useful for performing current time zone-related operations, they cannot be reliably used for retrieving historical time zone information.","pos":[0,217]},{"content":"For information about defining a custom time zone with multiple adjustment rules that can be used in a historical time zone-aware application, see <bpt id=\"p1\">[</bpt>How to: Create Time Zones with Adjustment Rules<ept id=\"p1\">](~/docs/standard/datetime/create-time-zones-with-adjustment-rules.md)</ept>.","pos":[218,484],"source":" For information about defining a custom time zone with multiple adjustment rules that can be used in a historical time zone-aware application, see [How to: Create Time Zones with Adjustment Rules](~/docs/standard/datetime/create-time-zones-with-adjustment-rules.md)."}]}],"pos":[15268,17284],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.DateTime\"></xref> value that indicates the end date of the adjustment rule.","nodes":[{"pos":[0,96],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.DateTime\"&gt;&lt;/xref&gt;</ph> value that indicates the end date of the adjustment rule.","source":"A <xref href=\"System.DateTime\"></xref> value that indicates the end date of the adjustment rule."}],"pos":[17968,18065],"yaml":true},{"content":"Gets the date when the adjustment rule takes effect.","nodes":[{"pos":[0,52],"content":"Gets the date when the adjustment rule takes effect.","nodes":[{"content":"Gets the date when the adjustment rule takes effect.","pos":[0,52]}]}],"pos":[19294,19347],"yaml":true},{"content":"The value of the <xref:System.TimeZoneInfo.AdjustmentRule.DateStart%2A> property is a date value without a time component. It defines the date on which a particular adjustment rule goes into effect.  This is the date in which a set of transitions (which typically are defined by one transition to daylight savings time and one transition back to standard time) go into effect. For example, an adjustment rule might go into effect on January 1, 2017, that provides for a transition to daylight savings time on the second Sunday of March and for a transition back to standard time on the first Sunday of November. Note that the starting date of the adjustment rule is not tied to the date of the first transition.  \n  \n You can assign `DateTime.MinValue.Date` to the <xref:System.TimeZoneInfo.AdjustmentRule.DateEnd%2A> property when you create a custom adjustment rule for use in a time zone-aware application that does not have to work with historic time zone information.  \n  \n> [!IMPORTANT]\n>  Unless there is a compelling reason to do otherwise, you should define the adjustment rule's start date to occur within the time interval during which the time zone observes standard time. Unless there is a compelling reason to do so, you should not define the adjustment rule's start date to occur within the time interval during which the time zone observes daylight saving time. For example, if a time zone's transition from daylight saving time occurs on the third Sunday of March and its transition to daylight saving time occurs on the first Sunday of October, the effective start date of the adjustment rule should not be January 1 of a particular year, since that date occurs within the period of daylight saving time.  \n  \n By default, the registry in Windows XP defines a single adjustment rule whose start date is Monday, January 01, 0001 (the value of `DateTime.MinValue.Date`), for each time zone. For time zones in the United States, the registry in Windows Vista defines two adjustment rules:  \n  \n-   Monday, January 01, 0001, to Sunday, December 31, 2006.  \n  \n-   Monday, January 01, 2007, to Friday, December 31, 9999.  \n  \n This means that, although time zone adjustment rules stored in the registry are useful for performing current time zone-related operations, they cannot be reliably used for retrieving historical time zone information. For information about defining a custom time zone with multiple adjustment rules that can be used in a historical time zone-aware application, see [How to: Create Time Zones with Adjustment Rules](~/docs/standard/datetime/create-time-zones-with-adjustment-rules.md).","nodes":[{"pos":[0,711],"content":"The value of the <xref:System.TimeZoneInfo.AdjustmentRule.DateStart%2A> property is a date value without a time component. It defines the date on which a particular adjustment rule goes into effect.  This is the date in which a set of transitions (which typically are defined by one transition to daylight savings time and one transition back to standard time) go into effect. For example, an adjustment rule might go into effect on January 1, 2017, that provides for a transition to daylight savings time on the second Sunday of March and for a transition back to standard time on the first Sunday of November. Note that the starting date of the adjustment rule is not tied to the date of the first transition.","nodes":[{"content":"The value of the <xref:System.TimeZoneInfo.AdjustmentRule.DateStart%2A> property is a date value without a time component. It defines the date on which a particular adjustment rule goes into effect.  This is the date in which a set of transitions (which typically are defined by one transition to daylight savings time and one transition back to standard time) go into effect. For example, an adjustment rule might go into effect on January 1, 2017, that provides for a transition to daylight savings time on the second Sunday of March and for a transition back to standard time on the first Sunday of November. Note that the starting date of the adjustment rule is not tied to the date of the first transition.","pos":[0,711],"nodes":[{"content":"The value of the <ph id=\"ph1\">&lt;xref:System.TimeZoneInfo.AdjustmentRule.DateStart%2A&gt;</ph> property is a date value without a time component.","pos":[0,122],"source":"The value of the <xref:System.TimeZoneInfo.AdjustmentRule.DateStart%2A> property is a date value without a time component."},{"content":"It defines the date on which a particular adjustment rule goes into effect.","pos":[123,198]},{"content":"This is the date in which a set of transitions (which typically are defined by one transition to daylight savings time and one transition back to standard time) go into effect.","pos":[200,376]},{"content":"For example, an adjustment rule might go into effect on January 1, 2017, that provides for a transition to daylight savings time on the second Sunday of March and for a transition back to standard time on the first Sunday of November.","pos":[377,611]},{"content":"Note that the starting date of the adjustment rule is not tied to the date of the first transition.","pos":[612,711]}]}]},{"pos":[718,972],"content":"You can assign <ph id=\"ph1\">`DateTime.MinValue.Date`</ph> to the <ph id=\"ph2\">&lt;xref:System.TimeZoneInfo.AdjustmentRule.DateEnd%2A&gt;</ph> property when you create a custom adjustment rule for use in a time zone-aware application that does not have to work with historic time zone information.","source":"You can assign `DateTime.MinValue.Date` to the <xref:System.TimeZoneInfo.AdjustmentRule.DateEnd%2A> property when you create a custom adjustment rule for use in a time zone-aware application that does not have to work with historic time zone information."},{"pos":[980,1722],"content":"[!IMPORTANT]\n Unless there is a compelling reason to do otherwise, you should define the adjustment rule's start date to occur within the time interval during which the time zone observes standard time. Unless there is a compelling reason to do so, you should not define the adjustment rule's start date to occur within the time interval during which the time zone observes daylight saving time. For example, if a time zone's transition from daylight saving time occurs on the third Sunday of March and its transition to daylight saving time occurs on the first Sunday of October, the effective start date of the adjustment rule should not be January 1 of a particular year, since that date occurs within the period of daylight saving time.","leadings":["","> "],"nodes":[{"content":" Unless there is a compelling reason to do otherwise, you should define the adjustment rule's start date to occur within the time interval during which the time zone observes standard time. Unless there is a compelling reason to do so, you should not define the adjustment rule's start date to occur within the time interval during which the time zone observes daylight saving time. For example, if a time zone's transition from daylight saving time occurs on the third Sunday of March and its transition to daylight saving time occurs on the first Sunday of October, the effective start date of the adjustment rule should not be January 1 of a particular year, since that date occurs within the period of daylight saving time.","pos":[13,740],"nodes":[{"content":"Unless there is a compelling reason to do otherwise, you should define the adjustment rule's start date to occur within the time interval during which the time zone observes standard time.","pos":[1,189]},{"content":"Unless there is a compelling reason to do so, you should not define the adjustment rule's start date to occur within the time interval during which the time zone observes daylight saving time.","pos":[190,382]},{"content":"For example, if a time zone's transition from daylight saving time occurs on the third Sunday of March and its transition to daylight saving time occurs on the first Sunday of October, the effective start date of the adjustment rule should not be January 1 of a particular year, since that date occurs within the period of daylight saving time.","pos":[383,727]}]}]},{"pos":[1729,2003],"content":"By default, the registry in Windows XP defines a single adjustment rule whose start date is Monday, January 01, 0001 (the value of `DateTime.MinValue.Date`), for each time zone. For time zones in the United States, the registry in Windows Vista defines two adjustment rules:","nodes":[{"content":"By default, the registry in Windows XP defines a single adjustment rule whose start date is Monday, January 01, 0001 (the value of <ph id=\"ph1\">`DateTime.MinValue.Date`</ph>), for each time zone.","pos":[0,177],"source":"By default, the registry in Windows XP defines a single adjustment rule whose start date is Monday, January 01, 0001 (the value of `DateTime.MinValue.Date`), for each time zone."},{"content":"For time zones in the United States, the registry in Windows Vista defines two adjustment rules:","pos":[178,274]}]},{"pos":[2013,2068],"content":"Monday, January 01, 0001, to Sunday, December 31, 2006.","nodes":[{"content":"Monday, January 01, 0001, to Sunday, December 31, 2006.","pos":[0,55]}]},{"pos":[2078,2133],"content":"Monday, January 01, 2007, to Friday, December 31, 9999.","nodes":[{"content":"Monday, January 01, 2007, to Friday, December 31, 9999.","pos":[0,55]}]},{"pos":[2140,2624],"content":"This means that, although time zone adjustment rules stored in the registry are useful for performing current time zone-related operations, they cannot be reliably used for retrieving historical time zone information. For information about defining a custom time zone with multiple adjustment rules that can be used in a historical time zone-aware application, see [How to: Create Time Zones with Adjustment Rules](~/docs/standard/datetime/create-time-zones-with-adjustment-rules.md).","nodes":[{"content":"This means that, although time zone adjustment rules stored in the registry are useful for performing current time zone-related operations, they cannot be reliably used for retrieving historical time zone information.","pos":[0,217]},{"content":"For information about defining a custom time zone with multiple adjustment rules that can be used in a historical time zone-aware application, see <bpt id=\"p1\">[</bpt>How to: Create Time Zones with Adjustment Rules<ept id=\"p1\">](~/docs/standard/datetime/create-time-zones-with-adjustment-rules.md)</ept>.","pos":[218,484],"source":" For information about defining a custom time zone with multiple adjustment rules that can be used in a historical time zone-aware application, see [How to: Create Time Zones with Adjustment Rules](~/docs/standard/datetime/create-time-zones-with-adjustment-rules.md)."}]}],"pos":[19358,21998],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.DateTime\"></xref> value that indicates when the adjustment rule takes effect.","nodes":[{"pos":[0,98],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.DateTime\"&gt;&lt;/xref&gt;</ph> value that indicates when the adjustment rule takes effect.","source":"A <xref href=\"System.DateTime\"></xref> value that indicates when the adjustment rule takes effect."}],"pos":[22684,22783],"yaml":true},{"content":"Gets the amount of time that is required to form the time zone's daylight saving time. This amount of time is added to the time zone's offset from Coordinated Universal Time (UTC).","nodes":[{"pos":[0,180],"content":"Gets the amount of time that is required to form the time zone's daylight saving time. This amount of time is added to the time zone's offset from Coordinated Universal Time (UTC).","nodes":[{"content":"Gets the amount of time that is required to form the time zone's daylight saving time. This amount of time is added to the time zone's offset from Coordinated Universal Time (UTC).","pos":[0,180],"nodes":[{"content":"Gets the amount of time that is required to form the time zone's daylight saving time.","pos":[0,86]},{"content":"This amount of time is added to the time zone's offset from Coordinated Universal Time (UTC).","pos":[87,180]}]}]}],"pos":[24038,24219],"yaml":true},{"content":"The following formula defines a time zone's daylight saving time:  \n  \n```  \nTimeZoneTime = BaseUtcOffset + DaylightDelta + UtcTime  \n```  \n  \n The value of the <xref:System.TimeZoneInfo.AdjustmentRule.DaylightDelta%2A> property can range from 14 hours to -14 hours.  \n  \n> [!NOTE]\n>  The <xref:System.TimeZoneInfo.AdjustmentRule.DaylightDelta%2A> property measures the difference between the time zone’s standard time and its daylight saving time. It does not apply to changes in a time zone's standard offset from Coordinated Universal Time (UTC). To represent a time zone that has changed its standard time offset from UTC, you must call the <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> method to create a new time zone.  \n  \n The most common value of the <xref:System.TimeZoneInfo.AdjustmentRule.DaylightDelta%2A> property is 1.0 hours. The application of the daylight saving time adjustment rule increases the time zone's offset from Coordinated Universal Time (UTC) by one hour.","nodes":[{"pos":[0,65],"content":"The following formula defines a time zone's daylight saving time:","nodes":[{"content":"The following formula defines a time zone's daylight saving time:","pos":[0,65]}]},{"pos":[144,266],"content":"The value of the <xref:System.TimeZoneInfo.AdjustmentRule.DaylightDelta%2A> property can range from 14 hours to -14 hours.","nodes":[{"content":"The value of the <ph id=\"ph1\">&lt;xref:System.TimeZoneInfo.AdjustmentRule.DaylightDelta%2A&gt;</ph> property can range from 14 hours to -14 hours.","pos":[0,122],"source":"The value of the <xref:System.TimeZoneInfo.AdjustmentRule.DaylightDelta%2A> property can range from 14 hours to -14 hours."}]},{"pos":[274,729],"content":"[!NOTE]\n The <xref:System.TimeZoneInfo.AdjustmentRule.DaylightDelta%2A> property measures the difference between the time zone’s standard time and its daylight saving time. It does not apply to changes in a time zone's standard offset from Coordinated Universal Time (UTC). To represent a time zone that has changed its standard time offset from UTC, you must call the <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> method to create a new time zone.","leadings":["","> "],"nodes":[{"content":" The <xref:System.TimeZoneInfo.AdjustmentRule.DaylightDelta%2A> property measures the difference between the time zone’s standard time and its daylight saving time. It does not apply to changes in a time zone's standard offset from Coordinated Universal Time (UTC). To represent a time zone that has changed its standard time offset from UTC, you must call the <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> method to create a new time zone.","pos":[8,453],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.TimeZoneInfo.AdjustmentRule.DaylightDelta%2A&gt;</ph> property measures the difference between the time zone’s standard time and its daylight saving time.","pos":[1,164],"source":" The <xref:System.TimeZoneInfo.AdjustmentRule.DaylightDelta%2A> property measures the difference between the time zone’s standard time and its daylight saving time."},{"content":"It does not apply to changes in a time zone's standard offset from Coordinated Universal Time (UTC).","pos":[165,265]},{"content":"To represent a time zone that has changed its standard time offset from UTC, you must call the <ph id=\"ph1\">&lt;xref:System.TimeZoneInfo.CreateCustomTimeZone%2A&gt;</ph> method to create a new time zone.","pos":[266,445],"source":" To represent a time zone that has changed its standard time offset from UTC, you must call the <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> method to create a new time zone."}]}]},{"pos":[736,990],"content":"The most common value of the <xref:System.TimeZoneInfo.AdjustmentRule.DaylightDelta%2A> property is 1.0 hours. The application of the daylight saving time adjustment rule increases the time zone's offset from Coordinated Universal Time (UTC) by one hour.","nodes":[{"content":"The most common value of the <xref:System.TimeZoneInfo.AdjustmentRule.DaylightDelta%2A> property is 1.0 hours. The application of the daylight saving time adjustment rule increases the time zone's offset from Coordinated Universal Time (UTC) by one hour.","pos":[0,254],"nodes":[{"content":"The most common value of the <ph id=\"ph1\">&lt;xref:System.TimeZoneInfo.AdjustmentRule.DaylightDelta%2A&gt;</ph> property is 1.0 hours.","pos":[0,110],"source":"The most common value of the <xref:System.TimeZoneInfo.AdjustmentRule.DaylightDelta%2A> property is 1.0 hours."},{"content":"The application of the daylight saving time adjustment rule increases the time zone's offset from Coordinated Universal Time (UTC) by one hour.","pos":[111,254]}]}]}],"pos":[24230,25234],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.TimeSpan\"></xref> object that indicates the amount of time to add to the standard time changes as a result of the adjustment rule.","nodes":[{"pos":[0,151],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> object that indicates the amount of time to add to the standard time changes as a result of the adjustment rule.","source":"A <xref href=\"System.TimeSpan\"></xref> object that indicates the amount of time to add to the standard time changes as a result of the adjustment rule."}],"pos":[25355,25507],"yaml":true},{"content":"Gets information about the annual transition from daylight saving time back to standard time.","nodes":[{"pos":[0,93],"content":"Gets information about the annual transition from daylight saving time back to standard time.","nodes":[{"content":"Gets information about the annual transition from daylight saving time back to standard time.","pos":[0,93]}]}],"pos":[26814,26908],"yaml":true},{"content":"The <xref:System.TimeZoneInfo.TransitionTime> object returned by the <xref:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd%2A> property defines either a fixed-date rule or a floating-date rule for the return to standard time. A fixed-date rule provides the month, day, and time of day on which the transition occurs. A floating-date rule provides the month, week, day of the week, and time of day on which the transition occurs.","nodes":[{"pos":[0,437],"content":"The <xref:System.TimeZoneInfo.TransitionTime> object returned by the <xref:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd%2A> property defines either a fixed-date rule or a floating-date rule for the return to standard time. A fixed-date rule provides the month, day, and time of day on which the transition occurs. A floating-date rule provides the month, week, day of the week, and time of day on which the transition occurs.","nodes":[{"content":"The <xref:System.TimeZoneInfo.TransitionTime> object returned by the <xref:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd%2A> property defines either a fixed-date rule or a floating-date rule for the return to standard time. A fixed-date rule provides the month, day, and time of day on which the transition occurs. A floating-date rule provides the month, week, day of the week, and time of day on which the transition occurs.","pos":[0,437],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.TimeZoneInfo.TransitionTime&gt;</ph> object returned by the <ph id=\"ph2\">&lt;xref:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd%2A&gt;</ph> property defines either a fixed-date rule or a floating-date rule for the return to standard time.","pos":[0,234],"source":"The <xref:System.TimeZoneInfo.TransitionTime> object returned by the <xref:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd%2A> property defines either a fixed-date rule or a floating-date rule for the return to standard time."},{"content":"A fixed-date rule provides the month, day, and time of day on which the transition occurs.","pos":[235,325]},{"content":"A floating-date rule provides the month, week, day of the week, and time of day on which the transition occurs.","pos":[326,437]}]}]}],"pos":[26919,27357],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.TimeZoneInfo.TransitionTime\"></xref> object that defines the annual transition from daylight saving time back to the time zone's standard time.","nodes":[{"pos":[0,164],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.TimeZoneInfo.TransitionTime\"&gt;&lt;/xref&gt;</ph> object that defines the annual transition from daylight saving time back to the time zone's standard time.","source":"A <xref href=\"System.TimeZoneInfo.TransitionTime\"></xref> object that defines the annual transition from daylight saving time back to the time zone's standard time."}],"pos":[27524,27689],"yaml":true},{"content":"Gets information about the annual transition from standard time to daylight saving time.","nodes":[{"pos":[0,88],"content":"Gets information about the annual transition from standard time to daylight saving time.","nodes":[{"content":"Gets information about the annual transition from standard time to daylight saving time.","pos":[0,88]}]}],"pos":[29016,29105],"yaml":true},{"content":"The <xref:System.TimeZoneInfo.TransitionTime> object returned by the <xref:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionStart%2A> property defines either a fixed-date rule or a floating-date rule for the transition to daylight saving time. A fixed-date rule provides the month, day, and time of day on which the transition occurs. A floating-date rule provides the month, the week, the day of the week, and the time of day on which the transition occurs.","nodes":[{"pos":[0,462],"content":"The <xref:System.TimeZoneInfo.TransitionTime> object returned by the <xref:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionStart%2A> property defines either a fixed-date rule or a floating-date rule for the transition to daylight saving time. A fixed-date rule provides the month, day, and time of day on which the transition occurs. A floating-date rule provides the month, the week, the day of the week, and the time of day on which the transition occurs.","nodes":[{"content":"The <xref:System.TimeZoneInfo.TransitionTime> object returned by the <xref:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionStart%2A> property defines either a fixed-date rule or a floating-date rule for the transition to daylight saving time. A fixed-date rule provides the month, day, and time of day on which the transition occurs. A floating-date rule provides the month, the week, the day of the week, and the time of day on which the transition occurs.","pos":[0,462],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.TimeZoneInfo.TransitionTime&gt;</ph> object returned by the <ph id=\"ph2\">&lt;xref:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionStart%2A&gt;</ph> property defines either a fixed-date rule or a floating-date rule for the transition to daylight saving time.","pos":[0,247],"source":"The <xref:System.TimeZoneInfo.TransitionTime> object returned by the <xref:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionStart%2A> property defines either a fixed-date rule or a floating-date rule for the transition to daylight saving time."},{"content":"A fixed-date rule provides the month, day, and time of day on which the transition occurs.","pos":[248,338]},{"content":"A floating-date rule provides the month, the week, the day of the week, and the time of day on which the transition occurs.","pos":[339,462]}]}]}],"pos":[29116,29579],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.TimeZoneInfo.TransitionTime\"></xref> object that defines the annual transition from a time zone's standard time to daylight saving time.","nodes":[{"pos":[0,157],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.TimeZoneInfo.TransitionTime\"&gt;&lt;/xref&gt;</ph> object that defines the annual transition from a time zone's standard time to daylight saving time.","source":"A <xref href=\"System.TimeZoneInfo.TransitionTime\"></xref> object that defines the annual transition from a time zone's standard time to daylight saving time."}],"pos":[29748,29906],"yaml":true},{"content":"Determines whether the current <xref href=\"System.TimeZoneInfo.AdjustmentRule\"></xref> object is equal to a second <xref href=\"System.TimeZoneInfo.AdjustmentRule\"></xref> object.","nodes":[{"pos":[0,178],"content":"Determines whether the current <ph id=\"ph1\">&lt;xref href=\"System.TimeZoneInfo.AdjustmentRule\"&gt;&lt;/xref&gt;</ph> object is equal to a second <ph id=\"ph2\">&lt;xref href=\"System.TimeZoneInfo.AdjustmentRule\"&gt;&lt;/xref&gt;</ph> object.","source":"Determines whether the current <xref href=\"System.TimeZoneInfo.AdjustmentRule\"></xref> object is equal to a second <xref href=\"System.TimeZoneInfo.AdjustmentRule\"></xref> object."}],"pos":[31326,31505],"yaml":true},{"content":"To determine whether two <xref:System.TimeZoneInfo.AdjustmentRule> objects are equal, the <xref:System.TimeZoneInfo.AdjustmentRule.Equals%28System.TimeZoneInfo.AdjustmentRule%29> method compares the member values of each object. Two adjustment rules are equal if they have the same effective dates, the same delta, and identical values for the <xref:System.TimeZoneInfo.TransitionTime> objects returned by their <xref:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionStart%2A> and <xref:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd%2A> properties.","nodes":[{"pos":[0,563],"content":"To determine whether two <xref:System.TimeZoneInfo.AdjustmentRule> objects are equal, the <xref:System.TimeZoneInfo.AdjustmentRule.Equals%28System.TimeZoneInfo.AdjustmentRule%29> method compares the member values of each object. Two adjustment rules are equal if they have the same effective dates, the same delta, and identical values for the <xref:System.TimeZoneInfo.TransitionTime> objects returned by their <xref:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionStart%2A> and <xref:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd%2A> properties.","nodes":[{"content":"To determine whether two <xref:System.TimeZoneInfo.AdjustmentRule> objects are equal, the <xref:System.TimeZoneInfo.AdjustmentRule.Equals%28System.TimeZoneInfo.AdjustmentRule%29> method compares the member values of each object. Two adjustment rules are equal if they have the same effective dates, the same delta, and identical values for the <xref:System.TimeZoneInfo.TransitionTime> objects returned by their <xref:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionStart%2A> and <xref:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd%2A> properties.","pos":[0,563],"nodes":[{"content":"To determine whether two <ph id=\"ph1\">&lt;xref:System.TimeZoneInfo.AdjustmentRule&gt;</ph> objects are equal, the <ph id=\"ph2\">&lt;xref:System.TimeZoneInfo.AdjustmentRule.Equals%28System.TimeZoneInfo.AdjustmentRule%29&gt;</ph> method compares the member values of each object.","pos":[0,228],"source":"To determine whether two <xref:System.TimeZoneInfo.AdjustmentRule> objects are equal, the <xref:System.TimeZoneInfo.AdjustmentRule.Equals%28System.TimeZoneInfo.AdjustmentRule%29> method compares the member values of each object."},{"content":"Two adjustment rules are equal if they have the same effective dates, the same delta, and identical values for the <ph id=\"ph1\">&lt;xref:System.TimeZoneInfo.TransitionTime&gt;</ph> objects returned by their <ph id=\"ph2\">&lt;xref:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionStart%2A&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd%2A&gt;</ph> properties.","pos":[229,563],"source":" Two adjustment rules are equal if they have the same effective dates, the same delta, and identical values for the <xref:System.TimeZoneInfo.TransitionTime> objects returned by their <xref:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionStart%2A> and <xref:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd%2A> properties."}]}]}],"pos":[31516,32080],"yaml":true,"extradata":"MT"},{"content":"The object to compare with the current object.","nodes":[{"pos":[0,46],"content":"The object to compare with the current object.","nodes":[{"content":"The object to compare with the current object.","pos":[0,46]}]}],"pos":[33213,33260],"yaml":true},{"content":"`true` if both <xref href=\"System.TimeZoneInfo.AdjustmentRule\"></xref> objects have equal values; otherwise, `false`.","nodes":[{"pos":[0,117],"content":"<ph id=\"ph1\">`true`</ph> if both <ph id=\"ph2\">&lt;xref href=\"System.TimeZoneInfo.AdjustmentRule\"&gt;&lt;/xref&gt;</ph> objects have equal values; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if both <xref href=\"System.TimeZoneInfo.AdjustmentRule\"></xref> objects have equal values; otherwise, `false`."}],"pos":[33318,33438],"yaml":true},{"content":"Serves as a hash function for hashing algorithms and data structures such as hash tables.","nodes":[{"pos":[0,89],"content":"Serves as a hash function for hashing algorithms and data structures such as hash tables.","nodes":[{"content":"Serves as a hash function for hashing algorithms and data structures such as hash tables.","pos":[0,89]}]}],"pos":[34682,34772],"yaml":true},{"content":"A 32-bit signed integer that serves as the hash code for the current <xref href=\"System.TimeZoneInfo.AdjustmentRule\"></xref> object.","nodes":[{"pos":[0,132],"content":"A 32-bit signed integer that serves as the hash code for the current <ph id=\"ph1\">&lt;xref href=\"System.TimeZoneInfo.AdjustmentRule\"&gt;&lt;/xref&gt;</ph> object.","source":"A 32-bit signed integer that serves as the hash code for the current <xref href=\"System.TimeZoneInfo.AdjustmentRule\"></xref> object."}],"pos":[34906,35039],"yaml":true},{"content":"Runs when the deserialization of a <xref href=\"System.TimeZoneInfo.AdjustmentRule\"></xref> object is completed.","nodes":[{"pos":[0,111],"content":"Runs when the deserialization of a <ph id=\"ph1\">&lt;xref href=\"System.TimeZoneInfo.AdjustmentRule\"&gt;&lt;/xref&gt;</ph> object is completed.","source":"Runs when the deserialization of a <xref href=\"System.TimeZoneInfo.AdjustmentRule\"></xref> object is completed."}],"pos":[36638,36750],"yaml":true},{"content":"The object that initiated the callback. The functionality for this parameter is not currently implemented.","nodes":[{"pos":[0,106],"content":"The object that initiated the callback. The functionality for this parameter is not currently implemented.","nodes":[{"content":"The object that initiated the callback. The functionality for this parameter is not currently implemented.","pos":[0,106],"nodes":[{"content":"The object that initiated the callback.","pos":[0,39]},{"content":"The functionality for this parameter is not currently implemented.","pos":[40,106]}]}]}],"pos":[36916,37023],"yaml":true},{"content":"Populates a <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object with the data that is required to serialize this object.","nodes":[{"pos":[0,143],"content":"Populates a <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;&lt;/xref&gt;</ph> object with the data that is required to serialize this object.","source":"Populates a <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object with the data that is required to serialize this object."}],"pos":[38916,39060],"yaml":true},{"content":"The object to populate with data.","nodes":[{"pos":[0,33],"content":"The object to populate with data.","nodes":[{"content":"The object to populate with data.","pos":[0,33]}]}],"pos":[39386,39420],"yaml":true},{"content":"The destination for this serialization (see <xref href=\"System.Runtime.Serialization.StreamingContext\"></xref>).","nodes":[{"pos":[0,112],"content":"The destination for this serialization (see <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Serialization.StreamingContext\"&gt;&lt;/xref&gt;</ph>).","source":"The destination for this serialization (see <xref href=\"System.Runtime.Serialization.StreamingContext\"></xref>)."}],"pos":[39515,39628],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.TimeZoneInfo.AdjustmentRule\n  commentId: T:System.TimeZoneInfo.AdjustmentRule\n  id: TimeZoneInfo.AdjustmentRule\n  children:\n  - System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule(System.DateTime,System.DateTime,System.TimeSpan,System.TimeZoneInfo.TransitionTime,System.TimeZoneInfo.TransitionTime)\n  - System.TimeZoneInfo.AdjustmentRule.DateEnd\n  - System.TimeZoneInfo.AdjustmentRule.DateStart\n  - System.TimeZoneInfo.AdjustmentRule.DaylightDelta\n  - System.TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd\n  - System.TimeZoneInfo.AdjustmentRule.DaylightTransitionStart\n  - System.TimeZoneInfo.AdjustmentRule.Equals(System.TimeZoneInfo.AdjustmentRule)\n  - System.TimeZoneInfo.AdjustmentRule.GetHashCode\n  - System.TimeZoneInfo.AdjustmentRule.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)\n  - System.TimeZoneInfo.AdjustmentRule.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  langs:\n  - csharp\n  name: TimeZoneInfo.AdjustmentRule\n  nameWithType: TimeZoneInfo.AdjustmentRule\n  fullName: System.TimeZoneInfo.AdjustmentRule\n  type: Class\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Provides information about a time zone adjustment, such as the transition to and from daylight saving time.\n  remarks: \"The <xref:System.TimeZoneInfo.AdjustmentRule> class defines the effective start and end dates of a particular time change to and from daylight saving time, respectively, as well as its delta (the exact amount by which the adjustment causes the time zone's standard time to change). In addition, two properties return <xref:System.TimeZoneInfo.TransitionTime> objects that define when each transition to and from standard time occurs.  \\n  \\n> [!NOTE]\\n>  An instance of the <xref:System.TimeZoneInfo.AdjustmentRule> class is immutable. Once an object has been created, its values cannot be modified.  \\n  \\n To create a <xref:System.TimeZoneInfo.AdjustmentRule> object, call the `static` (`Shared` in Visual Basic) <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A?displayProperty=fullName> method. You can then supply an array of <xref:System.TimeZoneInfo.AdjustmentRule> objects to two of the overloads of the <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=fullName> method. To retrieve the adjustment rules of a particular time zone, call its <xref:System.TimeZoneInfo.GetAdjustmentRules%2A?displayProperty=fullName> method, which returns an array of <xref:System.TimeZoneInfo.AdjustmentRule> objects.\"\n  example:\n  - \"The following example retrieves all time zones defined on the local system and displays complete information about their adjustment rules.  \\n  \\n [!code-csharp[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/cs/System.TimeZone2.AdjustmentRule.Class.cs#3)]\\n [!code-vb[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/vb/System.TimeZone2.AdjustmentRule.Class.vb#3)]  \\n  \\n The following is a small portion of the output that is generated by the example. The exact output will vary depending on the operating system and the date on which the example is run.  \\n  \\n```  \\nMorocco Standard Time Adjustment rules  \\n   Adjustment rule #1  \\n      Start Date: Tuesday, January 01, 2008  \\n      End Date: Wednesday, December 31, 2008  \\n      Time Change: 1:00 hours  \\n      Annual Start: The Last Saturday of May at 11:59 PM  \\n      Annual End: The Last Sunday of August at 11:59 PM  \\n   Adjustment rule #2  \\n      Start Date: Thursday, January 01, 2009  \\n      End Date: Thursday, December 31, 2009  \\n      Time Change: 1:00 hours  \\n      Annual Start: The Last Sunday of May at 11:59 PM  \\n      Annual End: The Third Thursday of August at 11:59 PM  \\n  \\nCoordinated Universal Time has no adjustment rules  \\n  \\nGMT Standard Time Adjustment rules  \\n   Start Date: Monday, January 01, 0001  \\n   End Date: Friday, December 31, 9999  \\n   Time Change: 1:00 hours  \\n   Annual Start: The Last Sunday of March at 1:00 AM  \\n   Annual End: The Last Sunday of October at 2:00 AM  \\n  \\nGreenwich Standard Time has no adjustment rules  \\n  \\nW. Europe Standard Time Adjustment rules  \\n   Start Date: Monday, January 01, 0001  \\n   End Date: Friday, December 31, 9999  \\n   Time Change: 1:00 hours  \\n   Annual Start: The Last Sunday of March at 2:00 AM  \\n   Annual End: The Last Sunday of October at 3:00 AM  \\n  \\nCentral Europe Standard Time Adjustment rules  \\n   Start Date: Monday, January 01, 0001  \\n   End Date: Friday, December 31, 9999  \\n   Time Change: 1:00 hours  \\n   Annual Start: The Last Sunday of March at 2:00 AM  \\n   Annual End: The Last Sunday of October at 3:00 AM  \\n  \\nRomance Standard Time Adjustment rules  \\n   Start Date: Monday, January 01, 0001  \\n   End Date: Friday, December 31, 9999  \\n   Time Change: 1:00 hours  \\n   Annual Start: The Last Sunday of March at 2:00 AM  \\n   Annual End: The Last Sunday of October at 3:00 AM  \\n  \\nCentral European Standard Time Adjustment rules  \\n   Start Date: Monday, January 01, 0001  \\n   End Date: Friday, December 31, 9999  \\n   Time Change: 1:00 hours  \\n   Annual Start: The Last Sunday of March at 2:00 AM  \\n   Annual End: The Last Sunday of October at 3:00 AM  \\n  \\nW. Central Africa Standard Time has no adjustment rules  \\n```\"\n  syntax:\n    content: 'public sealed class TimeZoneInfo.AdjustmentRule : IEquatable<TimeZoneInfo.AdjustmentRule>, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable'\n  inheritance:\n  - System.Object\n  implements:\n  - System.IEquatable{System.TimeZoneInfo}\n  - System.Runtime.Serialization.IDeserializationCallback\n  - System.Runtime.Serialization.ISerializable\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo+AdjustmentRule.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule(System.DateTime,System.DateTime,System.TimeSpan,System.TimeZoneInfo.TransitionTime,System.TimeZoneInfo.TransitionTime)\n  commentId: M:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule(System.DateTime,System.DateTime,System.TimeSpan,System.TimeZoneInfo.TransitionTime,System.TimeZoneInfo.TransitionTime)\n  id: CreateAdjustmentRule(System.DateTime,System.DateTime,System.TimeSpan,System.TimeZoneInfo.TransitionTime,System.TimeZoneInfo.TransitionTime)\n  parent: System.TimeZoneInfo.AdjustmentRule\n  langs:\n  - csharp\n  name: CreateAdjustmentRule(DateTime, DateTime, TimeSpan, TimeZoneInfo+TransitionTime, TimeZoneInfo+TransitionTime)\n  nameWithType: TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule(DateTime, DateTime, TimeSpan, TimeZoneInfo+TransitionTime, TimeZoneInfo+TransitionTime)\n  fullName: TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule(DateTime, DateTime, TimeSpan, TimeZoneInfo+TransitionTime, TimeZoneInfo+TransitionTime)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Creates a new adjustment rule for a particular time zone.\n  remarks: \"You can use this method to create one or more adjustment rules for a custom time zone. An array of the <xref:System.TimeZoneInfo.AdjustmentRule> objects returned by calls to this method can then be passed as the `adjustmentRules` parameter to two overloads of the <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> method. The example illustrates this procedure.  \\n  \\n> [!NOTE]\\n>  The <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A> method can be used only to define an adjustment rule for a new time zone; it cannot be used to modify an adjustment rule for an existing time zone.  \\n  \\n The `dateStart` and `dateEnd` parameters must be date values without a time component or an <xref:System.ArgumentException> is thrown. The time component can be removed by retrieving a <xref:System.DateTime> value from the date and time's <xref:System.DateTime.Date%2A> property as shown in the following statements:  \\n  \\n```  \\nDateTime.MinValue.Date  \\nDateTime.MaxValue.Date  \\nDateTime.Now.Date   \\ndateVariable.Date  \\n```  \\n  \\n The <xref:System.DateTime.Kind%2A> property of the `dateStart` and `dateEnd` parameters must also be <xref:System.DateTimeKind?displayProperty=fullName>.  \\n  \\n The value of the `daylightDelta` parameter can range from -14 to 14. The sum of the `daylightDelta` parameter and the `baseUtcOffset` parameter used in the call to the <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=fullName> method must also range from -14 to 14 or an <xref:System.InvalidTimeZoneException> is thrown.  \\n  \\n> [!NOTE]\\n>  The `daylightDelta` parameter defines the difference between a time zone's standard time and its daylight saving time. It is not intended to define the time zone's standard time offset from Coordinated Universal Time (UTC). The <xref:System.TimeZoneInfo> class assumes that this offset from UTC is constant throughout the life of the time zone. To reflect a change in a time zone's offset from UTC that is not caused by the application of an adjustment rule, you must use the <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> method to create a new custom time zone.\"\n  example:\n  - \"The following example creates an alternate Central Standard Time zone and defines three adjustment rules for the periods 1976-1986, 1987-2006, and 2007 and beyond. These rules are added to a generic <xref:System.Collections.Generic.List%601> object whose elements are then copied to a <xref:System.TimeZoneInfo.AdjustmentRule> array. This array is then used in the call to the <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%2CSystem.String%2CSystem.TimeZoneInfo.AdjustmentRule%5B%5D%29?displayProperty=fullName> method.  \\n  \\n [!code-csharp[System.TimeZone2.AdjustmentRule.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/cs/System.TimeZone2.AdjustmentRule.Class.cs#1)]\\n [!code-vb[System.TimeZone2.AdjustmentRule.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/vb/System.TimeZone2.AdjustmentRule.Class.vb#1)]\"\n  syntax:\n    content: public static TimeZoneInfo.AdjustmentRule CreateAdjustmentRule (DateTime dateStart, DateTime dateEnd, TimeSpan daylightDelta, TimeZoneInfo.TransitionTime daylightTransitionStart, TimeZoneInfo.TransitionTime daylightTransitionEnd);\n    parameters:\n    - id: dateStart\n      type: System.DateTime\n      description: The effective date of the adjustment rule. If the value of the <code>dateStart</code> parameter is `DateTime.MinValue.Date`, this is the first adjustment rule in effect for a time zone.\n    - id: dateEnd\n      type: System.DateTime\n      description: The last date that the adjustment rule is in force. If the value of the <code>dateEnd</code> parameter is `DateTime.MaxValue.Date`, the adjustment rule has no end date.\n    - id: daylightDelta\n      type: System.TimeSpan\n      description: The time change that results from the adjustment. This value is added to the time zone's <xref href=\"System.TimeZoneInfo.BaseUtcOffset\"></xref> property to obtain the correct daylight offset from Coordinated Universal Time (UTC). This value can range from -14 to 14.\n    - id: daylightTransitionStart\n      type: System.TimeZoneInfo+TransitionTime\n      description: An object that defines the start of daylight saving time.\n    - id: daylightTransitionEnd\n      type: System.TimeZoneInfo+TransitionTime\n      description: An object that defines the end of daylight saving time.\n    return:\n      type: System.TimeZoneInfo+AdjustmentRule\n      description: An object that represents the new adjustment rule.\n  overload: System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <xref href=\\\"System.DateTime.Kind\\\"></xref> property of the <code>dateStart</code> or <code>dateEnd</code> parameter does not equal <xref href=\\\"System.DateTimeKind.Unspecified\\\"></xref>.  \\n  \\n -or-  \\n  \\n The <code>daylightTransitionStart</code> parameter is equal to the <code>daylightTransitionEnd</code> parameter.  \\n  \\n -or-  \\n  \\n The <code>dateStart</code> or <code>dateEnd</code> parameter includes a time of day value.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>dateEnd</code> is earlier than <code>dateStart</code>.  \\n  \\n -or-  \\n  \\n <code>daylightDelta</code> is less than -14 or greater than 14.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.TimeSpan.Milliseconds\\\"></xref> property of the <code>daylightDelta</code> parameter is not equal to 0.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.TimeSpan.Ticks\\\"></xref> property of the <code>daylightDelta</code> parameter does not equal a whole number of seconds.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo+AdjustmentRule.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.TimeZoneInfo.AdjustmentRule.DateEnd\n  commentId: P:System.TimeZoneInfo.AdjustmentRule.DateEnd\n  id: DateEnd\n  parent: System.TimeZoneInfo.AdjustmentRule\n  langs:\n  - csharp\n  name: DateEnd\n  nameWithType: TimeZoneInfo.AdjustmentRule.DateEnd\n  fullName: TimeZoneInfo.AdjustmentRule.DateEnd\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Gets the date when the adjustment rule ceases to be in effect.\n  remarks: \"The value of the <xref:System.TimeZoneInfo.AdjustmentRule.DateEnd%2A> property is a date value without a time component.  \\n  \\n Because the end date of the current adjustment rule is typically not known, you can assign `DateTime.MaxValue.Date` to the <xref:System.TimeZoneInfo.AdjustmentRule.DateEnd%2A> property when you create a custom adjustment rule.  \\n  \\n> [!IMPORTANT]\\n>  Unless there is a compelling reason to do otherwise, you should define the adjustment rule's end date to occur within the time interval during which the time zone observes standard time. Unless there is a compelling reason to do so, you should not define the adjustment rule's end date to occur within the time interval during which the time zone observes daylight saving time. For example, if a time zone's transition from daylight saving time occurs on the third Sunday of March and its transition to daylight saving time occurs on the first Sunday of October, the effective end date of the adjustment rule should not be December 31 of a particular year, since that date occurs within the period of daylight saving time.  \\n  \\n By default, the registry in Windows XP defines a single adjustment rule whose end date is Friday, December 31, 9999 (the value of `DateTime.MaxValue.Date`), for each time zone. For time zones in the United States, the registry in Windows Vista defines two adjustment rules:  \\n  \\n-   Monday, January 01, 0001, to Sunday, December 31, 2006.  \\n  \\n-   Monday, January 01, 2007, to Friday, December 31, 9999.  \\n  \\n This means that, although time zone adjustment rules stored in the registry are useful for performing current time zone-related operations, they cannot be reliably used for retrieving historical time zone information. For information about defining a custom time zone with multiple adjustment rules that can be used in a historical time zone-aware application, see [How to: Create Time Zones with Adjustment Rules](~/docs/standard/datetime/create-time-zones-with-adjustment-rules.md).\"\n  example:\n  - \"The following example displays information about all of the time zones defined in the local computer's system registry, including the starting and ending dates of their adjustment rules.  \\n  \\n [!code-csharp[System.TimeZoneInfo.AdjustmentRule.DateStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TimeZoneInfo.AdjustmentRule.DateStart/cs/DateStart1.cs#1)]\\n [!code-vb[System.TimeZoneInfo.AdjustmentRule.DateStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TimeZoneInfo.AdjustmentRule.DateStart/vb/DateStart1.vb#1)]\"\n  syntax:\n    content: public DateTime DateEnd { get; }\n    return:\n      type: System.DateTime\n      description: A <xref href=\"System.DateTime\"></xref> value that indicates the end date of the adjustment rule.\n  overload: System.TimeZoneInfo.AdjustmentRule.DateEnd*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo+AdjustmentRule.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.TimeZoneInfo.AdjustmentRule.DateStart\n  commentId: P:System.TimeZoneInfo.AdjustmentRule.DateStart\n  id: DateStart\n  parent: System.TimeZoneInfo.AdjustmentRule\n  langs:\n  - csharp\n  name: DateStart\n  nameWithType: TimeZoneInfo.AdjustmentRule.DateStart\n  fullName: TimeZoneInfo.AdjustmentRule.DateStart\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Gets the date when the adjustment rule takes effect.\n  remarks: \"The value of the <xref:System.TimeZoneInfo.AdjustmentRule.DateStart%2A> property is a date value without a time component. It defines the date on which a particular adjustment rule goes into effect.  This is the date in which a set of transitions (which typically are defined by one transition to daylight savings time and one transition back to standard time) go into effect. For example, an adjustment rule might go into effect on January 1, 2017, that provides for a transition to daylight savings time on the second Sunday of March and for a transition back to standard time on the first Sunday of November. Note that the starting date of the adjustment rule is not tied to the date of the first transition.  \\n  \\n You can assign `DateTime.MinValue.Date` to the <xref:System.TimeZoneInfo.AdjustmentRule.DateEnd%2A> property when you create a custom adjustment rule for use in a time zone-aware application that does not have to work with historic time zone information.  \\n  \\n> [!IMPORTANT]\\n>  Unless there is a compelling reason to do otherwise, you should define the adjustment rule's start date to occur within the time interval during which the time zone observes standard time. Unless there is a compelling reason to do so, you should not define the adjustment rule's start date to occur within the time interval during which the time zone observes daylight saving time. For example, if a time zone's transition from daylight saving time occurs on the third Sunday of March and its transition to daylight saving time occurs on the first Sunday of October, the effective start date of the adjustment rule should not be January 1 of a particular year, since that date occurs within the period of daylight saving time.  \\n  \\n By default, the registry in Windows XP defines a single adjustment rule whose start date is Monday, January 01, 0001 (the value of `DateTime.MinValue.Date`), for each time zone. For time zones in the United States, the registry in Windows Vista defines two adjustment rules:  \\n  \\n-   Monday, January 01, 0001, to Sunday, December 31, 2006.  \\n  \\n-   Monday, January 01, 2007, to Friday, December 31, 9999.  \\n  \\n This means that, although time zone adjustment rules stored in the registry are useful for performing current time zone-related operations, they cannot be reliably used for retrieving historical time zone information. For information about defining a custom time zone with multiple adjustment rules that can be used in a historical time zone-aware application, see [How to: Create Time Zones with Adjustment Rules](~/docs/standard/datetime/create-time-zones-with-adjustment-rules.md).\"\n  example:\n  - \"The following example displays information about all of the time zones defined in the local computer's system registry, including the starting and ending dates of their adjustment rules.  \\n  \\n [!code-csharp[System.TimeZoneInfo.AdjustmentRule.DateStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TimeZoneInfo.AdjustmentRule.DateStart/cs/DateStart1.cs#1)]\\n [!code-vb[System.TimeZoneInfo.AdjustmentRule.DateStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TimeZoneInfo.AdjustmentRule.DateStart/vb/DateStart1.vb#1)]\"\n  syntax:\n    content: public DateTime DateStart { get; }\n    return:\n      type: System.DateTime\n      description: A <xref href=\"System.DateTime\"></xref> value that indicates when the adjustment rule takes effect.\n  overload: System.TimeZoneInfo.AdjustmentRule.DateStart*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo+AdjustmentRule.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.TimeZoneInfo.AdjustmentRule.DaylightDelta\n  commentId: P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta\n  id: DaylightDelta\n  parent: System.TimeZoneInfo.AdjustmentRule\n  langs:\n  - csharp\n  name: DaylightDelta\n  nameWithType: TimeZoneInfo.AdjustmentRule.DaylightDelta\n  fullName: TimeZoneInfo.AdjustmentRule.DaylightDelta\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Gets the amount of time that is required to form the time zone's daylight saving time. This amount of time is added to the time zone's offset from Coordinated Universal Time (UTC).\n  remarks: \"The following formula defines a time zone's daylight saving time:  \\n  \\n```  \\nTimeZoneTime = BaseUtcOffset + DaylightDelta + UtcTime  \\n```  \\n  \\n The value of the <xref:System.TimeZoneInfo.AdjustmentRule.DaylightDelta%2A> property can range from 14 hours to -14 hours.  \\n  \\n> [!NOTE]\\n>  The <xref:System.TimeZoneInfo.AdjustmentRule.DaylightDelta%2A> property measures the difference between the time zone’s standard time and its daylight saving time. It does not apply to changes in a time zone's standard offset from Coordinated Universal Time (UTC). To represent a time zone that has changed its standard time offset from UTC, you must call the <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> method to create a new time zone.  \\n  \\n The most common value of the <xref:System.TimeZoneInfo.AdjustmentRule.DaylightDelta%2A> property is 1.0 hours. The application of the daylight saving time adjustment rule increases the time zone's offset from Coordinated Universal Time (UTC) by one hour.\"\n  syntax:\n    content: public TimeSpan DaylightDelta { get; }\n    return:\n      type: System.TimeSpan\n      description: A <xref href=\"System.TimeSpan\"></xref> object that indicates the amount of time to add to the standard time changes as a result of the adjustment rule.\n  overload: System.TimeZoneInfo.AdjustmentRule.DaylightDelta*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo+AdjustmentRule.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd\n  commentId: P:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd\n  id: DaylightTransitionEnd\n  parent: System.TimeZoneInfo.AdjustmentRule\n  langs:\n  - csharp\n  name: DaylightTransitionEnd\n  nameWithType: TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd\n  fullName: TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Gets information about the annual transition from daylight saving time back to standard time.\n  remarks: The <xref:System.TimeZoneInfo.TransitionTime> object returned by the <xref:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd%2A> property defines either a fixed-date rule or a floating-date rule for the return to standard time. A fixed-date rule provides the month, day, and time of day on which the transition occurs. A floating-date rule provides the month, week, day of the week, and time of day on which the transition occurs.\n  syntax:\n    content: public TimeZoneInfo.TransitionTime DaylightTransitionEnd { get; }\n    return:\n      type: System.TimeZoneInfo+TransitionTime\n      description: A <xref href=\"System.TimeZoneInfo.TransitionTime\"></xref> object that defines the annual transition from daylight saving time back to the time zone's standard time.\n  overload: System.TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo+AdjustmentRule.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.TimeZoneInfo.AdjustmentRule.DaylightTransitionStart\n  commentId: P:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionStart\n  id: DaylightTransitionStart\n  parent: System.TimeZoneInfo.AdjustmentRule\n  langs:\n  - csharp\n  name: DaylightTransitionStart\n  nameWithType: TimeZoneInfo.AdjustmentRule.DaylightTransitionStart\n  fullName: TimeZoneInfo.AdjustmentRule.DaylightTransitionStart\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Gets information about the annual transition from standard time to daylight saving time.\n  remarks: The <xref:System.TimeZoneInfo.TransitionTime> object returned by the <xref:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionStart%2A> property defines either a fixed-date rule or a floating-date rule for the transition to daylight saving time. A fixed-date rule provides the month, day, and time of day on which the transition occurs. A floating-date rule provides the month, the week, the day of the week, and the time of day on which the transition occurs.\n  syntax:\n    content: public TimeZoneInfo.TransitionTime DaylightTransitionStart { get; }\n    return:\n      type: System.TimeZoneInfo+TransitionTime\n      description: A <xref href=\"System.TimeZoneInfo.TransitionTime\"></xref> object that defines the annual transition from a time zone's standard time to daylight saving time.\n  overload: System.TimeZoneInfo.AdjustmentRule.DaylightTransitionStart*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo+AdjustmentRule.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.TimeZoneInfo.AdjustmentRule.Equals(System.TimeZoneInfo.AdjustmentRule)\n  commentId: M:System.TimeZoneInfo.AdjustmentRule.Equals(System.TimeZoneInfo.AdjustmentRule)\n  id: Equals(System.TimeZoneInfo.AdjustmentRule)\n  parent: System.TimeZoneInfo.AdjustmentRule\n  langs:\n  - csharp\n  name: Equals(TimeZoneInfo+AdjustmentRule)\n  nameWithType: TimeZoneInfo.AdjustmentRule.Equals(TimeZoneInfo+AdjustmentRule)\n  fullName: TimeZoneInfo.AdjustmentRule.Equals(TimeZoneInfo+AdjustmentRule)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Determines whether the current <xref href=\"System.TimeZoneInfo.AdjustmentRule\"></xref> object is equal to a second <xref href=\"System.TimeZoneInfo.AdjustmentRule\"></xref> object.\n  remarks: To determine whether two <xref:System.TimeZoneInfo.AdjustmentRule> objects are equal, the <xref:System.TimeZoneInfo.AdjustmentRule.Equals%28System.TimeZoneInfo.AdjustmentRule%29> method compares the member values of each object. Two adjustment rules are equal if they have the same effective dates, the same delta, and identical values for the <xref:System.TimeZoneInfo.TransitionTime> objects returned by their <xref:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionStart%2A> and <xref:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd%2A> properties.\n  example:\n  - \"The following example calls the <xref:System.TimeZoneInfo.AdjustmentRule.Equals%28System.TimeZoneInfo.AdjustmentRule%29?displayProperty=fullName> method to compare the adjustment rules for Central Standard Time with those for Canada Central Standard Time and Mexico Standard Time.  \\n  \\n [!code-csharp[System.TimeZone2.AdjustmentRule.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/cs/System.TimeZone2.AdjustmentRule.Class.cs#2)]\\n [!code-vb[System.TimeZone2.AdjustmentRule.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/vb/System.TimeZone2.AdjustmentRule.Class.vb#2)]  \\n  \\n This code displays the following output to the console:  \\n  \\n```  \\nComparing Central Standard Time rule for 1/1/0001 to 12/31/9999 with:  \\n   Canada Central Standard Time has no adjustment rules.  \\n   Mexican CST for 1/1/0001 to 12/31/9999: Equal  \\n```\"\n  syntax:\n    content: public bool Equals (TimeZoneInfo.AdjustmentRule other);\n    parameters:\n    - id: other\n      type: System.TimeZoneInfo+AdjustmentRule\n      description: The object to compare with the current object.\n    return:\n      type: System.Boolean\n      description: '`true` if both <xref href=\"System.TimeZoneInfo.AdjustmentRule\"></xref> objects have equal values; otherwise, `false`.'\n  overload: System.TimeZoneInfo.AdjustmentRule.Equals*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo+AdjustmentRule.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.TimeZoneInfo.AdjustmentRule.GetHashCode\n  commentId: M:System.TimeZoneInfo.AdjustmentRule.GetHashCode\n  id: GetHashCode\n  parent: System.TimeZoneInfo.AdjustmentRule\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: TimeZoneInfo.AdjustmentRule.GetHashCode()\n  fullName: TimeZoneInfo.AdjustmentRule.GetHashCode()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Serves as a hash function for hashing algorithms and data structures such as hash tables.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: A 32-bit signed integer that serves as the hash code for the current <xref href=\"System.TimeZoneInfo.AdjustmentRule\"></xref> object.\n  overload: System.TimeZoneInfo.AdjustmentRule.GetHashCode*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo+AdjustmentRule.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.TimeZoneInfo.AdjustmentRule.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)\n  commentId: M:System.TimeZoneInfo.AdjustmentRule.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)\n  id: System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)\n  isEii: true\n  parent: System.TimeZoneInfo.AdjustmentRule\n  langs:\n  - csharp\n  name: IDeserializationCallback.OnDeserialization(Object)\n  nameWithType: TimeZoneInfo.AdjustmentRule.IDeserializationCallback.OnDeserialization(Object)\n  fullName: TimeZoneInfo.AdjustmentRule.IDeserializationCallback.OnDeserialization(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Runs when the deserialization of a <xref href=\"System.TimeZoneInfo.AdjustmentRule\"></xref> object is completed.\n  syntax:\n    content: void IDeserializationCallback.OnDeserialization (object sender);\n    parameters:\n    - id: sender\n      type: System.Object\n      description: The object that initiated the callback. The functionality for this parameter is not currently implemented.\n  overload: System.TimeZoneInfo.AdjustmentRule.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo+AdjustmentRule.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.TimeZoneInfo.AdjustmentRule.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  commentId: M:System.TimeZoneInfo.AdjustmentRule.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  isEii: true\n  parent: System.TimeZoneInfo.AdjustmentRule\n  langs:\n  - csharp\n  name: ISerializable.GetObjectData(SerializationInfo, StreamingContext)\n  nameWithType: TimeZoneInfo.AdjustmentRule.ISerializable.GetObjectData(SerializationInfo, StreamingContext)\n  fullName: TimeZoneInfo.AdjustmentRule.ISerializable.GetObjectData(SerializationInfo, StreamingContext)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Populates a <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object with the data that is required to serialize this object.\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: The object to populate with data.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: The destination for this serialization (see <xref href=\"System.Runtime.Serialization.StreamingContext\"></xref>).\n  overload: System.TimeZoneInfo.AdjustmentRule.System#Runtime#Serialization#ISerializable#GetObjectData*\n  exceptions: []\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo+AdjustmentRule.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule(System.DateTime,System.DateTime,System.TimeSpan,System.TimeZoneInfo.TransitionTime,System.TimeZoneInfo.TransitionTime)\n  parent: System.TimeZoneInfo.AdjustmentRule\n  isExternal: false\n  name: CreateAdjustmentRule(DateTime, DateTime, TimeSpan, TimeZoneInfo+TransitionTime, TimeZoneInfo+TransitionTime)\n  nameWithType: TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule(DateTime, DateTime, TimeSpan, TimeZoneInfo+TransitionTime, TimeZoneInfo+TransitionTime)\n  fullName: TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule(DateTime, DateTime, TimeSpan, TimeZoneInfo+TransitionTime, TimeZoneInfo+TransitionTime)\n- uid: System.TimeZoneInfo\n  parent: System\n  isExternal: false\n  name: TimeZoneInfo\n  nameWithType: TimeZoneInfo\n  fullName: System.TimeZoneInfo+AdjustmentRule\n- uid: System.DateTime\n  parent: System\n  isExternal: false\n  name: DateTime\n  nameWithType: DateTime\n  fullName: System.DateTime\n- uid: System.TimeSpan\n  parent: System\n  isExternal: false\n  name: TimeSpan\n  nameWithType: TimeSpan\n  fullName: System.TimeSpan\n- uid: System.TimeZoneInfo.AdjustmentRule.DateEnd\n  parent: System.TimeZoneInfo.AdjustmentRule\n  isExternal: false\n  name: DateEnd\n  nameWithType: TimeZoneInfo.AdjustmentRule.DateEnd\n  fullName: TimeZoneInfo.AdjustmentRule.DateEnd\n- uid: System.TimeZoneInfo.AdjustmentRule.DateStart\n  parent: System.TimeZoneInfo.AdjustmentRule\n  isExternal: false\n  name: DateStart\n  nameWithType: TimeZoneInfo.AdjustmentRule.DateStart\n  fullName: TimeZoneInfo.AdjustmentRule.DateStart\n- uid: System.TimeZoneInfo.AdjustmentRule.DaylightDelta\n  parent: System.TimeZoneInfo.AdjustmentRule\n  isExternal: false\n  name: DaylightDelta\n  nameWithType: TimeZoneInfo.AdjustmentRule.DaylightDelta\n  fullName: TimeZoneInfo.AdjustmentRule.DaylightDelta\n- uid: System.TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd\n  parent: System.TimeZoneInfo.AdjustmentRule\n  isExternal: false\n  name: DaylightTransitionEnd\n  nameWithType: TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd\n  fullName: TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd\n- uid: System.TimeZoneInfo.AdjustmentRule.DaylightTransitionStart\n  parent: System.TimeZoneInfo.AdjustmentRule\n  isExternal: false\n  name: DaylightTransitionStart\n  nameWithType: TimeZoneInfo.AdjustmentRule.DaylightTransitionStart\n  fullName: TimeZoneInfo.AdjustmentRule.DaylightTransitionStart\n- uid: System.TimeZoneInfo.AdjustmentRule.Equals(System.TimeZoneInfo.AdjustmentRule)\n  parent: System.TimeZoneInfo.AdjustmentRule\n  isExternal: false\n  name: Equals(TimeZoneInfo+AdjustmentRule)\n  nameWithType: TimeZoneInfo.AdjustmentRule.Equals(TimeZoneInfo+AdjustmentRule)\n  fullName: TimeZoneInfo.AdjustmentRule.Equals(TimeZoneInfo+AdjustmentRule)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.TimeZoneInfo.AdjustmentRule.GetHashCode\n  parent: System.TimeZoneInfo.AdjustmentRule\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: TimeZoneInfo.AdjustmentRule.GetHashCode()\n  fullName: TimeZoneInfo.AdjustmentRule.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.TimeZoneInfo.AdjustmentRule.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)\n  parent: System.TimeZoneInfo.AdjustmentRule\n  isExternal: false\n  name: IDeserializationCallback.OnDeserialization(Object)\n  nameWithType: TimeZoneInfo.AdjustmentRule.IDeserializationCallback.OnDeserialization(Object)\n  fullName: TimeZoneInfo.AdjustmentRule.IDeserializationCallback.OnDeserialization(Object)\n- uid: System.TimeZoneInfo.AdjustmentRule.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.TimeZoneInfo.AdjustmentRule\n  isExternal: false\n  name: ISerializable.GetObjectData(SerializationInfo, StreamingContext)\n  nameWithType: TimeZoneInfo.AdjustmentRule.ISerializable.GetObjectData(SerializationInfo, StreamingContext)\n  fullName: TimeZoneInfo.AdjustmentRule.ISerializable.GetObjectData(SerializationInfo, StreamingContext)\n- uid: System.Runtime.Serialization.SerializationInfo\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: SerializationInfo\n  nameWithType: SerializationInfo\n  fullName: System.Runtime.Serialization.SerializationInfo\n- uid: System.Runtime.Serialization.StreamingContext\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: StreamingContext\n  nameWithType: StreamingContext\n  fullName: System.Runtime.Serialization.StreamingContext\n- uid: System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule*\n  parent: System.TimeZoneInfo.AdjustmentRule\n  isExternal: false\n  name: CreateAdjustmentRule\n  nameWithType: TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule\n  fullName: TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo+AdjustmentRule.xml\n- uid: System.TimeZoneInfo.AdjustmentRule.DateEnd*\n  parent: System.TimeZoneInfo.AdjustmentRule\n  isExternal: false\n  name: DateEnd\n  nameWithType: TimeZoneInfo.AdjustmentRule.DateEnd\n  fullName: TimeZoneInfo.AdjustmentRule.DateEnd\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo+AdjustmentRule.xml\n- uid: System.TimeZoneInfo.AdjustmentRule.DateStart*\n  parent: System.TimeZoneInfo.AdjustmentRule\n  isExternal: false\n  name: DateStart\n  nameWithType: TimeZoneInfo.AdjustmentRule.DateStart\n  fullName: TimeZoneInfo.AdjustmentRule.DateStart\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo+AdjustmentRule.xml\n- uid: System.TimeZoneInfo.AdjustmentRule.DaylightDelta*\n  parent: System.TimeZoneInfo.AdjustmentRule\n  isExternal: false\n  name: DaylightDelta\n  nameWithType: TimeZoneInfo.AdjustmentRule.DaylightDelta\n  fullName: TimeZoneInfo.AdjustmentRule.DaylightDelta\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo+AdjustmentRule.xml\n- uid: System.TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd*\n  parent: System.TimeZoneInfo.AdjustmentRule\n  isExternal: false\n  name: DaylightTransitionEnd\n  nameWithType: TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd\n  fullName: TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo+AdjustmentRule.xml\n- uid: System.TimeZoneInfo.AdjustmentRule.DaylightTransitionStart*\n  parent: System.TimeZoneInfo.AdjustmentRule\n  isExternal: false\n  name: DaylightTransitionStart\n  nameWithType: TimeZoneInfo.AdjustmentRule.DaylightTransitionStart\n  fullName: TimeZoneInfo.AdjustmentRule.DaylightTransitionStart\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo+AdjustmentRule.xml\n- uid: System.TimeZoneInfo.AdjustmentRule.Equals*\n  parent: System.TimeZoneInfo.AdjustmentRule\n  isExternal: false\n  name: Equals\n  nameWithType: TimeZoneInfo.AdjustmentRule.Equals\n  fullName: TimeZoneInfo.AdjustmentRule.Equals\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo+AdjustmentRule.xml\n- uid: System.TimeZoneInfo.AdjustmentRule.GetHashCode*\n  parent: System.TimeZoneInfo.AdjustmentRule\n  isExternal: false\n  name: GetHashCode\n  nameWithType: TimeZoneInfo.AdjustmentRule.GetHashCode\n  fullName: TimeZoneInfo.AdjustmentRule.GetHashCode\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo+AdjustmentRule.xml\n- uid: System.TimeZoneInfo.AdjustmentRule.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization*\n  parent: System.TimeZoneInfo.AdjustmentRule\n  isExternal: false\n  name: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization\n  nameWithType: TimeZoneInfo.AdjustmentRule.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization\n  fullName: TimeZoneInfo.AdjustmentRule.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo+AdjustmentRule.xml\n- uid: System.TimeZoneInfo.AdjustmentRule.System#Runtime#Serialization#ISerializable#GetObjectData*\n  parent: System.TimeZoneInfo.AdjustmentRule\n  isExternal: false\n  name: System.Runtime.Serialization.ISerializable.GetObjectData\n  nameWithType: TimeZoneInfo.AdjustmentRule.System.Runtime.Serialization.ISerializable.GetObjectData\n  fullName: TimeZoneInfo.AdjustmentRule.System.Runtime.Serialization.ISerializable.GetObjectData\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TimeZoneInfo+AdjustmentRule.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.IEquatable`1\n  name: IEquatable<T>\n  nameWithType: IEquatable<T>\n  fullName: System.IEquatable<T>\n- uid: System.IEquatable{System.TimeZoneInfo}\n  parent: System\n  isExternal: false\n  name: IEquatable<TimeZoneInfo>\n  nameWithType: IEquatable<TimeZoneInfo>\n  fullName: System.IEquatable<System.TimeZoneInfo+AdjustmentRule>\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    nameWithType: IEquatable\n    fullName: System.IEquatable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.TimeZoneInfo\n    name: TimeZoneInfo\n    nameWithType: TimeZoneInfo\n    fullName: System.TimeZoneInfo\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Runtime.Serialization.IDeserializationCallback\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: IDeserializationCallback\n  nameWithType: IDeserializationCallback\n  fullName: System.Runtime.Serialization.IDeserializationCallback\n- uid: System.Runtime.Serialization.ISerializable\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: ISerializable\n  nameWithType: ISerializable\n  fullName: System.Runtime.Serialization.ISerializable\n"}