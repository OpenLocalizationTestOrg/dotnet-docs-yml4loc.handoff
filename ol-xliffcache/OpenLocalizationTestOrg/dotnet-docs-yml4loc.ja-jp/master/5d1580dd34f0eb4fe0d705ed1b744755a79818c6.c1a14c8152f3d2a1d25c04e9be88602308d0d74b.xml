{"nodes":[{"content":"Provides support for creating and scheduling <xref href=\"System.Threading.Tasks.Task\"></xref> objects.","nodes":[{"pos":[0,102],"content":"Provides support for creating and scheduling <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> objects.","source":"Provides support for creating and scheduling <xref href=\"System.Threading.Tasks.Task\"></xref> objects."}],"pos":[13441,13544],"yaml":true},{"content":"The .NET Framework provides two factories for creating and scheduling tasks:  \n  \n-   The <xref:System.Threading.Tasks.TaskFactory> class, which creates <xref:System.Threading.Tasks.Task> and <xref:System.Threading.Tasks.Task%601> objects. You can call the overloads of this method to create and execute a task that requires non-default arguments.  \n  \n    > [!WARNING]\n    >  Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=fullName> method provides the easiest way to create a task with default configuration values and start it immediately.  \n  \n-   The <xref:System.Threading.Tasks.TaskFactory%601> class, which creates <xref:System.Threading.Tasks.Task%601> objects.  \n  \n The <xref:System.Threading.Tasks.TaskFactory> class allows you to do the following:  \n  \n-   Create a task and start it immediately by calling the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> method.  \n  \n    > [!WARNING]\n    >  Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=fullName> method provides the easiest way to create a task with default configuration values and start it immediately.  \n  \n-   Create a task that starts when any one of the tasks in an array has completed by calling the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAny%2A> method.  \n  \n-   Create a task that starts when all the tasks in an array have completed by calling the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> method.  \n  \n The static <xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=fullName> property returns a default <xref:System.Threading.Tasks.TaskFactory%601> object. You can also call one of the <xref:System.Threading.Tasks.TaskFactory> class constructors to configure the <xref:System.Threading.Tasks.Task> objects that  the <xref:System.Threading.Tasks.TaskFactory> class creates. The following example configures a new <xref:System.Threading.Tasks.TaskFactory> object to create tasks that have a specified cancellation token, task creation options, continuation options, and a customized task scheduler.  \n  \n [!code-csharp[TPL_Factories#1](~/samples/snippets/csharp/VS_Snippets_Misc/tpl_factories/cs/program.cs#1)]\n [!code-vb[TPL_Factories#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/tpl_factories/vb/factories_vb.vb#1)]  \n  \n In most cases, you do not have to instantiate a new <xref:System.Threading.Tasks.TaskFactory> instance. Instead, you can use the <xref:System.Threading.Tasks.Task.Factory%2A?displayProperty=fullName> property, which returns a factory object that uses default values. You can then call its methods to start new tasks or define task continuations. For an illustration, see the example.","nodes":[{"pos":[0,76],"content":"The .NET Framework provides two factories for creating and scheduling tasks:","nodes":[{"content":"The .NET Framework provides two factories for creating and scheduling tasks:","pos":[0,76]}]},{"pos":[86,347],"content":"The <xref:System.Threading.Tasks.TaskFactory> class, which creates <xref:System.Threading.Tasks.Task> and <xref:System.Threading.Tasks.Task%601> objects. You can call the overloads of this method to create and execute a task that requires non-default arguments.","nodes":[{"content":"The <xref:System.Threading.Tasks.TaskFactory> class, which creates <xref:System.Threading.Tasks.Task> and <xref:System.Threading.Tasks.Task%601> objects. You can call the overloads of this method to create and execute a task that requires non-default arguments.","pos":[0,261],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> class, which creates <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> objects.","pos":[0,153],"source":"The <xref:System.Threading.Tasks.TaskFactory> class, which creates <xref:System.Threading.Tasks.Task> and <xref:System.Threading.Tasks.Task%601> objects."},{"content":"You can call the overloads of this method to create and execute a task that requires non-default arguments.","pos":[154,261]}]}]},{"pos":[359,621],"content":"[!WARNING]\nStarting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=fullName> method provides the easiest way to create a task with default configuration values and start it immediately.","leadings":["","    >  "],"nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Run%2A?displayProperty=fullName&gt;</ph> method provides the easiest way to create a task with default configuration values and start it immediately.","pos":[11,255],"source":"Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=fullName> method provides the easiest way to create a task with default configuration values and start it immediately."}]},{"pos":[631,749],"content":"The <xref:System.Threading.Tasks.TaskFactory%601> class, which creates <xref:System.Threading.Tasks.Task%601> objects.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskFactory%601&gt;</ph> class, which creates <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> objects.","pos":[0,118],"source":"The <xref:System.Threading.Tasks.TaskFactory%601> class, which creates <xref:System.Threading.Tasks.Task%601> objects."}]},{"pos":[756,839],"content":"The <xref:System.Threading.Tasks.TaskFactory> class allows you to do the following:","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> class allows you to do the following:","pos":[0,83],"source":"The <xref:System.Threading.Tasks.TaskFactory> class allows you to do the following:"}]},{"pos":[849,964],"content":"Create a task and start it immediately by calling the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> method.","nodes":[{"content":"Create a task and start it immediately by calling the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> method.","pos":[0,115],"source":"Create a task and start it immediately by calling the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> method."}]},{"pos":[976,1238],"content":"[!WARNING]\nStarting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=fullName> method provides the easiest way to create a task with default configuration values and start it immediately.","leadings":["","    >  "],"nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Run%2A?displayProperty=fullName&gt;</ph> method provides the easiest way to create a task with default configuration values and start it immediately.","pos":[11,255],"source":"Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=fullName> method provides the easiest way to create a task with default configuration values and start it immediately."}]},{"pos":[1248,1409],"content":"Create a task that starts when any one of the tasks in an array has completed by calling the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAny%2A> method.","nodes":[{"content":"Create a task that starts when any one of the tasks in an array has completed by calling the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAny%2A&gt;</ph> method.","pos":[0,161],"source":"Create a task that starts when any one of the tasks in an array has completed by calling the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAny%2A> method."}]},{"pos":[1419,1574],"content":"Create a task that starts when all the tasks in an array have completed by calling the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> method.","nodes":[{"content":"Create a task that starts when all the tasks in an array have completed by calling the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A&gt;</ph> method.","pos":[0,155],"source":"Create a task that starts when all the tasks in an array have completed by calling the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> method."}]},{"pos":[1581,2188],"content":"The static <xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=fullName> property returns a default <xref:System.Threading.Tasks.TaskFactory%601> object. You can also call one of the <xref:System.Threading.Tasks.TaskFactory> class constructors to configure the <xref:System.Threading.Tasks.Task> objects that  the <xref:System.Threading.Tasks.TaskFactory> class creates. The following example configures a new <xref:System.Threading.Tasks.TaskFactory> object to create tasks that have a specified cancellation token, task creation options, continuation options, and a customized task scheduler.","nodes":[{"content":"The static <xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=fullName> property returns a default <xref:System.Threading.Tasks.TaskFactory%601> object. You can also call one of the <xref:System.Threading.Tasks.TaskFactory> class constructors to configure the <xref:System.Threading.Tasks.Task> objects that  the <xref:System.Threading.Tasks.TaskFactory> class creates. The following example configures a new <xref:System.Threading.Tasks.TaskFactory> object to create tasks that have a specified cancellation token, task creation options, continuation options, and a customized task scheduler.","pos":[0,607],"nodes":[{"content":"The static <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=fullName&gt;</ph> property returns a default <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskFactory%601&gt;</ph> object.","pos":[0,166],"source":"The static <xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=fullName> property returns a default <xref:System.Threading.Tasks.TaskFactory%601> object."},{"content":"You can also call one of the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> class constructors to configure the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> objects that  the <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> class creates.","pos":[167,383],"source":" You can also call one of the <xref:System.Threading.Tasks.TaskFactory> class constructors to configure the <xref:System.Threading.Tasks.Task> objects that  the <xref:System.Threading.Tasks.TaskFactory> class creates."},{"content":"The following example configures a new <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> object to create tasks that have a specified cancellation token, task creation options, continuation options, and a customized task scheduler.","pos":[384,607],"source":" The following example configures a new <xref:System.Threading.Tasks.TaskFactory> object to create tasks that have a specified cancellation token, task creation options, continuation options, and a customized task scheduler."}]}]},{"pos":[2195,2413],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>TPL_Factories#1<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_Misc/tpl_factories/cs/program.cs#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>TPL_Factories#1<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_Misc/tpl_factories/vb/factories_vb.vb#1)</ept><ept id=\"p3\">]</ept>","leadings":[""," "],"source":"[!code-csharp[TPL_Factories#1](~/samples/snippets/csharp/VS_Snippets_Misc/tpl_factories/cs/program.cs#1)]\n[!code-vb[TPL_Factories#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/tpl_factories/vb/factories_vb.vb#1)]"},{"pos":[2420,2803],"content":"In most cases, you do not have to instantiate a new <xref:System.Threading.Tasks.TaskFactory> instance. Instead, you can use the <xref:System.Threading.Tasks.Task.Factory%2A?displayProperty=fullName> property, which returns a factory object that uses default values. You can then call its methods to start new tasks or define task continuations. For an illustration, see the example.","nodes":[{"content":"In most cases, you do not have to instantiate a new <xref:System.Threading.Tasks.TaskFactory> instance. Instead, you can use the <xref:System.Threading.Tasks.Task.Factory%2A?displayProperty=fullName> property, which returns a factory object that uses default values. You can then call its methods to start new tasks or define task continuations. For an illustration, see the example.","pos":[0,383],"nodes":[{"content":"In most cases, you do not have to instantiate a new <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> instance.","pos":[0,103],"source":"In most cases, you do not have to instantiate a new <xref:System.Threading.Tasks.TaskFactory> instance."},{"content":"Instead, you can use the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.Factory%2A?displayProperty=fullName&gt;</ph> property, which returns a factory object that uses default values.","pos":[104,266],"source":" Instead, you can use the <xref:System.Threading.Tasks.Task.Factory%2A?displayProperty=fullName> property, which returns a factory object that uses default values."},{"content":"You can then call its methods to start new tasks or define task continuations.","pos":[267,345]},{"content":"For an illustration, see the example.","pos":[346,383]}]}]}],"pos":[13555,16386],"yaml":true,"extradata":"MT"},{"content":"Initializes a <xref href=\"System.Threading.Tasks.TaskFactory\"></xref> instance with the default configuration.","nodes":[{"pos":[0,110],"content":"Initializes a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory\"&gt;&lt;/xref&gt;</ph> instance with the default configuration.","source":"Initializes a <xref href=\"System.Threading.Tasks.TaskFactory\"></xref> instance with the default configuration."}],"pos":[19339,19450],"yaml":true},{"content":"This constructor creates a <xref:System.Threading.Tasks.TaskFactory> instance with a default configuration. The <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).","nodes":[{"pos":[0,552],"content":"This constructor creates a <xref:System.Threading.Tasks.TaskFactory> instance with a default configuration. The <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).","nodes":[{"content":"This constructor creates a <xref:System.Threading.Tasks.TaskFactory> instance with a default configuration. The <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).","pos":[0,552],"nodes":[{"content":"This constructor creates a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> instance with a default configuration.","pos":[0,107],"source":"This constructor creates a <xref:System.Threading.Tasks.TaskFactory> instance with a default configuration."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskCreationOptions&gt;</ph> property is initialized to <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskCreationOptions.None&gt;</ph>, the <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph> property is initialized to <ph id=\"ph4\">&lt;xref:System.Threading.Tasks.TaskContinuationOptions.None&gt;</ph>, and the <ph id=\"ph5\">&lt;xref:System.Threading.Tasks.TaskScheduler&gt;</ph> property is initialized to the current scheduler (see <ph id=\"ph6\">&lt;xref:System.Threading.Tasks.TaskScheduler.Current%2A&gt;</ph>).","pos":[108,552],"source":" The <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>)."}]}]}],"pos":[19461,20014],"yaml":true,"extradata":"MT"},{"content":"Initializes a <xref href=\"System.Threading.Tasks.TaskFactory\"></xref> instance with the specified configuration.","nodes":[{"pos":[0,112],"content":"Initializes a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory\"&gt;&lt;/xref&gt;</ph> instance with the specified configuration.","source":"Initializes a <xref href=\"System.Threading.Tasks.TaskFactory\"></xref> instance with the specified configuration."}],"pos":[21785,21898],"yaml":true},{"content":"This constructor creates a <xref:System.Threading.Tasks.TaskFactory> instance with a default configuration. The <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).","nodes":[{"pos":[0,552],"content":"This constructor creates a <xref:System.Threading.Tasks.TaskFactory> instance with a default configuration. The <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).","nodes":[{"content":"This constructor creates a <xref:System.Threading.Tasks.TaskFactory> instance with a default configuration. The <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).","pos":[0,552],"nodes":[{"content":"This constructor creates a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> instance with a default configuration.","pos":[0,107],"source":"This constructor creates a <xref:System.Threading.Tasks.TaskFactory> instance with a default configuration."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskCreationOptions&gt;</ph> property is initialized to <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskCreationOptions.None&gt;</ph>, the <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph> property is initialized to <ph id=\"ph4\">&lt;xref:System.Threading.Tasks.TaskContinuationOptions.None&gt;</ph>, and the <ph id=\"ph5\">&lt;xref:System.Threading.Tasks.TaskScheduler&gt;</ph> property is initialized to the current scheduler (see <ph id=\"ph6\">&lt;xref:System.Threading.Tasks.TaskScheduler.Current%2A&gt;</ph>).","pos":[108,552],"source":" The <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>)."}]}]}],"pos":[21909,22462],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> that will be assigned to tasks created by this <xref href=\"System.Threading.Tasks.TaskFactory\"></xref> unless another CancellationToken is explicitly specified while calling the factory methods.","nodes":[{"pos":[0,272],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"&gt;&lt;/xref&gt;</ph> that will be assigned to tasks created by this <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskFactory\"&gt;&lt;/xref&gt;</ph> unless another CancellationToken is explicitly specified while calling the factory methods.","source":"The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> that will be assigned to tasks created by this <xref href=\"System.Threading.Tasks.TaskFactory\"></xref> unless another CancellationToken is explicitly specified while calling the factory methods."}],"pos":[22670,22943],"yaml":true},{"content":"Initializes a <xref href=\"System.Threading.Tasks.TaskFactory\"></xref> instance with the specified configuration.","nodes":[{"pos":[0,112],"content":"Initializes a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory\"&gt;&lt;/xref&gt;</ph> instance with the specified configuration.","source":"Initializes a <xref href=\"System.Threading.Tasks.TaskFactory\"></xref> instance with the specified configuration."}],"pos":[24643,24756],"yaml":true},{"content":"With this constructor, the <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to `scheduler`, unless it's null, in which case the property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).","nodes":[{"pos":[0,543],"content":"With this constructor, the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskCreationOptions&gt;</ph> property is initialized to <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskCreationOptions.None&gt;</ph>, the <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph> property is initialized to <ph id=\"ph4\">&lt;xref:System.Threading.Tasks.TaskContinuationOptions.None&gt;</ph>, and the <ph id=\"ph5\">&lt;xref:System.Threading.Tasks.TaskScheduler&gt;</ph> property is initialized to <ph id=\"ph6\">`scheduler`</ph>, unless it's null, in which case the property is initialized to the current scheduler (see <ph id=\"ph7\">&lt;xref:System.Threading.Tasks.TaskScheduler.Current%2A&gt;</ph>).","source":"With this constructor, the <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to `scheduler`, unless it's null, in which case the property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>)."}],"pos":[24767,25311],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> to use to schedule any tasks created with this TaskFactory. A null value indicates that the current TaskScheduler should be used.","nodes":[{"pos":[0,191],"content":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> to use to schedule any tasks created with this TaskFactory. A null value indicates that the current TaskScheduler should be used.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskScheduler\"&gt;&lt;/xref&gt;</ph> to use to schedule any tasks created with this TaskFactory.","pos":[0,121],"source":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> to use to schedule any tasks created with this TaskFactory."},{"content":"A null value indicates that the current TaskScheduler should be used.","pos":[122,191]}]}],"pos":[25507,25699],"yaml":true},{"content":"Initializes a <xref href=\"System.Threading.Tasks.TaskFactory\"></xref> instance with the specified configuration.","nodes":[{"pos":[0,112],"content":"Initializes a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory\"&gt;&lt;/xref&gt;</ph> instance with the specified configuration.","source":"Initializes a <xref href=\"System.Threading.Tasks.TaskFactory\"></xref> instance with the specified configuration."}],"pos":[27651,27764],"yaml":true},{"content":"With this constructor, the <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to `creationOptions`, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to `continuationOptions`, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).","nodes":[{"pos":[0,393],"content":"With this constructor, the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskCreationOptions&gt;</ph> property is initialized to <ph id=\"ph2\">`creationOptions`</ph>, the <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph> property is initialized to <ph id=\"ph4\">`continuationOptions`</ph>, and the <ph id=\"ph5\">&lt;xref:System.Threading.Tasks.TaskScheduler&gt;</ph> property is initialized to the current scheduler (see <ph id=\"ph6\">&lt;xref:System.Threading.Tasks.TaskScheduler.Current%2A&gt;</ph>).","source":"With this constructor, the <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to `creationOptions`, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to `continuationOptions`, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>)."}],"pos":[27775,28169],"yaml":true,"extradata":"MT"},{"content":"The default <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref> to use when creating tasks with this TaskFactory.","nodes":[{"pos":[0,125],"content":"The default <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskCreationOptions\"&gt;&lt;/xref&gt;</ph> to use when creating tasks with this TaskFactory.","source":"The default <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref> to use when creating tasks with this TaskFactory."}],"pos":[28457,28583],"yaml":true},{"content":"The default <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref> to use when creating continuation tasks with this TaskFactory.","nodes":[{"pos":[0,142],"content":"The default <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions\"&gt;&lt;/xref&gt;</ph> to use when creating continuation tasks with this TaskFactory.","source":"The default <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref> to use when creating continuation tasks with this TaskFactory."}],"pos":[28691,28834],"yaml":true},{"content":"The <code>creationOptions</code> argument specifies an invalid <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref> value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>.  \n  \n -or-  \n  \n The <code>continuationOptions</code> argument specifies an invalid value.","nodes":[{"pos":[0,403],"content":"The <code>creationOptions</code> argument specifies an invalid <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref> value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>.","nodes":[{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">creationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskCreationOptions\"&gt;&lt;/xref&gt;</ph> value.","pos":[0,133],"source":"The <code>creationOptions</code> argument specifies an invalid <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref> value."},{"content":"For more information, see the Remarks for <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"&gt;&lt;/xref&gt;</ph>.","pos":[134,403],"source":" For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>."}]},{"pos":[410,414],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[421,494],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid value.","source":"The <code>continuationOptions</code> argument specifies an invalid value."}],"pos":[29016,29521],"yaml":true},{"content":"Initializes a <xref href=\"System.Threading.Tasks.TaskFactory\"></xref> instance with the specified configuration.","nodes":[{"pos":[0,112],"content":"Initializes a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory\"&gt;&lt;/xref&gt;</ph> instance with the specified configuration.","source":"Initializes a <xref href=\"System.Threading.Tasks.TaskFactory\"></xref> instance with the specified configuration."}],"pos":[31720,31833],"yaml":true},{"content":"With this constructor, the <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to `creationOptions`, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to `continuationOptions`, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to `scheduler`, unless it's null, in which case the property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).","nodes":[{"pos":[0,469],"content":"With this constructor, the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskCreationOptions&gt;</ph> property is initialized to <ph id=\"ph2\">`creationOptions`</ph>, the <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph> property is initialized to <ph id=\"ph4\">`continuationOptions`</ph>, and the <ph id=\"ph5\">&lt;xref:System.Threading.Tasks.TaskScheduler&gt;</ph> property is initialized to <ph id=\"ph6\">`scheduler`</ph>, unless it's null, in which case the property is initialized to the current scheduler (see <ph id=\"ph7\">&lt;xref:System.Threading.Tasks.TaskScheduler.Current%2A&gt;</ph>).","source":"With this constructor, the <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to `creationOptions`, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to `continuationOptions`, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to `scheduler`, unless it's null, in which case the property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>)."}],"pos":[31844,32314],"yaml":true,"extradata":"MT"},{"content":"The default <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> that will be assigned to tasks created by this <xref href=\"System.Threading.Tasks.TaskFactory\"></xref> unless another CancellationToken is explicitly specified while calling the factory methods.","nodes":[{"pos":[0,280],"content":"The default <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"&gt;&lt;/xref&gt;</ph> that will be assigned to tasks created by this <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskFactory\"&gt;&lt;/xref&gt;</ph> unless another CancellationToken is explicitly specified while calling the factory methods.","source":"The default <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> that will be assigned to tasks created by this <xref href=\"System.Threading.Tasks.TaskFactory\"></xref> unless another CancellationToken is explicitly specified while calling the factory methods."}],"pos":[32698,32979],"yaml":true},{"content":"The default <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref> to use when creating tasks with this TaskFactory.","nodes":[{"pos":[0,125],"content":"The default <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskCreationOptions\"&gt;&lt;/xref&gt;</ph> to use when creating tasks with this TaskFactory.","source":"The default <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref> to use when creating tasks with this TaskFactory."}],"pos":[33079,33205],"yaml":true},{"content":"The default <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref> to use when creating continuation tasks with this TaskFactory.","nodes":[{"pos":[0,142],"content":"The default <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions\"&gt;&lt;/xref&gt;</ph> to use when creating continuation tasks with this TaskFactory.","source":"The default <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref> to use when creating continuation tasks with this TaskFactory."}],"pos":[33313,33456],"yaml":true},{"content":"The default <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> to use to schedule any Tasks created with this TaskFactory. A null value indicates that TaskScheduler.Current should be used.","nodes":[{"pos":[0,195],"content":"The default <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> to use to schedule any Tasks created with this TaskFactory. A null value indicates that TaskScheduler.Current should be used.","nodes":[{"content":"The default <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskScheduler\"&gt;&lt;/xref&gt;</ph> to use to schedule any Tasks created with this TaskFactory.","pos":[0,129],"source":"The default <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> to use to schedule any Tasks created with this TaskFactory."},{"content":"A null value indicates that TaskScheduler.Current should be used.","pos":[130,195]}]}],"pos":[33544,33740],"yaml":true},{"content":"The <code>creationOptions</code> argument specifies an invalid <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref> value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>.  \n  \n -or-  \n  \n The <code>continuationOptions</code> argument specifies an invalid value.","nodes":[{"pos":[0,403],"content":"The <code>creationOptions</code> argument specifies an invalid <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref> value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>.","nodes":[{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">creationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskCreationOptions\"&gt;&lt;/xref&gt;</ph> value.","pos":[0,133],"source":"The <code>creationOptions</code> argument specifies an invalid <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref> value."},{"content":"For more information, see the Remarks for <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"&gt;&lt;/xref&gt;</ph>.","pos":[134,403],"source":" For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>."}]},{"pos":[410,414],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[421,494],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid value.","source":"The <code>continuationOptions</code> argument specifies an invalid value."}],"pos":[33922,34427],"yaml":true},{"content":"Gets the default cancellation token for this task factory.","nodes":[{"pos":[0,58],"content":"Gets the default cancellation token for this task factory.","nodes":[{"content":"Gets the default cancellation token for this task factory.","pos":[0,58]}]}],"pos":[35946,36005],"yaml":true},{"content":"This property returns the default <xref:System.Threading.CancellationToken> that will be assigned to all tasks created by this factory, unless another <xref:System.Threading.CancellationToken> value is explicitly specified during the call to the factory methods.","nodes":[{"pos":[0,262],"content":"This property returns the default <xref:System.Threading.CancellationToken> that will be assigned to all tasks created by this factory, unless another <xref:System.Threading.CancellationToken> value is explicitly specified during the call to the factory methods.","nodes":[{"content":"This property returns the default <ph id=\"ph1\">&lt;xref:System.Threading.CancellationToken&gt;</ph> that will be assigned to all tasks created by this factory, unless another <ph id=\"ph2\">&lt;xref:System.Threading.CancellationToken&gt;</ph> value is explicitly specified during the call to the factory methods.","pos":[0,262],"source":"This property returns the default <xref:System.Threading.CancellationToken> that will be assigned to all tasks created by this factory, unless another <xref:System.Threading.CancellationToken> value is explicitly specified during the call to the factory methods."}]}],"pos":[36016,36279],"yaml":true,"extradata":"MT"},{"content":"The default task cancellation token for this task factory.","nodes":[{"pos":[0,58],"content":"The default task cancellation token for this task factory.","nodes":[{"content":"The default task cancellation token for this task factory.","pos":[0,58]}]}],"pos":[36449,36508],"yaml":true},{"content":"Gets the default task continuation options for this task factory.","nodes":[{"pos":[0,65],"content":"Gets the default task continuation options for this task factory.","nodes":[{"content":"Gets the default task continuation options for this task factory.","pos":[0,65]}]}],"pos":[38122,38188],"yaml":true},{"content":"The property value is used to create all continuation tasks, unless other options are explicitly specified during calls to this factory's methods.","nodes":[{"pos":[0,146],"content":"The property value is used to create all continuation tasks, unless other options are explicitly specified during calls to this factory's methods.","nodes":[{"content":"The property value is used to create all continuation tasks, unless other options are explicitly specified during calls to this factory's methods.","pos":[0,146]}]}],"pos":[38199,38346],"yaml":true,"extradata":"MT"},{"content":"The default task continuation options for this task factory.","nodes":[{"pos":[0,60],"content":"The default task continuation options for this task factory.","nodes":[{"content":"The default task continuation options for this task factory.","pos":[0,60]}]}],"pos":[38542,38603],"yaml":true},{"content":"Creates a continuation task that starts when a set of specified tasks has completed.","nodes":[{"pos":[0,84],"content":"Creates a continuation task that starts when a set of specified tasks has completed.","nodes":[{"content":"Creates a continuation task that starts when a set of specified tasks has completed.","pos":[0,84]}]}],"pos":[40493,40578],"yaml":true},{"content":"The <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> method executes the `continuationAction` delegate when all tasks in the `tasks` array have completed, regardless of their completion status.  \n  \n Exceptions thrown by tasks in the `tasks` array are not available to the continuation task through structured exception handling. You can determine which exceptions were thrown by examining the <xref:System.Threading.Tasks.Task.Exception%2A?displayProperty=fullName> property of each task in the `tasks` array. To use structured exception handling to handle exceptions thrown by tasks in the `tasks` array, call the <xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29?displayProperty=fullName> method.","nodes":[{"pos":[0,205],"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A&gt;</ph> method executes the <ph id=\"ph2\">`continuationAction`</ph> delegate when all tasks in the <ph id=\"ph3\">`tasks`</ph> array have completed, regardless of their completion status.","source":"The <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> method executes the `continuationAction` delegate when all tasks in the `tasks` array have completed, regardless of their completion status."},{"pos":[212,742],"content":"Exceptions thrown by tasks in the `tasks` array are not available to the continuation task through structured exception handling. You can determine which exceptions were thrown by examining the <xref:System.Threading.Tasks.Task.Exception%2A?displayProperty=fullName> property of each task in the `tasks` array. To use structured exception handling to handle exceptions thrown by tasks in the `tasks` array, call the <xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29?displayProperty=fullName> method.","nodes":[{"content":"Exceptions thrown by tasks in the <ph id=\"ph1\">`tasks`</ph> array are not available to the continuation task through structured exception handling.","pos":[0,129],"source":"Exceptions thrown by tasks in the `tasks` array are not available to the continuation task through structured exception handling."},{"content":"You can determine which exceptions were thrown by examining the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.Exception%2A?displayProperty=fullName&gt;</ph> property of each task in the <ph id=\"ph2\">`tasks`</ph> array.","pos":[130,310],"source":" You can determine which exceptions were thrown by examining the <xref:System.Threading.Tasks.Task.Exception%2A?displayProperty=fullName> property of each task in the `tasks` array."},{"content":"To use structured exception handling to handle exceptions thrown by tasks in the <ph id=\"ph1\">`tasks`</ph> array, call the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29?displayProperty=fullName&gt;</ph> method.","pos":[311,530],"source":" To use structured exception handling to handle exceptions thrown by tasks in the `tasks` array, call the <xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29?displayProperty=fullName> method."}]}],"pos":[40589,41336],"yaml":true,"extradata":"MT"},{"content":"The array of tasks from which to continue.","nodes":[{"pos":[0,42],"content":"The array of tasks from which to continue.","nodes":[{"content":"The array of tasks from which to continue.","pos":[0,42]}]}],"pos":[42659,42702],"yaml":true},{"content":"The action delegate to execute when all tasks in the <code>tasks</code> array have completed.","nodes":[{"pos":[0,93],"content":"The action delegate to execute when all tasks in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array have completed.","source":"The action delegate to execute when all tasks in the <code>tasks</code> array have completed."}],"pos":[42807,42901],"yaml":true},{"content":"The new continuation task.","nodes":[{"pos":[0,26],"content":"The new continuation task.","nodes":[{"content":"The new continuation task.","pos":[0,26]}]}],"pos":[42972,42999],"yaml":true},{"content":"An element in the <code>tasks</code> array has been disposed.","nodes":[{"pos":[0,61],"content":"An element in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array has been disposed.","source":"An element in the <code>tasks</code> array has been disposed."}],"pos":[43183,43245],"yaml":true},{"content":"The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationAction</code> argument is `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is <ph id=\"ph2\">`null`</ph>.","source":"The <code>tasks</code> array is `null`."},{"pos":[46,50],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[57,112],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationAction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>continuationAction</code> argument is `null`."}],"pos":[43347,43466],"yaml":true},{"content":"The <code>tasks</code> array is empty or contains a null value.","nodes":[{"pos":[0,63],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is empty or contains a null value.","source":"The <code>tasks</code> array is empty or contains a null value."}],"pos":[43560,43624],"yaml":true},{"content":"Creates a continuation task that starts when a set of specified tasks has completed.","nodes":[{"pos":[0,84],"content":"Creates a continuation task that starts when a set of specified tasks has completed.","nodes":[{"content":"Creates a continuation task that starts when a set of specified tasks has completed.","pos":[0,84]}]}],"pos":[45591,45676],"yaml":true},{"content":"The [\\], Action(Task\\<xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%2CSystem.Threading.CancellationToken%29> method executes the `continuationAction` delegate when all tasks in the `tasks` array have completed, regardless of their completion status.","nodes":[{"pos":[0,350],"content":"The [<ph id=\"ph1\">\\]</ph>, Action(Task<ph id=\"ph2\">\\&lt;</ph>xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%2CSystem.Threading.CancellationToken%29&gt; method executes the <ph id=\"ph3\">`continuationAction`</ph> delegate when all tasks in the <ph id=\"ph4\">`tasks`</ph> array have completed, regardless of their completion status.","source":"The [\\], Action(Task\\<xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%2CSystem.Threading.CancellationToken%29> method executes the `continuationAction` delegate when all tasks in the `tasks` array have completed, regardless of their completion status."}],"pos":[45687,46038],"yaml":true,"extradata":"MT"},{"content":"The array of tasks from which to continue.","nodes":[{"pos":[0,42],"content":"The array of tasks from which to continue.","nodes":[{"content":"The array of tasks from which to continue.","pos":[0,42]}]}],"pos":[47352,47395],"yaml":true},{"content":"The action delegate to execute when all tasks in the <code>tasks</code> array have completed.","nodes":[{"pos":[0,93],"content":"The action delegate to execute when all tasks in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array have completed.","source":"The action delegate to execute when all tasks in the <code>tasks</code> array have completed."}],"pos":[47500,47594],"yaml":true},{"content":"The cancellation token to assign to the new continuation task.","nodes":[{"pos":[0,62],"content":"The cancellation token to assign to the new continuation task.","nodes":[{"content":"The cancellation token to assign to the new continuation task.","pos":[0,62]}]}],"pos":[47688,47751],"yaml":true},{"content":"The new continuation task.","nodes":[{"pos":[0,26],"content":"The new continuation task.","nodes":[{"content":"The new continuation task.","pos":[0,26]}]}],"pos":[47822,47849],"yaml":true},{"content":"An element in the <code>tasks</code> array has been disposed.  \n  \n -or-  \n  \n The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed.","nodes":[{"pos":[0,61],"content":"An element in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array has been disposed.","source":"An element in the <code>tasks</code> array has been disposed."},{"pos":[68,72],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[79,215],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> that created <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">cancellationToken</ph><ept id=\"p1\">&lt;/code&gt;</ept> has already been disposed.","source":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed."}],"pos":[48033,48257],"yaml":true},{"content":"The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationAction</code> argument is `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is <ph id=\"ph2\">`null`</ph>.","source":"The <code>tasks</code> array is `null`."},{"pos":[46,50],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[57,112],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationAction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>continuationAction</code> argument is `null`."}],"pos":[48359,48478],"yaml":true},{"content":"The <code>tasks</code> array is empty or contains a null value.","nodes":[{"pos":[0,63],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is empty or contains a null value.","source":"The <code>tasks</code> array is empty or contains a null value."}],"pos":[48572,48636],"yaml":true},{"content":"Creates a continuation task that starts when a set of specified tasks has completed.","nodes":[{"pos":[0,84],"content":"Creates a continuation task that starts when a set of specified tasks has completed.","nodes":[{"content":"Creates a continuation task that starts when a set of specified tasks has completed.","pos":[0,84]}]}],"pos":[50657,50742],"yaml":true},{"content":"The array of tasks from which to continue.","nodes":[{"pos":[0,42],"content":"The array of tasks from which to continue.","nodes":[{"content":"The array of tasks from which to continue.","pos":[0,42]}]}],"pos":[51074,51117],"yaml":true},{"content":"The action delegate to execute when all tasks in the <code>tasks</code> array have completed.","nodes":[{"pos":[0,93],"content":"The action delegate to execute when all tasks in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array have completed.","source":"The action delegate to execute when all tasks in the <code>tasks</code> array have completed."}],"pos":[51222,51316],"yaml":true},{"content":"A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.","nodes":[{"pos":[0,153],"content":"A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.","nodes":[{"content":"A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.","pos":[0,153],"nodes":[{"content":"A bitwise combination of the enumeration values that control the behavior of the new continuation task.","pos":[0,103]},{"content":"The NotOn* and OnlyOn* members are not supported.","pos":[104,153]}]}]}],"pos":[51424,51578],"yaml":true},{"content":"The new continuation task.","nodes":[{"pos":[0,26],"content":"The new continuation task.","nodes":[{"content":"The new continuation task.","pos":[0,26]}]}],"pos":[51649,51676],"yaml":true},{"content":"An element in the <code>tasks</code> array has been disposed.","nodes":[{"pos":[0,61],"content":"An element in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array has been disposed.","source":"An element in the <code>tasks</code> array has been disposed."}],"pos":[51860,51922],"yaml":true},{"content":"The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationAction</code> argument is `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is <ph id=\"ph2\">`null`</ph>.","source":"The <code>tasks</code> array is `null`."},{"pos":[46,50],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[57,112],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationAction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>continuationAction</code> argument is `null`."}],"pos":[52024,52143],"yaml":true},{"content":"The <code>continuationOptions</code> argument specifies an invalid value.","nodes":[{"pos":[0,73],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid value.","source":"The <code>continuationOptions</code> argument specifies an invalid value."}],"pos":[52257,52331],"yaml":true},{"content":"The <code>tasks</code> array is empty or contains a null value.","nodes":[{"pos":[0,63],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is empty or contains a null value.","source":"The <code>tasks</code> array is empty or contains a null value."}],"pos":[52425,52489],"yaml":true},{"content":"Creates a continuation task that starts when a set of specified tasks has completed.","nodes":[{"pos":[0,84],"content":"Creates a continuation task that starts when a set of specified tasks has completed.","nodes":[{"content":"Creates a continuation task that starts when a set of specified tasks has completed.","pos":[0,84]}]}],"pos":[54828,54913],"yaml":true},{"content":"The array of tasks from which to continue.","nodes":[{"pos":[0,42],"content":"The array of tasks from which to continue.","nodes":[{"content":"The array of tasks from which to continue.","pos":[0,42]}]}],"pos":[55347,55390],"yaml":true},{"content":"The action delegate to execute when all tasks in the <code>tasks</code> array have completed.","nodes":[{"pos":[0,93],"content":"The action delegate to execute when all tasks in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array have completed.","source":"The action delegate to execute when all tasks in the <code>tasks</code> array have completed."}],"pos":[55495,55589],"yaml":true},{"content":"The cancellation token to assign to the new continuation task.","nodes":[{"pos":[0,62],"content":"The cancellation token to assign to the new continuation task.","nodes":[{"content":"The cancellation token to assign to the new continuation task.","pos":[0,62]}]}],"pos":[55683,55746],"yaml":true},{"content":"A bitwise combination of the enumeration values that control the behavior of the new continuation task.","nodes":[{"pos":[0,103],"content":"A bitwise combination of the enumeration values that control the behavior of the new continuation task.","nodes":[{"content":"A bitwise combination of the enumeration values that control the behavior of the new continuation task.","pos":[0,103]}]}],"pos":[55854,55958],"yaml":true},{"content":"The object that is used to schedule the new continuation task.","nodes":[{"pos":[0,62],"content":"The object that is used to schedule the new continuation task.","nodes":[{"content":"The object that is used to schedule the new continuation task.","pos":[0,62]}]}],"pos":[56046,56109],"yaml":true},{"content":"The new continuation task.","nodes":[{"pos":[0,26],"content":"The new continuation task.","nodes":[{"content":"The new continuation task.","pos":[0,26]}]}],"pos":[56180,56207],"yaml":true},{"content":"The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationAction</code> argument is `null`.  \n  \n -or-  \n  \n The <code>scheduler</code> argument is `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is <ph id=\"ph2\">`null`</ph>.","source":"The <code>tasks</code> array is `null`."},{"pos":[46,50],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[57,112],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationAction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>continuationAction</code> argument is `null`."},{"pos":[119,123],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[130,176],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">scheduler</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>scheduler</code> argument is `null`."}],"pos":[56387,56574],"yaml":true},{"content":"The <code>tasks</code> array is empty or contains a null value.","nodes":[{"pos":[0,63],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is empty or contains a null value.","source":"The <code>tasks</code> array is empty or contains a null value."}],"pos":[56668,56732],"yaml":true},{"content":"Creates a continuation task that starts when a set of specified tasks has completed.","nodes":[{"pos":[0,84],"content":"Creates a continuation task that starts when a set of specified tasks has completed.","nodes":[{"content":"Creates a continuation task that starts when a set of specified tasks has completed.","pos":[0,84]}]}],"pos":[59329,59414],"yaml":true},{"content":"The array of tasks from which to continue.","nodes":[{"pos":[0,42],"content":"The array of tasks from which to continue.","nodes":[{"content":"The array of tasks from which to continue.","pos":[0,42]}]}],"pos":[59949,59992],"yaml":true},{"content":"The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed.","nodes":[{"pos":[0,110],"content":"The function delegate to execute asynchronously when all tasks in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array have completed.","source":"The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed."}],"pos":[60124,60235],"yaml":true},{"content":"The cancellation token to assign to the new continuation task.","nodes":[{"pos":[0,62],"content":"The cancellation token to assign to the new continuation task.","nodes":[{"content":"The cancellation token to assign to the new continuation task.","pos":[0,62]}]}],"pos":[60329,60392],"yaml":true},{"content":"A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.","nodes":[{"pos":[0,153],"content":"A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.","nodes":[{"content":"A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.","pos":[0,153],"nodes":[{"content":"A bitwise combination of the enumeration values that control the behavior of the new continuation task.","pos":[0,103]},{"content":"The NotOn* and OnlyOn* members are not supported.","pos":[104,153]}]}]}],"pos":[60500,60654],"yaml":true},{"content":"The object that is used to schedule the new continuation task.","nodes":[{"pos":[0,62],"content":"The object that is used to schedule the new continuation task.","nodes":[{"content":"The object that is used to schedule the new continuation task.","pos":[0,62]}]}],"pos":[60742,60805],"yaml":true},{"content":"The type of the result of the antecedent <code>tasks</code>.","nodes":[{"pos":[0,60],"content":"The type of the result of the antecedent <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the result of the antecedent <code>tasks</code>."}],"pos":[60872,60933],"yaml":true},{"content":"The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created task.","nodes":[{"pos":[0,127],"content":"The type of the result that is returned by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate and associated with the created task.","source":"The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created task."}],"pos":[60970,61098],"yaml":true},{"content":"The new continuation task.","nodes":[{"pos":[0,26],"content":"The new continuation task.","nodes":[{"content":"The new continuation task.","pos":[0,26]}]}],"pos":[61171,61198],"yaml":true},{"content":"The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationFunction</code> argument is `null`.  \n  \n -or-  \n  \n The <code>scheduler</code> argument is `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is <ph id=\"ph2\">`null`</ph>.","source":"The <code>tasks</code> array is `null`."},{"pos":[46,50],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[57,114],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>continuationFunction</code> argument is `null`."},{"pos":[121,125],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[132,178],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">scheduler</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>scheduler</code> argument is `null`."}],"pos":[61381,61570],"yaml":true},{"content":"The <code>tasks</code> array is empty or contains a null value.","nodes":[{"pos":[0,63],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is empty or contains a null value.","source":"The <code>tasks</code> array is empty or contains a null value."}],"pos":[61664,61728],"yaml":true},{"content":"The <code>continuationOptions</code> argument specifies an invalid value.","nodes":[{"pos":[0,73],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid value.","source":"The <code>continuationOptions</code> argument specifies an invalid value."}],"pos":[61842,61916],"yaml":true},{"content":"An element in the <code>tasks</code> array has been disposed.  \n  \n -or-  \n  \n The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed.","nodes":[{"pos":[0,61],"content":"An element in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array has been disposed.","source":"An element in the <code>tasks</code> array has been disposed."},{"pos":[68,72],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[79,215],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> that created <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">cancellationToken</ph><ept id=\"p1\">&lt;/code&gt;</ept> has already been disposed.","source":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed."}],"pos":[62022,62246],"yaml":true},{"content":"Creates a continuation task that starts when a set of specified tasks has completed.","nodes":[{"pos":[0,84],"content":"Creates a continuation task that starts when a set of specified tasks has completed.","nodes":[{"content":"Creates a continuation task that starts when a set of specified tasks has completed.","pos":[0,84]}]}],"pos":[64525,64610],"yaml":true},{"content":"The array of tasks from which to continue.","nodes":[{"pos":[0,42],"content":"The array of tasks from which to continue.","nodes":[{"content":"The array of tasks from which to continue.","pos":[0,42]}]}],"pos":[65043,65086],"yaml":true},{"content":"The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed.","nodes":[{"pos":[0,110],"content":"The function delegate to execute asynchronously when all tasks in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array have completed.","source":"The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed."}],"pos":[65218,65329],"yaml":true},{"content":"A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.","nodes":[{"pos":[0,153],"content":"A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.","nodes":[{"content":"A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.","pos":[0,153],"nodes":[{"content":"A bitwise combination of the enumeration values that control the behavior of the new continuation task.","pos":[0,103]},{"content":"The NotOn* and OnlyOn* members are not supported.","pos":[104,153]}]}]}],"pos":[65437,65591],"yaml":true},{"content":"The type of the result of the antecedent <code>tasks</code>.","nodes":[{"pos":[0,60],"content":"The type of the result of the antecedent <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the result of the antecedent <code>tasks</code>."}],"pos":[65658,65719],"yaml":true},{"content":"The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created task.","nodes":[{"pos":[0,127],"content":"The type of the result that is returned by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate and associated with the created task.","source":"The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created task."}],"pos":[65756,65884],"yaml":true},{"content":"The new continuation task.","nodes":[{"pos":[0,26],"content":"The new continuation task.","nodes":[{"content":"The new continuation task.","pos":[0,26]}]}],"pos":[65957,65984],"yaml":true},{"content":"An element in the <code>tasks</code> array has been disposed.","nodes":[{"pos":[0,61],"content":"An element in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array has been disposed.","source":"An element in the <code>tasks</code> array has been disposed."}],"pos":[66171,66233],"yaml":true},{"content":"The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationFunction</code> argument is `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is <ph id=\"ph2\">`null`</ph>.","source":"The <code>tasks</code> array is `null`."},{"pos":[46,50],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[57,114],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>continuationFunction</code> argument is `null`."}],"pos":[66335,66456],"yaml":true},{"content":"The <code>continuationOptions</code> argument specifies an invalid value.","nodes":[{"pos":[0,73],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid value.","source":"The <code>continuationOptions</code> argument specifies an invalid value."}],"pos":[66570,66644],"yaml":true},{"content":"The <code>tasks</code> array is empty or contains a null value.","nodes":[{"pos":[0,63],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is empty or contains a null value.","source":"The <code>tasks</code> array is empty or contains a null value."}],"pos":[66738,66802],"yaml":true},{"content":"Creates a continuation task that starts when a set of specified tasks has completed.","nodes":[{"pos":[0,84],"content":"Creates a continuation task that starts when a set of specified tasks has completed.","nodes":[{"content":"Creates a continuation task that starts when a set of specified tasks has completed.","pos":[0,84]}]}],"pos":[69027,69112],"yaml":true},{"content":"The array of tasks from which to continue.","nodes":[{"pos":[0,42],"content":"The array of tasks from which to continue.","nodes":[{"content":"The array of tasks from which to continue.","pos":[0,42]}]}],"pos":[69531,69574],"yaml":true},{"content":"The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed.","nodes":[{"pos":[0,110],"content":"The function delegate to execute asynchronously when all tasks in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array have completed.","source":"The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed."}],"pos":[69706,69817],"yaml":true},{"content":"The cancellation token to assign to the new continuation task.","nodes":[{"pos":[0,62],"content":"The cancellation token to assign to the new continuation task.","nodes":[{"content":"The cancellation token to assign to the new continuation task.","pos":[0,62]}]}],"pos":[69911,69974],"yaml":true},{"content":"The type of the result of the antecedent <code>tasks</code>.","nodes":[{"pos":[0,60],"content":"The type of the result of the antecedent <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the result of the antecedent <code>tasks</code>."}],"pos":[70041,70102],"yaml":true},{"content":"The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created task.","nodes":[{"pos":[0,127],"content":"The type of the result that is returned by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate and associated with the created task.","source":"The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created task."}],"pos":[70139,70267],"yaml":true},{"content":"The new continuation task.","nodes":[{"pos":[0,26],"content":"The new continuation task.","nodes":[{"content":"The new continuation task.","pos":[0,26]}]}],"pos":[70340,70367],"yaml":true},{"content":"An element in the <code>tasks</code> array has been disposed.  \n  \n -or-  \n  \n The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed.","nodes":[{"pos":[0,61],"content":"An element in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array has been disposed.","source":"An element in the <code>tasks</code> array has been disposed."},{"pos":[68,72],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[79,215],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> that created <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">cancellationToken</ph><ept id=\"p1\">&lt;/code&gt;</ept> has already been disposed.","source":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed."}],"pos":[70554,70778],"yaml":true},{"content":"The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationFunction</code> argument is `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is <ph id=\"ph2\">`null`</ph>.","source":"The <code>tasks</code> array is `null`."},{"pos":[46,50],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[57,114],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>continuationFunction</code> argument is `null`."}],"pos":[70880,71001],"yaml":true},{"content":"The <code>tasks</code> array is empty or contains a null value.","nodes":[{"pos":[0,63],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is empty or contains a null value.","source":"The <code>tasks</code> array is empty or contains a null value."}],"pos":[71095,71159],"yaml":true},{"content":"Creates a continuation task that starts when a set of specified tasks has completed.","nodes":[{"pos":[0,84],"content":"Creates a continuation task that starts when a set of specified tasks has completed.","nodes":[{"content":"Creates a continuation task that starts when a set of specified tasks has completed.","pos":[0,84]}]}],"pos":[73222,73307],"yaml":true},{"content":"The array of tasks from which to continue.","nodes":[{"pos":[0,42],"content":"The array of tasks from which to continue.","nodes":[{"content":"The array of tasks from which to continue.","pos":[0,42]}]}],"pos":[73672,73715],"yaml":true},{"content":"The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed.","nodes":[{"pos":[0,110],"content":"The function delegate to execute asynchronously when all tasks in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array have completed.","source":"The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed."}],"pos":[73847,73958],"yaml":true},{"content":"The type of the result of the antecedent <code>tasks</code>.","nodes":[{"pos":[0,60],"content":"The type of the result of the antecedent <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the result of the antecedent <code>tasks</code>."}],"pos":[74025,74086],"yaml":true},{"content":"The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created task.","nodes":[{"pos":[0,127],"content":"The type of the result that is returned by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate and associated with the created task.","source":"The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created task."}],"pos":[74123,74251],"yaml":true},{"content":"The new continuation task.","nodes":[{"pos":[0,26],"content":"The new continuation task.","nodes":[{"content":"The new continuation task.","pos":[0,26]}]}],"pos":[74324,74351],"yaml":true},{"content":"An element in the <code>tasks</code> array has been disposed.","nodes":[{"pos":[0,61],"content":"An element in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array has been disposed.","source":"An element in the <code>tasks</code> array has been disposed."}],"pos":[74538,74600],"yaml":true},{"content":"The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationFunction</code> argument is `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is <ph id=\"ph2\">`null`</ph>.","source":"The <code>tasks</code> array is `null`."},{"pos":[46,50],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[57,114],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>continuationFunction</code> argument is `null`."}],"pos":[74702,74823],"yaml":true},{"content":"The <code>tasks</code> array is empty or contains a null value.","nodes":[{"pos":[0,63],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is empty or contains a null value.","source":"The <code>tasks</code> array is empty or contains a null value."}],"pos":[74917,74981],"yaml":true},{"content":"Creates a continuation task that starts when a set of specified tasks has completed.","nodes":[{"pos":[0,84],"content":"Creates a continuation task that starts when a set of specified tasks has completed.","nodes":[{"content":"Creates a continuation task that starts when a set of specified tasks has completed.","pos":[0,84]}]}],"pos":[77530,77615],"yaml":true},{"content":"The array of tasks from which to continue.","nodes":[{"pos":[0,42],"content":"The array of tasks from which to continue.","nodes":[{"content":"The array of tasks from which to continue.","pos":[0,42]}]}],"pos":[78125,78168],"yaml":true},{"content":"The action delegate to execute when all tasks in the <code>tasks</code> array have completed.","nodes":[{"pos":[0,93],"content":"The action delegate to execute when all tasks in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array have completed.","source":"The action delegate to execute when all tasks in the <code>tasks</code> array have completed."}],"pos":[78292,78386],"yaml":true},{"content":"The cancellation token to assign to the new continuation task.","nodes":[{"pos":[0,62],"content":"The cancellation token to assign to the new continuation task.","nodes":[{"content":"The cancellation token to assign to the new continuation task.","pos":[0,62]}]}],"pos":[78480,78543],"yaml":true},{"content":"A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.","nodes":[{"pos":[0,153],"content":"A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.","nodes":[{"content":"A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.","pos":[0,153],"nodes":[{"content":"A bitwise combination of the enumeration values that control the behavior of the new continuation task.","pos":[0,103]},{"content":"The NotOn* and OnlyOn* members are not supported.","pos":[104,153]}]}]}],"pos":[78651,78805],"yaml":true},{"content":"The object that is used to schedule the new continuation task.","nodes":[{"pos":[0,62],"content":"The object that is used to schedule the new continuation task.","nodes":[{"content":"The object that is used to schedule the new continuation task.","pos":[0,62]}]}],"pos":[78893,78956],"yaml":true},{"content":"The type of the result of the antecedent <code>tasks</code>.","nodes":[{"pos":[0,60],"content":"The type of the result of the antecedent <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the result of the antecedent <code>tasks</code>."}],"pos":[79023,79084],"yaml":true},{"content":"The new continuation task.","nodes":[{"pos":[0,26],"content":"The new continuation task.","nodes":[{"content":"The new continuation task.","pos":[0,26]}]}],"pos":[79155,79182],"yaml":true},{"content":"The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationAction</code> argument is `null`.  \n  \n -or-  \n  \n The <code>scheduler</code> argument is `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is <ph id=\"ph2\">`null`</ph>.","source":"The <code>tasks</code> array is `null`."},{"pos":[46,50],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[57,112],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationAction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>continuationAction</code> argument is `null`."},{"pos":[119,123],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[130,176],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">scheduler</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>scheduler</code> argument is `null`."}],"pos":[79365,79552],"yaml":true},{"content":"The <code>tasks</code> array is empty or contains a null value.","nodes":[{"pos":[0,63],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is empty or contains a null value.","source":"The <code>tasks</code> array is empty or contains a null value."}],"pos":[79646,79710],"yaml":true},{"content":"Creates a continuation task that starts when a set of specified tasks has completed.","nodes":[{"pos":[0,84],"content":"Creates a continuation task that starts when a set of specified tasks has completed.","nodes":[{"content":"Creates a continuation task that starts when a set of specified tasks has completed.","pos":[0,84]}]}],"pos":[81941,82026],"yaml":true},{"content":"The array of tasks from which to continue.","nodes":[{"pos":[0,42],"content":"The array of tasks from which to continue.","nodes":[{"content":"The array of tasks from which to continue.","pos":[0,42]}]}],"pos":[82434,82477],"yaml":true},{"content":"The action delegate to execute when all tasks in the <code>tasks</code> array have completed.","nodes":[{"pos":[0,93],"content":"The action delegate to execute when all tasks in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array have completed.","source":"The action delegate to execute when all tasks in the <code>tasks</code> array have completed."}],"pos":[82601,82695],"yaml":true},{"content":"A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.","nodes":[{"pos":[0,153],"content":"A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.","nodes":[{"content":"A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.","pos":[0,153],"nodes":[{"content":"A bitwise combination of the enumeration values that control the behavior of the new continuation task.","pos":[0,103]},{"content":"The NotOn* and OnlyOn* members are not supported.","pos":[104,153]}]}]}],"pos":[82803,82957],"yaml":true},{"content":"The type of the result of the antecedent <code>tasks</code>.","nodes":[{"pos":[0,60],"content":"The type of the result of the antecedent <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the result of the antecedent <code>tasks</code>."}],"pos":[83024,83085],"yaml":true},{"content":"The new continuation task.","nodes":[{"pos":[0,26],"content":"The new continuation task.","nodes":[{"content":"The new continuation task.","pos":[0,26]}]}],"pos":[83156,83183],"yaml":true},{"content":"An element in the <code>tasks</code> array has been disposed.","nodes":[{"pos":[0,61],"content":"An element in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array has been disposed.","source":"An element in the <code>tasks</code> array has been disposed."}],"pos":[83370,83432],"yaml":true},{"content":"The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationAction</code> argument is `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is <ph id=\"ph2\">`null`</ph>.","source":"The <code>tasks</code> array is `null`."},{"pos":[46,50],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[57,112],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationAction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>continuationAction</code> argument is `null`."}],"pos":[83534,83653],"yaml":true},{"content":"The <code>continuationOptions</code> argument specifies an invalid value.","nodes":[{"pos":[0,73],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid value.","source":"The <code>continuationOptions</code> argument specifies an invalid value."}],"pos":[83767,83841],"yaml":true},{"content":"The <code>tasks</code> array is empty or contains a null value.","nodes":[{"pos":[0,63],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is empty or contains a null value.","source":"The <code>tasks</code> array is empty or contains a null value."}],"pos":[83935,83999],"yaml":true},{"content":"Creates a continuation task that starts when a set of specified tasks has completed.","nodes":[{"pos":[0,84],"content":"Creates a continuation task that starts when a set of specified tasks has completed.","nodes":[{"content":"Creates a continuation task that starts when a set of specified tasks has completed.","pos":[0,84]}]}],"pos":[86176,86261],"yaml":true},{"content":"The array of tasks from which to continue.","nodes":[{"pos":[0,42],"content":"The array of tasks from which to continue.","nodes":[{"content":"The array of tasks from which to continue.","pos":[0,42]}]}],"pos":[86655,86698],"yaml":true},{"content":"The action delegate to execute when all tasks in the <code>tasks</code> array have completed.","nodes":[{"pos":[0,93],"content":"The action delegate to execute when all tasks in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array have completed.","source":"The action delegate to execute when all tasks in the <code>tasks</code> array have completed."}],"pos":[86822,86916],"yaml":true},{"content":"The cancellation token to assign to the new continuation task.","nodes":[{"pos":[0,62],"content":"The cancellation token to assign to the new continuation task.","nodes":[{"content":"The cancellation token to assign to the new continuation task.","pos":[0,62]}]}],"pos":[87010,87073],"yaml":true},{"content":"The type of the result of the antecedent <code>tasks</code>.","nodes":[{"pos":[0,60],"content":"The type of the result of the antecedent <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the result of the antecedent <code>tasks</code>."}],"pos":[87140,87201],"yaml":true},{"content":"The new continuation task.","nodes":[{"pos":[0,26],"content":"The new continuation task.","nodes":[{"content":"The new continuation task.","pos":[0,26]}]}],"pos":[87272,87299],"yaml":true},{"content":"An element in the <code>tasks</code> array has been disposed.  \n  \n -or-  \n  \n The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed.","nodes":[{"pos":[0,61],"content":"An element in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array has been disposed.","source":"An element in the <code>tasks</code> array has been disposed."},{"pos":[68,72],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[79,215],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> that created <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">cancellationToken</ph><ept id=\"p1\">&lt;/code&gt;</ept> has already been disposed.","source":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed."}],"pos":[87486,87710],"yaml":true},{"content":"The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationAction</code> argument is `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is <ph id=\"ph2\">`null`</ph>.","source":"The <code>tasks</code> array is `null`."},{"pos":[46,50],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[57,112],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationAction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>continuationAction</code> argument is `null`."}],"pos":[87812,87931],"yaml":true},{"content":"The <code>tasks</code> array is empty or contains a null value.","nodes":[{"pos":[0,63],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is empty or contains a null value.","source":"The <code>tasks</code> array is empty or contains a null value."}],"pos":[88025,88089],"yaml":true},{"content":"Creates a continuation task that starts when a set of specified tasks has completed.","nodes":[{"pos":[0,84],"content":"Creates a continuation task that starts when a set of specified tasks has completed.","nodes":[{"content":"Creates a continuation task that starts when a set of specified tasks has completed.","pos":[0,84]}]}],"pos":[90104,90189],"yaml":true},{"content":"The array of tasks from which to continue.","nodes":[{"pos":[0,42],"content":"The array of tasks from which to continue.","nodes":[{"content":"The array of tasks from which to continue.","pos":[0,42]}]}],"pos":[90529,90572],"yaml":true},{"content":"The action delegate to execute when all tasks in the <code>tasks</code> array have completed.","nodes":[{"pos":[0,93],"content":"The action delegate to execute when all tasks in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array have completed.","source":"The action delegate to execute when all tasks in the <code>tasks</code> array have completed."}],"pos":[90696,90790],"yaml":true},{"content":"The type of the result of the antecedent <code>tasks</code>.","nodes":[{"pos":[0,60],"content":"The type of the result of the antecedent <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the result of the antecedent <code>tasks</code>."}],"pos":[90857,90918],"yaml":true},{"content":"The new continuation task.","nodes":[{"pos":[0,26],"content":"The new continuation task.","nodes":[{"content":"The new continuation task.","pos":[0,26]}]}],"pos":[90989,91016],"yaml":true},{"content":"An element in the <code>tasks</code> array has been disposed.","nodes":[{"pos":[0,61],"content":"An element in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array has been disposed.","source":"An element in the <code>tasks</code> array has been disposed."}],"pos":[91203,91265],"yaml":true},{"content":"The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationAction</code> argument is `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is <ph id=\"ph2\">`null`</ph>.","source":"The <code>tasks</code> array is `null`."},{"pos":[46,50],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[57,112],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationAction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>continuationAction</code> argument is `null`."}],"pos":[91367,91486],"yaml":true},{"content":"The <code>tasks</code> array is empty or contains a null value.","nodes":[{"pos":[0,63],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is empty or contains a null value.","source":"The <code>tasks</code> array is empty or contains a null value."}],"pos":[91580,91644],"yaml":true},{"content":"Creates a continuation task that starts when a set of specified tasks has completed.","nodes":[{"pos":[0,84],"content":"Creates a continuation task that starts when a set of specified tasks has completed.","nodes":[{"content":"Creates a continuation task that starts when a set of specified tasks has completed.","pos":[0,84]}]}],"pos":[93509,93594],"yaml":true},{"content":"The array of tasks from which to continue.","nodes":[{"pos":[0,42],"content":"The array of tasks from which to continue.","nodes":[{"content":"The array of tasks from which to continue.","pos":[0,42]}]}],"pos":[93884,93927],"yaml":true},{"content":"The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed.","nodes":[{"pos":[0,110],"content":"The function delegate to execute asynchronously when all tasks in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array have completed.","source":"The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed."}],"pos":[94040,94151],"yaml":true},{"content":"The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created task.","nodes":[{"pos":[0,127],"content":"The type of the result that is returned by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate and associated with the created task.","source":"The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created task."}],"pos":[94208,94336],"yaml":true},{"content":"The new continuation task.","nodes":[{"pos":[0,26],"content":"The new continuation task.","nodes":[{"content":"The new continuation task.","pos":[0,26]}]}],"pos":[94409,94436],"yaml":true},{"content":"An element in the <code>tasks</code> array has been disposed.","nodes":[{"pos":[0,61],"content":"An element in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array has been disposed.","source":"An element in the <code>tasks</code> array has been disposed."}],"pos":[94623,94685],"yaml":true},{"content":"The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationFunction</code> argument is `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is <ph id=\"ph2\">`null`</ph>.","source":"The <code>tasks</code> array is `null`."},{"pos":[46,50],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[57,114],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>continuationFunction</code> argument is `null`."}],"pos":[94787,94908],"yaml":true},{"content":"The <code>tasks</code> array is empty or contains a null value.","nodes":[{"pos":[0,63],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is empty or contains a null value.","source":"The <code>tasks</code> array is empty or contains a null value."}],"pos":[95002,95066],"yaml":true},{"content":"Creates a continuation task that starts when a set of specified tasks has completed.","nodes":[{"pos":[0,84],"content":"Creates a continuation task that starts when a set of specified tasks has completed.","nodes":[{"content":"Creates a continuation task that starts when a set of specified tasks has completed.","pos":[0,84]}]}],"pos":[97093,97178],"yaml":true},{"content":"The array of tasks from which to continue.","nodes":[{"pos":[0,42],"content":"The array of tasks from which to continue.","nodes":[{"content":"The array of tasks from which to continue.","pos":[0,42]}]}],"pos":[97522,97565],"yaml":true},{"content":"The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed.","nodes":[{"pos":[0,110],"content":"The function delegate to execute asynchronously when all tasks in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array have completed.","source":"The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed."}],"pos":[97678,97789],"yaml":true},{"content":"The cancellation token to assign to the new continuation task.","nodes":[{"pos":[0,62],"content":"The cancellation token to assign to the new continuation task.","nodes":[{"content":"The cancellation token to assign to the new continuation task.","pos":[0,62]}]}],"pos":[97883,97946],"yaml":true},{"content":"The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created task.","nodes":[{"pos":[0,127],"content":"The type of the result that is returned by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate and associated with the created task.","source":"The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created task."}],"pos":[98003,98131],"yaml":true},{"content":"The new continuation task.","nodes":[{"pos":[0,26],"content":"The new continuation task.","nodes":[{"content":"The new continuation task.","pos":[0,26]}]}],"pos":[98204,98231],"yaml":true},{"content":"An element in the <code>tasks</code> array has been disposed.  \n  \n -or-  \n  \n The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed.","nodes":[{"pos":[0,61],"content":"An element in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array has been disposed.","source":"An element in the <code>tasks</code> array has been disposed."},{"pos":[68,72],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[79,215],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> that created <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">cancellationToken</ph><ept id=\"p1\">&lt;/code&gt;</ept> has already been disposed.","source":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed."}],"pos":[98418,98642],"yaml":true},{"content":"The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationFunction</code> argument is `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is <ph id=\"ph2\">`null`</ph>.","source":"The <code>tasks</code> array is `null`."},{"pos":[46,50],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[57,114],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>continuationFunction</code> argument is `null`."}],"pos":[98744,98865],"yaml":true},{"content":"The <code>tasks</code> array is empty or contains a null value.","nodes":[{"pos":[0,63],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is empty or contains a null value.","source":"The <code>tasks</code> array is empty or contains a null value."}],"pos":[98959,99023],"yaml":true},{"content":"Creates a continuation task that starts when a set of specified tasks has completed.","nodes":[{"pos":[0,84],"content":"Creates a continuation task that starts when a set of specified tasks has completed.","nodes":[{"content":"Creates a continuation task that starts when a set of specified tasks has completed.","pos":[0,84]}]}],"pos":[101104,101189],"yaml":true},{"content":"The array of tasks from which to continue.","nodes":[{"pos":[0,42],"content":"The array of tasks from which to continue.","nodes":[{"content":"The array of tasks from which to continue.","pos":[0,42]}]}],"pos":[101547,101590],"yaml":true},{"content":"The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed.","nodes":[{"pos":[0,110],"content":"The function delegate to execute asynchronously when all tasks in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array have completed.","source":"The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed."}],"pos":[101703,101814],"yaml":true},{"content":"A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.","nodes":[{"pos":[0,153],"content":"A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.","nodes":[{"content":"A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.","pos":[0,153],"nodes":[{"content":"A bitwise combination of the enumeration values that control the behavior of the new continuation task.","pos":[0,103]},{"content":"The NotOn* and OnlyOn* members are not supported.","pos":[104,153]}]}]}],"pos":[101922,102076],"yaml":true},{"content":"The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created task.","nodes":[{"pos":[0,127],"content":"The type of the result that is returned by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate and associated with the created task.","source":"The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created task."}],"pos":[102133,102261],"yaml":true},{"content":"The new continuation task.","nodes":[{"pos":[0,26],"content":"The new continuation task.","nodes":[{"content":"The new continuation task.","pos":[0,26]}]}],"pos":[102334,102361],"yaml":true},{"content":"An element in the <code>tasks</code> array has been disposed.","nodes":[{"pos":[0,61],"content":"An element in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array has been disposed.","source":"An element in the <code>tasks</code> array has been disposed."}],"pos":[102548,102610],"yaml":true},{"content":"The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationFunction</code> argument is `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is <ph id=\"ph2\">`null`</ph>.","source":"The <code>tasks</code> array is `null`."},{"pos":[46,50],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[57,114],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>continuationFunction</code> argument is `null`."}],"pos":[102712,102833],"yaml":true},{"content":"The <code>continuationOptions</code> argument specifies an invalid value.","nodes":[{"pos":[0,73],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid value.","source":"The <code>continuationOptions</code> argument specifies an invalid value."}],"pos":[102947,103021],"yaml":true},{"content":"The <code>tasks</code> array is empty or contains a null value.","nodes":[{"pos":[0,63],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is empty or contains a null value.","source":"The <code>tasks</code> array is empty or contains a null value."}],"pos":[103115,103179],"yaml":true},{"content":"Creates a continuation task that starts when a set of specified tasks has completed.","nodes":[{"pos":[0,84],"content":"Creates a continuation task that starts when a set of specified tasks has completed.","nodes":[{"content":"Creates a continuation task that starts when a set of specified tasks has completed.","pos":[0,84]}]}],"pos":[105578,105663],"yaml":true},{"content":"The array of tasks from which to continue.","nodes":[{"pos":[0,42],"content":"The array of tasks from which to continue.","nodes":[{"content":"The array of tasks from which to continue.","pos":[0,42]}]}],"pos":[106123,106166],"yaml":true},{"content":"The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed.","nodes":[{"pos":[0,110],"content":"The function delegate to execute asynchronously when all tasks in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array have completed.","source":"The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed."}],"pos":[106279,106390],"yaml":true},{"content":"The cancellation token to assign to the new continuation task.","nodes":[{"pos":[0,62],"content":"The cancellation token to assign to the new continuation task.","nodes":[{"content":"The cancellation token to assign to the new continuation task.","pos":[0,62]}]}],"pos":[106484,106547],"yaml":true},{"content":"A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.","nodes":[{"pos":[0,153],"content":"A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.","nodes":[{"content":"A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.","pos":[0,153],"nodes":[{"content":"A bitwise combination of the enumeration values that control the behavior of the new continuation task.","pos":[0,103]},{"content":"The NotOn* and OnlyOn* members are not supported.","pos":[104,153]}]}]}],"pos":[106655,106809],"yaml":true},{"content":"The object that is used to schedule the new continuation task.","nodes":[{"pos":[0,62],"content":"The object that is used to schedule the new continuation task.","nodes":[{"content":"The object that is used to schedule the new continuation task.","pos":[0,62]}]}],"pos":[106897,106960],"yaml":true},{"content":"The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created task.","nodes":[{"pos":[0,127],"content":"The type of the result that is returned by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate and associated with the created task.","source":"The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created task."}],"pos":[107017,107145],"yaml":true},{"content":"The new continuation task.","nodes":[{"pos":[0,26],"content":"The new continuation task.","nodes":[{"content":"The new continuation task.","pos":[0,26]}]}],"pos":[107218,107245],"yaml":true},{"content":"The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationFunction</code> argument is `null`.  \n  \n -or-  \n  \n The <code>scheduler</code> argument is `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is <ph id=\"ph2\">`null`</ph>.","source":"The <code>tasks</code> array is `null`."},{"pos":[46,50],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[57,114],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>continuationFunction</code> argument is `null`."},{"pos":[121,125],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[132,178],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">scheduler</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>scheduler</code> argument is `null`."}],"pos":[107428,107617],"yaml":true},{"content":"The <code>tasks</code> array is empty or contains a null value.","nodes":[{"pos":[0,63],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is empty or contains a null value.","source":"The <code>tasks</code> array is empty or contains a null value."}],"pos":[107711,107775],"yaml":true},{"content":"Creates a continuation <xref href=\"System.Threading.Tasks.Task\"></xref> that will be started upon the completion of any Task in the provided set.","nodes":[{"pos":[0,145],"content":"Creates a continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> that will be started upon the completion of any Task in the provided set.","source":"Creates a continuation <xref href=\"System.Threading.Tasks.Task\"></xref> that will be started upon the completion of any Task in the provided set."}],"pos":[109784,109930],"yaml":true},{"content":"The NotOn* and OnlyOn* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.","nodes":[{"pos":[0,218],"content":"The NotOn* and OnlyOn* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.","nodes":[{"content":"The NotOn* and OnlyOn* <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph>, which constrain for which <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskStatus&gt;</ph> states a continuation will be executed, are illegal with ContinueWhenAny.","pos":[0,218],"source":"The NotOn* and OnlyOn* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny."}]}],"pos":[109941,110160],"yaml":true,"extradata":"MT"},{"content":"The array of tasks from which to continue when one task completes.","nodes":[{"pos":[0,66],"content":"The array of tasks from which to continue when one task completes.","nodes":[{"content":"The array of tasks from which to continue when one task completes.","pos":[0,66]}]}],"pos":[110490,110557],"yaml":true},{"content":"The action delegate to execute when one task in the <code>tasks</code> array completes.","nodes":[{"pos":[0,87],"content":"The action delegate to execute when one task in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array completes.","source":"The action delegate to execute when one task in the <code>tasks</code> array completes."}],"pos":[110660,110748],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref> value that controls the behavior of the created continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.","nodes":[{"pos":[0,182],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions\"&gt;&lt;/xref&gt;</ph> value that controls the behavior of the created continuation <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref> value that controls the behavior of the created continuation <xref href=\"System.Threading.Tasks.Task\"></xref>."}],"pos":[110856,111039],"yaml":true},{"content":"The new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.","nodes":[{"pos":[0,70],"content":"The new continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>.","source":"The new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>."}],"pos":[111110,111181],"yaml":true},{"content":"The exception that is thrown when one of the elements in the <code>tasks</code> array has been disposed.","nodes":[{"pos":[0,104],"content":"The exception that is thrown when one of the elements in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array has been disposed.","source":"The exception that is thrown when one of the elements in the <code>tasks</code> array has been disposed."}],"pos":[111365,111470],"yaml":true},{"content":"The exception that is thrown when the <code>tasks</code> array is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>continuationAction</code> argument is null.","nodes":[{"pos":[0,71],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is null.","source":"The exception that is thrown when the <code>tasks</code> array is null."},{"pos":[78,82],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[89,176],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationAction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>continuationAction</code> argument is null."}],"pos":[111572,111755],"yaml":true},{"content":"The exception that is thrown when the <code>continuationOptions</code> argument specifies an invalid TaskContinuationOptions value.","nodes":[{"pos":[0,131],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid TaskContinuationOptions value.","source":"The exception that is thrown when the <code>continuationOptions</code> argument specifies an invalid TaskContinuationOptions value."}],"pos":[111869,112001],"yaml":true},{"content":"The exception that is thrown when the <code>tasks</code> array contains a null value.  \n  \n -or-  \n  \n The exception that is thrown when the <code>tasks</code> array is empty.","nodes":[{"pos":[0,85],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array contains a null value.","source":"The exception that is thrown when the <code>tasks</code> array contains a null value."},{"pos":[92,96],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[103,175],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is empty.","source":"The exception that is thrown when the <code>tasks</code> array is empty."}],"pos":[112095,112277],"yaml":true},{"content":"Creates a continuation <xref href=\"System.Threading.Tasks.Task\"></xref> that will be started upon the completion of any Task in the provided set.","nodes":[{"pos":[0,145],"content":"Creates a continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> that will be started upon the completion of any Task in the provided set.","source":"Creates a continuation <xref href=\"System.Threading.Tasks.Task\"></xref> that will be started upon the completion of any Task in the provided set."}],"pos":[114604,114750],"yaml":true},{"content":"The array of tasks from which to continue when one task completes.","nodes":[{"pos":[0,66],"content":"The array of tasks from which to continue when one task completes.","nodes":[{"content":"The array of tasks from which to continue when one task completes.","pos":[0,66]}]}],"pos":[115182,115249],"yaml":true},{"content":"The action delegate to execute when one task in the <code>tasks</code> array completes.","nodes":[{"pos":[0,87],"content":"The action delegate to execute when one task in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array completes.","source":"The action delegate to execute when one task in the <code>tasks</code> array completes."}],"pos":[115352,115440],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new continuation task.","nodes":[{"pos":[0,111],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> that will be assigned to the new continuation task.","source":"The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new continuation task."}],"pos":[115534,115646],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref> value that controls the behavior of the created continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.","nodes":[{"pos":[0,182],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions\"&gt;&lt;/xref&gt;</ph> value that controls the behavior of the created continuation <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref> value that controls the behavior of the created continuation <xref href=\"System.Threading.Tasks.Task\"></xref>."}],"pos":[115754,115937],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> that is used to schedule the created continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.","nodes":[{"pos":[0,161],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskScheduler\"&gt;&lt;/xref&gt;</ph> that is used to schedule the created continuation <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> that is used to schedule the created continuation <xref href=\"System.Threading.Tasks.Task\"></xref>."}],"pos":[116025,116187],"yaml":true},{"content":"The new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.","nodes":[{"pos":[0,70],"content":"The new continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>.","source":"The new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>."}],"pos":[116258,116329],"yaml":true},{"content":"The exception that is thrown when the <code>tasks</code> array is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>continuationAction</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>scheduler</code> argument is null.","nodes":[{"pos":[0,71],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is null.","source":"The exception that is thrown when the <code>tasks</code> array is null."},{"pos":[78,82],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[89,176],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationAction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>continuationAction</code> argument is null."},{"pos":[183,187],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[194,272],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">scheduler</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>scheduler</code> argument is null."}],"pos":[116509,116792],"yaml":true},{"content":"The exception that is thrown when the <code>tasks</code> array contains a null value.  \n  \n -or-  \n  \n The exception that is thrown when the <code>tasks</code> array is empty.","nodes":[{"pos":[0,85],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array contains a null value.","source":"The exception that is thrown when the <code>tasks</code> array contains a null value."},{"pos":[92,96],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[103,175],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is empty.","source":"The exception that is thrown when the <code>tasks</code> array is empty."}],"pos":[116886,117068],"yaml":true},{"content":"Creates a continuation <xref href=\"System.Threading.Tasks.Task\"></xref> that will be started upon the completion of any Task in the provided set.","nodes":[{"pos":[0,145],"content":"Creates a continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> that will be started upon the completion of any Task in the provided set.","source":"Creates a continuation <xref href=\"System.Threading.Tasks.Task\"></xref> that will be started upon the completion of any Task in the provided set."}],"pos":[118861,119007],"yaml":true},{"content":"The array of tasks from which to continue when one task completes.","nodes":[{"pos":[0,66],"content":"The array of tasks from which to continue when one task completes.","nodes":[{"content":"The array of tasks from which to continue when one task completes.","pos":[0,66]}]}],"pos":[119695,119762],"yaml":true},{"content":"The action delegate to execute when one task in the <code>tasks</code> array completes.","nodes":[{"pos":[0,87],"content":"The action delegate to execute when one task in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array completes.","source":"The action delegate to execute when one task in the <code>tasks</code> array completes."}],"pos":[119865,119953],"yaml":true},{"content":"The new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.","nodes":[{"pos":[0,70],"content":"The new continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>.","source":"The new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>."}],"pos":[120024,120095],"yaml":true},{"content":"One of the elements in the <code>tasks</code> array has been disposed.","nodes":[{"pos":[0,70],"content":"One of the elements in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array has been disposed.","source":"One of the elements in the <code>tasks</code> array has been disposed."}],"pos":[120279,120350],"yaml":true},{"content":"The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationAction</code> argument is `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is <ph id=\"ph2\">`null`</ph>.","source":"The <code>tasks</code> array is `null`."},{"pos":[46,50],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[57,112],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationAction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>continuationAction</code> argument is `null`."}],"pos":[120452,120571],"yaml":true},{"content":"The <code>tasks</code> array contains a `null` value.  \n  \n -or-  \n  \n The <code>tasks</code> array is empty.","nodes":[{"pos":[0,53],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array contains a <ph id=\"ph2\">`null`</ph> value.","source":"The <code>tasks</code> array contains a `null` value."},{"pos":[60,64],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[71,109],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is empty.","source":"The <code>tasks</code> array is empty."}],"pos":[120665,120781],"yaml":true},{"content":"Creates a continuation <xref href=\"System.Threading.Tasks.Task\"></xref> that will be started upon the completion of any Task in the provided set.","nodes":[{"pos":[0,145],"content":"Creates a continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> that will be started upon the completion of any Task in the provided set.","source":"Creates a continuation <xref href=\"System.Threading.Tasks.Task\"></xref> that will be started upon the completion of any Task in the provided set."}],"pos":[122736,122882],"yaml":true},{"content":"The array of tasks from which to continue when one task completes.","nodes":[{"pos":[0,66],"content":"The array of tasks from which to continue when one task completes.","nodes":[{"content":"The array of tasks from which to continue when one task completes.","pos":[0,66]}]}],"pos":[123198,123265],"yaml":true},{"content":"The action delegate to execute when one task in the <code>tasks</code> array completes.","nodes":[{"pos":[0,87],"content":"The action delegate to execute when one task in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array completes.","source":"The action delegate to execute when one task in the <code>tasks</code> array completes."}],"pos":[123368,123456],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new continuation task.","nodes":[{"pos":[0,111],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> that will be assigned to the new continuation task.","source":"The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new continuation task."}],"pos":[123550,123662],"yaml":true},{"content":"The new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.","nodes":[{"pos":[0,70],"content":"The new continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>.","source":"The new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>."}],"pos":[123733,123804],"yaml":true},{"content":"One of the elements in the <code>tasks</code> array has been disposed.  \n  \n -or-  \n  \n <code>cancellationToken</code> has already been disposed.","nodes":[{"pos":[0,70],"content":"One of the elements in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array has been disposed.","source":"One of the elements in the <code>tasks</code> array has been disposed."},{"pos":[77,81],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[88,145],"content":"<ph id=\"ph1\">&lt;code&gt;cancellationToken&lt;/code&gt;</ph> has already been disposed.","source":"<code>cancellationToken</code> has already been disposed."}],"pos":[123988,124140],"yaml":true},{"content":"The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationAction</code> argument is `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is <ph id=\"ph2\">`null`</ph>.","source":"The <code>tasks</code> array is `null`."},{"pos":[46,50],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[57,112],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationAction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>continuationAction</code> argument is `null`."}],"pos":[124242,124361],"yaml":true},{"content":"The <code>tasks</code> array contains a `null` value.  \n  \n -or-  \n  \n The <code>tasks</code> array is empty .","nodes":[{"pos":[0,53],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array contains a <ph id=\"ph2\">`null`</ph> value.","source":"The <code>tasks</code> array contains a `null` value."},{"pos":[60,64],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[71,110],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is empty .","source":"The <code>tasks</code> array is empty ."}],"pos":[124455,124572],"yaml":true},{"content":"Creates a continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref> that will be started upon the completion of any Task in the provided set.","nodes":[{"pos":[0,147],"content":"Creates a continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> that will be started upon the completion of any Task in the provided set.","source":"Creates a continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref> that will be started upon the completion of any Task in the provided set."}],"pos":[126839,126987],"yaml":true},{"content":"The NotOn* and OnlyOn* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.","nodes":[{"pos":[0,218],"content":"The NotOn* and OnlyOn* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.","nodes":[{"content":"The NotOn* and OnlyOn* <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph>, which constrain for which <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskStatus&gt;</ph> states a continuation will be executed, are illegal with ContinueWhenAny.","pos":[0,218],"source":"The NotOn* and OnlyOn* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny."}]}],"pos":[126998,127217],"yaml":true,"extradata":"MT"},{"content":"The array of tasks from which to continue when one task completes.","nodes":[{"pos":[0,66],"content":"The array of tasks from which to continue when one task completes.","nodes":[{"content":"The array of tasks from which to continue when one task completes.","pos":[0,66]}]}],"pos":[127648,127715],"yaml":true},{"content":"The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes.","nodes":[{"pos":[0,104],"content":"The function delegate to execute asynchronously when one task in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array completes.","source":"The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes."}],"pos":[127845,127950],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref> value that controls the behavior of the created continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,184],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions\"&gt;&lt;/xref&gt;</ph> value that controls the behavior of the created continuation <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref> value that controls the behavior of the created continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[128058,128243],"yaml":true},{"content":"The type of the result of the antecedent <code>tasks</code>.","nodes":[{"pos":[0,60],"content":"The type of the result of the antecedent <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the result of the antecedent <code>tasks</code>."}],"pos":[128310,128371],"yaml":true},{"content":"The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,173],"content":"The type of the result that is returned by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate and associated with the created <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[128408,128582],"yaml":true},{"content":"The new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,72],"content":"The new continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[128655,128728],"yaml":true},{"content":"The exception that is thrown when one of the elements in the <code>tasks</code> array has been disposed.","nodes":[{"pos":[0,104],"content":"The exception that is thrown when one of the elements in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array has been disposed.","source":"The exception that is thrown when one of the elements in the <code>tasks</code> array has been disposed."}],"pos":[128915,129020],"yaml":true},{"content":"The exception that is thrown when the <code>tasks</code> array is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>continuationFunction</code> argument is null.","nodes":[{"pos":[0,71],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is null.","source":"The exception that is thrown when the <code>tasks</code> array is null."},{"pos":[78,82],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[89,178],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>continuationFunction</code> argument is null."}],"pos":[129122,129307],"yaml":true},{"content":"The exception that is thrown when the <code>continuationOptions</code> argument specifies an invalid TaskContinuationOptions value.","nodes":[{"pos":[0,131],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid TaskContinuationOptions value.","source":"The exception that is thrown when the <code>continuationOptions</code> argument specifies an invalid TaskContinuationOptions value."}],"pos":[129421,129553],"yaml":true},{"content":"The exception that is thrown when the <code>tasks</code> array contains a null value.  \n  \n -or-  \n  \n The exception that is thrown when the <code>tasks</code> array is empty.","nodes":[{"pos":[0,85],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array contains a null value.","source":"The exception that is thrown when the <code>tasks</code> array contains a null value."},{"pos":[92,96],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[103,175],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is empty.","source":"The exception that is thrown when the <code>tasks</code> array is empty."}],"pos":[129647,129829],"yaml":true},{"content":"Creates a continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref> that will be started upon the completion of any Task in the provided set.","nodes":[{"pos":[0,147],"content":"Creates a continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> that will be started upon the completion of any Task in the provided set.","source":"Creates a continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref> that will be started upon the completion of any Task in the provided set."}],"pos":[131880,132028],"yaml":true},{"content":"The array of tasks from which to continue when one task completes.","nodes":[{"pos":[0,66],"content":"The array of tasks from which to continue when one task completes.","nodes":[{"content":"The array of tasks from which to continue when one task completes.","pos":[0,66]}]}],"pos":[132391,132458],"yaml":true},{"content":"The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes.","nodes":[{"pos":[0,104],"content":"The function delegate to execute asynchronously when one task in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array completes.","source":"The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes."}],"pos":[132588,132693],"yaml":true},{"content":"The type of the result of the antecedent <code>tasks</code>.","nodes":[{"pos":[0,60],"content":"The type of the result of the antecedent <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the result of the antecedent <code>tasks</code>."}],"pos":[132760,132821],"yaml":true},{"content":"The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,173],"content":"The type of the result that is returned by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate and associated with the created <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[132858,133032],"yaml":true},{"content":"The new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,72],"content":"The new continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[133105,133178],"yaml":true},{"content":"The exception that is thrown when one of the elements in the <code>tasks</code> array has been disposed.","nodes":[{"pos":[0,104],"content":"The exception that is thrown when one of the elements in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array has been disposed.","source":"The exception that is thrown when one of the elements in the <code>tasks</code> array has been disposed."}],"pos":[133365,133470],"yaml":true},{"content":"The exception that is thrown when the <code>tasks</code> array is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>continuationFunction</code> argument is null.","nodes":[{"pos":[0,71],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is null.","source":"The exception that is thrown when the <code>tasks</code> array is null."},{"pos":[78,82],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[89,178],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>continuationFunction</code> argument is null."}],"pos":[133572,133757],"yaml":true},{"content":"The exception that is thrown when the <code>tasks</code> array contains a null value.  \n  \n -or-  \n  \n The exception that is thrown when the <code>tasks</code> array is empty.","nodes":[{"pos":[0,85],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array contains a null value.","source":"The exception that is thrown when the <code>tasks</code> array contains a null value."},{"pos":[92,96],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[103,175],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is empty.","source":"The exception that is thrown when the <code>tasks</code> array is empty."}],"pos":[133851,134033],"yaml":true},{"content":"Creates a continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref> that will be started upon the completion of any Task in the provided set.","nodes":[{"pos":[0,147],"content":"Creates a continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> that will be started upon the completion of any Task in the provided set.","source":"Creates a continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref> that will be started upon the completion of any Task in the provided set."}],"pos":[136246,136394],"yaml":true},{"content":"The array of tasks from which to continue when one task completes.","nodes":[{"pos":[0,66],"content":"The array of tasks from which to continue when one task completes.","nodes":[{"content":"The array of tasks from which to continue when one task completes.","pos":[0,66]}]}],"pos":[136811,136878],"yaml":true},{"content":"The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes.","nodes":[{"pos":[0,104],"content":"The function delegate to execute asynchronously when one task in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array completes.","source":"The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes."}],"pos":[137008,137113],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new continuation task.","nodes":[{"pos":[0,111],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> that will be assigned to the new continuation task.","source":"The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new continuation task."}],"pos":[137207,137319],"yaml":true},{"content":"The type of the result of the antecedent <code>tasks</code>.","nodes":[{"pos":[0,60],"content":"The type of the result of the antecedent <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the result of the antecedent <code>tasks</code>."}],"pos":[137386,137447],"yaml":true},{"content":"The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,173],"content":"The type of the result that is returned by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate and associated with the created <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[137484,137658],"yaml":true},{"content":"The new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,72],"content":"The new continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[137731,137804],"yaml":true},{"content":"The exception that is thrown when one of the elements in the <code>tasks</code> array has been disposed.  \n  \n -or-  \n  \n The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed.","nodes":[{"pos":[0,104],"content":"The exception that is thrown when one of the elements in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array has been disposed.","source":"The exception that is thrown when one of the elements in the <code>tasks</code> array has been disposed."},{"pos":[111,115],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[122,217],"content":"The provided <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> has already been disposed.","source":"The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed."}],"pos":[137991,138217],"yaml":true},{"content":"The exception that is thrown when the <code>tasks</code> array is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>continuationFunction</code> argument is null.","nodes":[{"pos":[0,71],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is null.","source":"The exception that is thrown when the <code>tasks</code> array is null."},{"pos":[78,82],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[89,178],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>continuationFunction</code> argument is null."}],"pos":[138319,138504],"yaml":true},{"content":"The exception that is thrown when the <code>tasks</code> array contains a null value.  \n  \n -or-  \n  \n The exception that is thrown when the <code>tasks</code> array is empty.","nodes":[{"pos":[0,85],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array contains a null value.","source":"The exception that is thrown when the <code>tasks</code> array contains a null value."},{"pos":[92,96],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[103,175],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is empty.","source":"The exception that is thrown when the <code>tasks</code> array is empty."}],"pos":[138598,138780],"yaml":true},{"content":"Creates a continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref> that will be started upon the completion of any Task in the provided set.","nodes":[{"pos":[0,147],"content":"Creates a continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> that will be started upon the completion of any Task in the provided set.","source":"Creates a continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref> that will be started upon the completion of any Task in the provided set."}],"pos":[141365,141513],"yaml":true},{"content":"The NotOn* and OnlyOn* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.","nodes":[{"pos":[0,218],"content":"The NotOn* and OnlyOn* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.","nodes":[{"content":"The NotOn* and OnlyOn* <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph>, which constrain for which <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskStatus&gt;</ph> states a continuation will be executed, are illegal with ContinueWhenAny.","pos":[0,218],"source":"The NotOn* and OnlyOn* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny."}]}],"pos":[141524,141743],"yaml":true,"extradata":"MT"},{"content":"The array of tasks from which to continue when one task completes.","nodes":[{"pos":[0,66],"content":"The array of tasks from which to continue when one task completes.","nodes":[{"content":"The array of tasks from which to continue when one task completes.","pos":[0,66]}]}],"pos":[142276,142343],"yaml":true},{"content":"The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes.","nodes":[{"pos":[0,104],"content":"The function delegate to execute asynchronously when one task in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array completes.","source":"The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes."}],"pos":[142473,142578],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new continuation task.","nodes":[{"pos":[0,111],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> that will be assigned to the new continuation task.","source":"The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new continuation task."}],"pos":[142672,142784],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref> value that controls the behavior of the created continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,184],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions\"&gt;&lt;/xref&gt;</ph> value that controls the behavior of the created continuation <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref> value that controls the behavior of the created continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[142892,143077],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> that is used to schedule the created continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,163],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskScheduler\"&gt;&lt;/xref&gt;</ph> that is used to schedule the created continuation <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> that is used to schedule the created continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[143165,143329],"yaml":true},{"content":"The type of the result of the antecedent <code>tasks</code>.","nodes":[{"pos":[0,60],"content":"The type of the result of the antecedent <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the result of the antecedent <code>tasks</code>."}],"pos":[143396,143457],"yaml":true},{"content":"The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,173],"content":"The type of the result that is returned by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate and associated with the created <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[143494,143668],"yaml":true},{"content":"The new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,72],"content":"The new continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[143741,143814],"yaml":true},{"content":"The exception that is thrown when the <code>tasks</code> array is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>continuationFunction</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>scheduler</code> argument is null.","nodes":[{"pos":[0,71],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is null.","source":"The exception that is thrown when the <code>tasks</code> array is null."},{"pos":[78,82],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[89,178],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>continuationFunction</code> argument is null."},{"pos":[185,189],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[196,274],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">scheduler</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>scheduler</code> argument is null."}],"pos":[143997,144282],"yaml":true},{"content":"The exception that is thrown when the <code>tasks</code> array contains a null value.  \n  \n -or-  \n  \n The exception that is thrown when the <code>tasks</code> array is empty.","nodes":[{"pos":[0,85],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array contains a null value.","source":"The exception that is thrown when the <code>tasks</code> array contains a null value."},{"pos":[92,96],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[103,175],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is empty.","source":"The exception that is thrown when the <code>tasks</code> array is empty."}],"pos":[144376,144558],"yaml":true},{"content":"Creates a continuation <xref href=\"System.Threading.Tasks.Task\"></xref> that will be started upon the completion of any Task in the provided set.","nodes":[{"pos":[0,145],"content":"Creates a continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> that will be started upon the completion of any Task in the provided set.","source":"Creates a continuation <xref href=\"System.Threading.Tasks.Task\"></xref> that will be started upon the completion of any Task in the provided set."}],"pos":[146561,146707],"yaml":true},{"content":"The array of tasks from which to continue when one task completes.","nodes":[{"pos":[0,66],"content":"The array of tasks from which to continue when one task completes.","nodes":[{"content":"The array of tasks from which to continue when one task completes.","pos":[0,66]}]}],"pos":[147045,147112],"yaml":true},{"content":"The action delegate to execute when one task in the <code>tasks</code> array completes.","nodes":[{"pos":[0,87],"content":"The action delegate to execute when one task in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array completes.","source":"The action delegate to execute when one task in the <code>tasks</code> array completes."}],"pos":[147234,147322],"yaml":true},{"content":"The type of the result of the antecedent <code>tasks</code>.","nodes":[{"pos":[0,60],"content":"The type of the result of the antecedent <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the result of the antecedent <code>tasks</code>."}],"pos":[147389,147450],"yaml":true},{"content":"The new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.","nodes":[{"pos":[0,70],"content":"The new continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>.","source":"The new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>."}],"pos":[147521,147592],"yaml":true},{"content":"The exception that is thrown when one of the elements in the <code>tasks</code> array has been disposed.","nodes":[{"pos":[0,104],"content":"The exception that is thrown when one of the elements in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array has been disposed.","source":"The exception that is thrown when one of the elements in the <code>tasks</code> array has been disposed."}],"pos":[147779,147884],"yaml":true},{"content":"The exception that is thrown when the <code>tasks</code> array is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>continuationAction</code> argument is null.","nodes":[{"pos":[0,71],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is null.","source":"The exception that is thrown when the <code>tasks</code> array is null."},{"pos":[78,82],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[89,176],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationAction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>continuationAction</code> argument is null."}],"pos":[147986,148169],"yaml":true},{"content":"The exception that is thrown when the <code>tasks</code> array contains a null value.  \n  \n -or-  \n  \n The exception that is thrown when the <code>tasks</code> array is empty.","nodes":[{"pos":[0,85],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array contains a null value.","source":"The exception that is thrown when the <code>tasks</code> array contains a null value."},{"pos":[92,96],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[103,175],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is empty.","source":"The exception that is thrown when the <code>tasks</code> array is empty."}],"pos":[148263,148445],"yaml":true},{"content":"Creates a continuation <xref href=\"System.Threading.Tasks.Task\"></xref> that will be started upon the completion of any Task in the provided set.","nodes":[{"pos":[0,145],"content":"Creates a continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> that will be started upon the completion of any Task in the provided set.","source":"Creates a continuation <xref href=\"System.Threading.Tasks.Task\"></xref> that will be started upon the completion of any Task in the provided set."}],"pos":[150610,150756],"yaml":true},{"content":"The array of tasks from which to continue when one task completes.","nodes":[{"pos":[0,66],"content":"The array of tasks from which to continue when one task completes.","nodes":[{"content":"The array of tasks from which to continue when one task completes.","pos":[0,66]}]}],"pos":[151148,151215],"yaml":true},{"content":"The action delegate to execute when one task in the <code>tasks</code> array completes.","nodes":[{"pos":[0,87],"content":"The action delegate to execute when one task in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array completes.","source":"The action delegate to execute when one task in the <code>tasks</code> array completes."}],"pos":[151337,151425],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new continuation task.","nodes":[{"pos":[0,111],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> that will be assigned to the new continuation task.","source":"The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new continuation task."}],"pos":[151519,151631],"yaml":true},{"content":"The type of the result of the antecedent <code>tasks</code>.","nodes":[{"pos":[0,60],"content":"The type of the result of the antecedent <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the result of the antecedent <code>tasks</code>."}],"pos":[151698,151759],"yaml":true},{"content":"The new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.","nodes":[{"pos":[0,70],"content":"The new continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>.","source":"The new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>."}],"pos":[151830,151901],"yaml":true},{"content":"The exception that is thrown when one of the elements in the <code>tasks</code> array has been disposed.  \n  \n -or-  \n  \n The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed.","nodes":[{"pos":[0,104],"content":"The exception that is thrown when one of the elements in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array has been disposed.","source":"The exception that is thrown when one of the elements in the <code>tasks</code> array has been disposed."},{"pos":[111,115],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[122,217],"content":"The provided <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> has already been disposed.","source":"The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed."}],"pos":[152088,152314],"yaml":true},{"content":"The exception that is thrown when the <code>tasks</code> array is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>continuationAction</code> argument is null.","nodes":[{"pos":[0,71],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is null.","source":"The exception that is thrown when the <code>tasks</code> array is null."},{"pos":[78,82],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[89,176],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationAction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>continuationAction</code> argument is null."}],"pos":[152416,152599],"yaml":true},{"content":"The exception that is thrown when the <code>tasks</code> array contains a null value.  \n  \n -or-  \n  \n The exception that is thrown when the <code>tasks</code> array is empty.","nodes":[{"pos":[0,85],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array contains a null value.","source":"The exception that is thrown when the <code>tasks</code> array contains a null value."},{"pos":[92,96],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[103,175],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is empty.","source":"The exception that is thrown when the <code>tasks</code> array is empty."}],"pos":[152693,152875],"yaml":true},{"content":"Creates a continuation <xref href=\"System.Threading.Tasks.Task\"></xref> that will be started upon the completion of any Task in the provided set.","nodes":[{"pos":[0,145],"content":"Creates a continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> that will be started upon the completion of any Task in the provided set.","source":"Creates a continuation <xref href=\"System.Threading.Tasks.Task\"></xref> that will be started upon the completion of any Task in the provided set."}],"pos":[155094,155240],"yaml":true},{"content":"The NotOn* and OnlyOn* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.","nodes":[{"pos":[0,218],"content":"The NotOn* and OnlyOn* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.","nodes":[{"content":"The NotOn* and OnlyOn* <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph>, which constrain for which <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskStatus&gt;</ph> states a continuation will be executed, are illegal with ContinueWhenAny.","pos":[0,218],"source":"The NotOn* and OnlyOn* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny."}]}],"pos":[155251,155470],"yaml":true,"extradata":"MT"},{"content":"The array of tasks from which to continue when one task completes.","nodes":[{"pos":[0,66],"content":"The array of tasks from which to continue when one task completes.","nodes":[{"content":"The array of tasks from which to continue when one task completes.","pos":[0,66]}]}],"pos":[155876,155943],"yaml":true},{"content":"The action delegate to execute when one task in the <code>tasks</code> array completes.","nodes":[{"pos":[0,87],"content":"The action delegate to execute when one task in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array completes.","source":"The action delegate to execute when one task in the <code>tasks</code> array completes."}],"pos":[156065,156153],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref> value that controls the behavior of the created continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.","nodes":[{"pos":[0,182],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions\"&gt;&lt;/xref&gt;</ph> value that controls the behavior of the created continuation <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref> value that controls the behavior of the created continuation <xref href=\"System.Threading.Tasks.Task\"></xref>."}],"pos":[156261,156444],"yaml":true},{"content":"The type of the result of the antecedent <code>tasks</code>.","nodes":[{"pos":[0,60],"content":"The type of the result of the antecedent <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the result of the antecedent <code>tasks</code>."}],"pos":[156511,156572],"yaml":true},{"content":"The new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.","nodes":[{"pos":[0,70],"content":"The new continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>.","source":"The new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>."}],"pos":[156643,156714],"yaml":true},{"content":"The exception that is thrown when one of the elements in the <code>tasks</code> array has been disposed.","nodes":[{"pos":[0,104],"content":"The exception that is thrown when one of the elements in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array has been disposed.","source":"The exception that is thrown when one of the elements in the <code>tasks</code> array has been disposed."}],"pos":[156901,157006],"yaml":true},{"content":"The exception that is thrown when the <code>tasks</code> array is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>continuationAction</code> argument is null.","nodes":[{"pos":[0,71],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is null.","source":"The exception that is thrown when the <code>tasks</code> array is null."},{"pos":[78,82],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[89,176],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationAction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>continuationAction</code> argument is null."}],"pos":[157108,157291],"yaml":true},{"content":"The exception that is thrown when the <code>continuationOptions</code> argument specifies an invalid TaskContinuationOptions value.","nodes":[{"pos":[0,131],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid TaskContinuationOptions value.","source":"The exception that is thrown when the <code>continuationOptions</code> argument specifies an invalid TaskContinuationOptions value."}],"pos":[157405,157537],"yaml":true},{"content":"The exception that is thrown when the <code>tasks</code> array contains a null value.  \n  \n -or-  \n  \n The exception that is thrown when the <code>tasks</code> array is empty.","nodes":[{"pos":[0,85],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array contains a null value.","source":"The exception that is thrown when the <code>tasks</code> array contains a null value."},{"pos":[92,96],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[103,175],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is empty.","source":"The exception that is thrown when the <code>tasks</code> array is empty."}],"pos":[157631,157813],"yaml":true},{"content":"Creates a continuation <xref href=\"System.Threading.Tasks.Task\"></xref> that will be started upon the completion of any Task in the provided set.","nodes":[{"pos":[0,145],"content":"Creates a continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> that will be started upon the completion of any Task in the provided set.","source":"Creates a continuation <xref href=\"System.Threading.Tasks.Task\"></xref> that will be started upon the completion of any Task in the provided set."}],"pos":[160350,160496],"yaml":true},{"content":"The NotOn* and OnlyOn* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.","nodes":[{"pos":[0,218],"content":"The NotOn* and OnlyOn* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.","nodes":[{"content":"The NotOn* and OnlyOn* <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph>, which constrain for which <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskStatus&gt;</ph> states a continuation will be executed, are illegal with ContinueWhenAny.","pos":[0,218],"source":"The NotOn* and OnlyOn* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny."}]}],"pos":[160507,160726],"yaml":true,"extradata":"MT"},{"content":"The array of tasks from which to continue when one task completes.","nodes":[{"pos":[0,66],"content":"The array of tasks from which to continue when one task completes.","nodes":[{"content":"The array of tasks from which to continue when one task completes.","pos":[0,66]}]}],"pos":[161234,161301],"yaml":true},{"content":"The action delegate to execute when one task in the <code>tasks</code> array completes.","nodes":[{"pos":[0,87],"content":"The action delegate to execute when one task in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array completes.","source":"The action delegate to execute when one task in the <code>tasks</code> array completes."}],"pos":[161423,161511],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new continuation task.","nodes":[{"pos":[0,111],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> that will be assigned to the new continuation task.","source":"The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new continuation task."}],"pos":[161605,161717],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref> value that controls the behavior of the created continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.","nodes":[{"pos":[0,182],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions\"&gt;&lt;/xref&gt;</ph> value that controls the behavior of the created continuation <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref> value that controls the behavior of the created continuation <xref href=\"System.Threading.Tasks.Task\"></xref>."}],"pos":[161825,162008],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> that is used to schedule the created continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,163],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskScheduler\"&gt;&lt;/xref&gt;</ph> that is used to schedule the created continuation <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> that is used to schedule the created continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[162096,162260],"yaml":true},{"content":"The type of the result of the antecedent <code>tasks</code>.","nodes":[{"pos":[0,60],"content":"The type of the result of the antecedent <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the result of the antecedent <code>tasks</code>."}],"pos":[162327,162388],"yaml":true},{"content":"The new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.","nodes":[{"pos":[0,70],"content":"The new continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>.","source":"The new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>."}],"pos":[162459,162530],"yaml":true},{"content":"The exception that is thrown when the <code>tasks</code> array is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>continuationAction</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>scheduler</code> argument is null.","nodes":[{"pos":[0,71],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is null.","source":"The exception that is thrown when the <code>tasks</code> array is null."},{"pos":[78,82],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[89,176],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationAction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>continuationAction</code> argument is null."},{"pos":[183,187],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[194,272],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">scheduler</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>scheduler</code> argument is null."}],"pos":[162713,162996],"yaml":true},{"content":"The exception that is thrown when the <code>tasks</code> array contains a null value.  \n  \n -or-  \n  \n The exception that is thrown when the <code>tasks</code> array is empty.","nodes":[{"pos":[0,85],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array contains a null value.","source":"The exception that is thrown when the <code>tasks</code> array contains a null value."},{"pos":[92,96],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[103,175],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is empty.","source":"The exception that is thrown when the <code>tasks</code> array is empty."}],"pos":[163090,163272],"yaml":true},{"content":"Creates a continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref> that will be started upon the completion of any Task in the provided set.","nodes":[{"pos":[0,147],"content":"Creates a continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> that will be started upon the completion of any Task in the provided set.","source":"Creates a continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref> that will be started upon the completion of any Task in the provided set."}],"pos":[165125,165273],"yaml":true},{"content":"The array of tasks from which to continue when one task completes.","nodes":[{"pos":[0,66],"content":"The array of tasks from which to continue when one task completes.","nodes":[{"content":"The array of tasks from which to continue when one task completes.","pos":[0,66]}]}],"pos":[165561,165628],"yaml":true},{"content":"The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes.","nodes":[{"pos":[0,104],"content":"The function delegate to execute asynchronously when one task in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array completes.","source":"The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes."}],"pos":[165739,165844],"yaml":true},{"content":"The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,173],"content":"The type of the result that is returned by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate and associated with the created <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[165901,166075],"yaml":true},{"content":"The new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,72],"content":"The new continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[166148,166221],"yaml":true},{"content":"The exception that is thrown when one of the elements in the <code>tasks</code> array has been disposed.","nodes":[{"pos":[0,104],"content":"The exception that is thrown when one of the elements in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array has been disposed.","source":"The exception that is thrown when one of the elements in the <code>tasks</code> array has been disposed."}],"pos":[166408,166513],"yaml":true},{"content":"The exception that is thrown when the <code>tasks</code> array is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>continuationFunction</code> argument is null.","nodes":[{"pos":[0,71],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is null.","source":"The exception that is thrown when the <code>tasks</code> array is null."},{"pos":[78,82],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[89,178],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>continuationFunction</code> argument is null."}],"pos":[166615,166800],"yaml":true},{"content":"The exception that is thrown when the <code>tasks</code> array contains a null value.  \n  \n -or-  \n  \n The exception that is thrown when the <code>tasks</code> array is empty.","nodes":[{"pos":[0,85],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array contains a null value.","source":"The exception that is thrown when the <code>tasks</code> array contains a null value."},{"pos":[92,96],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[103,175],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is empty.","source":"The exception that is thrown when the <code>tasks</code> array is empty."}],"pos":[166894,167076],"yaml":true},{"content":"Creates a continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref> that will be started upon the completion of any Task in the provided set.","nodes":[{"pos":[0,147],"content":"Creates a continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> that will be started upon the completion of any Task in the provided set.","source":"Creates a continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref> that will be started upon the completion of any Task in the provided set."}],"pos":[169091,169239],"yaml":true},{"content":"The array of tasks from which to continue when one task completes.","nodes":[{"pos":[0,66],"content":"The array of tasks from which to continue when one task completes.","nodes":[{"content":"The array of tasks from which to continue when one task completes.","pos":[0,66]}]}],"pos":[169581,169648],"yaml":true},{"content":"The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes.","nodes":[{"pos":[0,104],"content":"The function delegate to execute asynchronously when one task in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array completes.","source":"The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes."}],"pos":[169759,169864],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new continuation task.","nodes":[{"pos":[0,111],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> that will be assigned to the new continuation task.","source":"The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new continuation task."}],"pos":[169958,170070],"yaml":true},{"content":"The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,173],"content":"The type of the result that is returned by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate and associated with the created <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[170127,170301],"yaml":true},{"content":"The new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,72],"content":"The new continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[170374,170447],"yaml":true},{"content":"The exception that is thrown when one of the elements in the <code>tasks</code> array has been disposed.  \n  \n -or-  \n  \n The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed.","nodes":[{"pos":[0,104],"content":"The exception that is thrown when one of the elements in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array has been disposed.","source":"The exception that is thrown when one of the elements in the <code>tasks</code> array has been disposed."},{"pos":[111,115],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[122,217],"content":"The provided <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> has already been disposed.","source":"The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed."}],"pos":[170634,170860],"yaml":true},{"content":"The exception that is thrown when the <code>tasks</code> array is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>continuationFunction</code> argument is null.","nodes":[{"pos":[0,71],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is null.","source":"The exception that is thrown when the <code>tasks</code> array is null."},{"pos":[78,82],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[89,178],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>continuationFunction</code> argument is null."}],"pos":[170962,171147],"yaml":true},{"content":"The exception that is thrown when the <code>tasks</code> array contains a null value.  \n  \n -or-  \n  \n The exception that is thrown when the <code>tasks</code> array is empty.","nodes":[{"pos":[0,85],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array contains a null value.","source":"The exception that is thrown when the <code>tasks</code> array contains a null value."},{"pos":[92,96],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[103,175],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is empty.","source":"The exception that is thrown when the <code>tasks</code> array is empty."}],"pos":[171241,171423],"yaml":true},{"content":"Creates a continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref> that will be started upon the completion of any Task in the provided set.","nodes":[{"pos":[0,147],"content":"Creates a continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> that will be started upon the completion of any Task in the provided set.","source":"Creates a continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref> that will be started upon the completion of any Task in the provided set."}],"pos":[173492,173640],"yaml":true},{"content":"The NotOn* and OnlyOn* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.","nodes":[{"pos":[0,218],"content":"The NotOn* and OnlyOn* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.","nodes":[{"content":"The NotOn* and OnlyOn* <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph>, which constrain for which <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskStatus&gt;</ph> states a continuation will be executed, are illegal with ContinueWhenAny.","pos":[0,218],"source":"The NotOn* and OnlyOn* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny."}]}],"pos":[173651,173870],"yaml":true,"extradata":"MT"},{"content":"The array of tasks from which to continue when one task completes.","nodes":[{"pos":[0,66],"content":"The array of tasks from which to continue when one task completes.","nodes":[{"content":"The array of tasks from which to continue when one task completes.","pos":[0,66]}]}],"pos":[174226,174293],"yaml":true},{"content":"The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes.","nodes":[{"pos":[0,104],"content":"The function delegate to execute asynchronously when one task in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array completes.","source":"The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes."}],"pos":[174404,174509],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref> value that controls the behavior of the created continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,184],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions\"&gt;&lt;/xref&gt;</ph> value that controls the behavior of the created continuation <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref> value that controls the behavior of the created continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[174617,174802],"yaml":true},{"content":"The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,173],"content":"The type of the result that is returned by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate and associated with the created <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[174859,175033],"yaml":true},{"content":"The new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,72],"content":"The new continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[175106,175179],"yaml":true},{"content":"The exception that is thrown when one of the elements in the <code>tasks</code> array has been disposed.","nodes":[{"pos":[0,104],"content":"The exception that is thrown when one of the elements in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array has been disposed.","source":"The exception that is thrown when one of the elements in the <code>tasks</code> array has been disposed."}],"pos":[175366,175471],"yaml":true},{"content":"The exception that is thrown when the <code>tasks</code> array is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>continuationFunction</code> argument is null.","nodes":[{"pos":[0,71],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is null.","source":"The exception that is thrown when the <code>tasks</code> array is null."},{"pos":[78,82],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[89,178],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>continuationFunction</code> argument is null."}],"pos":[175573,175758],"yaml":true},{"content":"The exception that is thrown when the <code>continuationOptions</code> argument specifies an invalid TaskContinuationOptions value.","nodes":[{"pos":[0,131],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid TaskContinuationOptions value.","source":"The exception that is thrown when the <code>continuationOptions</code> argument specifies an invalid TaskContinuationOptions value."}],"pos":[175872,176004],"yaml":true},{"content":"The exception that is thrown when the <code>tasks</code> array contains a null value.  \n  \n -or-  \n  \n The exception that is thrown when the <code>tasks</code> array is empty.","nodes":[{"pos":[0,85],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array contains a null value.","source":"The exception that is thrown when the <code>tasks</code> array contains a null value."},{"pos":[92,96],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[103,175],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is empty.","source":"The exception that is thrown when the <code>tasks</code> array is empty."}],"pos":[176098,176280],"yaml":true},{"content":"Creates a continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref> that will be started upon the completion of any Task in the provided set.","nodes":[{"pos":[0,147],"content":"Creates a continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> that will be started upon the completion of any Task in the provided set.","source":"Creates a continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref> that will be started upon the completion of any Task in the provided set."}],"pos":[178667,178815],"yaml":true},{"content":"The NotOn* and OnlyOn* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.","nodes":[{"pos":[0,218],"content":"The NotOn* and OnlyOn* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.","nodes":[{"content":"The NotOn* and OnlyOn* <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph>, which constrain for which <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskStatus&gt;</ph> states a continuation will be executed, are illegal with ContinueWhenAny.","pos":[0,218],"source":"The NotOn* and OnlyOn* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny."}]}],"pos":[178826,179045],"yaml":true,"extradata":"MT"},{"content":"The array of tasks from which to continue when one task completes.","nodes":[{"pos":[0,66],"content":"The array of tasks from which to continue when one task completes.","nodes":[{"content":"The array of tasks from which to continue when one task completes.","pos":[0,66]}]}],"pos":[179503,179570],"yaml":true},{"content":"The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes.","nodes":[{"pos":[0,104],"content":"The function delegate to execute asynchronously when one task in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array completes.","source":"The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes."}],"pos":[179681,179786],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new continuation task.","nodes":[{"pos":[0,111],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> that will be assigned to the new continuation task.","source":"The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new continuation task."}],"pos":[179880,179992],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref> value that controls the behavior of the created continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,184],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions\"&gt;&lt;/xref&gt;</ph> value that controls the behavior of the created continuation <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref> value that controls the behavior of the created continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[180100,180285],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> that is used to schedule the created continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,163],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskScheduler\"&gt;&lt;/xref&gt;</ph> that is used to schedule the created continuation <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> that is used to schedule the created continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[180373,180537],"yaml":true},{"content":"The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,173],"content":"The type of the result that is returned by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate and associated with the created <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[180594,180768],"yaml":true},{"content":"The new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,72],"content":"The new continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[180841,180914],"yaml":true},{"content":"The exception that is thrown when the <code>tasks</code> array is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>continuationFunction</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>scheduler</code> argument is null.","nodes":[{"pos":[0,71],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is null.","source":"The exception that is thrown when the <code>tasks</code> array is null."},{"pos":[78,82],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[89,178],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>continuationFunction</code> argument is null."},{"pos":[185,189],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[196,274],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">scheduler</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>scheduler</code> argument is null."}],"pos":[181097,181382],"yaml":true},{"content":"The exception that is thrown when the <code>tasks</code> array contains a null value.  \n  \n -or-  \n  \n The exception that is thrown when the <code>tasks</code> array is empty.","nodes":[{"pos":[0,85],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array contains a null value.","source":"The exception that is thrown when the <code>tasks</code> array contains a null value."},{"pos":[92,96],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[103,175],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is empty.","source":"The exception that is thrown when the <code>tasks</code> array is empty."}],"pos":[181476,181658],"yaml":true},{"content":"Gets the default task creation options for this task factory.","nodes":[{"pos":[0,61],"content":"Gets the default task creation options for this task factory.","nodes":[{"content":"Gets the default task creation options for this task factory.","pos":[0,61]}]}],"pos":[183165,183227],"yaml":true},{"content":"The property value is used to create all tasks, unless other options are explicitly specified during calls to this factory's methods.","nodes":[{"pos":[0,133],"content":"The property value is used to create all tasks, unless other options are explicitly specified during calls to this factory's methods.","nodes":[{"content":"The property value is used to create all tasks, unless other options are explicitly specified during calls to this factory's methods.","pos":[0,133]}]}],"pos":[183238,183372],"yaml":true,"extradata":"MT"},{"content":"The default task creation options for this task factory.","nodes":[{"pos":[0,56],"content":"The default task creation options for this task factory.","nodes":[{"content":"The default task creation options for this task factory.","pos":[0,56]}]}],"pos":[183556,183613],"yaml":true},{"content":"Creates a <xref href=\"System.Threading.Tasks.Task\"></xref> that executes an end method action when a specified <xref href=\"System.IAsyncResult\"></xref> completes.","nodes":[{"pos":[0,162],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> that executes an end method action when a specified <ph id=\"ph2\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> completes.","source":"Creates a <xref href=\"System.Threading.Tasks.Task\"></xref> that executes an end method action when a specified <xref href=\"System.IAsyncResult\"></xref> completes."}],"pos":[185439,185602],"yaml":true},{"content":"> [!TIP]\n>  The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter. If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.","nodes":[{"pos":[2,290],"content":"[!TIP]\n The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter. If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.","leadings":["","> "],"nodes":[{"content":" The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter. If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.","pos":[7,286],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> overloads that take an <ph id=\"ph2\">`asyncResult`</ph> parameter are not as efficient as the overloads that take a <ph id=\"ph3\">`beginMethod`</ph> parameter.","pos":[1,181],"source":" The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter."},{"content":"If performance is an issue, use the overloads that provide the <ph id=\"ph1\">`beginMethod`</ph><ph id=\"ph2\">/</ph><ph id=\"ph3\">`endMethod`</ph> pattern.","pos":[182,279],"source":" If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern."}]}]}],"pos":[185613,185916],"yaml":true,"extradata":"MT"},{"content":"The IAsyncResult whose completion should trigger the processing of the <code>endMethod</code>.","nodes":[{"pos":[0,94],"content":"The IAsyncResult whose completion should trigger the processing of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">endMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The IAsyncResult whose completion should trigger the processing of the <code>endMethod</code>."}],"pos":[186133,186228],"yaml":true},{"content":"The action delegate that processes the completed <code>asyncResult</code>.","nodes":[{"pos":[0,74],"content":"The action delegate that processes the completed <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">asyncResult</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The action delegate that processes the completed <code>asyncResult</code>."}],"pos":[186314,186389],"yaml":true},{"content":"A <xref href=\"System.Threading.Tasks.Task\"></xref> that represents the asynchronous operation.","nodes":[{"pos":[0,94],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> that represents the asynchronous operation.","source":"A <xref href=\"System.Threading.Tasks.Task\"></xref> that represents the asynchronous operation."}],"pos":[186460,186555],"yaml":true},{"content":"The exception that is thrown when the <code>asyncResult</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>endMethod</code> argument is null.","nodes":[{"pos":[0,80],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">asyncResult</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>asyncResult</code> argument is null."},{"pos":[87,91],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[98,176],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">endMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>endMethod</code> argument is null."}],"pos":[186729,186912],"yaml":true},{"content":"Creates a <xref href=\"System.Threading.Tasks.Task\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.","nodes":[{"pos":[0,166],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.","source":"Creates a <xref href=\"System.Threading.Tasks.Task\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern."}],"pos":[188948,189115],"yaml":true},{"content":"The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.  This method throws any exceptions thrown by the `beginMethod`.","nodes":[{"pos":[0,190],"content":"The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.  This method throws any exceptions thrown by the `beginMethod`.","nodes":[{"content":"The <ph id=\"ph1\">`beginMethod`</ph> delegate is started on the thread that <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> is running on.","pos":[0,126],"source":"The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on."},{"content":"This method throws any exceptions thrown by the <ph id=\"ph1\">`beginMethod`</ph>.","pos":[128,190],"source":"  This method throws any exceptions thrown by the `beginMethod`."}]}],"pos":[189126,189317],"yaml":true,"extradata":"MT"},{"content":"The delegate that begins the asynchronous operation.","nodes":[{"pos":[0,52],"content":"The delegate that begins the asynchronous operation.","nodes":[{"content":"The delegate that begins the asynchronous operation.","pos":[0,52]}]}],"pos":[189623,189676],"yaml":true},{"content":"The delegate that ends the asynchronous operation.","nodes":[{"pos":[0,50],"content":"The delegate that ends the asynchronous operation.","nodes":[{"content":"The delegate that ends the asynchronous operation.","pos":[0,50]}]}],"pos":[189762,189813],"yaml":true},{"content":"An object containing data to be used by the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,78],"content":"An object containing data to be used by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"An object containing data to be used by the <code>beginMethod</code> delegate."}],"pos":[189874,189953],"yaml":true},{"content":"The created <xref href=\"System.Threading.Tasks.Task\"></xref> that represents the asynchronous operation.","nodes":[{"pos":[0,104],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> that represents the asynchronous operation.","source":"The created <xref href=\"System.Threading.Tasks.Task\"></xref> that represents the asynchronous operation."}],"pos":[190024,190129],"yaml":true},{"content":"The exception that is thrown when the <code>beginMethod</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>endMethod</code> argument is null.","nodes":[{"pos":[0,80],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>beginMethod</code> argument is null."},{"pos":[87,91],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[98,176],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">endMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>endMethod</code> argument is null."}],"pos":[190303,190486],"yaml":true},{"content":"Creates a <xref href=\"System.Threading.Tasks.Task\"></xref> that executes an end method action when a specified <xref href=\"System.IAsyncResult\"></xref> completes.","nodes":[{"pos":[0,162],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> that executes an end method action when a specified <ph id=\"ph2\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> completes.","source":"Creates a <xref href=\"System.Threading.Tasks.Task\"></xref> that executes an end method action when a specified <xref href=\"System.IAsyncResult\"></xref> completes."}],"pos":[192423,192586],"yaml":true},{"content":"> [!TIP]\n>  The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter. If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.","nodes":[{"pos":[2,290],"content":"[!TIP]\n The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter. If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.","leadings":["","> "],"nodes":[{"content":" The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter. If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.","pos":[7,286],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> overloads that take an <ph id=\"ph2\">`asyncResult`</ph> parameter are not as efficient as the overloads that take a <ph id=\"ph3\">`beginMethod`</ph> parameter.","pos":[1,181],"source":" The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter."},{"content":"If performance is an issue, use the overloads that provide the <ph id=\"ph1\">`beginMethod`</ph><ph id=\"ph2\">/</ph><ph id=\"ph3\">`endMethod`</ph> pattern.","pos":[182,279],"source":" If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern."}]}]}],"pos":[192597,192900],"yaml":true,"extradata":"MT"},{"content":"The IAsyncResult whose completion should trigger the processing of the <code>endMethod</code>.","nodes":[{"pos":[0,94],"content":"The IAsyncResult whose completion should trigger the processing of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">endMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The IAsyncResult whose completion should trigger the processing of the <code>endMethod</code>."}],"pos":[193177,193272],"yaml":true},{"content":"The action delegate that processes the completed <code>asyncResult</code>.","nodes":[{"pos":[0,74],"content":"The action delegate that processes the completed <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">asyncResult</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The action delegate that processes the completed <code>asyncResult</code>."}],"pos":[193358,193433],"yaml":true},{"content":"The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task\"></xref>.","nodes":[{"pos":[0,121],"content":"The TaskCreationOptions value that controls the behavior of the created <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>.","source":"The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task\"></xref>."}],"pos":[193533,193655],"yaml":true},{"content":"A <xref href=\"System.Threading.Tasks.Task\"></xref> that represents the asynchronous operation.","nodes":[{"pos":[0,94],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> that represents the asynchronous operation.","source":"A <xref href=\"System.Threading.Tasks.Task\"></xref> that represents the asynchronous operation."}],"pos":[193726,193821],"yaml":true},{"content":"The exception that is thrown when the <code>asyncResult</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>endMethod</code> argument is null.","nodes":[{"pos":[0,80],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">asyncResult</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>asyncResult</code> argument is null."},{"pos":[87,91],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[98,176],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">endMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>endMethod</code> argument is null."}],"pos":[193995,194178],"yaml":true},{"content":"The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>","nodes":[{"pos":[0,392],"content":"The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>","nodes":[{"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">creationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid TaskCreationOptions value.","pos":[0,123],"source":"The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value."},{"content":"For more information, see the Remarks for <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"&gt;&lt;/xref&gt;</ph>","pos":[124,392],"source":" For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>"}]}],"pos":[194292,194685],"yaml":true},{"content":"Creates a <xref href=\"System.Threading.Tasks.Task\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.","nodes":[{"pos":[0,166],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.","source":"Creates a <xref href=\"System.Threading.Tasks.Task\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern."}],"pos":[196913,197080],"yaml":true},{"content":"The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on. This method throws any exceptions thrown by the `beginMethod`. The <xref:System.Threading.Tasks.TaskCreationOptions> values <xref:System.Threading.Tasks.TaskCreationOptions.PreferFairness>, <xref:System.Threading.Tasks.TaskCreationOptions.LongRunning> and <xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent> are all mutually exclusive. In the FromAsync methods, either `LongRunning` or `AttachedToParent` by themselves will cause an <xref:System.ArgumentOutOfRangeException> to be thrown.","nodes":[{"pos":[0,630],"content":"The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on. This method throws any exceptions thrown by the `beginMethod`. The <xref:System.Threading.Tasks.TaskCreationOptions> values <xref:System.Threading.Tasks.TaskCreationOptions.PreferFairness>, <xref:System.Threading.Tasks.TaskCreationOptions.LongRunning> and <xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent> are all mutually exclusive. In the FromAsync methods, either `LongRunning` or `AttachedToParent` by themselves will cause an <xref:System.ArgumentOutOfRangeException> to be thrown.","nodes":[{"content":"The <ph id=\"ph1\">`beginMethod`</ph> delegate is started on the thread that <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> is running on.","pos":[0,126],"source":"The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on."},{"content":"This method throws any exceptions thrown by the <ph id=\"ph1\">`beginMethod`</ph>.","pos":[127,189],"source":" This method throws any exceptions thrown by the `beginMethod`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskCreationOptions&gt;</ph> values <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskCreationOptions.PreferFairness&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.TaskCreationOptions.LongRunning&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent&gt;</ph> are all mutually exclusive.","pos":[190,477],"source":" The <xref:System.Threading.Tasks.TaskCreationOptions> values <xref:System.Threading.Tasks.TaskCreationOptions.PreferFairness>, <xref:System.Threading.Tasks.TaskCreationOptions.LongRunning> and <xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent> are all mutually exclusive."},{"content":"In the FromAsync methods, either <ph id=\"ph1\">`LongRunning`</ph> or <ph id=\"ph2\">`AttachedToParent`</ph> by themselves will cause an <ph id=\"ph3\">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> to be thrown.","pos":[478,630],"source":" In the FromAsync methods, either `LongRunning` or `AttachedToParent` by themselves will cause an <xref:System.ArgumentOutOfRangeException> to be thrown."}]}],"pos":[197091,197722],"yaml":true,"extradata":"MT"},{"content":"The delegate that begins the asynchronous operation.","nodes":[{"pos":[0,52],"content":"The delegate that begins the asynchronous operation.","nodes":[{"content":"The delegate that begins the asynchronous operation.","pos":[0,52]}]}],"pos":[198088,198141],"yaml":true},{"content":"The delegate that ends the asynchronous operation.","nodes":[{"pos":[0,50],"content":"The delegate that ends the asynchronous operation.","nodes":[{"content":"The delegate that ends the asynchronous operation.","pos":[0,50]}]}],"pos":[198227,198278],"yaml":true},{"content":"An object containing data to be used by the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,78],"content":"An object containing data to be used by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"An object containing data to be used by the <code>beginMethod</code> delegate."}],"pos":[198339,198418],"yaml":true},{"content":"The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task\"></xref>.","nodes":[{"pos":[0,121],"content":"The TaskCreationOptions value that controls the behavior of the created <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>.","source":"The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task\"></xref>."}],"pos":[198518,198640],"yaml":true},{"content":"The created <xref href=\"System.Threading.Tasks.Task\"></xref> that represents the asynchronous operation.","nodes":[{"pos":[0,104],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> that represents the asynchronous operation.","source":"The created <xref href=\"System.Threading.Tasks.Task\"></xref> that represents the asynchronous operation."}],"pos":[198711,198816],"yaml":true},{"content":"The exception that is thrown when the <code>beginMethod</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>endMethod</code> argument is null.","nodes":[{"pos":[0,80],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>beginMethod</code> argument is null."},{"pos":[87,91],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[98,176],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">endMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>endMethod</code> argument is null."}],"pos":[198990,199173],"yaml":true},{"content":"The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value.","nodes":[{"pos":[0,123],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">creationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid TaskCreationOptions value.","source":"The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value."}],"pos":[199287,199411],"yaml":true},{"content":"Creates a <xref href=\"System.Threading.Tasks.Task\"></xref> that executes an end method action when a specified <xref href=\"System.IAsyncResult\"></xref> completes.","nodes":[{"pos":[0,162],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> that executes an end method action when a specified <ph id=\"ph2\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> completes.","source":"Creates a <xref href=\"System.Threading.Tasks.Task\"></xref> that executes an end method action when a specified <xref href=\"System.IAsyncResult\"></xref> completes."}],"pos":[201504,201667],"yaml":true},{"content":"> [!TIP]\n>  The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter. If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.","nodes":[{"pos":[2,290],"content":"[!TIP]\n The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter. If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.","leadings":["","> "],"nodes":[{"content":" The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter. If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.","pos":[7,286],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> overloads that take an <ph id=\"ph2\">`asyncResult`</ph> parameter are not as efficient as the overloads that take a <ph id=\"ph3\">`beginMethod`</ph> parameter.","pos":[1,181],"source":" The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter."},{"content":"If performance is an issue, use the overloads that provide the <ph id=\"ph1\">`beginMethod`</ph><ph id=\"ph2\">/</ph><ph id=\"ph3\">`endMethod`</ph> pattern.","pos":[182,279],"source":" If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern."}]}]}],"pos":[201678,201981],"yaml":true,"extradata":"MT"},{"content":"The IAsyncResult whose completion should trigger the processing of the <code>endMethod</code>.","nodes":[{"pos":[0,94],"content":"The IAsyncResult whose completion should trigger the processing of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">endMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The IAsyncResult whose completion should trigger the processing of the <code>endMethod</code>."}],"pos":[202306,202401],"yaml":true},{"content":"The action delegate that processes the completed <code>asyncResult</code>.","nodes":[{"pos":[0,74],"content":"The action delegate that processes the completed <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">asyncResult</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The action delegate that processes the completed <code>asyncResult</code>."}],"pos":[202487,202562],"yaml":true},{"content":"The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task\"></xref>.","nodes":[{"pos":[0,121],"content":"The TaskCreationOptions value that controls the behavior of the created <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>.","source":"The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task\"></xref>."}],"pos":[202662,202784],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> that is used to schedule the task that executes the end method.","nodes":[{"pos":[0,125],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskScheduler\"&gt;&lt;/xref&gt;</ph> that is used to schedule the task that executes the end method.","source":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> that is used to schedule the task that executes the end method."}],"pos":[202872,202998],"yaml":true},{"content":"The created <xref href=\"System.Threading.Tasks.Task\"></xref> that represents the asynchronous operation.","nodes":[{"pos":[0,104],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> that represents the asynchronous operation.","source":"The created <xref href=\"System.Threading.Tasks.Task\"></xref> that represents the asynchronous operation."}],"pos":[203069,203174],"yaml":true},{"content":"The exception that is thrown when the <code>asyncResult</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>endMethod</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>scheduler</code> argument is null.","nodes":[{"pos":[0,80],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">asyncResult</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>asyncResult</code> argument is null."},{"pos":[87,91],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[98,176],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">endMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>endMethod</code> argument is null."},{"pos":[183,187],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[194,272],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">scheduler</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>scheduler</code> argument is null."}],"pos":[203348,203631],"yaml":true},{"content":"The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>","nodes":[{"pos":[0,516],"content":"The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>","nodes":[{"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">creationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid TaskCreationOptions value.","pos":[0,123],"source":"The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value."},{"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">creationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid TaskCreationOptions value.","pos":[124,247],"source":" The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value."},{"content":"For more information, see the Remarks for <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"&gt;&lt;/xref&gt;</ph>","pos":[248,516],"source":" For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>"}]}],"pos":[203745,204262],"yaml":true},{"content":"Creates a <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.","nodes":[{"pos":[0,168],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.","source":"Creates a <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern."}],"pos":[206793,206962],"yaml":true},{"content":"The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on. This method throws any exceptions thrown by the `beginMethod`.","nodes":[{"pos":[0,189],"content":"The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on. This method throws any exceptions thrown by the `beginMethod`.","nodes":[{"content":"The <ph id=\"ph1\">`beginMethod`</ph> delegate is started on the thread that <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> is running on.","pos":[0,126],"source":"The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on."},{"content":"This method throws any exceptions thrown by the <ph id=\"ph1\">`beginMethod`</ph>.","pos":[127,189],"source":" This method throws any exceptions thrown by the `beginMethod`."}]}],"pos":[206973,207163],"yaml":true,"extradata":"MT"},{"content":"The delegate that begins the asynchronous operation.","nodes":[{"pos":[0,52],"content":"The delegate that begins the asynchronous operation.","nodes":[{"content":"The delegate that begins the asynchronous operation.","pos":[0,52]}]}],"pos":[207643,207696],"yaml":true},{"content":"The delegate that ends the asynchronous operation.","nodes":[{"pos":[0,50],"content":"The delegate that ends the asynchronous operation.","nodes":[{"content":"The delegate that ends the asynchronous operation.","pos":[0,50]}]}],"pos":[207788,207839],"yaml":true},{"content":"The first argument passed to the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,67],"content":"The first argument passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The first argument passed to the <code>beginMethod</code> delegate."}],"pos":[207891,207959],"yaml":true},{"content":"The second argument passed to the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,68],"content":"The second argument passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The second argument passed to the <code>beginMethod</code> delegate."}],"pos":[208011,208080],"yaml":true},{"content":"The third argument passed to the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,67],"content":"The third argument passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The third argument passed to the <code>beginMethod</code> delegate."}],"pos":[208132,208200],"yaml":true},{"content":"An object containing data to be used by the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,78],"content":"An object containing data to be used by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"An object containing data to be used by the <code>beginMethod</code> delegate."}],"pos":[208261,208340],"yaml":true},{"content":"The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,123],"content":"The TaskCreationOptions value that controls the behavior of the created <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[208440,208564],"yaml":true},{"content":"The type of the second argument passed to <code>beginMethod</code> delegate.","nodes":[{"pos":[0,76],"content":"The type of the second argument passed to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The type of the second argument passed to <code>beginMethod</code> delegate."}],"pos":[208619,208696],"yaml":true},{"content":"The type of the third argument passed to <code>beginMethod</code> delegate.","nodes":[{"pos":[0,75],"content":"The type of the third argument passed to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The type of the third argument passed to <code>beginMethod</code> delegate."}],"pos":[208731,208807],"yaml":true},{"content":"The type of the first argument passed to the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,79],"content":"The type of the first argument passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The type of the first argument passed to the <code>beginMethod</code> delegate."}],"pos":[208842,208922],"yaml":true},{"content":"The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,96],"content":"The type of the result available through the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[208959,209056],"yaml":true},{"content":"The created <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents the asynchronous operation.","nodes":[{"pos":[0,106],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> that represents the asynchronous operation.","source":"The created <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents the asynchronous operation."}],"pos":[209129,209236],"yaml":true},{"content":"The exception that is thrown when the <code>beginMethod</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>endMethod</code> argument is null.","nodes":[{"pos":[0,80],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>beginMethod</code> argument is null."},{"pos":[87,91],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[98,176],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">endMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>endMethod</code> argument is null."}],"pos":[209413,209596],"yaml":true},{"content":"The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>","nodes":[{"pos":[0,516],"content":"The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>","nodes":[{"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">creationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid TaskCreationOptions value.","pos":[0,123],"source":"The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value."},{"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">creationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid TaskCreationOptions value.","pos":[124,247],"source":" The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value."},{"content":"For more information, see the Remarks for <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"&gt;&lt;/xref&gt;</ph>","pos":[248,516],"source":" For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>"}]}],"pos":[209710,210227],"yaml":true},{"content":"Creates a <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.","nodes":[{"pos":[0,168],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.","source":"Creates a <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern."}],"pos":[212566,212735],"yaml":true},{"content":"The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on. This method throws any exceptions thrown by the `beginMethod`.","nodes":[{"pos":[0,189],"content":"The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on. This method throws any exceptions thrown by the `beginMethod`.","nodes":[{"content":"The <ph id=\"ph1\">`beginMethod`</ph> delegate is started on the thread that <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> is running on.","pos":[0,126],"source":"The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on."},{"content":"This method throws any exceptions thrown by the <ph id=\"ph1\">`beginMethod`</ph>.","pos":[127,189],"source":" This method throws any exceptions thrown by the `beginMethod`."}]}],"pos":[212746,212936],"yaml":true,"extradata":"MT"},{"content":"The delegate that begins the asynchronous operation.","nodes":[{"pos":[0,52],"content":"The delegate that begins the asynchronous operation.","nodes":[{"content":"The delegate that begins the asynchronous operation.","pos":[0,52]}]}],"pos":[213356,213409],"yaml":true},{"content":"The delegate that ends the asynchronous operation.","nodes":[{"pos":[0,50],"content":"The delegate that ends the asynchronous operation.","nodes":[{"content":"The delegate that ends the asynchronous operation.","pos":[0,50]}]}],"pos":[213501,213552],"yaml":true},{"content":"The first argument passed to the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,67],"content":"The first argument passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The first argument passed to the <code>beginMethod</code> delegate."}],"pos":[213604,213672],"yaml":true},{"content":"The second argument passed to the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,68],"content":"The second argument passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The second argument passed to the <code>beginMethod</code> delegate."}],"pos":[213724,213793],"yaml":true},{"content":"The third argument passed to the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,67],"content":"The third argument passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The third argument passed to the <code>beginMethod</code> delegate."}],"pos":[213845,213913],"yaml":true},{"content":"An object containing data to be used by the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,78],"content":"An object containing data to be used by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"An object containing data to be used by the <code>beginMethod</code> delegate."}],"pos":[213974,214053],"yaml":true},{"content":"The type of the second argument passed to <code>beginMethod</code> delegate.","nodes":[{"pos":[0,76],"content":"The type of the second argument passed to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The type of the second argument passed to <code>beginMethod</code> delegate."}],"pos":[214108,214185],"yaml":true},{"content":"The type of the third argument passed to <code>beginMethod</code> delegate.","nodes":[{"pos":[0,75],"content":"The type of the third argument passed to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The type of the third argument passed to <code>beginMethod</code> delegate."}],"pos":[214220,214296],"yaml":true},{"content":"The type of the first argument passed to the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,79],"content":"The type of the first argument passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The type of the first argument passed to the <code>beginMethod</code> delegate."}],"pos":[214331,214411],"yaml":true},{"content":"The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,96],"content":"The type of the result available through the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[214448,214545],"yaml":true},{"content":"The created <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents the asynchronous operation.","nodes":[{"pos":[0,106],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> that represents the asynchronous operation.","source":"The created <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents the asynchronous operation."}],"pos":[214618,214725],"yaml":true},{"content":"The exception that is thrown when the <code>beginMethod</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>endMethod</code> argument is null.","nodes":[{"pos":[0,80],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>beginMethod</code> argument is null."},{"pos":[87,91],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[98,176],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">endMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>endMethod</code> argument is null."}],"pos":[214902,215085],"yaml":true},{"content":"Creates a <xref href=\"System.Threading.Tasks.Task\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.","nodes":[{"pos":[0,166],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.","source":"Creates a <xref href=\"System.Threading.Tasks.Task\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern."}],"pos":[217568,217735],"yaml":true},{"content":"The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on. This method throws any exceptions thrown by the `beginMethod`.","nodes":[{"pos":[0,189],"content":"The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on. This method throws any exceptions thrown by the `beginMethod`.","nodes":[{"content":"The <ph id=\"ph1\">`beginMethod`</ph> delegate is started on the thread that <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> is running on.","pos":[0,126],"source":"The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on."},{"content":"This method throws any exceptions thrown by the <ph id=\"ph1\">`beginMethod`</ph>.","pos":[127,189],"source":" This method throws any exceptions thrown by the `beginMethod`."}]}],"pos":[217746,217936],"yaml":true,"extradata":"MT"},{"content":"The delegate that begins the asynchronous operation.","nodes":[{"pos":[0,52],"content":"The delegate that begins the asynchronous operation.","nodes":[{"content":"The delegate that begins the asynchronous operation.","pos":[0,52]}]}],"pos":[218393,218446],"yaml":true},{"content":"The delegate that ends the asynchronous operation.","nodes":[{"pos":[0,50],"content":"The delegate that ends the asynchronous operation.","nodes":[{"content":"The delegate that ends the asynchronous operation.","pos":[0,50]}]}],"pos":[218532,218583],"yaml":true},{"content":"The first argument passed to the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,67],"content":"The first argument passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The first argument passed to the <code>beginMethod</code> delegate."}],"pos":[218635,218703],"yaml":true},{"content":"The second argument passed to the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,68],"content":"The second argument passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The second argument passed to the <code>beginMethod</code> delegate."}],"pos":[218755,218824],"yaml":true},{"content":"The third argument passed to the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,67],"content":"The third argument passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The third argument passed to the <code>beginMethod</code> delegate."}],"pos":[218876,218944],"yaml":true},{"content":"An object containing data to be used by the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,78],"content":"An object containing data to be used by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"An object containing data to be used by the <code>beginMethod</code> delegate."}],"pos":[219005,219084],"yaml":true},{"content":"The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task\"></xref>.","nodes":[{"pos":[0,121],"content":"The TaskCreationOptions value that controls the behavior of the created <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>.","source":"The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task\"></xref>."}],"pos":[219184,219306],"yaml":true},{"content":"The type of the second argument passed to <code>beginMethod</code> delegate.","nodes":[{"pos":[0,76],"content":"The type of the second argument passed to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The type of the second argument passed to <code>beginMethod</code> delegate."}],"pos":[219361,219438],"yaml":true},{"content":"The type of the third argument passed to <code>beginMethod</code> delegate.","nodes":[{"pos":[0,75],"content":"The type of the third argument passed to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The type of the third argument passed to <code>beginMethod</code> delegate."}],"pos":[219473,219549],"yaml":true},{"content":"The type of the first argument passed to the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,79],"content":"The type of the first argument passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The type of the first argument passed to the <code>beginMethod</code> delegate."}],"pos":[219584,219664],"yaml":true},{"content":"The created <xref href=\"System.Threading.Tasks.Task\"></xref> that represents the asynchronous operation.","nodes":[{"pos":[0,104],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> that represents the asynchronous operation.","source":"The created <xref href=\"System.Threading.Tasks.Task\"></xref> that represents the asynchronous operation."}],"pos":[219735,219840],"yaml":true},{"content":"The exception that is thrown when the <code>beginMethod</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>endMethod</code> argument is null.","nodes":[{"pos":[0,80],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>beginMethod</code> argument is null."},{"pos":[87,91],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[98,176],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">endMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>endMethod</code> argument is null."}],"pos":[220017,220200],"yaml":true},{"content":"The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>","nodes":[{"pos":[0,516],"content":"The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>","nodes":[{"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">creationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid TaskCreationOptions value.","pos":[0,123],"source":"The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value."},{"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">creationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid TaskCreationOptions value.","pos":[124,247],"source":" The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value."},{"content":"For more information, see the Remarks for <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"&gt;&lt;/xref&gt;</ph>","pos":[248,516],"source":" For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>"}]}],"pos":[220314,220831],"yaml":true},{"content":"Creates a <xref href=\"System.Threading.Tasks.Task\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.","nodes":[{"pos":[0,166],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.","source":"Creates a <xref href=\"System.Threading.Tasks.Task\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern."}],"pos":[223122,223289],"yaml":true},{"content":"The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on. This method throws any exceptions thrown by the `beginMethod`.","nodes":[{"pos":[0,189],"content":"The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on. This method throws any exceptions thrown by the `beginMethod`.","nodes":[{"content":"The <ph id=\"ph1\">`beginMethod`</ph> delegate is started on the thread that <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> is running on.","pos":[0,126],"source":"The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on."},{"content":"This method throws any exceptions thrown by the <ph id=\"ph1\">`beginMethod`</ph>.","pos":[127,189],"source":" This method throws any exceptions thrown by the `beginMethod`."}]}],"pos":[223300,223490],"yaml":true,"extradata":"MT"},{"content":"The delegate that begins the asynchronous operation.","nodes":[{"pos":[0,52],"content":"The delegate that begins the asynchronous operation.","nodes":[{"content":"The delegate that begins the asynchronous operation.","pos":[0,52]}]}],"pos":[223887,223940],"yaml":true},{"content":"The delegate that ends the asynchronous operation.","nodes":[{"pos":[0,50],"content":"The delegate that ends the asynchronous operation.","nodes":[{"content":"The delegate that ends the asynchronous operation.","pos":[0,50]}]}],"pos":[224026,224077],"yaml":true},{"content":"The first argument passed to the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,67],"content":"The first argument passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The first argument passed to the <code>beginMethod</code> delegate."}],"pos":[224129,224197],"yaml":true},{"content":"The second argument passed to the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,68],"content":"The second argument passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The second argument passed to the <code>beginMethod</code> delegate."}],"pos":[224249,224318],"yaml":true},{"content":"The third argument passed to the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,67],"content":"The third argument passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The third argument passed to the <code>beginMethod</code> delegate."}],"pos":[224370,224438],"yaml":true},{"content":"An object containing data to be used by the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,78],"content":"An object containing data to be used by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"An object containing data to be used by the <code>beginMethod</code> delegate."}],"pos":[224499,224578],"yaml":true},{"content":"The type of the second argument passed to <code>beginMethod</code> delegate.","nodes":[{"pos":[0,76],"content":"The type of the second argument passed to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The type of the second argument passed to <code>beginMethod</code> delegate."}],"pos":[224633,224710],"yaml":true},{"content":"The type of the third argument passed to <code>beginMethod</code> delegate.","nodes":[{"pos":[0,75],"content":"The type of the third argument passed to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The type of the third argument passed to <code>beginMethod</code> delegate."}],"pos":[224745,224821],"yaml":true},{"content":"The type of the first argument passed to the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,79],"content":"The type of the first argument passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The type of the first argument passed to the <code>beginMethod</code> delegate."}],"pos":[224856,224936],"yaml":true},{"content":"The created <xref href=\"System.Threading.Tasks.Task\"></xref> that represents the asynchronous operation.","nodes":[{"pos":[0,104],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> that represents the asynchronous operation.","source":"The created <xref href=\"System.Threading.Tasks.Task\"></xref> that represents the asynchronous operation."}],"pos":[225007,225112],"yaml":true},{"content":"The exception that is thrown when the <code>beginMethod</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>endMethod</code> argument is null.","nodes":[{"pos":[0,80],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>beginMethod</code> argument is null."},{"pos":[87,91],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[98,176],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">endMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>endMethod</code> argument is null."}],"pos":[225289,225472],"yaml":true},{"content":"Creates a <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.","nodes":[{"pos":[0,168],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.","source":"Creates a <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern."}],"pos":[227730,227899],"yaml":true},{"content":"The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on. This method throws any exceptions thrown by the `beginMethod`.","nodes":[{"pos":[0,189],"content":"The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on. This method throws any exceptions thrown by the `beginMethod`.","nodes":[{"content":"The <ph id=\"ph1\">`beginMethod`</ph> delegate is started on the thread that <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> is running on.","pos":[0,126],"source":"The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on."},{"content":"This method throws any exceptions thrown by the <ph id=\"ph1\">`beginMethod`</ph>.","pos":[127,189],"source":" This method throws any exceptions thrown by the `beginMethod`."}]}],"pos":[227910,228100],"yaml":true,"extradata":"MT"},{"content":"The delegate that begins the asynchronous operation.","nodes":[{"pos":[0,52],"content":"The delegate that begins the asynchronous operation.","nodes":[{"content":"The delegate that begins the asynchronous operation.","pos":[0,52]}]}],"pos":[228490,228543],"yaml":true},{"content":"The delegate that ends the asynchronous operation.","nodes":[{"pos":[0,50],"content":"The delegate that ends the asynchronous operation.","nodes":[{"content":"The delegate that ends the asynchronous operation.","pos":[0,50]}]}],"pos":[228635,228686],"yaml":true},{"content":"The first argument passed to the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,67],"content":"The first argument passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The first argument passed to the <code>beginMethod</code> delegate."}],"pos":[228738,228806],"yaml":true},{"content":"The second argument passed to the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,68],"content":"The second argument passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The second argument passed to the <code>beginMethod</code> delegate."}],"pos":[228858,228927],"yaml":true},{"content":"An object containing data to be used by the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,78],"content":"An object containing data to be used by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"An object containing data to be used by the <code>beginMethod</code> delegate."}],"pos":[228988,229067],"yaml":true},{"content":"The type of the second argument passed to <code>beginMethod</code> delegate.","nodes":[{"pos":[0,76],"content":"The type of the second argument passed to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The type of the second argument passed to <code>beginMethod</code> delegate."}],"pos":[229122,229199],"yaml":true},{"content":"The type of the first argument passed to the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,79],"content":"The type of the first argument passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The type of the first argument passed to the <code>beginMethod</code> delegate."}],"pos":[229234,229314],"yaml":true},{"content":"The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,96],"content":"The type of the result available through the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[229351,229448],"yaml":true},{"content":"The created <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents the asynchronous operation.","nodes":[{"pos":[0,106],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> that represents the asynchronous operation.","source":"The created <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents the asynchronous operation."}],"pos":[229521,229628],"yaml":true},{"content":"The exception that is thrown when the <code>beginMethod</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>endMethod</code> argument is null.","nodes":[{"pos":[0,80],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>beginMethod</code> argument is null."},{"pos":[87,91],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[98,176],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">endMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>endMethod</code> argument is null."}],"pos":[229805,229988],"yaml":true},{"content":"Creates a <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.","nodes":[{"pos":[0,168],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.","source":"Creates a <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern."}],"pos":[232438,232607],"yaml":true},{"content":"The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on. This method throws any exceptions thrown by the `beginMethod`.","nodes":[{"pos":[0,189],"content":"The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on. This method throws any exceptions thrown by the `beginMethod`.","nodes":[{"content":"The <ph id=\"ph1\">`beginMethod`</ph> delegate is started on the thread that <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> is running on.","pos":[0,126],"source":"The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on."},{"content":"This method throws any exceptions thrown by the <ph id=\"ph1\">`beginMethod`</ph>.","pos":[127,189],"source":" This method throws any exceptions thrown by the `beginMethod`."}]}],"pos":[232618,232808],"yaml":true,"extradata":"MT"},{"content":"The delegate that begins the asynchronous operation.","nodes":[{"pos":[0,52],"content":"The delegate that begins the asynchronous operation.","nodes":[{"content":"The delegate that begins the asynchronous operation.","pos":[0,52]}]}],"pos":[233258,233311],"yaml":true},{"content":"The delegate that ends the asynchronous operation.","nodes":[{"pos":[0,50],"content":"The delegate that ends the asynchronous operation.","nodes":[{"content":"The delegate that ends the asynchronous operation.","pos":[0,50]}]}],"pos":[233403,233454],"yaml":true},{"content":"The first argument passed to the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,67],"content":"The first argument passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The first argument passed to the <code>beginMethod</code> delegate."}],"pos":[233506,233574],"yaml":true},{"content":"The second argument passed to the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,68],"content":"The second argument passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The second argument passed to the <code>beginMethod</code> delegate."}],"pos":[233626,233695],"yaml":true},{"content":"An object containing data to be used by the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,78],"content":"An object containing data to be used by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"An object containing data to be used by the <code>beginMethod</code> delegate."}],"pos":[233756,233835],"yaml":true},{"content":"The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,123],"content":"The TaskCreationOptions value that controls the behavior of the created <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[233935,234059],"yaml":true},{"content":"The type of the second argument passed to <code>beginMethod</code> delegate.","nodes":[{"pos":[0,76],"content":"The type of the second argument passed to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The type of the second argument passed to <code>beginMethod</code> delegate."}],"pos":[234114,234191],"yaml":true},{"content":"The type of the first argument passed to the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,79],"content":"The type of the first argument passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The type of the first argument passed to the <code>beginMethod</code> delegate."}],"pos":[234226,234306],"yaml":true},{"content":"The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,96],"content":"The type of the result available through the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[234343,234440],"yaml":true},{"content":"The created <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents the asynchronous operation.","nodes":[{"pos":[0,106],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> that represents the asynchronous operation.","source":"The created <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents the asynchronous operation."}],"pos":[234513,234620],"yaml":true},{"content":"The exception that is thrown when the <code>beginMethod</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>endMethod</code> argument is null.","nodes":[{"pos":[0,80],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>beginMethod</code> argument is null."},{"pos":[87,91],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[98,176],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">endMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>endMethod</code> argument is null."}],"pos":[234797,234980],"yaml":true},{"content":"The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>","nodes":[{"pos":[0,516],"content":"The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>","nodes":[{"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">creationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid TaskCreationOptions value.","pos":[0,123],"source":"The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value."},{"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">creationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid TaskCreationOptions value.","pos":[124,247],"source":" The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value."},{"content":"For more information, see the Remarks for <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"&gt;&lt;/xref&gt;</ph>","pos":[248,516],"source":" For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>"}]}],"pos":[235094,235611],"yaml":true},{"content":"Creates a <xref href=\"System.Threading.Tasks.Task\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.","nodes":[{"pos":[0,166],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.","source":"Creates a <xref href=\"System.Threading.Tasks.Task\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern."}],"pos":[237821,237988],"yaml":true},{"content":"The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on. This method throws any exceptions thrown by the `beginMethod`.","nodes":[{"pos":[0,189],"content":"The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on. This method throws any exceptions thrown by the `beginMethod`.","nodes":[{"content":"The <ph id=\"ph1\">`beginMethod`</ph> delegate is started on the thread that <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> is running on.","pos":[0,126],"source":"The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on."},{"content":"This method throws any exceptions thrown by the <ph id=\"ph1\">`beginMethod`</ph>.","pos":[127,189],"source":" This method throws any exceptions thrown by the `beginMethod`."}]}],"pos":[237999,238189],"yaml":true,"extradata":"MT"},{"content":"The delegate that begins the asynchronous operation.","nodes":[{"pos":[0,52],"content":"The delegate that begins the asynchronous operation.","nodes":[{"content":"The delegate that begins the asynchronous operation.","pos":[0,52]}]}],"pos":[238556,238609],"yaml":true},{"content":"The delegate that ends the asynchronous operation.","nodes":[{"pos":[0,50],"content":"The delegate that ends the asynchronous operation.","nodes":[{"content":"The delegate that ends the asynchronous operation.","pos":[0,50]}]}],"pos":[238695,238746],"yaml":true},{"content":"The first argument passed to the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,67],"content":"The first argument passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The first argument passed to the <code>beginMethod</code> delegate."}],"pos":[238798,238866],"yaml":true},{"content":"The second argument passed to the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,68],"content":"The second argument passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The second argument passed to the <code>beginMethod</code> delegate."}],"pos":[238918,238987],"yaml":true},{"content":"An object containing data to be used by the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,78],"content":"An object containing data to be used by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"An object containing data to be used by the <code>beginMethod</code> delegate."}],"pos":[239048,239127],"yaml":true},{"content":"The type of the second argument passed to <code>beginMethod</code> delegate.","nodes":[{"pos":[0,76],"content":"The type of the second argument passed to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The type of the second argument passed to <code>beginMethod</code> delegate."}],"pos":[239182,239259],"yaml":true},{"content":"The type of the first argument passed to the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,79],"content":"The type of the first argument passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The type of the first argument passed to the <code>beginMethod</code> delegate."}],"pos":[239294,239374],"yaml":true},{"content":"The created <xref href=\"System.Threading.Tasks.Task\"></xref> that represents the asynchronous operation.","nodes":[{"pos":[0,104],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> that represents the asynchronous operation.","source":"The created <xref href=\"System.Threading.Tasks.Task\"></xref> that represents the asynchronous operation."}],"pos":[239445,239550],"yaml":true},{"content":"The exception that is thrown when the <code>beginMethod</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>endMethod</code> argument is null.","nodes":[{"pos":[0,80],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>beginMethod</code> argument is null."},{"pos":[87,91],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[98,176],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">endMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>endMethod</code> argument is null."}],"pos":[239727,239910],"yaml":true},{"content":"Creates a <xref href=\"System.Threading.Tasks.Task\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.","nodes":[{"pos":[0,166],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.","source":"Creates a <xref href=\"System.Threading.Tasks.Task\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern."}],"pos":[242312,242479],"yaml":true},{"content":"The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on. This method throws any exceptions thrown by the `beginMethod`.","nodes":[{"pos":[0,189],"content":"The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on. This method throws any exceptions thrown by the `beginMethod`.","nodes":[{"content":"The <ph id=\"ph1\">`beginMethod`</ph> delegate is started on the thread that <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> is running on.","pos":[0,126],"source":"The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on."},{"content":"This method throws any exceptions thrown by the <ph id=\"ph1\">`beginMethod`</ph>.","pos":[127,189],"source":" This method throws any exceptions thrown by the `beginMethod`."}]}],"pos":[242490,242680],"yaml":true,"extradata":"MT"},{"content":"The delegate that begins the asynchronous operation.","nodes":[{"pos":[0,52],"content":"The delegate that begins the asynchronous operation.","nodes":[{"content":"The delegate that begins the asynchronous operation.","pos":[0,52]}]}],"pos":[243107,243160],"yaml":true},{"content":"The delegate that ends the asynchronous operation.","nodes":[{"pos":[0,50],"content":"The delegate that ends the asynchronous operation.","nodes":[{"content":"The delegate that ends the asynchronous operation.","pos":[0,50]}]}],"pos":[243246,243297],"yaml":true},{"content":"The first argument passed to the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,67],"content":"The first argument passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The first argument passed to the <code>beginMethod</code> delegate."}],"pos":[243349,243417],"yaml":true},{"content":"The second argument passed to the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,68],"content":"The second argument passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The second argument passed to the <code>beginMethod</code> delegate."}],"pos":[243469,243538],"yaml":true},{"content":"An object containing data to be used by the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,78],"content":"An object containing data to be used by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"An object containing data to be used by the <code>beginMethod</code> delegate."}],"pos":[243599,243678],"yaml":true},{"content":"The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task\"></xref>.","nodes":[{"pos":[0,121],"content":"The TaskCreationOptions value that controls the behavior of the created <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>.","source":"The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task\"></xref>."}],"pos":[243778,243900],"yaml":true},{"content":"The type of the second argument passed to <code>beginMethod</code> delegate.","nodes":[{"pos":[0,76],"content":"The type of the second argument passed to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The type of the second argument passed to <code>beginMethod</code> delegate."}],"pos":[243955,244032],"yaml":true},{"content":"The type of the first argument passed to the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,79],"content":"The type of the first argument passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The type of the first argument passed to the <code>beginMethod</code> delegate."}],"pos":[244067,244147],"yaml":true},{"content":"The created <xref href=\"System.Threading.Tasks.Task\"></xref> that represents the asynchronous operation.","nodes":[{"pos":[0,104],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> that represents the asynchronous operation.","source":"The created <xref href=\"System.Threading.Tasks.Task\"></xref> that represents the asynchronous operation."}],"pos":[244218,244323],"yaml":true},{"content":"The exception that is thrown when the <code>beginMethod</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>endMethod</code> argument is null.","nodes":[{"pos":[0,80],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>beginMethod</code> argument is null."},{"pos":[87,91],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[98,176],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">endMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>endMethod</code> argument is null."}],"pos":[244500,244683],"yaml":true},{"content":"The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>","nodes":[{"pos":[0,516],"content":"The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>","nodes":[{"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">creationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid TaskCreationOptions value.","pos":[0,123],"source":"The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value."},{"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">creationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid TaskCreationOptions value.","pos":[124,247],"source":" The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value."},{"content":"For more information, see the Remarks for <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"&gt;&lt;/xref&gt;</ph>","pos":[248,516],"source":" For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>"}]}],"pos":[244797,245314],"yaml":true},{"content":"Creates a <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.","nodes":[{"pos":[0,168],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.","source":"Creates a <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern."}],"pos":[247491,247660],"yaml":true},{"content":"The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on. This method throws any exceptions thrown by the `beginMethod`.","nodes":[{"pos":[0,189],"content":"The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on. This method throws any exceptions thrown by the `beginMethod`.","nodes":[{"content":"The <ph id=\"ph1\">`beginMethod`</ph> delegate is started on the thread that <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> is running on.","pos":[0,126],"source":"The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on."},{"content":"This method throws any exceptions thrown by the <ph id=\"ph1\">`beginMethod`</ph>.","pos":[127,189],"source":" This method throws any exceptions thrown by the `beginMethod`."}]}],"pos":[247671,247861],"yaml":true,"extradata":"MT"},{"content":"The delegate that begins the asynchronous operation.","nodes":[{"pos":[0,52],"content":"The delegate that begins the asynchronous operation.","nodes":[{"content":"The delegate that begins the asynchronous operation.","pos":[0,52]}]}],"pos":[248221,248274],"yaml":true},{"content":"The delegate that ends the asynchronous operation.","nodes":[{"pos":[0,50],"content":"The delegate that ends the asynchronous operation.","nodes":[{"content":"The delegate that ends the asynchronous operation.","pos":[0,50]}]}],"pos":[248366,248417],"yaml":true},{"content":"The first argument passed to the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,67],"content":"The first argument passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The first argument passed to the <code>beginMethod</code> delegate."}],"pos":[248469,248537],"yaml":true},{"content":"An object containing data to be used by the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,78],"content":"An object containing data to be used by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"An object containing data to be used by the <code>beginMethod</code> delegate."}],"pos":[248598,248677],"yaml":true},{"content":"The type of the first argument passed to the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,79],"content":"The type of the first argument passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The type of the first argument passed to the <code>beginMethod</code> delegate."}],"pos":[248732,248812],"yaml":true},{"content":"The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,96],"content":"The type of the result available through the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[248849,248946],"yaml":true},{"content":"The created <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents the asynchronous operation.","nodes":[{"pos":[0,106],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> that represents the asynchronous operation.","source":"The created <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents the asynchronous operation."}],"pos":[249019,249126],"yaml":true},{"content":"The exception that is thrown when the <code>beginMethod</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>endMethod</code> argument is null.","nodes":[{"pos":[0,80],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>beginMethod</code> argument is null."},{"pos":[87,91],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[98,176],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">endMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>endMethod</code> argument is null."}],"pos":[249303,249486],"yaml":true},{"content":"Creates a <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.","nodes":[{"pos":[0,168],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.","source":"Creates a <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern."}],"pos":[251855,252024],"yaml":true},{"content":"The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on. This method throws any exceptions thrown by the `beginMethod`.","nodes":[{"pos":[0,189],"content":"The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on. This method throws any exceptions thrown by the `beginMethod`.","nodes":[{"content":"The <ph id=\"ph1\">`beginMethod`</ph> delegate is started on the thread that <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> is running on.","pos":[0,126],"source":"The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on."},{"content":"This method throws any exceptions thrown by the <ph id=\"ph1\">`beginMethod`</ph>.","pos":[127,189],"source":" This method throws any exceptions thrown by the `beginMethod`."}]}],"pos":[252035,252225],"yaml":true,"extradata":"MT"},{"content":"The delegate that begins the asynchronous operation.","nodes":[{"pos":[0,52],"content":"The delegate that begins the asynchronous operation.","nodes":[{"content":"The delegate that begins the asynchronous operation.","pos":[0,52]}]}],"pos":[252645,252698],"yaml":true},{"content":"The delegate that ends the asynchronous operation.","nodes":[{"pos":[0,50],"content":"The delegate that ends the asynchronous operation.","nodes":[{"content":"The delegate that ends the asynchronous operation.","pos":[0,50]}]}],"pos":[252790,252841],"yaml":true},{"content":"The first argument passed to the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,67],"content":"The first argument passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The first argument passed to the <code>beginMethod</code> delegate."}],"pos":[252893,252961],"yaml":true},{"content":"An object containing data to be used by the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,78],"content":"An object containing data to be used by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"An object containing data to be used by the <code>beginMethod</code> delegate."}],"pos":[253022,253101],"yaml":true},{"content":"The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,123],"content":"The TaskCreationOptions value that controls the behavior of the created <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[253201,253325],"yaml":true},{"content":"The type of the first argument passed to the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,79],"content":"The type of the first argument passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The type of the first argument passed to the <code>beginMethod</code> delegate."}],"pos":[253380,253460],"yaml":true},{"content":"The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,96],"content":"The type of the result available through the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[253497,253594],"yaml":true},{"content":"The created <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents the asynchronous operation.","nodes":[{"pos":[0,106],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> that represents the asynchronous operation.","source":"The created <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents the asynchronous operation."}],"pos":[253667,253774],"yaml":true},{"content":"The exception that is thrown when the <code>beginMethod</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>endMethod</code> argument is null.","nodes":[{"pos":[0,80],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>beginMethod</code> argument is null."},{"pos":[87,91],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[98,176],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">endMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>endMethod</code> argument is null."}],"pos":[253951,254134],"yaml":true},{"content":"The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>","nodes":[{"pos":[0,516],"content":"The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>","nodes":[{"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">creationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid TaskCreationOptions value.","pos":[0,123],"source":"The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value."},{"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">creationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid TaskCreationOptions value.","pos":[124,247],"source":" The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value."},{"content":"For more information, see the Remarks for <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"&gt;&lt;/xref&gt;</ph>","pos":[248,516],"source":" For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>"}]}],"pos":[254248,254765],"yaml":true},{"content":"Creates a <xref href=\"System.Threading.Tasks.Task\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.","nodes":[{"pos":[0,166],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.","source":"Creates a <xref href=\"System.Threading.Tasks.Task\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern."}],"pos":[257086,257253],"yaml":true},{"content":"The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on. This method throws any exceptions thrown by the `beginMethod`.","nodes":[{"pos":[0,189],"content":"The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on. This method throws any exceptions thrown by the `beginMethod`.","nodes":[{"content":"The <ph id=\"ph1\">`beginMethod`</ph> delegate is started on the thread that <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> is running on.","pos":[0,126],"source":"The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on."},{"content":"This method throws any exceptions thrown by the <ph id=\"ph1\">`beginMethod`</ph>.","pos":[127,189],"source":" This method throws any exceptions thrown by the `beginMethod`."}]}],"pos":[257264,257454],"yaml":true,"extradata":"MT"},{"content":"The delegate that begins the asynchronous operation.","nodes":[{"pos":[0,52],"content":"The delegate that begins the asynchronous operation.","nodes":[{"content":"The delegate that begins the asynchronous operation.","pos":[0,52]}]}],"pos":[257851,257904],"yaml":true},{"content":"The delegate that ends the asynchronous operation.","nodes":[{"pos":[0,50],"content":"The delegate that ends the asynchronous operation.","nodes":[{"content":"The delegate that ends the asynchronous operation.","pos":[0,50]}]}],"pos":[257990,258041],"yaml":true},{"content":"The first argument passed to the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,67],"content":"The first argument passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The first argument passed to the <code>beginMethod</code> delegate."}],"pos":[258093,258161],"yaml":true},{"content":"An object containing data to be used by the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,78],"content":"An object containing data to be used by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"An object containing data to be used by the <code>beginMethod</code> delegate."}],"pos":[258222,258301],"yaml":true},{"content":"The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task\"></xref>.","nodes":[{"pos":[0,121],"content":"The TaskCreationOptions value that controls the behavior of the created <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>.","source":"The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task\"></xref>."}],"pos":[258401,258523],"yaml":true},{"content":"The type of the first argument passed to the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,79],"content":"The type of the first argument passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The type of the first argument passed to the <code>beginMethod</code> delegate."}],"pos":[258578,258658],"yaml":true},{"content":"The created <xref href=\"System.Threading.Tasks.Task\"></xref> that represents the asynchronous operation.","nodes":[{"pos":[0,104],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> that represents the asynchronous operation.","source":"The created <xref href=\"System.Threading.Tasks.Task\"></xref> that represents the asynchronous operation."}],"pos":[258729,258834],"yaml":true},{"content":"The exception that is thrown when the <code>beginMethod</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>endMethod</code> argument is null.","nodes":[{"pos":[0,80],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>beginMethod</code> argument is null."},{"pos":[87,91],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[98,176],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">endMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>endMethod</code> argument is null."}],"pos":[259011,259194],"yaml":true},{"content":"The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>","nodes":[{"pos":[0,516],"content":"The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>","nodes":[{"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">creationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid TaskCreationOptions value.","pos":[0,123],"source":"The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value."},{"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">creationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid TaskCreationOptions value.","pos":[124,247],"source":" The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value."},{"content":"For more information, see the Remarks for <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"&gt;&lt;/xref&gt;</ph>","pos":[248,516],"source":" For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>"}]}],"pos":[259308,259825],"yaml":true},{"content":"Creates a <xref href=\"System.Threading.Tasks.Task\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.","nodes":[{"pos":[0,166],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.","source":"Creates a <xref href=\"System.Threading.Tasks.Task\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern."}],"pos":[261954,262121],"yaml":true},{"content":"The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on. This method throws any exceptions thrown by the `beginMethod`.","nodes":[{"pos":[0,189],"content":"The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on. This method throws any exceptions thrown by the `beginMethod`.","nodes":[{"content":"The <ph id=\"ph1\">`beginMethod`</ph> delegate is started on the thread that <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> is running on.","pos":[0,126],"source":"The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on."},{"content":"This method throws any exceptions thrown by the <ph id=\"ph1\">`beginMethod`</ph>.","pos":[127,189],"source":" This method throws any exceptions thrown by the `beginMethod`."}]}],"pos":[262132,262322],"yaml":true,"extradata":"MT"},{"content":"The delegate that begins the asynchronous operation.","nodes":[{"pos":[0,52],"content":"The delegate that begins the asynchronous operation.","nodes":[{"content":"The delegate that begins the asynchronous operation.","pos":[0,52]}]}],"pos":[262659,262712],"yaml":true},{"content":"The delegate that ends the asynchronous operation.","nodes":[{"pos":[0,50],"content":"The delegate that ends the asynchronous operation.","nodes":[{"content":"The delegate that ends the asynchronous operation.","pos":[0,50]}]}],"pos":[262798,262849],"yaml":true},{"content":"The first argument passed to the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,67],"content":"The first argument passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The first argument passed to the <code>beginMethod</code> delegate."}],"pos":[262901,262969],"yaml":true},{"content":"An object containing data to be used by the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,78],"content":"An object containing data to be used by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"An object containing data to be used by the <code>beginMethod</code> delegate."}],"pos":[263030,263109],"yaml":true},{"content":"The type of the first argument passed to the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,79],"content":"The type of the first argument passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"The type of the first argument passed to the <code>beginMethod</code> delegate."}],"pos":[263164,263244],"yaml":true},{"content":"The created <xref href=\"System.Threading.Tasks.Task\"></xref> that represents the asynchronous operation.","nodes":[{"pos":[0,104],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> that represents the asynchronous operation.","source":"The created <xref href=\"System.Threading.Tasks.Task\"></xref> that represents the asynchronous operation."}],"pos":[263315,263420],"yaml":true},{"content":"The exception that is thrown when the <code>beginMethod</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>endMethod</code> argument is null.","nodes":[{"pos":[0,80],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>beginMethod</code> argument is null."},{"pos":[87,91],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[98,176],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">endMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>endMethod</code> argument is null."}],"pos":[263597,263780],"yaml":true},{"content":"Creates a <xref href=\"System.Threading.Tasks.Task`1\"></xref> that executes an end method function when a specified <xref href=\"System.IAsyncResult\"></xref> completes.","nodes":[{"pos":[0,166],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> that executes an end method function when a specified <ph id=\"ph2\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> completes.","source":"Creates a <xref href=\"System.Threading.Tasks.Task`1\"></xref> that executes an end method function when a specified <xref href=\"System.IAsyncResult\"></xref> completes."}],"pos":[265933,266100],"yaml":true},{"content":"> [!TIP]\n>  The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter. If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.","nodes":[{"pos":[2,290],"content":"[!TIP]\n The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter. If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.","leadings":["","> "],"nodes":[{"content":" The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter. If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.","pos":[7,286],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> overloads that take an <ph id=\"ph2\">`asyncResult`</ph> parameter are not as efficient as the overloads that take a <ph id=\"ph3\">`beginMethod`</ph> parameter.","pos":[1,181],"source":" The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter."},{"content":"If performance is an issue, use the overloads that provide the <ph id=\"ph1\">`beginMethod`</ph><ph id=\"ph2\">/</ph><ph id=\"ph3\">`endMethod`</ph> pattern.","pos":[182,279],"source":" If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern."}]}]}],"pos":[266111,266414],"yaml":true,"extradata":"MT"},{"content":"The IAsyncResult whose completion should trigger the processing of the <code>endMethod</code>.","nodes":[{"pos":[0,94],"content":"The IAsyncResult whose completion should trigger the processing of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">endMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The IAsyncResult whose completion should trigger the processing of the <code>endMethod</code>."}],"pos":[266763,266858],"yaml":true},{"content":"The function delegate that processes the completed <code>asyncResult</code>.","nodes":[{"pos":[0,76],"content":"The function delegate that processes the completed <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">asyncResult</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The function delegate that processes the completed <code>asyncResult</code>."}],"pos":[266950,267027],"yaml":true},{"content":"The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,123],"content":"The TaskCreationOptions value that controls the behavior of the created <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[267127,267251],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> that is used to schedule the task that executes the end method.","nodes":[{"pos":[0,125],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskScheduler\"&gt;&lt;/xref&gt;</ph> that is used to schedule the task that executes the end method.","source":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> that is used to schedule the task that executes the end method."}],"pos":[267339,267465],"yaml":true},{"content":"The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,96],"content":"The type of the result available through the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[267522,267619],"yaml":true},{"content":"A <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents the asynchronous operation.","nodes":[{"pos":[0,96],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> that represents the asynchronous operation.","source":"A <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents the asynchronous operation."}],"pos":[267692,267789],"yaml":true},{"content":"The exception that is thrown when the <code>asyncResult</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>endMethod</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>scheduler</code> argument is null.","nodes":[{"pos":[0,80],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">asyncResult</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>asyncResult</code> argument is null."},{"pos":[87,91],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[98,176],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">endMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>endMethod</code> argument is null."},{"pos":[183,187],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[194,272],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">scheduler</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>scheduler</code> argument is null."}],"pos":[267966,268249],"yaml":true},{"content":"The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>","nodes":[{"pos":[0,516],"content":"The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>","nodes":[{"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">creationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid TaskCreationOptions value.","pos":[0,123],"source":"The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value."},{"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">creationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid TaskCreationOptions value.","pos":[124,247],"source":" The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value."},{"content":"For more information, see the Remarks for <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"&gt;&lt;/xref&gt;</ph>","pos":[248,516],"source":" For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>"}]}],"pos":[268363,268880],"yaml":true},{"content":"Creates a <xref href=\"System.Threading.Tasks.Task`1\"></xref> that executes an end method function when a specified <xref href=\"System.IAsyncResult\"></xref> completes.","nodes":[{"pos":[0,166],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> that executes an end method function when a specified <ph id=\"ph2\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> completes.","source":"Creates a <xref href=\"System.Threading.Tasks.Task`1\"></xref> that executes an end method function when a specified <xref href=\"System.IAsyncResult\"></xref> completes."}],"pos":[270877,271044],"yaml":true},{"content":"> [!TIP]\n>  The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter. If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.","nodes":[{"pos":[2,290],"content":"[!TIP]\n The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter. If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.","leadings":["","> "],"nodes":[{"content":" The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter. If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.","pos":[7,286],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> overloads that take an <ph id=\"ph2\">`asyncResult`</ph> parameter are not as efficient as the overloads that take a <ph id=\"ph3\">`beginMethod`</ph> parameter.","pos":[1,181],"source":" The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter."},{"content":"If performance is an issue, use the overloads that provide the <ph id=\"ph1\">`beginMethod`</ph><ph id=\"ph2\">/</ph><ph id=\"ph3\">`endMethod`</ph> pattern.","pos":[182,279],"source":" If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern."}]}]}],"pos":[271055,271358],"yaml":true,"extradata":"MT"},{"content":"The IAsyncResult whose completion should trigger the processing of the <code>endMethod</code>.","nodes":[{"pos":[0,94],"content":"The IAsyncResult whose completion should trigger the processing of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">endMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The IAsyncResult whose completion should trigger the processing of the <code>endMethod</code>."}],"pos":[271659,271754],"yaml":true},{"content":"The function delegate that processes the completed <code>asyncResult</code>.","nodes":[{"pos":[0,76],"content":"The function delegate that processes the completed <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">asyncResult</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The function delegate that processes the completed <code>asyncResult</code>."}],"pos":[271846,271923],"yaml":true},{"content":"The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,123],"content":"The TaskCreationOptions value that controls the behavior of the created <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[272023,272147],"yaml":true},{"content":"The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,96],"content":"The type of the result available through the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[272204,272301],"yaml":true},{"content":"A <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents the asynchronous operation.","nodes":[{"pos":[0,96],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> that represents the asynchronous operation.","source":"A <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents the asynchronous operation."}],"pos":[272374,272471],"yaml":true},{"content":"The exception that is thrown when the <code>asyncResult</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>endMethod</code> argument is null.","nodes":[{"pos":[0,80],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">asyncResult</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>asyncResult</code> argument is null."},{"pos":[87,91],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[98,176],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">endMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>endMethod</code> argument is null."}],"pos":[272648,272831],"yaml":true},{"content":"The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>","nodes":[{"pos":[0,516],"content":"The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>","nodes":[{"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">creationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid TaskCreationOptions value.","pos":[0,123],"source":"The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value."},{"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">creationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid TaskCreationOptions value.","pos":[124,247],"source":" The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value."},{"content":"For more information, see the Remarks for <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"&gt;&lt;/xref&gt;</ph>","pos":[248,516],"source":" For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>"}]}],"pos":[272945,273462],"yaml":true},{"content":"Creates a <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.","nodes":[{"pos":[0,168],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.","source":"Creates a <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern."}],"pos":[275558,275727],"yaml":true},{"content":"This method throws any exceptions thrown by the `beginMethod`.","nodes":[{"pos":[0,62],"content":"This method throws any exceptions thrown by the <ph id=\"ph1\">`beginMethod`</ph>.","source":"This method throws any exceptions thrown by the `beginMethod`."}],"pos":[275738,275801],"yaml":true,"extradata":"MT"},{"content":"The delegate that begins the asynchronous operation.","nodes":[{"pos":[0,52],"content":"The delegate that begins the asynchronous operation.","nodes":[{"content":"The delegate that begins the asynchronous operation.","pos":[0,52]}]}],"pos":[276131,276184],"yaml":true},{"content":"The delegate that ends the asynchronous operation.","nodes":[{"pos":[0,50],"content":"The delegate that ends the asynchronous operation.","nodes":[{"content":"The delegate that ends the asynchronous operation.","pos":[0,50]}]}],"pos":[276276,276327],"yaml":true},{"content":"An object containing data to be used by the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,78],"content":"An object containing data to be used by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"An object containing data to be used by the <code>beginMethod</code> delegate."}],"pos":[276388,276467],"yaml":true},{"content":"The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,96],"content":"The type of the result available through the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[276524,276621],"yaml":true},{"content":"The created <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents the asynchronous operation.","nodes":[{"pos":[0,106],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> that represents the asynchronous operation.","source":"The created <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents the asynchronous operation."}],"pos":[276694,276801],"yaml":true},{"content":"The exception that is thrown when the <code>beginMethod</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>endMethod</code> argument is null.","nodes":[{"pos":[0,80],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>beginMethod</code> argument is null."},{"pos":[87,91],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[98,176],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">endMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>endMethod</code> argument is null."}],"pos":[276978,277161],"yaml":true},{"content":"Creates a <xref href=\"System.Threading.Tasks.Task`1\"></xref> that executes an end method function when a specified <xref href=\"System.IAsyncResult\"></xref> completes.","nodes":[{"pos":[0,166],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> that executes an end method function when a specified <ph id=\"ph2\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> completes.","source":"Creates a <xref href=\"System.Threading.Tasks.Task`1\"></xref> that executes an end method function when a specified <xref href=\"System.IAsyncResult\"></xref> completes."}],"pos":[278966,279133],"yaml":true},{"content":"> [!TIP]\n>  The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter. If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.","nodes":[{"pos":[2,290],"content":"[!TIP]\n The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter. If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.","leadings":["","> "],"nodes":[{"content":" The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter. If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.","pos":[7,286],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> overloads that take an <ph id=\"ph2\">`asyncResult`</ph> parameter are not as efficient as the overloads that take a <ph id=\"ph3\">`beginMethod`</ph> parameter.","pos":[1,181],"source":" The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter."},{"content":"If performance is an issue, use the overloads that provide the <ph id=\"ph1\">`beginMethod`</ph><ph id=\"ph2\">/</ph><ph id=\"ph3\">`endMethod`</ph> pattern.","pos":[182,279],"source":" If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern."}]}]}],"pos":[279144,279447],"yaml":true,"extradata":"MT"},{"content":"The IAsyncResult whose completion should trigger the processing of the <code>endMethod</code>.","nodes":[{"pos":[0,94],"content":"The IAsyncResult whose completion should trigger the processing of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">endMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The IAsyncResult whose completion should trigger the processing of the <code>endMethod</code>."}],"pos":[279688,279783],"yaml":true},{"content":"The function delegate that processes the completed <code>asyncResult</code>.","nodes":[{"pos":[0,76],"content":"The function delegate that processes the completed <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">asyncResult</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The function delegate that processes the completed <code>asyncResult</code>."}],"pos":[279875,279952],"yaml":true},{"content":"The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,96],"content":"The type of the result available through the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[280009,280106],"yaml":true},{"content":"A <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents the asynchronous operation.","nodes":[{"pos":[0,96],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> that represents the asynchronous operation.","source":"A <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents the asynchronous operation."}],"pos":[280179,280276],"yaml":true},{"content":"The exception that is thrown when the <code>asyncResult</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>endMethod</code> argument is null.","nodes":[{"pos":[0,80],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">asyncResult</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>asyncResult</code> argument is null."},{"pos":[87,91],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[98,176],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">endMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>endMethod</code> argument is null."}],"pos":[280453,280636],"yaml":true},{"content":"Creates a <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.","nodes":[{"pos":[0,168],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.","source":"Creates a <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern."}],"pos":[282924,283093],"yaml":true},{"content":"This method throws any exceptions thrown by the `beginMethod`.","nodes":[{"pos":[0,62],"content":"This method throws any exceptions thrown by the <ph id=\"ph1\">`beginMethod`</ph>.","source":"This method throws any exceptions thrown by the `beginMethod`."}],"pos":[283104,283167],"yaml":true,"extradata":"MT"},{"content":"The delegate that begins the asynchronous operation.","nodes":[{"pos":[0,52],"content":"The delegate that begins the asynchronous operation.","nodes":[{"content":"The delegate that begins the asynchronous operation.","pos":[0,52]}]}],"pos":[283557,283610],"yaml":true},{"content":"The delegate that ends the asynchronous operation.","nodes":[{"pos":[0,50],"content":"The delegate that ends the asynchronous operation.","nodes":[{"content":"The delegate that ends the asynchronous operation.","pos":[0,50]}]}],"pos":[283702,283753],"yaml":true},{"content":"An object containing data to be used by the <code>beginMethod</code> delegate.","nodes":[{"pos":[0,78],"content":"An object containing data to be used by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"An object containing data to be used by the <code>beginMethod</code> delegate."}],"pos":[283814,283893],"yaml":true},{"content":"The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,123],"content":"The TaskCreationOptions value that controls the behavior of the created <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[283993,284117],"yaml":true},{"content":"The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,96],"content":"The type of the result available through the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[284174,284271],"yaml":true},{"content":"The created <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents the asynchronous operation.","nodes":[{"pos":[0,106],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> that represents the asynchronous operation.","source":"The created <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents the asynchronous operation."}],"pos":[284344,284451],"yaml":true},{"content":"The exception that is thrown when the <code>beginMethod</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>endMethod</code> argument is null.","nodes":[{"pos":[0,80],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>beginMethod</code> argument is null."},{"pos":[87,91],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[98,176],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">endMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>endMethod</code> argument is null."}],"pos":[284628,284811],"yaml":true},{"content":"The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>","nodes":[{"pos":[0,516],"content":"The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>","nodes":[{"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">creationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid TaskCreationOptions value.","pos":[0,123],"source":"The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value."},{"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">creationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid TaskCreationOptions value.","pos":[124,247],"source":" The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value."},{"content":"For more information, see the Remarks for <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"&gt;&lt;/xref&gt;</ph>","pos":[248,516],"source":" For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>"}]}],"pos":[284925,285442],"yaml":true},{"content":"Gets the default task scheduler for this task factory.","nodes":[{"pos":[0,54],"content":"Gets the default task scheduler for this task factory.","nodes":[{"content":"Gets the default task scheduler for this task factory.","pos":[0,54]}]}],"pos":[286913,286968],"yaml":true},{"content":"The property value is used to schedule all tasks, unless another scheduler is explicitly specified during calls to this factory's methods.  \n  \n If this property value is `null`, the value of the <xref:System.Threading.Tasks.TaskScheduler.Current%2A> property is used.","nodes":[{"pos":[0,138],"content":"The property value is used to schedule all tasks, unless another scheduler is explicitly specified during calls to this factory's methods.","nodes":[{"content":"The property value is used to schedule all tasks, unless another scheduler is explicitly specified during calls to this factory's methods.","pos":[0,138]}]},{"pos":[145,268],"content":"If this property value is <ph id=\"ph1\">`null`</ph>, the value of the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskScheduler.Current%2A&gt;</ph> property is used.","source":"If this property value is `null`, the value of the <xref:System.Threading.Tasks.TaskScheduler.Current%2A> property is used."}],"pos":[286979,287252],"yaml":true,"extradata":"MT"},{"content":"The default task scheduler for this task factory.","nodes":[{"pos":[0,49],"content":"The default task scheduler for this task factory.","nodes":[{"content":"The default task scheduler for this task factory.","pos":[0,49]}]}],"pos":[287418,287468],"yaml":true},{"content":"Creates and starts a <xref href=\"System.Threading.Tasks.Task\"></xref>.","nodes":[{"pos":[0,70],"content":"Creates and starts a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>.","source":"Creates and starts a <xref href=\"System.Threading.Tasks.Task\"></xref>."}],"pos":[289720,289791],"yaml":true},{"content":"Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.  \n  \n Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters. For more information and code examples, see [Task.Run vs Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.","nodes":[{"pos":[0,183],"content":"Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.","nodes":[{"content":"Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> to schedule it for execution.","pos":[0,183],"source":"Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution."}]},{"pos":[190,648],"content":"Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters. For more information and code examples, see [Task.Run vs Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.","nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, you can use the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Run%2A&gt;</ph> method with an <ph id=\"ph3\">&lt;xref:System.Action&gt;</ph> object as  a quick way to call <ph id=\"ph4\">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> with default parameters.","pos":[0,268],"source":"Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters."},{"content":"For more information and code examples, see <bpt id=\"p1\">[</bpt>Task.Run vs Task.Factory.StartNew<ept id=\"p1\">](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx)</ept> in the Parallel Programming with .NET blog.","pos":[269,458],"source":" For more information and code examples, see [Task.Run vs Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog."}]}],"pos":[289802,290455],"yaml":true,"extradata":"MT"},{"content":"The action delegate to execute asynchronously.","nodes":[{"pos":[0,46],"content":"The action delegate to execute asynchronously.","nodes":[{"content":"The action delegate to execute asynchronously.","pos":[0,46]}]}],"pos":[290816,290863],"yaml":true},{"content":"An object containing data to be used by the <code>action</code> delegate.","nodes":[{"pos":[0,73],"content":"An object containing data to be used by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">action</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"An object containing data to be used by the <code>action</code> delegate."}],"pos":[290924,290998],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> that will be assigned to the new task.","nodes":[{"pos":[0,116],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"&gt;&lt;/xref&gt;</ph> that will be assigned to the new task.","source":"The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> that will be assigned to the new task."}],"pos":[291092,291209],"yaml":true},{"content":"A TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task\"></xref>","nodes":[{"pos":[0,118],"content":"A TaskCreationOptions value that controls the behavior of the created <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>","source":"A TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task\"></xref>"}],"pos":[291309,291428],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> that is used to schedule the created <xref href=\"System.Threading.Tasks.Task\"></xref>.","nodes":[{"pos":[0,148],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskScheduler\"&gt;&lt;/xref&gt;</ph> that is used to schedule the created <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> that is used to schedule the created <xref href=\"System.Threading.Tasks.Task\"></xref>."}],"pos":[291516,291665],"yaml":true},{"content":"The started <xref href=\"System.Threading.Tasks.Task\"></xref>.","nodes":[{"pos":[0,61],"content":"The started <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>.","source":"The started <xref href=\"System.Threading.Tasks.Task\"></xref>."}],"pos":[291736,291798],"yaml":true},{"content":"The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed.","nodes":[{"pos":[0,95],"content":"The provided <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> has already been disposed.","source":"The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed."}],"pos":[291975,292071],"yaml":true},{"content":"The exception that is thrown when the <code>action</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>scheduler</code> argument is null.","nodes":[{"pos":[0,75],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">action</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>action</code> argument is null."},{"pos":[82,86],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[93,171],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">scheduler</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>scheduler</code> argument is null."}],"pos":[292173,292351],"yaml":true},{"content":"The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>","nodes":[{"pos":[0,516],"content":"The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>","nodes":[{"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">creationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid TaskCreationOptions value.","pos":[0,123],"source":"The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value."},{"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">creationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid TaskCreationOptions value.","pos":[124,247],"source":" The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value."},{"content":"For more information, see the Remarks for <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"&gt;&lt;/xref&gt;</ph>","pos":[248,516],"source":" For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>"}]}],"pos":[292465,292982],"yaml":true},{"content":"Creates and starts a <xref href=\"System.Threading.Tasks.Task\"></xref>.","nodes":[{"pos":[0,70],"content":"Creates and starts a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>.","source":"Creates and starts a <xref href=\"System.Threading.Tasks.Task\"></xref>."}],"pos":[295024,295095],"yaml":true},{"content":"Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.  \n  \n Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters. For more information and code examples, see [Task.Run vs Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.","nodes":[{"pos":[0,183],"content":"Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.","nodes":[{"content":"Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> to schedule it for execution.","pos":[0,183],"source":"Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution."}]},{"pos":[190,648],"content":"Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters. For more information and code examples, see [Task.Run vs Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.","nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, you can use the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Run%2A&gt;</ph> method with an <ph id=\"ph3\">&lt;xref:System.Action&gt;</ph> object as  a quick way to call <ph id=\"ph4\">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> with default parameters.","pos":[0,268],"source":"Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters."},{"content":"For more information and code examples, see <bpt id=\"p1\">[</bpt>Task.Run vs Task.Factory.StartNew<ept id=\"p1\">](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx)</ept> in the Parallel Programming with .NET blog.","pos":[269,458],"source":" For more information and code examples, see [Task.Run vs Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog."}]}],"pos":[295106,295759],"yaml":true,"extradata":"MT"},{"content":"The action delegate to execute asynchronously.","nodes":[{"pos":[0,46],"content":"The action delegate to execute asynchronously.","nodes":[{"content":"The action delegate to execute asynchronously.","pos":[0,46]}]}],"pos":[296083,296130],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> that will be assigned to the new <xref href=\"System.Threading.Tasks.Task\"></xref>","nodes":[{"pos":[0,159],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"&gt;&lt;/xref&gt;</ph> that will be assigned to the new <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>","source":"The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> that will be assigned to the new <xref href=\"System.Threading.Tasks.Task\"></xref>"}],"pos":[296224,296384],"yaml":true},{"content":"A TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task\"></xref>","nodes":[{"pos":[0,118],"content":"A TaskCreationOptions value that controls the behavior of the created <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>","source":"A TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task\"></xref>"}],"pos":[296484,296603],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> that is used to schedule the created <xref href=\"System.Threading.Tasks.Task\"></xref>.","nodes":[{"pos":[0,148],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskScheduler\"&gt;&lt;/xref&gt;</ph> that is used to schedule the created <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> that is used to schedule the created <xref href=\"System.Threading.Tasks.Task\"></xref>."}],"pos":[296691,296840],"yaml":true},{"content":"The started <xref href=\"System.Threading.Tasks.Task\"></xref>.","nodes":[{"pos":[0,61],"content":"The started <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>.","source":"The started <xref href=\"System.Threading.Tasks.Task\"></xref>."}],"pos":[296911,296973],"yaml":true},{"content":"The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed.","nodes":[{"pos":[0,95],"content":"The provided <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> has already been disposed.","source":"The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed."}],"pos":[297150,297246],"yaml":true},{"content":"The exception that is thrown when the <code>action</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>scheduler</code> argument is null.","nodes":[{"pos":[0,75],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">action</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>action</code> argument is null."},{"pos":[82,86],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[93,171],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">scheduler</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>scheduler</code> argument is null."}],"pos":[297348,297526],"yaml":true},{"content":"The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>","nodes":[{"pos":[0,516],"content":"The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>","nodes":[{"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">creationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid TaskCreationOptions value.","pos":[0,123],"source":"The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value."},{"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">creationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid TaskCreationOptions value.","pos":[124,247],"source":" The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value."},{"content":"For more information, see the Remarks for <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"&gt;&lt;/xref&gt;</ph>","pos":[248,516],"source":" For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>"}]}],"pos":[297640,298157],"yaml":true},{"content":"Creates and starts a <xref href=\"System.Threading.Tasks.Task\"></xref>.","nodes":[{"pos":[0,70],"content":"Creates and starts a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>.","source":"Creates and starts a <xref href=\"System.Threading.Tasks.Task\"></xref>."}],"pos":[300016,300087],"yaml":true},{"content":"Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.  \n  \n Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters. For more information and code examples, see [Task.Run vs Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.","nodes":[{"pos":[0,183],"content":"Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.","nodes":[{"content":"Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> to schedule it for execution.","pos":[0,183],"source":"Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution."}]},{"pos":[190,648],"content":"Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters. For more information and code examples, see [Task.Run vs Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.","nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, you can use the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Run%2A&gt;</ph> method with an <ph id=\"ph3\">&lt;xref:System.Action&gt;</ph> object as  a quick way to call <ph id=\"ph4\">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> with default parameters.","pos":[0,268],"source":"Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters."},{"content":"For more information and code examples, see <bpt id=\"p1\">[</bpt>Task.Run vs Task.Factory.StartNew<ept id=\"p1\">](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx)</ept> in the Parallel Programming with .NET blog.","pos":[269,458],"source":" For more information and code examples, see [Task.Run vs Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog."}]}],"pos":[300098,300751],"yaml":true,"extradata":"MT"},{"content":"The action delegate to execute asynchronously.","nodes":[{"pos":[0,46],"content":"The action delegate to execute asynchronously.","nodes":[{"content":"The action delegate to execute asynchronously.","pos":[0,46]}]}],"pos":[301010,301057],"yaml":true},{"content":"An object containing data to be used by the <code>action</code> delegate.","nodes":[{"pos":[0,73],"content":"An object containing data to be used by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">action</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"An object containing data to be used by the <code>action</code> delegate."}],"pos":[301118,301192],"yaml":true},{"content":"A TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task\"></xref>","nodes":[{"pos":[0,118],"content":"A TaskCreationOptions value that controls the behavior of the created <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>","source":"A TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task\"></xref>"}],"pos":[301292,301411],"yaml":true},{"content":"The started <xref href=\"System.Threading.Tasks.Task\"></xref>.","nodes":[{"pos":[0,61],"content":"The started <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>.","source":"The started <xref href=\"System.Threading.Tasks.Task\"></xref>."}],"pos":[301482,301544],"yaml":true},{"content":"The exception that is thrown when the <code>action</code> argument is null.","nodes":[{"pos":[0,75],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">action</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>action</code> argument is null."}],"pos":[301717,301793],"yaml":true},{"content":"The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value.","nodes":[{"pos":[0,123],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">creationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid TaskCreationOptions value.","source":"The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value."}],"pos":[301907,302031],"yaml":true},{"content":"Creates and starts a <xref href=\"System.Threading.Tasks.Task\"></xref>.","nodes":[{"pos":[0,70],"content":"Creates and starts a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>.","source":"Creates and starts a <xref href=\"System.Threading.Tasks.Task\"></xref>."}],"pos":[303860,303931],"yaml":true},{"content":"Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.  \n  \n Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters. For more information and code examples, see [Task.Run vs Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.","nodes":[{"pos":[0,183],"content":"Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.","nodes":[{"content":"Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> to schedule it for execution.","pos":[0,183],"source":"Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution."}]},{"pos":[190,648],"content":"Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters. For more information and code examples, see [Task.Run vs Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.","nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, you can use the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Run%2A&gt;</ph> method with an <ph id=\"ph3\">&lt;xref:System.Action&gt;</ph> object as  a quick way to call <ph id=\"ph4\">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> with default parameters.","pos":[0,268],"source":"Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters."},{"content":"For more information and code examples, see <bpt id=\"p1\">[</bpt>Task.Run vs Task.Factory.StartNew<ept id=\"p1\">](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx)</ept> in the Parallel Programming with .NET blog.","pos":[269,458],"source":" For more information and code examples, see [Task.Run vs Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog."}]}],"pos":[303942,304595],"yaml":true,"extradata":"MT"},{"content":"The action delegate to execute asynchronously.","nodes":[{"pos":[0,46],"content":"The action delegate to execute asynchronously.","nodes":[{"content":"The action delegate to execute asynchronously.","pos":[0,46]}]}],"pos":[306185,306232],"yaml":true},{"content":"An object containing data to be used by the <code>action</code> delegate.","nodes":[{"pos":[0,73],"content":"An object containing data to be used by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">action</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"An object containing data to be used by the <code>action</code> delegate."}],"pos":[306293,306367],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> that will be assigned to the new <xref href=\"System.Threading.Tasks.Task\"></xref>","nodes":[{"pos":[0,159],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"&gt;&lt;/xref&gt;</ph> that will be assigned to the new <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>","source":"The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> that will be assigned to the new <xref href=\"System.Threading.Tasks.Task\"></xref>"}],"pos":[306461,306621],"yaml":true},{"content":"The started <xref href=\"System.Threading.Tasks.Task\"></xref>.","nodes":[{"pos":[0,61],"content":"The started <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>.","source":"The started <xref href=\"System.Threading.Tasks.Task\"></xref>."}],"pos":[306692,306754],"yaml":true},{"content":"The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed.","nodes":[{"pos":[0,95],"content":"The provided <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> has already been disposed.","source":"The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed."}],"pos":[306931,307027],"yaml":true},{"content":"The exception that is thrown when the <code>action</code> argument is null.","nodes":[{"pos":[0,75],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">action</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>action</code> argument is null."}],"pos":[307129,307205],"yaml":true},{"content":"Creates and starts a <xref href=\"System.Threading.Tasks.Task\"></xref>.","nodes":[{"pos":[0,70],"content":"Creates and starts a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>.","source":"Creates and starts a <xref href=\"System.Threading.Tasks.Task\"></xref>."}],"pos":[308899,308970],"yaml":true},{"content":"Calling `StartNew` is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.  \n  \n Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> method as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29> with default parameters. Note, however, that there is a difference in behavior between the two methods regarding : <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> by default does not allow child tasks started with the <xref:System.Threading.Tasks.TaskCreationOptions?displayProperty=fullName> option to attach to the current <xref:System.Threading.Tasks.Task> instance, whereas <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29> does. For more information and code examples, see [Task.Run vs Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.","nodes":[{"pos":[0,185],"content":"Calling <ph id=\"ph1\">`StartNew`</ph> is functionally equivalent to creating a Task using one of its constructors and then calling <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> to schedule it for execution.","source":"Calling `StartNew` is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution."},{"pos":[192,1283],"content":"Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> method as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29> with default parameters. Note, however, that there is a difference in behavior between the two methods regarding : <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> by default does not allow child tasks started with the <xref:System.Threading.Tasks.TaskCreationOptions?displayProperty=fullName> option to attach to the current <xref:System.Threading.Tasks.Task> instance, whereas <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29> does. For more information and code examples, see [Task.Run vs Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.","nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, you can use the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=fullName&gt;</ph> method as  a quick way to call <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29&gt;</ph> with default parameters.","pos":[0,363],"source":"Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> method as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29> with default parameters."},{"content":"Note, however, that there is a difference in behavior between the two methods regarding : <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=fullName&gt;</ph> by default does not allow child tasks started with the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskCreationOptions?displayProperty=fullName&gt;</ph> option to attach to the current <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> instance, whereas <ph id=\"ph4\">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29&gt;</ph> does.","pos":[364,901],"source":" Note, however, that there is a difference in behavior between the two methods regarding : <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> by default does not allow child tasks started with the <xref:System.Threading.Tasks.TaskCreationOptions?displayProperty=fullName> option to attach to the current <xref:System.Threading.Tasks.Task> instance, whereas <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29> does."},{"content":"For more information and code examples, see <bpt id=\"p1\">[</bpt>Task.Run vs Task.Factory.StartNew<ept id=\"p1\">](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx)</ept> in the Parallel Programming with .NET blog.","pos":[902,1091],"source":" For more information and code examples, see [Task.Run vs Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog."}]}],"pos":[308981,310269],"yaml":true,"extradata":"MT"},{"content":"The action delegate to execute asynchronously.","nodes":[{"pos":[0,46],"content":"The action delegate to execute asynchronously.","nodes":[{"content":"The action delegate to execute asynchronously.","pos":[0,46]}]}],"pos":[311926,311973],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> that will be assigned to the new task.","nodes":[{"pos":[0,116],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"&gt;&lt;/xref&gt;</ph> that will be assigned to the new task.","source":"The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> that will be assigned to the new task."}],"pos":[312067,312184],"yaml":true},{"content":"The started <xref href=\"System.Threading.Tasks.Task\"></xref>.","nodes":[{"pos":[0,61],"content":"The started <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>.","source":"The started <xref href=\"System.Threading.Tasks.Task\"></xref>."}],"pos":[312255,312317],"yaml":true},{"content":"The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed.","nodes":[{"pos":[0,95],"content":"The provided <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> has already been disposed.","source":"The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed."}],"pos":[312494,312590],"yaml":true},{"content":"The exception that is thrown when the <code>action</code> argument is null.","nodes":[{"pos":[0,75],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">action</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>action</code> argument is null."}],"pos":[312692,312768],"yaml":true},{"content":"Creates and starts a <xref href=\"System.Threading.Tasks.Task\"></xref>.","nodes":[{"pos":[0,70],"content":"Creates and starts a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>.","source":"Creates and starts a <xref href=\"System.Threading.Tasks.Task\"></xref>."}],"pos":[314492,314563],"yaml":true},{"content":"Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.  \n  \n Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters. For more information and code examples, see [Task.Run vs Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.","nodes":[{"pos":[0,183],"content":"Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.","nodes":[{"content":"Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> to schedule it for execution.","pos":[0,183],"source":"Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution."}]},{"pos":[190,648],"content":"Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters. For more information and code examples, see [Task.Run vs Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.","nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, you can use the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Run%2A&gt;</ph> method with an <ph id=\"ph3\">&lt;xref:System.Action&gt;</ph> object as  a quick way to call <ph id=\"ph4\">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> with default parameters.","pos":[0,268],"source":"Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters."},{"content":"For more information and code examples, see <bpt id=\"p1\">[</bpt>Task.Run vs Task.Factory.StartNew<ept id=\"p1\">](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx)</ept> in the Parallel Programming with .NET blog.","pos":[269,458],"source":" For more information and code examples, see [Task.Run vs Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog."}]}],"pos":[314574,315227],"yaml":true,"extradata":"MT"},{"content":"The action delegate to execute asynchronously.","nodes":[{"pos":[0,46],"content":"The action delegate to execute asynchronously.","nodes":[{"content":"The action delegate to execute asynchronously.","pos":[0,46]}]}],"pos":[315449,315496],"yaml":true},{"content":"A TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task\"></xref>","nodes":[{"pos":[0,118],"content":"A TaskCreationOptions value that controls the behavior of the created <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>","source":"A TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task\"></xref>"}],"pos":[315596,315715],"yaml":true},{"content":"The started <xref href=\"System.Threading.Tasks.Task\"></xref>.","nodes":[{"pos":[0,61],"content":"The started <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>.","source":"The started <xref href=\"System.Threading.Tasks.Task\"></xref>."}],"pos":[315786,315848],"yaml":true},{"content":"The exception that is thrown when the <code>action</code> argument is null.","nodes":[{"pos":[0,75],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">action</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>action</code> argument is null."}],"pos":[316021,316097],"yaml":true},{"content":"The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value.","nodes":[{"pos":[0,123],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">creationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid TaskCreationOptions value.","source":"The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value."}],"pos":[316211,316335],"yaml":true},{"content":"Creates and starts a task.","nodes":[{"pos":[0,26],"content":"Creates and starts a task.","nodes":[{"content":"Creates and starts a task.","pos":[0,26]}]}],"pos":[317867,317894],"yaml":true},{"content":"Calling <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> is functionally equivalent to creating a task by using one of its constructors, and then calling the <xref:System.Threading.Tasks.Task.Start%2A?displayProperty=fullName> method to schedule the task for execution.  \n  \n Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=fullName> method as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29> with default parameters. Note, however, that there is a difference in behavior between the two methods regarding : <xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=fullName> by default does not allow child tasks started with the <xref:System.Threading.Tasks.TaskCreationOptions?displayProperty=fullName> option to attach to the current <xref:System.Threading.Tasks.Task> instance, whereas <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29> does. For more information and code examples, see [Task.Run vs Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.","nodes":[{"pos":[0,274],"content":"Calling <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> is functionally equivalent to creating a task by using one of its constructors, and then calling the <xref:System.Threading.Tasks.Task.Start%2A?displayProperty=fullName> method to schedule the task for execution.","nodes":[{"content":"Calling <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> is functionally equivalent to creating a task by using one of its constructors, and then calling the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Start%2A?displayProperty=fullName&gt;</ph> method to schedule the task for execution.","pos":[0,274],"source":"Calling <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> is functionally equivalent to creating a task by using one of its constructors, and then calling the <xref:System.Threading.Tasks.Task.Start%2A?displayProperty=fullName> method to schedule the task for execution."}]},{"pos":[281,1224],"content":"Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=fullName> method as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29> with default parameters. Note, however, that there is a difference in behavior between the two methods regarding : <xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=fullName> by default does not allow child tasks started with the <xref:System.Threading.Tasks.TaskCreationOptions?displayProperty=fullName> option to attach to the current <xref:System.Threading.Tasks.Task> instance, whereas <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29> does. For more information and code examples, see [Task.Run vs Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.","nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, you can use the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=fullName&gt;</ph> method as  a quick way to call <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29&gt;</ph> with default parameters.","pos":[0,289],"source":"Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=fullName> method as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29> with default parameters."},{"content":"Note, however, that there is a difference in behavior between the two methods regarding : <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=fullName&gt;</ph> by default does not allow child tasks started with the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskCreationOptions?displayProperty=fullName&gt;</ph> option to attach to the current <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> instance, whereas <ph id=\"ph4\">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29&gt;</ph> does.","pos":[290,753],"source":" Note, however, that there is a difference in behavior between the two methods regarding : <xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=fullName> by default does not allow child tasks started with the <xref:System.Threading.Tasks.TaskCreationOptions?displayProperty=fullName> option to attach to the current <xref:System.Threading.Tasks.Task> instance, whereas <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29> does."},{"content":"For more information and code examples, see <bpt id=\"p1\">[</bpt>Task.Run vs Task.Factory.StartNew<ept id=\"p1\">](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx)</ept> in the Parallel Programming with .NET blog.","pos":[754,943],"source":" For more information and code examples, see [Task.Run vs Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog."}]}],"pos":[317905,319134],"yaml":true,"extradata":"MT"},{"content":"The action delegate to execute asynchronously.","nodes":[{"pos":[0,46],"content":"The action delegate to execute asynchronously.","nodes":[{"content":"The action delegate to execute asynchronously.","pos":[0,46]}]}],"pos":[320017,320064],"yaml":true},{"content":"The started task.","nodes":[{"pos":[0,17],"content":"The started task.","nodes":[{"content":"The started task.","pos":[0,17]}]}],"pos":[320135,320153],"yaml":true},{"content":"The <code>action</code> argument is null.","nodes":[{"pos":[0,41],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">action</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>action</code> argument is null."}],"pos":[320326,320368],"yaml":true},{"content":"Creates and starts a <xref href=\"System.Threading.Tasks.Task\"></xref>.","nodes":[{"pos":[0,70],"content":"Creates and starts a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>.","source":"Creates and starts a <xref href=\"System.Threading.Tasks.Task\"></xref>."}],"pos":[322035,322106],"yaml":true},{"content":"Calling <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> is functionally equivalent to creating a <xref:System.Threading.Tasks.Task> using one of its constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.  \n  \n Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters. For more information and code examples, see [Task.Run vs Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.","nodes":[{"pos":[0,269],"content":"Calling <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> is functionally equivalent to creating a <xref:System.Threading.Tasks.Task> using one of its constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.","nodes":[{"content":"Calling <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> is functionally equivalent to creating a <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> using one of its constructors and then calling the <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> method to schedule it for execution.","pos":[0,269],"source":"Calling <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> is functionally equivalent to creating a <xref:System.Threading.Tasks.Task> using one of its constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution."}]},{"pos":[276,734],"content":"Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters. For more information and code examples, see [Task.Run vs Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.","nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, you can use the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Run%2A&gt;</ph> method with an <ph id=\"ph3\">&lt;xref:System.Action&gt;</ph> object as  a quick way to call <ph id=\"ph4\">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> with default parameters.","pos":[0,268],"source":"Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters."},{"content":"For more information and code examples, see <bpt id=\"p1\">[</bpt>Task.Run vs Task.Factory.StartNew<ept id=\"p1\">](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx)</ept> in the Parallel Programming with .NET blog.","pos":[269,458],"source":" For more information and code examples, see [Task.Run vs Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog."}]}],"pos":[322117,322856],"yaml":true,"extradata":"MT"},{"content":"The action delegate to execute asynchronously.","nodes":[{"pos":[0,46],"content":"The action delegate to execute asynchronously.","nodes":[{"content":"The action delegate to execute asynchronously.","pos":[0,46]}]}],"pos":[323859,323906],"yaml":true},{"content":"An object containing data to be used by the <code>action</code> delegate.","nodes":[{"pos":[0,73],"content":"An object containing data to be used by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">action</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"An object containing data to be used by the <code>action</code> delegate."}],"pos":[323967,324041],"yaml":true},{"content":"The started <xref href=\"System.Threading.Tasks.Task\"></xref>.","nodes":[{"pos":[0,61],"content":"The started <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>.","source":"The started <xref href=\"System.Threading.Tasks.Task\"></xref>."}],"pos":[324112,324174],"yaml":true},{"content":"The <code>action</code> argument is `null`.","nodes":[{"pos":[0,43],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">action</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>action</code> argument is `null`."}],"pos":[324347,324391],"yaml":true},{"content":"Creates and starts a <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,72],"content":"Creates and starts a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"Creates and starts a <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[326499,326572],"yaml":true},{"content":"Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.  \n  \n Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters. For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.","nodes":[{"pos":[0,217],"content":"Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.","nodes":[{"content":"Calling StartNew is functionally equivalent to creating a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> using one of its constructors and then calling <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> to schedule it for execution.","pos":[0,217],"source":"Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution."}]},{"pos":[224,692],"content":"Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters. For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.","nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, you can use the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Run%2A&gt;</ph> method with an <ph id=\"ph3\">&lt;xref:System.Action&gt;</ph> object as a quick way to call <ph id=\"ph4\">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> with default parameters.","pos":[0,267],"source":"Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters."},{"content":"For more information and code examples, see the entry <bpt id=\"p1\">[</bpt>Task.Run vs. Task.Factory.StartNew<ept id=\"p1\">](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx)</ept> in the Parallel Programming with .NET blog.","pos":[268,468],"source":" For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog."}]}],"pos":[326583,327280],"yaml":true,"extradata":"MT"},{"content":"A function delegate that returns the future result to be available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,130],"content":"A function delegate that returns the future result to be available through the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"A function delegate that returns the future result to be available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[327633,327764],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> that will be assigned to the new task.","nodes":[{"pos":[0,116],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"&gt;&lt;/xref&gt;</ph> that will be assigned to the new task.","source":"The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> that will be assigned to the new task."}],"pos":[327858,327975],"yaml":true},{"content":"A TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,121],"content":"A TaskCreationOptions value that controls the behavior of the created <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"A TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[328075,328197],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> that is used to schedule the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,150],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskScheduler\"&gt;&lt;/xref&gt;</ph> that is used to schedule the created <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> that is used to schedule the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[328285,328436],"yaml":true},{"content":"The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,96],"content":"The type of the result available through the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[328493,328590],"yaml":true},{"content":"The started <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,63],"content":"The started <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The started <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[328663,328727],"yaml":true},{"content":"The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed.","nodes":[{"pos":[0,95],"content":"The provided <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> has already been disposed.","source":"The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed."}],"pos":[328907,329003],"yaml":true},{"content":"The exception that is thrown when the <code>function</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>scheduler</code> argument is null.","nodes":[{"pos":[0,77],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">function</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>function</code> argument is null."},{"pos":[84,88],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[95,173],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">scheduler</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>scheduler</code> argument is null."}],"pos":[329105,329285],"yaml":true},{"content":"The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>","nodes":[{"pos":[0,516],"content":"The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>","nodes":[{"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">creationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid TaskCreationOptions value.","pos":[0,123],"source":"The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value."},{"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">creationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid TaskCreationOptions value.","pos":[124,247],"source":" The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value."},{"content":"For more information, see the Remarks for <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"&gt;&lt;/xref&gt;</ph>","pos":[248,516],"source":" For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>"}]}],"pos":[329399,329916],"yaml":true},{"content":"Creates and starts a <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,72],"content":"Creates and starts a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"Creates and starts a <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[331514,331587],"yaml":true},{"content":"Calling <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.  \n  \n Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can call the <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=fullName> method as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters. Note, however, that there is a difference in behavior between the two methods regarding : <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=fullName> by default does not allow child tasks started with the <xref:System.Threading.Tasks.TaskCreationOptions?displayProperty=fullName> option to attach to the current <xref:System.Threading.Tasks.Task%601> instance, whereas <xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%29> does. For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.","nodes":[{"pos":[0,262],"content":"Calling <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.","nodes":[{"content":"Calling <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> is functionally equivalent to creating a <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> using one of its constructors and then calling <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> to schedule it for execution.","pos":[0,262],"source":"Calling <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution."}]},{"pos":[269,1265],"content":"Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can call the <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=fullName> method as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters. Note, however, that there is a difference in behavior between the two methods regarding : <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=fullName> by default does not allow child tasks started with the <xref:System.Threading.Tasks.TaskCreationOptions?displayProperty=fullName> option to attach to the current <xref:System.Threading.Tasks.Task%601> instance, whereas <xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%29> does. For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.","nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, you can call the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=fullName&gt;</ph> method as a quick way to call <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> with default parameters.","pos":[0,291],"source":"Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can call the <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=fullName> method as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters."},{"content":"Note, however, that there is a difference in behavior between the two methods regarding : <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=fullName&gt;</ph> by default does not allow child tasks started with the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskCreationOptions?displayProperty=fullName&gt;</ph> option to attach to the current <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> instance, whereas <ph id=\"ph4\">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%29&gt;</ph> does.","pos":[292,795],"source":" Note, however, that there is a difference in behavior between the two methods regarding : <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=fullName> by default does not allow child tasks started with the <xref:System.Threading.Tasks.TaskCreationOptions?displayProperty=fullName> option to attach to the current <xref:System.Threading.Tasks.Task%601> instance, whereas <xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%29> does."},{"content":"For more information and code examples, see the entry <bpt id=\"p1\">[</bpt>Task.Run vs. Task.Factory.StartNew<ept id=\"p1\">](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx)</ept> in the Parallel Programming with .NET blog.","pos":[796,996],"source":" For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog."}]}],"pos":[331598,332868],"yaml":true,"extradata":"MT"},{"content":"A function delegate that returns the future result to be available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,130],"content":"A function delegate that returns the future result to be available through the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"A function delegate that returns the future result to be available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[333808,333939],"yaml":true},{"content":"The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,96],"content":"The type of the result available through the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[333996,334093],"yaml":true},{"content":"The started <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,63],"content":"The started <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The started <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[334166,334230],"yaml":true},{"content":"The <code>function</code> argument is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">function</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>function</code> argument is `null`."}],"pos":[334406,334452],"yaml":true},{"content":"Creates and starts a <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,72],"content":"Creates and starts a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"Creates and starts a <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[336179,336252],"yaml":true},{"content":"Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.  \n  \n Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters. For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.","nodes":[{"pos":[0,217],"content":"Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.","nodes":[{"content":"Calling StartNew is functionally equivalent to creating a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> using one of its constructors and then calling <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> to schedule it for execution.","pos":[0,217],"source":"Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution."}]},{"pos":[224,692],"content":"Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters. For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.","nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, you can use the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Run%2A&gt;</ph> method with an <ph id=\"ph3\">&lt;xref:System.Action&gt;</ph> object as a quick way to call <ph id=\"ph4\">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> with default parameters.","pos":[0,267],"source":"Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters."},{"content":"For more information and code examples, see the entry <bpt id=\"p1\">[</bpt>Task.Run vs. Task.Factory.StartNew<ept id=\"p1\">](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx)</ept> in the Parallel Programming with .NET blog.","pos":[268,468],"source":" For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog."}]}],"pos":[336263,336960],"yaml":true,"extradata":"MT"},{"content":"A function delegate that returns the future result to be available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,130],"content":"A function delegate that returns the future result to be available through the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"A function delegate that returns the future result to be available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[337193,337324],"yaml":true},{"content":"An object containing data to be used by the <code>function</code> delegate.","nodes":[{"pos":[0,75],"content":"An object containing data to be used by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">function</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"An object containing data to be used by the <code>function</code> delegate."}],"pos":[337385,337461],"yaml":true},{"content":"The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,96],"content":"The type of the result available through the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[337518,337615],"yaml":true},{"content":"The started <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,63],"content":"The started <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The started <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[337688,337752],"yaml":true},{"content":"The exception that is thrown when the <code>function</code> argument is null.","nodes":[{"pos":[0,77],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">function</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>function</code> argument is null."}],"pos":[337928,338006],"yaml":true},{"content":"Creates and starts a <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,72],"content":"Creates and starts a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"Creates and starts a <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[339766,339839],"yaml":true},{"content":"Calling <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.  \n  \n Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> method as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29> with default parameters. Note, however, that there is a difference in behavior between the two methods regarding : <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> by default does not allow child tasks started with the <xref:System.Threading.Tasks.TaskCreationOptions?displayProperty=fullName> option to attach to the current <xref:System.Threading.Tasks.Task%601> instance, whereas <xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29> does. For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.","nodes":[{"pos":[0,262],"content":"Calling <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.","nodes":[{"content":"Calling <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> is functionally equivalent to creating a <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> using one of its constructors and then calling <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> to schedule it for execution.","pos":[0,262],"source":"Calling <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution."}]},{"pos":[269,1446],"content":"Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> method as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29> with default parameters. Note, however, that there is a difference in behavior between the two methods regarding : <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> by default does not allow child tasks started with the <xref:System.Threading.Tasks.TaskCreationOptions?displayProperty=fullName> option to attach to the current <xref:System.Threading.Tasks.Task%601> instance, whereas <xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29> does. For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.","nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, you can use the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=fullName&gt;</ph> method as a quick way to call <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29&gt;</ph> with default parameters.","pos":[0,398],"source":"Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> method as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29> with default parameters."},{"content":"Note, however, that there is a difference in behavior between the two methods regarding : <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=fullName&gt;</ph> by default does not allow child tasks started with the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskCreationOptions?displayProperty=fullName&gt;</ph> option to attach to the current <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> instance, whereas <ph id=\"ph4\">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29&gt;</ph> does.","pos":[399,976],"source":" Note, however, that there is a difference in behavior between the two methods regarding : <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> by default does not allow child tasks started with the <xref:System.Threading.Tasks.TaskCreationOptions?displayProperty=fullName> option to attach to the current <xref:System.Threading.Tasks.Task%601> instance, whereas <xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29> does."},{"content":"For more information and code examples, see the entry <bpt id=\"p1\">[</bpt>Task.Run vs. Task.Factory.StartNew<ept id=\"p1\">](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx)</ept> in the Parallel Programming with .NET blog.","pos":[977,1177],"source":" For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog."}]}],"pos":[339850,341301],"yaml":true,"extradata":"MT"},{"content":"A function delegate that returns the future result to be available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,130],"content":"A function delegate that returns the future result to be available through the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"A function delegate that returns the future result to be available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[342220,342351],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> that will be assigned to the new <xref href=\"System.Threading.Tasks.Task\"></xref>","nodes":[{"pos":[0,159],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"&gt;&lt;/xref&gt;</ph> that will be assigned to the new <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>","source":"The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> that will be assigned to the new <xref href=\"System.Threading.Tasks.Task\"></xref>"}],"pos":[342445,342605],"yaml":true},{"content":"The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,96],"content":"The type of the result available through the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[342662,342759],"yaml":true},{"content":"The started <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,63],"content":"The started <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The started <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[342832,342896],"yaml":true},{"content":"The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed.","nodes":[{"pos":[0,95],"content":"The provided <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> has already been disposed.","source":"The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed."}],"pos":[343076,343172],"yaml":true},{"content":"The exception that is thrown when the <code>function</code> argument is null.","nodes":[{"pos":[0,77],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">function</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>function</code> argument is null."}],"pos":[343274,343352],"yaml":true},{"content":"Creates and starts a <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,72],"content":"Creates and starts a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"Creates and starts a <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[345142,345215],"yaml":true},{"content":"Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.  \n  \n Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters. For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.","nodes":[{"pos":[0,217],"content":"Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.","nodes":[{"content":"Calling StartNew is functionally equivalent to creating a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> using one of its constructors and then calling <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> to schedule it for execution.","pos":[0,217],"source":"Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution."}]},{"pos":[224,692],"content":"Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters. For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.","nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, you can use the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Run%2A&gt;</ph> method with an <ph id=\"ph3\">&lt;xref:System.Action&gt;</ph> object as a quick way to call <ph id=\"ph4\">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> with default parameters.","pos":[0,267],"source":"Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters."},{"content":"For more information and code examples, see the entry <bpt id=\"p1\">[</bpt>Task.Run vs. Task.Factory.StartNew<ept id=\"p1\">](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx)</ept> in the Parallel Programming with .NET blog.","pos":[268,468],"source":" For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog."}]}],"pos":[345226,345923],"yaml":true,"extradata":"MT"},{"content":"A function delegate that returns the future result to be available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,130],"content":"A function delegate that returns the future result to be available through the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"A function delegate that returns the future result to be available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[346174,346305],"yaml":true},{"content":"A TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,121],"content":"A TaskCreationOptions value that controls the behavior of the created <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"A TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[346405,346527],"yaml":true},{"content":"The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,96],"content":"The type of the result available through the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[346584,346681],"yaml":true},{"content":"The started <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,63],"content":"The started <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The started <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[346754,346818],"yaml":true},{"content":"The exception that is thrown when the <code>function</code> argument is null.","nodes":[{"pos":[0,77],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">function</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>function</code> argument is null."}],"pos":[346994,347072],"yaml":true},{"content":"The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>","nodes":[{"pos":[0,516],"content":"The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>","nodes":[{"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">creationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid TaskCreationOptions value.","pos":[0,123],"source":"The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value."},{"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">creationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid TaskCreationOptions value.","pos":[124,247],"source":" The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value."},{"content":"For more information, see the Remarks for <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"&gt;&lt;/xref&gt;</ph>","pos":[248,516],"source":" For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>"}]}],"pos":[347186,347703],"yaml":true},{"content":"Creates and starts a <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,72],"content":"Creates and starts a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"Creates and starts a <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[349592,349665],"yaml":true},{"content":"Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.  \n  \n Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters. For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.","nodes":[{"pos":[0,217],"content":"Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.","nodes":[{"content":"Calling StartNew is functionally equivalent to creating a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> using one of its constructors and then calling <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> to schedule it for execution.","pos":[0,217],"source":"Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution."}]},{"pos":[224,692],"content":"Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters. For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.","nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, you can use the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Run%2A&gt;</ph> method with an <ph id=\"ph3\">&lt;xref:System.Action&gt;</ph> object as a quick way to call <ph id=\"ph4\">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> with default parameters.","pos":[0,267],"source":"Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters."},{"content":"For more information and code examples, see the entry <bpt id=\"p1\">[</bpt>Task.Run vs. Task.Factory.StartNew<ept id=\"p1\">](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx)</ept> in the Parallel Programming with .NET blog.","pos":[268,468],"source":" For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog."}]}],"pos":[349676,350373],"yaml":true,"extradata":"MT"},{"content":"A function delegate that returns the future result to be available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,130],"content":"A function delegate that returns the future result to be available through the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"A function delegate that returns the future result to be available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[350660,350791],"yaml":true},{"content":"An object containing data to be used by the <code>function</code> delegate.","nodes":[{"pos":[0,75],"content":"An object containing data to be used by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">function</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"An object containing data to be used by the <code>function</code> delegate."}],"pos":[350852,350928],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> that will be assigned to the new <xref href=\"System.Threading.Tasks.Task\"></xref>","nodes":[{"pos":[0,159],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"&gt;&lt;/xref&gt;</ph> that will be assigned to the new <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>","source":"The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> that will be assigned to the new <xref href=\"System.Threading.Tasks.Task\"></xref>"}],"pos":[351022,351182],"yaml":true},{"content":"The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,96],"content":"The type of the result available through the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[351239,351336],"yaml":true},{"content":"The started <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,63],"content":"The started <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The started <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[351409,351473],"yaml":true},{"content":"The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed.","nodes":[{"pos":[0,95],"content":"The provided <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> has already been disposed.","source":"The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed."}],"pos":[351653,351749],"yaml":true},{"content":"The exception that is thrown when the <code>function</code> argument is null.","nodes":[{"pos":[0,77],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">function</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>function</code> argument is null."}],"pos":[351851,351929],"yaml":true},{"content":"Creates and starts a <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,72],"content":"Creates and starts a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"Creates and starts a <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[353848,353921],"yaml":true},{"content":"Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.  \n  \n Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters. For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.","nodes":[{"pos":[0,217],"content":"Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.","nodes":[{"content":"Calling StartNew is functionally equivalent to creating a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> using one of its constructors and then calling <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> to schedule it for execution.","pos":[0,217],"source":"Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution."}]},{"pos":[224,692],"content":"Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters. For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.","nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, you can use the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Run%2A&gt;</ph> method with an <ph id=\"ph3\">&lt;xref:System.Action&gt;</ph> object as a quick way to call <ph id=\"ph4\">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> with default parameters.","pos":[0,267],"source":"Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters."},{"content":"For more information and code examples, see the entry <bpt id=\"p1\">[</bpt>Task.Run vs. Task.Factory.StartNew<ept id=\"p1\">](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx)</ept> in the Parallel Programming with .NET blog.","pos":[268,468],"source":" For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog."}]}],"pos":[353932,354629],"yaml":true,"extradata":"MT"},{"content":"A function delegate that returns the future result to be available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,130],"content":"A function delegate that returns the future result to be available through the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"A function delegate that returns the future result to be available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[354922,355053],"yaml":true},{"content":"An object containing data to be used by the <code>function</code> delegate.","nodes":[{"pos":[0,75],"content":"An object containing data to be used by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">function</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"An object containing data to be used by the <code>function</code> delegate."}],"pos":[355114,355190],"yaml":true},{"content":"A TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,121],"content":"A TaskCreationOptions value that controls the behavior of the created <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"A TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[355290,355412],"yaml":true},{"content":"The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,96],"content":"The type of the result available through the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[355469,355566],"yaml":true},{"content":"The started <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,63],"content":"The started <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The started <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[355639,355703],"yaml":true},{"content":"The exception that is thrown when the <code>function</code> argument is null.","nodes":[{"pos":[0,77],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">function</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>function</code> argument is null."}],"pos":[355879,355957],"yaml":true},{"content":"The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>","nodes":[{"pos":[0,516],"content":"The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>","nodes":[{"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">creationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid TaskCreationOptions value.","pos":[0,123],"source":"The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value."},{"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">creationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid TaskCreationOptions value.","pos":[124,247],"source":" The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value."},{"content":"For more information, see the Remarks for <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"&gt;&lt;/xref&gt;</ph>","pos":[248,516],"source":" For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>"}]}],"pos":[356071,356588],"yaml":true},{"content":"Creates and starts a <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,72],"content":"Creates and starts a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"Creates and starts a <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[358825,358898],"yaml":true},{"content":"Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.  \n  \n Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters. For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.","nodes":[{"pos":[0,217],"content":"Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.","nodes":[{"content":"Calling StartNew is functionally equivalent to creating a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> using one of its constructors and then calling <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> to schedule it for execution.","pos":[0,217],"source":"Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution."}]},{"pos":[224,692],"content":"Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters. For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.","nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, you can use the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Run%2A&gt;</ph> method with an <ph id=\"ph3\">&lt;xref:System.Action&gt;</ph> object as a quick way to call <ph id=\"ph4\">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> with default parameters.","pos":[0,267],"source":"Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters."},{"content":"For more information and code examples, see the entry <bpt id=\"p1\">[</bpt>Task.Run vs. Task.Factory.StartNew<ept id=\"p1\">](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx)</ept> in the Parallel Programming with .NET blog.","pos":[268,468],"source":" For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog."}]}],"pos":[358909,359606],"yaml":true,"extradata":"MT"},{"content":"A function delegate that returns the future result to be available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,130],"content":"A function delegate that returns the future result to be available through the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"A function delegate that returns the future result to be available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[360001,360132],"yaml":true},{"content":"An object containing data to be used by the <code>function</code> delegate.","nodes":[{"pos":[0,75],"content":"An object containing data to be used by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">function</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate.","source":"An object containing data to be used by the <code>function</code> delegate."}],"pos":[360193,360269],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> that will be assigned to the new task.","nodes":[{"pos":[0,116],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"&gt;&lt;/xref&gt;</ph> that will be assigned to the new task.","source":"The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> that will be assigned to the new task."}],"pos":[360363,360480],"yaml":true},{"content":"A TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,121],"content":"A TaskCreationOptions value that controls the behavior of the created <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"A TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[360580,360702],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> that is used to schedule the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,150],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskScheduler\"&gt;&lt;/xref&gt;</ph> that is used to schedule the created <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> that is used to schedule the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[360790,360941],"yaml":true},{"content":"The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,96],"content":"The type of the result available through the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[360998,361095],"yaml":true},{"content":"The started <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,63],"content":"The started <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The started <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[361168,361232],"yaml":true},{"content":"The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed.","nodes":[{"pos":[0,95],"content":"The provided <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> has already been disposed.","source":"The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed."}],"pos":[361412,361508],"yaml":true},{"content":"The exception that is thrown when the <code>function</code> argument is null.  \n  \n -or-  \n  \n The exception that is thrown when the <code>scheduler</code> argument is null.","nodes":[{"pos":[0,77],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">function</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>function</code> argument is null."},{"pos":[84,88],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[95,173],"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">scheduler</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The exception that is thrown when the <code>scheduler</code> argument is null."}],"pos":[361610,361790],"yaml":true},{"content":"The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>","nodes":[{"pos":[0,516],"content":"The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>","nodes":[{"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">creationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid TaskCreationOptions value.","pos":[0,123],"source":"The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value."},{"content":"The exception that is thrown when the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">creationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid TaskCreationOptions value.","pos":[124,247],"source":" The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value."},{"content":"For more information, see the Remarks for <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"&gt;&lt;/xref&gt;</ph>","pos":[248,516],"source":" For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>"}]}],"pos":[361904,362421],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Threading.Tasks.TaskFactory\n  commentId: T:System.Threading.Tasks.TaskFactory\n  id: TaskFactory\n  children:\n  - System.Threading.Tasks.TaskFactory.#ctor\n  - System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken)\n  - System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)\n  - System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.TaskFactory.CancellationToken\n  - System.Threading.Tasks.TaskFactory.ContinuationOptions\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.Tasks.TaskContinuationOptions)\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.Tasks.TaskContinuationOptions)\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1})\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.Tasks.TaskContinuationOptions)\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken)\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]})\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0})\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken)\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.Tasks.TaskContinuationOptions)\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task})\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1})\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}})\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0})\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.TaskFactory.CreationOptions\n  - System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult})\n  - System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object)\n  - System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)\n  - System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  - System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  - System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)\n  - System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  - System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)\n  - System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)\n  - System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  - System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)\n  - System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  - System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object)\n  - System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  - System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  - System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object)\n  - System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions)\n  - System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object)\n  - System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0})\n  - System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  - System.Threading.Tasks.TaskFactory.Scheduler\n  - System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  - System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)\n  - System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken)\n  - System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.Tasks.TaskCreationOptions)\n  - System.Threading.Tasks.TaskFactory.StartNew(System.Action)\n  - System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)\n  - System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0})\n  - System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object)\n  - System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken)\n  - System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.Tasks.TaskCreationOptions)\n  - System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)\n  - System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  - System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  langs:\n  - csharp\n  name: TaskFactory\n  nameWithType: TaskFactory\n  fullName: System.Threading.Tasks.TaskFactory\n  type: Class\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Provides support for creating and scheduling <xref href=\"System.Threading.Tasks.Task\"></xref> objects.\n  remarks: \"The .NET Framework provides two factories for creating and scheduling tasks:  \\n  \\n-   The <xref:System.Threading.Tasks.TaskFactory> class, which creates <xref:System.Threading.Tasks.Task> and <xref:System.Threading.Tasks.Task%601> objects. You can call the overloads of this method to create and execute a task that requires non-default arguments.  \\n  \\n    > [!WARNING]\\n    >  Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=fullName> method provides the easiest way to create a task with default configuration values and start it immediately.  \\n  \\n-   The <xref:System.Threading.Tasks.TaskFactory%601> class, which creates <xref:System.Threading.Tasks.Task%601> objects.  \\n  \\n The <xref:System.Threading.Tasks.TaskFactory> class allows you to do the following:  \\n  \\n-   Create a task and start it immediately by calling the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> method.  \\n  \\n    > [!WARNING]\\n    >  Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=fullName> method provides the easiest way to create a task with default configuration values and start it immediately.  \\n  \\n-   Create a task that starts when any one of the tasks in an array has completed by calling the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAny%2A> method.  \\n  \\n-   Create a task that starts when all the tasks in an array have completed by calling the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> method.  \\n  \\n The static <xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=fullName> property returns a default <xref:System.Threading.Tasks.TaskFactory%601> object. You can also call one of the <xref:System.Threading.Tasks.TaskFactory> class constructors to configure the <xref:System.Threading.Tasks.Task> objects that  the <xref:System.Threading.Tasks.TaskFactory> class creates. The following example configures a new <xref:System.Threading.Tasks.TaskFactory> object to create tasks that have a specified cancellation token, task creation options, continuation options, and a customized task scheduler.  \\n  \\n [!code-csharp[TPL_Factories#1](~/samples/snippets/csharp/VS_Snippets_Misc/tpl_factories/cs/program.cs#1)]\\n [!code-vb[TPL_Factories#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/tpl_factories/vb/factories_vb.vb#1)]  \\n  \\n In most cases, you do not have to instantiate a new <xref:System.Threading.Tasks.TaskFactory> instance. Instead, you can use the <xref:System.Threading.Tasks.Task.Factory%2A?displayProperty=fullName> property, which returns a factory object that uses default values. You can then call its methods to start new tasks or define task continuations. For an illustration, see the example.\"\n  example:\n  - \"The following example uses the static <xref:System.Threading.Tasks.Task.Factory%2A> property to make two calls to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=fullName> method. The first populates an array with the names of files in the user's MyDocuments directory, while the second populates an array with the names of subdirectories of the user's MyDocuments directory. It then calls the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%29?displayProperty=fullName> method, which displays information about the number of files and directories in the two arrays after the first two tasks have completed execution.  \\n  \\n [!code-csharp[System.Threading.Tasks.Task.Factory#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.factory/cs/factory1.cs#1)]\\n [!code-vb[System.Threading.Tasks.Task.Factory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.factory/vb/factory1.vb#1)]\"\n  syntax:\n    content: public class TaskFactory\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.#ctor\n  commentId: M:System.Threading.Tasks.TaskFactory.#ctor\n  id: '#ctor'\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: TaskFactory()\n  nameWithType: TaskFactory.TaskFactory()\n  fullName: TaskFactory.TaskFactory()\n  type: Constructor\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Initializes a <xref href=\"System.Threading.Tasks.TaskFactory\"></xref> instance with the default configuration.\n  remarks: This constructor creates a <xref:System.Threading.Tasks.TaskFactory> instance with a default configuration. The <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).\n  syntax:\n    content: public TaskFactory ();\n    parameters: []\n  overload: System.Threading.Tasks.TaskFactory.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken)\n  id: '#ctor(System.Threading.CancellationToken)'\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: TaskFactory(CancellationToken)\n  nameWithType: TaskFactory.TaskFactory(CancellationToken)\n  fullName: TaskFactory.TaskFactory(CancellationToken)\n  type: Constructor\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Initializes a <xref href=\"System.Threading.Tasks.TaskFactory\"></xref> instance with the specified configuration.\n  remarks: This constructor creates a <xref:System.Threading.Tasks.TaskFactory> instance with a default configuration. The <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).\n  syntax:\n    content: public TaskFactory (System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> that will be assigned to tasks created by this <xref href=\"System.Threading.Tasks.TaskFactory\"></xref> unless another CancellationToken is explicitly specified while calling the factory methods.\n  overload: System.Threading.Tasks.TaskFactory.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskScheduler)\n  id: '#ctor(System.Threading.Tasks.TaskScheduler)'\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: TaskFactory(TaskScheduler)\n  nameWithType: TaskFactory.TaskFactory(TaskScheduler)\n  fullName: TaskFactory.TaskFactory(TaskScheduler)\n  type: Constructor\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Initializes a <xref href=\"System.Threading.Tasks.TaskFactory\"></xref> instance with the specified configuration.\n  remarks: With this constructor, the <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to `scheduler`, unless it's null, in which case the property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).\n  syntax:\n    content: public TaskFactory (System.Threading.Tasks.TaskScheduler scheduler);\n    parameters:\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> to use to schedule any tasks created with this TaskFactory. A null value indicates that the current TaskScheduler should be used.\n  overload: System.Threading.Tasks.TaskFactory.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)\n  id: '#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)'\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: TaskFactory(TaskCreationOptions, TaskContinuationOptions)\n  nameWithType: TaskFactory.TaskFactory(TaskCreationOptions, TaskContinuationOptions)\n  fullName: TaskFactory.TaskFactory(TaskCreationOptions, TaskContinuationOptions)\n  type: Constructor\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Initializes a <xref href=\"System.Threading.Tasks.TaskFactory\"></xref> instance with the specified configuration.\n  remarks: With this constructor, the <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to `creationOptions`, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to `continuationOptions`, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).\n  syntax:\n    content: public TaskFactory (System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskContinuationOptions continuationOptions);\n    parameters:\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: The default <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref> to use when creating tasks with this TaskFactory.\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: The default <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref> to use when creating continuation tasks with this TaskFactory.\n  overload: System.Threading.Tasks.TaskFactory.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"The <code>creationOptions</code> argument specifies an invalid <xref href=\\\"System.Threading.Tasks.TaskCreationOptions\\\"></xref> value. For more information, see the Remarks for <xref href=\\\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\\\"></xref>.  \\n  \\n -or-  \\n  \\n The <code>continuationOptions</code> argument specifies an invalid value.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  id: '#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)'\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: TaskFactory(CancellationToken, TaskCreationOptions, TaskContinuationOptions, TaskScheduler)\n  nameWithType: TaskFactory.TaskFactory(CancellationToken, TaskCreationOptions, TaskContinuationOptions, TaskScheduler)\n  fullName: TaskFactory.TaskFactory(CancellationToken, TaskCreationOptions, TaskContinuationOptions, TaskScheduler)\n  type: Constructor\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Initializes a <xref href=\"System.Threading.Tasks.TaskFactory\"></xref> instance with the specified configuration.\n  remarks: With this constructor, the <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to `creationOptions`, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to `continuationOptions`, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to `scheduler`, unless it's null, in which case the property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).\n  syntax:\n    content: public TaskFactory (System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);\n    parameters:\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The default <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> that will be assigned to tasks created by this <xref href=\"System.Threading.Tasks.TaskFactory\"></xref> unless another CancellationToken is explicitly specified while calling the factory methods.\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: The default <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref> to use when creating tasks with this TaskFactory.\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: The default <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref> to use when creating continuation tasks with this TaskFactory.\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: The default <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> to use to schedule any Tasks created with this TaskFactory. A null value indicates that TaskScheduler.Current should be used.\n  overload: System.Threading.Tasks.TaskFactory.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"The <code>creationOptions</code> argument specifies an invalid <xref href=\\\"System.Threading.Tasks.TaskCreationOptions\\\"></xref> value. For more information, see the Remarks for <xref href=\\\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\\\"></xref>.  \\n  \\n -or-  \\n  \\n The <code>continuationOptions</code> argument specifies an invalid value.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.CancellationToken\n  commentId: P:System.Threading.Tasks.TaskFactory.CancellationToken\n  id: CancellationToken\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: CancellationToken\n  nameWithType: TaskFactory.CancellationToken\n  fullName: TaskFactory.CancellationToken\n  type: Property\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Gets the default cancellation token for this task factory.\n  remarks: This property returns the default <xref:System.Threading.CancellationToken> that will be assigned to all tasks created by this factory, unless another <xref:System.Threading.CancellationToken> value is explicitly specified during the call to the factory methods.\n  syntax:\n    content: public System.Threading.CancellationToken CancellationToken { get; }\n    return:\n      type: System.Threading.CancellationToken\n      description: The default task cancellation token for this task factory.\n  overload: System.Threading.Tasks.TaskFactory.CancellationToken*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.ContinuationOptions\n  commentId: P:System.Threading.Tasks.TaskFactory.ContinuationOptions\n  id: ContinuationOptions\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: ContinuationOptions\n  nameWithType: TaskFactory.ContinuationOptions\n  fullName: TaskFactory.ContinuationOptions\n  type: Property\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Gets the default task continuation options for this task factory.\n  remarks: The property value is used to create all continuation tasks, unless other options are explicitly specified during calls to this factory's methods.\n  syntax:\n    content: public System.Threading.Tasks.TaskContinuationOptions ContinuationOptions { get; }\n    return:\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: The default task continuation options for this task factory.\n  overload: System.Threading.Tasks.TaskFactory.ContinuationOptions*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})\n  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: ContinueWhenAll(Task[], Action<Task[]>)\n  nameWithType: TaskFactory.ContinueWhenAll(Task[], Action<Task[]>)\n  fullName: TaskFactory.ContinueWhenAll(Task[], Action<Task[]>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation task that starts when a set of specified tasks has completed.\n  remarks: \"The <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> method executes the `continuationAction` delegate when all tasks in the `tasks` array have completed, regardless of their completion status.  \\n  \\n Exceptions thrown by tasks in the `tasks` array are not available to the continuation task through structured exception handling. You can determine which exceptions were thrown by examining the <xref:System.Threading.Tasks.Task.Exception%2A?displayProperty=fullName> property of each task in the `tasks` array. To use structured exception handling to handle exceptions thrown by tasks in the `tasks` array, call the <xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29?displayProperty=fullName> method.\"\n  example:\n  - \"The following example launches separate tasks that use a regular expression to count the number of words in a set of text files. The <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> method is used to launch a task that displays the total word count when all the antecedent tasks have completed.  \\n  \\n [!code-csharp[System.Threading.Tasks.Task.ContinueWhenAll#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.continuewhenall/cs/continuewhenall1.cs#1)]\\n [!code-vb[System.Threading.Tasks.Task.ContinueWhenAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.continuewhenall/vb/continuewhenall1.vb#1)]  \\n  \\n The call to the continuation task's <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=fullName> method does not allow it to handle exceptions thrown by the antecedent tasks, so the example examines the <xref:System.Threading.Tasks.Task.Status%2A?displayProperty=fullName> property of each antecedent task to determine whether the task succeeded.\"\n  syntax:\n    content: public System.Threading.Tasks.Task ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Action<System.Threading.Tasks.Task[]> continuationAction);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: The array of tasks from which to continue.\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task[]}\n      description: The action delegate to execute when all tasks in the <code>tasks</code> array have completed.\n    return:\n      type: System.Threading.Tasks.Task\n      description: The new continuation task.\n  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAll*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: An element in the <code>tasks</code> array has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>tasks</code> array is `null`.  \\n  \\n -or-  \\n  \\n The <code>continuationAction</code> argument is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>tasks</code> array is empty or contains a null value.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)\n  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: ContinueWhenAll(Task[], Action<Task[]>, CancellationToken)\n  nameWithType: TaskFactory.ContinueWhenAll(Task[], Action<Task[]>, CancellationToken)\n  fullName: TaskFactory.ContinueWhenAll(Task[], Action<Task[]>, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation task that starts when a set of specified tasks has completed.\n  remarks: The [\\], Action(Task\\<xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%2CSystem.Threading.CancellationToken%29> method executes the `continuationAction` delegate when all tasks in the `tasks` array have completed, regardless of their completion status.\n  example:\n  - \"The following example creates a cancellation token, which it passes to separate tasks that use a regular expression to count the number of words in a set of text files. The cancellation token is set if a file cannot be found. The [\\\\], Action(Task\\\\<xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> method is used to launch a task that displays the total word count when all the antecedent tasks have completed. If the cancellation token is set, which indicates that one or more tasks have been cancelled, it handles the <xref:System.AggregateException> exception and displays an error message.  \\n  \\n [!code-csharp[System.Threading.Tasks.Task.ContinueWhenAll#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.continuewhenall/cs/continuewhenall2.cs#2)]\\n [!code-vb[System.Threading.Tasks.Task.ContinueWhenAll#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.continuewhenall/vb/continuewhenall2.vb#2)]\"\n  syntax:\n    content: public System.Threading.Tasks.Task ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Action<System.Threading.Tasks.Task[]> continuationAction, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: The array of tasks from which to continue.\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task[]}\n      description: The action delegate to execute when all tasks in the <code>tasks</code> array have completed.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The cancellation token to assign to the new continuation task.\n    return:\n      type: System.Threading.Tasks.Task\n      description: The new continuation task.\n  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAll*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"An element in the <code>tasks</code> array has been disposed.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Threading.CancellationTokenSource\\\"></xref> that created <code>cancellationToken</code> has already been disposed.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>tasks</code> array is `null`.  \\n  \\n -or-  \\n  \\n The <code>continuationAction</code> argument is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>tasks</code> array is empty or contains a null value.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.Tasks.TaskContinuationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.Tasks.TaskContinuationOptions)\n  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: ContinueWhenAll(Task[], Action<Task[]>, TaskContinuationOptions)\n  nameWithType: TaskFactory.ContinueWhenAll(Task[], Action<Task[]>, TaskContinuationOptions)\n  fullName: TaskFactory.ContinueWhenAll(Task[], Action<Task[]>, TaskContinuationOptions)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation task that starts when a set of specified tasks has completed.\n  syntax:\n    content: public System.Threading.Tasks.Task ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Action<System.Threading.Tasks.Task[]> continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: The array of tasks from which to continue.\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task[]}\n      description: The action delegate to execute when all tasks in the <code>tasks</code> array have completed.\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.\n    return:\n      type: System.Threading.Tasks.Task\n      description: The new continuation task.\n  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAll*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: An element in the <code>tasks</code> array has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>tasks</code> array is `null`.  \\n  \\n -or-  \\n  \\n The <code>continuationAction</code> argument is `null`.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>continuationOptions</code> argument specifies an invalid value.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>tasks</code> array is empty or contains a null value.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: ContinueWhenAll(Task[], Action<Task[]>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: TaskFactory.ContinueWhenAll(Task[], Action<Task[]>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: TaskFactory.ContinueWhenAll(Task[], Action<Task[]>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation task that starts when a set of specified tasks has completed.\n  syntax:\n    content: public System.Threading.Tasks.Task ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Action<System.Threading.Tasks.Task[]> continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: The array of tasks from which to continue.\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task[]}\n      description: The action delegate to execute when all tasks in the <code>tasks</code> array have completed.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The cancellation token to assign to the new continuation task.\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: A bitwise combination of the enumeration values that control the behavior of the new continuation task.\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: The object that is used to schedule the new continuation task.\n    return:\n      type: System.Threading.Tasks.Task\n      description: The new continuation task.\n  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAll*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>tasks</code> array is `null`.  \\n  \\n -or-  \\n  \\n The <code>continuationAction</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>scheduler</code> argument is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>tasks</code> array is empty or contains a null value.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  id: ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: ContinueWhenAll<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: TaskFactory.ContinueWhenAll<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: TaskFactory.ContinueWhenAll<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation task that starts when a set of specified tasks has completed.\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TAntecedentResult,TResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>[],TResult> continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task{TAntecedentResult}[]\n      description: The array of tasks from which to continue.\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task{TAntecedentResult}[],TResult}\n      description: The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The cancellation token to assign to the new continuation task.\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: The object that is used to schedule the new continuation task.\n    typeParameters:\n    - id: TAntecedentResult\n      description: The type of the result of the antecedent <code>tasks</code>.\n    - id: TResult\n      description: The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created task.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The new continuation task.\n  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAll``2*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>tasks</code> array is `null`.  \\n  \\n -or-  \\n  \\n The <code>continuationFunction</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>scheduler</code> argument is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>tasks</code> array is empty or contains a null value.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>continuationOptions</code> argument specifies an invalid value.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"An element in the <code>tasks</code> array has been disposed.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Threading.CancellationTokenSource\\\"></xref> that created <code>cancellationToken</code> has already been disposed.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.Tasks.TaskContinuationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.Tasks.TaskContinuationOptions)\n  id: ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: ContinueWhenAll<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, TaskContinuationOptions)\n  nameWithType: TaskFactory.ContinueWhenAll<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, TaskContinuationOptions)\n  fullName: TaskFactory.ContinueWhenAll<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, TaskContinuationOptions)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation task that starts when a set of specified tasks has completed.\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TAntecedentResult,TResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>[],TResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task{TAntecedentResult}[]\n      description: The array of tasks from which to continue.\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task{TAntecedentResult}[],TResult}\n      description: The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed.\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.\n    typeParameters:\n    - id: TAntecedentResult\n      description: The type of the result of the antecedent <code>tasks</code>.\n    - id: TResult\n      description: The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created task.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The new continuation task.\n  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAll``2*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: An element in the <code>tasks</code> array has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>tasks</code> array is `null`.  \\n  \\n -or-  \\n  \\n The <code>continuationFunction</code> argument is `null`.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>continuationOptions</code> argument specifies an invalid value.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>tasks</code> array is empty or contains a null value.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)\n  id: ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: ContinueWhenAll<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, CancellationToken)\n  nameWithType: TaskFactory.ContinueWhenAll<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, CancellationToken)\n  fullName: TaskFactory.ContinueWhenAll<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation task that starts when a set of specified tasks has completed.\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TAntecedentResult,TResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>[],TResult> continuationFunction, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task{TAntecedentResult}[]\n      description: The array of tasks from which to continue.\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task{TAntecedentResult}[],TResult}\n      description: The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The cancellation token to assign to the new continuation task.\n    typeParameters:\n    - id: TAntecedentResult\n      description: The type of the result of the antecedent <code>tasks</code>.\n    - id: TResult\n      description: The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created task.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The new continuation task.\n  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAll``2*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"An element in the <code>tasks</code> array has been disposed.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Threading.CancellationTokenSource\\\"></xref> that created <code>cancellationToken</code> has already been disposed.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>tasks</code> array is `null`.  \\n  \\n -or-  \\n  \\n The <code>continuationFunction</code> argument is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>tasks</code> array is empty or contains a null value.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1})\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1})\n  id: ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1})\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: ContinueWhenAll<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>)\n  nameWithType: TaskFactory.ContinueWhenAll<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>)\n  fullName: TaskFactory.ContinueWhenAll<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation task that starts when a set of specified tasks has completed.\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TAntecedentResult,TResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>[],TResult> continuationFunction);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task{TAntecedentResult}[]\n      description: The array of tasks from which to continue.\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task{TAntecedentResult}[],TResult}\n      description: The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed.\n    typeParameters:\n    - id: TAntecedentResult\n      description: The type of the result of the antecedent <code>tasks</code>.\n    - id: TResult\n      description: The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created task.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The new continuation task.\n  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAll``2*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: An element in the <code>tasks</code> array has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>tasks</code> array is `null`.  \\n  \\n -or-  \\n  \\n The <code>continuationFunction</code> argument is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>tasks</code> array is empty or contains a null value.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: TaskFactory.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: TaskFactory.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation task that starts when a set of specified tasks has completed.\n  syntax:\n    content: public System.Threading.Tasks.Task ContinueWhenAll<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Action<System.Threading.Tasks.Task<TAntecedentResult>[]> continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task{TAntecedentResult}[]\n      description: The array of tasks from which to continue.\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task{TAntecedentResult}[]}\n      description: The action delegate to execute when all tasks in the <code>tasks</code> array have completed.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The cancellation token to assign to the new continuation task.\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: The object that is used to schedule the new continuation task.\n    typeParameters:\n    - id: TAntecedentResult\n      description: The type of the result of the antecedent <code>tasks</code>.\n    return:\n      type: System.Threading.Tasks.Task\n      description: The new continuation task.\n  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>tasks</code> array is `null`.  \\n  \\n -or-  \\n  \\n The <code>continuationAction</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>scheduler</code> argument is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>tasks</code> array is empty or contains a null value.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.Tasks.TaskContinuationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.Tasks.TaskContinuationOptions)\n  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, TaskContinuationOptions)\n  nameWithType: TaskFactory.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, TaskContinuationOptions)\n  fullName: TaskFactory.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, TaskContinuationOptions)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation task that starts when a set of specified tasks has completed.\n  syntax:\n    content: public System.Threading.Tasks.Task ContinueWhenAll<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Action<System.Threading.Tasks.Task<TAntecedentResult>[]> continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task{TAntecedentResult}[]\n      description: The array of tasks from which to continue.\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task{TAntecedentResult}[]}\n      description: The action delegate to execute when all tasks in the <code>tasks</code> array have completed.\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.\n    typeParameters:\n    - id: TAntecedentResult\n      description: The type of the result of the antecedent <code>tasks</code>.\n    return:\n      type: System.Threading.Tasks.Task\n      description: The new continuation task.\n  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: An element in the <code>tasks</code> array has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>tasks</code> array is `null`.  \\n  \\n -or-  \\n  \\n The <code>continuationAction</code> argument is `null`.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>continuationOptions</code> argument specifies an invalid value.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>tasks</code> array is empty or contains a null value.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken)\n  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, CancellationToken)\n  nameWithType: TaskFactory.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, CancellationToken)\n  fullName: TaskFactory.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation task that starts when a set of specified tasks has completed.\n  syntax:\n    content: public System.Threading.Tasks.Task ContinueWhenAll<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Action<System.Threading.Tasks.Task<TAntecedentResult>[]> continuationAction, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task{TAntecedentResult}[]\n      description: The array of tasks from which to continue.\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task{TAntecedentResult}[]}\n      description: The action delegate to execute when all tasks in the <code>tasks</code> array have completed.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The cancellation token to assign to the new continuation task.\n    typeParameters:\n    - id: TAntecedentResult\n      description: The type of the result of the antecedent <code>tasks</code>.\n    return:\n      type: System.Threading.Tasks.Task\n      description: The new continuation task.\n  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"An element in the <code>tasks</code> array has been disposed.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Threading.CancellationTokenSource\\\"></xref> that created <code>cancellationToken</code> has already been disposed.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>tasks</code> array is `null`.  \\n  \\n -or-  \\n  \\n The <code>continuationAction</code> argument is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>tasks</code> array is empty or contains a null value.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]})\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]})\n  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]})\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>)\n  nameWithType: TaskFactory.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>)\n  fullName: TaskFactory.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation task that starts when a set of specified tasks has completed.\n  syntax:\n    content: public System.Threading.Tasks.Task ContinueWhenAll<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Action<System.Threading.Tasks.Task<TAntecedentResult>[]> continuationAction);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task{TAntecedentResult}[]\n      description: The array of tasks from which to continue.\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task{TAntecedentResult}[]}\n      description: The action delegate to execute when all tasks in the <code>tasks</code> array have completed.\n    typeParameters:\n    - id: TAntecedentResult\n      description: The type of the result of the antecedent <code>tasks</code>.\n    return:\n      type: System.Threading.Tasks.Task\n      description: The new continuation task.\n  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: An element in the <code>tasks</code> array has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>tasks</code> array is `null`.  \\n  \\n -or-  \\n  \\n The <code>continuationAction</code> argument is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>tasks</code> array is empty or contains a null value.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0})\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0})\n  id: ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0})\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: ContinueWhenAll<TResult>(Task[], Func<Task[],TResult>)\n  nameWithType: TaskFactory.ContinueWhenAll<TResult>(Task[], Func<Task[],TResult>)\n  fullName: TaskFactory.ContinueWhenAll<TResult>(Task[], Func<Task[],TResult>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation task that starts when a set of specified tasks has completed.\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TResult> (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task[],TResult> continuationFunction);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: The array of tasks from which to continue.\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task[],TResult}\n      description: The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed.\n    typeParameters:\n    - id: TResult\n      description: The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created task.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The new continuation task.\n  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: An element in the <code>tasks</code> array has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>tasks</code> array is `null`.  \\n  \\n -or-  \\n  \\n The <code>continuationFunction</code> argument is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>tasks</code> array is empty or contains a null value.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken)\n  id: ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: ContinueWhenAll<TResult>(Task[], Func<Task[],TResult>, CancellationToken)\n  nameWithType: TaskFactory.ContinueWhenAll<TResult>(Task[], Func<Task[],TResult>, CancellationToken)\n  fullName: TaskFactory.ContinueWhenAll<TResult>(Task[], Func<Task[],TResult>, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation task that starts when a set of specified tasks has completed.\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TResult> (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task[],TResult> continuationFunction, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: The array of tasks from which to continue.\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task[],TResult}\n      description: The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The cancellation token to assign to the new continuation task.\n    typeParameters:\n    - id: TResult\n      description: The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created task.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The new continuation task.\n  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"An element in the <code>tasks</code> array has been disposed.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Threading.CancellationTokenSource\\\"></xref> that created <code>cancellationToken</code> has already been disposed.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>tasks</code> array is `null`.  \\n  \\n -or-  \\n  \\n The <code>continuationFunction</code> argument is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>tasks</code> array is empty or contains a null value.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.Tasks.TaskContinuationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.Tasks.TaskContinuationOptions)\n  id: ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: ContinueWhenAll<TResult>(Task[], Func<Task[],TResult>, TaskContinuationOptions)\n  nameWithType: TaskFactory.ContinueWhenAll<TResult>(Task[], Func<Task[],TResult>, TaskContinuationOptions)\n  fullName: TaskFactory.ContinueWhenAll<TResult>(Task[], Func<Task[],TResult>, TaskContinuationOptions)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation task that starts when a set of specified tasks has completed.\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TResult> (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task[],TResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: The array of tasks from which to continue.\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task[],TResult}\n      description: The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed.\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.\n    typeParameters:\n    - id: TResult\n      description: The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created task.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The new continuation task.\n  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: An element in the <code>tasks</code> array has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>tasks</code> array is `null`.  \\n  \\n -or-  \\n  \\n The <code>continuationFunction</code> argument is `null`.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>continuationOptions</code> argument specifies an invalid value.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>tasks</code> array is empty or contains a null value.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  id: ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: ContinueWhenAll<TResult>(Task[], Func<Task[],TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: TaskFactory.ContinueWhenAll<TResult>(Task[], Func<Task[],TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: TaskFactory.ContinueWhenAll<TResult>(Task[], Func<Task[],TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation task that starts when a set of specified tasks has completed.\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TResult> (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task[],TResult> continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: The array of tasks from which to continue.\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task[],TResult}\n      description: The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The cancellation token to assign to the new continuation task.\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: The object that is used to schedule the new continuation task.\n    typeParameters:\n    - id: TResult\n      description: The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created task.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The new continuation task.\n  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>tasks</code> array is `null`.  \\n  \\n -or-  \\n  \\n The <code>continuationFunction</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>scheduler</code> argument is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>tasks</code> array is empty or contains a null value.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)\n  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: ContinueWhenAny(Task[], Action<Task>, TaskContinuationOptions)\n  nameWithType: TaskFactory.ContinueWhenAny(Task[], Action<Task>, TaskContinuationOptions)\n  fullName: TaskFactory.ContinueWhenAny(Task[], Action<Task>, TaskContinuationOptions)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation <xref href=\"System.Threading.Tasks.Task\"></xref> that will be started upon the completion of any Task in the provided set.\n  remarks: The NotOn* and OnlyOn* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.\n  syntax:\n    content: public System.Threading.Tasks.Task ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Action<System.Threading.Tasks.Task> continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: The array of tasks from which to continue when one task completes.\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task}\n      description: The action delegate to execute when one task in the <code>tasks</code> array completes.\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: The <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref> value that controls the behavior of the created continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.\n    return:\n      type: System.Threading.Tasks.Task\n      description: The new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.\n  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAny*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The exception that is thrown when one of the elements in the <code>tasks</code> array has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The exception that is thrown when the <code>tasks</code> array is null.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>continuationAction</code> argument is null.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The exception that is thrown when the <code>continuationOptions</code> argument specifies an invalid TaskContinuationOptions value.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The exception that is thrown when the <code>tasks</code> array contains a null value.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>tasks</code> array is empty.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: ContinueWhenAny(Task[], Action<Task>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: TaskFactory.ContinueWhenAny(Task[], Action<Task>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: TaskFactory.ContinueWhenAny(Task[], Action<Task>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation <xref href=\"System.Threading.Tasks.Task\"></xref> that will be started upon the completion of any Task in the provided set.\n  syntax:\n    content: public System.Threading.Tasks.Task ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Action<System.Threading.Tasks.Task> continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: The array of tasks from which to continue when one task completes.\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task}\n      description: The action delegate to execute when one task in the <code>tasks</code> array completes.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new continuation task.\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: The <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref> value that controls the behavior of the created continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> that is used to schedule the created continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.\n    return:\n      type: System.Threading.Tasks.Task\n      description: The new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.\n  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAny*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The exception that is thrown when the <code>tasks</code> array is null.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>continuationAction</code> argument is null.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>scheduler</code> argument is null.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The exception that is thrown when the <code>tasks</code> array contains a null value.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>tasks</code> array is empty.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task})\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task})\n  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task})\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: ContinueWhenAny(Task[], Action<Task>)\n  nameWithType: TaskFactory.ContinueWhenAny(Task[], Action<Task>)\n  fullName: TaskFactory.ContinueWhenAny(Task[], Action<Task>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation <xref href=\"System.Threading.Tasks.Task\"></xref> that will be started upon the completion of any Task in the provided set.\n  remarks: ''\n  example:\n  - \"The following example shows how to use `ContinueWhenAny` and `ContinueWhenAll`:  \\n  \\n [!code-csharp[System.Threading.Tasks.Task#05](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/continuewhenmulti.cs#05)]\\n [!code-vb[System.Threading.Tasks.Task#05](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/continuewhenmulti.vb#05)]\"\n  syntax:\n    content: public System.Threading.Tasks.Task ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Action<System.Threading.Tasks.Task> continuationAction);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: The array of tasks from which to continue when one task completes.\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task}\n      description: The action delegate to execute when one task in the <code>tasks</code> array completes.\n    return:\n      type: System.Threading.Tasks.Task\n      description: The new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.\n  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAny*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: One of the elements in the <code>tasks</code> array has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>tasks</code> array is `null`.  \\n  \\n -or-  \\n  \\n The <code>continuationAction</code> argument is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>tasks</code> array contains a `null` value.  \\n  \\n -or-  \\n  \\n The <code>tasks</code> array is empty.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)\n  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: ContinueWhenAny(Task[], Action<Task>, CancellationToken)\n  nameWithType: TaskFactory.ContinueWhenAny(Task[], Action<Task>, CancellationToken)\n  fullName: TaskFactory.ContinueWhenAny(Task[], Action<Task>, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation <xref href=\"System.Threading.Tasks.Task\"></xref> that will be started upon the completion of any Task in the provided set.\n  syntax:\n    content: public System.Threading.Tasks.Task ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Action<System.Threading.Tasks.Task> continuationAction, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: The array of tasks from which to continue when one task completes.\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task}\n      description: The action delegate to execute when one task in the <code>tasks</code> array completes.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new continuation task.\n    return:\n      type: System.Threading.Tasks.Task\n      description: The new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.\n  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAny*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"One of the elements in the <code>tasks</code> array has been disposed.  \\n  \\n -or-  \\n  \\n <code>cancellationToken</code> has already been disposed.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>tasks</code> array is `null`.  \\n  \\n -or-  \\n  \\n The <code>continuationAction</code> argument is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>tasks</code> array contains a `null` value.  \\n  \\n -or-  \\n  \\n The <code>tasks</code> array is empty .\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)\n  id: ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: ContinueWhenAny<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, TaskContinuationOptions)\n  nameWithType: TaskFactory.ContinueWhenAny<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, TaskContinuationOptions)\n  fullName: TaskFactory.ContinueWhenAny<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, TaskContinuationOptions)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref> that will be started upon the completion of any Task in the provided set.\n  remarks: The NotOn* and OnlyOn* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TAntecedentResult,TResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>,TResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task{TAntecedentResult}[]\n      description: The array of tasks from which to continue when one task completes.\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task{TAntecedentResult},TResult}\n      description: The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes.\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: The <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref> value that controls the behavior of the created continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n    typeParameters:\n    - id: TAntecedentResult\n      description: The type of the result of the antecedent <code>tasks</code>.\n    - id: TResult\n      description: The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAny``2*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The exception that is thrown when one of the elements in the <code>tasks</code> array has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The exception that is thrown when the <code>tasks</code> array is null.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>continuationFunction</code> argument is null.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The exception that is thrown when the <code>continuationOptions</code> argument specifies an invalid TaskContinuationOptions value.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The exception that is thrown when the <code>tasks</code> array contains a null value.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>tasks</code> array is empty.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1})\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1})\n  id: ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1})\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: ContinueWhenAny<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>)\n  nameWithType: TaskFactory.ContinueWhenAny<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>)\n  fullName: TaskFactory.ContinueWhenAny<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref> that will be started upon the completion of any Task in the provided set.\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TAntecedentResult,TResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>,TResult> continuationFunction);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task{TAntecedentResult}[]\n      description: The array of tasks from which to continue when one task completes.\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task{TAntecedentResult},TResult}\n      description: The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes.\n    typeParameters:\n    - id: TAntecedentResult\n      description: The type of the result of the antecedent <code>tasks</code>.\n    - id: TResult\n      description: The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAny``2*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The exception that is thrown when one of the elements in the <code>tasks</code> array has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The exception that is thrown when the <code>tasks</code> array is null.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>continuationFunction</code> argument is null.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The exception that is thrown when the <code>tasks</code> array contains a null value.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>tasks</code> array is empty.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)\n  id: ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: ContinueWhenAny<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, CancellationToken)\n  nameWithType: TaskFactory.ContinueWhenAny<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, CancellationToken)\n  fullName: TaskFactory.ContinueWhenAny<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref> that will be started upon the completion of any Task in the provided set.\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TAntecedentResult,TResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>,TResult> continuationFunction, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task{TAntecedentResult}[]\n      description: The array of tasks from which to continue when one task completes.\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task{TAntecedentResult},TResult}\n      description: The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new continuation task.\n    typeParameters:\n    - id: TAntecedentResult\n      description: The type of the result of the antecedent <code>tasks</code>.\n    - id: TResult\n      description: The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAny``2*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"The exception that is thrown when one of the elements in the <code>tasks</code> array has been disposed.  \\n  \\n -or-  \\n  \\n The provided <xref href=\\\"System.Threading.CancellationToken\\\"></xref> has already been disposed.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The exception that is thrown when the <code>tasks</code> array is null.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>continuationFunction</code> argument is null.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The exception that is thrown when the <code>tasks</code> array contains a null value.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>tasks</code> array is empty.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  id: ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: ContinueWhenAny<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: TaskFactory.ContinueWhenAny<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: TaskFactory.ContinueWhenAny<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref> that will be started upon the completion of any Task in the provided set.\n  remarks: The NotOn* and OnlyOn* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TAntecedentResult,TResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>,TResult> continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task{TAntecedentResult}[]\n      description: The array of tasks from which to continue when one task completes.\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task{TAntecedentResult},TResult}\n      description: The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new continuation task.\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: The <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref> value that controls the behavior of the created continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> that is used to schedule the created continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n    typeParameters:\n    - id: TAntecedentResult\n      description: The type of the result of the antecedent <code>tasks</code>.\n    - id: TResult\n      description: The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAny``2*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The exception that is thrown when the <code>tasks</code> array is null.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>continuationFunction</code> argument is null.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>scheduler</code> argument is null.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The exception that is thrown when the <code>tasks</code> array contains a null value.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>tasks</code> array is empty.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}})\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}})\n  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}})\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>)\n  nameWithType: TaskFactory.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>)\n  fullName: TaskFactory.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation <xref href=\"System.Threading.Tasks.Task\"></xref> that will be started upon the completion of any Task in the provided set.\n  syntax:\n    content: public System.Threading.Tasks.Task ContinueWhenAny<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Action<System.Threading.Tasks.Task<TAntecedentResult>> continuationAction);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task{TAntecedentResult}[]\n      description: The array of tasks from which to continue when one task completes.\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task{TAntecedentResult}}\n      description: The action delegate to execute when one task in the <code>tasks</code> array completes.\n    typeParameters:\n    - id: TAntecedentResult\n      description: The type of the result of the antecedent <code>tasks</code>.\n    return:\n      type: System.Threading.Tasks.Task\n      description: The new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.\n  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The exception that is thrown when one of the elements in the <code>tasks</code> array has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The exception that is thrown when the <code>tasks</code> array is null.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>continuationAction</code> argument is null.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The exception that is thrown when the <code>tasks</code> array contains a null value.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>tasks</code> array is empty.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)\n  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, CancellationToken)\n  nameWithType: TaskFactory.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, CancellationToken)\n  fullName: TaskFactory.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation <xref href=\"System.Threading.Tasks.Task\"></xref> that will be started upon the completion of any Task in the provided set.\n  syntax:\n    content: public System.Threading.Tasks.Task ContinueWhenAny<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Action<System.Threading.Tasks.Task<TAntecedentResult>> continuationAction, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task{TAntecedentResult}[]\n      description: The array of tasks from which to continue when one task completes.\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task{TAntecedentResult}}\n      description: The action delegate to execute when one task in the <code>tasks</code> array completes.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new continuation task.\n    typeParameters:\n    - id: TAntecedentResult\n      description: The type of the result of the antecedent <code>tasks</code>.\n    return:\n      type: System.Threading.Tasks.Task\n      description: The new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.\n  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"The exception that is thrown when one of the elements in the <code>tasks</code> array has been disposed.  \\n  \\n -or-  \\n  \\n The provided <xref href=\\\"System.Threading.CancellationToken\\\"></xref> has already been disposed.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The exception that is thrown when the <code>tasks</code> array is null.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>continuationAction</code> argument is null.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The exception that is thrown when the <code>tasks</code> array contains a null value.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>tasks</code> array is empty.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)\n  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, TaskContinuationOptions)\n  nameWithType: TaskFactory.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, TaskContinuationOptions)\n  fullName: TaskFactory.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, TaskContinuationOptions)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation <xref href=\"System.Threading.Tasks.Task\"></xref> that will be started upon the completion of any Task in the provided set.\n  remarks: The NotOn* and OnlyOn* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.\n  syntax:\n    content: public System.Threading.Tasks.Task ContinueWhenAny<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Action<System.Threading.Tasks.Task<TAntecedentResult>> continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task{TAntecedentResult}[]\n      description: The array of tasks from which to continue when one task completes.\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task{TAntecedentResult}}\n      description: The action delegate to execute when one task in the <code>tasks</code> array completes.\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: The <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref> value that controls the behavior of the created continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.\n    typeParameters:\n    - id: TAntecedentResult\n      description: The type of the result of the antecedent <code>tasks</code>.\n    return:\n      type: System.Threading.Tasks.Task\n      description: The new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.\n  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The exception that is thrown when one of the elements in the <code>tasks</code> array has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The exception that is thrown when the <code>tasks</code> array is null.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>continuationAction</code> argument is null.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The exception that is thrown when the <code>continuationOptions</code> argument specifies an invalid TaskContinuationOptions value.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The exception that is thrown when the <code>tasks</code> array contains a null value.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>tasks</code> array is empty.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: TaskFactory.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: TaskFactory.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation <xref href=\"System.Threading.Tasks.Task\"></xref> that will be started upon the completion of any Task in the provided set.\n  remarks: The NotOn* and OnlyOn* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.\n  syntax:\n    content: public System.Threading.Tasks.Task ContinueWhenAny<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Action<System.Threading.Tasks.Task<TAntecedentResult>> continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task{TAntecedentResult}[]\n      description: The array of tasks from which to continue when one task completes.\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task{TAntecedentResult}}\n      description: The action delegate to execute when one task in the <code>tasks</code> array completes.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new continuation task.\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: The <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref> value that controls the behavior of the created continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> that is used to schedule the created continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n    typeParameters:\n    - id: TAntecedentResult\n      description: The type of the result of the antecedent <code>tasks</code>.\n    return:\n      type: System.Threading.Tasks.Task\n      description: The new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.\n  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The exception that is thrown when the <code>tasks</code> array is null.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>continuationAction</code> argument is null.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>scheduler</code> argument is null.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The exception that is thrown when the <code>tasks</code> array contains a null value.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>tasks</code> array is empty.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0})\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0})\n  id: ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0})\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: ContinueWhenAny<TResult>(Task[], Func<Task,TResult>)\n  nameWithType: TaskFactory.ContinueWhenAny<TResult>(Task[], Func<Task,TResult>)\n  fullName: TaskFactory.ContinueWhenAny<TResult>(Task[], Func<Task,TResult>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref> that will be started upon the completion of any Task in the provided set.\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TResult> (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task,TResult> continuationFunction);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: The array of tasks from which to continue when one task completes.\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task,TResult}\n      description: The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes.\n    typeParameters:\n    - id: TResult\n      description: The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The exception that is thrown when one of the elements in the <code>tasks</code> array has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The exception that is thrown when the <code>tasks</code> array is null.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>continuationFunction</code> argument is null.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The exception that is thrown when the <code>tasks</code> array contains a null value.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>tasks</code> array is empty.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)\n  id: ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: ContinueWhenAny<TResult>(Task[], Func<Task,TResult>, CancellationToken)\n  nameWithType: TaskFactory.ContinueWhenAny<TResult>(Task[], Func<Task,TResult>, CancellationToken)\n  fullName: TaskFactory.ContinueWhenAny<TResult>(Task[], Func<Task,TResult>, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref> that will be started upon the completion of any Task in the provided set.\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TResult> (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task,TResult> continuationFunction, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: The array of tasks from which to continue when one task completes.\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task,TResult}\n      description: The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new continuation task.\n    typeParameters:\n    - id: TResult\n      description: The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"The exception that is thrown when one of the elements in the <code>tasks</code> array has been disposed.  \\n  \\n -or-  \\n  \\n The provided <xref href=\\\"System.Threading.CancellationToken\\\"></xref> has already been disposed.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The exception that is thrown when the <code>tasks</code> array is null.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>continuationFunction</code> argument is null.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The exception that is thrown when the <code>tasks</code> array contains a null value.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>tasks</code> array is empty.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)\n  id: ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: ContinueWhenAny<TResult>(Task[], Func<Task,TResult>, TaskContinuationOptions)\n  nameWithType: TaskFactory.ContinueWhenAny<TResult>(Task[], Func<Task,TResult>, TaskContinuationOptions)\n  fullName: TaskFactory.ContinueWhenAny<TResult>(Task[], Func<Task,TResult>, TaskContinuationOptions)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref> that will be started upon the completion of any Task in the provided set.\n  remarks: The NotOn* and OnlyOn* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TResult> (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task,TResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: The array of tasks from which to continue when one task completes.\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task,TResult}\n      description: The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes.\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: The <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref> value that controls the behavior of the created continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n    typeParameters:\n    - id: TResult\n      description: The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The exception that is thrown when one of the elements in the <code>tasks</code> array has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The exception that is thrown when the <code>tasks</code> array is null.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>continuationFunction</code> argument is null.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The exception that is thrown when the <code>continuationOptions</code> argument specifies an invalid TaskContinuationOptions value.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The exception that is thrown when the <code>tasks</code> array contains a null value.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>tasks</code> array is empty.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  id: ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: ContinueWhenAny<TResult>(Task[], Func<Task,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: TaskFactory.ContinueWhenAny<TResult>(Task[], Func<Task,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: TaskFactory.ContinueWhenAny<TResult>(Task[], Func<Task,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref> that will be started upon the completion of any Task in the provided set.\n  remarks: The NotOn* and OnlyOn* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TResult> (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task,TResult> continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: The array of tasks from which to continue when one task completes.\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task,TResult}\n      description: The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new continuation task.\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: The <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref> value that controls the behavior of the created continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> that is used to schedule the created continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n    typeParameters:\n    - id: TResult\n      description: The type of the result that is returned by the <code>continuationFunction</code> delegate and associated with the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The exception that is thrown when the <code>tasks</code> array is null.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>continuationFunction</code> argument is null.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>scheduler</code> argument is null.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The exception that is thrown when the <code>tasks</code> array contains a null value.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>tasks</code> array is empty.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.CreationOptions\n  commentId: P:System.Threading.Tasks.TaskFactory.CreationOptions\n  id: CreationOptions\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: CreationOptions\n  nameWithType: TaskFactory.CreationOptions\n  fullName: TaskFactory.CreationOptions\n  type: Property\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Gets the default task creation options for this task factory.\n  remarks: The property value is used to create all tasks, unless other options are explicitly specified during calls to this factory's methods.\n  syntax:\n    content: public System.Threading.Tasks.TaskCreationOptions CreationOptions { get; }\n    return:\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: The default task creation options for this task factory.\n  overload: System.Threading.Tasks.TaskFactory.CreationOptions*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult})\n  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult})\n  id: FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult})\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: FromAsync(IAsyncResult, Action<IAsyncResult>)\n  nameWithType: TaskFactory.FromAsync(IAsyncResult, Action<IAsyncResult>)\n  fullName: TaskFactory.FromAsync(IAsyncResult, Action<IAsyncResult>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a <xref href=\"System.Threading.Tasks.Task\"></xref> that executes an end method action when a specified <xref href=\"System.IAsyncResult\"></xref> completes.\n  remarks: >-\n    > [!TIP]\n\n    >  The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter. If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.\n  syntax:\n    content: public System.Threading.Tasks.Task FromAsync (IAsyncResult asyncResult, Action<IAsyncResult> endMethod);\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: The IAsyncResult whose completion should trigger the processing of the <code>endMethod</code>.\n    - id: endMethod\n      type: System.Action{System.IAsyncResult}\n      description: The action delegate that processes the completed <code>asyncResult</code>.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A <xref href=\"System.Threading.Tasks.Task\"></xref> that represents the asynchronous operation.\n  overload: System.Threading.Tasks.TaskFactory.FromAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The exception that is thrown when the <code>asyncResult</code> argument is null.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>endMethod</code> argument is null.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object)\n  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object)\n  id: FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: FromAsync(Func<AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, Object)\n  nameWithType: TaskFactory.FromAsync(Func<AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, Object)\n  fullName: TaskFactory.FromAsync(Func<AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, Object)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a <xref href=\"System.Threading.Tasks.Task\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.\n  remarks: The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.  This method throws any exceptions thrown by the `beginMethod`.\n  syntax:\n    content: public System.Threading.Tasks.Task FromAsync (Func<AsyncCallback,object,IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, object state);\n    parameters:\n    - id: beginMethod\n      type: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}\n      description: The delegate that begins the asynchronous operation.\n    - id: endMethod\n      type: System.Action{System.IAsyncResult}\n      description: The delegate that ends the asynchronous operation.\n    - id: state\n      type: System.Object\n      description: An object containing data to be used by the <code>beginMethod</code> delegate.\n    return:\n      type: System.Threading.Tasks.Task\n      description: The created <xref href=\"System.Threading.Tasks.Task\"></xref> that represents the asynchronous operation.\n  overload: System.Threading.Tasks.TaskFactory.FromAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The exception that is thrown when the <code>beginMethod</code> argument is null.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>endMethod</code> argument is null.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)\n  id: FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: FromAsync(IAsyncResult, Action<IAsyncResult>, TaskCreationOptions)\n  nameWithType: TaskFactory.FromAsync(IAsyncResult, Action<IAsyncResult>, TaskCreationOptions)\n  fullName: TaskFactory.FromAsync(IAsyncResult, Action<IAsyncResult>, TaskCreationOptions)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a <xref href=\"System.Threading.Tasks.Task\"></xref> that executes an end method action when a specified <xref href=\"System.IAsyncResult\"></xref> completes.\n  remarks: >-\n    > [!TIP]\n\n    >  The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter. If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.\n  syntax:\n    content: public System.Threading.Tasks.Task FromAsync (IAsyncResult asyncResult, Action<IAsyncResult> endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions);\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: The IAsyncResult whose completion should trigger the processing of the <code>endMethod</code>.\n    - id: endMethod\n      type: System.Action{System.IAsyncResult}\n      description: The action delegate that processes the completed <code>asyncResult</code>.\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task\"></xref>.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A <xref href=\"System.Threading.Tasks.Task\"></xref> that represents the asynchronous operation.\n  overload: System.Threading.Tasks.TaskFactory.FromAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The exception that is thrown when the <code>asyncResult</code> argument is null.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>endMethod</code> argument is null.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  id: FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: FromAsync(Func<AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, Object, TaskCreationOptions)\n  nameWithType: TaskFactory.FromAsync(Func<AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, Object, TaskCreationOptions)\n  fullName: TaskFactory.FromAsync(Func<AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, Object, TaskCreationOptions)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a <xref href=\"System.Threading.Tasks.Task\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.\n  remarks: The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on. This method throws any exceptions thrown by the `beginMethod`. The <xref:System.Threading.Tasks.TaskCreationOptions> values <xref:System.Threading.Tasks.TaskCreationOptions.PreferFairness>, <xref:System.Threading.Tasks.TaskCreationOptions.LongRunning> and <xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent> are all mutually exclusive. In the FromAsync methods, either `LongRunning` or `AttachedToParent` by themselves will cause an <xref:System.ArgumentOutOfRangeException> to be thrown.\n  syntax:\n    content: public System.Threading.Tasks.Task FromAsync (Func<AsyncCallback,object,IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);\n    parameters:\n    - id: beginMethod\n      type: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}\n      description: The delegate that begins the asynchronous operation.\n    - id: endMethod\n      type: System.Action{System.IAsyncResult}\n      description: The delegate that ends the asynchronous operation.\n    - id: state\n      type: System.Object\n      description: An object containing data to be used by the <code>beginMethod</code> delegate.\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task\"></xref>.\n    return:\n      type: System.Threading.Tasks.Task\n      description: The created <xref href=\"System.Threading.Tasks.Task\"></xref> that represents the asynchronous operation.\n  overload: System.Threading.Tasks.TaskFactory.FromAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The exception that is thrown when the <code>beginMethod</code> argument is null.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>endMethod</code> argument is null.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  id: FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: FromAsync(IAsyncResult, Action<IAsyncResult>, TaskCreationOptions, TaskScheduler)\n  nameWithType: TaskFactory.FromAsync(IAsyncResult, Action<IAsyncResult>, TaskCreationOptions, TaskScheduler)\n  fullName: TaskFactory.FromAsync(IAsyncResult, Action<IAsyncResult>, TaskCreationOptions, TaskScheduler)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a <xref href=\"System.Threading.Tasks.Task\"></xref> that executes an end method action when a specified <xref href=\"System.IAsyncResult\"></xref> completes.\n  remarks: >-\n    > [!TIP]\n\n    >  The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter. If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.\n  syntax:\n    content: public System.Threading.Tasks.Task FromAsync (IAsyncResult asyncResult, Action<IAsyncResult> endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: The IAsyncResult whose completion should trigger the processing of the <code>endMethod</code>.\n    - id: endMethod\n      type: System.Action{System.IAsyncResult}\n      description: The action delegate that processes the completed <code>asyncResult</code>.\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task\"></xref>.\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> that is used to schedule the task that executes the end method.\n    return:\n      type: System.Threading.Tasks.Task\n      description: The created <xref href=\"System.Threading.Tasks.Task\"></xref> that represents the asynchronous operation.\n  overload: System.Threading.Tasks.TaskFactory.FromAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The exception that is thrown when the <code>asyncResult</code> argument is null.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>endMethod</code> argument is null.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>scheduler</code> argument is null.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  id: FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: FromAsync<TArg1,TArg2,TArg3,TResult>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)\n  nameWithType: TaskFactory.FromAsync<TArg1,TArg2,TArg3,TResult>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)\n  fullName: TaskFactory.FromAsync<TArg1,TArg2,TArg3,TResult>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.\n  remarks: The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on. This method throws any exceptions thrown by the `beginMethod`.\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> FromAsync<TArg1,TArg2,TArg3,TResult> (Func<TArg1,TArg2,TArg3,AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);\n    parameters:\n    - id: beginMethod\n      type: System.Func{TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult}\n      description: The delegate that begins the asynchronous operation.\n    - id: endMethod\n      type: System.Func{System.IAsyncResult,TResult}\n      description: The delegate that ends the asynchronous operation.\n    - id: arg1\n      type: TArg1\n      description: The first argument passed to the <code>beginMethod</code> delegate.\n    - id: arg2\n      type: TArg2\n      description: The second argument passed to the <code>beginMethod</code> delegate.\n    - id: arg3\n      type: TArg3\n      description: The third argument passed to the <code>beginMethod</code> delegate.\n    - id: state\n      type: System.Object\n      description: An object containing data to be used by the <code>beginMethod</code> delegate.\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n    typeParameters:\n    - id: TArg1\n      description: The type of the second argument passed to <code>beginMethod</code> delegate.\n    - id: TArg2\n      description: The type of the third argument passed to <code>beginMethod</code> delegate.\n    - id: TArg3\n      description: The type of the first argument passed to the <code>beginMethod</code> delegate.\n    - id: TResult\n      description: The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The created <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents the asynchronous operation.\n  overload: System.Threading.Tasks.TaskFactory.FromAsync``4*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The exception that is thrown when the <code>beginMethod</code> argument is null.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>endMethod</code> argument is null.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)\n  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)\n  id: FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: FromAsync<TArg1,TArg2,TArg3,TResult>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, TArg3, Object)\n  nameWithType: TaskFactory.FromAsync<TArg1,TArg2,TArg3,TResult>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, TArg3, Object)\n  fullName: TaskFactory.FromAsync<TArg1,TArg2,TArg3,TResult>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, TArg3, Object)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.\n  remarks: The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on. This method throws any exceptions thrown by the `beginMethod`.\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> FromAsync<TArg1,TArg2,TArg3,TResult> (Func<TArg1,TArg2,TArg3,AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state);\n    parameters:\n    - id: beginMethod\n      type: System.Func{TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult}\n      description: The delegate that begins the asynchronous operation.\n    - id: endMethod\n      type: System.Func{System.IAsyncResult,TResult}\n      description: The delegate that ends the asynchronous operation.\n    - id: arg1\n      type: TArg1\n      description: The first argument passed to the <code>beginMethod</code> delegate.\n    - id: arg2\n      type: TArg2\n      description: The second argument passed to the <code>beginMethod</code> delegate.\n    - id: arg3\n      type: TArg3\n      description: The third argument passed to the <code>beginMethod</code> delegate.\n    - id: state\n      type: System.Object\n      description: An object containing data to be used by the <code>beginMethod</code> delegate.\n    typeParameters:\n    - id: TArg1\n      description: The type of the second argument passed to <code>beginMethod</code> delegate.\n    - id: TArg2\n      description: The type of the third argument passed to <code>beginMethod</code> delegate.\n    - id: TArg3\n      description: The type of the first argument passed to the <code>beginMethod</code> delegate.\n    - id: TResult\n      description: The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The created <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents the asynchronous operation.\n  overload: System.Threading.Tasks.TaskFactory.FromAsync``4*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The exception that is thrown when the <code>beginMethod</code> argument is null.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>endMethod</code> argument is null.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  id: FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: FromAsync<TArg1,TArg2,TArg3>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)\n  nameWithType: TaskFactory.FromAsync<TArg1,TArg2,TArg3>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)\n  fullName: TaskFactory.FromAsync<TArg1,TArg2,TArg3>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a <xref href=\"System.Threading.Tasks.Task\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.\n  remarks: The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on. This method throws any exceptions thrown by the `beginMethod`.\n  syntax:\n    content: public System.Threading.Tasks.Task FromAsync<TArg1,TArg2,TArg3> (Func<TArg1,TArg2,TArg3,AsyncCallback,object,IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);\n    parameters:\n    - id: beginMethod\n      type: System.Func{TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult}\n      description: The delegate that begins the asynchronous operation.\n    - id: endMethod\n      type: System.Action{System.IAsyncResult}\n      description: The delegate that ends the asynchronous operation.\n    - id: arg1\n      type: TArg1\n      description: The first argument passed to the <code>beginMethod</code> delegate.\n    - id: arg2\n      type: TArg2\n      description: The second argument passed to the <code>beginMethod</code> delegate.\n    - id: arg3\n      type: TArg3\n      description: The third argument passed to the <code>beginMethod</code> delegate.\n    - id: state\n      type: System.Object\n      description: An object containing data to be used by the <code>beginMethod</code> delegate.\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task\"></xref>.\n    typeParameters:\n    - id: TArg1\n      description: The type of the second argument passed to <code>beginMethod</code> delegate.\n    - id: TArg2\n      description: The type of the third argument passed to <code>beginMethod</code> delegate.\n    - id: TArg3\n      description: The type of the first argument passed to the <code>beginMethod</code> delegate.\n    return:\n      type: System.Threading.Tasks.Task\n      description: The created <xref href=\"System.Threading.Tasks.Task\"></xref> that represents the asynchronous operation.\n  overload: System.Threading.Tasks.TaskFactory.FromAsync``3*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The exception that is thrown when the <code>beginMethod</code> argument is null.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>endMethod</code> argument is null.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)\n  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)\n  id: FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: FromAsync<TArg1,TArg2,TArg3>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, TArg3, Object)\n  nameWithType: TaskFactory.FromAsync<TArg1,TArg2,TArg3>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, TArg3, Object)\n  fullName: TaskFactory.FromAsync<TArg1,TArg2,TArg3>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, TArg3, Object)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a <xref href=\"System.Threading.Tasks.Task\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.\n  remarks: The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on. This method throws any exceptions thrown by the `beginMethod`.\n  syntax:\n    content: public System.Threading.Tasks.Task FromAsync<TArg1,TArg2,TArg3> (Func<TArg1,TArg2,TArg3,AsyncCallback,object,IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state);\n    parameters:\n    - id: beginMethod\n      type: System.Func{TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult}\n      description: The delegate that begins the asynchronous operation.\n    - id: endMethod\n      type: System.Action{System.IAsyncResult}\n      description: The delegate that ends the asynchronous operation.\n    - id: arg1\n      type: TArg1\n      description: The first argument passed to the <code>beginMethod</code> delegate.\n    - id: arg2\n      type: TArg2\n      description: The second argument passed to the <code>beginMethod</code> delegate.\n    - id: arg3\n      type: TArg3\n      description: The third argument passed to the <code>beginMethod</code> delegate.\n    - id: state\n      type: System.Object\n      description: An object containing data to be used by the <code>beginMethod</code> delegate.\n    typeParameters:\n    - id: TArg1\n      description: The type of the second argument passed to <code>beginMethod</code> delegate.\n    - id: TArg2\n      description: The type of the third argument passed to <code>beginMethod</code> delegate.\n    - id: TArg3\n      description: The type of the first argument passed to the <code>beginMethod</code> delegate.\n    return:\n      type: System.Threading.Tasks.Task\n      description: The created <xref href=\"System.Threading.Tasks.Task\"></xref> that represents the asynchronous operation.\n  overload: System.Threading.Tasks.TaskFactory.FromAsync``3*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The exception that is thrown when the <code>beginMethod</code> argument is null.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>endMethod</code> argument is null.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)\n  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)\n  id: FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: FromAsync<TArg1,TArg2,TResult>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, Object)\n  nameWithType: TaskFactory.FromAsync<TArg1,TArg2,TResult>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, Object)\n  fullName: TaskFactory.FromAsync<TArg1,TArg2,TResult>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, Object)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.\n  remarks: The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on. This method throws any exceptions thrown by the `beginMethod`.\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> FromAsync<TArg1,TArg2,TResult> (Func<TArg1,TArg2,AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, TArg1 arg1, TArg2 arg2, object state);\n    parameters:\n    - id: beginMethod\n      type: System.Func{TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult}\n      description: The delegate that begins the asynchronous operation.\n    - id: endMethod\n      type: System.Func{System.IAsyncResult,TResult}\n      description: The delegate that ends the asynchronous operation.\n    - id: arg1\n      type: TArg1\n      description: The first argument passed to the <code>beginMethod</code> delegate.\n    - id: arg2\n      type: TArg2\n      description: The second argument passed to the <code>beginMethod</code> delegate.\n    - id: state\n      type: System.Object\n      description: An object containing data to be used by the <code>beginMethod</code> delegate.\n    typeParameters:\n    - id: TArg1\n      description: The type of the second argument passed to <code>beginMethod</code> delegate.\n    - id: TArg2\n      description: The type of the first argument passed to the <code>beginMethod</code> delegate.\n    - id: TResult\n      description: The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The created <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents the asynchronous operation.\n  overload: System.Threading.Tasks.TaskFactory.FromAsync``3*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The exception that is thrown when the <code>beginMethod</code> argument is null.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>endMethod</code> argument is null.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  id: FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: FromAsync<TArg1,TArg2,TResult>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, Object, TaskCreationOptions)\n  nameWithType: TaskFactory.FromAsync<TArg1,TArg2,TResult>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, Object, TaskCreationOptions)\n  fullName: TaskFactory.FromAsync<TArg1,TArg2,TResult>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, Object, TaskCreationOptions)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.\n  remarks: The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on. This method throws any exceptions thrown by the `beginMethod`.\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> FromAsync<TArg1,TArg2,TResult> (Func<TArg1,TArg2,AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, TArg1 arg1, TArg2 arg2, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);\n    parameters:\n    - id: beginMethod\n      type: System.Func{TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult}\n      description: The delegate that begins the asynchronous operation.\n    - id: endMethod\n      type: System.Func{System.IAsyncResult,TResult}\n      description: The delegate that ends the asynchronous operation.\n    - id: arg1\n      type: TArg1\n      description: The first argument passed to the <code>beginMethod</code> delegate.\n    - id: arg2\n      type: TArg2\n      description: The second argument passed to the <code>beginMethod</code> delegate.\n    - id: state\n      type: System.Object\n      description: An object containing data to be used by the <code>beginMethod</code> delegate.\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n    typeParameters:\n    - id: TArg1\n      description: The type of the second argument passed to <code>beginMethod</code> delegate.\n    - id: TArg2\n      description: The type of the first argument passed to the <code>beginMethod</code> delegate.\n    - id: TResult\n      description: The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The created <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents the asynchronous operation.\n  overload: System.Threading.Tasks.TaskFactory.FromAsync``3*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The exception that is thrown when the <code>beginMethod</code> argument is null.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>endMethod</code> argument is null.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)\n  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)\n  id: FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: FromAsync<TArg1,TArg2>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, Object)\n  nameWithType: TaskFactory.FromAsync<TArg1,TArg2>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, Object)\n  fullName: TaskFactory.FromAsync<TArg1,TArg2>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, Object)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a <xref href=\"System.Threading.Tasks.Task\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.\n  remarks: The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on. This method throws any exceptions thrown by the `beginMethod`.\n  syntax:\n    content: public System.Threading.Tasks.Task FromAsync<TArg1,TArg2> (Func<TArg1,TArg2,AsyncCallback,object,IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, TArg2 arg2, object state);\n    parameters:\n    - id: beginMethod\n      type: System.Func{TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult}\n      description: The delegate that begins the asynchronous operation.\n    - id: endMethod\n      type: System.Action{System.IAsyncResult}\n      description: The delegate that ends the asynchronous operation.\n    - id: arg1\n      type: TArg1\n      description: The first argument passed to the <code>beginMethod</code> delegate.\n    - id: arg2\n      type: TArg2\n      description: The second argument passed to the <code>beginMethod</code> delegate.\n    - id: state\n      type: System.Object\n      description: An object containing data to be used by the <code>beginMethod</code> delegate.\n    typeParameters:\n    - id: TArg1\n      description: The type of the second argument passed to <code>beginMethod</code> delegate.\n    - id: TArg2\n      description: The type of the first argument passed to the <code>beginMethod</code> delegate.\n    return:\n      type: System.Threading.Tasks.Task\n      description: The created <xref href=\"System.Threading.Tasks.Task\"></xref> that represents the asynchronous operation.\n  overload: System.Threading.Tasks.TaskFactory.FromAsync``2*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The exception that is thrown when the <code>beginMethod</code> argument is null.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>endMethod</code> argument is null.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  id: FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: FromAsync<TArg1,TArg2>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, Object, TaskCreationOptions)\n  nameWithType: TaskFactory.FromAsync<TArg1,TArg2>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, Object, TaskCreationOptions)\n  fullName: TaskFactory.FromAsync<TArg1,TArg2>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, Object, TaskCreationOptions)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a <xref href=\"System.Threading.Tasks.Task\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.\n  remarks: The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on. This method throws any exceptions thrown by the `beginMethod`.\n  syntax:\n    content: public System.Threading.Tasks.Task FromAsync<TArg1,TArg2> (Func<TArg1,TArg2,AsyncCallback,object,IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, TArg2 arg2, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);\n    parameters:\n    - id: beginMethod\n      type: System.Func{TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult}\n      description: The delegate that begins the asynchronous operation.\n    - id: endMethod\n      type: System.Action{System.IAsyncResult}\n      description: The delegate that ends the asynchronous operation.\n    - id: arg1\n      type: TArg1\n      description: The first argument passed to the <code>beginMethod</code> delegate.\n    - id: arg2\n      type: TArg2\n      description: The second argument passed to the <code>beginMethod</code> delegate.\n    - id: state\n      type: System.Object\n      description: An object containing data to be used by the <code>beginMethod</code> delegate.\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task\"></xref>.\n    typeParameters:\n    - id: TArg1\n      description: The type of the second argument passed to <code>beginMethod</code> delegate.\n    - id: TArg2\n      description: The type of the first argument passed to the <code>beginMethod</code> delegate.\n    return:\n      type: System.Threading.Tasks.Task\n      description: The created <xref href=\"System.Threading.Tasks.Task\"></xref> that represents the asynchronous operation.\n  overload: System.Threading.Tasks.TaskFactory.FromAsync``2*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The exception that is thrown when the <code>beginMethod</code> argument is null.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>endMethod</code> argument is null.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object)\n  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object)\n  id: FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: FromAsync<TArg1,TResult>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, Object)\n  nameWithType: TaskFactory.FromAsync<TArg1,TResult>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, Object)\n  fullName: TaskFactory.FromAsync<TArg1,TResult>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, Object)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.\n  remarks: The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on. This method throws any exceptions thrown by the `beginMethod`.\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> FromAsync<TArg1,TResult> (Func<TArg1,AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, TArg1 arg1, object state);\n    parameters:\n    - id: beginMethod\n      type: System.Func{TArg1,System.AsyncCallback,System.Object,System.IAsyncResult}\n      description: The delegate that begins the asynchronous operation.\n    - id: endMethod\n      type: System.Func{System.IAsyncResult,TResult}\n      description: The delegate that ends the asynchronous operation.\n    - id: arg1\n      type: TArg1\n      description: The first argument passed to the <code>beginMethod</code> delegate.\n    - id: state\n      type: System.Object\n      description: An object containing data to be used by the <code>beginMethod</code> delegate.\n    typeParameters:\n    - id: TArg1\n      description: The type of the first argument passed to the <code>beginMethod</code> delegate.\n    - id: TResult\n      description: The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The created <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents the asynchronous operation.\n  overload: System.Threading.Tasks.TaskFactory.FromAsync``2*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The exception that is thrown when the <code>beginMethod</code> argument is null.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>endMethod</code> argument is null.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  id: FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: FromAsync<TArg1,TResult>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, Object, TaskCreationOptions)\n  nameWithType: TaskFactory.FromAsync<TArg1,TResult>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, Object, TaskCreationOptions)\n  fullName: TaskFactory.FromAsync<TArg1,TResult>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, Object, TaskCreationOptions)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.\n  remarks: The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on. This method throws any exceptions thrown by the `beginMethod`.\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> FromAsync<TArg1,TResult> (Func<TArg1,AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, TArg1 arg1, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);\n    parameters:\n    - id: beginMethod\n      type: System.Func{TArg1,System.AsyncCallback,System.Object,System.IAsyncResult}\n      description: The delegate that begins the asynchronous operation.\n    - id: endMethod\n      type: System.Func{System.IAsyncResult,TResult}\n      description: The delegate that ends the asynchronous operation.\n    - id: arg1\n      type: TArg1\n      description: The first argument passed to the <code>beginMethod</code> delegate.\n    - id: state\n      type: System.Object\n      description: An object containing data to be used by the <code>beginMethod</code> delegate.\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n    typeParameters:\n    - id: TArg1\n      description: The type of the first argument passed to the <code>beginMethod</code> delegate.\n    - id: TResult\n      description: The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The created <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents the asynchronous operation.\n  overload: System.Threading.Tasks.TaskFactory.FromAsync``2*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The exception that is thrown when the <code>beginMethod</code> argument is null.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>endMethod</code> argument is null.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  id: FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: FromAsync<TArg1>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, Object, TaskCreationOptions)\n  nameWithType: TaskFactory.FromAsync<TArg1>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, Object, TaskCreationOptions)\n  fullName: TaskFactory.FromAsync<TArg1>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, Object, TaskCreationOptions)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a <xref href=\"System.Threading.Tasks.Task\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.\n  remarks: The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on. This method throws any exceptions thrown by the `beginMethod`.\n  syntax:\n    content: public System.Threading.Tasks.Task FromAsync<TArg1> (Func<TArg1,AsyncCallback,object,IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);\n    parameters:\n    - id: beginMethod\n      type: System.Func{TArg1,System.AsyncCallback,System.Object,System.IAsyncResult}\n      description: The delegate that begins the asynchronous operation.\n    - id: endMethod\n      type: System.Action{System.IAsyncResult}\n      description: The delegate that ends the asynchronous operation.\n    - id: arg1\n      type: TArg1\n      description: The first argument passed to the <code>beginMethod</code> delegate.\n    - id: state\n      type: System.Object\n      description: An object containing data to be used by the <code>beginMethod</code> delegate.\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task\"></xref>.\n    typeParameters:\n    - id: TArg1\n      description: The type of the first argument passed to the <code>beginMethod</code> delegate.\n    return:\n      type: System.Threading.Tasks.Task\n      description: The created <xref href=\"System.Threading.Tasks.Task\"></xref> that represents the asynchronous operation.\n  overload: System.Threading.Tasks.TaskFactory.FromAsync``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The exception that is thrown when the <code>beginMethod</code> argument is null.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>endMethod</code> argument is null.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object)\n  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object)\n  id: FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: FromAsync<TArg1>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, Object)\n  nameWithType: TaskFactory.FromAsync<TArg1>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, Object)\n  fullName: TaskFactory.FromAsync<TArg1>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, Object)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a <xref href=\"System.Threading.Tasks.Task\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.\n  remarks: The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on. This method throws any exceptions thrown by the `beginMethod`.\n  syntax:\n    content: public System.Threading.Tasks.Task FromAsync<TArg1> (Func<TArg1,AsyncCallback,object,IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, object state);\n    parameters:\n    - id: beginMethod\n      type: System.Func{TArg1,System.AsyncCallback,System.Object,System.IAsyncResult}\n      description: The delegate that begins the asynchronous operation.\n    - id: endMethod\n      type: System.Action{System.IAsyncResult}\n      description: The delegate that ends the asynchronous operation.\n    - id: arg1\n      type: TArg1\n      description: The first argument passed to the <code>beginMethod</code> delegate.\n    - id: state\n      type: System.Object\n      description: An object containing data to be used by the <code>beginMethod</code> delegate.\n    typeParameters:\n    - id: TArg1\n      description: The type of the first argument passed to the <code>beginMethod</code> delegate.\n    return:\n      type: System.Threading.Tasks.Task\n      description: The created <xref href=\"System.Threading.Tasks.Task\"></xref> that represents the asynchronous operation.\n  overload: System.Threading.Tasks.TaskFactory.FromAsync``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The exception that is thrown when the <code>beginMethod</code> argument is null.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>endMethod</code> argument is null.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  id: FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: FromAsync<TResult>(IAsyncResult, Func<IAsyncResult,TResult>, TaskCreationOptions, TaskScheduler)\n  nameWithType: TaskFactory.FromAsync<TResult>(IAsyncResult, Func<IAsyncResult,TResult>, TaskCreationOptions, TaskScheduler)\n  fullName: TaskFactory.FromAsync<TResult>(IAsyncResult, Func<IAsyncResult,TResult>, TaskCreationOptions, TaskScheduler)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a <xref href=\"System.Threading.Tasks.Task`1\"></xref> that executes an end method function when a specified <xref href=\"System.IAsyncResult\"></xref> completes.\n  remarks: >-\n    > [!TIP]\n\n    >  The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter. If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> FromAsync<TResult> (IAsyncResult asyncResult, Func<IAsyncResult,TResult> endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: The IAsyncResult whose completion should trigger the processing of the <code>endMethod</code>.\n    - id: endMethod\n      type: System.Func{System.IAsyncResult,TResult}\n      description: The function delegate that processes the completed <code>asyncResult</code>.\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> that is used to schedule the task that executes the end method.\n    typeParameters:\n    - id: TResult\n      description: The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: A <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents the asynchronous operation.\n  overload: System.Threading.Tasks.TaskFactory.FromAsync``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The exception that is thrown when the <code>asyncResult</code> argument is null.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>endMethod</code> argument is null.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>scheduler</code> argument is null.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions)\n  id: FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: FromAsync<TResult>(IAsyncResult, Func<IAsyncResult,TResult>, TaskCreationOptions)\n  nameWithType: TaskFactory.FromAsync<TResult>(IAsyncResult, Func<IAsyncResult,TResult>, TaskCreationOptions)\n  fullName: TaskFactory.FromAsync<TResult>(IAsyncResult, Func<IAsyncResult,TResult>, TaskCreationOptions)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a <xref href=\"System.Threading.Tasks.Task`1\"></xref> that executes an end method function when a specified <xref href=\"System.IAsyncResult\"></xref> completes.\n  remarks: >-\n    > [!TIP]\n\n    >  The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter. If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> FromAsync<TResult> (IAsyncResult asyncResult, Func<IAsyncResult,TResult> endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions);\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: The IAsyncResult whose completion should trigger the processing of the <code>endMethod</code>.\n    - id: endMethod\n      type: System.Func{System.IAsyncResult,TResult}\n      description: The function delegate that processes the completed <code>asyncResult</code>.\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n    typeParameters:\n    - id: TResult\n      description: The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: A <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents the asynchronous operation.\n  overload: System.Threading.Tasks.TaskFactory.FromAsync``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The exception that is thrown when the <code>asyncResult</code> argument is null.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>endMethod</code> argument is null.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object)\n  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object)\n  id: FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: FromAsync<TResult>(Func<AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, Object)\n  nameWithType: TaskFactory.FromAsync<TResult>(Func<AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, Object)\n  fullName: TaskFactory.FromAsync<TResult>(Func<AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, Object)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.\n  remarks: This method throws any exceptions thrown by the `beginMethod`.\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> FromAsync<TResult> (Func<AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, object state);\n    parameters:\n    - id: beginMethod\n      type: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}\n      description: The delegate that begins the asynchronous operation.\n    - id: endMethod\n      type: System.Func{System.IAsyncResult,TResult}\n      description: The delegate that ends the asynchronous operation.\n    - id: state\n      type: System.Object\n      description: An object containing data to be used by the <code>beginMethod</code> delegate.\n    typeParameters:\n    - id: TResult\n      description: The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The created <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents the asynchronous operation.\n  overload: System.Threading.Tasks.TaskFactory.FromAsync``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The exception that is thrown when the <code>beginMethod</code> argument is null.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>endMethod</code> argument is null.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0})\n  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0})\n  id: FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0})\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: FromAsync<TResult>(IAsyncResult, Func<IAsyncResult,TResult>)\n  nameWithType: TaskFactory.FromAsync<TResult>(IAsyncResult, Func<IAsyncResult,TResult>)\n  fullName: TaskFactory.FromAsync<TResult>(IAsyncResult, Func<IAsyncResult,TResult>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a <xref href=\"System.Threading.Tasks.Task`1\"></xref> that executes an end method function when a specified <xref href=\"System.IAsyncResult\"></xref> completes.\n  remarks: >-\n    > [!TIP]\n\n    >  The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter. If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> FromAsync<TResult> (IAsyncResult asyncResult, Func<IAsyncResult,TResult> endMethod);\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: The IAsyncResult whose completion should trigger the processing of the <code>endMethod</code>.\n    - id: endMethod\n      type: System.Func{System.IAsyncResult,TResult}\n      description: The function delegate that processes the completed <code>asyncResult</code>.\n    typeParameters:\n    - id: TResult\n      description: The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: A <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents the asynchronous operation.\n  overload: System.Threading.Tasks.TaskFactory.FromAsync``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The exception that is thrown when the <code>asyncResult</code> argument is null.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>endMethod</code> argument is null.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  id: FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: FromAsync<TResult>(Func<AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, Object, TaskCreationOptions)\n  nameWithType: TaskFactory.FromAsync<TResult>(Func<AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, Object, TaskCreationOptions)\n  fullName: TaskFactory.FromAsync<TResult>(Func<AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, Object, TaskCreationOptions)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.\n  remarks: This method throws any exceptions thrown by the `beginMethod`.\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> FromAsync<TResult> (Func<AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);\n    parameters:\n    - id: beginMethod\n      type: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}\n      description: The delegate that begins the asynchronous operation.\n    - id: endMethod\n      type: System.Func{System.IAsyncResult,TResult}\n      description: The delegate that ends the asynchronous operation.\n    - id: state\n      type: System.Object\n      description: An object containing data to be used by the <code>beginMethod</code> delegate.\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n    typeParameters:\n    - id: TResult\n      description: The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The created <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents the asynchronous operation.\n  overload: System.Threading.Tasks.TaskFactory.FromAsync``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The exception that is thrown when the <code>beginMethod</code> argument is null.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>endMethod</code> argument is null.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.Scheduler\n  commentId: P:System.Threading.Tasks.TaskFactory.Scheduler\n  id: Scheduler\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: Scheduler\n  nameWithType: TaskFactory.Scheduler\n  fullName: TaskFactory.Scheduler\n  type: Property\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Gets the default task scheduler for this task factory.\n  remarks: \"The property value is used to schedule all tasks, unless another scheduler is explicitly specified during calls to this factory's methods.  \\n  \\n If this property value is `null`, the value of the <xref:System.Threading.Tasks.TaskScheduler.Current%2A> property is used.\"\n  syntax:\n    content: public System.Threading.Tasks.TaskScheduler Scheduler { get; }\n    return:\n      type: System.Threading.Tasks.TaskScheduler\n      description: The default task scheduler for this task factory.\n  overload: System.Threading.Tasks.TaskFactory.Scheduler*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  id: StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: StartNew(Action<Object>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)\n  nameWithType: TaskFactory.StartNew(Action<Object>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)\n  fullName: TaskFactory.StartNew(Action<Object>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates and starts a <xref href=\"System.Threading.Tasks.Task\"></xref>.\n  remarks: \"Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.  \\n  \\n Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters. For more information and code examples, see [Task.Run vs Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.\"\n  syntax:\n    content: public System.Threading.Tasks.Task StartNew (Action<object> action, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);\n    parameters:\n    - id: action\n      type: System.Action{System.Object}\n      description: The action delegate to execute asynchronously.\n    - id: state\n      type: System.Object\n      description: An object containing data to be used by the <code>action</code> delegate.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> that will be assigned to the new task.\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: A TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task\"></xref>\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> that is used to schedule the created <xref href=\"System.Threading.Tasks.Task\"></xref>.\n    return:\n      type: System.Threading.Tasks.Task\n      description: The started <xref href=\"System.Threading.Tasks.Task\"></xref>.\n  overload: System.Threading.Tasks.TaskFactory.StartNew*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The exception that is thrown when the <code>action</code> argument is null.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>scheduler</code> argument is null.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  id: StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: StartNew(Action, CancellationToken, TaskCreationOptions, TaskScheduler)\n  nameWithType: TaskFactory.StartNew(Action, CancellationToken, TaskCreationOptions, TaskScheduler)\n  fullName: TaskFactory.StartNew(Action, CancellationToken, TaskCreationOptions, TaskScheduler)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates and starts a <xref href=\"System.Threading.Tasks.Task\"></xref>.\n  remarks: \"Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.  \\n  \\n Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters. For more information and code examples, see [Task.Run vs Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.\"\n  syntax:\n    content: public System.Threading.Tasks.Task StartNew (Action action, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);\n    parameters:\n    - id: action\n      type: System.Action\n      description: The action delegate to execute asynchronously.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> that will be assigned to the new <xref href=\"System.Threading.Tasks.Task\"></xref>\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: A TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task\"></xref>\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> that is used to schedule the created <xref href=\"System.Threading.Tasks.Task\"></xref>.\n    return:\n      type: System.Threading.Tasks.Task\n      description: The started <xref href=\"System.Threading.Tasks.Task\"></xref>.\n  overload: System.Threading.Tasks.TaskFactory.StartNew*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The exception that is thrown when the <code>action</code> argument is null.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>scheduler</code> argument is null.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  id: StartNew(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: StartNew(Action<Object>, Object, TaskCreationOptions)\n  nameWithType: TaskFactory.StartNew(Action<Object>, Object, TaskCreationOptions)\n  fullName: TaskFactory.StartNew(Action<Object>, Object, TaskCreationOptions)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates and starts a <xref href=\"System.Threading.Tasks.Task\"></xref>.\n  remarks: \"Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.  \\n  \\n Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters. For more information and code examples, see [Task.Run vs Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.\"\n  syntax:\n    content: public System.Threading.Tasks.Task StartNew (Action<object> action, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);\n    parameters:\n    - id: action\n      type: System.Action{System.Object}\n      description: The action delegate to execute asynchronously.\n    - id: state\n      type: System.Object\n      description: An object containing data to be used by the <code>action</code> delegate.\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: A TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task\"></xref>\n    return:\n      type: System.Threading.Tasks.Task\n      description: The started <xref href=\"System.Threading.Tasks.Task\"></xref>.\n  overload: System.Threading.Tasks.TaskFactory.StartNew*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The exception that is thrown when the <code>action</code> argument is null.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)\n  id: StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: StartNew(Action<Object>, Object, CancellationToken)\n  nameWithType: TaskFactory.StartNew(Action<Object>, Object, CancellationToken)\n  fullName: TaskFactory.StartNew(Action<Object>, Object, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates and starts a <xref href=\"System.Threading.Tasks.Task\"></xref>.\n  remarks: \"Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.  \\n  \\n Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters. For more information and code examples, see [Task.Run vs Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.\"\n  example:\n  - \"The following example defines an array of 6-letter words. Each word is then passed to an <xref:System.Action%601> delegate, which scrambles the word and displays the original word and its scrambled version.  \\n  \\n [!code-csharp[System.Threading.Tasks.TaskFactory.StartNew#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.taskfactory.startnew/cs/startnew4.cs#4)]\\n [!code-vb[System.Threading.Tasks.TaskFactory.StartNew#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.taskfactory.startnew/vb/startnew4.vb#4)]  \\n  \\n Note that the example initializes a single random number generator, which is protected by a lock. For the need of a lock, see \\\"The System.Random class and thread safety\\\" in the <xref:System.Random> class topic. To handle the possibility of corruption of the random number generator, a cancellation token is passed to task. If two random numbers equal zero, the method assumes that the random number generator is corrupted and sets the cancellation token. Before sorting the `chars` array that contains the six characters in a word, the method calls the <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=fullName> method to throw an <xref:System.OperationCanceledException> if the token has been canceled.\"\n  syntax:\n    content: public System.Threading.Tasks.Task StartNew (Action<object> action, object state, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: action\n      type: System.Action{System.Object}\n      description: The action delegate to execute asynchronously.\n    - id: state\n      type: System.Object\n      description: An object containing data to be used by the <code>action</code> delegate.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> that will be assigned to the new <xref href=\"System.Threading.Tasks.Task\"></xref>\n    return:\n      type: System.Threading.Tasks.Task\n      description: The started <xref href=\"System.Threading.Tasks.Task\"></xref>.\n  overload: System.Threading.Tasks.TaskFactory.StartNew*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The exception that is thrown when the <code>action</code> argument is null.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken)\n  id: StartNew(System.Action,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: StartNew(Action, CancellationToken)\n  nameWithType: TaskFactory.StartNew(Action, CancellationToken)\n  fullName: TaskFactory.StartNew(Action, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates and starts a <xref href=\"System.Threading.Tasks.Task\"></xref>.\n  remarks: \"Calling `StartNew` is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.  \\n  \\n Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> method as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29> with default parameters. Note, however, that there is a difference in behavior between the two methods regarding : <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> by default does not allow child tasks started with the <xref:System.Threading.Tasks.TaskCreationOptions?displayProperty=fullName> option to attach to the current <xref:System.Threading.Tasks.Task> instance, whereas <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29> does. For more information and code examples, see [Task.Run vs Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.\"\n  example:\n  - \"The following example calls the <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29> method to create a task that iterates the files in the C:\\\\Windows\\\\System32 directory. The lambda expression calls the <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method to add information about each  file to a <xref:System.Collections.Generic.List%601> object. Each detached nested task invoked by the <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> loop checks the state of the cancellation token and, if cancellation is requested, calls the <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=fullName> method. The <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=fullName> method throws an <xref:System.OperationCanceledException> exception that is handled in a `catch` block when the calling thread calls the <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=fullName> method.  \\n  \\n [!code-csharp[System.Threading.Tasks.TaskFactory.StartNew#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.taskfactory.startnew/cs/startnew2.cs#2)]\\n [!code-vb[System.Threading.Tasks.TaskFactory.StartNew#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.taskfactory.startnew/vb/startnew2.vb#2)]\"\n  syntax:\n    content: public System.Threading.Tasks.Task StartNew (Action action, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: action\n      type: System.Action\n      description: The action delegate to execute asynchronously.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> that will be assigned to the new task.\n    return:\n      type: System.Threading.Tasks.Task\n      description: The started <xref href=\"System.Threading.Tasks.Task\"></xref>.\n  overload: System.Threading.Tasks.TaskFactory.StartNew*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The exception that is thrown when the <code>action</code> argument is null.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.Tasks.TaskCreationOptions)\n  id: StartNew(System.Action,System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: StartNew(Action, TaskCreationOptions)\n  nameWithType: TaskFactory.StartNew(Action, TaskCreationOptions)\n  fullName: TaskFactory.StartNew(Action, TaskCreationOptions)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates and starts a <xref href=\"System.Threading.Tasks.Task\"></xref>.\n  remarks: \"Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.  \\n  \\n Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters. For more information and code examples, see [Task.Run vs Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.\"\n  syntax:\n    content: public System.Threading.Tasks.Task StartNew (Action action, System.Threading.Tasks.TaskCreationOptions creationOptions);\n    parameters:\n    - id: action\n      type: System.Action\n      description: The action delegate to execute asynchronously.\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: A TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task\"></xref>\n    return:\n      type: System.Threading.Tasks.Task\n      description: The started <xref href=\"System.Threading.Tasks.Task\"></xref>.\n  overload: System.Threading.Tasks.TaskFactory.StartNew*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The exception that is thrown when the <code>action</code> argument is null.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action)\n  commentId: M:System.Threading.Tasks.TaskFactory.StartNew(System.Action)\n  id: StartNew(System.Action)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: StartNew(Action)\n  nameWithType: TaskFactory.StartNew(Action)\n  fullName: TaskFactory.StartNew(Action)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates and starts a task.\n  remarks: \"Calling <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> is functionally equivalent to creating a task by using one of its constructors, and then calling the <xref:System.Threading.Tasks.Task.Start%2A?displayProperty=fullName> method to schedule the task for execution.  \\n  \\n Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=fullName> method as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29> with default parameters. Note, however, that there is a difference in behavior between the two methods regarding : <xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=fullName> by default does not allow child tasks started with the <xref:System.Threading.Tasks.TaskCreationOptions?displayProperty=fullName> option to attach to the current <xref:System.Threading.Tasks.Task> instance, whereas <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29> does. For more information and code examples, see [Task.Run vs Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.\"\n  example:\n  - \"The following example uses the <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29> method to repeatedly invoke an <xref:System.Action> delegate that generates a random number, interprets it as a Unicode code point, converts it to a UTF16-encoded code unit, and displays information about the resulting character or characters.  \\n  \\n [!code-csharp[System.Threading.Tasks.TaskFactory.StartNew#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.taskfactory.startnew/cs/startnew1.cs#1)]\\n [!code-vb[System.Threading.Tasks.TaskFactory.StartNew#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.taskfactory.startnew/vb/startnew1.vb#1)]\"\n  syntax:\n    content: public System.Threading.Tasks.Task StartNew (Action action);\n    parameters:\n    - id: action\n      type: System.Action\n      description: The action delegate to execute asynchronously.\n    return:\n      type: System.Threading.Tasks.Task\n      description: The started task.\n  overload: System.Threading.Tasks.TaskFactory.StartNew*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>action</code> argument is null.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)\n  commentId: M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)\n  id: StartNew(System.Action{System.Object},System.Object)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: StartNew(Action<Object>, Object)\n  nameWithType: TaskFactory.StartNew(Action<Object>, Object)\n  fullName: TaskFactory.StartNew(Action<Object>, Object)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates and starts a <xref href=\"System.Threading.Tasks.Task\"></xref>.\n  remarks: \"Calling <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> is functionally equivalent to creating a <xref:System.Threading.Tasks.Task> using one of its constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.  \\n  \\n Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters. For more information and code examples, see [Task.Run vs Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.\"\n  example:\n  - \"The following example defines an array of 6-letter words. Each word is then passed to an <xref:System.Action%601> delegate, which scrambles the word and displays the original word and its scrambled version.  \\n  \\n [!code-csharp[System.Threading.Tasks.TaskFactory.StartNew#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.taskfactory.startnew/cs/startnew3.cs#3)]\\n [!code-vb[System.Threading.Tasks.TaskFactory.StartNew#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.taskfactory.startnew/vb/startnew3.vb#3)]  \\n  \\n Note that the example initializes a single random number generator, which is protected by a lock. For the need of a lock, see \\\"The System.Random class and thread safety\\\" in the <xref:System.Random> class topic.\"\n  syntax:\n    content: public System.Threading.Tasks.Task StartNew (Action<object> action, object state);\n    parameters:\n    - id: action\n      type: System.Action{System.Object}\n      description: The action delegate to execute asynchronously.\n    - id: state\n      type: System.Object\n      description: An object containing data to be used by the <code>action</code> delegate.\n    return:\n      type: System.Threading.Tasks.Task\n      description: The started <xref href=\"System.Threading.Tasks.Task\"></xref>.\n  overload: System.Threading.Tasks.TaskFactory.StartNew*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>action</code> argument is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  id: StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: StartNew<TResult>(Func<TResult>, CancellationToken, TaskCreationOptions, TaskScheduler)\n  nameWithType: TaskFactory.StartNew<TResult>(Func<TResult>, CancellationToken, TaskCreationOptions, TaskScheduler)\n  fullName: TaskFactory.StartNew<TResult>(Func<TResult>, CancellationToken, TaskCreationOptions, TaskScheduler)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates and starts a <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n  remarks: \"Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.  \\n  \\n Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters. For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.\"\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> StartNew<TResult> (Func<TResult> function, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);\n    parameters:\n    - id: function\n      type: System.Func`1\n      description: A function delegate that returns the future result to be available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> that will be assigned to the new task.\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: A TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> that is used to schedule the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n    typeParameters:\n    - id: TResult\n      description: The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The started <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n  overload: System.Threading.Tasks.TaskFactory.StartNew``1*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The exception that is thrown when the <code>function</code> argument is null.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>scheduler</code> argument is null.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0})\n  commentId: M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0})\n  id: StartNew``1(System.Func{``0})\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: StartNew<TResult>(Func<TResult>)\n  nameWithType: TaskFactory.StartNew<TResult>(Func<TResult>)\n  fullName: TaskFactory.StartNew<TResult>(Func<TResult>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates and starts a <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n  remarks: \"Calling <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.  \\n  \\n Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can call the <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=fullName> method as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters. Note, however, that there is a difference in behavior between the two methods regarding : <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=fullName> by default does not allow child tasks started with the <xref:System.Threading.Tasks.TaskCreationOptions?displayProperty=fullName> option to attach to the current <xref:System.Threading.Tasks.Task%601> instance, whereas <xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%29> does. For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.\"\n  example:\n  - \"The following example is a simple addition app that generates two random numbers and prompts the user to enter their sum. It then indicates whether the answer is correct or, if the user's response is not a valid number, prompts the user to re-enter a valid number. The <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> is used to create the <xref:System.Threading.Tasks.Task%601> objects that return the random numbers to add.  \\n  \\n [!code-csharp[System.Threading.Tasks.Task.Run#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/run5.cs#5)]\\n [!code-vb[System.Threading.Tasks.Task.Run#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/run5.vb#5)]\"\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> StartNew<TResult> (Func<TResult> function);\n    parameters:\n    - id: function\n      type: System.Func`1\n      description: A function delegate that returns the future result to be available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n    typeParameters:\n    - id: TResult\n      description: The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The started <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n  overload: System.Threading.Tasks.TaskFactory.StartNew``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>function</code> argument is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object)\n  commentId: M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object)\n  id: StartNew``1(System.Func{System.Object,``0},System.Object)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: StartNew<TResult>(Func<Object,TResult>, Object)\n  nameWithType: TaskFactory.StartNew<TResult>(Func<Object,TResult>, Object)\n  fullName: TaskFactory.StartNew<TResult>(Func<Object,TResult>, Object)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates and starts a <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n  remarks: \"Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.  \\n  \\n Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters. For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.\"\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> StartNew<TResult> (Func<object,TResult> function, object state);\n    parameters:\n    - id: function\n      type: System.Func{System.Object,TResult}\n      description: A function delegate that returns the future result to be available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n    - id: state\n      type: System.Object\n      description: An object containing data to be used by the <code>function</code> delegate.\n    typeParameters:\n    - id: TResult\n      description: The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The started <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n  overload: System.Threading.Tasks.TaskFactory.StartNew``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The exception that is thrown when the <code>function</code> argument is null.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken)\n  id: StartNew``1(System.Func{``0},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: StartNew<TResult>(Func<TResult>, CancellationToken)\n  nameWithType: TaskFactory.StartNew<TResult>(Func<TResult>, CancellationToken)\n  fullName: TaskFactory.StartNew<TResult>(Func<TResult>, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates and starts a <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n  remarks: \"Calling <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.  \\n  \\n Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> method as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29> with default parameters. Note, however, that there is a difference in behavior between the two methods regarding : <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> by default does not allow child tasks started with the <xref:System.Threading.Tasks.TaskCreationOptions?displayProperty=fullName> option to attach to the current <xref:System.Threading.Tasks.Task%601> instance, whereas <xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29> does. For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.\"\n  example:\n  - \"The following example uses two tasks to compute the Fibonacci sequence ending in F100 = F100-1 + F100-2 with seed values F1= 1, F2 = 1 and F1 = 0, F2= 1. Approximately half of the time, a cancellation token is set as the operations execute. The output from the example shows the result if the two tasks complete successfully and if the token is cancelled.  \\n  \\n [!code-csharp[System.Threading.Tasks.Task.Run#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/Run9.cs#9)]\\n [!code-vb[System.Threading.Tasks.Task.Run#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/Run9.vb#9)]\"\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> StartNew<TResult> (Func<TResult> function, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: function\n      type: System.Func`1\n      description: A function delegate that returns the future result to be available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> that will be assigned to the new <xref href=\"System.Threading.Tasks.Task\"></xref>\n    typeParameters:\n    - id: TResult\n      description: The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The started <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n  overload: System.Threading.Tasks.TaskFactory.StartNew``1*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The exception that is thrown when the <code>function</code> argument is null.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.Tasks.TaskCreationOptions)\n  id: StartNew``1(System.Func{``0},System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: StartNew<TResult>(Func<TResult>, TaskCreationOptions)\n  nameWithType: TaskFactory.StartNew<TResult>(Func<TResult>, TaskCreationOptions)\n  fullName: TaskFactory.StartNew<TResult>(Func<TResult>, TaskCreationOptions)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates and starts a <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n  remarks: \"Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.  \\n  \\n Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters. For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.\"\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> StartNew<TResult> (Func<TResult> function, System.Threading.Tasks.TaskCreationOptions creationOptions);\n    parameters:\n    - id: function\n      type: System.Func`1\n      description: A function delegate that returns the future result to be available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: A TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n    typeParameters:\n    - id: TResult\n      description: The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The started <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n  overload: System.Threading.Tasks.TaskFactory.StartNew``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The exception that is thrown when the <code>function</code> argument is null.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)\n  id: StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: StartNew<TResult>(Func<Object,TResult>, Object, CancellationToken)\n  nameWithType: TaskFactory.StartNew<TResult>(Func<Object,TResult>, Object, CancellationToken)\n  fullName: TaskFactory.StartNew<TResult>(Func<Object,TResult>, Object, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates and starts a <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n  remarks: \"Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.  \\n  \\n Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters. For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.\"\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> StartNew<TResult> (Func<object,TResult> function, object state, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: function\n      type: System.Func{System.Object,TResult}\n      description: A function delegate that returns the future result to be available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n    - id: state\n      type: System.Object\n      description: An object containing data to be used by the <code>function</code> delegate.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> that will be assigned to the new <xref href=\"System.Threading.Tasks.Task\"></xref>\n    typeParameters:\n    - id: TResult\n      description: The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The started <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n  overload: System.Threading.Tasks.TaskFactory.StartNew``1*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The exception that is thrown when the <code>function</code> argument is null.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  id: StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: StartNew<TResult>(Func<Object,TResult>, Object, TaskCreationOptions)\n  nameWithType: TaskFactory.StartNew<TResult>(Func<Object,TResult>, Object, TaskCreationOptions)\n  fullName: TaskFactory.StartNew<TResult>(Func<Object,TResult>, Object, TaskCreationOptions)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates and starts a <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n  remarks: \"Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.  \\n  \\n Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters. For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.\"\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> StartNew<TResult> (Func<object,TResult> function, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);\n    parameters:\n    - id: function\n      type: System.Func{System.Object,TResult}\n      description: A function delegate that returns the future result to be available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n    - id: state\n      type: System.Object\n      description: An object containing data to be used by the <code>function</code> delegate.\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: A TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n    typeParameters:\n    - id: TResult\n      description: The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The started <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n  overload: System.Threading.Tasks.TaskFactory.StartNew``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The exception that is thrown when the <code>function</code> argument is null.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  id: StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  name: StartNew<TResult>(Func<Object,TResult>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)\n  nameWithType: TaskFactory.StartNew<TResult>(Func<Object,TResult>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)\n  fullName: TaskFactory.StartNew<TResult>(Func<Object,TResult>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates and starts a <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n  remarks: \"Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.  \\n  \\n Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters. For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.\"\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> StartNew<TResult> (Func<object,TResult> function, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);\n    parameters:\n    - id: function\n      type: System.Func{System.Object,TResult}\n      description: A function delegate that returns the future result to be available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n    - id: state\n      type: System.Object\n      description: An object containing data to be used by the <code>function</code> delegate.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> that will be assigned to the new task.\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: A TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> that is used to schedule the created <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n    typeParameters:\n    - id: TResult\n      description: The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The started <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n  overload: System.Threading.Tasks.TaskFactory.StartNew``1*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The exception that is thrown when the <code>function</code> argument is null.  \\n  \\n -or-  \\n  \\n The exception that is thrown when the <code>scheduler</code> argument is null.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <code>creationOptions</code> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\"></xref>\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.ObjectDisposedException\n  parent: System\n  isExternal: false\n  name: ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.Threading.Tasks.TaskFactory.#ctor\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: TaskFactory()\n  nameWithType: TaskFactory.TaskFactory()\n  fullName: TaskFactory.TaskFactory()\n- uid: System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: TaskFactory(CancellationToken)\n  nameWithType: TaskFactory.TaskFactory(CancellationToken)\n  fullName: TaskFactory.TaskFactory(CancellationToken)\n- uid: System.Threading.CancellationToken\n  parent: System.Threading\n  isExternal: false\n  name: CancellationToken\n  nameWithType: CancellationToken\n  fullName: System.Threading.CancellationToken\n- uid: System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: TaskFactory(TaskScheduler)\n  nameWithType: TaskFactory.TaskFactory(TaskScheduler)\n  fullName: TaskFactory.TaskFactory(TaskScheduler)\n- uid: System.Threading.Tasks.TaskScheduler\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: TaskScheduler\n  nameWithType: TaskScheduler\n  fullName: System.Threading.Tasks.TaskScheduler\n- uid: System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: TaskFactory(TaskCreationOptions, TaskContinuationOptions)\n  nameWithType: TaskFactory.TaskFactory(TaskCreationOptions, TaskContinuationOptions)\n  fullName: TaskFactory.TaskFactory(TaskCreationOptions, TaskContinuationOptions)\n- uid: System.Threading.Tasks.TaskCreationOptions\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: TaskCreationOptions\n  nameWithType: TaskCreationOptions\n  fullName: System.Threading.Tasks.TaskCreationOptions\n- uid: System.Threading.Tasks.TaskContinuationOptions\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: TaskContinuationOptions\n  nameWithType: TaskContinuationOptions\n  fullName: System.Threading.Tasks.TaskContinuationOptions\n- uid: System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: TaskFactory(CancellationToken, TaskCreationOptions, TaskContinuationOptions, TaskScheduler)\n  nameWithType: TaskFactory.TaskFactory(CancellationToken, TaskCreationOptions, TaskContinuationOptions, TaskScheduler)\n  fullName: TaskFactory.TaskFactory(CancellationToken, TaskCreationOptions, TaskContinuationOptions, TaskScheduler)\n- uid: System.Threading.Tasks.TaskFactory.CancellationToken\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: CancellationToken\n  nameWithType: TaskFactory.CancellationToken\n  fullName: TaskFactory.CancellationToken\n- uid: System.Threading.Tasks.TaskFactory.ContinuationOptions\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: ContinuationOptions\n  nameWithType: TaskFactory.ContinuationOptions\n  fullName: TaskFactory.ContinuationOptions\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: ContinueWhenAll(Task[], Action<Task[]>)\n  nameWithType: TaskFactory.ContinueWhenAll(Task[], Action<Task[]>)\n  fullName: TaskFactory.ContinueWhenAll(Task[], Action<Task[]>)\n- uid: System.Threading.Tasks.Task\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task\n  nameWithType: Task\n  fullName: System.Threading.Tasks.Task\n- uid: System.Threading.Tasks.Task[]\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task[]\n  nameWithType: Task[]\n  fullName: System.Threading.Tasks.Task[]\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Action`1\n  name: Action<T>\n  nameWithType: Action<T>\n  fullName: System.Action<T>\n- uid: System.Action{System.Threading.Tasks.Task[]}\n  parent: System\n  isExternal: false\n  name: Action<Task[]>\n  nameWithType: Action<Task[]>\n  fullName: System.Action<System.Threading.Tasks.Task[]>\n  spec.csharp:\n  - uid: System.Action`1\n    name: Action\n    nameWithType: Action\n    fullName: System.Action\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: ContinueWhenAll(Task[], Action<Task[]>, CancellationToken)\n  nameWithType: TaskFactory.ContinueWhenAll(Task[], Action<Task[]>, CancellationToken)\n  fullName: TaskFactory.ContinueWhenAll(Task[], Action<Task[]>, CancellationToken)\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: ContinueWhenAll(Task[], Action<Task[]>, TaskContinuationOptions)\n  nameWithType: TaskFactory.ContinueWhenAll(Task[], Action<Task[]>, TaskContinuationOptions)\n  fullName: TaskFactory.ContinueWhenAll(Task[], Action<Task[]>, TaskContinuationOptions)\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: ContinueWhenAll(Task[], Action<Task[]>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: TaskFactory.ContinueWhenAll(Task[], Action<Task[]>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: TaskFactory.ContinueWhenAll(Task[], Action<Task[]>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: ContinueWhenAll<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: TaskFactory.ContinueWhenAll<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: TaskFactory.ContinueWhenAll<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n- uid: System.Threading.Tasks.Task`1\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task<TResult>\n  nameWithType: Task<TResult>\n  fullName: System.Threading.Tasks.Task<TResult>\n- uid: TAntecedentResult\n  name: TAntecedentResult\n  nameWithType: TAntecedentResult\n  fullName: TAntecedentResult\n- uid: System.Threading.Tasks.Task{TAntecedentResult}[]\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task<TAntecedentResult>[]\n  nameWithType: Task<TAntecedentResult>[]\n  fullName: System.Threading.Tasks.Task<TAntecedentResult>[]\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TAntecedentResult\n    name: TAntecedentResult\n    nameWithType: TAntecedentResult\n    fullName: TAntecedentResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Func`2\n  name: Func<T,TResult>\n  nameWithType: Func<T,TResult>\n  fullName: System.Func<T,TResult>\n- uid: TResult\n  name: TResult\n  nameWithType: TResult\n  fullName: TResult\n- uid: System.Func{System.Threading.Tasks.Task{TAntecedentResult}[],TResult}\n  parent: System\n  isExternal: false\n  name: Func<Task<TAntecedentResult>[],TResult>\n  nameWithType: Func<Task<TAntecedentResult>[],TResult>\n  fullName: System.Func<System.Threading.Tasks.Task<TAntecedentResult>[],TResult>\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TAntecedentResult\n    name: TAntecedentResult\n    nameWithType: TAntecedentResult\n    fullName: TAntecedentResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TResult\n    name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: ContinueWhenAll<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, TaskContinuationOptions)\n  nameWithType: TaskFactory.ContinueWhenAll<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, TaskContinuationOptions)\n  fullName: TaskFactory.ContinueWhenAll<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, TaskContinuationOptions)\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: ContinueWhenAll<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, CancellationToken)\n  nameWithType: TaskFactory.ContinueWhenAll<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, CancellationToken)\n  fullName: TaskFactory.ContinueWhenAll<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, CancellationToken)\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1})\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: ContinueWhenAll<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>)\n  nameWithType: TaskFactory.ContinueWhenAll<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>)\n  fullName: TaskFactory.ContinueWhenAll<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>)\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: TaskFactory.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: TaskFactory.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n- uid: System.Action{System.Threading.Tasks.Task{TAntecedentResult}[]}\n  parent: System\n  isExternal: false\n  name: Action<Task<TAntecedentResult>[]>\n  nameWithType: Action<Task<TAntecedentResult>[]>\n  fullName: System.Action<System.Threading.Tasks.Task<TAntecedentResult>[]>\n  spec.csharp:\n  - uid: System.Action`1\n    name: Action\n    nameWithType: Action\n    fullName: System.Action\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TAntecedentResult\n    name: TAntecedentResult\n    nameWithType: TAntecedentResult\n    fullName: TAntecedentResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, TaskContinuationOptions)\n  nameWithType: TaskFactory.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, TaskContinuationOptions)\n  fullName: TaskFactory.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, TaskContinuationOptions)\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, CancellationToken)\n  nameWithType: TaskFactory.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, CancellationToken)\n  fullName: TaskFactory.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, CancellationToken)\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]})\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>)\n  nameWithType: TaskFactory.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>)\n  fullName: TaskFactory.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>)\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0})\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: ContinueWhenAll<TResult>(Task[], Func<Task[],TResult>)\n  nameWithType: TaskFactory.ContinueWhenAll<TResult>(Task[], Func<Task[],TResult>)\n  fullName: TaskFactory.ContinueWhenAll<TResult>(Task[], Func<Task[],TResult>)\n- uid: System.Func{System.Threading.Tasks.Task[],TResult}\n  parent: System\n  isExternal: false\n  name: Func<Task[],TResult>\n  nameWithType: Func<Task[],TResult>\n  fullName: System.Func<System.Threading.Tasks.Task[],TResult>\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TResult\n    name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: ContinueWhenAll<TResult>(Task[], Func<Task[],TResult>, CancellationToken)\n  nameWithType: TaskFactory.ContinueWhenAll<TResult>(Task[], Func<Task[],TResult>, CancellationToken)\n  fullName: TaskFactory.ContinueWhenAll<TResult>(Task[], Func<Task[],TResult>, CancellationToken)\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: ContinueWhenAll<TResult>(Task[], Func<Task[],TResult>, TaskContinuationOptions)\n  nameWithType: TaskFactory.ContinueWhenAll<TResult>(Task[], Func<Task[],TResult>, TaskContinuationOptions)\n  fullName: TaskFactory.ContinueWhenAll<TResult>(Task[], Func<Task[],TResult>, TaskContinuationOptions)\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: ContinueWhenAll<TResult>(Task[], Func<Task[],TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: TaskFactory.ContinueWhenAll<TResult>(Task[], Func<Task[],TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: TaskFactory.ContinueWhenAll<TResult>(Task[], Func<Task[],TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: ContinueWhenAny(Task[], Action<Task>, TaskContinuationOptions)\n  nameWithType: TaskFactory.ContinueWhenAny(Task[], Action<Task>, TaskContinuationOptions)\n  fullName: TaskFactory.ContinueWhenAny(Task[], Action<Task>, TaskContinuationOptions)\n- uid: System.Action{System.Threading.Tasks.Task}\n  parent: System\n  isExternal: false\n  name: Action<Task>\n  nameWithType: Action<Task>\n  fullName: System.Action<System.Threading.Tasks.Task>\n  spec.csharp:\n  - uid: System.Action`1\n    name: Action\n    nameWithType: Action\n    fullName: System.Action\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: ContinueWhenAny(Task[], Action<Task>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: TaskFactory.ContinueWhenAny(Task[], Action<Task>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: TaskFactory.ContinueWhenAny(Task[], Action<Task>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task})\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: ContinueWhenAny(Task[], Action<Task>)\n  nameWithType: TaskFactory.ContinueWhenAny(Task[], Action<Task>)\n  fullName: TaskFactory.ContinueWhenAny(Task[], Action<Task>)\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: ContinueWhenAny(Task[], Action<Task>, CancellationToken)\n  nameWithType: TaskFactory.ContinueWhenAny(Task[], Action<Task>, CancellationToken)\n  fullName: TaskFactory.ContinueWhenAny(Task[], Action<Task>, CancellationToken)\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: ContinueWhenAny<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, TaskContinuationOptions)\n  nameWithType: TaskFactory.ContinueWhenAny<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, TaskContinuationOptions)\n  fullName: TaskFactory.ContinueWhenAny<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, TaskContinuationOptions)\n- uid: System.Func{System.Threading.Tasks.Task{TAntecedentResult},TResult}\n  parent: System\n  isExternal: false\n  name: Func<Task<TAntecedentResult>,TResult>\n  nameWithType: Func<Task<TAntecedentResult>,TResult>\n  fullName: System.Func<System.Threading.Tasks.Task<TAntecedentResult>,TResult>\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TAntecedentResult\n    name: TAntecedentResult\n    nameWithType: TAntecedentResult\n    fullName: TAntecedentResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TResult\n    name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1})\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: ContinueWhenAny<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>)\n  nameWithType: TaskFactory.ContinueWhenAny<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>)\n  fullName: TaskFactory.ContinueWhenAny<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>)\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: ContinueWhenAny<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, CancellationToken)\n  nameWithType: TaskFactory.ContinueWhenAny<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, CancellationToken)\n  fullName: TaskFactory.ContinueWhenAny<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, CancellationToken)\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: ContinueWhenAny<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: TaskFactory.ContinueWhenAny<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: TaskFactory.ContinueWhenAny<TAntecedentResult,TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}})\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>)\n  nameWithType: TaskFactory.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>)\n  fullName: TaskFactory.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>)\n- uid: System.Action{System.Threading.Tasks.Task{TAntecedentResult}}\n  parent: System\n  isExternal: false\n  name: Action<Task<TAntecedentResult>>\n  nameWithType: Action<Task<TAntecedentResult>>\n  fullName: System.Action<System.Threading.Tasks.Task<TAntecedentResult>>\n  spec.csharp:\n  - uid: System.Action`1\n    name: Action\n    nameWithType: Action\n    fullName: System.Action\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TAntecedentResult\n    name: TAntecedentResult\n    nameWithType: TAntecedentResult\n    fullName: TAntecedentResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, CancellationToken)\n  nameWithType: TaskFactory.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, CancellationToken)\n  fullName: TaskFactory.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, CancellationToken)\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, TaskContinuationOptions)\n  nameWithType: TaskFactory.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, TaskContinuationOptions)\n  fullName: TaskFactory.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, TaskContinuationOptions)\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: TaskFactory.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: TaskFactory.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0})\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: ContinueWhenAny<TResult>(Task[], Func<Task,TResult>)\n  nameWithType: TaskFactory.ContinueWhenAny<TResult>(Task[], Func<Task,TResult>)\n  fullName: TaskFactory.ContinueWhenAny<TResult>(Task[], Func<Task,TResult>)\n- uid: System.Func{System.Threading.Tasks.Task,TResult}\n  parent: System\n  isExternal: false\n  name: Func<Task,TResult>\n  nameWithType: Func<Task,TResult>\n  fullName: System.Func<System.Threading.Tasks.Task,TResult>\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TResult\n    name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: ContinueWhenAny<TResult>(Task[], Func<Task,TResult>, CancellationToken)\n  nameWithType: TaskFactory.ContinueWhenAny<TResult>(Task[], Func<Task,TResult>, CancellationToken)\n  fullName: TaskFactory.ContinueWhenAny<TResult>(Task[], Func<Task,TResult>, CancellationToken)\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: ContinueWhenAny<TResult>(Task[], Func<Task,TResult>, TaskContinuationOptions)\n  nameWithType: TaskFactory.ContinueWhenAny<TResult>(Task[], Func<Task,TResult>, TaskContinuationOptions)\n  fullName: TaskFactory.ContinueWhenAny<TResult>(Task[], Func<Task,TResult>, TaskContinuationOptions)\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: ContinueWhenAny<TResult>(Task[], Func<Task,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: TaskFactory.ContinueWhenAny<TResult>(Task[], Func<Task,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: TaskFactory.ContinueWhenAny<TResult>(Task[], Func<Task,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n- uid: System.Threading.Tasks.TaskFactory.CreationOptions\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: CreationOptions\n  nameWithType: TaskFactory.CreationOptions\n  fullName: TaskFactory.CreationOptions\n- uid: System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult})\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: FromAsync(IAsyncResult, Action<IAsyncResult>)\n  nameWithType: TaskFactory.FromAsync(IAsyncResult, Action<IAsyncResult>)\n  fullName: TaskFactory.FromAsync(IAsyncResult, Action<IAsyncResult>)\n- uid: System.IAsyncResult\n  parent: System\n  isExternal: false\n  name: IAsyncResult\n  nameWithType: IAsyncResult\n  fullName: System.IAsyncResult\n- uid: System.Action{System.IAsyncResult}\n  parent: System\n  isExternal: false\n  name: Action<IAsyncResult>\n  nameWithType: Action<IAsyncResult>\n  fullName: System.Action<System.IAsyncResult>\n  spec.csharp:\n  - uid: System.Action`1\n    name: Action\n    nameWithType: Action\n    fullName: System.Action\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.IAsyncResult\n    name: IAsyncResult\n    nameWithType: IAsyncResult\n    fullName: System.IAsyncResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: FromAsync(Func<AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, Object)\n  nameWithType: TaskFactory.FromAsync(Func<AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, Object)\n  fullName: TaskFactory.FromAsync(Func<AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, Object)\n- uid: System.Func`3\n  name: Func<T1,T2,TResult>\n  nameWithType: Func<T1,T2,TResult>\n  fullName: System.Func<T1,T2,TResult>\n- uid: System.AsyncCallback\n  name: AsyncCallback\n  nameWithType: AsyncCallback\n  fullName: System.AsyncCallback\n- uid: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}\n  parent: System\n  isExternal: false\n  name: Func<AsyncCallback,Object,IAsyncResult>\n  nameWithType: Func<AsyncCallback,Object,IAsyncResult>\n  fullName: System.Func<System.AsyncCallback,System.Object,System.IAsyncResult>\n  spec.csharp:\n  - uid: System.Func`3\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.AsyncCallback\n    name: AsyncCallback\n    nameWithType: AsyncCallback\n    fullName: System.AsyncCallback\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.IAsyncResult\n    name: IAsyncResult\n    nameWithType: IAsyncResult\n    fullName: System.IAsyncResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: FromAsync(IAsyncResult, Action<IAsyncResult>, TaskCreationOptions)\n  nameWithType: TaskFactory.FromAsync(IAsyncResult, Action<IAsyncResult>, TaskCreationOptions)\n  fullName: TaskFactory.FromAsync(IAsyncResult, Action<IAsyncResult>, TaskCreationOptions)\n- uid: System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: FromAsync(Func<AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, Object, TaskCreationOptions)\n  nameWithType: TaskFactory.FromAsync(Func<AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, Object, TaskCreationOptions)\n  fullName: TaskFactory.FromAsync(Func<AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, Object, TaskCreationOptions)\n- uid: System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: FromAsync(IAsyncResult, Action<IAsyncResult>, TaskCreationOptions, TaskScheduler)\n  nameWithType: TaskFactory.FromAsync(IAsyncResult, Action<IAsyncResult>, TaskCreationOptions, TaskScheduler)\n  fullName: TaskFactory.FromAsync(IAsyncResult, Action<IAsyncResult>, TaskCreationOptions, TaskScheduler)\n- uid: System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: FromAsync<TArg1,TArg2,TArg3,TResult>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)\n  nameWithType: TaskFactory.FromAsync<TArg1,TArg2,TArg3,TResult>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)\n  fullName: TaskFactory.FromAsync<TArg1,TArg2,TArg3,TResult>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)\n- uid: System.Func`6\n  name: Func<T1,T2,T3,T4,T5,TResult>\n  nameWithType: Func<T1,T2,T3,T4,T5,TResult>\n  fullName: System.Func<T1,T2,T3,T4,T5,TResult>\n- uid: TArg1\n  name: TArg1\n  nameWithType: TArg1\n  fullName: TArg1\n- uid: TArg2\n  name: TArg2\n  nameWithType: TArg2\n  fullName: TArg2\n- uid: TArg3\n  name: TArg3\n  nameWithType: TArg3\n  fullName: TArg3\n- uid: System.Func{TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult}\n  parent: System\n  isExternal: false\n  name: Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>\n  nameWithType: Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>\n  fullName: System.Func<TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult>\n  spec.csharp:\n  - uid: System.Func`6\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TArg1\n    name: TArg1\n    nameWithType: TArg1\n    fullName: TArg1\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TArg2\n    name: TArg2\n    nameWithType: TArg2\n    fullName: TArg2\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TArg3\n    name: TArg3\n    nameWithType: TArg3\n    fullName: TArg3\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.AsyncCallback\n    name: AsyncCallback\n    nameWithType: AsyncCallback\n    fullName: System.AsyncCallback\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.IAsyncResult\n    name: IAsyncResult\n    nameWithType: IAsyncResult\n    fullName: System.IAsyncResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Func{System.IAsyncResult,TResult}\n  parent: System\n  isExternal: false\n  name: Func<IAsyncResult,TResult>\n  nameWithType: Func<IAsyncResult,TResult>\n  fullName: System.Func<System.IAsyncResult,TResult>\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.IAsyncResult\n    name: IAsyncResult\n    nameWithType: IAsyncResult\n    fullName: System.IAsyncResult\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TResult\n    name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: FromAsync<TArg1,TArg2,TArg3,TResult>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, TArg3, Object)\n  nameWithType: TaskFactory.FromAsync<TArg1,TArg2,TArg3,TResult>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, TArg3, Object)\n  fullName: TaskFactory.FromAsync<TArg1,TArg2,TArg3,TResult>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, TArg3, Object)\n- uid: System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: FromAsync<TArg1,TArg2,TArg3>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)\n  nameWithType: TaskFactory.FromAsync<TArg1,TArg2,TArg3>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)\n  fullName: TaskFactory.FromAsync<TArg1,TArg2,TArg3>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)\n- uid: System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: FromAsync<TArg1,TArg2,TArg3>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, TArg3, Object)\n  nameWithType: TaskFactory.FromAsync<TArg1,TArg2,TArg3>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, TArg3, Object)\n  fullName: TaskFactory.FromAsync<TArg1,TArg2,TArg3>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, TArg3, Object)\n- uid: System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: FromAsync<TArg1,TArg2,TResult>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, Object)\n  nameWithType: TaskFactory.FromAsync<TArg1,TArg2,TResult>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, Object)\n  fullName: TaskFactory.FromAsync<TArg1,TArg2,TResult>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, Object)\n- uid: System.Func`5\n  name: Func<T1,T2,T3,T4,TResult>\n  nameWithType: Func<T1,T2,T3,T4,TResult>\n  fullName: System.Func<T1,T2,T3,T4,TResult>\n- uid: System.Func{TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult}\n  parent: System\n  isExternal: false\n  name: Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>\n  nameWithType: Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>\n  fullName: System.Func<TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult>\n  spec.csharp:\n  - uid: System.Func`5\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TArg1\n    name: TArg1\n    nameWithType: TArg1\n    fullName: TArg1\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TArg2\n    name: TArg2\n    nameWithType: TArg2\n    fullName: TArg2\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.AsyncCallback\n    name: AsyncCallback\n    nameWithType: AsyncCallback\n    fullName: System.AsyncCallback\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.IAsyncResult\n    name: IAsyncResult\n    nameWithType: IAsyncResult\n    fullName: System.IAsyncResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: FromAsync<TArg1,TArg2,TResult>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, Object, TaskCreationOptions)\n  nameWithType: TaskFactory.FromAsync<TArg1,TArg2,TResult>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, Object, TaskCreationOptions)\n  fullName: TaskFactory.FromAsync<TArg1,TArg2,TResult>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, Object, TaskCreationOptions)\n- uid: System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: FromAsync<TArg1,TArg2>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, Object)\n  nameWithType: TaskFactory.FromAsync<TArg1,TArg2>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, Object)\n  fullName: TaskFactory.FromAsync<TArg1,TArg2>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, Object)\n- uid: System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: FromAsync<TArg1,TArg2>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, Object, TaskCreationOptions)\n  nameWithType: TaskFactory.FromAsync<TArg1,TArg2>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, Object, TaskCreationOptions)\n  fullName: TaskFactory.FromAsync<TArg1,TArg2>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, Object, TaskCreationOptions)\n- uid: System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: FromAsync<TArg1,TResult>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, Object)\n  nameWithType: TaskFactory.FromAsync<TArg1,TResult>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, Object)\n  fullName: TaskFactory.FromAsync<TArg1,TResult>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, Object)\n- uid: System.Func`4\n  name: Func<T1,T2,T3,TResult>\n  nameWithType: Func<T1,T2,T3,TResult>\n  fullName: System.Func<T1,T2,T3,TResult>\n- uid: System.Func{TArg1,System.AsyncCallback,System.Object,System.IAsyncResult}\n  parent: System\n  isExternal: false\n  name: Func<TArg1,AsyncCallback,Object,IAsyncResult>\n  nameWithType: Func<TArg1,AsyncCallback,Object,IAsyncResult>\n  fullName: System.Func<TArg1,System.AsyncCallback,System.Object,System.IAsyncResult>\n  spec.csharp:\n  - uid: System.Func`4\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TArg1\n    name: TArg1\n    nameWithType: TArg1\n    fullName: TArg1\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.AsyncCallback\n    name: AsyncCallback\n    nameWithType: AsyncCallback\n    fullName: System.AsyncCallback\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.IAsyncResult\n    name: IAsyncResult\n    nameWithType: IAsyncResult\n    fullName: System.IAsyncResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: FromAsync<TArg1,TResult>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, Object, TaskCreationOptions)\n  nameWithType: TaskFactory.FromAsync<TArg1,TResult>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, Object, TaskCreationOptions)\n  fullName: TaskFactory.FromAsync<TArg1,TResult>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, Object, TaskCreationOptions)\n- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: FromAsync<TArg1>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, Object, TaskCreationOptions)\n  nameWithType: TaskFactory.FromAsync<TArg1>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, Object, TaskCreationOptions)\n  fullName: TaskFactory.FromAsync<TArg1>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, Object, TaskCreationOptions)\n- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: FromAsync<TArg1>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, Object)\n  nameWithType: TaskFactory.FromAsync<TArg1>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, Object)\n  fullName: TaskFactory.FromAsync<TArg1>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Action<IAsyncResult>, TArg1, Object)\n- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: FromAsync<TResult>(IAsyncResult, Func<IAsyncResult,TResult>, TaskCreationOptions, TaskScheduler)\n  nameWithType: TaskFactory.FromAsync<TResult>(IAsyncResult, Func<IAsyncResult,TResult>, TaskCreationOptions, TaskScheduler)\n  fullName: TaskFactory.FromAsync<TResult>(IAsyncResult, Func<IAsyncResult,TResult>, TaskCreationOptions, TaskScheduler)\n- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: FromAsync<TResult>(IAsyncResult, Func<IAsyncResult,TResult>, TaskCreationOptions)\n  nameWithType: TaskFactory.FromAsync<TResult>(IAsyncResult, Func<IAsyncResult,TResult>, TaskCreationOptions)\n  fullName: TaskFactory.FromAsync<TResult>(IAsyncResult, Func<IAsyncResult,TResult>, TaskCreationOptions)\n- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: FromAsync<TResult>(Func<AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, Object)\n  nameWithType: TaskFactory.FromAsync<TResult>(Func<AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, Object)\n  fullName: TaskFactory.FromAsync<TResult>(Func<AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, Object)\n- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0})\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: FromAsync<TResult>(IAsyncResult, Func<IAsyncResult,TResult>)\n  nameWithType: TaskFactory.FromAsync<TResult>(IAsyncResult, Func<IAsyncResult,TResult>)\n  fullName: TaskFactory.FromAsync<TResult>(IAsyncResult, Func<IAsyncResult,TResult>)\n- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: FromAsync<TResult>(Func<AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, Object, TaskCreationOptions)\n  nameWithType: TaskFactory.FromAsync<TResult>(Func<AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, Object, TaskCreationOptions)\n  fullName: TaskFactory.FromAsync<TResult>(Func<AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, Object, TaskCreationOptions)\n- uid: System.Threading.Tasks.TaskFactory.Scheduler\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: Scheduler\n  nameWithType: TaskFactory.Scheduler\n  fullName: TaskFactory.Scheduler\n- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: StartNew(Action<Object>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)\n  nameWithType: TaskFactory.StartNew(Action<Object>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)\n  fullName: TaskFactory.StartNew(Action<Object>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)\n- uid: System.Action{System.Object}\n  parent: System\n  isExternal: false\n  name: Action<Object>\n  nameWithType: Action<Object>\n  fullName: System.Action<System.Object>\n  spec.csharp:\n  - uid: System.Action`1\n    name: Action\n    nameWithType: Action\n    fullName: System.Action\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: StartNew(Action, CancellationToken, TaskCreationOptions, TaskScheduler)\n  nameWithType: TaskFactory.StartNew(Action, CancellationToken, TaskCreationOptions, TaskScheduler)\n  fullName: TaskFactory.StartNew(Action, CancellationToken, TaskCreationOptions, TaskScheduler)\n- uid: System.Action\n  parent: System\n  isExternal: false\n  name: Action\n  nameWithType: Action\n  fullName: System.Action\n- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: StartNew(Action<Object>, Object, TaskCreationOptions)\n  nameWithType: TaskFactory.StartNew(Action<Object>, Object, TaskCreationOptions)\n  fullName: TaskFactory.StartNew(Action<Object>, Object, TaskCreationOptions)\n- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: StartNew(Action<Object>, Object, CancellationToken)\n  nameWithType: TaskFactory.StartNew(Action<Object>, Object, CancellationToken)\n  fullName: TaskFactory.StartNew(Action<Object>, Object, CancellationToken)\n- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: StartNew(Action, CancellationToken)\n  nameWithType: TaskFactory.StartNew(Action, CancellationToken)\n  fullName: TaskFactory.StartNew(Action, CancellationToken)\n- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: StartNew(Action, TaskCreationOptions)\n  nameWithType: TaskFactory.StartNew(Action, TaskCreationOptions)\n  fullName: TaskFactory.StartNew(Action, TaskCreationOptions)\n- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: StartNew(Action)\n  nameWithType: TaskFactory.StartNew(Action)\n  fullName: TaskFactory.StartNew(Action)\n- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: StartNew(Action<Object>, Object)\n  nameWithType: TaskFactory.StartNew(Action<Object>, Object)\n  fullName: TaskFactory.StartNew(Action<Object>, Object)\n- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: StartNew<TResult>(Func<TResult>, CancellationToken, TaskCreationOptions, TaskScheduler)\n  nameWithType: TaskFactory.StartNew<TResult>(Func<TResult>, CancellationToken, TaskCreationOptions, TaskScheduler)\n  fullName: TaskFactory.StartNew<TResult>(Func<TResult>, CancellationToken, TaskCreationOptions, TaskScheduler)\n- uid: System.Func`1\n  parent: System\n  isExternal: false\n  name: Func<TResult>\n  nameWithType: Func<TResult>\n  fullName: System.Func<TResult>\n- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0})\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: StartNew<TResult>(Func<TResult>)\n  nameWithType: TaskFactory.StartNew<TResult>(Func<TResult>)\n  fullName: TaskFactory.StartNew<TResult>(Func<TResult>)\n- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: StartNew<TResult>(Func<Object,TResult>, Object)\n  nameWithType: TaskFactory.StartNew<TResult>(Func<Object,TResult>, Object)\n  fullName: TaskFactory.StartNew<TResult>(Func<Object,TResult>, Object)\n- uid: System.Func{System.Object,TResult}\n  parent: System\n  isExternal: false\n  name: Func<Object,TResult>\n  nameWithType: Func<Object,TResult>\n  fullName: System.Func<System.Object,TResult>\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TResult\n    name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: StartNew<TResult>(Func<TResult>, CancellationToken)\n  nameWithType: TaskFactory.StartNew<TResult>(Func<TResult>, CancellationToken)\n  fullName: TaskFactory.StartNew<TResult>(Func<TResult>, CancellationToken)\n- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: StartNew<TResult>(Func<TResult>, TaskCreationOptions)\n  nameWithType: TaskFactory.StartNew<TResult>(Func<TResult>, TaskCreationOptions)\n  fullName: TaskFactory.StartNew<TResult>(Func<TResult>, TaskCreationOptions)\n- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: StartNew<TResult>(Func<Object,TResult>, Object, CancellationToken)\n  nameWithType: TaskFactory.StartNew<TResult>(Func<Object,TResult>, Object, CancellationToken)\n  fullName: TaskFactory.StartNew<TResult>(Func<Object,TResult>, Object, CancellationToken)\n- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: StartNew<TResult>(Func<Object,TResult>, Object, TaskCreationOptions)\n  nameWithType: TaskFactory.StartNew<TResult>(Func<Object,TResult>, Object, TaskCreationOptions)\n  fullName: TaskFactory.StartNew<TResult>(Func<Object,TResult>, Object, TaskCreationOptions)\n- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: StartNew<TResult>(Func<Object,TResult>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)\n  nameWithType: TaskFactory.StartNew<TResult>(Func<Object,TResult>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)\n  fullName: TaskFactory.StartNew<TResult>(Func<Object,TResult>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)\n- uid: System.Threading.Tasks.TaskFactory.StartNew*\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: StartNew\n  nameWithType: TaskFactory.StartNew\n  fullName: TaskFactory.StartNew\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n- uid: System.Threading.Tasks.TaskFactory.#ctor*\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: TaskFactory\n  nameWithType: TaskFactory.TaskFactory\n  fullName: TaskFactory.TaskFactory\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n- uid: System.Threading.Tasks.TaskFactory.CancellationToken*\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: CancellationToken\n  nameWithType: TaskFactory.CancellationToken\n  fullName: TaskFactory.CancellationToken\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n- uid: System.Threading.Tasks.TaskFactory.ContinuationOptions*\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: ContinuationOptions\n  nameWithType: TaskFactory.ContinuationOptions\n  fullName: TaskFactory.ContinuationOptions\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll*\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: ContinueWhenAll\n  nameWithType: TaskFactory.ContinueWhenAll\n  fullName: TaskFactory.ContinueWhenAll\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``2*\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: ContinueWhenAll<TAntecedentResult,TResult>\n  nameWithType: TaskFactory.ContinueWhenAll<TAntecedentResult,TResult>\n  fullName: TaskFactory.ContinueWhenAll<TAntecedentResult,TResult>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1*\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: ContinueWhenAll<TAntecedentResult>\n  nameWithType: TaskFactory.ContinueWhenAll<TAntecedentResult>\n  fullName: TaskFactory.ContinueWhenAll<TAntecedentResult>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny*\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: ContinueWhenAny\n  nameWithType: TaskFactory.ContinueWhenAny\n  fullName: TaskFactory.ContinueWhenAny\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``2*\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: ContinueWhenAny<TAntecedentResult,TResult>\n  nameWithType: TaskFactory.ContinueWhenAny<TAntecedentResult,TResult>\n  fullName: TaskFactory.ContinueWhenAny<TAntecedentResult,TResult>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1*\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: ContinueWhenAny<TAntecedentResult>\n  nameWithType: TaskFactory.ContinueWhenAny<TAntecedentResult>\n  fullName: TaskFactory.ContinueWhenAny<TAntecedentResult>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n- uid: System.Threading.Tasks.TaskFactory.CreationOptions*\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: CreationOptions\n  nameWithType: TaskFactory.CreationOptions\n  fullName: TaskFactory.CreationOptions\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n- uid: System.Threading.Tasks.TaskFactory.FromAsync*\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: FromAsync\n  nameWithType: TaskFactory.FromAsync\n  fullName: TaskFactory.FromAsync\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n- uid: System.Threading.Tasks.TaskFactory.FromAsync``4*\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: FromAsync<TArg1,TArg2,TArg3,TResult>\n  nameWithType: TaskFactory.FromAsync<TArg1,TArg2,TArg3,TResult>\n  fullName: TaskFactory.FromAsync<TArg1,TArg2,TArg3,TResult>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n- uid: System.Threading.Tasks.TaskFactory.FromAsync``3*\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: FromAsync<TArg1,TArg2,TArg3>\n  nameWithType: TaskFactory.FromAsync<TArg1,TArg2,TArg3>\n  fullName: TaskFactory.FromAsync<TArg1,TArg2,TArg3>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n- uid: System.Threading.Tasks.TaskFactory.FromAsync``2*\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: FromAsync<TArg1,TArg2>\n  nameWithType: TaskFactory.FromAsync<TArg1,TArg2>\n  fullName: TaskFactory.FromAsync<TArg1,TArg2>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n- uid: System.Threading.Tasks.TaskFactory.FromAsync``1*\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: FromAsync<TArg1>\n  nameWithType: TaskFactory.FromAsync<TArg1>\n  fullName: TaskFactory.FromAsync<TArg1>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n- uid: System.Threading.Tasks.TaskFactory.Scheduler*\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: Scheduler\n  nameWithType: TaskFactory.Scheduler\n  fullName: TaskFactory.Scheduler\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n- uid: System.Threading.Tasks.TaskFactory.StartNew``1*\n  parent: System.Threading.Tasks.TaskFactory\n  isExternal: false\n  name: StartNew<TResult>\n  nameWithType: TaskFactory.StartNew<TResult>\n  fullName: TaskFactory.StartNew<TResult>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}