{"nodes":[{"content":"Represents a set of access rights to be audited for a user or group. This class cannot be inherited.","nodes":[{"pos":[0,100],"content":"Represents a set of access rights to be audited for a user or group. This class cannot be inherited.","nodes":[{"content":"Represents a set of access rights to be audited for a user or group. This class cannot be inherited.","pos":[0,100],"nodes":[{"content":"Represents a set of access rights to be audited for a user or group.","pos":[0,68]},{"content":"This class cannot be inherited.","pos":[69,100]}]}]}],"pos":[1100,1201],"yaml":true},{"content":"The <xref:System.Security.AccessControl.RegistryAuditRule> class is one of a set of classes that the .NET Framework provides for managing Windows access control security on registry keys. For an overview of these classes and their relationship to the underlying Windows access control structures, see <xref:System.Security.AccessControl.RegistrySecurity>.  \n  \n> [!NOTE]\n>  Windows access control security can only be applied to registry keys. It cannot be applied to individual key/value pairs stored in a key.  \n  \n To get a list of the audit rules currently applied to a registry key, use the <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName> method to get a <xref:System.Security.AccessControl.RegistrySecurity> object, and then use its <xref:System.Security.AccessControl.CommonObjectSecurity.GetAuditRules%2A> method to obtain a collection of <xref:System.Security.AccessControl.RegistryAuditRule> objects.  \n  \n <xref:System.Security.AccessControl.RegistryAuditRule> objects do not map one-to-one with access control entries in the underlying discretionary access control list (DACL). When you get the set of all audit rules for a registry key, the set contains the minimum number of rules currently required to express all the access control entries.  \n  \n> [!NOTE]\n>  The underlying access control entries change as you apply and remove rules. The information in rules is merged if possible, to maintain the smallest number of access control entries. Thus, when you read the current list of rules, it might not look exactly like the list of all the rules you have added.  \n  \n Use <xref:System.Security.AccessControl.RegistryAuditRule> objects to specify access rights to be audited for a user or group. To apply a rule to a registry key, use the <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName> method to get the <xref:System.Security.AccessControl.RegistrySecurity> object. Modify the <xref:System.Security.AccessControl.RegistrySecurity> object by using its methods to add the rule, and then use the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName> method to reattach the security object.  \n  \n> [!IMPORTANT]\n>  Changes you make to a <xref:System.Security.AccessControl.RegistrySecurity> object do not affect the access levels of the registry key until you call the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName> method to assign the altered security object to the registry key.  \n  \n <xref:System.Security.AccessControl.RegistryAuditRule> objects are immutable. Security for a registry key is modified by using the methods of the <xref:System.Security.AccessControl.RegistrySecurity> class to add or remove rules; as you do this, the underlying access control entries are modified.","nodes":[{"pos":[0,355],"content":"The <xref:System.Security.AccessControl.RegistryAuditRule> class is one of a set of classes that the .NET Framework provides for managing Windows access control security on registry keys. For an overview of these classes and their relationship to the underlying Windows access control structures, see <xref:System.Security.AccessControl.RegistrySecurity>.","nodes":[{"content":"The <xref:System.Security.AccessControl.RegistryAuditRule> class is one of a set of classes that the .NET Framework provides for managing Windows access control security on registry keys. For an overview of these classes and their relationship to the underlying Windows access control structures, see <xref:System.Security.AccessControl.RegistrySecurity>.","pos":[0,355],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.RegistryAuditRule&gt;</ph> class is one of a set of classes that the .NET Framework provides for managing Windows access control security on registry keys.","pos":[0,187],"source":"The <xref:System.Security.AccessControl.RegistryAuditRule> class is one of a set of classes that the .NET Framework provides for managing Windows access control security on registry keys."},{"content":"For an overview of these classes and their relationship to the underlying Windows access control structures, see <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph>.","pos":[188,355],"source":" For an overview of these classes and their relationship to the underlying Windows access control structures, see <xref:System.Security.AccessControl.RegistrySecurity>."}]}]},{"pos":[363,511],"content":"[!NOTE]\n Windows access control security can only be applied to registry keys. It cannot be applied to individual key/value pairs stored in a key.","leadings":["","> "],"nodes":[{"content":" Windows access control security can only be applied to registry keys. It cannot be applied to individual key/value pairs stored in a key.","pos":[8,146],"nodes":[{"content":"Windows access control security can only be applied to registry keys.","pos":[1,70]},{"content":"It cannot be applied to individual key/value pairs stored in a key.","pos":[71,138]}]}]},{"pos":[518,942],"content":"To get a list of the audit rules currently applied to a registry key, use the <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName> method to get a <xref:System.Security.AccessControl.RegistrySecurity> object, and then use its <xref:System.Security.AccessControl.CommonObjectSecurity.GetAuditRules%2A> method to obtain a collection of <xref:System.Security.AccessControl.RegistryAuditRule> objects.","nodes":[{"content":"To get a list of the audit rules currently applied to a registry key, use the <ph id=\"ph1\">&lt;xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName&gt;</ph> method to get a <ph id=\"ph2\">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object, and then use its <ph id=\"ph3\">&lt;xref:System.Security.AccessControl.CommonObjectSecurity.GetAuditRules%2A&gt;</ph> method to obtain a collection of <ph id=\"ph4\">&lt;xref:System.Security.AccessControl.RegistryAuditRule&gt;</ph> objects.","pos":[0,424],"source":"To get a list of the audit rules currently applied to a registry key, use the <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName> method to get a <xref:System.Security.AccessControl.RegistrySecurity> object, and then use its <xref:System.Security.AccessControl.CommonObjectSecurity.GetAuditRules%2A> method to obtain a collection of <xref:System.Security.AccessControl.RegistryAuditRule> objects."}]},{"pos":[949,1288],"content":"<xref:System.Security.AccessControl.RegistryAuditRule> objects do not map one-to-one with access control entries in the underlying discretionary access control list (DACL). When you get the set of all audit rules for a registry key, the set contains the minimum number of rules currently required to express all the access control entries.","nodes":[{"content":"<xref:System.Security.AccessControl.RegistryAuditRule> objects do not map one-to-one with access control entries in the underlying discretionary access control list (DACL). When you get the set of all audit rules for a registry key, the set contains the minimum number of rules currently required to express all the access control entries.","pos":[0,339],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Security.AccessControl.RegistryAuditRule&gt;</ph> objects do not map one-to-one with access control entries in the underlying discretionary access control list (DACL).","pos":[0,172],"source":"<xref:System.Security.AccessControl.RegistryAuditRule> objects do not map one-to-one with access control entries in the underlying discretionary access control list (DACL)."},{"content":"When you get the set of all audit rules for a registry key, the set contains the minimum number of rules currently required to express all the access control entries.","pos":[173,339]}]}]},{"pos":[1296,1609],"content":"[!NOTE]\n The underlying access control entries change as you apply and remove rules. The information in rules is merged if possible, to maintain the smallest number of access control entries. Thus, when you read the current list of rules, it might not look exactly like the list of all the rules you have added.","leadings":["","> "],"nodes":[{"content":" The underlying access control entries change as you apply and remove rules. The information in rules is merged if possible, to maintain the smallest number of access control entries. Thus, when you read the current list of rules, it might not look exactly like the list of all the rules you have added.","pos":[8,311],"nodes":[{"content":"The underlying access control entries change as you apply and remove rules.","pos":[1,76]},{"content":"The information in rules is merged if possible, to maintain the smallest number of access control entries.","pos":[77,183]},{"content":"Thus, when you read the current list of rules, it might not look exactly like the list of all the rules you have added.","pos":[184,303]}]}]},{"pos":[1616,2192],"content":"Use <xref:System.Security.AccessControl.RegistryAuditRule> objects to specify access rights to be audited for a user or group. To apply a rule to a registry key, use the <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName> method to get the <xref:System.Security.AccessControl.RegistrySecurity> object. Modify the <xref:System.Security.AccessControl.RegistrySecurity> object by using its methods to add the rule, and then use the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName> method to reattach the security object.","nodes":[{"content":"Use <xref:System.Security.AccessControl.RegistryAuditRule> objects to specify access rights to be audited for a user or group. To apply a rule to a registry key, use the <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName> method to get the <xref:System.Security.AccessControl.RegistrySecurity> object. Modify the <xref:System.Security.AccessControl.RegistrySecurity> object by using its methods to add the rule, and then use the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName> method to reattach the security object.","pos":[0,576],"nodes":[{"content":"Use <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.RegistryAuditRule&gt;</ph> objects to specify access rights to be audited for a user or group.","pos":[0,126],"source":"Use <xref:System.Security.AccessControl.RegistryAuditRule> objects to specify access rights to be audited for a user or group."},{"content":"To apply a rule to a registry key, use the <ph id=\"ph1\">&lt;xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName&gt;</ph> method to get the <ph id=\"ph2\">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object.","pos":[127,329],"source":" To apply a rule to a registry key, use the <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName> method to get the <xref:System.Security.AccessControl.RegistrySecurity> object."},{"content":"Modify the <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object by using its methods to add the rule, and then use the <ph id=\"ph2\">&lt;xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName&gt;</ph> method to reattach the security object.","pos":[330,576],"source":" Modify the <xref:System.Security.AccessControl.RegistrySecurity> object by using its methods to add the rule, and then use the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName> method to reattach the security object."}]}]},{"pos":[2200,2515],"content":"[!IMPORTANT]\n Changes you make to a <xref:System.Security.AccessControl.RegistrySecurity> object do not affect the access levels of the registry key until you call the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName> method to assign the altered security object to the registry key.","leadings":["","> "],"nodes":[{"content":"Changes you make to a <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> object do not affect the access levels of the registry key until you call the <ph id=\"ph2\">&lt;xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName&gt;</ph> method to assign the altered security object to the registry key.","pos":[14,313],"source":" Changes you make to a <xref:System.Security.AccessControl.RegistrySecurity> object do not affect the access levels of the registry key until you call the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName> method to assign the altered security object to the registry key."}]},{"pos":[2522,2819],"content":"<xref:System.Security.AccessControl.RegistryAuditRule> objects are immutable. Security for a registry key is modified by using the methods of the <xref:System.Security.AccessControl.RegistrySecurity> class to add or remove rules; as you do this, the underlying access control entries are modified.","nodes":[{"content":"<xref:System.Security.AccessControl.RegistryAuditRule> objects are immutable. Security for a registry key is modified by using the methods of the <xref:System.Security.AccessControl.RegistrySecurity> class to add or remove rules; as you do this, the underlying access control entries are modified.","pos":[0,297],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Security.AccessControl.RegistryAuditRule&gt;</ph> objects are immutable.","pos":[0,77],"source":"<xref:System.Security.AccessControl.RegistryAuditRule> objects are immutable."},{"content":"Security for a registry key is modified by using the methods of the <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.RegistrySecurity&gt;</ph> class to add or remove rules; as you do this, the underlying access control entries are modified.","pos":[78,297],"source":" Security for a registry key is modified by using the methods of the <xref:System.Security.AccessControl.RegistrySecurity> class to add or remove rules; as you do this, the underlying access control entries are modified."}]}]}],"pos":[1212,4051],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Security.AccessControl.RegistryAuditRule\"></xref> class, specifying the user or group to audit, the rights to audit, whether to take inheritance into account, and whether to audit success, failure, or both.","nodes":[{"pos":[0,259],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.RegistryAuditRule\"&gt;&lt;/xref&gt;</ph> class, specifying the user or group to audit, the rights to audit, whether to take inheritance into account, and whether to audit success, failure, or both.","source":"Initializes a new instance of the <xref href=\"System.Security.AccessControl.RegistryAuditRule\"></xref> class, specifying the user or group to audit, the rights to audit, whether to take inheritance into account, and whether to audit success, failure, or both."}],"pos":[7196,7456],"yaml":true},{"content":"All registry keys are containers, so the only inheritance flag that is meaningful for registry keys is the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag. If this flag is not specified, the propagation flags are ignored, and only the immediate key is affected. If the flag is present, the rule is propagated as shown in the following table. The table assumes there is a subkey S with child subkey CS and grandchild subkey GS. That is, the path for the grandchild subkey is S\\CS\\GS.  \n  \n|Propagation flags|S|CS|GS|  \n|-----------------------|-------|--------|--------|  \n|<xref:System.Security.AccessControl.PropagationFlags.None>|X|X|X|  \n|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>|X|X||  \n|<xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||X|X|  \n|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>, <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||X||  \n  \n The pattern for the grandchild subkey governs all subkeys contained by the grandchild subkey.  \n  \n For example, if the <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> flag is specified for `inheritanceFlags` and the <xref:System.Security.AccessControl.PropagationFlags.InheritOnly> propagation flag is specified for `propagationFlags`, this rule does not apply to the immediate subkey, but does apply to all its immediate child subkeys and to all subkeys they contain.  \n  \n> [!NOTE]\n>  Although you can specify the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag for `inheritanceFlags`, there is no point in doing so. For the purposes of access control, the name/value pairs in a subkey are not separate objects. The access rights to name/value pairs are controlled by the rights of the subkey. Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag. Finally, specifying the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag needlessly complicates the maintenance of rules, because it interferes with the normal combination of compatible rules.","nodes":[{"pos":[0,518],"content":"All registry keys are containers, so the only inheritance flag that is meaningful for registry keys is the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag. If this flag is not specified, the propagation flags are ignored, and only the immediate key is affected. If the flag is present, the rule is propagated as shown in the following table. The table assumes there is a subkey S with child subkey CS and grandchild subkey GS. That is, the path for the grandchild subkey is S\\CS\\GS.","nodes":[{"content":"All registry keys are containers, so the only inheritance flag that is meaningful for registry keys is the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag. If this flag is not specified, the propagation flags are ignored, and only the immediate key is affected. If the flag is present, the rule is propagated as shown in the following table. The table assumes there is a subkey S with child subkey CS and grandchild subkey GS. That is, the path for the grandchild subkey is S\\CS\\GS.","pos":[0,518],"nodes":[{"content":"All registry keys are containers, so the only inheritance flag that is meaningful for registry keys is the <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName&gt;</ph> flag.","pos":[0,191],"source":"All registry keys are containers, so the only inheritance flag that is meaningful for registry keys is the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag."},{"content":"If this flag is not specified, the propagation flags are ignored, and only the immediate key is affected.","pos":[192,297]},{"content":"If the flag is present, the rule is propagated as shown in the following table.","pos":[298,377]},{"content":"The table assumes there is a subkey S with child subkey CS and grandchild subkey GS.","pos":[378,462]},{"content":"That is, the path for the grandchild subkey is S\\CS\\GS.","pos":[463,518]}]}]},{"pos":[525,542],"content":"Propagation flags","nodes":[{"content":"Propagation flags","pos":[0,17]}]},{"pos":[543,544],"content":"S","nodes":[{"content":"S","pos":[0,1]}]},{"pos":[545,547],"content":"CS","nodes":[{"content":"CS","pos":[0,2]}]},{"pos":[548,550],"content":"GS","nodes":[{"content":"GS","pos":[0,2]}]},{"pos":[609,667],"content":"<xref:System.Security.AccessControl.PropagationFlags.None>","nodes":[]},{"pos":[668,669],"content":"X","nodes":[{"content":"X","pos":[0,1]}]},{"pos":[670,671],"content":"X","nodes":[{"content":"X","pos":[0,1]}]},{"pos":[672,673],"content":"X","nodes":[{"content":"X","pos":[0,1]}]},{"pos":[678,750],"content":"<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>","nodes":[]},{"pos":[751,752],"content":"X","nodes":[{"content":"X","pos":[0,1]}]},{"pos":[753,754],"content":"X","nodes":[{"content":"X","pos":[0,1]}]},{"pos":[760,825],"content":"<xref:System.Security.AccessControl.PropagationFlags.InheritOnly>","nodes":[]},{"pos":[827,828],"content":"X","nodes":[{"content":"X","pos":[0,1]}]},{"pos":[829,830],"content":"X","nodes":[{"content":"X","pos":[0,1]}]},{"pos":[835,974],"content":"<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>, <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Security.AccessControl.PropagationFlags.InheritOnly&gt;</ph>","pos":[0,139],"source":"<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>, <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>"}]},{"pos":[976,977],"content":"X","nodes":[{"content":"X","pos":[0,1]}]},{"pos":[986,1079],"content":"The pattern for the grandchild subkey governs all subkeys contained by the grandchild subkey.","nodes":[{"content":"The pattern for the grandchild subkey governs all subkeys contained by the grandchild subkey.","pos":[0,93]}]},{"pos":[1086,1478],"content":"For example, if the <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit&gt;</ph> flag is specified for <ph id=\"ph2\">`inheritanceFlags`</ph> and the <ph id=\"ph3\">&lt;xref:System.Security.AccessControl.PropagationFlags.InheritOnly&gt;</ph> propagation flag is specified for <ph id=\"ph4\">`propagationFlags`</ph>, this rule does not apply to the immediate subkey, but does apply to all its immediate child subkeys and to all subkeys they contain.","source":"For example, if the <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> flag is specified for `inheritanceFlags` and the <xref:System.Security.AccessControl.PropagationFlags.InheritOnly> propagation flag is specified for `propagationFlags`, this rule does not apply to the immediate subkey, but does apply to all its immediate child subkeys and to all subkeys they contain."},{"pos":[1486,2250],"content":"[!NOTE]\n Although you can specify the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag for `inheritanceFlags`, there is no point in doing so. For the purposes of access control, the name/value pairs in a subkey are not separate objects. The access rights to name/value pairs are controlled by the rights of the subkey. Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag. Finally, specifying the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag needlessly complicates the maintenance of rules, because it interferes with the normal combination of compatible rules.","leadings":["","> "],"nodes":[{"content":" Although you can specify the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag for `inheritanceFlags`, there is no point in doing so. For the purposes of access control, the name/value pairs in a subkey are not separate objects. The access rights to name/value pairs are controlled by the rights of the subkey. Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag. Finally, specifying the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag needlessly complicates the maintenance of rules, because it interferes with the normal combination of compatible rules.","pos":[8,762],"nodes":[{"content":"Although you can specify the <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName&gt;</ph> flag for <ph id=\"ph2\">`inheritanceFlags`</ph>, there is no point in doing so.","pos":[1,168],"source":" Although you can specify the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag for `inheritanceFlags`, there is no point in doing so."},{"content":"For the purposes of access control, the name/value pairs in a subkey are not separate objects.","pos":[169,263]},{"content":"The access rights to name/value pairs are controlled by the rights of the subkey.","pos":[264,345]},{"content":"Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit&gt;</ph> flag.","pos":[346,537],"source":" Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag."},{"content":"Finally, specifying the <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit&gt;</ph> flag needlessly complicates the maintenance of rules, because it interferes with the normal combination of compatible rules.","pos":[538,754],"source":" Finally, specifying the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag needlessly complicates the maintenance of rules, because it interferes with the normal combination of compatible rules."}]}]}],"pos":[7467,9736],"yaml":true,"extradata":"MT"},{"content":"The user or group the rule applies to. Must be of type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref> or a type such as <xref href=\"System.Security.Principal.NTAccount\"></xref> that can be converted to type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref>.","nodes":[{"pos":[0,292],"content":"The user or group the rule applies to. Must be of type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref> or a type such as <xref href=\"System.Security.Principal.NTAccount\"></xref> that can be converted to type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref>.","nodes":[{"content":"The user or group the rule applies to.","pos":[0,38]},{"content":"Must be of type <ph id=\"ph1\">&lt;xref href=\"System.Security.Principal.SecurityIdentifier\"&gt;&lt;/xref&gt;</ph> or a type such as <ph id=\"ph2\">&lt;xref href=\"System.Security.Principal.NTAccount\"&gt;&lt;/xref&gt;</ph> that can be converted to type <ph id=\"ph3\">&lt;xref href=\"System.Security.Principal.SecurityIdentifier\"&gt;&lt;/xref&gt;</ph>.","pos":[39,292],"source":" Must be of type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref> or a type such as <xref href=\"System.Security.Principal.NTAccount\"></xref> that can be converted to type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref>."}]}],"pos":[10189,10482],"yaml":true},{"content":"A bitwise combination of <xref href=\"System.Security.AccessControl.RegistryRights\"></xref> values specifying the kinds of access to audit.","nodes":[{"pos":[0,138],"content":"A bitwise combination of <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.RegistryRights\"&gt;&lt;/xref&gt;</ph> values specifying the kinds of access to audit.","source":"A bitwise combination of <xref href=\"System.Security.AccessControl.RegistryRights\"></xref> values specifying the kinds of access to audit."}],"pos":[10583,10722],"yaml":true},{"content":"A bitwise combination of <xref href=\"System.Security.AccessControl.InheritanceFlags\"></xref> values specifying whether the audit rule applies to subkeys of the current key.","nodes":[{"pos":[0,172],"content":"A bitwise combination of <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.InheritanceFlags\"&gt;&lt;/xref&gt;</ph> values specifying whether the audit rule applies to subkeys of the current key.","source":"A bitwise combination of <xref href=\"System.Security.AccessControl.InheritanceFlags\"></xref> values specifying whether the audit rule applies to subkeys of the current key."}],"pos":[10827,11000],"yaml":true},{"content":"A bitwise combination of <xref href=\"System.Security.AccessControl.PropagationFlags\"></xref> values that affect the way an inherited audit rule is propagated to subkeys of the current key.","nodes":[{"pos":[0,188],"content":"A bitwise combination of <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.PropagationFlags\"&gt;&lt;/xref&gt;</ph> values that affect the way an inherited audit rule is propagated to subkeys of the current key.","source":"A bitwise combination of <xref href=\"System.Security.AccessControl.PropagationFlags\"></xref> values that affect the way an inherited audit rule is propagated to subkeys of the current key."}],"pos":[11105,11294],"yaml":true},{"content":"A bitwise combination of <xref href=\"System.Security.AccessControl.AuditFlags\"></xref> values specifying whether to audit success, failure, or both.","nodes":[{"pos":[0,148],"content":"A bitwise combination of <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.AuditFlags\"&gt;&lt;/xref&gt;</ph> values specifying whether to audit success, failure, or both.","source":"A bitwise combination of <xref href=\"System.Security.AccessControl.AuditFlags\"></xref> values specifying whether to audit success, failure, or both."}],"pos":[11382,11531],"yaml":true},{"content":"<code>eventRights</code> specifies an invalid value.  \n  \n -or-  \n  \n <code>flags</code> specifies an invalid value.  \n  \n -or-  \n  \n <code>inheritanceFlags</code> specifies an invalid value.  \n  \n -or-  \n  \n <code>propagationFlags</code> specifies an invalid value.","nodes":[{"pos":[0,52],"content":"<ph id=\"ph1\">&lt;code&gt;eventRights&lt;/code&gt;</ph> specifies an invalid value.","source":"<code>eventRights</code> specifies an invalid value."},{"pos":[59,63],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[70,116],"content":"<ph id=\"ph1\">&lt;code&gt;flags&lt;/code&gt;</ph> specifies an invalid value.","source":"<code>flags</code> specifies an invalid value."},{"pos":[123,127],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[134,191],"content":"<ph id=\"ph1\">&lt;code&gt;inheritanceFlags&lt;/code&gt;</ph> specifies an invalid value.","source":"<code>inheritanceFlags</code> specifies an invalid value."},{"pos":[198,202],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[209,266],"content":"<ph id=\"ph1\">&lt;code&gt;propagationFlags&lt;/code&gt;</ph> specifies an invalid value.","source":"<code>propagationFlags</code> specifies an invalid value."}],"pos":[11726,12007],"yaml":true},{"content":"<code>identity</code> is `null`.  \n  \n -or-  \n  \n <code>registryRights</code> is zero.","nodes":[{"pos":[0,32],"content":"<ph id=\"ph1\">&lt;code&gt;identity&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>identity</code> is `null`."},{"pos":[39,43],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[50,86],"content":"<ph id=\"ph1\">&lt;code&gt;registryRights&lt;/code&gt;</ph> is zero.","source":"<code>registryRights</code> is zero."}],"pos":[12109,12202],"yaml":true},{"content":"<code>identity</code> is neither of type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref> nor of a type such as <xref href=\"System.Security.Principal.NTAccount\"></xref> that can be converted to type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref>.","nodes":[{"pos":[0,282],"content":"<ph id=\"ph1\">&lt;code&gt;identity&lt;/code&gt;</ph> is neither of type <ph id=\"ph2\">&lt;xref href=\"System.Security.Principal.SecurityIdentifier\"&gt;&lt;/xref&gt;</ph> nor of a type such as <ph id=\"ph3\">&lt;xref href=\"System.Security.Principal.NTAccount\"&gt;&lt;/xref&gt;</ph> that can be converted to type <ph id=\"ph4\">&lt;xref href=\"System.Security.Principal.SecurityIdentifier\"&gt;&lt;/xref&gt;</ph>.","source":"<code>identity</code> is neither of type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref> nor of a type such as <xref href=\"System.Security.Principal.NTAccount\"></xref> that can be converted to type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref>."}],"pos":[12296,12579],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Security.AccessControl.RegistryAuditRule\"></xref> class, specifying the name of the user or group to audit, the rights to audit, whether to take inheritance into account, and whether to audit success, failure, or both.","nodes":[{"pos":[0,271],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.RegistryAuditRule\"&gt;&lt;/xref&gt;</ph> class, specifying the name of the user or group to audit, the rights to audit, whether to take inheritance into account, and whether to audit success, failure, or both.","source":"Initializes a new instance of the <xref href=\"System.Security.AccessControl.RegistryAuditRule\"></xref> class, specifying the name of the user or group to audit, the rights to audit, whether to take inheritance into account, and whether to audit success, failure, or both."}],"pos":[14666,14938],"yaml":true},{"content":"All registry keys are containers, so the only inheritance flag that is meaningful for registry keys is the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag. If this flag is not specified, the propagation flags are ignored, and only the immediate key is affected. If the flag is present, the rule is propagated as shown in the following table. The table assumes there is a subkey S with child subkey CS and grandchild subkey GS. That is, the path for the grandchild subkey is S\\CS\\GS.  \n  \n|Propagation flags|S|CS|GS|  \n|-----------------------|-------|--------|--------|  \n|<xref:System.Security.AccessControl.PropagationFlags.None>|X|X|X|  \n|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>|X|X||  \n|<xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||X|X|  \n|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>, <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||X||  \n  \n The pattern for the grandchild subkey governs all subkeys contained by the grandchild subkey.  \n  \n For example, if the <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> flag is specified for `inheritanceFlags` and the <xref:System.Security.AccessControl.PropagationFlags.InheritOnly> propagation flag is specified for `propagationFlags`, this rule does not apply to the immediate subkey, but does apply to all its immediate child subkeys and to all subkeys they contain.  \n  \n> [!NOTE]\n>  Although you can specify the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag for `inheritanceFlags`, there is no point in doing so. For the purposes of access control, the name/value pairs in a subkey are not separate objects. The access rights to name/value pairs are controlled by the rights of the subkey. Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag. Finally, specifying the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag needlessly complicates the maintenance of rules, because it interferes with the normal combination of compatible rules.  \n  \n This constructor is equivalent to creating an <xref:System.Security.Principal.NTAccount> object, by passing `identity` to the <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=fullName> constructor, and passing the newly created <xref:System.Security.Principal.NTAccount> object to the <xref:System.Security.AccessControl.RegistryAuditRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.InheritanceFlags%2CSystem.Security.AccessControl.PropagationFlags%2CSystem.Security.AccessControl.AuditFlags%29> constructor.","nodes":[{"pos":[0,518],"content":"All registry keys are containers, so the only inheritance flag that is meaningful for registry keys is the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag. If this flag is not specified, the propagation flags are ignored, and only the immediate key is affected. If the flag is present, the rule is propagated as shown in the following table. The table assumes there is a subkey S with child subkey CS and grandchild subkey GS. That is, the path for the grandchild subkey is S\\CS\\GS.","nodes":[{"content":"All registry keys are containers, so the only inheritance flag that is meaningful for registry keys is the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag. If this flag is not specified, the propagation flags are ignored, and only the immediate key is affected. If the flag is present, the rule is propagated as shown in the following table. The table assumes there is a subkey S with child subkey CS and grandchild subkey GS. That is, the path for the grandchild subkey is S\\CS\\GS.","pos":[0,518],"nodes":[{"content":"All registry keys are containers, so the only inheritance flag that is meaningful for registry keys is the <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName&gt;</ph> flag.","pos":[0,191],"source":"All registry keys are containers, so the only inheritance flag that is meaningful for registry keys is the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag."},{"content":"If this flag is not specified, the propagation flags are ignored, and only the immediate key is affected.","pos":[192,297]},{"content":"If the flag is present, the rule is propagated as shown in the following table.","pos":[298,377]},{"content":"The table assumes there is a subkey S with child subkey CS and grandchild subkey GS.","pos":[378,462]},{"content":"That is, the path for the grandchild subkey is S\\CS\\GS.","pos":[463,518]}]}]},{"pos":[525,542],"content":"Propagation flags","nodes":[{"content":"Propagation flags","pos":[0,17]}]},{"pos":[543,544],"content":"S","nodes":[{"content":"S","pos":[0,1]}]},{"pos":[545,547],"content":"CS","nodes":[{"content":"CS","pos":[0,2]}]},{"pos":[548,550],"content":"GS","nodes":[{"content":"GS","pos":[0,2]}]},{"pos":[609,667],"content":"<xref:System.Security.AccessControl.PropagationFlags.None>","nodes":[]},{"pos":[668,669],"content":"X","nodes":[{"content":"X","pos":[0,1]}]},{"pos":[670,671],"content":"X","nodes":[{"content":"X","pos":[0,1]}]},{"pos":[672,673],"content":"X","nodes":[{"content":"X","pos":[0,1]}]},{"pos":[678,750],"content":"<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>","nodes":[]},{"pos":[751,752],"content":"X","nodes":[{"content":"X","pos":[0,1]}]},{"pos":[753,754],"content":"X","nodes":[{"content":"X","pos":[0,1]}]},{"pos":[760,825],"content":"<xref:System.Security.AccessControl.PropagationFlags.InheritOnly>","nodes":[]},{"pos":[827,828],"content":"X","nodes":[{"content":"X","pos":[0,1]}]},{"pos":[829,830],"content":"X","nodes":[{"content":"X","pos":[0,1]}]},{"pos":[835,974],"content":"<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>, <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Security.AccessControl.PropagationFlags.InheritOnly&gt;</ph>","pos":[0,139],"source":"<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>, <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>"}]},{"pos":[976,977],"content":"X","nodes":[{"content":"X","pos":[0,1]}]},{"pos":[986,1079],"content":"The pattern for the grandchild subkey governs all subkeys contained by the grandchild subkey.","nodes":[{"content":"The pattern for the grandchild subkey governs all subkeys contained by the grandchild subkey.","pos":[0,93]}]},{"pos":[1086,1478],"content":"For example, if the <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit&gt;</ph> flag is specified for <ph id=\"ph2\">`inheritanceFlags`</ph> and the <ph id=\"ph3\">&lt;xref:System.Security.AccessControl.PropagationFlags.InheritOnly&gt;</ph> propagation flag is specified for <ph id=\"ph4\">`propagationFlags`</ph>, this rule does not apply to the immediate subkey, but does apply to all its immediate child subkeys and to all subkeys they contain.","source":"For example, if the <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> flag is specified for `inheritanceFlags` and the <xref:System.Security.AccessControl.PropagationFlags.InheritOnly> propagation flag is specified for `propagationFlags`, this rule does not apply to the immediate subkey, but does apply to all its immediate child subkeys and to all subkeys they contain."},{"pos":[1486,2250],"content":"[!NOTE]\n Although you can specify the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag for `inheritanceFlags`, there is no point in doing so. For the purposes of access control, the name/value pairs in a subkey are not separate objects. The access rights to name/value pairs are controlled by the rights of the subkey. Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag. Finally, specifying the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag needlessly complicates the maintenance of rules, because it interferes with the normal combination of compatible rules.","leadings":["","> "],"nodes":[{"content":" Although you can specify the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag for `inheritanceFlags`, there is no point in doing so. For the purposes of access control, the name/value pairs in a subkey are not separate objects. The access rights to name/value pairs are controlled by the rights of the subkey. Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag. Finally, specifying the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag needlessly complicates the maintenance of rules, because it interferes with the normal combination of compatible rules.","pos":[8,762],"nodes":[{"content":"Although you can specify the <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName&gt;</ph> flag for <ph id=\"ph2\">`inheritanceFlags`</ph>, there is no point in doing so.","pos":[1,168],"source":" Although you can specify the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag for `inheritanceFlags`, there is no point in doing so."},{"content":"For the purposes of access control, the name/value pairs in a subkey are not separate objects.","pos":[169,263]},{"content":"The access rights to name/value pairs are controlled by the rights of the subkey.","pos":[264,345]},{"content":"Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit&gt;</ph> flag.","pos":[346,537],"source":" Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag."},{"content":"Finally, specifying the <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit&gt;</ph> flag needlessly complicates the maintenance of rules, because it interferes with the normal combination of compatible rules.","pos":[538,754],"source":" Finally, specifying the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag needlessly complicates the maintenance of rules, because it interferes with the normal combination of compatible rules."}]}]},{"pos":[2257,2890],"content":"This constructor is equivalent to creating an <ph id=\"ph1\">&lt;xref:System.Security.Principal.NTAccount&gt;</ph> object, by passing <ph id=\"ph2\">`identity`</ph> to the <ph id=\"ph3\">&lt;xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=fullName&gt;</ph> constructor, and passing the newly created <ph id=\"ph4\">&lt;xref:System.Security.Principal.NTAccount&gt;</ph> object to the <ph id=\"ph5\">&lt;xref:System.Security.AccessControl.RegistryAuditRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.InheritanceFlags%2CSystem.Security.AccessControl.PropagationFlags%2CSystem.Security.AccessControl.AuditFlags%29&gt;</ph> constructor.","source":"This constructor is equivalent to creating an <xref:System.Security.Principal.NTAccount> object, by passing `identity` to the <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=fullName> constructor, and passing the newly created <xref:System.Security.Principal.NTAccount> object to the <xref:System.Security.AccessControl.RegistryAuditRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.InheritanceFlags%2CSystem.Security.AccessControl.PropagationFlags%2CSystem.Security.AccessControl.AuditFlags%29> constructor."}],"pos":[14949,17860],"yaml":true,"extradata":"MT"},{"content":"The name of the user or group the rule applies to.","nodes":[{"pos":[0,50],"content":"The name of the user or group the rule applies to.","nodes":[{"content":"The name of the user or group the rule applies to.","pos":[0,50]}]}],"pos":[18246,18297],"yaml":true},{"content":"A bitwise combination of <xref href=\"System.Security.AccessControl.RegistryRights\"></xref> values specifying the kinds of access to audit.","nodes":[{"pos":[0,138],"content":"A bitwise combination of <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.RegistryRights\"&gt;&lt;/xref&gt;</ph> values specifying the kinds of access to audit.","source":"A bitwise combination of <xref href=\"System.Security.AccessControl.RegistryRights\"></xref> values specifying the kinds of access to audit."}],"pos":[18398,18537],"yaml":true},{"content":"A combination of <xref href=\"System.Security.AccessControl.InheritanceFlags\"></xref> flags that specifies whether the audit rule applies to subkeys of the current key.","nodes":[{"pos":[0,167],"content":"A combination of <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.InheritanceFlags\"&gt;&lt;/xref&gt;</ph> flags that specifies whether the audit rule applies to subkeys of the current key.","source":"A combination of <xref href=\"System.Security.AccessControl.InheritanceFlags\"></xref> flags that specifies whether the audit rule applies to subkeys of the current key."}],"pos":[18642,18810],"yaml":true},{"content":"A combination of <xref href=\"System.Security.AccessControl.PropagationFlags\"></xref> flags that affect the way an inherited audit rule is propagated to subkeys of the current key.","nodes":[{"pos":[0,179],"content":"A combination of <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.PropagationFlags\"&gt;&lt;/xref&gt;</ph> flags that affect the way an inherited audit rule is propagated to subkeys of the current key.","source":"A combination of <xref href=\"System.Security.AccessControl.PropagationFlags\"></xref> flags that affect the way an inherited audit rule is propagated to subkeys of the current key."}],"pos":[18915,19095],"yaml":true},{"content":"A bitwise combination of <xref href=\"System.Security.AccessControl.AuditFlags\"></xref> values specifying whether to audit success, failure, or both.","nodes":[{"pos":[0,148],"content":"A bitwise combination of <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.AuditFlags\"&gt;&lt;/xref&gt;</ph> values specifying whether to audit success, failure, or both.","source":"A bitwise combination of <xref href=\"System.Security.AccessControl.AuditFlags\"></xref> values specifying whether to audit success, failure, or both."}],"pos":[19183,19332],"yaml":true},{"content":"<code>eventRights</code> specifies an invalid value.  \n  \n -or-  \n  \n <code>flags</code> specifies an invalid value.  \n  \n -or-  \n  \n <code>inheritanceFlags</code> specifies an invalid value.  \n  \n -or-  \n  \n <code>propagationFlags</code> specifies an invalid value.","nodes":[{"pos":[0,52],"content":"<ph id=\"ph1\">&lt;code&gt;eventRights&lt;/code&gt;</ph> specifies an invalid value.","source":"<code>eventRights</code> specifies an invalid value."},{"pos":[59,63],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[70,116],"content":"<ph id=\"ph1\">&lt;code&gt;flags&lt;/code&gt;</ph> specifies an invalid value.","source":"<code>flags</code> specifies an invalid value."},{"pos":[123,127],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[134,191],"content":"<ph id=\"ph1\">&lt;code&gt;inheritanceFlags&lt;/code&gt;</ph> specifies an invalid value.","source":"<code>inheritanceFlags</code> specifies an invalid value."},{"pos":[198,202],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[209,266],"content":"<ph id=\"ph1\">&lt;code&gt;propagationFlags&lt;/code&gt;</ph> specifies an invalid value.","source":"<code>propagationFlags</code> specifies an invalid value."}],"pos":[19527,19808],"yaml":true},{"content":"<code>registryRights</code> is zero.","nodes":[{"pos":[0,36],"content":"<ph id=\"ph1\">&lt;code&gt;registryRights&lt;/code&gt;</ph> is zero.","source":"<code>registryRights</code> is zero."}],"pos":[19910,19947],"yaml":true},{"content":"<code>identity</code> is `null`.  \n  \n -or-  \n  \n <code>identity</code> is a zero-length string.  \n  \n -or-  \n  \n <code>identity</code> is longer than 512 characters.","nodes":[{"pos":[0,32],"content":"<ph id=\"ph1\">&lt;code&gt;identity&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>identity</code> is `null`."},{"pos":[39,43],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[50,96],"content":"<ph id=\"ph1\">&lt;code&gt;identity&lt;/code&gt;</ph> is a zero-length string.","source":"<code>identity</code> is a zero-length string."},{"pos":[103,107],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[114,166],"content":"<ph id=\"ph1\">&lt;code&gt;identity&lt;/code&gt;</ph> is longer than 512 characters.","source":"<code>identity</code> is longer than 512 characters."}],"pos":[20041,20218],"yaml":true},{"content":"Gets the access rights affected by the audit rule.","nodes":[{"pos":[0,50],"content":"Gets the access rights affected by the audit rule.","nodes":[{"content":"Gets the access rights affected by the audit rule.","pos":[0,50]}]}],"pos":[21517,21568],"yaml":true},{"content":"<xref:System.Security.AccessControl.RegistryAuditRule> objects are immutable. You can create a new audit rule representing a different user, different rights, or a different combination of <xref:System.Security.AccessControl.AuditFlags> flags, but you cannot modify an existing audit rule.","nodes":[{"pos":[0,289],"content":"<xref:System.Security.AccessControl.RegistryAuditRule> objects are immutable. You can create a new audit rule representing a different user, different rights, or a different combination of <xref:System.Security.AccessControl.AuditFlags> flags, but you cannot modify an existing audit rule.","nodes":[{"content":"<xref:System.Security.AccessControl.RegistryAuditRule> objects are immutable. You can create a new audit rule representing a different user, different rights, or a different combination of <xref:System.Security.AccessControl.AuditFlags> flags, but you cannot modify an existing audit rule.","pos":[0,289],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Security.AccessControl.RegistryAuditRule&gt;</ph> objects are immutable.","pos":[0,77],"source":"<xref:System.Security.AccessControl.RegistryAuditRule> objects are immutable."},{"content":"You can create a new audit rule representing a different user, different rights, or a different combination of <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.AuditFlags&gt;</ph> flags, but you cannot modify an existing audit rule.","pos":[78,289],"source":" You can create a new audit rule representing a different user, different rights, or a different combination of <xref:System.Security.AccessControl.AuditFlags> flags, but you cannot modify an existing audit rule."}]}]}],"pos":[21579,21869],"yaml":true,"extradata":"MT"},{"content":"A bitwise combination of <xref href=\"System.Security.AccessControl.RegistryRights\"></xref> values that indicates the rights affected by the audit rule.","nodes":[{"pos":[0,151],"content":"A bitwise combination of <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.RegistryRights\"&gt;&lt;/xref&gt;</ph> values that indicates the rights affected by the audit rule.","source":"A bitwise combination of <xref href=\"System.Security.AccessControl.RegistryRights\"></xref> values that indicates the rights affected by the audit rule."}],"pos":[22056,22208],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.AccessControl.RegistryAuditRule\n  commentId: T:System.Security.AccessControl.RegistryAuditRule\n  id: RegistryAuditRule\n  children:\n  - System.Security.AccessControl.RegistryAuditRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)\n  - System.Security.AccessControl.RegistryAuditRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)\n  - System.Security.AccessControl.RegistryAuditRule.RegistryRights\n  langs:\n  - csharp\n  name: RegistryAuditRule\n  nameWithType: RegistryAuditRule\n  fullName: System.Security.AccessControl.RegistryAuditRule\n  type: Class\n  assemblies:\n  - Microsoft.Win32.Registry.AccessControl\n  - mscorlib\n  - Microsoft.Win32.Registry\n  namespace: System.Security.AccessControl\n  summary: Represents a set of access rights to be audited for a user or group. This class cannot be inherited.\n  remarks: \"The <xref:System.Security.AccessControl.RegistryAuditRule> class is one of a set of classes that the .NET Framework provides for managing Windows access control security on registry keys. For an overview of these classes and their relationship to the underlying Windows access control structures, see <xref:System.Security.AccessControl.RegistrySecurity>.  \\n  \\n> [!NOTE]\\n>  Windows access control security can only be applied to registry keys. It cannot be applied to individual key/value pairs stored in a key.  \\n  \\n To get a list of the audit rules currently applied to a registry key, use the <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName> method to get a <xref:System.Security.AccessControl.RegistrySecurity> object, and then use its <xref:System.Security.AccessControl.CommonObjectSecurity.GetAuditRules%2A> method to obtain a collection of <xref:System.Security.AccessControl.RegistryAuditRule> objects.  \\n  \\n <xref:System.Security.AccessControl.RegistryAuditRule> objects do not map one-to-one with access control entries in the underlying discretionary access control list (DACL). When you get the set of all audit rules for a registry key, the set contains the minimum number of rules currently required to express all the access control entries.  \\n  \\n> [!NOTE]\\n>  The underlying access control entries change as you apply and remove rules. The information in rules is merged if possible, to maintain the smallest number of access control entries. Thus, when you read the current list of rules, it might not look exactly like the list of all the rules you have added.  \\n  \\n Use <xref:System.Security.AccessControl.RegistryAuditRule> objects to specify access rights to be audited for a user or group. To apply a rule to a registry key, use the <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName> method to get the <xref:System.Security.AccessControl.RegistrySecurity> object. Modify the <xref:System.Security.AccessControl.RegistrySecurity> object by using its methods to add the rule, and then use the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName> method to reattach the security object.  \\n  \\n> [!IMPORTANT]\\n>  Changes you make to a <xref:System.Security.AccessControl.RegistrySecurity> object do not affect the access levels of the registry key until you call the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName> method to assign the altered security object to the registry key.  \\n  \\n <xref:System.Security.AccessControl.RegistryAuditRule> objects are immutable. Security for a registry key is modified by using the methods of the <xref:System.Security.AccessControl.RegistrySecurity> class to add or remove rules; as you do this, the underlying access control entries are modified.\"\n  syntax:\n    content: 'public sealed class RegistryAuditRule : System.Security.AccessControl.AuditRule'\n  inheritance:\n  - System.Object\n  - System.Security.AccessControl.AuthorizationRule\n  - System.Security.AccessControl.AuditRule\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Security.AccessControl.AuditRule.AuditFlags\n  - System.Security.AccessControl.AuthorizationRule.AccessMask\n  - System.Security.AccessControl.AuthorizationRule.IdentityReference\n  - System.Security.AccessControl.AuthorizationRule.InheritanceFlags\n  - System.Security.AccessControl.AuthorizationRule.IsInherited\n  - System.Security.AccessControl.AuthorizationRule.PropagationFlags\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/RegistryAuditRule.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.RegistryAuditRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)\n  commentId: M:System.Security.AccessControl.RegistryAuditRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)\n  id: '#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)'\n  parent: System.Security.AccessControl.RegistryAuditRule\n  langs:\n  - csharp\n  name: RegistryAuditRule(IdentityReference, RegistryRights, InheritanceFlags, PropagationFlags, AuditFlags)\n  nameWithType: RegistryAuditRule.RegistryAuditRule(IdentityReference, RegistryRights, InheritanceFlags, PropagationFlags, AuditFlags)\n  fullName: RegistryAuditRule.RegistryAuditRule(IdentityReference, RegistryRights, InheritanceFlags, PropagationFlags, AuditFlags)\n  type: Constructor\n  assemblies:\n  - Microsoft.Win32.Registry.AccessControl\n  - mscorlib\n  - Microsoft.Win32.Registry\n  namespace: System.Security.AccessControl\n  summary: Initializes a new instance of the <xref href=\"System.Security.AccessControl.RegistryAuditRule\"></xref> class, specifying the user or group to audit, the rights to audit, whether to take inheritance into account, and whether to audit success, failure, or both.\n  remarks: \"All registry keys are containers, so the only inheritance flag that is meaningful for registry keys is the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag. If this flag is not specified, the propagation flags are ignored, and only the immediate key is affected. If the flag is present, the rule is propagated as shown in the following table. The table assumes there is a subkey S with child subkey CS and grandchild subkey GS. That is, the path for the grandchild subkey is S\\\\CS\\\\GS.  \\n  \\n|Propagation flags|S|CS|GS|  \\n|-----------------------|-------|--------|--------|  \\n|<xref:System.Security.AccessControl.PropagationFlags.None>|X|X|X|  \\n|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>|X|X||  \\n|<xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||X|X|  \\n|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>, <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||X||  \\n  \\n The pattern for the grandchild subkey governs all subkeys contained by the grandchild subkey.  \\n  \\n For example, if the <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> flag is specified for `inheritanceFlags` and the <xref:System.Security.AccessControl.PropagationFlags.InheritOnly> propagation flag is specified for `propagationFlags`, this rule does not apply to the immediate subkey, but does apply to all its immediate child subkeys and to all subkeys they contain.  \\n  \\n> [!NOTE]\\n>  Although you can specify the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag for `inheritanceFlags`, there is no point in doing so. For the purposes of access control, the name/value pairs in a subkey are not separate objects. The access rights to name/value pairs are controlled by the rights of the subkey. Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag. Finally, specifying the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag needlessly complicates the maintenance of rules, because it interferes with the normal combination of compatible rules.\"\n  syntax:\n    content: public RegistryAuditRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);\n    parameters:\n    - id: identity\n      type: System.Security.Principal.IdentityReference\n      description: The user or group the rule applies to. Must be of type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref> or a type such as <xref href=\"System.Security.Principal.NTAccount\"></xref> that can be converted to type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref>.\n    - id: registryRights\n      type: System.Security.AccessControl.RegistryRights\n      description: A bitwise combination of <xref href=\"System.Security.AccessControl.RegistryRights\"></xref> values specifying the kinds of access to audit.\n    - id: inheritanceFlags\n      type: System.Security.AccessControl.InheritanceFlags\n      description: A bitwise combination of <xref href=\"System.Security.AccessControl.InheritanceFlags\"></xref> values specifying whether the audit rule applies to subkeys of the current key.\n    - id: propagationFlags\n      type: System.Security.AccessControl.PropagationFlags\n      description: A bitwise combination of <xref href=\"System.Security.AccessControl.PropagationFlags\"></xref> values that affect the way an inherited audit rule is propagated to subkeys of the current key.\n    - id: flags\n      type: System.Security.AccessControl.AuditFlags\n      description: A bitwise combination of <xref href=\"System.Security.AccessControl.AuditFlags\"></xref> values specifying whether to audit success, failure, or both.\n  overload: System.Security.AccessControl.RegistryAuditRule.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>eventRights</code> specifies an invalid value.  \\n  \\n -or-  \\n  \\n <code>flags</code> specifies an invalid value.  \\n  \\n -or-  \\n  \\n <code>inheritanceFlags</code> specifies an invalid value.  \\n  \\n -or-  \\n  \\n <code>propagationFlags</code> specifies an invalid value.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>identity</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>registryRights</code> is zero.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>identity</code> is neither of type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref> nor of a type such as <xref href=\"System.Security.Principal.NTAccount\"></xref> that can be converted to type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/RegistryAuditRule.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.RegistryAuditRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)\n  commentId: M:System.Security.AccessControl.RegistryAuditRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)\n  id: '#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)'\n  parent: System.Security.AccessControl.RegistryAuditRule\n  langs:\n  - csharp\n  name: RegistryAuditRule(String, RegistryRights, InheritanceFlags, PropagationFlags, AuditFlags)\n  nameWithType: RegistryAuditRule.RegistryAuditRule(String, RegistryRights, InheritanceFlags, PropagationFlags, AuditFlags)\n  fullName: RegistryAuditRule.RegistryAuditRule(String, RegistryRights, InheritanceFlags, PropagationFlags, AuditFlags)\n  type: Constructor\n  assemblies:\n  - Microsoft.Win32.Registry.AccessControl\n  - mscorlib\n  - Microsoft.Win32.Registry\n  namespace: System.Security.AccessControl\n  summary: Initializes a new instance of the <xref href=\"System.Security.AccessControl.RegistryAuditRule\"></xref> class, specifying the name of the user or group to audit, the rights to audit, whether to take inheritance into account, and whether to audit success, failure, or both.\n  remarks: \"All registry keys are containers, so the only inheritance flag that is meaningful for registry keys is the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag. If this flag is not specified, the propagation flags are ignored, and only the immediate key is affected. If the flag is present, the rule is propagated as shown in the following table. The table assumes there is a subkey S with child subkey CS and grandchild subkey GS. That is, the path for the grandchild subkey is S\\\\CS\\\\GS.  \\n  \\n|Propagation flags|S|CS|GS|  \\n|-----------------------|-------|--------|--------|  \\n|<xref:System.Security.AccessControl.PropagationFlags.None>|X|X|X|  \\n|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>|X|X||  \\n|<xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||X|X|  \\n|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>, <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||X||  \\n  \\n The pattern for the grandchild subkey governs all subkeys contained by the grandchild subkey.  \\n  \\n For example, if the <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> flag is specified for `inheritanceFlags` and the <xref:System.Security.AccessControl.PropagationFlags.InheritOnly> propagation flag is specified for `propagationFlags`, this rule does not apply to the immediate subkey, but does apply to all its immediate child subkeys and to all subkeys they contain.  \\n  \\n> [!NOTE]\\n>  Although you can specify the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag for `inheritanceFlags`, there is no point in doing so. For the purposes of access control, the name/value pairs in a subkey are not separate objects. The access rights to name/value pairs are controlled by the rights of the subkey. Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag. Finally, specifying the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag needlessly complicates the maintenance of rules, because it interferes with the normal combination of compatible rules.  \\n  \\n This constructor is equivalent to creating an <xref:System.Security.Principal.NTAccount> object, by passing `identity` to the <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=fullName> constructor, and passing the newly created <xref:System.Security.Principal.NTAccount> object to the <xref:System.Security.AccessControl.RegistryAuditRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.InheritanceFlags%2CSystem.Security.AccessControl.PropagationFlags%2CSystem.Security.AccessControl.AuditFlags%29> constructor.\"\n  syntax:\n    content: public RegistryAuditRule (string identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);\n    parameters:\n    - id: identity\n      type: System.String\n      description: The name of the user or group the rule applies to.\n    - id: registryRights\n      type: System.Security.AccessControl.RegistryRights\n      description: A bitwise combination of <xref href=\"System.Security.AccessControl.RegistryRights\"></xref> values specifying the kinds of access to audit.\n    - id: inheritanceFlags\n      type: System.Security.AccessControl.InheritanceFlags\n      description: A combination of <xref href=\"System.Security.AccessControl.InheritanceFlags\"></xref> flags that specifies whether the audit rule applies to subkeys of the current key.\n    - id: propagationFlags\n      type: System.Security.AccessControl.PropagationFlags\n      description: A combination of <xref href=\"System.Security.AccessControl.PropagationFlags\"></xref> flags that affect the way an inherited audit rule is propagated to subkeys of the current key.\n    - id: flags\n      type: System.Security.AccessControl.AuditFlags\n      description: A bitwise combination of <xref href=\"System.Security.AccessControl.AuditFlags\"></xref> values specifying whether to audit success, failure, or both.\n  overload: System.Security.AccessControl.RegistryAuditRule.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>eventRights</code> specifies an invalid value.  \\n  \\n -or-  \\n  \\n <code>flags</code> specifies an invalid value.  \\n  \\n -or-  \\n  \\n <code>inheritanceFlags</code> specifies an invalid value.  \\n  \\n -or-  \\n  \\n <code>propagationFlags</code> specifies an invalid value.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>registryRights</code> is zero.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>identity</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>identity</code> is a zero-length string.  \\n  \\n -or-  \\n  \\n <code>identity</code> is longer than 512 characters.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/RegistryAuditRule.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.RegistryAuditRule.RegistryRights\n  commentId: P:System.Security.AccessControl.RegistryAuditRule.RegistryRights\n  id: RegistryRights\n  parent: System.Security.AccessControl.RegistryAuditRule\n  langs:\n  - csharp\n  name: RegistryRights\n  nameWithType: RegistryAuditRule.RegistryRights\n  fullName: RegistryAuditRule.RegistryRights\n  type: Property\n  assemblies:\n  - Microsoft.Win32.Registry.AccessControl\n  - mscorlib\n  - Microsoft.Win32.Registry\n  namespace: System.Security.AccessControl\n  summary: Gets the access rights affected by the audit rule.\n  remarks: <xref:System.Security.AccessControl.RegistryAuditRule> objects are immutable. You can create a new audit rule representing a different user, different rights, or a different combination of <xref:System.Security.AccessControl.AuditFlags> flags, but you cannot modify an existing audit rule.\n  syntax:\n    content: public System.Security.AccessControl.RegistryRights RegistryRights { get; }\n    return:\n      type: System.Security.AccessControl.RegistryRights\n      description: A bitwise combination of <xref href=\"System.Security.AccessControl.RegistryRights\"></xref> values that indicates the rights affected by the audit rule.\n  overload: System.Security.AccessControl.RegistryAuditRule.RegistryRights*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/RegistryAuditRule.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Security.AccessControl.AuditRule\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AuditRule\n  nameWithType: AuditRule\n  fullName: System.Security.AccessControl.AuditRule\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.Security.AccessControl.RegistryAuditRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)\n  parent: System.Security.AccessControl.RegistryAuditRule\n  isExternal: false\n  name: RegistryAuditRule(IdentityReference, RegistryRights, InheritanceFlags, PropagationFlags, AuditFlags)\n  nameWithType: RegistryAuditRule.RegistryAuditRule(IdentityReference, RegistryRights, InheritanceFlags, PropagationFlags, AuditFlags)\n  fullName: RegistryAuditRule.RegistryAuditRule(IdentityReference, RegistryRights, InheritanceFlags, PropagationFlags, AuditFlags)\n- uid: System.Security.Principal.IdentityReference\n  parent: System.Security.Principal\n  isExternal: false\n  name: IdentityReference\n  nameWithType: IdentityReference\n  fullName: System.Security.Principal.IdentityReference\n- uid: System.Security.AccessControl.RegistryRights\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: RegistryRights\n  nameWithType: RegistryRights\n  fullName: System.Security.AccessControl.RegistryRights\n- uid: System.Security.AccessControl.InheritanceFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: InheritanceFlags\n  nameWithType: InheritanceFlags\n  fullName: System.Security.AccessControl.InheritanceFlags\n- uid: System.Security.AccessControl.PropagationFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: PropagationFlags\n  nameWithType: PropagationFlags\n  fullName: System.Security.AccessControl.PropagationFlags\n- uid: System.Security.AccessControl.AuditFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AuditFlags\n  nameWithType: AuditFlags\n  fullName: System.Security.AccessControl.AuditFlags\n- uid: System.Security.AccessControl.RegistryAuditRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)\n  parent: System.Security.AccessControl.RegistryAuditRule\n  isExternal: false\n  name: RegistryAuditRule(String, RegistryRights, InheritanceFlags, PropagationFlags, AuditFlags)\n  nameWithType: RegistryAuditRule.RegistryAuditRule(String, RegistryRights, InheritanceFlags, PropagationFlags, AuditFlags)\n  fullName: RegistryAuditRule.RegistryAuditRule(String, RegistryRights, InheritanceFlags, PropagationFlags, AuditFlags)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.AccessControl.RegistryAuditRule.RegistryRights\n  parent: System.Security.AccessControl.RegistryAuditRule\n  isExternal: false\n  name: RegistryRights\n  nameWithType: RegistryAuditRule.RegistryRights\n  fullName: RegistryAuditRule.RegistryRights\n- uid: System.Security.AccessControl.RegistryAuditRule.#ctor*\n  parent: System.Security.AccessControl.RegistryAuditRule\n  isExternal: false\n  name: RegistryAuditRule\n  nameWithType: RegistryAuditRule.RegistryAuditRule\n  fullName: RegistryAuditRule.RegistryAuditRule\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/RegistryAuditRule.xml\n- uid: System.Security.AccessControl.RegistryAuditRule.RegistryRights*\n  parent: System.Security.AccessControl.RegistryAuditRule\n  isExternal: false\n  name: RegistryRights\n  nameWithType: RegistryAuditRule.RegistryRights\n  fullName: RegistryAuditRule.RegistryRights\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/RegistryAuditRule.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Security.AccessControl.AuthorizationRule.AccessMask\n  parent: System.Security.AccessControl.AuthorizationRule\n  isExternal: false\n  name: AccessMask\n  nameWithType: AuthorizationRule.AccessMask\n  fullName: AuthorizationRule.AccessMask\n- uid: System.Security.AccessControl.AuthorizationRule.IdentityReference\n  parent: System.Security.AccessControl.AuthorizationRule\n  isExternal: false\n  name: IdentityReference\n  nameWithType: AuthorizationRule.IdentityReference\n  fullName: AuthorizationRule.IdentityReference\n- uid: System.Security.AccessControl.AuthorizationRule.InheritanceFlags\n  parent: System.Security.AccessControl.AuthorizationRule\n  isExternal: false\n  name: InheritanceFlags\n  nameWithType: AuthorizationRule.InheritanceFlags\n  fullName: AuthorizationRule.InheritanceFlags\n- uid: System.Security.AccessControl.AuthorizationRule.IsInherited\n  parent: System.Security.AccessControl.AuthorizationRule\n  isExternal: false\n  name: IsInherited\n  nameWithType: AuthorizationRule.IsInherited\n  fullName: AuthorizationRule.IsInherited\n- uid: System.Security.AccessControl.AuthorizationRule.PropagationFlags\n  parent: System.Security.AccessControl.AuthorizationRule\n  isExternal: false\n  name: PropagationFlags\n  nameWithType: AuthorizationRule.PropagationFlags\n  fullName: AuthorizationRule.PropagationFlags\n- uid: System.Security.AccessControl.AuditRule.AuditFlags\n  parent: System.Security.AccessControl.AuditRule\n  isExternal: false\n  name: AuditFlags\n  nameWithType: AuditRule.AuditFlags\n  fullName: AuditRule.AuditFlags\n"}