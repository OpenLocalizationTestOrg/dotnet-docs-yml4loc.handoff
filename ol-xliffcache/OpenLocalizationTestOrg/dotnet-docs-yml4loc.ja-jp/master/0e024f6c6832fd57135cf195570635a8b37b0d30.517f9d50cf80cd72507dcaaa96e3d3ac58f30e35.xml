{"nodes":[{"content":"Provides data for the event that is raised when there is an exception that is not handled in any application domain.","nodes":[{"pos":[0,116],"content":"Provides data for the event that is raised when there is an exception that is not handled in any application domain.","nodes":[{"content":"Provides data for the event that is raised when there is an exception that is not handled in any application domain.","pos":[0,116]}]}],"pos":[611,728],"yaml":true},{"content":"<xref:System.UnhandledExceptionEventArgs> provides access to the exception object and a flag indicating whether the common language runtime is terminating. The <xref:System.UnhandledExceptionEventArgs> is one of the parameters passed into <xref:System.UnhandledExceptionEventHandler> for the <xref:System.AppDomain.UnhandledException?displayProperty=fullName> event.  \n  \n For more information about event handler delegates, see [Events](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f).","nodes":[{"pos":[0,366],"content":"<xref:System.UnhandledExceptionEventArgs> provides access to the exception object and a flag indicating whether the common language runtime is terminating. The <xref:System.UnhandledExceptionEventArgs> is one of the parameters passed into <xref:System.UnhandledExceptionEventHandler> for the <xref:System.AppDomain.UnhandledException?displayProperty=fullName> event.","nodes":[{"content":"<xref:System.UnhandledExceptionEventArgs> provides access to the exception object and a flag indicating whether the common language runtime is terminating. The <xref:System.UnhandledExceptionEventArgs> is one of the parameters passed into <xref:System.UnhandledExceptionEventHandler> for the <xref:System.AppDomain.UnhandledException?displayProperty=fullName> event.","pos":[0,366],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.UnhandledExceptionEventArgs&gt;</ph> provides access to the exception object and a flag indicating whether the common language runtime is terminating.","pos":[0,155],"source":"<xref:System.UnhandledExceptionEventArgs> provides access to the exception object and a flag indicating whether the common language runtime is terminating."},{"content":"The <ph id=\"ph1\">&lt;xref:System.UnhandledExceptionEventArgs&gt;</ph> is one of the parameters passed into <ph id=\"ph2\">&lt;xref:System.UnhandledExceptionEventHandler&gt;</ph> for the <ph id=\"ph3\">&lt;xref:System.AppDomain.UnhandledException?displayProperty=fullName&gt;</ph> event.","pos":[156,366],"source":" The <xref:System.UnhandledExceptionEventArgs> is one of the parameters passed into <xref:System.UnhandledExceptionEventHandler> for the <xref:System.AppDomain.UnhandledException?displayProperty=fullName> event."}]}]},{"pos":[373,510],"content":"For more information about event handler delegates, see <bpt id=\"p1\">[</bpt>Events<ept id=\"p1\">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.","source":"For more information about event handler delegates, see [Events](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)."}],"pos":[739,1254],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.UnhandledExceptionEventArgs\"></xref> class with the exception object and a common language runtime termination flag.","nodes":[{"pos":[0,169],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.UnhandledExceptionEventArgs\"&gt;&lt;/xref&gt;</ph> class with the exception object and a common language runtime termination flag.","source":"Initializes a new instance of the <xref href=\"System.UnhandledExceptionEventArgs\"></xref> class with the exception object and a common language runtime termination flag."}],"pos":[3207,3377],"yaml":true},{"content":"The exception that is not handled.","nodes":[{"pos":[0,34],"content":"The exception that is not handled.","nodes":[{"content":"The exception that is not handled.","pos":[0,34]}]}],"pos":[3556,3591],"yaml":true},{"content":"`true` if the runtime is terminating; otherwise, `false`.","nodes":[{"pos":[0,57],"content":"<ph id=\"ph1\">`true`</ph> if the runtime is terminating; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the runtime is terminating; otherwise, `false`."}],"pos":[3661,3721],"yaml":true},{"content":"Gets the unhandled exception object.","nodes":[{"pos":[0,36],"content":"Gets the unhandled exception object.","nodes":[{"content":"Gets the unhandled exception object.","pos":[0,36]}]}],"pos":[4984,5021],"yaml":true},{"content":"This property returns an object of type <xref:System.Object> rather than one derived from <xref:System.Exception>. Although the Common Language Specification requires that all exception types derive from <xref:System.Exception>, it is possible for methods to throw exceptions with objects not derived from <xref:System.Exception>. You can do the following to work with this exception:  \n  \n-   Apply the  <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute> attribute with a <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows%2A?displayProperty=fullName> value of `true` to the assembly that contains the event handler. This wraps all exceptions not derived from the <xref:System.Exception> class in a <xref:System.Runtime.CompilerServices.RuntimeWrappedException> object. You can then safely cast (in C#) or convert (in Visual Basic) the object returned by this property to an <xref:System.Exception> object, and retrieve the original exception object from the <xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A?displayProperty=fullName> property. Note that some compilers, such as the C# and Visual Basic compilers, automatically apply this attribute.  \n  \n-   Cast the object returned by this property to an <xref:System.Exception> object.","nodes":[{"pos":[0,384],"content":"This property returns an object of type <xref:System.Object> rather than one derived from <xref:System.Exception>. Although the Common Language Specification requires that all exception types derive from <xref:System.Exception>, it is possible for methods to throw exceptions with objects not derived from <xref:System.Exception>. You can do the following to work with this exception:","nodes":[{"content":"This property returns an object of type <xref:System.Object> rather than one derived from <xref:System.Exception>. Although the Common Language Specification requires that all exception types derive from <xref:System.Exception>, it is possible for methods to throw exceptions with objects not derived from <xref:System.Exception>. You can do the following to work with this exception:","pos":[0,384],"nodes":[{"content":"This property returns an object of type <ph id=\"ph1\">&lt;xref:System.Object&gt;</ph> rather than one derived from <ph id=\"ph2\">&lt;xref:System.Exception&gt;</ph>.","pos":[0,114],"source":"This property returns an object of type <xref:System.Object> rather than one derived from <xref:System.Exception>."},{"content":"Although the Common Language Specification requires that all exception types derive from <ph id=\"ph1\">&lt;xref:System.Exception&gt;</ph>, it is possible for methods to throw exceptions with objects not derived from <ph id=\"ph2\">&lt;xref:System.Exception&gt;</ph>.","pos":[115,330],"source":" Although the Common Language Specification requires that all exception types derive from <xref:System.Exception>, it is possible for methods to throw exceptions with objects not derived from <xref:System.Exception>."},{"content":"You can do the following to work with this exception:","pos":[331,384]}]}]},{"pos":[394,1240],"content":"Apply the  <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute> attribute with a <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows%2A?displayProperty=fullName> value of `true` to the assembly that contains the event handler. This wraps all exceptions not derived from the <xref:System.Exception> class in a <xref:System.Runtime.CompilerServices.RuntimeWrappedException> object. You can then safely cast (in C#) or convert (in Visual Basic) the object returned by this property to an <xref:System.Exception> object, and retrieve the original exception object from the <xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A?displayProperty=fullName> property. Note that some compilers, such as the C# and Visual Basic compilers, automatically apply this attribute.","nodes":[{"content":"Apply the  <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute&gt;</ph> attribute with a <ph id=\"ph2\">&lt;xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows%2A?displayProperty=fullName&gt;</ph> value of <ph id=\"ph3\">`true`</ph> to the assembly that contains the event handler.","pos":[0,281],"source":"Apply the  <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute> attribute with a <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows%2A?displayProperty=fullName> value of `true` to the assembly that contains the event handler."},{"content":"This wraps all exceptions not derived from the <ph id=\"ph1\">&lt;xref:System.Exception&gt;</ph> class in a <ph id=\"ph2\">&lt;xref:System.Runtime.CompilerServices.RuntimeWrappedException&gt;</ph> object.","pos":[282,434],"source":" This wraps all exceptions not derived from the <xref:System.Exception> class in a <xref:System.Runtime.CompilerServices.RuntimeWrappedException> object."},{"content":"You can then safely cast (in C#) or convert (in Visual Basic) the object returned by this property to an <ph id=\"ph1\">&lt;xref:System.Exception&gt;</ph> object, and retrieve the original exception object from the <ph id=\"ph2\">&lt;xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A?displayProperty=fullName&gt;</ph> property.","pos":[435,741],"source":" You can then safely cast (in C#) or convert (in Visual Basic) the object returned by this property to an <xref:System.Exception> object, and retrieve the original exception object from the <xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A?displayProperty=fullName> property."},{"content":"Note that some compilers, such as the C# and Visual Basic compilers, automatically apply this attribute.","pos":[742,846]}]},{"pos":[1250,1329],"content":"Cast the object returned by this property to an <xref:System.Exception> object.","nodes":[{"content":"Cast the object returned by this property to an <ph id=\"ph1\">&lt;xref:System.Exception&gt;</ph> object.","pos":[0,79],"source":"Cast the object returned by this property to an <xref:System.Exception> object."}]}],"pos":[5032,6368],"yaml":true,"extradata":"MT"},{"content":"The unhandled exception object.","nodes":[{"pos":[0,31],"content":"The unhandled exception object.","nodes":[{"content":"The unhandled exception object.","pos":[0,31]}]}],"pos":[7544,7576],"yaml":true},{"content":"Indicates whether the common language runtime is terminating.","nodes":[{"pos":[0,61],"content":"Indicates whether the common language runtime is terminating.","nodes":[{"content":"Indicates whether the common language runtime is terminating.","pos":[0,61]}]}],"pos":[8924,8986],"yaml":true},{"content":"Beginning with the .NET Framework version 2.0, this property returns `true` for most unhandled exceptions, unless an application compatibility flag is used to revert to the behavior of versions 1.0 and 1.1. The reason is that most unhandled exceptions in threads, including thread pool threads, are allowed to proceed naturally, which normally results in termination of the application. For more information, including a list of cases in which the runtime does not terminate, see [Exceptions in Managed Threads](~/docs/standard/threading/exceptions-in-managed-threads.md).  \n  \n## Version Information  \n The following applies to the .NET Framework versions 1.0 and 1.1: This property returns `true` when an exception is received in, but not handled by, an application's main thread. This property also returns `true` if an unmanaged thread is executing managed code and receives an unhandled exception. Finally, this property returns `false` for thread pool threads and managed threads created by an application, because versions 1.0 and 1.1 catch unhandled exceptions in such threads and ignore them.","nodes":[{"pos":[0,572],"content":"Beginning with the .NET Framework version 2.0, this property returns `true` for most unhandled exceptions, unless an application compatibility flag is used to revert to the behavior of versions 1.0 and 1.1. The reason is that most unhandled exceptions in threads, including thread pool threads, are allowed to proceed naturally, which normally results in termination of the application. For more information, including a list of cases in which the runtime does not terminate, see [Exceptions in Managed Threads](~/docs/standard/threading/exceptions-in-managed-threads.md).","nodes":[{"content":"Beginning with the .NET Framework version 2.0, this property returns <ph id=\"ph1\">`true`</ph> for most unhandled exceptions, unless an application compatibility flag is used to revert to the behavior of versions 1.0 and 1.1.","pos":[0,206],"source":"Beginning with the .NET Framework version 2.0, this property returns `true` for most unhandled exceptions, unless an application compatibility flag is used to revert to the behavior of versions 1.0 and 1.1."},{"content":"The reason is that most unhandled exceptions in threads, including thread pool threads, are allowed to proceed naturally, which normally results in termination of the application.","pos":[207,386]},{"content":"For more information, including a list of cases in which the runtime does not terminate, see <bpt id=\"p1\">[</bpt>Exceptions in Managed Threads<ept id=\"p1\">](~/docs/standard/threading/exceptions-in-managed-threads.md)</ept>.","pos":[387,572],"source":" For more information, including a list of cases in which the runtime does not terminate, see [Exceptions in Managed Threads](~/docs/standard/threading/exceptions-in-managed-threads.md)."}]},{"pos":[581,600],"content":"Version Information","linkify":"Version Information","nodes":[{"content":"Version Information","pos":[0,19]}]},{"pos":[604,1101],"content":"The following applies to the .NET Framework versions 1.0 and 1.1: This property returns `true` when an exception is received in, but not handled by, an application's main thread. This property also returns `true` if an unmanaged thread is executing managed code and receives an unhandled exception. Finally, this property returns `false` for thread pool threads and managed threads created by an application, because versions 1.0 and 1.1 catch unhandled exceptions in such threads and ignore them.","nodes":[{"content":"The following applies to the .NET Framework versions 1.0 and 1.1: This property returns <ph id=\"ph1\">`true`</ph> when an exception is received in, but not handled by, an application's main thread.","pos":[0,178],"source":"The following applies to the .NET Framework versions 1.0 and 1.1: This property returns `true` when an exception is received in, but not handled by, an application's main thread."},{"content":"This property also returns <ph id=\"ph1\">`true`</ph> if an unmanaged thread is executing managed code and receives an unhandled exception.","pos":[179,298],"source":" This property also returns `true` if an unmanaged thread is executing managed code and receives an unhandled exception."},{"content":"Finally, this property returns <ph id=\"ph1\">`false`</ph> for thread pool threads and managed threads created by an application, because versions 1.0 and 1.1 catch unhandled exceptions in such threads and ignore them.","pos":[299,497],"source":" Finally, this property returns `false` for thread pool threads and managed threads created by an application, because versions 1.0 and 1.1 catch unhandled exceptions in such threads and ignore them."}]}],"pos":[8997,10104],"yaml":true,"extradata":"MT"},{"content":"`true` if the runtime is terminating; otherwise, `false`.","nodes":[{"pos":[0,57],"content":"<ph id=\"ph1\">`true`</ph> if the runtime is terminating; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the runtime is terminating; otherwise, `false`."}],"pos":[10417,10477],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.UnhandledExceptionEventArgs\n  commentId: T:System.UnhandledExceptionEventArgs\n  id: UnhandledExceptionEventArgs\n  children:\n  - System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)\n  - System.UnhandledExceptionEventArgs.ExceptionObject\n  - System.UnhandledExceptionEventArgs.IsTerminating\n  langs:\n  - csharp\n  name: UnhandledExceptionEventArgs\n  nameWithType: UnhandledExceptionEventArgs\n  fullName: System.UnhandledExceptionEventArgs\n  type: Class\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Provides data for the event that is raised when there is an exception that is not handled in any application domain.\n  remarks: \"<xref:System.UnhandledExceptionEventArgs> provides access to the exception object and a flag indicating whether the common language runtime is terminating. The <xref:System.UnhandledExceptionEventArgs> is one of the parameters passed into <xref:System.UnhandledExceptionEventHandler> for the <xref:System.AppDomain.UnhandledException?displayProperty=fullName> event.  \\n  \\n For more information about event handler delegates, see [Events](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f).\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class UnhandledExceptionEventArgs : EventArgs\n  inheritance:\n  - System.Object\n  - System.EventArgs\n  implements: []\n  inheritedMembers:\n  - System.EventArgs.Empty\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/UnhandledExceptionEventArgs.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)\n  commentId: M:System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)\n  id: '#ctor(System.Object,System.Boolean)'\n  parent: System.UnhandledExceptionEventArgs\n  langs:\n  - csharp\n  name: UnhandledExceptionEventArgs(Object, Boolean)\n  nameWithType: UnhandledExceptionEventArgs.UnhandledExceptionEventArgs(Object, Boolean)\n  fullName: UnhandledExceptionEventArgs.UnhandledExceptionEventArgs(Object, Boolean)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Initializes a new instance of the <xref href=\"System.UnhandledExceptionEventArgs\"></xref> class with the exception object and a common language runtime termination flag.\n  syntax:\n    content: public UnhandledExceptionEventArgs (object exception, bool isTerminating);\n    parameters:\n    - id: exception\n      type: System.Object\n      description: The exception that is not handled.\n    - id: isTerminating\n      type: System.Boolean\n      description: '`true` if the runtime is terminating; otherwise, `false`.'\n  overload: System.UnhandledExceptionEventArgs.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/UnhandledExceptionEventArgs.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.UnhandledExceptionEventArgs.ExceptionObject\n  commentId: P:System.UnhandledExceptionEventArgs.ExceptionObject\n  id: ExceptionObject\n  parent: System.UnhandledExceptionEventArgs\n  langs:\n  - csharp\n  name: ExceptionObject\n  nameWithType: UnhandledExceptionEventArgs.ExceptionObject\n  fullName: UnhandledExceptionEventArgs.ExceptionObject\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Gets the unhandled exception object.\n  remarks: \"This property returns an object of type <xref:System.Object> rather than one derived from <xref:System.Exception>. Although the Common Language Specification requires that all exception types derive from <xref:System.Exception>, it is possible for methods to throw exceptions with objects not derived from <xref:System.Exception>. You can do the following to work with this exception:  \\n  \\n-   Apply the  <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute> attribute with a <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows%2A?displayProperty=fullName> value of `true` to the assembly that contains the event handler. This wraps all exceptions not derived from the <xref:System.Exception> class in a <xref:System.Runtime.CompilerServices.RuntimeWrappedException> object. You can then safely cast (in C#) or convert (in Visual Basic) the object returned by this property to an <xref:System.Exception> object, and retrieve the original exception object from the <xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A?displayProperty=fullName> property. Note that some compilers, such as the C# and Visual Basic compilers, automatically apply this attribute.  \\n  \\n-   Cast the object returned by this property to an <xref:System.Exception> object.\"\n  example:\n  - \"The following example demonstrates the <xref:System.AppDomain.UnhandledException> event. It defines an event handler, `MyHandler`, that is invoked whenever an unhandled exception is thrown in the default application domain. It then throws two exceptions. The first is handled by a **try/catch** block. The second is unhandled and invokes the `MyHandle` routine before the application terminates.  \\n  \\n [!code-cpp[AppDomain_UnhandledException#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_UnhandledException/CPP/unhandledexception.cpp#1)]\\n [!code-csharp[AppDomain_UnhandledException#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_UnhandledException/CS/unhandledexception.cs#1)]\\n [!code-vb[AppDomain_UnhandledException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_UnhandledException/VB/unhandledexception.vb#1)]\"\n  syntax:\n    content: >-\n      [get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)]\n\n      public object ExceptionObject { get; }\n    return:\n      type: System.Object\n      description: The unhandled exception object.\n  overload: System.UnhandledExceptionEventArgs.ExceptionObject*\n  exceptions: []\n  attributes:\n  - type: 'get: System.Runtime.ConstrainedExecution.ReliabilityContract'\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/UnhandledExceptionEventArgs.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.UnhandledExceptionEventArgs.IsTerminating\n  commentId: P:System.UnhandledExceptionEventArgs.IsTerminating\n  id: IsTerminating\n  parent: System.UnhandledExceptionEventArgs\n  langs:\n  - csharp\n  name: IsTerminating\n  nameWithType: UnhandledExceptionEventArgs.IsTerminating\n  fullName: UnhandledExceptionEventArgs.IsTerminating\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Indicates whether the common language runtime is terminating.\n  remarks: \"Beginning with the .NET Framework version 2.0, this property returns `true` for most unhandled exceptions, unless an application compatibility flag is used to revert to the behavior of versions 1.0 and 1.1. The reason is that most unhandled exceptions in threads, including thread pool threads, are allowed to proceed naturally, which normally results in termination of the application. For more information, including a list of cases in which the runtime does not terminate, see [Exceptions in Managed Threads](~/docs/standard/threading/exceptions-in-managed-threads.md).  \\n  \\n## Version Information  \\n The following applies to the .NET Framework versions 1.0 and 1.1: This property returns `true` when an exception is received in, but not handled by, an application's main thread. This property also returns `true` if an unmanaged thread is executing managed code and receives an unhandled exception. Finally, this property returns `false` for thread pool threads and managed threads created by an application, because versions 1.0 and 1.1 catch unhandled exceptions in such threads and ignore them.\"\n  syntax:\n    content: >-\n      [get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)]\n\n      public bool IsTerminating { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the runtime is terminating; otherwise, `false`.'\n  overload: System.UnhandledExceptionEventArgs.IsTerminating*\n  exceptions: []\n  attributes:\n  - type: 'get: System.Runtime.ConstrainedExecution.ReliabilityContract'\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/UnhandledExceptionEventArgs.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.EventArgs\n  parent: System\n  isExternal: false\n  name: EventArgs\n  nameWithType: EventArgs\n  fullName: System.EventArgs\n- uid: System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)\n  parent: System.UnhandledExceptionEventArgs\n  isExternal: false\n  name: UnhandledExceptionEventArgs(Object, Boolean)\n  nameWithType: UnhandledExceptionEventArgs.UnhandledExceptionEventArgs(Object, Boolean)\n  fullName: UnhandledExceptionEventArgs.UnhandledExceptionEventArgs(Object, Boolean)\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.UnhandledExceptionEventArgs.ExceptionObject\n  parent: System.UnhandledExceptionEventArgs\n  isExternal: false\n  name: ExceptionObject\n  nameWithType: UnhandledExceptionEventArgs.ExceptionObject\n  fullName: UnhandledExceptionEventArgs.ExceptionObject\n- uid: System.UnhandledExceptionEventArgs.IsTerminating\n  parent: System.UnhandledExceptionEventArgs\n  isExternal: false\n  name: IsTerminating\n  nameWithType: UnhandledExceptionEventArgs.IsTerminating\n  fullName: UnhandledExceptionEventArgs.IsTerminating\n- uid: System.UnhandledExceptionEventArgs.#ctor*\n  parent: System.UnhandledExceptionEventArgs\n  isExternal: false\n  name: UnhandledExceptionEventArgs\n  nameWithType: UnhandledExceptionEventArgs.UnhandledExceptionEventArgs\n  fullName: UnhandledExceptionEventArgs.UnhandledExceptionEventArgs\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/UnhandledExceptionEventArgs.xml\n- uid: System.UnhandledExceptionEventArgs.ExceptionObject*\n  parent: System.UnhandledExceptionEventArgs\n  isExternal: false\n  name: ExceptionObject\n  nameWithType: UnhandledExceptionEventArgs.ExceptionObject\n  fullName: UnhandledExceptionEventArgs.ExceptionObject\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/UnhandledExceptionEventArgs.xml\n- uid: System.UnhandledExceptionEventArgs.IsTerminating*\n  parent: System.UnhandledExceptionEventArgs\n  isExternal: false\n  name: IsTerminating\n  nameWithType: UnhandledExceptionEventArgs.IsTerminating\n  fullName: UnhandledExceptionEventArgs.IsTerminating\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/UnhandledExceptionEventArgs.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.EventArgs.Empty\n  parent: System.EventArgs\n  isExternal: false\n  name: Empty\n  nameWithType: EventArgs.Empty\n  fullName: EventArgs.Empty\n"}