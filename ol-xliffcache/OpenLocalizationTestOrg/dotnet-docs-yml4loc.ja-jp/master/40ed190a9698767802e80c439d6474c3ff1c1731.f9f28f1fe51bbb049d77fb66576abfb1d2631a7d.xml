{"nodes":[{"content":"Defines a command.","nodes":[{"pos":[0,18],"content":"Defines a command.","nodes":[{"content":"Defines a command.","pos":[0,18]}]}],"pos":[545,564],"yaml":true},{"content":"<xref:System.Windows.Input.RoutedCommand> and <xref:System.Windows.Input.RoutedUICommand> are two implementations of the <xref:System.Windows.Input.ICommand> interface in [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)].  \n  \n## ICommand in Windows Runtime apps  \n The <xref:System.Windows.Input.ICommand> interface is the code contract for commands that are written in .NET for Windows Runtime apps. These commands provide the commanding behavior for UI elements such as a Windows Runtime XAML `Button` and in particular an `AppBarButton`. If you're defining commands for Windows Runtime apps you use basically the same techniques you'd use for defining commands for a .NET app. Implement the command by defining a class that implements <xref:System.Windows.Input.ICommand> and specifically implement the <xref:System.Windows.Input.ICommand.Execute%2A> method.  \n  \n XAML for Windows Runtime does not support x`:Static`, so don't attempt to use the `x:Static` markup extension if the command is used from Windows Runtime XAML. Also, the Windows Runtime does not have any predefined command libraries, so the XAML syntax shown here doesn't really apply for the case where you're implementing the interface and defining the command for Windows Runtime usage.  \n  \n<a name=\"xamlTextUsage_ICommand\"></a>   \n## XAML Attribute Usage  \n \\<*object property*=\"*predefinedCommandName*\"/>  \n  \n \\- or -  \n  \n \\<*object property*=\"*predefinedCommandName.predefinedCommandName*\"/>  \n  \n \\- or -  \n  \n \\<*object property*=\"{ *customClassName.customCommandName*}\"/>  \n  \n<a name=\"xamlValues_ICommand\"></a>   \n## XAML Values  \n *predefinedClassName*  \n One of the predefined command classes.  \n  \n *predefinedCommandName*  \n One of the predefined commands.  \n  \n *customClassName*  \n A custom class that contains the custom command. Custom classes generally require an `xlmns` prefix mapping; see [XAML Namespaces and Namespace Mapping for WPF XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md).  \n  \n *customCommandName*  \n A custom command.","nodes":[{"pos":[0,241],"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.Input.RoutedUICommand&gt;</ph> are two implementations of the <ph id=\"ph3\">&lt;xref:System.Windows.Input.ICommand&gt;</ph> interface in <ph id=\"ph4\">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph>.","source":"<xref:System.Windows.Input.RoutedCommand> and <xref:System.Windows.Input.RoutedUICommand> are two implementations of the <xref:System.Windows.Input.ICommand> interface in [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]."},{"pos":[250,282],"content":"ICommand in Windows Runtime apps","linkify":"ICommand in Windows Runtime apps","nodes":[{"content":"ICommand in Windows Runtime apps","pos":[0,32]}]},{"pos":[286,882],"content":"The <xref:System.Windows.Input.ICommand> interface is the code contract for commands that are written in .NET for Windows Runtime apps. These commands provide the commanding behavior for UI elements such as a Windows Runtime XAML `Button` and in particular an `AppBarButton`. If you're defining commands for Windows Runtime apps you use basically the same techniques you'd use for defining commands for a .NET app. Implement the command by defining a class that implements <xref:System.Windows.Input.ICommand> and specifically implement the <xref:System.Windows.Input.ICommand.Execute%2A> method.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Input.ICommand&gt;</ph> interface is the code contract for commands that are written in .NET for Windows Runtime apps.","pos":[0,135],"source":"The <xref:System.Windows.Input.ICommand> interface is the code contract for commands that are written in .NET for Windows Runtime apps."},{"content":"These commands provide the commanding behavior for UI elements such as a Windows Runtime XAML <ph id=\"ph1\">`Button`</ph> and in particular an <ph id=\"ph2\">`AppBarButton`</ph>.","pos":[136,275],"source":" These commands provide the commanding behavior for UI elements such as a Windows Runtime XAML `Button` and in particular an `AppBarButton`."},{"content":"If you're defining commands for Windows Runtime apps you use basically the same techniques you'd use for defining commands for a .NET app.","pos":[276,414]},{"content":"Implement the command by defining a class that implements <ph id=\"ph1\">&lt;xref:System.Windows.Input.ICommand&gt;</ph> and specifically implement the <ph id=\"ph2\">&lt;xref:System.Windows.Input.ICommand.Execute%2A&gt;</ph> method.","pos":[415,596],"source":" Implement the command by defining a class that implements <xref:System.Windows.Input.ICommand> and specifically implement the <xref:System.Windows.Input.ICommand.Execute%2A> method."}]},{"pos":[889,1278],"content":"XAML for Windows Runtime does not support x`:Static`, so don't attempt to use the `x:Static` markup extension if the command is used from Windows Runtime XAML. Also, the Windows Runtime does not have any predefined command libraries, so the XAML syntax shown here doesn't really apply for the case where you're implementing the interface and defining the command for Windows Runtime usage.","nodes":[{"content":"XAML for Windows Runtime does not support x<ph id=\"ph1\">`:Static`</ph>, so don't attempt to use the <ph id=\"ph2\">`x:Static`</ph> markup extension if the command is used from Windows Runtime XAML.","pos":[0,159],"source":"XAML for Windows Runtime does not support x`:Static`, so don't attempt to use the `x:Static` markup extension if the command is used from Windows Runtime XAML."},{"content":"Also, the Windows Runtime does not have any predefined command libraries, so the XAML syntax shown here doesn't really apply for the case where you're implementing the interface and defining the command for Windows Runtime usage.","pos":[160,389]}]},{"pos":[1328,1348],"content":"XAML Attribute Usage","linkify":"XAML Attribute Usage","nodes":[{"content":"XAML Attribute Usage","pos":[0,20]}]},{"pos":[1352,1399],"content":"<ph id=\"ph1\">\\&lt;</ph><bpt id=\"p1\">*</bpt>object property<ept id=\"p1\">*</ept>=\"<bpt id=\"p2\">*</bpt>predefinedCommandName<ept id=\"p2\">*</ept>\"/&gt;","source":"\\<*object property*=\"*predefinedCommandName*\"/>"},{"pos":[1406,1413],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[1420,1489],"content":"<ph id=\"ph1\">\\&lt;</ph><bpt id=\"p1\">*</bpt>object property<ept id=\"p1\">*</ept>=\"<bpt id=\"p2\">*</bpt>predefinedCommandName.predefinedCommandName<ept id=\"p2\">*</ept>\"/&gt;","source":"\\<*object property*=\"*predefinedCommandName.predefinedCommandName*\"/>"},{"pos":[1496,1503],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[1510,1572],"content":"<ph id=\"ph1\">\\&lt;</ph><bpt id=\"p1\">*</bpt>object property<ept id=\"p1\">*</ept>=\"{ <bpt id=\"p2\">*</bpt>customClassName.customCommandName<ept id=\"p2\">*</ept>}\"/&gt;","source":"\\<*object property*=\"{ *customClassName.customCommandName*}\"/>"},{"pos":[1619,1630],"content":"XAML Values","linkify":"XAML Values","nodes":[{"content":"XAML Values","pos":[0,11]}]},{"pos":[1634,1697],"content":"*predefinedClassName*  \n One of the predefined command classes.","nodes":[{"content":"<bpt id=\"p1\">*</bpt>predefinedClassName<ept id=\"p1\">*</ept>","pos":[0,21],"source":"*predefinedClassName*"},{"content":"One of the predefined command classes.","pos":[25,63]}]},{"pos":[1704,1762],"content":"*predefinedCommandName*  \n One of the predefined commands.","nodes":[{"content":"<bpt id=\"p1\">*</bpt>predefinedCommandName<ept id=\"p1\">*</ept>","pos":[0,23],"source":"*predefinedCommandName*"},{"content":"One of the predefined commands.","pos":[27,58]}]},{"pos":[1769,2041],"content":"*customClassName*  \n A custom class that contains the custom command. Custom classes generally require an `xlmns` prefix mapping; see [XAML Namespaces and Namespace Mapping for WPF XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md).","nodes":[{"content":"<bpt id=\"p1\">*</bpt>customClassName<ept id=\"p1\">*</ept>","pos":[0,17],"source":"*customClassName*"},{"content":" A custom class that contains the custom command. Custom classes generally require an `xlmns` prefix mapping; see [XAML Namespaces and Namespace Mapping for WPF XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md).","pos":[20,272],"nodes":[{"content":"A custom class that contains the custom command.","pos":[1,49]},{"content":"Custom classes generally require an <ph id=\"ph1\">`xlmns`</ph> prefix mapping; see <bpt id=\"p1\">[</bpt>XAML Namespaces and Namespace Mapping for WPF XAML<ept id=\"p1\">](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md)</ept>.","pos":[50,252],"source":" Custom classes generally require an `xlmns` prefix mapping; see [XAML Namespaces and Namespace Mapping for WPF XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md)."}]}]},{"pos":[2048,2088],"content":"*customCommandName*  \n A custom command.","nodes":[{"content":"<bpt id=\"p1\">*</bpt>customCommandName<ept id=\"p1\">*</ept>","pos":[0,19],"source":"*customCommandName*"},{"content":"A custom command.","pos":[23,40]}]}],"pos":[575,2712],"yaml":true,"extradata":"MT"},{"content":"Defines the method that determines whether the command can execute in its current state.","nodes":[{"pos":[0,88],"content":"Defines the method that determines whether the command can execute in its current state.","nodes":[{"content":"Defines the method that determines whether the command can execute in its current state.","pos":[0,88]}]}],"pos":[4381,4470],"yaml":true},{"content":"Typically, a command source calls the <xref:System.Windows.Input.ICommand.CanExecute%2A> method when the <xref:System.Windows.Input.ICommand.CanExecuteChanged> event is raised.","nodes":[{"pos":[0,176],"content":"Typically, a command source calls the <xref:System.Windows.Input.ICommand.CanExecute%2A> method when the <xref:System.Windows.Input.ICommand.CanExecuteChanged> event is raised.","nodes":[{"content":"Typically, a command source calls the <ph id=\"ph1\">&lt;xref:System.Windows.Input.ICommand.CanExecute%2A&gt;</ph> method when the <ph id=\"ph2\">&lt;xref:System.Windows.Input.ICommand.CanExecuteChanged&gt;</ph> event is raised.","pos":[0,176],"source":"Typically, a command source calls the <xref:System.Windows.Input.ICommand.CanExecute%2A> method when the <xref:System.Windows.Input.ICommand.CanExecuteChanged> event is raised."}]}],"pos":[4481,4658],"yaml":true,"extradata":"MT"},{"content":"Data used by the command.  If the command does not require data to be passed, this object can be set to `null`.","nodes":[{"pos":[0,111],"content":"Data used by the command.  If the command does not require data to be passed, this object can be set to `null`.","nodes":[{"content":"Data used by the command.","pos":[0,25]},{"content":"If the command does not require data to be passed, this object can be set to <ph id=\"ph1\">`null`</ph>.","pos":[27,111],"source":"  If the command does not require data to be passed, this object can be set to `null`."}]}],"pos":[4805,4917],"yaml":true},{"content":"`true` if this command can be executed; otherwise, `false`.","nodes":[{"pos":[0,59],"content":"<ph id=\"ph1\">`true`</ph> if this command can be executed; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if this command can be executed; otherwise, `false`."}],"pos":[4975,5037],"yaml":true},{"content":"Occurs when changes occur that affect whether or not the command should execute.","nodes":[{"pos":[0,80],"content":"Occurs when changes occur that affect whether or not the command should execute.","nodes":[{"content":"Occurs when changes occur that affect whether or not the command should execute.","pos":[0,80]}]}],"pos":[6565,6646],"yaml":true},{"content":"Normally, a command source calls <xref:System.Windows.Input.ICommand.CanExecute%2A> on the command when this event occurs.  \n  \n Normally, if the command cannot execute, the command source disables itself.","nodes":[{"pos":[0,122],"content":"Normally, a command source calls <xref:System.Windows.Input.ICommand.CanExecute%2A> on the command when this event occurs.","nodes":[{"content":"Normally, a command source calls <ph id=\"ph1\">&lt;xref:System.Windows.Input.ICommand.CanExecute%2A&gt;</ph> on the command when this event occurs.","pos":[0,122],"source":"Normally, a command source calls <xref:System.Windows.Input.ICommand.CanExecute%2A> on the command when this event occurs."}]},{"pos":[129,205],"content":"Normally, if the command cannot execute, the command source disables itself.","nodes":[{"content":"Normally, if the command cannot execute, the command source disables itself.","pos":[0,76]}]}],"pos":[6657,6867],"yaml":true,"extradata":"MT"},{"content":"Defines the method to be called when the command is invoked.","nodes":[{"pos":[0,60],"content":"Defines the method to be called when the command is invoked.","nodes":[{"content":"Defines the method to be called when the command is invoked.","pos":[0,60]}]}],"pos":[8485,8546],"yaml":true},{"content":"Data used by the command.  If the command does not require data to be passed, this object can be set to `null`.","nodes":[{"pos":[0,111],"content":"Data used by the command.  If the command does not require data to be passed, this object can be set to `null`.","nodes":[{"content":"Data used by the command.","pos":[0,25]},{"content":"If the command does not require data to be passed, this object can be set to <ph id=\"ph1\">`null`</ph>.","pos":[27,111],"source":"  If the command does not require data to be passed, this object can be set to `null`."}]}],"pos":[8690,8802],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Input.ICommand\n  commentId: T:System.Windows.Input.ICommand\n  id: ICommand\n  children:\n  - System.Windows.Input.ICommand.CanExecute(System.Object)\n  - System.Windows.Input.ICommand.CanExecuteChanged\n  - System.Windows.Input.ICommand.Execute(System.Object)\n  langs:\n  - csharp\n  name: ICommand\n  nameWithType: ICommand\n  fullName: System.Windows.Input.ICommand\n  type: Interface\n  assemblies:\n  - System.ObjectModel\n  - System\n  - netstandard\n  namespace: System.Windows.Input\n  summary: Defines a command.\n  remarks: \"<xref:System.Windows.Input.RoutedCommand> and <xref:System.Windows.Input.RoutedUICommand> are two implementations of the <xref:System.Windows.Input.ICommand> interface in [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)].  \\n  \\n## ICommand in Windows Runtime apps  \\n The <xref:System.Windows.Input.ICommand> interface is the code contract for commands that are written in .NET for Windows Runtime apps. These commands provide the commanding behavior for UI elements such as a Windows Runtime XAML `Button` and in particular an `AppBarButton`. If you're defining commands for Windows Runtime apps you use basically the same techniques you'd use for defining commands for a .NET app. Implement the command by defining a class that implements <xref:System.Windows.Input.ICommand> and specifically implement the <xref:System.Windows.Input.ICommand.Execute%2A> method.  \\n  \\n XAML for Windows Runtime does not support x`:Static`, so don't attempt to use the `x:Static` markup extension if the command is used from Windows Runtime XAML. Also, the Windows Runtime does not have any predefined command libraries, so the XAML syntax shown here doesn't really apply for the case where you're implementing the interface and defining the command for Windows Runtime usage.  \\n  \\n<a name=\\\"xamlTextUsage_ICommand\\\"></a>   \\n## XAML Attribute Usage  \\n \\\\<*object property*=\\\"*predefinedCommandName*\\\"/>  \\n  \\n \\\\- or -  \\n  \\n \\\\<*object property*=\\\"*predefinedCommandName.predefinedCommandName*\\\"/>  \\n  \\n \\\\- or -  \\n  \\n \\\\<*object property*=\\\"{ *customClassName.customCommandName*}\\\"/>  \\n  \\n<a name=\\\"xamlValues_ICommand\\\"></a>   \\n## XAML Values  \\n *predefinedClassName*  \\n One of the predefined command classes.  \\n  \\n *predefinedCommandName*  \\n One of the predefined commands.  \\n  \\n *customClassName*  \\n A custom class that contains the custom command. Custom classes generally require an `xlmns` prefix mapping; see [XAML Namespaces and Namespace Mapping for WPF XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md).  \\n  \\n *customCommandName*  \\n A custom command.\"\n  syntax:\n    content: public interface ICommand\n  derivedClasses:\n  - Microsoft.Windows.Input.IPreviewCommand\n  - System.Windows.Input.RoutedCommand\n  implements: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/ICommand.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.ICommand.CanExecute(System.Object)\n  commentId: M:System.Windows.Input.ICommand.CanExecute(System.Object)\n  id: CanExecute(System.Object)\n  parent: System.Windows.Input.ICommand\n  langs:\n  - csharp\n  name: CanExecute(Object)\n  nameWithType: ICommand.CanExecute(Object)\n  fullName: ICommand.CanExecute(Object)\n  type: Method\n  assemblies:\n  - System.ObjectModel\n  - System\n  - netstandard\n  namespace: System.Windows.Input\n  summary: Defines the method that determines whether the command can execute in its current state.\n  remarks: Typically, a command source calls the <xref:System.Windows.Input.ICommand.CanExecute%2A> method when the <xref:System.Windows.Input.ICommand.CanExecuteChanged> event is raised.\n  syntax:\n    content: public bool CanExecute (object parameter);\n    parameters:\n    - id: parameter\n      type: System.Object\n      description: Data used by the command.  If the command does not require data to be passed, this object can be set to `null`.\n    return:\n      type: System.Boolean\n      description: '`true` if this command can be executed; otherwise, `false`.'\n  overload: System.Windows.Input.ICommand.CanExecute*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/ICommand.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.ICommand.CanExecuteChanged\n  commentId: E:System.Windows.Input.ICommand.CanExecuteChanged\n  id: CanExecuteChanged\n  parent: System.Windows.Input.ICommand\n  langs:\n  - csharp\n  name: CanExecuteChanged\n  nameWithType: ICommand.CanExecuteChanged\n  fullName: ICommand.CanExecuteChanged\n  type: Event\n  assemblies:\n  - System.ObjectModel\n  - System\n  - netstandard\n  namespace: System.Windows.Input\n  summary: Occurs when changes occur that affect whether or not the command should execute.\n  remarks: \"Normally, a command source calls <xref:System.Windows.Input.ICommand.CanExecute%2A> on the command when this event occurs.  \\n  \\n Normally, if the command cannot execute, the command source disables itself.\"\n  syntax:\n    content: public event EventHandler CanExecuteChanged;\n    return:\n      type: System.EventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/ICommand.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.ICommand.Execute(System.Object)\n  commentId: M:System.Windows.Input.ICommand.Execute(System.Object)\n  id: Execute(System.Object)\n  parent: System.Windows.Input.ICommand\n  langs:\n  - csharp\n  name: Execute(Object)\n  nameWithType: ICommand.Execute(Object)\n  fullName: ICommand.Execute(Object)\n  type: Method\n  assemblies:\n  - System.ObjectModel\n  - System\n  - netstandard\n  namespace: System.Windows.Input\n  summary: Defines the method to be called when the command is invoked.\n  syntax:\n    content: public void Execute (object parameter);\n    parameters:\n    - id: parameter\n      type: System.Object\n      description: Data used by the command.  If the command does not require data to be passed, this object can be set to `null`.\n  overload: System.Windows.Input.ICommand.Execute*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/ICommand.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.Windows.Input.ICommand.CanExecute(System.Object)\n  parent: System.Windows.Input.ICommand\n  isExternal: false\n  name: CanExecute(Object)\n  nameWithType: ICommand.CanExecute(Object)\n  fullName: ICommand.CanExecute(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Windows.Input.ICommand.CanExecuteChanged\n  parent: System.Windows.Input.ICommand\n  isExternal: false\n  name: CanExecuteChanged\n  nameWithType: ICommand.CanExecuteChanged\n  fullName: ICommand.CanExecuteChanged\n- uid: System.EventHandler\n  parent: System\n  isExternal: false\n  name: EventHandler\n  nameWithType: EventHandler\n  fullName: System.EventHandler\n- uid: System.Windows.Input.ICommand.Execute(System.Object)\n  parent: System.Windows.Input.ICommand\n  isExternal: false\n  name: Execute(Object)\n  nameWithType: ICommand.Execute(Object)\n  fullName: ICommand.Execute(Object)\n- uid: System.Windows.Input.ICommand.CanExecute*\n  parent: System.Windows.Input.ICommand\n  isExternal: false\n  name: CanExecute\n  nameWithType: ICommand.CanExecute\n  fullName: ICommand.CanExecute\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/ICommand.xml\n- uid: System.Windows.Input.ICommand.Execute*\n  parent: System.Windows.Input.ICommand\n  isExternal: false\n  name: Execute\n  nameWithType: ICommand.Execute\n  fullName: ICommand.Execute\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/ICommand.xml\n"}