{"nodes":[{"content":"Provides a controlled memory buffer that can be used for reading and writing. Attempts to access memory outside the controlled buffer (underruns and overruns) raise exceptions.","nodes":[{"pos":[0,176],"content":"Provides a controlled memory buffer that can be used for reading and writing. Attempts to access memory outside the controlled buffer (underruns and overruns) raise exceptions.","nodes":[{"content":"Provides a controlled memory buffer that can be used for reading and writing. Attempts to access memory outside the controlled buffer (underruns and overruns) raise exceptions.","pos":[0,176],"nodes":[{"content":"Provides a controlled memory buffer that can be used for reading and writing.","pos":[0,77]},{"content":"Attempts to access memory outside the controlled buffer (underruns and overruns) raise exceptions.","pos":[78,176]}]}]}],"pos":[1345,1522],"yaml":true},{"content":"You must call the <xref:System.Runtime.InteropServices.SafeBuffer.Initialize%2A?displayProperty=fullName> method before you use any instance of <xref:System.Runtime.InteropServices.SafeBuffer>. To avoid races when you store an instance of a <xref:System.Runtime.InteropServices.SafeBuffer> object in a static variable, you should use one of the following approaches:  \n  \n-   Create a lock when publishing the <xref:System.Runtime.InteropServices.SafeBuffer>.  \n  \n-   Create a local variable, initialize the <xref:System.Runtime.InteropServices.SafeBuffer>, and then assign the <xref:System.Runtime.InteropServices.SafeBuffer> to the static variable, for example, by using the <xref:System.Threading.Interlocked.CompareExchange%2A?displayProperty=fullName> method.  \n  \n> [!NOTE]\n>  Assignments in a static class constructor are implicitly locked.","nodes":[{"pos":[0,366],"content":"You must call the <xref:System.Runtime.InteropServices.SafeBuffer.Initialize%2A?displayProperty=fullName> method before you use any instance of <xref:System.Runtime.InteropServices.SafeBuffer>. To avoid races when you store an instance of a <xref:System.Runtime.InteropServices.SafeBuffer> object in a static variable, you should use one of the following approaches:","nodes":[{"content":"You must call the <xref:System.Runtime.InteropServices.SafeBuffer.Initialize%2A?displayProperty=fullName> method before you use any instance of <xref:System.Runtime.InteropServices.SafeBuffer>. To avoid races when you store an instance of a <xref:System.Runtime.InteropServices.SafeBuffer> object in a static variable, you should use one of the following approaches:","pos":[0,366],"nodes":[{"content":"You must call the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.SafeBuffer.Initialize%2A?displayProperty=fullName&gt;</ph> method before you use any instance of <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.SafeBuffer&gt;</ph>.","pos":[0,193],"source":"You must call the <xref:System.Runtime.InteropServices.SafeBuffer.Initialize%2A?displayProperty=fullName> method before you use any instance of <xref:System.Runtime.InteropServices.SafeBuffer>."},{"content":"To avoid races when you store an instance of a <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.SafeBuffer&gt;</ph> object in a static variable, you should use one of the following approaches:","pos":[194,366],"source":" To avoid races when you store an instance of a <xref:System.Runtime.InteropServices.SafeBuffer> object in a static variable, you should use one of the following approaches:"}]}]},{"pos":[376,459],"content":"Create a lock when publishing the <xref:System.Runtime.InteropServices.SafeBuffer>.","nodes":[{"content":"Create a lock when publishing the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.SafeBuffer&gt;</ph>.","pos":[0,83],"source":"Create a lock when publishing the <xref:System.Runtime.InteropServices.SafeBuffer>."}]},{"pos":[469,765],"content":"Create a local variable, initialize the <xref:System.Runtime.InteropServices.SafeBuffer>, and then assign the <xref:System.Runtime.InteropServices.SafeBuffer> to the static variable, for example, by using the <xref:System.Threading.Interlocked.CompareExchange%2A?displayProperty=fullName> method.","nodes":[{"content":"Create a local variable, initialize the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.SafeBuffer&gt;</ph>, and then assign the <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.SafeBuffer&gt;</ph> to the static variable, for example, by using the <ph id=\"ph3\">&lt;xref:System.Threading.Interlocked.CompareExchange%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,296],"source":"Create a local variable, initialize the <xref:System.Runtime.InteropServices.SafeBuffer>, and then assign the <xref:System.Runtime.InteropServices.SafeBuffer> to the static variable, for example, by using the <xref:System.Threading.Interlocked.CompareExchange%2A?displayProperty=fullName> method."}]},{"pos":[773,848],"content":"[!NOTE]\n Assignments in a static class constructor are implicitly locked.","leadings":["","> "],"nodes":[{"content":"Assignments in a static class constructor are implicitly locked.","pos":[9,73]}]}],"pos":[1533,2391],"yaml":true,"extradata":"MT"},{"content":"Creates a new instance of the <xref href=\"System.Runtime.InteropServices.SafeBuffer\"></xref> class, and specifies whether the buffer handle is to be reliably released.","nodes":[{"pos":[0,167],"content":"Creates a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.SafeBuffer\"&gt;&lt;/xref&gt;</ph> class, and specifies whether the buffer handle is to be reliably released.","source":"Creates a new instance of the <xref href=\"System.Runtime.InteropServices.SafeBuffer\"></xref> class, and specifies whether the buffer handle is to be reliably released."}],"pos":[5232,5400],"yaml":true},{"content":"`true` to reliably release the handle during the finalization phase; `false` to prevent reliable release (not recommended).","nodes":[{"pos":[0,123],"content":"<ph id=\"ph1\">`true`</ph> to reliably release the handle during the finalization phase; <ph id=\"ph2\">`false`</ph> to prevent reliable release (not recommended).","source":"`true` to reliably release the handle during the finalization phase; `false` to prevent reliable release (not recommended)."}],"pos":[5546,5672],"yaml":true},{"content":"Obtains a pointer from a <xref href=\"System.Runtime.InteropServices.SafeBuffer\"></xref> object for a block of memory.","nodes":[{"pos":[0,117],"content":"Obtains a pointer from a <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.SafeBuffer\"&gt;&lt;/xref&gt;</ph> object for a block of memory.","source":"Obtains a pointer from a <xref href=\"System.Runtime.InteropServices.SafeBuffer\"></xref> object for a block of memory."}],"pos":[7338,7456],"yaml":true},{"content":"When <xref:System.Runtime.InteropServices.SafeBuffer.AcquirePointer%2A> returns, you should perform bounds checking by verifying that the `pointer` parameter is `null`. If it is not `null`, you must call the <xref:System.Runtime.InteropServices.SafeBuffer.ReleasePointer%2A?displayProperty=fullName> method in a constrained execution region (CER).  \n  \n <xref:System.Runtime.InteropServices.SafeBuffer.AcquirePointer%2A> calls the <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A?displayProperty=fullName> method and exposes the pointer. Unlike the <xref:System.Runtime.InteropServices.SafeBuffer.Read%2A> method, it does not change the current position of the pointer.  \n  \n The following exampledemonstrates how to use the <xref:System.Runtime.InteropServices.SafeBuffer.AcquirePointer%2A> method:  \n  \n```  \nbyte* pointer = null;  \nRuntimeHelpers.PrepareConstrainedRegions();  \ntry {  \n    MySafeBuffer.AcquirePointer(ref pointer);  \n    // Use pointer here, with your own bounds checking.  \n    }  \nfinally {  \n    if (pointer != null)  \n        MySafeBuffer.ReleasePointer();  \n    }  \n```  \n  \n If you cast `pointer` (which is a pointer to a byte) as a pointer to a different type (T*), you may have pointer alignment issues.  \n  \n You must take responsibility for all bounds checking with this pointer.","nodes":[{"pos":[0,347],"content":"When <xref:System.Runtime.InteropServices.SafeBuffer.AcquirePointer%2A> returns, you should perform bounds checking by verifying that the `pointer` parameter is `null`. If it is not `null`, you must call the <xref:System.Runtime.InteropServices.SafeBuffer.ReleasePointer%2A?displayProperty=fullName> method in a constrained execution region (CER).","nodes":[{"content":"When <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.SafeBuffer.AcquirePointer%2A&gt;</ph> returns, you should perform bounds checking by verifying that the <ph id=\"ph2\">`pointer`</ph> parameter is <ph id=\"ph3\">`null`</ph>.","pos":[0,168],"source":"When <xref:System.Runtime.InteropServices.SafeBuffer.AcquirePointer%2A> returns, you should perform bounds checking by verifying that the `pointer` parameter is `null`."},{"content":"If it is not <ph id=\"ph1\">`null`</ph>, you must call the <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.SafeBuffer.ReleasePointer%2A?displayProperty=fullName&gt;</ph> method in a constrained execution region (CER).","pos":[169,347],"source":" If it is not `null`, you must call the <xref:System.Runtime.InteropServices.SafeBuffer.ReleasePointer%2A?displayProperty=fullName> method in a constrained execution region (CER)."}]},{"pos":[354,687],"content":"<xref:System.Runtime.InteropServices.SafeBuffer.AcquirePointer%2A> calls the <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A?displayProperty=fullName> method and exposes the pointer. Unlike the <xref:System.Runtime.InteropServices.SafeBuffer.Read%2A> method, it does not change the current position of the pointer.","nodes":[{"content":"<xref:System.Runtime.InteropServices.SafeBuffer.AcquirePointer%2A> calls the <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A?displayProperty=fullName> method and exposes the pointer. Unlike the <xref:System.Runtime.InteropServices.SafeBuffer.Read%2A> method, it does not change the current position of the pointer.","pos":[0,333],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.SafeBuffer.AcquirePointer%2A&gt;</ph> calls the <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A?displayProperty=fullName&gt;</ph> method and exposes the pointer.","pos":[0,201],"source":"<xref:System.Runtime.InteropServices.SafeBuffer.AcquirePointer%2A> calls the <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A?displayProperty=fullName> method and exposes the pointer."},{"content":"Unlike the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.SafeBuffer.Read%2A&gt;</ph> method, it does not change the current position of the pointer.","pos":[202,333],"source":" Unlike the <xref:System.Runtime.InteropServices.SafeBuffer.Read%2A> method, it does not change the current position of the pointer."}]}]},{"pos":[694,817],"content":"The following exampledemonstrates how to use the <xref:System.Runtime.InteropServices.SafeBuffer.AcquirePointer%2A> method:","nodes":[{"content":"The following exampledemonstrates how to use the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.SafeBuffer.AcquirePointer%2A&gt;</ph> method:","pos":[0,123],"source":"The following exampledemonstrates how to use the <xref:System.Runtime.InteropServices.SafeBuffer.AcquirePointer%2A> method:"}]},{"pos":[1119,1249],"content":"If you cast <ph id=\"ph1\">`pointer`</ph> (which is a pointer to a byte) as a pointer to a different type (T*), you may have pointer alignment issues.","source":"If you cast `pointer` (which is a pointer to a byte) as a pointer to a different type (T*), you may have pointer alignment issues."},{"pos":[1256,1327],"content":"You must take responsibility for all bounds checking with this pointer.","nodes":[{"content":"You must take responsibility for all bounds checking with this pointer.","pos":[0,71]}]}],"pos":[7467,8818],"yaml":true,"extradata":"MT"},{"content":"A byte pointer, passed by reference, to receive the pointer from within the <xref href=\"System.Runtime.InteropServices.SafeBuffer\"></xref> object. You must set this pointer to `null` before you call this method.","nodes":[{"pos":[0,211],"content":"A byte pointer, passed by reference, to receive the pointer from within the <xref href=\"System.Runtime.InteropServices.SafeBuffer\"></xref> object. You must set this pointer to `null` before you call this method.","nodes":[{"content":"A byte pointer, passed by reference, to receive the pointer from within the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.SafeBuffer\"&gt;&lt;/xref&gt;</ph> object.","pos":[0,146],"source":"A byte pointer, passed by reference, to receive the pointer from within the <xref href=\"System.Runtime.InteropServices.SafeBuffer\"></xref> object."},{"content":"You must set this pointer to <ph id=\"ph1\">`null`</ph> before you call this method.","pos":[147,211],"source":" You must set this pointer to `null` before you call this method."}]}],"pos":[9012,9224],"yaml":true},{"content":"The <xref href=\"System.Runtime.InteropServices.SafeBuffer.Initialize*\"></xref> method has not been called.","nodes":[{"pos":[0,106],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.SafeBuffer.Initialize*\"&gt;&lt;/xref&gt;</ph> method has not been called.","source":"The <xref href=\"System.Runtime.InteropServices.SafeBuffer.Initialize*\"></xref> method has not been called."}],"pos":[9418,9525],"yaml":true},{"content":"Gets the size of the buffer, in bytes.","nodes":[{"pos":[0,38],"content":"Gets the size of the buffer, in bytes.","nodes":[{"content":"Gets the size of the buffer, in bytes.","pos":[0,38]}]}],"pos":[11078,11117],"yaml":true},{"content":"The number of bytes in the memory buffer.","nodes":[{"pos":[0,41],"content":"The number of bytes in the memory buffer.","nodes":[{"content":"The number of bytes in the memory buffer.","pos":[0,41]}]}],"pos":[11275,11317],"yaml":true},{"content":"The <xref href=\"System.Runtime.InteropServices.SafeBuffer.Initialize*\"></xref> method has not been called.","nodes":[{"pos":[0,106],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.SafeBuffer.Initialize*\"&gt;&lt;/xref&gt;</ph> method has not been called.","source":"The <xref href=\"System.Runtime.InteropServices.SafeBuffer.Initialize*\"></xref> method has not been called."}],"pos":[11507,11614],"yaml":true},{"content":"Defines the allocation size of the memory region in bytes. You must call this method before you use the <xref href=\"System.Runtime.InteropServices.SafeBuffer\"></xref> instance.","nodes":[{"pos":[0,176],"content":"Defines the allocation size of the memory region in bytes. You must call this method before you use the <xref href=\"System.Runtime.InteropServices.SafeBuffer\"></xref> instance.","nodes":[{"content":"Defines the allocation size of the memory region in bytes.","pos":[0,58]},{"content":"You must call this method before you use the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.SafeBuffer\"&gt;&lt;/xref&gt;</ph> instance.","pos":[59,176],"source":" You must call this method before you use the <xref href=\"System.Runtime.InteropServices.SafeBuffer\"></xref> instance."}]}],"pos":[13234,13411],"yaml":true},{"content":"The number of bytes in the buffer.","nodes":[{"pos":[0,34],"content":"The number of bytes in the buffer.","nodes":[{"content":"The number of bytes in the buffer.","pos":[0,34]}]}],"pos":[13600,13635],"yaml":true},{"content":"<code>numBytes</code> is less than zero.  \n  \n -or-  \n  \n <code>numBytes</code> is greater than the available address space.","nodes":[{"pos":[0,40],"content":"<ph id=\"ph1\">&lt;code&gt;numBytes&lt;/code&gt;</ph> is less than zero.","source":"<code>numBytes</code> is less than zero."},{"pos":[47,51],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[58,124],"content":"<ph id=\"ph1\">&lt;code&gt;numBytes&lt;/code&gt;</ph> is greater than the available address space.","source":"<code>numBytes</code> is greater than the available address space."}],"pos":[13829,13960],"yaml":true},{"content":"Specifies the allocation size of the memory buffer by using the specified number of elements and element size. You must call this method before you use the <xref href=\"System.Runtime.InteropServices.SafeBuffer\"></xref> instance.","nodes":[{"pos":[0,228],"content":"Specifies the allocation size of the memory buffer by using the specified number of elements and element size. You must call this method before you use the <xref href=\"System.Runtime.InteropServices.SafeBuffer\"></xref> instance.","nodes":[{"content":"Specifies the allocation size of the memory buffer by using the specified number of elements and element size.","pos":[0,110]},{"content":"You must call this method before you use the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.SafeBuffer\"&gt;&lt;/xref&gt;</ph> instance.","pos":[111,228],"source":" You must call this method before you use the <xref href=\"System.Runtime.InteropServices.SafeBuffer\"></xref> instance."}]}],"pos":[15646,15875],"yaml":true},{"content":"This method defines the required size of the memory region as the number of elements in an array multiplied by the size of each element.","nodes":[{"pos":[0,136],"content":"This method defines the required size of the memory region as the number of elements in an array multiplied by the size of each element.","nodes":[{"content":"This method defines the required size of the memory region as the number of elements in an array multiplied by the size of each element.","pos":[0,136]}]}],"pos":[15886,16023],"yaml":true,"extradata":"MT"},{"content":"The number of elements in the buffer.","nodes":[{"pos":[0,37],"content":"The number of elements in the buffer.","nodes":[{"content":"The number of elements in the buffer.","pos":[0,37]}]}],"pos":[16241,16279],"yaml":true},{"content":"The size of each element in the buffer.","nodes":[{"pos":[0,39],"content":"The size of each element in the buffer.","nodes":[{"content":"The size of each element in the buffer.","pos":[0,39]}]}],"pos":[16352,16392],"yaml":true},{"content":"<code>numElements</code> is less than zero.  \n  \n -or-  \n  \n <code>sizeOfEachElement</code> is less than zero.  \n  \n -or-  \n  \n <code>numElements</code> multiplied by <code>sizeOfEachElement</code> is greater than the available address space.","nodes":[{"pos":[0,43],"content":"<ph id=\"ph1\">&lt;code&gt;numElements&lt;/code&gt;</ph> is less than zero.","source":"<code>numElements</code> is less than zero."},{"pos":[50,54],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[61,110],"content":"<ph id=\"ph1\">&lt;code&gt;sizeOfEachElement&lt;/code&gt;</ph> is less than zero.","source":"<code>sizeOfEachElement</code> is less than zero."},{"pos":[117,121],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[128,242],"content":"<ph id=\"ph1\">&lt;code&gt;numElements&lt;/code&gt;</ph> multiplied by <ph id=\"ph2\">&lt;code&gt;sizeOfEachElement&lt;/code&gt;</ph> is greater than the available address space.","source":"<code>numElements</code> multiplied by <code>sizeOfEachElement</code> is greater than the available address space."}],"pos":[16586,16839],"yaml":true},{"content":"Defines the allocation size of the memory region by specifying the number of value types. You must call this method before you use the <xref href=\"System.Runtime.InteropServices.SafeBuffer\"></xref> instance.","nodes":[{"pos":[0,207],"content":"Defines the allocation size of the memory region by specifying the number of value types. You must call this method before you use the <xref href=\"System.Runtime.InteropServices.SafeBuffer\"></xref> instance.","nodes":[{"content":"Defines the allocation size of the memory region by specifying the number of value types.","pos":[0,89]},{"content":"You must call this method before you use the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.SafeBuffer\"&gt;&lt;/xref&gt;</ph> instance.","pos":[90,207],"source":" You must call this method before you use the <xref href=\"System.Runtime.InteropServices.SafeBuffer\"></xref> instance."}]}],"pos":[18477,18685],"yaml":true},{"content":"The number of elements of the value type to allocate memory for.","nodes":[{"pos":[0,64],"content":"The number of elements of the value type to allocate memory for.","nodes":[{"content":"The number of elements of the value type to allocate memory for.","pos":[0,64]}]}],"pos":[18899,18964],"yaml":true},{"content":"The value type to allocate memory for.","nodes":[{"pos":[0,38],"content":"The value type to allocate memory for.","nodes":[{"content":"The value type to allocate memory for.","pos":[0,38]}]}],"pos":[19015,19054],"yaml":true},{"content":"<code>numElements</code> is less than zero.  \n  \n -or-  \n  \n <code>numElements</code> multiplied by the size of each element is greater than the available address space.","nodes":[{"pos":[0,43],"content":"<ph id=\"ph1\">&lt;code&gt;numElements&lt;/code&gt;</ph> is less than zero.","source":"<code>numElements</code> is less than zero."},{"pos":[50,54],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[61,169],"content":"<ph id=\"ph1\">&lt;code&gt;numElements&lt;/code&gt;</ph> multiplied by the size of each element is greater than the available address space.","source":"<code>numElements</code> multiplied by the size of each element is greater than the available address space."}],"pos":[19251,19427],"yaml":true},{"content":"Reads a value type from memory at the specified offset.","nodes":[{"pos":[0,55],"content":"Reads a value type from memory at the specified offset.","nodes":[{"content":"Reads a value type from memory at the specified offset.","pos":[0,55]}]}],"pos":[22086,22142],"yaml":true},{"content":"The location from which to read the value type. You may have to consider alignment issues.","nodes":[{"pos":[0,90],"content":"The location from which to read the value type. You may have to consider alignment issues.","nodes":[{"content":"The location from which to read the value type. You may have to consider alignment issues.","pos":[0,90],"nodes":[{"content":"The location from which to read the value type.","pos":[0,47]},{"content":"You may have to consider alignment issues.","pos":[48,90]}]}]}],"pos":[22346,22437],"yaml":true},{"content":"The value type to read.","nodes":[{"pos":[0,23],"content":"The value type to read.","nodes":[{"content":"The value type to read.","pos":[0,23]}]}],"pos":[22488,22512],"yaml":true},{"content":"The value type that was read from memory.","nodes":[{"pos":[0,41],"content":"The value type that was read from memory.","nodes":[{"content":"The value type that was read from memory.","pos":[0,41]}]}],"pos":[22557,22599],"yaml":true},{"content":"The <xref href=\"System.Runtime.InteropServices.SafeBuffer.Initialize*\"></xref> method has not been called.","nodes":[{"pos":[0,106],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.SafeBuffer.Initialize*\"&gt;&lt;/xref&gt;</ph> method has not been called.","source":"The <xref href=\"System.Runtime.InteropServices.SafeBuffer.Initialize*\"></xref> method has not been called."}],"pos":[22786,22893],"yaml":true},{"content":"Reads the specified number of value types from memory starting at the offset, and writes them into an array starting at the index.","nodes":[{"pos":[0,130],"content":"Reads the specified number of value types from memory starting at the offset, and writes them into an array starting at the index.","nodes":[{"content":"Reads the specified number of value types from memory starting at the offset, and writes them into an array starting at the index.","pos":[0,130]}]}],"pos":[24678,24809],"yaml":true},{"content":"The location from which to start reading.","nodes":[{"pos":[0,41],"content":"The location from which to start reading.","nodes":[{"content":"The location from which to start reading.","pos":[0,41]}]}],"pos":[25054,25096],"yaml":true},{"content":"The output array to write to.","nodes":[{"pos":[0,29],"content":"The output array to write to.","nodes":[{"content":"The output array to write to.","pos":[0,29]}]}],"pos":[25147,25177],"yaml":true},{"content":"The location in the output array to begin writing to.","nodes":[{"pos":[0,53],"content":"The location in the output array to begin writing to.","nodes":[{"content":"The location in the output array to begin writing to.","pos":[0,53]}]}],"pos":[25237,25291],"yaml":true},{"content":"The number of value types to read from the input array and to write to the output array.","nodes":[{"pos":[0,88],"content":"The number of value types to read from the input array and to write to the output array.","nodes":[{"content":"The number of value types to read from the input array and to write to the output array.","pos":[0,88]}]}],"pos":[25351,25440],"yaml":true},{"content":"The value type to read.","nodes":[{"pos":[0,23],"content":"The value type to read.","nodes":[{"content":"The value type to read.","pos":[0,23]}]}],"pos":[25491,25515],"yaml":true},{"content":"<code>index</code> is less than zero.  \n  \n -or-  \n  \n <code>count</code> is less than zero.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.","source":"<code>index</code> is less than zero."},{"pos":[44,48],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[55,92],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","source":"<code>count</code> is less than zero."}],"pos":[25711,25810],"yaml":true},{"content":"<code>array</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>array</code> is `null`."}],"pos":[25912,25942],"yaml":true},{"content":"The length of the array minus the index is less than <code>count</code>.","nodes":[{"pos":[0,72],"content":"The length of the array minus the index is less than <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">count</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The length of the array minus the index is less than <code>count</code>."}],"pos":[26036,26109],"yaml":true},{"content":"The <xref href=\"System.Runtime.InteropServices.SafeBuffer.Initialize*\"></xref> method has not been called.","nodes":[{"pos":[0,106],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.SafeBuffer.Initialize*\"&gt;&lt;/xref&gt;</ph> method has not been called.","source":"The <xref href=\"System.Runtime.InteropServices.SafeBuffer.Initialize*\"></xref> method has not been called."}],"pos":[26219,26326],"yaml":true},{"content":"Releases a pointer that was obtained by the <xref href=\"System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)\"></xref> method.","nodes":[{"pos":[0,144],"content":"Releases a pointer that was obtained by the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)\"&gt;&lt;/xref&gt;</ph> method.","source":"Releases a pointer that was obtained by the <xref href=\"System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)\"></xref> method."}],"pos":[27907,28052],"yaml":true},{"content":"After this method returns, the pointer cannot be used.","nodes":[{"pos":[0,54],"content":"After this method returns, the pointer cannot be used.","nodes":[{"content":"After this method returns, the pointer cannot be used.","pos":[0,54]}]}],"pos":[28063,28118],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Runtime.InteropServices.SafeBuffer.Initialize*\"></xref> method has not been called.","nodes":[{"pos":[0,106],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.SafeBuffer.Initialize*\"&gt;&lt;/xref&gt;</ph> method has not been called.","source":"The <xref href=\"System.Runtime.InteropServices.SafeBuffer.Initialize*\"></xref> method has not been called."}],"pos":[28385,28492],"yaml":true},{"content":"Writes a value type to memory at the given location.","nodes":[{"pos":[0,52],"content":"Writes a value type to memory at the given location.","nodes":[{"content":"Writes a value type to memory at the given location.","pos":[0,52]}]}],"pos":[30085,30138],"yaml":true},{"content":"This method is equivalent to the following code:  \n  \n```  \n*(T*)(bytePtr + byteOffset) = value;  \n```","nodes":[{"pos":[0,48],"content":"This method is equivalent to the following code:","nodes":[{"content":"This method is equivalent to the following code:","pos":[0,48]}]}],"pos":[30149,30258],"yaml":true,"extradata":"MT"},{"content":"The location at which to start writing. You may have to consider alignment issues.","nodes":[{"pos":[0,82],"content":"The location at which to start writing. You may have to consider alignment issues.","nodes":[{"content":"The location at which to start writing. You may have to consider alignment issues.","pos":[0,82],"nodes":[{"content":"The location at which to start writing.","pos":[0,39]},{"content":"You may have to consider alignment issues.","pos":[40,82]}]}]}],"pos":[30475,30558],"yaml":true},{"content":"The value to write.","nodes":[{"pos":[0,19],"content":"The value to write.","nodes":[{"content":"The value to write.","pos":[0,19]}]}],"pos":[30607,30627],"yaml":true},{"content":"The value type to write.","nodes":[{"pos":[0,24],"content":"The value type to write.","nodes":[{"content":"The value type to write.","pos":[0,24]}]}],"pos":[30678,30703],"yaml":true},{"content":"The <xref href=\"System.Runtime.InteropServices.SafeBuffer.Initialize*\"></xref> method has not been called.","nodes":[{"pos":[0,106],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.SafeBuffer.Initialize*\"&gt;&lt;/xref&gt;</ph> method has not been called.","source":"The <xref href=\"System.Runtime.InteropServices.SafeBuffer.Initialize*\"></xref> method has not been called."}],"pos":[30891,30998],"yaml":true},{"content":"Writes the specified number of value types to a memory location by reading bytes starting from the specified location in the input array.","nodes":[{"pos":[0,137],"content":"Writes the specified number of value types to a memory location by reading bytes starting from the specified location in the input array.","nodes":[{"content":"Writes the specified number of value types to a memory location by reading bytes starting from the specified location in the input array.","pos":[0,137]}]}],"pos":[32789,32927],"yaml":true},{"content":"Each element in the input array consists of the generic value type of the class.","nodes":[{"pos":[0,80],"content":"Each element in the input array consists of the generic value type of the class.","nodes":[{"content":"Each element in the input array consists of the generic value type of the class.","pos":[0,80]}]}],"pos":[32938,33019],"yaml":true,"extradata":"MT"},{"content":"The location in memory to write to.","nodes":[{"pos":[0,35],"content":"The location in memory to write to.","nodes":[{"content":"The location in memory to write to.","pos":[0,35]}]}],"pos":[33265,33301],"yaml":true},{"content":"The input array.","nodes":[{"pos":[0,16],"content":"The input array.","nodes":[{"content":"The input array.","pos":[0,16]}]}],"pos":[33352,33369],"yaml":true},{"content":"The offset in the array to start reading from.","nodes":[{"pos":[0,46],"content":"The offset in the array to start reading from.","nodes":[{"content":"The offset in the array to start reading from.","pos":[0,46]}]}],"pos":[33429,33476],"yaml":true},{"content":"The number of value types to write.","nodes":[{"pos":[0,35],"content":"The number of value types to write.","nodes":[{"content":"The number of value types to write.","pos":[0,35]}]}],"pos":[33536,33572],"yaml":true},{"content":"The value type to write.","nodes":[{"pos":[0,24],"content":"The value type to write.","nodes":[{"content":"The value type to write.","pos":[0,24]}]}],"pos":[33623,33648],"yaml":true},{"content":"<code>array</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>array</code> is `null`."}],"pos":[33833,33863],"yaml":true},{"content":"<code>index</code> or <code>count</code> is less than zero.","nodes":[{"pos":[0,59],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","source":"<code>index</code> or <code>count</code> is less than zero."}],"pos":[33977,34037],"yaml":true},{"content":"The length of the input array minus <code>index</code> is less than <code>count</code>.","nodes":[{"pos":[0,87],"content":"The length of the input array minus <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept> is less than <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">count</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The length of the input array minus <code>index</code> is less than <code>count</code>."}],"pos":[34131,34219],"yaml":true},{"content":"The <xref href=\"System.Runtime.InteropServices.SafeBuffer.Initialize*\"></xref> method has not been called.","nodes":[{"pos":[0,106],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.SafeBuffer.Initialize*\"&gt;&lt;/xref&gt;</ph> method has not been called.","source":"The <xref href=\"System.Runtime.InteropServices.SafeBuffer.Initialize*\"></xref> method has not been called."}],"pos":[34329,34436],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Runtime.InteropServices.SafeBuffer\n  commentId: T:System.Runtime.InteropServices.SafeBuffer\n  id: SafeBuffer\n  children:\n  - System.Runtime.InteropServices.SafeBuffer.#ctor(System.Boolean)\n  - System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)\n  - System.Runtime.InteropServices.SafeBuffer.ByteLength\n  - System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt64)\n  - System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)\n  - System.Runtime.InteropServices.SafeBuffer.Initialize``1(System.UInt32)\n  - System.Runtime.InteropServices.SafeBuffer.IsInvalid\n  - System.Runtime.InteropServices.SafeBuffer.Read``1(System.UInt64)\n  - System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)\n  - System.Runtime.InteropServices.SafeBuffer.ReleasePointer\n  - System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)\n  - System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)\n  langs:\n  - csharp\n  name: SafeBuffer\n  nameWithType: SafeBuffer\n  fullName: System.Runtime.InteropServices.SafeBuffer\n  type: Class\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Provides a controlled memory buffer that can be used for reading and writing. Attempts to access memory outside the controlled buffer (underruns and overruns) raise exceptions.\n  remarks: \"You must call the <xref:System.Runtime.InteropServices.SafeBuffer.Initialize%2A?displayProperty=fullName> method before you use any instance of <xref:System.Runtime.InteropServices.SafeBuffer>. To avoid races when you store an instance of a <xref:System.Runtime.InteropServices.SafeBuffer> object in a static variable, you should use one of the following approaches:  \\n  \\n-   Create a lock when publishing the <xref:System.Runtime.InteropServices.SafeBuffer>.  \\n  \\n-   Create a local variable, initialize the <xref:System.Runtime.InteropServices.SafeBuffer>, and then assign the <xref:System.Runtime.InteropServices.SafeBuffer> to the static variable, for example, by using the <xref:System.Threading.Interlocked.CompareExchange%2A?displayProperty=fullName> method.  \\n  \\n> [!NOTE]\\n>  Assignments in a static class constructor are implicitly locked.\"\n  syntax:\n    content: 'public abstract class SafeBuffer : Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid'\n  inheritance:\n  - System.Object\n  - System.Runtime.InteropServices.SafeHandle\n  derivedClasses:\n  - Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Runtime.InteropServices.SafeHandle.Close\n  - System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)\n  - System.Runtime.InteropServices.SafeHandle.DangerousGetHandle\n  - System.Runtime.InteropServices.SafeHandle.DangerousRelease\n  - System.Runtime.InteropServices.SafeHandle.Dispose\n  - System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)\n  - System.Runtime.InteropServices.SafeHandle.handle\n  - System.Runtime.InteropServices.SafeHandle.IsClosed\n  - System.Runtime.InteropServices.SafeHandle.ReleaseHandle\n  - System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)\n  - System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeBuffer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.SafeBuffer.#ctor(System.Boolean)\n  commentId: M:System.Runtime.InteropServices.SafeBuffer.#ctor(System.Boolean)\n  id: '#ctor(System.Boolean)'\n  parent: System.Runtime.InteropServices.SafeBuffer\n  langs:\n  - csharp\n  name: SafeBuffer(Boolean)\n  nameWithType: SafeBuffer.SafeBuffer(Boolean)\n  fullName: SafeBuffer.SafeBuffer(Boolean)\n  type: Constructor\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Creates a new instance of the <xref href=\"System.Runtime.InteropServices.SafeBuffer\"></xref> class, and specifies whether the buffer handle is to be reliably released.\n  syntax:\n    content: protected SafeBuffer (bool ownsHandle);\n    parameters:\n    - id: ownsHandle\n      type: System.Boolean\n      description: '`true` to reliably release the handle during the finalization phase; `false` to prevent reliable release (not recommended).'\n  overload: System.Runtime.InteropServices.SafeBuffer.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeBuffer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)\n  commentId: M:System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)\n  id: AcquirePointer(System.Byte*@)\n  parent: System.Runtime.InteropServices.SafeBuffer\n  langs:\n  - csharp\n  name: AcquirePointer(Byte*)\n  nameWithType: SafeBuffer.AcquirePointer(Byte*)\n  fullName: SafeBuffer.AcquirePointer(Byte*)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Obtains a pointer from a <xref href=\"System.Runtime.InteropServices.SafeBuffer\"></xref> object for a block of memory.\n  remarks: \"When <xref:System.Runtime.InteropServices.SafeBuffer.AcquirePointer%2A> returns, you should perform bounds checking by verifying that the `pointer` parameter is `null`. If it is not `null`, you must call the <xref:System.Runtime.InteropServices.SafeBuffer.ReleasePointer%2A?displayProperty=fullName> method in a constrained execution region (CER).  \\n  \\n <xref:System.Runtime.InteropServices.SafeBuffer.AcquirePointer%2A> calls the <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A?displayProperty=fullName> method and exposes the pointer. Unlike the <xref:System.Runtime.InteropServices.SafeBuffer.Read%2A> method, it does not change the current position of the pointer.  \\n  \\n The following exampledemonstrates how to use the <xref:System.Runtime.InteropServices.SafeBuffer.AcquirePointer%2A> method:  \\n  \\n```  \\nbyte* pointer = null;  \\nRuntimeHelpers.PrepareConstrainedRegions();  \\ntry {  \\n    MySafeBuffer.AcquirePointer(ref pointer);  \\n    // Use pointer here, with your own bounds checking.  \\n    }  \\nfinally {  \\n    if (pointer != null)  \\n        MySafeBuffer.ReleasePointer();  \\n    }  \\n```  \\n  \\n If you cast `pointer` (which is a pointer to a byte) as a pointer to a different type (T*), you may have pointer alignment issues.  \\n  \\n You must take responsibility for all bounds checking with this pointer.\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public void AcquirePointer (ref byte* pointer);\n    parameters:\n    - id: pointer\n      type: System.Byte*\n      description: A byte pointer, passed by reference, to receive the pointer from within the <xref href=\"System.Runtime.InteropServices.SafeBuffer\"></xref> object. You must set this pointer to `null` before you call this method.\n  overload: System.Runtime.InteropServices.SafeBuffer.AcquirePointer*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The <xref href=\"System.Runtime.InteropServices.SafeBuffer.Initialize*\"></xref> method has not been called.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeBuffer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.SafeBuffer.ByteLength\n  commentId: P:System.Runtime.InteropServices.SafeBuffer.ByteLength\n  id: ByteLength\n  parent: System.Runtime.InteropServices.SafeBuffer\n  langs:\n  - csharp\n  name: ByteLength\n  nameWithType: SafeBuffer.ByteLength\n  fullName: SafeBuffer.ByteLength\n  type: Property\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Gets the size of the buffer, in bytes.\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public ulong ByteLength { get; }\n    return:\n      type: System.UInt64\n      description: The number of bytes in the memory buffer.\n  overload: System.Runtime.InteropServices.SafeBuffer.ByteLength*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The <xref href=\"System.Runtime.InteropServices.SafeBuffer.Initialize*\"></xref> method has not been called.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeBuffer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt64)\n  commentId: M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt64)\n  id: Initialize(System.UInt64)\n  parent: System.Runtime.InteropServices.SafeBuffer\n  langs:\n  - csharp\n  name: Initialize(UInt64)\n  nameWithType: SafeBuffer.Initialize(UInt64)\n  fullName: SafeBuffer.Initialize(UInt64)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Defines the allocation size of the memory region in bytes. You must call this method before you use the <xref href=\"System.Runtime.InteropServices.SafeBuffer\"></xref> instance.\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public void Initialize (ulong numBytes);\n    parameters:\n    - id: numBytes\n      type: System.UInt64\n      description: The number of bytes in the buffer.\n  overload: System.Runtime.InteropServices.SafeBuffer.Initialize*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>numBytes</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>numBytes</code> is greater than the available address space.\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeBuffer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)\n  commentId: M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)\n  id: Initialize(System.UInt32,System.UInt32)\n  parent: System.Runtime.InteropServices.SafeBuffer\n  langs:\n  - csharp\n  name: Initialize(UInt32, UInt32)\n  nameWithType: SafeBuffer.Initialize(UInt32, UInt32)\n  fullName: SafeBuffer.Initialize(UInt32, UInt32)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Specifies the allocation size of the memory buffer by using the specified number of elements and element size. You must call this method before you use the <xref href=\"System.Runtime.InteropServices.SafeBuffer\"></xref> instance.\n  remarks: This method defines the required size of the memory region as the number of elements in an array multiplied by the size of each element.\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public void Initialize (uint numElements, uint sizeOfEachElement);\n    parameters:\n    - id: numElements\n      type: System.UInt32\n      description: The number of elements in the buffer.\n    - id: sizeOfEachElement\n      type: System.UInt32\n      description: The size of each element in the buffer.\n  overload: System.Runtime.InteropServices.SafeBuffer.Initialize*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>numElements</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>sizeOfEachElement</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>numElements</code> multiplied by <code>sizeOfEachElement</code> is greater than the available address space.\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeBuffer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.SafeBuffer.Initialize``1(System.UInt32)\n  commentId: M:System.Runtime.InteropServices.SafeBuffer.Initialize``1(System.UInt32)\n  id: Initialize``1(System.UInt32)\n  parent: System.Runtime.InteropServices.SafeBuffer\n  langs:\n  - csharp\n  name: Initialize<T>(UInt32)\n  nameWithType: SafeBuffer.Initialize<T>(UInt32)\n  fullName: SafeBuffer.Initialize<T>(UInt32)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Defines the allocation size of the memory region by specifying the number of value types. You must call this method before you use the <xref href=\"System.Runtime.InteropServices.SafeBuffer\"></xref> instance.\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public void Initialize<T> (uint numElements) where T : struct;\n    parameters:\n    - id: numElements\n      type: System.UInt32\n      description: The number of elements of the value type to allocate memory for.\n    typeParameters:\n    - id: T\n      description: The value type to allocate memory for.\n  overload: System.Runtime.InteropServices.SafeBuffer.Initialize``1*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>numElements</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>numElements</code> multiplied by the size of each element is greater than the available address space.\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeBuffer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.SafeBuffer.IsInvalid\n  commentId: P:System.Runtime.InteropServices.SafeBuffer.IsInvalid\n  id: IsInvalid\n  parent: System.Runtime.InteropServices.SafeBuffer\n  langs:\n  - csharp\n  name: IsInvalid\n  nameWithType: SafeBuffer.IsInvalid\n  fullName: SafeBuffer.IsInvalid\n  type: Property\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  syntax:\n    content: public override bool IsInvalid { get; }\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Runtime.InteropServices.SafeBuffer.IsInvalid*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeBuffer.xml\n- uid: System.Runtime.InteropServices.SafeBuffer.Read``1(System.UInt64)\n  commentId: M:System.Runtime.InteropServices.SafeBuffer.Read``1(System.UInt64)\n  id: Read``1(System.UInt64)\n  parent: System.Runtime.InteropServices.SafeBuffer\n  langs:\n  - csharp\n  name: Read<T>(UInt64)\n  nameWithType: SafeBuffer.Read<T>(UInt64)\n  fullName: SafeBuffer.Read<T>(UInt64)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Reads a value type from memory at the specified offset.\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public T Read<T> (ulong byteOffset) where T : struct;\n    parameters:\n    - id: byteOffset\n      type: System.UInt64\n      description: The location from which to read the value type. You may have to consider alignment issues.\n    typeParameters:\n    - id: T\n      description: The value type to read.\n    return:\n      type: T\n      description: The value type that was read from memory.\n  overload: System.Runtime.InteropServices.SafeBuffer.Read``1*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The <xref href=\"System.Runtime.InteropServices.SafeBuffer.Initialize*\"></xref> method has not been called.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeBuffer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)\n  commentId: M:System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)\n  id: ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)\n  parent: System.Runtime.InteropServices.SafeBuffer\n  langs:\n  - csharp\n  name: ReadArray<T>(UInt64, T[], Int32, Int32)\n  nameWithType: SafeBuffer.ReadArray<T>(UInt64, T[], Int32, Int32)\n  fullName: SafeBuffer.ReadArray<T>(UInt64, T[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Reads the specified number of value types from memory starting at the offset, and writes them into an array starting at the index.\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public void ReadArray<T> (ulong byteOffset, T[] array, int index, int count) where T : struct;\n    parameters:\n    - id: byteOffset\n      type: System.UInt64\n      description: The location from which to start reading.\n    - id: array\n      type: T[]\n      description: The output array to write to.\n    - id: index\n      type: System.Int32\n      description: The location in the output array to begin writing to.\n    - id: count\n      type: System.Int32\n      description: The number of value types to read from the input array and to write to the output array.\n    typeParameters:\n    - id: T\n      description: The value type to read.\n  overload: System.Runtime.InteropServices.SafeBuffer.ReadArray``1*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>count</code> is less than zero.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>array</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The length of the array minus the index is less than <code>count</code>.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The <xref href=\"System.Runtime.InteropServices.SafeBuffer.Initialize*\"></xref> method has not been called.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeBuffer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.SafeBuffer.ReleasePointer\n  commentId: M:System.Runtime.InteropServices.SafeBuffer.ReleasePointer\n  id: ReleasePointer\n  parent: System.Runtime.InteropServices.SafeBuffer\n  langs:\n  - csharp\n  name: ReleasePointer()\n  nameWithType: SafeBuffer.ReleasePointer()\n  fullName: SafeBuffer.ReleasePointer()\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Releases a pointer that was obtained by the <xref href=\"System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)\"></xref> method.\n  remarks: After this method returns, the pointer cannot be used.\n  syntax:\n    content: public void ReleasePointer ();\n    parameters: []\n  overload: System.Runtime.InteropServices.SafeBuffer.ReleasePointer*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The <xref href=\"System.Runtime.InteropServices.SafeBuffer.Initialize*\"></xref> method has not been called.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeBuffer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)\n  commentId: M:System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)\n  id: Write``1(System.UInt64,``0)\n  parent: System.Runtime.InteropServices.SafeBuffer\n  langs:\n  - csharp\n  name: Write<T>(UInt64, T)\n  nameWithType: SafeBuffer.Write<T>(UInt64, T)\n  fullName: SafeBuffer.Write<T>(UInt64, T)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Writes a value type to memory at the given location.\n  remarks: \"This method is equivalent to the following code:  \\n  \\n```  \\n*(T*)(bytePtr + byteOffset) = value;  \\n```\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public void Write<T> (ulong byteOffset, T value) where T : struct;\n    parameters:\n    - id: byteOffset\n      type: System.UInt64\n      description: The location at which to start writing. You may have to consider alignment issues.\n    - id: value\n      type: T\n      description: The value to write.\n    typeParameters:\n    - id: T\n      description: The value type to write.\n  overload: System.Runtime.InteropServices.SafeBuffer.Write``1*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The <xref href=\"System.Runtime.InteropServices.SafeBuffer.Initialize*\"></xref> method has not been called.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeBuffer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)\n  commentId: M:System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)\n  id: WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)\n  parent: System.Runtime.InteropServices.SafeBuffer\n  langs:\n  - csharp\n  name: WriteArray<T>(UInt64, T[], Int32, Int32)\n  nameWithType: SafeBuffer.WriteArray<T>(UInt64, T[], Int32, Int32)\n  fullName: SafeBuffer.WriteArray<T>(UInt64, T[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Writes the specified number of value types to a memory location by reading bytes starting from the specified location in the input array.\n  remarks: Each element in the input array consists of the generic value type of the class.\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public void WriteArray<T> (ulong byteOffset, T[] array, int index, int count) where T : struct;\n    parameters:\n    - id: byteOffset\n      type: System.UInt64\n      description: The location in memory to write to.\n    - id: array\n      type: T[]\n      description: The input array.\n    - id: index\n      type: System.Int32\n      description: The offset in the array to start reading from.\n    - id: count\n      type: System.Int32\n      description: The number of value types to write.\n    typeParameters:\n    - id: T\n      description: The value type to write.\n  overload: System.Runtime.InteropServices.SafeBuffer.WriteArray``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>array</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> or <code>count</code> is less than zero.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The length of the input array minus <code>index</code> is less than <code>count</code>.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The <xref href=\"System.Runtime.InteropServices.SafeBuffer.Initialize*\"></xref> method has not been called.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeBuffer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Runtime.InteropServices.SafeHandle\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: SafeHandle\n  nameWithType: SafeHandle\n  fullName: System.Runtime.InteropServices.SafeHandle\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.Runtime.InteropServices.SafeBuffer.#ctor(System.Boolean)\n  parent: System.Runtime.InteropServices.SafeBuffer\n  isExternal: false\n  name: SafeBuffer(Boolean)\n  nameWithType: SafeBuffer.SafeBuffer(Boolean)\n  fullName: SafeBuffer.SafeBuffer(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)\n  parent: System.Runtime.InteropServices.SafeBuffer\n  isExternal: false\n  name: AcquirePointer(Byte*)\n  nameWithType: SafeBuffer.AcquirePointer(Byte*)\n  fullName: SafeBuffer.AcquirePointer(Byte*)\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte*\n  parent: System\n  isExternal: false\n  name: Byte*\n  nameWithType: Byte*\n  fullName: System.Byte*\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '*'\n    nameWithType: '*'\n    fullName: '*'\n- uid: System.Runtime.InteropServices.SafeBuffer.ByteLength\n  parent: System.Runtime.InteropServices.SafeBuffer\n  isExternal: false\n  name: ByteLength\n  nameWithType: SafeBuffer.ByteLength\n  fullName: SafeBuffer.ByteLength\n- uid: System.UInt64\n  parent: System\n  isExternal: false\n  name: UInt64\n  nameWithType: UInt64\n  fullName: System.UInt64\n- uid: System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt64)\n  parent: System.Runtime.InteropServices.SafeBuffer\n  isExternal: false\n  name: Initialize(UInt64)\n  nameWithType: SafeBuffer.Initialize(UInt64)\n  fullName: SafeBuffer.Initialize(UInt64)\n- uid: System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)\n  parent: System.Runtime.InteropServices.SafeBuffer\n  isExternal: false\n  name: Initialize(UInt32, UInt32)\n  nameWithType: SafeBuffer.Initialize(UInt32, UInt32)\n  fullName: SafeBuffer.Initialize(UInt32, UInt32)\n- uid: System.UInt32\n  parent: System\n  isExternal: false\n  name: UInt32\n  nameWithType: UInt32\n  fullName: System.UInt32\n- uid: System.Runtime.InteropServices.SafeBuffer.Initialize``1(System.UInt32)\n  parent: System.Runtime.InteropServices.SafeBuffer\n  isExternal: false\n  name: Initialize<T>(UInt32)\n  nameWithType: SafeBuffer.Initialize<T>(UInt32)\n  fullName: SafeBuffer.Initialize<T>(UInt32)\n- uid: System.Runtime.InteropServices.SafeBuffer.IsInvalid\n  parent: System.Runtime.InteropServices.SafeBuffer\n  isExternal: false\n  name: IsInvalid\n  nameWithType: SafeBuffer.IsInvalid\n  fullName: SafeBuffer.IsInvalid\n- uid: System.Runtime.InteropServices.SafeBuffer.Read``1(System.UInt64)\n  parent: System.Runtime.InteropServices.SafeBuffer\n  isExternal: false\n  name: Read<T>(UInt64)\n  nameWithType: SafeBuffer.Read<T>(UInt64)\n  fullName: SafeBuffer.Read<T>(UInt64)\n- uid: T\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)\n  parent: System.Runtime.InteropServices.SafeBuffer\n  isExternal: false\n  name: ReadArray<T>(UInt64, T[], Int32, Int32)\n  nameWithType: SafeBuffer.ReadArray<T>(UInt64, T[], Int32, Int32)\n  fullName: SafeBuffer.ReadArray<T>(UInt64, T[], Int32, Int32)\n- uid: T[]\n  isExternal: true\n  name: T[]\n  nameWithType: T[]\n  fullName: T[]\n  spec.csharp:\n  - uid: T\n    name: T\n    nameWithType: T\n    fullName: T\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Runtime.InteropServices.SafeBuffer.ReleasePointer\n  parent: System.Runtime.InteropServices.SafeBuffer\n  isExternal: false\n  name: ReleasePointer()\n  nameWithType: SafeBuffer.ReleasePointer()\n  fullName: SafeBuffer.ReleasePointer()\n- uid: System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)\n  parent: System.Runtime.InteropServices.SafeBuffer\n  isExternal: false\n  name: Write<T>(UInt64, T)\n  nameWithType: SafeBuffer.Write<T>(UInt64, T)\n  fullName: SafeBuffer.Write<T>(UInt64, T)\n- uid: System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)\n  parent: System.Runtime.InteropServices.SafeBuffer\n  isExternal: false\n  name: WriteArray<T>(UInt64, T[], Int32, Int32)\n  nameWithType: SafeBuffer.WriteArray<T>(UInt64, T[], Int32, Int32)\n  fullName: SafeBuffer.WriteArray<T>(UInt64, T[], Int32, Int32)\n- uid: System.Runtime.InteropServices.SafeBuffer.#ctor*\n  parent: System.Runtime.InteropServices.SafeBuffer\n  isExternal: false\n  name: SafeBuffer\n  nameWithType: SafeBuffer.SafeBuffer\n  fullName: SafeBuffer.SafeBuffer\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeBuffer.xml\n- uid: System.Runtime.InteropServices.SafeBuffer.AcquirePointer*\n  parent: System.Runtime.InteropServices.SafeBuffer\n  isExternal: false\n  name: AcquirePointer\n  nameWithType: SafeBuffer.AcquirePointer\n  fullName: SafeBuffer.AcquirePointer\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeBuffer.xml\n- uid: System.Runtime.InteropServices.SafeBuffer.ByteLength*\n  parent: System.Runtime.InteropServices.SafeBuffer\n  isExternal: false\n  name: ByteLength\n  nameWithType: SafeBuffer.ByteLength\n  fullName: SafeBuffer.ByteLength\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeBuffer.xml\n- uid: System.Runtime.InteropServices.SafeBuffer.Initialize*\n  parent: System.Runtime.InteropServices.SafeBuffer\n  isExternal: false\n  name: Initialize\n  nameWithType: SafeBuffer.Initialize\n  fullName: SafeBuffer.Initialize\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeBuffer.xml\n- uid: System.Runtime.InteropServices.SafeBuffer.Initialize``1*\n  parent: System.Runtime.InteropServices.SafeBuffer\n  isExternal: false\n  name: Initialize<T>\n  nameWithType: SafeBuffer.Initialize<T>\n  fullName: SafeBuffer.Initialize<T>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeBuffer.xml\n- uid: System.Runtime.InteropServices.SafeBuffer.IsInvalid*\n  parent: System.Runtime.InteropServices.SafeBuffer\n  isExternal: false\n  name: IsInvalid\n  nameWithType: SafeBuffer.IsInvalid\n  fullName: SafeBuffer.IsInvalid\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeBuffer.xml\n- uid: System.Runtime.InteropServices.SafeBuffer.Read``1*\n  parent: System.Runtime.InteropServices.SafeBuffer\n  isExternal: false\n  name: Read<T>\n  nameWithType: SafeBuffer.Read<T>\n  fullName: SafeBuffer.Read<T>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeBuffer.xml\n- uid: System.Runtime.InteropServices.SafeBuffer.ReadArray``1*\n  parent: System.Runtime.InteropServices.SafeBuffer\n  isExternal: false\n  name: ReadArray<T>\n  nameWithType: SafeBuffer.ReadArray<T>\n  fullName: SafeBuffer.ReadArray<T>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeBuffer.xml\n- uid: System.Runtime.InteropServices.SafeBuffer.ReleasePointer*\n  parent: System.Runtime.InteropServices.SafeBuffer\n  isExternal: false\n  name: ReleasePointer\n  nameWithType: SafeBuffer.ReleasePointer\n  fullName: SafeBuffer.ReleasePointer\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeBuffer.xml\n- uid: System.Runtime.InteropServices.SafeBuffer.Write``1*\n  parent: System.Runtime.InteropServices.SafeBuffer\n  isExternal: false\n  name: Write<T>\n  nameWithType: SafeBuffer.Write<T>\n  fullName: SafeBuffer.Write<T>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeBuffer.xml\n- uid: System.Runtime.InteropServices.SafeBuffer.WriteArray``1*\n  parent: System.Runtime.InteropServices.SafeBuffer\n  isExternal: false\n  name: WriteArray<T>\n  nameWithType: SafeBuffer.WriteArray<T>\n  fullName: SafeBuffer.WriteArray<T>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SafeBuffer.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Runtime.InteropServices.SafeHandle.Close\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: Close()\n  nameWithType: SafeHandle.Close()\n  fullName: SafeHandle.Close()\n- uid: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: DangerousAddRef(Boolean)\n  nameWithType: SafeHandle.DangerousAddRef(Boolean)\n  fullName: SafeHandle.DangerousAddRef(Boolean)\n- uid: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: DangerousGetHandle()\n  nameWithType: SafeHandle.DangerousGetHandle()\n  fullName: SafeHandle.DangerousGetHandle()\n- uid: System.Runtime.InteropServices.SafeHandle.DangerousRelease\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: DangerousRelease()\n  nameWithType: SafeHandle.DangerousRelease()\n  fullName: SafeHandle.DangerousRelease()\n- uid: System.Runtime.InteropServices.SafeHandle.Dispose\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: Dispose()\n  nameWithType: SafeHandle.Dispose()\n  fullName: SafeHandle.Dispose()\n- uid: System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: SafeHandle.Dispose(Boolean)\n  fullName: SafeHandle.Dispose(Boolean)\n- uid: System.Runtime.InteropServices.SafeHandle.handle\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: handle\n  nameWithType: SafeHandle.handle\n  fullName: SafeHandle.handle\n- uid: System.Runtime.InteropServices.SafeHandle.IsClosed\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: IsClosed\n  nameWithType: SafeHandle.IsClosed\n  fullName: SafeHandle.IsClosed\n- uid: System.Runtime.InteropServices.SafeHandle.ReleaseHandle\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: ReleaseHandle()\n  nameWithType: SafeHandle.ReleaseHandle()\n  fullName: SafeHandle.ReleaseHandle()\n- uid: System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: SetHandle(IntPtr)\n  nameWithType: SafeHandle.SetHandle(IntPtr)\n  fullName: SafeHandle.SetHandle(IntPtr)\n- uid: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: SetHandleAsInvalid()\n  nameWithType: SafeHandle.SetHandleAsInvalid()\n  fullName: SafeHandle.SetHandleAsInvalid()\n"}