{"nodes":[{"content":"Provides a Cryptography Next Generation (CNG) implementation of the Digital Signature Algorithm (DSA).","nodes":[{"pos":[0,102],"content":"Provides a Cryptography Next Generation (CNG) implementation of the Digital Signature Algorithm (DSA).","nodes":[{"content":"Provides a Cryptography Next Generation (CNG) implementation of the Digital Signature Algorithm (DSA).","pos":[0,102]}]}],"pos":[1447,1550],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.DSACng\"></xref> class with a random 2,048-bit key pair.","nodes":[{"pos":[0,130],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.DSACng\"&gt;&lt;/xref&gt;</ph> class with a random 2,048-bit key pair.","source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.DSACng\"></xref> class with a random 2,048-bit key pair."}],"pos":[4270,4401],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.DSACng\"></xref> class with a randomly generated key of the specified size.","nodes":[{"pos":[0,149],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.DSACng\"&gt;&lt;/xref&gt;</ph> class with a randomly generated key of the specified size.","source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.DSACng\"></xref> class with a randomly generated key of the specified size."}],"pos":[5336,5486],"yaml":true},{"content":"Valid key sizes range from 512 to 3,072 bits, in increments of 64. We recommend that a minimum size of 2,048 bits be used for all keys.","nodes":[{"pos":[0,135],"content":"Valid key sizes range from 512 to 3,072 bits, in increments of 64. We recommend that a minimum size of 2,048 bits be used for all keys.","nodes":[{"content":"Valid key sizes range from 512 to 3,072 bits, in increments of 64. We recommend that a minimum size of 2,048 bits be used for all keys.","pos":[0,135],"nodes":[{"content":"Valid key sizes range from 512 to 3,072 bits, in increments of 64.","pos":[0,66]},{"content":"We recommend that a minimum size of 2,048 bits be used for all keys.","pos":[67,135]}]}]}],"pos":[5497,5633],"yaml":true,"extradata":"MT"},{"content":"The size of the key to generate in bits.","nodes":[{"pos":[0,40],"content":"The size of the key to generate in bits.","nodes":[{"content":"The size of the key to generate in bits.","pos":[0,40]}]}],"pos":[5763,5804],"yaml":true},{"content":"<code>keySize</code> is not valid.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">&lt;code&gt;keySize&lt;/code&gt;</ph> is not valid.","source":"<code>keySize</code> is not valid."}],"pos":[6021,6056],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.DSACng\"></xref> class with the specified key.","nodes":[{"pos":[0,120],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.DSACng\"&gt;&lt;/xref&gt;</ph> class with the specified key.","source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.DSACng\"></xref> class with the specified key."}],"pos":[6931,7052],"yaml":true},{"content":"The <xref:System.Security.Cryptography.CngKey.AlgorithmGroup%2A?displayProperty=fullName> of `key` must be <xref:System.Security.Cryptography.CngAlgorithmGroup.Dsa%2A?displayProperty=fullName>.  \n  \n This constructor creates a copy of the key. Even if `key` is disposed, the copy of this key object in DSA remains alive.","nodes":[{"pos":[0,193],"content":"The <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.CngKey.AlgorithmGroup%2A?displayProperty=fullName&gt;</ph> of <ph id=\"ph2\">`key`</ph> must be <ph id=\"ph3\">&lt;xref:System.Security.Cryptography.CngAlgorithmGroup.Dsa%2A?displayProperty=fullName&gt;</ph>.","source":"The <xref:System.Security.Cryptography.CngKey.AlgorithmGroup%2A?displayProperty=fullName> of `key` must be <xref:System.Security.Cryptography.CngAlgorithmGroup.Dsa%2A?displayProperty=fullName>."},{"pos":[200,320],"content":"This constructor creates a copy of the key. Even if `key` is disposed, the copy of this key object in DSA remains alive.","nodes":[{"content":"This constructor creates a copy of the key.","pos":[0,43]},{"content":"Even if <ph id=\"ph1\">`key`</ph> is disposed, the copy of this key object in DSA remains alive.","pos":[44,120],"source":" Even if `key` is disposed, the copy of this key object in DSA remains alive."}]}],"pos":[7063,7388],"yaml":true,"extradata":"MT"},{"content":"The key to use for DSA operations.","nodes":[{"pos":[0,34],"content":"The key to use for DSA operations.","nodes":[{"content":"The key to use for DSA operations.","pos":[0,34]}]}],"pos":[7565,7600],"yaml":true},{"content":"<code>key</code> is not a valid DSA key.","nodes":[{"pos":[0,40],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is not a valid DSA key.","source":"<code>key</code> is not a valid DSA key."}],"pos":[7763,7804],"yaml":true},{"content":"<code>key</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>key</code> is `null`."}],"pos":[7906,7934],"yaml":true},{"content":"Creates the digital signature for the specified data.","nodes":[{"pos":[0,53],"content":"Creates the digital signature for the specified data.","nodes":[{"content":"Creates the digital signature for the specified data.","pos":[0,53]}]}],"pos":[8810,8864],"yaml":true},{"content":"The data to be signed.","nodes":[{"pos":[0,22],"content":"The data to be signed.","nodes":[{"content":"The data to be signed.","pos":[0,22]}]}],"pos":[9023,9046],"yaml":true},{"content":"The digital signature for the specified data.","nodes":[{"pos":[0,45],"content":"The digital signature for the specified data.","nodes":[{"content":"The digital signature for the specified data.","pos":[0,45]}]}],"pos":[9103,9149],"yaml":true},{"content":"<code>rgbHash</code> is `null`.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;rgbHash&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>rgbHash</code> is `null`."}],"pos":[9330,9362],"yaml":true},{"content":"<code>rgbHash</code> is shorter in length than the Q value of the DSA key .","nodes":[{"pos":[0,75],"content":"<ph id=\"ph1\">&lt;code&gt;rgbHash&lt;/code&gt;</ph> is shorter in length than the Q value of the DSA key .","source":"<code>rgbHash</code> is shorter in length than the Q value of the DSA key ."}],"pos":[9480,9556],"yaml":true},{"content":"Exports the DSA algorithm parameters.","nodes":[{"pos":[0,37],"content":"Exports the DSA algorithm parameters.","nodes":[{"content":"Exports the DSA algorithm parameters.","pos":[0,37]}]}],"pos":[11388,11426],"yaml":true},{"content":"`true` to include private parameters; otherwise, `false`.","nodes":[{"pos":[0,57],"content":"<ph id=\"ph1\">`true`</ph> to include private parameters; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to include private parameters; otherwise, `false`."}],"pos":[11655,11715],"yaml":true},{"content":"The DSA algorithm parameters.","nodes":[{"pos":[0,29],"content":"The DSA algorithm parameters.","nodes":[{"content":"The DSA algorithm parameters.","pos":[0,29]}]}],"pos":[11801,11831],"yaml":true},{"content":"DSA key is not a valid public or private key.","nodes":[{"pos":[0,45],"content":"DSA key is not a valid public or private key.","nodes":[{"content":"DSA key is not a valid public or private key.","pos":[0,45]}]}],"pos":[12059,12105],"yaml":true},{"content":"Replaces the existing key that the current instance is working with by creating a new <xref href=\"System.Security.Cryptography.CngKey\"></xref> for the parameters structure.","nodes":[{"pos":[0,172],"content":"Replaces the existing key that the current instance is working with by creating a new <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.CngKey\"&gt;&lt;/xref&gt;</ph> for the parameters structure.","source":"Replaces the existing key that the current instance is working with by creating a new <xref href=\"System.Security.Cryptography.CngKey\"></xref> for the parameters structure."}],"pos":[15960,16133],"yaml":true},{"content":"The DSA parameters.","nodes":[{"pos":[0,19],"content":"The DSA parameters.","nodes":[{"content":"The DSA parameters.","pos":[0,19]}]}],"pos":[16362,16382],"yaml":true},{"content":"The specified DSA parameters are not valid.","nodes":[{"pos":[0,43],"content":"The specified DSA parameters are not valid.","nodes":[{"content":"The specified DSA parameters are not valid.","pos":[0,43]}]}],"pos":[16556,16600],"yaml":true},{"content":"Gets the key that will be used by the <xref href=\"System.Security.Cryptography.DSACng\"></xref> object for any cryptographic operation that it performs.","nodes":[{"pos":[0,151],"content":"Gets the key that will be used by the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.DSACng\"&gt;&lt;/xref&gt;</ph> object for any cryptographic operation that it performs.","source":"Gets the key that will be used by the <xref href=\"System.Security.Cryptography.DSACng\"></xref> object for any cryptographic operation that it performs."}],"pos":[17320,17472],"yaml":true},{"content":"The  <xref:System.Security.Cryptography.CngKey> object is disposed if the key is reset, for instance by changing the <xref:System.Security.Cryptography.CngKey.KeySize%2A?displayProperty=fullName> property, by using the <xref:System.Security.Cryptography.DSACng.ImportParameters%2A?displayProperty=fullName> method to create a new key, or by disposing the parent <xref:System.Security.Cryptography.DSACng> object. Therefore, you should ensure that the key object is no longer used in these cases.  \n  \n This <xref:System.Security.Cryptography.CngKey> object is not the same as the <xref:System.Security.Cryptography.CngKey> object passed to the <xref:System.Security.Cryptography.DSACng.%23ctor%2A> constructor, if that constructor was used. However, it will point to the same CNG key.","nodes":[{"pos":[0,495],"content":"The  <xref:System.Security.Cryptography.CngKey> object is disposed if the key is reset, for instance by changing the <xref:System.Security.Cryptography.CngKey.KeySize%2A?displayProperty=fullName> property, by using the <xref:System.Security.Cryptography.DSACng.ImportParameters%2A?displayProperty=fullName> method to create a new key, or by disposing the parent <xref:System.Security.Cryptography.DSACng> object. Therefore, you should ensure that the key object is no longer used in these cases.","nodes":[{"content":"The  <xref:System.Security.Cryptography.CngKey> object is disposed if the key is reset, for instance by changing the <xref:System.Security.Cryptography.CngKey.KeySize%2A?displayProperty=fullName> property, by using the <xref:System.Security.Cryptography.DSACng.ImportParameters%2A?displayProperty=fullName> method to create a new key, or by disposing the parent <xref:System.Security.Cryptography.DSACng> object. Therefore, you should ensure that the key object is no longer used in these cases.","pos":[0,495],"nodes":[{"content":"The  <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.CngKey&gt;</ph> object is disposed if the key is reset, for instance by changing the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.CngKey.KeySize%2A?displayProperty=fullName&gt;</ph> property, by using the <ph id=\"ph3\">&lt;xref:System.Security.Cryptography.DSACng.ImportParameters%2A?displayProperty=fullName&gt;</ph> method to create a new key, or by disposing the parent <ph id=\"ph4\">&lt;xref:System.Security.Cryptography.DSACng&gt;</ph> object.","pos":[0,412],"source":"The  <xref:System.Security.Cryptography.CngKey> object is disposed if the key is reset, for instance by changing the <xref:System.Security.Cryptography.CngKey.KeySize%2A?displayProperty=fullName> property, by using the <xref:System.Security.Cryptography.DSACng.ImportParameters%2A?displayProperty=fullName> method to create a new key, or by disposing the parent <xref:System.Security.Cryptography.DSACng> object."},{"content":"Therefore, you should ensure that the key object is no longer used in these cases.","pos":[413,495]}]}]},{"pos":[502,784],"content":"This <xref:System.Security.Cryptography.CngKey> object is not the same as the <xref:System.Security.Cryptography.CngKey> object passed to the <xref:System.Security.Cryptography.DSACng.%23ctor%2A> constructor, if that constructor was used. However, it will point to the same CNG key.","nodes":[{"content":"This <xref:System.Security.Cryptography.CngKey> object is not the same as the <xref:System.Security.Cryptography.CngKey> object passed to the <xref:System.Security.Cryptography.DSACng.%23ctor%2A> constructor, if that constructor was used. However, it will point to the same CNG key.","pos":[0,282],"nodes":[{"content":"This <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.CngKey&gt;</ph> object is not the same as the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.CngKey&gt;</ph> object passed to the <ph id=\"ph3\">&lt;xref:System.Security.Cryptography.DSACng.%23ctor%2A&gt;</ph> constructor, if that constructor was used.","pos":[0,238],"source":"This <xref:System.Security.Cryptography.CngKey> object is not the same as the <xref:System.Security.Cryptography.CngKey> object passed to the <xref:System.Security.Cryptography.DSACng.%23ctor%2A> constructor, if that constructor was used."},{"content":"However, it will point to the same CNG key.","pos":[239,282]}]}]}],"pos":[17483,18272],"yaml":true,"extradata":"MT"},{"content":"The key used by the <xref href=\"System.Security.Cryptography.DSACng\"></xref> object to perform cryptographic operations.","nodes":[{"pos":[0,120],"content":"The key used by the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.DSACng\"&gt;&lt;/xref&gt;</ph> object to perform cryptographic operations.","source":"The key used by the <xref href=\"System.Security.Cryptography.DSACng\"></xref> object to perform cryptographic operations."}],"pos":[18490,18611],"yaml":true},{"content":"Gets the name of the key exchange algorithm.","nodes":[{"pos":[0,44],"content":"Gets the name of the key exchange algorithm.","nodes":[{"content":"Gets the name of the key exchange algorithm.","pos":[0,44]}]}],"pos":[19571,19616],"yaml":true},{"content":"Always `null`.","nodes":[{"pos":[0,14],"content":"Always <ph id=\"ph1\">`null`</ph>.","source":"Always `null`."}],"pos":[19749,19764],"yaml":true},{"content":"Gets the key sizes, in bits, that are supported by the DSA algorithm.","nodes":[{"pos":[0,69],"content":"Gets the key sizes, in bits, that are supported by the DSA algorithm.","nodes":[{"content":"Gets the key sizes, in bits, that are supported by the DSA algorithm.","pos":[0,69]}]}],"pos":[20631,20701],"yaml":true},{"content":"An array that contains the key sizes supported by the algorithm.","nodes":[{"pos":[0,64],"content":"An array that contains the key sizes supported by the algorithm.","nodes":[{"content":"An array that contains the key sizes supported by the algorithm.","pos":[0,64]}]}],"pos":[20886,20951],"yaml":true},{"content":"Gets the name of the signature algorithm.","nodes":[{"pos":[0,41],"content":"Gets the name of the signature algorithm.","nodes":[{"content":"Gets the name of the signature algorithm.","pos":[0,41]}]}],"pos":[21841,21883],"yaml":true},{"content":"The string \"DSA\".","nodes":[{"pos":[0,17],"content":"The string \"DSA\".","nodes":[{"content":"The string \"DSA\".","pos":[0,17]}]}],"pos":[22014,22032],"yaml":true},{"content":"Verifies if the specified digital signature matches the specified data.","nodes":[{"pos":[0,71],"content":"Verifies if the specified digital signature matches the specified data.","nodes":[{"content":"Verifies if the specified digital signature matches the specified data.","pos":[0,71]}]}],"pos":[23042,23114],"yaml":true},{"content":"The signed data.","nodes":[{"pos":[0,16],"content":"The signed data.","nodes":[{"content":"The signed data.","pos":[0,16]}]}],"pos":[23292,23309],"yaml":true},{"content":"The digital signature to be verified.","nodes":[{"pos":[0,37],"content":"The digital signature to be verified.","nodes":[{"content":"The digital signature to be verified.","pos":[0,37]}]}],"pos":[23377,23415],"yaml":true},{"content":"`true` if <code>rgbSignature</code> matches the signature computed using the specified data; otherwise, `false`.","nodes":[{"pos":[0,112],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">rgbSignature</ph><ept id=\"p1\">&lt;/code&gt;</ept> matches the signature computed using the specified data; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if <code>rgbSignature</code> matches the signature computed using the specified data; otherwise, `false`."}],"pos":[23473,23588],"yaml":true},{"content":"The <code>rgbHash</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>rgbSignature</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">rgbHash</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>rgbHash</code> parameter is `null`."},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,113],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">rgbSignature</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>rgbSignature</code> parameter is `null`."}],"pos":[23769,23889],"yaml":true},{"content":"<code>rgbHash</code> is shorter in length than the Q value of the DSA key .","nodes":[{"pos":[0,75],"content":"<ph id=\"ph1\">&lt;code&gt;rgbHash&lt;/code&gt;</ph> is shorter in length than the Q value of the DSA key .","source":"<code>rgbHash</code> is shorter in length than the Q value of the DSA key ."}],"pos":[24007,24083],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.DSACng\n  commentId: T:System.Security.Cryptography.DSACng\n  id: DSACng\n  children:\n  - System.Security.Cryptography.DSACng.#ctor\n  - System.Security.Cryptography.DSACng.#ctor(System.Int32)\n  - System.Security.Cryptography.DSACng.#ctor(System.Security.Cryptography.CngKey)\n  - System.Security.Cryptography.DSACng.CreateSignature(System.Byte[])\n  - System.Security.Cryptography.DSACng.Dispose(System.Boolean)\n  - System.Security.Cryptography.DSACng.ExportParameters(System.Boolean)\n  - System.Security.Cryptography.DSACng.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.DSACng.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.DSACng.ImportParameters(System.Security.Cryptography.DSAParameters)\n  - System.Security.Cryptography.DSACng.Key\n  - System.Security.Cryptography.DSACng.KeyExchangeAlgorithm\n  - System.Security.Cryptography.DSACng.LegalKeySizes\n  - System.Security.Cryptography.DSACng.SignatureAlgorithm\n  - System.Security.Cryptography.DSACng.VerifySignature(System.Byte[],System.Byte[])\n  langs:\n  - csharp\n  name: DSACng\n  nameWithType: DSACng\n  fullName: System.Security.Cryptography.DSACng\n  type: Class\n  assemblies:\n  - System.Core\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: Provides a Cryptography Next Generation (CNG) implementation of the Digital Signature Algorithm (DSA).\n  syntax:\n    content: 'public sealed class DSACng : System.Security.Cryptography.DSA'\n  inheritance:\n  - System.Object\n  - System.Security.Cryptography.AsymmetricAlgorithm\n  - System.Security.Cryptography.DSA\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Security.Cryptography.AsymmetricAlgorithm.Clear\n  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n  - System.Security.Cryptography.AsymmetricAlgorithm.KeySize\n  - System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue\n  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue\n  - System.Security.Cryptography.DSA.Create\n  - System.Security.Cryptography.DSA.Create(System.Int32)\n  - System.Security.Cryptography.DSA.Create(System.Security.Cryptography.DSAParameters)\n  - System.Security.Cryptography.DSA.Create(System.String)\n  - System.Security.Cryptography.DSA.FromXmlString(System.String)\n  - System.Security.Cryptography.DSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.DSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.DSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.DSA.ToXmlString(System.Boolean)\n  - System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.DSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  version:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACng.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.DSACng.#ctor\n  commentId: M:System.Security.Cryptography.DSACng.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.DSACng\n  langs:\n  - csharp\n  name: DSACng()\n  nameWithType: DSACng.DSACng()\n  fullName: DSACng.DSACng()\n  type: Constructor\n  assemblies:\n  - System.Core\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.DSACng\"></xref> class with a random 2,048-bit key pair.\n  syntax:\n    content: public DSACng ();\n    parameters: []\n  overload: System.Security.Cryptography.DSACng.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACng.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.DSACng.#ctor(System.Int32)\n  commentId: M:System.Security.Cryptography.DSACng.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Security.Cryptography.DSACng\n  langs:\n  - csharp\n  name: DSACng(Int32)\n  nameWithType: DSACng.DSACng(Int32)\n  fullName: DSACng.DSACng(Int32)\n  type: Constructor\n  assemblies:\n  - System.Core\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.DSACng\"></xref> class with a randomly generated key of the specified size.\n  remarks: Valid key sizes range from 512 to 3,072 bits, in increments of 64. We recommend that a minimum size of 2,048 bits be used for all keys.\n  syntax:\n    content: public DSACng (int keySize);\n    parameters:\n    - id: keySize\n      type: System.Int32\n      description: The size of the key to generate in bits.\n  overload: System.Security.Cryptography.DSACng.#ctor*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: <code>keySize</code> is not valid.\n  version:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACng.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.DSACng.#ctor(System.Security.Cryptography.CngKey)\n  commentId: M:System.Security.Cryptography.DSACng.#ctor(System.Security.Cryptography.CngKey)\n  id: '#ctor(System.Security.Cryptography.CngKey)'\n  parent: System.Security.Cryptography.DSACng\n  langs:\n  - csharp\n  name: DSACng(CngKey)\n  nameWithType: DSACng.DSACng(CngKey)\n  fullName: DSACng.DSACng(CngKey)\n  type: Constructor\n  assemblies:\n  - System.Core\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.DSACng\"></xref> class with the specified key.\n  remarks: \"The <xref:System.Security.Cryptography.CngKey.AlgorithmGroup%2A?displayProperty=fullName> of `key` must be <xref:System.Security.Cryptography.CngAlgorithmGroup.Dsa%2A?displayProperty=fullName>.  \\n  \\n This constructor creates a copy of the key. Even if `key` is disposed, the copy of this key object in DSA remains alive.\"\n  syntax:\n    content: public DSACng (System.Security.Cryptography.CngKey key);\n    parameters:\n    - id: key\n      type: System.Security.Cryptography.CngKey\n      description: The key to use for DSA operations.\n  overload: System.Security.Cryptography.DSACng.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>key</code> is not a valid DSA key.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is `null`.\n  attributes: []\n  version:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACng.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.DSACng.CreateSignature(System.Byte[])\n  commentId: M:System.Security.Cryptography.DSACng.CreateSignature(System.Byte[])\n  id: CreateSignature(System.Byte[])\n  parent: System.Security.Cryptography.DSACng\n  langs:\n  - csharp\n  name: CreateSignature(Byte[])\n  nameWithType: DSACng.CreateSignature(Byte[])\n  fullName: DSACng.CreateSignature(Byte[])\n  type: Method\n  assemblies:\n  - System.Core\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: Creates the digital signature for the specified data.\n  syntax:\n    content: public override byte[] CreateSignature (byte[] rgbHash);\n    parameters:\n    - id: rgbHash\n      type: System.Byte[]\n      description: The data to be signed.\n    return:\n      type: System.Byte[]\n      description: The digital signature for the specified data.\n  overload: System.Security.Cryptography.DSACng.CreateSignature*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>rgbHash</code> is `null`.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: <code>rgbHash</code> is shorter in length than the Q value of the DSA key .\n  attributes: []\n  version:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACng.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.DSACng.Dispose(System.Boolean)\n  commentId: M:System.Security.Cryptography.DSACng.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Security.Cryptography.DSACng\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: DSACng.Dispose(Boolean)\n  fullName: DSACng.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.Core\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: ''\n  overload: System.Security.Cryptography.DSACng.Dispose*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACng.xml\n- uid: System.Security.Cryptography.DSACng.ExportParameters(System.Boolean)\n  commentId: M:System.Security.Cryptography.DSACng.ExportParameters(System.Boolean)\n  id: ExportParameters(System.Boolean)\n  parent: System.Security.Cryptography.DSACng\n  langs:\n  - csharp\n  name: ExportParameters(Boolean)\n  nameWithType: DSACng.ExportParameters(Boolean)\n  fullName: DSACng.ExportParameters(Boolean)\n  type: Method\n  assemblies:\n  - System.Core\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: Exports the DSA algorithm parameters.\n  syntax:\n    content: public override System.Security.Cryptography.DSAParameters ExportParameters (bool includePrivateParameters);\n    parameters:\n    - id: includePrivateParameters\n      type: System.Boolean\n      description: '`true` to include private parameters; otherwise, `false`.'\n    return:\n      type: System.Security.Cryptography.DSAParameters\n      description: The DSA algorithm parameters.\n  overload: System.Security.Cryptography.DSACng.ExportParameters*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: DSA key is not a valid public or private key.\n  version:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACng.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.DSACng.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  commentId: M:System.Security.Cryptography.DSACng.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  id: HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSACng\n  langs:\n  - csharp\n  name: HashData(Stream, HashAlgorithmName)\n  nameWithType: DSACng.HashData(Stream, HashAlgorithmName)\n  fullName: DSACng.HashData(Stream, HashAlgorithmName)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override byte[] HashData (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.IO.Stream\n      description: ''\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: ''\n    return:\n      type: System.Byte[]\n      description: ''\n  overload: System.Security.Cryptography.DSACng.HashData*\n  exceptions: []\n  version:\n  - netframework-4.6.2\n  - netframework-4.7\n  monikers:\n  - netframework-4.6.2\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACng.xml\n- uid: System.Security.Cryptography.DSACng.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  commentId: M:System.Security.Cryptography.DSACng.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  id: HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSACng\n  langs:\n  - csharp\n  name: HashData(Byte[], Int32, Int32, HashAlgorithmName)\n  nameWithType: DSACng.HashData(Byte[], Int32, Int32, HashAlgorithmName)\n  fullName: DSACng.HashData(Byte[], Int32, Int32, HashAlgorithmName)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override byte[] HashData (byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: ''\n    - id: offset\n      type: System.Int32\n      description: ''\n    - id: count\n      type: System.Int32\n      description: ''\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: ''\n    return:\n      type: System.Byte[]\n      description: ''\n  overload: System.Security.Cryptography.DSACng.HashData*\n  exceptions: []\n  version:\n  - netframework-4.6.2\n  - netframework-4.7\n  monikers:\n  - netframework-4.6.2\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACng.xml\n- uid: System.Security.Cryptography.DSACng.ImportParameters(System.Security.Cryptography.DSAParameters)\n  commentId: M:System.Security.Cryptography.DSACng.ImportParameters(System.Security.Cryptography.DSAParameters)\n  id: ImportParameters(System.Security.Cryptography.DSAParameters)\n  parent: System.Security.Cryptography.DSACng\n  langs:\n  - csharp\n  name: ImportParameters(DSAParameters)\n  nameWithType: DSACng.ImportParameters(DSAParameters)\n  fullName: DSACng.ImportParameters(DSAParameters)\n  type: Method\n  assemblies:\n  - System.Core\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: Replaces the existing key that the current instance is working with by creating a new <xref href=\"System.Security.Cryptography.CngKey\"></xref> for the parameters structure.\n  syntax:\n    content: public override void ImportParameters (System.Security.Cryptography.DSAParameters parameters);\n    parameters:\n    - id: parameters\n      type: System.Security.Cryptography.DSAParameters\n      description: The DSA parameters.\n  overload: System.Security.Cryptography.DSACng.ImportParameters*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The specified DSA parameters are not valid.\n  version:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACng.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.DSACng.Key\n  commentId: P:System.Security.Cryptography.DSACng.Key\n  id: Key\n  parent: System.Security.Cryptography.DSACng\n  langs:\n  - csharp\n  name: Key\n  nameWithType: DSACng.Key\n  fullName: DSACng.Key\n  type: Property\n  assemblies:\n  - System.Core\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: Gets the key that will be used by the <xref href=\"System.Security.Cryptography.DSACng\"></xref> object for any cryptographic operation that it performs.\n  remarks: \"The  <xref:System.Security.Cryptography.CngKey> object is disposed if the key is reset, for instance by changing the <xref:System.Security.Cryptography.CngKey.KeySize%2A?displayProperty=fullName> property, by using the <xref:System.Security.Cryptography.DSACng.ImportParameters%2A?displayProperty=fullName> method to create a new key, or by disposing the parent <xref:System.Security.Cryptography.DSACng> object. Therefore, you should ensure that the key object is no longer used in these cases.  \\n  \\n This <xref:System.Security.Cryptography.CngKey> object is not the same as the <xref:System.Security.Cryptography.CngKey> object passed to the <xref:System.Security.Cryptography.DSACng.%23ctor%2A> constructor, if that constructor was used. However, it will point to the same CNG key.\"\n  syntax:\n    content: >-\n      [get: System.Security.SecuritySafeCritical]\n\n      public System.Security.Cryptography.CngKey Key { get; }\n    return:\n      type: System.Security.Cryptography.CngKey\n      description: The key used by the <xref href=\"System.Security.Cryptography.DSACng\"></xref> object to perform cryptographic operations.\n  overload: System.Security.Cryptography.DSACng.Key*\n  exceptions: []\n  attributes:\n  - type: 'get: System.Security.SecuritySafeCritical'\n  version:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACng.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.DSACng.KeyExchangeAlgorithm\n  commentId: P:System.Security.Cryptography.DSACng.KeyExchangeAlgorithm\n  id: KeyExchangeAlgorithm\n  parent: System.Security.Cryptography.DSACng\n  langs:\n  - csharp\n  name: KeyExchangeAlgorithm\n  nameWithType: DSACng.KeyExchangeAlgorithm\n  fullName: DSACng.KeyExchangeAlgorithm\n  type: Property\n  assemblies:\n  - System.Core\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: Gets the name of the key exchange algorithm.\n  syntax:\n    content: public override string KeyExchangeAlgorithm { get; }\n    return:\n      type: System.String\n      description: Always `null`.\n  overload: System.Security.Cryptography.DSACng.KeyExchangeAlgorithm*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACng.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.DSACng.LegalKeySizes\n  commentId: P:System.Security.Cryptography.DSACng.LegalKeySizes\n  id: LegalKeySizes\n  parent: System.Security.Cryptography.DSACng\n  langs:\n  - csharp\n  name: LegalKeySizes\n  nameWithType: DSACng.LegalKeySizes\n  fullName: DSACng.LegalKeySizes\n  type: Property\n  assemblies:\n  - System.Core\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: Gets the key sizes, in bits, that are supported by the DSA algorithm.\n  syntax:\n    content: public override System.Security.Cryptography.KeySizes[] LegalKeySizes { get; }\n    return:\n      type: System.Security.Cryptography.KeySizes[]\n      description: An array that contains the key sizes supported by the algorithm.\n  overload: System.Security.Cryptography.DSACng.LegalKeySizes*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACng.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.DSACng.SignatureAlgorithm\n  commentId: P:System.Security.Cryptography.DSACng.SignatureAlgorithm\n  id: SignatureAlgorithm\n  parent: System.Security.Cryptography.DSACng\n  langs:\n  - csharp\n  name: SignatureAlgorithm\n  nameWithType: DSACng.SignatureAlgorithm\n  fullName: DSACng.SignatureAlgorithm\n  type: Property\n  assemblies:\n  - System.Core\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: Gets the name of the signature algorithm.\n  syntax:\n    content: public override string SignatureAlgorithm { get; }\n    return:\n      type: System.String\n      description: The string \"DSA\".\n  overload: System.Security.Cryptography.DSACng.SignatureAlgorithm*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACng.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.DSACng.VerifySignature(System.Byte[],System.Byte[])\n  commentId: M:System.Security.Cryptography.DSACng.VerifySignature(System.Byte[],System.Byte[])\n  id: VerifySignature(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.DSACng\n  langs:\n  - csharp\n  name: VerifySignature(Byte[], Byte[])\n  nameWithType: DSACng.VerifySignature(Byte[], Byte[])\n  fullName: DSACng.VerifySignature(Byte[], Byte[])\n  type: Method\n  assemblies:\n  - System.Core\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: Verifies if the specified digital signature matches the specified data.\n  syntax:\n    content: public override bool VerifySignature (byte[] rgbHash, byte[] rgbSignature);\n    parameters:\n    - id: rgbHash\n      type: System.Byte[]\n      description: The signed data.\n    - id: rgbSignature\n      type: System.Byte[]\n      description: The digital signature to be verified.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>rgbSignature</code> matches the signature computed using the specified data; otherwise, `false`.'\n  overload: System.Security.Cryptography.DSACng.VerifySignature*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>rgbHash</code> parameter is `null`.  \\n  \\n -or-  \\n  \\n The <code>rgbSignature</code> parameter is `null`.\"\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: <code>rgbHash</code> is shorter in length than the Q value of the DSA key .\n  attributes: []\n  version:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACng.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Security.Cryptography.DSA\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: DSA\n  nameWithType: DSA\n  fullName: System.Security.Cryptography.DSA\n- uid: System.Security.Cryptography.CryptographicException\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CryptographicException\n  nameWithType: CryptographicException\n  fullName: System.Security.Cryptography.CryptographicException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.PlatformNotSupportedException\n  parent: System\n  isExternal: false\n  name: PlatformNotSupportedException\n  nameWithType: PlatformNotSupportedException\n  fullName: System.PlatformNotSupportedException\n- uid: System.Security.Cryptography.DSACng.#ctor\n  parent: System.Security.Cryptography.DSACng\n  isExternal: false\n  name: DSACng()\n  nameWithType: DSACng.DSACng()\n  fullName: DSACng.DSACng()\n- uid: System.Security.Cryptography.DSACng.#ctor(System.Int32)\n  parent: System.Security.Cryptography.DSACng\n  isExternal: false\n  name: DSACng(Int32)\n  nameWithType: DSACng.DSACng(Int32)\n  fullName: DSACng.DSACng(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.DSACng.#ctor(System.Security.Cryptography.CngKey)\n  parent: System.Security.Cryptography.DSACng\n  isExternal: false\n  name: DSACng(CngKey)\n  nameWithType: DSACng.DSACng(CngKey)\n  fullName: DSACng.DSACng(CngKey)\n- uid: System.Security.Cryptography.CngKey\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngKey\n  nameWithType: CngKey\n  fullName: System.Security.Cryptography.CngKey\n- uid: System.Security.Cryptography.DSACng.CreateSignature(System.Byte[])\n  parent: System.Security.Cryptography.DSACng\n  isExternal: false\n  name: CreateSignature(Byte[])\n  nameWithType: DSACng.CreateSignature(Byte[])\n  fullName: DSACng.CreateSignature(Byte[])\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.Cryptography.DSACng.Dispose(System.Boolean)\n  parent: System.Security.Cryptography.DSACng\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: DSACng.Dispose(Boolean)\n  fullName: DSACng.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.DSACng.ExportParameters(System.Boolean)\n  parent: System.Security.Cryptography.DSACng\n  isExternal: false\n  name: ExportParameters(Boolean)\n  nameWithType: DSACng.ExportParameters(Boolean)\n  fullName: DSACng.ExportParameters(Boolean)\n- uid: System.Security.Cryptography.DSAParameters\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: DSAParameters\n  nameWithType: DSAParameters\n  fullName: System.Security.Cryptography.DSAParameters\n- uid: System.Security.Cryptography.DSACng.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSACng\n  isExternal: false\n  name: HashData(Stream, HashAlgorithmName)\n  nameWithType: DSACng.HashData(Stream, HashAlgorithmName)\n  fullName: DSACng.HashData(Stream, HashAlgorithmName)\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: false\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.Security.Cryptography.HashAlgorithmName\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithmName\n  nameWithType: HashAlgorithmName\n  fullName: System.Security.Cryptography.HashAlgorithmName\n- uid: System.Security.Cryptography.DSACng.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSACng\n  isExternal: false\n  name: HashData(Byte[], Int32, Int32, HashAlgorithmName)\n  nameWithType: DSACng.HashData(Byte[], Int32, Int32, HashAlgorithmName)\n  fullName: DSACng.HashData(Byte[], Int32, Int32, HashAlgorithmName)\n- uid: System.Security.Cryptography.DSACng.ImportParameters(System.Security.Cryptography.DSAParameters)\n  parent: System.Security.Cryptography.DSACng\n  isExternal: false\n  name: ImportParameters(DSAParameters)\n  nameWithType: DSACng.ImportParameters(DSAParameters)\n  fullName: DSACng.ImportParameters(DSAParameters)\n- uid: System.Security.Cryptography.DSACng.Key\n  parent: System.Security.Cryptography.DSACng\n  isExternal: false\n  name: Key\n  nameWithType: DSACng.Key\n  fullName: DSACng.Key\n- uid: System.Security.Cryptography.DSACng.KeyExchangeAlgorithm\n  parent: System.Security.Cryptography.DSACng\n  isExternal: false\n  name: KeyExchangeAlgorithm\n  nameWithType: DSACng.KeyExchangeAlgorithm\n  fullName: DSACng.KeyExchangeAlgorithm\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.DSACng.LegalKeySizes\n  parent: System.Security.Cryptography.DSACng\n  isExternal: false\n  name: LegalKeySizes\n  nameWithType: DSACng.LegalKeySizes\n  fullName: DSACng.LegalKeySizes\n- uid: System.Security.Cryptography.KeySizes\n  name: KeySizes\n  nameWithType: KeySizes\n  fullName: System.Security.Cryptography.KeySizes\n- uid: System.Security.Cryptography.KeySizes[]\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: KeySizes[]\n  nameWithType: KeySizes[]\n  fullName: System.Security.Cryptography.KeySizes[]\n  spec.csharp:\n  - uid: System.Security.Cryptography.KeySizes\n    name: KeySizes\n    nameWithType: KeySizes\n    fullName: System.Security.Cryptography.KeySizes\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.Cryptography.DSACng.SignatureAlgorithm\n  parent: System.Security.Cryptography.DSACng\n  isExternal: false\n  name: SignatureAlgorithm\n  nameWithType: DSACng.SignatureAlgorithm\n  fullName: DSACng.SignatureAlgorithm\n- uid: System.Security.Cryptography.DSACng.VerifySignature(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.DSACng\n  isExternal: false\n  name: VerifySignature(Byte[], Byte[])\n  nameWithType: DSACng.VerifySignature(Byte[], Byte[])\n  fullName: DSACng.VerifySignature(Byte[], Byte[])\n- uid: System.Security.Cryptography.DSACng.#ctor*\n  parent: System.Security.Cryptography.DSACng\n  isExternal: false\n  name: DSACng\n  nameWithType: DSACng.DSACng\n  fullName: DSACng.DSACng\n  monikers:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACng.xml\n- uid: System.Security.Cryptography.DSACng.CreateSignature*\n  parent: System.Security.Cryptography.DSACng\n  isExternal: false\n  name: CreateSignature\n  nameWithType: DSACng.CreateSignature\n  fullName: DSACng.CreateSignature\n  monikers:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACng.xml\n- uid: System.Security.Cryptography.DSACng.Dispose*\n  parent: System.Security.Cryptography.DSACng\n  isExternal: false\n  name: Dispose\n  nameWithType: DSACng.Dispose\n  fullName: DSACng.Dispose\n  monikers:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACng.xml\n- uid: System.Security.Cryptography.DSACng.ExportParameters*\n  parent: System.Security.Cryptography.DSACng\n  isExternal: false\n  name: ExportParameters\n  nameWithType: DSACng.ExportParameters\n  fullName: DSACng.ExportParameters\n  monikers:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACng.xml\n- uid: System.Security.Cryptography.DSACng.HashData*\n  parent: System.Security.Cryptography.DSACng\n  isExternal: false\n  name: HashData\n  nameWithType: DSACng.HashData\n  fullName: DSACng.HashData\n  monikers:\n  - netframework-4.6.2\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACng.xml\n- uid: System.Security.Cryptography.DSACng.ImportParameters*\n  parent: System.Security.Cryptography.DSACng\n  isExternal: false\n  name: ImportParameters\n  nameWithType: DSACng.ImportParameters\n  fullName: DSACng.ImportParameters\n  monikers:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACng.xml\n- uid: System.Security.Cryptography.DSACng.Key*\n  parent: System.Security.Cryptography.DSACng\n  isExternal: false\n  name: Key\n  nameWithType: DSACng.Key\n  fullName: DSACng.Key\n  monikers:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACng.xml\n- uid: System.Security.Cryptography.DSACng.KeyExchangeAlgorithm*\n  parent: System.Security.Cryptography.DSACng\n  isExternal: false\n  name: KeyExchangeAlgorithm\n  nameWithType: DSACng.KeyExchangeAlgorithm\n  fullName: DSACng.KeyExchangeAlgorithm\n  monikers:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACng.xml\n- uid: System.Security.Cryptography.DSACng.LegalKeySizes*\n  parent: System.Security.Cryptography.DSACng\n  isExternal: false\n  name: LegalKeySizes\n  nameWithType: DSACng.LegalKeySizes\n  fullName: DSACng.LegalKeySizes\n  monikers:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACng.xml\n- uid: System.Security.Cryptography.DSACng.SignatureAlgorithm*\n  parent: System.Security.Cryptography.DSACng\n  isExternal: false\n  name: SignatureAlgorithm\n  nameWithType: DSACng.SignatureAlgorithm\n  fullName: DSACng.SignatureAlgorithm\n  monikers:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACng.xml\n- uid: System.Security.Cryptography.DSACng.VerifySignature*\n  parent: System.Security.Cryptography.DSACng\n  isExternal: false\n  name: VerifySignature\n  nameWithType: DSACng.VerifySignature\n  fullName: DSACng.VerifySignature\n  monikers:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACng.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.Clear\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: Clear()\n  nameWithType: AsymmetricAlgorithm.Clear()\n  fullName: AsymmetricAlgorithm.Clear()\n- uid: System.Security.Cryptography.DSA.Create\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: Create()\n  nameWithType: DSA.Create()\n  fullName: DSA.Create()\n- uid: System.Security.Cryptography.DSA.Create(System.String)\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: Create(String)\n  nameWithType: DSA.Create(String)\n  fullName: DSA.Create(String)\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: Dispose()\n  nameWithType: AsymmetricAlgorithm.Dispose()\n  fullName: AsymmetricAlgorithm.Dispose()\n- uid: System.Security.Cryptography.DSA.FromXmlString(System.String)\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: FromXmlString(String)\n  nameWithType: DSA.FromXmlString(String)\n  fullName: DSA.FromXmlString(String)\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySize\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: KeySize\n  nameWithType: AsymmetricAlgorithm.KeySize\n  fullName: AsymmetricAlgorithm.KeySize\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: KeySizeValue\n  nameWithType: AsymmetricAlgorithm.KeySizeValue\n  fullName: AsymmetricAlgorithm.KeySizeValue\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: LegalKeySizesValue\n  nameWithType: AsymmetricAlgorithm.LegalKeySizesValue\n  fullName: AsymmetricAlgorithm.LegalKeySizesValue\n- uid: System.Security.Cryptography.DSA.ToXmlString(System.Boolean)\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: ToXmlString(Boolean)\n  nameWithType: DSA.ToXmlString(Boolean)\n  fullName: DSA.ToXmlString(Boolean)\n- uid: System.Security.Cryptography.DSA.Create(System.Int32)\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: Create(Int32)\n  nameWithType: DSA.Create(Int32)\n  fullName: DSA.Create(Int32)\n- uid: System.Security.Cryptography.DSA.Create(System.Security.Cryptography.DSAParameters)\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: Create(DSAParameters)\n  nameWithType: DSA.Create(DSAParameters)\n  fullName: DSA.Create(DSAParameters)\n- uid: System.Security.Cryptography.DSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: SignData(Byte[], HashAlgorithmName)\n  nameWithType: DSA.SignData(Byte[], HashAlgorithmName)\n  fullName: DSA.SignData(Byte[], HashAlgorithmName)\n- uid: System.Security.Cryptography.DSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: SignData(Stream, HashAlgorithmName)\n  nameWithType: DSA.SignData(Stream, HashAlgorithmName)\n  fullName: DSA.SignData(Stream, HashAlgorithmName)\n- uid: System.Security.Cryptography.DSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: SignData(Byte[], Int32, Int32, HashAlgorithmName)\n  nameWithType: DSA.SignData(Byte[], Int32, Int32, HashAlgorithmName)\n  fullName: DSA.SignData(Byte[], Int32, Int32, HashAlgorithmName)\n- uid: System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName)\n  nameWithType: DSA.VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName)\n  fullName: DSA.VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName)\n- uid: System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: VerifyData(Byte[], Byte[], HashAlgorithmName)\n  nameWithType: DSA.VerifyData(Byte[], Byte[], HashAlgorithmName)\n  fullName: DSA.VerifyData(Byte[], Byte[], HashAlgorithmName)\n- uid: System.Security.Cryptography.DSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: VerifyData(Stream, Byte[], HashAlgorithmName)\n  nameWithType: DSA.VerifyData(Stream, Byte[], HashAlgorithmName)\n  fullName: DSA.VerifyData(Stream, Byte[], HashAlgorithmName)\n"}