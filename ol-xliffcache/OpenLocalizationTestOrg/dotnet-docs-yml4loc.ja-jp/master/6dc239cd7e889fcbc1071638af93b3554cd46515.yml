### YamlMime:ManagedReference
items:
- uid: System.Net.WebClient
  commentId: T:System.Net.WebClient
  id: WebClient
  children:
  - System.Net.WebClient.#ctor
  - System.Net.WebClient.AllowReadStreamBuffering
  - System.Net.WebClient.AllowWriteStreamBuffering
  - System.Net.WebClient.BaseAddress
  - System.Net.WebClient.CachePolicy
  - System.Net.WebClient.CancelAsync
  - System.Net.WebClient.Credentials
  - System.Net.WebClient.DownloadData(System.String)
  - System.Net.WebClient.DownloadData(System.Uri)
  - System.Net.WebClient.DownloadDataAsync(System.Uri)
  - System.Net.WebClient.DownloadDataAsync(System.Uri,System.Object)
  - System.Net.WebClient.DownloadDataCompleted
  - System.Net.WebClient.DownloadDataTaskAsync(System.String)
  - System.Net.WebClient.DownloadDataTaskAsync(System.Uri)
  - System.Net.WebClient.DownloadFile(System.Uri,System.String)
  - System.Net.WebClient.DownloadFile(System.String,System.String)
  - System.Net.WebClient.DownloadFileAsync(System.Uri,System.String)
  - System.Net.WebClient.DownloadFileAsync(System.Uri,System.String,System.Object)
  - System.Net.WebClient.DownloadFileCompleted
  - System.Net.WebClient.DownloadFileTaskAsync(System.String,System.String)
  - System.Net.WebClient.DownloadFileTaskAsync(System.Uri,System.String)
  - System.Net.WebClient.DownloadProgressChanged
  - System.Net.WebClient.DownloadString(System.String)
  - System.Net.WebClient.DownloadString(System.Uri)
  - System.Net.WebClient.DownloadStringAsync(System.Uri)
  - System.Net.WebClient.DownloadStringAsync(System.Uri,System.Object)
  - System.Net.WebClient.DownloadStringCompleted
  - System.Net.WebClient.DownloadStringTaskAsync(System.String)
  - System.Net.WebClient.DownloadStringTaskAsync(System.Uri)
  - System.Net.WebClient.Encoding
  - System.Net.WebClient.GetWebRequest(System.Uri)
  - System.Net.WebClient.GetWebResponse(System.Net.WebRequest)
  - System.Net.WebClient.GetWebResponse(System.Net.WebRequest,System.IAsyncResult)
  - System.Net.WebClient.Headers
  - System.Net.WebClient.IsBusy
  - System.Net.WebClient.OnDownloadDataCompleted(System.Net.DownloadDataCompletedEventArgs)
  - System.Net.WebClient.OnDownloadFileCompleted(System.ComponentModel.AsyncCompletedEventArgs)
  - System.Net.WebClient.OnDownloadProgressChanged(System.Net.DownloadProgressChangedEventArgs)
  - System.Net.WebClient.OnDownloadStringCompleted(System.Net.DownloadStringCompletedEventArgs)
  - System.Net.WebClient.OnOpenReadCompleted(System.Net.OpenReadCompletedEventArgs)
  - System.Net.WebClient.OnOpenWriteCompleted(System.Net.OpenWriteCompletedEventArgs)
  - System.Net.WebClient.OnUploadDataCompleted(System.Net.UploadDataCompletedEventArgs)
  - System.Net.WebClient.OnUploadFileCompleted(System.Net.UploadFileCompletedEventArgs)
  - System.Net.WebClient.OnUploadProgressChanged(System.Net.UploadProgressChangedEventArgs)
  - System.Net.WebClient.OnUploadStringCompleted(System.Net.UploadStringCompletedEventArgs)
  - System.Net.WebClient.OnUploadValuesCompleted(System.Net.UploadValuesCompletedEventArgs)
  - System.Net.WebClient.OnWriteStreamClosed(System.Net.WriteStreamClosedEventArgs)
  - System.Net.WebClient.OpenRead(System.String)
  - System.Net.WebClient.OpenRead(System.Uri)
  - System.Net.WebClient.OpenReadAsync(System.Uri)
  - System.Net.WebClient.OpenReadAsync(System.Uri,System.Object)
  - System.Net.WebClient.OpenReadCompleted
  - System.Net.WebClient.OpenReadTaskAsync(System.String)
  - System.Net.WebClient.OpenReadTaskAsync(System.Uri)
  - System.Net.WebClient.OpenWrite(System.String)
  - System.Net.WebClient.OpenWrite(System.Uri)
  - System.Net.WebClient.OpenWrite(System.String,System.String)
  - System.Net.WebClient.OpenWrite(System.Uri,System.String)
  - System.Net.WebClient.OpenWriteAsync(System.Uri,System.String,System.Object)
  - System.Net.WebClient.OpenWriteAsync(System.Uri,System.String)
  - System.Net.WebClient.OpenWriteAsync(System.Uri)
  - System.Net.WebClient.OpenWriteCompleted
  - System.Net.WebClient.OpenWriteTaskAsync(System.String)
  - System.Net.WebClient.OpenWriteTaskAsync(System.Uri)
  - System.Net.WebClient.OpenWriteTaskAsync(System.String,System.String)
  - System.Net.WebClient.OpenWriteTaskAsync(System.Uri,System.String)
  - System.Net.WebClient.Proxy
  - System.Net.WebClient.QueryString
  - System.Net.WebClient.ResponseHeaders
  - System.Net.WebClient.UploadData(System.String,System.Byte[])
  - System.Net.WebClient.UploadData(System.Uri,System.Byte[])
  - System.Net.WebClient.UploadData(System.String,System.String,System.Byte[])
  - System.Net.WebClient.UploadData(System.Uri,System.String,System.Byte[])
  - System.Net.WebClient.UploadDataAsync(System.Uri,System.String,System.Byte[])
  - System.Net.WebClient.UploadDataAsync(System.Uri,System.String,System.Byte[],System.Object)
  - System.Net.WebClient.UploadDataAsync(System.Uri,System.Byte[])
  - System.Net.WebClient.UploadDataCompleted
  - System.Net.WebClient.UploadDataTaskAsync(System.String,System.Byte[])
  - System.Net.WebClient.UploadDataTaskAsync(System.Uri,System.Byte[])
  - System.Net.WebClient.UploadDataTaskAsync(System.String,System.String,System.Byte[])
  - System.Net.WebClient.UploadDataTaskAsync(System.Uri,System.String,System.Byte[])
  - System.Net.WebClient.UploadFile(System.String,System.String)
  - System.Net.WebClient.UploadFile(System.Uri,System.String)
  - System.Net.WebClient.UploadFile(System.String,System.String,System.String)
  - System.Net.WebClient.UploadFile(System.Uri,System.String,System.String)
  - System.Net.WebClient.UploadFileAsync(System.Uri,System.String)
  - System.Net.WebClient.UploadFileAsync(System.Uri,System.String,System.String)
  - System.Net.WebClient.UploadFileAsync(System.Uri,System.String,System.String,System.Object)
  - System.Net.WebClient.UploadFileCompleted
  - System.Net.WebClient.UploadFileTaskAsync(System.Uri,System.String,System.String)
  - System.Net.WebClient.UploadFileTaskAsync(System.String,System.String,System.String)
  - System.Net.WebClient.UploadFileTaskAsync(System.String,System.String)
  - System.Net.WebClient.UploadFileTaskAsync(System.Uri,System.String)
  - System.Net.WebClient.UploadProgressChanged
  - System.Net.WebClient.UploadString(System.String,System.String)
  - System.Net.WebClient.UploadString(System.Uri,System.String)
  - System.Net.WebClient.UploadString(System.String,System.String,System.String)
  - System.Net.WebClient.UploadString(System.Uri,System.String,System.String)
  - System.Net.WebClient.UploadStringAsync(System.Uri,System.String)
  - System.Net.WebClient.UploadStringAsync(System.Uri,System.String,System.String)
  - System.Net.WebClient.UploadStringAsync(System.Uri,System.String,System.String,System.Object)
  - System.Net.WebClient.UploadStringCompleted
  - System.Net.WebClient.UploadStringTaskAsync(System.Uri,System.String,System.String)
  - System.Net.WebClient.UploadStringTaskAsync(System.String,System.String,System.String)
  - System.Net.WebClient.UploadStringTaskAsync(System.String,System.String)
  - System.Net.WebClient.UploadStringTaskAsync(System.Uri,System.String)
  - System.Net.WebClient.UploadValues(System.String,System.Collections.Specialized.NameValueCollection)
  - System.Net.WebClient.UploadValues(System.Uri,System.Collections.Specialized.NameValueCollection)
  - System.Net.WebClient.UploadValues(System.String,System.String,System.Collections.Specialized.NameValueCollection)
  - System.Net.WebClient.UploadValues(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)
  - System.Net.WebClient.UploadValuesAsync(System.Uri,System.Collections.Specialized.NameValueCollection)
  - System.Net.WebClient.UploadValuesAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)
  - System.Net.WebClient.UploadValuesAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection,System.Object)
  - System.Net.WebClient.UploadValuesCompleted
  - System.Net.WebClient.UploadValuesTaskAsync(System.String,System.String,System.Collections.Specialized.NameValueCollection)
  - System.Net.WebClient.UploadValuesTaskAsync(System.String,System.Collections.Specialized.NameValueCollection)
  - System.Net.WebClient.UploadValuesTaskAsync(System.Uri,System.Collections.Specialized.NameValueCollection)
  - System.Net.WebClient.UploadValuesTaskAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)
  - System.Net.WebClient.UseDefaultCredentials
  - System.Net.WebClient.WriteStreamClosed
  langs:
  - csharp
  name: WebClient
  nameWithType: WebClient
  fullName: System.Net.WebClient
  type: Class
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Provides common methods for sending data to and receiving data from a resource identified by a URI.
  remarks: "The <xref:System.Net.WebClient> class provides common methods for sending data to or receiving data from any local, intranet, or Internet resource identified by a URI.  \n  \n The <xref:System.Net.WebClient> class uses the <xref:System.Net.WebRequest> class to provide access to resources. <xref:System.Net.WebClient> instances can access data with any <xref:System.Net.WebRequest> descendant registered with the <xref:System.Net.WebRequest.RegisterPrefix%2A?displayProperty=fullName> method.  \n  \n> [!NOTE]\n>  By default, the .NET Framework supports URIs that begin with `http:`, `https:`, ftp:, and `file:` scheme identifiers.  \n  \n The following table describes <xref:System.Net.WebClient> methods for uploading data to a resource.  \n  \n|Method|Description|  \n|------------|-----------------|  \n|<xref:System.Net.WebClient.OpenWrite%2A>|Retrieves a <xref:System.IO.Stream> used to send data to the resource.|  \n|<xref:System.Net.WebClient.OpenWriteAsync%2A>|Retrieves a <xref:System.IO.Stream> used to send data to the resource, without blocking the calling thread.|  \n|<xref:System.Net.WebClient.UploadData%2A>|Sends a byte array to the resource and returns a <xref:System.Byte> array containing any response.|  \n|<xref:System.Net.WebClient.UploadDataAsync%2A>|Sends a <xref:System.Byte> array to the resource, without blocking the calling thread.|  \n|<xref:System.Net.WebClient.UploadFile%2A>|Sends a local file to the resource and returns a <xref:System.Byte> array containing any response.|  \n|<xref:System.Net.WebClient.UploadFileAsync%2A>|Sends a local file to the resource, without blocking the calling thread.|  \n|<xref:System.Net.WebClient.UploadValues%2A>|Sends a <xref:System.Collections.Specialized.NameValueCollection> to the resource and returns a <xref:System.Byte> array containing any response.|  \n|<xref:System.Net.WebClient.UploadValuesAsync%2A>|Sends a <xref:System.Collections.Specialized.NameValueCollection> to the resource and returns a <xref:System.Byte> array containing any response, without blocking the calling thread.|  \n|<xref:System.Net.WebClient.UploadString%2A>|Sends a <xref:System.String> to the resource, without blocking the calling thread.|  \n|<xref:System.Net.WebClient.UploadStringAsync%2A>|Sends a <xref:System.String> to the resource, without blocking the calling thread.|  \n  \n The following table describes <xref:System.Net.WebClient> methods for downloading data from a resource.  \n  \n|Method|Description|  \n|------------|-----------------|  \n|<xref:System.Net.WebClient.OpenRead%2A>|Returns the data from a resource as a <xref:System.IO.Stream>.|  \n|<xref:System.Net.WebClient.OpenReadAsync%2A>|Returns the data from a resource, without blocking the calling thread.|  \n|<xref:System.Net.WebClient.DownloadData%2A>|Downloads data from a resource and returns a <xref:System.Byte> array.|  \n|<xref:System.Net.WebClient.DownloadDataAsync%2A>|Downloads data from a resource and returns a <xref:System.Byte> array, without blocking the calling thread.|  \n|<xref:System.Net.WebClient.DownloadFile%2A>|Downloads data from a resource to a local file.|  \n|<xref:System.Net.WebClient.DownloadFileAsync%2A>|Downloads data from a resource to a local file, without blocking the calling thread.|  \n|<xref:System.Net.WebClient.DownloadString%2A>|Downloads a <xref:System.String> from a resource and returns a <xref:System.String>.|  \n|<xref:System.Net.WebClient.DownloadStringAsync%2A>|Downloads a <xref:System.String> from a resource, without blocking the calling thread.|  \n  \n You can use the <xref:System.Net.WebClient.CancelAsync%2A> method to cancel asynchronous operations that have not completed.  \n  \n A <xref:System.Net.WebClient> instance does not send optional HTTP headers by default. If your request requires an optional header, you must add the header to the <xref:System.Net.WebClient.Headers%2A> collection. For example, to retain queries in the response, you must add a user-agent header. Also, servers may return 500 (Internal Server Error) if the user agent header is missing.  \n  \n <xref:System.Net.HttpWebRequest.AllowAutoRedirect%2A> is set to `true` in <xref:System.Net.WebClient> instances."
  example:
  - "The following code example takes the URI of a resource, retrieves it, and displays the response.  \n  \n [!code-cpp[NCLWebClientUserAgent#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientUserAgent/CPP/useragent.cpp#1)]\n [!code-csharp[NCLWebClientUserAgent#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientUserAgent/CS/useragent.cs#1)]\n [!code-vb[NCLWebClientUserAgent#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientUserAgent/VB/useragent.vb#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class WebClient : System.ComponentModel.Component
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Dispose(System.Boolean)
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.#ctor
  commentId: M:System.Net.WebClient.#ctor
  id: '#ctor'
  parent: System.Net.WebClient
  langs:
  - csharp
  name: WebClient()
  nameWithType: WebClient.WebClient()
  fullName: WebClient.WebClient()
  type: Constructor
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Initializes a new instance of the <xref href="System.Net.WebClient"></xref> class.
  remarks: The default constructor creates a new instance of the <xref:System.Net.WebClient> class. The default HTTP method is GET. The default FTP method is RETR. The default <xref:System.Net.WebClient.Encoding%2A> is <xref:System.Text.Encoding.Default%2A>. The default value of <xref:System.Net.HttpWebRequest.AllowAutoRedirect%2A> is `true`.
  example:
  - "The following code example creates a <xref:System.Net.WebClient> instance and then uses it to download data from a server and display it on the system console, to download data from a server and write it to a file, and to upload form values to a server and receive the response.  \n  \n [!code-cpp[WebClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient/CPP/webclient.cpp#1)]\n [!code-csharp[WebClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient/CS/webclient.cs#1)]\n [!code-vb[WebClient#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient/VB/webclient.vb#1)]"
  syntax:
    content: public WebClient ();
    parameters: []
  overload: System.Net.WebClient.#ctor*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.AllowReadStreamBuffering
  commentId: P:System.Net.WebClient.AllowReadStreamBuffering
  id: AllowReadStreamBuffering
  parent: System.Net.WebClient
  langs:
  - csharp
  name: AllowReadStreamBuffering
  nameWithType: WebClient.AllowReadStreamBuffering
  fullName: WebClient.AllowReadStreamBuffering
  type: Property
  assemblies:
  - System
  - System.Net.WebClient
  namespace: System.Net
  summary: Gets or sets a value that indicates whether to buffer the data read from the Internet resource for a <xref href="System.Net.WebClient"></xref> instance.
  remarks: When the <xref:System.Net.WebClient.AllowReadStreamBuffering%2A> property is `true`, the data is buffered in memory so it is ready to be read by the app.
  syntax:
    content: >-
      [System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)]

      public bool AllowReadStreamBuffering { get; set; }
    return:
      type: System.Boolean
      description: "Returns <xref href=\"System.Boolean\"></xref>.  \n  \n `true` to enable buffering of the data received from the Internet resource; `false` to disable buffering. The default is `true`."
  overload: System.Net.WebClient.AllowReadStreamBuffering*
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.AllowWriteStreamBuffering
  commentId: P:System.Net.WebClient.AllowWriteStreamBuffering
  id: AllowWriteStreamBuffering
  parent: System.Net.WebClient
  langs:
  - csharp
  name: AllowWriteStreamBuffering
  nameWithType: WebClient.AllowWriteStreamBuffering
  fullName: WebClient.AllowWriteStreamBuffering
  type: Property
  assemblies:
  - System
  - System.Net.WebClient
  namespace: System.Net
  summary: Gets or sets a value that indicates whether to buffer the data written to the Internet resource for a <xref href="System.Net.WebClient"></xref> instance.
  remarks: When the <xref:System.Net.WebClient.AllowWriteStreamBuffering%2A> property is `true`, the data is buffered in memory so it can be written more efficiently to the Internet resource in larger chunks.
  syntax:
    content: >-
      [System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)]

      public bool AllowWriteStreamBuffering { get; set; }
    return:
      type: System.Boolean
      description: "Returns <xref href=\"System.Boolean\"></xref>.  \n  \n `true` to enable buffering of the data written to the Internet resource; `false` to disable buffering. The default is `true`."
  overload: System.Net.WebClient.AllowWriteStreamBuffering*
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.BaseAddress
  commentId: P:System.Net.WebClient.BaseAddress
  id: BaseAddress
  parent: System.Net.WebClient
  langs:
  - csharp
  name: BaseAddress
  nameWithType: WebClient.BaseAddress
  fullName: WebClient.BaseAddress
  type: Property
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Gets or sets the base URI for requests made by a <xref href="System.Net.WebClient"></xref>.
  remarks: "The <xref:System.Net.WebClient.BaseAddress%2A> property contains a base URI that is combined with a relative address. When you call a method that uploads or downloads data, the <xref:System.Net.WebClient> object combines this base URI with the relative address you specify in the method call. If you specify an absolute URI, <xref:System.Net.WebClient> does not use the <xref:System.Net.WebClient.BaseAddress%2A> property value.  \n  \n To remove a previously set value, set this property to `null` or an empty string (\"\")."
  example:
  - "The following code example downloads data from an Internet server and displays it on the console. It assumes that the server's address (such as http://www.contoso.com) is in `hostUri` and that the path to the resource (such as /default.htm) is in `uriSuffix`.  \n  \n [!code-cpp[WebClient_BaseAddress_ResponseHeaders#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_BaseAddress_ResponseHeaders/CPP/webclient_baseaddress_responseheaders.cpp#1)]\n [!code-csharp[WebClient_BaseAddress_ResponseHeaders#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_BaseAddress_ResponseHeaders/CS/webclient_baseaddress_responseheaders.cs#1)]\n [!code-vb[WebClient_BaseAddress_ResponseHeaders#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_BaseAddress_ResponseHeaders/VB/webclient_baseaddress_responseheaders.vb#1)]"
  syntax:
    content: public string BaseAddress { get; set; }
    return:
      type: System.String
      description: A <xref href="System.String"></xref> containing the base URI for requests made by a <xref href="System.Net.WebClient"></xref> or <xref href="System.String.Empty"></xref> if no base address has been specified.
  overload: System.Net.WebClient.BaseAddress*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <xref href="System.Net.WebClient.BaseAddress"></xref> is set to an invalid URI. The inner exception may contain information that will help you locate the error.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.CachePolicy
  commentId: P:System.Net.WebClient.CachePolicy
  id: CachePolicy
  parent: System.Net.WebClient
  langs:
  - csharp
  name: CachePolicy
  nameWithType: WebClient.CachePolicy
  fullName: WebClient.CachePolicy
  type: Property
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Gets or sets the application's cache policy for any resources obtained by this WebClient instance using <xref href="System.Net.WebRequest"></xref> objects.
  syntax:
    content: public System.Net.Cache.RequestCachePolicy CachePolicy { get; set; }
    return:
      type: System.Net.Cache.RequestCachePolicy
      description: A <xref href="System.Net.Cache.RequestCachePolicy"></xref> object that represents the application's caching requirements.
  overload: System.Net.WebClient.CachePolicy*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.CancelAsync
  commentId: M:System.Net.WebClient.CancelAsync
  id: CancelAsync
  parent: System.Net.WebClient
  langs:
  - csharp
  name: CancelAsync()
  nameWithType: WebClient.CancelAsync()
  fullName: WebClient.CancelAsync()
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Cancels a pending asynchronous operation.
  remarks: "If an operation is pending, this method calls <xref:System.Net.WebRequest.Abort%2A> on the underlying <xref:System.Net.WebRequest>.  \n  \n When you call <xref:System.Net.WebClient.CancelAsync%2A>, your application still receives the completion event associated with the operation. For example, when you call <xref:System.Net.WebClient.CancelAsync%2A> to cancel a <xref:System.Net.WebClient.DownloadStringAsync%2A> operation, if you have specified an event handler for the <xref:System.Net.WebClient.DownloadStringCompleted> event, your event handler receives notification that the operation has ended. To learn whether the operation completed successfully, check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property on the base class of <xref:System.Net.DownloadDataCompletedEventArgs> in the event data object passed to the event handler.  \n  \n If no asynchronous operation is in progress, this method does nothing."
  syntax:
    content: public void CancelAsync ();
    parameters: []
  overload: System.Net.WebClient.CancelAsync*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.Credentials
  commentId: P:System.Net.WebClient.Credentials
  id: Credentials
  parent: System.Net.WebClient
  langs:
  - csharp
  name: Credentials
  nameWithType: WebClient.Credentials
  fullName: WebClient.Credentials
  type: Property
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Gets or sets the network credentials that are sent to the host and used to authenticate the request.
  remarks: "The <xref:System.Net.WebClient.Credentials%2A> property contains the authentication credentials used to access a resource on a host. In most client-side scenarios, you should use the <xref:System.Net.CredentialCache.DefaultCredentials%2A>, which are the credentials of the currently logged on user. To do this, set the <xref:System.Net.WebClient.UseDefaultCredentials%2A> property to `true` instead of setting this property.  \n  \n If the <xref:System.Net.WebClient> class is being used in a middle tier application, such as an ASP.NET application, the <xref:System.Net.CredentialCache.DefaultCredentials%2A> belong to the account running the ASP page (the server-side credentials). Typically, you would set this property to the credentials of the client on whose behalf the request is made."
  example:
  - "The following code example uses the user's system credentials to authenticate a request.  \n  \n [!code-cpp[WebClientAuthentication#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClientAuthentication/CPP/webclientauth.cpp#1)]\n [!code-csharp[WebClientAuthentication#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClientAuthentication/CS/webclientauth.cs#1)]\n [!code-vb[WebClientAuthentication#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClientAuthentication/VB/webclientauth.vb#1)]"
  syntax:
    content: public System.Net.ICredentials Credentials { get; set; }
    return:
      type: System.Net.ICredentials
      description: An <xref href="System.Net.ICredentials"></xref> containing the authentication credentials for the request. The default is `null`.
  overload: System.Net.WebClient.Credentials*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.DownloadData(System.String)
  commentId: M:System.Net.WebClient.DownloadData(System.String)
  id: DownloadData(System.String)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: DownloadData(String)
  nameWithType: WebClient.DownloadData(String)
  fullName: WebClient.DownloadData(String)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Downloads the resource as a <xref href="System.Byte"></xref> array from the URI specified.
  remarks: "The <xref:System.Net.WebClient.DownloadData%2A> method downloads the resource with the URI specified by the `address` parameter. This method blocks while downloading the resource. To download a resource and continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.DownloadDataAsync%2A> methods.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  example:
  - "The following code example requests data from a server and displays the data returned. It assumes that `remoteUri` contains a valid URI for the requested data.  \n  \n [!code-cpp[WebClient_DownloadData#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_DownloadData/CPP/webclient_downloaddata.cpp#1)]\n [!code-csharp[WebClient_DownloadData#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_DownloadData/CS/webclient_downloaddata.cs#1)]\n [!code-vb[WebClient_DownloadData#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_DownloadData/VB/webclient_downloaddata.vb#1)]"
  syntax:
    content: public byte[] DownloadData (string address);
    parameters:
    - id: address
      type: System.String
      description: The URI from which to download data.
    return:
      type: System.Byte[]
      description: A <xref href="System.Byte"></xref> array containing the downloaded resource.
  overload: System.Net.WebClient.DownloadData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>address</code> parameter is `null`.
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while downloading data."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The method has been called simultaneously on multiple threads.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.DownloadData(System.Uri)
  commentId: M:System.Net.WebClient.DownloadData(System.Uri)
  id: DownloadData(System.Uri)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: DownloadData(Uri)
  nameWithType: WebClient.DownloadData(Uri)
  fullName: WebClient.DownloadData(Uri)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Downloads the resource as a <xref href="System.Byte"></xref> array from the URI specified.
  remarks: "The <xref:System.Net.WebClient.DownloadData%2A> method downloads the resource with the URI specified by the `address` parameter. This method blocks while downloading the resource. To download a resource and continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.DownloadDataAsync%2A> methods.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \n  \n **Note** This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: public byte[] DownloadData (Uri address);
    parameters:
    - id: address
      type: System.Uri
      description: The URI represented by the <xref href="System.Uri"></xref> object, from which to download data.
    return:
      type: System.Byte[]
      description: A <xref href="System.Byte"></xref> array containing the downloaded resource.
  overload: System.Net.WebClient.DownloadData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>address</code> parameter is `null`.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.DownloadDataAsync(System.Uri)
  commentId: M:System.Net.WebClient.DownloadDataAsync(System.Uri)
  id: DownloadDataAsync(System.Uri)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: DownloadDataAsync(Uri)
  nameWithType: WebClient.DownloadDataAsync(Uri)
  fullName: WebClient.DownloadDataAsync(Uri)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Downloads the resource as a <xref href="System.Byte"></xref> array from the URI specified as an asynchronous operation.
  remarks: "This method retrieves the specified resource using the default method for the protocol associated with the URI scheme specified in `address`. The data is downloaded asynchronously using thread resources that are automatically allocated from the thread pool.  \n  \n This method does not block the calling thread while downloading the resource. To download a resource and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.DownloadData%2A> methods. When the download completes, the <xref:System.Net.WebClient.DownloadDataCompleted> event is raised. Your application must handle this event to receive notification. The downloaded data is available in the <xref:System.Net.DownloadDataCompletedEventArgs.Result%2A> property.  \n  \n You can use the <xref:System.Net.WebClient.CancelAsync%2A> method to cancel asynchronous operations that have not completed.  \n  \n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: public void DownloadDataAsync (Uri address);
    parameters:
    - id: address
      type: System.Uri
      description: A <xref href="System.Uri"></xref> containing the URI to download.
  overload: System.Net.WebClient.DownloadDataAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>address</code> parameter is `null`.
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while downloading the resource."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.DownloadDataAsync(System.Uri,System.Object)
  commentId: M:System.Net.WebClient.DownloadDataAsync(System.Uri,System.Object)
  id: DownloadDataAsync(System.Uri,System.Object)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: DownloadDataAsync(Uri, Object)
  nameWithType: WebClient.DownloadDataAsync(Uri, Object)
  fullName: WebClient.DownloadDataAsync(Uri, Object)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Downloads the resource as a <xref href="System.Byte"></xref> array from the URI specified as an asynchronous operation.
  remarks: "This method retrieves the specified resource using the default method for the protocol associated with the URI scheme specified in `address`. The data is downloaded asynchronously using thread resources that are automatically allocated from the thread pool.  \n  \n This method does not block the calling thread while downloading the resource. To download a resource and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.DownloadData%2A> methods. When the download completes, the <xref:System.Net.WebClient.DownloadDataCompleted> event is raised. Your application must handle this event to receive notification. The downloaded data is available in the <xref:System.Net.DownloadDataCompletedEventArgs.Result%2A> property.  \n  \n You can use the <xref:System.Net.WebClient.CancelAsync%2A> method to cancel asynchronous operations that have not completed.  \n  \n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: public void DownloadDataAsync (Uri address, object userToken);
    parameters:
    - id: address
      type: System.Uri
      description: A <xref href="System.Uri"></xref> containing the URI to download.
    - id: userToken
      type: System.Object
      description: A user-defined object that is passed to the method invoked when the asynchronous operation completes.
  overload: System.Net.WebClient.DownloadDataAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>address</code> parameter is `null`.
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while downloading the resource."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.DownloadDataCompleted
  commentId: E:System.Net.WebClient.DownloadDataCompleted
  id: DownloadDataCompleted
  parent: System.Net.WebClient
  langs:
  - csharp
  name: DownloadDataCompleted
  nameWithType: WebClient.DownloadDataCompleted
  fullName: WebClient.DownloadDataCompleted
  type: Event
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Occurs when an asynchronous data download operation completes.
  remarks: "This event is raised each time an asynchronous data download operation completes. Asynchronous data downloads are started by calling the <xref:System.Net.WebClient.DownloadDataAsync%2A> methods.  \n  \n The <xref:System.Net.DownloadDataCompletedEventHandler> is the delegate for this event. The <xref:System.Net.DownloadDataCompletedEventArgs> class provides the event handler with event data.  \n  \n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  example:
  - "The following code example demonstrates setting an event handler for this event.  \n  \n [!code-cpp[NCLWebClientAsync#21](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#21)]\n [!code-csharp[NCLWebClientAsync#21](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#21)]\n [!code-vb[NCLWebClientAsync#21](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#21)]"
  syntax:
    content: public event System.Net.DownloadDataCompletedEventHandler DownloadDataCompleted;
    return:
      type: System.Net.DownloadDataCompletedEventHandler
      description: ''
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.DownloadDataTaskAsync(System.String)
  commentId: M:System.Net.WebClient.DownloadDataTaskAsync(System.String)
  id: DownloadDataTaskAsync(System.String)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: DownloadDataTaskAsync(String)
  nameWithType: WebClient.DownloadDataTaskAsync(String)
  fullName: WebClient.DownloadDataTaskAsync(String)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Downloads the resource as a <xref href="System.Byte"></xref> array from the URI specified as an asynchronous operation using a task object.
  remarks: "This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the data resource has been downloaded.  \n  \n This method retrieves the specified resource using the default method for the protocol associated with the URI scheme specified in the `address` parameter. The data is downloaded asynchronously using thread resources that are automatically allocated from the thread pool.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).  \n  \n The following code example requests data from a server and displays the data returned. It assumes that `remoteUri` contains a valid URI for the requested data."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public System.Threading.Tasks.Task<byte[]> DownloadDataTaskAsync (string address);
    parameters:
    - id: address
      type: System.String
      description: The URI of the resource to download.
    return:
      type: System.Threading.Tasks.Task{System.Byte[]}
      description: "Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the downloaded resource."
  overload: System.Net.WebClient.DownloadDataTaskAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>address</code> parameter is `null`.
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while downloading the resource."
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.DownloadDataTaskAsync(System.Uri)
  commentId: M:System.Net.WebClient.DownloadDataTaskAsync(System.Uri)
  id: DownloadDataTaskAsync(System.Uri)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: DownloadDataTaskAsync(Uri)
  nameWithType: WebClient.DownloadDataTaskAsync(Uri)
  fullName: WebClient.DownloadDataTaskAsync(Uri)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Downloads the resource as a <xref href="System.Byte"></xref> array from the URI specified as an asynchronous operation using a task object.
  remarks: "This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the data resource has been downloaded.  \n  \n This method retrieves the specified resource using the default method for the protocol associated with the URI scheme specified in the `address` parameter. The data is downloaded asynchronously using thread resources that are automatically allocated from the thread pool.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \n  \n **Note** This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public System.Threading.Tasks.Task<byte[]> DownloadDataTaskAsync (Uri address);
    parameters:
    - id: address
      type: System.Uri
      description: The URI of the resource to download.
    return:
      type: System.Threading.Tasks.Task{System.Byte[]}
      description: "Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the downloaded resource."
  overload: System.Net.WebClient.DownloadDataTaskAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>address</code> parameter is `null`.
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while downloading the resource."
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.DownloadFile(System.Uri,System.String)
  commentId: M:System.Net.WebClient.DownloadFile(System.Uri,System.String)
  id: DownloadFile(System.Uri,System.String)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: DownloadFile(Uri, String)
  nameWithType: WebClient.DownloadFile(Uri, String)
  fullName: WebClient.DownloadFile(Uri, String)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Downloads the resource with the specified URI to a local file.
  remarks: "The <xref:System.Net.WebClient.DownloadFile%2A> method downloads to a local file data from the URI specified by in the `address` parameter. This method blocks while downloading the resource. To download a resource and continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.DownloadFileAsync%2A> methods.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).  \n  \n When using this method in a middle tier application, such as an ASP.NET page, you will receive an error if the account under which the application executes does not have permission to access the file."
  syntax:
    content: public void DownloadFile (Uri address, string fileName);
    parameters:
    - id: address
      type: System.Uri
      description: The URI specified as a <xref href="System.String"></xref>, from which to download data.
    - id: fileName
      type: System.String
      description: The name of the local file that is to receive the data.
  overload: System.Net.WebClient.DownloadFile*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>fileName</code> parameter is `null`."
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n <code>filename</code> is `null` or <xref href=\"System.String.Empty\"></xref>.  \n  \n -or-  \n  \n The file does not exist.  \n  \n -or-  \n  \n An error occurred while downloading data."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The method has been called simultaneously on multiple threads.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.DownloadFile(System.String,System.String)
  commentId: M:System.Net.WebClient.DownloadFile(System.String,System.String)
  id: DownloadFile(System.String,System.String)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: DownloadFile(String, String)
  nameWithType: WebClient.DownloadFile(String, String)
  fullName: WebClient.DownloadFile(String, String)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Downloads the resource with the specified URI to a local file.
  remarks: "The <xref:System.Net.WebClient.DownloadFile%2A> method downloads to a local file data from the URI specified by in the `address` parameter. This method blocks while downloading the resource. To download a resource and continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.DownloadFileAsync%2A> methods.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).  \n  \n When using this method in a middle tier application, such as an ASP.NET page, you will receive an error if the account under which the application executes does not have permission to access the file."
  example:
  - "The following code example downloads a file from http://www.contoso.com to the local hard drive.  \n  \n [!code-cpp[WebClient_DownloadFile#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_DownloadFile/CPP/webclient_downloadfile.cpp#1)]\n [!code-csharp[WebClient_DownloadFile#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_DownloadFile/CS/webclient_downloadfile.cs#1)]\n [!code-vb[WebClient_DownloadFile#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_DownloadFile/VB/webclient_downloadfile.vb#1)]"
  syntax:
    content: public void DownloadFile (string address, string fileName);
    parameters:
    - id: address
      type: System.String
      description: The URI from which to download data.
    - id: fileName
      type: System.String
      description: The name of the local file that is to receive the data.
  overload: System.Net.WebClient.DownloadFile*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>address</code> parameter is `null`.
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n <code>filename</code> is `null` or <xref href=\"System.String.Empty\"></xref>.  \n  \n -or-  \n  \n The file does not exist.  \n  \n -or- An error occurred while downloading data."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The method has been called simultaneously on multiple threads.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.DownloadFileAsync(System.Uri,System.String)
  commentId: M:System.Net.WebClient.DownloadFileAsync(System.Uri,System.String)
  id: DownloadFileAsync(System.Uri,System.String)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: DownloadFileAsync(Uri, String)
  nameWithType: WebClient.DownloadFileAsync(Uri, String)
  fullName: WebClient.DownloadFileAsync(Uri, String)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Downloads, to a local file, the resource with the specified URI. This method does not block the calling thread.
  remarks: "This method downloads the resource at the URI specified by in the `address` parameter. When the download completes successfully, the downloaded file is named `fileName` on the local computer. The file is downloaded asynchronously using thread resources that are automatically allocated from the thread pool. To receive notification when the file is available, add an event handler to the <xref:System.Net.WebClient.DownloadFileCompleted> event.  \n  \n This method does not block the calling thread while the resource is being downloaded. To block while waiting for the download to complete, use one of the <xref:System.Net.WebClient.DownloadFile%2A> methods.  \n  \n You can use the <xref:System.Net.WebClient.CancelAsync%2A> method to cancel asynchronous operations that have not completed.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not specify an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).  \n  \n When using this method in an ASP.NET page, you will receive an error if the account that the page executes under does not have permission to access the local file."
  syntax:
    content: public void DownloadFileAsync (Uri address, string fileName);
    parameters:
    - id: address
      type: System.Uri
      description: The URI of the resource to download.
    - id: fileName
      type: System.String
      description: The name of the file to be placed on the local computer.
  overload: System.Net.WebClient.DownloadFileAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>fileName</code> parameter is `null`."
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while downloading the resource."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The local file specified by <code>fileName</code> is in use by another thread.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.DownloadFileAsync(System.Uri,System.String,System.Object)
  commentId: M:System.Net.WebClient.DownloadFileAsync(System.Uri,System.String,System.Object)
  id: DownloadFileAsync(System.Uri,System.String,System.Object)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: DownloadFileAsync(Uri, String, Object)
  nameWithType: WebClient.DownloadFileAsync(Uri, String, Object)
  fullName: WebClient.DownloadFileAsync(Uri, String, Object)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Downloads, to a local file, the resource with the specified URI. This method does not block the calling thread.
  remarks: "This method downloads the resource at the URI specified by in the `address` parameter. When the download completes successfully, the downloaded file is named `fileName` on the local computer. The file is downloaded asynchronously using thread resources that are automatically allocated from the thread pool. To receive notification when the file is available, add an event handler to the <xref:System.Net.WebClient.DownloadFileCompleted> event.  \n  \n This method does not block the calling thread while the resource is being downloaded. To block while waiting for the download to complete, use one of the <xref:System.Net.WebClient.DownloadFile%2A> methods.  \n  \n You can use the <xref:System.Net.WebClient.CancelAsync%2A> method to cancel asynchronous operations that have not completed.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not specify an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).  \n  \n When using this method in an ASP.NET page, you will receive an error if the account that the page executes under does not have permission to access the local file."
  syntax:
    content: public void DownloadFileAsync (Uri address, string fileName, object userToken);
    parameters:
    - id: address
      type: System.Uri
      description: The URI of the resource to download.
    - id: fileName
      type: System.String
      description: The name of the file to be placed on the local computer.
    - id: userToken
      type: System.Object
      description: A user-defined object that is passed to the method invoked when the asynchronous operation completes.
  overload: System.Net.WebClient.DownloadFileAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>fileName</code> parameter is `null`."
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while downloading the resource."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The local file specified by <code>fileName</code> is in use by another thread.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.DownloadFileCompleted
  commentId: E:System.Net.WebClient.DownloadFileCompleted
  id: DownloadFileCompleted
  parent: System.Net.WebClient
  langs:
  - csharp
  name: DownloadFileCompleted
  nameWithType: WebClient.DownloadFileCompleted
  fullName: WebClient.DownloadFileCompleted
  type: Event
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Occurs when an asynchronous file download operation completes.
  remarks: "This event is raised each time an asynchronous file download operation completes. Asynchronous file downloads are started by calling the <xref:System.Net.WebClient.DownloadFileAsync%2A> methods.  \n  \n The <xref:System.ComponentModel.AsyncCompletedEventHandler> is the delegate for this event. The <xref:System.ComponentModel.AsyncCompletedEventArgs> class provides the event handler with event data.  \n  \n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  example:
  - "The following code example demonstrates setting an event handler for this event.  \n  \n [!code-cpp[NCLWebClientAsync#19](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#19)]\n [!code-csharp[NCLWebClientAsync#19](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#19)]\n [!code-vb[NCLWebClientAsync#19](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#19)]"
  syntax:
    content: public event System.ComponentModel.AsyncCompletedEventHandler DownloadFileCompleted;
    return:
      type: System.ComponentModel.AsyncCompletedEventHandler
      description: ''
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.DownloadFileTaskAsync(System.String,System.String)
  commentId: M:System.Net.WebClient.DownloadFileTaskAsync(System.String,System.String)
  id: DownloadFileTaskAsync(System.String,System.String)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: DownloadFileTaskAsync(String, String)
  nameWithType: WebClient.DownloadFileTaskAsync(String, String)
  fullName: WebClient.DownloadFileTaskAsync(String, String)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Downloads the specified resource to a local file as an asynchronous operation using a task object.
  remarks: "This operation will not block. The returned <xref:System.Threading.Tasks.Task> object will complete after the data resource has been downloaded.  \n  \n This method downloads the resource at the URI specified by in the `address` parameter. When the download completes successfully, the downloaded file is named `fileName` on the local computer. The file is downloaded asynchronously using thread resources that are automatically allocated from the thread pool.  \n  \n You can use the <xref:System.Net.WebClient.CancelAsync%2A> method to cancel asynchronous operations that have not completed.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not specify an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).  \n  \n When using this method in an ASP.NET page, you will receive an error if the account that the page executes under does not have permission to access the local file."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public System.Threading.Tasks.Task DownloadFileTaskAsync (string address, string fileName);
    parameters:
    - id: address
      type: System.String
      description: The URI of the resource to download.
    - id: fileName
      type: System.String
      description: The name of the file to be placed on the local computer.
    return:
      type: System.Threading.Tasks.Task
      description: "Returns <xref href=\"System.Threading.Tasks.Task\"></xref>.  \n  \n The task object representing the asynchronous operation."
  overload: System.Net.WebClient.DownloadFileTaskAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>fileName</code> parameter is `null`."
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while downloading the resource."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The local file specified by <code>fileName</code> is in use by another thread.
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.DownloadFileTaskAsync(System.Uri,System.String)
  commentId: M:System.Net.WebClient.DownloadFileTaskAsync(System.Uri,System.String)
  id: DownloadFileTaskAsync(System.Uri,System.String)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: DownloadFileTaskAsync(Uri, String)
  nameWithType: WebClient.DownloadFileTaskAsync(Uri, String)
  fullName: WebClient.DownloadFileTaskAsync(Uri, String)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Downloads the specified resource to a local file as an asynchronous operation using a task object.
  remarks: "This operation will not block. The returned <xref:System.Threading.Tasks.Task> object will complete after the data resource has been downloaded.  \n  \n This method downloads the resource at the URI specified by in the `address` parameter. When the download completes successfully, the downloaded file is named `fileName` on the local computer. The file is downloaded asynchronously using thread resources that are automatically allocated from the thread pool.  \n  \n You can use the <xref:System.Net.WebClient.CancelAsync%2A> method to cancel asynchronous operations that have not completed.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not specify an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).  \n  \n When using this method in an ASP.NET page, you will receive an error if the account that the page executes under does not have permission to access the local file."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public System.Threading.Tasks.Task DownloadFileTaskAsync (Uri address, string fileName);
    parameters:
    - id: address
      type: System.Uri
      description: The URI of the resource to download.
    - id: fileName
      type: System.String
      description: The name of the file to be placed on the local computer.
    return:
      type: System.Threading.Tasks.Task
      description: "Returns <xref href=\"System.Threading.Tasks.Task\"></xref>.  \n  \n The task object representing the asynchronous operation."
  overload: System.Net.WebClient.DownloadFileTaskAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>fileName</code> parameter is `null`."
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while downloading the resource."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The local file specified by <code>fileName</code> is in use by another thread.
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.DownloadProgressChanged
  commentId: E:System.Net.WebClient.DownloadProgressChanged
  id: DownloadProgressChanged
  parent: System.Net.WebClient
  langs:
  - csharp
  name: DownloadProgressChanged
  nameWithType: WebClient.DownloadProgressChanged
  fullName: WebClient.DownloadProgressChanged
  type: Event
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Occurs when an asynchronous download operation successfully transfers some or all of the data.
  remarks: "This event is raised each time an asynchronous download makes progress. This event is raised when downloads are started using any of the following methods.  \n  \n|Method|Description|  \n|------------|-----------------|  \n|<xref:System.Net.WebClient.DownloadDataAsync%2A>|Downloads data from a resource and returns a <xref:System.Byte> array, without blocking the calling thread.|  \n|<xref:System.Net.WebClient.DownloadFileAsync%2A>|Downloads data from a resource to a local file, without blocking the calling thread.|  \n|<xref:System.Net.WebClient.OpenReadAsync%2A>|Returns the data from a resource, without blocking the calling thread.|  \n  \n The <xref:System.Net.DownloadProgressChangedEventHandler> is the delegate for this event. The <xref:System.Net.DownloadProgressChangedEventArgs> class provides the event handler with event data.  \n  \n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  \n  \n> [!NOTE]\n>  A passive FTP file transfer will always show a progress percentage of zero, since the server did not send the file size. To show progress, you can change the FTP connection to active by overriding the <xref:System.Net.WebClient.GetWebRequest%2A> virtual method:  \n  \n```  \ninternal class MyWebClient:WebClient{  \n        protected override WebRequest GetWebRequest(Uri address) {  \n            FtpWebRequest req = (FtpWebRequest)base.GetWebRequest(address);  \n            req.UsePassive = false;  \n            return req;  \n        }  \n    }  \n```"
  example:
  - "The following code example demonstrates setting an event handler for this event.  \n  \n [!code-cpp[NCLWebClientAsync#19](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#19)]\n [!code-csharp[NCLWebClientAsync#19](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#19)]\n [!code-vb[NCLWebClientAsync#19](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#19)]  \n  \n The following code example shows an implementation of a handler for this event.  \n  \n [!code-cpp[NCLWebClientAsync#42](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#42)]\n [!code-csharp[NCLWebClientAsync#42](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#42)]\n [!code-vb[NCLWebClientAsync#42](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#42)]"
  syntax:
    content: public event System.Net.DownloadProgressChangedEventHandler DownloadProgressChanged;
    return:
      type: System.Net.DownloadProgressChangedEventHandler
      description: ''
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.DownloadString(System.String)
  commentId: M:System.Net.WebClient.DownloadString(System.String)
  id: DownloadString(System.String)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: DownloadString(String)
  nameWithType: WebClient.DownloadString(String)
  fullName: WebClient.DownloadString(String)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Downloads the requested resource as a <xref href="System.String"></xref>. The resource to download is specified as a <xref href="System.String"></xref> containing the URI.
  remarks: "This method retrieves the specified resource. After it downloads the resource, the method uses the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property to convert the resource to a <xref:System.String>. This method blocks while downloading the resource. To download a resource and continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.DownloadStringAsync%2A> methods.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  example:
  - "The following code example demonstrates calling this method.  \n  \n [!code-cpp[NCLWebClientAsync#25](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#25)]\n [!code-csharp[NCLWebClientAsync#25](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#25)]\n [!code-vb[NCLWebClientAsync#25](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#25)]"
  syntax:
    content: public string DownloadString (string address);
    parameters:
    - id: address
      type: System.String
      description: A <xref href="System.String"></xref> containing the URI to download.
    return:
      type: System.String
      description: A <xref href="System.String"></xref> containing the requested resource.
  overload: System.Net.WebClient.DownloadString*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>address</code> parameter is `null`.
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while downloading the resource."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The method has been called simultaneously on multiple threads.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.DownloadString(System.Uri)
  commentId: M:System.Net.WebClient.DownloadString(System.Uri)
  id: DownloadString(System.Uri)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: DownloadString(Uri)
  nameWithType: WebClient.DownloadString(Uri)
  fullName: WebClient.DownloadString(Uri)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Downloads the requested resource as a <xref href="System.String"></xref>. The resource to download is specified as a <xref href="System.Uri"></xref>.
  remarks: "This method retrieves the specified resource. After it downloads the resource, the method uses the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property to convert the resource to a <xref:System.String>. This method blocks while downloading the resource. To download a resource and continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.DownloadStringAsync%2A> methods.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: public string DownloadString (Uri address);
    parameters:
    - id: address
      type: System.Uri
      description: A <xref href="System.Uri"></xref> object containing the URI to download.
    return:
      type: System.String
      description: A <xref href="System.String"></xref> containing the requested resource.
  overload: System.Net.WebClient.DownloadString*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>address</code> parameter is `null`.
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while downloading the resource."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The method has been called simultaneously on multiple threads.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.DownloadStringAsync(System.Uri)
  commentId: M:System.Net.WebClient.DownloadStringAsync(System.Uri)
  id: DownloadStringAsync(System.Uri)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: DownloadStringAsync(Uri)
  nameWithType: WebClient.DownloadStringAsync(Uri)
  fullName: WebClient.DownloadStringAsync(Uri)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Downloads the resource specified as a <xref href="System.Uri"></xref>. This method does not block the calling thread.
  remarks: "The resource is downloaded asynchronously using thread resources that are automatically allocated from the thread pool.  \n  \n After downloading the resource, this method uses the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property to convert the resource to a <xref:System.String>. This method does not block the calling thread while downloading the resource. To download a resource and block while waiting for the server's response, use the <xref:System.Net.WebClient.DownloadString%2A> method. When the download completes, the <xref:System.Net.WebClient.DownloadStringCompleted> event is raised. Your application must handle this event to receive notification. The downloaded string is available in the <xref:System.Net.DownloadStringCompletedEventArgs.Result%2A> property.  \n  \n You can use the <xref:System.Net.WebClient.CancelAsync%2A> method to cancel asynchronous operations that have not completed.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: public void DownloadStringAsync (Uri address);
    parameters:
    - id: address
      type: System.Uri
      description: A <xref href="System.Uri"></xref> containing the URI to download.
  overload: System.Net.WebClient.DownloadStringAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>address</code> parameter is `null`.
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while downloading the resource."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.DownloadStringAsync(System.Uri,System.Object)
  commentId: M:System.Net.WebClient.DownloadStringAsync(System.Uri,System.Object)
  id: DownloadStringAsync(System.Uri,System.Object)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: DownloadStringAsync(Uri, Object)
  nameWithType: WebClient.DownloadStringAsync(Uri, Object)
  fullName: WebClient.DownloadStringAsync(Uri, Object)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Downloads the specified string to the specified resource. This method does not block the calling thread.
  remarks: "The resource is downloaded asynchronously using thread resources that are automatically allocated from the thread pool.  \n  \n After downloading the resource, this method uses the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property to convert the resource to a <xref:System.String>. This method does not block the calling thread while downloading the resource. To download a resource and block while waiting for the server's response, use the <xref:System.Net.WebClient.DownloadString%2A> method. When the download completes, the <xref:System.Net.WebClient.DownloadStringCompleted> event is raised. Your application must handle this event to receive notification. The downloaded string is available in the <xref:System.Net.DownloadStringCompletedEventArgs.Result%2A> property.  \n  \n You can use the <xref:System.Net.WebClient.CancelAsync%2A> method to cancel asynchronous operations that have not completed.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: public void DownloadStringAsync (Uri address, object userToken);
    parameters:
    - id: address
      type: System.Uri
      description: A <xref href="System.Uri"></xref> containing the URI to download.
    - id: userToken
      type: System.Object
      description: A user-defined object that is passed to the method invoked when the asynchronous operation completes.
  overload: System.Net.WebClient.DownloadStringAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>address</code> parameter is `null`.
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while downloading the resource."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.DownloadStringCompleted
  commentId: E:System.Net.WebClient.DownloadStringCompleted
  id: DownloadStringCompleted
  parent: System.Net.WebClient
  langs:
  - csharp
  name: DownloadStringCompleted
  nameWithType: WebClient.DownloadStringCompleted
  fullName: WebClient.DownloadStringCompleted
  type: Event
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Occurs when an asynchronous resource-download operation completes.
  remarks: "This event is raised each time an asynchronous operation to download a resource as a string completes. These operations are started by calling the <xref:System.Net.WebClient.DownloadStringAsync%2A> methods.  \n  \n The <xref:System.Net.DownloadStringCompletedEventHandler> is the delegate for this event. The <xref:System.Net.DownloadStringCompletedEventArgs> class provides the event handler with event data.  \n  \n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  example:
  - "The following code example demonstrates setting an event handler for this event.  \n  \n [!code-cpp[NCLWebClientAsync#28](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#28)]\n [!code-csharp[NCLWebClientAsync#28](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#28)]\n [!code-vb[NCLWebClientAsync#28](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#28)]"
  syntax:
    content: public event System.Net.DownloadStringCompletedEventHandler DownloadStringCompleted;
    return:
      type: System.Net.DownloadStringCompletedEventHandler
      description: ''
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.DownloadStringTaskAsync(System.String)
  commentId: M:System.Net.WebClient.DownloadStringTaskAsync(System.String)
  id: DownloadStringTaskAsync(System.String)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: DownloadStringTaskAsync(String)
  nameWithType: WebClient.DownloadStringTaskAsync(String)
  fullName: WebClient.DownloadStringTaskAsync(String)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Downloads the resource as a <xref href="System.String"></xref> from the URI specified as an asynchronous operation using a task object.
  remarks: "This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the data resource has been downloaded.  The resource is downloaded asynchronously using thread resources that are automatically allocated from the thread pool.  \n  \n After downloading the resource, this method uses the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property to convert the resource to a <xref:System.String>. This method does not block the calling thread while downloading the resource.  \n  \n You can use the <xref:System.Net.WebClient.CancelAsync%2A> method to cancel asynchronous operations that have not completed.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \n  \n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public System.Threading.Tasks.Task<string> DownloadStringTaskAsync (string address);
    parameters:
    - id: address
      type: System.String
      description: The URI of the resource to download.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the downloaded resource."
  overload: System.Net.WebClient.DownloadStringTaskAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>address</code> parameter is `null`.
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while downloading the resource."
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.DownloadStringTaskAsync(System.Uri)
  commentId: M:System.Net.WebClient.DownloadStringTaskAsync(System.Uri)
  id: DownloadStringTaskAsync(System.Uri)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: DownloadStringTaskAsync(Uri)
  nameWithType: WebClient.DownloadStringTaskAsync(Uri)
  fullName: WebClient.DownloadStringTaskAsync(Uri)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Downloads the resource as a <xref href="System.String"></xref> from the URI specified as an asynchronous operation using a task object.
  remarks: "This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the data resource has been downloaded. The resource is downloaded asynchronously using thread resources that are automatically allocated from the thread pool.  \n  \n After downloading the resource, this method uses the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property to convert the resource to a <xref:System.String>. This method does not block the calling thread while downloading the resource.  \n  \n You can use the <xref:System.Net.WebClient.CancelAsync%2A> method to cancel asynchronous operations that have not completed.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \n  \n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public System.Threading.Tasks.Task<string> DownloadStringTaskAsync (Uri address);
    parameters:
    - id: address
      type: System.Uri
      description: The URI of the resource to download.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the downloaded resource."
  overload: System.Net.WebClient.DownloadStringTaskAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>address</code> parameter is `null`.
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while downloading the resource."
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.Encoding
  commentId: P:System.Net.WebClient.Encoding
  id: Encoding
  parent: System.Net.WebClient
  langs:
  - csharp
  name: Encoding
  nameWithType: WebClient.Encoding
  fullName: WebClient.Encoding
  type: Property
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Gets and sets the <xref href="System.Text.Encoding"></xref> used to upload and download strings.
  remarks: "The <xref:System.Net.WebClient.UploadString%2A> and <xref:System.Net.WebClient.UploadStringAsync%2A> methods use this property to convert the specified string to a <xref:System.Byte> array before uploading the string. For additional information, see the <xref:System.Text.Encoding.GetBytes%2A> method.  \n  \n When a string is downloaded using the <xref:System.Net.WebClient.DownloadString%2A> or <xref:System.Net.WebClient.DownloadStringAsync%2A> methods, <xref:System.Net.WebClient> uses the <xref:System.Text.Encoding> returned by this to convert the downloaded <xref:System.Byte> array into a string. For additional information, see the <xref:System.Text.Encoding.GetString%2A> method."
  example:
  - "The following code example demonstrates setting the value of this property.  \n  \n [!code-cpp[NCLWebClientAsync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#1)]\n [!code-csharp[NCLWebClientAsync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#1)]\n [!code-vb[NCLWebClientAsync#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#1)]"
  syntax:
    content: public System.Text.Encoding Encoding { get; set; }
    return:
      type: System.Text.Encoding
      description: A <xref href="System.Text.Encoding"></xref> that is used to encode strings. The default value of this property is the encoding returned by <xref href="System.Text.Encoding.Default"></xref>.
  overload: System.Net.WebClient.Encoding*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.GetWebRequest(System.Uri)
  commentId: M:System.Net.WebClient.GetWebRequest(System.Uri)
  id: GetWebRequest(System.Uri)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: GetWebRequest(Uri)
  nameWithType: WebClient.GetWebRequest(Uri)
  fullName: WebClient.GetWebRequest(Uri)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Returns a <xref href="System.Net.WebRequest"></xref> object for the specified resource.
  remarks: "This method copies the existing <xref:System.Net.WebClient.Headers%2A>, <xref:System.Net.WebClient.Credentials%2A>, and method to the newly created <xref:System.Net.WebRequest> object.  \n  \n This method can be called only by classes that inherit from <xref:System.Net.WebClient>. It is provided to give inheritors access to the underlying <xref:System.Net.WebRequest> object. Derived classes should call the base class implementation of <xref:System.Net.WebClient.GetWebRequest%2A> to ensure the method works as expected."
  example:
  - "The following code example shows an implementation of this method that can be customized by a class derived from <xref:System.Net.WebClient>.  \n  \n [!code-cpp[NCLCustomWebClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#1)]\n [!code-csharp[NCLCustomWebClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#1)]"
  syntax:
    content: protected virtual System.Net.WebRequest GetWebRequest (Uri address);
    parameters:
    - id: address
      type: System.Uri
      description: A <xref href="System.Uri"></xref> that identifies the resource to request.
    return:
      type: System.Net.WebRequest
      description: A new <xref href="System.Net.WebRequest"></xref> object for the specified resource.
  overload: System.Net.WebClient.GetWebRequest*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.GetWebResponse(System.Net.WebRequest)
  commentId: M:System.Net.WebClient.GetWebResponse(System.Net.WebRequest)
  id: GetWebResponse(System.Net.WebRequest)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: GetWebResponse(WebRequest)
  nameWithType: WebClient.GetWebResponse(WebRequest)
  fullName: WebClient.GetWebResponse(WebRequest)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Returns the <xref href="System.Net.WebResponse"></xref> for the specified <xref href="System.Net.WebRequest"></xref>.
  remarks: "The object returned by this method is obtained by calling the <xref:System.Net.WebRequest.GetResponse%2A> method on the specified <xref:System.Net.WebRequest> object.  \n  \n This method can be called only by classes that inherit from <xref:System.Net.WebClient>. It is provided to give inheritors access to the underlying <xref:System.Net.WebResponse> object."
  example:
  - "The following code example shows an implementation of this method that can be customized by a class derived from <xref:System.Net.WebClient>.  \n  \n [!code-cpp[NCLCustomWebClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#2)]\n [!code-csharp[NCLCustomWebClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#2)]"
  syntax:
    content: protected virtual System.Net.WebResponse GetWebResponse (System.Net.WebRequest request);
    parameters:
    - id: request
      type: System.Net.WebRequest
      description: A <xref href="System.Net.WebRequest"></xref> that is used to obtain the response.
    return:
      type: System.Net.WebResponse
      description: A <xref href="System.Net.WebResponse"></xref> containing the response for the specified <xref href="System.Net.WebRequest"></xref>.
  overload: System.Net.WebClient.GetWebResponse*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.GetWebResponse(System.Net.WebRequest,System.IAsyncResult)
  commentId: M:System.Net.WebClient.GetWebResponse(System.Net.WebRequest,System.IAsyncResult)
  id: GetWebResponse(System.Net.WebRequest,System.IAsyncResult)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: GetWebResponse(WebRequest, IAsyncResult)
  nameWithType: WebClient.GetWebResponse(WebRequest, IAsyncResult)
  fullName: WebClient.GetWebResponse(WebRequest, IAsyncResult)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Returns the <xref href="System.Net.WebResponse"></xref> for the specified <xref href="System.Net.WebRequest"></xref> using the specified <xref href="System.IAsyncResult"></xref>.
  remarks: "The object returned by this method is obtained by calling the <xref:System.Net.WebRequest.EndGetResponse%2A> method on the specified <xref:System.Net.WebRequest> object.  \n  \n This method can be called only by classes that inherit from <xref:System.Net.WebClient>. It is provided to give inheritors access to the underlying <xref:System.Net.WebResponse> object."
  example:
  - "The following code example shows an implementation of this method that can be customized by a class derived from <xref:System.Net.WebClient>.  \n  \n [!code-cpp[NCLCustomWebClient#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#3)]\n [!code-csharp[NCLCustomWebClient#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#3)]"
  syntax:
    content: protected virtual System.Net.WebResponse GetWebResponse (System.Net.WebRequest request, IAsyncResult result);
    parameters:
    - id: request
      type: System.Net.WebRequest
      description: A <xref href="System.Net.WebRequest"></xref> that is used to obtain the response.
    - id: result
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult"></xref> object obtained from a previous call to <xref href="System.Net.WebRequest.BeginGetResponse(System.AsyncCallback,System.Object)"></xref> .
    return:
      type: System.Net.WebResponse
      description: A <xref href="System.Net.WebResponse"></xref> containing the response for the specified <xref href="System.Net.WebRequest"></xref>.
  overload: System.Net.WebClient.GetWebResponse*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.Headers
  commentId: P:System.Net.WebClient.Headers
  id: Headers
  parent: System.Net.WebClient
  langs:
  - csharp
  name: Headers
  nameWithType: WebClient.Headers
  fullName: WebClient.Headers
  type: Property
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Gets or sets a collection of header name/value pairs associated with the request.
  remarks: "The <xref:System.Net.WebClient.Headers%2A> property contains a <xref:System.Net.WebHeaderCollection> instance containing protocol headers that the <xref:System.Net.WebClient> sends with the request.  \n  \n Some common headers are considered restricted and are protected by the system and cannot be set or changed in a <xref:System.Net.WebHeaderCollection> object. Any attempt to set one of these restricted headers in the <xref:System.Net.WebHeaderCollection> object associated with a <xref:System.Net.WebClient> object will throw an exception later when attempting to send the <xref:System.Net.WebClient> request.  \n  \n Restricted headers protected by the system include, but are not limited to the following:  \n  \n-   Date  \n  \n-   Host  \n  \n In addition, some other headers are also restricted when using a <xref:System.Net.WebClient> object. These restricted headers include, but are not limited to the following:  \n  \n-   Accept  \n  \n-   Connection  \n  \n-   Content-Length  \n  \n-   Expect (when the value is set to \"100-continue\"  \n  \n-   If-Modified-Since  \n  \n-   Range  \n  \n-   Transfer-Encoding  \n  \n The <xref:System.Net.HttpWebRequest> class has properties for setting some of the above headers. If it is important for an application to set these headers, then the <xref:System.Net.HttpWebRequest> class should be used instead of the <xref:System.Net.WebRequest> class.  \n  \n You should not assume that the header values will remain unchanged, because Web servers and caches may change or add headers to a Web request."
  example:
  - "The following code example uses the <xref:System.Net.WebClient.Headers%2A> collection to set the HTTP `Content-Type` header to `application/x-www-form-urlencoded,` to notify the server that form data is attached to the post.  \n  \n [!code-cpp[WebClient_UpLoadData_Headers#2](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_UpLoadData_Headers/CPP/webclient_uploaddata_headers.cpp#2)]\n [!code-csharp[WebClient_UpLoadData_Headers#2](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_UpLoadData_Headers/CS/webclient_uploaddata_headers.cs#2)]\n [!code-vb[WebClient_UpLoadData_Headers#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_UpLoadData_Headers/VB/webclient_uploaddata_headers.vb#2)]"
  syntax:
    content: public System.Net.WebHeaderCollection Headers { get; set; }
    return:
      type: System.Net.WebHeaderCollection
      description: A <xref href="System.Net.WebHeaderCollection"></xref> containing header name/value pairs associated with this request.
  overload: System.Net.WebClient.Headers*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.IsBusy
  commentId: P:System.Net.WebClient.IsBusy
  id: IsBusy
  parent: System.Net.WebClient
  langs:
  - csharp
  name: IsBusy
  nameWithType: WebClient.IsBusy
  fullName: WebClient.IsBusy
  type: Property
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Gets whether a Web request is in progress.
  syntax:
    content: public bool IsBusy { get; }
    return:
      type: System.Boolean
      description: '`true` if the Web request is still in progress; otherwise `false`.'
  overload: System.Net.WebClient.IsBusy*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.OnDownloadDataCompleted(System.Net.DownloadDataCompletedEventArgs)
  commentId: M:System.Net.WebClient.OnDownloadDataCompleted(System.Net.DownloadDataCompletedEventArgs)
  id: OnDownloadDataCompleted(System.Net.DownloadDataCompletedEventArgs)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: OnDownloadDataCompleted(DownloadDataCompletedEventArgs)
  nameWithType: WebClient.OnDownloadDataCompleted(DownloadDataCompletedEventArgs)
  fullName: WebClient.OnDownloadDataCompleted(DownloadDataCompletedEventArgs)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Raises the <xref href="System.Net.WebClient.DownloadDataCompleted"></xref> event.
  remarks: "Classes that inherit from this class can override this method to perform additional tasks when the <xref:System.Net.WebClient.DownloadDataCompleted> event occurs.  \n  \n Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)  \n  \n The <xref:System.Net.WebClient.OnDownloadDataCompleted%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  example:
  - "The following code example shows an implementation of this method that can be customized by a class derived from <xref:System.Net.WebClient>.  \n  \n [!code-cpp[NCLCustomWebClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#4)]\n [!code-csharp[NCLCustomWebClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#4)]"
  syntax:
    content: protected virtual void OnDownloadDataCompleted (System.Net.DownloadDataCompletedEventArgs e);
    parameters:
    - id: e
      type: System.Net.DownloadDataCompletedEventArgs
      description: A <xref href="System.Net.DownloadDataCompletedEventArgs"></xref> object that contains event data.
  overload: System.Net.WebClient.OnDownloadDataCompleted*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.OnDownloadFileCompleted(System.ComponentModel.AsyncCompletedEventArgs)
  commentId: M:System.Net.WebClient.OnDownloadFileCompleted(System.ComponentModel.AsyncCompletedEventArgs)
  id: OnDownloadFileCompleted(System.ComponentModel.AsyncCompletedEventArgs)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: OnDownloadFileCompleted(AsyncCompletedEventArgs)
  nameWithType: WebClient.OnDownloadFileCompleted(AsyncCompletedEventArgs)
  fullName: WebClient.OnDownloadFileCompleted(AsyncCompletedEventArgs)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Raises the <xref href="System.Net.WebClient.DownloadFileCompleted"></xref> event.
  remarks: "Classes that inherit from this class can override this method to perform additional tasks when the <xref:System.Net.WebClient.DownloadFileCompleted> event occurs.  \n  \n Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  \n  \n The <xref:System.Net.WebClient.OnDownloadFileCompleted%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  example:
  - "The following code example shows an implementation of this method that can be customized by a class derived from <xref:System.Net.WebClient>.  \n  \n [!code-cpp[NCLCustomWebClient#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#5)]\n [!code-csharp[NCLCustomWebClient#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#5)]"
  syntax:
    content: protected virtual void OnDownloadFileCompleted (System.ComponentModel.AsyncCompletedEventArgs e);
    parameters:
    - id: e
      type: System.ComponentModel.AsyncCompletedEventArgs
      description: An <xref href="System.ComponentModel.AsyncCompletedEventArgs"></xref> object containing event data.
  overload: System.Net.WebClient.OnDownloadFileCompleted*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.OnDownloadProgressChanged(System.Net.DownloadProgressChangedEventArgs)
  commentId: M:System.Net.WebClient.OnDownloadProgressChanged(System.Net.DownloadProgressChangedEventArgs)
  id: OnDownloadProgressChanged(System.Net.DownloadProgressChangedEventArgs)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: OnDownloadProgressChanged(DownloadProgressChangedEventArgs)
  nameWithType: WebClient.OnDownloadProgressChanged(DownloadProgressChangedEventArgs)
  fullName: WebClient.OnDownloadProgressChanged(DownloadProgressChangedEventArgs)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Raises the <xref href="System.Net.WebClient.DownloadProgressChanged"></xref> event.
  remarks: "Classes that inherit from this class can override this method to perform additional tasks when the <xref:System.Net.WebClient.DownloadProgressChanged> event occurs.  \n  \n Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  \n  \n The <xref:System.Net.WebClient.OnDownloadProgressChanged%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  example:
  - "The following code example shows an implementation of this method that can be customized by a class derived from <xref:System.Net.WebClient>.  \n  \n [!code-cpp[NCLCustomWebClient#12](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#12)]\n [!code-csharp[NCLCustomWebClient#12](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#12)]"
  syntax:
    content: protected virtual void OnDownloadProgressChanged (System.Net.DownloadProgressChangedEventArgs e);
    parameters:
    - id: e
      type: System.Net.DownloadProgressChangedEventArgs
      description: A <xref href="System.Net.DownloadProgressChangedEventArgs"></xref> object containing event data.
  overload: System.Net.WebClient.OnDownloadProgressChanged*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.OnDownloadStringCompleted(System.Net.DownloadStringCompletedEventArgs)
  commentId: M:System.Net.WebClient.OnDownloadStringCompleted(System.Net.DownloadStringCompletedEventArgs)
  id: OnDownloadStringCompleted(System.Net.DownloadStringCompletedEventArgs)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: OnDownloadStringCompleted(DownloadStringCompletedEventArgs)
  nameWithType: WebClient.OnDownloadStringCompleted(DownloadStringCompletedEventArgs)
  fullName: WebClient.OnDownloadStringCompleted(DownloadStringCompletedEventArgs)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Raises the <xref href="System.Net.WebClient.DownloadStringCompleted"></xref> event.
  remarks: "Classes that inherit from this class can override this method to perform additional tasks when the <xref:System.Net.WebClient.DownloadStringCompleted> event occurs.  \n  \n Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  \n  \n The <xref:System.Net.WebClient.OnDownloadStringCompleted%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  example:
  - "The following code example shows an implementation of this method that can be customized by a class derived from <xref:System.Net.WebClient>.  \n  \n [!code-cpp[NCLCustomWebClient#6](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#6)]\n [!code-csharp[NCLCustomWebClient#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#6)]"
  syntax:
    content: protected virtual void OnDownloadStringCompleted (System.Net.DownloadStringCompletedEventArgs e);
    parameters:
    - id: e
      type: System.Net.DownloadStringCompletedEventArgs
      description: A <xref href="System.Net.DownloadStringCompletedEventArgs"></xref> object containing event data.
  overload: System.Net.WebClient.OnDownloadStringCompleted*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.OnOpenReadCompleted(System.Net.OpenReadCompletedEventArgs)
  commentId: M:System.Net.WebClient.OnOpenReadCompleted(System.Net.OpenReadCompletedEventArgs)
  id: OnOpenReadCompleted(System.Net.OpenReadCompletedEventArgs)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: OnOpenReadCompleted(OpenReadCompletedEventArgs)
  nameWithType: WebClient.OnOpenReadCompleted(OpenReadCompletedEventArgs)
  fullName: WebClient.OnOpenReadCompleted(OpenReadCompletedEventArgs)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Raises the <xref href="System.Net.WebClient.OpenReadCompleted"></xref> event.
  remarks: "Classes that inherit from this class can override this method to perform additional tasks when the <xref:System.Net.WebClient.OpenReadCompleted> event occurs.  \n  \n Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  \n  \n The <xref:System.Net.WebClient.OnOpenReadCompleted%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  example:
  - "The following code example shows an implementation of this method that can be customized by a class derived from <xref:System.Net.WebClient>.  \n  \n [!code-cpp[NCLCustomWebClient#7](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#7)]\n [!code-csharp[NCLCustomWebClient#7](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#7)]"
  syntax:
    content: protected virtual void OnOpenReadCompleted (System.Net.OpenReadCompletedEventArgs e);
    parameters:
    - id: e
      type: System.Net.OpenReadCompletedEventArgs
      description: A <xref href="System.Net.OpenReadCompletedEventArgs"></xref> object containing event data.
  overload: System.Net.WebClient.OnOpenReadCompleted*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.OnOpenWriteCompleted(System.Net.OpenWriteCompletedEventArgs)
  commentId: M:System.Net.WebClient.OnOpenWriteCompleted(System.Net.OpenWriteCompletedEventArgs)
  id: OnOpenWriteCompleted(System.Net.OpenWriteCompletedEventArgs)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: OnOpenWriteCompleted(OpenWriteCompletedEventArgs)
  nameWithType: WebClient.OnOpenWriteCompleted(OpenWriteCompletedEventArgs)
  fullName: WebClient.OnOpenWriteCompleted(OpenWriteCompletedEventArgs)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Raises the <xref href="System.Net.WebClient.OpenWriteCompleted"></xref> event.
  remarks: "Classes that inherit from this class can override this method to perform additional tasks when the <xref:System.Net.WebClient.OpenWriteCompleted> event occurs.  \n  \n Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  \n  \n The <xref:System.Net.WebClient.OnOpenWriteCompleted%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  example:
  - "The following code example shows an implementation of this method that can be customized by a class derived from <xref:System.Net.WebClient>.  \n  \n [!code-cpp[NCLCustomWebClient#8](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#8)]\n [!code-csharp[NCLCustomWebClient#8](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#8)]"
  syntax:
    content: protected virtual void OnOpenWriteCompleted (System.Net.OpenWriteCompletedEventArgs e);
    parameters:
    - id: e
      type: System.Net.OpenWriteCompletedEventArgs
      description: A <xref href="System.Net.OpenWriteCompletedEventArgs"></xref> object containing event data.
  overload: System.Net.WebClient.OnOpenWriteCompleted*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.OnUploadDataCompleted(System.Net.UploadDataCompletedEventArgs)
  commentId: M:System.Net.WebClient.OnUploadDataCompleted(System.Net.UploadDataCompletedEventArgs)
  id: OnUploadDataCompleted(System.Net.UploadDataCompletedEventArgs)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: OnUploadDataCompleted(UploadDataCompletedEventArgs)
  nameWithType: WebClient.OnUploadDataCompleted(UploadDataCompletedEventArgs)
  fullName: WebClient.OnUploadDataCompleted(UploadDataCompletedEventArgs)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Raises the <xref href="System.Net.WebClient.UploadDataCompleted"></xref> event.
  remarks: "Classes that inherit from this class can override this method to perform additional tasks when the <xref:System.Net.WebClient.UploadDataCompleted> event occurs.  \n  \n Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  \n  \n The <xref:System.Net.WebClient.OnUploadDataCompleted%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  example:
  - "The following code example shows an implementation of this method that can be customized by a class derived from <xref:System.Net.WebClient>.  \n  \n [!code-cpp[NCLCustomWebClient#9](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#9)]\n [!code-csharp[NCLCustomWebClient#9](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#9)]"
  syntax:
    content: protected virtual void OnUploadDataCompleted (System.Net.UploadDataCompletedEventArgs e);
    parameters:
    - id: e
      type: System.Net.UploadDataCompletedEventArgs
      description: A <xref href="System.Net.UploadDataCompletedEventArgs"></xref> object containing event data.
  overload: System.Net.WebClient.OnUploadDataCompleted*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.OnUploadFileCompleted(System.Net.UploadFileCompletedEventArgs)
  commentId: M:System.Net.WebClient.OnUploadFileCompleted(System.Net.UploadFileCompletedEventArgs)
  id: OnUploadFileCompleted(System.Net.UploadFileCompletedEventArgs)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: OnUploadFileCompleted(UploadFileCompletedEventArgs)
  nameWithType: WebClient.OnUploadFileCompleted(UploadFileCompletedEventArgs)
  fullName: WebClient.OnUploadFileCompleted(UploadFileCompletedEventArgs)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Raises the <xref href="System.Net.WebClient.UploadFileCompleted"></xref> event.
  remarks: "Classes that inherit from this class can override this method to perform additional tasks when the <xref:System.Net.WebClient.UploadFileCompleted> event occurs.  \n  \n Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  \n  \n The <xref:System.Net.WebClient.OnUploadFileCompleted%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  example:
  - "The following code example shows an implementation of this method that can be customized by a class derived from <xref:System.Net.WebClient>.  \n  \n [!code-cpp[NCLCustomWebClient#10](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#10)]\n [!code-csharp[NCLCustomWebClient#10](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#10)]"
  syntax:
    content: protected virtual void OnUploadFileCompleted (System.Net.UploadFileCompletedEventArgs e);
    parameters:
    - id: e
      type: System.Net.UploadFileCompletedEventArgs
      description: An <xref href="System.Net.UploadFileCompletedEventArgs"></xref> object containing event data.
  overload: System.Net.WebClient.OnUploadFileCompleted*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.OnUploadProgressChanged(System.Net.UploadProgressChangedEventArgs)
  commentId: M:System.Net.WebClient.OnUploadProgressChanged(System.Net.UploadProgressChangedEventArgs)
  id: OnUploadProgressChanged(System.Net.UploadProgressChangedEventArgs)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: OnUploadProgressChanged(UploadProgressChangedEventArgs)
  nameWithType: WebClient.OnUploadProgressChanged(UploadProgressChangedEventArgs)
  fullName: WebClient.OnUploadProgressChanged(UploadProgressChangedEventArgs)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Raises the <xref href="System.Net.WebClient.UploadProgressChanged"></xref> event.
  remarks: "Classes that inherit from this class can override this method to perform additional tasks when the <xref:System.Net.WebClient.UploadProgressChanged> event occurs.  \n  \n Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  \n  \n The <xref:System.Net.WebClient.OnUploadProgressChanged%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  example:
  - "The following code example shows an implementation of this method that can be customized by a class derived from <xref:System.Net.WebClient>.  \n  \n [!code-cpp[NCLCustomWebClient#13](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#13)]\n [!code-csharp[NCLCustomWebClient#13](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#13)]"
  syntax:
    content: protected virtual void OnUploadProgressChanged (System.Net.UploadProgressChangedEventArgs e);
    parameters:
    - id: e
      type: System.Net.UploadProgressChangedEventArgs
      description: An <xref href="System.Net.UploadProgressChangedEventArgs"></xref> object containing event data.
  overload: System.Net.WebClient.OnUploadProgressChanged*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.OnUploadStringCompleted(System.Net.UploadStringCompletedEventArgs)
  commentId: M:System.Net.WebClient.OnUploadStringCompleted(System.Net.UploadStringCompletedEventArgs)
  id: OnUploadStringCompleted(System.Net.UploadStringCompletedEventArgs)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: OnUploadStringCompleted(UploadStringCompletedEventArgs)
  nameWithType: WebClient.OnUploadStringCompleted(UploadStringCompletedEventArgs)
  fullName: WebClient.OnUploadStringCompleted(UploadStringCompletedEventArgs)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Raises the <xref href="System.Net.WebClient.UploadStringCompleted"></xref> event.
  remarks: "Classes that inherit from this class can override this method to perform additional tasks when the <xref:System.Net.WebClient.UploadStringCompleted> event occurs.  \n  \n Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  \n  \n The <xref:System.Net.WebClient.OnUploadStringCompleted%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  example:
  - "The following code example shows an implementation of this method that can be customized by a class derived from <xref:System.Net.WebClient>.  \n  \n [!code-cpp[NCLCustomWebClient#11](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#11)]\n [!code-csharp[NCLCustomWebClient#11](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#11)]"
  syntax:
    content: protected virtual void OnUploadStringCompleted (System.Net.UploadStringCompletedEventArgs e);
    parameters:
    - id: e
      type: System.Net.UploadStringCompletedEventArgs
      description: An <xref href="System.Net.UploadStringCompletedEventArgs"></xref> object containing event data.
  overload: System.Net.WebClient.OnUploadStringCompleted*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.OnUploadValuesCompleted(System.Net.UploadValuesCompletedEventArgs)
  commentId: M:System.Net.WebClient.OnUploadValuesCompleted(System.Net.UploadValuesCompletedEventArgs)
  id: OnUploadValuesCompleted(System.Net.UploadValuesCompletedEventArgs)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: OnUploadValuesCompleted(UploadValuesCompletedEventArgs)
  nameWithType: WebClient.OnUploadValuesCompleted(UploadValuesCompletedEventArgs)
  fullName: WebClient.OnUploadValuesCompleted(UploadValuesCompletedEventArgs)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Raises the <xref href="System.Net.WebClient.UploadValuesCompleted"></xref> event.
  remarks: "Classes that inherit from this class can override this method to perform additional tasks when the <xref:System.Net.WebClient.UploadValuesCompleted> event occurs.  \n  \n Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  \n  \n The <xref:System.Net.WebClient.OnUploadValuesCompleted%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  example:
  - "The following code example shows an implementation of this method that can be customized by a class derived from <xref:System.Net.WebClient>.  \n  \n [!code-cpp[NCLCustomWebClient#14](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#14)]\n [!code-csharp[NCLCustomWebClient#14](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#14)]"
  syntax:
    content: protected virtual void OnUploadValuesCompleted (System.Net.UploadValuesCompletedEventArgs e);
    parameters:
    - id: e
      type: System.Net.UploadValuesCompletedEventArgs
      description: A <xref href="System.Net.UploadValuesCompletedEventArgs"></xref> object containing event data.
  overload: System.Net.WebClient.OnUploadValuesCompleted*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.OnWriteStreamClosed(System.Net.WriteStreamClosedEventArgs)
  commentId: M:System.Net.WebClient.OnWriteStreamClosed(System.Net.WriteStreamClosedEventArgs)
  id: OnWriteStreamClosed(System.Net.WriteStreamClosedEventArgs)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: OnWriteStreamClosed(WriteStreamClosedEventArgs)
  nameWithType: WebClient.OnWriteStreamClosed(WriteStreamClosedEventArgs)
  fullName: WebClient.OnWriteStreamClosed(WriteStreamClosedEventArgs)
  type: Method
  assemblies:
  - System
  - System.Net.WebClient
  namespace: System.Net
  summary: Raises the <xref href="System.Net.WebClient.WriteStreamClosed"></xref> event.
  syntax:
    content: >-
      [System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)]

      protected virtual void OnWriteStreamClosed (System.Net.WriteStreamClosedEventArgs e);
    parameters:
    - id: e
      type: System.Net.WriteStreamClosedEventArgs
      description: A <xref href="System.Net.WriteStreamClosedEventArgs"></xref> object containing event data.
  overload: System.Net.WebClient.OnWriteStreamClosed*
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.OpenRead(System.String)
  commentId: M:System.Net.WebClient.OpenRead(System.String)
  id: OpenRead(System.String)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: OpenRead(String)
  nameWithType: WebClient.OpenRead(String)
  fullName: WebClient.OpenRead(String)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Opens a readable stream for the data downloaded from a resource with the URI specified as a <xref href="System.String"></xref>.
  remarks: "The <xref:System.Net.WebClient.OpenRead%2A> method creates a <xref:System.IO.Stream> instance used to read the contents of the resource specified by the `address` parameter. This method blocks while opening the stream. To continue executing while waiting for the stream, use one of the <xref:System.Net.WebClient.OpenReadAsync%2A> methods.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not `null`, it is appended to `address`.  \n  \n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \n  \n> [!NOTE]\n>  You must call <xref:System.IO.Stream.Close%2A?displayProperty=fullName> when finished with the <xref:System.IO.Stream> to avoid running out of system resources.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  example:
  - "The following code example opens the resource identified by `uriString` and displays the results on the system console. Note that the <xref:System.IO.Stream> returned by <xref:System.Net.WebClient.OpenRead%2A> is closed when the data has been read.  \n  \n [!code-cpp[WebClient_OpenRead#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_OpenRead/CPP/webclient_openread.cpp#1)]\n [!code-csharp[WebClient_OpenRead#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_OpenRead/CS/webclient_openread.cs#1)]\n [!code-vb[WebClient_OpenRead#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_OpenRead/VB/webclient_openread.vb#1)]"
  syntax:
    content: public System.IO.Stream OpenRead (string address);
    parameters:
    - id: address
      type: System.String
      description: The URI specified as a <xref href="System.String"></xref> from which to download data.
    return:
      type: System.IO.Stream
      description: A <xref href="System.IO.Stream"></xref> used to read data from a resource.
  overload: System.Net.WebClient.OpenRead*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>address</code> parameter is `null`.
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while downloading data."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.OpenRead(System.Uri)
  commentId: M:System.Net.WebClient.OpenRead(System.Uri)
  id: OpenRead(System.Uri)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: OpenRead(Uri)
  nameWithType: WebClient.OpenRead(Uri)
  fullName: WebClient.OpenRead(Uri)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Opens a readable stream for the data downloaded from a resource with the URI specified as a <xref href="System.Uri"></xref>
  remarks: "The <xref:System.Net.WebClient.OpenRead%2A> method creates a <xref:System.IO.Stream> instance used to read the contents of the resource specified by the `address` parameter. This method blocks while opening the stream. To continue executing while waiting for the stream, use one of the <xref:System.Net.WebClient.OpenReadAsync%2A> methods.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not `null`, it is appended to `address`.  \n  \n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \n  \n> [!NOTE]\n>  You must call <xref:System.IO.Stream.Close%2A?displayProperty=fullName> when finished with the <xref:System.IO.Stream> to avoid running out of system resources.  \n  \n **Note** This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: public System.IO.Stream OpenRead (Uri address);
    parameters:
    - id: address
      type: System.Uri
      description: The URI specified as a <xref href="System.Uri"></xref> from which to download data.
    return:
      type: System.IO.Stream
      description: A <xref href="System.IO.Stream"></xref> used to read data from a resource.
  overload: System.Net.WebClient.OpenRead*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>address</code> parameter is `null`.
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while downloading data."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.OpenReadAsync(System.Uri)
  commentId: M:System.Net.WebClient.OpenReadAsync(System.Uri)
  id: OpenReadAsync(System.Uri)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: OpenReadAsync(Uri)
  nameWithType: WebClient.OpenReadAsync(Uri)
  fullName: WebClient.OpenReadAsync(Uri)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Opens a readable stream containing the specified resource. This method does not block the calling thread.
  remarks: "This method retrieves a <xref:System.IO.Stream> instance used to access the resource specified by the `address` parameter. The stream is obtained using thread resources that are automatically allocated from the thread pool. To receive notification when the stream is available, add an event handler to the <xref:System.Net.WebClient.OpenReadCompleted> event.  \n  \n> [!NOTE]\n>  You must call <xref:System.IO.Stream.Close%2A?displayProperty=fullName> when you are finished with the <xref:System.IO.Stream> to avoid running out of system resources.  \n  \n This method does not block the calling thread while the stream is opening. To block while waiting for the stream, use the <xref:System.Net.WebClient.OpenReadAsync%2A> method.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not specify an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested resource. If the <xref:System.Net.WebClient.QueryString%2A> property is not `null`, it is appended to `address`.  \n  \n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: public void OpenReadAsync (Uri address);
    parameters:
    - id: address
      type: System.Uri
      description: The URI of the resource to retrieve.
  overload: System.Net.WebClient.OpenReadAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>address</code> parameter is `null`.
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and address is invalid.  \n  \n -or-  \n  \n An error occurred while downloading the resource.  \n  \n -or-  \n  \n An error occurred while opening the stream."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.OpenReadAsync(System.Uri,System.Object)
  commentId: M:System.Net.WebClient.OpenReadAsync(System.Uri,System.Object)
  id: OpenReadAsync(System.Uri,System.Object)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: OpenReadAsync(Uri, Object)
  nameWithType: WebClient.OpenReadAsync(Uri, Object)
  fullName: WebClient.OpenReadAsync(Uri, Object)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Opens a readable stream containing the specified resource. This method does not block the calling thread.
  remarks: "This method retrieves a <xref:System.IO.Stream> instance used to access the resource specified by the `address` parameter. The stream is obtained using thread resources that are automatically allocated from the thread pool. To receive notification when the stream is available, add an event handler to the <xref:System.Net.WebClient.OpenReadCompleted> event.  \n  \n> [!NOTE]\n>  You must call <xref:System.IO.Stream.Close%2A?displayProperty=fullName> when you are finished with the <xref:System.IO.Stream> to avoid running out of system resources.  \n  \n This method does not block the calling thread while the stream is opening. To block while waiting for the stream, use the <xref:System.Net.WebClient.OpenRead%2A> method.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not specify an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested resource. If the <xref:System.Net.WebClient.QueryString%2A> property is not `null`, it is appended to `address`.  \n  \n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: public void OpenReadAsync (Uri address, object userToken);
    parameters:
    - id: address
      type: System.Uri
      description: The URI of the resource to retrieve.
    - id: userToken
      type: System.Object
      description: A user-defined object that is passed to the method invoked when the asynchronous operation completes.
  overload: System.Net.WebClient.OpenReadAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>address</code> parameter is `null`.
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and address is invalid.  \n  \n -or-  \n  \n An error occurred while downloading the resource.  \n  \n -or-  \n  \n An error occurred while opening the stream."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.OpenReadCompleted
  commentId: E:System.Net.WebClient.OpenReadCompleted
  id: OpenReadCompleted
  parent: System.Net.WebClient
  langs:
  - csharp
  name: OpenReadCompleted
  nameWithType: WebClient.OpenReadCompleted
  fullName: WebClient.OpenReadCompleted
  type: Event
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Occurs when an asynchronous operation to open a stream containing a resource completes.
  remarks: "This event is raised each time an asynchronous operation to open a stream containing a resource completes. These operations are started by calling the <xref:System.Net.WebClient.OpenReadAsync%2A> methods.  \n  \n The <xref:System.Net.OpenReadCompletedEventHandler> is the delegate for this event. The <xref:System.Net.OpenReadCompletedEventArgs> class provides the event handler with event data.  \n  \n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  example:
  - "The following code example demonstrates setting an event handler for this event.  \n  \n [!code-cpp[NCLWebClientAsync#30](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#30)]\n [!code-csharp[NCLWebClientAsync#30](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#30)]\n [!code-vb[NCLWebClientAsync#30](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#30)]"
  syntax:
    content: public event System.Net.OpenReadCompletedEventHandler OpenReadCompleted;
    return:
      type: System.Net.OpenReadCompletedEventHandler
      description: ''
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.OpenReadTaskAsync(System.String)
  commentId: M:System.Net.WebClient.OpenReadTaskAsync(System.String)
  id: OpenReadTaskAsync(System.String)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: OpenReadTaskAsync(String)
  nameWithType: WebClient.OpenReadTaskAsync(String)
  fullName: WebClient.OpenReadTaskAsync(String)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Opens a readable stream containing the specified resource as an asynchronous operation using a task object.
  remarks: "This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a readable stream to the data resource has been opened. This method does not block the calling thread while the stream is opening.  \n  \n This method retrieves a <xref:System.IO.Stream> instance used to access the resource specified by the `address` parameter. The stream is obtained using thread resources that are automatically allocated from the thread pool.  \n  \n> [!NOTE]\n>  You must call <xref:System.IO.Stream.Close%2A?displayProperty=fullName> when you are finished with the <xref:System.IO.Stream> to avoid running out of system resources.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not specify an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested resource. If the <xref:System.Net.WebClient.QueryString%2A> property is not `null`, it is appended to `address`.  \n  \n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public System.Threading.Tasks.Task<System.IO.Stream> OpenReadTaskAsync (string address);
    parameters:
    - id: address
      type: System.String
      description: The URI of the resource to retrieve.
    return:
      type: System.Threading.Tasks.Task{System.IO.Stream}
      description: "Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.IO.Stream\"></xref> used to read data from a resource."
  overload: System.Net.WebClient.OpenReadTaskAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>address</code> parameter is `null`.
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and address is invalid.  \n  \n -or-  \n  \n An error occurred while downloading the resource.  \n  \n -or-  \n  \n An error occurred while opening the stream."
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.OpenReadTaskAsync(System.Uri)
  commentId: M:System.Net.WebClient.OpenReadTaskAsync(System.Uri)
  id: OpenReadTaskAsync(System.Uri)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: OpenReadTaskAsync(Uri)
  nameWithType: WebClient.OpenReadTaskAsync(Uri)
  fullName: WebClient.OpenReadTaskAsync(Uri)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Opens a readable stream containing the specified resource as an asynchronous operation using a task object.
  remarks: "This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a readable stream to the data resource has been opened. This method does not block the calling thread while the stream is opening.  \n  \n This method retrieves a <xref:System.IO.Stream> instance used to access the resource specified by the `address` parameter. The stream is obtained using thread resources that are automatically allocated from the thread pool.  \n  \n> [!NOTE]\n>  You must call <xref:System.IO.Stream.Close%2A?displayProperty=fullName> when you are finished with the <xref:System.IO.Stream> to avoid running out of system resources.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not specify an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested resource. If the <xref:System.Net.WebClient.QueryString%2A> property is not `null`, it is appended to `address`.  \n  \n This method uses the RETR command to download an FTP resource. For an HTTP resource, the GET method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public System.Threading.Tasks.Task<System.IO.Stream> OpenReadTaskAsync (Uri address);
    parameters:
    - id: address
      type: System.Uri
      description: The URI of the resource to retrieve.
    return:
      type: System.Threading.Tasks.Task{System.IO.Stream}
      description: "Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.IO.Stream\"></xref> used to read data from a resource."
  overload: System.Net.WebClient.OpenReadTaskAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>address</code> parameter is `null`.
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and address is invalid.  \n  \n -or-  \n  \n An error occurred while downloading the resource.  \n  \n -or-  \n  \n An error occurred while opening the stream."
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.OpenWrite(System.String)
  commentId: M:System.Net.WebClient.OpenWrite(System.String)
  id: OpenWrite(System.String)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: OpenWrite(String)
  nameWithType: WebClient.OpenWrite(String)
  fullName: WebClient.OpenWrite(String)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Opens a stream for writing data to the specified resource.
  remarks: "The <xref:System.Net.WebClient.OpenWrite%2A> method returns a writable stream that is used to send data to a resource. This method blocks while opening the stream. To continue executing while waiting for the stream, use one of the <xref:System.Net.WebClient.OpenWriteAsync%2A> methods.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  example:
  - "The following code example reads data from the command line and uses <xref:System.Net.WebClient.OpenWrite%2A> to obtain a stream for writing the data. Note that the <xref:System.IO.Stream> returned by <xref:System.Net.WebClient.OpenWrite%2A> is closed after the data is sent.  \n  \n [!code-cpp[WebClient_OpenWrite2#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_OpenWrite2/CPP/webclient_openwrite2.cpp#1)]\n [!code-csharp[WebClient_OpenWrite2#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_OpenWrite2/CS/webclient_openwrite2.cs#1)]\n [!code-vb[WebClient_OpenWrite2#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_OpenWrite2/VB/webclient_openwrite2.vb#1)]"
  syntax:
    content: public System.IO.Stream OpenWrite (string address);
    parameters:
    - id: address
      type: System.String
      description: The URI of the resource to receive the data.
    return:
      type: System.IO.Stream
      description: A <xref href="System.IO.Stream"></xref> used to write data to the resource.
  overload: System.Net.WebClient.OpenWrite*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>address</code> parameter is `null`.
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while opening the stream."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.OpenWrite(System.Uri)
  commentId: M:System.Net.WebClient.OpenWrite(System.Uri)
  id: OpenWrite(System.Uri)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: OpenWrite(Uri)
  nameWithType: WebClient.OpenWrite(Uri)
  fullName: WebClient.OpenWrite(Uri)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Opens a stream for writing data to the specified resource.
  remarks: "The <xref:System.Net.WebClient.OpenWrite%2A> method returns a writable stream that is used to send data to a resource. This method blocks while opening the stream. To continue executing while waiting for the stream, use one of the <xref:System.Net.WebClient.OpenWriteAsync%2A> methods.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: public System.IO.Stream OpenWrite (Uri address);
    parameters:
    - id: address
      type: System.Uri
      description: The URI of the resource to receive the data.
    return:
      type: System.IO.Stream
      description: A <xref href="System.IO.Stream"></xref> used to write data to the resource.
  overload: System.Net.WebClient.OpenWrite*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>address</code> parameter is `null`.
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while opening the stream."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.OpenWrite(System.String,System.String)
  commentId: M:System.Net.WebClient.OpenWrite(System.String,System.String)
  id: OpenWrite(System.String,System.String)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: OpenWrite(String, String)
  nameWithType: WebClient.OpenWrite(String, String)
  fullName: WebClient.OpenWrite(String, String)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Opens a stream for writing data to the specified resource, using the specified method.
  remarks: "The <xref:System.Net.WebClient.OpenWrite%2A> method returns a writable stream that is used to send data to a resource. The underlying request is made with the method specified in the `method` parameter. The data is sent to the server when you close the stream. This method blocks while opening the stream. To continue executing while waiting for the stream, use one of the <xref:System.Net.WebClient.OpenWriteAsync%2A> methods.  \n  \n If the `method` parameter specifies a method that is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not specify an absolute address, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  example:
  - "The following code example reads data from the command line and uses <xref:System.Net.WebClient.OpenWrite%2A> to obtain a stream used to write the data. Note that the <xref:System.IO.Stream> returned by <xref:System.Net.WebClient.OpenWrite%2A> must be closed to send the data.  \n  \n [!code-cpp[WebClient_OpenWrite#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_OpenWrite/CPP/webclient_openwrite.cpp#1)]\n [!code-csharp[WebClient_OpenWrite#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_OpenWrite/CS/webclient_openwrite.cs#1)]\n [!code-vb[WebClient_OpenWrite#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_OpenWrite/VB/webclient_openwrite.vb#1)]"
  syntax:
    content: public System.IO.Stream OpenWrite (string address, string method);
    parameters:
    - id: address
      type: System.String
      description: The URI of the resource to receive the data.
    - id: method
      type: System.String
      description: The method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.
    return:
      type: System.IO.Stream
      description: A <xref href="System.IO.Stream"></xref> used to write data to the resource.
  overload: System.Net.WebClient.OpenWrite*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>address</code> parameter is `null`.
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while opening the stream."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.OpenWrite(System.Uri,System.String)
  commentId: M:System.Net.WebClient.OpenWrite(System.Uri,System.String)
  id: OpenWrite(System.Uri,System.String)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: OpenWrite(Uri, String)
  nameWithType: WebClient.OpenWrite(Uri, String)
  fullName: WebClient.OpenWrite(Uri, String)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Opens a stream for writing data to the specified resource, by using the specified method.
  remarks: "The <xref:System.Net.WebClient.OpenWrite%2A> method returns a writable stream that is used to send data to a resource. This method blocks while opening the stream. To continue executing while waiting for the stream, use one of the <xref:System.Net.WebClient.OpenWriteAsync%2A> methods.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: public System.IO.Stream OpenWrite (Uri address, string method);
    parameters:
    - id: address
      type: System.Uri
      description: The URI of the resource to receive the data.
    - id: method
      type: System.String
      description: The method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.
    return:
      type: System.IO.Stream
      description: A <xref href="System.IO.Stream"></xref> used to write data to the resource.
  overload: System.Net.WebClient.OpenWrite*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>address</code> parameter is `null`.
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while opening the stream."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.OpenWriteAsync(System.Uri,System.String,System.Object)
  commentId: M:System.Net.WebClient.OpenWriteAsync(System.Uri,System.String,System.Object)
  id: OpenWriteAsync(System.Uri,System.String,System.Object)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: OpenWriteAsync(Uri, String, Object)
  nameWithType: WebClient.OpenWriteAsync(Uri, String, Object)
  fullName: WebClient.OpenWriteAsync(Uri, String, Object)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Opens a stream for writing data to the specified resource, using the specified method. This method does not block the calling thread.
  remarks: "This method retrieves a writable stream that is used to send data to a resource. The stream is retrieved asynchronously using thread resources that are automatically allocated from the thread pool. To receive notification when the stream is available, add an event handler to the <xref:System.Net.WebClient.OpenWriteCompleted> event. The contents of the stream are sent to the server when you close the stream.  \n  \n If the `method` parameter specifies a method that is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n This method does not block the calling thread while the stream is being opened. To block while waiting for the stream, use one of the <xref:System.Net.WebClient.OpenWrite%2A> methods.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: public void OpenWriteAsync (Uri address, string method, object userToken);
    parameters:
    - id: address
      type: System.Uri
      description: The URI of the resource to receive the data.
    - id: method
      type: System.String
      description: The method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.
    - id: userToken
      type: System.Object
      description: A user-defined object that is passed to the method invoked when the asynchronous operation completes
  overload: System.Net.WebClient.OpenWriteAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>address</code> parameter is `null`.
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while opening the stream."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.OpenWriteAsync(System.Uri,System.String)
  commentId: M:System.Net.WebClient.OpenWriteAsync(System.Uri,System.String)
  id: OpenWriteAsync(System.Uri,System.String)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: OpenWriteAsync(Uri, String)
  nameWithType: WebClient.OpenWriteAsync(Uri, String)
  fullName: WebClient.OpenWriteAsync(Uri, String)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Opens a stream for writing data to the specified resource. This method does not block the calling thread.
  remarks: "This method retrieves a writable stream that is used to send data to a resource. The stream is retrieved using thread resources that are automatically allocated from the thread pool. To receive notification when the stream is available, add an event handler to the <xref:System.Net.WebClient.OpenWriteCompleted> event. When you close the stream, the thread blocks until the request is sent to `address` and a response is received.  \n  \n This method does not block the calling thread while the stream is being opened. To block while waiting for the stream, use one of the <xref:System.Net.WebClient.OpenWrite%2A> methods.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: public void OpenWriteAsync (Uri address, string method);
    parameters:
    - id: address
      type: System.Uri
      description: The URI of the resource to receive the data.
    - id: method
      type: System.String
      description: The method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.
  overload: System.Net.WebClient.OpenWriteAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>address</code> parameter is `null`.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.OpenWriteAsync(System.Uri)
  commentId: M:System.Net.WebClient.OpenWriteAsync(System.Uri)
  id: OpenWriteAsync(System.Uri)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: OpenWriteAsync(Uri)
  nameWithType: WebClient.OpenWriteAsync(Uri)
  fullName: WebClient.OpenWriteAsync(Uri)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Opens a stream for writing data to the specified resource. This method does not block the calling thread.
  remarks: "This method retrieves a writable stream that is used to send data to a resource. The stream is retrieved using thread resources that are automatically allocated from the thread pool. To receive notification when the stream is available, add an event handler to the <xref:System.Net.WebClient.OpenWriteCompleted> event. When you close the stream, the thread blocks until the request is sent to `address` and a response is received.  \n  \n This method does not block the calling thread while the stream is being opened. To block while waiting for the stream, use one of the <xref:System.Net.WebClient.OpenWrite%2A> methods.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: public void OpenWriteAsync (Uri address);
    parameters:
    - id: address
      type: System.Uri
      description: The URI of the resource to receive the data.
  overload: System.Net.WebClient.OpenWriteAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>address</code> parameter is `null`.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.OpenWriteCompleted
  commentId: E:System.Net.WebClient.OpenWriteCompleted
  id: OpenWriteCompleted
  parent: System.Net.WebClient
  langs:
  - csharp
  name: OpenWriteCompleted
  nameWithType: WebClient.OpenWriteCompleted
  fullName: WebClient.OpenWriteCompleted
  type: Event
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Occurs when an asynchronous operation to open a stream to write data to a resource completes.
  remarks: "This event is raised each time an asynchronous operation to open a stream that is used to send data to a resource completes. These operations are started by calling the <xref:System.Net.WebClient.OpenWriteAsync%2A> methods.  \n  \n The <xref:System.Net.OpenWriteCompletedEventHandler> is the delegate for this event. The <xref:System.Net.OpenWriteCompletedEventArgs> class provides the event handler with event data.  \n  \n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  example:
  - "The following code example demonstrates setting an event handler for this event.  \n  \n [!code-cpp[NCLWebClientAsync#14](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#14)]\n [!code-csharp[NCLWebClientAsync#14](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#14)]\n [!code-vb[NCLWebClientAsync#14](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#14)]"
  syntax:
    content: public event System.Net.OpenWriteCompletedEventHandler OpenWriteCompleted;
    return:
      type: System.Net.OpenWriteCompletedEventHandler
      description: ''
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.OpenWriteTaskAsync(System.String)
  commentId: M:System.Net.WebClient.OpenWriteTaskAsync(System.String)
  id: OpenWriteTaskAsync(System.String)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: OpenWriteTaskAsync(String)
  nameWithType: WebClient.OpenWriteTaskAsync(String)
  fullName: WebClient.OpenWriteTaskAsync(String)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Opens a stream for writing data to the specified resource as an asynchronous operation using a task object.
  remarks: "This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a writable stream to the data resource has been opened. This method does not block the calling thread while the stream is opening.  \n  \n This method retrieves a <xref:System.IO.Stream> instance used to write data to the resource specified by the `address` parameter. The stream is obtained using thread resources that are automatically allocated from the thread pool.  \n  \n> [!NOTE]\n>  You must call <xref:System.IO.Stream.Close%2A?displayProperty=fullName> when you are finished with the <xref:System.IO.Stream> to avoid running out of system resources.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public System.Threading.Tasks.Task<System.IO.Stream> OpenWriteTaskAsync (string address);
    parameters:
    - id: address
      type: System.String
      description: The URI of the resource to receive the data.
    return:
      type: System.Threading.Tasks.Task{System.IO.Stream}
      description: "Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.IO.Stream\"></xref> used to write data to the resource."
  overload: System.Net.WebClient.OpenWriteTaskAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>address</code> parameter is `null`.
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while opening the stream."
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.OpenWriteTaskAsync(System.Uri)
  commentId: M:System.Net.WebClient.OpenWriteTaskAsync(System.Uri)
  id: OpenWriteTaskAsync(System.Uri)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: OpenWriteTaskAsync(Uri)
  nameWithType: WebClient.OpenWriteTaskAsync(Uri)
  fullName: WebClient.OpenWriteTaskAsync(Uri)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Opens a stream for writing data to the specified resource as an asynchronous operation using a task object.
  remarks: "This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a writable stream to the data resource has been opened. This method does not block the calling thread while the stream is opening.  \n  \n This method retrieves a <xref:System.IO.Stream> instance used to write data to the resource specified by the `address` parameter. The stream is obtained using thread resources that are automatically allocated from the thread pool.  \n  \n> [!NOTE]\n>  You must call <xref:System.IO.Stream.Close%2A?displayProperty=fullName> when you are finished with the <xref:System.IO.Stream> to avoid running out of system resources.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public System.Threading.Tasks.Task<System.IO.Stream> OpenWriteTaskAsync (Uri address);
    parameters:
    - id: address
      type: System.Uri
      description: The URI of the resource to receive the data.
    return:
      type: System.Threading.Tasks.Task{System.IO.Stream}
      description: "Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.IO.Stream\"></xref> used to write data to the resource."
  overload: System.Net.WebClient.OpenWriteTaskAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>address</code> parameter is `null`.
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while opening the stream."
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.OpenWriteTaskAsync(System.String,System.String)
  commentId: M:System.Net.WebClient.OpenWriteTaskAsync(System.String,System.String)
  id: OpenWriteTaskAsync(System.String,System.String)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: OpenWriteTaskAsync(String, String)
  nameWithType: WebClient.OpenWriteTaskAsync(String, String)
  fullName: WebClient.OpenWriteTaskAsync(String, String)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Opens a stream for writing data to the specified resource as an asynchronous operation using a task object.
  remarks: "This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a writable stream to the data resource has been opened. This method does not block the calling thread while the stream is opening.  \n  \n This method retrieves a <xref:System.IO.Stream> instance used to write data to the resource specified by the `address` parameter. The stream is obtained using thread resources that are automatically allocated from the thread pool.  \n  \n> [!NOTE]\n>  You must call <xref:System.IO.Stream.Close%2A?displayProperty=fullName> when you are finished with the <xref:System.IO.Stream> to avoid running out of system resources.  \n  \n If the `method` parameter specifies a method that is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public System.Threading.Tasks.Task<System.IO.Stream> OpenWriteTaskAsync (string address, string method);
    parameters:
    - id: address
      type: System.String
      description: The URI of the resource to receive the data.
    - id: method
      type: System.String
      description: The method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.
    return:
      type: System.Threading.Tasks.Task{System.IO.Stream}
      description: "Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.IO.Stream\"></xref> used to write data to the resource."
  overload: System.Net.WebClient.OpenWriteTaskAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>address</code> parameter is `null`.
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while opening the stream."
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.OpenWriteTaskAsync(System.Uri,System.String)
  commentId: M:System.Net.WebClient.OpenWriteTaskAsync(System.Uri,System.String)
  id: OpenWriteTaskAsync(System.Uri,System.String)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: OpenWriteTaskAsync(Uri, String)
  nameWithType: WebClient.OpenWriteTaskAsync(Uri, String)
  fullName: WebClient.OpenWriteTaskAsync(Uri, String)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Opens a stream for writing data to the specified resource as an asynchronous operation using a task object.
  remarks: "This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a writable stream to the data resource has been opened. This method does not block the calling thread while the stream is opening.  \n  \n This method retrieves a <xref:System.IO.Stream> instance used to write data to the resource specified by the `address` parameter. The stream is obtained using thread resources that are automatically allocated from the thread pool.  \n  \n> [!NOTE]\n>  You must call <xref:System.IO.Stream.Close%2A?displayProperty=fullName> when you are finished with the <xref:System.IO.Stream> to avoid running out of system resources.  \n  \n If the `method` parameter specifies a method that is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public System.Threading.Tasks.Task<System.IO.Stream> OpenWriteTaskAsync (Uri address, string method);
    parameters:
    - id: address
      type: System.Uri
      description: The URI of the resource to receive the data.
    - id: method
      type: System.String
      description: The method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.
    return:
      type: System.Threading.Tasks.Task{System.IO.Stream}
      description: "Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.IO.Stream\"></xref> used to write data to the resource."
  overload: System.Net.WebClient.OpenWriteTaskAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>address</code> parameter is `null`.
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while opening the stream."
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.Proxy
  commentId: P:System.Net.WebClient.Proxy
  id: Proxy
  parent: System.Net.WebClient
  langs:
  - csharp
  name: Proxy
  nameWithType: WebClient.Proxy
  fullName: WebClient.Proxy
  type: Property
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Gets or sets the proxy used by this <xref href="System.Net.WebClient"></xref> object.
  remarks: "The <xref:System.Net.WebClient.Proxy%2A> property identifies the <xref:System.Net.IWebProxy> instance that communicates with remote servers on behalf of this <xref:System.Net.WebClient> object. The proxy is set by the system using configuration files and the Internet Explorer Local Area Network settings. To specify that no proxy should be used, set the <xref:System.Net.WebClient.Proxy%2A> property to the proxy instance returned by the <xref:System.Net.GlobalProxySelection.GetEmptyWebProxy%2A> method.  \n  \n For information on automatic proxy detection, see [Automatic Proxy Detection](~/docs/framework/network-programming/automatic-proxy-detection.md)."
  syntax:
    content: public System.Net.IWebProxy Proxy { get; set; }
    return:
      type: System.Net.IWebProxy
      description: An <xref href="System.Net.IWebProxy"></xref> instance used to send requests.
  overload: System.Net.WebClient.Proxy*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <xref href="System.Net.WebClient.Proxy"></xref> is set to `null`.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.QueryString
  commentId: P:System.Net.WebClient.QueryString
  id: QueryString
  parent: System.Net.WebClient
  langs:
  - csharp
  name: QueryString
  nameWithType: WebClient.QueryString
  fullName: WebClient.QueryString
  type: Property
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Gets or sets a collection of query name/value pairs associated with the request.
  remarks: The <xref:System.Net.WebClient.QueryString%2A> property contains a <xref:System.Collections.Specialized.NameValueCollection> instance containing name/value pairs that are appended to the URI as a query string. The contents of the <xref:System.Net.WebClient.QueryString%2A> property are preceded by a question mark (?), and name/value pairs are separated from one another by an ampersand (&).
  example:
  - "The following code example takes user input from the command line and builds a <xref:System.Collections.Specialized.NameValueCollection> that is assigned to the <xref:System.Net.WebClient.QueryString%2A> property. It then downloads the response from the server to a local file.  \n  \n [!code-cpp[WebClient_QueryString#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_QueryString/CPP/webclient_querystring.cpp#1)]\n [!code-csharp[WebClient_QueryString#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_QueryString/CS/webclient_querystring.cs#1)]\n [!code-vb[WebClient_QueryString#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_QueryString/VB/webclient_querystring.vb#1)]"
  syntax:
    content: public System.Collections.Specialized.NameValueCollection QueryString { get; set; }
    return:
      type: System.Collections.Specialized.NameValueCollection
      description: A <xref href="System.Collections.Specialized.NameValueCollection"></xref> that contains query name/value pairs associated with the request. If no pairs are associated with the request, the value is an empty <xref href="System.Collections.Specialized.NameValueCollection"></xref>.
  overload: System.Net.WebClient.QueryString*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.ResponseHeaders
  commentId: P:System.Net.WebClient.ResponseHeaders
  id: ResponseHeaders
  parent: System.Net.WebClient
  langs:
  - csharp
  name: ResponseHeaders
  nameWithType: WebClient.ResponseHeaders
  fullName: WebClient.ResponseHeaders
  type: Property
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Gets a collection of header name/value pairs associated with the response.
  remarks: The <xref:System.Net.WebClient.ResponseHeaders%2A> property contains a <xref:System.Net.WebHeaderCollection> instance containing header information the <xref:System.Net.WebClient> receives with the response.
  example:
  - "The following code example downloads and displays the <xref:System.Net.WebClient.ResponseHeaders%2A> returned by a server.  \n  \n [!code-cpp[WebClient_BaseAddress_ResponseHeaders#2](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_BaseAddress_ResponseHeaders/CPP/webclient_baseaddress_responseheaders.cpp#2)]\n [!code-csharp[WebClient_BaseAddress_ResponseHeaders#2](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_BaseAddress_ResponseHeaders/CS/webclient_baseaddress_responseheaders.cs#2)]\n [!code-vb[WebClient_BaseAddress_ResponseHeaders#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_BaseAddress_ResponseHeaders/VB/webclient_baseaddress_responseheaders.vb#2)]"
  syntax:
    content: public System.Net.WebHeaderCollection ResponseHeaders { get; }
    return:
      type: System.Net.WebHeaderCollection
      description: A <xref href="System.Net.WebHeaderCollection"></xref> containing header name/value pairs associated with the response, or `null` if no response has been received.
  overload: System.Net.WebClient.ResponseHeaders*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.UploadData(System.String,System.Byte[])
  commentId: M:System.Net.WebClient.UploadData(System.String,System.Byte[])
  id: UploadData(System.String,System.Byte[])
  parent: System.Net.WebClient
  langs:
  - csharp
  name: UploadData(String, Byte[])
  nameWithType: WebClient.UploadData(String, Byte[])
  fullName: WebClient.UploadData(String, Byte[])
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Uploads a data buffer to a resource identified by a URI.
  remarks: "The <xref:System.Net.WebClient.UploadData%2A> method sends a data buffer to a resource.  \n  \n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used. If the underlying request is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \n  \n The <xref:System.Net.WebClient.UploadData%2A> method sends the content of `data` to the server without encoding it. This method blocks while uploading the data. To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadDataAsync%2A> methods.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  example:
  - "The following code example converts a string entered from the console to a <xref:System.Byte> array and posts the array to the specified server using <xref:System.Net.WebClient.UploadData%2A>. Any response from the server is displayed to the console.  \n  \n [!code-cpp[WebClient_UpLoadData2#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_UpLoadData2/CPP/webclient_uploaddata2.cpp#1)]\n [!code-csharp[WebClient_UpLoadData2#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_UpLoadData2/CS/webclient_uploaddata2.cs#1)]\n [!code-vb[WebClient_UpLoadData2#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_UpLoadData2/VB/webclient_uploaddata2.vb#1)]"
  syntax:
    content: public byte[] UploadData (string address, byte[] data);
    parameters:
    - id: address
      type: System.String
      description: The URI of the resource to receive the data.
    - id: data
      type: System.Byte[]
      description: The data buffer to send to the resource.
    return:
      type: System.Byte[]
      description: A <xref href="System.Byte"></xref> array containing the body of the response from the resource.
  overload: System.Net.WebClient.UploadData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>address</code> parameter is `null`.
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid.  \n  \n -or-  \n  \n <code>data</code> is `null`.  \n  \n -or-  \n  \n An error occurred while sending the data.  \n  \n -or-  \n  \n There was no response from the server hosting the resource."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.UploadData(System.Uri,System.Byte[])
  commentId: M:System.Net.WebClient.UploadData(System.Uri,System.Byte[])
  id: UploadData(System.Uri,System.Byte[])
  parent: System.Net.WebClient
  langs:
  - csharp
  name: UploadData(Uri, Byte[])
  nameWithType: WebClient.UploadData(Uri, Byte[])
  fullName: WebClient.UploadData(Uri, Byte[])
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Uploads a data buffer to a resource identified by a URI.
  remarks: "The <xref:System.Net.WebClient.UploadData%2A> method sends a data buffer to a resource.  \n  \n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used. If the underlying request is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \n  \n The <xref:System.Net.WebClient.UploadData%2A> method sends the content of `data` to the server without encoding it. This method blocks while uploading the data. To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadDataAsync%2A> methods.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: public byte[] UploadData (Uri address, byte[] data);
    parameters:
    - id: address
      type: System.Uri
      description: The URI of the resource to receive the data.
    - id: data
      type: System.Byte[]
      description: The data buffer to send to the resource.
    return:
      type: System.Byte[]
      description: A <xref href="System.Byte"></xref> array containing the body of the response from the resource.
  overload: System.Net.WebClient.UploadData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>address</code> parameter is `null`.
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid.  \n  \n -or-  \n  \n <code>data</code> is `null`.  \n  \n -or-  \n  \n An error occurred while sending the data.  \n  \n -or-  \n  \n There was no response from the server hosting the resource."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.UploadData(System.String,System.String,System.Byte[])
  commentId: M:System.Net.WebClient.UploadData(System.String,System.String,System.Byte[])
  id: UploadData(System.String,System.String,System.Byte[])
  parent: System.Net.WebClient
  langs:
  - csharp
  name: UploadData(String, String, Byte[])
  nameWithType: WebClient.UploadData(String, String, Byte[])
  fullName: WebClient.UploadData(String, String, Byte[])
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Uploads a data buffer to the specified resource, using the specified method.
  remarks: "The <xref:System.Net.WebClient.UploadData%2A> method sends a data buffer to a resource using the HTTP method specified in the `method` parameter, and returns any response from the server. This method blocks while uploading the data. To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadDataAsync%2A> methods.  \n  \n The <xref:System.Net.WebClient.UploadData%2A> method sends the content of `data` to the server without encoding it.  \n  \n If the `method` parameter specifies a verb that is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  example:
  - "The following code example converts a string entered from the console into a byte array and posts the array to the specified server using <xref:System.Net.WebClient.UploadData%2A>. Any response from the server is displayed to the console.  \n  \n [!code-cpp[WebClient_UpLoadData_Headers#2](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_UpLoadData_Headers/CPP/webclient_uploaddata_headers.cpp#2)]\n [!code-csharp[WebClient_UpLoadData_Headers#2](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_UpLoadData_Headers/CS/webclient_uploaddata_headers.cs#2)]\n [!code-vb[WebClient_UpLoadData_Headers#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_UpLoadData_Headers/VB/webclient_uploaddata_headers.vb#2)]"
  syntax:
    content: public byte[] UploadData (string address, string method, byte[] data);
    parameters:
    - id: address
      type: System.String
      description: The URI of the resource to receive the data.
    - id: method
      type: System.String
      description: The HTTP method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.
    - id: data
      type: System.Byte[]
      description: The data buffer to send to the resource.
    return:
      type: System.Byte[]
      description: A <xref href="System.Byte"></xref> array containing the body of the response from the resource.
  overload: System.Net.WebClient.UploadData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>address</code> parameter is `null`.
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid.  \n  \n -or-  \n  \n <code>data</code> is `null`.  \n  \n -or-  \n  \n An error occurred while uploading the data.  \n  \n -or-  \n  \n There was no response from the server hosting the resource."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.UploadData(System.Uri,System.String,System.Byte[])
  commentId: M:System.Net.WebClient.UploadData(System.Uri,System.String,System.Byte[])
  id: UploadData(System.Uri,System.String,System.Byte[])
  parent: System.Net.WebClient
  langs:
  - csharp
  name: UploadData(Uri, String, Byte[])
  nameWithType: WebClient.UploadData(Uri, String, Byte[])
  fullName: WebClient.UploadData(Uri, String, Byte[])
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Uploads a data buffer to the specified resource, using the specified method.
  remarks: "The <xref:System.Net.WebClient.UploadData%2A> method sends a data buffer to a resource using the HTTP method specified in the `method` parameter, and returns any response from the server. This method blocks while uploading the data. To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadDataAsync%2A> methods.  \n  \n The <xref:System.Net.WebClient.UploadData%2A> method sends the content of `data` to the server without encoding it.  \n  \n If the `method` parameter specifies a verb that is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: public byte[] UploadData (Uri address, string method, byte[] data);
    parameters:
    - id: address
      type: System.Uri
      description: The URI of the resource to receive the data.
    - id: method
      type: System.String
      description: The HTTP method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.
    - id: data
      type: System.Byte[]
      description: The data buffer to send to the resource.
    return:
      type: System.Byte[]
      description: A <xref href="System.Byte"></xref> array containing the body of the response from the resource.
  overload: System.Net.WebClient.UploadData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>address</code> parameter is `null`.
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid.  \n  \n -or-  \n  \n <code>data</code> is `null`.  \n  \n -or-  \n  \n An error occurred while uploading the data.  \n  \n -or-  \n  \n There was no response from the server hosting the resource."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.UploadDataAsync(System.Uri,System.String,System.Byte[])
  commentId: M:System.Net.WebClient.UploadDataAsync(System.Uri,System.String,System.Byte[])
  id: UploadDataAsync(System.Uri,System.String,System.Byte[])
  parent: System.Net.WebClient
  langs:
  - csharp
  name: UploadDataAsync(Uri, String, Byte[])
  nameWithType: WebClient.UploadDataAsync(Uri, String, Byte[])
  fullName: WebClient.UploadDataAsync(Uri, String, Byte[])
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Uploads a data buffer to a resource identified by a URI, using the specified method. This method does not block the calling thread.
  remarks: "This method sends a data buffer to a resource. The data buffer is sent asynchronously using thread resources that are automatically allocated from the thread pool. The data is not encoded. To receive notification when the data upload completes, add an event handler to the <xref:System.Net.WebClient.UploadDataCompleted> event.  \n  \n This method does not block the calling thread while the data is being sent. To send data and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadData%2A> methods.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: public void UploadDataAsync (Uri address, string method, byte[] data);
    parameters:
    - id: address
      type: System.Uri
      description: The URI of the resource to receive the data.
    - id: method
      type: System.String
      description: The method used to send the data to the resource. If `null`, the default is POST for http and STOR for ftp.
    - id: data
      type: System.Byte[]
      description: The data buffer to send to the resource.
  overload: System.Net.WebClient.UploadDataAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>address</code> parameter is `null`.
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while opening the stream.  \n  \n -or-  \n  \n There was no response from the server hosting the resource."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.UploadDataAsync(System.Uri,System.String,System.Byte[],System.Object)
  commentId: M:System.Net.WebClient.UploadDataAsync(System.Uri,System.String,System.Byte[],System.Object)
  id: UploadDataAsync(System.Uri,System.String,System.Byte[],System.Object)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: UploadDataAsync(Uri, String, Byte[], Object)
  nameWithType: WebClient.UploadDataAsync(Uri, String, Byte[], Object)
  fullName: WebClient.UploadDataAsync(Uri, String, Byte[], Object)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Uploads a data buffer to a resource identified by a URI, using the specified method and identifying token.
  remarks: "This method sends a data buffer to a resource. The data buffer is sent asynchronously using thread resources that are automatically allocated from the thread pool. The data is not encoded. To receive notification when the data upload completes, add an event handler to the <xref:System.Net.WebClient.UploadDataCompleted> event.  \n  \n This method does not block the calling thread while the data is being sent. To send data and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadData%2A> methods.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: public void UploadDataAsync (Uri address, string method, byte[] data, object userToken);
    parameters:
    - id: address
      type: System.Uri
      description: The URI of the resource to receive the data.
    - id: method
      type: System.String
      description: The method used to send the data to the resource. If `null`, the default is POST for http and STOR for ftp.
    - id: data
      type: System.Byte[]
      description: The data buffer to send to the resource.
    - id: userToken
      type: System.Object
      description: A user-defined object that is passed to the method invoked when the asynchronous operation completes.
  overload: System.Net.WebClient.UploadDataAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>address</code> parameter is `null`.
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while opening the stream.  \n  \n -or-  \n  \n There was no response from the server hosting the resource."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.UploadDataAsync(System.Uri,System.Byte[])
  commentId: M:System.Net.WebClient.UploadDataAsync(System.Uri,System.Byte[])
  id: UploadDataAsync(System.Uri,System.Byte[])
  parent: System.Net.WebClient
  langs:
  - csharp
  name: UploadDataAsync(Uri, Byte[])
  nameWithType: WebClient.UploadDataAsync(Uri, Byte[])
  fullName: WebClient.UploadDataAsync(Uri, Byte[])
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Uploads a data buffer to a resource identified by a URI, using the POST method. This method does not block the calling thread.
  remarks: "This method sends a data buffer to a resource. The data buffer is sent asynchronously using thread resources that are automatically allocated from the thread pool. The data is not encoded. To receive notification when the data upload completes, add an event handler to the <xref:System.Net.WebClient.UploadDataCompleted> event.  \n  \n This method does not block the calling thread while the data is being sent. To send data and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadData%2A> methods.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: public void UploadDataAsync (Uri address, byte[] data);
    parameters:
    - id: address
      type: System.Uri
      description: The URI of the resource to receive the data.
    - id: data
      type: System.Byte[]
      description: The data buffer to send to the resource.
  overload: System.Net.WebClient.UploadDataAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>address</code> parameter is `null`.
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while opening the stream.  \n  \n -or-  \n  \n There was no response from the server hosting the resource."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.UploadDataCompleted
  commentId: E:System.Net.WebClient.UploadDataCompleted
  id: UploadDataCompleted
  parent: System.Net.WebClient
  langs:
  - csharp
  name: UploadDataCompleted
  nameWithType: WebClient.UploadDataCompleted
  fullName: WebClient.UploadDataCompleted
  type: Event
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Occurs when an asynchronous data-upload operation completes.
  remarks: "This event is raised each time an asynchronous data upload operation completes. Asynchronous data uploads are started by calling the <xref:System.Net.WebClient.UploadDataAsync%2A> methods.  \n  \n The <xref:System.Net.UploadDataCompletedEventHandler> is the delegate for this event. The <xref:System.Net.UploadDataCompletedEventArgs> class provides the event handler with event data.  \n  \n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  example:
  - "The following code example demonstrates setting an event handler for this event.  \n  \n [!code-cpp[NCLWebClientAsync#36](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#36)]\n [!code-csharp[NCLWebClientAsync#36](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#36)]\n [!code-vb[NCLWebClientAsync#36](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#36)]"
  syntax:
    content: public event System.Net.UploadDataCompletedEventHandler UploadDataCompleted;
    return:
      type: System.Net.UploadDataCompletedEventHandler
      description: ''
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.UploadDataTaskAsync(System.String,System.Byte[])
  commentId: M:System.Net.WebClient.UploadDataTaskAsync(System.String,System.Byte[])
  id: UploadDataTaskAsync(System.String,System.Byte[])
  parent: System.Net.WebClient
  langs:
  - csharp
  name: UploadDataTaskAsync(String, Byte[])
  nameWithType: WebClient.UploadDataTaskAsync(String, Byte[])
  fullName: WebClient.UploadDataTaskAsync(String, Byte[])
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Uploads a data buffer that contains a <xref href="System.Byte"></xref> array to the URI specified as an asynchronous operation using a task object.
  remarks: "This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a data buffer has been uploaded to the resource.  \n  \n This method sends a data buffer to a resource. The data buffer is sent asynchronously using thread resources that are automatically allocated from the thread pool. The data is not encoded.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public System.Threading.Tasks.Task<byte[]> UploadDataTaskAsync (string address, byte[] data);
    parameters:
    - id: address
      type: System.String
      description: The URI of the resource to receive the data.
    - id: data
      type: System.Byte[]
      description: The data buffer to send to the resource.
    return:
      type: System.Threading.Tasks.Task{System.Byte[]}
      description: "Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the body of the response received from the resource when the data buffer was uploaded."
  overload: System.Net.WebClient.UploadDataTaskAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>address</code> parameter is `null`.
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while opening the stream.  \n  \n -or-  \n  \n There was no response from the server hosting the resource."
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.UploadDataTaskAsync(System.Uri,System.Byte[])
  commentId: M:System.Net.WebClient.UploadDataTaskAsync(System.Uri,System.Byte[])
  id: UploadDataTaskAsync(System.Uri,System.Byte[])
  parent: System.Net.WebClient
  langs:
  - csharp
  name: UploadDataTaskAsync(Uri, Byte[])
  nameWithType: WebClient.UploadDataTaskAsync(Uri, Byte[])
  fullName: WebClient.UploadDataTaskAsync(Uri, Byte[])
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Uploads a data buffer that contains a <xref href="System.Byte"></xref> array to the URI specified as an asynchronous operation using a task object.
  remarks: "This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a data buffer has been uploaded to the resource.  \n  \n This method sends a data buffer to a resource. The data buffer is sent asynchronously using thread resources that are automatically allocated from the thread pool. The data is not encoded.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public System.Threading.Tasks.Task<byte[]> UploadDataTaskAsync (Uri address, byte[] data);
    parameters:
    - id: address
      type: System.Uri
      description: The URI of the resource to receive the data.
    - id: data
      type: System.Byte[]
      description: The data buffer to send to the resource.
    return:
      type: System.Threading.Tasks.Task{System.Byte[]}
      description: "Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the body of the response received from the resource when the data buffer was uploaded."
  overload: System.Net.WebClient.UploadDataTaskAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>address</code> parameter is `null`.
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while opening the stream.  \n  \n -or-  \n  \n There was no response from the server hosting the resource."
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.UploadDataTaskAsync(System.String,System.String,System.Byte[])
  commentId: M:System.Net.WebClient.UploadDataTaskAsync(System.String,System.String,System.Byte[])
  id: UploadDataTaskAsync(System.String,System.String,System.Byte[])
  parent: System.Net.WebClient
  langs:
  - csharp
  name: UploadDataTaskAsync(String, String, Byte[])
  nameWithType: WebClient.UploadDataTaskAsync(String, String, Byte[])
  fullName: WebClient.UploadDataTaskAsync(String, String, Byte[])
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Uploads a data buffer that contains a <xref href="System.Byte"></xref> array to the URI specified as an asynchronous operation using a task object.
  remarks: "This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a data buffer has been uploaded to the resource.  \n  \n This method sends a data buffer to a resource. The data buffer is sent asynchronously using thread resources that are automatically allocated from the thread pool. The data is not encoded.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public System.Threading.Tasks.Task<byte[]> UploadDataTaskAsync (string address, string method, byte[] data);
    parameters:
    - id: address
      type: System.String
      description: The URI of the resource to receive the data.
    - id: method
      type: System.String
      description: The method used to send the data to the resource. If `null`, the default is POST for http and STOR for ftp.
    - id: data
      type: System.Byte[]
      description: The data buffer to send to the resource.
    return:
      type: System.Threading.Tasks.Task{System.Byte[]}
      description: "Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the body of the response received from the resource when the data buffer was uploaded."
  overload: System.Net.WebClient.UploadDataTaskAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>address</code> parameter is `null`.
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while opening the stream.  \n  \n -or-  \n  \n There was no response from the server hosting the resource."
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.UploadDataTaskAsync(System.Uri,System.String,System.Byte[])
  commentId: M:System.Net.WebClient.UploadDataTaskAsync(System.Uri,System.String,System.Byte[])
  id: UploadDataTaskAsync(System.Uri,System.String,System.Byte[])
  parent: System.Net.WebClient
  langs:
  - csharp
  name: UploadDataTaskAsync(Uri, String, Byte[])
  nameWithType: WebClient.UploadDataTaskAsync(Uri, String, Byte[])
  fullName: WebClient.UploadDataTaskAsync(Uri, String, Byte[])
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Uploads a data buffer that contains a <xref href="System.Byte"></xref> array to the URI specified as an asynchronous operation using a task object.
  remarks: "This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the a data buffer has been uploaded to the resource.  \n  \n This method sends a data buffer to a resource. The data buffer is sent asynchronously using thread resources that are automatically allocated from the thread pool. The data is not encoded.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public System.Threading.Tasks.Task<byte[]> UploadDataTaskAsync (Uri address, string method, byte[] data);
    parameters:
    - id: address
      type: System.Uri
      description: The URI of the resource to receive the data.
    - id: method
      type: System.String
      description: The method used to send the data to the resource. If `null`, the default is POST for http and STOR for ftp.
    - id: data
      type: System.Byte[]
      description: The data buffer to send to the resource.
    return:
      type: System.Threading.Tasks.Task{System.Byte[]}
      description: "Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the body of the response received from the resource when the data buffer was uploaded."
  overload: System.Net.WebClient.UploadDataTaskAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>address</code> parameter is `null`.
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while opening the stream.  \n  \n -or-  \n  \n There was no response from the server hosting the resource."
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.UploadFile(System.String,System.String)
  commentId: M:System.Net.WebClient.UploadFile(System.String,System.String)
  id: UploadFile(System.String,System.String)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: UploadFile(String, String)
  nameWithType: WebClient.UploadFile(String, String)
  fullName: WebClient.UploadFile(String, String)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Uploads the specified local file to a resource with the specified URI.
  remarks: "The <xref:System.Net.WebClient.UploadFile%2A> method sends a local file to a resource. This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n This method blocks while uploading the file. To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadFileAsync%2A> methods.  \n  \n The `POST` method is defined by HTTP. If the underlying request does not use HTTP and `POST` is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  example:
  - "The following code example uploads the specified file to the specified URI using <xref:System.Net.WebClient.UploadFile%2A>. Any response returned by the server is displayed on the console.  \n  \n [!code-cpp[WebClient_UpLoadFile#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_UpLoadFile/CPP/webclient_uploadfile.cpp#1)]\n [!code-csharp[WebClient_UpLoadFile#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_UpLoadFile/CS/webclient_uploadfile.cs#1)]\n [!code-vb[WebClient_UpLoadFile#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_UpLoadFile/VB/webclient_uploadfile.vb#1)]  \n  \n The following code example shows an ASP.NET page that can accept posted files and is suitable for use with the <xref:System.Net.WebClient.UploadFile%2A> method. The page must reside on a Web server. Its address provides the value for the `address` parameter of the <xref:System.Net.WebClient.UploadFile%2A> method.  \n  \n <!-- TODO: review snippet reference [!code-csharp[NCLWebClientAsp#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsp/CS/fileuploadercs.aspx#1)]  -->\n <!-- TODO: review snippet reference [!code-vb[NCLWebClientAsp#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsp/VB/fileuploadervb.aspx#1)]  -->"
  syntax:
    content: public byte[] UploadFile (string address, string fileName);
    parameters:
    - id: address
      type: System.String
      description: The URI of the resource to receive the file. For example, ftp://localhost/samplefile.txt.
    - id: fileName
      type: System.String
      description: The file to send to the resource. For example, "samplefile.txt".
    return:
      type: System.Byte[]
      description: A <xref href="System.Byte"></xref> array containing the body of the response from the resource.
  overload: System.Net.WebClient.UploadFile*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>fileName</code> parameter is `null`."
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid.  \n  \n -or-  \n  \n <code>fileName</code> is `null`, is <xref href=\"System.String.Empty\"></xref>, contains invalid characters, or does not exist.  \n  \n -or-  \n  \n An error occurred while uploading the file.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.  \n  \n -or-  \n  \n The `Content-type` header begins with `multipart`."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.UploadFile(System.Uri,System.String)
  commentId: M:System.Net.WebClient.UploadFile(System.Uri,System.String)
  id: UploadFile(System.Uri,System.String)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: UploadFile(Uri, String)
  nameWithType: WebClient.UploadFile(Uri, String)
  fullName: WebClient.UploadFile(Uri, String)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Uploads the specified local file to a resource with the specified URI.
  remarks: "The <xref:System.Net.WebClient.UploadFile%2A> method sends a local file to a resource. This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n This method blocks while uploading the file. To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadFileAsync%2A> methods.  \n  \n The `POST` method is defined by HTTP. If the underlying request does not use HTTP and `POST` is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: public byte[] UploadFile (Uri address, string fileName);
    parameters:
    - id: address
      type: System.Uri
      description: The URI of the resource to receive the file. For example, ftp://localhost/samplefile.txt.
    - id: fileName
      type: System.String
      description: The file to send to the resource. For example, "samplefile.txt".
    return:
      type: System.Byte[]
      description: A <xref href="System.Byte"></xref> array containing the body of the response from the resource.
  overload: System.Net.WebClient.UploadFile*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>fileName</code> parameter is `null`."
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid.  \n  \n -or-  \n  \n <code>fileName</code> is `null`, is <xref href=\"System.String.Empty\"></xref>, contains invalid characters, or does not exist.  \n  \n -or-  \n  \n An error occurred while uploading the file.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.  \n  \n -or-  \n  \n The `Content-type` header begins with `multipart`."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.UploadFile(System.String,System.String,System.String)
  commentId: M:System.Net.WebClient.UploadFile(System.String,System.String,System.String)
  id: UploadFile(System.String,System.String,System.String)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: UploadFile(String, String, String)
  nameWithType: WebClient.UploadFile(String, String, String)
  fullName: WebClient.UploadFile(String, String, String)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Uploads the specified local file to the specified resource, using the specified method.
  remarks: "When address specifies an HTTP resource, the <xref:System.Net.WebClient.UploadFile%2A> method sends a local file to a resource using the HTTP method specified in the `method` parameter and returns any response from the server. This method blocks while uploading the file. To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadFileAsync%2A> methods.  \n  \n If the `method` parameter specifies a verb that is not understood by the server or the `address` resource, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  example:
  - "The following code example uploads the specified file to the specified URI using <xref:System.Net.WebClient.UploadFile%2A>. Any response returned by the server is displayed on the console.  \n  \n [!code-cpp[WebClient_UpLoadFile2#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_UpLoadFile2/CPP/webclient_uploadfile2.cpp#1)]\n [!code-csharp[WebClient_UpLoadFile2#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_UpLoadFile2/CS/webclient_uploadfile2.cs#1)]\n [!code-vb[WebClient_UpLoadFile2#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_UpLoadFile2/VB/webclient_uploadfile2.vb#1)]  \n  \n The following code example shows an ASP.NET page that can accept posted files and is suitable for use with the <xref:System.Net.WebClient.UploadFile%2A> method. The page must reside on a Web server. Its address provides the value for the `address` parameter of the <xref:System.Net.WebClient.UploadFile%2A> method.  \n  \n <!-- TODO: review snippet reference [!code-csharp[NCLWebClientAsp#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsp/CS/fileuploadercs.aspx#1)]  -->\n <!-- TODO: review snippet reference [!code-vb[NCLWebClientAsp#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsp/VB/fileuploadervb.aspx#1)]  -->"
  syntax:
    content: public byte[] UploadFile (string address, string method, string fileName);
    parameters:
    - id: address
      type: System.String
      description: The URI of the resource to receive the file.
    - id: method
      type: System.String
      description: The method used to send the file to the resource. If `null`, the default is POST for http and STOR for ftp.
    - id: fileName
      type: System.String
      description: The file to send to the resource.
    return:
      type: System.Byte[]
      description: A <xref href="System.Byte"></xref> array containing the body of the response from the resource.
  overload: System.Net.WebClient.UploadFile*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>fileName</code> parameter is `null`."
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid.  \n  \n -or-  \n  \n <code>fileName</code> is `null`, is <xref href=\"System.String.Empty\"></xref>, contains invalid characters, or does not exist.  \n  \n -or-  \n  \n An error occurred while uploading the file.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.  \n  \n -or-  \n  \n The `Content-type` header begins with `multipart`."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.UploadFile(System.Uri,System.String,System.String)
  commentId: M:System.Net.WebClient.UploadFile(System.Uri,System.String,System.String)
  id: UploadFile(System.Uri,System.String,System.String)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: UploadFile(Uri, String, String)
  nameWithType: WebClient.UploadFile(Uri, String, String)
  fullName: WebClient.UploadFile(Uri, String, String)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Uploads the specified local file to the specified resource, using the specified method.
  remarks: "When address specifies an HTTP resource, the <xref:System.Net.WebClient.UploadFile%2A> method sends a local file to a resource using the HTTP method specified in the `method` parameter and returns any response from the server. This method blocks while uploading the file. To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadFileAsync%2A> methods.  \n  \n If the `method` parameter specifies a verb that is not understood by the server or the `address` resource, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: public byte[] UploadFile (Uri address, string method, string fileName);
    parameters:
    - id: address
      type: System.Uri
      description: The URI of the resource to receive the file.
    - id: method
      type: System.String
      description: The method used to send the file to the resource. If `null`, the default is POST for http and STOR for ftp.
    - id: fileName
      type: System.String
      description: The file to send to the resource.
    return:
      type: System.Byte[]
      description: A <xref href="System.Byte"></xref> array containing the body of the response from the resource.
  overload: System.Net.WebClient.UploadFile*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>fileName</code> parameter is `null`."
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid.  \n  \n -or-  \n  \n <code>fileName</code> is `null`, is <xref href=\"System.String.Empty\"></xref>, contains invalid characters, or does not exist.  \n  \n -or-  \n  \n An error occurred while uploading the file.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.  \n  \n -or-  \n  \n The `Content-type` header begins with `multipart`."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.UploadFileAsync(System.Uri,System.String)
  commentId: M:System.Net.WebClient.UploadFileAsync(System.Uri,System.String)
  id: UploadFileAsync(System.Uri,System.String)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: UploadFileAsync(Uri, String)
  nameWithType: WebClient.UploadFileAsync(Uri, String)
  fullName: WebClient.UploadFileAsync(Uri, String)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Uploads the specified local file to the specified resource, using the POST method. This method does not block the calling thread.
  remarks: "The file is sent asynchronously using thread resources that are automatically allocated from the thread pool. To receive notification when the file upload completes, add an event handler to the <xref:System.Net.WebClient.UploadFileCompleted> event.  \n  \n This method does not block the calling thread while the file is being sent. To send a file and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadFile%2A> methods.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: public void UploadFileAsync (Uri address, string fileName);
    parameters:
    - id: address
      type: System.Uri
      description: The URI of the resource to receive the file. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.
    - id: fileName
      type: System.String
      description: The file to send to the resource.
  overload: System.Net.WebClient.UploadFileAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>fileName</code> parameter is `null`."
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n <code>fileName</code> is `null`, is <xref href=\"System.String.Empty\"></xref>, contains invalid character, or the specified path to the file does not exist.  \n  \n -or-  \n  \n An error occurred while opening the stream.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.  \n  \n -or-  \n  \n The `Content-type` header begins with `multipart`."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.UploadFileAsync(System.Uri,System.String,System.String)
  commentId: M:System.Net.WebClient.UploadFileAsync(System.Uri,System.String,System.String)
  id: UploadFileAsync(System.Uri,System.String,System.String)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: UploadFileAsync(Uri, String, String)
  nameWithType: WebClient.UploadFileAsync(Uri, String, String)
  fullName: WebClient.UploadFileAsync(Uri, String, String)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Uploads the specified local file to the specified resource, using the POST method. This method does not block the calling thread.
  remarks: "The file is sent asynchronously using thread resources that are automatically allocated from the thread pool. To receive notification when the file upload completes, add an event handler to the <xref:System.Net.WebClient.UploadFileCompleted> event.  \n  \n This method does not block the calling thread while the file is being sent. To send a file and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadFile%2A> methods.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: public void UploadFileAsync (Uri address, string method, string fileName);
    parameters:
    - id: address
      type: System.Uri
      description: The URI of the resource to receive the file. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.
    - id: method
      type: System.String
      description: The method used to send the data to the resource. If `null`, the default is POST for http and STOR for ftp.
    - id: fileName
      type: System.String
      description: The file to send to the resource.
  overload: System.Net.WebClient.UploadFileAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>fileName</code> parameter is `null`."
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n <code>fileName</code> is `null`, is <xref href=\"System.String.Empty\"></xref>, contains invalid character, or the specified path to the file does not exist.  \n  \n -or-  \n  \n An error occurred while opening the stream.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.  \n  \n -or-  \n  \n The `Content-type` header begins with `multipart`."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.UploadFileAsync(System.Uri,System.String,System.String,System.Object)
  commentId: M:System.Net.WebClient.UploadFileAsync(System.Uri,System.String,System.String,System.Object)
  id: UploadFileAsync(System.Uri,System.String,System.String,System.Object)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: UploadFileAsync(Uri, String, String, Object)
  nameWithType: WebClient.UploadFileAsync(Uri, String, String, Object)
  fullName: WebClient.UploadFileAsync(Uri, String, String, Object)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Uploads the specified local file to the specified resource, using the POST method. This method does not block the calling thread.
  remarks: "The file is sent asynchronously using thread resources that are automatically allocated from the thread pool. To receive notification when the file upload completes, add an event handler to the <xref:System.Net.WebClient.UploadFileCompleted> event.  \n  \n This method does not block the calling thread while the file is being sent. To send a file and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadFile%2A> methods.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: public void UploadFileAsync (Uri address, string method, string fileName, object userToken);
    parameters:
    - id: address
      type: System.Uri
      description: The URI of the resource to receive the file. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.
    - id: method
      type: System.String
      description: The method used to send the data to the resource. If `null`, the default is POST for http and STOR for ftp.
    - id: fileName
      type: System.String
      description: The file to send to the resource.
    - id: userToken
      type: System.Object
      description: A user-defined object that is passed to the method invoked when the asynchronous operation completes.
  overload: System.Net.WebClient.UploadFileAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>fileName</code> parameter is `null`."
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n <code>fileName</code> is `null`, is <xref href=\"System.String.Empty\"></xref>, contains invalid character, or the specified path to the file does not exist.  \n  \n -or-  \n  \n An error occurred while opening the stream.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.  \n  \n -or-  \n  \n The `Content-type` header begins with `multipart`."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.UploadFileCompleted
  commentId: E:System.Net.WebClient.UploadFileCompleted
  id: UploadFileCompleted
  parent: System.Net.WebClient
  langs:
  - csharp
  name: UploadFileCompleted
  nameWithType: WebClient.UploadFileCompleted
  fullName: WebClient.UploadFileCompleted
  type: Event
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Occurs when an asynchronous file-upload operation completes.
  remarks: "This event is raised each time an asynchronous file upload operation completes. Asynchronous file uploads are started by calling the <xref:System.Net.WebClient.UploadFileAsync%2A> methods.  \n  \n The <xref:System.Net.UploadFileCompletedEventHandler> is the delegate for this event. The <xref:System.Net.UploadFileCompletedEventArgs> class provides the event handler with event data.  \n  \n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  example:
  - "The following code example demonstrates setting an event handler for this event.  \n  \n [!code-cpp[NCLWebClientAsync#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#4)]\n [!code-csharp[NCLWebClientAsync#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#4)]\n [!code-vb[NCLWebClientAsync#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#4)]"
  syntax:
    content: public event System.Net.UploadFileCompletedEventHandler UploadFileCompleted;
    return:
      type: System.Net.UploadFileCompletedEventHandler
      description: ''
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.UploadFileTaskAsync(System.Uri,System.String,System.String)
  commentId: M:System.Net.WebClient.UploadFileTaskAsync(System.Uri,System.String,System.String)
  id: UploadFileTaskAsync(System.Uri,System.String,System.String)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: UploadFileTaskAsync(Uri, String, String)
  nameWithType: WebClient.UploadFileTaskAsync(Uri, String, String)
  fullName: WebClient.UploadFileTaskAsync(Uri, String, String)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Uploads the specified local file to a resource as an asynchronous operation using a task object.
  remarks: "This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the file has been uploaded to the resource. The file is sent asynchronously using thread resources that are automatically allocated from the thread pool.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n BY default, this method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public System.Threading.Tasks.Task<byte[]> UploadFileTaskAsync (Uri address, string method, string fileName);
    parameters:
    - id: address
      type: System.Uri
      description: The URI of the resource to receive the file. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.
    - id: method
      type: System.String
      description: The method used to send the data to the resource. If `null`, the default is POST for http and STOR for ftp.
    - id: fileName
      type: System.String
      description: The local file to send to the resource.
    return:
      type: System.Threading.Tasks.Task{System.Byte[]}
      description: "Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the body of the response received from the resource when the file was uploaded."
  overload: System.Net.WebClient.UploadFileTaskAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>fileName</code> parameter is `null`."
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n <code>fileName</code> is `null`, is <xref href=\"System.String.Empty\"></xref>, contains invalid character, or the specified path to the file does not exist.  \n  \n -or-  \n  \n An error occurred while opening the stream.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.  \n  \n -or-  \n  \n The `Content-type` header begins with `multipart`."
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.UploadFileTaskAsync(System.String,System.String,System.String)
  commentId: M:System.Net.WebClient.UploadFileTaskAsync(System.String,System.String,System.String)
  id: UploadFileTaskAsync(System.String,System.String,System.String)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: UploadFileTaskAsync(String, String, String)
  nameWithType: WebClient.UploadFileTaskAsync(String, String, String)
  fullName: WebClient.UploadFileTaskAsync(String, String, String)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Uploads the specified local file to a resource as an asynchronous operation using a task object.
  remarks: "This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the file has been uploaded to the resource. The file is sent asynchronously using thread resources that are automatically allocated from the thread pool.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n BY default, this method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public System.Threading.Tasks.Task<byte[]> UploadFileTaskAsync (string address, string method, string fileName);
    parameters:
    - id: address
      type: System.String
      description: The URI of the resource to receive the file. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.
    - id: method
      type: System.String
      description: The method used to send the data to the resource. If `null`, the default is POST for http and STOR for ftp.
    - id: fileName
      type: System.String
      description: The local file to send to the resource.
    return:
      type: System.Threading.Tasks.Task{System.Byte[]}
      description: "Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the body of the response received from the resource when the file was uploaded."
  overload: System.Net.WebClient.UploadFileTaskAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>fileName</code> parameter is `null`."
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n <code>fileName</code> is `null`, is <xref href=\"System.String.Empty\"></xref>, contains invalid character, or the specified path to the file does not exist.  \n  \n -or-  \n  \n An error occurred while opening the stream.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.  \n  \n -or-  \n  \n The `Content-type` header begins with `multipart`."
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.UploadFileTaskAsync(System.String,System.String)
  commentId: M:System.Net.WebClient.UploadFileTaskAsync(System.String,System.String)
  id: UploadFileTaskAsync(System.String,System.String)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: UploadFileTaskAsync(String, String)
  nameWithType: WebClient.UploadFileTaskAsync(String, String)
  fullName: WebClient.UploadFileTaskAsync(String, String)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Uploads the specified local file to a resource as an asynchronous operation using a task object.
  remarks: "This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the file has been uploaded to the resource. The file is sent asynchronously using thread resources that are automatically allocated from the thread pool.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public System.Threading.Tasks.Task<byte[]> UploadFileTaskAsync (string address, string fileName);
    parameters:
    - id: address
      type: System.String
      description: The URI of the resource to receive the file. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.
    - id: fileName
      type: System.String
      description: The local file to send to the resource.
    return:
      type: System.Threading.Tasks.Task{System.Byte[]}
      description: "Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the body of the response received from the resource when the file was uploaded."
  overload: System.Net.WebClient.UploadFileTaskAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>fileName</code> parameter is `null`."
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n <code>fileName</code> is `null`, is <xref href=\"System.String.Empty\"></xref>, contains invalid character, or the specified path to the file does not exist.  \n  \n -or-  \n  \n An error occurred while opening the stream.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.  \n  \n -or-  \n  \n The `Content-type` header begins with `multipart`."
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.UploadFileTaskAsync(System.Uri,System.String)
  commentId: M:System.Net.WebClient.UploadFileTaskAsync(System.Uri,System.String)
  id: UploadFileTaskAsync(System.Uri,System.String)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: UploadFileTaskAsync(Uri, String)
  nameWithType: WebClient.UploadFileTaskAsync(Uri, String)
  fullName: WebClient.UploadFileTaskAsync(Uri, String)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Uploads the specified local file to a resource as an asynchronous operation using a task object.
  remarks: "This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the file has been uploaded to the resource. The file is sent asynchronously using thread resources that are automatically allocated from the thread pool.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public System.Threading.Tasks.Task<byte[]> UploadFileTaskAsync (Uri address, string fileName);
    parameters:
    - id: address
      type: System.Uri
      description: The URI of the resource to receive the file. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.
    - id: fileName
      type: System.String
      description: The local file to send to the resource.
    return:
      type: System.Threading.Tasks.Task{System.Byte[]}
      description: "Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the body of the response received from the resource when the file was uploaded."
  overload: System.Net.WebClient.UploadFileTaskAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>fileName</code> parameter is `null`."
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n <code>fileName</code> is `null`, is <xref href=\"System.String.Empty\"></xref>, contains invalid character, or the specified path to the file does not exist.  \n  \n -or-  \n  \n An error occurred while opening the stream.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.  \n  \n -or-  \n  \n The `Content-type` header begins with `multipart`."
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.UploadProgressChanged
  commentId: E:System.Net.WebClient.UploadProgressChanged
  id: UploadProgressChanged
  parent: System.Net.WebClient
  langs:
  - csharp
  name: UploadProgressChanged
  nameWithType: WebClient.UploadProgressChanged
  fullName: WebClient.UploadProgressChanged
  type: Event
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Occurs when an asynchronous upload operation successfully transfers some or all of the data.
  remarks: "This event is raised each time an asynchronous upload makes progress. This event is raised when uploads are started using any of the following methods.  \n  \n|Method|Description|  \n|------------|-----------------|  \n|<xref:System.Net.WebClient.UploadDataAsync%2A>|Sends a <xref:System.Byte> array to the resource, without blocking the calling thread.|  \n|<xref:System.Net.WebClient.UploadFileAsync%2A>|Sends a local file to the resource, without blocking the calling thread.|  \n|<xref:System.Net.WebClient.UploadValuesAsync%2A>|Sends a <xref:System.Collections.Specialized.NameValueCollection> to the resource and returns a <xref:System.Byte> array containing any response, without blocking the calling thread.|  \n  \n The <xref:System.Net.UploadProgressChangedEventHandler> is the delegate for this event. The <xref:System.Net.UploadProgressChangedEventArgs> class provides the event handler with event data.  \n  \n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  example:
  - "The following code example demonstrates setting an event handler for this event.  \n  \n [!code-cpp[NCLWebClientAsync#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#4)]\n [!code-csharp[NCLWebClientAsync#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#4)]\n [!code-vb[NCLWebClientAsync#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#4)]  \n  \n The following code example shows an implementation of a handler for this event.  \n  \n [!code-cpp[NCLWebClientAsync#42](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#42)]\n [!code-csharp[NCLWebClientAsync#42](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#42)]\n [!code-vb[NCLWebClientAsync#42](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#42)]"
  syntax:
    content: public event System.Net.UploadProgressChangedEventHandler UploadProgressChanged;
    return:
      type: System.Net.UploadProgressChangedEventHandler
      description: ''
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.UploadString(System.String,System.String)
  commentId: M:System.Net.WebClient.UploadString(System.String,System.String)
  id: UploadString(System.String,System.String)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: UploadString(String, String)
  nameWithType: WebClient.UploadString(String, String)
  fullName: WebClient.UploadString(String, String)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Uploads the specified string to the specified resource, using the POST method.
  remarks: "Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. This method blocks while the string is transmitted. To send a string and continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadStringAsync%2A> methods.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  example:
  - "The following code example demonstrates calling this method.  \n  \n [!code-cpp[NCLWebClientAsync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#1)]\n [!code-csharp[NCLWebClientAsync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#1)]\n [!code-vb[NCLWebClientAsync#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#1)]"
  syntax:
    content: public string UploadString (string address, string data);
    parameters:
    - id: address
      type: System.String
      description: The URI of the resource to receive the string. For Http resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.
    - id: data
      type: System.String
      description: The string to be uploaded.
    return:
      type: System.String
      description: A <xref href="System.String"></xref> containing the response sent by the server.
  overload: System.Net.WebClient.UploadString*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>data</code> parameter is `null`."
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n There was no response from the server hosting the resource."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.UploadString(System.Uri,System.String)
  commentId: M:System.Net.WebClient.UploadString(System.Uri,System.String)
  id: UploadString(System.Uri,System.String)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: UploadString(Uri, String)
  nameWithType: WebClient.UploadString(Uri, String)
  fullName: WebClient.UploadString(Uri, String)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Uploads the specified string to the specified resource, using the POST method.
  remarks: "Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. This method blocks while the string is transmitted. To send a string and continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadStringAsync%2A> methods.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\"), and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: public string UploadString (Uri address, string data);
    parameters:
    - id: address
      type: System.Uri
      description: The URI of the resource to receive the string. For Http resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.
    - id: data
      type: System.String
      description: The string to be uploaded.
    return:
      type: System.String
      description: A <xref href="System.String"></xref> containing the response sent by the server.
  overload: System.Net.WebClient.UploadString*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>data</code> parameter is `null`."
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n There was no response from the server hosting the resource."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.UploadString(System.String,System.String,System.String)
  commentId: M:System.Net.WebClient.UploadString(System.String,System.String,System.String)
  id: UploadString(System.String,System.String,System.String)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: UploadString(String, String, String)
  nameWithType: WebClient.UploadString(String, String, String)
  fullName: WebClient.UploadString(String, String, String)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Uploads the specified string to the specified resource, using the specified method.
  remarks: "Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. This method blocks while the string is transmitted. To send a string and continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadStringAsync%2A> methods.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  example:
  - "The following code example demonstrates calling this method.  \n  \n [!code-cpp[NCLWebClientAsync#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#2)]\n [!code-csharp[NCLWebClientAsync#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#2)]\n [!code-vb[NCLWebClientAsync#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#2)]"
  syntax:
    content: public string UploadString (string address, string method, string data);
    parameters:
    - id: address
      type: System.String
      description: The URI of the resource to receive the string. This URI must identify a resource that can accept a request sent with the <code>method</code> method.
    - id: method
      type: System.String
      description: The HTTP method used to send the string to the resource. If null, the default is POST for http and STOR for ftp.
    - id: data
      type: System.String
      description: The string to be uploaded.
    return:
      type: System.String
      description: A <xref href="System.String"></xref> containing the response sent by the server.
  overload: System.Net.WebClient.UploadString*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>data</code> parameter is `null`."
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.  \n  \n -or-  \n  \n <code>method</code> cannot be used to send content."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.UploadString(System.Uri,System.String,System.String)
  commentId: M:System.Net.WebClient.UploadString(System.Uri,System.String,System.String)
  id: UploadString(System.Uri,System.String,System.String)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: UploadString(Uri, String, String)
  nameWithType: WebClient.UploadString(Uri, String, String)
  fullName: WebClient.UploadString(Uri, String, String)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Uploads the specified string to the specified resource, using the specified method.
  remarks: "Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. This method blocks while the string is transmitted. To send a string and continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadStringAsync%2A> methods.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: public string UploadString (Uri address, string method, string data);
    parameters:
    - id: address
      type: System.Uri
      description: The URI of the resource to receive the string. This URI must identify a resource that can accept a request sent with the <code>method</code> method.
    - id: method
      type: System.String
      description: The HTTP method used to send the string to the resource. If null, the default is POST for http and STOR for ftp.
    - id: data
      type: System.String
      description: The string to be uploaded.
    return:
      type: System.String
      description: A <xref href="System.String"></xref> containing the response sent by the server.
  overload: System.Net.WebClient.UploadString*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>data</code> parameter is `null`."
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.  \n  \n -or-  \n  \n <code>method</code> cannot be used to send content."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.UploadStringAsync(System.Uri,System.String)
  commentId: M:System.Net.WebClient.UploadStringAsync(System.Uri,System.String)
  id: UploadStringAsync(System.Uri,System.String)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: UploadStringAsync(Uri, String)
  nameWithType: WebClient.UploadStringAsync(Uri, String)
  fullName: WebClient.UploadStringAsync(Uri, String)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Uploads the specified string to the specified resource. This method does not block the calling thread.
  remarks: "This method sends a string to a resource. The string is sent asynchronously using thread resources that are automatically allocated from the thread pool. Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. To receive notification when the string upload completes, you can add an event handler to the <xref:System.Net.WebClient.UploadStringCompleted> event.  \n  \n This method does not block the calling thread while the string is being sent. To send a string and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadString%2A> methods.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: public void UploadStringAsync (Uri address, string data);
    parameters:
    - id: address
      type: System.Uri
      description: The URI of the resource to receive the string. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.
    - id: data
      type: System.String
      description: The string to be uploaded.
  overload: System.Net.WebClient.UploadStringAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>data</code> parameter is `null`."
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n There was no response from the server hosting the resource."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.UploadStringAsync(System.Uri,System.String,System.String)
  commentId: M:System.Net.WebClient.UploadStringAsync(System.Uri,System.String,System.String)
  id: UploadStringAsync(System.Uri,System.String,System.String)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: UploadStringAsync(Uri, String, String)
  nameWithType: WebClient.UploadStringAsync(Uri, String, String)
  fullName: WebClient.UploadStringAsync(Uri, String, String)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Uploads the specified string to the specified resource. This method does not block the calling thread.
  remarks: "This method sends a string to a resource. The string is sent asynchronously using thread resources that are automatically allocated from the thread pool. Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. To receive notification when the string upload completes, you can add an event handler to the <xref:System.Net.WebClient.UploadStringCompleted> event.  \n  \n This method does not block the calling thread while the string is being sent. To send a string and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadString%2A> methods.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: public void UploadStringAsync (Uri address, string method, string data);
    parameters:
    - id: address
      type: System.Uri
      description: The URI of the resource to receive the string. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.
    - id: method
      type: System.String
      description: The HTTP method used to send the file to the resource. If null, the default is POST for http and STOR for ftp.
    - id: data
      type: System.String
      description: The string to be uploaded.
  overload: System.Net.WebClient.UploadStringAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>data</code> parameter is `null`."
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n <code>method</code> cannot be used to send content.  \n  \n -or-  \n  \n There was no response from the server hosting the resource."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.UploadStringAsync(System.Uri,System.String,System.String,System.Object)
  commentId: M:System.Net.WebClient.UploadStringAsync(System.Uri,System.String,System.String,System.Object)
  id: UploadStringAsync(System.Uri,System.String,System.String,System.Object)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: UploadStringAsync(Uri, String, String, Object)
  nameWithType: WebClient.UploadStringAsync(Uri, String, String, Object)
  fullName: WebClient.UploadStringAsync(Uri, String, String, Object)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Uploads the specified string to the specified resource. This method does not block the calling thread.
  remarks: "This method sends a string to a resource. The string is sent asynchronously using thread resources that are automatically allocated from the thread pool. Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. To receive notification when the string upload completes, you can add an event handler to the <xref:System.Net.WebClient.UploadStringCompleted> event.  \n  \n This method does not block the calling thread while the string is being sent. To send a string and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadString%2A> methods.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: public void UploadStringAsync (Uri address, string method, string data, object userToken);
    parameters:
    - id: address
      type: System.Uri
      description: The URI of the resource to receive the string. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.
    - id: method
      type: System.String
      description: The HTTP method used to send the file to the resource. If null, the default is POST for http and STOR for ftp.
    - id: data
      type: System.String
      description: The string to be uploaded.
    - id: userToken
      type: System.Object
      description: A user-defined object that is passed to the method invoked when the asynchronous operation completes.
  overload: System.Net.WebClient.UploadStringAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>data</code> parameter is `null`."
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n <code>method</code> cannot be used to send content.  \n  \n -or-  \n  \n There was no response from the server hosting the resource."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.UploadStringCompleted
  commentId: E:System.Net.WebClient.UploadStringCompleted
  id: UploadStringCompleted
  parent: System.Net.WebClient
  langs:
  - csharp
  name: UploadStringCompleted
  nameWithType: WebClient.UploadStringCompleted
  fullName: WebClient.UploadStringCompleted
  type: Event
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Occurs when an asynchronous string-upload operation completes.
  remarks: "This event is raised each time an asynchronous string upload operation completes. Asynchronous string uploads are started by calling the <xref:System.Net.WebClient.UploadStringAsync%2A> methods.  \n  \n The <xref:System.Net.UploadStringCompletedEventHandler> is the delegate for this event. The <xref:System.Net.UploadStringCompletedEventArgs> class provides the event handler with event data.  \n  \n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  example:
  - "The following code example demonstrates setting an event handler for this event.  \n  \n [!code-cpp[NCLWebClientAsync#38](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#38)]\n [!code-csharp[NCLWebClientAsync#38](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#38)]\n [!code-vb[NCLWebClientAsync#38](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#38)]"
  syntax:
    content: public event System.Net.UploadStringCompletedEventHandler UploadStringCompleted;
    return:
      type: System.Net.UploadStringCompletedEventHandler
      description: ''
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.UploadStringTaskAsync(System.Uri,System.String,System.String)
  commentId: M:System.Net.WebClient.UploadStringTaskAsync(System.Uri,System.String,System.String)
  id: UploadStringTaskAsync(System.Uri,System.String,System.String)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: UploadStringTaskAsync(Uri, String, String)
  nameWithType: WebClient.UploadStringTaskAsync(Uri, String, String)
  fullName: WebClient.UploadStringTaskAsync(Uri, String, String)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Uploads the specified string to the specified resource as an asynchronous operation using a task object.
  remarks: "This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the string has been uploaded to the resource. The string is sent asynchronously using thread resources that are automatically allocated from the thread pool.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. This method blocks while the string is transmitted.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public System.Threading.Tasks.Task<string> UploadStringTaskAsync (Uri address, string method, string data);
    parameters:
    - id: address
      type: System.Uri
      description: The URI of the resource to receive the string. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.
    - id: method
      type: System.String
      description: The HTTP method used to send the file to the resource. If null, the default is POST for http and STOR for ftp.
    - id: data
      type: System.String
      description: The string to be uploaded.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.String\"></xref> containing the response sent by the server."
  overload: System.Net.WebClient.UploadStringTaskAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>data</code> parameter is `null`."
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n <code>method</code> cannot be used to send content.  \n  \n -or-  \n  \n There was no response from the server hosting the resource."
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.UploadStringTaskAsync(System.String,System.String,System.String)
  commentId: M:System.Net.WebClient.UploadStringTaskAsync(System.String,System.String,System.String)
  id: UploadStringTaskAsync(System.String,System.String,System.String)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: UploadStringTaskAsync(String, String, String)
  nameWithType: WebClient.UploadStringTaskAsync(String, String, String)
  fullName: WebClient.UploadStringTaskAsync(String, String, String)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Uploads the specified string to the specified resource as an asynchronous operation using a task object.
  remarks: "This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the string has been uploaded to the resource. The string is sent asynchronously using thread resources that are automatically allocated from the thread pool.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. This method blocks while the string is transmitted.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public System.Threading.Tasks.Task<string> UploadStringTaskAsync (string address, string method, string data);
    parameters:
    - id: address
      type: System.String
      description: The URI of the resource to receive the string. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.
    - id: method
      type: System.String
      description: The HTTP method used to send the file to the resource. If null, the default is POST for http and STOR for ftp.
    - id: data
      type: System.String
      description: The string to be uploaded.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.String\"></xref> containing the response sent by the server."
  overload: System.Net.WebClient.UploadStringTaskAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>data</code> parameter is `null`."
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n <code>method</code> cannot be used to send content.  \n  \n -or-  \n  \n There was no response from the server hosting the resource."
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.UploadStringTaskAsync(System.String,System.String)
  commentId: M:System.Net.WebClient.UploadStringTaskAsync(System.String,System.String)
  id: UploadStringTaskAsync(System.String,System.String)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: UploadStringTaskAsync(String, String)
  nameWithType: WebClient.UploadStringTaskAsync(String, String)
  fullName: WebClient.UploadStringTaskAsync(String, String)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Uploads the specified string to the specified resource as an asynchronous operation using a task object.
  remarks: "This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the string has been uploaded to the resource. The string is sent asynchronously using thread resources that are automatically allocated from the thread pool.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. This method blocks while the string is transmitted.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public System.Threading.Tasks.Task<string> UploadStringTaskAsync (string address, string data);
    parameters:
    - id: address
      type: System.String
      description: The URI of the resource to receive the string. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.
    - id: data
      type: System.String
      description: The string to be uploaded.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.String\"></xref> containing the response sent by the server."
  overload: System.Net.WebClient.UploadStringTaskAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>data</code> parameter is `null`."
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n There was no response from the server hosting the resource."
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.UploadStringTaskAsync(System.Uri,System.String)
  commentId: M:System.Net.WebClient.UploadStringTaskAsync(System.Uri,System.String)
  id: UploadStringTaskAsync(System.Uri,System.String)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: UploadStringTaskAsync(Uri, String)
  nameWithType: WebClient.UploadStringTaskAsync(Uri, String)
  fullName: WebClient.UploadStringTaskAsync(Uri, String)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Uploads the specified string to the specified resource as an asynchronous operation using a task object.
  remarks: "This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the string has been uploaded to the resource. The string is sent asynchronously using thread resources that are automatically allocated from the thread pool.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. This method blocks while the string is transmitted.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public System.Threading.Tasks.Task<string> UploadStringTaskAsync (Uri address, string data);
    parameters:
    - id: address
      type: System.Uri
      description: The URI of the resource to receive the string. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.
    - id: data
      type: System.String
      description: The string to be uploaded.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.String\"></xref> containing the response sent by the server."
  overload: System.Net.WebClient.UploadStringTaskAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>data</code> parameter is `null`."
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n There was no response from the server hosting the resource."
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.UploadValues(System.String,System.Collections.Specialized.NameValueCollection)
  commentId: M:System.Net.WebClient.UploadValues(System.String,System.Collections.Specialized.NameValueCollection)
  id: UploadValues(System.String,System.Collections.Specialized.NameValueCollection)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: UploadValues(String, NameValueCollection)
  nameWithType: WebClient.UploadValues(String, NameValueCollection)
  fullName: WebClient.UploadValues(String, NameValueCollection)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Uploads the specified name/value collection to the resource identified by the specified URI.
  remarks: "The <xref:System.Net.WebClient.UploadValues%2A> method sends a <xref:System.Collections.Specialized.NameValueCollection> to a server. This method blocks while uploading the data. To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadValuesAsync%2A> methods.  \n  \n If the underlying request is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \n  \n If the Content-type header is `null`, the <xref:System.Net.WebClient.UploadValues%2A> method sets it to \"application/x-www-form-urlencoded\".  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  example:
  - "The following code example gathers information from the user (name, age, and address) and posts the values to the server using <xref:System.Net.WebClient.UploadValues%2A>. Any response from the server is displayed on the console.  \n  \n [!code-cpp[WebClient_UploadValues#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_UploadValues/CPP/webclient_uploadvalues.cpp#1)]\n [!code-csharp[WebClient_UploadValues#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_UploadValues/CS/webclient_uploadvalues.cs#1)]\n [!code-vb[WebClient_UploadValues#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_UploadValues/VB/webclient_uploadvalues.vb#1)]"
  syntax:
    content: public byte[] UploadValues (string address, System.Collections.Specialized.NameValueCollection data);
    parameters:
    - id: address
      type: System.String
      description: The URI of the resource to receive the collection.
    - id: data
      type: System.Collections.Specialized.NameValueCollection
      description: The <xref href="System.Collections.Specialized.NameValueCollection"></xref> to send to the resource.
    return:
      type: System.Byte[]
      description: A <xref href="System.Byte"></xref> array containing the body of the response from the resource.
  overload: System.Net.WebClient.UploadValues*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>data</code> parameter is `null`."
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid.  \n  \n -or-  \n  \n <code>data</code> is `null`.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.  \n  \n -or-  \n  \n An error occurred while opening the stream.  \n  \n -or-  \n  \n The `Content-type` header is not `null` or \"application/x-www-form-urlencoded\"."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.UploadValues(System.Uri,System.Collections.Specialized.NameValueCollection)
  commentId: M:System.Net.WebClient.UploadValues(System.Uri,System.Collections.Specialized.NameValueCollection)
  id: UploadValues(System.Uri,System.Collections.Specialized.NameValueCollection)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: UploadValues(Uri, NameValueCollection)
  nameWithType: WebClient.UploadValues(Uri, NameValueCollection)
  fullName: WebClient.UploadValues(Uri, NameValueCollection)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Uploads the specified name/value collection to the resource identified by the specified URI.
  remarks: "The <xref:System.Net.WebClient.UploadValues%2A> method sends a <xref:System.Collections.Specialized.NameValueCollection> to a server. This method blocks while uploading the data. To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadValuesAsync%2A> methods.  \n  \n If the underlying request is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \n  \n If the Content-type header is `null`, the <xref:System.Net.WebClient.UploadValues%2A> method sets it to \"application/x-www-form-urlencoded\".  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: public byte[] UploadValues (Uri address, System.Collections.Specialized.NameValueCollection data);
    parameters:
    - id: address
      type: System.Uri
      description: The URI of the resource to receive the collection.
    - id: data
      type: System.Collections.Specialized.NameValueCollection
      description: The <xref href="System.Collections.Specialized.NameValueCollection"></xref> to send to the resource.
    return:
      type: System.Byte[]
      description: A <xref href="System.Byte"></xref> array containing the body of the response from the resource.
  overload: System.Net.WebClient.UploadValues*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>data</code> parameter is `null`."
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid.  \n  \n -or-  \n  \n <code>data</code> is `null`.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.  \n  \n -or-  \n  \n An error occurred while opening the stream.  \n  \n -or-  \n  \n The `Content-type` header is not `null` or \"application/x-www-form-urlencoded\"."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.UploadValues(System.String,System.String,System.Collections.Specialized.NameValueCollection)
  commentId: M:System.Net.WebClient.UploadValues(System.String,System.String,System.Collections.Specialized.NameValueCollection)
  id: UploadValues(System.String,System.String,System.Collections.Specialized.NameValueCollection)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: UploadValues(String, String, NameValueCollection)
  nameWithType: WebClient.UploadValues(String, String, NameValueCollection)
  fullName: WebClient.UploadValues(String, String, NameValueCollection)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Uploads the specified name/value collection to the resource identified by the specified URI, using the specified method.
  remarks: "The <xref:System.Net.WebClient.UploadValues%2A> method sends a <xref:System.Collections.Specialized.NameValueCollection> to a resource using the method specified in the `method` parameter and returns any response from the server. This method blocks while uploading the data. To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadValuesAsync%2A> methods.  \n  \n If the `Content-type` header is `null`, the <xref:System.Net.WebClient.UploadValues%2A> method sets it to `application/x-www-form-urlencoded`.  \n  \n If the `method` parameter specifies a verb that is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  example:
  - "The following code example gathers information from the user (name, age, and address) and posts the values to the server using <xref:System.Net.WebClient.UploadValues%2A>. Any response from the server is displayed on the console.  \n  \n [!code-cpp[WebClient_UploadValues2#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_UploadValues2/CPP/webclient_uploadvalues2.cpp#1)]\n [!code-csharp[WebClient_UploadValues2#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_UploadValues2/CS/webclient_uploadvalues2.cs#1)]\n [!code-vb[WebClient_UploadValues2#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_UploadValues2/VB/webclient_uploadvalues2.vb#1)]"
  syntax:
    content: public byte[] UploadValues (string address, string method, System.Collections.Specialized.NameValueCollection data);
    parameters:
    - id: address
      type: System.String
      description: The URI of the resource to receive the collection.
    - id: method
      type: System.String
      description: The HTTP method used to send the file to the resource. If null, the default is POST for http and STOR for ftp.
    - id: data
      type: System.Collections.Specialized.NameValueCollection
      description: The <xref href="System.Collections.Specialized.NameValueCollection"></xref> to send to the resource.
    return:
      type: System.Byte[]
      description: A <xref href="System.Byte"></xref> array containing the body of the response from the resource.
  overload: System.Net.WebClient.UploadValues*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>data</code> parameter is `null`."
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid.  \n  \n -or-  \n  \n <code>data</code> is `null`.  \n  \n -or-  \n  \n An error occurred while opening the stream.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.  \n  \n -or-  \n  \n The `Content-type` header value is not `null` and is not `application/x-www-form-urlencoded`."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.UploadValues(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)
  commentId: M:System.Net.WebClient.UploadValues(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)
  id: UploadValues(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: UploadValues(Uri, String, NameValueCollection)
  nameWithType: WebClient.UploadValues(Uri, String, NameValueCollection)
  fullName: WebClient.UploadValues(Uri, String, NameValueCollection)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Uploads the specified name/value collection to the resource identified by the specified URI, using the specified method.
  remarks: "The <xref:System.Net.WebClient.UploadValues%2A> method sends a <xref:System.Collections.Specialized.NameValueCollection> to a resource using the method specified in the `method` parameter and returns any response from the server. This method blocks while uploading the data. To continue executing while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadValuesAsync%2A> methods.  \n  \n If the `Content-type` header is `null`, the <xref:System.Net.WebClient.UploadValues%2A> method sets it to `application/x-www-form-urlencoded`.  \n  \n If the `method` parameter specifies a verb that is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: public byte[] UploadValues (Uri address, string method, System.Collections.Specialized.NameValueCollection data);
    parameters:
    - id: address
      type: System.Uri
      description: The URI of the resource to receive the collection.
    - id: method
      type: System.String
      description: The HTTP method used to send the file to the resource. If null, the default is POST for http and STOR for ftp.
    - id: data
      type: System.Collections.Specialized.NameValueCollection
      description: The <xref href="System.Collections.Specialized.NameValueCollection"></xref> to send to the resource.
    return:
      type: System.Byte[]
      description: A <xref href="System.Byte"></xref> array containing the body of the response from the resource.
  overload: System.Net.WebClient.UploadValues*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>data</code> parameter is `null`."
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid.  \n  \n -or-  \n  \n <code>data</code> is `null`.  \n  \n -or-  \n  \n An error occurred while opening the stream.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.  \n  \n -or-  \n  \n The `Content-type` header value is not `null` and is not `application/x-www-form-urlencoded`."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.UploadValuesAsync(System.Uri,System.Collections.Specialized.NameValueCollection)
  commentId: M:System.Net.WebClient.UploadValuesAsync(System.Uri,System.Collections.Specialized.NameValueCollection)
  id: UploadValuesAsync(System.Uri,System.Collections.Specialized.NameValueCollection)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: UploadValuesAsync(Uri, NameValueCollection)
  nameWithType: WebClient.UploadValuesAsync(Uri, NameValueCollection)
  fullName: WebClient.UploadValuesAsync(Uri, NameValueCollection)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Uploads the data in the specified name/value collection to the resource identified by the specified URI. This method does not block the calling thread.
  remarks: "This method sends a string to a resource. The string is sent asynchronously using thread resources that are automatically allocated from the thread pool. Before uploading the string, this method converts it to a <xref:System.Byte> array using the encoding specified in the <xref:System.Net.WebClient.Encoding%2A> property. To receive notification when the string upload completes, you can add an event handler to the <xref:System.Net.WebClient.UploadStringCompleted> event.  \n  \n This method does not block the calling thread while the string is being sent. To send a string and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadString%2A> methods.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: public void UploadValuesAsync (Uri address, System.Collections.Specialized.NameValueCollection data);
    parameters:
    - id: address
      type: System.Uri
      description: The URI of the resource to receive the collection. This URI must identify a resource that can accept a request sent with the default method.
    - id: data
      type: System.Collections.Specialized.NameValueCollection
      description: The <xref href="System.Collections.Specialized.NameValueCollection"></xref> to send to the resource.
  overload: System.Net.WebClient.UploadValuesAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>data</code> parameter is `null`."
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n There was no response from the server hosting the resource."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.UploadValuesAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)
  commentId: M:System.Net.WebClient.UploadValuesAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)
  id: UploadValuesAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: UploadValuesAsync(Uri, String, NameValueCollection)
  nameWithType: WebClient.UploadValuesAsync(Uri, String, NameValueCollection)
  fullName: WebClient.UploadValuesAsync(Uri, String, NameValueCollection)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Uploads the data in the specified name/value collection to the resource identified by the specified URI, using the specified method. This method does not block the calling thread.
  remarks: "This method sends the data contained in a <xref:System.Collections.Specialized.NameValueCollection> to the `address` resource. Use this method to send form data to a URI for processing. The data is sent using the form-urlencoded media type; the Content-Type header value must be set to \"application/x-www-form-urlencoded\". The header is set correctly by default. The <xref:System.Net.WebClient.UploadValuesAsync%2A> methods throw a <xref:System.Net.WebException> if you call this method with a different Content-Type header value set in the <xref:System.Net.WebClient.Headers%2A> collection.  \n  \n If the `method` method is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \n  \n The <xref:System.Collections.Specialized.NameValueCollection> is sent asynchronously using thread resources that are automatically allocated from the thread pool. To receive notification when the upload operation completes, add an event handler to the <xref:System.Net.WebClient.UploadValuesCompleted> event.  \n  \n This method does not block the calling thread while the string is being sent. To send a string and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadValues%2A> methods.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not empty, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: public void UploadValuesAsync (Uri address, string method, System.Collections.Specialized.NameValueCollection data);
    parameters:
    - id: address
      type: System.Uri
      description: The URI of the resource to receive the collection. This URI must identify a resource that can accept a request sent with the <code>method</code> method.
    - id: method
      type: System.String
      description: The method used to send the string to the resource. If null, the default is POST for http and STOR for ftp.
    - id: data
      type: System.Collections.Specialized.NameValueCollection
      description: The <xref href="System.Collections.Specialized.NameValueCollection"></xref> to send to the resource.
  overload: System.Net.WebClient.UploadValuesAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>data</code> parameter is `null`."
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.  \n  \n -or-  \n  \n <code>method</code> cannot be used to send content."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.UploadValuesAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection,System.Object)
  commentId: M:System.Net.WebClient.UploadValuesAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection,System.Object)
  id: UploadValuesAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection,System.Object)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: UploadValuesAsync(Uri, String, NameValueCollection, Object)
  nameWithType: WebClient.UploadValuesAsync(Uri, String, NameValueCollection, Object)
  fullName: WebClient.UploadValuesAsync(Uri, String, NameValueCollection, Object)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Uploads the data in the specified name/value collection to the resource identified by the specified URI, using the specified method. This method does not block the calling thread, and allows the caller to pass an object to the method that is invoked when the operation completes.
  remarks: "This method sends the data contained in a <xref:System.Collections.Specialized.NameValueCollection> to the `address` resource. Use this method to send form data to a URI for processing. The data is sent using the form-urlencoded media type; the Content-Type header value must be set to \"application/x-www-form-urlencoded\". The header is set correctly by default. The <xref:System.Net.WebClient.UploadValuesAsync%2A> methods throw a <xref:System.Net.WebException> if you call this method with a different Content-Type header value set in the <xref:System.Net.WebClient.Headers%2A> collection.  \n  \n If the `method` method is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \n  \n The <xref:System.Collections.Specialized.NameValueCollection> is sent asynchronously using thread resources that are automatically allocated from the thread pool. To receive notification when the upload operation completes, add an event handler to the <xref:System.Net.WebClient.UploadValuesCompleted> event.  \n  \n This method does not block the calling thread while the string is being sent. To send a string and block while waiting for the server's response, use one of the <xref:System.Net.WebClient.UploadValues%2A> methods.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not empty, it is appended to `address`.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: public void UploadValuesAsync (Uri address, string method, System.Collections.Specialized.NameValueCollection data, object userToken);
    parameters:
    - id: address
      type: System.Uri
      description: The URI of the resource to receive the collection. This URI must identify a resource that can accept a request sent with the <code>method</code> method.
    - id: method
      type: System.String
      description: The HTTP method used to send the string to the resource. If null, the default is POST for http and STOR for ftp.
    - id: data
      type: System.Collections.Specialized.NameValueCollection
      description: The <xref href="System.Collections.Specialized.NameValueCollection"></xref> to send to the resource.
    - id: userToken
      type: System.Object
      description: A user-defined object that is passed to the method invoked when the asynchronous operation completes.
  overload: System.Net.WebClient.UploadValuesAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>data</code> parameter is `null`."
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref> and <code>address</code> is invalid.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.  \n  \n -or-  \n  \n <code>method</code> cannot be used to send content."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.UploadValuesCompleted
  commentId: E:System.Net.WebClient.UploadValuesCompleted
  id: UploadValuesCompleted
  parent: System.Net.WebClient
  langs:
  - csharp
  name: UploadValuesCompleted
  nameWithType: WebClient.UploadValuesCompleted
  fullName: WebClient.UploadValuesCompleted
  type: Event
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Occurs when an asynchronous upload of a name/value collection completes.
  remarks: "This event is raised each time an asynchronous upload of a <xref:System.Collections.Specialized.NameValueCollection> object's data completes. These uploads are started by calling the <xref:System.Net.WebClient.UploadValuesAsync%2A> methods.  \n  \n The <xref:System.Net.UploadValuesCompletedEventHandler> is the delegate for this event. The <xref:System.Net.UploadValuesCompletedEventArgs> class provides the event handler with event data.  \n  \n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  syntax:
    content: public event System.Net.UploadValuesCompletedEventHandler UploadValuesCompleted;
    return:
      type: System.Net.UploadValuesCompletedEventHandler
      description: ''
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.UploadValuesTaskAsync(System.String,System.String,System.Collections.Specialized.NameValueCollection)
  commentId: M:System.Net.WebClient.UploadValuesTaskAsync(System.String,System.String,System.Collections.Specialized.NameValueCollection)
  id: UploadValuesTaskAsync(System.String,System.String,System.Collections.Specialized.NameValueCollection)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: UploadValuesTaskAsync(String, String, NameValueCollection)
  nameWithType: WebClient.UploadValuesTaskAsync(String, String, NameValueCollection)
  fullName: WebClient.UploadValuesTaskAsync(String, String, NameValueCollection)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Uploads the specified name/value collection to the resource identified by the specified URI as an asynchronous operation using a task object.
  remarks: "This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the name/value collection has been uploaded to the resource. The name/value collection is sent asynchronously using thread resources that are automatically allocated from the thread pool.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the underlying request is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \n  \n If the Content-type header is `null`, this method sets it to \"application/x-www-form-urlencoded\".  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public System.Threading.Tasks.Task<byte[]> UploadValuesTaskAsync (string address, string method, System.Collections.Specialized.NameValueCollection data);
    parameters:
    - id: address
      type: System.String
      description: The URI of the resource to receive the collection.
    - id: method
      type: System.String
      description: The HTTP method used to send the collection to the resource. If null, the default is POST for http and STOR for ftp.
    - id: data
      type: System.Collections.Specialized.NameValueCollection
      description: The <xref href="System.Collections.Specialized.NameValueCollection"></xref> to send to the resource.
    return:
      type: System.Threading.Tasks.Task{System.Byte[]}
      description: "Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the response sent by the server."
  overload: System.Net.WebClient.UploadValuesTaskAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>data</code> parameter is `null`."
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid.  \n  \n -or-  \n  \n <code>method</code> cannot be used to send content.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.  \n  \n -or-  \n  \n An error occurred while opening the stream.  \n  \n -or-  \n  \n The `Content-type` header is not `null` or \"application/x-www-form-urlencoded\"."
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.UploadValuesTaskAsync(System.String,System.Collections.Specialized.NameValueCollection)
  commentId: M:System.Net.WebClient.UploadValuesTaskAsync(System.String,System.Collections.Specialized.NameValueCollection)
  id: UploadValuesTaskAsync(System.String,System.Collections.Specialized.NameValueCollection)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: UploadValuesTaskAsync(String, NameValueCollection)
  nameWithType: WebClient.UploadValuesTaskAsync(String, NameValueCollection)
  fullName: WebClient.UploadValuesTaskAsync(String, NameValueCollection)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Uploads the specified name/value collection to the resource identified by the specified URI as an asynchronous operation using a task object.
  remarks: "This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the name/value collection has been uploaded to the resource. The name/value collection is sent asynchronously using thread resources that are automatically allocated from the thread pool.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the underlying request is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \n  \n If the Content-type header is `null`, this method sets it to \"application/x-www-form-urlencoded\".  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public System.Threading.Tasks.Task<byte[]> UploadValuesTaskAsync (string address, System.Collections.Specialized.NameValueCollection data);
    parameters:
    - id: address
      type: System.String
      description: The URI of the resource to receive the collection.
    - id: data
      type: System.Collections.Specialized.NameValueCollection
      description: The <xref href="System.Collections.Specialized.NameValueCollection"></xref> to send to the resource.
    return:
      type: System.Threading.Tasks.Task{System.Byte[]}
      description: "Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the response sent by the server."
  overload: System.Net.WebClient.UploadValuesTaskAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>data</code> parameter is `null`."
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.  \n  \n -or-  \n  \n An error occurred while opening the stream.  \n  \n -or-  \n  \n The `Content-type` header is not `null` or \"application/x-www-form-urlencoded\"."
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.UploadValuesTaskAsync(System.Uri,System.Collections.Specialized.NameValueCollection)
  commentId: M:System.Net.WebClient.UploadValuesTaskAsync(System.Uri,System.Collections.Specialized.NameValueCollection)
  id: UploadValuesTaskAsync(System.Uri,System.Collections.Specialized.NameValueCollection)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: UploadValuesTaskAsync(Uri, NameValueCollection)
  nameWithType: WebClient.UploadValuesTaskAsync(Uri, NameValueCollection)
  fullName: WebClient.UploadValuesTaskAsync(Uri, NameValueCollection)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Uploads the specified name/value collection to the resource identified by the specified URI as an asynchronous operation using a task object.
  remarks: "This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the name/value collection has been uploaded to the resource. The name/value collection is sent asynchronously using thread resources that are automatically allocated from the thread pool.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the underlying request is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \n  \n If the Content-type header is `null`, this method sets it to \"application/x-www-form-urlencoded\".  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public System.Threading.Tasks.Task<byte[]> UploadValuesTaskAsync (Uri address, System.Collections.Specialized.NameValueCollection data);
    parameters:
    - id: address
      type: System.Uri
      description: The URI of the resource to receive the collection.
    - id: data
      type: System.Collections.Specialized.NameValueCollection
      description: The <xref href="System.Collections.Specialized.NameValueCollection"></xref> to send to the resource.
    return:
      type: System.Threading.Tasks.Task{System.Byte[]}
      description: "Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the response sent by the server."
  overload: System.Net.WebClient.UploadValuesTaskAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>data</code> parameter is `null`."
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid.  \n  \n -or-  \n  \n An error occurred while opening the stream.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.  \n  \n -or-  \n  \n The `Content-type` header value is not `null` and is not `application/x-www-form-urlencoded`."
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.UploadValuesTaskAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)
  commentId: M:System.Net.WebClient.UploadValuesTaskAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)
  id: UploadValuesTaskAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)
  parent: System.Net.WebClient
  langs:
  - csharp
  name: UploadValuesTaskAsync(Uri, String, NameValueCollection)
  nameWithType: WebClient.UploadValuesTaskAsync(Uri, String, NameValueCollection)
  fullName: WebClient.UploadValuesTaskAsync(Uri, String, NameValueCollection)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Uploads the specified name/value collection to the resource identified by the specified URI as an asynchronous operation using a task object.
  remarks: "This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the name/value collection has been uploaded to the resource. The name/value collection is sent asynchronously using thread resources that are automatically allocated from the thread pool.  \n  \n Asynchronous operations that have not completed can be canceled using the <xref:System.Net.WebClient.CancelAsync%2A> method.  \n  \n If the underlying request is not understood by the server, the underlying protocol classes determine what occurs. Typically, a <xref:System.Net.WebException> is thrown with the <xref:System.Net.WebException.Status%2A> property set to indicate the error.  \n  \n If the Content-type header is `null`, this method sets it to \"application/x-www-form-urlencoded\".  \n  \n If the <xref:System.Net.WebClient.BaseAddress%2A> property is not an empty string (\"\") and `address` does not contain an absolute URI, `address` must be a relative URI that is combined with <xref:System.Net.WebClient.BaseAddress%2A> to form the absolute URI of the requested data. If the <xref:System.Net.WebClient.QueryString%2A> property is not an empty string, it is appended to `address`.  \n  \n This method uses the STOR command to upload an FTP resource. For an HTTP resource, the POST method is used.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public System.Threading.Tasks.Task<byte[]> UploadValuesTaskAsync (Uri address, string method, System.Collections.Specialized.NameValueCollection data);
    parameters:
    - id: address
      type: System.Uri
      description: The URI of the resource to receive the collection.
    - id: method
      type: System.String
      description: The HTTP method used to send the collection to the resource. If null, the default is POST for http and STOR for ftp.
    - id: data
      type: System.Collections.Specialized.NameValueCollection
      description: The <xref href="System.Collections.Specialized.NameValueCollection"></xref> to send to the resource.
    return:
      type: System.Threading.Tasks.Task{System.Byte[]}
      description: "Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns a <xref href=\"System.Byte\"></xref> array containing the response sent by the server."
  overload: System.Net.WebClient.UploadValuesTaskAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>address</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>data</code> parameter is `null`."
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The URI formed by combining <xref href=\"System.Net.WebClient.BaseAddress\"></xref>, and <code>address</code> is invalid.  \n  \n -or-  \n  \n <code>method</code> cannot be used to send content.  \n  \n -or-  \n  \n There was no response from the server hosting the resource.  \n  \n -or-  \n  \n An error occurred while opening the stream.  \n  \n -or-  \n  \n The `Content-type` header is not `null` or \"application/x-www-form-urlencoded\"."
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.UseDefaultCredentials
  commentId: P:System.Net.WebClient.UseDefaultCredentials
  id: UseDefaultCredentials
  parent: System.Net.WebClient
  langs:
  - csharp
  name: UseDefaultCredentials
  nameWithType: WebClient.UseDefaultCredentials
  fullName: WebClient.UseDefaultCredentials
  type: Property
  assemblies:
  - System
  - netstandard
  - System.Net.WebClient
  namespace: System.Net
  summary: Gets or sets a <xref href="System.Boolean"></xref> value that controls whether the <xref href="System.Net.CredentialCache.DefaultCredentials"></xref> are sent with requests.
  remarks: Set this property to `true` when requests made by this <xref:System.Net.WebClient> object should, if requested by the server, be authenticated using the default credentials of the currently logged on user. For client applications, this is the desired behavior in most scenarios. For middle tier applications, such as ASP.NET applications, instead of using this property, you would typically set the <xref:System.Net.WebClient.Credentials%2A> property to the credentials of the client on whose behalf the request is made.
  example:
  - "The following code example demonstrates setting this property.  \n  \n [!code-cpp[NCLWebClientAsync#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#3)]\n [!code-csharp[NCLWebClientAsync#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#3)]\n [!code-vb[NCLWebClientAsync#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#3)]"
  syntax:
    content: public bool UseDefaultCredentials { get; set; }
    return:
      type: System.Boolean
      description: '`true` if the default credentials are used; otherwise `false`. The default value is `false`.'
  overload: System.Net.WebClient.UseDefaultCredentials*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.WebClient.WriteStreamClosed
  commentId: E:System.Net.WebClient.WriteStreamClosed
  id: WriteStreamClosed
  parent: System.Net.WebClient
  langs:
  - csharp
  name: WriteStreamClosed
  nameWithType: WebClient.WriteStreamClosed
  fullName: WebClient.WriteStreamClosed
  type: Event
  assemblies:
  - System
  - System.Net.WebClient
  namespace: System.Net
  summary: Occurs when an asynchronous operation to write data to a resource using a write stream is closed.
  remarks: "This event is raised each time an asynchronous operation used to write data to a resource using a write stream is closed. These operations result from calls to the <xref:System.Net.WebClient.OpenWriteTaskAsync%2A> methods.  \n  \n The <xref:System.Net.WriteStreamClosedEventHandler> is the delegate for this event. The <xref:System.Net.WriteStreamClosedEventArgs> class provides the event handler with event data.  \n  \n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  syntax:
    content: >-
      [System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)]

      public event System.Net.WriteStreamClosedEventHandler WriteStreamClosed;
    return:
      type: System.Net.WriteStreamClosedEventHandler
      description: ''
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
  ms.author: bobdel
  manager: markl
references:
- uid: System.ComponentModel.Component
  parent: System.ComponentModel
  isExternal: false
  name: Component
  nameWithType: Component
  fullName: System.ComponentModel.Component
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Net.WebException
  parent: System.Net
  isExternal: false
  name: WebException
  nameWithType: WebException
  fullName: System.Net.WebException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.Net.WebClient.#ctor
  parent: System.Net.WebClient
  isExternal: false
  name: WebClient()
  nameWithType: WebClient.WebClient()
  fullName: WebClient.WebClient()
- uid: System.Net.WebClient.AllowReadStreamBuffering
  parent: System.Net.WebClient
  isExternal: false
  name: AllowReadStreamBuffering
  nameWithType: WebClient.AllowReadStreamBuffering
  fullName: WebClient.AllowReadStreamBuffering
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.WebClient.AllowWriteStreamBuffering
  parent: System.Net.WebClient
  isExternal: false
  name: AllowWriteStreamBuffering
  nameWithType: WebClient.AllowWriteStreamBuffering
  fullName: WebClient.AllowWriteStreamBuffering
- uid: System.Net.WebClient.BaseAddress
  parent: System.Net.WebClient
  isExternal: false
  name: BaseAddress
  nameWithType: WebClient.BaseAddress
  fullName: WebClient.BaseAddress
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.WebClient.CachePolicy
  parent: System.Net.WebClient
  isExternal: false
  name: CachePolicy
  nameWithType: WebClient.CachePolicy
  fullName: WebClient.CachePolicy
- uid: System.Net.Cache.RequestCachePolicy
  parent: System.Net.Cache
  isExternal: false
  name: RequestCachePolicy
  nameWithType: RequestCachePolicy
  fullName: System.Net.Cache.RequestCachePolicy
- uid: System.Net.WebClient.CancelAsync
  parent: System.Net.WebClient
  isExternal: false
  name: CancelAsync()
  nameWithType: WebClient.CancelAsync()
  fullName: WebClient.CancelAsync()
- uid: System.Net.WebClient.Credentials
  parent: System.Net.WebClient
  isExternal: false
  name: Credentials
  nameWithType: WebClient.Credentials
  fullName: WebClient.Credentials
- uid: System.Net.ICredentials
  parent: System.Net
  isExternal: false
  name: ICredentials
  nameWithType: ICredentials
  fullName: System.Net.ICredentials
- uid: System.Net.WebClient.DownloadData(System.String)
  parent: System.Net.WebClient
  isExternal: false
  name: DownloadData(String)
  nameWithType: WebClient.DownloadData(String)
  fullName: WebClient.DownloadData(String)
- uid: System.Byte
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Byte[]
  parent: System
  isExternal: false
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Net.WebClient.DownloadData(System.Uri)
  parent: System.Net.WebClient
  isExternal: false
  name: DownloadData(Uri)
  nameWithType: WebClient.DownloadData(Uri)
  fullName: WebClient.DownloadData(Uri)
- uid: System.Uri
  parent: System
  isExternal: false
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Net.WebClient.DownloadDataAsync(System.Uri)
  parent: System.Net.WebClient
  isExternal: false
  name: DownloadDataAsync(Uri)
  nameWithType: WebClient.DownloadDataAsync(Uri)
  fullName: WebClient.DownloadDataAsync(Uri)
- uid: System.Net.WebClient.DownloadDataAsync(System.Uri,System.Object)
  parent: System.Net.WebClient
  isExternal: false
  name: DownloadDataAsync(Uri, Object)
  nameWithType: WebClient.DownloadDataAsync(Uri, Object)
  fullName: WebClient.DownloadDataAsync(Uri, Object)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Net.WebClient.DownloadDataCompleted
  parent: System.Net.WebClient
  isExternal: false
  name: DownloadDataCompleted
  nameWithType: WebClient.DownloadDataCompleted
  fullName: WebClient.DownloadDataCompleted
- uid: System.Net.DownloadDataCompletedEventHandler
  parent: System.Net
  isExternal: false
  name: DownloadDataCompletedEventHandler
  nameWithType: DownloadDataCompletedEventHandler
  fullName: System.Net.DownloadDataCompletedEventHandler
- uid: System.Net.WebClient.DownloadDataTaskAsync(System.String)
  parent: System.Net.WebClient
  isExternal: false
  name: DownloadDataTaskAsync(String)
  nameWithType: WebClient.DownloadDataTaskAsync(String)
  fullName: WebClient.DownloadDataTaskAsync(String)
- uid: System.Threading.Tasks.Task`1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Threading.Tasks.Task{System.Byte[]}
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<Byte[]>
  nameWithType: Task<Byte[]>
  fullName: System.Threading.Tasks.Task<System.Byte[]>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.WebClient.DownloadDataTaskAsync(System.Uri)
  parent: System.Net.WebClient
  isExternal: false
  name: DownloadDataTaskAsync(Uri)
  nameWithType: WebClient.DownloadDataTaskAsync(Uri)
  fullName: WebClient.DownloadDataTaskAsync(Uri)
- uid: System.Net.WebClient.DownloadFile(System.Uri,System.String)
  parent: System.Net.WebClient
  isExternal: false
  name: DownloadFile(Uri, String)
  nameWithType: WebClient.DownloadFile(Uri, String)
  fullName: WebClient.DownloadFile(Uri, String)
- uid: System.Net.WebClient.DownloadFile(System.String,System.String)
  parent: System.Net.WebClient
  isExternal: false
  name: DownloadFile(String, String)
  nameWithType: WebClient.DownloadFile(String, String)
  fullName: WebClient.DownloadFile(String, String)
- uid: System.Net.WebClient.DownloadFileAsync(System.Uri,System.String)
  parent: System.Net.WebClient
  isExternal: false
  name: DownloadFileAsync(Uri, String)
  nameWithType: WebClient.DownloadFileAsync(Uri, String)
  fullName: WebClient.DownloadFileAsync(Uri, String)
- uid: System.Net.WebClient.DownloadFileAsync(System.Uri,System.String,System.Object)
  parent: System.Net.WebClient
  isExternal: false
  name: DownloadFileAsync(Uri, String, Object)
  nameWithType: WebClient.DownloadFileAsync(Uri, String, Object)
  fullName: WebClient.DownloadFileAsync(Uri, String, Object)
- uid: System.Net.WebClient.DownloadFileCompleted
  parent: System.Net.WebClient
  isExternal: false
  name: DownloadFileCompleted
  nameWithType: WebClient.DownloadFileCompleted
  fullName: WebClient.DownloadFileCompleted
- uid: System.ComponentModel.AsyncCompletedEventHandler
  parent: System.ComponentModel
  isExternal: false
  name: AsyncCompletedEventHandler
  nameWithType: AsyncCompletedEventHandler
  fullName: System.ComponentModel.AsyncCompletedEventHandler
- uid: System.Net.WebClient.DownloadFileTaskAsync(System.String,System.String)
  parent: System.Net.WebClient
  isExternal: false
  name: DownloadFileTaskAsync(String, String)
  nameWithType: WebClient.DownloadFileTaskAsync(String, String)
  fullName: WebClient.DownloadFileTaskAsync(String, String)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Net.WebClient.DownloadFileTaskAsync(System.Uri,System.String)
  parent: System.Net.WebClient
  isExternal: false
  name: DownloadFileTaskAsync(Uri, String)
  nameWithType: WebClient.DownloadFileTaskAsync(Uri, String)
  fullName: WebClient.DownloadFileTaskAsync(Uri, String)
- uid: System.Net.WebClient.DownloadProgressChanged
  parent: System.Net.WebClient
  isExternal: false
  name: DownloadProgressChanged
  nameWithType: WebClient.DownloadProgressChanged
  fullName: WebClient.DownloadProgressChanged
- uid: System.Net.DownloadProgressChangedEventHandler
  parent: System.Net
  isExternal: false
  name: DownloadProgressChangedEventHandler
  nameWithType: DownloadProgressChangedEventHandler
  fullName: System.Net.DownloadProgressChangedEventHandler
- uid: System.Net.WebClient.DownloadString(System.String)
  parent: System.Net.WebClient
  isExternal: false
  name: DownloadString(String)
  nameWithType: WebClient.DownloadString(String)
  fullName: WebClient.DownloadString(String)
- uid: System.Net.WebClient.DownloadString(System.Uri)
  parent: System.Net.WebClient
  isExternal: false
  name: DownloadString(Uri)
  nameWithType: WebClient.DownloadString(Uri)
  fullName: WebClient.DownloadString(Uri)
- uid: System.Net.WebClient.DownloadStringAsync(System.Uri)
  parent: System.Net.WebClient
  isExternal: false
  name: DownloadStringAsync(Uri)
  nameWithType: WebClient.DownloadStringAsync(Uri)
  fullName: WebClient.DownloadStringAsync(Uri)
- uid: System.Net.WebClient.DownloadStringAsync(System.Uri,System.Object)
  parent: System.Net.WebClient
  isExternal: false
  name: DownloadStringAsync(Uri, Object)
  nameWithType: WebClient.DownloadStringAsync(Uri, Object)
  fullName: WebClient.DownloadStringAsync(Uri, Object)
- uid: System.Net.WebClient.DownloadStringCompleted
  parent: System.Net.WebClient
  isExternal: false
  name: DownloadStringCompleted
  nameWithType: WebClient.DownloadStringCompleted
  fullName: WebClient.DownloadStringCompleted
- uid: System.Net.DownloadStringCompletedEventHandler
  parent: System.Net
  isExternal: false
  name: DownloadStringCompletedEventHandler
  nameWithType: DownloadStringCompletedEventHandler
  fullName: System.Net.DownloadStringCompletedEventHandler
- uid: System.Net.WebClient.DownloadStringTaskAsync(System.String)
  parent: System.Net.WebClient
  isExternal: false
  name: DownloadStringTaskAsync(String)
  nameWithType: WebClient.DownloadStringTaskAsync(String)
  fullName: WebClient.DownloadStringTaskAsync(String)
- uid: System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.WebClient.DownloadStringTaskAsync(System.Uri)
  parent: System.Net.WebClient
  isExternal: false
  name: DownloadStringTaskAsync(Uri)
  nameWithType: WebClient.DownloadStringTaskAsync(Uri)
  fullName: WebClient.DownloadStringTaskAsync(Uri)
- uid: System.Net.WebClient.Encoding
  parent: System.Net.WebClient
  isExternal: false
  name: Encoding
  nameWithType: WebClient.Encoding
  fullName: WebClient.Encoding
- uid: System.Text.Encoding
  parent: System.Text
  isExternal: false
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: System.Net.WebClient.GetWebRequest(System.Uri)
  parent: System.Net.WebClient
  isExternal: false
  name: GetWebRequest(Uri)
  nameWithType: WebClient.GetWebRequest(Uri)
  fullName: WebClient.GetWebRequest(Uri)
- uid: System.Net.WebRequest
  parent: System.Net
  isExternal: false
  name: WebRequest
  nameWithType: WebRequest
  fullName: System.Net.WebRequest
- uid: System.Net.WebClient.GetWebResponse(System.Net.WebRequest)
  parent: System.Net.WebClient
  isExternal: false
  name: GetWebResponse(WebRequest)
  nameWithType: WebClient.GetWebResponse(WebRequest)
  fullName: WebClient.GetWebResponse(WebRequest)
- uid: System.Net.WebResponse
  parent: System.Net
  isExternal: false
  name: WebResponse
  nameWithType: WebResponse
  fullName: System.Net.WebResponse
- uid: System.Net.WebClient.GetWebResponse(System.Net.WebRequest,System.IAsyncResult)
  parent: System.Net.WebClient
  isExternal: false
  name: GetWebResponse(WebRequest, IAsyncResult)
  nameWithType: WebClient.GetWebResponse(WebRequest, IAsyncResult)
  fullName: WebClient.GetWebResponse(WebRequest, IAsyncResult)
- uid: System.IAsyncResult
  parent: System
  isExternal: false
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.Net.WebClient.Headers
  parent: System.Net.WebClient
  isExternal: false
  name: Headers
  nameWithType: WebClient.Headers
  fullName: WebClient.Headers
- uid: System.Net.WebHeaderCollection
  parent: System.Net
  isExternal: false
  name: WebHeaderCollection
  nameWithType: WebHeaderCollection
  fullName: System.Net.WebHeaderCollection
- uid: System.Net.WebClient.IsBusy
  parent: System.Net.WebClient
  isExternal: false
  name: IsBusy
  nameWithType: WebClient.IsBusy
  fullName: WebClient.IsBusy
- uid: System.Net.WebClient.OnDownloadDataCompleted(System.Net.DownloadDataCompletedEventArgs)
  parent: System.Net.WebClient
  isExternal: false
  name: OnDownloadDataCompleted(DownloadDataCompletedEventArgs)
  nameWithType: WebClient.OnDownloadDataCompleted(DownloadDataCompletedEventArgs)
  fullName: WebClient.OnDownloadDataCompleted(DownloadDataCompletedEventArgs)
- uid: System.Net.DownloadDataCompletedEventArgs
  parent: System.Net
  isExternal: false
  name: DownloadDataCompletedEventArgs
  nameWithType: DownloadDataCompletedEventArgs
  fullName: System.Net.DownloadDataCompletedEventArgs
- uid: System.Net.WebClient.OnDownloadFileCompleted(System.ComponentModel.AsyncCompletedEventArgs)
  parent: System.Net.WebClient
  isExternal: false
  name: OnDownloadFileCompleted(AsyncCompletedEventArgs)
  nameWithType: WebClient.OnDownloadFileCompleted(AsyncCompletedEventArgs)
  fullName: WebClient.OnDownloadFileCompleted(AsyncCompletedEventArgs)
- uid: System.ComponentModel.AsyncCompletedEventArgs
  parent: System.ComponentModel
  isExternal: false
  name: AsyncCompletedEventArgs
  nameWithType: AsyncCompletedEventArgs
  fullName: System.ComponentModel.AsyncCompletedEventArgs
- uid: System.Net.WebClient.OnDownloadProgressChanged(System.Net.DownloadProgressChangedEventArgs)
  parent: System.Net.WebClient
  isExternal: false
  name: OnDownloadProgressChanged(DownloadProgressChangedEventArgs)
  nameWithType: WebClient.OnDownloadProgressChanged(DownloadProgressChangedEventArgs)
  fullName: WebClient.OnDownloadProgressChanged(DownloadProgressChangedEventArgs)
- uid: System.Net.DownloadProgressChangedEventArgs
  parent: System.Net
  isExternal: false
  name: DownloadProgressChangedEventArgs
  nameWithType: DownloadProgressChangedEventArgs
  fullName: System.Net.DownloadProgressChangedEventArgs
- uid: System.Net.WebClient.OnDownloadStringCompleted(System.Net.DownloadStringCompletedEventArgs)
  parent: System.Net.WebClient
  isExternal: false
  name: OnDownloadStringCompleted(DownloadStringCompletedEventArgs)
  nameWithType: WebClient.OnDownloadStringCompleted(DownloadStringCompletedEventArgs)
  fullName: WebClient.OnDownloadStringCompleted(DownloadStringCompletedEventArgs)
- uid: System.Net.DownloadStringCompletedEventArgs
  parent: System.Net
  isExternal: false
  name: DownloadStringCompletedEventArgs
  nameWithType: DownloadStringCompletedEventArgs
  fullName: System.Net.DownloadStringCompletedEventArgs
- uid: System.Net.WebClient.OnOpenReadCompleted(System.Net.OpenReadCompletedEventArgs)
  parent: System.Net.WebClient
  isExternal: false
  name: OnOpenReadCompleted(OpenReadCompletedEventArgs)
  nameWithType: WebClient.OnOpenReadCompleted(OpenReadCompletedEventArgs)
  fullName: WebClient.OnOpenReadCompleted(OpenReadCompletedEventArgs)
- uid: System.Net.OpenReadCompletedEventArgs
  parent: System.Net
  isExternal: false
  name: OpenReadCompletedEventArgs
  nameWithType: OpenReadCompletedEventArgs
  fullName: System.Net.OpenReadCompletedEventArgs
- uid: System.Net.WebClient.OnOpenWriteCompleted(System.Net.OpenWriteCompletedEventArgs)
  parent: System.Net.WebClient
  isExternal: false
  name: OnOpenWriteCompleted(OpenWriteCompletedEventArgs)
  nameWithType: WebClient.OnOpenWriteCompleted(OpenWriteCompletedEventArgs)
  fullName: WebClient.OnOpenWriteCompleted(OpenWriteCompletedEventArgs)
- uid: System.Net.OpenWriteCompletedEventArgs
  parent: System.Net
  isExternal: false
  name: OpenWriteCompletedEventArgs
  nameWithType: OpenWriteCompletedEventArgs
  fullName: System.Net.OpenWriteCompletedEventArgs
- uid: System.Net.WebClient.OnUploadDataCompleted(System.Net.UploadDataCompletedEventArgs)
  parent: System.Net.WebClient
  isExternal: false
  name: OnUploadDataCompleted(UploadDataCompletedEventArgs)
  nameWithType: WebClient.OnUploadDataCompleted(UploadDataCompletedEventArgs)
  fullName: WebClient.OnUploadDataCompleted(UploadDataCompletedEventArgs)
- uid: System.Net.UploadDataCompletedEventArgs
  parent: System.Net
  isExternal: false
  name: UploadDataCompletedEventArgs
  nameWithType: UploadDataCompletedEventArgs
  fullName: System.Net.UploadDataCompletedEventArgs
- uid: System.Net.WebClient.OnUploadFileCompleted(System.Net.UploadFileCompletedEventArgs)
  parent: System.Net.WebClient
  isExternal: false
  name: OnUploadFileCompleted(UploadFileCompletedEventArgs)
  nameWithType: WebClient.OnUploadFileCompleted(UploadFileCompletedEventArgs)
  fullName: WebClient.OnUploadFileCompleted(UploadFileCompletedEventArgs)
- uid: System.Net.UploadFileCompletedEventArgs
  parent: System.Net
  isExternal: false
  name: UploadFileCompletedEventArgs
  nameWithType: UploadFileCompletedEventArgs
  fullName: System.Net.UploadFileCompletedEventArgs
- uid: System.Net.WebClient.OnUploadProgressChanged(System.Net.UploadProgressChangedEventArgs)
  parent: System.Net.WebClient
  isExternal: false
  name: OnUploadProgressChanged(UploadProgressChangedEventArgs)
  nameWithType: WebClient.OnUploadProgressChanged(UploadProgressChangedEventArgs)
  fullName: WebClient.OnUploadProgressChanged(UploadProgressChangedEventArgs)
- uid: System.Net.UploadProgressChangedEventArgs
  parent: System.Net
  isExternal: false
  name: UploadProgressChangedEventArgs
  nameWithType: UploadProgressChangedEventArgs
  fullName: System.Net.UploadProgressChangedEventArgs
- uid: System.Net.WebClient.OnUploadStringCompleted(System.Net.UploadStringCompletedEventArgs)
  parent: System.Net.WebClient
  isExternal: false
  name: OnUploadStringCompleted(UploadStringCompletedEventArgs)
  nameWithType: WebClient.OnUploadStringCompleted(UploadStringCompletedEventArgs)
  fullName: WebClient.OnUploadStringCompleted(UploadStringCompletedEventArgs)
- uid: System.Net.UploadStringCompletedEventArgs
  parent: System.Net
  isExternal: false
  name: UploadStringCompletedEventArgs
  nameWithType: UploadStringCompletedEventArgs
  fullName: System.Net.UploadStringCompletedEventArgs
- uid: System.Net.WebClient.OnUploadValuesCompleted(System.Net.UploadValuesCompletedEventArgs)
  parent: System.Net.WebClient
  isExternal: false
  name: OnUploadValuesCompleted(UploadValuesCompletedEventArgs)
  nameWithType: WebClient.OnUploadValuesCompleted(UploadValuesCompletedEventArgs)
  fullName: WebClient.OnUploadValuesCompleted(UploadValuesCompletedEventArgs)
- uid: System.Net.UploadValuesCompletedEventArgs
  parent: System.Net
  isExternal: false
  name: UploadValuesCompletedEventArgs
  nameWithType: UploadValuesCompletedEventArgs
  fullName: System.Net.UploadValuesCompletedEventArgs
- uid: System.Net.WebClient.OnWriteStreamClosed(System.Net.WriteStreamClosedEventArgs)
  parent: System.Net.WebClient
  isExternal: false
  name: OnWriteStreamClosed(WriteStreamClosedEventArgs)
  nameWithType: WebClient.OnWriteStreamClosed(WriteStreamClosedEventArgs)
  fullName: WebClient.OnWriteStreamClosed(WriteStreamClosedEventArgs)
- uid: System.Net.WriteStreamClosedEventArgs
  parent: System.Net
  isExternal: false
  name: WriteStreamClosedEventArgs
  nameWithType: WriteStreamClosedEventArgs
  fullName: System.Net.WriteStreamClosedEventArgs
- uid: System.Net.WebClient.OpenRead(System.String)
  parent: System.Net.WebClient
  isExternal: false
  name: OpenRead(String)
  nameWithType: WebClient.OpenRead(String)
  fullName: WebClient.OpenRead(String)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: false
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Net.WebClient.OpenRead(System.Uri)
  parent: System.Net.WebClient
  isExternal: false
  name: OpenRead(Uri)
  nameWithType: WebClient.OpenRead(Uri)
  fullName: WebClient.OpenRead(Uri)
- uid: System.Net.WebClient.OpenReadAsync(System.Uri)
  parent: System.Net.WebClient
  isExternal: false
  name: OpenReadAsync(Uri)
  nameWithType: WebClient.OpenReadAsync(Uri)
  fullName: WebClient.OpenReadAsync(Uri)
- uid: System.Net.WebClient.OpenReadAsync(System.Uri,System.Object)
  parent: System.Net.WebClient
  isExternal: false
  name: OpenReadAsync(Uri, Object)
  nameWithType: WebClient.OpenReadAsync(Uri, Object)
  fullName: WebClient.OpenReadAsync(Uri, Object)
- uid: System.Net.WebClient.OpenReadCompleted
  parent: System.Net.WebClient
  isExternal: false
  name: OpenReadCompleted
  nameWithType: WebClient.OpenReadCompleted
  fullName: WebClient.OpenReadCompleted
- uid: System.Net.OpenReadCompletedEventHandler
  parent: System.Net
  isExternal: false
  name: OpenReadCompletedEventHandler
  nameWithType: OpenReadCompletedEventHandler
  fullName: System.Net.OpenReadCompletedEventHandler
- uid: System.Net.WebClient.OpenReadTaskAsync(System.String)
  parent: System.Net.WebClient
  isExternal: false
  name: OpenReadTaskAsync(String)
  nameWithType: WebClient.OpenReadTaskAsync(String)
  fullName: WebClient.OpenReadTaskAsync(String)
- uid: System.Threading.Tasks.Task{System.IO.Stream}
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<Stream>
  nameWithType: Task<Stream>
  fullName: System.Threading.Tasks.Task<System.IO.Stream>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.WebClient.OpenReadTaskAsync(System.Uri)
  parent: System.Net.WebClient
  isExternal: false
  name: OpenReadTaskAsync(Uri)
  nameWithType: WebClient.OpenReadTaskAsync(Uri)
  fullName: WebClient.OpenReadTaskAsync(Uri)
- uid: System.Net.WebClient.OpenWrite(System.String)
  parent: System.Net.WebClient
  isExternal: false
  name: OpenWrite(String)
  nameWithType: WebClient.OpenWrite(String)
  fullName: WebClient.OpenWrite(String)
- uid: System.Net.WebClient.OpenWrite(System.Uri)
  parent: System.Net.WebClient
  isExternal: false
  name: OpenWrite(Uri)
  nameWithType: WebClient.OpenWrite(Uri)
  fullName: WebClient.OpenWrite(Uri)
- uid: System.Net.WebClient.OpenWrite(System.String,System.String)
  parent: System.Net.WebClient
  isExternal: false
  name: OpenWrite(String, String)
  nameWithType: WebClient.OpenWrite(String, String)
  fullName: WebClient.OpenWrite(String, String)
- uid: System.Net.WebClient.OpenWrite(System.Uri,System.String)
  parent: System.Net.WebClient
  isExternal: false
  name: OpenWrite(Uri, String)
  nameWithType: WebClient.OpenWrite(Uri, String)
  fullName: WebClient.OpenWrite(Uri, String)
- uid: System.Net.WebClient.OpenWriteAsync(System.Uri,System.String,System.Object)
  parent: System.Net.WebClient
  isExternal: false
  name: OpenWriteAsync(Uri, String, Object)
  nameWithType: WebClient.OpenWriteAsync(Uri, String, Object)
  fullName: WebClient.OpenWriteAsync(Uri, String, Object)
- uid: System.Net.WebClient.OpenWriteAsync(System.Uri,System.String)
  parent: System.Net.WebClient
  isExternal: false
  name: OpenWriteAsync(Uri, String)
  nameWithType: WebClient.OpenWriteAsync(Uri, String)
  fullName: WebClient.OpenWriteAsync(Uri, String)
- uid: System.Net.WebClient.OpenWriteAsync(System.Uri)
  parent: System.Net.WebClient
  isExternal: false
  name: OpenWriteAsync(Uri)
  nameWithType: WebClient.OpenWriteAsync(Uri)
  fullName: WebClient.OpenWriteAsync(Uri)
- uid: System.Net.WebClient.OpenWriteCompleted
  parent: System.Net.WebClient
  isExternal: false
  name: OpenWriteCompleted
  nameWithType: WebClient.OpenWriteCompleted
  fullName: WebClient.OpenWriteCompleted
- uid: System.Net.OpenWriteCompletedEventHandler
  parent: System.Net
  isExternal: false
  name: OpenWriteCompletedEventHandler
  nameWithType: OpenWriteCompletedEventHandler
  fullName: System.Net.OpenWriteCompletedEventHandler
- uid: System.Net.WebClient.OpenWriteTaskAsync(System.String)
  parent: System.Net.WebClient
  isExternal: false
  name: OpenWriteTaskAsync(String)
  nameWithType: WebClient.OpenWriteTaskAsync(String)
  fullName: WebClient.OpenWriteTaskAsync(String)
- uid: System.Net.WebClient.OpenWriteTaskAsync(System.Uri)
  parent: System.Net.WebClient
  isExternal: false
  name: OpenWriteTaskAsync(Uri)
  nameWithType: WebClient.OpenWriteTaskAsync(Uri)
  fullName: WebClient.OpenWriteTaskAsync(Uri)
- uid: System.Net.WebClient.OpenWriteTaskAsync(System.String,System.String)
  parent: System.Net.WebClient
  isExternal: false
  name: OpenWriteTaskAsync(String, String)
  nameWithType: WebClient.OpenWriteTaskAsync(String, String)
  fullName: WebClient.OpenWriteTaskAsync(String, String)
- uid: System.Net.WebClient.OpenWriteTaskAsync(System.Uri,System.String)
  parent: System.Net.WebClient
  isExternal: false
  name: OpenWriteTaskAsync(Uri, String)
  nameWithType: WebClient.OpenWriteTaskAsync(Uri, String)
  fullName: WebClient.OpenWriteTaskAsync(Uri, String)
- uid: System.Net.WebClient.Proxy
  parent: System.Net.WebClient
  isExternal: false
  name: Proxy
  nameWithType: WebClient.Proxy
  fullName: WebClient.Proxy
- uid: System.Net.IWebProxy
  parent: System.Net
  isExternal: false
  name: IWebProxy
  nameWithType: IWebProxy
  fullName: System.Net.IWebProxy
- uid: System.Net.WebClient.QueryString
  parent: System.Net.WebClient
  isExternal: false
  name: QueryString
  nameWithType: WebClient.QueryString
  fullName: WebClient.QueryString
- uid: System.Collections.Specialized.NameValueCollection
  parent: System.Collections.Specialized
  isExternal: false
  name: NameValueCollection
  nameWithType: NameValueCollection
  fullName: System.Collections.Specialized.NameValueCollection
- uid: System.Net.WebClient.ResponseHeaders
  parent: System.Net.WebClient
  isExternal: false
  name: ResponseHeaders
  nameWithType: WebClient.ResponseHeaders
  fullName: WebClient.ResponseHeaders
- uid: System.Net.WebClient.UploadData(System.String,System.Byte[])
  parent: System.Net.WebClient
  isExternal: false
  name: UploadData(String, Byte[])
  nameWithType: WebClient.UploadData(String, Byte[])
  fullName: WebClient.UploadData(String, Byte[])
- uid: System.Net.WebClient.UploadData(System.Uri,System.Byte[])
  parent: System.Net.WebClient
  isExternal: false
  name: UploadData(Uri, Byte[])
  nameWithType: WebClient.UploadData(Uri, Byte[])
  fullName: WebClient.UploadData(Uri, Byte[])
- uid: System.Net.WebClient.UploadData(System.String,System.String,System.Byte[])
  parent: System.Net.WebClient
  isExternal: false
  name: UploadData(String, String, Byte[])
  nameWithType: WebClient.UploadData(String, String, Byte[])
  fullName: WebClient.UploadData(String, String, Byte[])
- uid: System.Net.WebClient.UploadData(System.Uri,System.String,System.Byte[])
  parent: System.Net.WebClient
  isExternal: false
  name: UploadData(Uri, String, Byte[])
  nameWithType: WebClient.UploadData(Uri, String, Byte[])
  fullName: WebClient.UploadData(Uri, String, Byte[])
- uid: System.Net.WebClient.UploadDataAsync(System.Uri,System.String,System.Byte[])
  parent: System.Net.WebClient
  isExternal: false
  name: UploadDataAsync(Uri, String, Byte[])
  nameWithType: WebClient.UploadDataAsync(Uri, String, Byte[])
  fullName: WebClient.UploadDataAsync(Uri, String, Byte[])
- uid: System.Net.WebClient.UploadDataAsync(System.Uri,System.String,System.Byte[],System.Object)
  parent: System.Net.WebClient
  isExternal: false
  name: UploadDataAsync(Uri, String, Byte[], Object)
  nameWithType: WebClient.UploadDataAsync(Uri, String, Byte[], Object)
  fullName: WebClient.UploadDataAsync(Uri, String, Byte[], Object)
- uid: System.Net.WebClient.UploadDataAsync(System.Uri,System.Byte[])
  parent: System.Net.WebClient
  isExternal: false
  name: UploadDataAsync(Uri, Byte[])
  nameWithType: WebClient.UploadDataAsync(Uri, Byte[])
  fullName: WebClient.UploadDataAsync(Uri, Byte[])
- uid: System.Net.WebClient.UploadDataCompleted
  parent: System.Net.WebClient
  isExternal: false
  name: UploadDataCompleted
  nameWithType: WebClient.UploadDataCompleted
  fullName: WebClient.UploadDataCompleted
- uid: System.Net.UploadDataCompletedEventHandler
  parent: System.Net
  isExternal: false
  name: UploadDataCompletedEventHandler
  nameWithType: UploadDataCompletedEventHandler
  fullName: System.Net.UploadDataCompletedEventHandler
- uid: System.Net.WebClient.UploadDataTaskAsync(System.String,System.Byte[])
  parent: System.Net.WebClient
  isExternal: false
  name: UploadDataTaskAsync(String, Byte[])
  nameWithType: WebClient.UploadDataTaskAsync(String, Byte[])
  fullName: WebClient.UploadDataTaskAsync(String, Byte[])
- uid: System.Net.WebClient.UploadDataTaskAsync(System.Uri,System.Byte[])
  parent: System.Net.WebClient
  isExternal: false
  name: UploadDataTaskAsync(Uri, Byte[])
  nameWithType: WebClient.UploadDataTaskAsync(Uri, Byte[])
  fullName: WebClient.UploadDataTaskAsync(Uri, Byte[])
- uid: System.Net.WebClient.UploadDataTaskAsync(System.String,System.String,System.Byte[])
  parent: System.Net.WebClient
  isExternal: false
  name: UploadDataTaskAsync(String, String, Byte[])
  nameWithType: WebClient.UploadDataTaskAsync(String, String, Byte[])
  fullName: WebClient.UploadDataTaskAsync(String, String, Byte[])
- uid: System.Net.WebClient.UploadDataTaskAsync(System.Uri,System.String,System.Byte[])
  parent: System.Net.WebClient
  isExternal: false
  name: UploadDataTaskAsync(Uri, String, Byte[])
  nameWithType: WebClient.UploadDataTaskAsync(Uri, String, Byte[])
  fullName: WebClient.UploadDataTaskAsync(Uri, String, Byte[])
- uid: System.Net.WebClient.UploadFile(System.String,System.String)
  parent: System.Net.WebClient
  isExternal: false
  name: UploadFile(String, String)
  nameWithType: WebClient.UploadFile(String, String)
  fullName: WebClient.UploadFile(String, String)
- uid: System.Net.WebClient.UploadFile(System.Uri,System.String)
  parent: System.Net.WebClient
  isExternal: false
  name: UploadFile(Uri, String)
  nameWithType: WebClient.UploadFile(Uri, String)
  fullName: WebClient.UploadFile(Uri, String)
- uid: System.Net.WebClient.UploadFile(System.String,System.String,System.String)
  parent: System.Net.WebClient
  isExternal: false
  name: UploadFile(String, String, String)
  nameWithType: WebClient.UploadFile(String, String, String)
  fullName: WebClient.UploadFile(String, String, String)
- uid: System.Net.WebClient.UploadFile(System.Uri,System.String,System.String)
  parent: System.Net.WebClient
  isExternal: false
  name: UploadFile(Uri, String, String)
  nameWithType: WebClient.UploadFile(Uri, String, String)
  fullName: WebClient.UploadFile(Uri, String, String)
- uid: System.Net.WebClient.UploadFileAsync(System.Uri,System.String)
  parent: System.Net.WebClient
  isExternal: false
  name: UploadFileAsync(Uri, String)
  nameWithType: WebClient.UploadFileAsync(Uri, String)
  fullName: WebClient.UploadFileAsync(Uri, String)
- uid: System.Net.WebClient.UploadFileAsync(System.Uri,System.String,System.String)
  parent: System.Net.WebClient
  isExternal: false
  name: UploadFileAsync(Uri, String, String)
  nameWithType: WebClient.UploadFileAsync(Uri, String, String)
  fullName: WebClient.UploadFileAsync(Uri, String, String)
- uid: System.Net.WebClient.UploadFileAsync(System.Uri,System.String,System.String,System.Object)
  parent: System.Net.WebClient
  isExternal: false
  name: UploadFileAsync(Uri, String, String, Object)
  nameWithType: WebClient.UploadFileAsync(Uri, String, String, Object)
  fullName: WebClient.UploadFileAsync(Uri, String, String, Object)
- uid: System.Net.WebClient.UploadFileCompleted
  parent: System.Net.WebClient
  isExternal: false
  name: UploadFileCompleted
  nameWithType: WebClient.UploadFileCompleted
  fullName: WebClient.UploadFileCompleted
- uid: System.Net.UploadFileCompletedEventHandler
  parent: System.Net
  isExternal: false
  name: UploadFileCompletedEventHandler
  nameWithType: UploadFileCompletedEventHandler
  fullName: System.Net.UploadFileCompletedEventHandler
- uid: System.Net.WebClient.UploadFileTaskAsync(System.Uri,System.String,System.String)
  parent: System.Net.WebClient
  isExternal: false
  name: UploadFileTaskAsync(Uri, String, String)
  nameWithType: WebClient.UploadFileTaskAsync(Uri, String, String)
  fullName: WebClient.UploadFileTaskAsync(Uri, String, String)
- uid: System.Net.WebClient.UploadFileTaskAsync(System.String,System.String,System.String)
  parent: System.Net.WebClient
  isExternal: false
  name: UploadFileTaskAsync(String, String, String)
  nameWithType: WebClient.UploadFileTaskAsync(String, String, String)
  fullName: WebClient.UploadFileTaskAsync(String, String, String)
- uid: System.Net.WebClient.UploadFileTaskAsync(System.String,System.String)
  parent: System.Net.WebClient
  isExternal: false
  name: UploadFileTaskAsync(String, String)
  nameWithType: WebClient.UploadFileTaskAsync(String, String)
  fullName: WebClient.UploadFileTaskAsync(String, String)
- uid: System.Net.WebClient.UploadFileTaskAsync(System.Uri,System.String)
  parent: System.Net.WebClient
  isExternal: false
  name: UploadFileTaskAsync(Uri, String)
  nameWithType: WebClient.UploadFileTaskAsync(Uri, String)
  fullName: WebClient.UploadFileTaskAsync(Uri, String)
- uid: System.Net.WebClient.UploadProgressChanged
  parent: System.Net.WebClient
  isExternal: false
  name: UploadProgressChanged
  nameWithType: WebClient.UploadProgressChanged
  fullName: WebClient.UploadProgressChanged
- uid: System.Net.UploadProgressChangedEventHandler
  parent: System.Net
  isExternal: false
  name: UploadProgressChangedEventHandler
  nameWithType: UploadProgressChangedEventHandler
  fullName: System.Net.UploadProgressChangedEventHandler
- uid: System.Net.WebClient.UploadString(System.String,System.String)
  parent: System.Net.WebClient
  isExternal: false
  name: UploadString(String, String)
  nameWithType: WebClient.UploadString(String, String)
  fullName: WebClient.UploadString(String, String)
- uid: System.Net.WebClient.UploadString(System.Uri,System.String)
  parent: System.Net.WebClient
  isExternal: false
  name: UploadString(Uri, String)
  nameWithType: WebClient.UploadString(Uri, String)
  fullName: WebClient.UploadString(Uri, String)
- uid: System.Net.WebClient.UploadString(System.String,System.String,System.String)
  parent: System.Net.WebClient
  isExternal: false
  name: UploadString(String, String, String)
  nameWithType: WebClient.UploadString(String, String, String)
  fullName: WebClient.UploadString(String, String, String)
- uid: System.Net.WebClient.UploadString(System.Uri,System.String,System.String)
  parent: System.Net.WebClient
  isExternal: false
  name: UploadString(Uri, String, String)
  nameWithType: WebClient.UploadString(Uri, String, String)
  fullName: WebClient.UploadString(Uri, String, String)
- uid: System.Net.WebClient.UploadStringAsync(System.Uri,System.String)
  parent: System.Net.WebClient
  isExternal: false
  name: UploadStringAsync(Uri, String)
  nameWithType: WebClient.UploadStringAsync(Uri, String)
  fullName: WebClient.UploadStringAsync(Uri, String)
- uid: System.Net.WebClient.UploadStringAsync(System.Uri,System.String,System.String)
  parent: System.Net.WebClient
  isExternal: false
  name: UploadStringAsync(Uri, String, String)
  nameWithType: WebClient.UploadStringAsync(Uri, String, String)
  fullName: WebClient.UploadStringAsync(Uri, String, String)
- uid: System.Net.WebClient.UploadStringAsync(System.Uri,System.String,System.String,System.Object)
  parent: System.Net.WebClient
  isExternal: false
  name: UploadStringAsync(Uri, String, String, Object)
  nameWithType: WebClient.UploadStringAsync(Uri, String, String, Object)
  fullName: WebClient.UploadStringAsync(Uri, String, String, Object)
- uid: System.Net.WebClient.UploadStringCompleted
  parent: System.Net.WebClient
  isExternal: false
  name: UploadStringCompleted
  nameWithType: WebClient.UploadStringCompleted
  fullName: WebClient.UploadStringCompleted
- uid: System.Net.UploadStringCompletedEventHandler
  parent: System.Net
  isExternal: false
  name: UploadStringCompletedEventHandler
  nameWithType: UploadStringCompletedEventHandler
  fullName: System.Net.UploadStringCompletedEventHandler
- uid: System.Net.WebClient.UploadStringTaskAsync(System.Uri,System.String,System.String)
  parent: System.Net.WebClient
  isExternal: false
  name: UploadStringTaskAsync(Uri, String, String)
  nameWithType: WebClient.UploadStringTaskAsync(Uri, String, String)
  fullName: WebClient.UploadStringTaskAsync(Uri, String, String)
- uid: System.Net.WebClient.UploadStringTaskAsync(System.String,System.String,System.String)
  parent: System.Net.WebClient
  isExternal: false
  name: UploadStringTaskAsync(String, String, String)
  nameWithType: WebClient.UploadStringTaskAsync(String, String, String)
  fullName: WebClient.UploadStringTaskAsync(String, String, String)
- uid: System.Net.WebClient.UploadStringTaskAsync(System.String,System.String)
  parent: System.Net.WebClient
  isExternal: false
  name: UploadStringTaskAsync(String, String)
  nameWithType: WebClient.UploadStringTaskAsync(String, String)
  fullName: WebClient.UploadStringTaskAsync(String, String)
- uid: System.Net.WebClient.UploadStringTaskAsync(System.Uri,System.String)
  parent: System.Net.WebClient
  isExternal: false
  name: UploadStringTaskAsync(Uri, String)
  nameWithType: WebClient.UploadStringTaskAsync(Uri, String)
  fullName: WebClient.UploadStringTaskAsync(Uri, String)
- uid: System.Net.WebClient.UploadValues(System.String,System.Collections.Specialized.NameValueCollection)
  parent: System.Net.WebClient
  isExternal: false
  name: UploadValues(String, NameValueCollection)
  nameWithType: WebClient.UploadValues(String, NameValueCollection)
  fullName: WebClient.UploadValues(String, NameValueCollection)
- uid: System.Net.WebClient.UploadValues(System.Uri,System.Collections.Specialized.NameValueCollection)
  parent: System.Net.WebClient
  isExternal: false
  name: UploadValues(Uri, NameValueCollection)
  nameWithType: WebClient.UploadValues(Uri, NameValueCollection)
  fullName: WebClient.UploadValues(Uri, NameValueCollection)
- uid: System.Net.WebClient.UploadValues(System.String,System.String,System.Collections.Specialized.NameValueCollection)
  parent: System.Net.WebClient
  isExternal: false
  name: UploadValues(String, String, NameValueCollection)
  nameWithType: WebClient.UploadValues(String, String, NameValueCollection)
  fullName: WebClient.UploadValues(String, String, NameValueCollection)
- uid: System.Net.WebClient.UploadValues(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)
  parent: System.Net.WebClient
  isExternal: false
  name: UploadValues(Uri, String, NameValueCollection)
  nameWithType: WebClient.UploadValues(Uri, String, NameValueCollection)
  fullName: WebClient.UploadValues(Uri, String, NameValueCollection)
- uid: System.Net.WebClient.UploadValuesAsync(System.Uri,System.Collections.Specialized.NameValueCollection)
  parent: System.Net.WebClient
  isExternal: false
  name: UploadValuesAsync(Uri, NameValueCollection)
  nameWithType: WebClient.UploadValuesAsync(Uri, NameValueCollection)
  fullName: WebClient.UploadValuesAsync(Uri, NameValueCollection)
- uid: System.Net.WebClient.UploadValuesAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)
  parent: System.Net.WebClient
  isExternal: false
  name: UploadValuesAsync(Uri, String, NameValueCollection)
  nameWithType: WebClient.UploadValuesAsync(Uri, String, NameValueCollection)
  fullName: WebClient.UploadValuesAsync(Uri, String, NameValueCollection)
- uid: System.Net.WebClient.UploadValuesAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection,System.Object)
  parent: System.Net.WebClient
  isExternal: false
  name: UploadValuesAsync(Uri, String, NameValueCollection, Object)
  nameWithType: WebClient.UploadValuesAsync(Uri, String, NameValueCollection, Object)
  fullName: WebClient.UploadValuesAsync(Uri, String, NameValueCollection, Object)
- uid: System.Net.WebClient.UploadValuesCompleted
  parent: System.Net.WebClient
  isExternal: false
  name: UploadValuesCompleted
  nameWithType: WebClient.UploadValuesCompleted
  fullName: WebClient.UploadValuesCompleted
- uid: System.Net.UploadValuesCompletedEventHandler
  parent: System.Net
  isExternal: false
  name: UploadValuesCompletedEventHandler
  nameWithType: UploadValuesCompletedEventHandler
  fullName: System.Net.UploadValuesCompletedEventHandler
- uid: System.Net.WebClient.UploadValuesTaskAsync(System.String,System.String,System.Collections.Specialized.NameValueCollection)
  parent: System.Net.WebClient
  isExternal: false
  name: UploadValuesTaskAsync(String, String, NameValueCollection)
  nameWithType: WebClient.UploadValuesTaskAsync(String, String, NameValueCollection)
  fullName: WebClient.UploadValuesTaskAsync(String, String, NameValueCollection)
- uid: System.Net.WebClient.UploadValuesTaskAsync(System.String,System.Collections.Specialized.NameValueCollection)
  parent: System.Net.WebClient
  isExternal: false
  name: UploadValuesTaskAsync(String, NameValueCollection)
  nameWithType: WebClient.UploadValuesTaskAsync(String, NameValueCollection)
  fullName: WebClient.UploadValuesTaskAsync(String, NameValueCollection)
- uid: System.Net.WebClient.UploadValuesTaskAsync(System.Uri,System.Collections.Specialized.NameValueCollection)
  parent: System.Net.WebClient
  isExternal: false
  name: UploadValuesTaskAsync(Uri, NameValueCollection)
  nameWithType: WebClient.UploadValuesTaskAsync(Uri, NameValueCollection)
  fullName: WebClient.UploadValuesTaskAsync(Uri, NameValueCollection)
- uid: System.Net.WebClient.UploadValuesTaskAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)
  parent: System.Net.WebClient
  isExternal: false
  name: UploadValuesTaskAsync(Uri, String, NameValueCollection)
  nameWithType: WebClient.UploadValuesTaskAsync(Uri, String, NameValueCollection)
  fullName: WebClient.UploadValuesTaskAsync(Uri, String, NameValueCollection)
- uid: System.Net.WebClient.UseDefaultCredentials
  parent: System.Net.WebClient
  isExternal: false
  name: UseDefaultCredentials
  nameWithType: WebClient.UseDefaultCredentials
  fullName: WebClient.UseDefaultCredentials
- uid: System.Net.WebClient.WriteStreamClosed
  parent: System.Net.WebClient
  isExternal: false
  name: WriteStreamClosed
  nameWithType: WebClient.WriteStreamClosed
  fullName: WebClient.WriteStreamClosed
- uid: System.Net.WriteStreamClosedEventHandler
  parent: System.Net
  isExternal: false
  name: WriteStreamClosedEventHandler
  nameWithType: WriteStreamClosedEventHandler
  fullName: System.Net.WriteStreamClosedEventHandler
- uid: System.Net.WebClient.#ctor*
  parent: System.Net.WebClient
  isExternal: false
  name: WebClient
  nameWithType: WebClient.WebClient
  fullName: WebClient.WebClient
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
- uid: System.Net.WebClient.AllowReadStreamBuffering*
  parent: System.Net.WebClient
  isExternal: false
  name: AllowReadStreamBuffering
  nameWithType: WebClient.AllowReadStreamBuffering
  fullName: WebClient.AllowReadStreamBuffering
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
- uid: System.Net.WebClient.AllowWriteStreamBuffering*
  parent: System.Net.WebClient
  isExternal: false
  name: AllowWriteStreamBuffering
  nameWithType: WebClient.AllowWriteStreamBuffering
  fullName: WebClient.AllowWriteStreamBuffering
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
- uid: System.Net.WebClient.BaseAddress*
  parent: System.Net.WebClient
  isExternal: false
  name: BaseAddress
  nameWithType: WebClient.BaseAddress
  fullName: WebClient.BaseAddress
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
- uid: System.Net.WebClient.CachePolicy*
  parent: System.Net.WebClient
  isExternal: false
  name: CachePolicy
  nameWithType: WebClient.CachePolicy
  fullName: WebClient.CachePolicy
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
- uid: System.Net.WebClient.CancelAsync*
  parent: System.Net.WebClient
  isExternal: false
  name: CancelAsync
  nameWithType: WebClient.CancelAsync
  fullName: WebClient.CancelAsync
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
- uid: System.Net.WebClient.Credentials*
  parent: System.Net.WebClient
  isExternal: false
  name: Credentials
  nameWithType: WebClient.Credentials
  fullName: WebClient.Credentials
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
- uid: System.Net.WebClient.DownloadData*
  parent: System.Net.WebClient
  isExternal: false
  name: DownloadData
  nameWithType: WebClient.DownloadData
  fullName: WebClient.DownloadData
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
- uid: System.Net.WebClient.DownloadDataAsync*
  parent: System.Net.WebClient
  isExternal: false
  name: DownloadDataAsync
  nameWithType: WebClient.DownloadDataAsync
  fullName: WebClient.DownloadDataAsync
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
- uid: System.Net.WebClient.DownloadDataTaskAsync*
  parent: System.Net.WebClient
  isExternal: false
  name: DownloadDataTaskAsync
  nameWithType: WebClient.DownloadDataTaskAsync
  fullName: WebClient.DownloadDataTaskAsync
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
- uid: System.Net.WebClient.DownloadFile*
  parent: System.Net.WebClient
  isExternal: false
  name: DownloadFile
  nameWithType: WebClient.DownloadFile
  fullName: WebClient.DownloadFile
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
- uid: System.Net.WebClient.DownloadFileAsync*
  parent: System.Net.WebClient
  isExternal: false
  name: DownloadFileAsync
  nameWithType: WebClient.DownloadFileAsync
  fullName: WebClient.DownloadFileAsync
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
- uid: System.Net.WebClient.DownloadFileTaskAsync*
  parent: System.Net.WebClient
  isExternal: false
  name: DownloadFileTaskAsync
  nameWithType: WebClient.DownloadFileTaskAsync
  fullName: WebClient.DownloadFileTaskAsync
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
- uid: System.Net.WebClient.DownloadString*
  parent: System.Net.WebClient
  isExternal: false
  name: DownloadString
  nameWithType: WebClient.DownloadString
  fullName: WebClient.DownloadString
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
- uid: System.Net.WebClient.DownloadStringAsync*
  parent: System.Net.WebClient
  isExternal: false
  name: DownloadStringAsync
  nameWithType: WebClient.DownloadStringAsync
  fullName: WebClient.DownloadStringAsync
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
- uid: System.Net.WebClient.DownloadStringTaskAsync*
  parent: System.Net.WebClient
  isExternal: false
  name: DownloadStringTaskAsync
  nameWithType: WebClient.DownloadStringTaskAsync
  fullName: WebClient.DownloadStringTaskAsync
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
- uid: System.Net.WebClient.Encoding*
  parent: System.Net.WebClient
  isExternal: false
  name: Encoding
  nameWithType: WebClient.Encoding
  fullName: WebClient.Encoding
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
- uid: System.Net.WebClient.GetWebRequest*
  parent: System.Net.WebClient
  isExternal: false
  name: GetWebRequest
  nameWithType: WebClient.GetWebRequest
  fullName: WebClient.GetWebRequest
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
- uid: System.Net.WebClient.GetWebResponse*
  parent: System.Net.WebClient
  isExternal: false
  name: GetWebResponse
  nameWithType: WebClient.GetWebResponse
  fullName: WebClient.GetWebResponse
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
- uid: System.Net.WebClient.Headers*
  parent: System.Net.WebClient
  isExternal: false
  name: Headers
  nameWithType: WebClient.Headers
  fullName: WebClient.Headers
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
- uid: System.Net.WebClient.IsBusy*
  parent: System.Net.WebClient
  isExternal: false
  name: IsBusy
  nameWithType: WebClient.IsBusy
  fullName: WebClient.IsBusy
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
- uid: System.Net.WebClient.OnDownloadDataCompleted*
  parent: System.Net.WebClient
  isExternal: false
  name: OnDownloadDataCompleted
  nameWithType: WebClient.OnDownloadDataCompleted
  fullName: WebClient.OnDownloadDataCompleted
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
- uid: System.Net.WebClient.OnDownloadFileCompleted*
  parent: System.Net.WebClient
  isExternal: false
  name: OnDownloadFileCompleted
  nameWithType: WebClient.OnDownloadFileCompleted
  fullName: WebClient.OnDownloadFileCompleted
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
- uid: System.Net.WebClient.OnDownloadProgressChanged*
  parent: System.Net.WebClient
  isExternal: false
  name: OnDownloadProgressChanged
  nameWithType: WebClient.OnDownloadProgressChanged
  fullName: WebClient.OnDownloadProgressChanged
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
- uid: System.Net.WebClient.OnDownloadStringCompleted*
  parent: System.Net.WebClient
  isExternal: false
  name: OnDownloadStringCompleted
  nameWithType: WebClient.OnDownloadStringCompleted
  fullName: WebClient.OnDownloadStringCompleted
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
- uid: System.Net.WebClient.OnOpenReadCompleted*
  parent: System.Net.WebClient
  isExternal: false
  name: OnOpenReadCompleted
  nameWithType: WebClient.OnOpenReadCompleted
  fullName: WebClient.OnOpenReadCompleted
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
- uid: System.Net.WebClient.OnOpenWriteCompleted*
  parent: System.Net.WebClient
  isExternal: false
  name: OnOpenWriteCompleted
  nameWithType: WebClient.OnOpenWriteCompleted
  fullName: WebClient.OnOpenWriteCompleted
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
- uid: System.Net.WebClient.OnUploadDataCompleted*
  parent: System.Net.WebClient
  isExternal: false
  name: OnUploadDataCompleted
  nameWithType: WebClient.OnUploadDataCompleted
  fullName: WebClient.OnUploadDataCompleted
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
- uid: System.Net.WebClient.OnUploadFileCompleted*
  parent: System.Net.WebClient
  isExternal: false
  name: OnUploadFileCompleted
  nameWithType: WebClient.OnUploadFileCompleted
  fullName: WebClient.OnUploadFileCompleted
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
- uid: System.Net.WebClient.OnUploadProgressChanged*
  parent: System.Net.WebClient
  isExternal: false
  name: OnUploadProgressChanged
  nameWithType: WebClient.OnUploadProgressChanged
  fullName: WebClient.OnUploadProgressChanged
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
- uid: System.Net.WebClient.OnUploadStringCompleted*
  parent: System.Net.WebClient
  isExternal: false
  name: OnUploadStringCompleted
  nameWithType: WebClient.OnUploadStringCompleted
  fullName: WebClient.OnUploadStringCompleted
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
- uid: System.Net.WebClient.OnUploadValuesCompleted*
  parent: System.Net.WebClient
  isExternal: false
  name: OnUploadValuesCompleted
  nameWithType: WebClient.OnUploadValuesCompleted
  fullName: WebClient.OnUploadValuesCompleted
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
- uid: System.Net.WebClient.OnWriteStreamClosed*
  parent: System.Net.WebClient
  isExternal: false
  name: OnWriteStreamClosed
  nameWithType: WebClient.OnWriteStreamClosed
  fullName: WebClient.OnWriteStreamClosed
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
- uid: System.Net.WebClient.OpenRead*
  parent: System.Net.WebClient
  isExternal: false
  name: OpenRead
  nameWithType: WebClient.OpenRead
  fullName: WebClient.OpenRead
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
- uid: System.Net.WebClient.OpenReadAsync*
  parent: System.Net.WebClient
  isExternal: false
  name: OpenReadAsync
  nameWithType: WebClient.OpenReadAsync
  fullName: WebClient.OpenReadAsync
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
- uid: System.Net.WebClient.OpenReadTaskAsync*
  parent: System.Net.WebClient
  isExternal: false
  name: OpenReadTaskAsync
  nameWithType: WebClient.OpenReadTaskAsync
  fullName: WebClient.OpenReadTaskAsync
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
- uid: System.Net.WebClient.OpenWrite*
  parent: System.Net.WebClient
  isExternal: false
  name: OpenWrite
  nameWithType: WebClient.OpenWrite
  fullName: WebClient.OpenWrite
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
- uid: System.Net.WebClient.OpenWriteAsync*
  parent: System.Net.WebClient
  isExternal: false
  name: OpenWriteAsync
  nameWithType: WebClient.OpenWriteAsync
  fullName: WebClient.OpenWriteAsync
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
- uid: System.Net.WebClient.OpenWriteTaskAsync*
  parent: System.Net.WebClient
  isExternal: false
  name: OpenWriteTaskAsync
  nameWithType: WebClient.OpenWriteTaskAsync
  fullName: WebClient.OpenWriteTaskAsync
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
- uid: System.Net.WebClient.Proxy*
  parent: System.Net.WebClient
  isExternal: false
  name: Proxy
  nameWithType: WebClient.Proxy
  fullName: WebClient.Proxy
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
- uid: System.Net.WebClient.QueryString*
  parent: System.Net.WebClient
  isExternal: false
  name: QueryString
  nameWithType: WebClient.QueryString
  fullName: WebClient.QueryString
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
- uid: System.Net.WebClient.ResponseHeaders*
  parent: System.Net.WebClient
  isExternal: false
  name: ResponseHeaders
  nameWithType: WebClient.ResponseHeaders
  fullName: WebClient.ResponseHeaders
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
- uid: System.Net.WebClient.UploadData*
  parent: System.Net.WebClient
  isExternal: false
  name: UploadData
  nameWithType: WebClient.UploadData
  fullName: WebClient.UploadData
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
- uid: System.Net.WebClient.UploadDataAsync*
  parent: System.Net.WebClient
  isExternal: false
  name: UploadDataAsync
  nameWithType: WebClient.UploadDataAsync
  fullName: WebClient.UploadDataAsync
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
- uid: System.Net.WebClient.UploadDataTaskAsync*
  parent: System.Net.WebClient
  isExternal: false
  name: UploadDataTaskAsync
  nameWithType: WebClient.UploadDataTaskAsync
  fullName: WebClient.UploadDataTaskAsync
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
- uid: System.Net.WebClient.UploadFile*
  parent: System.Net.WebClient
  isExternal: false
  name: UploadFile
  nameWithType: WebClient.UploadFile
  fullName: WebClient.UploadFile
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
- uid: System.Net.WebClient.UploadFileAsync*
  parent: System.Net.WebClient
  isExternal: false
  name: UploadFileAsync
  nameWithType: WebClient.UploadFileAsync
  fullName: WebClient.UploadFileAsync
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
- uid: System.Net.WebClient.UploadFileTaskAsync*
  parent: System.Net.WebClient
  isExternal: false
  name: UploadFileTaskAsync
  nameWithType: WebClient.UploadFileTaskAsync
  fullName: WebClient.UploadFileTaskAsync
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
- uid: System.Net.WebClient.UploadString*
  parent: System.Net.WebClient
  isExternal: false
  name: UploadString
  nameWithType: WebClient.UploadString
  fullName: WebClient.UploadString
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
- uid: System.Net.WebClient.UploadStringAsync*
  parent: System.Net.WebClient
  isExternal: false
  name: UploadStringAsync
  nameWithType: WebClient.UploadStringAsync
  fullName: WebClient.UploadStringAsync
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
- uid: System.Net.WebClient.UploadStringTaskAsync*
  parent: System.Net.WebClient
  isExternal: false
  name: UploadStringTaskAsync
  nameWithType: WebClient.UploadStringTaskAsync
  fullName: WebClient.UploadStringTaskAsync
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
- uid: System.Net.WebClient.UploadValues*
  parent: System.Net.WebClient
  isExternal: false
  name: UploadValues
  nameWithType: WebClient.UploadValues
  fullName: WebClient.UploadValues
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
- uid: System.Net.WebClient.UploadValuesAsync*
  parent: System.Net.WebClient
  isExternal: false
  name: UploadValuesAsync
  nameWithType: WebClient.UploadValuesAsync
  fullName: WebClient.UploadValuesAsync
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
- uid: System.Net.WebClient.UploadValuesTaskAsync*
  parent: System.Net.WebClient
  isExternal: false
  name: UploadValuesTaskAsync
  nameWithType: WebClient.UploadValuesTaskAsync
  fullName: WebClient.UploadValuesTaskAsync
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
- uid: System.Net.WebClient.UseDefaultCredentials*
  parent: System.Net.WebClient
  isExternal: false
  name: UseDefaultCredentials
  nameWithType: WebClient.UseDefaultCredentials
  fullName: WebClient.UseDefaultCredentials
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebClient.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.ComponentModel.Component.ToString
  parent: System.ComponentModel.Component
  isExternal: false
  name: ToString()
  nameWithType: Component.ToString()
  fullName: Component.ToString()
- uid: System.MarshalByRefObject.CreateObjRef(System.Type)
  parent: System.MarshalByRefObject
  isExternal: false
  name: CreateObjRef(Type)
  nameWithType: MarshalByRefObject.CreateObjRef(Type)
  fullName: MarshalByRefObject.CreateObjRef(Type)
- uid: System.MarshalByRefObject.GetLifetimeService
  parent: System.MarshalByRefObject
  isExternal: false
  name: GetLifetimeService()
  nameWithType: MarshalByRefObject.GetLifetimeService()
  fullName: MarshalByRefObject.GetLifetimeService()
- uid: System.MarshalByRefObject.InitializeLifetimeService
  parent: System.MarshalByRefObject
  isExternal: false
  name: InitializeLifetimeService()
  nameWithType: MarshalByRefObject.InitializeLifetimeService()
  fullName: MarshalByRefObject.InitializeLifetimeService()
- uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  parent: System.MarshalByRefObject
  isExternal: false
  name: MemberwiseClone(Boolean)
  nameWithType: MarshalByRefObject.MemberwiseClone(Boolean)
  fullName: MarshalByRefObject.MemberwiseClone(Boolean)
- uid: System.ComponentModel.Component.CanRaiseEvents
  parent: System.ComponentModel.Component
  isExternal: false
  name: CanRaiseEvents
  nameWithType: Component.CanRaiseEvents
  fullName: Component.CanRaiseEvents
- uid: System.ComponentModel.Component.Container
  parent: System.ComponentModel.Component
  isExternal: false
  name: Container
  nameWithType: Component.Container
  fullName: Component.Container
- uid: System.ComponentModel.Component.DesignMode
  parent: System.ComponentModel.Component
  isExternal: false
  name: DesignMode
  nameWithType: Component.DesignMode
  fullName: Component.DesignMode
- uid: System.ComponentModel.Component.Dispose
  parent: System.ComponentModel.Component
  isExternal: false
  name: Dispose()
  nameWithType: Component.Dispose()
  fullName: Component.Dispose()
- uid: System.ComponentModel.Component.Dispose(System.Boolean)
  parent: System.ComponentModel.Component
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: Component.Dispose(Boolean)
  fullName: Component.Dispose(Boolean)
- uid: System.ComponentModel.Component.Disposed
  parent: System.ComponentModel.Component
  isExternal: false
  name: Disposed
  nameWithType: Component.Disposed
  fullName: Component.Disposed
- uid: System.ComponentModel.Component.Events
  parent: System.ComponentModel.Component
  isExternal: false
  name: Events
  nameWithType: Component.Events
  fullName: Component.Events
- uid: System.ComponentModel.Component.GetService(System.Type)
  parent: System.ComponentModel.Component
  isExternal: false
  name: GetService(Type)
  nameWithType: Component.GetService(Type)
  fullName: Component.GetService(Type)
- uid: System.ComponentModel.Component.Site
  parent: System.ComponentModel.Component
  isExternal: false
  name: Site
  nameWithType: Component.Site
  fullName: Component.Site
