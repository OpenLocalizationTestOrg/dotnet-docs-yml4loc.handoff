{"nodes":[{"content":"Performs operations on <xref href=\"System.String\"></xref> instances that contain file or directory path information. These operations are performed in a cross-platform manner.","nodes":[{"pos":[0,175],"content":"Performs operations on <xref href=\"System.String\"></xref> instances that contain file or directory path information. These operations are performed in a cross-platform manner.","nodes":[{"content":"Performs operations on <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> instances that contain file or directory path information.","pos":[0,116],"source":"Performs operations on <xref href=\"System.String\"></xref> instances that contain file or directory path information."},{"content":"These operations are performed in a cross-platform manner.","pos":[117,175]}]}],"pos":[1467,1643],"yaml":true},{"content":"> [!NOTE]\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/io/path.cs#090eca8621a248ee). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \n  \n The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"\\\\\\\\.\\PHYSICALDRIVE0 \".  \n  \n A path is a string that provides the location of a file or directory. A path does not necessarily point to a location on disk; for example, a path might map to a location in memory or on a device. The exact format of a path is determined by the current platform. For example, on some systems, a path can start with a drive or volume letter, while this element is not present in other systems. On some systems, file paths can contain extensions, which indicate the type of information stored in the file. The format of a file name extension is platform-dependent; for example, some systems limit extensions to three characters, and others do not. The current platform also determines the set of characters used to separate the elements of a path, and the set of characters that cannot be used when specifying paths. Because of these differences, the fields of the `Path` class as well as the exact behavior of some members of the `Path` class are platform-dependent.  \n  \n A path can contain absolute or relative location information. Absolute paths fully specify a location: the file or directory can be uniquely identified regardless of the current location. Relative paths specify a partial location: the current location is used as the starting point when locating a file specified with a relative path. To determine the current directory, call <xref:System.IO.Directory.GetCurrentDirectory%2A?displayProperty=fullName>.  \n  \n Most members of the `Path` class do not interact with the file system and do not verify the existence of the file specified by a path string. `Path` class members that modify a path string, such as <xref:System.IO.Path.ChangeExtension%2A>, have no effect on names of files in the file system. `Path` members do, however, validate the contents of a specified path string, and throw an <xref:System.ArgumentException> exception if the string contains characters that are not valid in path strings, as defined in the characters returned from the <xref:System.IO.Path.GetInvalidPathChars%2A> method. For example, on Windows-based desktop platforms, invalid path characters might include quote (\"), less than (\\<), greater than (>), pipe (&#124;), backspace (\\b), null (\\0), and Unicode characters 16 through 18 and 20 through 25.  \n  \n The members of the `Path` class enable you to quickly and easily perform common operations such as determining whether a file name extension is part of a path, and combining two strings into one path name.  \n  \n All members of the `Path` class are static and can therefore be called without having an instance of a path.  \n  \n> [!NOTE]\n>  In members that accept a path as an input string, that path must be well-formed or an exception is raised. For example, if a path is fully qualified but begins with a space, the path is not trimmed in methods of the class. Therefore, the path is malformed and an exception is raised. Similarly, a path or a combination of paths cannot be fully qualified twice. For example, \"c:\\temp c:\\windows\" also raises an exception in most cases. Ensure that your paths are well-formed when using methods that accept a path string.  \n  \n In members that accept a path, the path can refer to a file or just a directory. The specified path can also refer to a relative path or a Universal Naming Convention (UNC) path for a server and share name. For example, all the following are acceptable paths:  \n  \n-   \"c:\\\\\\MyDir\\\\\\MyFile.txt\" in C#, or \"c:\\MyDir\\MyFile.txt\" in Visual Basic.  \n  \n-   \"c:\\\\\\MyDir\" in C#, or \"c:\\MyDir\" in Visual Basic.  \n  \n-   \"MyDir\\\\\\MySubdir\" in C#, or \"MyDir\\MySubDir\" in Visual Basic.  \n  \n-   \"\\\\\\\\\\\\\\MyServer\\\\\\MyShare\" in C#, or \"\\\\\\MyServer\\MyShare\" in Visual Basic.  \n  \n Because all these operations are performed on strings, it is impossible to verify that the results are valid in all scenarios. For example, the <xref:System.IO.Path.GetExtension%2A> method parses a string that you pass to it and returns the extension from that string. However, this does not mean that a file with that extension exists on the disk.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[2,406],"content":"[!NOTE]\n To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/io/path.cs#090eca8621a248ee). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).","leadings":["","> "],"nodes":[{"content":" To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/io/path.cs#090eca8621a248ee). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).","pos":[8,402],"nodes":[{"content":"To view the .NET Framework source code for this type, see the <bpt id=\"p1\">[</bpt>Reference Source<ept id=\"p1\">](http://referencesource.microsoft.com/#mscorlib/system/io/path.cs#090eca8621a248ee)</ept>.","pos":[1,165],"source":" To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/io/path.cs#090eca8621a248ee)."},{"content":"You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <bpt id=\"p1\">[</bpt>instructions<ept id=\"p1\">](http://referencesource.microsoft.com/)</ept>.","pos":[166,394],"source":" You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/)."}]}]},{"pos":[413,550],"content":"The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"\\\\\\\\.\\PHYSICALDRIVE0 \".","nodes":[{"content":"The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"<ph id=\"ph1\">\\\\</ph><ph id=\"ph2\">\\\\</ph>.\\PHYSICALDRIVE0 \".","pos":[0,137],"source":"The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"\\\\\\\\.\\PHYSICALDRIVE0 \"."}]},{"pos":[557,1522],"content":"A path is a string that provides the location of a file or directory. A path does not necessarily point to a location on disk; for example, a path might map to a location in memory or on a device. The exact format of a path is determined by the current platform. For example, on some systems, a path can start with a drive or volume letter, while this element is not present in other systems. On some systems, file paths can contain extensions, which indicate the type of information stored in the file. The format of a file name extension is platform-dependent; for example, some systems limit extensions to three characters, and others do not. The current platform also determines the set of characters used to separate the elements of a path, and the set of characters that cannot be used when specifying paths. Because of these differences, the fields of the `Path` class as well as the exact behavior of some members of the `Path` class are platform-dependent.","nodes":[{"content":"A path is a string that provides the location of a file or directory.","pos":[0,69]},{"content":"A path does not necessarily point to a location on disk; for example, a path might map to a location in memory or on a device.","pos":[70,196]},{"content":"The exact format of a path is determined by the current platform.","pos":[197,262]},{"content":"For example, on some systems, a path can start with a drive or volume letter, while this element is not present in other systems.","pos":[263,392]},{"content":"On some systems, file paths can contain extensions, which indicate the type of information stored in the file.","pos":[393,503]},{"content":"The format of a file name extension is platform-dependent; for example, some systems limit extensions to three characters, and others do not.","pos":[504,645]},{"content":"The current platform also determines the set of characters used to separate the elements of a path, and the set of characters that cannot be used when specifying paths.","pos":[646,814]},{"content":"Because of these differences, the fields of the <ph id=\"ph1\">`Path`</ph> class as well as the exact behavior of some members of the <ph id=\"ph2\">`Path`</ph> class are platform-dependent.","pos":[815,965],"source":" Because of these differences, the fields of the `Path` class as well as the exact behavior of some members of the `Path` class are platform-dependent."}]},{"pos":[1529,1980],"content":"A path can contain absolute or relative location information. Absolute paths fully specify a location: the file or directory can be uniquely identified regardless of the current location. Relative paths specify a partial location: the current location is used as the starting point when locating a file specified with a relative path. To determine the current directory, call <xref:System.IO.Directory.GetCurrentDirectory%2A?displayProperty=fullName>.","nodes":[{"content":"A path can contain absolute or relative location information. Absolute paths fully specify a location: the file or directory can be uniquely identified regardless of the current location. Relative paths specify a partial location: the current location is used as the starting point when locating a file specified with a relative path. To determine the current directory, call <xref:System.IO.Directory.GetCurrentDirectory%2A?displayProperty=fullName>.","pos":[0,451],"nodes":[{"content":"A path can contain absolute or relative location information.","pos":[0,61]},{"content":"Absolute paths fully specify a location: the file or directory can be uniquely identified regardless of the current location.","pos":[62,187]},{"content":"Relative paths specify a partial location: the current location is used as the starting point when locating a file specified with a relative path.","pos":[188,334]},{"content":"To determine the current directory, call <ph id=\"ph1\">&lt;xref:System.IO.Directory.GetCurrentDirectory%2A?displayProperty=fullName&gt;</ph>.","pos":[335,451],"source":" To determine the current directory, call <xref:System.IO.Directory.GetCurrentDirectory%2A?displayProperty=fullName>."}]}]},{"pos":[1987,2812],"content":"Most members of the `Path` class do not interact with the file system and do not verify the existence of the file specified by a path string. `Path` class members that modify a path string, such as <xref:System.IO.Path.ChangeExtension%2A>, have no effect on names of files in the file system. `Path` members do, however, validate the contents of a specified path string, and throw an <xref:System.ArgumentException> exception if the string contains characters that are not valid in path strings, as defined in the characters returned from the <xref:System.IO.Path.GetInvalidPathChars%2A> method. For example, on Windows-based desktop platforms, invalid path characters might include quote (\"), less than (\\<), greater than (>), pipe (&#124;), backspace (\\b), null (\\0), and Unicode characters 16 through 18 and 20 through 25.","nodes":[{"content":"Most members of the <ph id=\"ph1\">`Path`</ph> class do not interact with the file system and do not verify the existence of the file specified by a path string.","pos":[0,141],"source":"Most members of the `Path` class do not interact with the file system and do not verify the existence of the file specified by a path string."},{"content":"<ph id=\"ph1\">`Path`</ph> class members that modify a path string, such as <ph id=\"ph2\">&lt;xref:System.IO.Path.ChangeExtension%2A&gt;</ph>, have no effect on names of files in the file system.","pos":[142,292],"source":"`Path` class members that modify a path string, such as <xref:System.IO.Path.ChangeExtension%2A>, have no effect on names of files in the file system."},{"content":"<ph id=\"ph1\">`Path`</ph> members do, however, validate the contents of a specified path string, and throw an <ph id=\"ph2\">&lt;xref:System.ArgumentException&gt;</ph> exception if the string contains characters that are not valid in path strings, as defined in the characters returned from the <ph id=\"ph3\">&lt;xref:System.IO.Path.GetInvalidPathChars%2A&gt;</ph> method.","pos":[293,595],"source":"`Path` members do, however, validate the contents of a specified path string, and throw an <xref:System.ArgumentException> exception if the string contains characters that are not valid in path strings, as defined in the characters returned from the <xref:System.IO.Path.GetInvalidPathChars%2A> method."},{"content":"For example, on Windows-based desktop platforms, invalid path characters might include quote (\"), less than (<ph id=\"ph1\">\\&lt;</ph>), greater than (&gt;), pipe (&amp;#124;), backspace (\\b), null (\\0), and Unicode characters 16 through 18 and 20 through 25.","pos":[596,825],"source":" For example, on Windows-based desktop platforms, invalid path characters might include quote (\"), less than (\\<), greater than (>), pipe (&#124;), backspace (\\b), null (\\0), and Unicode characters 16 through 18 and 20 through 25."}]},{"pos":[2819,3024],"content":"The members of the <ph id=\"ph1\">`Path`</ph> class enable you to quickly and easily perform common operations such as determining whether a file name extension is part of a path, and combining two strings into one path name.","source":"The members of the `Path` class enable you to quickly and easily perform common operations such as determining whether a file name extension is part of a path, and combining two strings into one path name."},{"pos":[3031,3139],"content":"All members of the <ph id=\"ph1\">`Path`</ph> class are static and can therefore be called without having an instance of a path.","source":"All members of the `Path` class are static and can therefore be called without having an instance of a path."},{"pos":[3147,3677],"content":"[!NOTE]\n In members that accept a path as an input string, that path must be well-formed or an exception is raised. For example, if a path is fully qualified but begins with a space, the path is not trimmed in methods of the class. Therefore, the path is malformed and an exception is raised. Similarly, a path or a combination of paths cannot be fully qualified twice. For example, \"c:\\temp c:\\windows\" also raises an exception in most cases. Ensure that your paths are well-formed when using methods that accept a path string.","leadings":["","> "],"nodes":[{"content":" In members that accept a path as an input string, that path must be well-formed or an exception is raised. For example, if a path is fully qualified but begins with a space, the path is not trimmed in methods of the class. Therefore, the path is malformed and an exception is raised. Similarly, a path or a combination of paths cannot be fully qualified twice. For example, \"c:\\temp c:\\windows\" also raises an exception in most cases. Ensure that your paths are well-formed when using methods that accept a path string.","pos":[8,528],"nodes":[{"content":"In members that accept a path as an input string, that path must be well-formed or an exception is raised.","pos":[1,107]},{"content":"For example, if a path is fully qualified but begins with a space, the path is not trimmed in methods of the class.","pos":[108,223]},{"content":"Therefore, the path is malformed and an exception is raised.","pos":[224,284]},{"content":"Similarly, a path or a combination of paths cannot be fully qualified twice.","pos":[285,361]},{"content":"For example, \"c:\\temp c:\\windows\" also raises an exception in most cases.","pos":[362,435]},{"content":"Ensure that your paths are well-formed when using methods that accept a path string.","pos":[436,520]}]}]},{"pos":[3684,3943],"content":"In members that accept a path, the path can refer to a file or just a directory. The specified path can also refer to a relative path or a Universal Naming Convention (UNC) path for a server and share name. For example, all the following are acceptable paths:","nodes":[{"content":"In members that accept a path, the path can refer to a file or just a directory. The specified path can also refer to a relative path or a Universal Naming Convention (UNC) path for a server and share name. For example, all the following are acceptable paths:","pos":[0,259],"nodes":[{"content":"In members that accept a path, the path can refer to a file or just a directory.","pos":[0,80]},{"content":"The specified path can also refer to a relative path or a Universal Naming Convention (UNC) path for a server and share name.","pos":[81,206]},{"content":"For example, all the following are acceptable paths:","pos":[207,259]}]}]},{"pos":[3953,4027],"content":"\"c:\\\\\\MyDir\\\\\\MyFile.txt\" in C#, or \"c:\\MyDir\\MyFile.txt\" in Visual Basic.","nodes":[{"content":"\"c:<ph id=\"ph1\">\\\\</ph>\\MyDir<ph id=\"ph2\">\\\\</ph>\\MyFile.txt\" in C#, or \"c:\\MyDir\\MyFile.txt\" in Visual Basic.","pos":[0,74],"source":"\"c:\\\\\\MyDir\\\\\\MyFile.txt\" in C#, or \"c:\\MyDir\\MyFile.txt\" in Visual Basic."}]},{"pos":[4037,4087],"content":"\"c:\\\\\\MyDir\" in C#, or \"c:\\MyDir\" in Visual Basic.","nodes":[{"content":"\"c:<ph id=\"ph1\">\\\\</ph>\\MyDir\" in C#, or \"c:\\MyDir\" in Visual Basic.","pos":[0,50],"source":"\"c:\\\\\\MyDir\" in C#, or \"c:\\MyDir\" in Visual Basic."}]},{"pos":[4097,4159],"content":"\"MyDir\\\\\\MySubdir\" in C#, or \"MyDir\\MySubDir\" in Visual Basic.","nodes":[{"content":"\"MyDir<ph id=\"ph1\">\\\\</ph>\\MySubdir\" in C#, or \"MyDir\\MySubDir\" in Visual Basic.","pos":[0,62],"source":"\"MyDir\\\\\\MySubdir\" in C#, or \"MyDir\\MySubDir\" in Visual Basic."}]},{"pos":[4169,4245],"content":"\"\\\\\\\\\\\\\\MyServer\\\\\\MyShare\" in C#, or \"\\\\\\MyServer\\MyShare\" in Visual Basic.","nodes":[{"content":"\"<ph id=\"ph1\">\\\\</ph><ph id=\"ph2\">\\\\</ph><ph id=\"ph3\">\\\\</ph>\\MyServer<ph id=\"ph4\">\\\\</ph>\\MyShare\" in C#, or \"<ph id=\"ph5\">\\\\</ph>\\MyServer\\MyShare\" in Visual Basic.","pos":[0,76],"source":"\"\\\\\\\\\\\\\\MyServer\\\\\\MyShare\" in C#, or \"\\\\\\MyServer\\MyShare\" in Visual Basic."}]},{"pos":[4252,4600],"content":"Because all these operations are performed on strings, it is impossible to verify that the results are valid in all scenarios. For example, the <xref:System.IO.Path.GetExtension%2A> method parses a string that you pass to it and returns the extension from that string. However, this does not mean that a file with that extension exists on the disk.","nodes":[{"content":"Because all these operations are performed on strings, it is impossible to verify that the results are valid in all scenarios. For example, the <xref:System.IO.Path.GetExtension%2A> method parses a string that you pass to it and returns the extension from that string. However, this does not mean that a file with that extension exists on the disk.","pos":[0,348],"nodes":[{"content":"Because all these operations are performed on strings, it is impossible to verify that the results are valid in all scenarios.","pos":[0,126]},{"content":"For example, the <ph id=\"ph1\">&lt;xref:System.IO.Path.GetExtension%2A&gt;</ph> method parses a string that you pass to it and returns the extension from that string.","pos":[127,268],"source":" For example, the <xref:System.IO.Path.GetExtension%2A> method parses a string that you pass to it and returns the extension from that string."},{"content":"However, this does not mean that a file with that extension exists on the disk.","pos":[269,348]}]}]},{"pos":[4607,4702],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[1654,6450],"yaml":true,"extradata":"MT"},{"content":"Provides a platform-specific alternate character used to separate directory levels in a path string that reflects a hierarchical file system organization.","nodes":[{"pos":[0,154],"content":"Provides a platform-specific alternate character used to separate directory levels in a path string that reflects a hierarchical file system organization.","nodes":[{"content":"Provides a platform-specific alternate character used to separate directory levels in a path string that reflects a hierarchical file system organization.","pos":[0,154]}]}],"pos":[8879,9034],"yaml":true},{"content":"The character stored in this field cannot be in <xref:System.IO.Path.InvalidPathChars>. This field can be set to the same value as <xref:System.IO.Path.DirectorySeparatorChar>. `AltDirectorySeparatorChar` and `DirectorySeparatorChar` are both valid for separating directory levels in a path string.  \n  \n The value of this field is a backslash ('\\\\') on UNIX, and a slash ('/') on Windows and Macintosh operating systems.","nodes":[{"pos":[0,298],"content":"The character stored in this field cannot be in <xref:System.IO.Path.InvalidPathChars>. This field can be set to the same value as <xref:System.IO.Path.DirectorySeparatorChar>. `AltDirectorySeparatorChar` and `DirectorySeparatorChar` are both valid for separating directory levels in a path string.","nodes":[{"content":"The character stored in this field cannot be in <ph id=\"ph1\">&lt;xref:System.IO.Path.InvalidPathChars&gt;</ph>.","pos":[0,87],"source":"The character stored in this field cannot be in <xref:System.IO.Path.InvalidPathChars>."},{"content":"This field can be set to the same value as <ph id=\"ph1\">&lt;xref:System.IO.Path.DirectorySeparatorChar&gt;</ph>.","pos":[88,176],"source":" This field can be set to the same value as <xref:System.IO.Path.DirectorySeparatorChar>."},{"content":"<ph id=\"ph1\">`AltDirectorySeparatorChar`</ph> and <ph id=\"ph2\">`DirectorySeparatorChar`</ph> are both valid for separating directory levels in a path string.","pos":[177,298],"source":"`AltDirectorySeparatorChar` and `DirectorySeparatorChar` are both valid for separating directory levels in a path string."}]},{"pos":[305,421],"content":"The value of this field is a backslash ('\\\\') on UNIX, and a slash ('/') on Windows and Macintosh operating systems.","nodes":[{"content":"The value of this field is a backslash ('<ph id=\"ph1\">\\\\</ph>') on UNIX, and a slash ('/') on Windows and Macintosh operating systems.","pos":[0,116],"source":"The value of this field is a backslash ('\\\\') on UNIX, and a slash ('/') on Windows and Macintosh operating systems."}]}],"pos":[9045,9473],"yaml":true,"extradata":"MT"},{"content":"Changes the extension of a path string.","nodes":[{"pos":[0,39],"content":"Changes the extension of a path string.","nodes":[{"content":"Changes the extension of a path string.","pos":[0,39]}]}],"pos":[11582,11622],"yaml":true},{"content":"If neither `path` nor `extension` contains a period (.), `ChangeExtension` adds the period.  \n  \n The `extension` parameter can contain multiple periods and any valid path characters, and can be any length. If `extension` is `null`, the returned string contains the contents of `path` with the last period and all characters following it removed.  \n  \n If `extension` is an empty string, the returned path string contains the contents of `path` with any characters following the last period removed.  \n  \n If `path` does not have an extension and `extension` is not `null`, the returned string contains `path` followed by `extension`.  \n  \n If `extension` is not `null` and does not contain a leading period, the period is added.  \n  \n If `path` contains a multiple extension separated by multiple periods, the returned string contains the contents of `path` with the last period and all characters following it replaced by `extension`. For example, if `path` is \"\\Dir1\\examples\\pathtests.csx.txt\" and `extension` is \"cs\", the modified path is \"\\Dir1\\examples\\pathtests.csx.cs\".  \n  \n It is not possible to verify that the returned results are valid in all scenarios. For example, if `path` is empty, `extension` is appended.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,91],"content":"If neither <ph id=\"ph1\">`path`</ph> nor <ph id=\"ph2\">`extension`</ph> contains a period (.), <ph id=\"ph3\">`ChangeExtension`</ph> adds the period.","source":"If neither `path` nor `extension` contains a period (.), `ChangeExtension` adds the period."},{"pos":[98,346],"content":"The `extension` parameter can contain multiple periods and any valid path characters, and can be any length. If `extension` is `null`, the returned string contains the contents of `path` with the last period and all characters following it removed.","nodes":[{"content":"The <ph id=\"ph1\">`extension`</ph> parameter can contain multiple periods and any valid path characters, and can be any length.","pos":[0,108],"source":"The `extension` parameter can contain multiple periods and any valid path characters, and can be any length."},{"content":"If <ph id=\"ph1\">`extension`</ph> is <ph id=\"ph2\">`null`</ph>, the returned string contains the contents of <ph id=\"ph3\">`path`</ph> with the last period and all characters following it removed.","pos":[109,248],"source":" If `extension` is `null`, the returned string contains the contents of `path` with the last period and all characters following it removed."}]},{"pos":[353,499],"content":"If <ph id=\"ph1\">`extension`</ph> is an empty string, the returned path string contains the contents of <ph id=\"ph2\">`path`</ph> with any characters following the last period removed.","source":"If `extension` is an empty string, the returned path string contains the contents of `path` with any characters following the last period removed."},{"pos":[506,634],"content":"If <ph id=\"ph1\">`path`</ph> does not have an extension and <ph id=\"ph2\">`extension`</ph> is not <ph id=\"ph3\">`null`</ph>, the returned string contains <ph id=\"ph4\">`path`</ph> followed by <ph id=\"ph5\">`extension`</ph>.","source":"If `path` does not have an extension and `extension` is not `null`, the returned string contains `path` followed by `extension`."},{"pos":[641,729],"content":"If <ph id=\"ph1\">`extension`</ph> is not <ph id=\"ph2\">`null`</ph> and does not contain a leading period, the period is added.","source":"If `extension` is not `null` and does not contain a leading period, the period is added."},{"pos":[736,1078],"content":"If `path` contains a multiple extension separated by multiple periods, the returned string contains the contents of `path` with the last period and all characters following it replaced by `extension`. For example, if `path` is \"\\Dir1\\examples\\pathtests.csx.txt\" and `extension` is \"cs\", the modified path is \"\\Dir1\\examples\\pathtests.csx.cs\".","nodes":[{"content":"If <ph id=\"ph1\">`path`</ph> contains a multiple extension separated by multiple periods, the returned string contains the contents of <ph id=\"ph2\">`path`</ph> with the last period and all characters following it replaced by <ph id=\"ph3\">`extension`</ph>.","pos":[0,200],"source":"If `path` contains a multiple extension separated by multiple periods, the returned string contains the contents of `path` with the last period and all characters following it replaced by `extension`."},{"content":"For example, if <ph id=\"ph1\">`path`</ph> is \"\\Dir1\\examples\\pathtests.csx.txt\" and <ph id=\"ph2\">`extension`</ph> is \"cs\", the modified path is \"\\Dir1\\examples\\pathtests.csx.cs\".","pos":[201,342],"source":" For example, if `path` is \"\\Dir1\\examples\\pathtests.csx.txt\" and `extension` is \"cs\", the modified path is \"\\Dir1\\examples\\pathtests.csx.cs\"."}]},{"pos":[1085,1225],"content":"It is not possible to verify that the returned results are valid in all scenarios. For example, if `path` is empty, `extension` is appended.","nodes":[{"content":"It is not possible to verify that the returned results are valid in all scenarios.","pos":[0,82]},{"content":"For example, if <ph id=\"ph1\">`path`</ph> is empty, <ph id=\"ph2\">`extension`</ph> is appended.","pos":[83,140],"source":" For example, if `path` is empty, `extension` is appended."}]},{"pos":[1232,1327],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[11633,12989],"yaml":true,"extradata":"MT"},{"content":"The path information to modify. The path cannot contain any of the characters defined in <xref href=\"System.IO.Path.GetInvalidPathChars\"></xref>.","nodes":[{"pos":[0,145],"content":"The path information to modify. The path cannot contain any of the characters defined in <xref href=\"System.IO.Path.GetInvalidPathChars\"></xref>.","nodes":[{"content":"The path information to modify.","pos":[0,31]},{"content":"The path cannot contain any of the characters defined in <ph id=\"ph1\">&lt;xref href=\"System.IO.Path.GetInvalidPathChars\"&gt;&lt;/xref&gt;</ph>.","pos":[32,145],"source":" The path cannot contain any of the characters defined in <xref href=\"System.IO.Path.GetInvalidPathChars\"></xref>."}]}],"pos":[13665,13811],"yaml":true},{"content":"The new extension (with or without a leading period). Specify `null` to remove an existing extension from <code>path</code>.","nodes":[{"pos":[0,124],"content":"The new extension (with or without a leading period). Specify `null` to remove an existing extension from <code>path</code>.","nodes":[{"content":"The new extension (with or without a leading period).","pos":[0,53]},{"content":"Specify <ph id=\"ph1\">`null`</ph> to remove an existing extension from <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[54,124],"source":" Specify `null` to remove an existing extension from <code>path</code>."}]}],"pos":[13876,14001],"yaml":true},{"content":"The modified path information.  \n  \n On Windows-based desktop platforms, if <code>path</code> is `null` or an empty string (\"\"), the path information is returned unmodified. If <code>extension</code> is `null`, the returned string contains the specified path with its extension removed. If <code>path</code> has no extension, and <code>extension</code> is not `null`, the returned path string contains <code>extension</code> appended to the end of <code>path</code>.","nodes":[{"pos":[0,30],"content":"The modified path information.","nodes":[{"content":"The modified path information.","pos":[0,30]}]},{"pos":[37,466],"content":"On Windows-based desktop platforms, if <code>path</code> is `null` or an empty string (\"\"), the path information is returned unmodified. If <code>extension</code> is `null`, the returned string contains the specified path with its extension removed. If <code>path</code> has no extension, and <code>extension</code> is not `null`, the returned path string contains <code>extension</code> appended to the end of <code>path</code>.","nodes":[{"content":"On Windows-based desktop platforms, if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph> or an empty string (\"\"), the path information is returned unmodified.","pos":[0,136],"source":"On Windows-based desktop platforms, if <code>path</code> is `null` or an empty string (\"\"), the path information is returned unmodified."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">extension</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>, the returned string contains the specified path with its extension removed.","pos":[137,249],"source":" If <code>extension</code> is `null`, the returned string contains the specified path with its extension removed."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> has no extension, and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">extension</ph><ept id=\"p2\">&lt;/code&gt;</ept> is not <ph id=\"ph3\">`null`</ph>, the returned path string contains <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">extension</ph><ept id=\"p3\">&lt;/code&gt;</ept> appended to the end of <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph5\">path</ph><ept id=\"p4\">&lt;/code&gt;</ept>.","pos":[250,429],"source":" If <code>path</code> has no extension, and <code>extension</code> is not `null`, the returned path string contains <code>extension</code> appended to the end of <code>path</code>."}]}],"pos":[14058,14531],"yaml":true},{"content":"<code>path</code> contains one or more of the invalid characters defined in <xref href=\"System.IO.Path.GetInvalidPathChars\"></xref>.","nodes":[{"pos":[0,132],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> contains one or more of the invalid characters defined in <ph id=\"ph2\">&lt;xref href=\"System.IO.Path.GetInvalidPathChars\"&gt;&lt;/xref&gt;</ph>.","source":"<code>path</code> contains one or more of the invalid characters defined in <xref href=\"System.IO.Path.GetInvalidPathChars\"></xref>."}],"pos":[14683,14816],"yaml":true},{"content":"Combines an array of strings into a path.","nodes":[{"pos":[0,41],"content":"Combines an array of strings into a path.","nodes":[{"content":"Combines an array of strings into a path.","pos":[0,41]}]}],"pos":[16268,16310],"yaml":true},{"content":"`paths` should be an array of the parts of the path to combine. If the one of the subsequent paths is an absolute path, then the combine operation resets starting with that absolute path, discarding all previous combined paths.  \n  \n Zero-length strings are omitted from the combined path.  \n  \n The parameters are not parsed if they have white space.  \n  \n Not all invalid characters for directory and file names are interpreted as unacceptable by the `Combine` method, because you can use these characters for search wildcard characters. For example, while `Path.Combine(\"c:\\\\\", \"*.txt\")` might be invalid if you were to create a file from it, it is valid as a search string. It is therefore successfully interpreted by the `Combine` method.","nodes":[{"pos":[0,227],"content":"`paths` should be an array of the parts of the path to combine. If the one of the subsequent paths is an absolute path, then the combine operation resets starting with that absolute path, discarding all previous combined paths.","nodes":[{"content":"<ph id=\"ph1\">`paths`</ph> should be an array of the parts of the path to combine.","pos":[0,63],"source":"`paths` should be an array of the parts of the path to combine."},{"content":"If the one of the subsequent paths is an absolute path, then the combine operation resets starting with that absolute path, discarding all previous combined paths.","pos":[64,227]}]},{"pos":[234,289],"content":"Zero-length strings are omitted from the combined path.","nodes":[{"content":"Zero-length strings are omitted from the combined path.","pos":[0,55]}]},{"pos":[296,351],"content":"The parameters are not parsed if they have white space.","nodes":[{"content":"The parameters are not parsed if they have white space.","pos":[0,55]}]},{"pos":[358,743],"content":"Not all invalid characters for directory and file names are interpreted as unacceptable by the `Combine` method, because you can use these characters for search wildcard characters. For example, while `Path.Combine(\"c:\\\\\", \"*.txt\")` might be invalid if you were to create a file from it, it is valid as a search string. It is therefore successfully interpreted by the `Combine` method.","nodes":[{"content":"Not all invalid characters for directory and file names are interpreted as unacceptable by the <ph id=\"ph1\">`Combine`</ph> method, because you can use these characters for search wildcard characters.","pos":[0,181],"source":"Not all invalid characters for directory and file names are interpreted as unacceptable by the `Combine` method, because you can use these characters for search wildcard characters."},{"content":"For example, while <ph id=\"ph1\">`Path.Combine(\"c:\\\\\", \"*.txt\")`</ph> might be invalid if you were to create a file from it, it is valid as a search string.","pos":[182,319],"source":" For example, while `Path.Combine(\"c:\\\\\", \"*.txt\")` might be invalid if you were to create a file from it, it is valid as a search string."},{"content":"It is therefore successfully interpreted by the <ph id=\"ph1\">`Combine`</ph> method.","pos":[320,385],"source":" It is therefore successfully interpreted by the `Combine` method."}]}],"pos":[16321,17079],"yaml":true,"extradata":"MT"},{"content":"An array of parts of the path.","nodes":[{"pos":[0,30],"content":"An array of parts of the path.","nodes":[{"content":"An array of parts of the path.","pos":[0,30]}]}],"pos":[17580,17611],"yaml":true},{"content":"The combined paths.","nodes":[{"pos":[0,19],"content":"The combined paths.","nodes":[{"content":"The combined paths.","pos":[0,19]}]}],"pos":[17668,17688],"yaml":true},{"content":"One of the strings in the array contains one or more of the invalid characters defined in <xref href=\"System.IO.Path.GetInvalidPathChars\"></xref>.","nodes":[{"pos":[0,146],"content":"One of the strings in the array contains one or more of the invalid characters defined in <ph id=\"ph1\">&lt;xref href=\"System.IO.Path.GetInvalidPathChars\"&gt;&lt;/xref&gt;</ph>.","source":"One of the strings in the array contains one or more of the invalid characters defined in <xref href=\"System.IO.Path.GetInvalidPathChars\"></xref>."}],"pos":[17832,17979],"yaml":true},{"content":"One of the strings in the array is `null`.","nodes":[{"pos":[0,42],"content":"One of the strings in the array is <ph id=\"ph1\">`null`</ph>.","source":"One of the strings in the array is `null`."}],"pos":[18081,18124],"yaml":true},{"content":"Combines two strings into a path.","nodes":[{"pos":[0,33],"content":"Combines two strings into a path.","nodes":[{"content":"Combines two strings into a path.","pos":[0,33]}]}],"pos":[19630,19664],"yaml":true},{"content":"If `path1` is not a drive reference (that is, \"C:\" or \"D:\") and does not end with a valid separator character as defined in <xref:System.IO.Path.DirectorySeparatorChar>, <xref:System.IO.Path.AltDirectorySeparatorChar>, or <xref:System.IO.Path.VolumeSeparatorChar>, <xref:System.IO.Path.DirectorySeparatorChar> is appended to `path1` before concatenation.  \n  \n If `path2` does not include a root (for example, if `path2` does not start with a separator character or a drive specification), the result is a concatenation of the two paths, with an intervening separator character. If `path2` includes a root, `path2` is returned.  \n  \n The parameters are not parsed if they have white space. Therefore, if `path2` includes white space (for example, \" \\file.txt \"), the <xref:System.IO.Path.Combine%2A> method appends `path2` to `path1` instead of returning only `path2`.  \n  \n Not all invalid characters for directory and file names are interpreted as unacceptable by the `Combine` method, because you can use these characters for search wildcard characters. For example, while `Path.Combine(\"c:\\\\\", \"*.txt\")` might be invalid if you were to create a file from it, it is valid as a search string. It is therefore successfully interpreted by the `Combine` method.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,354],"content":"If <ph id=\"ph1\">`path1`</ph> is not a drive reference (that is, \"C:\" or \"D:\") and does not end with a valid separator character as defined in <ph id=\"ph2\">&lt;xref:System.IO.Path.DirectorySeparatorChar&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.IO.Path.AltDirectorySeparatorChar&gt;</ph>, or <ph id=\"ph4\">&lt;xref:System.IO.Path.VolumeSeparatorChar&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.IO.Path.DirectorySeparatorChar&gt;</ph> is appended to <ph id=\"ph6\">`path1`</ph> before concatenation.","source":"If `path1` is not a drive reference (that is, \"C:\" or \"D:\") and does not end with a valid separator character as defined in <xref:System.IO.Path.DirectorySeparatorChar>, <xref:System.IO.Path.AltDirectorySeparatorChar>, or <xref:System.IO.Path.VolumeSeparatorChar>, <xref:System.IO.Path.DirectorySeparatorChar> is appended to `path1` before concatenation."},{"pos":[361,627],"content":"If `path2` does not include a root (for example, if `path2` does not start with a separator character or a drive specification), the result is a concatenation of the two paths, with an intervening separator character. If `path2` includes a root, `path2` is returned.","nodes":[{"content":"If <ph id=\"ph1\">`path2`</ph> does not include a root (for example, if <ph id=\"ph2\">`path2`</ph> does not start with a separator character or a drive specification), the result is a concatenation of the two paths, with an intervening separator character.","pos":[0,217],"source":"If `path2` does not include a root (for example, if `path2` does not start with a separator character or a drive specification), the result is a concatenation of the two paths, with an intervening separator character."},{"content":"If <ph id=\"ph1\">`path2`</ph> includes a root, <ph id=\"ph2\">`path2`</ph> is returned.","pos":[218,266],"source":" If `path2` includes a root, `path2` is returned."}]},{"pos":[634,868],"content":"The parameters are not parsed if they have white space. Therefore, if `path2` includes white space (for example, \" \\file.txt \"), the <xref:System.IO.Path.Combine%2A> method appends `path2` to `path1` instead of returning only `path2`.","nodes":[{"content":"The parameters are not parsed if they have white space.","pos":[0,55]},{"content":"Therefore, if <ph id=\"ph1\">`path2`</ph> includes white space (for example, \" \\file.txt \"), the <ph id=\"ph2\">&lt;xref:System.IO.Path.Combine%2A&gt;</ph> method appends <ph id=\"ph3\">`path2`</ph> to <ph id=\"ph4\">`path1`</ph> instead of returning only <ph id=\"ph5\">`path2`</ph>.","pos":[56,234],"source":" Therefore, if `path2` includes white space (for example, \" \\file.txt \"), the <xref:System.IO.Path.Combine%2A> method appends `path2` to `path1` instead of returning only `path2`."}]},{"pos":[875,1260],"content":"Not all invalid characters for directory and file names are interpreted as unacceptable by the `Combine` method, because you can use these characters for search wildcard characters. For example, while `Path.Combine(\"c:\\\\\", \"*.txt\")` might be invalid if you were to create a file from it, it is valid as a search string. It is therefore successfully interpreted by the `Combine` method.","nodes":[{"content":"Not all invalid characters for directory and file names are interpreted as unacceptable by the <ph id=\"ph1\">`Combine`</ph> method, because you can use these characters for search wildcard characters.","pos":[0,181],"source":"Not all invalid characters for directory and file names are interpreted as unacceptable by the `Combine` method, because you can use these characters for search wildcard characters."},{"content":"For example, while <ph id=\"ph1\">`Path.Combine(\"c:\\\\\", \"*.txt\")`</ph> might be invalid if you were to create a file from it, it is valid as a search string.","pos":[182,319],"source":" For example, while `Path.Combine(\"c:\\\\\", \"*.txt\")` might be invalid if you were to create a file from it, it is valid as a search string."},{"content":"It is therefore successfully interpreted by the <ph id=\"ph1\">`Combine`</ph> method.","pos":[320,385],"source":" It is therefore successfully interpreted by the `Combine` method."}]},{"pos":[1267,1362],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[19675,21061],"yaml":true,"extradata":"MT"},{"content":"The first path to combine.","nodes":[{"pos":[0,26],"content":"The first path to combine.","nodes":[{"content":"The first path to combine.","pos":[0,26]}]}],"pos":[21665,21692],"yaml":true},{"content":"The second path to combine.","nodes":[{"pos":[0,27],"content":"The second path to combine.","nodes":[{"content":"The second path to combine.","pos":[0,27]}]}],"pos":[21753,21781],"yaml":true},{"content":"The combined paths. If one of the specified paths is a zero-length string, this method returns the other path. If <code>path2</code> contains an absolute path, this method returns <code>path2</code>.","nodes":[{"pos":[0,199],"content":"The combined paths. If one of the specified paths is a zero-length string, this method returns the other path. If <code>path2</code> contains an absolute path, this method returns <code>path2</code>.","nodes":[{"content":"The combined paths.","pos":[0,19]},{"content":"If one of the specified paths is a zero-length string, this method returns the other path.","pos":[20,110]},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path2</ph><ept id=\"p1\">&lt;/code&gt;</ept> contains an absolute path, this method returns <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">path2</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","pos":[111,199],"source":" If <code>path2</code> contains an absolute path, this method returns <code>path2</code>."}]}],"pos":[21838,22038],"yaml":true},{"content":"<code>path1</code> or <code>path2</code> contains one or more of the invalid characters defined in <xref href=\"System.IO.Path.GetInvalidPathChars\"></xref>.","nodes":[{"pos":[0,155],"content":"<ph id=\"ph1\">&lt;code&gt;path1&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;path2&lt;/code&gt;</ph> contains one or more of the invalid characters defined in <ph id=\"ph3\">&lt;xref href=\"System.IO.Path.GetInvalidPathChars\"&gt;&lt;/xref&gt;</ph>.","source":"<code>path1</code> or <code>path2</code> contains one or more of the invalid characters defined in <xref href=\"System.IO.Path.GetInvalidPathChars\"></xref>."}],"pos":[22182,22338],"yaml":true},{"content":"<code>path1</code> or <code>path2</code> is `null`.","nodes":[{"pos":[0,51],"content":"<ph id=\"ph1\">&lt;code&gt;path1&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;path2&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>path1</code> or <code>path2</code> is `null`."}],"pos":[22440,22492],"yaml":true},{"content":"Combines three strings into a path.","nodes":[{"pos":[0,35],"content":"Combines three strings into a path.","nodes":[{"content":"Combines three strings into a path.","pos":[0,35]}]}],"pos":[23944,23980],"yaml":true},{"content":"`path1` should be an absolute path (for example, \"d:\\archives\" or \"\\\\\\archives\\public\"). If `path2` or `path3` is also an absolute path, the combine operation discards all previously combined paths and resets to that absolute path.  \n  \n Zero-length strings are omitted from the combined path.  \n  \n If `path1` is not a drive reference (that is, \"C:\" or \"D:\") and does not end with a valid separator character as defined in <xref:System.IO.Path.DirectorySeparatorChar>, <xref:System.IO.Path.AltDirectorySeparatorChar>, or <xref:System.IO.Path.VolumeSeparatorChar>, <xref:System.IO.Path.DirectorySeparatorChar> is appended to `path1` before concatenation.  \n  \n If `path2` does not include a root (for example, if `path2` does not start with a separator character or a drive specification), the result is a concatenation of the two paths, with an intervening separator character. If `path2` includes a root, `path2` is returned.  \n  \n The parameters are not parsed if they have white space. Therefore, if `path2` includes white space (for example, \" \\file.txt \"), the <xref:System.IO.Path.Combine%2A> method appends `path2` to `path1`.  \n  \n Not all invalid characters for directory and file names are interpreted as unacceptable by the `Combine` method, because you can use these characters for search wildcard characters. For example, while `Path.Combine(\"c:\\\\\", \"*.txt\")` might be invalid if you were to create a file from it, it is valid as a search string. It is therefore successfully interpreted by the `Combine` method.","nodes":[{"pos":[0,231],"content":"`path1` should be an absolute path (for example, \"d:\\archives\" or \"\\\\\\archives\\public\"). If `path2` or `path3` is also an absolute path, the combine operation discards all previously combined paths and resets to that absolute path.","nodes":[{"content":"<ph id=\"ph1\">`path1`</ph> should be an absolute path (for example, \"d:\\archives\" or \"<ph id=\"ph2\">\\\\</ph>\\archives\\public\").","pos":[0,88],"source":"`path1` should be an absolute path (for example, \"d:\\archives\" or \"\\\\\\archives\\public\")."},{"content":"If <ph id=\"ph1\">`path2`</ph> or <ph id=\"ph2\">`path3`</ph> is also an absolute path, the combine operation discards all previously combined paths and resets to that absolute path.","pos":[89,231],"source":" If `path2` or `path3` is also an absolute path, the combine operation discards all previously combined paths and resets to that absolute path."}]},{"pos":[238,293],"content":"Zero-length strings are omitted from the combined path.","nodes":[{"content":"Zero-length strings are omitted from the combined path.","pos":[0,55]}]},{"pos":[300,654],"content":"If <ph id=\"ph1\">`path1`</ph> is not a drive reference (that is, \"C:\" or \"D:\") and does not end with a valid separator character as defined in <ph id=\"ph2\">&lt;xref:System.IO.Path.DirectorySeparatorChar&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.IO.Path.AltDirectorySeparatorChar&gt;</ph>, or <ph id=\"ph4\">&lt;xref:System.IO.Path.VolumeSeparatorChar&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.IO.Path.DirectorySeparatorChar&gt;</ph> is appended to <ph id=\"ph6\">`path1`</ph> before concatenation.","source":"If `path1` is not a drive reference (that is, \"C:\" or \"D:\") and does not end with a valid separator character as defined in <xref:System.IO.Path.DirectorySeparatorChar>, <xref:System.IO.Path.AltDirectorySeparatorChar>, or <xref:System.IO.Path.VolumeSeparatorChar>, <xref:System.IO.Path.DirectorySeparatorChar> is appended to `path1` before concatenation."},{"pos":[661,927],"content":"If `path2` does not include a root (for example, if `path2` does not start with a separator character or a drive specification), the result is a concatenation of the two paths, with an intervening separator character. If `path2` includes a root, `path2` is returned.","nodes":[{"content":"If <ph id=\"ph1\">`path2`</ph> does not include a root (for example, if <ph id=\"ph2\">`path2`</ph> does not start with a separator character or a drive specification), the result is a concatenation of the two paths, with an intervening separator character.","pos":[0,217],"source":"If `path2` does not include a root (for example, if `path2` does not start with a separator character or a drive specification), the result is a concatenation of the two paths, with an intervening separator character."},{"content":"If <ph id=\"ph1\">`path2`</ph> includes a root, <ph id=\"ph2\">`path2`</ph> is returned.","pos":[218,266],"source":" If `path2` includes a root, `path2` is returned."}]},{"pos":[934,1134],"content":"The parameters are not parsed if they have white space. Therefore, if `path2` includes white space (for example, \" \\file.txt \"), the <xref:System.IO.Path.Combine%2A> method appends `path2` to `path1`.","nodes":[{"content":"The parameters are not parsed if they have white space.","pos":[0,55]},{"content":"Therefore, if <ph id=\"ph1\">`path2`</ph> includes white space (for example, \" \\file.txt \"), the <ph id=\"ph2\">&lt;xref:System.IO.Path.Combine%2A&gt;</ph> method appends <ph id=\"ph3\">`path2`</ph> to <ph id=\"ph4\">`path1`</ph>.","pos":[56,200],"source":" Therefore, if `path2` includes white space (for example, \" \\file.txt \"), the <xref:System.IO.Path.Combine%2A> method appends `path2` to `path1`."}]},{"pos":[1141,1526],"content":"Not all invalid characters for directory and file names are interpreted as unacceptable by the `Combine` method, because you can use these characters for search wildcard characters. For example, while `Path.Combine(\"c:\\\\\", \"*.txt\")` might be invalid if you were to create a file from it, it is valid as a search string. It is therefore successfully interpreted by the `Combine` method.","nodes":[{"content":"Not all invalid characters for directory and file names are interpreted as unacceptable by the <ph id=\"ph1\">`Combine`</ph> method, because you can use these characters for search wildcard characters.","pos":[0,181],"source":"Not all invalid characters for directory and file names are interpreted as unacceptable by the `Combine` method, because you can use these characters for search wildcard characters."},{"content":"For example, while <ph id=\"ph1\">`Path.Combine(\"c:\\\\\", \"*.txt\")`</ph> might be invalid if you were to create a file from it, it is valid as a search string.","pos":[182,319],"source":" For example, while `Path.Combine(\"c:\\\\\", \"*.txt\")` might be invalid if you were to create a file from it, it is valid as a search string."},{"content":"It is therefore successfully interpreted by the <ph id=\"ph1\">`Combine`</ph> method.","pos":[320,385],"source":" It is therefore successfully interpreted by the `Combine` method."}]}],"pos":[23991,25552],"yaml":true,"extradata":"MT"},{"content":"The first path to combine.","nodes":[{"pos":[0,26],"content":"The first path to combine.","nodes":[{"content":"The first path to combine.","pos":[0,26]}]}],"pos":[26057,26084],"yaml":true},{"content":"The second path to combine.","nodes":[{"pos":[0,27],"content":"The second path to combine.","nodes":[{"content":"The second path to combine.","pos":[0,27]}]}],"pos":[26145,26173],"yaml":true},{"content":"The third path to combine.","nodes":[{"pos":[0,26],"content":"The third path to combine.","nodes":[{"content":"The third path to combine.","pos":[0,26]}]}],"pos":[26234,26261],"yaml":true},{"content":"The combined paths.","nodes":[{"pos":[0,19],"content":"The combined paths.","nodes":[{"content":"The combined paths.","pos":[0,19]}]}],"pos":[26318,26338],"yaml":true},{"content":"<code>path1</code>, <code>path2</code>, or <code>path3</code> contains one or more of the invalid characters defined in <xref href=\"System.IO.Path.GetInvalidPathChars\"></xref>.","nodes":[{"pos":[0,176],"content":"<ph id=\"ph1\">&lt;code&gt;path1&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;path2&lt;/code&gt;</ph>, or <ph id=\"ph3\">&lt;code&gt;path3&lt;/code&gt;</ph> contains one or more of the invalid characters defined in <ph id=\"ph4\">&lt;xref href=\"System.IO.Path.GetInvalidPathChars\"&gt;&lt;/xref&gt;</ph>.","source":"<code>path1</code>, <code>path2</code>, or <code>path3</code> contains one or more of the invalid characters defined in <xref href=\"System.IO.Path.GetInvalidPathChars\"></xref>."}],"pos":[26482,26659],"yaml":true},{"content":"<code>path1</code>, <code>path2</code>, or <code>path3</code> is `null`.","nodes":[{"pos":[0,72],"content":"<ph id=\"ph1\">&lt;code&gt;path1&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;path2&lt;/code&gt;</ph>, or <ph id=\"ph3\">&lt;code&gt;path3&lt;/code&gt;</ph> is <ph id=\"ph4\">`null`</ph>.","source":"<code>path1</code>, <code>path2</code>, or <code>path3</code> is `null`."}],"pos":[26761,26834],"yaml":true},{"content":"Combines four strings into a path.","nodes":[{"pos":[0,34],"content":"Combines four strings into a path.","nodes":[{"content":"Combines four strings into a path.","pos":[0,34]}]}],"pos":[28352,28387],"yaml":true},{"content":"`path1` should be an absolute path (for example, \"d:\\archives\" or \"\\\\\\archives\\public\").If one of the subsequent paths is also an absolute path, the combine operation discards all previously combined paths and resets to that absolute path.  \n  \n Zero-length strings are omitted from the combined path.  \n  \n If `path1` is not a drive reference (that is, \"C:\" or \"D:\") and does not end with a valid separator character as defined in <xref:System.IO.Path.DirectorySeparatorChar>, <xref:System.IO.Path.AltDirectorySeparatorChar>, or <xref:System.IO.Path.VolumeSeparatorChar>, <xref:System.IO.Path.DirectorySeparatorChar> is appended to `path1` before concatenation.  \n  \n If `path2` does not include a root (for example, if `path2` does not start with a separator character or a drive specification), the result is a concatenation of the two paths, with an intervening separator character. If `path2` includes a root, `path2` is returned.  \n  \n The parameters are not parsed if they have white space. Therefore, if `path2` includes white space (for example, \" \\file.txt \"), the <xref:System.IO.Path.Combine%2A> method appends `path2` to `path1`.  \n  \n Not all invalid characters for directory and file names are interpreted as unacceptable by the `Combine` method, because you can use these characters for search wildcard characters. For example, while `Path.Combine(\"c:\\\\\", \"*.txt\")` might be invalid if you were to create a file from it, it is valid as a search string. It is therefore successfully interpreted by the `Combine` method.","nodes":[{"pos":[0,239],"content":"<ph id=\"ph1\">`path1`</ph> should be an absolute path (for example, \"d:\\archives\" or \"<ph id=\"ph2\">\\\\</ph>\\archives\\public\").If one of the subsequent paths is also an absolute path, the combine operation discards all previously combined paths and resets to that absolute path.","source":"`path1` should be an absolute path (for example, \"d:\\archives\" or \"\\\\\\archives\\public\").If one of the subsequent paths is also an absolute path, the combine operation discards all previously combined paths and resets to that absolute path."},{"pos":[246,301],"content":"Zero-length strings are omitted from the combined path.","nodes":[{"content":"Zero-length strings are omitted from the combined path.","pos":[0,55]}]},{"pos":[308,662],"content":"If <ph id=\"ph1\">`path1`</ph> is not a drive reference (that is, \"C:\" or \"D:\") and does not end with a valid separator character as defined in <ph id=\"ph2\">&lt;xref:System.IO.Path.DirectorySeparatorChar&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.IO.Path.AltDirectorySeparatorChar&gt;</ph>, or <ph id=\"ph4\">&lt;xref:System.IO.Path.VolumeSeparatorChar&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.IO.Path.DirectorySeparatorChar&gt;</ph> is appended to <ph id=\"ph6\">`path1`</ph> before concatenation.","source":"If `path1` is not a drive reference (that is, \"C:\" or \"D:\") and does not end with a valid separator character as defined in <xref:System.IO.Path.DirectorySeparatorChar>, <xref:System.IO.Path.AltDirectorySeparatorChar>, or <xref:System.IO.Path.VolumeSeparatorChar>, <xref:System.IO.Path.DirectorySeparatorChar> is appended to `path1` before concatenation."},{"pos":[669,935],"content":"If `path2` does not include a root (for example, if `path2` does not start with a separator character or a drive specification), the result is a concatenation of the two paths, with an intervening separator character. If `path2` includes a root, `path2` is returned.","nodes":[{"content":"If <ph id=\"ph1\">`path2`</ph> does not include a root (for example, if <ph id=\"ph2\">`path2`</ph> does not start with a separator character or a drive specification), the result is a concatenation of the two paths, with an intervening separator character.","pos":[0,217],"source":"If `path2` does not include a root (for example, if `path2` does not start with a separator character or a drive specification), the result is a concatenation of the two paths, with an intervening separator character."},{"content":"If <ph id=\"ph1\">`path2`</ph> includes a root, <ph id=\"ph2\">`path2`</ph> is returned.","pos":[218,266],"source":" If `path2` includes a root, `path2` is returned."}]},{"pos":[942,1142],"content":"The parameters are not parsed if they have white space. Therefore, if `path2` includes white space (for example, \" \\file.txt \"), the <xref:System.IO.Path.Combine%2A> method appends `path2` to `path1`.","nodes":[{"content":"The parameters are not parsed if they have white space.","pos":[0,55]},{"content":"Therefore, if <ph id=\"ph1\">`path2`</ph> includes white space (for example, \" \\file.txt \"), the <ph id=\"ph2\">&lt;xref:System.IO.Path.Combine%2A&gt;</ph> method appends <ph id=\"ph3\">`path2`</ph> to <ph id=\"ph4\">`path1`</ph>.","pos":[56,200],"source":" Therefore, if `path2` includes white space (for example, \" \\file.txt \"), the <xref:System.IO.Path.Combine%2A> method appends `path2` to `path1`."}]},{"pos":[1149,1534],"content":"Not all invalid characters for directory and file names are interpreted as unacceptable by the `Combine` method, because you can use these characters for search wildcard characters. For example, while `Path.Combine(\"c:\\\\\", \"*.txt\")` might be invalid if you were to create a file from it, it is valid as a search string. It is therefore successfully interpreted by the `Combine` method.","nodes":[{"content":"Not all invalid characters for directory and file names are interpreted as unacceptable by the <ph id=\"ph1\">`Combine`</ph> method, because you can use these characters for search wildcard characters.","pos":[0,181],"source":"Not all invalid characters for directory and file names are interpreted as unacceptable by the `Combine` method, because you can use these characters for search wildcard characters."},{"content":"For example, while <ph id=\"ph1\">`Path.Combine(\"c:\\\\\", \"*.txt\")`</ph> might be invalid if you were to create a file from it, it is valid as a search string.","pos":[182,319],"source":" For example, while `Path.Combine(\"c:\\\\\", \"*.txt\")` might be invalid if you were to create a file from it, it is valid as a search string."},{"content":"It is therefore successfully interpreted by the <ph id=\"ph1\">`Combine`</ph> method.","pos":[320,385],"source":" It is therefore successfully interpreted by the `Combine` method."}]}],"pos":[28398,29967],"yaml":true,"extradata":"MT"},{"content":"The first path to combine.","nodes":[{"pos":[0,26],"content":"The first path to combine.","nodes":[{"content":"The first path to combine.","pos":[0,26]}]}],"pos":[30485,30512],"yaml":true},{"content":"The second path to combine.","nodes":[{"pos":[0,27],"content":"The second path to combine.","nodes":[{"content":"The second path to combine.","pos":[0,27]}]}],"pos":[30573,30601],"yaml":true},{"content":"The third path to combine.","nodes":[{"pos":[0,26],"content":"The third path to combine.","nodes":[{"content":"The third path to combine.","pos":[0,26]}]}],"pos":[30662,30689],"yaml":true},{"content":"The fourth path to combine.","nodes":[{"pos":[0,27],"content":"The fourth path to combine.","nodes":[{"content":"The fourth path to combine.","pos":[0,27]}]}],"pos":[30750,30778],"yaml":true},{"content":"The combined paths.","nodes":[{"pos":[0,19],"content":"The combined paths.","nodes":[{"content":"The combined paths.","pos":[0,19]}]}],"pos":[30835,30855],"yaml":true},{"content":"<code>path1</code>, <code>path2</code>, <code>path3</code>, or <code>path4</code> contains one or more of the invalid characters defined in <xref href=\"System.IO.Path.GetInvalidPathChars\"></xref>.","nodes":[{"pos":[0,196],"content":"<ph id=\"ph1\">&lt;code&gt;path1&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;path2&lt;/code&gt;</ph>, <ph id=\"ph3\">&lt;code&gt;path3&lt;/code&gt;</ph>, or <ph id=\"ph4\">&lt;code&gt;path4&lt;/code&gt;</ph> contains one or more of the invalid characters defined in <ph id=\"ph5\">&lt;xref href=\"System.IO.Path.GetInvalidPathChars\"&gt;&lt;/xref&gt;</ph>.","source":"<code>path1</code>, <code>path2</code>, <code>path3</code>, or <code>path4</code> contains one or more of the invalid characters defined in <xref href=\"System.IO.Path.GetInvalidPathChars\"></xref>."}],"pos":[30999,31196],"yaml":true},{"content":"<code>path1</code>, <code>path2</code>, <code>path3</code>, or <code>path4</code> is `null`.","nodes":[{"pos":[0,92],"content":"<ph id=\"ph1\">&lt;code&gt;path1&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;path2&lt;/code&gt;</ph>, <ph id=\"ph3\">&lt;code&gt;path3&lt;/code&gt;</ph>, or <ph id=\"ph4\">&lt;code&gt;path4&lt;/code&gt;</ph> is <ph id=\"ph5\">`null`</ph>.","source":"<code>path1</code>, <code>path2</code>, <code>path3</code>, or <code>path4</code> is `null`."}],"pos":[31298,31391],"yaml":true},{"content":"Provides a platform-specific character used to separate directory levels in a path string that reflects a hierarchical file system organization.","nodes":[{"pos":[0,144],"content":"Provides a platform-specific character used to separate directory levels in a path string that reflects a hierarchical file system organization.","nodes":[{"content":"Provides a platform-specific character used to separate directory levels in a path string that reflects a hierarchical file system organization.","pos":[0,144]}]}],"pos":[32507,32652],"yaml":true},{"content":"The character stored in this field cannot be in <xref:System.IO.Path.InvalidPathChars>. <xref:System.IO.Path.AltDirectorySeparatorChar> and `DirectorySeparatorChar` are both valid for separating directory levels in a path string.","nodes":[{"pos":[0,229],"content":"The character stored in this field cannot be in <xref:System.IO.Path.InvalidPathChars>. <xref:System.IO.Path.AltDirectorySeparatorChar> and `DirectorySeparatorChar` are both valid for separating directory levels in a path string.","nodes":[{"content":"The character stored in this field cannot be in <ph id=\"ph1\">&lt;xref:System.IO.Path.InvalidPathChars&gt;</ph>.","pos":[0,87],"source":"The character stored in this field cannot be in <xref:System.IO.Path.InvalidPathChars>."},{"content":"<ph id=\"ph1\">&lt;xref:System.IO.Path.AltDirectorySeparatorChar&gt;</ph> and <ph id=\"ph2\">`DirectorySeparatorChar`</ph> are both valid for separating directory levels in a path string.","pos":[88,229],"source":" <xref:System.IO.Path.AltDirectorySeparatorChar> and `DirectorySeparatorChar` are both valid for separating directory levels in a path string."}]}],"pos":[32663,32893],"yaml":true,"extradata":"MT"},{"content":"Returns the directory information for the specified path string.","nodes":[{"pos":[0,64],"content":"Returns the directory information for the specified path string.","nodes":[{"content":"Returns the directory information for the specified path string.","pos":[0,64]}]}],"pos":[34938,35003],"yaml":true},{"content":"In most cases, the string returned by this method consists of all characters in the path up to but not including the last <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>. If the path consists of a root directory, such as \"c:\\\\\", null is returned. Note that this method does not support paths using \"file:\". Because the returned path does not include the <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, passing the returned path back into the <xref:System.IO.Path.GetDirectoryName%2A> method will result in the truncation of one folder level per subsequent call on the result string. For example, passing the path \"C:\\Directory\\SubDirectory\\test.txt\" into the <xref:System.IO.Path.GetDirectoryName%2A> method will return \"C:\\Directory\\SubDirectory\". Passing that string, \"C:\\Directory\\SubDirectory\", into <xref:System.IO.Path.GetDirectoryName%2A> will result in \"C:\\Directory\".  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,973],"content":"In most cases, the string returned by this method consists of all characters in the path up to but not including the last <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>. If the path consists of a root directory, such as \"c:\\\\\", null is returned. Note that this method does not support paths using \"file:\". Because the returned path does not include the <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, passing the returned path back into the <xref:System.IO.Path.GetDirectoryName%2A> method will result in the truncation of one folder level per subsequent call on the result string. For example, passing the path \"C:\\Directory\\SubDirectory\\test.txt\" into the <xref:System.IO.Path.GetDirectoryName%2A> method will return \"C:\\Directory\\SubDirectory\". Passing that string, \"C:\\Directory\\SubDirectory\", into <xref:System.IO.Path.GetDirectoryName%2A> will result in \"C:\\Directory\".","nodes":[{"content":"In most cases, the string returned by this method consists of all characters in the path up to but not including the last <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>. If the path consists of a root directory, such as \"c:\\\\\", null is returned. Note that this method does not support paths using \"file:\". Because the returned path does not include the <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, passing the returned path back into the <xref:System.IO.Path.GetDirectoryName%2A> method will result in the truncation of one folder level per subsequent call on the result string. For example, passing the path \"C:\\Directory\\SubDirectory\\test.txt\" into the <xref:System.IO.Path.GetDirectoryName%2A> method will return \"C:\\Directory\\SubDirectory\". Passing that string, \"C:\\Directory\\SubDirectory\", into <xref:System.IO.Path.GetDirectoryName%2A> will result in \"C:\\Directory\".","pos":[0,973],"nodes":[{"content":"In most cases, the string returned by this method consists of all characters in the path up to but not including the last <ph id=\"ph1\">&lt;xref:System.IO.Path.DirectorySeparatorChar&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.IO.Path.AltDirectorySeparatorChar&gt;</ph>.","pos":[0,218],"source":"In most cases, the string returned by this method consists of all characters in the path up to but not including the last <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>."},{"content":"If the path consists of a root directory, such as \"c:<ph id=\"ph1\">\\\\</ph>\", null is returned.","pos":[219,294],"source":" If the path consists of a root directory, such as \"c:\\\\\", null is returned."},{"content":"Note that this method does not support paths using \"file:\".","pos":[295,354]},{"content":"Because the returned path does not include the <ph id=\"ph1\">&lt;xref:System.IO.Path.DirectorySeparatorChar&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.IO.Path.AltDirectorySeparatorChar&gt;</ph>, passing the returned path back into the <ph id=\"ph3\">&lt;xref:System.IO.Path.GetDirectoryName%2A&gt;</ph> method will result in the truncation of one folder level per subsequent call on the result string.","pos":[355,679],"source":" Because the returned path does not include the <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, passing the returned path back into the <xref:System.IO.Path.GetDirectoryName%2A> method will result in the truncation of one folder level per subsequent call on the result string."},{"content":"For example, passing the path \"C:\\Directory\\SubDirectory\\test.txt\" into the <ph id=\"ph1\">&lt;xref:System.IO.Path.GetDirectoryName%2A&gt;</ph> method will return \"C:\\Directory\\SubDirectory\".","pos":[680,845],"source":" For example, passing the path \"C:\\Directory\\SubDirectory\\test.txt\" into the <xref:System.IO.Path.GetDirectoryName%2A> method will return \"C:\\Directory\\SubDirectory\"."},{"content":"Passing that string, \"C:\\Directory\\SubDirectory\", into <ph id=\"ph1\">&lt;xref:System.IO.Path.GetDirectoryName%2A&gt;</ph> will result in \"C:\\Directory\".","pos":[846,973],"source":" Passing that string, \"C:\\Directory\\SubDirectory\", into <xref:System.IO.Path.GetDirectoryName%2A> will result in \"C:\\Directory\"."}]}]},{"pos":[980,1075],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[35014,36116],"yaml":true,"extradata":"MT"},{"content":"The path of a file or directory.","nodes":[{"pos":[0,32],"content":"The path of a file or directory.","nodes":[{"content":"The path of a file or directory.","pos":[0,32]}]}],"pos":[36809,36842],"yaml":true},{"content":"Directory information for <code>path</code>, or `null` if <code>path</code> denotes a root directory or is null. Returns <xref href=\"System.String.Empty\"></xref> if <code>path</code> does not contain directory information.","nodes":[{"pos":[0,222],"content":"Directory information for <code>path</code>, or `null` if <code>path</code> denotes a root directory or is null. Returns <xref href=\"System.String.Empty\"></xref> if <code>path</code> does not contain directory information.","nodes":[{"content":"Directory information for <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or <ph id=\"ph2\">`null`</ph> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">path</ph><ept id=\"p2\">&lt;/code&gt;</ept> denotes a root directory or is null.","pos":[0,112],"source":"Directory information for <code>path</code>, or `null` if <code>path</code> denotes a root directory or is null."},{"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not contain directory information.","pos":[113,222],"source":" Returns <xref href=\"System.String.Empty\"></xref> if <code>path</code> does not contain directory information."}]}],"pos":[36899,37122],"yaml":true},{"content":"The <code>path</code> parameter contains invalid characters, is empty, or contains only white spaces.","nodes":[{"pos":[0,101],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter contains invalid characters, is empty, or contains only white spaces.","source":"The <code>path</code> parameter contains invalid characters, is empty, or contains only white spaces."}],"pos":[37275,37377],"yaml":true},{"content":"<block subset=\"none\" type=\"note\">\n      <p>  \n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\"System.IO.IOException\"></xref>, instead.  \n  \n</p>\n    </block>  \n  \n The <code>path</code> parameter is longer than the system-defined maximum length.","nodes":[{"pos":[0,342],"content":"<block subset=\"none\" type=\"note\">\n      <p>  \n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\"System.IO.IOException\"></xref>, instead.","nodes":[{"content":"In the <bpt id=\"p1\">[</bpt>.NET for Windows Store apps<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id=\"p2\">[</bpt>Portable Class Library<ept id=\"p2\">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch the base class exception, <ph id=\"ph1\">&lt;xref href=\"System.IO.IOException\"&gt;&lt;/xref&gt;</ph>, instead.","pos":[47,342],"source":" In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\"System.IO.IOException\"></xref>, instead."}]},{"pos":[348,365],"content":"</p>\n    </block>","nodes":[]},{"pos":[372,453],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is longer than the system-defined maximum length.","source":"The <code>path</code> parameter is longer than the system-defined maximum length."}],"pos":[37483,37952],"yaml":true},{"content":"Returns the extension of the specified path string.","nodes":[{"pos":[0,51],"content":"Returns the extension of the specified path string.","nodes":[{"content":"Returns the extension of the specified path string.","pos":[0,51]}]}],"pos":[39422,39474],"yaml":true},{"content":"The extension of `path` is obtained by searching `path` for a period (.), starting with the last character in path and continuing toward the start of path. If a period is found before a <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar> character, the returned string contains the period and the characters after it; otherwise, <xref:System.String.Empty> is returned.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,412],"content":"The extension of `path` is obtained by searching `path` for a period (.), starting with the last character in path and continuing toward the start of path. If a period is found before a <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar> character, the returned string contains the period and the characters after it; otherwise, <xref:System.String.Empty> is returned.","nodes":[{"content":"The extension of <ph id=\"ph1\">`path`</ph> is obtained by searching <ph id=\"ph2\">`path`</ph> for a period (.), starting with the last character in path and continuing toward the start of path.","pos":[0,155],"source":"The extension of `path` is obtained by searching `path` for a period (.), starting with the last character in path and continuing toward the start of path."},{"content":"If a period is found before a <ph id=\"ph1\">&lt;xref:System.IO.Path.DirectorySeparatorChar&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.IO.Path.AltDirectorySeparatorChar&gt;</ph> character, the returned string contains the period and the characters after it; otherwise, <ph id=\"ph3\">&lt;xref:System.String.Empty&gt;</ph> is returned.","pos":[156,412],"source":" If a period is found before a <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar> character, the returned string contains the period and the characters after it; otherwise, <xref:System.String.Empty> is returned."}]},{"pos":[419,514],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[39485,40004],"yaml":true,"extradata":"MT"},{"content":"The path string from which to get the extension.","nodes":[{"pos":[0,48],"content":"The path string from which to get the extension.","nodes":[{"content":"The path string from which to get the extension.","pos":[0,48]}]}],"pos":[40689,40738],"yaml":true},{"content":"The extension of the specified path (including the period \".\"), or `null`, or <xref href=\"System.String.Empty\"></xref>. If <code>path</code> is `null`, <xref href=\"System.IO.Path.GetExtension(System.String)\"></xref> returns `null`. If <code>path</code> does not have extension information, <xref href=\"System.IO.Path.GetExtension(System.String)\"></xref> returns <xref href=\"System.String.Empty\"></xref>.","nodes":[{"pos":[0,403],"content":"The extension of the specified path (including the period \".\"), or `null`, or <xref href=\"System.String.Empty\"></xref>. If <code>path</code> is `null`, <xref href=\"System.IO.Path.GetExtension(System.String)\"></xref> returns `null`. If <code>path</code> does not have extension information, <xref href=\"System.IO.Path.GetExtension(System.String)\"></xref> returns <xref href=\"System.String.Empty\"></xref>.","nodes":[{"content":"The extension of the specified path (including the period \".\"), or <ph id=\"ph1\">`null`</ph>, or <ph id=\"ph2\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>.","pos":[0,119],"source":"The extension of the specified path (including the period \".\"), or `null`, or <xref href=\"System.String.Empty\"></xref>."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>, <ph id=\"ph3\">&lt;xref href=\"System.IO.Path.GetExtension(System.String)\"&gt;&lt;/xref&gt;</ph> returns <ph id=\"ph4\">`null`</ph>.","pos":[120,231],"source":" If <code>path</code> is `null`, <xref href=\"System.IO.Path.GetExtension(System.String)\"></xref> returns `null`."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not have extension information, <ph id=\"ph2\">&lt;xref href=\"System.IO.Path.GetExtension(System.String)\"&gt;&lt;/xref&gt;</ph> returns <ph id=\"ph3\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>.","pos":[232,403],"source":" If <code>path</code> does not have extension information, <xref href=\"System.IO.Path.GetExtension(System.String)\"></xref> returns <xref href=\"System.String.Empty\"></xref>."}]}],"pos":[40795,41199],"yaml":true},{"content":"<code>path</code> contains one or more of the invalid characters defined in <xref href=\"System.IO.Path.GetInvalidPathChars\"></xref>.","nodes":[{"pos":[0,132],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> contains one or more of the invalid characters defined in <ph id=\"ph2\">&lt;xref href=\"System.IO.Path.GetInvalidPathChars\"&gt;&lt;/xref&gt;</ph>.","source":"<code>path</code> contains one or more of the invalid characters defined in <xref href=\"System.IO.Path.GetInvalidPathChars\"></xref>."}],"pos":[41348,41481],"yaml":true},{"content":"Returns the file name and extension of the specified path string.","nodes":[{"pos":[0,65],"content":"Returns the file name and extension of the specified path string.","nodes":[{"content":"Returns the file name and extension of the specified path string.","pos":[0,65]}]}],"pos":[42945,43011],"yaml":true},{"content":"The returned value is `null` if the file path is `null`.  \n  \n The separator characters used to determine the start of the file name are <xref:System.IO.Path.DirectorySeparatorChar> and <xref:System.IO.Path.AltDirectorySeparatorChar>.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,56],"content":"The returned value is <ph id=\"ph1\">`null`</ph> if the file path is <ph id=\"ph2\">`null`</ph>.","source":"The returned value is `null` if the file path is `null`."},{"pos":[63,234],"content":"The separator characters used to determine the start of the file name are <xref:System.IO.Path.DirectorySeparatorChar> and <xref:System.IO.Path.AltDirectorySeparatorChar>.","nodes":[{"content":"The separator characters used to determine the start of the file name are <ph id=\"ph1\">&lt;xref:System.IO.Path.DirectorySeparatorChar&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IO.Path.AltDirectorySeparatorChar&gt;</ph>.","pos":[0,171],"source":"The separator characters used to determine the start of the file name are <xref:System.IO.Path.DirectorySeparatorChar> and <xref:System.IO.Path.AltDirectorySeparatorChar>."}]},{"pos":[241,336],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[43022,43365],"yaml":true,"extradata":"MT"},{"content":"The path string from which to obtain the file name and extension.","nodes":[{"pos":[0,65],"content":"The path string from which to obtain the file name and extension.","nodes":[{"content":"The path string from which to obtain the file name and extension.","pos":[0,65]}]}],"pos":[44058,44124],"yaml":true},{"content":"The characters after the last directory character in <code>path</code>. If the last character of <code>path</code> is a directory or volume separator character, this method returns <xref href=\"System.String.Empty\"></xref>. If <code>path</code> is `null`, this method returns `null`.","nodes":[{"pos":[0,282],"content":"The characters after the last directory character in <code>path</code>. If the last character of <code>path</code> is a directory or volume separator character, this method returns <xref href=\"System.String.Empty\"></xref>. If <code>path</code> is `null`, this method returns `null`.","nodes":[{"content":"The characters after the last directory character in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[0,71],"source":"The characters after the last directory character in <code>path</code>."},{"content":"If the last character of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> is a directory or volume separator character, this method returns <ph id=\"ph2\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>.","pos":[72,222],"source":" If the last character of <code>path</code> is a directory or volume separator character, this method returns <xref href=\"System.String.Empty\"></xref>."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>, this method returns <ph id=\"ph3\">`null`</ph>.","pos":[223,282],"source":" If <code>path</code> is `null`, this method returns `null`."}]}],"pos":[44181,44464],"yaml":true},{"content":"<code>path</code> contains one or more of the invalid characters defined in <xref href=\"System.IO.Path.GetInvalidPathChars\"></xref>.","nodes":[{"pos":[0,132],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> contains one or more of the invalid characters defined in <ph id=\"ph2\">&lt;xref href=\"System.IO.Path.GetInvalidPathChars\"&gt;&lt;/xref&gt;</ph>.","source":"<code>path</code> contains one or more of the invalid characters defined in <xref href=\"System.IO.Path.GetInvalidPathChars\"></xref>."}],"pos":[44612,44745],"yaml":true},{"content":"Returns the file name of the specified path string without the extension.","nodes":[{"pos":[0,73],"content":"Returns the file name of the specified path string without the extension.","nodes":[{"content":"Returns the file name of the specified path string without the extension.","pos":[0,73]}]}],"pos":[46305,46379],"yaml":true},{"content":"This method does not verify that the path or file name exists.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,62],"content":"This method does not verify that the path or file name exists.","nodes":[{"content":"This method does not verify that the path or file name exists.","pos":[0,62]}]},{"pos":[69,164],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[46390,46559],"yaml":true,"extradata":"MT"},{"content":"The path of the file.","nodes":[{"pos":[0,21],"content":"The path of the file.","nodes":[{"content":"The path of the file.","pos":[0,21]}]}],"pos":[47241,47263],"yaml":true},{"content":"The string returned by <xref href=\"System.IO.Path.GetFileName(System.String)\"></xref>, minus the last period (.) and all characters following it.","nodes":[{"pos":[0,145],"content":"The string returned by <ph id=\"ph1\">&lt;xref href=\"System.IO.Path.GetFileName(System.String)\"&gt;&lt;/xref&gt;</ph>, minus the last period (.) and all characters following it.","source":"The string returned by <xref href=\"System.IO.Path.GetFileName(System.String)\"></xref>, minus the last period (.) and all characters following it."}],"pos":[47320,47466],"yaml":true},{"content":"<code>path</code> contains one or more of the invalid characters defined in <xref href=\"System.IO.Path.GetInvalidPathChars\"></xref>.","nodes":[{"pos":[0,132],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> contains one or more of the invalid characters defined in <ph id=\"ph2\">&lt;xref href=\"System.IO.Path.GetInvalidPathChars\"&gt;&lt;/xref&gt;</ph>.","source":"<code>path</code> contains one or more of the invalid characters defined in <xref href=\"System.IO.Path.GetInvalidPathChars\"></xref>."}],"pos":[47630,47763],"yaml":true},{"content":"Returns the absolute path for the specified path string.","nodes":[{"pos":[0,56],"content":"Returns the absolute path for the specified path string.","nodes":[{"content":"Returns the absolute path for the specified path string.","pos":[0,56]}]}],"pos":[49227,49284],"yaml":true},{"content":"The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"\\\\\\\\.\\PHYSICALDRIVE0 \".  \n  \n The absolute path includes all information required to locate a file or directory on a system.  \n  \n The file or directory specified by `path` is not required to exist. For example, if c:\\temp\\newdir is the current directory, calling `GetFullPath` on a file name such as test.txt returns c:\\temp\\newdir\\test.txt. The file need not exist.  \n  \n However, if `path` does exist, the caller must have permission to obtain path information for `path`. Note that unlike most members of the <xref:System.IO.Path> class, this method accesses the file system.  \n  \n This method uses current directory and current volume information to fully qualify `path`. If you specify a file name only in `path`, `GetFullPath` returns the fully qualified path of the current directory.  \n  \n If you pass in a short file name, it is expanded to a long file name.  \n  \n If a path contains no significant characters it is invalid unless it contains one or more \".\" characters followed by any number of spaces, then it will be parsed as either \".\" or \"..\".  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,137],"content":"The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"\\\\\\\\.\\PHYSICALDRIVE0 \".","nodes":[{"content":"The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"<ph id=\"ph1\">\\\\</ph><ph id=\"ph2\">\\\\</ph>.\\PHYSICALDRIVE0 \".","pos":[0,137],"source":"The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"\\\\\\\\.\\PHYSICALDRIVE0 \"."}]},{"pos":[144,238],"content":"The absolute path includes all information required to locate a file or directory on a system.","nodes":[{"content":"The absolute path includes all information required to locate a file or directory on a system.","pos":[0,94]}]},{"pos":[245,481],"content":"The file or directory specified by `path` is not required to exist. For example, if c:\\temp\\newdir is the current directory, calling `GetFullPath` on a file name such as test.txt returns c:\\temp\\newdir\\test.txt. The file need not exist.","nodes":[{"content":"The file or directory specified by <ph id=\"ph1\">`path`</ph> is not required to exist.","pos":[0,67],"source":"The file or directory specified by `path` is not required to exist."},{"content":"For example, if c:\\temp\\newdir is the current directory, calling <ph id=\"ph1\">`GetFullPath`</ph> on a file name such as test.txt returns c:\\temp\\newdir\\test.txt.","pos":[68,211],"source":" For example, if c:\\temp\\newdir is the current directory, calling `GetFullPath` on a file name such as test.txt returns c:\\temp\\newdir\\test.txt."},{"content":"The file need not exist.","pos":[212,236]}]},{"pos":[488,693],"content":"However, if `path` does exist, the caller must have permission to obtain path information for `path`. Note that unlike most members of the <xref:System.IO.Path> class, this method accesses the file system.","nodes":[{"content":"However, if <ph id=\"ph1\">`path`</ph> does exist, the caller must have permission to obtain path information for <ph id=\"ph2\">`path`</ph>.","pos":[0,101],"source":"However, if `path` does exist, the caller must have permission to obtain path information for `path`."},{"content":"Note that unlike most members of the <ph id=\"ph1\">&lt;xref:System.IO.Path&gt;</ph> class, this method accesses the file system.","pos":[102,205],"source":" Note that unlike most members of the <xref:System.IO.Path> class, this method accesses the file system."}]},{"pos":[700,906],"content":"This method uses current directory and current volume information to fully qualify `path`. If you specify a file name only in `path`, `GetFullPath` returns the fully qualified path of the current directory.","nodes":[{"content":"This method uses current directory and current volume information to fully qualify <ph id=\"ph1\">`path`</ph>.","pos":[0,90],"source":"This method uses current directory and current volume information to fully qualify `path`."},{"content":"If you specify a file name only in <ph id=\"ph1\">`path`</ph>, <ph id=\"ph2\">`GetFullPath`</ph> returns the fully qualified path of the current directory.","pos":[91,206],"source":" If you specify a file name only in `path`, `GetFullPath` returns the fully qualified path of the current directory."}]},{"pos":[913,982],"content":"If you pass in a short file name, it is expanded to a long file name.","nodes":[{"content":"If you pass in a short file name, it is expanded to a long file name.","pos":[0,69]}]},{"pos":[989,1173],"content":"If a path contains no significant characters it is invalid unless it contains one or more \".\" characters followed by any number of spaces, then it will be parsed as either \".\" or \"..\".","nodes":[{"content":"If a path contains no significant characters it is invalid unless it contains one or more \".\" characters followed by any number of spaces, then it will be parsed as either \".\" or \"..\".","pos":[0,184]}]},{"pos":[1180,1275],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[49295,50605],"yaml":true,"extradata":"MT"},{"content":"The file or directory for which to obtain absolute path information.","nodes":[{"pos":[0,68],"content":"The file or directory for which to obtain absolute path information.","nodes":[{"content":"The file or directory for which to obtain absolute path information.","pos":[0,68]}]}],"pos":[51282,51351],"yaml":true},{"content":"The fully qualified location of <code>path</code>, such as \"C:\\MyFile.txt\".","nodes":[{"pos":[0,75],"content":"The fully qualified location of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept>, such as \"C:\\MyFile.txt\".","source":"The fully qualified location of <code>path</code>, such as \"C:\\MyFile.txt\"."}],"pos":[51408,51484],"yaml":true},{"content":"<code>path</code> is a zero-length string, contains only white space, or contains one or more of the invalid characters defined in <xref href=\"System.IO.Path.GetInvalidPathChars\"></xref>.  \n  \n -or-  \n  \n The system could not retrieve the absolute path.","nodes":[{"pos":[0,187],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> is a zero-length string, contains only white space, or contains one or more of the invalid characters defined in <ph id=\"ph2\">&lt;xref href=\"System.IO.Path.GetInvalidPathChars\"&gt;&lt;/xref&gt;</ph>.","source":"<code>path</code> is a zero-length string, contains only white space, or contains one or more of the invalid characters defined in <xref href=\"System.IO.Path.GetInvalidPathChars\"></xref>."},{"pos":[194,198],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[205,253],"content":"The system could not retrieve the absolute path.","nodes":[{"content":"The system could not retrieve the absolute path.","pos":[0,48]}]}],"pos":[51632,51894],"yaml":true},{"content":"The caller does not have the required permissions.","nodes":[{"pos":[0,50],"content":"The caller does not have the required permissions.","nodes":[{"content":"The caller does not have the required permissions.","pos":[0,50]}]}],"pos":[52006,52057],"yaml":true},{"content":"<code>path</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>path</code> is `null`."}],"pos":[52159,52188],"yaml":true},{"content":"<code>path</code> contains a colon (\":\") that is not part of a volume identifier (for example, \"c:\\\\\").","nodes":[{"pos":[0,103],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> contains a colon (\":\") that is not part of a volume identifier (for example, \"c:<ph id=\"ph2\">\\\\</ph>\").","source":"<code>path</code> contains a colon (\":\") that is not part of a volume identifier (for example, \"c:\\\\\")."}],"pos":[52290,52394],"yaml":true},{"content":"The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","nodes":[{"pos":[0,210],"content":"The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","nodes":[{"content":"The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","pos":[0,210],"nodes":[{"content":"The specified path, file name, or both exceed the system-defined maximum length.","pos":[0,80]},{"content":"For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","pos":[81,210]}]}]}],"pos":[52500,52711],"yaml":true},{"content":"Gets an array containing the characters that are not allowed in file names.","nodes":[{"pos":[0,75],"content":"Gets an array containing the characters that are not allowed in file names.","nodes":[{"content":"Gets an array containing the characters that are not allowed in file names.","pos":[0,75]}]}],"pos":[54064,54140],"yaml":true},{"content":"The array returned from this method is not guaranteed to contain the complete set of characters that are invalid in file and directory names. The full set of invalid characters can vary by file system. For example, on Windows-based desktop platforms, invalid path characters might include ASCII/Unicode characters 1 through 31, as well as quote (\"), less than (\\<), greater than (>), pipe (&#124;), backspace (\\b), null (\\0) and tab (\\t).","nodes":[{"pos":[0,438],"content":"The array returned from this method is not guaranteed to contain the complete set of characters that are invalid in file and directory names. The full set of invalid characters can vary by file system. For example, on Windows-based desktop platforms, invalid path characters might include ASCII/Unicode characters 1 through 31, as well as quote (\"), less than (\\<), greater than (>), pipe (&#124;), backspace (\\b), null (\\0) and tab (\\t).","nodes":[{"content":"The array returned from this method is not guaranteed to contain the complete set of characters that are invalid in file and directory names. The full set of invalid characters can vary by file system. For example, on Windows-based desktop platforms, invalid path characters might include ASCII/Unicode characters 1 through 31, as well as quote (\"), less than (\\<), greater than (>), pipe (&#124;), backspace (\\b), null (\\0) and tab (\\t).","pos":[0,438],"nodes":[{"content":"The array returned from this method is not guaranteed to contain the complete set of characters that are invalid in file and directory names.","pos":[0,141]},{"content":"The full set of invalid characters can vary by file system.","pos":[142,201]},{"content":"For example, on Windows-based desktop platforms, invalid path characters might include ASCII/Unicode characters 1 through 31, as well as quote (\"), less than (<ph id=\"ph1\">\\&lt;</ph>), greater than (&gt;), pipe (&amp;#124;), backspace (\\b), null (\\0) and tab (\\t).","pos":[202,438],"source":" For example, on Windows-based desktop platforms, invalid path characters might include ASCII/Unicode characters 1 through 31, as well as quote (\"), less than (\\<), greater than (>), pipe (&#124;), backspace (\\b), null (\\0) and tab (\\t)."}]}]}],"pos":[54151,54590],"yaml":true,"extradata":"MT"},{"content":"An array containing the characters that are not allowed in file names.","nodes":[{"pos":[0,70],"content":"An array containing the characters that are not allowed in file names.","nodes":[{"content":"An array containing the characters that are not allowed in file names.","pos":[0,70]}]}],"pos":[55385,55456],"yaml":true},{"content":"Gets an array containing the characters that are not allowed in path names.","nodes":[{"pos":[0,75],"content":"Gets an array containing the characters that are not allowed in path names.","nodes":[{"content":"Gets an array containing the characters that are not allowed in path names.","pos":[0,75]}]}],"pos":[56974,57050],"yaml":true},{"content":"The array returned from this method is not guaranteed to contain the complete set of characters that are invalid in file and directory names. The full set of invalid characters can vary by file system. For example, on Windows-based desktop platforms, invalid path characters might include ASCII/Unicode characters 1 through 31, as well as quote (\"), less than (\\<), greater than (>), pipe (&#124;), backspace (\\b), null (\\0) and tab (\\t).","nodes":[{"pos":[0,438],"content":"The array returned from this method is not guaranteed to contain the complete set of characters that are invalid in file and directory names. The full set of invalid characters can vary by file system. For example, on Windows-based desktop platforms, invalid path characters might include ASCII/Unicode characters 1 through 31, as well as quote (\"), less than (\\<), greater than (>), pipe (&#124;), backspace (\\b), null (\\0) and tab (\\t).","nodes":[{"content":"The array returned from this method is not guaranteed to contain the complete set of characters that are invalid in file and directory names. The full set of invalid characters can vary by file system. For example, on Windows-based desktop platforms, invalid path characters might include ASCII/Unicode characters 1 through 31, as well as quote (\"), less than (\\<), greater than (>), pipe (&#124;), backspace (\\b), null (\\0) and tab (\\t).","pos":[0,438],"nodes":[{"content":"The array returned from this method is not guaranteed to contain the complete set of characters that are invalid in file and directory names.","pos":[0,141]},{"content":"The full set of invalid characters can vary by file system.","pos":[142,201]},{"content":"For example, on Windows-based desktop platforms, invalid path characters might include ASCII/Unicode characters 1 through 31, as well as quote (\"), less than (<ph id=\"ph1\">\\&lt;</ph>), greater than (&gt;), pipe (&amp;#124;), backspace (\\b), null (\\0) and tab (\\t).","pos":[202,438],"source":" For example, on Windows-based desktop platforms, invalid path characters might include ASCII/Unicode characters 1 through 31, as well as quote (\"), less than (\\<), greater than (>), pipe (&#124;), backspace (\\b), null (\\0) and tab (\\t)."}]}]}],"pos":[57061,57500],"yaml":true,"extradata":"MT"},{"content":"An array containing the characters that are not allowed in path names.","nodes":[{"pos":[0,70],"content":"An array containing the characters that are not allowed in path names.","nodes":[{"content":"An array containing the characters that are not allowed in path names.","pos":[0,70]}]}],"pos":[58291,58362],"yaml":true},{"content":"Gets the root directory information of the specified path.","nodes":[{"pos":[0,58],"content":"Gets the root directory information of the specified path.","nodes":[{"content":"Gets the root directory information of the specified path.","pos":[0,58]}]}],"pos":[59891,59950],"yaml":true},{"content":"This method does not verify that the path or file name exists.  \n  \n Possible patterns for the string returned by this method are as follows:  \n  \n-   An empty string (`path` specified a relative path on the current drive or volume).  \n  \n-   \"/\" (`path` specified an absolute path on the current drive).  \n  \n-   \"X:\" (`path` specified a relative path on a drive, where X represents a drive or volume letter).  \n  \n-   \"X:/\" (`path` specified an absolute path on a given drive).  \n  \n-   \"\\\\\\ComputerName\\SharedFolder\" (a UNC path).  \n  \n The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"\\\\\\\\.\\PHYSICALDRIVE0 \".  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,62],"content":"This method does not verify that the path or file name exists.","nodes":[{"content":"This method does not verify that the path or file name exists.","pos":[0,62]}]},{"pos":[69,141],"content":"Possible patterns for the string returned by this method are as follows:","nodes":[{"content":"Possible patterns for the string returned by this method are as follows:","pos":[0,72]}]},{"pos":[151,233],"content":"An empty string (<ph id=\"ph1\">`path`</ph> specified a relative path on the current drive or volume).","source":"An empty string (`path` specified a relative path on the current drive or volume)."},{"pos":[243,304],"content":"\"/\" (<ph id=\"ph1\">`path`</ph> specified an absolute path on the current drive).","source":"\"/\" (`path` specified an absolute path on the current drive)."},{"pos":[314,410],"content":"\"X:\" (<ph id=\"ph1\">`path`</ph> specified a relative path on a drive, where X represents a drive or volume letter).","source":"\"X:\" (`path` specified a relative path on a drive, where X represents a drive or volume letter)."},{"pos":[420,479],"content":"\"X:/\" (<ph id=\"ph1\">`path`</ph> specified an absolute path on a given drive).","source":"\"X:/\" (`path` specified an absolute path on a given drive)."},{"pos":[489,533],"content":"\"\\\\\\ComputerName\\SharedFolder\" (a UNC path).","nodes":[{"content":"\"<ph id=\"ph1\">\\\\</ph>\\ComputerName\\SharedFolder\" (a UNC path).","pos":[0,44],"source":"\"\\\\\\ComputerName\\SharedFolder\" (a UNC path)."}]},{"pos":[540,677],"content":"The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"\\\\\\\\.\\PHYSICALDRIVE0 \".","nodes":[{"content":"The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"<ph id=\"ph1\">\\\\</ph><ph id=\"ph2\">\\\\</ph>.\\PHYSICALDRIVE0 \".","pos":[0,137],"source":"The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"\\\\\\\\.\\PHYSICALDRIVE0 \"."}]},{"pos":[684,779],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[59961,60778],"yaml":true,"extradata":"MT"},{"content":"The path from which to obtain root directory information.","nodes":[{"pos":[0,57],"content":"The path from which to obtain root directory information.","nodes":[{"content":"The path from which to obtain root directory information.","pos":[0,57]}]}],"pos":[61428,61486],"yaml":true},{"content":"The root directory of <code>path</code>, such as \"C:\\\\\", or `null` if <code>path</code> is `null`, or an empty string if <code>path</code> does not contain root directory information.","nodes":[{"pos":[0,183],"content":"The root directory of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept>, such as \"C:<ph id=\"ph2\">\\\\</ph>\", or <ph id=\"ph3\">`null`</ph> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph4\">path</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph5\">`null`</ph>, or an empty string if <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph6\">path</ph><ept id=\"p3\">&lt;/code&gt;</ept> does not contain root directory information.","source":"The root directory of <code>path</code>, such as \"C:\\\\\", or `null` if <code>path</code> is `null`, or an empty string if <code>path</code> does not contain root directory information."}],"pos":[61543,61727],"yaml":true},{"content":"<code>path</code> contains one or more of the invalid characters defined in <xref href=\"System.IO.Path.GetInvalidPathChars\"></xref>.  \n  \n -or-  \n  \n <xref href=\"System.String.Empty\"></xref> was passed to <code>path</code>.","nodes":[{"pos":[0,132],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> contains one or more of the invalid characters defined in <ph id=\"ph2\">&lt;xref href=\"System.IO.Path.GetInvalidPathChars\"&gt;&lt;/xref&gt;</ph>.","source":"<code>path</code> contains one or more of the invalid characters defined in <xref href=\"System.IO.Path.GetInvalidPathChars\"></xref>."},{"pos":[139,143],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[150,223],"content":"<ph id=\"ph1\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph> was passed to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"<xref href=\"System.String.Empty\"></xref> was passed to <code>path</code>."}],"pos":[61875,62109],"yaml":true},{"content":"Returns a random folder name or file name.","nodes":[{"pos":[0,42],"content":"Returns a random folder name or file name.","nodes":[{"content":"Returns a random folder name or file name.","pos":[0,42]}]}],"pos":[63546,63589],"yaml":true},{"content":"The <xref:System.IO.Path.GetRandomFileName%2A> method returns a cryptographically strong, random string that can be used as either a folder name or a file name. Unlike <xref:System.IO.Path.GetTempFileName%2A>, <xref:System.IO.Path.GetRandomFileName%2A> does not create a file. When the security of your file system is paramount, this method should be used instead of <xref:System.IO.Path.GetTempFileName%2A>.","nodes":[{"pos":[0,408],"content":"The <xref:System.IO.Path.GetRandomFileName%2A> method returns a cryptographically strong, random string that can be used as either a folder name or a file name. Unlike <xref:System.IO.Path.GetTempFileName%2A>, <xref:System.IO.Path.GetRandomFileName%2A> does not create a file. When the security of your file system is paramount, this method should be used instead of <xref:System.IO.Path.GetTempFileName%2A>.","nodes":[{"content":"The <xref:System.IO.Path.GetRandomFileName%2A> method returns a cryptographically strong, random string that can be used as either a folder name or a file name. Unlike <xref:System.IO.Path.GetTempFileName%2A>, <xref:System.IO.Path.GetRandomFileName%2A> does not create a file. When the security of your file system is paramount, this method should be used instead of <xref:System.IO.Path.GetTempFileName%2A>.","pos":[0,408],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.Path.GetRandomFileName%2A&gt;</ph> method returns a cryptographically strong, random string that can be used as either a folder name or a file name.","pos":[0,160],"source":"The <xref:System.IO.Path.GetRandomFileName%2A> method returns a cryptographically strong, random string that can be used as either a folder name or a file name."},{"content":"Unlike <ph id=\"ph1\">&lt;xref:System.IO.Path.GetTempFileName%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.IO.Path.GetRandomFileName%2A&gt;</ph> does not create a file.","pos":[161,276],"source":" Unlike <xref:System.IO.Path.GetTempFileName%2A>, <xref:System.IO.Path.GetRandomFileName%2A> does not create a file."},{"content":"When the security of your file system is paramount, this method should be used instead of <ph id=\"ph1\">&lt;xref:System.IO.Path.GetTempFileName%2A&gt;</ph>.","pos":[277,408],"source":" When the security of your file system is paramount, this method should be used instead of <xref:System.IO.Path.GetTempFileName%2A>."}]}]}],"pos":[63600,64009],"yaml":true,"extradata":"MT"},{"content":"A random folder name or file name.","nodes":[{"pos":[0,34],"content":"A random folder name or file name.","nodes":[{"content":"A random folder name or file name.","pos":[0,34]}]}],"pos":[64549,64584],"yaml":true},{"content":"Creates a uniquely named, zero-byte temporary file on disk and returns the full path of that file.","nodes":[{"pos":[0,98],"content":"Creates a uniquely named, zero-byte temporary file on disk and returns the full path of that file.","nodes":[{"content":"Creates a uniquely named, zero-byte temporary file on disk and returns the full path of that file.","pos":[0,98]}]}],"pos":[67037,67136],"yaml":true},{"content":"This method creates a temporary file with a .TMP file extension. The temporary file is created within the user’s temporary folder, which is the path returned by the <xref:System.IO.Path.GetTempPath%2A> method.  \n  \n The <xref:System.IO.Path.GetTempFileName%2A> method will raise an <xref:System.IO.IOException> if it is used to create more than 65535 files without deleting previous temporary files.  \n  \n The <xref:System.IO.Path.GetTempFileName%2A> method will raise an <xref:System.IO.IOException> if no unique temporary file name is available. To resolve this error, delete all unneeded temporary files.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,209],"content":"This method creates a temporary file with a .TMP file extension. The temporary file is created within the user’s temporary folder, which is the path returned by the <xref:System.IO.Path.GetTempPath%2A> method.","nodes":[{"content":"This method creates a temporary file with a .TMP file extension. The temporary file is created within the user’s temporary folder, which is the path returned by the <xref:System.IO.Path.GetTempPath%2A> method.","pos":[0,209],"nodes":[{"content":"This method creates a temporary file with a .TMP file extension.","pos":[0,64]},{"content":"The temporary file is created within the user’s temporary folder, which is the path returned by the <ph id=\"ph1\">&lt;xref:System.IO.Path.GetTempPath%2A&gt;</ph> method.","pos":[65,209],"source":" The temporary file is created within the user’s temporary folder, which is the path returned by the <xref:System.IO.Path.GetTempPath%2A> method."}]}]},{"pos":[216,399],"content":"The <xref:System.IO.Path.GetTempFileName%2A> method will raise an <xref:System.IO.IOException> if it is used to create more than 65535 files without deleting previous temporary files.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.Path.GetTempFileName%2A&gt;</ph> method will raise an <ph id=\"ph2\">&lt;xref:System.IO.IOException&gt;</ph> if it is used to create more than 65535 files without deleting previous temporary files.","pos":[0,183],"source":"The <xref:System.IO.Path.GetTempFileName%2A> method will raise an <xref:System.IO.IOException> if it is used to create more than 65535 files without deleting previous temporary files."}]},{"pos":[406,607],"content":"The <xref:System.IO.Path.GetTempFileName%2A> method will raise an <xref:System.IO.IOException> if no unique temporary file name is available. To resolve this error, delete all unneeded temporary files.","nodes":[{"content":"The <xref:System.IO.Path.GetTempFileName%2A> method will raise an <xref:System.IO.IOException> if no unique temporary file name is available. To resolve this error, delete all unneeded temporary files.","pos":[0,201],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.Path.GetTempFileName%2A&gt;</ph> method will raise an <ph id=\"ph2\">&lt;xref:System.IO.IOException&gt;</ph> if no unique temporary file name is available.","pos":[0,141],"source":"The <xref:System.IO.Path.GetTempFileName%2A> method will raise an <xref:System.IO.IOException> if no unique temporary file name is available."},{"content":"To resolve this error, delete all unneeded temporary files.","pos":[142,201]}]}]},{"pos":[614,709],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[67147,67865],"yaml":true,"extradata":"MT"},{"content":"The full path of the temporary file.","nodes":[{"pos":[0,36],"content":"The full path of the temporary file.","nodes":[{"content":"The full path of the temporary file.","pos":[0,36]}]}],"pos":[68005,68042],"yaml":true},{"content":"An I/O error occurs, such as no unique temporary file name is available.  \n  \n \\- or -  \n  \n This method was unable to create a temporary file.","nodes":[{"pos":[0,72],"content":"An I/O error occurs, such as no unique temporary file name is available.","nodes":[{"content":"An I/O error occurs, such as no unique temporary file name is available.","pos":[0,72]}]},{"pos":[79,86],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[93,143],"content":"This method was unable to create a temporary file.","nodes":[{"content":"This method was unable to create a temporary file.","pos":[0,50]}]}],"pos":[68188,68339],"yaml":true},{"content":"Returns the path of the current user's temporary folder.","nodes":[{"pos":[0,56],"content":"Returns the path of the current user's temporary folder.","nodes":[{"content":"Returns the path of the current user's temporary folder.","pos":[0,56]}]}],"pos":[69620,69677],"yaml":true},{"content":"This method checks for the existence of environment variables in the following order and uses the first path found:  \n  \n1.  The path specified by the TMP environment variable.  \n  \n2.  The path specified by the TEMP environment variable.  \n  \n3.  The path specified by the USERPROFILE environment variable.  \n  \n4.  The Windows directory.","nodes":[{"pos":[0,115],"content":"This method checks for the existence of environment variables in the following order and uses the first path found:","nodes":[{"content":"This method checks for the existence of environment variables in the following order and uses the first path found:","pos":[0,115]}]},{"pos":[125,176],"content":"The path specified by the TMP environment variable.","nodes":[{"content":"The path specified by the TMP environment variable.","pos":[0,51]}]},{"pos":[186,238],"content":"The path specified by the TEMP environment variable.","nodes":[{"content":"The path specified by the TEMP environment variable.","pos":[0,52]}]},{"pos":[248,307],"content":"The path specified by the USERPROFILE environment variable.","nodes":[{"content":"The path specified by the USERPROFILE environment variable.","pos":[0,59]}]},{"pos":[317,339],"content":"The Windows directory.","nodes":[{"content":"The Windows directory.","pos":[0,22]}]}],"pos":[69688,70038],"yaml":true,"extradata":"MT"},{"content":"The path to the temporary folder, ending with a backslash.","nodes":[{"pos":[0,58],"content":"The path to the temporary folder, ending with a backslash.","nodes":[{"content":"The path to the temporary folder, ending with a backslash.","pos":[0,58]}]}],"pos":[70588,70647],"yaml":true},{"content":"The caller does not have the required permissions.","nodes":[{"pos":[0,50],"content":"The caller does not have the required permissions.","nodes":[{"content":"The caller does not have the required permissions.","pos":[0,50]}]}],"pos":[70813,70864],"yaml":true},{"content":"Determines whether a path includes a file name extension.","nodes":[{"pos":[0,57],"content":"Determines whether a path includes a file name extension.","nodes":[{"content":"Determines whether a path includes a file name extension.","pos":[0,57]}]}],"pos":[72214,72272],"yaml":true},{"content":"Starting from the end of `path`, this method searches for a period (.) followed by at least one character. If this pattern is found before a <xref:System.IO.Path.DirectorySeparatorChar>, <xref:System.IO.Path.AltDirectorySeparatorChar>, or <xref:System.IO.Path.VolumeSeparatorChar> character is encountered, this method returns `true`.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,334],"content":"Starting from the end of `path`, this method searches for a period (.) followed by at least one character. If this pattern is found before a <xref:System.IO.Path.DirectorySeparatorChar>, <xref:System.IO.Path.AltDirectorySeparatorChar>, or <xref:System.IO.Path.VolumeSeparatorChar> character is encountered, this method returns `true`.","nodes":[{"content":"Starting from the end of <ph id=\"ph1\">`path`</ph>, this method searches for a period (.) followed by at least one character.","pos":[0,106],"source":"Starting from the end of `path`, this method searches for a period (.) followed by at least one character."},{"content":"If this pattern is found before a <ph id=\"ph1\">&lt;xref:System.IO.Path.DirectorySeparatorChar&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.IO.Path.AltDirectorySeparatorChar&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.IO.Path.VolumeSeparatorChar&gt;</ph> character is encountered, this method returns <ph id=\"ph4\">`true`</ph>.","pos":[107,334],"source":" If this pattern is found before a <xref:System.IO.Path.DirectorySeparatorChar>, <xref:System.IO.Path.AltDirectorySeparatorChar>, or <xref:System.IO.Path.VolumeSeparatorChar> character is encountered, this method returns `true`."}]},{"pos":[341,436],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[72283,72724],"yaml":true,"extradata":"MT"},{"content":"The path to search for an extension.","nodes":[{"pos":[0,36],"content":"The path to search for an extension.","nodes":[{"content":"The path to search for an extension.","pos":[0,36]}]}],"pos":[73382,73419],"yaml":true},{"content":"`true` if the characters that follow the last directory separator (\\\\\\ or /) or volume separator (:) in the path include a period (.) followed by one or more characters; otherwise, `false`.","nodes":[{"pos":[0,189],"content":"<ph id=\"ph1\">`true`</ph> if the characters that follow the last directory separator (<ph id=\"ph2\">\\\\</ph>\\ or /) or volume separator (:) in the path include a period (.) followed by one or more characters; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the characters that follow the last directory separator (\\\\\\ or /) or volume separator (:) in the path include a period (.) followed by one or more characters; otherwise, `false`."}],"pos":[73477,73669],"yaml":true},{"content":"<code>path</code> contains one or more of the invalid characters defined in <xref href=\"System.IO.Path.GetInvalidPathChars\"></xref>.","nodes":[{"pos":[0,132],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> contains one or more of the invalid characters defined in <ph id=\"ph2\">&lt;xref href=\"System.IO.Path.GetInvalidPathChars\"&gt;&lt;/xref&gt;</ph>.","source":"<code>path</code> contains one or more of the invalid characters defined in <xref href=\"System.IO.Path.GetInvalidPathChars\"></xref>."}],"pos":[73818,73951],"yaml":true},{"content":"Provides a platform-specific array of characters that cannot be specified in path string arguments passed to members of the <xref href=\"System.IO.Path\"></xref> class.","nodes":[{"pos":[0,166],"content":"Provides a platform-specific array of characters that cannot be specified in path string arguments passed to members of the <ph id=\"ph1\">&lt;xref href=\"System.IO.Path\"&gt;&lt;/xref&gt;</ph> class.","source":"Provides a platform-specific array of characters that cannot be specified in path string arguments passed to members of the <xref href=\"System.IO.Path\"></xref> class."}],"pos":[75375,75542],"yaml":true},{"content":"The array returned from this method is not guaranteed to contain the complete set of characters that are invalid in file and directory names. The full set of invalid characters can vary by file system. For example, on Windows-based desktop platforms, invalid path characters might include ASCII/Unicode characters 1 through 31, as well as quote (\"), less than (\\<), greater than (>), pipe (&#124;), backspace (\\b), null (\\0) and tab (\\t).  \n  \n> [!CAUTION]\n>  Do not use<xref:System.IO.Path.InvalidPathChars> if you think your code might execute in the same application domain as untrusted code. <xref:System.IO.Path.InvalidPathChars> is an array, so its elements can be overwritten. If untrusted code overwrites elements of <xref:System.IO.Path.InvalidPathChars>, it might cause your code to malfunction in ways that could be exploited.","nodes":[{"pos":[0,438],"content":"The array returned from this method is not guaranteed to contain the complete set of characters that are invalid in file and directory names. The full set of invalid characters can vary by file system. For example, on Windows-based desktop platforms, invalid path characters might include ASCII/Unicode characters 1 through 31, as well as quote (\"), less than (\\<), greater than (>), pipe (&#124;), backspace (\\b), null (\\0) and tab (\\t).","nodes":[{"content":"The array returned from this method is not guaranteed to contain the complete set of characters that are invalid in file and directory names. The full set of invalid characters can vary by file system. For example, on Windows-based desktop platforms, invalid path characters might include ASCII/Unicode characters 1 through 31, as well as quote (\"), less than (\\<), greater than (>), pipe (&#124;), backspace (\\b), null (\\0) and tab (\\t).","pos":[0,438],"nodes":[{"content":"The array returned from this method is not guaranteed to contain the complete set of characters that are invalid in file and directory names.","pos":[0,141]},{"content":"The full set of invalid characters can vary by file system.","pos":[142,201]},{"content":"For example, on Windows-based desktop platforms, invalid path characters might include ASCII/Unicode characters 1 through 31, as well as quote (\"), less than (<ph id=\"ph1\">\\&lt;</ph>), greater than (&gt;), pipe (&amp;#124;), backspace (\\b), null (\\0) and tab (\\t).","pos":[202,438],"source":" For example, on Windows-based desktop platforms, invalid path characters might include ASCII/Unicode characters 1 through 31, as well as quote (\"), less than (\\<), greater than (>), pipe (&#124;), backspace (\\b), null (\\0) and tab (\\t)."}]}]},{"pos":[446,837],"content":"[!CAUTION]\n Do not use<xref:System.IO.Path.InvalidPathChars> if you think your code might execute in the same application domain as untrusted code. <xref:System.IO.Path.InvalidPathChars> is an array, so its elements can be overwritten. If untrusted code overwrites elements of <xref:System.IO.Path.InvalidPathChars>, it might cause your code to malfunction in ways that could be exploited.","leadings":["","> "],"nodes":[{"content":" Do not use<xref:System.IO.Path.InvalidPathChars> if you think your code might execute in the same application domain as untrusted code. <xref:System.IO.Path.InvalidPathChars> is an array, so its elements can be overwritten. If untrusted code overwrites elements of <xref:System.IO.Path.InvalidPathChars>, it might cause your code to malfunction in ways that could be exploited.","pos":[11,389],"nodes":[{"content":"Do not use<ph id=\"ph1\">&lt;xref:System.IO.Path.InvalidPathChars&gt;</ph> if you think your code might execute in the same application domain as untrusted code.","pos":[1,136],"source":" Do not use<xref:System.IO.Path.InvalidPathChars> if you think your code might execute in the same application domain as untrusted code."},{"content":"<ph id=\"ph1\">&lt;xref:System.IO.Path.InvalidPathChars&gt;</ph> is an array, so its elements can be overwritten.","pos":[137,224],"source":" <xref:System.IO.Path.InvalidPathChars> is an array, so its elements can be overwritten."},{"content":"If untrusted code overwrites elements of <ph id=\"ph1\">&lt;xref:System.IO.Path.InvalidPathChars&gt;</ph>, it might cause your code to malfunction in ways that could be exploited.","pos":[225,378],"source":" If untrusted code overwrites elements of <xref:System.IO.Path.InvalidPathChars>, it might cause your code to malfunction in ways that could be exploited."}]}]}],"pos":[75553,76401],"yaml":true,"extradata":"MT"},{"content":"Gets a value indicating whether the specified path string contains a root.","nodes":[{"pos":[0,74],"content":"Gets a value indicating whether the specified path string contains a root.","nodes":[{"content":"Gets a value indicating whether the specified path string contains a root.","pos":[0,74]}]}],"pos":[78340,78415],"yaml":true},{"content":"The <xref:System.IO.Path.IsPathRooted%2A> method returns `true` if the first character is a directory separator character such as \"\\\\\", or if the path starts with a drive letter and colon (:). For example, it returns `true` for `path` strings such as \"\\\\\\MyDir\\\\\\MyFile.txt\", \"C:\\\\\\MyDir\", or \"C:MyDir\". It returns `false` for `path` strings such as \"MyDir\".  \n  \n This method does not verify that the path or file name exists.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,358],"content":"The <xref:System.IO.Path.IsPathRooted%2A> method returns `true` if the first character is a directory separator character such as \"\\\\\", or if the path starts with a drive letter and colon (:). For example, it returns `true` for `path` strings such as \"\\\\\\MyDir\\\\\\MyFile.txt\", \"C:\\\\\\MyDir\", or \"C:MyDir\". It returns `false` for `path` strings such as \"MyDir\".","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.Path.IsPathRooted%2A&gt;</ph> method returns <ph id=\"ph2\">`true`</ph> if the first character is a directory separator character such as \"<ph id=\"ph3\">\\\\</ph>\", or if the path starts with a drive letter and colon (:).","pos":[0,192],"source":"The <xref:System.IO.Path.IsPathRooted%2A> method returns `true` if the first character is a directory separator character such as \"\\\\\", or if the path starts with a drive letter and colon (:)."},{"content":"For example, it returns <ph id=\"ph1\">`true`</ph> for <ph id=\"ph2\">`path`</ph> strings such as \"<ph id=\"ph3\">\\\\</ph>\\MyDir<ph id=\"ph4\">\\\\</ph>\\MyFile.txt\", \"C:<ph id=\"ph5\">\\\\</ph>\\MyDir\", or \"C:MyDir\".","pos":[193,303],"source":" For example, it returns `true` for `path` strings such as \"\\\\\\MyDir\\\\\\MyFile.txt\", \"C:\\\\\\MyDir\", or \"C:MyDir\"."},{"content":"It returns <ph id=\"ph1\">`false`</ph> for <ph id=\"ph2\">`path`</ph> strings such as \"MyDir\".","pos":[304,358],"source":" It returns `false` for `path` strings such as \"MyDir\"."}]},{"pos":[365,427],"content":"This method does not verify that the path or file name exists.","nodes":[{"content":"This method does not verify that the path or file name exists.","pos":[0,62]}]},{"pos":[434,529],"content":"For a list of common I/O tasks, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[78426,78983],"yaml":true,"extradata":"MT"},{"content":"The path to test.","nodes":[{"pos":[0,17],"content":"The path to test.","nodes":[{"content":"The path to test.","pos":[0,17]}]}],"pos":[79668,79686],"yaml":true},{"content":"`true` if <code>path</code> contains a root; otherwise, `false`.","nodes":[{"pos":[0,64],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> contains a root; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if <code>path</code> contains a root; otherwise, `false`."}],"pos":[79744,79811],"yaml":true},{"content":"<code>path</code> contains one or more of the invalid characters defined in <xref href=\"System.IO.Path.GetInvalidPathChars\"></xref>.","nodes":[{"pos":[0,132],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> contains one or more of the invalid characters defined in <ph id=\"ph2\">&lt;xref href=\"System.IO.Path.GetInvalidPathChars\"&gt;&lt;/xref&gt;</ph>.","source":"<code>path</code> contains one or more of the invalid characters defined in <xref href=\"System.IO.Path.GetInvalidPathChars\"></xref>."}],"pos":[79960,80093],"yaml":true},{"content":"A platform-specific separator character used to separate path strings in environment variables.","nodes":[{"pos":[0,95],"content":"A platform-specific separator character used to separate path strings in environment variables.","nodes":[{"content":"A platform-specific separator character used to separate path strings in environment variables.","pos":[0,95]}]}],"pos":[81499,81595],"yaml":true},{"content":"On Windows-based desktop platforms, the value of this field is the semicolon (;) by default, but might vary on other platforms.","nodes":[{"pos":[0,127],"content":"On Windows-based desktop platforms, the value of this field is the semicolon (;) by default, but might vary on other platforms.","nodes":[{"content":"On Windows-based desktop platforms, the value of this field is the semicolon (;) by default, but might vary on other platforms.","pos":[0,127]}]}],"pos":[81606,81734],"yaml":true,"extradata":"MT"},{"content":"Provides a platform-specific volume separator character.","nodes":[{"pos":[0,56],"content":"Provides a platform-specific volume separator character.","nodes":[{"content":"Provides a platform-specific volume separator character.","pos":[0,56]}]}],"pos":[83709,83766],"yaml":true},{"content":"The value of this field is a colon (:) on Windows and Macintosh, and a slash (/) on UNIX operating systems. This is most useful for parsing paths such as \"c:\\windows\" or \"MacVolume:System Folder\".","nodes":[{"pos":[0,196],"content":"The value of this field is a colon (:) on Windows and Macintosh, and a slash (/) on UNIX operating systems. This is most useful for parsing paths such as \"c:\\windows\" or \"MacVolume:System Folder\".","nodes":[{"content":"The value of this field is a colon (:) on Windows and Macintosh, and a slash (/) on UNIX operating systems. This is most useful for parsing paths such as \"c:\\windows\" or \"MacVolume:System Folder\".","pos":[0,196],"nodes":[{"content":"The value of this field is a colon (:) on Windows and Macintosh, and a slash (/) on UNIX operating systems.","pos":[0,107]},{"content":"This is most useful for parsing paths such as \"c:\\windows\" or \"MacVolume:System Folder\".","pos":[108,196]}]}]}],"pos":[83777,83974],"yaml":true,"extradata":"MT"}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.IO.Path\n  commentId: T:System.IO.Path\n  id: Path\n  children:\n  - System.IO.Path.AltDirectorySeparatorChar\n  - System.IO.Path.ChangeExtension(System.String,System.String)\n  - System.IO.Path.Combine(System.String[])\n  - System.IO.Path.Combine(System.String,System.String)\n  - System.IO.Path.Combine(System.String,System.String,System.String)\n  - System.IO.Path.Combine(System.String,System.String,System.String,System.String)\n  - System.IO.Path.DirectorySeparatorChar\n  - System.IO.Path.GetDirectoryName(System.String)\n  - System.IO.Path.GetExtension(System.String)\n  - System.IO.Path.GetFileName(System.String)\n  - System.IO.Path.GetFileNameWithoutExtension(System.String)\n  - System.IO.Path.GetFullPath(System.String)\n  - System.IO.Path.GetInvalidFileNameChars\n  - System.IO.Path.GetInvalidPathChars\n  - System.IO.Path.GetPathRoot(System.String)\n  - System.IO.Path.GetRandomFileName\n  - System.IO.Path.GetRelativePath(System.String,System.String)\n  - System.IO.Path.GetTempFileName\n  - System.IO.Path.GetTempPath\n  - System.IO.Path.HasExtension(System.String)\n  - System.IO.Path.InvalidPathChars\n  - System.IO.Path.IsPathRooted(System.String)\n  - System.IO.Path.PathSeparator\n  - System.IO.Path.VolumeSeparatorChar\n  langs:\n  - csharp\n  name: Path\n  nameWithType: Path\n  fullName: System.IO.Path\n  type: Class\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.IO\n  summary: Performs operations on <xref href=\"System.String\"></xref> instances that contain file or directory path information. These operations are performed in a cross-platform manner.\n  remarks: \"> [!NOTE]\\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/io/path.cs#090eca8621a248ee). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \\n  \\n The .NET Framework does not support direct access to physical disks through paths that are device names, such as \\\"\\\\\\\\\\\\\\\\.\\\\PHYSICALDRIVE0 \\\".  \\n  \\n A path is a string that provides the location of a file or directory. A path does not necessarily point to a location on disk; for example, a path might map to a location in memory or on a device. The exact format of a path is determined by the current platform. For example, on some systems, a path can start with a drive or volume letter, while this element is not present in other systems. On some systems, file paths can contain extensions, which indicate the type of information stored in the file. The format of a file name extension is platform-dependent; for example, some systems limit extensions to three characters, and others do not. The current platform also determines the set of characters used to separate the elements of a path, and the set of characters that cannot be used when specifying paths. Because of these differences, the fields of the `Path` class as well as the exact behavior of some members of the `Path` class are platform-dependent.  \\n  \\n A path can contain absolute or relative location information. Absolute paths fully specify a location: the file or directory can be uniquely identified regardless of the current location. Relative paths specify a partial location: the current location is used as the starting point when locating a file specified with a relative path. To determine the current directory, call <xref:System.IO.Directory.GetCurrentDirectory%2A?displayProperty=fullName>.  \\n  \\n Most members of the `Path` class do not interact with the file system and do not verify the existence of the file specified by a path string. `Path` class members that modify a path string, such as <xref:System.IO.Path.ChangeExtension%2A>, have no effect on names of files in the file system. `Path` members do, however, validate the contents of a specified path string, and throw an <xref:System.ArgumentException> exception if the string contains characters that are not valid in path strings, as defined in the characters returned from the <xref:System.IO.Path.GetInvalidPathChars%2A> method. For example, on Windows-based desktop platforms, invalid path characters might include quote (\\\"), less than (\\\\<), greater than (>), pipe (&#124;), backspace (\\\\b), null (\\\\0), and Unicode characters 16 through 18 and 20 through 25.  \\n  \\n The members of the `Path` class enable you to quickly and easily perform common operations such as determining whether a file name extension is part of a path, and combining two strings into one path name.  \\n  \\n All members of the `Path` class are static and can therefore be called without having an instance of a path.  \\n  \\n> [!NOTE]\\n>  In members that accept a path as an input string, that path must be well-formed or an exception is raised. For example, if a path is fully qualified but begins with a space, the path is not trimmed in methods of the class. Therefore, the path is malformed and an exception is raised. Similarly, a path or a combination of paths cannot be fully qualified twice. For example, \\\"c:\\\\temp c:\\\\windows\\\" also raises an exception in most cases. Ensure that your paths are well-formed when using methods that accept a path string.  \\n  \\n In members that accept a path, the path can refer to a file or just a directory. The specified path can also refer to a relative path or a Universal Naming Convention (UNC) path for a server and share name. For example, all the following are acceptable paths:  \\n  \\n-   \\\"c:\\\\\\\\\\\\MyDir\\\\\\\\\\\\MyFile.txt\\\" in C#, or \\\"c:\\\\MyDir\\\\MyFile.txt\\\" in Visual Basic.  \\n  \\n-   \\\"c:\\\\\\\\\\\\MyDir\\\" in C#, or \\\"c:\\\\MyDir\\\" in Visual Basic.  \\n  \\n-   \\\"MyDir\\\\\\\\\\\\MySubdir\\\" in C#, or \\\"MyDir\\\\MySubDir\\\" in Visual Basic.  \\n  \\n-   \\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\MyServer\\\\\\\\\\\\MyShare\\\" in C#, or \\\"\\\\\\\\\\\\MyServer\\\\MyShare\\\" in Visual Basic.  \\n  \\n Because all these operations are performed on strings, it is impossible to verify that the results are valid in all scenarios. For example, the <xref:System.IO.Path.GetExtension%2A> method parses a string that you pass to it and returns the extension from that string. However, this does not mean that a file with that extension exists on the disk.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  example:\n  - \"The following code example demonstrates some of the main members of the `Path` class.  \\n  \\n [!code-cpp[path class#1](~/samples/snippets/cpp/VS_Snippets_CLR/Path Class/CPP/path class.cpp#1)]\\n [!code-csharp[path class#1](~/samples/snippets/csharp/VS_Snippets_CLR/Path Class/CS/path class.cs#1)]\\n [!code-vb[path class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Path Class/VB/path class.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public static class Path\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Path.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Path.AltDirectorySeparatorChar\n  commentId: F:System.IO.Path.AltDirectorySeparatorChar\n  id: AltDirectorySeparatorChar\n  parent: System.IO.Path\n  langs:\n  - csharp\n  name: AltDirectorySeparatorChar\n  nameWithType: Path.AltDirectorySeparatorChar\n  fullName: Path.AltDirectorySeparatorChar\n  type: Field\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.IO\n  summary: Provides a platform-specific alternate character used to separate directory levels in a path string that reflects a hierarchical file system organization.\n  remarks: \"The character stored in this field cannot be in <xref:System.IO.Path.InvalidPathChars>. This field can be set to the same value as <xref:System.IO.Path.DirectorySeparatorChar>. `AltDirectorySeparatorChar` and `DirectorySeparatorChar` are both valid for separating directory levels in a path string.  \\n  \\n The value of this field is a backslash ('\\\\\\\\') on UNIX, and a slash ('/') on Windows and Macintosh operating systems.\"\n  example:\n  - \"The following code example demonstrates a use of the `AltDirectorySeparatorChar` field.  \\n  \\n [!code-cpp[System.IO.Path Members#13](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#13)]\\n [!code-csharp[System.IO.Path Members#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#13)]\\n [!code-vb[System.IO.Path Members#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#13)]\"\n  syntax:\n    content: public static readonly char AltDirectorySeparatorChar;\n    return:\n      type: System.Char\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Path.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Path.ChangeExtension(System.String,System.String)\n  commentId: M:System.IO.Path.ChangeExtension(System.String,System.String)\n  id: ChangeExtension(System.String,System.String)\n  parent: System.IO.Path\n  langs:\n  - csharp\n  name: ChangeExtension(String, String)\n  nameWithType: Path.ChangeExtension(String, String)\n  fullName: Path.ChangeExtension(String, String)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.IO\n  summary: Changes the extension of a path string.\n  remarks: \"If neither `path` nor `extension` contains a period (.), `ChangeExtension` adds the period.  \\n  \\n The `extension` parameter can contain multiple periods and any valid path characters, and can be any length. If `extension` is `null`, the returned string contains the contents of `path` with the last period and all characters following it removed.  \\n  \\n If `extension` is an empty string, the returned path string contains the contents of `path` with any characters following the last period removed.  \\n  \\n If `path` does not have an extension and `extension` is not `null`, the returned string contains `path` followed by `extension`.  \\n  \\n If `extension` is not `null` and does not contain a leading period, the period is added.  \\n  \\n If `path` contains a multiple extension separated by multiple periods, the returned string contains the contents of `path` with the last period and all characters following it replaced by `extension`. For example, if `path` is \\\"\\\\Dir1\\\\examples\\\\pathtests.csx.txt\\\" and `extension` is \\\"cs\\\", the modified path is \\\"\\\\Dir1\\\\examples\\\\pathtests.csx.cs\\\".  \\n  \\n It is not possible to verify that the returned results are valid in all scenarios. For example, if `path` is empty, `extension` is appended.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  example:\n  - \"The following code example demonstrates a use of the `ChangeExtension` method.  \\n  \\n [!code-cpp[System.IO.Path Members#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#1)]\\n [!code-csharp[System.IO.Path Members#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#1)]\\n [!code-vb[System.IO.Path Members#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#1)]\"\n  syntax:\n    content: public static string ChangeExtension (string path, string extension);\n    parameters:\n    - id: path\n      type: System.String\n      description: The path information to modify. The path cannot contain any of the characters defined in <xref href=\"System.IO.Path.GetInvalidPathChars\"></xref>.\n    - id: extension\n      type: System.String\n      description: The new extension (with or without a leading period). Specify `null` to remove an existing extension from <code>path</code>.\n    return:\n      type: System.String\n      description: \"The modified path information.  \\n  \\n On Windows-based desktop platforms, if <code>path</code> is `null` or an empty string (\\\"\\\"), the path information is returned unmodified. If <code>extension</code> is `null`, the returned string contains the specified path with its extension removed. If <code>path</code> has no extension, and <code>extension</code> is not `null`, the returned path string contains <code>extension</code> appended to the end of <code>path</code>.\"\n  overload: System.IO.Path.ChangeExtension*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>path</code> contains one or more of the invalid characters defined in <xref href=\"System.IO.Path.GetInvalidPathChars\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Path.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Path.Combine(System.String[])\n  commentId: M:System.IO.Path.Combine(System.String[])\n  id: Combine(System.String[])\n  parent: System.IO.Path\n  langs:\n  - csharp\n  name: Combine(String[])\n  nameWithType: Path.Combine(String[])\n  fullName: Path.Combine(String[])\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.IO\n  summary: Combines an array of strings into a path.\n  remarks: \"`paths` should be an array of the parts of the path to combine. If the one of the subsequent paths is an absolute path, then the combine operation resets starting with that absolute path, discarding all previous combined paths.  \\n  \\n Zero-length strings are omitted from the combined path.  \\n  \\n The parameters are not parsed if they have white space.  \\n  \\n Not all invalid characters for directory and file names are interpreted as unacceptable by the `Combine` method, because you can use these characters for search wildcard characters. For example, while `Path.Combine(\\\"c:\\\\\\\\\\\", \\\"*.txt\\\")` might be invalid if you were to create a file from it, it is valid as a search string. It is therefore successfully interpreted by the `Combine` method.\"\n  example:\n  - \"The following example combines an array of strings into a path.  \\n  \\n [!code-csharp[System.IO.Path.Combine#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.path.combine/cs/program.cs#3)]\\n [!code-vb[System.IO.Path.Combine#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.path.combine/vb/program.vb#3)]\"\n  syntax:\n    content: public static string Combine (string[] paths);\n    parameters:\n    - id: paths\n      type: System.String[]\n      description: An array of parts of the path.\n    return:\n      type: System.String\n      description: The combined paths.\n  overload: System.IO.Path.Combine*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: One of the strings in the array contains one or more of the invalid characters defined in <xref href=\"System.IO.Path.GetInvalidPathChars\"></xref>.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: One of the strings in the array is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Path.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Path.Combine(System.String,System.String)\n  commentId: M:System.IO.Path.Combine(System.String,System.String)\n  id: Combine(System.String,System.String)\n  parent: System.IO.Path\n  langs:\n  - csharp\n  name: Combine(String, String)\n  nameWithType: Path.Combine(String, String)\n  fullName: Path.Combine(String, String)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.IO\n  summary: Combines two strings into a path.\n  remarks: \"If `path1` is not a drive reference (that is, \\\"C:\\\" or \\\"D:\\\") and does not end with a valid separator character as defined in <xref:System.IO.Path.DirectorySeparatorChar>, <xref:System.IO.Path.AltDirectorySeparatorChar>, or <xref:System.IO.Path.VolumeSeparatorChar>, <xref:System.IO.Path.DirectorySeparatorChar> is appended to `path1` before concatenation.  \\n  \\n If `path2` does not include a root (for example, if `path2` does not start with a separator character or a drive specification), the result is a concatenation of the two paths, with an intervening separator character. If `path2` includes a root, `path2` is returned.  \\n  \\n The parameters are not parsed if they have white space. Therefore, if `path2` includes white space (for example, \\\" \\\\file.txt \\\"), the <xref:System.IO.Path.Combine%2A> method appends `path2` to `path1` instead of returning only `path2`.  \\n  \\n Not all invalid characters for directory and file names are interpreted as unacceptable by the `Combine` method, because you can use these characters for search wildcard characters. For example, while `Path.Combine(\\\"c:\\\\\\\\\\\", \\\"*.txt\\\")` might be invalid if you were to create a file from it, it is valid as a search string. It is therefore successfully interpreted by the `Combine` method.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  example:\n  - \"The following code example demonstrates using the `Combine` method on a Windows-based desktop platform.  \\n  \\n [!code-cpp[pathcombine#1](~/samples/snippets/cpp/VS_Snippets_CLR/pathcombine/CPP/pathcombine.cpp#1)]\\n [!code-csharp[pathcombine#1](~/samples/snippets/csharp/VS_Snippets_CLR/pathcombine/CS/pathcombine.cs#1)]\\n [!code-vb[pathcombine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/pathcombine/VB/pathcombine.vb#1)]\"\n  syntax:\n    content: public static string Combine (string path1, string path2);\n    parameters:\n    - id: path1\n      type: System.String\n      description: The first path to combine.\n    - id: path2\n      type: System.String\n      description: The second path to combine.\n    return:\n      type: System.String\n      description: The combined paths. If one of the specified paths is a zero-length string, this method returns the other path. If <code>path2</code> contains an absolute path, this method returns <code>path2</code>.\n  overload: System.IO.Path.Combine*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>path1</code> or <code>path2</code> contains one or more of the invalid characters defined in <xref href=\"System.IO.Path.GetInvalidPathChars\"></xref>.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>path1</code> or <code>path2</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Path.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Path.Combine(System.String,System.String,System.String)\n  commentId: M:System.IO.Path.Combine(System.String,System.String,System.String)\n  id: Combine(System.String,System.String,System.String)\n  parent: System.IO.Path\n  langs:\n  - csharp\n  name: Combine(String, String, String)\n  nameWithType: Path.Combine(String, String, String)\n  fullName: Path.Combine(String, String, String)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.IO\n  summary: Combines three strings into a path.\n  remarks: \"`path1` should be an absolute path (for example, \\\"d:\\\\archives\\\" or \\\"\\\\\\\\\\\\archives\\\\public\\\"). If `path2` or `path3` is also an absolute path, the combine operation discards all previously combined paths and resets to that absolute path.  \\n  \\n Zero-length strings are omitted from the combined path.  \\n  \\n If `path1` is not a drive reference (that is, \\\"C:\\\" or \\\"D:\\\") and does not end with a valid separator character as defined in <xref:System.IO.Path.DirectorySeparatorChar>, <xref:System.IO.Path.AltDirectorySeparatorChar>, or <xref:System.IO.Path.VolumeSeparatorChar>, <xref:System.IO.Path.DirectorySeparatorChar> is appended to `path1` before concatenation.  \\n  \\n If `path2` does not include a root (for example, if `path2` does not start with a separator character or a drive specification), the result is a concatenation of the two paths, with an intervening separator character. If `path2` includes a root, `path2` is returned.  \\n  \\n The parameters are not parsed if they have white space. Therefore, if `path2` includes white space (for example, \\\" \\\\file.txt \\\"), the <xref:System.IO.Path.Combine%2A> method appends `path2` to `path1`.  \\n  \\n Not all invalid characters for directory and file names are interpreted as unacceptable by the `Combine` method, because you can use these characters for search wildcard characters. For example, while `Path.Combine(\\\"c:\\\\\\\\\\\", \\\"*.txt\\\")` might be invalid if you were to create a file from it, it is valid as a search string. It is therefore successfully interpreted by the `Combine` method.\"\n  example:\n  - \"The following example combines three paths.  \\n  \\n [!code-csharp[System.IO.Path.Combine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.path.combine/cs/program.cs#1)]\\n [!code-vb[System.IO.Path.Combine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.path.combine/vb/program.vb#1)]\"\n  syntax:\n    content: public static string Combine (string path1, string path2, string path3);\n    parameters:\n    - id: path1\n      type: System.String\n      description: The first path to combine.\n    - id: path2\n      type: System.String\n      description: The second path to combine.\n    - id: path3\n      type: System.String\n      description: The third path to combine.\n    return:\n      type: System.String\n      description: The combined paths.\n  overload: System.IO.Path.Combine*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>path1</code>, <code>path2</code>, or <code>path3</code> contains one or more of the invalid characters defined in <xref href=\"System.IO.Path.GetInvalidPathChars\"></xref>.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>path1</code>, <code>path2</code>, or <code>path3</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Path.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Path.Combine(System.String,System.String,System.String,System.String)\n  commentId: M:System.IO.Path.Combine(System.String,System.String,System.String,System.String)\n  id: Combine(System.String,System.String,System.String,System.String)\n  parent: System.IO.Path\n  langs:\n  - csharp\n  name: Combine(String, String, String, String)\n  nameWithType: Path.Combine(String, String, String, String)\n  fullName: Path.Combine(String, String, String, String)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Combines four strings into a path.\n  remarks: \"`path1` should be an absolute path (for example, \\\"d:\\\\archives\\\" or \\\"\\\\\\\\\\\\archives\\\\public\\\").If one of the subsequent paths is also an absolute path, the combine operation discards all previously combined paths and resets to that absolute path.  \\n  \\n Zero-length strings are omitted from the combined path.  \\n  \\n If `path1` is not a drive reference (that is, \\\"C:\\\" or \\\"D:\\\") and does not end with a valid separator character as defined in <xref:System.IO.Path.DirectorySeparatorChar>, <xref:System.IO.Path.AltDirectorySeparatorChar>, or <xref:System.IO.Path.VolumeSeparatorChar>, <xref:System.IO.Path.DirectorySeparatorChar> is appended to `path1` before concatenation.  \\n  \\n If `path2` does not include a root (for example, if `path2` does not start with a separator character or a drive specification), the result is a concatenation of the two paths, with an intervening separator character. If `path2` includes a root, `path2` is returned.  \\n  \\n The parameters are not parsed if they have white space. Therefore, if `path2` includes white space (for example, \\\" \\\\file.txt \\\"), the <xref:System.IO.Path.Combine%2A> method appends `path2` to `path1`.  \\n  \\n Not all invalid characters for directory and file names are interpreted as unacceptable by the `Combine` method, because you can use these characters for search wildcard characters. For example, while `Path.Combine(\\\"c:\\\\\\\\\\\", \\\"*.txt\\\")` might be invalid if you were to create a file from it, it is valid as a search string. It is therefore successfully interpreted by the `Combine` method.\"\n  example:\n  - \"The following example combines four paths.  \\n  \\n [!code-csharp[System.IO.Path.Combine#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.path.combine/cs/program.cs#2)]\\n [!code-vb[System.IO.Path.Combine#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.path.combine/vb/program.vb#2)]\"\n  syntax:\n    content: public static string Combine (string path1, string path2, string path3, string path4);\n    parameters:\n    - id: path1\n      type: System.String\n      description: The first path to combine.\n    - id: path2\n      type: System.String\n      description: The second path to combine.\n    - id: path3\n      type: System.String\n      description: The third path to combine.\n    - id: path4\n      type: System.String\n      description: The fourth path to combine.\n    return:\n      type: System.String\n      description: The combined paths.\n  overload: System.IO.Path.Combine*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>path1</code>, <code>path2</code>, <code>path3</code>, or <code>path4</code> contains one or more of the invalid characters defined in <xref href=\"System.IO.Path.GetInvalidPathChars\"></xref>.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>path1</code>, <code>path2</code>, <code>path3</code>, or <code>path4</code> is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Path.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Path.DirectorySeparatorChar\n  commentId: F:System.IO.Path.DirectorySeparatorChar\n  id: DirectorySeparatorChar\n  parent: System.IO.Path\n  langs:\n  - csharp\n  name: DirectorySeparatorChar\n  nameWithType: Path.DirectorySeparatorChar\n  fullName: Path.DirectorySeparatorChar\n  type: Field\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.IO\n  summary: Provides a platform-specific character used to separate directory levels in a path string that reflects a hierarchical file system organization.\n  remarks: The character stored in this field cannot be in <xref:System.IO.Path.InvalidPathChars>. <xref:System.IO.Path.AltDirectorySeparatorChar> and `DirectorySeparatorChar` are both valid for separating directory levels in a path string.\n  example:\n  - \"The following code example demonstrates the use of the `DirectorySeparatorChar` field.  \\n  \\n [!code-cpp[System.IO.Path Members#13](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#13)]\\n [!code-csharp[System.IO.Path Members#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#13)]\\n [!code-vb[System.IO.Path Members#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#13)]\"\n  syntax:\n    content: public static readonly char DirectorySeparatorChar;\n    return:\n      type: System.Char\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Path.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Path.GetDirectoryName(System.String)\n  commentId: M:System.IO.Path.GetDirectoryName(System.String)\n  id: GetDirectoryName(System.String)\n  parent: System.IO.Path\n  langs:\n  - csharp\n  name: GetDirectoryName(String)\n  nameWithType: Path.GetDirectoryName(String)\n  fullName: Path.GetDirectoryName(String)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.IO\n  summary: Returns the directory information for the specified path string.\n  remarks: \"In most cases, the string returned by this method consists of all characters in the path up to but not including the last <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>. If the path consists of a root directory, such as \\\"c:\\\\\\\\\\\", null is returned. Note that this method does not support paths using \\\"file:\\\". Because the returned path does not include the <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, passing the returned path back into the <xref:System.IO.Path.GetDirectoryName%2A> method will result in the truncation of one folder level per subsequent call on the result string. For example, passing the path \\\"C:\\\\Directory\\\\SubDirectory\\\\test.txt\\\" into the <xref:System.IO.Path.GetDirectoryName%2A> method will return \\\"C:\\\\Directory\\\\SubDirectory\\\". Passing that string, \\\"C:\\\\Directory\\\\SubDirectory\\\", into <xref:System.IO.Path.GetDirectoryName%2A> will result in \\\"C:\\\\Directory\\\".  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  example:\n  - \"The following code example demonstrates using the `GetDirectoryName` method on a Windows-based desktop platform.  \\n  \\n [!code-cpp[System.IO.Path Members#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#3)]\\n [!code-csharp[System.IO.Path Members#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#3)]\\n [!code-vb[System.IO.Path Members#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#3)]\"\n  syntax:\n    content: public static string GetDirectoryName (string path);\n    parameters:\n    - id: path\n      type: System.String\n      description: The path of a file or directory.\n    return:\n      type: System.String\n      description: Directory information for <code>path</code>, or `null` if <code>path</code> denotes a root directory or is null. Returns <xref href=\"System.String.Empty\"></xref> if <code>path</code> does not contain directory information.\n  overload: System.IO.Path.GetDirectoryName*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>path</code> parameter contains invalid characters, is empty, or contains only white spaces.\n  - type: System.IO.PathTooLongException\n    commentId: T:System.IO.PathTooLongException\n    description: \"<block subset=\\\"none\\\" type=\\\"note\\\">\\n      <p>  \\n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\\\"System.IO.IOException\\\"></xref>, instead.  \\n  \\n</p>\\n    </block>  \\n  \\n The <code>path</code> parameter is longer than the system-defined maximum length.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Path.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Path.GetExtension(System.String)\n  commentId: M:System.IO.Path.GetExtension(System.String)\n  id: GetExtension(System.String)\n  parent: System.IO.Path\n  langs:\n  - csharp\n  name: GetExtension(String)\n  nameWithType: Path.GetExtension(String)\n  fullName: Path.GetExtension(String)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.IO\n  summary: Returns the extension of the specified path string.\n  remarks: \"The extension of `path` is obtained by searching `path` for a period (.), starting with the last character in path and continuing toward the start of path. If a period is found before a <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar> character, the returned string contains the period and the characters after it; otherwise, <xref:System.String.Empty> is returned.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  example:\n  - \"The following code example demonstrates using the `GetExtension` method on a Windows-based desktop platform.  \\n  \\n [!code-cpp[System.IO.Path Members#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#4)]\\n [!code-csharp[System.IO.Path Members#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#4)]\\n [!code-vb[System.IO.Path Members#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#4)]\"\n  syntax:\n    content: public static string GetExtension (string path);\n    parameters:\n    - id: path\n      type: System.String\n      description: The path string from which to get the extension.\n    return:\n      type: System.String\n      description: The extension of the specified path (including the period \".\"), or `null`, or <xref href=\"System.String.Empty\"></xref>. If <code>path</code> is `null`, <xref href=\"System.IO.Path.GetExtension(System.String)\"></xref> returns `null`. If <code>path</code> does not have extension information, <xref href=\"System.IO.Path.GetExtension(System.String)\"></xref> returns <xref href=\"System.String.Empty\"></xref>.\n  overload: System.IO.Path.GetExtension*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>path</code> contains one or more of the invalid characters defined in <xref href=\"System.IO.Path.GetInvalidPathChars\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Path.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Path.GetFileName(System.String)\n  commentId: M:System.IO.Path.GetFileName(System.String)\n  id: GetFileName(System.String)\n  parent: System.IO.Path\n  langs:\n  - csharp\n  name: GetFileName(String)\n  nameWithType: Path.GetFileName(String)\n  fullName: Path.GetFileName(String)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.IO\n  summary: Returns the file name and extension of the specified path string.\n  remarks: \"The returned value is `null` if the file path is `null`.  \\n  \\n The separator characters used to determine the start of the file name are <xref:System.IO.Path.DirectorySeparatorChar> and <xref:System.IO.Path.AltDirectorySeparatorChar>.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  example:\n  - \"The following code example demonstrates the behavior of the `GetFileName` method on a Windows-based desktop platform.  \\n  \\n [!code-cpp[System.IO.Path Members#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#5)]\\n [!code-csharp[System.IO.Path Members#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#5)]\\n [!code-vb[System.IO.Path Members#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#5)]\"\n  syntax:\n    content: public static string GetFileName (string path);\n    parameters:\n    - id: path\n      type: System.String\n      description: The path string from which to obtain the file name and extension.\n    return:\n      type: System.String\n      description: The characters after the last directory character in <code>path</code>. If the last character of <code>path</code> is a directory or volume separator character, this method returns <xref href=\"System.String.Empty\"></xref>. If <code>path</code> is `null`, this method returns `null`.\n  overload: System.IO.Path.GetFileName*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>path</code> contains one or more of the invalid characters defined in <xref href=\"System.IO.Path.GetInvalidPathChars\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Path.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Path.GetFileNameWithoutExtension(System.String)\n  commentId: M:System.IO.Path.GetFileNameWithoutExtension(System.String)\n  id: GetFileNameWithoutExtension(System.String)\n  parent: System.IO.Path\n  langs:\n  - csharp\n  name: GetFileNameWithoutExtension(String)\n  nameWithType: Path.GetFileNameWithoutExtension(String)\n  fullName: Path.GetFileNameWithoutExtension(String)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.IO\n  summary: Returns the file name of the specified path string without the extension.\n  remarks: \"This method does not verify that the path or file name exists.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  example:\n  - \"The following code example demonstrates a use of the `GetFileNameWithoutExtension` method.  \\n  \\n [!code-cpp[System.IO.Path Members#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#6)]\\n [!code-csharp[System.IO.Path Members#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#6)]\\n [!code-vb[System.IO.Path Members#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#6)]\"\n  syntax:\n    content: public static string GetFileNameWithoutExtension (string path);\n    parameters:\n    - id: path\n      type: System.String\n      description: The path of the file.\n    return:\n      type: System.String\n      description: The string returned by <xref href=\"System.IO.Path.GetFileName(System.String)\"></xref>, minus the last period (.) and all characters following it.\n  overload: System.IO.Path.GetFileNameWithoutExtension*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>path</code> contains one or more of the invalid characters defined in <xref href=\"System.IO.Path.GetInvalidPathChars\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Path.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Path.GetFullPath(System.String)\n  commentId: M:System.IO.Path.GetFullPath(System.String)\n  id: GetFullPath(System.String)\n  parent: System.IO.Path\n  langs:\n  - csharp\n  name: GetFullPath(String)\n  nameWithType: Path.GetFullPath(String)\n  fullName: Path.GetFullPath(String)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.IO\n  summary: Returns the absolute path for the specified path string.\n  remarks: \"The .NET Framework does not support direct access to physical disks through paths that are device names, such as \\\"\\\\\\\\\\\\\\\\.\\\\PHYSICALDRIVE0 \\\".  \\n  \\n The absolute path includes all information required to locate a file or directory on a system.  \\n  \\n The file or directory specified by `path` is not required to exist. For example, if c:\\\\temp\\\\newdir is the current directory, calling `GetFullPath` on a file name such as test.txt returns c:\\\\temp\\\\newdir\\\\test.txt. The file need not exist.  \\n  \\n However, if `path` does exist, the caller must have permission to obtain path information for `path`. Note that unlike most members of the <xref:System.IO.Path> class, this method accesses the file system.  \\n  \\n This method uses current directory and current volume information to fully qualify `path`. If you specify a file name only in `path`, `GetFullPath` returns the fully qualified path of the current directory.  \\n  \\n If you pass in a short file name, it is expanded to a long file name.  \\n  \\n If a path contains no significant characters it is invalid unless it contains one or more \\\".\\\" characters followed by any number of spaces, then it will be parsed as either \\\".\\\" or \\\"..\\\".  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  example:\n  - \"The following code example demonstrates the `GetFullPath` method on a Windows-based desktop platform.  \\n  \\n [!code-cpp[System.IO.Path Members#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#7)]\\n [!code-csharp[System.IO.Path Members#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#7)]\\n [!code-vb[System.IO.Path Members#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#7)]\"\n  syntax:\n    content: public static string GetFullPath (string path);\n    parameters:\n    - id: path\n      type: System.String\n      description: The file or directory for which to obtain absolute path information.\n    return:\n      type: System.String\n      description: The fully qualified location of <code>path</code>, such as \"C:\\MyFile.txt\".\n  overload: System.IO.Path.GetFullPath*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>path</code> is a zero-length string, contains only white space, or contains one or more of the invalid characters defined in <xref href=\\\"System.IO.Path.GetInvalidPathChars\\\"></xref>.  \\n  \\n -or-  \\n  \\n The system could not retrieve the absolute path.\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permissions.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>path</code> is `null`.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>path</code> contains a colon (\":\") that is not part of a volume identifier (for example, \"c:\\\\\").\n  - type: System.IO.PathTooLongException\n    commentId: T:System.IO.PathTooLongException\n    description: The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Path.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Path.GetInvalidFileNameChars\n  commentId: M:System.IO.Path.GetInvalidFileNameChars\n  id: GetInvalidFileNameChars\n  parent: System.IO.Path\n  langs:\n  - csharp\n  name: GetInvalidFileNameChars()\n  nameWithType: Path.GetInvalidFileNameChars()\n  fullName: Path.GetInvalidFileNameChars()\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.IO\n  summary: Gets an array containing the characters that are not allowed in file names.\n  remarks: The array returned from this method is not guaranteed to contain the complete set of characters that are invalid in file and directory names. The full set of invalid characters can vary by file system. For example, on Windows-based desktop platforms, invalid path characters might include ASCII/Unicode characters 1 through 31, as well as quote (\"), less than (\\<), greater than (>), pipe (&#124;), backspace (\\b), null (\\0) and tab (\\t).\n  example:\n  - \"The following code example demonstrates the <xref:System.IO.Path.GetInvalidFileNameChars%2A> method and the <xref:System.IO.Path.GetInvalidPathChars%2A> method to retrieve invalid characters.  \\n  \\n [!code-cpp[IO.Path.GetInvalidFile-PathChars#1](~/samples/snippets/cpp/VS_Snippets_CLR/IO.Path.GetInvalidFile-PathChars/cpp/example.cpp#1)]\\n [!code-csharp[IO.Path.GetInvalidFile-PathChars#1](~/samples/snippets/csharp/VS_Snippets_CLR/IO.Path.GetInvalidFile-PathChars/CS/example.cs#1)]\\n [!code-vb[IO.Path.GetInvalidFile-PathChars#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IO.Path.GetInvalidFile-PathChars/VB/example.vb#1)]\"\n  syntax:\n    content: public static char[] GetInvalidFileNameChars ();\n    parameters: []\n    return:\n      type: System.Char[]\n      description: An array containing the characters that are not allowed in file names.\n  overload: System.IO.Path.GetInvalidFileNameChars*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Path.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Path.GetInvalidPathChars\n  commentId: M:System.IO.Path.GetInvalidPathChars\n  id: GetInvalidPathChars\n  parent: System.IO.Path\n  langs:\n  - csharp\n  name: GetInvalidPathChars()\n  nameWithType: Path.GetInvalidPathChars()\n  fullName: Path.GetInvalidPathChars()\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.IO\n  summary: Gets an array containing the characters that are not allowed in path names.\n  remarks: The array returned from this method is not guaranteed to contain the complete set of characters that are invalid in file and directory names. The full set of invalid characters can vary by file system. For example, on Windows-based desktop platforms, invalid path characters might include ASCII/Unicode characters 1 through 31, as well as quote (\"), less than (\\<), greater than (>), pipe (&#124;), backspace (\\b), null (\\0) and tab (\\t).\n  example:\n  - \"The following code example demonstrates the <xref:System.IO.Path.GetInvalidFileNameChars%2A> method and the <xref:System.IO.Path.GetInvalidPathChars%2A> method to retrieve invalid characters.  \\n  \\n [!code-cpp[IO.Path.GetInvalidFile-PathChars#1](~/samples/snippets/cpp/VS_Snippets_CLR/IO.Path.GetInvalidFile-PathChars/cpp/example.cpp#1)]\\n [!code-csharp[IO.Path.GetInvalidFile-PathChars#1](~/samples/snippets/csharp/VS_Snippets_CLR/IO.Path.GetInvalidFile-PathChars/CS/example.cs#1)]\\n [!code-vb[IO.Path.GetInvalidFile-PathChars#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IO.Path.GetInvalidFile-PathChars/VB/example.vb#1)]\"\n  syntax:\n    content: public static char[] GetInvalidPathChars ();\n    parameters: []\n    return:\n      type: System.Char[]\n      description: An array containing the characters that are not allowed in path names.\n  overload: System.IO.Path.GetInvalidPathChars*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Path.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Path.GetPathRoot(System.String)\n  commentId: M:System.IO.Path.GetPathRoot(System.String)\n  id: GetPathRoot(System.String)\n  parent: System.IO.Path\n  langs:\n  - csharp\n  name: GetPathRoot(String)\n  nameWithType: Path.GetPathRoot(String)\n  fullName: Path.GetPathRoot(String)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.IO\n  summary: Gets the root directory information of the specified path.\n  remarks: \"This method does not verify that the path or file name exists.  \\n  \\n Possible patterns for the string returned by this method are as follows:  \\n  \\n-   An empty string (`path` specified a relative path on the current drive or volume).  \\n  \\n-   \\\"/\\\" (`path` specified an absolute path on the current drive).  \\n  \\n-   \\\"X:\\\" (`path` specified a relative path on a drive, where X represents a drive or volume letter).  \\n  \\n-   \\\"X:/\\\" (`path` specified an absolute path on a given drive).  \\n  \\n-   \\\"\\\\\\\\\\\\ComputerName\\\\SharedFolder\\\" (a UNC path).  \\n  \\n The .NET Framework does not support direct access to physical disks through paths that are device names, such as \\\"\\\\\\\\\\\\\\\\.\\\\PHYSICALDRIVE0 \\\".  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  example:\n  - \"The following code example demonstrates a use of the `GetPathRoot` method.  \\n  \\n [!code-cpp[System.IO.Path Members#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#8)]\\n [!code-csharp[System.IO.Path Members#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#8)]\\n [!code-vb[System.IO.Path Members#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#8)]\"\n  syntax:\n    content: public static string GetPathRoot (string path);\n    parameters:\n    - id: path\n      type: System.String\n      description: The path from which to obtain root directory information.\n    return:\n      type: System.String\n      description: The root directory of <code>path</code>, such as \"C:\\\\\", or `null` if <code>path</code> is `null`, or an empty string if <code>path</code> does not contain root directory information.\n  overload: System.IO.Path.GetPathRoot*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>path</code> contains one or more of the invalid characters defined in <xref href=\\\"System.IO.Path.GetInvalidPathChars\\\"></xref>.  \\n  \\n -or-  \\n  \\n <xref href=\\\"System.String.Empty\\\"></xref> was passed to <code>path</code>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Path.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Path.GetRandomFileName\n  commentId: M:System.IO.Path.GetRandomFileName\n  id: GetRandomFileName\n  parent: System.IO.Path\n  langs:\n  - csharp\n  name: GetRandomFileName()\n  nameWithType: Path.GetRandomFileName()\n  fullName: Path.GetRandomFileName()\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.IO\n  summary: Returns a random folder name or file name.\n  remarks: The <xref:System.IO.Path.GetRandomFileName%2A> method returns a cryptographically strong, random string that can be used as either a folder name or a file name. Unlike <xref:System.IO.Path.GetTempFileName%2A>, <xref:System.IO.Path.GetRandomFileName%2A> does not create a file. When the security of your file system is paramount, this method should be used instead of <xref:System.IO.Path.GetTempFileName%2A>.\n  example:\n  - \"The following example show output from the <xref:System.IO.Path.GetRandomFileName%2A> method.  \\n  \\n [!code-csharp[System.IO.Path Members#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers20.cs#20)]\\n [!code-vb[System.IO.Path Members#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers20.vb#20)]\"\n  syntax:\n    content: public static string GetRandomFileName ();\n    parameters: []\n    return:\n      type: System.String\n      description: A random folder name or file name.\n  overload: System.IO.Path.GetRandomFileName*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Path.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Path.GetRelativePath(System.String,System.String)\n  commentId: M:System.IO.Path.GetRelativePath(System.String,System.String)\n  id: GetRelativePath(System.String,System.String)\n  parent: System.IO.Path\n  langs:\n  - csharp\n  name: GetRelativePath(String, String)\n  nameWithType: Path.GetRelativePath(String, String)\n  fullName: Path.GetRelativePath(String, String)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System.IO\n  syntax:\n    content: public static string GetRelativePath (string relativeTo, string path);\n    parameters:\n    - id: relativeTo\n      type: System.String\n      description: ''\n    - id: path\n      type: System.String\n      description: ''\n    return:\n      type: System.String\n      description: ''\n  overload: System.IO.Path.GetRelativePath*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Path.xml\n- uid: System.IO.Path.GetTempFileName\n  commentId: M:System.IO.Path.GetTempFileName\n  id: GetTempFileName\n  parent: System.IO.Path\n  langs:\n  - csharp\n  name: GetTempFileName()\n  nameWithType: Path.GetTempFileName()\n  fullName: Path.GetTempFileName()\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.IO\n  summary: Creates a uniquely named, zero-byte temporary file on disk and returns the full path of that file.\n  remarks: \"This method creates a temporary file with a .TMP file extension. The temporary file is created within the user’s temporary folder, which is the path returned by the <xref:System.IO.Path.GetTempPath%2A> method.  \\n  \\n The <xref:System.IO.Path.GetTempFileName%2A> method will raise an <xref:System.IO.IOException> if it is used to create more than 65535 files without deleting previous temporary files.  \\n  \\n The <xref:System.IO.Path.GetTempFileName%2A> method will raise an <xref:System.IO.IOException> if no unique temporary file name is available. To resolve this error, delete all unneeded temporary files.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  syntax:\n    content: public static string GetTempFileName ();\n    parameters: []\n    return:\n      type: System.String\n      description: The full path of the temporary file.\n  overload: System.IO.Path.GetTempFileName*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"An I/O error occurs, such as no unique temporary file name is available.  \\n  \\n \\\\- or -  \\n  \\n This method was unable to create a temporary file.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Path.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Path.GetTempPath\n  commentId: M:System.IO.Path.GetTempPath\n  id: GetTempPath\n  parent: System.IO.Path\n  langs:\n  - csharp\n  name: GetTempPath()\n  nameWithType: Path.GetTempPath()\n  fullName: Path.GetTempPath()\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.IO\n  summary: Returns the path of the current user's temporary folder.\n  remarks: \"This method checks for the existence of environment variables in the following order and uses the first path found:  \\n  \\n1.  The path specified by the TMP environment variable.  \\n  \\n2.  The path specified by the TEMP environment variable.  \\n  \\n3.  The path specified by the USERPROFILE environment variable.  \\n  \\n4.  The Windows directory.\"\n  example:\n  - \"The following code shows how to call the <xref:System.IO.Path.GetTempPath%2A> method.  \\n  \\n```vb  \\nresult As String = Path.GetTempPath()  \\nConsole.WriteLine(result)  \\n```  \\n  \\n```csharp  \\nstring result = Path.GetTempPath();  \\nConsole.WriteLine(result);  \\n```  \\n  \\n This example produces output similar to the following.  \\n  \\n```  \\nC:\\\\Users\\\\UserName\\\\AppData\\\\Local\\\\Temp\\\\  \\n```\"\n  syntax:\n    content: public static string GetTempPath ();\n    parameters: []\n    return:\n      type: System.String\n      description: The path to the temporary folder, ending with a backslash.\n  overload: System.IO.Path.GetTempPath*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permissions.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Path.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Path.HasExtension(System.String)\n  commentId: M:System.IO.Path.HasExtension(System.String)\n  id: HasExtension(System.String)\n  parent: System.IO.Path\n  langs:\n  - csharp\n  name: HasExtension(String)\n  nameWithType: Path.HasExtension(String)\n  fullName: Path.HasExtension(String)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.IO\n  summary: Determines whether a path includes a file name extension.\n  remarks: \"Starting from the end of `path`, this method searches for a period (.) followed by at least one character. If this pattern is found before a <xref:System.IO.Path.DirectorySeparatorChar>, <xref:System.IO.Path.AltDirectorySeparatorChar>, or <xref:System.IO.Path.VolumeSeparatorChar> character is encountered, this method returns `true`.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  example:\n  - \"The following code example demonstrates the use of the `HasExtension` method.  \\n  \\n [!code-cpp[System.IO.Path Members#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#11)]\\n [!code-csharp[System.IO.Path Members#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#11)]\\n [!code-vb[System.IO.Path Members#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#11)]\"\n  syntax:\n    content: public static bool HasExtension (string path);\n    parameters:\n    - id: path\n      type: System.String\n      description: The path to search for an extension.\n    return:\n      type: System.Boolean\n      description: '`true` if the characters that follow the last directory separator (\\\\\\ or /) or volume separator (:) in the path include a period (.) followed by one or more characters; otherwise, `false`.'\n  overload: System.IO.Path.HasExtension*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>path</code> contains one or more of the invalid characters defined in <xref href=\"System.IO.Path.GetInvalidPathChars\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Path.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Path.InvalidPathChars\n  commentId: F:System.IO.Path.InvalidPathChars\n  id: InvalidPathChars\n  parent: System.IO.Path\n  langs:\n  - csharp\n  name: InvalidPathChars\n  nameWithType: Path.InvalidPathChars\n  fullName: Path.InvalidPathChars\n  type: Field\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Provides a platform-specific array of characters that cannot be specified in path string arguments passed to members of the <xref href=\"System.IO.Path\"></xref> class.\n  remarks: \"The array returned from this method is not guaranteed to contain the complete set of characters that are invalid in file and directory names. The full set of invalid characters can vary by file system. For example, on Windows-based desktop platforms, invalid path characters might include ASCII/Unicode characters 1 through 31, as well as quote (\\\"), less than (\\\\<), greater than (>), pipe (&#124;), backspace (\\\\b), null (\\\\0) and tab (\\\\t).  \\n  \\n> [!CAUTION]\\n>  Do not use<xref:System.IO.Path.InvalidPathChars> if you think your code might execute in the same application domain as untrusted code. <xref:System.IO.Path.InvalidPathChars> is an array, so its elements can be overwritten. If untrusted code overwrites elements of <xref:System.IO.Path.InvalidPathChars>, it might cause your code to malfunction in ways that could be exploited.\"\n  example:\n  - \"The following code example demonstrates the use of the `InvalidPathChars` property.  \\n  \\n [!code-cpp[System.IO.Path Members#13](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#13)]\\n [!code-csharp[System.IO.Path Members#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#13)]\\n [!code-vb[System.IO.Path Members#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#13)]\"\n  syntax:\n    content: >-\n      [System.Obsolete(\"see GetInvalidPathChars and GetInvalidFileNameChars methods.\")]\n\n      public static readonly char[] InvalidPathChars;\n    return:\n      type: System.Char[]\n      description: ''\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Path.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Path.IsPathRooted(System.String)\n  commentId: M:System.IO.Path.IsPathRooted(System.String)\n  id: IsPathRooted(System.String)\n  parent: System.IO.Path\n  langs:\n  - csharp\n  name: IsPathRooted(String)\n  nameWithType: Path.IsPathRooted(String)\n  fullName: Path.IsPathRooted(String)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.IO\n  summary: Gets a value indicating whether the specified path string contains a root.\n  remarks: \"The <xref:System.IO.Path.IsPathRooted%2A> method returns `true` if the first character is a directory separator character such as \\\"\\\\\\\\\\\", or if the path starts with a drive letter and colon (:). For example, it returns `true` for `path` strings such as \\\"\\\\\\\\\\\\MyDir\\\\\\\\\\\\MyFile.txt\\\", \\\"C:\\\\\\\\\\\\MyDir\\\", or \\\"C:MyDir\\\". It returns `false` for `path` strings such as \\\"MyDir\\\".  \\n  \\n This method does not verify that the path or file name exists.  \\n  \\n For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  example:\n  - \"The following code example demonstrates how the `IsPathRooted` method can be used to test three strings.  \\n  \\n [!code-cpp[System.IO.Path Members#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#12)]\\n [!code-csharp[System.IO.Path Members#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#12)]\\n [!code-vb[System.IO.Path Members#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#12)]\"\n  syntax:\n    content: public static bool IsPathRooted (string path);\n    parameters:\n    - id: path\n      type: System.String\n      description: The path to test.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>path</code> contains a root; otherwise, `false`.'\n  overload: System.IO.Path.IsPathRooted*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>path</code> contains one or more of the invalid characters defined in <xref href=\"System.IO.Path.GetInvalidPathChars\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Path.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Path.PathSeparator\n  commentId: F:System.IO.Path.PathSeparator\n  id: PathSeparator\n  parent: System.IO.Path\n  langs:\n  - csharp\n  name: PathSeparator\n  nameWithType: Path.PathSeparator\n  fullName: Path.PathSeparator\n  type: Field\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.IO\n  summary: A platform-specific separator character used to separate path strings in environment variables.\n  remarks: On Windows-based desktop platforms, the value of this field is the semicolon (;) by default, but might vary on other platforms.\n  example:\n  - \"The following code example demonstrates the use of the `PathSeparator` field.  \\n  \\n [!code-cpp[System.IO.Path Members#13](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#13)]\\n [!code-csharp[System.IO.Path Members#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#13)]\\n [!code-vb[System.IO.Path Members#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#13)]\"\n  syntax:\n    content: public static readonly char PathSeparator;\n    return:\n      type: System.Char\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Path.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.Path.VolumeSeparatorChar\n  commentId: F:System.IO.Path.VolumeSeparatorChar\n  id: VolumeSeparatorChar\n  parent: System.IO.Path\n  langs:\n  - csharp\n  name: VolumeSeparatorChar\n  nameWithType: Path.VolumeSeparatorChar\n  fullName: Path.VolumeSeparatorChar\n  type: Field\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.IO\n  summary: Provides a platform-specific volume separator character.\n  remarks: The value of this field is a colon (:) on Windows and Macintosh, and a slash (/) on UNIX operating systems. This is most useful for parsing paths such as \"c:\\windows\" or \"MacVolume:System Folder\".\n  example:\n  - \"The following code example demonstrates the use of the `VolumeSeparatorChar` field.  \\n  \\n [!code-cpp[System.IO.Path Members#13](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#13)]\\n [!code-csharp[System.IO.Path Members#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#13)]\\n [!code-vb[System.IO.Path Members#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#13)]\"\n  syntax:\n    content: public static readonly char VolumeSeparatorChar;\n    return:\n      type: System.Char\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Path.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.IO.PathTooLongException\n  parent: System.IO\n  isExternal: false\n  name: PathTooLongException\n  nameWithType: PathTooLongException\n  fullName: System.IO.PathTooLongException\n- uid: System.Security.SecurityException\n  parent: System.Security\n  isExternal: false\n  name: SecurityException\n  nameWithType: SecurityException\n  fullName: System.Security.SecurityException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  nameWithType: NotSupportedException\n  fullName: System.NotSupportedException\n- uid: System.IO.IOException\n  parent: System.IO\n  isExternal: false\n  name: IOException\n  nameWithType: IOException\n  fullName: System.IO.IOException\n- uid: System.IO.Path.AltDirectorySeparatorChar\n  parent: System.IO.Path\n  isExternal: false\n  name: AltDirectorySeparatorChar\n  nameWithType: Path.AltDirectorySeparatorChar\n  fullName: Path.AltDirectorySeparatorChar\n- uid: System.Char\n  parent: System\n  isExternal: false\n  name: Char\n  nameWithType: Char\n  fullName: System.Char\n- uid: System.IO.Path.ChangeExtension(System.String,System.String)\n  parent: System.IO.Path\n  isExternal: false\n  name: ChangeExtension(String, String)\n  nameWithType: Path.ChangeExtension(String, String)\n  fullName: Path.ChangeExtension(String, String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.IO.Path.Combine(System.String[])\n  parent: System.IO.Path\n  isExternal: false\n  name: Combine(String[])\n  nameWithType: Path.Combine(String[])\n  fullName: Path.Combine(String[])\n- uid: System.String[]\n  parent: System\n  isExternal: false\n  name: String[]\n  nameWithType: String[]\n  fullName: System.String[]\n  spec.csharp:\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: System.String\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.IO.Path.Combine(System.String,System.String)\n  parent: System.IO.Path\n  isExternal: false\n  name: Combine(String, String)\n  nameWithType: Path.Combine(String, String)\n  fullName: Path.Combine(String, String)\n- uid: System.IO.Path.Combine(System.String,System.String,System.String)\n  parent: System.IO.Path\n  isExternal: false\n  name: Combine(String, String, String)\n  nameWithType: Path.Combine(String, String, String)\n  fullName: Path.Combine(String, String, String)\n- uid: System.IO.Path.Combine(System.String,System.String,System.String,System.String)\n  parent: System.IO.Path\n  isExternal: false\n  name: Combine(String, String, String, String)\n  nameWithType: Path.Combine(String, String, String, String)\n  fullName: Path.Combine(String, String, String, String)\n- uid: System.IO.Path.DirectorySeparatorChar\n  parent: System.IO.Path\n  isExternal: false\n  name: DirectorySeparatorChar\n  nameWithType: Path.DirectorySeparatorChar\n  fullName: Path.DirectorySeparatorChar\n- uid: System.IO.Path.GetDirectoryName(System.String)\n  parent: System.IO.Path\n  isExternal: false\n  name: GetDirectoryName(String)\n  nameWithType: Path.GetDirectoryName(String)\n  fullName: Path.GetDirectoryName(String)\n- uid: System.IO.Path.GetExtension(System.String)\n  parent: System.IO.Path\n  isExternal: false\n  name: GetExtension(String)\n  nameWithType: Path.GetExtension(String)\n  fullName: Path.GetExtension(String)\n- uid: System.IO.Path.GetFileName(System.String)\n  parent: System.IO.Path\n  isExternal: false\n  name: GetFileName(String)\n  nameWithType: Path.GetFileName(String)\n  fullName: Path.GetFileName(String)\n- uid: System.IO.Path.GetFileNameWithoutExtension(System.String)\n  parent: System.IO.Path\n  isExternal: false\n  name: GetFileNameWithoutExtension(String)\n  nameWithType: Path.GetFileNameWithoutExtension(String)\n  fullName: Path.GetFileNameWithoutExtension(String)\n- uid: System.IO.Path.GetFullPath(System.String)\n  parent: System.IO.Path\n  isExternal: false\n  name: GetFullPath(String)\n  nameWithType: Path.GetFullPath(String)\n  fullName: Path.GetFullPath(String)\n- uid: System.IO.Path.GetInvalidFileNameChars\n  parent: System.IO.Path\n  isExternal: false\n  name: GetInvalidFileNameChars()\n  nameWithType: Path.GetInvalidFileNameChars()\n  fullName: Path.GetInvalidFileNameChars()\n- uid: System.Char[]\n  parent: System\n  isExternal: false\n  name: Char[]\n  nameWithType: Char[]\n  fullName: System.Char[]\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    nameWithType: Char\n    fullName: System.Char\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.IO.Path.GetInvalidPathChars\n  parent: System.IO.Path\n  isExternal: false\n  name: GetInvalidPathChars()\n  nameWithType: Path.GetInvalidPathChars()\n  fullName: Path.GetInvalidPathChars()\n- uid: System.IO.Path.GetPathRoot(System.String)\n  parent: System.IO.Path\n  isExternal: false\n  name: GetPathRoot(String)\n  nameWithType: Path.GetPathRoot(String)\n  fullName: Path.GetPathRoot(String)\n- uid: System.IO.Path.GetRandomFileName\n  parent: System.IO.Path\n  isExternal: false\n  name: GetRandomFileName()\n  nameWithType: Path.GetRandomFileName()\n  fullName: Path.GetRandomFileName()\n- uid: System.IO.Path.GetRelativePath(System.String,System.String)\n  parent: System.IO.Path\n  isExternal: false\n  name: GetRelativePath(String, String)\n  nameWithType: Path.GetRelativePath(String, String)\n  fullName: Path.GetRelativePath(String, String)\n- uid: System.IO.Path.GetTempFileName\n  parent: System.IO.Path\n  isExternal: false\n  name: GetTempFileName()\n  nameWithType: Path.GetTempFileName()\n  fullName: Path.GetTempFileName()\n- uid: System.IO.Path.GetTempPath\n  parent: System.IO.Path\n  isExternal: false\n  name: GetTempPath()\n  nameWithType: Path.GetTempPath()\n  fullName: Path.GetTempPath()\n- uid: System.IO.Path.HasExtension(System.String)\n  parent: System.IO.Path\n  isExternal: false\n  name: HasExtension(String)\n  nameWithType: Path.HasExtension(String)\n  fullName: Path.HasExtension(String)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.IO.Path.InvalidPathChars\n  parent: System.IO.Path\n  isExternal: false\n  name: InvalidPathChars\n  nameWithType: Path.InvalidPathChars\n  fullName: Path.InvalidPathChars\n- uid: System.IO.Path.IsPathRooted(System.String)\n  parent: System.IO.Path\n  isExternal: false\n  name: IsPathRooted(String)\n  nameWithType: Path.IsPathRooted(String)\n  fullName: Path.IsPathRooted(String)\n- uid: System.IO.Path.PathSeparator\n  parent: System.IO.Path\n  isExternal: false\n  name: PathSeparator\n  nameWithType: Path.PathSeparator\n  fullName: Path.PathSeparator\n- uid: System.IO.Path.VolumeSeparatorChar\n  parent: System.IO.Path\n  isExternal: false\n  name: VolumeSeparatorChar\n  nameWithType: Path.VolumeSeparatorChar\n  fullName: Path.VolumeSeparatorChar\n- uid: System.IO.Path.ChangeExtension*\n  parent: System.IO.Path\n  isExternal: false\n  name: ChangeExtension\n  nameWithType: Path.ChangeExtension\n  fullName: Path.ChangeExtension\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Path.xml\n- uid: System.IO.Path.Combine*\n  parent: System.IO.Path\n  isExternal: false\n  name: Combine\n  nameWithType: Path.Combine\n  fullName: Path.Combine\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Path.xml\n- uid: System.IO.Path.GetDirectoryName*\n  parent: System.IO.Path\n  isExternal: false\n  name: GetDirectoryName\n  nameWithType: Path.GetDirectoryName\n  fullName: Path.GetDirectoryName\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Path.xml\n- uid: System.IO.Path.GetExtension*\n  parent: System.IO.Path\n  isExternal: false\n  name: GetExtension\n  nameWithType: Path.GetExtension\n  fullName: Path.GetExtension\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Path.xml\n- uid: System.IO.Path.GetFileName*\n  parent: System.IO.Path\n  isExternal: false\n  name: GetFileName\n  nameWithType: Path.GetFileName\n  fullName: Path.GetFileName\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Path.xml\n- uid: System.IO.Path.GetFileNameWithoutExtension*\n  parent: System.IO.Path\n  isExternal: false\n  name: GetFileNameWithoutExtension\n  nameWithType: Path.GetFileNameWithoutExtension\n  fullName: Path.GetFileNameWithoutExtension\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Path.xml\n- uid: System.IO.Path.GetFullPath*\n  parent: System.IO.Path\n  isExternal: false\n  name: GetFullPath\n  nameWithType: Path.GetFullPath\n  fullName: Path.GetFullPath\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Path.xml\n- uid: System.IO.Path.GetInvalidFileNameChars*\n  parent: System.IO.Path\n  isExternal: false\n  name: GetInvalidFileNameChars\n  nameWithType: Path.GetInvalidFileNameChars\n  fullName: Path.GetInvalidFileNameChars\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Path.xml\n- uid: System.IO.Path.GetInvalidPathChars*\n  parent: System.IO.Path\n  isExternal: false\n  name: GetInvalidPathChars\n  nameWithType: Path.GetInvalidPathChars\n  fullName: Path.GetInvalidPathChars\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Path.xml\n- uid: System.IO.Path.GetPathRoot*\n  parent: System.IO.Path\n  isExternal: false\n  name: GetPathRoot\n  nameWithType: Path.GetPathRoot\n  fullName: Path.GetPathRoot\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Path.xml\n- uid: System.IO.Path.GetRandomFileName*\n  parent: System.IO.Path\n  isExternal: false\n  name: GetRandomFileName\n  nameWithType: Path.GetRandomFileName\n  fullName: Path.GetRandomFileName\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Path.xml\n- uid: System.IO.Path.GetRelativePath*\n  parent: System.IO.Path\n  isExternal: false\n  name: GetRelativePath\n  nameWithType: Path.GetRelativePath\n  fullName: Path.GetRelativePath\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Path.xml\n- uid: System.IO.Path.GetTempFileName*\n  parent: System.IO.Path\n  isExternal: false\n  name: GetTempFileName\n  nameWithType: Path.GetTempFileName\n  fullName: Path.GetTempFileName\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Path.xml\n- uid: System.IO.Path.GetTempPath*\n  parent: System.IO.Path\n  isExternal: false\n  name: GetTempPath\n  nameWithType: Path.GetTempPath\n  fullName: Path.GetTempPath\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Path.xml\n- uid: System.IO.Path.HasExtension*\n  parent: System.IO.Path\n  isExternal: false\n  name: HasExtension\n  nameWithType: Path.HasExtension\n  fullName: Path.HasExtension\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Path.xml\n- uid: System.IO.Path.IsPathRooted*\n  parent: System.IO.Path\n  isExternal: false\n  name: IsPathRooted\n  nameWithType: Path.IsPathRooted\n  fullName: Path.IsPathRooted\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/Path.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}