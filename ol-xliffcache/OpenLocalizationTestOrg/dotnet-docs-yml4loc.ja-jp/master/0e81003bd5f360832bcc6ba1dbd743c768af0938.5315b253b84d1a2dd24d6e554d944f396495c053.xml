{"nodes":[{"content":"Executes the islands on a dedicated worker thread. The worker thread's physical callstack then maps to the interpreter's virtual callstack.","nodes":[{"pos":[0,139],"content":"Executes the islands on a dedicated worker thread. The worker thread's physical callstack then maps to the interpreter's virtual callstack.","nodes":[{"content":"Executes the islands on a dedicated worker thread. The worker thread's physical callstack then maps to the interpreter's virtual callstack.","pos":[0,139],"nodes":[{"content":"Executes the islands on a dedicated worker thread.","pos":[0,50]},{"content":"The worker thread's physical callstack then maps to the interpreter's virtual callstack.","pos":[51,139]}]}]}],"pos":[696,836],"yaml":true},{"content":"Private entry point called from islands. Must be public so that the islands can invoke it. Called on debugger worker thread.","nodes":[{"pos":[0,124],"content":"Private entry point called from islands. Must be public so that the islands can invoke it. Called on debugger worker thread.","nodes":[{"content":"Private entry point called from islands. Must be public so that the islands can invoke it. Called on debugger worker thread.","pos":[0,124],"nodes":[{"content":"Private entry point called from islands.","pos":[0,40]},{"content":"Must be public so that the islands can invoke it.","pos":[41,90]},{"content":"Called on debugger worker thread.","pos":[91,124]}]}]}],"pos":[2536,2661],"yaml":true},{"content":"The thread calling the entry point.","nodes":[{"pos":[0,35],"content":"The thread calling the entry point.","nodes":[{"content":"The thread calling the entry point.","pos":[0,35]}]}],"pos":[2908,2944],"yaml":true},{"content":"Releases all resources used by the current instance of the <xref href=\"Microsoft.Build.Debugging.DebuggerManager.IslandThread\"></xref> class.","nodes":[{"pos":[0,141],"content":"Releases all resources used by the current instance of the <ph id=\"ph1\">&lt;xref href=\"Microsoft.Build.Debugging.DebuggerManager.IslandThread\"&gt;&lt;/xref&gt;</ph> class.","source":"Releases all resources used by the current instance of the <xref href=\"Microsoft.Build.Debugging.DebuggerManager.IslandThread\"></xref> class."}],"pos":[4115,4257],"yaml":true},{"content":"Call `Dispose` when you are finished using the <xref:Microsoft.Build.Debugging.DebuggerManager.IslandThread>. After calling `Dispose`, you must release all references to the <xref:Microsoft.Build.Debugging.DebuggerManager.IslandThread> so the garbage collector can reclaim the memory that it was using.  \n  \n For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  \n  \n> [!NOTE]\n>  Always call `Dispose` before you release your last reference to the <xref:Microsoft.Build.Debugging.DebuggerManager.IslandThread>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:Microsoft.Build.Debugging.DebuggerManager.IslandThread> object's `Finalize` method.","nodes":[{"pos":[0,302],"content":"Call `Dispose` when you are finished using the <xref:Microsoft.Build.Debugging.DebuggerManager.IslandThread>. After calling `Dispose`, you must release all references to the <xref:Microsoft.Build.Debugging.DebuggerManager.IslandThread> so the garbage collector can reclaim the memory that it was using.","nodes":[{"content":"Call <ph id=\"ph1\">`Dispose`</ph> when you are finished using the <ph id=\"ph2\">&lt;xref:Microsoft.Build.Debugging.DebuggerManager.IslandThread&gt;</ph>.","pos":[0,109],"source":"Call `Dispose` when you are finished using the <xref:Microsoft.Build.Debugging.DebuggerManager.IslandThread>."},{"content":"After calling <ph id=\"ph1\">`Dispose`</ph>, you must release all references to the <ph id=\"ph2\">&lt;xref:Microsoft.Build.Debugging.DebuggerManager.IslandThread&gt;</ph> so the garbage collector can reclaim the memory that it was using.","pos":[110,302],"source":" After calling `Dispose`, you must release all references to the <xref:Microsoft.Build.Debugging.DebuggerManager.IslandThread> so the garbage collector can reclaim the memory that it was using."}]},{"pos":[309,514],"content":"For more information, see <bpt id=\"p1\">[</bpt>Cleaning Up Unmanaged Resources<ept id=\"p1\">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id=\"p2\">[</bpt>Implementing a Dispose Method<ept id=\"p2\">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.","source":"For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md)."},{"pos":[522,846],"content":"[!NOTE]\n Always call `Dispose` before you release your last reference to the <xref:Microsoft.Build.Debugging.DebuggerManager.IslandThread>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:Microsoft.Build.Debugging.DebuggerManager.IslandThread> object's `Finalize` method.","leadings":["","> "],"nodes":[{"content":" Always call `Dispose` before you release your last reference to the <xref:Microsoft.Build.Debugging.DebuggerManager.IslandThread>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:Microsoft.Build.Debugging.DebuggerManager.IslandThread> object's `Finalize` method.","pos":[8,322],"nodes":[{"content":"Always call <ph id=\"ph1\">`Dispose`</ph> before you release your last reference to the <ph id=\"ph2\">&lt;xref:Microsoft.Build.Debugging.DebuggerManager.IslandThread&gt;</ph>.","pos":[1,131],"source":" Always call `Dispose` before you release your last reference to the <xref:Microsoft.Build.Debugging.DebuggerManager.IslandThread>."},{"content":"Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id=\"ph1\">&lt;xref:Microsoft.Build.Debugging.DebuggerManager.IslandThread&gt;</ph> object's <ph id=\"ph2\">`Finalize`</ph> method.","pos":[132,314],"source":" Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:Microsoft.Build.Debugging.DebuggerManager.IslandThread> object's `Finalize` method."}]}]}],"pos":[4268,5122],"yaml":true,"extradata":"MT"}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.Build.Debugging.DebuggerManager.IslandThread\n  commentId: T:Microsoft.Build.Debugging.DebuggerManager.IslandThread\n  id: DebuggerManager.IslandThread\n  children:\n  - Microsoft.Build.Debugging.DebuggerManager.IslandThread.IslandWorker(Microsoft.Build.Debugging.DebuggerManager.IslandThread)\n  - Microsoft.Build.Debugging.DebuggerManager.IslandThread.System#IDisposable#Dispose\n  langs:\n  - csharp\n  name: DebuggerManager.IslandThread\n  nameWithType: DebuggerManager.IslandThread\n  fullName: Microsoft.Build.Debugging.DebuggerManager.IslandThread\n  type: Class\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Debugging\n  summary: Executes the islands on a dedicated worker thread. The worker thread's physical callstack then maps to the interpreter's virtual callstack.\n  syntax:\n    content: 'public sealed class DebuggerManager.IslandThread : IDisposable'\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Build.Debugging/DebuggerManager+IslandThread.xml\n  ms.author: susanno\n  manager: douge\n- uid: Microsoft.Build.Debugging.DebuggerManager.IslandThread.IslandWorker(Microsoft.Build.Debugging.DebuggerManager.IslandThread)\n  commentId: M:Microsoft.Build.Debugging.DebuggerManager.IslandThread.IslandWorker(Microsoft.Build.Debugging.DebuggerManager.IslandThread)\n  id: IslandWorker(Microsoft.Build.Debugging.DebuggerManager.IslandThread)\n  parent: Microsoft.Build.Debugging.DebuggerManager.IslandThread\n  langs:\n  - csharp\n  name: IslandWorker(DebuggerManager+IslandThread)\n  nameWithType: DebuggerManager.IslandThread.IslandWorker(DebuggerManager+IslandThread)\n  fullName: DebuggerManager.IslandThread.IslandWorker(DebuggerManager+IslandThread)\n  type: Method\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Debugging\n  summary: Private entry point called from islands. Must be public so that the islands can invoke it. Called on debugger worker thread.\n  syntax:\n    content: public static void IslandWorker (Microsoft.Build.Debugging.DebuggerManager.IslandThread controller);\n    parameters:\n    - id: controller\n      type: Microsoft.Build.Debugging.DebuggerManager+IslandThread\n      description: The thread calling the entry point.\n  overload: Microsoft.Build.Debugging.DebuggerManager.IslandThread.IslandWorker*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Build.Debugging/DebuggerManager+IslandThread.xml\n  ms.author: susanno\n  manager: douge\n- uid: Microsoft.Build.Debugging.DebuggerManager.IslandThread.System#IDisposable#Dispose\n  commentId: M:Microsoft.Build.Debugging.DebuggerManager.IslandThread.System#IDisposable#Dispose\n  id: System#IDisposable#Dispose\n  isEii: true\n  parent: Microsoft.Build.Debugging.DebuggerManager.IslandThread\n  langs:\n  - csharp\n  name: IDisposable.Dispose()\n  nameWithType: DebuggerManager.IslandThread.IDisposable.Dispose()\n  fullName: DebuggerManager.IslandThread.IDisposable.Dispose()\n  type: Method\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Debugging\n  summary: Releases all resources used by the current instance of the <xref href=\"Microsoft.Build.Debugging.DebuggerManager.IslandThread\"></xref> class.\n  remarks: \"Call `Dispose` when you are finished using the <xref:Microsoft.Build.Debugging.DebuggerManager.IslandThread>. After calling `Dispose`, you must release all references to the <xref:Microsoft.Build.Debugging.DebuggerManager.IslandThread> so the garbage collector can reclaim the memory that it was using.  \\n  \\n For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  \\n  \\n> [!NOTE]\\n>  Always call `Dispose` before you release your last reference to the <xref:Microsoft.Build.Debugging.DebuggerManager.IslandThread>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:Microsoft.Build.Debugging.DebuggerManager.IslandThread> object's `Finalize` method.\"\n  syntax:\n    content: void IDisposable.Dispose ();\n    parameters: []\n  overload: Microsoft.Build.Debugging.DebuggerManager.IslandThread.System#IDisposable#Dispose*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Build.Debugging/DebuggerManager+IslandThread.xml\n  ms.author: susanno\n  manager: douge\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: Microsoft.Build.Debugging.DebuggerManager.IslandThread.IslandWorker(Microsoft.Build.Debugging.DebuggerManager.IslandThread)\n  parent: Microsoft.Build.Debugging.DebuggerManager.IslandThread\n  isExternal: false\n  name: IslandWorker(DebuggerManager+IslandThread)\n  nameWithType: DebuggerManager.IslandThread.IslandWorker(DebuggerManager+IslandThread)\n  fullName: DebuggerManager.IslandThread.IslandWorker(DebuggerManager+IslandThread)\n- uid: Microsoft.Build.Debugging.DebuggerManager\n  parent: Microsoft.Build.Debugging\n  isExternal: false\n  name: DebuggerManager\n  nameWithType: DebuggerManager\n  fullName: Microsoft.Build.Debugging.DebuggerManager+IslandThread\n- uid: Microsoft.Build.Debugging.DebuggerManager.IslandThread.System#IDisposable#Dispose\n  parent: Microsoft.Build.Debugging.DebuggerManager.IslandThread\n  isExternal: false\n  name: IDisposable.Dispose()\n  nameWithType: DebuggerManager.IslandThread.IDisposable.Dispose()\n  fullName: DebuggerManager.IslandThread.IDisposable.Dispose()\n- uid: Microsoft.Build.Debugging.DebuggerManager.IslandThread.IslandWorker*\n  parent: Microsoft.Build.Debugging.DebuggerManager.IslandThread\n  isExternal: false\n  name: IslandWorker\n  nameWithType: DebuggerManager.IslandThread.IslandWorker\n  fullName: DebuggerManager.IslandThread.IslandWorker\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Build.Debugging/DebuggerManager+IslandThread.xml\n- uid: Microsoft.Build.Debugging.DebuggerManager.IslandThread.System#IDisposable#Dispose*\n  parent: Microsoft.Build.Debugging.DebuggerManager.IslandThread\n  isExternal: false\n  name: System.IDisposable.Dispose\n  nameWithType: DebuggerManager.IslandThread.System.IDisposable.Dispose\n  fullName: DebuggerManager.IslandThread.System.IDisposable.Dispose\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Build.Debugging/DebuggerManager+IslandThread.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  nameWithType: IDisposable\n  fullName: System.IDisposable\n"}