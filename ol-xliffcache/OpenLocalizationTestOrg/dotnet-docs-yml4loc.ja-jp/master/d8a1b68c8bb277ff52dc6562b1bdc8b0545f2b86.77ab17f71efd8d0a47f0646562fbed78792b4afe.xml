{"nodes":[{"content":"Performs asymmetric encryption and decryption using the implementation of the <xref href=\"System.Security.Cryptography.RSA\"></xref> algorithm provided by the cryptographic service provider (CSP). This class cannot be inherited.","nodes":[{"pos":[0,227],"content":"Performs asymmetric encryption and decryption using the implementation of the <xref href=\"System.Security.Cryptography.RSA\"></xref> algorithm provided by the cryptographic service provider (CSP). This class cannot be inherited.","nodes":[{"content":"Performs asymmetric encryption and decryption using the implementation of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.RSA\"&gt;&lt;/xref&gt;</ph> algorithm provided by the cryptographic service provider (CSP).","pos":[0,195],"source":"Performs asymmetric encryption and decryption using the implementation of the <xref href=\"System.Security.Cryptography.RSA\"></xref> algorithm provided by the cryptographic service provider (CSP)."},{"content":"This class cannot be inherited.","pos":[196,227]}]}],"pos":[3935,4163],"yaml":true},{"content":"This is the default implementation of <xref:System.Security.Cryptography.RSA>.  \n  \n The <xref:System.Security.Cryptography.RSACryptoServiceProvider> supports key sizes from 384 bits to 16384 bits in increments of 8 bits if you have the Microsoft Enhanced Cryptographic Provider installed.  It supports key sizes from 384 bits to 512 bits in increments of 8 bits if you have the Microsoft Base Cryptographic Provider installed.  \n  \n Valid key sizes are dependent on the cryptographic service provider (CSP) that is used by the <xref:System.Security.Cryptography.RSACryptoServiceProvider> instance. Windows CSPs enable keys sizes of 384 to 16384 bits for Windows versions prior to [!INCLUDE[win81](~/includes/win81-md.md)], and key sizes of 512 to 16384 bits for [!INCLUDE[win81](~/includes/win81-md.md)]. For more information, see [CryptGenKey](http://msdn.microsoft.com/library/aa379941\\(v=vs.85\\).aspx) function in the Windows documentation.  \n  \n## Interoperation with the Microsoft Cryptographic API (CAPI)  \n Unlike the RSA implementation in unmanaged CAPI, the <xref:System.Security.Cryptography.RSACryptoServiceProvider> class reverses the order of an encrypted array of bytes after encryption and before decryption.  By default, data encrypted by the <xref:System.Security.Cryptography.RSACryptoServiceProvider> class cannot be decrypted by the CAPI `CryptDecrypt` function and data encrypted by the CAPI `CryptEncrypt` method cannot be decrypted by the <xref:System.Security.Cryptography.RSACryptoServiceProvider> class.  \n  \n If you do not compensate for the reverse ordering when interoperating between APIs, the <xref:System.Security.Cryptography.RSACryptoServiceProvider> class throws a <xref:System.Security.Cryptography.CryptographicException>.  \n  \n To interoperate with CAPI, you must manually reverse the order of encrypted bytes before the encrypted data interoperates with another API.  You can easily reverse the order of a managed byte array by calling the <xref:System.Array.Reverse%2A?displayProperty=fullName> method.","nodes":[{"pos":[0,78],"content":"This is the default implementation of <xref:System.Security.Cryptography.RSA>.","nodes":[{"content":"This is the default implementation of <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RSA&gt;</ph>.","pos":[0,78],"source":"This is the default implementation of <xref:System.Security.Cryptography.RSA>."}]},{"pos":[85,427],"content":"The <xref:System.Security.Cryptography.RSACryptoServiceProvider> supports key sizes from 384 bits to 16384 bits in increments of 8 bits if you have the Microsoft Enhanced Cryptographic Provider installed.  It supports key sizes from 384 bits to 512 bits in increments of 8 bits if you have the Microsoft Base Cryptographic Provider installed.","nodes":[{"content":"The <xref:System.Security.Cryptography.RSACryptoServiceProvider> supports key sizes from 384 bits to 16384 bits in increments of 8 bits if you have the Microsoft Enhanced Cryptographic Provider installed.  It supports key sizes from 384 bits to 512 bits in increments of 8 bits if you have the Microsoft Base Cryptographic Provider installed.","pos":[0,342],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> supports key sizes from 384 bits to 16384 bits in increments of 8 bits if you have the Microsoft Enhanced Cryptographic Provider installed.","pos":[0,204],"source":"The <xref:System.Security.Cryptography.RSACryptoServiceProvider> supports key sizes from 384 bits to 16384 bits in increments of 8 bits if you have the Microsoft Enhanced Cryptographic Provider installed."},{"content":"It supports key sizes from 384 bits to 512 bits in increments of 8 bits if you have the Microsoft Base Cryptographic Provider installed.","pos":[206,342]}]}]},{"pos":[434,944],"content":"Valid key sizes are dependent on the cryptographic service provider (CSP) that is used by the <xref:System.Security.Cryptography.RSACryptoServiceProvider> instance. Windows CSPs enable keys sizes of 384 to 16384 bits for Windows versions prior to [!INCLUDE[win81](~/includes/win81-md.md)], and key sizes of 512 to 16384 bits for [!INCLUDE[win81](~/includes/win81-md.md)]. For more information, see [CryptGenKey](http://msdn.microsoft.com/library/aa379941\\(v=vs.85\\).aspx) function in the Windows documentation.","nodes":[{"content":"Valid key sizes are dependent on the cryptographic service provider (CSP) that is used by the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> instance.","pos":[0,164],"source":"Valid key sizes are dependent on the cryptographic service provider (CSP) that is used by the <xref:System.Security.Cryptography.RSACryptoServiceProvider> instance."},{"content":"Windows CSPs enable keys sizes of 384 to 16384 bits for Windows versions prior to <ph id=\"ph1\">[!INCLUDE[win81](~/includes/win81-md.md)]</ph>, and key sizes of 512 to 16384 bits for <ph id=\"ph2\">[!INCLUDE[win81](~/includes/win81-md.md)]</ph>.","pos":[165,371],"source":" Windows CSPs enable keys sizes of 384 to 16384 bits for Windows versions prior to [!INCLUDE[win81](~/includes/win81-md.md)], and key sizes of 512 to 16384 bits for [!INCLUDE[win81](~/includes/win81-md.md)]."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CryptGenKey<ept id=\"p1\">](http://msdn.microsoft.com/library/aa379941\\(v=vs.85\\).aspx)</ept> function in the Windows documentation.","pos":[372,510],"source":" For more information, see [CryptGenKey](http://msdn.microsoft.com/library/aa379941\\(v=vs.85\\).aspx) function in the Windows documentation."}]},{"pos":[953,1011],"content":"Interoperation with the Microsoft Cryptographic API (CAPI)","linkify":"Interoperation with the Microsoft Cryptographic API (CAPI)","nodes":[{"content":"Interoperation with the Microsoft Cryptographic API (CAPI)","pos":[0,58]}]},{"pos":[1015,1530],"content":"Unlike the RSA implementation in unmanaged CAPI, the <xref:System.Security.Cryptography.RSACryptoServiceProvider> class reverses the order of an encrypted array of bytes after encryption and before decryption.  By default, data encrypted by the <xref:System.Security.Cryptography.RSACryptoServiceProvider> class cannot be decrypted by the CAPI `CryptDecrypt` function and data encrypted by the CAPI `CryptEncrypt` method cannot be decrypted by the <xref:System.Security.Cryptography.RSACryptoServiceProvider> class.","nodes":[{"content":"Unlike the RSA implementation in unmanaged CAPI, the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> class reverses the order of an encrypted array of bytes after encryption and before decryption.","pos":[0,209],"source":"Unlike the RSA implementation in unmanaged CAPI, the <xref:System.Security.Cryptography.RSACryptoServiceProvider> class reverses the order of an encrypted array of bytes after encryption and before decryption."},{"content":"By default, data encrypted by the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> class cannot be decrypted by the CAPI <ph id=\"ph2\">`CryptDecrypt`</ph> function and data encrypted by the CAPI <ph id=\"ph3\">`CryptEncrypt`</ph> method cannot be decrypted by the <ph id=\"ph4\">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> class.","pos":[211,515],"source":"  By default, data encrypted by the <xref:System.Security.Cryptography.RSACryptoServiceProvider> class cannot be decrypted by the CAPI `CryptDecrypt` function and data encrypted by the CAPI `CryptEncrypt` method cannot be decrypted by the <xref:System.Security.Cryptography.RSACryptoServiceProvider> class."}]},{"pos":[1537,1760],"content":"If you do not compensate for the reverse ordering when interoperating between APIs, the <xref:System.Security.Cryptography.RSACryptoServiceProvider> class throws a <xref:System.Security.Cryptography.CryptographicException>.","nodes":[{"content":"If you do not compensate for the reverse ordering when interoperating between APIs, the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> class throws a <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.CryptographicException&gt;</ph>.","pos":[0,223],"source":"If you do not compensate for the reverse ordering when interoperating between APIs, the <xref:System.Security.Cryptography.RSACryptoServiceProvider> class throws a <xref:System.Security.Cryptography.CryptographicException>."}]},{"pos":[1767,2043],"content":"To interoperate with CAPI, you must manually reverse the order of encrypted bytes before the encrypted data interoperates with another API.  You can easily reverse the order of a managed byte array by calling the <xref:System.Array.Reverse%2A?displayProperty=fullName> method.","nodes":[{"content":"To interoperate with CAPI, you must manually reverse the order of encrypted bytes before the encrypted data interoperates with another API.  You can easily reverse the order of a managed byte array by calling the <xref:System.Array.Reverse%2A?displayProperty=fullName> method.","pos":[0,276],"nodes":[{"content":"To interoperate with CAPI, you must manually reverse the order of encrypted bytes before the encrypted data interoperates with another API.","pos":[0,139]},{"content":"You can easily reverse the order of a managed byte array by calling the <ph id=\"ph1\">&lt;xref:System.Array.Reverse%2A?displayProperty=fullName&gt;</ph> method.","pos":[141,276],"source":"  You can easily reverse the order of a managed byte array by calling the <xref:System.Array.Reverse%2A?displayProperty=fullName> method."}]}]}],"pos":[4174,6233],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\"></xref> class using the default key.","nodes":[{"pos":[0,137],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\"&gt;&lt;/xref&gt;</ph> class using the default key.","source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\"></xref> class using the default key."}],"pos":[11760,11898],"yaml":true},{"content":"If no default key is found, a new key is created.  \n  \n This constructor creates an <xref:System.Security.Cryptography.KeyNumber.Exchange> key pair suitable to encrypt session keys so that they can be safely stored and exchanged with other users.  The generated key corresponds to a key generated using the `AT_KEYEXCHANGE` value used in the unmanaged Microsoft Cryptographic API (CAPI).","nodes":[{"pos":[0,49],"content":"If no default key is found, a new key is created.","nodes":[{"content":"If no default key is found, a new key is created.","pos":[0,49]}]},{"pos":[56,387],"content":"This constructor creates an <xref:System.Security.Cryptography.KeyNumber.Exchange> key pair suitable to encrypt session keys so that they can be safely stored and exchanged with other users.  The generated key corresponds to a key generated using the `AT_KEYEXCHANGE` value used in the unmanaged Microsoft Cryptographic API (CAPI).","nodes":[{"content":"This constructor creates an <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.KeyNumber.Exchange&gt;</ph> key pair suitable to encrypt session keys so that they can be safely stored and exchanged with other users.","pos":[0,190],"source":"This constructor creates an <xref:System.Security.Cryptography.KeyNumber.Exchange> key pair suitable to encrypt session keys so that they can be safely stored and exchanged with other users."},{"content":"The generated key corresponds to a key generated using the <ph id=\"ph1\">`AT_KEYEXCHANGE`</ph> value used in the unmanaged Microsoft Cryptographic API (CAPI).","pos":[192,331],"source":"  The generated key corresponds to a key generated using the `AT_KEYEXCHANGE` value used in the unmanaged Microsoft Cryptographic API (CAPI)."}]}],"pos":[11909,12301],"yaml":true,"extradata":"MT"},{"content":"The cryptographic service provider (CSP) cannot be acquired.","nodes":[{"pos":[0,60],"content":"The cryptographic service provider (CSP) cannot be acquired.","nodes":[{"content":"The cryptographic service provider (CSP) cannot be acquired.","pos":[0,60]}]}],"pos":[13406,13467],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\"></xref> class with the specified key size.","nodes":[{"pos":[0,143],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\"&gt;&lt;/xref&gt;</ph> class with the specified key size.","source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\"></xref> class with the specified key size."}],"pos":[14895,15039],"yaml":true},{"content":"If no default key is found, a new key is created.  \n  \n This constructor creates an <xref:System.Security.Cryptography.KeyNumber.Exchange> key pair suitable to encrypt session keys so that they can be safely stored and exchanged with other users.  The generated key corresponds to a key generated using the `AT_KEYEXCHANGE` value used in the unmanaged Microsoft Cryptographic API (CAPI).","nodes":[{"pos":[0,49],"content":"If no default key is found, a new key is created.","nodes":[{"content":"If no default key is found, a new key is created.","pos":[0,49]}]},{"pos":[56,387],"content":"This constructor creates an <xref:System.Security.Cryptography.KeyNumber.Exchange> key pair suitable to encrypt session keys so that they can be safely stored and exchanged with other users.  The generated key corresponds to a key generated using the `AT_KEYEXCHANGE` value used in the unmanaged Microsoft Cryptographic API (CAPI).","nodes":[{"content":"This constructor creates an <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.KeyNumber.Exchange&gt;</ph> key pair suitable to encrypt session keys so that they can be safely stored and exchanged with other users.","pos":[0,190],"source":"This constructor creates an <xref:System.Security.Cryptography.KeyNumber.Exchange> key pair suitable to encrypt session keys so that they can be safely stored and exchanged with other users."},{"content":"The generated key corresponds to a key generated using the <ph id=\"ph1\">`AT_KEYEXCHANGE`</ph> value used in the unmanaged Microsoft Cryptographic API (CAPI).","pos":[192,331],"source":"  The generated key corresponds to a key generated using the `AT_KEYEXCHANGE` value used in the unmanaged Microsoft Cryptographic API (CAPI)."}]}],"pos":[15050,15442],"yaml":true,"extradata":"MT"},{"content":"The size of the key to use in bits.","nodes":[{"pos":[0,35],"content":"The size of the key to use in bits.","nodes":[{"content":"The size of the key to use in bits.","pos":[0,35]}]}],"pos":[16203,16239],"yaml":true},{"content":"The cryptographic service provider (CSP) cannot be acquired.","nodes":[{"pos":[0,60],"content":"The cryptographic service provider (CSP) cannot be acquired.","nodes":[{"content":"The cryptographic service provider (CSP) cannot be acquired.","pos":[0,60]}]}],"pos":[16474,16535],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\"></xref> class with the specified parameters.","nodes":[{"pos":[0,145],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\"&gt;&lt;/xref&gt;</ph> class with the specified parameters.","source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\"></xref> class with the specified parameters."}],"pos":[18077,18223],"yaml":true},{"content":"This constructor creates or reuses a key container specified using the <xref:System.Security.Cryptography.CspParameters.KeyContainerName> field of the `parameters` parameter.  \n  \n By default, this constructor creates an <xref:System.Security.Cryptography.KeyNumber.Exchange> key pair suitable to encrypt session keys so that they can be safely stored and exchanged with other users.  The generated key corresponds to a key generated using the `AT_KEYEXCHANGE` value used in the unmanaged Microsoft Cryptographic API (CAPI).  \n  \n You can create a <xref:System.Security.Cryptography.KeyNumber.Signature> key pair suitable for authenticating (digitally signed) messages or files by setting the <xref:System.Security.Cryptography.CspParameters.KeyNumber> field of the `parameters` parameter to the <xref:System.Security.Cryptography.KeyNumber.Signature> value. This type of key corresponds to the `AT_SIGNATURE` value used in CAPI.  \n  \n If you create an <xref:System.Security.Cryptography.RSACryptoServiceProvider> object with the <xref:System.Security.Cryptography.KeyNumber.Exchange> value specified and then create another <xref:System.Security.Cryptography.RSACryptoServiceProvider> object with the <xref:System.Security.Cryptography.KeyNumber.Signature> value specified, both keys will be placed in a single container if both objects specify the same key container name.  \n  \n To create a key that is compatible with stong-name signing using the <xref:System.Security.Cryptography.RSACryptoServiceProvider> class, you must create a <xref:System.Security.Cryptography.KeyNumber.Signature> key pair.","nodes":[{"pos":[0,174],"content":"This constructor creates or reuses a key container specified using the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.CspParameters.KeyContainerName&gt;</ph> field of the <ph id=\"ph2\">`parameters`</ph> parameter.","source":"This constructor creates or reuses a key container specified using the <xref:System.Security.Cryptography.CspParameters.KeyContainerName> field of the `parameters` parameter."},{"pos":[181,524],"content":"By default, this constructor creates an <xref:System.Security.Cryptography.KeyNumber.Exchange> key pair suitable to encrypt session keys so that they can be safely stored and exchanged with other users.  The generated key corresponds to a key generated using the `AT_KEYEXCHANGE` value used in the unmanaged Microsoft Cryptographic API (CAPI).","nodes":[{"content":"By default, this constructor creates an <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.KeyNumber.Exchange&gt;</ph> key pair suitable to encrypt session keys so that they can be safely stored and exchanged with other users.","pos":[0,202],"source":"By default, this constructor creates an <xref:System.Security.Cryptography.KeyNumber.Exchange> key pair suitable to encrypt session keys so that they can be safely stored and exchanged with other users."},{"content":"The generated key corresponds to a key generated using the <ph id=\"ph1\">`AT_KEYEXCHANGE`</ph> value used in the unmanaged Microsoft Cryptographic API (CAPI).","pos":[204,343],"source":"  The generated key corresponds to a key generated using the `AT_KEYEXCHANGE` value used in the unmanaged Microsoft Cryptographic API (CAPI)."}]},{"pos":[531,929],"content":"You can create a <xref:System.Security.Cryptography.KeyNumber.Signature> key pair suitable for authenticating (digitally signed) messages or files by setting the <xref:System.Security.Cryptography.CspParameters.KeyNumber> field of the `parameters` parameter to the <xref:System.Security.Cryptography.KeyNumber.Signature> value. This type of key corresponds to the `AT_SIGNATURE` value used in CAPI.","nodes":[{"content":"You can create a <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.KeyNumber.Signature&gt;</ph> key pair suitable for authenticating (digitally signed) messages or files by setting the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.CspParameters.KeyNumber&gt;</ph> field of the <ph id=\"ph3\">`parameters`</ph> parameter to the <ph id=\"ph4\">&lt;xref:System.Security.Cryptography.KeyNumber.Signature&gt;</ph> value.","pos":[0,327],"source":"You can create a <xref:System.Security.Cryptography.KeyNumber.Signature> key pair suitable for authenticating (digitally signed) messages or files by setting the <xref:System.Security.Cryptography.CspParameters.KeyNumber> field of the `parameters` parameter to the <xref:System.Security.Cryptography.KeyNumber.Signature> value."},{"content":"This type of key corresponds to the <ph id=\"ph1\">`AT_SIGNATURE`</ph> value used in CAPI.","pos":[328,398],"source":" This type of key corresponds to the `AT_SIGNATURE` value used in CAPI."}]},{"pos":[936,1374],"content":"If you create an <xref:System.Security.Cryptography.RSACryptoServiceProvider> object with the <xref:System.Security.Cryptography.KeyNumber.Exchange> value specified and then create another <xref:System.Security.Cryptography.RSACryptoServiceProvider> object with the <xref:System.Security.Cryptography.KeyNumber.Signature> value specified, both keys will be placed in a single container if both objects specify the same key container name.","nodes":[{"content":"If you create an <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> object with the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.KeyNumber.Exchange&gt;</ph> value specified and then create another <ph id=\"ph3\">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> object with the <ph id=\"ph4\">&lt;xref:System.Security.Cryptography.KeyNumber.Signature&gt;</ph> value specified, both keys will be placed in a single container if both objects specify the same key container name.","pos":[0,438],"source":"If you create an <xref:System.Security.Cryptography.RSACryptoServiceProvider> object with the <xref:System.Security.Cryptography.KeyNumber.Exchange> value specified and then create another <xref:System.Security.Cryptography.RSACryptoServiceProvider> object with the <xref:System.Security.Cryptography.KeyNumber.Signature> value specified, both keys will be placed in a single container if both objects specify the same key container name."}]},{"pos":[1381,1601],"content":"To create a key that is compatible with stong-name signing using the <xref:System.Security.Cryptography.RSACryptoServiceProvider> class, you must create a <xref:System.Security.Cryptography.KeyNumber.Signature> key pair.","nodes":[{"content":"To create a key that is compatible with stong-name signing using the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> class, you must create a <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.KeyNumber.Signature&gt;</ph> key pair.","pos":[0,220],"source":"To create a key that is compatible with stong-name signing using the <xref:System.Security.Cryptography.RSACryptoServiceProvider> class, you must create a <xref:System.Security.Cryptography.KeyNumber.Signature> key pair."}]}],"pos":[18234,19846],"yaml":true,"extradata":"MT"},{"content":"The parameters to be passed to the cryptographic service provider (CSP).","nodes":[{"pos":[0,72],"content":"The parameters to be passed to the cryptographic service provider (CSP).","nodes":[{"content":"The parameters to be passed to the cryptographic service provider (CSP).","pos":[0,72]}]}],"pos":[20662,20735],"yaml":true},{"content":"The CSP cannot be acquired.","nodes":[{"pos":[0,27],"content":"The CSP cannot be acquired.","nodes":[{"content":"The CSP cannot be acquired.","pos":[0,27]}]}],"pos":[20970,20998],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\"></xref> class with the specified key size and parameters.","nodes":[{"pos":[0,158],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\"&gt;&lt;/xref&gt;</ph> class with the specified key size and parameters.","source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\"></xref> class with the specified key size and parameters."}],"pos":[22600,22759],"yaml":true},{"content":"This constructor creates or reuses a key container specified using the <xref:System.Security.Cryptography.CspParameters.KeyContainerName> field of the `parameters` parameter.  \n  \n By default, this constructor creates an <xref:System.Security.Cryptography.KeyNumber.Exchange> key pair suitable to encrypt session keys so that they can be safely stored and exchanged with other users.  The generated key corresponds to a key generated using the `AT_KEYEXCHANGE` value used in the unmanaged Microsoft Cryptographic API (CAPI).  \n  \n You can create a <xref:System.Security.Cryptography.KeyNumber.Signature> key pair suitable for authenticating (digitally signed) messages or files by setting the <xref:System.Security.Cryptography.CspParameters.KeyNumber> field of the `parameters` parameter to the <xref:System.Security.Cryptography.KeyNumber.Signature> value. This type of key corresponds to the `AT_SIGNATURE` value used in CAPI.  \n  \n If you create an <xref:System.Security.Cryptography.RSACryptoServiceProvider> object with the <xref:System.Security.Cryptography.KeyNumber.Exchange> value specified and then create another <xref:System.Security.Cryptography.RSACryptoServiceProvider> object with the <xref:System.Security.Cryptography.KeyNumber.Signature> value specified, both keys will be placed in a single container if both objects specify the same key container name.  \n  \n To create a key that is compatible with stong-name signing using the <xref:System.Security.Cryptography.RSACryptoServiceProvider> class, you must create a <xref:System.Security.Cryptography.KeyNumber.Signature> key pair.","nodes":[{"pos":[0,174],"content":"This constructor creates or reuses a key container specified using the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.CspParameters.KeyContainerName&gt;</ph> field of the <ph id=\"ph2\">`parameters`</ph> parameter.","source":"This constructor creates or reuses a key container specified using the <xref:System.Security.Cryptography.CspParameters.KeyContainerName> field of the `parameters` parameter."},{"pos":[181,524],"content":"By default, this constructor creates an <xref:System.Security.Cryptography.KeyNumber.Exchange> key pair suitable to encrypt session keys so that they can be safely stored and exchanged with other users.  The generated key corresponds to a key generated using the `AT_KEYEXCHANGE` value used in the unmanaged Microsoft Cryptographic API (CAPI).","nodes":[{"content":"By default, this constructor creates an <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.KeyNumber.Exchange&gt;</ph> key pair suitable to encrypt session keys so that they can be safely stored and exchanged with other users.","pos":[0,202],"source":"By default, this constructor creates an <xref:System.Security.Cryptography.KeyNumber.Exchange> key pair suitable to encrypt session keys so that they can be safely stored and exchanged with other users."},{"content":"The generated key corresponds to a key generated using the <ph id=\"ph1\">`AT_KEYEXCHANGE`</ph> value used in the unmanaged Microsoft Cryptographic API (CAPI).","pos":[204,343],"source":"  The generated key corresponds to a key generated using the `AT_KEYEXCHANGE` value used in the unmanaged Microsoft Cryptographic API (CAPI)."}]},{"pos":[531,929],"content":"You can create a <xref:System.Security.Cryptography.KeyNumber.Signature> key pair suitable for authenticating (digitally signed) messages or files by setting the <xref:System.Security.Cryptography.CspParameters.KeyNumber> field of the `parameters` parameter to the <xref:System.Security.Cryptography.KeyNumber.Signature> value. This type of key corresponds to the `AT_SIGNATURE` value used in CAPI.","nodes":[{"content":"You can create a <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.KeyNumber.Signature&gt;</ph> key pair suitable for authenticating (digitally signed) messages or files by setting the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.CspParameters.KeyNumber&gt;</ph> field of the <ph id=\"ph3\">`parameters`</ph> parameter to the <ph id=\"ph4\">&lt;xref:System.Security.Cryptography.KeyNumber.Signature&gt;</ph> value.","pos":[0,327],"source":"You can create a <xref:System.Security.Cryptography.KeyNumber.Signature> key pair suitable for authenticating (digitally signed) messages or files by setting the <xref:System.Security.Cryptography.CspParameters.KeyNumber> field of the `parameters` parameter to the <xref:System.Security.Cryptography.KeyNumber.Signature> value."},{"content":"This type of key corresponds to the <ph id=\"ph1\">`AT_SIGNATURE`</ph> value used in CAPI.","pos":[328,398],"source":" This type of key corresponds to the `AT_SIGNATURE` value used in CAPI."}]},{"pos":[936,1374],"content":"If you create an <xref:System.Security.Cryptography.RSACryptoServiceProvider> object with the <xref:System.Security.Cryptography.KeyNumber.Exchange> value specified and then create another <xref:System.Security.Cryptography.RSACryptoServiceProvider> object with the <xref:System.Security.Cryptography.KeyNumber.Signature> value specified, both keys will be placed in a single container if both objects specify the same key container name.","nodes":[{"content":"If you create an <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> object with the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.KeyNumber.Exchange&gt;</ph> value specified and then create another <ph id=\"ph3\">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> object with the <ph id=\"ph4\">&lt;xref:System.Security.Cryptography.KeyNumber.Signature&gt;</ph> value specified, both keys will be placed in a single container if both objects specify the same key container name.","pos":[0,438],"source":"If you create an <xref:System.Security.Cryptography.RSACryptoServiceProvider> object with the <xref:System.Security.Cryptography.KeyNumber.Exchange> value specified and then create another <xref:System.Security.Cryptography.RSACryptoServiceProvider> object with the <xref:System.Security.Cryptography.KeyNumber.Signature> value specified, both keys will be placed in a single container if both objects specify the same key container name."}]},{"pos":[1381,1601],"content":"To create a key that is compatible with stong-name signing using the <xref:System.Security.Cryptography.RSACryptoServiceProvider> class, you must create a <xref:System.Security.Cryptography.KeyNumber.Signature> key pair.","nodes":[{"content":"To create a key that is compatible with stong-name signing using the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> class, you must create a <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.KeyNumber.Signature&gt;</ph> key pair.","pos":[0,220],"source":"To create a key that is compatible with stong-name signing using the <xref:System.Security.Cryptography.RSACryptoServiceProvider> class, you must create a <xref:System.Security.Cryptography.KeyNumber.Signature> key pair."}]}],"pos":[22770,24382],"yaml":true,"extradata":"MT"},{"content":"The size of the key to use in bits.","nodes":[{"pos":[0,35],"content":"The size of the key to use in bits.","nodes":[{"content":"The size of the key to use in bits.","pos":[0,35]}]}],"pos":[25210,25246],"yaml":true},{"content":"The parameters to be passed to the cryptographic service provider (CSP).","nodes":[{"pos":[0,72],"content":"The parameters to be passed to the cryptographic service provider (CSP).","nodes":[{"content":"The parameters to be passed to the cryptographic service provider (CSP).","pos":[0,72]}]}],"pos":[25341,25414],"yaml":true},{"content":"The CSP cannot be acquired.  \n  \n -or-  \n  \n The key cannot be created.","nodes":[{"pos":[0,27],"content":"The CSP cannot be acquired.","nodes":[{"content":"The CSP cannot be acquired.","pos":[0,27]}]},{"pos":[34,38],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[45,71],"content":"The key cannot be created.","nodes":[{"content":"The key cannot be created.","pos":[0,26]}]}],"pos":[25649,25727],"yaml":true},{"content":"Gets a <xref href=\"System.Security.Cryptography.CspKeyContainerInfo\"></xref> object that describes additional information about a cryptographic key pair.","nodes":[{"pos":[0,153],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.CspKeyContainerInfo\"&gt;&lt;/xref&gt;</ph> object that describes additional information about a cryptographic key pair.","source":"Gets a <xref href=\"System.Security.Cryptography.CspKeyContainerInfo\"></xref> object that describes additional information about a cryptographic key pair."}],"pos":[27114,27268],"yaml":true},{"content":"Use the <xref:System.Security.Cryptography.RSACryptoServiceProvider.CspKeyContainerInfo%2A> property to retrieve additional information about a cryptographic key pair.  The returned <xref:System.Security.Cryptography.CspKeyContainerInfo> object describes whether the key is exportable, and specifies the key container name, information about the provider, and other information.  \n  \n In cases where a random key is generated, a key container will not be created until you call a method that uses the key.  Some properties of the <xref:System.Security.Cryptography.CspKeyContainerInfo> object returned by the <xref:System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo%2A> property will throw a <xref:System.Security.Cryptography.CryptographicException> if a key container has not been created.  To make sure that a key container has been created, call a method such as <xref:System.Security.Cryptography.RSACryptoServiceProvider.Encrypt%2A>, <xref:System.Security.Cryptography.RSACryptoServiceProvider.Decrypt%2A>, <xref:System.Security.Cryptography.RSACryptoServiceProvider.SignData%2A>, <xref:System.Security.Cryptography.DSACryptoServiceProvider.SignHash%2A>, and so on, before you call the <xref:System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo%2A> property.","nodes":[{"pos":[0,378],"content":"Use the <xref:System.Security.Cryptography.RSACryptoServiceProvider.CspKeyContainerInfo%2A> property to retrieve additional information about a cryptographic key pair.  The returned <xref:System.Security.Cryptography.CspKeyContainerInfo> object describes whether the key is exportable, and specifies the key container name, information about the provider, and other information.","nodes":[{"content":"Use the <xref:System.Security.Cryptography.RSACryptoServiceProvider.CspKeyContainerInfo%2A> property to retrieve additional information about a cryptographic key pair.  The returned <xref:System.Security.Cryptography.CspKeyContainerInfo> object describes whether the key is exportable, and specifies the key container name, information about the provider, and other information.","pos":[0,378],"nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider.CspKeyContainerInfo%2A&gt;</ph> property to retrieve additional information about a cryptographic key pair.","pos":[0,167],"source":"Use the <xref:System.Security.Cryptography.RSACryptoServiceProvider.CspKeyContainerInfo%2A> property to retrieve additional information about a cryptographic key pair."},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.CspKeyContainerInfo&gt;</ph> object describes whether the key is exportable, and specifies the key container name, information about the provider, and other information.","pos":[169,378],"source":"  The returned <xref:System.Security.Cryptography.CspKeyContainerInfo> object describes whether the key is exportable, and specifies the key container name, information about the provider, and other information."}]}]},{"pos":[385,1308],"content":"In cases where a random key is generated, a key container will not be created until you call a method that uses the key.  Some properties of the <xref:System.Security.Cryptography.CspKeyContainerInfo> object returned by the <xref:System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo%2A> property will throw a <xref:System.Security.Cryptography.CryptographicException> if a key container has not been created.  To make sure that a key container has been created, call a method such as <xref:System.Security.Cryptography.RSACryptoServiceProvider.Encrypt%2A>, <xref:System.Security.Cryptography.RSACryptoServiceProvider.Decrypt%2A>, <xref:System.Security.Cryptography.RSACryptoServiceProvider.SignData%2A>, <xref:System.Security.Cryptography.DSACryptoServiceProvider.SignHash%2A>, and so on, before you call the <xref:System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo%2A> property.","nodes":[{"content":"In cases where a random key is generated, a key container will not be created until you call a method that uses the key.  Some properties of the <xref:System.Security.Cryptography.CspKeyContainerInfo> object returned by the <xref:System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo%2A> property will throw a <xref:System.Security.Cryptography.CryptographicException> if a key container has not been created.  To make sure that a key container has been created, call a method such as <xref:System.Security.Cryptography.RSACryptoServiceProvider.Encrypt%2A>, <xref:System.Security.Cryptography.RSACryptoServiceProvider.Decrypt%2A>, <xref:System.Security.Cryptography.RSACryptoServiceProvider.SignData%2A>, <xref:System.Security.Cryptography.DSACryptoServiceProvider.SignHash%2A>, and so on, before you call the <xref:System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo%2A> property.","pos":[0,923],"nodes":[{"content":"In cases where a random key is generated, a key container will not be created until you call a method that uses the key.","pos":[0,120]},{"content":"Some properties of the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.CspKeyContainerInfo&gt;</ph> object returned by the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo%2A&gt;</ph> property will throw a <ph id=\"ph3\">&lt;xref:System.Security.Cryptography.CryptographicException&gt;</ph> if a key container has not been created.","pos":[122,429],"source":"  Some properties of the <xref:System.Security.Cryptography.CspKeyContainerInfo> object returned by the <xref:System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo%2A> property will throw a <xref:System.Security.Cryptography.CryptographicException> if a key container has not been created."},{"content":"To make sure that a key container has been created, call a method such as <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider.Encrypt%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider.Decrypt%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider.SignData%2A&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Security.Cryptography.DSACryptoServiceProvider.SignHash%2A&gt;</ph>, and so on, before you call the <ph id=\"ph5\">&lt;xref:System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo%2A&gt;</ph> property.","pos":[431,923],"source":"  To make sure that a key container has been created, call a method such as <xref:System.Security.Cryptography.RSACryptoServiceProvider.Encrypt%2A>, <xref:System.Security.Cryptography.RSACryptoServiceProvider.Decrypt%2A>, <xref:System.Security.Cryptography.RSACryptoServiceProvider.SignData%2A>, <xref:System.Security.Cryptography.DSACryptoServiceProvider.SignHash%2A>, and so on, before you call the <xref:System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo%2A> property."}]}]}],"pos":[27279,28592],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Security.Cryptography.CspKeyContainerInfo\"></xref> object that describes additional information about a cryptographic key pair.","nodes":[{"pos":[0,148],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.CspKeyContainerInfo\"&gt;&lt;/xref&gt;</ph> object that describes additional information about a cryptographic key pair.","source":"A <xref href=\"System.Security.Cryptography.CspKeyContainerInfo\"></xref> object that describes additional information about a cryptographic key pair."}],"pos":[29583,29732],"yaml":true},{"content":"Decrypts data with the <xref href=\"System.Security.Cryptography.RSA\"></xref> algorithm.","nodes":[{"pos":[0,87],"content":"Decrypts data with the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.RSA\"&gt;&lt;/xref&gt;</ph> algorithm.","source":"Decrypts data with the <xref href=\"System.Security.Cryptography.RSA\"></xref> algorithm."}],"pos":[31365,31453],"yaml":true},{"content":"Use <xref:System.Security.Cryptography.RSACryptoServiceProvider.Encrypt%2A> to encrypt data for decryption with this method.","nodes":[{"pos":[0,124],"content":"Use <xref:System.Security.Cryptography.RSACryptoServiceProvider.Encrypt%2A> to encrypt data for decryption with this method.","nodes":[{"content":"Use <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider.Encrypt%2A&gt;</ph> to encrypt data for decryption with this method.","pos":[0,124],"source":"Use <xref:System.Security.Cryptography.RSACryptoServiceProvider.Encrypt%2A> to encrypt data for decryption with this method."}]}],"pos":[31464,31589],"yaml":true,"extradata":"MT"},{"content":"The data to be decrypted.","nodes":[{"pos":[0,25],"content":"The data to be decrypted.","nodes":[{"content":"The data to be decrypted.","pos":[0,25]}]}],"pos":[32473,32499],"yaml":true},{"content":"`true` to perform direct <xref href=\"System.Security.Cryptography.RSA\"></xref> decryption using OAEP padding (only available on a computer running Microsoft Windows XP or later); otherwise, `false` to use PKCS#1 v1.5 padding.","nodes":[{"pos":[0,225],"content":"<ph id=\"ph1\">`true`</ph> to perform direct <ph id=\"ph2\">&lt;xref href=\"System.Security.Cryptography.RSA\"&gt;&lt;/xref&gt;</ph> decryption using OAEP padding (only available on a computer running Microsoft Windows XP or later); otherwise, <ph id=\"ph3\">`false`</ph> to use PKCS#1 v1.5 padding.","source":"`true` to perform direct <xref href=\"System.Security.Cryptography.RSA\"></xref> decryption using OAEP padding (only available on a computer running Microsoft Windows XP or later); otherwise, `false` to use PKCS#1 v1.5 padding."}],"pos":[32561,32789],"yaml":true},{"content":"The decrypted data, which is the original plain text before encryption.","nodes":[{"pos":[0,71],"content":"The decrypted data, which is the original plain text before encryption.","nodes":[{"content":"The decrypted data, which is the original plain text before encryption.","pos":[0,71]}]}],"pos":[32846,32918],"yaml":true},{"content":"The cryptographic service provider (CSP) cannot be acquired.  \n  \n -or-  \n  \n The <code>fOAEP</code> parameter is `true` and the length of the <code>rgb</code> parameter is greater than <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider.KeySize\"></xref>.  \n  \n -or-  \n  \n The <code>fOAEP</code> parameter is `true` and OAEP is not supported.  \n  \n -or-  \n  \n The key does not match the encrypted data. However, the exception wording may not be accurate. For example, it may say <code>Not enough storage is available to process this command</code>.","nodes":[{"pos":[0,60],"content":"The cryptographic service provider (CSP) cannot be acquired.","nodes":[{"content":"The cryptographic service provider (CSP) cannot be acquired.","pos":[0,60]}]},{"pos":[67,71],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[78,269],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">fOAEP</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`true`</ph> and the length of the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">rgb</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter is greater than <ph id=\"ph4\">&lt;xref href=\"System.Security.Cryptography.RSACryptoServiceProvider.KeySize\"&gt;&lt;/xref&gt;</ph>.","source":"The <code>fOAEP</code> parameter is `true` and the length of the <code>rgb</code> parameter is greater than <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider.KeySize\"></xref>."},{"pos":[276,280],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[287,356],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">fOAEP</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`true`</ph> and OAEP is not supported.","source":"The <code>fOAEP</code> parameter is `true` and OAEP is not supported."},{"pos":[363,367],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[374,562],"content":"The key does not match the encrypted data. However, the exception wording may not be accurate. For example, it may say <code>Not enough storage is available to process this command</code>.","nodes":[{"content":"The key does not match the encrypted data.","pos":[0,42]},{"content":"However, the exception wording may not be accurate.","pos":[43,94]},{"content":"For example, it may say <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Not enough storage is available to process this command</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[95,188],"source":" For example, it may say <code>Not enough storage is available to process this command</code>."}]}],"pos":[33155,33734],"yaml":true},{"content":"<code>rgb</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;rgb&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>rgb</code> is `null`."}],"pos":[33836,33864],"yaml":true},{"content":"Decrypts data that was previously encrypted with the <xref href=\"System.Security.Cryptography.RSA\"></xref> algorithm by using the specified padding.","nodes":[{"pos":[0,148],"content":"Decrypts data that was previously encrypted with the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.RSA\"&gt;&lt;/xref&gt;</ph> algorithm by using the specified padding.","source":"Decrypts data that was previously encrypted with the <xref href=\"System.Security.Cryptography.RSA\"></xref> algorithm by using the specified padding."}],"pos":[35462,35611],"yaml":true},{"content":"`padding` must be either <xref:System.Security.Cryptography.RSAEncryptionPadding.Pkcs1%2A?displayProperty=fullName> or <xref:System.Security.Cryptography.RSAEncryptionPadding.OaepSHA1%2A?displayProperty=fullName>.","nodes":[{"pos":[0,213],"content":"<ph id=\"ph1\">`padding`</ph> must be either <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.RSAEncryptionPadding.Pkcs1%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Security.Cryptography.RSAEncryptionPadding.OaepSHA1%2A?displayProperty=fullName&gt;</ph>.","source":"`padding` must be either <xref:System.Security.Cryptography.RSAEncryptionPadding.Pkcs1%2A?displayProperty=fullName> or <xref:System.Security.Cryptography.RSAEncryptionPadding.OaepSHA1%2A?displayProperty=fullName>."}],"pos":[35622,35838],"yaml":true,"extradata":"MT"},{"content":"The data to decrypt.","nodes":[{"pos":[0,20],"content":"The data to decrypt.","nodes":[{"content":"The data to decrypt.","pos":[0,20]}]}],"pos":[36042,36063],"yaml":true},{"content":"The padding.","nodes":[{"pos":[0,12],"content":"The padding.","nodes":[{"content":"The padding.","pos":[0,12]}]}],"pos":[36162,36175],"yaml":true},{"content":"The decrypted data.","nodes":[{"pos":[0,19],"content":"The decrypted data.","nodes":[{"content":"The decrypted data.","pos":[0,19]}]}],"pos":[36232,36252],"yaml":true},{"content":"<code>data</code> is `null`.  \n  \n -or-  \n  \n <code>padding</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>data</code> is `null`."},{"pos":[35,39],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[46,77],"content":"<ph id=\"ph1\">&lt;code&gt;padding&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>padding</code> is `null`."}],"pos":[36443,36527],"yaml":true},{"content":"The padding mode is not supported.","nodes":[{"pos":[0,34],"content":"The padding mode is not supported.","nodes":[{"content":"The padding mode is not supported.","pos":[0,34]}]}],"pos":[36675,36710],"yaml":true},{"content":"This method is not supported in the current version.","nodes":[{"pos":[0,52],"content":"This method is not supported in the current version.","nodes":[{"content":"This method is not supported in the current version.","pos":[0,52]}]}],"pos":[37988,38041],"yaml":true},{"content":"The data to be decrypted.","nodes":[{"pos":[0,25],"content":"The data to be decrypted.","nodes":[{"content":"The data to be decrypted.","pos":[0,25]}]}],"pos":[38189,38215],"yaml":true},{"content":"The decrypted data, which is the original plain text before encryption.","nodes":[{"pos":[0,71],"content":"The decrypted data, which is the original plain text before encryption.","nodes":[{"content":"The decrypted data, which is the original plain text before encryption.","pos":[0,71]}]}],"pos":[38272,38344],"yaml":true},{"content":"This method is not supported in the current version.","nodes":[{"pos":[0,52],"content":"This method is not supported in the current version.","nodes":[{"content":"This method is not supported in the current version.","pos":[0,52]}]}],"pos":[38540,38593],"yaml":true},{"content":"Encrypts data with the <xref href=\"System.Security.Cryptography.RSA\"></xref> algorithm.","nodes":[{"pos":[0,87],"content":"Encrypts data with the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.RSA\"&gt;&lt;/xref&gt;</ph> algorithm.","source":"Encrypts data with the <xref href=\"System.Security.Cryptography.RSA\"></xref> algorithm."}],"pos":[41516,41604],"yaml":true},{"content":"The following table describes the padding supported by different versions of Microsoft Windows and the maximum length of `rgb` allowed by the different combinations of operating systems and padding.  \n  \n|Padding|Operating System Supported|Maximum Length of rgb Parameter|  \n|-------------|--------------------------------|-------------------------------------|  \n|OAEP padding (PKCS#1 v2)|Windows XP or later.|Modulus size -2 -2*hLen, where hLen is the size of the hash.|  \n|Direct Encryption (PKCS#1 v1.5)|Microsoft Windows 2000 or later with the high encryption pack installed.|Modulus size - 11. (11 bytes is the minimum padding possible.)|  \n|Direct Encryption and OAEP padding not supported|Microsoft Windows 98, Windows Millennium Edition, or Windows 2000 or later without the high encryption pack installed.|The maximum size allowed for a symmetric key.|  \n  \n Use <xref:System.Security.Cryptography.RSACryptoServiceProvider.Decrypt%2A> to decrypt the results of this method.","nodes":[{"pos":[0,198],"content":"The following table describes the padding supported by different versions of Microsoft Windows and the maximum length of <ph id=\"ph1\">`rgb`</ph> allowed by the different combinations of operating systems and padding.","source":"The following table describes the padding supported by different versions of Microsoft Windows and the maximum length of `rgb` allowed by the different combinations of operating systems and padding."},{"pos":[205,212],"content":"Padding","nodes":[{"content":"Padding","pos":[0,7]}]},{"pos":[213,239],"content":"Operating System Supported","nodes":[{"content":"Operating System Supported","pos":[0,26]}]},{"pos":[240,271],"content":"Maximum Length of rgb Parameter","nodes":[{"content":"Maximum Length of rgb Parameter","pos":[0,31]}]},{"pos":[365,389],"content":"OAEP padding (PKCS#1 v2)","nodes":[{"content":"OAEP padding (PKCS#1 v2)","pos":[0,24]}]},{"pos":[390,410],"content":"Windows XP or later.","nodes":[{"content":"Windows XP or later.","pos":[0,20]}]},{"pos":[411,471],"content":"Modulus size -2 -2*hLen, where hLen is the size of the hash.","nodes":[{"content":"Modulus size -2 -2*hLen, where hLen is the size of the hash.","pos":[0,60]}]},{"pos":[476,507],"content":"Direct Encryption (PKCS#1 v1.5)","nodes":[{"content":"Direct Encryption (PKCS#1 v1.5)","pos":[0,31]}]},{"pos":[508,580],"content":"Microsoft Windows 2000 or later with the high encryption pack installed.","nodes":[{"content":"Microsoft Windows 2000 or later with the high encryption pack installed.","pos":[0,72]}]},{"pos":[581,643],"content":"Modulus size - 11. (11 bytes is the minimum padding possible.)","nodes":[{"content":"Modulus size - 11. (11 bytes is the minimum padding possible.)","pos":[0,62],"nodes":[{"content":"Modulus size - 11.","pos":[0,18]},{"content":"(11 bytes is the minimum padding possible.)","pos":[19,62]}]}]},{"pos":[648,696],"content":"Direct Encryption and OAEP padding not supported","nodes":[{"content":"Direct Encryption and OAEP padding not supported","pos":[0,48]}]},{"pos":[697,815],"content":"Microsoft Windows 98, Windows Millennium Edition, or Windows 2000 or later without the high encryption pack installed.","nodes":[{"content":"Microsoft Windows 98, Windows Millennium Edition, or Windows 2000 or later without the high encryption pack installed.","pos":[0,118]}]},{"pos":[816,861],"content":"The maximum size allowed for a symmetric key.","nodes":[{"content":"The maximum size allowed for a symmetric key.","pos":[0,45]}]},{"pos":[869,983],"content":"Use <xref:System.Security.Cryptography.RSACryptoServiceProvider.Decrypt%2A> to decrypt the results of this method.","nodes":[{"content":"Use <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider.Decrypt%2A&gt;</ph> to decrypt the results of this method.","pos":[0,114],"source":"Use <xref:System.Security.Cryptography.RSACryptoServiceProvider.Decrypt%2A> to decrypt the results of this method."}]}],"pos":[41615,42609],"yaml":true,"extradata":"MT"},{"content":"The data to be encrypted.","nodes":[{"pos":[0,25],"content":"The data to be encrypted.","nodes":[{"content":"The data to be encrypted.","pos":[0,25]}]}],"pos":[43941,43967],"yaml":true},{"content":"`true` to perform direct <xref href=\"System.Security.Cryptography.RSA\"></xref> encryption using OAEP padding (only available on a computer running Windows XP or later); otherwise, `false` to use PKCS#1 v1.5 padding.","nodes":[{"pos":[0,215],"content":"<ph id=\"ph1\">`true`</ph> to perform direct <ph id=\"ph2\">&lt;xref href=\"System.Security.Cryptography.RSA\"&gt;&lt;/xref&gt;</ph> encryption using OAEP padding (only available on a computer running Windows XP or later); otherwise, <ph id=\"ph3\">`false`</ph> to use PKCS#1 v1.5 padding.","source":"`true` to perform direct <xref href=\"System.Security.Cryptography.RSA\"></xref> encryption using OAEP padding (only available on a computer running Windows XP or later); otherwise, `false` to use PKCS#1 v1.5 padding."}],"pos":[44029,44247],"yaml":true},{"content":"The encrypted data.","nodes":[{"pos":[0,19],"content":"The encrypted data.","nodes":[{"content":"The encrypted data.","pos":[0,19]}]}],"pos":[44304,44324],"yaml":true},{"content":"The cryptographic service provider (CSP) cannot be acquired.  \n  \n -or-  \n  \n The length of the <code>rgb</code> parameter is greater than the maximum allowed length.  \n  \n -or-  \n  \n The <code>fOAEP</code> parameter is `true` and OAEP padding is not supported.","nodes":[{"pos":[0,60],"content":"The cryptographic service provider (CSP) cannot be acquired.","nodes":[{"content":"The cryptographic service provider (CSP) cannot be acquired.","pos":[0,60]}]},{"pos":[67,71],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[78,166],"content":"The length of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">rgb</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is greater than the maximum allowed length.","source":"The length of the <code>rgb</code> parameter is greater than the maximum allowed length."},{"pos":[173,177],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[184,261],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">fOAEP</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`true`</ph> and OAEP padding is not supported.","source":"The <code>fOAEP</code> parameter is `true` and OAEP padding is not supported."}],"pos":[44561,44833],"yaml":true},{"content":"<code>rgb</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;rgb&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>rgb</code> is `null`."}],"pos":[44935,44963],"yaml":true},{"content":"Encrypts data with the <xref href=\"System.Security.Cryptography.RSA\"></xref> algorithm using the specified padding.","nodes":[{"pos":[0,115],"content":"Encrypts data with the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.RSA\"&gt;&lt;/xref&gt;</ph> algorithm using the specified padding.","source":"Encrypts data with the <xref href=\"System.Security.Cryptography.RSA\"></xref> algorithm using the specified padding."}],"pos":[46561,46677],"yaml":true},{"content":"`padding` must be either <xref:System.Security.Cryptography.RSAEncryptionPadding.Pkcs1%2A?displayProperty=fullName> or <xref:System.Security.Cryptography.RSAEncryptionPadding.OaepSHA1%2A?displayProperty=fullName>.","nodes":[{"pos":[0,213],"content":"<ph id=\"ph1\">`padding`</ph> must be either <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.RSAEncryptionPadding.Pkcs1%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Security.Cryptography.RSAEncryptionPadding.OaepSHA1%2A?displayProperty=fullName&gt;</ph>.","source":"`padding` must be either <xref:System.Security.Cryptography.RSAEncryptionPadding.Pkcs1%2A?displayProperty=fullName> or <xref:System.Security.Cryptography.RSAEncryptionPadding.OaepSHA1%2A?displayProperty=fullName>."}],"pos":[46688,46904],"yaml":true,"extradata":"MT"},{"content":"The data to encrypt.","nodes":[{"pos":[0,20],"content":"The data to encrypt.","nodes":[{"content":"The data to encrypt.","pos":[0,20]}]}],"pos":[47108,47129],"yaml":true},{"content":"The padding.","nodes":[{"pos":[0,12],"content":"The padding.","nodes":[{"content":"The padding.","pos":[0,12]}]}],"pos":[47228,47241],"yaml":true},{"content":"The encrypted data.","nodes":[{"pos":[0,19],"content":"The encrypted data.","nodes":[{"content":"The encrypted data.","pos":[0,19]}]}],"pos":[47298,47318],"yaml":true},{"content":"<code>data</code> is `null`.  \n  \n -or-  \n  \n <code>padding</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>data</code> is `null`."},{"pos":[35,39],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[46,77],"content":"<ph id=\"ph1\">&lt;code&gt;padding&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>padding</code> is `null`."}],"pos":[47509,47593],"yaml":true},{"content":"The padding mode is not supported.","nodes":[{"pos":[0,34],"content":"The padding mode is not supported.","nodes":[{"content":"The padding mode is not supported.","pos":[0,34]}]}],"pos":[47741,47776],"yaml":true},{"content":"This method is not supported in the current version.","nodes":[{"pos":[0,52],"content":"This method is not supported in the current version.","nodes":[{"content":"This method is not supported in the current version.","pos":[0,52]}]}],"pos":[49054,49107],"yaml":true},{"content":"The data to be encrypted.","nodes":[{"pos":[0,25],"content":"The data to be encrypted.","nodes":[{"content":"The data to be encrypted.","pos":[0,25]}]}],"pos":[49255,49281],"yaml":true},{"content":"The encrypted data.","nodes":[{"pos":[0,19],"content":"The encrypted data.","nodes":[{"content":"The encrypted data.","pos":[0,19]}]}],"pos":[49338,49358],"yaml":true},{"content":"This method is not supported in the current version.","nodes":[{"pos":[0,52],"content":"This method is not supported in the current version.","nodes":[{"content":"This method is not supported in the current version.","pos":[0,52]}]}],"pos":[49554,49607],"yaml":true},{"content":"Exports a blob containing the key information associated with an <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\"></xref> object.","nodes":[{"pos":[0,147],"content":"Exports a blob containing the key information associated with an <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\"&gt;&lt;/xref&gt;</ph> object.","source":"Exports a blob containing the key information associated with an <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\"></xref> object."}],"pos":[50967,51115],"yaml":true},{"content":"The <xref:System.Security.Cryptography.RSACryptoServiceProvider.ExportCspBlob%2A> method returns a blob containing key information that is compatible with the unmanaged Microsoft Cryptographic API (CAPI).","nodes":[{"pos":[0,204],"content":"The <xref:System.Security.Cryptography.RSACryptoServiceProvider.ExportCspBlob%2A> method returns a blob containing key information that is compatible with the unmanaged Microsoft Cryptographic API (CAPI).","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider.ExportCspBlob%2A&gt;</ph> method returns a blob containing key information that is compatible with the unmanaged Microsoft Cryptographic API (CAPI).","pos":[0,204],"source":"The <xref:System.Security.Cryptography.RSACryptoServiceProvider.ExportCspBlob%2A> method returns a blob containing key information that is compatible with the unmanaged Microsoft Cryptographic API (CAPI)."}]}],"pos":[51126,51331],"yaml":true,"extradata":"MT"},{"content":"`true` to include the private key; otherwise, `false`.","nodes":[{"pos":[0,54],"content":"<ph id=\"ph1\">`true`</ph> to include the private key; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to include the private key; otherwise, `false`."}],"pos":[51579,51636],"yaml":true},{"content":"A byte array containing the key information associated with an <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\"></xref> object.","nodes":[{"pos":[0,145],"content":"A byte array containing the key information associated with an <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\"&gt;&lt;/xref&gt;</ph> object.","source":"A byte array containing the key information associated with an <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\"></xref> object."}],"pos":[51693,51839],"yaml":true},{"content":"Exports the <xref href=\"System.Security.Cryptography.RSAParameters\"></xref>.","nodes":[{"pos":[0,76],"content":"Exports the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.RSAParameters\"&gt;&lt;/xref&gt;</ph>.","source":"Exports the <xref href=\"System.Security.Cryptography.RSAParameters\"></xref>."}],"pos":[53454,53531],"yaml":true},{"content":"`true` to include private parameters; otherwise, `false`.","nodes":[{"pos":[0,57],"content":"<ph id=\"ph1\">`true`</ph> to include private parameters; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to include private parameters; otherwise, `false`."}],"pos":[54675,54735],"yaml":true},{"content":"The parameters for <xref href=\"System.Security.Cryptography.RSA\"></xref>.","nodes":[{"pos":[0,73],"content":"The parameters for <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.RSA\"&gt;&lt;/xref&gt;</ph>.","source":"The parameters for <xref href=\"System.Security.Cryptography.RSA\"></xref>."}],"pos":[54821,54895],"yaml":true},{"content":"The key cannot be exported.","nodes":[{"pos":[0,27],"content":"The key cannot be exported.","nodes":[{"content":"The key cannot be exported.","pos":[0,27]}]}],"pos":[55141,55169],"yaml":true},{"content":"Imports a blob that represents RSA key information.","nodes":[{"pos":[0,51],"content":"Imports a blob that represents RSA key information.","nodes":[{"content":"Imports a blob that represents RSA key information.","pos":[0,51]}]}],"pos":[61437,61489],"yaml":true},{"content":"The <xref:System.Security.Cryptography.RSACryptoServiceProvider.ImportCspBlob%2A> method initializes the key data of an <xref:System.Security.Cryptography.RSACryptoServiceProvider> object using a blob that is compatible with the unmanaged Microsoft Cryptographic API (CAPI).","nodes":[{"pos":[0,274],"content":"The <xref:System.Security.Cryptography.RSACryptoServiceProvider.ImportCspBlob%2A> method initializes the key data of an <xref:System.Security.Cryptography.RSACryptoServiceProvider> object using a blob that is compatible with the unmanaged Microsoft Cryptographic API (CAPI).","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider.ImportCspBlob%2A&gt;</ph> method initializes the key data of an <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> object using a blob that is compatible with the unmanaged Microsoft Cryptographic API (CAPI).","pos":[0,274],"source":"The <xref:System.Security.Cryptography.RSACryptoServiceProvider.ImportCspBlob%2A> method initializes the key data of an <xref:System.Security.Cryptography.RSACryptoServiceProvider> object using a blob that is compatible with the unmanaged Microsoft Cryptographic API (CAPI)."}]}],"pos":[61500,61775],"yaml":true,"extradata":"MT"},{"content":"A byte array that represents an RSA key blob.","nodes":[{"pos":[0,45],"content":"A byte array that represents an RSA key blob.","nodes":[{"content":"A byte array that represents an RSA key blob.","pos":[0,45]}]}],"pos":[61988,62034],"yaml":true},{"content":"Imports the specified <xref href=\"System.Security.Cryptography.RSAParameters\"></xref>.","nodes":[{"pos":[0,86],"content":"Imports the specified <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.RSAParameters\"&gt;&lt;/xref&gt;</ph>.","source":"Imports the specified <xref href=\"System.Security.Cryptography.RSAParameters\"></xref>."}],"pos":[63751,63838],"yaml":true},{"content":"The parameters for <xref href=\"System.Security.Cryptography.RSA\"></xref>.","nodes":[{"pos":[0,73],"content":"The parameters for <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.RSA\"&gt;&lt;/xref&gt;</ph>.","source":"The parameters for <xref href=\"System.Security.Cryptography.RSA\"></xref>."}],"pos":[64983,65057],"yaml":true},{"content":"The cryptographic service provider (CSP) cannot be acquired.  \n  \n -or-  \n  \n The <code>parameters</code> parameter has missing fields.","nodes":[{"pos":[0,60],"content":"The cryptographic service provider (CSP) cannot be acquired.","nodes":[{"content":"The cryptographic service provider (CSP) cannot be acquired.","pos":[0,60]}]},{"pos":[67,71],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[78,135],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">parameters</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter has missing fields.","source":"The <code>parameters</code> parameter has missing fields."}],"pos":[65303,65445],"yaml":true},{"content":"Gets the name of the key exchange algorithm available with this implementation of <xref href=\"System.Security.Cryptography.RSA\"></xref>.","nodes":[{"pos":[0,136],"content":"Gets the name of the key exchange algorithm available with this implementation of <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.RSA\"&gt;&lt;/xref&gt;</ph>.","source":"Gets the name of the key exchange algorithm available with this implementation of <xref href=\"System.Security.Cryptography.RSA\"></xref>."}],"pos":[66838,66975],"yaml":true},{"content":"This property indicates the name of the algorithm, not of the type. For example, RSA-PKCS1-KeyEx is a key exchange algorithm name.","nodes":[{"pos":[0,130],"content":"This property indicates the name of the algorithm, not of the type. For example, RSA-PKCS1-KeyEx is a key exchange algorithm name.","nodes":[{"content":"This property indicates the name of the algorithm, not of the type. For example, RSA-PKCS1-KeyEx is a key exchange algorithm name.","pos":[0,130],"nodes":[{"content":"This property indicates the name of the algorithm, not of the type.","pos":[0,67]},{"content":"For example, RSA-PKCS1-KeyEx is a key exchange algorithm name.","pos":[68,130]}]}]}],"pos":[66986,67117],"yaml":true,"extradata":"MT"},{"content":"The name of the key exchange algorithm if it exists; otherwise, `null`.","nodes":[{"pos":[0,71],"content":"The name of the key exchange algorithm if it exists; otherwise, <ph id=\"ph1\">`null`</ph>.","source":"The name of the key exchange algorithm if it exists; otherwise, `null`."}],"pos":[67250,67322],"yaml":true},{"content":"Gets the size of the current key.","nodes":[{"pos":[0,33],"content":"Gets the size of the current key.","nodes":[{"content":"Gets the size of the current key.","pos":[0,33]}]}],"pos":[68678,68712],"yaml":true},{"content":"The <xref:System.Security.Cryptography.RSACryptoServiceProvider> supports key sizes from 384 bits to 16384 bits in increments of 8 bits if you have the Microsoft Enhanced Cryptographic Provider installed.  It supports key sizes from 384 bits to 512 bits in increments of 8 bits if you have the Microsoft Base Cryptographic Provider installed.  \n  \n Valid key sizes are dependent on the cryptographic service provider (CSP) that is used by the <xref:System.Security.Cryptography.RSACryptoServiceProvider> instance. Windows CSPs enable key sizes of 384 to 16384 bits for Windows versions prior to [!INCLUDE[win81](~/includes/win81-md.md)], and key sizes of 512 to 16384 bits for [!INCLUDE[win81](~/includes/win81-md.md)]. For more information, see [CryptGenKey](http://msdn.microsoft.com/library/aa379941\\(v=vs.85\\).aspx) function in the Windows documentation.  \n  \n The <xref:System.Security.Cryptography.RSACryptoServiceProvider> class does not allow you to change key sizes using the <xref:System.Security.Cryptography.RSACryptoServiceProvider.KeySize%2A> property.  Any value written to this property will fail to update the property without error.  To change the key size, use one of the constructor overloads.","nodes":[{"pos":[0,342],"content":"The <xref:System.Security.Cryptography.RSACryptoServiceProvider> supports key sizes from 384 bits to 16384 bits in increments of 8 bits if you have the Microsoft Enhanced Cryptographic Provider installed.  It supports key sizes from 384 bits to 512 bits in increments of 8 bits if you have the Microsoft Base Cryptographic Provider installed.","nodes":[{"content":"The <xref:System.Security.Cryptography.RSACryptoServiceProvider> supports key sizes from 384 bits to 16384 bits in increments of 8 bits if you have the Microsoft Enhanced Cryptographic Provider installed.  It supports key sizes from 384 bits to 512 bits in increments of 8 bits if you have the Microsoft Base Cryptographic Provider installed.","pos":[0,342],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> supports key sizes from 384 bits to 16384 bits in increments of 8 bits if you have the Microsoft Enhanced Cryptographic Provider installed.","pos":[0,204],"source":"The <xref:System.Security.Cryptography.RSACryptoServiceProvider> supports key sizes from 384 bits to 16384 bits in increments of 8 bits if you have the Microsoft Enhanced Cryptographic Provider installed."},{"content":"It supports key sizes from 384 bits to 512 bits in increments of 8 bits if you have the Microsoft Base Cryptographic Provider installed.","pos":[206,342]}]}]},{"pos":[349,858],"content":"Valid key sizes are dependent on the cryptographic service provider (CSP) that is used by the <xref:System.Security.Cryptography.RSACryptoServiceProvider> instance. Windows CSPs enable key sizes of 384 to 16384 bits for Windows versions prior to [!INCLUDE[win81](~/includes/win81-md.md)], and key sizes of 512 to 16384 bits for [!INCLUDE[win81](~/includes/win81-md.md)]. For more information, see [CryptGenKey](http://msdn.microsoft.com/library/aa379941\\(v=vs.85\\).aspx) function in the Windows documentation.","nodes":[{"content":"Valid key sizes are dependent on the cryptographic service provider (CSP) that is used by the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> instance.","pos":[0,164],"source":"Valid key sizes are dependent on the cryptographic service provider (CSP) that is used by the <xref:System.Security.Cryptography.RSACryptoServiceProvider> instance."},{"content":"Windows CSPs enable key sizes of 384 to 16384 bits for Windows versions prior to <ph id=\"ph1\">[!INCLUDE[win81](~/includes/win81-md.md)]</ph>, and key sizes of 512 to 16384 bits for <ph id=\"ph2\">[!INCLUDE[win81](~/includes/win81-md.md)]</ph>.","pos":[165,370],"source":" Windows CSPs enable key sizes of 384 to 16384 bits for Windows versions prior to [!INCLUDE[win81](~/includes/win81-md.md)], and key sizes of 512 to 16384 bits for [!INCLUDE[win81](~/includes/win81-md.md)]."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>CryptGenKey<ept id=\"p1\">](http://msdn.microsoft.com/library/aa379941\\(v=vs.85\\).aspx)</ept> function in the Windows documentation.","pos":[371,509],"source":" For more information, see [CryptGenKey](http://msdn.microsoft.com/library/aa379941\\(v=vs.85\\).aspx) function in the Windows documentation."}]},{"pos":[865,1213],"content":"The <xref:System.Security.Cryptography.RSACryptoServiceProvider> class does not allow you to change key sizes using the <xref:System.Security.Cryptography.RSACryptoServiceProvider.KeySize%2A> property.  Any value written to this property will fail to update the property without error.  To change the key size, use one of the constructor overloads.","nodes":[{"content":"The <xref:System.Security.Cryptography.RSACryptoServiceProvider> class does not allow you to change key sizes using the <xref:System.Security.Cryptography.RSACryptoServiceProvider.KeySize%2A> property.  Any value written to this property will fail to update the property without error.  To change the key size, use one of the constructor overloads.","pos":[0,348],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> class does not allow you to change key sizes using the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider.KeySize%2A&gt;</ph> property.","pos":[0,201],"source":"The <xref:System.Security.Cryptography.RSACryptoServiceProvider> class does not allow you to change key sizes using the <xref:System.Security.Cryptography.RSACryptoServiceProvider.KeySize%2A> property."},{"content":"Any value written to this property will fail to update the property without error.","pos":[203,285]},{"content":"To change the key size, use one of the constructor overloads.","pos":[287,348]}]}]}],"pos":[68723,69945],"yaml":true,"extradata":"MT"},{"content":"The size of the key in bits.","nodes":[{"pos":[0,28],"content":"The size of the key in bits.","nodes":[{"content":"The size of the key in bits.","pos":[0,28]}]}],"pos":[70061,70090],"yaml":true},{"content":"Gets or sets a value indicating whether the key should be persisted in the cryptographic service provider (CSP).","nodes":[{"pos":[0,112],"content":"Gets or sets a value indicating whether the key should be persisted in the cryptographic service provider (CSP).","nodes":[{"content":"Gets or sets a value indicating whether the key should be persisted in the cryptographic service provider (CSP).","pos":[0,112]}]}],"pos":[72574,72687],"yaml":true},{"content":"Use this property to persist a key in a key container.  \n  \n The <xref:System.Security.Cryptography.RSACryptoServiceProvider.PersistKeyInCsp%2A> property is automatically set to `true` when you specify a key container name in the <xref:System.Security.Cryptography.CspParameters.KeyContainerName> field of a <xref:System.Security.Cryptography.CspParameters> object and use it to initialize an <xref:System.Security.Cryptography.RSACryptoServiceProvider> object by calling one of the constructors with a `parameters` parameter.  \n  \n The <xref:System.Security.Cryptography.RSACryptoServiceProvider.PersistKeyInCsp%2A> property has no effect if the <xref:System.Security.Cryptography.RSACryptoServiceProvider> object is created with a `null` key container name.","nodes":[{"pos":[0,54],"content":"Use this property to persist a key in a key container.","nodes":[{"content":"Use this property to persist a key in a key container.","pos":[0,54]}]},{"pos":[61,526],"content":"The <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider.PersistKeyInCsp%2A&gt;</ph> property is automatically set to <ph id=\"ph2\">`true`</ph> when you specify a key container name in the <ph id=\"ph3\">&lt;xref:System.Security.Cryptography.CspParameters.KeyContainerName&gt;</ph> field of a <ph id=\"ph4\">&lt;xref:System.Security.Cryptography.CspParameters&gt;</ph> object and use it to initialize an <ph id=\"ph5\">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> object by calling one of the constructors with a <ph id=\"ph6\">`parameters`</ph> parameter.","source":"The <xref:System.Security.Cryptography.RSACryptoServiceProvider.PersistKeyInCsp%2A> property is automatically set to `true` when you specify a key container name in the <xref:System.Security.Cryptography.CspParameters.KeyContainerName> field of a <xref:System.Security.Cryptography.CspParameters> object and use it to initialize an <xref:System.Security.Cryptography.RSACryptoServiceProvider> object by calling one of the constructors with a `parameters` parameter."},{"pos":[533,759],"content":"The <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider.PersistKeyInCsp%2A&gt;</ph> property has no effect if the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> object is created with a <ph id=\"ph3\">`null`</ph> key container name.","source":"The <xref:System.Security.Cryptography.RSACryptoServiceProvider.PersistKeyInCsp%2A> property has no effect if the <xref:System.Security.Cryptography.RSACryptoServiceProvider> object is created with a `null` key container name."}],"pos":[72698,73464],"yaml":true,"extradata":"MT"},{"content":"`true` if the key should be persisted in the CSP; otherwise, `false`.","nodes":[{"pos":[0,69],"content":"<ph id=\"ph1\">`true`</ph> if the key should be persisted in the CSP; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the key should be persisted in the CSP; otherwise, `false`."}],"pos":[74177,74249],"yaml":true},{"content":"Gets a value that indicates whether the <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\"></xref> object contains only a public key.","nodes":[{"pos":[0,149],"content":"Gets a value that indicates whether the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\"&gt;&lt;/xref&gt;</ph> object contains only a public key.","source":"Gets a value that indicates whether the <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\"></xref> object contains only a public key."}],"pos":[75682,75832],"yaml":true},{"content":"The <xref:System.Security.Cryptography.RSACryptoServiceProvider> class can be initialized either with a public key only or with both a public and private key.  Use the <xref:System.Security.Cryptography.RSACryptoServiceProvider.PublicOnly%2A> property to determine whether the current instance contains only a public key or both a public and private key.","nodes":[{"pos":[0,354],"content":"The <xref:System.Security.Cryptography.RSACryptoServiceProvider> class can be initialized either with a public key only or with both a public and private key.  Use the <xref:System.Security.Cryptography.RSACryptoServiceProvider.PublicOnly%2A> property to determine whether the current instance contains only a public key or both a public and private key.","nodes":[{"content":"The <xref:System.Security.Cryptography.RSACryptoServiceProvider> class can be initialized either with a public key only or with both a public and private key.  Use the <xref:System.Security.Cryptography.RSACryptoServiceProvider.PublicOnly%2A> property to determine whether the current instance contains only a public key or both a public and private key.","pos":[0,354],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> class can be initialized either with a public key only or with both a public and private key.","pos":[0,158],"source":"The <xref:System.Security.Cryptography.RSACryptoServiceProvider> class can be initialized either with a public key only or with both a public and private key."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider.PublicOnly%2A&gt;</ph> property to determine whether the current instance contains only a public key or both a public and private key.","pos":[160,354],"source":"  Use the <xref:System.Security.Cryptography.RSACryptoServiceProvider.PublicOnly%2A> property to determine whether the current instance contains only a public key or both a public and private key."}]}]}],"pos":[75843,76198],"yaml":true,"extradata":"MT"},{"content":"`true` if the <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\"></xref> object contains only a public key; otherwise, `false`.","nodes":[{"pos":[0,143],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\"&gt;&lt;/xref&gt;</ph> object contains only a public key; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\"></xref> object contains only a public key; otherwise, `false`."}],"pos":[76378,76524],"yaml":true},{"content":"Gets the name of the signature algorithm available with this implementation of <xref href=\"System.Security.Cryptography.RSA\"></xref>.","nodes":[{"pos":[0,133],"content":"Gets the name of the signature algorithm available with this implementation of <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.RSA\"&gt;&lt;/xref&gt;</ph>.","source":"Gets the name of the signature algorithm available with this implementation of <xref href=\"System.Security.Cryptography.RSA\"></xref>."}],"pos":[78075,78209],"yaml":true},{"content":"This property is used in XML digital signature classes to indicate the algorithm URI. In this implementation, this property always returns http://www.w3.org/2000/09/xmldsig#rsa-sha1.","nodes":[{"pos":[0,182],"content":"This property is used in XML digital signature classes to indicate the algorithm URI. In this implementation, this property always returns http://www.w3.org/2000/09/xmldsig#rsa-sha1.","nodes":[{"content":"This property is used in XML digital signature classes to indicate the algorithm URI. In this implementation, this property always returns http://www.w3.org/2000/09/xmldsig#rsa-sha1.","pos":[0,182],"nodes":[{"content":"This property is used in XML digital signature classes to indicate the algorithm URI.","pos":[0,85]},{"content":"In this implementation, this property always returns http://www.w3.org/2000/09/xmldsig#rsa-sha1.","pos":[86,182]}]}]}],"pos":[78220,78403],"yaml":true,"extradata":"MT"},{"content":"The name of the signature algorithm.","nodes":[{"pos":[0,36],"content":"The name of the signature algorithm.","nodes":[{"content":"The name of the signature algorithm.","pos":[0,36]}]}],"pos":[78534,78571],"yaml":true},{"content":"Computes the hash value of the specified byte array using the specified hash algorithm, and signs the resulting hash value.","nodes":[{"pos":[0,123],"content":"Computes the hash value of the specified byte array using the specified hash algorithm, and signs the resulting hash value.","nodes":[{"content":"Computes the hash value of the specified byte array using the specified hash algorithm, and signs the resulting hash value.","pos":[0,123]}]}],"pos":[80064,80188],"yaml":true},{"content":"This method creates a digital signature that is verified using the <xref:System.Security.Cryptography.RSACryptoServiceProvider.VerifyData%2A> method.  \n  \n The `halg` parameter can accept a <xref:System.String>, a <xref:System.Security.Cryptography.HashAlgorithm>, or a <xref:System.Type>.","nodes":[{"pos":[0,149],"content":"This method creates a digital signature that is verified using the <xref:System.Security.Cryptography.RSACryptoServiceProvider.VerifyData%2A> method.","nodes":[{"content":"This method creates a digital signature that is verified using the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider.VerifyData%2A&gt;</ph> method.","pos":[0,149],"source":"This method creates a digital signature that is verified using the <xref:System.Security.Cryptography.RSACryptoServiceProvider.VerifyData%2A> method."}]},{"pos":[156,289],"content":"The <ph id=\"ph1\">`halg`</ph> parameter can accept a <ph id=\"ph2\">&lt;xref:System.String&gt;</ph>, a <ph id=\"ph3\">&lt;xref:System.Security.Cryptography.HashAlgorithm&gt;</ph>, or a <ph id=\"ph4\">&lt;xref:System.Type&gt;</ph>.","source":"The `halg` parameter can accept a <xref:System.String>, a <xref:System.Security.Cryptography.HashAlgorithm>, or a <xref:System.Type>."}],"pos":[80199,80493],"yaml":true,"extradata":"MT"},{"content":"The input data for which to compute the hash.","nodes":[{"pos":[0,45],"content":"The input data for which to compute the hash.","nodes":[{"content":"The input data for which to compute the hash.","pos":[0,45]}]}],"pos":[81136,81182],"yaml":true},{"content":"The hash algorithm to use to create the hash value.","nodes":[{"pos":[0,51],"content":"The hash algorithm to use to create the hash value.","nodes":[{"content":"The hash algorithm to use to create the hash value.","pos":[0,51]}]}],"pos":[81242,81294],"yaml":true},{"content":"The <xref href=\"System.Security.Cryptography.RSA\"></xref> signature for the specified data.","nodes":[{"pos":[0,91],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.RSA\"&gt;&lt;/xref&gt;</ph> signature for the specified data.","source":"The <xref href=\"System.Security.Cryptography.RSA\"></xref> signature for the specified data."}],"pos":[81351,81443],"yaml":true},{"content":"The <code>halg</code> parameter is `null`.","nodes":[{"pos":[0,42],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">halg</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>halg</code> parameter is `null`."}],"pos":[81635,81678],"yaml":true},{"content":"The <code>halg</code> parameter is not a valid type.","nodes":[{"pos":[0,52],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">halg</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid type.","source":"The <code>halg</code> parameter is not a valid type."}],"pos":[81772,81825],"yaml":true},{"content":"Computes the hash value of the specified input stream using the specified hash algorithm, and signs the resulting hash value.","nodes":[{"pos":[0,125],"content":"Computes the hash value of the specified input stream using the specified hash algorithm, and signs the resulting hash value.","nodes":[{"content":"Computes the hash value of the specified input stream using the specified hash algorithm, and signs the resulting hash value.","pos":[0,125]}]}],"pos":[83288,83414],"yaml":true},{"content":"The `halg` parameter can accept a <xref:System.String>, a <xref:System.Security.Cryptography.HashAlgorithm>, or a <xref:System.Type>.","nodes":[{"pos":[0,133],"content":"The <ph id=\"ph1\">`halg`</ph> parameter can accept a <ph id=\"ph2\">&lt;xref:System.String&gt;</ph>, a <ph id=\"ph3\">&lt;xref:System.Security.Cryptography.HashAlgorithm&gt;</ph>, or a <ph id=\"ph4\">&lt;xref:System.Type&gt;</ph>.","source":"The `halg` parameter can accept a <xref:System.String>, a <xref:System.Security.Cryptography.HashAlgorithm>, or a <xref:System.Type>."}],"pos":[83425,83559],"yaml":true,"extradata":"MT"},{"content":"The input data for which to compute the hash.","nodes":[{"pos":[0,45],"content":"The input data for which to compute the hash.","nodes":[{"content":"The input data for which to compute the hash.","pos":[0,45]}]}],"pos":[84225,84271],"yaml":true},{"content":"The hash algorithm to use to create the hash value.","nodes":[{"pos":[0,51],"content":"The hash algorithm to use to create the hash value.","nodes":[{"content":"The hash algorithm to use to create the hash value.","pos":[0,51]}]}],"pos":[84331,84383],"yaml":true},{"content":"The <xref href=\"System.Security.Cryptography.RSA\"></xref> signature for the specified data.","nodes":[{"pos":[0,91],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.RSA\"&gt;&lt;/xref&gt;</ph> signature for the specified data.","source":"The <xref href=\"System.Security.Cryptography.RSA\"></xref> signature for the specified data."}],"pos":[84440,84532],"yaml":true},{"content":"The <code>halg</code> parameter is `null`.","nodes":[{"pos":[0,42],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">halg</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>halg</code> parameter is `null`."}],"pos":[84724,84767],"yaml":true},{"content":"The <code>halg</code> parameter is not a valid type.","nodes":[{"pos":[0,52],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">halg</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid type.","source":"The <code>halg</code> parameter is not a valid type."}],"pos":[84861,84914],"yaml":true},{"content":"Computes the hash value of a subset of the specified byte array using the specified hash algorithm, and signs the resulting hash value.","nodes":[{"pos":[0,135],"content":"Computes the hash value of a subset of the specified byte array using the specified hash algorithm, and signs the resulting hash value.","nodes":[{"content":"Computes the hash value of a subset of the specified byte array using the specified hash algorithm, and signs the resulting hash value.","pos":[0,135]}]}],"pos":[86488,86624],"yaml":true},{"content":"This method creates a digital signature that is verified using the <xref:System.Security.Cryptography.RSACryptoServiceProvider.VerifyData%2A> method.  \n  \n The `halg` parameter can accept a <xref:System.String>, a <xref:System.Security.Cryptography.HashAlgorithm>, or a <xref:System.Type>. The string value can be one of the following:  \n  \n-   The object identifier (OID) friendly name of the hash algorithm to use, either a name registered in the crypto config file or one in the Crypto API OID table.  \n  \n-   The OID value. The OID must be one recognized by the Crypto API.  \n  \n For example, you could use SignData(new byte[5], \"1.3.14.3.2.26\") or SignData(new byte[5], \"sha1\"), or SignData(new byte[5], \"SHA1\").","nodes":[{"pos":[0,149],"content":"This method creates a digital signature that is verified using the <xref:System.Security.Cryptography.RSACryptoServiceProvider.VerifyData%2A> method.","nodes":[{"content":"This method creates a digital signature that is verified using the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider.VerifyData%2A&gt;</ph> method.","pos":[0,149],"source":"This method creates a digital signature that is verified using the <xref:System.Security.Cryptography.RSACryptoServiceProvider.VerifyData%2A> method."}]},{"pos":[156,335],"content":"The `halg` parameter can accept a <xref:System.String>, a <xref:System.Security.Cryptography.HashAlgorithm>, or a <xref:System.Type>. The string value can be one of the following:","nodes":[{"content":"The <ph id=\"ph1\">`halg`</ph> parameter can accept a <ph id=\"ph2\">&lt;xref:System.String&gt;</ph>, a <ph id=\"ph3\">&lt;xref:System.Security.Cryptography.HashAlgorithm&gt;</ph>, or a <ph id=\"ph4\">&lt;xref:System.Type&gt;</ph>.","pos":[0,133],"source":"The `halg` parameter can accept a <xref:System.String>, a <xref:System.Security.Cryptography.HashAlgorithm>, or a <xref:System.Type>."},{"content":"The string value can be one of the following:","pos":[134,179]}]},{"pos":[345,503],"content":"The object identifier (OID) friendly name of the hash algorithm to use, either a name registered in the crypto config file or one in the Crypto API OID table.","nodes":[{"content":"The object identifier (OID) friendly name of the hash algorithm to use, either a name registered in the crypto config file or one in the Crypto API OID table.","pos":[0,158]}]},{"pos":[513,577],"content":"The OID value. The OID must be one recognized by the Crypto API.","nodes":[{"content":"The OID value. The OID must be one recognized by the Crypto API.","pos":[0,64],"nodes":[{"content":"The OID value.","pos":[0,14]},{"content":"The OID must be one recognized by the Crypto API.","pos":[15,64]}]}]},{"pos":[584,717],"content":"For example, you could use SignData(new byte[5], \"1.3.14.3.2.26\") or SignData(new byte[5], \"sha1\"), or SignData(new byte[5], \"SHA1\").","nodes":[{"content":"For example, you could use SignData(new byte[5], \"1.3.14.3.2.26\") or SignData(new byte[5], \"sha1\"), or SignData(new byte[5], \"SHA1\").","pos":[0,133]}]}],"pos":[86635,87369],"yaml":true,"extradata":"MT"},{"content":"The input data for which to compute the hash.","nodes":[{"pos":[0,45],"content":"The input data for which to compute the hash.","nodes":[{"content":"The input data for which to compute the hash.","pos":[0,45]}]}],"pos":[88035,88081],"yaml":true},{"content":"The offset into the array from which to begin using data.","nodes":[{"pos":[0,57],"content":"The offset into the array from which to begin using data.","nodes":[{"content":"The offset into the array from which to begin using data.","pos":[0,57]}]}],"pos":[88142,88200],"yaml":true},{"content":"The number of bytes in the array to use as data.","nodes":[{"pos":[0,48],"content":"The number of bytes in the array to use as data.","nodes":[{"content":"The number of bytes in the array to use as data.","pos":[0,48]}]}],"pos":[88260,88309],"yaml":true},{"content":"The hash algorithm to use to create the hash value.","nodes":[{"pos":[0,51],"content":"The hash algorithm to use to create the hash value.","nodes":[{"content":"The hash algorithm to use to create the hash value.","pos":[0,51]}]}],"pos":[88369,88421],"yaml":true},{"content":"The <xref href=\"System.Security.Cryptography.RSA\"></xref> signature for the specified data.","nodes":[{"pos":[0,91],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.RSA\"&gt;&lt;/xref&gt;</ph> signature for the specified data.","source":"The <xref href=\"System.Security.Cryptography.RSA\"></xref> signature for the specified data."}],"pos":[88478,88570],"yaml":true},{"content":"The <code>halg</code> parameter is `null`.","nodes":[{"pos":[0,42],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">halg</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>halg</code> parameter is `null`."}],"pos":[88762,88805],"yaml":true},{"content":"The <code>halg</code> parameter is not a valid type.","nodes":[{"pos":[0,52],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">halg</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid type.","source":"The <code>halg</code> parameter is not a valid type."}],"pos":[88899,88952],"yaml":true},{"content":"Computes the signature for the specified hash value by encrypting it with the private key.","nodes":[{"pos":[0,90],"content":"Computes the signature for the specified hash value by encrypting it with the private key.","nodes":[{"content":"Computes the signature for the specified hash value by encrypting it with the private key.","pos":[0,90]}]}],"pos":[90406,90497],"yaml":true},{"content":"This method creates a digital signature that is verified using the <xref:System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash%2A> method.  \n  \n The valid hash algorithms are <xref:System.Security.Cryptography.SHA1> and <xref:System.Security.Cryptography.MD5>. The algorithm identifier can be derived from the hash name by using the <xref:System.Security.Cryptography.CryptoConfig.MapNameToOID%2A> method.","nodes":[{"pos":[0,149],"content":"This method creates a digital signature that is verified using the <xref:System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash%2A> method.","nodes":[{"content":"This method creates a digital signature that is verified using the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash%2A&gt;</ph> method.","pos":[0,149],"source":"This method creates a digital signature that is verified using the <xref:System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash%2A> method."}]},{"pos":[156,416],"content":"The valid hash algorithms are <xref:System.Security.Cryptography.SHA1> and <xref:System.Security.Cryptography.MD5>. The algorithm identifier can be derived from the hash name by using the <xref:System.Security.Cryptography.CryptoConfig.MapNameToOID%2A> method.","nodes":[{"content":"The valid hash algorithms are <xref:System.Security.Cryptography.SHA1> and <xref:System.Security.Cryptography.MD5>. The algorithm identifier can be derived from the hash name by using the <xref:System.Security.Cryptography.CryptoConfig.MapNameToOID%2A> method.","pos":[0,260],"nodes":[{"content":"The valid hash algorithms are <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.SHA1&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.MD5&gt;</ph>.","pos":[0,115],"source":"The valid hash algorithms are <xref:System.Security.Cryptography.SHA1> and <xref:System.Security.Cryptography.MD5>."},{"content":"The algorithm identifier can be derived from the hash name by using the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.CryptoConfig.MapNameToOID%2A&gt;</ph> method.","pos":[116,260],"source":" The algorithm identifier can be derived from the hash name by using the <xref:System.Security.Cryptography.CryptoConfig.MapNameToOID%2A> method."}]}]}],"pos":[90508,90929],"yaml":true,"extradata":"MT"},{"content":"The hash value of the data to be signed.","nodes":[{"pos":[0,40],"content":"The hash value of the data to be signed.","nodes":[{"content":"The hash value of the data to be signed.","pos":[0,40]}]}],"pos":[91928,91969],"yaml":true},{"content":"The hash algorithm identifier (OID) used to create the hash value of the data.","nodes":[{"pos":[0,78],"content":"The hash algorithm identifier (OID) used to create the hash value of the data.","nodes":[{"content":"The hash algorithm identifier (OID) used to create the hash value of the data.","pos":[0,78]}]}],"pos":[92028,92107],"yaml":true},{"content":"The <xref href=\"System.Security.Cryptography.RSA\"></xref> signature for the specified hash value.","nodes":[{"pos":[0,97],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.RSA\"&gt;&lt;/xref&gt;</ph> signature for the specified hash value.","source":"The <xref href=\"System.Security.Cryptography.RSA\"></xref> signature for the specified hash value."}],"pos":[92164,92262],"yaml":true},{"content":"The <code>rgbHash</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">rgbHash</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>rgbHash</code> parameter is `null`."}],"pos":[92454,92500],"yaml":true},{"content":"The cryptographic service provider (CSP) cannot be acquired.  \n  \n -or-  \n  \n There is no private key.","nodes":[{"pos":[0,60],"content":"The cryptographic service provider (CSP) cannot be acquired.","nodes":[{"content":"The cryptographic service provider (CSP) cannot be acquired.","pos":[0,60]}]},{"pos":[67,71],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[78,102],"content":"There is no private key.","nodes":[{"content":"There is no private key.","pos":[0,24]}]}],"pos":[92648,92757],"yaml":true},{"content":"Computes the signature for the specified hash value by encrypting it with the private key using the specified padding.","nodes":[{"pos":[0,118],"content":"Computes the signature for the specified hash value by encrypting it with the private key using the specified padding.","nodes":[{"content":"Computes the signature for the specified hash value by encrypting it with the private key using the specified padding.","pos":[0,118]}]}],"pos":[94553,94672],"yaml":true},{"content":"The hash value of the data to be signed.","nodes":[{"pos":[0,40],"content":"The hash value of the data to be signed.","nodes":[{"content":"The hash value of the data to be signed.","pos":[0,40]}]}],"pos":[94938,94979],"yaml":true},{"content":"The hash algorithm name used to create the hash value of the data.","nodes":[{"pos":[0,66],"content":"The hash algorithm name used to create the hash value of the data.","nodes":[{"content":"The hash algorithm name used to create the hash value of the data.","pos":[0,66]}]}],"pos":[95081,95148],"yaml":true},{"content":"The padding.","nodes":[{"pos":[0,12],"content":"The padding.","nodes":[{"content":"The padding.","pos":[0,12]}]}],"pos":[95246,95259],"yaml":true},{"content":"The <xref href=\"System.Security.Cryptography.RSA\"></xref> signature for the specified hash value.","nodes":[{"pos":[0,97],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.RSA\"&gt;&lt;/xref&gt;</ph> signature for the specified hash value.","source":"The <xref href=\"System.Security.Cryptography.RSA\"></xref> signature for the specified hash value."}],"pos":[95316,95414],"yaml":true},{"content":"<code>hashAlgorithm</code> is `null` or <xref href=\"System.String.Empty\"></xref>.","nodes":[{"pos":[0,81],"content":"<ph id=\"ph1\">&lt;code&gt;hashAlgorithm&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> or <ph id=\"ph3\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>.","source":"<code>hashAlgorithm</code> is `null` or <xref href=\"System.String.Empty\"></xref>."}],"pos":[95598,95680],"yaml":true},{"content":"<code>hash</code> is `null`.  \n  \n -or-  \n  \n <code>padding</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;hash&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>hash</code> is `null`."},{"pos":[35,39],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[46,77],"content":"<ph id=\"ph1\">&lt;code&gt;padding&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>padding</code> is `null`."}],"pos":[95782,95866],"yaml":true},{"content":"<code>padding</code> does not equal <xref href=\"System.Security.Cryptography.RSASignaturePadding.Pkcs1\"></xref>.","nodes":[{"pos":[0,112],"content":"<ph id=\"ph1\">&lt;code&gt;padding&lt;/code&gt;</ph> does not equal <ph id=\"ph2\">&lt;xref href=\"System.Security.Cryptography.RSASignaturePadding.Pkcs1\"&gt;&lt;/xref&gt;</ph>.","source":"<code>padding</code> does not equal <xref href=\"System.Security.Cryptography.RSASignaturePadding.Pkcs1\"></xref>."}],"pos":[96014,96127],"yaml":true},{"content":"Gets or sets a value indicating whether the key should be persisted in the computer's key store instead of the user profile store.","nodes":[{"pos":[0,130],"content":"Gets or sets a value indicating whether the key should be persisted in the computer's key store instead of the user profile store.","nodes":[{"content":"Gets or sets a value indicating whether the key should be persisted in the computer's key store instead of the user profile store.","pos":[0,130]}]}],"pos":[97374,97505],"yaml":true},{"content":"Setting this property to `true` is equivalent to passing the <xref:System.Security.Cryptography.CspProviderFlags.UseMachineKeyStore> flag to a <xref:System.Security.Cryptography.CspParameters> object. The <xref:System.Security.Cryptography.RSACryptoServiceProvider.UseMachineKeyStore%2A> property applies to all code in the current application domain, whereas the <xref:System.Security.Cryptography.CspParameters> object applies only to classes that explicitly reference it. These settings are useful when impersonating or running under an account whose user profile is not loaded. Setting <xref:System.Security.Cryptography.RSACryptoServiceProvider.UseMachineKeyStore%2A> affects the key store location only if <xref:System.Security.Cryptography.RSACryptoServiceProvider> is initialized with no parameters.","nodes":[{"pos":[0,807],"content":"Setting this property to `true` is equivalent to passing the <xref:System.Security.Cryptography.CspProviderFlags.UseMachineKeyStore> flag to a <xref:System.Security.Cryptography.CspParameters> object. The <xref:System.Security.Cryptography.RSACryptoServiceProvider.UseMachineKeyStore%2A> property applies to all code in the current application domain, whereas the <xref:System.Security.Cryptography.CspParameters> object applies only to classes that explicitly reference it. These settings are useful when impersonating or running under an account whose user profile is not loaded. Setting <xref:System.Security.Cryptography.RSACryptoServiceProvider.UseMachineKeyStore%2A> affects the key store location only if <xref:System.Security.Cryptography.RSACryptoServiceProvider> is initialized with no parameters.","nodes":[{"content":"Setting this property to <ph id=\"ph1\">`true`</ph> is equivalent to passing the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.CspProviderFlags.UseMachineKeyStore&gt;</ph> flag to a <ph id=\"ph3\">&lt;xref:System.Security.Cryptography.CspParameters&gt;</ph> object.","pos":[0,200],"source":"Setting this property to `true` is equivalent to passing the <xref:System.Security.Cryptography.CspProviderFlags.UseMachineKeyStore> flag to a <xref:System.Security.Cryptography.CspParameters> object."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider.UseMachineKeyStore%2A&gt;</ph> property applies to all code in the current application domain, whereas the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.CspParameters&gt;</ph> object applies only to classes that explicitly reference it.","pos":[201,474],"source":" The <xref:System.Security.Cryptography.RSACryptoServiceProvider.UseMachineKeyStore%2A> property applies to all code in the current application domain, whereas the <xref:System.Security.Cryptography.CspParameters> object applies only to classes that explicitly reference it."},{"content":"These settings are useful when impersonating or running under an account whose user profile is not loaded.","pos":[475,581]},{"content":"Setting <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider.UseMachineKeyStore%2A&gt;</ph> affects the key store location only if <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> is initialized with no parameters.","pos":[582,807],"source":" Setting <xref:System.Security.Cryptography.RSACryptoServiceProvider.UseMachineKeyStore%2A> affects the key store location only if <xref:System.Security.Cryptography.RSACryptoServiceProvider> is initialized with no parameters."}]}],"pos":[97516,98324],"yaml":true,"extradata":"MT"},{"content":"`true` if the key should be persisted in the computer key store; otherwise, `false`.","nodes":[{"pos":[0,84],"content":"<ph id=\"ph1\">`true`</ph> if the key should be persisted in the computer key store; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the key should be persisted in the computer key store; otherwise, `false`."}],"pos":[99207,99294],"yaml":true},{"content":"Verifies that a digital signature is valid by determining the hash value in the signature using the provided public key and comparing it to the hash value of the provided data.","nodes":[{"pos":[0,176],"content":"Verifies that a digital signature is valid by determining the hash value in the signature using the provided public key and comparing it to the hash value of the provided data.","nodes":[{"content":"Verifies that a digital signature is valid by determining the hash value in the signature using the provided public key and comparing it to the hash value of the provided data.","pos":[0,176]}]}],"pos":[100929,101106],"yaml":true},{"content":"This method verifies the <xref:System.Security.Cryptography.RSA> digital signature produced by the <xref:System.Security.Cryptography.RSACryptoServiceProvider.SignData%2A> method. The signature is verified by obtaining the hash value from the signature using the public key it was signed with, and comparing that value to the hash value of the provided data.  \n  \n The `halg` parameter can accept a <xref:System.String>, a <xref:System.Security.Cryptography.HashAlgorithm>, or a <xref:System.Type>.","nodes":[{"pos":[0,358],"content":"This method verifies the <xref:System.Security.Cryptography.RSA> digital signature produced by the <xref:System.Security.Cryptography.RSACryptoServiceProvider.SignData%2A> method. The signature is verified by obtaining the hash value from the signature using the public key it was signed with, and comparing that value to the hash value of the provided data.","nodes":[{"content":"This method verifies the <xref:System.Security.Cryptography.RSA> digital signature produced by the <xref:System.Security.Cryptography.RSACryptoServiceProvider.SignData%2A> method. The signature is verified by obtaining the hash value from the signature using the public key it was signed with, and comparing that value to the hash value of the provided data.","pos":[0,358],"nodes":[{"content":"This method verifies the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RSA&gt;</ph> digital signature produced by the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider.SignData%2A&gt;</ph> method.","pos":[0,179],"source":"This method verifies the <xref:System.Security.Cryptography.RSA> digital signature produced by the <xref:System.Security.Cryptography.RSACryptoServiceProvider.SignData%2A> method."},{"content":"The signature is verified by obtaining the hash value from the signature using the public key it was signed with, and comparing that value to the hash value of the provided data.","pos":[180,358]}]}]},{"pos":[365,498],"content":"The <ph id=\"ph1\">`halg`</ph> parameter can accept a <ph id=\"ph2\">&lt;xref:System.String&gt;</ph>, a <ph id=\"ph3\">&lt;xref:System.Security.Cryptography.HashAlgorithm&gt;</ph>, or a <ph id=\"ph4\">&lt;xref:System.Type&gt;</ph>.","source":"The `halg` parameter can accept a <xref:System.String>, a <xref:System.Security.Cryptography.HashAlgorithm>, or a <xref:System.Type>."}],"pos":[101117,101620],"yaml":true,"extradata":"MT"},{"content":"The data that was signed.","nodes":[{"pos":[0,25],"content":"The data that was signed.","nodes":[{"content":"The data that was signed.","pos":[0,25]}]}],"pos":[102797,102823],"yaml":true},{"content":"The name of the hash algorithm used to create the hash value of the data.","nodes":[{"pos":[0,73],"content":"The name of the hash algorithm used to create the hash value of the data.","nodes":[{"content":"The name of the hash algorithm used to create the hash value of the data.","pos":[0,73]}]}],"pos":[102883,102957],"yaml":true},{"content":"The signature data to be verified.","nodes":[{"pos":[0,34],"content":"The signature data to be verified.","nodes":[{"content":"The signature data to be verified.","pos":[0,34]}]}],"pos":[103022,103057],"yaml":true},{"content":"`true` if the signature is valid; otherwise, `false`.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">`true`</ph> if the signature is valid; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the signature is valid; otherwise, `false`."}],"pos":[103115,103171],"yaml":true},{"content":"The <code>halg</code> parameter is `null`.","nodes":[{"pos":[0,42],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">halg</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>halg</code> parameter is `null`."}],"pos":[103365,103408],"yaml":true},{"content":"The <code>halg</code> parameter is not a valid type.","nodes":[{"pos":[0,52],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">halg</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid type.","source":"The <code>halg</code> parameter is not a valid type."}],"pos":[103502,103555],"yaml":true},{"content":"Verifies that a digital signature is valid by determining the hash value in the signature using the provided public key and comparing it to the provided hash value.","nodes":[{"pos":[0,164],"content":"Verifies that a digital signature is valid by determining the hash value in the signature using the provided public key and comparing it to the provided hash value.","nodes":[{"content":"Verifies that a digital signature is valid by determining the hash value in the signature using the provided public key and comparing it to the provided hash value.","pos":[0,164]}]}],"pos":[105087,105252],"yaml":true},{"content":"This method verifies the <xref:System.Security.Cryptography.RSA> digital signature produced by the <xref:System.Security.Cryptography.RSACryptoServiceProvider.SignHash%2A> method. The signature is verified by obtaining the hash value from the signature using the public key it was signed with, and comparing that value to the hash value of the provided data.  \n  \n The valid hash algorithms are <xref:System.Security.Cryptography.SHA1> and <xref:System.Security.Cryptography.MD5>. The algorithm identifier can be derived from the hash name by using the <xref:System.Security.Cryptography.CryptoConfig.MapNameToOID%2A> method.","nodes":[{"pos":[0,358],"content":"This method verifies the <xref:System.Security.Cryptography.RSA> digital signature produced by the <xref:System.Security.Cryptography.RSACryptoServiceProvider.SignHash%2A> method. The signature is verified by obtaining the hash value from the signature using the public key it was signed with, and comparing that value to the hash value of the provided data.","nodes":[{"content":"This method verifies the <xref:System.Security.Cryptography.RSA> digital signature produced by the <xref:System.Security.Cryptography.RSACryptoServiceProvider.SignHash%2A> method. The signature is verified by obtaining the hash value from the signature using the public key it was signed with, and comparing that value to the hash value of the provided data.","pos":[0,358],"nodes":[{"content":"This method verifies the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RSA&gt;</ph> digital signature produced by the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider.SignHash%2A&gt;</ph> method.","pos":[0,179],"source":"This method verifies the <xref:System.Security.Cryptography.RSA> digital signature produced by the <xref:System.Security.Cryptography.RSACryptoServiceProvider.SignHash%2A> method."},{"content":"The signature is verified by obtaining the hash value from the signature using the public key it was signed with, and comparing that value to the hash value of the provided data.","pos":[180,358]}]}]},{"pos":[365,625],"content":"The valid hash algorithms are <xref:System.Security.Cryptography.SHA1> and <xref:System.Security.Cryptography.MD5>. The algorithm identifier can be derived from the hash name by using the <xref:System.Security.Cryptography.CryptoConfig.MapNameToOID%2A> method.","nodes":[{"content":"The valid hash algorithms are <xref:System.Security.Cryptography.SHA1> and <xref:System.Security.Cryptography.MD5>. The algorithm identifier can be derived from the hash name by using the <xref:System.Security.Cryptography.CryptoConfig.MapNameToOID%2A> method.","pos":[0,260],"nodes":[{"content":"The valid hash algorithms are <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.SHA1&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.MD5&gt;</ph>.","pos":[0,115],"source":"The valid hash algorithms are <xref:System.Security.Cryptography.SHA1> and <xref:System.Security.Cryptography.MD5>."},{"content":"The algorithm identifier can be derived from the hash name by using the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.CryptoConfig.MapNameToOID%2A&gt;</ph> method.","pos":[116,260],"source":" The algorithm identifier can be derived from the hash name by using the <xref:System.Security.Cryptography.CryptoConfig.MapNameToOID%2A> method."}]}]}],"pos":[105263,105893],"yaml":true,"extradata":"MT"},{"content":"The hash value of the signed data.","nodes":[{"pos":[0,34],"content":"The hash value of the signed data.","nodes":[{"content":"The hash value of the signed data.","pos":[0,34]}]}],"pos":[107074,107109],"yaml":true},{"content":"The hash algorithm identifier (OID) used to create the hash value of the data.","nodes":[{"pos":[0,78],"content":"The hash algorithm identifier (OID) used to create the hash value of the data.","nodes":[{"content":"The hash algorithm identifier (OID) used to create the hash value of the data.","pos":[0,78]}]}],"pos":[107168,107247],"yaml":true},{"content":"The signature data to be verified.","nodes":[{"pos":[0,34],"content":"The signature data to be verified.","nodes":[{"content":"The signature data to be verified.","pos":[0,34]}]}],"pos":[107315,107350],"yaml":true},{"content":"`true` if the signature is valid; otherwise, `false`.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">`true`</ph> if the signature is valid; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the signature is valid; otherwise, `false`."}],"pos":[107408,107464],"yaml":true},{"content":"The <code>rgbHash</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>rgbSignature</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">rgbHash</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>rgbHash</code> parameter is `null`."},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,113],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">rgbSignature</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>rgbSignature</code> parameter is `null`."}],"pos":[107658,107778],"yaml":true},{"content":"The cryptographic service provider (CSP) cannot be acquired.  \n  \n -or-  \n  \n The signature cannot be verified.","nodes":[{"pos":[0,60],"content":"The cryptographic service provider (CSP) cannot be acquired.","nodes":[{"content":"The cryptographic service provider (CSP) cannot be acquired.","pos":[0,60]}]},{"pos":[67,71],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[78,111],"content":"The signature cannot be verified.","nodes":[{"content":"The signature cannot be verified.","pos":[0,33]}]}],"pos":[107926,108044],"yaml":true},{"content":"Verifies that a digital signature is valid by determining the hash value in the signature using the specified hashing algorithm and padding, and comparing it to the provided hash value.","nodes":[{"pos":[0,185],"content":"Verifies that a digital signature is valid by determining the hash value in the signature using the specified hashing algorithm and padding, and comparing it to the provided hash value.","nodes":[{"content":"Verifies that a digital signature is valid by determining the hash value in the signature using the specified hashing algorithm and padding, and comparing it to the provided hash value.","pos":[0,185]}]}],"pos":[109918,110104],"yaml":true},{"content":"The hash value of the signed data.","nodes":[{"pos":[0,34],"content":"The hash value of the signed data.","nodes":[{"content":"The hash value of the signed data.","pos":[0,34]}]}],"pos":[110388,110423],"yaml":true},{"content":"The signature data to be verified.","nodes":[{"pos":[0,34],"content":"The signature data to be verified.","nodes":[{"content":"The signature data to be verified.","pos":[0,34]}]}],"pos":[110488,110523],"yaml":true},{"content":"The hash algorithm name used to create the hash value.","nodes":[{"pos":[0,54],"content":"The hash algorithm name used to create the hash value.","nodes":[{"content":"The hash algorithm name used to create the hash value.","pos":[0,54]}]}],"pos":[110625,110680],"yaml":true},{"content":"The padding.","nodes":[{"pos":[0,12],"content":"The padding.","nodes":[{"content":"The padding.","pos":[0,12]}]}],"pos":[110778,110791],"yaml":true},{"content":"`true` if the signature is valid; otherwise, `false`.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">`true`</ph> if the signature is valid; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the signature is valid; otherwise, `false`."}],"pos":[110849,110905],"yaml":true},{"content":"<code>hashAlgorithm</code> is `null` or <xref href=\"System.String.Empty\"></xref>.","nodes":[{"pos":[0,81],"content":"<ph id=\"ph1\">&lt;code&gt;hashAlgorithm&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> or <ph id=\"ph3\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>.","source":"<code>hashAlgorithm</code> is `null` or <xref href=\"System.String.Empty\"></xref>."}],"pos":[111091,111173],"yaml":true},{"content":"<code>hash</code> is `null`.  \n  \n -or-  \n  \n <code>padding</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;hash&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>hash</code> is `null`."},{"pos":[35,39],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[46,77],"content":"<ph id=\"ph1\">&lt;code&gt;padding&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>padding</code> is `null`."}],"pos":[111275,111359],"yaml":true},{"content":"<code>padding</code> does not equal <xref href=\"System.Security.Cryptography.RSASignaturePadding.Pkcs1\"></xref>.","nodes":[{"pos":[0,112],"content":"<ph id=\"ph1\">&lt;code&gt;padding&lt;/code&gt;</ph> does not equal <ph id=\"ph2\">&lt;xref href=\"System.Security.Cryptography.RSASignaturePadding.Pkcs1\"&gt;&lt;/xref&gt;</ph>.","source":"<code>padding</code> does not equal <xref href=\"System.Security.Cryptography.RSASignaturePadding.Pkcs1\"></xref>."}],"pos":[111507,111620],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.RSACryptoServiceProvider\n  commentId: T:System.Security.Cryptography.RSACryptoServiceProvider\n  id: RSACryptoServiceProvider\n  children:\n  - System.Security.Cryptography.RSACryptoServiceProvider.#ctor\n  - System.Security.Cryptography.RSACryptoServiceProvider.#ctor(System.Int32)\n  - System.Security.Cryptography.RSACryptoServiceProvider.#ctor(System.Security.Cryptography.CspParameters)\n  - System.Security.Cryptography.RSACryptoServiceProvider.#ctor(System.Int32,System.Security.Cryptography.CspParameters)\n  - System.Security.Cryptography.RSACryptoServiceProvider.CspKeyContainerInfo\n  - System.Security.Cryptography.RSACryptoServiceProvider.Decrypt(System.Byte[],System.Boolean)\n  - System.Security.Cryptography.RSACryptoServiceProvider.Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  - System.Security.Cryptography.RSACryptoServiceProvider.DecryptValue(System.Byte[])\n  - System.Security.Cryptography.RSACryptoServiceProvider.Dispose(System.Boolean)\n  - System.Security.Cryptography.RSACryptoServiceProvider.Encrypt(System.Byte[],System.Boolean)\n  - System.Security.Cryptography.RSACryptoServiceProvider.Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  - System.Security.Cryptography.RSACryptoServiceProvider.EncryptValue(System.Byte[])\n  - System.Security.Cryptography.RSACryptoServiceProvider.ExportCspBlob(System.Boolean)\n  - System.Security.Cryptography.RSACryptoServiceProvider.ExportParameters(System.Boolean)\n  - System.Security.Cryptography.RSACryptoServiceProvider.Finalize\n  - System.Security.Cryptography.RSACryptoServiceProvider.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.RSACryptoServiceProvider.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.RSACryptoServiceProvider.ImportCspBlob(System.Byte[])\n  - System.Security.Cryptography.RSACryptoServiceProvider.ImportParameters(System.Security.Cryptography.RSAParameters)\n  - System.Security.Cryptography.RSACryptoServiceProvider.KeyExchangeAlgorithm\n  - System.Security.Cryptography.RSACryptoServiceProvider.KeySize\n  - System.Security.Cryptography.RSACryptoServiceProvider.LegalKeySizes\n  - System.Security.Cryptography.RSACryptoServiceProvider.PersistKeyInCsp\n  - System.Security.Cryptography.RSACryptoServiceProvider.PublicOnly\n  - System.Security.Cryptography.RSACryptoServiceProvider.SignatureAlgorithm\n  - System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.Byte[],System.Object)\n  - System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.IO.Stream,System.Object)\n  - System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.Byte[],System.Int32,System.Int32,System.Object)\n  - System.Security.Cryptography.RSACryptoServiceProvider.SignHash(System.Byte[],System.String)\n  - System.Security.Cryptography.RSACryptoServiceProvider.SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  - System.Security.Cryptography.RSACryptoServiceProvider.UseMachineKeyStore\n  - System.Security.Cryptography.RSACryptoServiceProvider.VerifyData(System.Byte[],System.Object,System.Byte[])\n  - System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash(System.Byte[],System.String,System.Byte[])\n  - System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  langs:\n  - csharp\n  name: RSACryptoServiceProvider\n  nameWithType: RSACryptoServiceProvider\n  fullName: System.Security.Cryptography.RSACryptoServiceProvider\n  type: Class\n  assemblies:\n  - System.Security.Cryptography.Csp\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Performs asymmetric encryption and decryption using the implementation of the <xref href=\"System.Security.Cryptography.RSA\"></xref> algorithm provided by the cryptographic service provider (CSP). This class cannot be inherited.\n  remarks: \"This is the default implementation of <xref:System.Security.Cryptography.RSA>.  \\n  \\n The <xref:System.Security.Cryptography.RSACryptoServiceProvider> supports key sizes from 384 bits to 16384 bits in increments of 8 bits if you have the Microsoft Enhanced Cryptographic Provider installed.  It supports key sizes from 384 bits to 512 bits in increments of 8 bits if you have the Microsoft Base Cryptographic Provider installed.  \\n  \\n Valid key sizes are dependent on the cryptographic service provider (CSP) that is used by the <xref:System.Security.Cryptography.RSACryptoServiceProvider> instance. Windows CSPs enable keys sizes of 384 to 16384 bits for Windows versions prior to [!INCLUDE[win81](~/includes/win81-md.md)], and key sizes of 512 to 16384 bits for [!INCLUDE[win81](~/includes/win81-md.md)]. For more information, see [CryptGenKey](http://msdn.microsoft.com/library/aa379941\\\\(v=vs.85\\\\).aspx) function in the Windows documentation.  \\n  \\n## Interoperation with the Microsoft Cryptographic API (CAPI)  \\n Unlike the RSA implementation in unmanaged CAPI, the <xref:System.Security.Cryptography.RSACryptoServiceProvider> class reverses the order of an encrypted array of bytes after encryption and before decryption.  By default, data encrypted by the <xref:System.Security.Cryptography.RSACryptoServiceProvider> class cannot be decrypted by the CAPI `CryptDecrypt` function and data encrypted by the CAPI `CryptEncrypt` method cannot be decrypted by the <xref:System.Security.Cryptography.RSACryptoServiceProvider> class.  \\n  \\n If you do not compensate for the reverse ordering when interoperating between APIs, the <xref:System.Security.Cryptography.RSACryptoServiceProvider> class throws a <xref:System.Security.Cryptography.CryptographicException>.  \\n  \\n To interoperate with CAPI, you must manually reverse the order of encrypted bytes before the encrypted data interoperates with another API.  You can easily reverse the order of a managed byte array by calling the <xref:System.Array.Reverse%2A?displayProperty=fullName> method.\"\n  example:\n  - \"The following code example uses the <xref:System.Security.Cryptography.RSACryptoServiceProvider> class to encrypt a string into an array of bytes and then decrypt the bytes back into a string.  \\n  \\n [!code-cpp[System.Security.Cryptography.RSACryptoServiceProvider#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.RSACryptoServiceProvider/CPP/sample.cpp#1)]\\n [!code-csharp[System.Security.Cryptography.RSACryptoServiceProvider#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.RSACryptoServiceProvider/CS/sample.cs#1)]\\n [!code-vb[System.Security.Cryptography.RSACryptoServiceProvider#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.RSACryptoServiceProvider/VB/sample.vb#1)]  \\n  \\n The following code example exports the key information created using the <xref:System.Security.Cryptography.RSACryptoServiceProvider> into an <xref:System.Security.Cryptography.RSAParameters> object.  \\n  \\n [!code-cpp[System.Security.Cryptography.RSACryptoServiceProvider.ExportParameters#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.RSACryptoServiceProvider.ExportParameters/CPP/sample.cpp#1)]\\n [!code-csharp[System.Security.Cryptography.RSACryptoServiceProvider.ExportParameters#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.RSACryptoServiceProvider.ExportParameters/CS/sample.cs#1)]\\n [!code-vb[System.Security.Cryptography.RSACryptoServiceProvider.ExportParameters#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.RSACryptoServiceProvider.ExportParameters/VB/sample.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class RSACryptoServiceProvider : System.Security.Cryptography.RSA, System.Security.Cryptography.ICspAsymmetricAlgorithm\n  inheritance:\n  - System.Object\n  - System.Security.Cryptography.AsymmetricAlgorithm\n  - System.Security.Cryptography.RSA\n  implements:\n  - System.Security.Cryptography.ICspAsymmetricAlgorithm\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Security.Cryptography.AsymmetricAlgorithm.Clear\n  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n  - System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue\n  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue\n  - System.Security.Cryptography.RSA.Create\n  - System.Security.Cryptography.RSA.Create(System.Int32)\n  - System.Security.Cryptography.RSA.Create(System.Security.Cryptography.RSAParameters)\n  - System.Security.Cryptography.RSA.Create(System.String)\n  - System.Security.Cryptography.RSA.FromXmlString(System.String)\n  - System.Security.Cryptography.RSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  - System.Security.Cryptography.RSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  - System.Security.Cryptography.RSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  - System.Security.Cryptography.RSA.ToXmlString(System.Boolean)\n  - System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  - System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  - System.Security.Cryptography.RSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.#ctor\n  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  name: RSACryptoServiceProvider()\n  nameWithType: RSACryptoServiceProvider.RSACryptoServiceProvider()\n  fullName: RSACryptoServiceProvider.RSACryptoServiceProvider()\n  type: Constructor\n  assemblies:\n  - System.Security.Cryptography.Csp\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\"></xref> class using the default key.\n  remarks: \"If no default key is found, a new key is created.  \\n  \\n This constructor creates an <xref:System.Security.Cryptography.KeyNumber.Exchange> key pair suitable to encrypt session keys so that they can be safely stored and exchanged with other users.  The generated key corresponds to a key generated using the `AT_KEYEXCHANGE` value used in the unmanaged Microsoft Cryptographic API (CAPI).\"\n  example:\n  - \"The following code example uses the <xref:System.Security.Cryptography.RSACryptoServiceProvider> class to encrypt a string into an array of bytes and then decrypt the bytes back into a string.  \\n  \\n [!code-cpp[System.Security.Cryptography.RSACryptoServiceProvider#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.RSACryptoServiceProvider/CPP/sample.cpp#1)]\\n [!code-csharp[System.Security.Cryptography.RSACryptoServiceProvider#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.RSACryptoServiceProvider/CS/sample.cs#1)]\\n [!code-vb[System.Security.Cryptography.RSACryptoServiceProvider#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.RSACryptoServiceProvider/VB/sample.vb#1)]\"\n  syntax:\n    content: public RSACryptoServiceProvider ();\n    parameters: []\n  overload: System.Security.Cryptography.RSACryptoServiceProvider.#ctor*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The cryptographic service provider (CSP) cannot be acquired.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.#ctor(System.Int32)\n  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  name: RSACryptoServiceProvider(Int32)\n  nameWithType: RSACryptoServiceProvider.RSACryptoServiceProvider(Int32)\n  fullName: RSACryptoServiceProvider.RSACryptoServiceProvider(Int32)\n  type: Constructor\n  assemblies:\n  - System.Security.Cryptography.Csp\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\"></xref> class with the specified key size.\n  remarks: \"If no default key is found, a new key is created.  \\n  \\n This constructor creates an <xref:System.Security.Cryptography.KeyNumber.Exchange> key pair suitable to encrypt session keys so that they can be safely stored and exchanged with other users.  The generated key corresponds to a key generated using the `AT_KEYEXCHANGE` value used in the unmanaged Microsoft Cryptographic API (CAPI).\"\n  example:\n  - \"The following code example creates a <xref:System.Security.Cryptography.RSACryptoServiceProvider>, generates a new key, and stores it in a key container.  \\n  \\n [!code-cpp[Cryptography.RSACSP.ctor-int32-2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.RSACSP.ctor-int32-2/CPP/example.cpp#1)]\\n [!code-csharp[Cryptography.RSACSP.ctor-int32-2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.RSACSP.ctor-int32-2/CS/example.cs#1)]\\n [!code-vb[Cryptography.RSACSP.ctor-int32-2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.RSACSP.ctor-int32-2/VB/example.vb#1)]\"\n  syntax:\n    content: public RSACryptoServiceProvider (int dwKeySize);\n    parameters:\n    - id: dwKeySize\n      type: System.Int32\n      description: The size of the key to use in bits.\n  overload: System.Security.Cryptography.RSACryptoServiceProvider.#ctor*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The cryptographic service provider (CSP) cannot be acquired.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.#ctor(System.Security.Cryptography.CspParameters)\n  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.#ctor(System.Security.Cryptography.CspParameters)\n  id: '#ctor(System.Security.Cryptography.CspParameters)'\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  name: RSACryptoServiceProvider(CspParameters)\n  nameWithType: RSACryptoServiceProvider.RSACryptoServiceProvider(CspParameters)\n  fullName: RSACryptoServiceProvider.RSACryptoServiceProvider(CspParameters)\n  type: Constructor\n  assemblies:\n  - System.Security.Cryptography.Csp\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\"></xref> class with the specified parameters.\n  remarks: \"This constructor creates or reuses a key container specified using the <xref:System.Security.Cryptography.CspParameters.KeyContainerName> field of the `parameters` parameter.  \\n  \\n By default, this constructor creates an <xref:System.Security.Cryptography.KeyNumber.Exchange> key pair suitable to encrypt session keys so that they can be safely stored and exchanged with other users.  The generated key corresponds to a key generated using the `AT_KEYEXCHANGE` value used in the unmanaged Microsoft Cryptographic API (CAPI).  \\n  \\n You can create a <xref:System.Security.Cryptography.KeyNumber.Signature> key pair suitable for authenticating (digitally signed) messages or files by setting the <xref:System.Security.Cryptography.CspParameters.KeyNumber> field of the `parameters` parameter to the <xref:System.Security.Cryptography.KeyNumber.Signature> value. This type of key corresponds to the `AT_SIGNATURE` value used in CAPI.  \\n  \\n If you create an <xref:System.Security.Cryptography.RSACryptoServiceProvider> object with the <xref:System.Security.Cryptography.KeyNumber.Exchange> value specified and then create another <xref:System.Security.Cryptography.RSACryptoServiceProvider> object with the <xref:System.Security.Cryptography.KeyNumber.Signature> value specified, both keys will be placed in a single container if both objects specify the same key container name.  \\n  \\n To create a key that is compatible with stong-name signing using the <xref:System.Security.Cryptography.RSACryptoServiceProvider> class, you must create a <xref:System.Security.Cryptography.KeyNumber.Signature> key pair.\"\n  example:\n  - \"The following code example creates an <xref:System.Security.Cryptography.RSACryptoServiceProvider> object, generates a new key, and stores it in a key container.  \\n  \\n [!code-cpp[Cryptography.RSACSP.ctor-csp#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.RSACSP.ctor-csp/CPP/example.cpp#1)]\\n [!code-csharp[Cryptography.RSACSP.ctor-csp#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.RSACSP.ctor-csp/CS/example.cs#1)]\\n [!code-vb[Cryptography.RSACSP.ctor-csp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.RSACSP.ctor-csp/VB/example.vb#1)]\"\n  syntax:\n    content: public RSACryptoServiceProvider (System.Security.Cryptography.CspParameters parameters);\n    parameters:\n    - id: parameters\n      type: System.Security.Cryptography.CspParameters\n      description: The parameters to be passed to the cryptographic service provider (CSP).\n  overload: System.Security.Cryptography.RSACryptoServiceProvider.#ctor*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The CSP cannot be acquired.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.#ctor(System.Int32,System.Security.Cryptography.CspParameters)\n  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.#ctor(System.Int32,System.Security.Cryptography.CspParameters)\n  id: '#ctor(System.Int32,System.Security.Cryptography.CspParameters)'\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  name: RSACryptoServiceProvider(Int32, CspParameters)\n  nameWithType: RSACryptoServiceProvider.RSACryptoServiceProvider(Int32, CspParameters)\n  fullName: RSACryptoServiceProvider.RSACryptoServiceProvider(Int32, CspParameters)\n  type: Constructor\n  assemblies:\n  - System.Security.Cryptography.Csp\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\"></xref> class with the specified key size and parameters.\n  remarks: \"This constructor creates or reuses a key container specified using the <xref:System.Security.Cryptography.CspParameters.KeyContainerName> field of the `parameters` parameter.  \\n  \\n By default, this constructor creates an <xref:System.Security.Cryptography.KeyNumber.Exchange> key pair suitable to encrypt session keys so that they can be safely stored and exchanged with other users.  The generated key corresponds to a key generated using the `AT_KEYEXCHANGE` value used in the unmanaged Microsoft Cryptographic API (CAPI).  \\n  \\n You can create a <xref:System.Security.Cryptography.KeyNumber.Signature> key pair suitable for authenticating (digitally signed) messages or files by setting the <xref:System.Security.Cryptography.CspParameters.KeyNumber> field of the `parameters` parameter to the <xref:System.Security.Cryptography.KeyNumber.Signature> value. This type of key corresponds to the `AT_SIGNATURE` value used in CAPI.  \\n  \\n If you create an <xref:System.Security.Cryptography.RSACryptoServiceProvider> object with the <xref:System.Security.Cryptography.KeyNumber.Exchange> value specified and then create another <xref:System.Security.Cryptography.RSACryptoServiceProvider> object with the <xref:System.Security.Cryptography.KeyNumber.Signature> value specified, both keys will be placed in a single container if both objects specify the same key container name.  \\n  \\n To create a key that is compatible with stong-name signing using the <xref:System.Security.Cryptography.RSACryptoServiceProvider> class, you must create a <xref:System.Security.Cryptography.KeyNumber.Signature> key pair.\"\n  example:\n  - \"The following code example creates a <xref:System.Security.Cryptography.RSACryptoServiceProvider>, generates a new key, and stores it in a key container.  \\n  \\n [!code-cpp[Cryptography.RSACSP.ctor-int32-csp#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.RSACSP.ctor-int32-csp/CPP/example.cpp#1)]\\n [!code-csharp[Cryptography.RSACSP.ctor-int32-csp#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.RSACSP.ctor-int32-csp/CS/example.cs#1)]\\n [!code-vb[Cryptography.RSACSP.ctor-int32-csp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.RSACSP.ctor-int32-csp/VB/example.vb#1)]\"\n  syntax:\n    content: public RSACryptoServiceProvider (int dwKeySize, System.Security.Cryptography.CspParameters parameters);\n    parameters:\n    - id: dwKeySize\n      type: System.Int32\n      description: The size of the key to use in bits.\n    - id: parameters\n      type: System.Security.Cryptography.CspParameters\n      description: The parameters to be passed to the cryptographic service provider (CSP).\n  overload: System.Security.Cryptography.RSACryptoServiceProvider.#ctor*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"The CSP cannot be acquired.  \\n  \\n -or-  \\n  \\n The key cannot be created.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.CspKeyContainerInfo\n  commentId: P:System.Security.Cryptography.RSACryptoServiceProvider.CspKeyContainerInfo\n  id: CspKeyContainerInfo\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  name: CspKeyContainerInfo\n  nameWithType: RSACryptoServiceProvider.CspKeyContainerInfo\n  fullName: RSACryptoServiceProvider.CspKeyContainerInfo\n  type: Property\n  assemblies:\n  - System.Security.Cryptography.Csp\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Gets a <xref href=\"System.Security.Cryptography.CspKeyContainerInfo\"></xref> object that describes additional information about a cryptographic key pair.\n  remarks: \"Use the <xref:System.Security.Cryptography.RSACryptoServiceProvider.CspKeyContainerInfo%2A> property to retrieve additional information about a cryptographic key pair.  The returned <xref:System.Security.Cryptography.CspKeyContainerInfo> object describes whether the key is exportable, and specifies the key container name, information about the provider, and other information.  \\n  \\n In cases where a random key is generated, a key container will not be created until you call a method that uses the key.  Some properties of the <xref:System.Security.Cryptography.CspKeyContainerInfo> object returned by the <xref:System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo%2A> property will throw a <xref:System.Security.Cryptography.CryptographicException> if a key container has not been created.  To make sure that a key container has been created, call a method such as <xref:System.Security.Cryptography.RSACryptoServiceProvider.Encrypt%2A>, <xref:System.Security.Cryptography.RSACryptoServiceProvider.Decrypt%2A>, <xref:System.Security.Cryptography.RSACryptoServiceProvider.SignData%2A>, <xref:System.Security.Cryptography.DSACryptoServiceProvider.SignHash%2A>, and so on, before you call the <xref:System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo%2A> property.\"\n  example:\n  - \"The following code example demonstrates how to call the <xref:System.Security.Cryptography.CspKeyContainerInfo> property.  \\n  \\n [!code-cpp[Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo/CPP/sample.cpp#1)]\\n [!code-csharp[Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo/CS/sample.cs#1)]\\n [!code-vb[Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo/VB/sample.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public System.Security.Cryptography.CspKeyContainerInfo CspKeyContainerInfo { get; }\n    return:\n      type: System.Security.Cryptography.CspKeyContainerInfo\n      description: A <xref href=\"System.Security.Cryptography.CspKeyContainerInfo\"></xref> object that describes additional information about a cryptographic key pair.\n  overload: System.Security.Cryptography.RSACryptoServiceProvider.CspKeyContainerInfo*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.Decrypt(System.Byte[],System.Boolean)\n  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.Decrypt(System.Byte[],System.Boolean)\n  id: Decrypt(System.Byte[],System.Boolean)\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  name: Decrypt(Byte[], Boolean)\n  nameWithType: RSACryptoServiceProvider.Decrypt(Byte[], Boolean)\n  fullName: RSACryptoServiceProvider.Decrypt(Byte[], Boolean)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Csp\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Decrypts data with the <xref href=\"System.Security.Cryptography.RSA\"></xref> algorithm.\n  remarks: Use <xref:System.Security.Cryptography.RSACryptoServiceProvider.Encrypt%2A> to encrypt data for decryption with this method.\n  example:\n  - \"The following code example encrypts and decrypts data.  \\n  \\n This example uses the <xref:System.Text.ASCIIEncoding> class; however, the <xref:System.Text.UnicodeEncoding> class may be preferable in large data operations. The encrypted value can be saved as an `nvarchar` data type in Microsoft SQL Server 2005.  \\n  \\n [!code-cpp[Cryptography.RSACSP.Decrypt#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.RSACSP.Decrypt/CPP/example.cpp#1)]\\n [!code-csharp[Cryptography.RSACSP.Decrypt#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.RSACSP.Decrypt/CS/example.cs#1)]\\n [!code-vb[Cryptography.RSACSP.Decrypt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.RSACSP.Decrypt/VB/example.vb#1)]\"\n  syntax:\n    content: public byte[] Decrypt (byte[] rgb, bool fOAEP);\n    parameters:\n    - id: rgb\n      type: System.Byte[]\n      description: The data to be decrypted.\n    - id: fOAEP\n      type: System.Boolean\n      description: '`true` to perform direct <xref href=\"System.Security.Cryptography.RSA\"></xref> decryption using OAEP padding (only available on a computer running Microsoft Windows XP or later); otherwise, `false` to use PKCS#1 v1.5 padding.'\n    return:\n      type: System.Byte[]\n      description: The decrypted data, which is the original plain text before encryption.\n  overload: System.Security.Cryptography.RSACryptoServiceProvider.Decrypt*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"The cryptographic service provider (CSP) cannot be acquired.  \\n  \\n -or-  \\n  \\n The <code>fOAEP</code> parameter is `true` and the length of the <code>rgb</code> parameter is greater than <xref href=\\\"System.Security.Cryptography.RSACryptoServiceProvider.KeySize\\\"></xref>.  \\n  \\n -or-  \\n  \\n The <code>fOAEP</code> parameter is `true` and OAEP is not supported.  \\n  \\n -or-  \\n  \\n The key does not match the encrypted data. However, the exception wording may not be accurate. For example, it may say <code>Not enough storage is available to process this command</code>.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>rgb</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  id: Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  name: Decrypt(Byte[], RSAEncryptionPadding)\n  nameWithType: RSACryptoServiceProvider.Decrypt(Byte[], RSAEncryptionPadding)\n  fullName: RSACryptoServiceProvider.Decrypt(Byte[], RSAEncryptionPadding)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Csp\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Decrypts data that was previously encrypted with the <xref href=\"System.Security.Cryptography.RSA\"></xref> algorithm by using the specified padding.\n  remarks: '`padding` must be either <xref:System.Security.Cryptography.RSAEncryptionPadding.Pkcs1%2A?displayProperty=fullName> or <xref:System.Security.Cryptography.RSAEncryptionPadding.OaepSHA1%2A?displayProperty=fullName>.'\n  syntax:\n    content: public override byte[] Decrypt (byte[] data, System.Security.Cryptography.RSAEncryptionPadding padding);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: The data to decrypt.\n    - id: padding\n      type: System.Security.Cryptography.RSAEncryptionPadding\n      description: The padding.\n    return:\n      type: System.Byte[]\n      description: The decrypted data.\n  overload: System.Security.Cryptography.RSACryptoServiceProvider.Decrypt*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>data</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>padding</code> is `null`.\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The padding mode is not supported.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.DecryptValue(System.Byte[])\n  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.DecryptValue(System.Byte[])\n  id: DecryptValue(System.Byte[])\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  name: DecryptValue(Byte[])\n  nameWithType: RSACryptoServiceProvider.DecryptValue(Byte[])\n  fullName: RSACryptoServiceProvider.DecryptValue(Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: This method is not supported in the current version.\n  syntax:\n    content: public override byte[] DecryptValue (byte[] rgb);\n    parameters:\n    - id: rgb\n      type: System.Byte[]\n      description: The data to be decrypted.\n    return:\n      type: System.Byte[]\n      description: The decrypted data, which is the original plain text before encryption.\n  overload: System.Security.Cryptography.RSACryptoServiceProvider.DecryptValue*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not supported in the current version.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.Dispose(System.Boolean)\n  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: RSACryptoServiceProvider.Dispose(Boolean)\n  fullName: RSACryptoServiceProvider.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Csp\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: ''\n  overload: System.Security.Cryptography.RSACryptoServiceProvider.Dispose*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.Encrypt(System.Byte[],System.Boolean)\n  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.Encrypt(System.Byte[],System.Boolean)\n  id: Encrypt(System.Byte[],System.Boolean)\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  name: Encrypt(Byte[], Boolean)\n  nameWithType: RSACryptoServiceProvider.Encrypt(Byte[], Boolean)\n  fullName: RSACryptoServiceProvider.Encrypt(Byte[], Boolean)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Csp\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Encrypts data with the <xref href=\"System.Security.Cryptography.RSA\"></xref> algorithm.\n  remarks: \"The following table describes the padding supported by different versions of Microsoft Windows and the maximum length of `rgb` allowed by the different combinations of operating systems and padding.  \\n  \\n|Padding|Operating System Supported|Maximum Length of rgb Parameter|  \\n|-------------|--------------------------------|-------------------------------------|  \\n|OAEP padding (PKCS#1 v2)|Windows XP or later.|Modulus size -2 -2*hLen, where hLen is the size of the hash.|  \\n|Direct Encryption (PKCS#1 v1.5)|Microsoft Windows 2000 or later with the high encryption pack installed.|Modulus size - 11. (11 bytes is the minimum padding possible.)|  \\n|Direct Encryption and OAEP padding not supported|Microsoft Windows 98, Windows Millennium Edition, or Windows 2000 or later without the high encryption pack installed.|The maximum size allowed for a symmetric key.|  \\n  \\n Use <xref:System.Security.Cryptography.RSACryptoServiceProvider.Decrypt%2A> to decrypt the results of this method.\"\n  example:\n  - \"The following code example initializes an <xref:System.Security.Cryptography.RSACryptoServiceProvider> object to the value of a public key (sent by another party), generates a session key using the <xref:System.Security.Cryptography.RijndaelManaged> algorithm, and then encrypts the session key using the <xref:System.Security.Cryptography.RSACryptoServiceProvider> object.  Using this scheme, the session key could be sent back to the owner of the private RSA key and the two parties could use the session key to exchange encrypted data.  \\n  \\n [!code-cpp[System.Security.Cryptography.RSACryptoServiceProvider.Encrypt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.RSACryptoServiceProvider.Encrypt/CPP/sample.cpp#1)]\\n [!code-csharp[System.Security.Cryptography.RSACryptoServiceProvider.Encrypt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.RSACryptoServiceProvider.Encrypt/CS/sample.cs#1)]\\n [!code-vb[System.Security.Cryptography.RSACryptoServiceProvider.Encrypt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.RSACryptoServiceProvider.Encrypt/VB/sample.vb#1)]\"\n  syntax:\n    content: public byte[] Encrypt (byte[] rgb, bool fOAEP);\n    parameters:\n    - id: rgb\n      type: System.Byte[]\n      description: The data to be encrypted.\n    - id: fOAEP\n      type: System.Boolean\n      description: '`true` to perform direct <xref href=\"System.Security.Cryptography.RSA\"></xref> encryption using OAEP padding (only available on a computer running Windows XP or later); otherwise, `false` to use PKCS#1 v1.5 padding.'\n    return:\n      type: System.Byte[]\n      description: The encrypted data.\n  overload: System.Security.Cryptography.RSACryptoServiceProvider.Encrypt*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"The cryptographic service provider (CSP) cannot be acquired.  \\n  \\n -or-  \\n  \\n The length of the <code>rgb</code> parameter is greater than the maximum allowed length.  \\n  \\n -or-  \\n  \\n The <code>fOAEP</code> parameter is `true` and OAEP padding is not supported.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>rgb</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  id: Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  name: Encrypt(Byte[], RSAEncryptionPadding)\n  nameWithType: RSACryptoServiceProvider.Encrypt(Byte[], RSAEncryptionPadding)\n  fullName: RSACryptoServiceProvider.Encrypt(Byte[], RSAEncryptionPadding)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Csp\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Encrypts data with the <xref href=\"System.Security.Cryptography.RSA\"></xref> algorithm using the specified padding.\n  remarks: '`padding` must be either <xref:System.Security.Cryptography.RSAEncryptionPadding.Pkcs1%2A?displayProperty=fullName> or <xref:System.Security.Cryptography.RSAEncryptionPadding.OaepSHA1%2A?displayProperty=fullName>.'\n  syntax:\n    content: public override byte[] Encrypt (byte[] data, System.Security.Cryptography.RSAEncryptionPadding padding);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: The data to encrypt.\n    - id: padding\n      type: System.Security.Cryptography.RSAEncryptionPadding\n      description: The padding.\n    return:\n      type: System.Byte[]\n      description: The encrypted data.\n  overload: System.Security.Cryptography.RSACryptoServiceProvider.Encrypt*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>data</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>padding</code> is `null`.\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The padding mode is not supported.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.EncryptValue(System.Byte[])\n  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.EncryptValue(System.Byte[])\n  id: EncryptValue(System.Byte[])\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  name: EncryptValue(Byte[])\n  nameWithType: RSACryptoServiceProvider.EncryptValue(Byte[])\n  fullName: RSACryptoServiceProvider.EncryptValue(Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: This method is not supported in the current version.\n  syntax:\n    content: public override byte[] EncryptValue (byte[] rgb);\n    parameters:\n    - id: rgb\n      type: System.Byte[]\n      description: The data to be encrypted.\n    return:\n      type: System.Byte[]\n      description: The encrypted data.\n  overload: System.Security.Cryptography.RSACryptoServiceProvider.EncryptValue*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not supported in the current version.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.ExportCspBlob(System.Boolean)\n  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.ExportCspBlob(System.Boolean)\n  id: ExportCspBlob(System.Boolean)\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  name: ExportCspBlob(Boolean)\n  nameWithType: RSACryptoServiceProvider.ExportCspBlob(Boolean)\n  fullName: RSACryptoServiceProvider.ExportCspBlob(Boolean)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Csp\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Exports a blob containing the key information associated with an <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\"></xref> object.\n  remarks: The <xref:System.Security.Cryptography.RSACryptoServiceProvider.ExportCspBlob%2A> method returns a blob containing key information that is compatible with the unmanaged Microsoft Cryptographic API (CAPI).\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public byte[] ExportCspBlob (bool includePrivateParameters);\n    parameters:\n    - id: includePrivateParameters\n      type: System.Boolean\n      description: '`true` to include the private key; otherwise, `false`.'\n    return:\n      type: System.Byte[]\n      description: A byte array containing the key information associated with an <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\"></xref> object.\n  overload: System.Security.Cryptography.RSACryptoServiceProvider.ExportCspBlob*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.ExportParameters(System.Boolean)\n  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.ExportParameters(System.Boolean)\n  id: ExportParameters(System.Boolean)\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  name: ExportParameters(Boolean)\n  nameWithType: RSACryptoServiceProvider.ExportParameters(Boolean)\n  fullName: RSACryptoServiceProvider.ExportParameters(Boolean)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Csp\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Exports the <xref href=\"System.Security.Cryptography.RSAParameters\"></xref>.\n  remarks: ''\n  example:\n  - \"The following code example exports the key information created using the <xref:System.Security.Cryptography.RSACryptoServiceProvider> into an <xref:System.Security.Cryptography.RSAParameters> object.  \\n  \\n [!code-cpp[System.Security.Cryptography.RSACryptoServiceProvider.ExportParameters#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.RSACryptoServiceProvider.ExportParameters/CPP/sample.cpp#1)]\\n [!code-csharp[System.Security.Cryptography.RSACryptoServiceProvider.ExportParameters#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.RSACryptoServiceProvider.ExportParameters/CS/sample.cs#1)]\\n [!code-vb[System.Security.Cryptography.RSACryptoServiceProvider.ExportParameters#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.RSACryptoServiceProvider.ExportParameters/VB/sample.vb#1)]\"\n  syntax:\n    content: public override System.Security.Cryptography.RSAParameters ExportParameters (bool includePrivateParameters);\n    parameters:\n    - id: includePrivateParameters\n      type: System.Boolean\n      description: '`true` to include private parameters; otherwise, `false`.'\n    return:\n      type: System.Security.Cryptography.RSAParameters\n      description: The parameters for <xref href=\"System.Security.Cryptography.RSA\"></xref>.\n  overload: System.Security.Cryptography.RSACryptoServiceProvider.ExportParameters*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The key cannot be exported.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.Finalize\n  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.Finalize\n  id: Finalize\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  name: Finalize()\n  nameWithType: RSACryptoServiceProvider.Finalize()\n  fullName: RSACryptoServiceProvider.Finalize()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: ~RSACryptoServiceProvider ();\n    parameters: []\n  overload: System.Security.Cryptography.RSACryptoServiceProvider.Finalize*\n  exceptions: []\n  version:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  id: HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  name: HashData(Byte[], Int32, Int32, HashAlgorithmName)\n  nameWithType: RSACryptoServiceProvider.HashData(Byte[], Int32, Int32, HashAlgorithmName)\n  fullName: RSACryptoServiceProvider.HashData(Byte[], Int32, Int32, HashAlgorithmName)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Csp\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override byte[] HashData (byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: ''\n    - id: offset\n      type: System.Int32\n      description: ''\n    - id: count\n      type: System.Int32\n      description: ''\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: ''\n    return:\n      type: System.Byte[]\n      description: ''\n  overload: System.Security.Cryptography.RSACryptoServiceProvider.HashData*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  id: HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  name: HashData(Stream, HashAlgorithmName)\n  nameWithType: RSACryptoServiceProvider.HashData(Stream, HashAlgorithmName)\n  fullName: RSACryptoServiceProvider.HashData(Stream, HashAlgorithmName)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Csp\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override byte[] HashData (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.IO.Stream\n      description: ''\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: ''\n    return:\n      type: System.Byte[]\n      description: ''\n  overload: System.Security.Cryptography.RSACryptoServiceProvider.HashData*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.ImportCspBlob(System.Byte[])\n  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.ImportCspBlob(System.Byte[])\n  id: ImportCspBlob(System.Byte[])\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  name: ImportCspBlob(Byte[])\n  nameWithType: RSACryptoServiceProvider.ImportCspBlob(Byte[])\n  fullName: RSACryptoServiceProvider.ImportCspBlob(Byte[])\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Csp\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Imports a blob that represents RSA key information.\n  remarks: The <xref:System.Security.Cryptography.RSACryptoServiceProvider.ImportCspBlob%2A> method initializes the key data of an <xref:System.Security.Cryptography.RSACryptoServiceProvider> object using a blob that is compatible with the unmanaged Microsoft Cryptographic API (CAPI).\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public void ImportCspBlob (byte[] keyBlob);\n    parameters:\n    - id: keyBlob\n      type: System.Byte[]\n      description: A byte array that represents an RSA key blob.\n  overload: System.Security.Cryptography.RSACryptoServiceProvider.ImportCspBlob*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.ImportParameters(System.Security.Cryptography.RSAParameters)\n  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.ImportParameters(System.Security.Cryptography.RSAParameters)\n  id: ImportParameters(System.Security.Cryptography.RSAParameters)\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  name: ImportParameters(RSAParameters)\n  nameWithType: RSACryptoServiceProvider.ImportParameters(RSAParameters)\n  fullName: RSACryptoServiceProvider.ImportParameters(RSAParameters)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Csp\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Imports the specified <xref href=\"System.Security.Cryptography.RSAParameters\"></xref>.\n  remarks: ''\n  example:\n  - \"The following code example imports key information created from an <xref:System.Security.Cryptography.RSAParameters> object into an <xref:System.Security.Cryptography.RSACryptoServiceProvider> object.  \\n  \\n [!code-cpp[System.Security.Cryptography.RSACryptoServiceProvider.ImportParameters#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.RSACryptoServiceProvider.ImportParameters/CPP/sample.cpp#1)]\\n [!code-csharp[System.Security.Cryptography.RSACryptoServiceProvider.ImportParameters#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.RSACryptoServiceProvider.ImportParameters/CS/sample.cs#1)]\\n [!code-vb[System.Security.Cryptography.RSACryptoServiceProvider.ImportParameters#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.RSACryptoServiceProvider.ImportParameters/VB/sample.vb#1)]\"\n  syntax:\n    content: public override void ImportParameters (System.Security.Cryptography.RSAParameters parameters);\n    parameters:\n    - id: parameters\n      type: System.Security.Cryptography.RSAParameters\n      description: The parameters for <xref href=\"System.Security.Cryptography.RSA\"></xref>.\n  overload: System.Security.Cryptography.RSACryptoServiceProvider.ImportParameters*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"The cryptographic service provider (CSP) cannot be acquired.  \\n  \\n -or-  \\n  \\n The <code>parameters</code> parameter has missing fields.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.KeyExchangeAlgorithm\n  commentId: P:System.Security.Cryptography.RSACryptoServiceProvider.KeyExchangeAlgorithm\n  id: KeyExchangeAlgorithm\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  name: KeyExchangeAlgorithm\n  nameWithType: RSACryptoServiceProvider.KeyExchangeAlgorithm\n  fullName: RSACryptoServiceProvider.KeyExchangeAlgorithm\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: Gets the name of the key exchange algorithm available with this implementation of <xref href=\"System.Security.Cryptography.RSA\"></xref>.\n  remarks: This property indicates the name of the algorithm, not of the type. For example, RSA-PKCS1-KeyEx is a key exchange algorithm name.\n  syntax:\n    content: public override string KeyExchangeAlgorithm { get; }\n    return:\n      type: System.String\n      description: The name of the key exchange algorithm if it exists; otherwise, `null`.\n  overload: System.Security.Cryptography.RSACryptoServiceProvider.KeyExchangeAlgorithm*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.KeySize\n  commentId: P:System.Security.Cryptography.RSACryptoServiceProvider.KeySize\n  id: KeySize\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  name: KeySize\n  nameWithType: RSACryptoServiceProvider.KeySize\n  fullName: RSACryptoServiceProvider.KeySize\n  type: Property\n  assemblies:\n  - System.Security.Cryptography.Csp\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Gets the size of the current key.\n  remarks: \"The <xref:System.Security.Cryptography.RSACryptoServiceProvider> supports key sizes from 384 bits to 16384 bits in increments of 8 bits if you have the Microsoft Enhanced Cryptographic Provider installed.  It supports key sizes from 384 bits to 512 bits in increments of 8 bits if you have the Microsoft Base Cryptographic Provider installed.  \\n  \\n Valid key sizes are dependent on the cryptographic service provider (CSP) that is used by the <xref:System.Security.Cryptography.RSACryptoServiceProvider> instance. Windows CSPs enable key sizes of 384 to 16384 bits for Windows versions prior to [!INCLUDE[win81](~/includes/win81-md.md)], and key sizes of 512 to 16384 bits for [!INCLUDE[win81](~/includes/win81-md.md)]. For more information, see [CryptGenKey](http://msdn.microsoft.com/library/aa379941\\\\(v=vs.85\\\\).aspx) function in the Windows documentation.  \\n  \\n The <xref:System.Security.Cryptography.RSACryptoServiceProvider> class does not allow you to change key sizes using the <xref:System.Security.Cryptography.RSACryptoServiceProvider.KeySize%2A> property.  Any value written to this property will fail to update the property without error.  To change the key size, use one of the constructor overloads.\"\n  syntax:\n    content: public override int KeySize { get; }\n    return:\n      type: System.Int32\n      description: The size of the key in bits.\n  overload: System.Security.Cryptography.RSACryptoServiceProvider.KeySize*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.LegalKeySizes\n  commentId: P:System.Security.Cryptography.RSACryptoServiceProvider.LegalKeySizes\n  id: LegalKeySizes\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  name: LegalKeySizes\n  nameWithType: RSACryptoServiceProvider.LegalKeySizes\n  fullName: RSACryptoServiceProvider.LegalKeySizes\n  type: Property\n  assemblies:\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override System.Security.Cryptography.KeySizes[] LegalKeySizes { get; }\n    return:\n      type: System.Security.Cryptography.KeySizes[]\n      description: ''\n  overload: System.Security.Cryptography.RSACryptoServiceProvider.LegalKeySizes*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.PersistKeyInCsp\n  commentId: P:System.Security.Cryptography.RSACryptoServiceProvider.PersistKeyInCsp\n  id: PersistKeyInCsp\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  name: PersistKeyInCsp\n  nameWithType: RSACryptoServiceProvider.PersistKeyInCsp\n  fullName: RSACryptoServiceProvider.PersistKeyInCsp\n  type: Property\n  assemblies:\n  - System.Security.Cryptography.Csp\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Gets or sets a value indicating whether the key should be persisted in the cryptographic service provider (CSP).\n  remarks: \"Use this property to persist a key in a key container.  \\n  \\n The <xref:System.Security.Cryptography.RSACryptoServiceProvider.PersistKeyInCsp%2A> property is automatically set to `true` when you specify a key container name in the <xref:System.Security.Cryptography.CspParameters.KeyContainerName> field of a <xref:System.Security.Cryptography.CspParameters> object and use it to initialize an <xref:System.Security.Cryptography.RSACryptoServiceProvider> object by calling one of the constructors with a `parameters` parameter.  \\n  \\n The <xref:System.Security.Cryptography.RSACryptoServiceProvider.PersistKeyInCsp%2A> property has no effect if the <xref:System.Security.Cryptography.RSACryptoServiceProvider> object is created with a `null` key container name.\"\n  example:\n  - \"The following code example creates an <xref:System.Security.Cryptography.RSACryptoServiceProvider> object and persists the key to a key container.  \\n  \\n [!code-cpp[Cryptography.RSACSP.PersistKey#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.RSACSP.PersistKey/CPP/example.cpp#1)]\\n [!code-csharp[Cryptography.RSACSP.PersistKey#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.RSACSP.PersistKey/CS/example.cs#1)]\\n [!code-vb[Cryptography.RSACSP.PersistKey#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.RSACSP.PersistKey/VB/example.vb#1)]\"\n  syntax:\n    content: public bool PersistKeyInCsp { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if the key should be persisted in the CSP; otherwise, `false`.'\n  overload: System.Security.Cryptography.RSACryptoServiceProvider.PersistKeyInCsp*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.PublicOnly\n  commentId: P:System.Security.Cryptography.RSACryptoServiceProvider.PublicOnly\n  id: PublicOnly\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  name: PublicOnly\n  nameWithType: RSACryptoServiceProvider.PublicOnly\n  fullName: RSACryptoServiceProvider.PublicOnly\n  type: Property\n  assemblies:\n  - System.Security.Cryptography.Csp\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Gets a value that indicates whether the <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\"></xref> object contains only a public key.\n  remarks: The <xref:System.Security.Cryptography.RSACryptoServiceProvider> class can be initialized either with a public key only or with both a public and private key.  Use the <xref:System.Security.Cryptography.RSACryptoServiceProvider.PublicOnly%2A> property to determine whether the current instance contains only a public key or both a public and private key.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public bool PublicOnly { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\"></xref> object contains only a public key; otherwise, `false`.'\n  overload: System.Security.Cryptography.RSACryptoServiceProvider.PublicOnly*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.SignatureAlgorithm\n  commentId: P:System.Security.Cryptography.RSACryptoServiceProvider.SignatureAlgorithm\n  id: SignatureAlgorithm\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  name: SignatureAlgorithm\n  nameWithType: RSACryptoServiceProvider.SignatureAlgorithm\n  fullName: RSACryptoServiceProvider.SignatureAlgorithm\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: Gets the name of the signature algorithm available with this implementation of <xref href=\"System.Security.Cryptography.RSA\"></xref>.\n  remarks: This property is used in XML digital signature classes to indicate the algorithm URI. In this implementation, this property always returns http://www.w3.org/2000/09/xmldsig#rsa-sha1.\n  syntax:\n    content: public override string SignatureAlgorithm { get; }\n    return:\n      type: System.String\n      description: The name of the signature algorithm.\n  overload: System.Security.Cryptography.RSACryptoServiceProvider.SignatureAlgorithm*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.Byte[],System.Object)\n  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.Byte[],System.Object)\n  id: SignData(System.Byte[],System.Object)\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  name: SignData(Byte[], Object)\n  nameWithType: RSACryptoServiceProvider.SignData(Byte[], Object)\n  fullName: RSACryptoServiceProvider.SignData(Byte[], Object)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Csp\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Computes the hash value of the specified byte array using the specified hash algorithm, and signs the resulting hash value.\n  remarks: \"This method creates a digital signature that is verified using the <xref:System.Security.Cryptography.RSACryptoServiceProvider.VerifyData%2A> method.  \\n  \\n The `halg` parameter can accept a <xref:System.String>, a <xref:System.Security.Cryptography.HashAlgorithm>, or a <xref:System.Type>.\"\n  example:\n  - \"The following code example signs and verifies data.  \\n  \\n [!code-cpp[Cryptography.RSACSP.SignData2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.RSACSP.SignData2/CPP/example.cpp#1)]\\n [!code-csharp[Cryptography.RSACSP.SignData2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.RSACSP.SignData2/CS/example.cs#1)]\\n [!code-vb[Cryptography.RSACSP.SignData2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.RSACSP.SignData2/VB/example.vb#1)]\"\n  syntax:\n    content: public byte[] SignData (byte[] buffer, object halg);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: The input data for which to compute the hash.\n    - id: halg\n      type: System.Object\n      description: The hash algorithm to use to create the hash value.\n    return:\n      type: System.Byte[]\n      description: The <xref href=\"System.Security.Cryptography.RSA\"></xref> signature for the specified data.\n  overload: System.Security.Cryptography.RSACryptoServiceProvider.SignData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>halg</code> parameter is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>halg</code> parameter is not a valid type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.IO.Stream,System.Object)\n  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.IO.Stream,System.Object)\n  id: SignData(System.IO.Stream,System.Object)\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  name: SignData(Stream, Object)\n  nameWithType: RSACryptoServiceProvider.SignData(Stream, Object)\n  fullName: RSACryptoServiceProvider.SignData(Stream, Object)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Csp\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Computes the hash value of the specified input stream using the specified hash algorithm, and signs the resulting hash value.\n  remarks: The `halg` parameter can accept a <xref:System.String>, a <xref:System.Security.Cryptography.HashAlgorithm>, or a <xref:System.Type>.\n  example:\n  - \"The following code example signs and verifies data.  \\n  \\n [!code-cpp[Cryptography.RSACSP.SignData3#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.RSACSP.SignData3/CPP/example.cpp#1)]\\n [!code-csharp[Cryptography.RSACSP.SignData3#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.RSACSP.SignData3/CS/example.cs#1)]\\n [!code-vb[Cryptography.RSACSP.SignData3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.RSACSP.SignData3/VB/example.vb#1)]\"\n  syntax:\n    content: public byte[] SignData (System.IO.Stream inputStream, object halg);\n    parameters:\n    - id: inputStream\n      type: System.IO.Stream\n      description: The input data for which to compute the hash.\n    - id: halg\n      type: System.Object\n      description: The hash algorithm to use to create the hash value.\n    return:\n      type: System.Byte[]\n      description: The <xref href=\"System.Security.Cryptography.RSA\"></xref> signature for the specified data.\n  overload: System.Security.Cryptography.RSACryptoServiceProvider.SignData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>halg</code> parameter is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>halg</code> parameter is not a valid type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.Byte[],System.Int32,System.Int32,System.Object)\n  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.Byte[],System.Int32,System.Int32,System.Object)\n  id: SignData(System.Byte[],System.Int32,System.Int32,System.Object)\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  name: SignData(Byte[], Int32, Int32, Object)\n  nameWithType: RSACryptoServiceProvider.SignData(Byte[], Int32, Int32, Object)\n  fullName: RSACryptoServiceProvider.SignData(Byte[], Int32, Int32, Object)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Csp\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Computes the hash value of a subset of the specified byte array using the specified hash algorithm, and signs the resulting hash value.\n  remarks: \"This method creates a digital signature that is verified using the <xref:System.Security.Cryptography.RSACryptoServiceProvider.VerifyData%2A> method.  \\n  \\n The `halg` parameter can accept a <xref:System.String>, a <xref:System.Security.Cryptography.HashAlgorithm>, or a <xref:System.Type>. The string value can be one of the following:  \\n  \\n-   The object identifier (OID) friendly name of the hash algorithm to use, either a name registered in the crypto config file or one in the Crypto API OID table.  \\n  \\n-   The OID value. The OID must be one recognized by the Crypto API.  \\n  \\n For example, you could use SignData(new byte[5], \\\"1.3.14.3.2.26\\\") or SignData(new byte[5], \\\"sha1\\\"), or SignData(new byte[5], \\\"SHA1\\\").\"\n  example:\n  - \"The following code example signs and verifies data.  \\n  \\n [!code-cpp[Cryptography.RSACSP.SignData1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.RSACSP.SignData1/CPP/example.cpp#1)]\\n [!code-csharp[Cryptography.RSACSP.SignData1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.RSACSP.SignData1/CS/example.cs#1)]\\n [!code-vb[Cryptography.RSACSP.SignData1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.RSACSP.SignData1/VB/example.vb#1)]\"\n  syntax:\n    content: public byte[] SignData (byte[] buffer, int offset, int count, object halg);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: The input data for which to compute the hash.\n    - id: offset\n      type: System.Int32\n      description: The offset into the array from which to begin using data.\n    - id: count\n      type: System.Int32\n      description: The number of bytes in the array to use as data.\n    - id: halg\n      type: System.Object\n      description: The hash algorithm to use to create the hash value.\n    return:\n      type: System.Byte[]\n      description: The <xref href=\"System.Security.Cryptography.RSA\"></xref> signature for the specified data.\n  overload: System.Security.Cryptography.RSACryptoServiceProvider.SignData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>halg</code> parameter is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>halg</code> parameter is not a valid type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.SignHash(System.Byte[],System.String)\n  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.SignHash(System.Byte[],System.String)\n  id: SignHash(System.Byte[],System.String)\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  name: SignHash(Byte[], String)\n  nameWithType: RSACryptoServiceProvider.SignHash(Byte[], String)\n  fullName: RSACryptoServiceProvider.SignHash(Byte[], String)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Csp\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Computes the signature for the specified hash value by encrypting it with the private key.\n  remarks: \"This method creates a digital signature that is verified using the <xref:System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash%2A> method.  \\n  \\n The valid hash algorithms are <xref:System.Security.Cryptography.SHA1> and <xref:System.Security.Cryptography.MD5>. The algorithm identifier can be derived from the hash name by using the <xref:System.Security.Cryptography.CryptoConfig.MapNameToOID%2A> method.\"\n  example:\n  - \"The following code example encrypts some data, creates a hash of the encrypted data, and then signs hash with a digital signature.  \\n  \\n [!code-cpp[System.Security.Cryptography.RSACryptoServiceProvider ManualHash Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/System.Security.Cryptography.RSACryptoServiceProvider ManualHash Example/CPP/class1.cpp#1)]\\n [!code-csharp[System.Security.Cryptography.RSACryptoServiceProvider ManualHash Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Security.Cryptography.RSACryptoServiceProvider ManualHash Example/CS/class1.cs#1)]\\n [!code-vb[System.Security.Cryptography.RSACryptoServiceProvider ManualHash Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Security.Cryptography.RSACryptoServiceProvider ManualHash Example/VB/class1.vb#1)]\"\n  syntax:\n    content: public byte[] SignHash (byte[] rgbHash, string str);\n    parameters:\n    - id: rgbHash\n      type: System.Byte[]\n      description: The hash value of the data to be signed.\n    - id: str\n      type: System.String\n      description: The hash algorithm identifier (OID) used to create the hash value of the data.\n    return:\n      type: System.Byte[]\n      description: The <xref href=\"System.Security.Cryptography.RSA\"></xref> signature for the specified hash value.\n  overload: System.Security.Cryptography.RSACryptoServiceProvider.SignHash*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>rgbHash</code> parameter is `null`.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"The cryptographic service provider (CSP) cannot be acquired.  \\n  \\n -or-  \\n  \\n There is no private key.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  id: SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  name: SignHash(Byte[], HashAlgorithmName, RSASignaturePadding)\n  nameWithType: RSACryptoServiceProvider.SignHash(Byte[], HashAlgorithmName, RSASignaturePadding)\n  fullName: RSACryptoServiceProvider.SignHash(Byte[], HashAlgorithmName, RSASignaturePadding)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Csp\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Computes the signature for the specified hash value by encrypting it with the private key using the specified padding.\n  syntax:\n    content: public override byte[] SignHash (byte[] hash, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.RSASignaturePadding padding);\n    parameters:\n    - id: hash\n      type: System.Byte[]\n      description: The hash value of the data to be signed.\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: The hash algorithm name used to create the hash value of the data.\n    - id: padding\n      type: System.Security.Cryptography.RSASignaturePadding\n      description: The padding.\n    return:\n      type: System.Byte[]\n      description: The <xref href=\"System.Security.Cryptography.RSA\"></xref> signature for the specified hash value.\n  overload: System.Security.Cryptography.RSACryptoServiceProvider.SignHash*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>hashAlgorithm</code> is `null` or <xref href=\"System.String.Empty\"></xref>.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>hash</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>padding</code> is `null`.\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: <code>padding</code> does not equal <xref href=\"System.Security.Cryptography.RSASignaturePadding.Pkcs1\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.UseMachineKeyStore\n  commentId: P:System.Security.Cryptography.RSACryptoServiceProvider.UseMachineKeyStore\n  id: UseMachineKeyStore\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  name: UseMachineKeyStore\n  nameWithType: RSACryptoServiceProvider.UseMachineKeyStore\n  fullName: RSACryptoServiceProvider.UseMachineKeyStore\n  type: Property\n  assemblies:\n  - System.Security.Cryptography.Csp\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Gets or sets a value indicating whether the key should be persisted in the computer's key store instead of the user profile store.\n  remarks: Setting this property to `true` is equivalent to passing the <xref:System.Security.Cryptography.CspProviderFlags.UseMachineKeyStore> flag to a <xref:System.Security.Cryptography.CspParameters> object. The <xref:System.Security.Cryptography.RSACryptoServiceProvider.UseMachineKeyStore%2A> property applies to all code in the current application domain, whereas the <xref:System.Security.Cryptography.CspParameters> object applies only to classes that explicitly reference it. These settings are useful when impersonating or running under an account whose user profile is not loaded. Setting <xref:System.Security.Cryptography.RSACryptoServiceProvider.UseMachineKeyStore%2A> affects the key store location only if <xref:System.Security.Cryptography.RSACryptoServiceProvider> is initialized with no parameters.\n  example:\n  - \"The following code example creates an <xref:System.Security.Cryptography.RSACryptoServiceProvider> object and sets the static <xref:System.Security.Cryptography.RSACryptoServiceProvider.UseMachineKeyStore%2A> property to use the machine key store instead of the user profile key store.  \\n  \\n [!code-cpp[Cryptography.RSACSP.UseMachineKey#2](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.RSACSP.UseMachineKey/CPP/example2.cpp#2)]\\n [!code-csharp[Cryptography.RSACSP.UseMachineKey#2](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.RSACSP.UseMachineKey/CS/example2.cs#2)]\\n [!code-vb[Cryptography.RSACSP.UseMachineKey#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.RSACSP.UseMachineKey/VB/example2.vb#2)]\"\n  syntax:\n    content: public static bool UseMachineKeyStore { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if the key should be persisted in the computer key store; otherwise, `false`.'\n  overload: System.Security.Cryptography.RSACryptoServiceProvider.UseMachineKeyStore*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.VerifyData(System.Byte[],System.Object,System.Byte[])\n  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.VerifyData(System.Byte[],System.Object,System.Byte[])\n  id: VerifyData(System.Byte[],System.Object,System.Byte[])\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  name: VerifyData(Byte[], Object, Byte[])\n  nameWithType: RSACryptoServiceProvider.VerifyData(Byte[], Object, Byte[])\n  fullName: RSACryptoServiceProvider.VerifyData(Byte[], Object, Byte[])\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Csp\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Verifies that a digital signature is valid by determining the hash value in the signature using the provided public key and comparing it to the hash value of the provided data.\n  remarks: \"This method verifies the <xref:System.Security.Cryptography.RSA> digital signature produced by the <xref:System.Security.Cryptography.RSACryptoServiceProvider.SignData%2A> method. The signature is verified by obtaining the hash value from the signature using the public key it was signed with, and comparing that value to the hash value of the provided data.  \\n  \\n The `halg` parameter can accept a <xref:System.String>, a <xref:System.Security.Cryptography.HashAlgorithm>, or a <xref:System.Type>.\"\n  example:\n  - \"The following example shows how to use the <xref:System.Security.Cryptography.RSACryptoServiceProvider.VerifyData%2A> method to verify a signature. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.RSACryptoServiceProvider.SignHash%2A> method.  \\n  \\n [!code-cpp[System.Security.Cryptography.RSACryptoServiceProvider ManualHash Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/System.Security.Cryptography.RSACryptoServiceProvider ManualHash Example/CPP/class1.cpp#2)]\\n [!code-csharp[System.Security.Cryptography.RSACryptoServiceProvider ManualHash Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Security.Cryptography.RSACryptoServiceProvider ManualHash Example/CS/class1.cs#2)]\\n [!code-vb[System.Security.Cryptography.RSACryptoServiceProvider ManualHash Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Security.Cryptography.RSACryptoServiceProvider ManualHash Example/VB/class1.vb#2)]\"\n  syntax:\n    content: public bool VerifyData (byte[] buffer, object halg, byte[] signature);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: The data that was signed.\n    - id: halg\n      type: System.Object\n      description: The name of the hash algorithm used to create the hash value of the data.\n    - id: signature\n      type: System.Byte[]\n      description: The signature data to be verified.\n    return:\n      type: System.Boolean\n      description: '`true` if the signature is valid; otherwise, `false`.'\n  overload: System.Security.Cryptography.RSACryptoServiceProvider.VerifyData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>halg</code> parameter is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>halg</code> parameter is not a valid type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash(System.Byte[],System.String,System.Byte[])\n  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash(System.Byte[],System.String,System.Byte[])\n  id: VerifyHash(System.Byte[],System.String,System.Byte[])\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  name: VerifyHash(Byte[], String, Byte[])\n  nameWithType: RSACryptoServiceProvider.VerifyHash(Byte[], String, Byte[])\n  fullName: RSACryptoServiceProvider.VerifyHash(Byte[], String, Byte[])\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Csp\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Verifies that a digital signature is valid by determining the hash value in the signature using the provided public key and comparing it to the provided hash value.\n  remarks: \"This method verifies the <xref:System.Security.Cryptography.RSA> digital signature produced by the <xref:System.Security.Cryptography.RSACryptoServiceProvider.SignHash%2A> method. The signature is verified by obtaining the hash value from the signature using the public key it was signed with, and comparing that value to the hash value of the provided data.  \\n  \\n The valid hash algorithms are <xref:System.Security.Cryptography.SHA1> and <xref:System.Security.Cryptography.MD5>. The algorithm identifier can be derived from the hash name by using the <xref:System.Security.Cryptography.CryptoConfig.MapNameToOID%2A> method.\"\n  example:\n  - \"The following example shows how to use the <xref:System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash%2A> method to verify a signature. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.RSACryptoServiceProvider.SignHash%2A> method.  \\n  \\n [!code-cpp[System.Security.Cryptography.RSACryptoServiceProvider ManualHash Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/System.Security.Cryptography.RSACryptoServiceProvider ManualHash Example/CPP/class1.cpp#2)]\\n [!code-csharp[System.Security.Cryptography.RSACryptoServiceProvider ManualHash Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Security.Cryptography.RSACryptoServiceProvider ManualHash Example/CS/class1.cs#2)]\\n [!code-vb[System.Security.Cryptography.RSACryptoServiceProvider ManualHash Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Security.Cryptography.RSACryptoServiceProvider ManualHash Example/VB/class1.vb#2)]\"\n  syntax:\n    content: public bool VerifyHash (byte[] rgbHash, string str, byte[] rgbSignature);\n    parameters:\n    - id: rgbHash\n      type: System.Byte[]\n      description: The hash value of the signed data.\n    - id: str\n      type: System.String\n      description: The hash algorithm identifier (OID) used to create the hash value of the data.\n    - id: rgbSignature\n      type: System.Byte[]\n      description: The signature data to be verified.\n    return:\n      type: System.Boolean\n      description: '`true` if the signature is valid; otherwise, `false`.'\n  overload: System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>rgbHash</code> parameter is `null`.  \\n  \\n -or-  \\n  \\n The <code>rgbSignature</code> parameter is `null`.\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"The cryptographic service provider (CSP) cannot be acquired.  \\n  \\n -or-  \\n  \\n The signature cannot be verified.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  id: VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  name: VerifyHash(Byte[], Byte[], HashAlgorithmName, RSASignaturePadding)\n  nameWithType: RSACryptoServiceProvider.VerifyHash(Byte[], Byte[], HashAlgorithmName, RSASignaturePadding)\n  fullName: RSACryptoServiceProvider.VerifyHash(Byte[], Byte[], HashAlgorithmName, RSASignaturePadding)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Csp\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Verifies that a digital signature is valid by determining the hash value in the signature using the specified hashing algorithm and padding, and comparing it to the provided hash value.\n  syntax:\n    content: public override bool VerifyHash (byte[] hash, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.RSASignaturePadding padding);\n    parameters:\n    - id: hash\n      type: System.Byte[]\n      description: The hash value of the signed data.\n    - id: signature\n      type: System.Byte[]\n      description: The signature data to be verified.\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: The hash algorithm name used to create the hash value.\n    - id: padding\n      type: System.Security.Cryptography.RSASignaturePadding\n      description: The padding.\n    return:\n      type: System.Boolean\n      description: '`true` if the signature is valid; otherwise, `false`.'\n  overload: System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>hashAlgorithm</code> is `null` or <xref href=\"System.String.Empty\"></xref>.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>hash</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>padding</code> is `null`.\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: <code>padding</code> does not equal <xref href=\"System.Security.Cryptography.RSASignaturePadding.Pkcs1\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Security.Cryptography.RSA\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: RSA\n  nameWithType: RSA\n  fullName: System.Security.Cryptography.RSA\n- uid: System.Security.Cryptography.CryptographicException\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CryptographicException\n  nameWithType: CryptographicException\n  fullName: System.Security.Cryptography.CryptographicException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  nameWithType: NotSupportedException\n  fullName: System.NotSupportedException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.#ctor\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: RSACryptoServiceProvider()\n  nameWithType: RSACryptoServiceProvider.RSACryptoServiceProvider()\n  fullName: RSACryptoServiceProvider.RSACryptoServiceProvider()\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.#ctor(System.Int32)\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: RSACryptoServiceProvider(Int32)\n  nameWithType: RSACryptoServiceProvider.RSACryptoServiceProvider(Int32)\n  fullName: RSACryptoServiceProvider.RSACryptoServiceProvider(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.#ctor(System.Security.Cryptography.CspParameters)\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: RSACryptoServiceProvider(CspParameters)\n  nameWithType: RSACryptoServiceProvider.RSACryptoServiceProvider(CspParameters)\n  fullName: RSACryptoServiceProvider.RSACryptoServiceProvider(CspParameters)\n- uid: System.Security.Cryptography.CspParameters\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CspParameters\n  nameWithType: CspParameters\n  fullName: System.Security.Cryptography.CspParameters\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.#ctor(System.Int32,System.Security.Cryptography.CspParameters)\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: RSACryptoServiceProvider(Int32, CspParameters)\n  nameWithType: RSACryptoServiceProvider.RSACryptoServiceProvider(Int32, CspParameters)\n  fullName: RSACryptoServiceProvider.RSACryptoServiceProvider(Int32, CspParameters)\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.CspKeyContainerInfo\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: CspKeyContainerInfo\n  nameWithType: RSACryptoServiceProvider.CspKeyContainerInfo\n  fullName: RSACryptoServiceProvider.CspKeyContainerInfo\n- uid: System.Security.Cryptography.CspKeyContainerInfo\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CspKeyContainerInfo\n  nameWithType: CspKeyContainerInfo\n  fullName: System.Security.Cryptography.CspKeyContainerInfo\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.Decrypt(System.Byte[],System.Boolean)\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: Decrypt(Byte[], Boolean)\n  nameWithType: RSACryptoServiceProvider.Decrypt(Byte[], Boolean)\n  fullName: RSACryptoServiceProvider.Decrypt(Byte[], Boolean)\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: Decrypt(Byte[], RSAEncryptionPadding)\n  nameWithType: RSACryptoServiceProvider.Decrypt(Byte[], RSAEncryptionPadding)\n  fullName: RSACryptoServiceProvider.Decrypt(Byte[], RSAEncryptionPadding)\n- uid: System.Security.Cryptography.RSAEncryptionPadding\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: RSAEncryptionPadding\n  nameWithType: RSAEncryptionPadding\n  fullName: System.Security.Cryptography.RSAEncryptionPadding\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.DecryptValue(System.Byte[])\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: DecryptValue(Byte[])\n  nameWithType: RSACryptoServiceProvider.DecryptValue(Byte[])\n  fullName: RSACryptoServiceProvider.DecryptValue(Byte[])\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.Dispose(System.Boolean)\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: RSACryptoServiceProvider.Dispose(Boolean)\n  fullName: RSACryptoServiceProvider.Dispose(Boolean)\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.Encrypt(System.Byte[],System.Boolean)\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: Encrypt(Byte[], Boolean)\n  nameWithType: RSACryptoServiceProvider.Encrypt(Byte[], Boolean)\n  fullName: RSACryptoServiceProvider.Encrypt(Byte[], Boolean)\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: Encrypt(Byte[], RSAEncryptionPadding)\n  nameWithType: RSACryptoServiceProvider.Encrypt(Byte[], RSAEncryptionPadding)\n  fullName: RSACryptoServiceProvider.Encrypt(Byte[], RSAEncryptionPadding)\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.EncryptValue(System.Byte[])\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: EncryptValue(Byte[])\n  nameWithType: RSACryptoServiceProvider.EncryptValue(Byte[])\n  fullName: RSACryptoServiceProvider.EncryptValue(Byte[])\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.ExportCspBlob(System.Boolean)\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: ExportCspBlob(Boolean)\n  nameWithType: RSACryptoServiceProvider.ExportCspBlob(Boolean)\n  fullName: RSACryptoServiceProvider.ExportCspBlob(Boolean)\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.ExportParameters(System.Boolean)\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: ExportParameters(Boolean)\n  nameWithType: RSACryptoServiceProvider.ExportParameters(Boolean)\n  fullName: RSACryptoServiceProvider.ExportParameters(Boolean)\n- uid: System.Security.Cryptography.RSAParameters\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: RSAParameters\n  nameWithType: RSAParameters\n  fullName: System.Security.Cryptography.RSAParameters\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.Finalize\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: Finalize()\n  nameWithType: RSACryptoServiceProvider.Finalize()\n  fullName: RSACryptoServiceProvider.Finalize()\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: HashData(Byte[], Int32, Int32, HashAlgorithmName)\n  nameWithType: RSACryptoServiceProvider.HashData(Byte[], Int32, Int32, HashAlgorithmName)\n  fullName: RSACryptoServiceProvider.HashData(Byte[], Int32, Int32, HashAlgorithmName)\n- uid: System.Security.Cryptography.HashAlgorithmName\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithmName\n  nameWithType: HashAlgorithmName\n  fullName: System.Security.Cryptography.HashAlgorithmName\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: HashData(Stream, HashAlgorithmName)\n  nameWithType: RSACryptoServiceProvider.HashData(Stream, HashAlgorithmName)\n  fullName: RSACryptoServiceProvider.HashData(Stream, HashAlgorithmName)\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: false\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.ImportCspBlob(System.Byte[])\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: ImportCspBlob(Byte[])\n  nameWithType: RSACryptoServiceProvider.ImportCspBlob(Byte[])\n  fullName: RSACryptoServiceProvider.ImportCspBlob(Byte[])\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.ImportParameters(System.Security.Cryptography.RSAParameters)\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: ImportParameters(RSAParameters)\n  nameWithType: RSACryptoServiceProvider.ImportParameters(RSAParameters)\n  fullName: RSACryptoServiceProvider.ImportParameters(RSAParameters)\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.KeyExchangeAlgorithm\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: KeyExchangeAlgorithm\n  nameWithType: RSACryptoServiceProvider.KeyExchangeAlgorithm\n  fullName: RSACryptoServiceProvider.KeyExchangeAlgorithm\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.KeySize\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: KeySize\n  nameWithType: RSACryptoServiceProvider.KeySize\n  fullName: RSACryptoServiceProvider.KeySize\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.LegalKeySizes\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: LegalKeySizes\n  nameWithType: RSACryptoServiceProvider.LegalKeySizes\n  fullName: RSACryptoServiceProvider.LegalKeySizes\n- uid: System.Security.Cryptography.KeySizes\n  name: KeySizes\n  nameWithType: KeySizes\n  fullName: System.Security.Cryptography.KeySizes\n- uid: System.Security.Cryptography.KeySizes[]\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: KeySizes[]\n  nameWithType: KeySizes[]\n  fullName: System.Security.Cryptography.KeySizes[]\n  spec.csharp:\n  - uid: System.Security.Cryptography.KeySizes\n    name: KeySizes\n    nameWithType: KeySizes\n    fullName: System.Security.Cryptography.KeySizes\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.PersistKeyInCsp\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: PersistKeyInCsp\n  nameWithType: RSACryptoServiceProvider.PersistKeyInCsp\n  fullName: RSACryptoServiceProvider.PersistKeyInCsp\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.PublicOnly\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: PublicOnly\n  nameWithType: RSACryptoServiceProvider.PublicOnly\n  fullName: RSACryptoServiceProvider.PublicOnly\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.SignatureAlgorithm\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: SignatureAlgorithm\n  nameWithType: RSACryptoServiceProvider.SignatureAlgorithm\n  fullName: RSACryptoServiceProvider.SignatureAlgorithm\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.Byte[],System.Object)\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: SignData(Byte[], Object)\n  nameWithType: RSACryptoServiceProvider.SignData(Byte[], Object)\n  fullName: RSACryptoServiceProvider.SignData(Byte[], Object)\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.IO.Stream,System.Object)\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: SignData(Stream, Object)\n  nameWithType: RSACryptoServiceProvider.SignData(Stream, Object)\n  fullName: RSACryptoServiceProvider.SignData(Stream, Object)\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.Byte[],System.Int32,System.Int32,System.Object)\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: SignData(Byte[], Int32, Int32, Object)\n  nameWithType: RSACryptoServiceProvider.SignData(Byte[], Int32, Int32, Object)\n  fullName: RSACryptoServiceProvider.SignData(Byte[], Int32, Int32, Object)\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.SignHash(System.Byte[],System.String)\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: SignHash(Byte[], String)\n  nameWithType: RSACryptoServiceProvider.SignHash(Byte[], String)\n  fullName: RSACryptoServiceProvider.SignHash(Byte[], String)\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: SignHash(Byte[], HashAlgorithmName, RSASignaturePadding)\n  nameWithType: RSACryptoServiceProvider.SignHash(Byte[], HashAlgorithmName, RSASignaturePadding)\n  fullName: RSACryptoServiceProvider.SignHash(Byte[], HashAlgorithmName, RSASignaturePadding)\n- uid: System.Security.Cryptography.RSASignaturePadding\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: RSASignaturePadding\n  nameWithType: RSASignaturePadding\n  fullName: System.Security.Cryptography.RSASignaturePadding\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.UseMachineKeyStore\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: UseMachineKeyStore\n  nameWithType: RSACryptoServiceProvider.UseMachineKeyStore\n  fullName: RSACryptoServiceProvider.UseMachineKeyStore\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.VerifyData(System.Byte[],System.Object,System.Byte[])\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: VerifyData(Byte[], Object, Byte[])\n  nameWithType: RSACryptoServiceProvider.VerifyData(Byte[], Object, Byte[])\n  fullName: RSACryptoServiceProvider.VerifyData(Byte[], Object, Byte[])\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash(System.Byte[],System.String,System.Byte[])\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: VerifyHash(Byte[], String, Byte[])\n  nameWithType: RSACryptoServiceProvider.VerifyHash(Byte[], String, Byte[])\n  fullName: RSACryptoServiceProvider.VerifyHash(Byte[], String, Byte[])\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: VerifyHash(Byte[], Byte[], HashAlgorithmName, RSASignaturePadding)\n  nameWithType: RSACryptoServiceProvider.VerifyHash(Byte[], Byte[], HashAlgorithmName, RSASignaturePadding)\n  fullName: RSACryptoServiceProvider.VerifyHash(Byte[], Byte[], HashAlgorithmName, RSASignaturePadding)\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.#ctor*\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: RSACryptoServiceProvider\n  nameWithType: RSACryptoServiceProvider.RSACryptoServiceProvider\n  fullName: RSACryptoServiceProvider.RSACryptoServiceProvider\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.CspKeyContainerInfo*\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: CspKeyContainerInfo\n  nameWithType: RSACryptoServiceProvider.CspKeyContainerInfo\n  fullName: RSACryptoServiceProvider.CspKeyContainerInfo\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.Decrypt*\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: Decrypt\n  nameWithType: RSACryptoServiceProvider.Decrypt\n  fullName: RSACryptoServiceProvider.Decrypt\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.DecryptValue*\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: DecryptValue\n  nameWithType: RSACryptoServiceProvider.DecryptValue\n  fullName: RSACryptoServiceProvider.DecryptValue\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.Dispose*\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: Dispose\n  nameWithType: RSACryptoServiceProvider.Dispose\n  fullName: RSACryptoServiceProvider.Dispose\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.Encrypt*\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: Encrypt\n  nameWithType: RSACryptoServiceProvider.Encrypt\n  fullName: RSACryptoServiceProvider.Encrypt\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.EncryptValue*\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: EncryptValue\n  nameWithType: RSACryptoServiceProvider.EncryptValue\n  fullName: RSACryptoServiceProvider.EncryptValue\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.ExportCspBlob*\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: ExportCspBlob\n  nameWithType: RSACryptoServiceProvider.ExportCspBlob\n  fullName: RSACryptoServiceProvider.ExportCspBlob\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.ExportParameters*\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: ExportParameters\n  nameWithType: RSACryptoServiceProvider.ExportParameters\n  fullName: RSACryptoServiceProvider.ExportParameters\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.Finalize*\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: Finalize\n  nameWithType: RSACryptoServiceProvider.Finalize\n  fullName: RSACryptoServiceProvider.Finalize\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.HashData*\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: HashData\n  nameWithType: RSACryptoServiceProvider.HashData\n  fullName: RSACryptoServiceProvider.HashData\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.ImportCspBlob*\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: ImportCspBlob\n  nameWithType: RSACryptoServiceProvider.ImportCspBlob\n  fullName: RSACryptoServiceProvider.ImportCspBlob\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.ImportParameters*\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: ImportParameters\n  nameWithType: RSACryptoServiceProvider.ImportParameters\n  fullName: RSACryptoServiceProvider.ImportParameters\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.KeyExchangeAlgorithm*\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: KeyExchangeAlgorithm\n  nameWithType: RSACryptoServiceProvider.KeyExchangeAlgorithm\n  fullName: RSACryptoServiceProvider.KeyExchangeAlgorithm\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.KeySize*\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: KeySize\n  nameWithType: RSACryptoServiceProvider.KeySize\n  fullName: RSACryptoServiceProvider.KeySize\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.LegalKeySizes*\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: LegalKeySizes\n  nameWithType: RSACryptoServiceProvider.LegalKeySizes\n  fullName: RSACryptoServiceProvider.LegalKeySizes\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.PersistKeyInCsp*\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: PersistKeyInCsp\n  nameWithType: RSACryptoServiceProvider.PersistKeyInCsp\n  fullName: RSACryptoServiceProvider.PersistKeyInCsp\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.PublicOnly*\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: PublicOnly\n  nameWithType: RSACryptoServiceProvider.PublicOnly\n  fullName: RSACryptoServiceProvider.PublicOnly\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.SignatureAlgorithm*\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: SignatureAlgorithm\n  nameWithType: RSACryptoServiceProvider.SignatureAlgorithm\n  fullName: RSACryptoServiceProvider.SignatureAlgorithm\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.SignData*\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: SignData\n  nameWithType: RSACryptoServiceProvider.SignData\n  fullName: RSACryptoServiceProvider.SignData\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.SignHash*\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: SignHash\n  nameWithType: RSACryptoServiceProvider.SignHash\n  fullName: RSACryptoServiceProvider.SignHash\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.UseMachineKeyStore*\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: UseMachineKeyStore\n  nameWithType: RSACryptoServiceProvider.UseMachineKeyStore\n  fullName: RSACryptoServiceProvider.UseMachineKeyStore\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.VerifyData*\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: VerifyData\n  nameWithType: RSACryptoServiceProvider.VerifyData\n  fullName: RSACryptoServiceProvider.VerifyData\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash*\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  isExternal: false\n  name: VerifyHash\n  nameWithType: RSACryptoServiceProvider.VerifyHash\n  fullName: RSACryptoServiceProvider.VerifyHash\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RSACryptoServiceProvider.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.Clear\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: Clear()\n  nameWithType: AsymmetricAlgorithm.Clear()\n  fullName: AsymmetricAlgorithm.Clear()\n- uid: System.Security.Cryptography.RSA.Create\n  parent: System.Security.Cryptography.RSA\n  isExternal: false\n  name: Create()\n  nameWithType: RSA.Create()\n  fullName: RSA.Create()\n- uid: System.Security.Cryptography.RSA.Create(System.String)\n  parent: System.Security.Cryptography.RSA\n  isExternal: false\n  name: Create(String)\n  nameWithType: RSA.Create(String)\n  fullName: RSA.Create(String)\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: Dispose()\n  nameWithType: AsymmetricAlgorithm.Dispose()\n  fullName: AsymmetricAlgorithm.Dispose()\n- uid: System.Security.Cryptography.RSA.FromXmlString(System.String)\n  parent: System.Security.Cryptography.RSA\n  isExternal: false\n  name: FromXmlString(String)\n  nameWithType: RSA.FromXmlString(String)\n  fullName: RSA.FromXmlString(String)\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: KeySizeValue\n  nameWithType: AsymmetricAlgorithm.KeySizeValue\n  fullName: AsymmetricAlgorithm.KeySizeValue\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: LegalKeySizesValue\n  nameWithType: AsymmetricAlgorithm.LegalKeySizesValue\n  fullName: AsymmetricAlgorithm.LegalKeySizesValue\n- uid: System.Security.Cryptography.RSA.ToXmlString(System.Boolean)\n  parent: System.Security.Cryptography.RSA\n  isExternal: false\n  name: ToXmlString(Boolean)\n  nameWithType: RSA.ToXmlString(Boolean)\n  fullName: RSA.ToXmlString(Boolean)\n- uid: System.Security.Cryptography.RSA.Create(System.Int32)\n  parent: System.Security.Cryptography.RSA\n  isExternal: false\n  name: Create(Int32)\n  nameWithType: RSA.Create(Int32)\n  fullName: RSA.Create(Int32)\n- uid: System.Security.Cryptography.RSA.Create(System.Security.Cryptography.RSAParameters)\n  parent: System.Security.Cryptography.RSA\n  isExternal: false\n  name: Create(RSAParameters)\n  nameWithType: RSA.Create(RSAParameters)\n  fullName: RSA.Create(RSAParameters)\n- uid: System.Security.Cryptography.RSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSA\n  isExternal: false\n  name: SignData(Byte[], HashAlgorithmName, RSASignaturePadding)\n  nameWithType: RSA.SignData(Byte[], HashAlgorithmName, RSASignaturePadding)\n  fullName: RSA.SignData(Byte[], HashAlgorithmName, RSASignaturePadding)\n- uid: System.Security.Cryptography.RSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSA\n  isExternal: false\n  name: SignData(Stream, HashAlgorithmName, RSASignaturePadding)\n  nameWithType: RSA.SignData(Stream, HashAlgorithmName, RSASignaturePadding)\n  fullName: RSA.SignData(Stream, HashAlgorithmName, RSASignaturePadding)\n- uid: System.Security.Cryptography.RSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSA\n  isExternal: false\n  name: SignData(Byte[], Int32, Int32, HashAlgorithmName, RSASignaturePadding)\n  nameWithType: RSA.SignData(Byte[], Int32, Int32, HashAlgorithmName, RSASignaturePadding)\n  fullName: RSA.SignData(Byte[], Int32, Int32, HashAlgorithmName, RSASignaturePadding)\n- uid: System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSA\n  isExternal: false\n  name: VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName, RSASignaturePadding)\n  nameWithType: RSA.VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName, RSASignaturePadding)\n  fullName: RSA.VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName, RSASignaturePadding)\n- uid: System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSA\n  isExternal: false\n  name: VerifyData(Byte[], Byte[], HashAlgorithmName, RSASignaturePadding)\n  nameWithType: RSA.VerifyData(Byte[], Byte[], HashAlgorithmName, RSASignaturePadding)\n  fullName: RSA.VerifyData(Byte[], Byte[], HashAlgorithmName, RSASignaturePadding)\n- uid: System.Security.Cryptography.RSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSA\n  isExternal: false\n  name: VerifyData(Stream, Byte[], HashAlgorithmName, RSASignaturePadding)\n  nameWithType: RSA.VerifyData(Stream, Byte[], HashAlgorithmName, RSASignaturePadding)\n  fullName: RSA.VerifyData(Stream, Byte[], HashAlgorithmName, RSASignaturePadding)\n- uid: System.Security.Cryptography.ICspAsymmetricAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ICspAsymmetricAlgorithm\n  nameWithType: ICspAsymmetricAlgorithm\n  fullName: System.Security.Cryptography.ICspAsymmetricAlgorithm\n"}