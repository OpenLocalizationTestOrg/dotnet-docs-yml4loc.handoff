{"nodes":[{"content":"Provides a remotable version of the `AssemblyName`.","nodes":[{"pos":[0,51],"content":"Provides a remotable version of the <ph id=\"ph1\">`AssemblyName`</ph>.","source":"Provides a remotable version of the `AssemblyName`."}],"pos":[540,592],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Reflection.AssemblyNameProxy\"></xref> class.","nodes":[{"pos":[0,97],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.AssemblyNameProxy\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Reflection.AssemblyNameProxy\"></xref> class."}],"pos":[2590,2688],"yaml":true},{"content":"Gets the `AssemblyName` for a given file.","nodes":[{"pos":[0,41],"content":"Gets the <ph id=\"ph1\">`AssemblyName`</ph> for a given file.","source":"Gets the `AssemblyName` for a given file."}],"pos":[4096,4138],"yaml":true},{"content":"This will only work if the file contains an assembly manifest. This method causes the file to be opened and closed.","nodes":[{"pos":[0,115],"content":"This will only work if the file contains an assembly manifest. This method causes the file to be opened and closed.","nodes":[{"content":"This will only work if the file contains an assembly manifest. This method causes the file to be opened and closed.","pos":[0,115],"nodes":[{"content":"This will only work if the file contains an assembly manifest.","pos":[0,62]},{"content":"This method causes the file to be opened and closed.","pos":[63,115]}]}]}],"pos":[4149,4265],"yaml":true,"extradata":"MT"},{"content":"The assembly file for which to get the `AssemblyName`.","nodes":[{"pos":[0,54],"content":"The assembly file for which to get the <ph id=\"ph1\">`AssemblyName`</ph>.","source":"The assembly file for which to get the `AssemblyName`."}],"pos":[4449,4504],"yaml":true},{"content":"An `AssemblyName` object representing the given file.","nodes":[{"pos":[0,53],"content":"An <ph id=\"ph1\">`AssemblyName`</ph> object representing the given file.","source":"An `AssemblyName` object representing the given file."}],"pos":[4578,4632],"yaml":true},{"content":"<code>assemblyFile</code> is `null`.","nodes":[{"pos":[0,36],"content":"<ph id=\"ph1\">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>assemblyFile</code> is `null`."}],"pos":[4813,4850],"yaml":true},{"content":"<code>assemblyFile</code> is empty.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is empty.","source":"<code>assemblyFile</code> is empty."}],"pos":[4944,4980],"yaml":true},{"content":"<code>assemblyFile</code> is not found.","nodes":[{"pos":[0,39],"content":"<ph id=\"ph1\">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is not found.","source":"<code>assemblyFile</code> is not found."}],"pos":[5088,5128],"yaml":true},{"content":"The caller does not have the required permission.","nodes":[{"pos":[0,49],"content":"The caller does not have the required permission.","nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]}],"pos":[5240,5290],"yaml":true},{"content":"<code>assemblyFile</code> is not a valid assembly.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is not a valid assembly.","source":"<code>assemblyFile</code> is not a valid assembly."}],"pos":[5396,5447],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Reflection.AssemblyNameProxy\n  commentId: T:System.Reflection.AssemblyNameProxy\n  id: AssemblyNameProxy\n  children:\n  - System.Reflection.AssemblyNameProxy.#ctor\n  - System.Reflection.AssemblyNameProxy.GetAssemblyName(System.String)\n  langs:\n  - csharp\n  name: AssemblyNameProxy\n  nameWithType: AssemblyNameProxy\n  fullName: System.Reflection.AssemblyNameProxy\n  type: Class\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Reflection\n  summary: Provides a remotable version of the `AssemblyName`.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class AssemblyNameProxy : MarshalByRefObject\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  implements: []\n  inheritedMembers:\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.InitializeLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/AssemblyNameProxy.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.AssemblyNameProxy.#ctor\n  commentId: M:System.Reflection.AssemblyNameProxy.#ctor\n  id: '#ctor'\n  parent: System.Reflection.AssemblyNameProxy\n  langs:\n  - csharp\n  name: AssemblyNameProxy()\n  nameWithType: AssemblyNameProxy.AssemblyNameProxy()\n  fullName: AssemblyNameProxy.AssemblyNameProxy()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Reflection\n  summary: Initializes a new instance of the <xref href=\"System.Reflection.AssemblyNameProxy\"></xref> class.\n  syntax:\n    content: public AssemblyNameProxy ();\n    parameters: []\n  overload: System.Reflection.AssemblyNameProxy.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/AssemblyNameProxy.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.AssemblyNameProxy.GetAssemblyName(System.String)\n  commentId: M:System.Reflection.AssemblyNameProxy.GetAssemblyName(System.String)\n  id: GetAssemblyName(System.String)\n  parent: System.Reflection.AssemblyNameProxy\n  langs:\n  - csharp\n  name: GetAssemblyName(String)\n  nameWithType: AssemblyNameProxy.GetAssemblyName(String)\n  fullName: AssemblyNameProxy.GetAssemblyName(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.Reflection\n  summary: Gets the `AssemblyName` for a given file.\n  remarks: This will only work if the file contains an assembly manifest. This method causes the file to be opened and closed.\n  syntax:\n    content: public System.Reflection.AssemblyName GetAssemblyName (string assemblyFile);\n    parameters:\n    - id: assemblyFile\n      type: System.String\n      description: The assembly file for which to get the `AssemblyName`.\n    return:\n      type: System.Reflection.AssemblyName\n      description: An `AssemblyName` object representing the given file.\n  overload: System.Reflection.AssemblyNameProxy.GetAssemblyName*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>assemblyFile</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>assemblyFile</code> is empty.\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: <code>assemblyFile</code> is not found.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: <code>assemblyFile</code> is not a valid assembly.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/AssemblyNameProxy.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.MarshalByRefObject\n  parent: System\n  isExternal: false\n  name: MarshalByRefObject\n  nameWithType: MarshalByRefObject\n  fullName: System.MarshalByRefObject\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.IO.FileNotFoundException\n  parent: System.IO\n  isExternal: false\n  name: FileNotFoundException\n  nameWithType: FileNotFoundException\n  fullName: System.IO.FileNotFoundException\n- uid: System.Security.SecurityException\n  parent: System.Security\n  isExternal: false\n  name: SecurityException\n  nameWithType: SecurityException\n  fullName: System.Security.SecurityException\n- uid: System.BadImageFormatException\n  parent: System\n  isExternal: false\n  name: BadImageFormatException\n  nameWithType: BadImageFormatException\n  fullName: System.BadImageFormatException\n- uid: System.Reflection.AssemblyNameProxy.#ctor\n  parent: System.Reflection.AssemblyNameProxy\n  isExternal: false\n  name: AssemblyNameProxy()\n  nameWithType: AssemblyNameProxy.AssemblyNameProxy()\n  fullName: AssemblyNameProxy.AssemblyNameProxy()\n- uid: System.Reflection.AssemblyNameProxy.GetAssemblyName(System.String)\n  parent: System.Reflection.AssemblyNameProxy\n  isExternal: false\n  name: GetAssemblyName(String)\n  nameWithType: AssemblyNameProxy.GetAssemblyName(String)\n  fullName: AssemblyNameProxy.GetAssemblyName(String)\n- uid: System.Reflection.AssemblyName\n  parent: System.Reflection\n  isExternal: false\n  name: AssemblyName\n  nameWithType: AssemblyName\n  fullName: System.Reflection.AssemblyName\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Reflection.AssemblyNameProxy.#ctor*\n  parent: System.Reflection.AssemblyNameProxy\n  isExternal: false\n  name: AssemblyNameProxy\n  nameWithType: AssemblyNameProxy.AssemblyNameProxy\n  fullName: AssemblyNameProxy.AssemblyNameProxy\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/AssemblyNameProxy.xml\n- uid: System.Reflection.AssemblyNameProxy.GetAssemblyName*\n  parent: System.Reflection.AssemblyNameProxy\n  isExternal: false\n  name: GetAssemblyName\n  nameWithType: AssemblyNameProxy.GetAssemblyName\n  fullName: AssemblyNameProxy.GetAssemblyName\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/AssemblyNameProxy.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.MarshalByRefObject.CreateObjRef(System.Type)\n  parent: System.MarshalByRefObject\n  isExternal: false\n  name: CreateObjRef(Type)\n  nameWithType: MarshalByRefObject.CreateObjRef(Type)\n  fullName: MarshalByRefObject.CreateObjRef(Type)\n- uid: System.MarshalByRefObject.GetLifetimeService\n  parent: System.MarshalByRefObject\n  isExternal: false\n  name: GetLifetimeService()\n  nameWithType: MarshalByRefObject.GetLifetimeService()\n  fullName: MarshalByRefObject.GetLifetimeService()\n- uid: System.MarshalByRefObject.InitializeLifetimeService\n  parent: System.MarshalByRefObject\n  isExternal: false\n  name: InitializeLifetimeService()\n  nameWithType: MarshalByRefObject.InitializeLifetimeService()\n  fullName: MarshalByRefObject.InitializeLifetimeService()\n- uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  parent: System.MarshalByRefObject\n  isExternal: false\n  name: MemberwiseClone(Boolean)\n  nameWithType: MarshalByRefObject.MemberwiseClone(Boolean)\n  fullName: MarshalByRefObject.MemberwiseClone(Boolean)\n"}