{"nodes":[{"content":"Represents an ASCII character encoding of Unicode characters.","nodes":[{"pos":[0,61],"content":"Represents an ASCII character encoding of Unicode characters.","nodes":[{"content":"Represents an ASCII character encoding of Unicode characters.","pos":[0,61]}]}],"pos":[1614,1676],"yaml":true},{"content":"Encoding is the process of transforming a set of Unicode characters into a sequence of bytes. Decoding is the process of transforming a sequence of encoded bytes into a set of Unicode characters.  \n  \n <xref:System.Text.ASCIIEncoding> corresponds to the Windows code page 20127. Because ASCII is a 7-bit encoding, ASCII characters are limited to the lowest 128 Unicode characters, from U+0000 to U+007F. If you use the default encoder returned by the <xref:System.Text.Encoding.ASCII%2A?displayProperty=fullName> property or the <xref:System.Text.ASCIIEncoding.%23ctor%2A> constructor, characters outside that range are replaced with a question mark (?) before the encoding operation is performed.  Because the <xref:System.Text.ASCIIEncoding> class supports only a limited character set, the <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, and <xref:System.Text.UTF32Encoding> classes are better suited for globalized applications. The following considerations can help you to decide whether to use <xref:System.Text.ASCIIEncoding>:  \n  \n-   Some protocols require ASCII or a subset of ASCII. In these cases ASCII encoding is appropriate.  \n  \n-   If an 8-bit encoding is expected, then ASCII probably isn't the correct choice. Instead, consider using UTF8 instead of ASCII. For the characters U+0000 through U+007F, the results are identical, but all Unicode characters are representable in UTF-8, which avoids data loss.  \n  \n> [!CAUTION]\n>  <xref:System.Text.ASCIIEncoding> does not provide error detection. For security reasons, you should use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.  \n  \n The <xref:System.Text.ASCIIEncoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.ASCIIEncoding.GetBytes%2A> method performs the actual encoding.  \n  \n Likewise, the <xref:System.Text.ASCIIEncoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.ASCIIEncoding.GetChars%2A> and <xref:System.Text.ASCIIEncoding.GetString%2A> methods perform the actual decoding.  \n  \n Note that the default <xref:System.Text.ASCIIEncoding> constructor by itself might not have the appropriate behavior for your application. You might want to consider setting the <xref:System.Text.Encoding.EncoderFallback%2A> or <xref:System.Text.Encoding.DecoderFallback%2A> property to <xref:System.Text.EncoderExceptionFallback> or <xref:System.Text.DecoderExceptionFallback> to prevent sequences with the 8th bit set. Custom behavior might also be appropriate for these cases.","nodes":[{"pos":[0,195],"content":"Encoding is the process of transforming a set of Unicode characters into a sequence of bytes. Decoding is the process of transforming a sequence of encoded bytes into a set of Unicode characters.","nodes":[{"content":"Encoding is the process of transforming a set of Unicode characters into a sequence of bytes. Decoding is the process of transforming a sequence of encoded bytes into a set of Unicode characters.","pos":[0,195],"nodes":[{"content":"Encoding is the process of transforming a set of Unicode characters into a sequence of bytes.","pos":[0,93]},{"content":"Decoding is the process of transforming a sequence of encoded bytes into a set of Unicode characters.","pos":[94,195]}]}]},{"pos":[202,1054],"content":"<xref:System.Text.ASCIIEncoding> corresponds to the Windows code page 20127. Because ASCII is a 7-bit encoding, ASCII characters are limited to the lowest 128 Unicode characters, from U+0000 to U+007F. If you use the default encoder returned by the <xref:System.Text.Encoding.ASCII%2A?displayProperty=fullName> property or the <xref:System.Text.ASCIIEncoding.%23ctor%2A> constructor, characters outside that range are replaced with a question mark (?) before the encoding operation is performed.  Because the <xref:System.Text.ASCIIEncoding> class supports only a limited character set, the <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, and <xref:System.Text.UTF32Encoding> classes are better suited for globalized applications. The following considerations can help you to decide whether to use <xref:System.Text.ASCIIEncoding>:","nodes":[{"content":"<xref:System.Text.ASCIIEncoding> corresponds to the Windows code page 20127. Because ASCII is a 7-bit encoding, ASCII characters are limited to the lowest 128 Unicode characters, from U+0000 to U+007F. If you use the default encoder returned by the <xref:System.Text.Encoding.ASCII%2A?displayProperty=fullName> property or the <xref:System.Text.ASCIIEncoding.%23ctor%2A> constructor, characters outside that range are replaced with a question mark (?) before the encoding operation is performed.  Because the <xref:System.Text.ASCIIEncoding> class supports only a limited character set, the <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, and <xref:System.Text.UTF32Encoding> classes are better suited for globalized applications. The following considerations can help you to decide whether to use <xref:System.Text.ASCIIEncoding>:","pos":[0,852],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding&gt;</ph> corresponds to the Windows code page 20127.","pos":[0,76],"source":"<xref:System.Text.ASCIIEncoding> corresponds to the Windows code page 20127."},{"content":"Because ASCII is a 7-bit encoding, ASCII characters are limited to the lowest 128 Unicode characters, from U+0000 to U+007F.","pos":[77,201]},{"content":"If you use the default encoder returned by the <ph id=\"ph1\">&lt;xref:System.Text.Encoding.ASCII%2A?displayProperty=fullName&gt;</ph> property or the <ph id=\"ph2\">&lt;xref:System.Text.ASCIIEncoding.%23ctor%2A&gt;</ph> constructor, characters outside that range are replaced with a question mark (?) before the encoding operation is performed.","pos":[202,495],"source":" If you use the default encoder returned by the <xref:System.Text.Encoding.ASCII%2A?displayProperty=fullName> property or the <xref:System.Text.ASCIIEncoding.%23ctor%2A> constructor, characters outside that range are replaced with a question mark (?) before the encoding operation is performed."},{"content":"Because the <ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding&gt;</ph> class supports only a limited character set, the <ph id=\"ph2\">&lt;xref:System.Text.UTF8Encoding&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Text.UTF32Encoding&gt;</ph> classes are better suited for globalized applications.","pos":[497,751],"source":"  Because the <xref:System.Text.ASCIIEncoding> class supports only a limited character set, the <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, and <xref:System.Text.UTF32Encoding> classes are better suited for globalized applications."},{"content":"The following considerations can help you to decide whether to use <ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding&gt;</ph>:","pos":[752,852],"source":" The following considerations can help you to decide whether to use <xref:System.Text.ASCIIEncoding>:"}]}]},{"pos":[1064,1160],"content":"Some protocols require ASCII or a subset of ASCII. In these cases ASCII encoding is appropriate.","nodes":[{"content":"Some protocols require ASCII or a subset of ASCII. In these cases ASCII encoding is appropriate.","pos":[0,96],"nodes":[{"content":"Some protocols require ASCII or a subset of ASCII.","pos":[0,50]},{"content":"In these cases ASCII encoding is appropriate.","pos":[51,96]}]}]},{"pos":[1170,1444],"content":"If an 8-bit encoding is expected, then ASCII probably isn't the correct choice. Instead, consider using UTF8 instead of ASCII. For the characters U+0000 through U+007F, the results are identical, but all Unicode characters are representable in UTF-8, which avoids data loss.","nodes":[{"content":"If an 8-bit encoding is expected, then ASCII probably isn't the correct choice. Instead, consider using UTF8 instead of ASCII. For the characters U+0000 through U+007F, the results are identical, but all Unicode characters are representable in UTF-8, which avoids data loss.","pos":[0,274],"nodes":[{"content":"If an 8-bit encoding is expected, then ASCII probably isn't the correct choice.","pos":[0,79]},{"content":"Instead, consider using UTF8 instead of ASCII.","pos":[80,126]},{"content":"For the characters U+0000 through U+007F, the results are identical, but all Unicode characters are representable in UTF-8, which avoids data loss.","pos":[127,274]}]}]},{"pos":[1452,1702],"content":"[!CAUTION]\n <xref:System.Text.ASCIIEncoding> does not provide error detection. For security reasons, you should use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.","leadings":["","> "],"nodes":[{"content":" <xref:System.Text.ASCIIEncoding> does not provide error detection. For security reasons, you should use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.","pos":[11,248],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding&gt;</ph> does not provide error detection.","pos":[1,67],"source":" <xref:System.Text.ASCIIEncoding> does not provide error detection."},{"content":"For security reasons, you should use <ph id=\"ph1\">&lt;xref:System.Text.UTF8Encoding&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Text.UTF32Encoding&gt;</ph> and enable error detection.","pos":[68,237],"source":" For security reasons, you should use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection."}]}]},{"pos":[1709,1932],"content":"The <xref:System.Text.ASCIIEncoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.ASCIIEncoding.GetBytes%2A> method performs the actual encoding.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding.GetByteCount%2A&gt;</ph> method determines how many bytes result in encoding a set of Unicode characters, and the <ph id=\"ph2\">&lt;xref:System.Text.ASCIIEncoding.GetBytes%2A&gt;</ph> method performs the actual encoding.","pos":[0,223],"source":"The <xref:System.Text.ASCIIEncoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.ASCIIEncoding.GetBytes%2A> method performs the actual encoding."}]},{"pos":[1939,2219],"content":"Likewise, the <xref:System.Text.ASCIIEncoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.ASCIIEncoding.GetChars%2A> and <xref:System.Text.ASCIIEncoding.GetString%2A> methods perform the actual decoding.","nodes":[{"content":"Likewise, the <ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding.GetCharCount%2A&gt;</ph> method determines how many characters result in decoding a sequence of bytes, and the <ph id=\"ph2\">&lt;xref:System.Text.ASCIIEncoding.GetChars%2A&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Text.ASCIIEncoding.GetString%2A&gt;</ph> methods perform the actual decoding.","pos":[0,280],"source":"Likewise, the <xref:System.Text.ASCIIEncoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.ASCIIEncoding.GetChars%2A> and <xref:System.Text.ASCIIEncoding.GetString%2A> methods perform the actual decoding."}]},{"pos":[2226,2705],"content":"Note that the default <xref:System.Text.ASCIIEncoding> constructor by itself might not have the appropriate behavior for your application. You might want to consider setting the <xref:System.Text.Encoding.EncoderFallback%2A> or <xref:System.Text.Encoding.DecoderFallback%2A> property to <xref:System.Text.EncoderExceptionFallback> or <xref:System.Text.DecoderExceptionFallback> to prevent sequences with the 8th bit set. Custom behavior might also be appropriate for these cases.","nodes":[{"content":"Note that the default <xref:System.Text.ASCIIEncoding> constructor by itself might not have the appropriate behavior for your application. You might want to consider setting the <xref:System.Text.Encoding.EncoderFallback%2A> or <xref:System.Text.Encoding.DecoderFallback%2A> property to <xref:System.Text.EncoderExceptionFallback> or <xref:System.Text.DecoderExceptionFallback> to prevent sequences with the 8th bit set. Custom behavior might also be appropriate for these cases.","pos":[0,479],"nodes":[{"content":"Note that the default <ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding&gt;</ph> constructor by itself might not have the appropriate behavior for your application.","pos":[0,138],"source":"Note that the default <xref:System.Text.ASCIIEncoding> constructor by itself might not have the appropriate behavior for your application."},{"content":"You might want to consider setting the <ph id=\"ph1\">&lt;xref:System.Text.Encoding.EncoderFallback%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Text.Encoding.DecoderFallback%2A&gt;</ph> property to <ph id=\"ph3\">&lt;xref:System.Text.EncoderExceptionFallback&gt;</ph> or <ph id=\"ph4\">&lt;xref:System.Text.DecoderExceptionFallback&gt;</ph> to prevent sequences with the 8th bit set.","pos":[139,420],"source":" You might want to consider setting the <xref:System.Text.Encoding.EncoderFallback%2A> or <xref:System.Text.Encoding.DecoderFallback%2A> property to <xref:System.Text.EncoderExceptionFallback> or <xref:System.Text.DecoderExceptionFallback> to prevent sequences with the 8th bit set."},{"content":"Custom behavior might also be appropriate for these cases.","pos":[421,479]}]}]}],"pos":[1687,4410],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Text.ASCIIEncoding\"></xref> class.","nodes":[{"pos":[0,87],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Text.ASCIIEncoding\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Text.ASCIIEncoding\"></xref> class."}],"pos":[9249,9337],"yaml":true},{"content":"> [!CAUTION]\n>  The <xref:System.Text.ASCIIEncoding> class does not provide error detection. For security reasons, you should use the <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> class and enable error detection.  \n  \n If you choose to use ASCII encoding, this constructor may not provide the appropriate fallback behavior for your application. It uses the <xref:System.Text.EncoderReplacementFallback> and <xref:System.Text.DecoderReplacementFallback> classes to replace every character outside the range of U+0000 through U+007F with a question mark (?). Instead, you can call the <xref:System.Text.Encoding.GetEncoding%28System.Int32%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29?displayProperty=fullName> or <xref:System.Text.Encoding.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29?displayProperty=fullName> method and pass it <xref:System.Text.EncoderExceptionFallback> and <xref:System.Text.DecoderExceptionFallback> objects to use exception fallback.  \n  \n> [!NOTE]\n>  <xref:System.Text.ASCIIEncoding> supports only the Unicode character values between U+0000 and U+007F. Therefore, <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, and <xref:System.Text.UTF32Encoding> are better suited for globalized applications.","nodes":[{"pos":[2,272],"content":"[!CAUTION]\n The <xref:System.Text.ASCIIEncoding> class does not provide error detection. For security reasons, you should use the <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> class and enable error detection.","leadings":["","> "],"nodes":[{"content":" The <xref:System.Text.ASCIIEncoding> class does not provide error detection. For security reasons, you should use the <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> class and enable error detection.","pos":[11,268],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding&gt;</ph> class does not provide error detection.","pos":[1,77],"source":" The <xref:System.Text.ASCIIEncoding> class does not provide error detection."},{"content":"For security reasons, you should use the <ph id=\"ph1\">&lt;xref:System.Text.UTF8Encoding&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Text.UTF32Encoding&gt;</ph> class and enable error detection.","pos":[78,257],"source":" For security reasons, you should use the <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> class and enable error detection."}]}]},{"pos":[279,1078],"content":"If you choose to use ASCII encoding, this constructor may not provide the appropriate fallback behavior for your application. It uses the <xref:System.Text.EncoderReplacementFallback> and <xref:System.Text.DecoderReplacementFallback> classes to replace every character outside the range of U+0000 through U+007F with a question mark (?). Instead, you can call the <xref:System.Text.Encoding.GetEncoding%28System.Int32%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29?displayProperty=fullName> or <xref:System.Text.Encoding.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29?displayProperty=fullName> method and pass it <xref:System.Text.EncoderExceptionFallback> and <xref:System.Text.DecoderExceptionFallback> objects to use exception fallback.","nodes":[{"content":"If you choose to use ASCII encoding, this constructor may not provide the appropriate fallback behavior for your application. It uses the <xref:System.Text.EncoderReplacementFallback> and <xref:System.Text.DecoderReplacementFallback> classes to replace every character outside the range of U+0000 through U+007F with a question mark (?). Instead, you can call the <xref:System.Text.Encoding.GetEncoding%28System.Int32%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29?displayProperty=fullName> or <xref:System.Text.Encoding.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29?displayProperty=fullName> method and pass it <xref:System.Text.EncoderExceptionFallback> and <xref:System.Text.DecoderExceptionFallback> objects to use exception fallback.","pos":[0,799],"nodes":[{"content":"If you choose to use ASCII encoding, this constructor may not provide the appropriate fallback behavior for your application.","pos":[0,125]},{"content":"It uses the <ph id=\"ph1\">&lt;xref:System.Text.EncoderReplacementFallback&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Text.DecoderReplacementFallback&gt;</ph> classes to replace every character outside the range of U+0000 through U+007F with a question mark (?).","pos":[126,337],"source":" It uses the <xref:System.Text.EncoderReplacementFallback> and <xref:System.Text.DecoderReplacementFallback> classes to replace every character outside the range of U+0000 through U+007F with a question mark (?)."},{"content":"Instead, you can call the <ph id=\"ph1\">&lt;xref:System.Text.Encoding.GetEncoding%28System.Int32%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Text.Encoding.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29?displayProperty=fullName&gt;</ph> method and pass it <ph id=\"ph3\">&lt;xref:System.Text.EncoderExceptionFallback&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.Text.DecoderExceptionFallback&gt;</ph> objects to use exception fallback.","pos":[338,799],"source":" Instead, you can call the <xref:System.Text.Encoding.GetEncoding%28System.Int32%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29?displayProperty=fullName> or <xref:System.Text.Encoding.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29?displayProperty=fullName> method and pass it <xref:System.Text.EncoderExceptionFallback> and <xref:System.Text.DecoderExceptionFallback> objects to use exception fallback."}]}]},{"pos":[1086,1363],"content":"[!NOTE]\n <xref:System.Text.ASCIIEncoding> supports only the Unicode character values between U+0000 and U+007F. Therefore, <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, and <xref:System.Text.UTF32Encoding> are better suited for globalized applications.","leadings":["","> "],"nodes":[{"content":" <xref:System.Text.ASCIIEncoding> supports only the Unicode character values between U+0000 and U+007F. Therefore, <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, and <xref:System.Text.UTF32Encoding> are better suited for globalized applications.","pos":[8,275],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding&gt;</ph> supports only the Unicode character values between U+0000 and U+007F.","pos":[1,103],"source":" <xref:System.Text.ASCIIEncoding> supports only the Unicode character values between U+0000 and U+007F."},{"content":"Therefore, <ph id=\"ph1\">&lt;xref:System.Text.UTF8Encoding&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Text.UTF32Encoding&gt;</ph> are better suited for globalized applications.","pos":[104,267],"source":" Therefore, <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, and <xref:System.Text.UTF32Encoding> are better suited for globalized applications."}]}]}],"pos":[9348,10720],"yaml":true,"extradata":"MT"},{"content":"Calculates the number of bytes produced by encoding the characters in the specified <xref href=\"System.String\"></xref>.","nodes":[{"pos":[0,119],"content":"Calculates the number of bytes produced by encoding the characters in the specified <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph>.","source":"Calculates the number of bytes produced by encoding the characters in the specified <xref href=\"System.String\"></xref>."}],"pos":[12870,12990],"yaml":true},{"content":"To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.ASCIIEncoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>. The <xref:System.Text.ASCIIEncoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> method generally executes faster.","nodes":[{"pos":[0,508],"content":"To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.ASCIIEncoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>. The <xref:System.Text.ASCIIEncoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> method generally executes faster.","nodes":[{"content":"To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.ASCIIEncoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>. The <xref:System.Text.ASCIIEncoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> method generally executes faster.","pos":[0,508],"nodes":[{"content":"To calculate the exact array size required by <ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding.GetBytes%2A&gt;</ph> to store the resulting bytes, the application uses <ph id=\"ph2\">&lt;xref:System.Text.ASCIIEncoding.GetByteCount%2A&gt;</ph>.","pos":[0,191],"source":"To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.ASCIIEncoding.GetByteCount%2A>."},{"content":"To calculate the maximum array size, the application should use <ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A&gt;</ph>.","pos":[192,308],"source":" To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding.GetByteCount%2A&gt;</ph> method generally allows allocation of less memory, while the <ph id=\"ph2\">&lt;xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A&gt;</ph> method generally executes faster.","pos":[309,508],"source":" The <xref:System.Text.ASCIIEncoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> method generally executes faster."}]}]}],"pos":[13001,13510],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.String\"></xref> containing the set of characters to encode.","nodes":[{"pos":[0,82],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> containing the set of characters to encode.","source":"The <xref href=\"System.String\"></xref> containing the set of characters to encode."}],"pos":[14465,14548],"yaml":true},{"content":"The number of bytes produced by encoding the specified characters.","nodes":[{"pos":[0,66],"content":"The number of bytes produced by encoding the specified characters.","nodes":[{"content":"The number of bytes produced by encoding the specified characters.","pos":[0,66]}]}],"pos":[14604,14671],"yaml":true},{"content":"<code>chars</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;chars&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>chars</code> is `null`."}],"pos":[14839,14869],"yaml":true},{"content":"The resulting number of bytes is greater than the maximum number that can be returned as an integer.","nodes":[{"pos":[0,100],"content":"The resulting number of bytes is greater than the maximum number that can be returned as an integer.","nodes":[{"content":"The resulting number of bytes is greater than the maximum number that can be returned as an integer.","pos":[0,100]}]}],"pos":[14983,15084],"yaml":true},{"content":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>.","nodes":[{"pos":[0,143],"content":"A fallback occurred (see <bpt id=\"p1\">[</bpt>Character Encoding in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/character-encoding.md)</ept> for complete explanation)","source":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)"},{"pos":[150,155],"content":"-and-","nodes":[{"content":"-and-","pos":[0,5]}]},{"pos":[162,288],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Text.Encoding.EncoderFallback\"&gt;&lt;/xref&gt;</ph> is set to <ph id=\"ph2\">&lt;xref href=\"System.Text.EncoderExceptionFallback\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."}],"pos":[15202,15501],"yaml":true},{"content":"Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.","nodes":[{"pos":[0,116],"content":"Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.","nodes":[{"content":"Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.","pos":[0,116]}]}],"pos":[16955,17072],"yaml":true},{"content":"To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.ASCIIEncoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>. The <xref:System.Text.ASCIIEncoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> method generally executes faster.","nodes":[{"pos":[0,508],"content":"To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.ASCIIEncoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>. The <xref:System.Text.ASCIIEncoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> method generally executes faster.","nodes":[{"content":"To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.ASCIIEncoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>. The <xref:System.Text.ASCIIEncoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> method generally executes faster.","pos":[0,508],"nodes":[{"content":"To calculate the exact array size required by <ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding.GetBytes%2A&gt;</ph> to store the resulting bytes, the application uses <ph id=\"ph2\">&lt;xref:System.Text.ASCIIEncoding.GetByteCount%2A&gt;</ph>.","pos":[0,191],"source":"To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.ASCIIEncoding.GetByteCount%2A>."},{"content":"To calculate the maximum array size, the application should use <ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A&gt;</ph>.","pos":[192,308],"source":" To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding.GetByteCount%2A&gt;</ph> method generally allows allocation of less memory, while the <ph id=\"ph2\">&lt;xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A&gt;</ph> method generally executes faster.","pos":[309,508],"source":" The <xref:System.Text.ASCIIEncoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> method generally executes faster."}]}]}],"pos":[17083,17592],"yaml":true,"extradata":"MT"},{"content":"A pointer to the first character to encode.","nodes":[{"pos":[0,43],"content":"A pointer to the first character to encode.","nodes":[{"content":"A pointer to the first character to encode.","pos":[0,43]}]}],"pos":[17895,17939],"yaml":true},{"content":"The number of characters to encode.","nodes":[{"pos":[0,35],"content":"The number of characters to encode.","nodes":[{"content":"The number of characters to encode.","pos":[0,35]}]}],"pos":[17999,18035],"yaml":true},{"content":"The number of bytes produced by encoding the specified characters.","nodes":[{"pos":[0,66],"content":"The number of bytes produced by encoding the specified characters.","nodes":[{"content":"The number of bytes produced by encoding the specified characters.","pos":[0,66]}]}],"pos":[18091,18158],"yaml":true},{"content":"<code>chars</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;chars&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>chars</code> is `null`."}],"pos":[18326,18356],"yaml":true},{"content":"<code>count</code> is less than zero.  \n  \n -or-  \n  \n The resulting number of bytes is greater than the maximum number that can be returned as an integer.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","source":"<code>count</code> is less than zero."},{"pos":[44,48],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[55,155],"content":"The resulting number of bytes is greater than the maximum number that can be returned as an integer.","nodes":[{"content":"The resulting number of bytes is greater than the maximum number that can be returned as an integer.","pos":[0,100]}]}],"pos":[18470,18632],"yaml":true},{"content":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>.","nodes":[{"pos":[0,143],"content":"A fallback occurred (see <bpt id=\"p1\">[</bpt>Character Encoding in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/character-encoding.md)</ept> for complete explanation)","source":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)"},{"pos":[150,155],"content":"-and-","nodes":[{"content":"-and-","pos":[0,5]}]},{"pos":[162,288],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Text.Encoding.EncoderFallback\"&gt;&lt;/xref&gt;</ph> is set to <ph id=\"ph2\">&lt;xref href=\"System.Text.EncoderExceptionFallback\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."}],"pos":[18750,19049],"yaml":true},{"content":"Calculates the number of bytes produced by encoding a set of characters from the specified character array.","nodes":[{"pos":[0,107],"content":"Calculates the number of bytes produced by encoding a set of characters from the specified character array.","nodes":[{"content":"Calculates the number of bytes produced by encoding a set of characters from the specified character array.","pos":[0,107]}]}],"pos":[20814,20922],"yaml":true},{"content":"To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.ASCIIEncoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>. The <xref:System.Text.ASCIIEncoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> method generally executes faster.","nodes":[{"pos":[0,508],"content":"To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.ASCIIEncoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>. The <xref:System.Text.ASCIIEncoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> method generally executes faster.","nodes":[{"content":"To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.ASCIIEncoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>. The <xref:System.Text.ASCIIEncoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> method generally executes faster.","pos":[0,508],"nodes":[{"content":"To calculate the exact array size required by <ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding.GetBytes%2A&gt;</ph> to store the resulting bytes, the application uses <ph id=\"ph2\">&lt;xref:System.Text.ASCIIEncoding.GetByteCount%2A&gt;</ph>.","pos":[0,191],"source":"To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.ASCIIEncoding.GetByteCount%2A>."},{"content":"To calculate the maximum array size, the application should use <ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A&gt;</ph>.","pos":[192,308],"source":" To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding.GetByteCount%2A&gt;</ph> method generally allows allocation of less memory, while the <ph id=\"ph2\">&lt;xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A&gt;</ph> method generally executes faster.","pos":[309,508],"source":" The <xref:System.Text.ASCIIEncoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> method generally executes faster."}]}]}],"pos":[20933,21442],"yaml":true,"extradata":"MT"},{"content":"The character array containing the set of characters to encode.","nodes":[{"pos":[0,63],"content":"The character array containing the set of characters to encode.","nodes":[{"content":"The character array containing the set of characters to encode.","pos":[0,63]}]}],"pos":[22477,22541],"yaml":true},{"content":"The index of the first character to encode.","nodes":[{"pos":[0,43],"content":"The index of the first character to encode.","nodes":[{"content":"The index of the first character to encode.","pos":[0,43]}]}],"pos":[22601,22645],"yaml":true},{"content":"The number of characters to encode.","nodes":[{"pos":[0,35],"content":"The number of characters to encode.","nodes":[{"content":"The number of characters to encode.","pos":[0,35]}]}],"pos":[22705,22741],"yaml":true},{"content":"The number of bytes produced by encoding the specified characters.","nodes":[{"pos":[0,66],"content":"The number of bytes produced by encoding the specified characters.","nodes":[{"content":"The number of bytes produced by encoding the specified characters.","pos":[0,66]}]}],"pos":[22797,22864],"yaml":true},{"content":"<code>chars</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;chars&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>chars</code> is `null`."}],"pos":[23032,23062],"yaml":true},{"content":"<code>index</code> or <code>count</code> is less than zero.  \n  \n -or-  \n  \n <code>index</code> and <code>count</code> do not denote a valid range in <code>chars</code>.  \n  \n -or-  \n  \n The resulting number of bytes is greater than the maximum number that can be returned as an integer.","nodes":[{"pos":[0,59],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","source":"<code>index</code> or <code>count</code> is less than zero."},{"pos":[66,70],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[77,169],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> do not denote a valid range in <ph id=\"ph3\">&lt;code&gt;chars&lt;/code&gt;</ph>.","source":"<code>index</code> and <code>count</code> do not denote a valid range in <code>chars</code>."},{"pos":[176,180],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[187,287],"content":"The resulting number of bytes is greater than the maximum number that can be returned as an integer.","nodes":[{"content":"The resulting number of bytes is greater than the maximum number that can be returned as an integer.","pos":[0,100]}]}],"pos":[23176,23474],"yaml":true},{"content":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>.","nodes":[{"pos":[0,143],"content":"A fallback occurred (see <bpt id=\"p1\">[</bpt>Character Encoding in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/character-encoding.md)</ept> for complete explanation)","source":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)"},{"pos":[150,155],"content":"-and-","nodes":[{"content":"-and-","pos":[0,5]}]},{"pos":[162,288],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Text.Encoding.EncoderFallback\"&gt;&lt;/xref&gt;</ph> is set to <ph id=\"ph2\">&lt;xref href=\"System.Text.EncoderExceptionFallback\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."}],"pos":[23592,23891],"yaml":true},{"content":"Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.","nodes":[{"pos":[0,152],"content":"Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.","nodes":[{"content":"Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.","pos":[0,152]}]}],"pos":[25441,25594],"yaml":true},{"content":"To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.ASCIIEncoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>. The <xref:System.Text.ASCIIEncoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> method generally executes faster.  \n  \n Data to be converted, such as data read from a stream, can be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.ASCIIEncoding.GetDecoder%2A> method or the <xref:System.Text.ASCIIEncoding.GetEncoder%2A> method, respectively.  \n  \n <xref:System.Text.ASCIIEncoding> does not provide error detection. Any Unicode character greater than U+007F is translated to an ASCII question mark (\"?\").  \n  \n> [!CAUTION]\n>  For security reasons, your application is recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.","nodes":[{"pos":[0,508],"content":"To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.ASCIIEncoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>. The <xref:System.Text.ASCIIEncoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> method generally executes faster.","nodes":[{"content":"To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.ASCIIEncoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>. The <xref:System.Text.ASCIIEncoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> method generally executes faster.","pos":[0,508],"nodes":[{"content":"To calculate the exact array size required by <ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding.GetBytes%2A&gt;</ph> to store the resulting bytes, the application uses <ph id=\"ph2\">&lt;xref:System.Text.ASCIIEncoding.GetByteCount%2A&gt;</ph>.","pos":[0,191],"source":"To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.ASCIIEncoding.GetByteCount%2A>."},{"content":"To calculate the maximum array size, the application should use <ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A&gt;</ph>.","pos":[192,308],"source":" To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding.GetByteCount%2A&gt;</ph> method generally allows allocation of less memory, while the <ph id=\"ph2\">&lt;xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A&gt;</ph> method generally executes faster.","pos":[309,508],"source":" The <xref:System.Text.ASCIIEncoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> method generally executes faster."}]}]},{"pos":[515,951],"content":"Data to be converted, such as data read from a stream, can be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.ASCIIEncoding.GetDecoder%2A> method or the <xref:System.Text.ASCIIEncoding.GetEncoder%2A> method, respectively.","nodes":[{"content":"Data to be converted, such as data read from a stream, can be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.ASCIIEncoding.GetDecoder%2A> method or the <xref:System.Text.ASCIIEncoding.GetEncoder%2A> method, respectively.","pos":[0,436],"nodes":[{"content":"Data to be converted, such as data read from a stream, can be available only in sequential blocks.","pos":[0,98]},{"content":"In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <ph id=\"ph1\">&lt;xref:System.Text.Decoder&gt;</ph> or the <ph id=\"ph2\">&lt;xref:System.Text.Encoder&gt;</ph> provided by the <ph id=\"ph3\">&lt;xref:System.Text.ASCIIEncoding.GetDecoder%2A&gt;</ph> method or the <ph id=\"ph4\">&lt;xref:System.Text.ASCIIEncoding.GetEncoder%2A&gt;</ph> method, respectively.","pos":[99,436],"source":" In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.ASCIIEncoding.GetDecoder%2A> method or the <xref:System.Text.ASCIIEncoding.GetEncoder%2A> method, respectively."}]}]},{"pos":[958,1113],"content":"<xref:System.Text.ASCIIEncoding> does not provide error detection. Any Unicode character greater than U+007F is translated to an ASCII question mark (\"?\").","nodes":[{"content":"<xref:System.Text.ASCIIEncoding> does not provide error detection. Any Unicode character greater than U+007F is translated to an ASCII question mark (\"?\").","pos":[0,155],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding&gt;</ph> does not provide error detection.","pos":[0,66],"source":"<xref:System.Text.ASCIIEncoding> does not provide error detection."},{"content":"Any Unicode character greater than U+007F is translated to an ASCII question mark (\"?\").","pos":[67,155]}]}]},{"pos":[1121,1328],"content":"[!CAUTION]\n For security reasons, your application is recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.","leadings":["","> "],"nodes":[{"content":"For security reasons, your application is recommended to use <ph id=\"ph1\">&lt;xref:System.Text.UTF8Encoding&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Text.UTF32Encoding&gt;</ph> and enable error detection.","pos":[12,205],"source":" For security reasons, your application is recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection."}]}],"pos":[25605,26945],"yaml":true,"extradata":"MT"},{"content":"A pointer to the first character to encode.","nodes":[{"pos":[0,43],"content":"A pointer to the first character to encode.","nodes":[{"content":"A pointer to the first character to encode.","pos":[0,43]}]}],"pos":[27276,27320],"yaml":true},{"content":"The number of characters to encode.","nodes":[{"pos":[0,35],"content":"The number of characters to encode.","nodes":[{"content":"The number of characters to encode.","pos":[0,35]}]}],"pos":[27384,27420],"yaml":true},{"content":"A pointer to the location at which to start writing the resulting sequence of bytes.","nodes":[{"pos":[0,84],"content":"A pointer to the location at which to start writing the resulting sequence of bytes.","nodes":[{"content":"A pointer to the location at which to start writing the resulting sequence of bytes.","pos":[0,84]}]}],"pos":[27480,27565],"yaml":true},{"content":"The maximum number of bytes to write.","nodes":[{"pos":[0,37],"content":"The maximum number of bytes to write.","nodes":[{"content":"The maximum number of bytes to write.","pos":[0,37]}]}],"pos":[27629,27667],"yaml":true},{"content":"The actual number of bytes written at the location indicated by <code>bytes</code>.","nodes":[{"pos":[0,83],"content":"The actual number of bytes written at the location indicated by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">bytes</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The actual number of bytes written at the location indicated by <code>bytes</code>."}],"pos":[27723,27807],"yaml":true},{"content":"<code>chars</code> is `null`.  \n  \n -or-  \n  \n <code>bytes</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;chars&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>chars</code> is `null`."},{"pos":[36,40],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[47,76],"content":"<ph id=\"ph1\">&lt;code&gt;bytes&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>bytes</code> is `null`."}],"pos":[27971,28054],"yaml":true},{"content":"<code>charCount</code> or <code>byteCount</code> is less than zero.","nodes":[{"pos":[0,67],"content":"<ph id=\"ph1\">&lt;code&gt;charCount&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;byteCount&lt;/code&gt;</ph> is less than zero.","source":"<code>charCount</code> or <code>byteCount</code> is less than zero."}],"pos":[28168,28236],"yaml":true},{"content":"<code>byteCount</code> is less than the resulting number of bytes.","nodes":[{"pos":[0,66],"content":"<ph id=\"ph1\">&lt;code&gt;byteCount&lt;/code&gt;</ph> is less than the resulting number of bytes.","source":"<code>byteCount</code> is less than the resulting number of bytes."}],"pos":[28330,28397],"yaml":true},{"content":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>.","nodes":[{"pos":[0,143],"content":"A fallback occurred (see <bpt id=\"p1\">[</bpt>Character Encoding in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/character-encoding.md)</ept> for complete explanation)","source":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)"},{"pos":[150,155],"content":"-and-","nodes":[{"content":"-and-","pos":[0,5]}]},{"pos":[162,288],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Text.Encoding.EncoderFallback\"&gt;&lt;/xref&gt;</ph> is set to <ph id=\"ph2\">&lt;xref href=\"System.Text.EncoderExceptionFallback\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."}],"pos":[28515,28814],"yaml":true},{"content":"Encodes a set of characters from the specified character array into the specified byte array.","nodes":[{"pos":[0,93],"content":"Encodes a set of characters from the specified character array into the specified byte array.","nodes":[{"content":"Encodes a set of characters from the specified character array into the specified byte array.","pos":[0,93]}]}],"pos":[30704,30798],"yaml":true},{"content":"To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.ASCIIEncoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>. The <xref:System.Text.ASCIIEncoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> method generally executes faster.  \n  \n Data to be converted, such as data read from a stream, can be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.ASCIIEncoding.GetDecoder%2A> method or the <xref:System.Text.ASCIIEncoding.GetEncoder%2A> method, respectively.  \n  \n <xref:System.Text.ASCIIEncoding> does not provide error detection. Any Unicode character greater than U+007F is encoded as the ASCII question mark (\"?\").  \n  \n> [!CAUTION]\n>  For security reasons, your application is recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.","nodes":[{"pos":[0,508],"content":"To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.ASCIIEncoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>. The <xref:System.Text.ASCIIEncoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> method generally executes faster.","nodes":[{"content":"To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.ASCIIEncoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>. The <xref:System.Text.ASCIIEncoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> method generally executes faster.","pos":[0,508],"nodes":[{"content":"To calculate the exact array size required by <ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding.GetBytes%2A&gt;</ph> to store the resulting bytes, the application uses <ph id=\"ph2\">&lt;xref:System.Text.ASCIIEncoding.GetByteCount%2A&gt;</ph>.","pos":[0,191],"source":"To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.ASCIIEncoding.GetByteCount%2A>."},{"content":"To calculate the maximum array size, the application should use <ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A&gt;</ph>.","pos":[192,308],"source":" To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding.GetByteCount%2A&gt;</ph> method generally allows allocation of less memory, while the <ph id=\"ph2\">&lt;xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A&gt;</ph> method generally executes faster.","pos":[309,508],"source":" The <xref:System.Text.ASCIIEncoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> method generally executes faster."}]}]},{"pos":[515,951],"content":"Data to be converted, such as data read from a stream, can be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.ASCIIEncoding.GetDecoder%2A> method or the <xref:System.Text.ASCIIEncoding.GetEncoder%2A> method, respectively.","nodes":[{"content":"Data to be converted, such as data read from a stream, can be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.ASCIIEncoding.GetDecoder%2A> method or the <xref:System.Text.ASCIIEncoding.GetEncoder%2A> method, respectively.","pos":[0,436],"nodes":[{"content":"Data to be converted, such as data read from a stream, can be available only in sequential blocks.","pos":[0,98]},{"content":"In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <ph id=\"ph1\">&lt;xref:System.Text.Decoder&gt;</ph> or the <ph id=\"ph2\">&lt;xref:System.Text.Encoder&gt;</ph> provided by the <ph id=\"ph3\">&lt;xref:System.Text.ASCIIEncoding.GetDecoder%2A&gt;</ph> method or the <ph id=\"ph4\">&lt;xref:System.Text.ASCIIEncoding.GetEncoder%2A&gt;</ph> method, respectively.","pos":[99,436],"source":" In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.ASCIIEncoding.GetDecoder%2A> method or the <xref:System.Text.ASCIIEncoding.GetEncoder%2A> method, respectively."}]}]},{"pos":[958,1111],"content":"<xref:System.Text.ASCIIEncoding> does not provide error detection. Any Unicode character greater than U+007F is encoded as the ASCII question mark (\"?\").","nodes":[{"content":"<xref:System.Text.ASCIIEncoding> does not provide error detection. Any Unicode character greater than U+007F is encoded as the ASCII question mark (\"?\").","pos":[0,153],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding&gt;</ph> does not provide error detection.","pos":[0,66],"source":"<xref:System.Text.ASCIIEncoding> does not provide error detection."},{"content":"Any Unicode character greater than U+007F is encoded as the ASCII question mark (\"?\").","pos":[67,153]}]}]},{"pos":[1119,1326],"content":"[!CAUTION]\n For security reasons, your application is recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.","leadings":["","> "],"nodes":[{"content":"For security reasons, your application is recommended to use <ph id=\"ph1\">&lt;xref:System.Text.UTF8Encoding&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Text.UTF32Encoding&gt;</ph> and enable error detection.","pos":[12,205],"source":" For security reasons, your application is recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection."}]}],"pos":[30809,32147],"yaml":true,"extradata":"MT"},{"content":"The character array containing the set of characters to encode.","nodes":[{"pos":[0,63],"content":"The character array containing the set of characters to encode.","nodes":[{"content":"The character array containing the set of characters to encode.","pos":[0,63]}]}],"pos":[33213,33277],"yaml":true},{"content":"The index of the first character to encode.","nodes":[{"pos":[0,43],"content":"The index of the first character to encode.","nodes":[{"content":"The index of the first character to encode.","pos":[0,43]}]}],"pos":[33341,33385],"yaml":true},{"content":"The number of characters to encode.","nodes":[{"pos":[0,35],"content":"The number of characters to encode.","nodes":[{"content":"The number of characters to encode.","pos":[0,35]}]}],"pos":[33449,33485],"yaml":true},{"content":"The byte array to contain the resulting sequence of bytes.","nodes":[{"pos":[0,58],"content":"The byte array to contain the resulting sequence of bytes.","nodes":[{"content":"The byte array to contain the resulting sequence of bytes.","pos":[0,58]}]}],"pos":[33546,33605],"yaml":true},{"content":"The index at which to start writing the resulting sequence of bytes.","nodes":[{"pos":[0,68],"content":"The index at which to start writing the resulting sequence of bytes.","nodes":[{"content":"The index at which to start writing the resulting sequence of bytes.","pos":[0,68]}]}],"pos":[33669,33738],"yaml":true},{"content":"The actual number of bytes written into <code>bytes</code>.","nodes":[{"pos":[0,59],"content":"The actual number of bytes written into <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">bytes</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The actual number of bytes written into <code>bytes</code>."}],"pos":[33794,33854],"yaml":true},{"content":"<code>chars</code> is `null`.  \n  \n -or-  \n  \n <code>bytes</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;chars&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>chars</code> is `null`."},{"pos":[36,40],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[47,76],"content":"<ph id=\"ph1\">&lt;code&gt;bytes&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>bytes</code> is `null`."}],"pos":[34018,34101],"yaml":true},{"content":"<code>charIndex</code> or <code>charCount</code> or <code>byteIndex</code> is less than zero.  \n  \n -or-  \n  \n <code>charIndex</code> and <code>charCount</code> do not denote a valid range in <code>chars</code>.  \n  \n -or-  \n  \n <code>byteIndex</code> is not a valid index in <code>bytes</code>.","nodes":[{"pos":[0,93],"content":"<ph id=\"ph1\">&lt;code&gt;charIndex&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;charCount&lt;/code&gt;</ph> or <ph id=\"ph3\">&lt;code&gt;byteIndex&lt;/code&gt;</ph> is less than zero.","source":"<code>charIndex</code> or <code>charCount</code> or <code>byteIndex</code> is less than zero."},{"pos":[100,104],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[111,211],"content":"<ph id=\"ph1\">&lt;code&gt;charIndex&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;charCount&lt;/code&gt;</ph> do not denote a valid range in <ph id=\"ph3\">&lt;code&gt;chars&lt;/code&gt;</ph>.","source":"<code>charIndex</code> and <code>charCount</code> do not denote a valid range in <code>chars</code>."},{"pos":[218,222],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[229,295],"content":"<ph id=\"ph1\">&lt;code&gt;byteIndex&lt;/code&gt;</ph> is not a valid index in <ph id=\"ph2\">&lt;code&gt;bytes&lt;/code&gt;</ph>.","source":"<code>byteIndex</code> is not a valid index in <code>bytes</code>."}],"pos":[34215,34521],"yaml":true},{"content":"<code>bytes</code> does not have enough capacity from <code>byteIndex</code> to the end of the array to accommodate the resulting bytes.","nodes":[{"pos":[0,136],"content":"<ph id=\"ph1\">&lt;code&gt;bytes&lt;/code&gt;</ph> does not have enough capacity from <ph id=\"ph2\">&lt;code&gt;byteIndex&lt;/code&gt;</ph> to the end of the array to accommodate the resulting bytes.","source":"<code>bytes</code> does not have enough capacity from <code>byteIndex</code> to the end of the array to accommodate the resulting bytes."}],"pos":[34615,34752],"yaml":true},{"content":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>.","nodes":[{"pos":[0,143],"content":"A fallback occurred (see <bpt id=\"p1\">[</bpt>Character Encoding in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/character-encoding.md)</ept> for complete explanation)","source":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)"},{"pos":[150,155],"content":"-and-","nodes":[{"content":"-and-","pos":[0,5]}]},{"pos":[162,288],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Text.Encoding.EncoderFallback\"&gt;&lt;/xref&gt;</ph> is set to <ph id=\"ph2\">&lt;xref href=\"System.Text.EncoderExceptionFallback\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."}],"pos":[34870,35169],"yaml":true},{"content":"Encodes a set of characters from the specified <xref href=\"System.String\"></xref> into the specified byte array.","nodes":[{"pos":[0,112],"content":"Encodes a set of characters from the specified <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> into the specified byte array.","source":"Encodes a set of characters from the specified <xref href=\"System.String\"></xref> into the specified byte array."}],"pos":[36791,36904],"yaml":true},{"content":"To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.ASCIIEncoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>. The <xref:System.Text.ASCIIEncoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> method generally executes faster.  \n  \n Data to be converted, such as data read from a stream, can be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.ASCIIEncoding.GetDecoder%2A> method or the <xref:System.Text.ASCIIEncoding.GetEncoder%2A> method, respectively.  \n  \n <xref:System.Text.ASCIIEncoding> does not provide error detection. Any Unicode character greater than U+007F is encoded as the ASCII question mark (\"?\").  \n  \n> [!CAUTION]\n>  For security reasons, your application is recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.","nodes":[{"pos":[0,508],"content":"To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.ASCIIEncoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>. The <xref:System.Text.ASCIIEncoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> method generally executes faster.","nodes":[{"content":"To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.ASCIIEncoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>. The <xref:System.Text.ASCIIEncoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> method generally executes faster.","pos":[0,508],"nodes":[{"content":"To calculate the exact array size required by <ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding.GetBytes%2A&gt;</ph> to store the resulting bytes, the application uses <ph id=\"ph2\">&lt;xref:System.Text.ASCIIEncoding.GetByteCount%2A&gt;</ph>.","pos":[0,191],"source":"To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.ASCIIEncoding.GetByteCount%2A>."},{"content":"To calculate the maximum array size, the application should use <ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A&gt;</ph>.","pos":[192,308],"source":" To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding.GetByteCount%2A&gt;</ph> method generally allows allocation of less memory, while the <ph id=\"ph2\">&lt;xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A&gt;</ph> method generally executes faster.","pos":[309,508],"source":" The <xref:System.Text.ASCIIEncoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> method generally executes faster."}]}]},{"pos":[515,951],"content":"Data to be converted, such as data read from a stream, can be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.ASCIIEncoding.GetDecoder%2A> method or the <xref:System.Text.ASCIIEncoding.GetEncoder%2A> method, respectively.","nodes":[{"content":"Data to be converted, such as data read from a stream, can be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.ASCIIEncoding.GetDecoder%2A> method or the <xref:System.Text.ASCIIEncoding.GetEncoder%2A> method, respectively.","pos":[0,436],"nodes":[{"content":"Data to be converted, such as data read from a stream, can be available only in sequential blocks.","pos":[0,98]},{"content":"In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <ph id=\"ph1\">&lt;xref:System.Text.Decoder&gt;</ph> or the <ph id=\"ph2\">&lt;xref:System.Text.Encoder&gt;</ph> provided by the <ph id=\"ph3\">&lt;xref:System.Text.ASCIIEncoding.GetDecoder%2A&gt;</ph> method or the <ph id=\"ph4\">&lt;xref:System.Text.ASCIIEncoding.GetEncoder%2A&gt;</ph> method, respectively.","pos":[99,436],"source":" In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.ASCIIEncoding.GetDecoder%2A> method or the <xref:System.Text.ASCIIEncoding.GetEncoder%2A> method, respectively."}]}]},{"pos":[958,1111],"content":"<xref:System.Text.ASCIIEncoding> does not provide error detection. Any Unicode character greater than U+007F is encoded as the ASCII question mark (\"?\").","nodes":[{"content":"<xref:System.Text.ASCIIEncoding> does not provide error detection. Any Unicode character greater than U+007F is encoded as the ASCII question mark (\"?\").","pos":[0,153],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding&gt;</ph> does not provide error detection.","pos":[0,66],"source":"<xref:System.Text.ASCIIEncoding> does not provide error detection."},{"content":"Any Unicode character greater than U+007F is encoded as the ASCII question mark (\"?\").","pos":[67,153]}]}]},{"pos":[1119,1326],"content":"[!CAUTION]\n For security reasons, your application is recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.","leadings":["","> "],"nodes":[{"content":"For security reasons, your application is recommended to use <ph id=\"ph1\">&lt;xref:System.Text.UTF8Encoding&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Text.UTF32Encoding&gt;</ph> and enable error detection.","pos":[12,205],"source":" For security reasons, your application is recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection."}]}],"pos":[36915,38253],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.String\"></xref> containing the set of characters to encode.","nodes":[{"pos":[0,82],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> containing the set of characters to encode.","source":"The <xref href=\"System.String\"></xref> containing the set of characters to encode."}],"pos":[39281,39364],"yaml":true},{"content":"The index of the first character to encode.","nodes":[{"pos":[0,43],"content":"The index of the first character to encode.","nodes":[{"content":"The index of the first character to encode.","pos":[0,43]}]}],"pos":[39428,39472],"yaml":true},{"content":"The number of characters to encode.","nodes":[{"pos":[0,35],"content":"The number of characters to encode.","nodes":[{"content":"The number of characters to encode.","pos":[0,35]}]}],"pos":[39536,39572],"yaml":true},{"content":"The byte array to contain the resulting sequence of bytes.","nodes":[{"pos":[0,58],"content":"The byte array to contain the resulting sequence of bytes.","nodes":[{"content":"The byte array to contain the resulting sequence of bytes.","pos":[0,58]}]}],"pos":[39633,39692],"yaml":true},{"content":"The index at which to start writing the resulting sequence of bytes.","nodes":[{"pos":[0,68],"content":"The index at which to start writing the resulting sequence of bytes.","nodes":[{"content":"The index at which to start writing the resulting sequence of bytes.","pos":[0,68]}]}],"pos":[39756,39825],"yaml":true},{"content":"The actual number of bytes written into <code>bytes</code>.","nodes":[{"pos":[0,59],"content":"The actual number of bytes written into <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">bytes</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The actual number of bytes written into <code>bytes</code>."}],"pos":[39881,39941],"yaml":true},{"content":"<code>s</code> is `null`.  \n  \n -or-  \n  \n <code>bytes</code> is `null`.","nodes":[{"pos":[0,25],"content":"<ph id=\"ph1\">&lt;code&gt;s&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>s</code> is `null`."},{"pos":[32,36],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[43,72],"content":"<ph id=\"ph1\">&lt;code&gt;bytes&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>bytes</code> is `null`."}],"pos":[40105,40184],"yaml":true},{"content":"<code>charIndex</code> or <code>charCount</code> or <code>byteIndex</code> is less than zero.  \n  \n -or-  \n  \n <code>charIndex</code> and <code>charCount</code> do not denote a valid range in <code>chars</code>.  \n  \n -or-  \n  \n <code>byteIndex</code> is not a valid index in <code>bytes</code>.","nodes":[{"pos":[0,93],"content":"<ph id=\"ph1\">&lt;code&gt;charIndex&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;charCount&lt;/code&gt;</ph> or <ph id=\"ph3\">&lt;code&gt;byteIndex&lt;/code&gt;</ph> is less than zero.","source":"<code>charIndex</code> or <code>charCount</code> or <code>byteIndex</code> is less than zero."},{"pos":[100,104],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[111,211],"content":"<ph id=\"ph1\">&lt;code&gt;charIndex&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;charCount&lt;/code&gt;</ph> do not denote a valid range in <ph id=\"ph3\">&lt;code&gt;chars&lt;/code&gt;</ph>.","source":"<code>charIndex</code> and <code>charCount</code> do not denote a valid range in <code>chars</code>."},{"pos":[218,222],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[229,295],"content":"<ph id=\"ph1\">&lt;code&gt;byteIndex&lt;/code&gt;</ph> is not a valid index in <ph id=\"ph2\">&lt;code&gt;bytes&lt;/code&gt;</ph>.","source":"<code>byteIndex</code> is not a valid index in <code>bytes</code>."}],"pos":[40298,40604],"yaml":true},{"content":"<code>bytes</code> does not have enough capacity from <code>byteIndex</code> to the end of the array to accommodate the resulting bytes.","nodes":[{"pos":[0,136],"content":"<ph id=\"ph1\">&lt;code&gt;bytes&lt;/code&gt;</ph> does not have enough capacity from <ph id=\"ph2\">&lt;code&gt;byteIndex&lt;/code&gt;</ph> to the end of the array to accommodate the resulting bytes.","source":"<code>bytes</code> does not have enough capacity from <code>byteIndex</code> to the end of the array to accommodate the resulting bytes."}],"pos":[40698,40835],"yaml":true},{"content":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>.","nodes":[{"pos":[0,143],"content":"A fallback occurred (see <bpt id=\"p1\">[</bpt>Character Encoding in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/character-encoding.md)</ept> for complete explanation)","source":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)"},{"pos":[150,155],"content":"-and-","nodes":[{"content":"-and-","pos":[0,5]}]},{"pos":[162,288],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Text.Encoding.EncoderFallback\"&gt;&lt;/xref&gt;</ph> is set to <ph id=\"ph2\">&lt;xref href=\"System.Text.EncoderExceptionFallback\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."}],"pos":[40953,41252],"yaml":true},{"content":"Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.","nodes":[{"pos":[0,107],"content":"Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.","nodes":[{"content":"Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.","pos":[0,107]}]}],"pos":[42772,42880],"yaml":true},{"content":"To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.ASCIIEncoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A>. The <xref:System.Text.ASCIIEncoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> method generally executes faster.","nodes":[{"pos":[0,513],"content":"To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.ASCIIEncoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A>. The <xref:System.Text.ASCIIEncoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> method generally executes faster.","nodes":[{"content":"To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.ASCIIEncoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A>. The <xref:System.Text.ASCIIEncoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> method generally executes faster.","pos":[0,513],"nodes":[{"content":"To calculate the exact array size required by <ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding.GetChars%2A&gt;</ph> to store the resulting characters, the application uses <ph id=\"ph2\">&lt;xref:System.Text.ASCIIEncoding.GetCharCount%2A&gt;</ph>.","pos":[0,196],"source":"To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.ASCIIEncoding.GetCharCount%2A>."},{"content":"To calculate the maximum array size, the application should use <ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A&gt;</ph>.","pos":[197,313],"source":" To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding.GetCharCount%2A&gt;</ph> method generally allows allocation of less memory, while the <ph id=\"ph2\">&lt;xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A&gt;</ph> method generally executes faster.","pos":[314,513],"source":" The <xref:System.Text.ASCIIEncoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> method generally executes faster."}]}]}],"pos":[42891,43405],"yaml":true,"extradata":"MT"},{"content":"The byte array containing the sequence of bytes to decode.","nodes":[{"pos":[0,58],"content":"The byte array containing the sequence of bytes to decode.","nodes":[{"content":"The byte array containing the sequence of bytes to decode.","pos":[0,58]}]}],"pos":[44407,44466],"yaml":true},{"content":"The index of the first byte to decode.","nodes":[{"pos":[0,38],"content":"The index of the first byte to decode.","nodes":[{"content":"The index of the first byte to decode.","pos":[0,38]}]}],"pos":[44526,44565],"yaml":true},{"content":"The number of bytes to decode.","nodes":[{"pos":[0,30],"content":"The number of bytes to decode.","nodes":[{"content":"The number of bytes to decode.","pos":[0,30]}]}],"pos":[44625,44656],"yaml":true},{"content":"The number of characters produced by decoding the specified sequence of bytes.","nodes":[{"pos":[0,78],"content":"The number of characters produced by decoding the specified sequence of bytes.","nodes":[{"content":"The number of characters produced by decoding the specified sequence of bytes.","pos":[0,78]}]}],"pos":[44712,44791],"yaml":true},{"content":"<code>bytes</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;bytes&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>bytes</code> is `null`."}],"pos":[44959,44989],"yaml":true},{"content":"<code>index</code> or <code>count</code> is less than zero.  \n  \n -or-  \n  \n <code>index</code> and <code>count</code> do not denote a valid range in <code>bytes</code>.  \n  \n -or-  \n  \n The resulting number of bytes is greater than the maximum number that can be returned as an integer.","nodes":[{"pos":[0,59],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","source":"<code>index</code> or <code>count</code> is less than zero."},{"pos":[66,70],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[77,169],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> do not denote a valid range in <ph id=\"ph3\">&lt;code&gt;bytes&lt;/code&gt;</ph>.","source":"<code>index</code> and <code>count</code> do not denote a valid range in <code>bytes</code>."},{"pos":[176,180],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[187,287],"content":"The resulting number of bytes is greater than the maximum number that can be returned as an integer.","nodes":[{"content":"The resulting number of bytes is greater than the maximum number that can be returned as an integer.","pos":[0,100]}]}],"pos":[45103,45401],"yaml":true},{"content":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>.","nodes":[{"pos":[0,143],"content":"A fallback occurred (see <bpt id=\"p1\">[</bpt>Character Encoding in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/character-encoding.md)</ept> for complete explanation)","source":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)"},{"pos":[150,155],"content":"-and-","nodes":[{"content":"-and-","pos":[0,5]}]},{"pos":[162,288],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Text.Encoding.DecoderFallback\"&gt;&lt;/xref&gt;</ph> is set to <ph id=\"ph2\">&lt;xref href=\"System.Text.DecoderExceptionFallback\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."}],"pos":[45519,45818],"yaml":true},{"content":"Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.","nodes":[{"pos":[0,116],"content":"Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.","nodes":[{"content":"Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.","pos":[0,116]}]}],"pos":[47272,47389],"yaml":true},{"content":"To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.ASCIIEncoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A>. The <xref:System.Text.ASCIIEncoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> method generally executes faster.","nodes":[{"pos":[0,513],"content":"To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.ASCIIEncoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A>. The <xref:System.Text.ASCIIEncoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> method generally executes faster.","nodes":[{"content":"To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.ASCIIEncoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A>. The <xref:System.Text.ASCIIEncoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> method generally executes faster.","pos":[0,513],"nodes":[{"content":"To calculate the exact array size required by <ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding.GetChars%2A&gt;</ph> to store the resulting characters, the application uses <ph id=\"ph2\">&lt;xref:System.Text.ASCIIEncoding.GetCharCount%2A&gt;</ph>.","pos":[0,196],"source":"To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.ASCIIEncoding.GetCharCount%2A>."},{"content":"To calculate the maximum array size, the application should use <ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A&gt;</ph>.","pos":[197,313],"source":" To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding.GetCharCount%2A&gt;</ph> method generally allows allocation of less memory, while the <ph id=\"ph2\">&lt;xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A&gt;</ph> method generally executes faster.","pos":[314,513],"source":" The <xref:System.Text.ASCIIEncoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> method generally executes faster."}]}]}],"pos":[47400,47914],"yaml":true,"extradata":"MT"},{"content":"A pointer to the first byte to decode.","nodes":[{"pos":[0,38],"content":"A pointer to the first byte to decode.","nodes":[{"content":"A pointer to the first byte to decode.","pos":[0,38]}]}],"pos":[48217,48256],"yaml":true},{"content":"The number of bytes to decode.","nodes":[{"pos":[0,30],"content":"The number of bytes to decode.","nodes":[{"content":"The number of bytes to decode.","pos":[0,30]}]}],"pos":[48316,48347],"yaml":true},{"content":"The number of characters produced by decoding the specified sequence of bytes.","nodes":[{"pos":[0,78],"content":"The number of characters produced by decoding the specified sequence of bytes.","nodes":[{"content":"The number of characters produced by decoding the specified sequence of bytes.","pos":[0,78]}]}],"pos":[48403,48482],"yaml":true},{"content":"<code>bytes</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;bytes&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>bytes</code> is `null`."}],"pos":[48650,48680],"yaml":true},{"content":"<code>count</code> is less than zero.  \n  \n -or-  \n  \n The resulting number of bytes is greater than the maximum number that can be returned as an integer.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","source":"<code>count</code> is less than zero."},{"pos":[44,48],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[55,155],"content":"The resulting number of bytes is greater than the maximum number that can be returned as an integer.","nodes":[{"content":"The resulting number of bytes is greater than the maximum number that can be returned as an integer.","pos":[0,100]}]}],"pos":[48794,48956],"yaml":true},{"content":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>.","nodes":[{"pos":[0,143],"content":"A fallback occurred (see <bpt id=\"p1\">[</bpt>Character Encoding in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/character-encoding.md)</ept> for complete explanation)","source":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)"},{"pos":[150,155],"content":"-and-","nodes":[{"content":"-and-","pos":[0,5]}]},{"pos":[162,288],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Text.Encoding.DecoderFallback\"&gt;&lt;/xref&gt;</ph> is set to <ph id=\"ph2\">&lt;xref href=\"System.Text.DecoderExceptionFallback\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."}],"pos":[49074,49373],"yaml":true},{"content":"Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.","nodes":[{"pos":[0,152],"content":"Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.","nodes":[{"content":"Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.","pos":[0,152]}]}],"pos":[51168,51321],"yaml":true},{"content":"To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.ASCIIEncoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A>. The <xref:System.Text.ASCIIEncoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> method generally executes faster.  \n  \n Data to be converted, such as data read from a stream, can be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.ASCIIEncoding.GetDecoder%2A> method or the <xref:System.Text.ASCIIEncoding.GetEncoder%2A> method, respectively.  \n  \n <xref:System.Text.ASCIIEncoding> does not provide error detection. Any byte greater than hexadecimal 0x7F is decoded as the Unicode question mark (\"?\").  \n  \n> [!CAUTION]\n>  For security reasons, your application is recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.","nodes":[{"pos":[0,513],"content":"To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.ASCIIEncoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A>. The <xref:System.Text.ASCIIEncoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> method generally executes faster.","nodes":[{"content":"To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.ASCIIEncoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A>. The <xref:System.Text.ASCIIEncoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> method generally executes faster.","pos":[0,513],"nodes":[{"content":"To calculate the exact array size required by <ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding.GetChars%2A&gt;</ph> to store the resulting characters, the application uses <ph id=\"ph2\">&lt;xref:System.Text.ASCIIEncoding.GetCharCount%2A&gt;</ph>.","pos":[0,196],"source":"To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.ASCIIEncoding.GetCharCount%2A>."},{"content":"To calculate the maximum array size, the application should use <ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A&gt;</ph>.","pos":[197,313],"source":" To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding.GetCharCount%2A&gt;</ph> method generally allows allocation of less memory, while the <ph id=\"ph2\">&lt;xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A&gt;</ph> method generally executes faster.","pos":[314,513],"source":" The <xref:System.Text.ASCIIEncoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> method generally executes faster."}]}]},{"pos":[520,956],"content":"Data to be converted, such as data read from a stream, can be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.ASCIIEncoding.GetDecoder%2A> method or the <xref:System.Text.ASCIIEncoding.GetEncoder%2A> method, respectively.","nodes":[{"content":"Data to be converted, such as data read from a stream, can be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.ASCIIEncoding.GetDecoder%2A> method or the <xref:System.Text.ASCIIEncoding.GetEncoder%2A> method, respectively.","pos":[0,436],"nodes":[{"content":"Data to be converted, such as data read from a stream, can be available only in sequential blocks.","pos":[0,98]},{"content":"In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <ph id=\"ph1\">&lt;xref:System.Text.Decoder&gt;</ph> or the <ph id=\"ph2\">&lt;xref:System.Text.Encoder&gt;</ph> provided by the <ph id=\"ph3\">&lt;xref:System.Text.ASCIIEncoding.GetDecoder%2A&gt;</ph> method or the <ph id=\"ph4\">&lt;xref:System.Text.ASCIIEncoding.GetEncoder%2A&gt;</ph> method, respectively.","pos":[99,436],"source":" In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.ASCIIEncoding.GetDecoder%2A> method or the <xref:System.Text.ASCIIEncoding.GetEncoder%2A> method, respectively."}]}]},{"pos":[963,1115],"content":"<xref:System.Text.ASCIIEncoding> does not provide error detection. Any byte greater than hexadecimal 0x7F is decoded as the Unicode question mark (\"?\").","nodes":[{"content":"<xref:System.Text.ASCIIEncoding> does not provide error detection. Any byte greater than hexadecimal 0x7F is decoded as the Unicode question mark (\"?\").","pos":[0,152],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding&gt;</ph> does not provide error detection.","pos":[0,66],"source":"<xref:System.Text.ASCIIEncoding> does not provide error detection."},{"content":"Any byte greater than hexadecimal 0x7F is decoded as the Unicode question mark (\"?\").","pos":[67,152]}]}]},{"pos":[1123,1330],"content":"[!CAUTION]\n For security reasons, your application is recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.","leadings":["","> "],"nodes":[{"content":"For security reasons, your application is recommended to use <ph id=\"ph1\">&lt;xref:System.Text.UTF8Encoding&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Text.UTF32Encoding&gt;</ph> and enable error detection.","pos":[12,205],"source":" For security reasons, your application is recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection."}]}],"pos":[51332,52674],"yaml":true,"extradata":"MT"},{"content":"A pointer to the first byte to decode.","nodes":[{"pos":[0,38],"content":"A pointer to the first byte to decode.","nodes":[{"content":"A pointer to the first byte to decode.","pos":[0,38]}]}],"pos":[53005,53044],"yaml":true},{"content":"The number of bytes to decode.","nodes":[{"pos":[0,30],"content":"The number of bytes to decode.","nodes":[{"content":"The number of bytes to decode.","pos":[0,30]}]}],"pos":[53108,53139],"yaml":true},{"content":"A pointer to the location at which to start writing the resulting set of characters.","nodes":[{"pos":[0,84],"content":"A pointer to the location at which to start writing the resulting set of characters.","nodes":[{"content":"A pointer to the location at which to start writing the resulting set of characters.","pos":[0,84]}]}],"pos":[53199,53284],"yaml":true},{"content":"The maximum number of characters to write.","nodes":[{"pos":[0,42],"content":"The maximum number of characters to write.","nodes":[{"content":"The maximum number of characters to write.","pos":[0,42]}]}],"pos":[53348,53391],"yaml":true},{"content":"The actual number of characters written at the location indicated by <code>chars</code>.","nodes":[{"pos":[0,88],"content":"The actual number of characters written at the location indicated by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">chars</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The actual number of characters written at the location indicated by <code>chars</code>."}],"pos":[53447,53536],"yaml":true},{"content":"<code>bytes</code> is `null`.  \n  \n -or-  \n  \n <code>chars</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;bytes&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>bytes</code> is `null`."},{"pos":[36,40],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[47,76],"content":"<ph id=\"ph1\">&lt;code&gt;chars&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>chars</code> is `null`."}],"pos":[53700,53783],"yaml":true},{"content":"<code>byteCount</code> or <code>charCount</code> is less than zero.","nodes":[{"pos":[0,67],"content":"<ph id=\"ph1\">&lt;code&gt;byteCount&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;charCount&lt;/code&gt;</ph> is less than zero.","source":"<code>byteCount</code> or <code>charCount</code> is less than zero."}],"pos":[53897,53965],"yaml":true},{"content":"<code>charCount</code> is less than the resulting number of characters.","nodes":[{"pos":[0,71],"content":"<ph id=\"ph1\">&lt;code&gt;charCount&lt;/code&gt;</ph> is less than the resulting number of characters.","source":"<code>charCount</code> is less than the resulting number of characters."}],"pos":[54059,54131],"yaml":true},{"content":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>.","nodes":[{"pos":[0,143],"content":"A fallback occurred (see <bpt id=\"p1\">[</bpt>Character Encoding in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/character-encoding.md)</ept> for complete explanation)","source":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)"},{"pos":[150,155],"content":"-and-","nodes":[{"content":"-and-","pos":[0,5]}]},{"pos":[162,288],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Text.Encoding.DecoderFallback\"&gt;&lt;/xref&gt;</ph> is set to <ph id=\"ph2\">&lt;xref href=\"System.Text.DecoderExceptionFallback\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."}],"pos":[54249,54548],"yaml":true},{"content":"Decodes a sequence of bytes from the specified byte array into the specified character array.","nodes":[{"pos":[0,93],"content":"Decodes a sequence of bytes from the specified byte array into the specified character array.","nodes":[{"content":"Decodes a sequence of bytes from the specified byte array into the specified character array.","pos":[0,93]}]}],"pos":[56438,56532],"yaml":true},{"content":"To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.ASCIIEncoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A>. The <xref:System.Text.ASCIIEncoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> method generally executes faster.  \n  \n Data to be converted, such as data read from a stream, can be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.ASCIIEncoding.GetDecoder%2A> method or the <xref:System.Text.ASCIIEncoding.GetEncoder%2A> method, respectively.  \n  \n <xref:System.Text.ASCIIEncoding> does not provide error detection. Any byte greater than hexadecimal 0x7F is decoded as the Unicode question mark (\"?\").  \n  \n> [!CAUTION]\n>  For security reasons, your application is recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.","nodes":[{"pos":[0,513],"content":"To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.ASCIIEncoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A>. The <xref:System.Text.ASCIIEncoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> method generally executes faster.","nodes":[{"content":"To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.ASCIIEncoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A>. The <xref:System.Text.ASCIIEncoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> method generally executes faster.","pos":[0,513],"nodes":[{"content":"To calculate the exact array size required by <ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding.GetChars%2A&gt;</ph> to store the resulting characters, the application uses <ph id=\"ph2\">&lt;xref:System.Text.ASCIIEncoding.GetCharCount%2A&gt;</ph>.","pos":[0,196],"source":"To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.ASCIIEncoding.GetCharCount%2A>."},{"content":"To calculate the maximum array size, the application should use <ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A&gt;</ph>.","pos":[197,313],"source":" To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding.GetCharCount%2A&gt;</ph> method generally allows allocation of less memory, while the <ph id=\"ph2\">&lt;xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A&gt;</ph> method generally executes faster.","pos":[314,513],"source":" The <xref:System.Text.ASCIIEncoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> method generally executes faster."}]}]},{"pos":[520,956],"content":"Data to be converted, such as data read from a stream, can be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.ASCIIEncoding.GetDecoder%2A> method or the <xref:System.Text.ASCIIEncoding.GetEncoder%2A> method, respectively.","nodes":[{"content":"Data to be converted, such as data read from a stream, can be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.ASCIIEncoding.GetDecoder%2A> method or the <xref:System.Text.ASCIIEncoding.GetEncoder%2A> method, respectively.","pos":[0,436],"nodes":[{"content":"Data to be converted, such as data read from a stream, can be available only in sequential blocks.","pos":[0,98]},{"content":"In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <ph id=\"ph1\">&lt;xref:System.Text.Decoder&gt;</ph> or the <ph id=\"ph2\">&lt;xref:System.Text.Encoder&gt;</ph> provided by the <ph id=\"ph3\">&lt;xref:System.Text.ASCIIEncoding.GetDecoder%2A&gt;</ph> method or the <ph id=\"ph4\">&lt;xref:System.Text.ASCIIEncoding.GetEncoder%2A&gt;</ph> method, respectively.","pos":[99,436],"source":" In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.ASCIIEncoding.GetDecoder%2A> method or the <xref:System.Text.ASCIIEncoding.GetEncoder%2A> method, respectively."}]}]},{"pos":[963,1115],"content":"<xref:System.Text.ASCIIEncoding> does not provide error detection. Any byte greater than hexadecimal 0x7F is decoded as the Unicode question mark (\"?\").","nodes":[{"content":"<xref:System.Text.ASCIIEncoding> does not provide error detection. Any byte greater than hexadecimal 0x7F is decoded as the Unicode question mark (\"?\").","pos":[0,152],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding&gt;</ph> does not provide error detection.","pos":[0,66],"source":"<xref:System.Text.ASCIIEncoding> does not provide error detection."},{"content":"Any byte greater than hexadecimal 0x7F is decoded as the Unicode question mark (\"?\").","pos":[67,152]}]}]},{"pos":[1123,1330],"content":"[!CAUTION]\n For security reasons, your application is recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.","leadings":["","> "],"nodes":[{"content":"For security reasons, your application is recommended to use <ph id=\"ph1\">&lt;xref:System.Text.UTF8Encoding&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Text.UTF32Encoding&gt;</ph> and enable error detection.","pos":[12,205],"source":" For security reasons, your application is recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection."}]}],"pos":[56543,57885],"yaml":true,"extradata":"MT"},{"content":"The byte array containing the sequence of bytes to decode.","nodes":[{"pos":[0,58],"content":"The byte array containing the sequence of bytes to decode.","nodes":[{"content":"The byte array containing the sequence of bytes to decode.","pos":[0,58]}]}],"pos":[58883,58942],"yaml":true},{"content":"The index of the first byte to decode.","nodes":[{"pos":[0,38],"content":"The index of the first byte to decode.","nodes":[{"content":"The index of the first byte to decode.","pos":[0,38]}]}],"pos":[59006,59045],"yaml":true},{"content":"The number of bytes to decode.","nodes":[{"pos":[0,30],"content":"The number of bytes to decode.","nodes":[{"content":"The number of bytes to decode.","pos":[0,30]}]}],"pos":[59109,59140],"yaml":true},{"content":"The character array to contain the resulting set of characters.","nodes":[{"pos":[0,63],"content":"The character array to contain the resulting set of characters.","nodes":[{"content":"The character array to contain the resulting set of characters.","pos":[0,63]}]}],"pos":[59201,59265],"yaml":true},{"content":"The index at which to start writing the resulting set of characters.","nodes":[{"pos":[0,68],"content":"The index at which to start writing the resulting set of characters.","nodes":[{"content":"The index at which to start writing the resulting set of characters.","pos":[0,68]}]}],"pos":[59329,59398],"yaml":true},{"content":"The actual number of characters written into <code>chars</code>.","nodes":[{"pos":[0,64],"content":"The actual number of characters written into <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">chars</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The actual number of characters written into <code>chars</code>."}],"pos":[59454,59519],"yaml":true},{"content":"<code>bytes</code> is `null`.  \n  \n -or-  \n  \n <code>chars</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;bytes&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>bytes</code> is `null`."},{"pos":[36,40],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[47,76],"content":"<ph id=\"ph1\">&lt;code&gt;chars&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>chars</code> is `null`."}],"pos":[59683,59766],"yaml":true},{"content":"<code>byteIndex</code> or <code>byteCount</code> or <code>charIndex</code> is less than zero.  \n  \n -or-  \n  \n <code>byteindex</code> and <code>byteCount</code> do not denote a valid range in <code>bytes</code>.  \n  \n -or-  \n  \n <code>charIndex</code> is not a valid index in <code>chars</code>.","nodes":[{"pos":[0,93],"content":"<ph id=\"ph1\">&lt;code&gt;byteIndex&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;byteCount&lt;/code&gt;</ph> or <ph id=\"ph3\">&lt;code&gt;charIndex&lt;/code&gt;</ph> is less than zero.","source":"<code>byteIndex</code> or <code>byteCount</code> or <code>charIndex</code> is less than zero."},{"pos":[100,104],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[111,211],"content":"<ph id=\"ph1\">&lt;code&gt;byteindex&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;byteCount&lt;/code&gt;</ph> do not denote a valid range in <ph id=\"ph3\">&lt;code&gt;bytes&lt;/code&gt;</ph>.","source":"<code>byteindex</code> and <code>byteCount</code> do not denote a valid range in <code>bytes</code>."},{"pos":[218,222],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[229,295],"content":"<ph id=\"ph1\">&lt;code&gt;charIndex&lt;/code&gt;</ph> is not a valid index in <ph id=\"ph2\">&lt;code&gt;chars&lt;/code&gt;</ph>.","source":"<code>charIndex</code> is not a valid index in <code>chars</code>."}],"pos":[59880,60186],"yaml":true},{"content":"<code>chars</code> does not have enough capacity from <code>charIndex</code> to the end of the array to accommodate the resulting characters.","nodes":[{"pos":[0,141],"content":"<ph id=\"ph1\">&lt;code&gt;chars&lt;/code&gt;</ph> does not have enough capacity from <ph id=\"ph2\">&lt;code&gt;charIndex&lt;/code&gt;</ph> to the end of the array to accommodate the resulting characters.","source":"<code>chars</code> does not have enough capacity from <code>charIndex</code> to the end of the array to accommodate the resulting characters."}],"pos":[60280,60422],"yaml":true},{"content":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>.","nodes":[{"pos":[0,143],"content":"A fallback occurred (see <bpt id=\"p1\">[</bpt>Character Encoding in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/character-encoding.md)</ept> for complete explanation)","source":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)"},{"pos":[150,155],"content":"-and-","nodes":[{"content":"-and-","pos":[0,5]}]},{"pos":[162,288],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Text.Encoding.DecoderFallback\"&gt;&lt;/xref&gt;</ph> is set to <ph id=\"ph2\">&lt;xref href=\"System.Text.DecoderExceptionFallback\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."}],"pos":[60540,60839],"yaml":true},{"content":"Obtains a decoder that converts an ASCII encoded sequence of bytes into a sequence of Unicode characters.","nodes":[{"pos":[0,105],"content":"Obtains a decoder that converts an ASCII encoded sequence of bytes into a sequence of Unicode characters.","nodes":[{"content":"Obtains a decoder that converts an ASCII encoded sequence of bytes into a sequence of Unicode characters.","pos":[0,105]}]}],"pos":[62164,62270],"yaml":true},{"content":"The <xref:System.Text.Decoder.GetChars%2A?displayProperty=fullName> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref:System.Text.ASCIIEncoding.GetChars%2A> method of this class. However, a <xref:System.Text.Decoder> maintains state information between calls so it can correctly decode byte sequences that span blocks. The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation. Therefore, <xref:System.Text.ASCIIEncoding.GetDecoder%2A> and <xref:System.Text.ASCIIEncoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.","nodes":[{"pos":[0,786],"content":"The <xref:System.Text.Decoder.GetChars%2A?displayProperty=fullName> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref:System.Text.ASCIIEncoding.GetChars%2A> method of this class. However, a <xref:System.Text.Decoder> maintains state information between calls so it can correctly decode byte sequences that span blocks. The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation. Therefore, <xref:System.Text.ASCIIEncoding.GetDecoder%2A> and <xref:System.Text.ASCIIEncoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.","nodes":[{"content":"The <xref:System.Text.Decoder.GetChars%2A?displayProperty=fullName> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref:System.Text.ASCIIEncoding.GetChars%2A> method of this class. However, a <xref:System.Text.Decoder> maintains state information between calls so it can correctly decode byte sequences that span blocks. The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation. Therefore, <xref:System.Text.ASCIIEncoding.GetDecoder%2A> and <xref:System.Text.ASCIIEncoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.","pos":[0,786],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.Decoder.GetChars%2A?displayProperty=fullName&gt;</ph> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <ph id=\"ph2\">&lt;xref:System.Text.ASCIIEncoding.GetChars%2A&gt;</ph> method of this class.","pos":[0,242],"source":"The <xref:System.Text.Decoder.GetChars%2A?displayProperty=fullName> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref:System.Text.ASCIIEncoding.GetChars%2A> method of this class."},{"content":"However, a <ph id=\"ph1\">&lt;xref:System.Text.Decoder&gt;</ph> maintains state information between calls so it can correctly decode byte sequences that span blocks.","pos":[243,382],"source":" However, a <xref:System.Text.Decoder> maintains state information between calls so it can correctly decode byte sequences that span blocks."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.Decoder&gt;</ph> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation.","pos":[383,529],"source":" The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation."},{"content":"Therefore, <ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding.GetDecoder%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Text.ASCIIEncoding.GetEncoder%2A&gt;</ph> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.","pos":[530,786],"source":" Therefore, <xref:System.Text.ASCIIEncoding.GetDecoder%2A> and <xref:System.Text.ASCIIEncoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream."}]}]}],"pos":[62281,63068],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Text.Decoder\"></xref> that converts an ASCII encoded sequence of bytes into a sequence of Unicode characters.","nodes":[{"pos":[0,130],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Text.Decoder\"&gt;&lt;/xref&gt;</ph> that converts an ASCII encoded sequence of bytes into a sequence of Unicode characters.","source":"A <xref href=\"System.Text.Decoder\"></xref> that converts an ASCII encoded sequence of bytes into a sequence of Unicode characters."}],"pos":[63291,63422],"yaml":true},{"content":"Obtains an encoder that converts a sequence of Unicode characters into an ASCII encoded sequence of bytes.","nodes":[{"pos":[0,106],"content":"Obtains an encoder that converts a sequence of Unicode characters into an ASCII encoded sequence of bytes.","nodes":[{"content":"Obtains an encoder that converts a sequence of Unicode characters into an ASCII encoded sequence of bytes.","pos":[0,106]}]}],"pos":[64872,64979],"yaml":true},{"content":"The <xref:System.Text.Encoder.GetBytes%2A?displayProperty=fullName> method converts sequential blocks of characters into sequential blocks of bytes, in a manner similar to the <xref:System.Text.ASCIIEncoding.GetBytes%2A> method of this class. However, an <xref:System.Text.Encoder> maintains state information between calls so it can correctly encode character sequences that span blocks. The <xref:System.Text.Encoder> also preserves trailing characters at the end of data blocks and uses the trailing characters in the next encoding operation. For example, a data block might end with an unmatched high surrogate, and the matching low surrogate might be in the next data block. Therefore, <xref:System.Text.ASCIIEncoding.GetDecoder%2A> and <xref:System.Text.ASCIIEncoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.","nodes":[{"pos":[0,936],"content":"The <xref:System.Text.Encoder.GetBytes%2A?displayProperty=fullName> method converts sequential blocks of characters into sequential blocks of bytes, in a manner similar to the <xref:System.Text.ASCIIEncoding.GetBytes%2A> method of this class. However, an <xref:System.Text.Encoder> maintains state information between calls so it can correctly encode character sequences that span blocks. The <xref:System.Text.Encoder> also preserves trailing characters at the end of data blocks and uses the trailing characters in the next encoding operation. For example, a data block might end with an unmatched high surrogate, and the matching low surrogate might be in the next data block. Therefore, <xref:System.Text.ASCIIEncoding.GetDecoder%2A> and <xref:System.Text.ASCIIEncoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.","nodes":[{"content":"The <xref:System.Text.Encoder.GetBytes%2A?displayProperty=fullName> method converts sequential blocks of characters into sequential blocks of bytes, in a manner similar to the <xref:System.Text.ASCIIEncoding.GetBytes%2A> method of this class. However, an <xref:System.Text.Encoder> maintains state information between calls so it can correctly encode character sequences that span blocks. The <xref:System.Text.Encoder> also preserves trailing characters at the end of data blocks and uses the trailing characters in the next encoding operation. For example, a data block might end with an unmatched high surrogate, and the matching low surrogate might be in the next data block. Therefore, <xref:System.Text.ASCIIEncoding.GetDecoder%2A> and <xref:System.Text.ASCIIEncoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.","pos":[0,936],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.Encoder.GetBytes%2A?displayProperty=fullName&gt;</ph> method converts sequential blocks of characters into sequential blocks of bytes, in a manner similar to the <ph id=\"ph2\">&lt;xref:System.Text.ASCIIEncoding.GetBytes%2A&gt;</ph> method of this class.","pos":[0,242],"source":"The <xref:System.Text.Encoder.GetBytes%2A?displayProperty=fullName> method converts sequential blocks of characters into sequential blocks of bytes, in a manner similar to the <xref:System.Text.ASCIIEncoding.GetBytes%2A> method of this class."},{"content":"However, an <ph id=\"ph1\">&lt;xref:System.Text.Encoder&gt;</ph> maintains state information between calls so it can correctly encode character sequences that span blocks.","pos":[243,388],"source":" However, an <xref:System.Text.Encoder> maintains state information between calls so it can correctly encode character sequences that span blocks."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.Encoder&gt;</ph> also preserves trailing characters at the end of data blocks and uses the trailing characters in the next encoding operation.","pos":[389,545],"source":" The <xref:System.Text.Encoder> also preserves trailing characters at the end of data blocks and uses the trailing characters in the next encoding operation."},{"content":"For example, a data block might end with an unmatched high surrogate, and the matching low surrogate might be in the next data block.","pos":[546,679]},{"content":"Therefore, <ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding.GetDecoder%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Text.ASCIIEncoding.GetEncoder%2A&gt;</ph> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.","pos":[680,936],"source":" Therefore, <xref:System.Text.ASCIIEncoding.GetDecoder%2A> and <xref:System.Text.ASCIIEncoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream."}]}]}],"pos":[64990,65927],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Text.Encoder\"></xref> that converts a sequence of Unicode characters into an ASCII encoded sequence of bytes.","nodes":[{"pos":[0,131],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Text.Encoder\"&gt;&lt;/xref&gt;</ph> that converts a sequence of Unicode characters into an ASCII encoded sequence of bytes.","source":"An <xref href=\"System.Text.Encoder\"></xref> that converts a sequence of Unicode characters into an ASCII encoded sequence of bytes."}],"pos":[66150,66282],"yaml":true},{"content":"Calculates the maximum number of bytes produced by encoding the specified number of characters.","nodes":[{"pos":[0,95],"content":"Calculates the maximum number of bytes produced by encoding the specified number of characters.","nodes":[{"content":"Calculates the maximum number of bytes produced by encoding the specified number of characters.","pos":[0,95]}]}],"pos":[67819,67915],"yaml":true},{"content":"The <xref:System.Text.ASCIIEncoding.GetByteCount%2A> method calculates the exact array size required by the <xref:System.Text.ASCIIEncoding.GetBytes%2A> method to store the resulting bytes, whereas the <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> method calculates the maximum array size. The <xref:System.Text.ASCIIEncoding.GetByteCount%2A> method generally allocates less memory, but the <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> method generally executes faster.  \n  \n <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> is a worst-case number, including the worst case for the currently selected <xref:System.Text.EncoderFallback>.  If you choose a replacement fallback with a potentially large string, <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> can return large values.  \n  \n The <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> method considers potential leftover surrogates from a previous encoding operation. As a result, if the <xref:System.Text.ASCIIEncoding> object uses the default replacement fallback, or if a custom replacement fallback has been defined with a single possible fallback character, the method returns `charCount` + 1. If the <xref:System.Text.ASCIIEncoding> object uses a replacement fallback with more than one possible fallback character, the method returns *n* * (`charCount` + 1), where *n* is the maximum number of fallback characters.  \n  \n <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> has no relation to <xref:System.Text.ASCIIEncoding.GetChars%2A>. If your application needs a similar function to use with <xref:System.Text.ASCIIEncoding.GetChars%2A>, it should use <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A>.  \n  \n> [!NOTE]\n>  `GetMaxByteCount(N)` is not necessarily the same value as `N* GetMaxByteCount(1)`.","nodes":[{"pos":[0,482],"content":"The <xref:System.Text.ASCIIEncoding.GetByteCount%2A> method calculates the exact array size required by the <xref:System.Text.ASCIIEncoding.GetBytes%2A> method to store the resulting bytes, whereas the <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> method calculates the maximum array size. The <xref:System.Text.ASCIIEncoding.GetByteCount%2A> method generally allocates less memory, but the <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> method generally executes faster.","nodes":[{"content":"The <xref:System.Text.ASCIIEncoding.GetByteCount%2A> method calculates the exact array size required by the <xref:System.Text.ASCIIEncoding.GetBytes%2A> method to store the resulting bytes, whereas the <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> method calculates the maximum array size. The <xref:System.Text.ASCIIEncoding.GetByteCount%2A> method generally allocates less memory, but the <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> method generally executes faster.","pos":[0,482],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding.GetByteCount%2A&gt;</ph> method calculates the exact array size required by the <ph id=\"ph2\">&lt;xref:System.Text.ASCIIEncoding.GetBytes%2A&gt;</ph> method to store the resulting bytes, whereas the <ph id=\"ph3\">&lt;xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A&gt;</ph> method calculates the maximum array size.","pos":[0,295],"source":"The <xref:System.Text.ASCIIEncoding.GetByteCount%2A> method calculates the exact array size required by the <xref:System.Text.ASCIIEncoding.GetBytes%2A> method to store the resulting bytes, whereas the <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> method calculates the maximum array size."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding.GetByteCount%2A&gt;</ph> method generally allocates less memory, but the <ph id=\"ph2\">&lt;xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A&gt;</ph> method generally executes faster.","pos":[296,482],"source":" The <xref:System.Text.ASCIIEncoding.GetByteCount%2A> method generally allocates less memory, but the <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> method generally executes faster."}]}]},{"pos":[489,800],"content":"<xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> is a worst-case number, including the worst case for the currently selected <xref:System.Text.EncoderFallback>.  If you choose a replacement fallback with a potentially large string, <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> can return large values.","nodes":[{"content":"<xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> is a worst-case number, including the worst case for the currently selected <xref:System.Text.EncoderFallback>.  If you choose a replacement fallback with a potentially large string, <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> can return large values.","pos":[0,311],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A&gt;</ph> is a worst-case number, including the worst case for the currently selected <ph id=\"ph2\">&lt;xref:System.Text.EncoderFallback&gt;</ph>.","pos":[0,163],"source":"<xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> is a worst-case number, including the worst case for the currently selected <xref:System.Text.EncoderFallback>."},{"content":"If you choose a replacement fallback with a potentially large string, <ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A&gt;</ph> can return large values.","pos":[165,311],"source":"  If you choose a replacement fallback with a potentially large string, <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> can return large values."}]}]},{"pos":[807,1399],"content":"The <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> method considers potential leftover surrogates from a previous encoding operation. As a result, if the <xref:System.Text.ASCIIEncoding> object uses the default replacement fallback, or if a custom replacement fallback has been defined with a single possible fallback character, the method returns `charCount` + 1. If the <xref:System.Text.ASCIIEncoding> object uses a replacement fallback with more than one possible fallback character, the method returns *n* * (`charCount` + 1), where *n* is the maximum number of fallback characters.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A&gt;</ph> method considers potential leftover surrogates from a previous encoding operation.","pos":[0,138],"source":"The <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> method considers potential leftover surrogates from a previous encoding operation."},{"content":"As a result, if the <ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding&gt;</ph> object uses the default replacement fallback, or if a custom replacement fallback has been defined with a single possible fallback character, the method returns <ph id=\"ph2\">`charCount`</ph> + 1.","pos":[139,369],"source":" As a result, if the <xref:System.Text.ASCIIEncoding> object uses the default replacement fallback, or if a custom replacement fallback has been defined with a single possible fallback character, the method returns `charCount` + 1."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding&gt;</ph> object uses a replacement fallback with more than one possible fallback character, the method returns <bpt id=\"p1\">*</bpt><ph id=\"ph2\">n</ph><ept id=\"p1\">*</ept> * (<ph id=\"ph3\">`charCount`</ph> + 1), where <bpt id=\"p2\">*</bpt><ph id=\"ph4\">n</ph><ept id=\"p2\">*</ept> is the maximum number of fallback characters.","pos":[370,592],"source":" If the <xref:System.Text.ASCIIEncoding> object uses a replacement fallback with more than one possible fallback character, the method returns *n* * (`charCount` + 1), where *n* is the maximum number of fallback characters."}]},{"pos":[1406,1692],"content":"<xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> has no relation to <xref:System.Text.ASCIIEncoding.GetChars%2A>. If your application needs a similar function to use with <xref:System.Text.ASCIIEncoding.GetChars%2A>, it should use <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A>.","nodes":[{"content":"<xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> has no relation to <xref:System.Text.ASCIIEncoding.GetChars%2A>. If your application needs a similar function to use with <xref:System.Text.ASCIIEncoding.GetChars%2A>, it should use <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A>.","pos":[0,286],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A&gt;</ph> has no relation to <ph id=\"ph2\">&lt;xref:System.Text.ASCIIEncoding.GetChars%2A&gt;</ph>.","pos":[0,116],"source":"<xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> has no relation to <xref:System.Text.ASCIIEncoding.GetChars%2A>."},{"content":"If your application needs a similar function to use with <ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding.GetChars%2A&gt;</ph>, it should use <ph id=\"ph2\">&lt;xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A&gt;</ph>.","pos":[117,286],"source":" If your application needs a similar function to use with <xref:System.Text.ASCIIEncoding.GetChars%2A>, it should use <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A>."}]}]},{"pos":[1700,1793],"content":"[!NOTE]\n `GetMaxByteCount(N)` is not necessarily the same value as `N* GetMaxByteCount(1)`.","leadings":["","> "],"nodes":[{"content":"<ph id=\"ph1\"> `GetMaxByteCount(N)`</ph> is not necessarily the same value as <ph id=\"ph2\">`N* GetMaxByteCount(1)`</ph>.","pos":[8,91],"source":" `GetMaxByteCount(N)` is not necessarily the same value as `N* GetMaxByteCount(1)`."}]}],"pos":[67926,69731],"yaml":true,"extradata":"MT"},{"content":"The number of characters to encode.","nodes":[{"pos":[0,35],"content":"The number of characters to encode.","nodes":[{"content":"The number of characters to encode.","pos":[0,35]}]}],"pos":[70692,70728],"yaml":true},{"content":"The maximum number of bytes produced by encoding the specified number of characters.","nodes":[{"pos":[0,84],"content":"The maximum number of bytes produced by encoding the specified number of characters.","nodes":[{"content":"The maximum number of bytes produced by encoding the specified number of characters.","pos":[0,84]}]}],"pos":[70784,70869],"yaml":true},{"content":"<code>charCount</code> is less than zero.  \n  \n -or-  \n  \n The resulting number of bytes is greater than the maximum number that can be returned as an integer.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;charCount&lt;/code&gt;</ph> is less than zero.","source":"<code>charCount</code> is less than zero."},{"pos":[48,52],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[59,159],"content":"The resulting number of bytes is greater than the maximum number that can be returned as an integer.","nodes":[{"content":"The resulting number of bytes is greater than the maximum number that can be returned as an integer.","pos":[0,100]}]}],"pos":[71052,71218],"yaml":true},{"content":"Calculates the maximum number of characters produced by decoding the specified number of bytes.","nodes":[{"pos":[0,95],"content":"Calculates the maximum number of characters produced by decoding the specified number of bytes.","nodes":[{"content":"Calculates the maximum number of characters produced by decoding the specified number of bytes.","pos":[0,95]}]}],"pos":[72613,72709],"yaml":true},{"content":"The <xref:System.Text.ASCIIEncoding.GetCharCount%2A> method calculates the exact array size required by the <xref:System.Text.ASCIIEncoding.GetChars%2A> method to store the resulting characters, whereas  the <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> method calculates the maximum array size. The <xref:System.Text.ASCIIEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> method generally executes faster.  \n  \n <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> retrieves a worst-case number, including the worst case for the currently selected <xref:System.Text.DecoderFallback>. If a decoder fallback is present that has a maximum fallback length of *n*, the <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> method returns *n* * `byteCount`.  \n  \n <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> has no relation to <xref:System.Text.ASCIIEncoding.GetBytes%2A>. If your application needs a similar function to use with <xref:System.Text.ASCIIEncoding.GetBytes%2A>, it should use <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>.  \n  \n> [!NOTE]\n>  `GetMaxCharCount(N)` is not necessarily the same value as `N* GetMaxCharCount(1)`.","nodes":[{"pos":[0,490],"content":"The <xref:System.Text.ASCIIEncoding.GetCharCount%2A> method calculates the exact array size required by the <xref:System.Text.ASCIIEncoding.GetChars%2A> method to store the resulting characters, whereas  the <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> method calculates the maximum array size. The <xref:System.Text.ASCIIEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> method generally executes faster.","nodes":[{"content":"The <xref:System.Text.ASCIIEncoding.GetCharCount%2A> method calculates the exact array size required by the <xref:System.Text.ASCIIEncoding.GetChars%2A> method to store the resulting characters, whereas  the <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> method calculates the maximum array size. The <xref:System.Text.ASCIIEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> method generally executes faster.","pos":[0,490],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding.GetCharCount%2A&gt;</ph> method calculates the exact array size required by the <ph id=\"ph2\">&lt;xref:System.Text.ASCIIEncoding.GetChars%2A&gt;</ph> method to store the resulting characters, whereas  the <ph id=\"ph3\">&lt;xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A&gt;</ph> method calculates the maximum array size.","pos":[0,301],"source":"The <xref:System.Text.ASCIIEncoding.GetCharCount%2A> method calculates the exact array size required by the <xref:System.Text.ASCIIEncoding.GetChars%2A> method to store the resulting characters, whereas  the <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> method calculates the maximum array size."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding.GetCharCount%2A&gt;</ph> method generally allocates less memory, while the <ph id=\"ph2\">&lt;xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A&gt;</ph> method generally executes faster.","pos":[302,490],"source":" The <xref:System.Text.ASCIIEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> method generally executes faster."}]}]},{"pos":[497,833],"content":"<xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> retrieves a worst-case number, including the worst case for the currently selected <xref:System.Text.DecoderFallback>. If a decoder fallback is present that has a maximum fallback length of *n*, the <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> method returns *n* * `byteCount`.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A&gt;</ph> retrieves a worst-case number, including the worst case for the currently selected <ph id=\"ph2\">&lt;xref:System.Text.DecoderFallback&gt;</ph>.","pos":[0,170],"source":"<xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> retrieves a worst-case number, including the worst case for the currently selected <xref:System.Text.DecoderFallback>."},{"content":"If a decoder fallback is present that has a maximum fallback length of <bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept>, the <ph id=\"ph2\">&lt;xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A&gt;</ph> method returns <bpt id=\"p2\">*</bpt><ph id=\"ph3\">n</ph><ept id=\"p2\">*</ept><ph id=\"ph4\"> * </ph><ph id=\"ph5\">`byteCount`</ph>.","pos":[171,336],"source":" If a decoder fallback is present that has a maximum fallback length of *n*, the <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> method returns *n* * `byteCount`."}]},{"pos":[840,1126],"content":"<xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> has no relation to <xref:System.Text.ASCIIEncoding.GetBytes%2A>. If your application needs a similar function to use with <xref:System.Text.ASCIIEncoding.GetBytes%2A>, it should use <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>.","nodes":[{"content":"<xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> has no relation to <xref:System.Text.ASCIIEncoding.GetBytes%2A>. If your application needs a similar function to use with <xref:System.Text.ASCIIEncoding.GetBytes%2A>, it should use <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>.","pos":[0,286],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A&gt;</ph> has no relation to <ph id=\"ph2\">&lt;xref:System.Text.ASCIIEncoding.GetBytes%2A&gt;</ph>.","pos":[0,116],"source":"<xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> has no relation to <xref:System.Text.ASCIIEncoding.GetBytes%2A>."},{"content":"If your application needs a similar function to use with <ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding.GetBytes%2A&gt;</ph>, it should use <ph id=\"ph2\">&lt;xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A&gt;</ph>.","pos":[117,286],"source":" If your application needs a similar function to use with <xref:System.Text.ASCIIEncoding.GetBytes%2A>, it should use <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>."}]}]},{"pos":[1134,1227],"content":"[!NOTE]\n `GetMaxCharCount(N)` is not necessarily the same value as `N* GetMaxCharCount(1)`.","leadings":["","> "],"nodes":[{"content":"<ph id=\"ph1\"> `GetMaxCharCount(N)`</ph> is not necessarily the same value as <ph id=\"ph2\">`N* GetMaxCharCount(1)`</ph>.","pos":[8,91],"source":" `GetMaxCharCount(N)` is not necessarily the same value as `N* GetMaxCharCount(1)`."}]}],"pos":[72720,73957],"yaml":true,"extradata":"MT"},{"content":"The number of bytes to decode.","nodes":[{"pos":[0,30],"content":"The number of bytes to decode.","nodes":[{"content":"The number of bytes to decode.","pos":[0,30]}]}],"pos":[74934,74965],"yaml":true},{"content":"The maximum number of characters produced by decoding the specified number of bytes.","nodes":[{"pos":[0,84],"content":"The maximum number of characters produced by decoding the specified number of bytes.","nodes":[{"content":"The maximum number of characters produced by decoding the specified number of bytes.","pos":[0,84]}]}],"pos":[75021,75106],"yaml":true},{"content":"<code>byteCount</code> is less than zero.  \n  \n -or-  \n  \n The resulting number of bytes is greater than the maximum number that can be returned as an integer.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;byteCount&lt;/code&gt;</ph> is less than zero.","source":"<code>byteCount</code> is less than zero."},{"pos":[48,52],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[59,159],"content":"The resulting number of bytes is greater than the maximum number that can be returned as an integer.","nodes":[{"content":"The resulting number of bytes is greater than the maximum number that can be returned as an integer.","pos":[0,100]}]}],"pos":[75289,75455],"yaml":true},{"content":"Decodes a range of bytes from a byte array into a string.","nodes":[{"pos":[0,57],"content":"Decodes a range of bytes from a byte array into a string.","nodes":[{"content":"Decodes a range of bytes from a byte array into a string.","pos":[0,57]}]}],"pos":[76940,76998],"yaml":true},{"content":"Data to be converted, such as data read from a stream, can be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.ASCIIEncoding.GetDecoder%2A> method or the <xref:System.Text.ASCIIEncoding.GetEncoder%2A> method, respectively.  \n  \n <xref:System.Text.ASCIIEncoding> does not provide error detection. Any byte greater than hexadecimal 0x7F is decoded as the Unicode question mark (\"?\").  \n  \n> [!CAUTION]\n>  For security reasons, you should use the <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> classes and enable error detection instead of using the <xref:System.Text.ASCIIEncoding> class.","nodes":[{"pos":[0,436],"content":"Data to be converted, such as data read from a stream, can be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.ASCIIEncoding.GetDecoder%2A> method or the <xref:System.Text.ASCIIEncoding.GetEncoder%2A> method, respectively.","nodes":[{"content":"Data to be converted, such as data read from a stream, can be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.ASCIIEncoding.GetDecoder%2A> method or the <xref:System.Text.ASCIIEncoding.GetEncoder%2A> method, respectively.","pos":[0,436],"nodes":[{"content":"Data to be converted, such as data read from a stream, can be available only in sequential blocks.","pos":[0,98]},{"content":"In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <ph id=\"ph1\">&lt;xref:System.Text.Decoder&gt;</ph> or the <ph id=\"ph2\">&lt;xref:System.Text.Encoder&gt;</ph> provided by the <ph id=\"ph3\">&lt;xref:System.Text.ASCIIEncoding.GetDecoder%2A&gt;</ph> method or the <ph id=\"ph4\">&lt;xref:System.Text.ASCIIEncoding.GetEncoder%2A&gt;</ph> method, respectively.","pos":[99,436],"source":" In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.ASCIIEncoding.GetDecoder%2A> method or the <xref:System.Text.ASCIIEncoding.GetEncoder%2A> method, respectively."}]}]},{"pos":[443,595],"content":"<xref:System.Text.ASCIIEncoding> does not provide error detection. Any byte greater than hexadecimal 0x7F is decoded as the Unicode question mark (\"?\").","nodes":[{"content":"<xref:System.Text.ASCIIEncoding> does not provide error detection. Any byte greater than hexadecimal 0x7F is decoded as the Unicode question mark (\"?\").","pos":[0,152],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding&gt;</ph> does not provide error detection.","pos":[0,66],"source":"<xref:System.Text.ASCIIEncoding> does not provide error detection."},{"content":"Any byte greater than hexadecimal 0x7F is decoded as the Unicode question mark (\"?\").","pos":[67,152]}]}]},{"pos":[603,858],"content":"[!CAUTION]\n For security reasons, you should use the <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> classes and enable error detection instead of using the <xref:System.Text.ASCIIEncoding> class.","leadings":["","> "],"nodes":[{"content":"For security reasons, you should use the <ph id=\"ph1\">&lt;xref:System.Text.UTF8Encoding&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Text.UTF32Encoding&gt;</ph> classes and enable error detection instead of using the <ph id=\"ph4\">&lt;xref:System.Text.ASCIIEncoding&gt;</ph> class.","pos":[12,253],"source":" For security reasons, you should use the <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> classes and enable error detection instead of using the <xref:System.Text.ASCIIEncoding> class."}]}],"pos":[77009,77877],"yaml":true,"extradata":"MT"},{"content":"The byte array containing the sequence of bytes to decode.","nodes":[{"pos":[0,58],"content":"The byte array containing the sequence of bytes to decode.","nodes":[{"content":"The byte array containing the sequence of bytes to decode.","pos":[0,58]}]}],"pos":[78787,78846],"yaml":true},{"content":"The index of the first byte to decode.","nodes":[{"pos":[0,38],"content":"The index of the first byte to decode.","nodes":[{"content":"The index of the first byte to decode.","pos":[0,38]}]}],"pos":[78910,78949],"yaml":true},{"content":"The number of bytes to decode.","nodes":[{"pos":[0,30],"content":"The number of bytes to decode.","nodes":[{"content":"The number of bytes to decode.","pos":[0,30]}]}],"pos":[79013,79044],"yaml":true},{"content":"A <xref href=\"System.String\"></xref> containing the results of decoding the specified sequence of bytes.","nodes":[{"pos":[0,104],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> containing the results of decoding the specified sequence of bytes.","source":"A <xref href=\"System.String\"></xref> containing the results of decoding the specified sequence of bytes."}],"pos":[79101,79206],"yaml":true},{"content":"<code>bytes</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;bytes&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>bytes</code> is `null`."}],"pos":[79371,79401],"yaml":true},{"content":"<code>index</code> or <code>count</code> is less than zero.  \n  \n -or-  \n  \n <code>index</code> and <code>count</code> do not denote a valid range in <code>bytes</code>.","nodes":[{"pos":[0,59],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","source":"<code>index</code> or <code>count</code> is less than zero."},{"pos":[66,70],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[77,169],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> do not denote a valid range in <ph id=\"ph3\">&lt;code&gt;bytes&lt;/code&gt;</ph>.","source":"<code>index</code> and <code>count</code> do not denote a valid range in <code>bytes</code>."}],"pos":[79515,79691],"yaml":true},{"content":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>.","nodes":[{"pos":[0,143],"content":"A fallback occurred (see <bpt id=\"p1\">[</bpt>Character Encoding in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/character-encoding.md)</ept> for complete explanation)","source":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)"},{"pos":[150,155],"content":"-and-","nodes":[{"content":"-and-","pos":[0,5]}]},{"pos":[162,288],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Text.Encoding.DecoderFallback\"&gt;&lt;/xref&gt;</ph> is set to <ph id=\"ph2\">&lt;xref href=\"System.Text.DecoderExceptionFallback\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."}],"pos":[79809,80108],"yaml":true},{"content":"Gets a value indicating whether the current encoding uses single-byte code points.","nodes":[{"pos":[0,82],"content":"Gets a value indicating whether the current encoding uses single-byte code points.","nodes":[{"content":"Gets a value indicating whether the current encoding uses single-byte code points.","pos":[0,82]}]}],"pos":[81441,81524],"yaml":true},{"content":"Instead of using the <xref:System.Text.ASCIIEncoding.IsSingleByte%2A> property to determine the size of a byte array for encoding operations  and the size of a character array for decoding operations (for example, so that the size of the byte array is <xref:System.Text.ASCIIEncoding.IsSingleByte%2A> * the number of characters to be encoded), you should call the <xref:System.Text.ASCIIEncoding.GetByteCount%2A> or <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> method for encoding operations and the <xref:System.Text.ASCIIEncoding.GetCharCount%2A> or <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> method for decoding operations. These methods takes the <xref:System.Text.ASCIIEncoding> object's replacement fallback strategy into account when calculating the required array size.","nodes":[{"pos":[0,793],"content":"Instead of using the <xref:System.Text.ASCIIEncoding.IsSingleByte%2A> property to determine the size of a byte array for encoding operations  and the size of a character array for decoding operations (for example, so that the size of the byte array is <xref:System.Text.ASCIIEncoding.IsSingleByte%2A> * the number of characters to be encoded), you should call the <xref:System.Text.ASCIIEncoding.GetByteCount%2A> or <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> method for encoding operations and the <xref:System.Text.ASCIIEncoding.GetCharCount%2A> or <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> method for decoding operations. These methods takes the <xref:System.Text.ASCIIEncoding> object's replacement fallback strategy into account when calculating the required array size.","nodes":[{"content":"Instead of using the <xref:System.Text.ASCIIEncoding.IsSingleByte%2A> property to determine the size of a byte array for encoding operations  and the size of a character array for decoding operations (for example, so that the size of the byte array is <xref:System.Text.ASCIIEncoding.IsSingleByte%2A> * the number of characters to be encoded), you should call the <xref:System.Text.ASCIIEncoding.GetByteCount%2A> or <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> method for encoding operations and the <xref:System.Text.ASCIIEncoding.GetCharCount%2A> or <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> method for decoding operations. These methods takes the <xref:System.Text.ASCIIEncoding> object's replacement fallback strategy into account when calculating the required array size.","pos":[0,793],"nodes":[{"content":"Instead of using the <ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding.IsSingleByte%2A&gt;</ph> property to determine the size of a byte array for encoding operations  and the size of a character array for decoding operations (for example, so that the size of the byte array is <ph id=\"ph2\">&lt;xref:System.Text.ASCIIEncoding.IsSingleByte%2A&gt;</ph> * the number of characters to be encoded), you should call the <ph id=\"ph3\">&lt;xref:System.Text.ASCIIEncoding.GetByteCount%2A&gt;</ph> or <ph id=\"ph4\">&lt;xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A&gt;</ph> method for encoding operations and the <ph id=\"ph5\">&lt;xref:System.Text.ASCIIEncoding.GetCharCount%2A&gt;</ph> or <ph id=\"ph6\">&lt;xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A&gt;</ph> method for decoding operations.","pos":[0,642],"source":"Instead of using the <xref:System.Text.ASCIIEncoding.IsSingleByte%2A> property to determine the size of a byte array for encoding operations  and the size of a character array for decoding operations (for example, so that the size of the byte array is <xref:System.Text.ASCIIEncoding.IsSingleByte%2A> * the number of characters to be encoded), you should call the <xref:System.Text.ASCIIEncoding.GetByteCount%2A> or <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> method for encoding operations and the <xref:System.Text.ASCIIEncoding.GetCharCount%2A> or <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> method for decoding operations."},{"content":"These methods takes the <ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding&gt;</ph> object's replacement fallback strategy into account when calculating the required array size.","pos":[643,793],"source":" These methods takes the <xref:System.Text.ASCIIEncoding> object's replacement fallback strategy into account when calculating the required array size."}]}]}],"pos":[81535,82329],"yaml":true,"extradata":"MT"},{"content":"This property is always `true`.","nodes":[{"pos":[0,31],"content":"This property is always <ph id=\"ph1\">`true`</ph>.","source":"This property is always `true`."}],"pos":[82520,82552],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Text.ASCIIEncoding\n  commentId: T:System.Text.ASCIIEncoding\n  id: ASCIIEncoding\n  children:\n  - System.Text.ASCIIEncoding.#ctor\n  - System.Text.ASCIIEncoding.GetByteCount(System.String)\n  - System.Text.ASCIIEncoding.GetByteCount(System.Char*,System.Int32)\n  - System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  - System.Text.ASCIIEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n  - System.Text.ASCIIEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  - System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  - System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  - System.Text.ASCIIEncoding.GetCharCount(System.Byte*,System.Int32)\n  - System.Text.ASCIIEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  - System.Text.ASCIIEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  - System.Text.ASCIIEncoding.GetDecoder\n  - System.Text.ASCIIEncoding.GetEncoder\n  - System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)\n  - System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)\n  - System.Text.ASCIIEncoding.GetString(System.Byte[],System.Int32,System.Int32)\n  - System.Text.ASCIIEncoding.IsSingleByte\n  langs:\n  - csharp\n  name: ASCIIEncoding\n  nameWithType: ASCIIEncoding\n  fullName: System.Text.ASCIIEncoding\n  type: Class\n  assemblies:\n  - System.Text.Encoding.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Represents an ASCII character encoding of Unicode characters.\n  remarks: \"Encoding is the process of transforming a set of Unicode characters into a sequence of bytes. Decoding is the process of transforming a sequence of encoded bytes into a set of Unicode characters.  \\n  \\n <xref:System.Text.ASCIIEncoding> corresponds to the Windows code page 20127. Because ASCII is a 7-bit encoding, ASCII characters are limited to the lowest 128 Unicode characters, from U+0000 to U+007F. If you use the default encoder returned by the <xref:System.Text.Encoding.ASCII%2A?displayProperty=fullName> property or the <xref:System.Text.ASCIIEncoding.%23ctor%2A> constructor, characters outside that range are replaced with a question mark (?) before the encoding operation is performed.  Because the <xref:System.Text.ASCIIEncoding> class supports only a limited character set, the <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, and <xref:System.Text.UTF32Encoding> classes are better suited for globalized applications. The following considerations can help you to decide whether to use <xref:System.Text.ASCIIEncoding>:  \\n  \\n-   Some protocols require ASCII or a subset of ASCII. In these cases ASCII encoding is appropriate.  \\n  \\n-   If an 8-bit encoding is expected, then ASCII probably isn't the correct choice. Instead, consider using UTF8 instead of ASCII. For the characters U+0000 through U+007F, the results are identical, but all Unicode characters are representable in UTF-8, which avoids data loss.  \\n  \\n> [!CAUTION]\\n>  <xref:System.Text.ASCIIEncoding> does not provide error detection. For security reasons, you should use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.  \\n  \\n The <xref:System.Text.ASCIIEncoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.ASCIIEncoding.GetBytes%2A> method performs the actual encoding.  \\n  \\n Likewise, the <xref:System.Text.ASCIIEncoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.ASCIIEncoding.GetChars%2A> and <xref:System.Text.ASCIIEncoding.GetString%2A> methods perform the actual decoding.  \\n  \\n Note that the default <xref:System.Text.ASCIIEncoding> constructor by itself might not have the appropriate behavior for your application. You might want to consider setting the <xref:System.Text.Encoding.EncoderFallback%2A> or <xref:System.Text.Encoding.DecoderFallback%2A> property to <xref:System.Text.EncoderExceptionFallback> or <xref:System.Text.DecoderExceptionFallback> to prevent sequences with the 8th bit set. Custom behavior might also be appropriate for these cases.\"\n  example:\n  - \"The following example demonstrates how to encode Unicode characters into ASCII. Notice the loss of data that occurs when your application uses <xref:System.Text.ASCIIEncoding> to encode Unicode characters outside of the ASCII range.  \\n  \\n [!code-cpp[System.Text.ASCIIEncoding Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding Example/CPP/snippet.cpp#1)]\\n [!code-csharp[System.Text.ASCIIEncoding Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding Example/CS/snippet.cs#1)]\\n [!code-vb[System.Text.ASCIIEncoding Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.ASCIIEncoding Example/VB/snippet.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class ASCIIEncoding : System.Text.Encoding\n  inheritance:\n  - System.Object\n  - System.Text.Encoding\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Text.Encoding.ASCII\n  - System.Text.Encoding.BigEndianUnicode\n  - System.Text.Encoding.BodyName\n  - System.Text.Encoding.Clone\n  - System.Text.Encoding.CodePage\n  - System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])\n  - System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)\n  - System.Text.Encoding.DecoderFallback\n  - System.Text.Encoding.Default\n  - System.Text.Encoding.EncoderFallback\n  - System.Text.Encoding.EncodingName\n  - System.Text.Encoding.Equals(System.Object)\n  - System.Text.Encoding.GetByteCount(System.Char[])\n  - System.Text.Encoding.GetByteCount(System.String,System.Int32,System.Int32)\n  - System.Text.Encoding.GetBytes(System.Char[])\n  - System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)\n  - System.Text.Encoding.GetBytes(System.String)\n  - System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32)\n  - System.Text.Encoding.GetCharCount(System.Byte[])\n  - System.Text.Encoding.GetChars(System.Byte[])\n  - System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)\n  - System.Text.Encoding.GetEncoding(System.Int32)\n  - System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)\n  - System.Text.Encoding.GetEncoding(System.String)\n  - System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)\n  - System.Text.Encoding.GetEncodings\n  - System.Text.Encoding.GetHashCode\n  - System.Text.Encoding.GetPreamble\n  - System.Text.Encoding.GetString(System.Byte*,System.Int32)\n  - System.Text.Encoding.GetString(System.Byte[])\n  - System.Text.Encoding.HeaderName\n  - System.Text.Encoding.IsAlwaysNormalized\n  - System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)\n  - System.Text.Encoding.IsBrowserDisplay\n  - System.Text.Encoding.IsBrowserSave\n  - System.Text.Encoding.IsMailNewsDisplay\n  - System.Text.Encoding.IsMailNewsSave\n  - System.Text.Encoding.IsReadOnly\n  - System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)\n  - System.Text.Encoding.Unicode\n  - System.Text.Encoding.UTF32\n  - System.Text.Encoding.UTF7\n  - System.Text.Encoding.UTF8\n  - System.Text.Encoding.WebName\n  - System.Text.Encoding.WindowsCodePage\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/ASCIIEncoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.ASCIIEncoding.#ctor\n  commentId: M:System.Text.ASCIIEncoding.#ctor\n  id: '#ctor'\n  parent: System.Text.ASCIIEncoding\n  langs:\n  - csharp\n  name: ASCIIEncoding()\n  nameWithType: ASCIIEncoding.ASCIIEncoding()\n  fullName: ASCIIEncoding.ASCIIEncoding()\n  type: Constructor\n  assemblies:\n  - System.Text.Encoding.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Initializes a new instance of the <xref href=\"System.Text.ASCIIEncoding\"></xref> class.\n  remarks: \"> [!CAUTION]\\n>  The <xref:System.Text.ASCIIEncoding> class does not provide error detection. For security reasons, you should use the <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> class and enable error detection.  \\n  \\n If you choose to use ASCII encoding, this constructor may not provide the appropriate fallback behavior for your application. It uses the <xref:System.Text.EncoderReplacementFallback> and <xref:System.Text.DecoderReplacementFallback> classes to replace every character outside the range of U+0000 through U+007F with a question mark (?). Instead, you can call the <xref:System.Text.Encoding.GetEncoding%28System.Int32%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29?displayProperty=fullName> or <xref:System.Text.Encoding.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29?displayProperty=fullName> method and pass it <xref:System.Text.EncoderExceptionFallback> and <xref:System.Text.DecoderExceptionFallback> objects to use exception fallback.  \\n  \\n> [!NOTE]\\n>  <xref:System.Text.ASCIIEncoding> supports only the Unicode character values between U+0000 and U+007F. Therefore, <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, and <xref:System.Text.UTF32Encoding> are better suited for globalized applications.\"\n  example:\n  - \"The following example demonstrates how to create a new <xref:System.Text.ASCIIEncoding> instance and display the name of the encoding.  \\n  \\n [!code-cpp[System.Text.ASCIIEncoding.ctor Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.ctor Example/CPP/ctor.cpp#1)]\\n [!code-csharp[System.Text.ASCIIEncoding.ctor Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.ctor Example/CS/ctor.cs#1)]\\n [!code-vb[System.Text.ASCIIEncoding.ctor Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.ctor Example/VB/ctor.vb#1)]\"\n  syntax:\n    content: public ASCIIEncoding ();\n    parameters: []\n  overload: System.Text.ASCIIEncoding.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/ASCIIEncoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.ASCIIEncoding.GetByteCount(System.String)\n  commentId: M:System.Text.ASCIIEncoding.GetByteCount(System.String)\n  id: GetByteCount(System.String)\n  parent: System.Text.ASCIIEncoding\n  langs:\n  - csharp\n  name: GetByteCount(String)\n  nameWithType: ASCIIEncoding.GetByteCount(String)\n  fullName: ASCIIEncoding.GetByteCount(String)\n  type: Method\n  assemblies:\n  - System.Text.Encoding.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Calculates the number of bytes produced by encoding the characters in the specified <xref href=\"System.String\"></xref>.\n  remarks: To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.ASCIIEncoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>. The <xref:System.Text.ASCIIEncoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> method generally executes faster.\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Text.ASCIIEncoding.GetByteCount%2A> method to return the number of bytes required to encode a string using <xref:System.Text.ASCIIEncoding>.  \\n  \\n [!code-cpp[System.Text.ASCIIEncoding.GetByteCount2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetByteCount2 Example/CPP/getbytecount-string.cpp#1)]\\n [!code-csharp[System.Text.ASCIIEncoding.GetByteCount2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetByteCount2 Example/CS/getbytecount-string.cs#1)]\\n [!code-vb[System.Text.ASCIIEncoding.GetByteCount2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetByteCount2 Example/VB/getbytecount-string.vb#1)]\"\n  syntax:\n    content: public override int GetByteCount (string chars);\n    parameters:\n    - id: chars\n      type: System.String\n      description: The <xref href=\"System.String\"></xref> containing the set of characters to encode.\n    return:\n      type: System.Int32\n      description: The number of bytes produced by encoding the specified characters.\n  overload: System.Text.ASCIIEncoding.GetByteCount*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>chars</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The resulting number of bytes is greater than the maximum number that can be returned as an integer.\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \\n  \\n -and-  \\n  \\n <xref href=\\\"System.Text.Encoding.EncoderFallback\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\"></xref>.\"\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/ASCIIEncoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.ASCIIEncoding.GetByteCount(System.Char*,System.Int32)\n  commentId: M:System.Text.ASCIIEncoding.GetByteCount(System.Char*,System.Int32)\n  id: GetByteCount(System.Char*,System.Int32)\n  parent: System.Text.ASCIIEncoding\n  langs:\n  - csharp\n  name: GetByteCount(Char*, Int32)\n  nameWithType: ASCIIEncoding.GetByteCount(Char*, Int32)\n  fullName: ASCIIEncoding.GetByteCount(Char*, Int32)\n  type: Method\n  assemblies:\n  - System.Text.Encoding.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.\n  remarks: To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.ASCIIEncoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>. The <xref:System.Text.ASCIIEncoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> method generally executes faster.\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      [System.Security.SecurityCritical]\n\n      public override int GetByteCount (char* chars, int count);\n    parameters:\n    - id: chars\n      type: System.Char*\n      description: A pointer to the first character to encode.\n    - id: count\n      type: System.Int32\n      description: The number of characters to encode.\n    return:\n      type: System.Int32\n      description: The number of bytes produced by encoding the specified characters.\n  overload: System.Text.ASCIIEncoding.GetByteCount*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>chars</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>count</code> is less than zero.  \\n  \\n -or-  \\n  \\n The resulting number of bytes is greater than the maximum number that can be returned as an integer.\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \\n  \\n -and-  \\n  \\n <xref href=\\\"System.Text.Encoding.EncoderFallback\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\"></xref>.\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  altCompliant: System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/ASCIIEncoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  id: GetByteCount(System.Char[],System.Int32,System.Int32)\n  parent: System.Text.ASCIIEncoding\n  langs:\n  - csharp\n  name: GetByteCount(Char[], Int32, Int32)\n  nameWithType: ASCIIEncoding.GetByteCount(Char[], Int32, Int32)\n  fullName: ASCIIEncoding.GetByteCount(Char[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Text.Encoding.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Calculates the number of bytes produced by encoding a set of characters from the specified character array.\n  remarks: To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.ASCIIEncoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>. The <xref:System.Text.ASCIIEncoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> method generally executes faster.\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Text.ASCIIEncoding.GetByteCount%2A> method to return the number of bytes required to encode an array of Unicode characters using <xref:System.Text.ASCIIEncoding>.  \\n  \\n [!code-cpp[System.Text.ASCIIEncoding.GetByteCount1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetByteCount1 Example/CPP/getbytecount-char[]-int32-int32.cpp#1)]\\n [!code-csharp[System.Text.ASCIIEncoding.GetByteCount1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetByteCount1 Example/CS/getbytecount-char[]-int32-int32.cs#1)]\\n [!code-vb[System.Text.ASCIIEncoding.GetByteCount1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetByteCount1 Example/VB/getbytecount-char[]-int32-int32.vb#1)]\"\n  syntax:\n    content: public override int GetByteCount (char[] chars, int index, int count);\n    parameters:\n    - id: chars\n      type: System.Char[]\n      description: The character array containing the set of characters to encode.\n    - id: index\n      type: System.Int32\n      description: The index of the first character to encode.\n    - id: count\n      type: System.Int32\n      description: The number of characters to encode.\n    return:\n      type: System.Int32\n      description: The number of bytes produced by encoding the specified characters.\n  overload: System.Text.ASCIIEncoding.GetByteCount*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>chars</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> or <code>count</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>index</code> and <code>count</code> do not denote a valid range in <code>chars</code>.  \\n  \\n -or-  \\n  \\n The resulting number of bytes is greater than the maximum number that can be returned as an integer.\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \\n  \\n -and-  \\n  \\n <xref href=\\\"System.Text.Encoding.EncoderFallback\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\"></xref>.\"\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/ASCIIEncoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.ASCIIEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n  commentId: M:System.Text.ASCIIEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n  id: GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n  parent: System.Text.ASCIIEncoding\n  langs:\n  - csharp\n  name: GetBytes(Char*, Int32, Byte*, Int32)\n  nameWithType: ASCIIEncoding.GetBytes(Char*, Int32, Byte*, Int32)\n  fullName: ASCIIEncoding.GetBytes(Char*, Int32, Byte*, Int32)\n  type: Method\n  assemblies:\n  - System.Text.Encoding.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.\n  remarks: \"To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.ASCIIEncoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>. The <xref:System.Text.ASCIIEncoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> method generally executes faster.  \\n  \\n Data to be converted, such as data read from a stream, can be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.ASCIIEncoding.GetDecoder%2A> method or the <xref:System.Text.ASCIIEncoding.GetEncoder%2A> method, respectively.  \\n  \\n <xref:System.Text.ASCIIEncoding> does not provide error detection. Any Unicode character greater than U+007F is translated to an ASCII question mark (\\\"?\\\").  \\n  \\n> [!CAUTION]\\n>  For security reasons, your application is recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      [System.Security.SecurityCritical]\n\n      public override int GetBytes (char* chars, int charCount, byte* bytes, int byteCount);\n    parameters:\n    - id: chars\n      type: System.Char*\n      description: A pointer to the first character to encode.\n    - id: charCount\n      type: System.Int32\n      description: The number of characters to encode.\n    - id: bytes\n      type: System.Byte*\n      description: A pointer to the location at which to start writing the resulting sequence of bytes.\n    - id: byteCount\n      type: System.Int32\n      description: The maximum number of bytes to write.\n    return:\n      type: System.Int32\n      description: The actual number of bytes written at the location indicated by <code>bytes</code>.\n  overload: System.Text.ASCIIEncoding.GetBytes*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>chars</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>bytes</code> is `null`.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>charCount</code> or <code>byteCount</code> is less than zero.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>byteCount</code> is less than the resulting number of bytes.\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \\n  \\n -and-  \\n  \\n <xref href=\\\"System.Text.Encoding.EncoderFallback\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\"></xref>.\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  altCompliant: System.Text.ASCIIEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/ASCIIEncoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.ASCIIEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  commentId: M:System.Text.ASCIIEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  id: GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Text.ASCIIEncoding\n  langs:\n  - csharp\n  name: GetBytes(Char[], Int32, Int32, Byte[], Int32)\n  nameWithType: ASCIIEncoding.GetBytes(Char[], Int32, Int32, Byte[], Int32)\n  fullName: ASCIIEncoding.GetBytes(Char[], Int32, Int32, Byte[], Int32)\n  type: Method\n  assemblies:\n  - System.Text.Encoding.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Encodes a set of characters from the specified character array into the specified byte array.\n  remarks: \"To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.ASCIIEncoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>. The <xref:System.Text.ASCIIEncoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> method generally executes faster.  \\n  \\n Data to be converted, such as data read from a stream, can be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.ASCIIEncoding.GetDecoder%2A> method or the <xref:System.Text.ASCIIEncoding.GetEncoder%2A> method, respectively.  \\n  \\n <xref:System.Text.ASCIIEncoding> does not provide error detection. Any Unicode character greater than U+007F is encoded as the ASCII question mark (\\\"?\\\").  \\n  \\n> [!CAUTION]\\n>  For security reasons, your application is recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.\"\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Text.ASCIIEncoding.GetBytes%2A> method to encode a range of characters from a string and store the encoded characters in a range of elements in a byte array.  \\n  \\n [!code-cpp[System.Text.ASCIIEncoding.GetBytes1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetBytes1 Example/CPP/getbytes-string-int32-int32-byte[]-int32.cpp#1)]\\n [!code-csharp[System.Text.ASCIIEncoding.GetBytes1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetBytes1 Example/CS/getbytes-string-int32-int32-byte[]-int32.cs#1)]\\n [!code-vb[System.Text.ASCIIEncoding.GetBytes1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetBytes1 Example/VB/getbytes-string-int32-int32-byte[]-int32.vb#1)]\"\n  syntax:\n    content: public override int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);\n    parameters:\n    - id: chars\n      type: System.Char[]\n      description: The character array containing the set of characters to encode.\n    - id: charIndex\n      type: System.Int32\n      description: The index of the first character to encode.\n    - id: charCount\n      type: System.Int32\n      description: The number of characters to encode.\n    - id: bytes\n      type: System.Byte[]\n      description: The byte array to contain the resulting sequence of bytes.\n    - id: byteIndex\n      type: System.Int32\n      description: The index at which to start writing the resulting sequence of bytes.\n    return:\n      type: System.Int32\n      description: The actual number of bytes written into <code>bytes</code>.\n  overload: System.Text.ASCIIEncoding.GetBytes*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>chars</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>bytes</code> is `null`.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>charIndex</code> or <code>charCount</code> or <code>byteIndex</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>charIndex</code> and <code>charCount</code> do not denote a valid range in <code>chars</code>.  \\n  \\n -or-  \\n  \\n <code>byteIndex</code> is not a valid index in <code>bytes</code>.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>bytes</code> does not have enough capacity from <code>byteIndex</code> to the end of the array to accommodate the resulting bytes.\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \\n  \\n -and-  \\n  \\n <xref href=\\\"System.Text.Encoding.EncoderFallback\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\"></xref>.\"\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/ASCIIEncoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  commentId: M:System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  id: GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Text.ASCIIEncoding\n  langs:\n  - csharp\n  name: GetBytes(String, Int32, Int32, Byte[], Int32)\n  nameWithType: ASCIIEncoding.GetBytes(String, Int32, Int32, Byte[], Int32)\n  fullName: ASCIIEncoding.GetBytes(String, Int32, Int32, Byte[], Int32)\n  type: Method\n  assemblies:\n  - System.Text.Encoding.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Encodes a set of characters from the specified <xref href=\"System.String\"></xref> into the specified byte array.\n  remarks: \"To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.ASCIIEncoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>. The <xref:System.Text.ASCIIEncoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> method generally executes faster.  \\n  \\n Data to be converted, such as data read from a stream, can be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.ASCIIEncoding.GetDecoder%2A> method or the <xref:System.Text.ASCIIEncoding.GetEncoder%2A> method, respectively.  \\n  \\n <xref:System.Text.ASCIIEncoding> does not provide error detection. Any Unicode character greater than U+007F is encoded as the ASCII question mark (\\\"?\\\").  \\n  \\n> [!CAUTION]\\n>  For security reasons, your application is recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.\"\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Text.ASCIIEncoding.GetBytes%2A> method to encode a range of elements from a Unicode character array and store the encoded bytes in a range of elements in a byte array.  \\n  \\n [!code-cpp[System.Text.ASCIIEncoding.GetBytes2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetBytes2/CPP/getbytes-char[]-int32-int32-byte[]-int32.cpp#1)]\\n [!code-csharp[System.Text.ASCIIEncoding.GetBytes2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetBytes2/CS/getbytes-char[]-int32-int32-byte[]-int32.cs#1)]\\n [!code-vb[System.Text.ASCIIEncoding.GetBytes2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetBytes2/VB/getbytes-char[]-int32-int32-byte[]-int32.vb#1)]\"\n  syntax:\n    content: public override int GetBytes (string chars, int charIndex, int charCount, byte[] bytes, int byteIndex);\n    parameters:\n    - id: chars\n      type: System.String\n      description: The <xref href=\"System.String\"></xref> containing the set of characters to encode.\n    - id: charIndex\n      type: System.Int32\n      description: The index of the first character to encode.\n    - id: charCount\n      type: System.Int32\n      description: The number of characters to encode.\n    - id: bytes\n      type: System.Byte[]\n      description: The byte array to contain the resulting sequence of bytes.\n    - id: byteIndex\n      type: System.Int32\n      description: The index at which to start writing the resulting sequence of bytes.\n    return:\n      type: System.Int32\n      description: The actual number of bytes written into <code>bytes</code>.\n  overload: System.Text.ASCIIEncoding.GetBytes*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>s</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>bytes</code> is `null`.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>charIndex</code> or <code>charCount</code> or <code>byteIndex</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>charIndex</code> and <code>charCount</code> do not denote a valid range in <code>chars</code>.  \\n  \\n -or-  \\n  \\n <code>byteIndex</code> is not a valid index in <code>bytes</code>.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>bytes</code> does not have enough capacity from <code>byteIndex</code> to the end of the array to accommodate the resulting bytes.\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \\n  \\n -and-  \\n  \\n <xref href=\\\"System.Text.Encoding.EncoderFallback\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\"></xref>.\"\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/ASCIIEncoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  id: GetCharCount(System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.ASCIIEncoding\n  langs:\n  - csharp\n  name: GetCharCount(Byte[], Int32, Int32)\n  nameWithType: ASCIIEncoding.GetCharCount(Byte[], Int32, Int32)\n  fullName: ASCIIEncoding.GetCharCount(Byte[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Text.Encoding.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.\n  remarks: To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.ASCIIEncoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A>. The <xref:System.Text.ASCIIEncoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> method generally executes faster.\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Text.ASCIIEncoding.GetCharCount%2A> method to return the number of characters produced by decoding a range of elements in a byte array.  \\n  \\n [!code-cpp[System.Text.ASCIIEncoding.GetCharCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetCharCount Example/CPP/getcharcount-byte[]-int32-int32.cpp#1)]\\n [!code-csharp[System.Text.ASCIIEncoding.GetCharCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetCharCount Example/CS/getcharcount-byte[]-int32-int32.cs#1)]\\n [!code-vb[System.Text.ASCIIEncoding.GetCharCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetCharCount Example/VB/getcharcount-byte[]-int32-int32.vb#1)]\"\n  syntax:\n    content: public override int GetCharCount (byte[] bytes, int index, int count);\n    parameters:\n    - id: bytes\n      type: System.Byte[]\n      description: The byte array containing the sequence of bytes to decode.\n    - id: index\n      type: System.Int32\n      description: The index of the first byte to decode.\n    - id: count\n      type: System.Int32\n      description: The number of bytes to decode.\n    return:\n      type: System.Int32\n      description: The number of characters produced by decoding the specified sequence of bytes.\n  overload: System.Text.ASCIIEncoding.GetCharCount*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>bytes</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> or <code>count</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>index</code> and <code>count</code> do not denote a valid range in <code>bytes</code>.  \\n  \\n -or-  \\n  \\n The resulting number of bytes is greater than the maximum number that can be returned as an integer.\"\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \\n  \\n -and-  \\n  \\n <xref href=\\\"System.Text.Encoding.DecoderFallback\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\"></xref>.\"\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/ASCIIEncoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.ASCIIEncoding.GetCharCount(System.Byte*,System.Int32)\n  commentId: M:System.Text.ASCIIEncoding.GetCharCount(System.Byte*,System.Int32)\n  id: GetCharCount(System.Byte*,System.Int32)\n  parent: System.Text.ASCIIEncoding\n  langs:\n  - csharp\n  name: GetCharCount(Byte*, Int32)\n  nameWithType: ASCIIEncoding.GetCharCount(Byte*, Int32)\n  fullName: ASCIIEncoding.GetCharCount(Byte*, Int32)\n  type: Method\n  assemblies:\n  - System.Text.Encoding.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.\n  remarks: To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.ASCIIEncoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A>. The <xref:System.Text.ASCIIEncoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> method generally executes faster.\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      [System.Security.SecurityCritical]\n\n      public override int GetCharCount (byte* bytes, int count);\n    parameters:\n    - id: bytes\n      type: System.Byte*\n      description: A pointer to the first byte to decode.\n    - id: count\n      type: System.Int32\n      description: The number of bytes to decode.\n    return:\n      type: System.Int32\n      description: The number of characters produced by decoding the specified sequence of bytes.\n  overload: System.Text.ASCIIEncoding.GetCharCount*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>bytes</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>count</code> is less than zero.  \\n  \\n -or-  \\n  \\n The resulting number of bytes is greater than the maximum number that can be returned as an integer.\"\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \\n  \\n -and-  \\n  \\n <xref href=\\\"System.Text.Encoding.DecoderFallback\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\"></xref>.\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  altCompliant: System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/ASCIIEncoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.ASCIIEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  commentId: M:System.Text.ASCIIEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  id: GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  parent: System.Text.ASCIIEncoding\n  langs:\n  - csharp\n  name: GetChars(Byte*, Int32, Char*, Int32)\n  nameWithType: ASCIIEncoding.GetChars(Byte*, Int32, Char*, Int32)\n  fullName: ASCIIEncoding.GetChars(Byte*, Int32, Char*, Int32)\n  type: Method\n  assemblies:\n  - System.Text.Encoding.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.\n  remarks: \"To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.ASCIIEncoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A>. The <xref:System.Text.ASCIIEncoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> method generally executes faster.  \\n  \\n Data to be converted, such as data read from a stream, can be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.ASCIIEncoding.GetDecoder%2A> method or the <xref:System.Text.ASCIIEncoding.GetEncoder%2A> method, respectively.  \\n  \\n <xref:System.Text.ASCIIEncoding> does not provide error detection. Any byte greater than hexadecimal 0x7F is decoded as the Unicode question mark (\\\"?\\\").  \\n  \\n> [!CAUTION]\\n>  For security reasons, your application is recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      [System.Security.SecurityCritical]\n\n      public override int GetChars (byte* bytes, int byteCount, char* chars, int charCount);\n    parameters:\n    - id: bytes\n      type: System.Byte*\n      description: A pointer to the first byte to decode.\n    - id: byteCount\n      type: System.Int32\n      description: The number of bytes to decode.\n    - id: chars\n      type: System.Char*\n      description: A pointer to the location at which to start writing the resulting set of characters.\n    - id: charCount\n      type: System.Int32\n      description: The maximum number of characters to write.\n    return:\n      type: System.Int32\n      description: The actual number of characters written at the location indicated by <code>chars</code>.\n  overload: System.Text.ASCIIEncoding.GetChars*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>bytes</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>chars</code> is `null`.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>byteCount</code> or <code>charCount</code> is less than zero.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>charCount</code> is less than the resulting number of characters.\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \\n  \\n -and-  \\n  \\n <xref href=\\\"System.Text.Encoding.DecoderFallback\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\"></xref>.\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  altCompliant: System.Text.ASCIIEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/ASCIIEncoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.ASCIIEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  commentId: M:System.Text.ASCIIEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  id: GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  parent: System.Text.ASCIIEncoding\n  langs:\n  - csharp\n  name: GetChars(Byte[], Int32, Int32, Char[], Int32)\n  nameWithType: ASCIIEncoding.GetChars(Byte[], Int32, Int32, Char[], Int32)\n  fullName: ASCIIEncoding.GetChars(Byte[], Int32, Int32, Char[], Int32)\n  type: Method\n  assemblies:\n  - System.Text.Encoding.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Decodes a sequence of bytes from the specified byte array into the specified character array.\n  remarks: \"To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.ASCIIEncoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A>. The <xref:System.Text.ASCIIEncoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> method generally executes faster.  \\n  \\n Data to be converted, such as data read from a stream, can be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.ASCIIEncoding.GetDecoder%2A> method or the <xref:System.Text.ASCIIEncoding.GetEncoder%2A> method, respectively.  \\n  \\n <xref:System.Text.ASCIIEncoding> does not provide error detection. Any byte greater than hexadecimal 0x7F is decoded as the Unicode question mark (\\\"?\\\").  \\n  \\n> [!CAUTION]\\n>  For security reasons, your application is recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.\"\n  example:\n  - \"The following example demonstrates how to decode a range of elements from a byte array and store the result in a set of elements in a Unicode character array.  \\n  \\n [!code-cpp[System.Text.ASCIIEncoding.GetChars Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetChars Example/CPP/getchars-byte[]-int32-int32-char[]-int32.cpp#1)]\\n [!code-csharp[System.Text.ASCIIEncoding.GetChars Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetChars Example/CS/getchars-byte[]-int32-int32-char[]-int32.cs#1)]\\n [!code-vb[System.Text.ASCIIEncoding.GetChars Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetChars Example/VB/getchars-byte[]-int32-int32-char[]-int32.vb#1)]\"\n  syntax:\n    content: public override int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);\n    parameters:\n    - id: bytes\n      type: System.Byte[]\n      description: The byte array containing the sequence of bytes to decode.\n    - id: byteIndex\n      type: System.Int32\n      description: The index of the first byte to decode.\n    - id: byteCount\n      type: System.Int32\n      description: The number of bytes to decode.\n    - id: chars\n      type: System.Char[]\n      description: The character array to contain the resulting set of characters.\n    - id: charIndex\n      type: System.Int32\n      description: The index at which to start writing the resulting set of characters.\n    return:\n      type: System.Int32\n      description: The actual number of characters written into <code>chars</code>.\n  overload: System.Text.ASCIIEncoding.GetChars*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>bytes</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>chars</code> is `null`.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>byteIndex</code> or <code>byteCount</code> or <code>charIndex</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>byteindex</code> and <code>byteCount</code> do not denote a valid range in <code>bytes</code>.  \\n  \\n -or-  \\n  \\n <code>charIndex</code> is not a valid index in <code>chars</code>.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>chars</code> does not have enough capacity from <code>charIndex</code> to the end of the array to accommodate the resulting characters.\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \\n  \\n -and-  \\n  \\n <xref href=\\\"System.Text.Encoding.DecoderFallback\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\"></xref>.\"\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/ASCIIEncoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.ASCIIEncoding.GetDecoder\n  commentId: M:System.Text.ASCIIEncoding.GetDecoder\n  id: GetDecoder\n  parent: System.Text.ASCIIEncoding\n  langs:\n  - csharp\n  name: GetDecoder()\n  nameWithType: ASCIIEncoding.GetDecoder()\n  fullName: ASCIIEncoding.GetDecoder()\n  type: Method\n  assemblies:\n  - System.Text.Encoding.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Obtains a decoder that converts an ASCII encoded sequence of bytes into a sequence of Unicode characters.\n  remarks: The <xref:System.Text.Decoder.GetChars%2A?displayProperty=fullName> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref:System.Text.ASCIIEncoding.GetChars%2A> method of this class. However, a <xref:System.Text.Decoder> maintains state information between calls so it can correctly decode byte sequences that span blocks. The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation. Therefore, <xref:System.Text.ASCIIEncoding.GetDecoder%2A> and <xref:System.Text.ASCIIEncoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public override System.Text.Decoder GetDecoder ();\n    parameters: []\n    return:\n      type: System.Text.Decoder\n      description: A <xref href=\"System.Text.Decoder\"></xref> that converts an ASCII encoded sequence of bytes into a sequence of Unicode characters.\n  overload: System.Text.ASCIIEncoding.GetDecoder*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/ASCIIEncoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.ASCIIEncoding.GetEncoder\n  commentId: M:System.Text.ASCIIEncoding.GetEncoder\n  id: GetEncoder\n  parent: System.Text.ASCIIEncoding\n  langs:\n  - csharp\n  name: GetEncoder()\n  nameWithType: ASCIIEncoding.GetEncoder()\n  fullName: ASCIIEncoding.GetEncoder()\n  type: Method\n  assemblies:\n  - System.Text.Encoding.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Obtains an encoder that converts a sequence of Unicode characters into an ASCII encoded sequence of bytes.\n  remarks: The <xref:System.Text.Encoder.GetBytes%2A?displayProperty=fullName> method converts sequential blocks of characters into sequential blocks of bytes, in a manner similar to the <xref:System.Text.ASCIIEncoding.GetBytes%2A> method of this class. However, an <xref:System.Text.Encoder> maintains state information between calls so it can correctly encode character sequences that span blocks. The <xref:System.Text.Encoder> also preserves trailing characters at the end of data blocks and uses the trailing characters in the next encoding operation. For example, a data block might end with an unmatched high surrogate, and the matching low surrogate might be in the next data block. Therefore, <xref:System.Text.ASCIIEncoding.GetDecoder%2A> and <xref:System.Text.ASCIIEncoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public override System.Text.Encoder GetEncoder ();\n    parameters: []\n    return:\n      type: System.Text.Encoder\n      description: An <xref href=\"System.Text.Encoder\"></xref> that converts a sequence of Unicode characters into an ASCII encoded sequence of bytes.\n  overload: System.Text.ASCIIEncoding.GetEncoder*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/ASCIIEncoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)\n  commentId: M:System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)\n  id: GetMaxByteCount(System.Int32)\n  parent: System.Text.ASCIIEncoding\n  langs:\n  - csharp\n  name: GetMaxByteCount(Int32)\n  nameWithType: ASCIIEncoding.GetMaxByteCount(Int32)\n  fullName: ASCIIEncoding.GetMaxByteCount(Int32)\n  type: Method\n  assemblies:\n  - System.Text.Encoding.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Calculates the maximum number of bytes produced by encoding the specified number of characters.\n  remarks: \"The <xref:System.Text.ASCIIEncoding.GetByteCount%2A> method calculates the exact array size required by the <xref:System.Text.ASCIIEncoding.GetBytes%2A> method to store the resulting bytes, whereas the <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> method calculates the maximum array size. The <xref:System.Text.ASCIIEncoding.GetByteCount%2A> method generally allocates less memory, but the <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> method generally executes faster.  \\n  \\n <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> is a worst-case number, including the worst case for the currently selected <xref:System.Text.EncoderFallback>.  If you choose a replacement fallback with a potentially large string, <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> can return large values.  \\n  \\n The <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> method considers potential leftover surrogates from a previous encoding operation. As a result, if the <xref:System.Text.ASCIIEncoding> object uses the default replacement fallback, or if a custom replacement fallback has been defined with a single possible fallback character, the method returns `charCount` + 1. If the <xref:System.Text.ASCIIEncoding> object uses a replacement fallback with more than one possible fallback character, the method returns *n* * (`charCount` + 1), where *n* is the maximum number of fallback characters.  \\n  \\n <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> has no relation to <xref:System.Text.ASCIIEncoding.GetChars%2A>. If your application needs a similar function to use with <xref:System.Text.ASCIIEncoding.GetChars%2A>, it should use <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A>.  \\n  \\n> [!NOTE]\\n>  `GetMaxByteCount(N)` is not necessarily the same value as `N* GetMaxByteCount(1)`.\"\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> method to calculate the bytes required to encode a specified number of characters.  \\n  \\n [!code-cpp[System.Text.ASCIIEncoding.GetMaxByteCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetMaxByteCount Example/CPP/getmaxbytecount-int32.cpp#1)]\\n [!code-csharp[System.Text.ASCIIEncoding.GetMaxByteCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetMaxByteCount Example/CS/getmaxbytecount-int32.cs#1)]\\n [!code-vb[System.Text.ASCIIEncoding.GetMaxByteCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetMaxByteCount Example/VB/getmaxbytecount-int32.vb#1)]\"\n  syntax:\n    content: public override int GetMaxByteCount (int charCount);\n    parameters:\n    - id: charCount\n      type: System.Int32\n      description: The number of characters to encode.\n    return:\n      type: System.Int32\n      description: The maximum number of bytes produced by encoding the specified number of characters.\n  overload: System.Text.ASCIIEncoding.GetMaxByteCount*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>charCount</code> is less than zero.  \\n  \\n -or-  \\n  \\n The resulting number of bytes is greater than the maximum number that can be returned as an integer.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/ASCIIEncoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)\n  commentId: M:System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)\n  id: GetMaxCharCount(System.Int32)\n  parent: System.Text.ASCIIEncoding\n  langs:\n  - csharp\n  name: GetMaxCharCount(Int32)\n  nameWithType: ASCIIEncoding.GetMaxCharCount(Int32)\n  fullName: ASCIIEncoding.GetMaxCharCount(Int32)\n  type: Method\n  assemblies:\n  - System.Text.Encoding.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Calculates the maximum number of characters produced by decoding the specified number of bytes.\n  remarks: \"The <xref:System.Text.ASCIIEncoding.GetCharCount%2A> method calculates the exact array size required by the <xref:System.Text.ASCIIEncoding.GetChars%2A> method to store the resulting characters, whereas  the <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> method calculates the maximum array size. The <xref:System.Text.ASCIIEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> method generally executes faster.  \\n  \\n <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> retrieves a worst-case number, including the worst case for the currently selected <xref:System.Text.DecoderFallback>. If a decoder fallback is present that has a maximum fallback length of *n*, the <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> method returns *n* * `byteCount`.  \\n  \\n <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> has no relation to <xref:System.Text.ASCIIEncoding.GetBytes%2A>. If your application needs a similar function to use with <xref:System.Text.ASCIIEncoding.GetBytes%2A>, it should use <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>.  \\n  \\n> [!NOTE]\\n>  `GetMaxCharCount(N)` is not necessarily the same value as `N* GetMaxCharCount(1)`.\"\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> method to calculate the maximum number of characters needed to decode a specified number of bytes.  \\n  \\n [!code-cpp[System.Text.ASCIIEncoding.GetMaxCharCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetMaxCharCount Example/CPP/getmaxcharcount-int32.cpp#1)]\\n [!code-csharp[System.Text.ASCIIEncoding.GetMaxCharCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetMaxCharCount Example/CS/getmaxcharcount-int32.cs#1)]\\n [!code-vb[System.Text.ASCIIEncoding.GetMaxCharCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetMaxCharCount Example/VB/getmaxcharcount-int32.vb#1)]\"\n  syntax:\n    content: public override int GetMaxCharCount (int byteCount);\n    parameters:\n    - id: byteCount\n      type: System.Int32\n      description: The number of bytes to decode.\n    return:\n      type: System.Int32\n      description: The maximum number of characters produced by decoding the specified number of bytes.\n  overload: System.Text.ASCIIEncoding.GetMaxCharCount*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>byteCount</code> is less than zero.  \\n  \\n -or-  \\n  \\n The resulting number of bytes is greater than the maximum number that can be returned as an integer.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/ASCIIEncoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.ASCIIEncoding.GetString(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Text.ASCIIEncoding.GetString(System.Byte[],System.Int32,System.Int32)\n  id: GetString(System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.ASCIIEncoding\n  langs:\n  - csharp\n  name: GetString(Byte[], Int32, Int32)\n  nameWithType: ASCIIEncoding.GetString(Byte[], Int32, Int32)\n  fullName: ASCIIEncoding.GetString(Byte[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Text.Encoding.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Decodes a range of bytes from a byte array into a string.\n  remarks: \"Data to be converted, such as data read from a stream, can be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.ASCIIEncoding.GetDecoder%2A> method or the <xref:System.Text.ASCIIEncoding.GetEncoder%2A> method, respectively.  \\n  \\n <xref:System.Text.ASCIIEncoding> does not provide error detection. Any byte greater than hexadecimal 0x7F is decoded as the Unicode question mark (\\\"?\\\").  \\n  \\n> [!CAUTION]\\n>  For security reasons, you should use the <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> classes and enable error detection instead of using the <xref:System.Text.ASCIIEncoding> class.\"\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Text.ASCIIEncoding.GetString%2A> method to convert a byte array into a <xref:System.String>.  \\n  \\n [!code-cpp[System.Text.ASCIIEncoding.GetString1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetString1 Example/CPP/getstring-byte[].cpp#1)]\\n [!code-csharp[System.Text.ASCIIEncoding.GetString1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetString1 Example/CS/getstring-byte[].cs#1)]\\n [!code-vb[System.Text.ASCIIEncoding.GetString1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetString1 Example/VB/getstring-byte[].vb#1)]\"\n  syntax:\n    content: public override string GetString (byte[] bytes, int byteIndex, int byteCount);\n    parameters:\n    - id: bytes\n      type: System.Byte[]\n      description: The byte array containing the sequence of bytes to decode.\n    - id: byteIndex\n      type: System.Int32\n      description: The index of the first byte to decode.\n    - id: byteCount\n      type: System.Int32\n      description: The number of bytes to decode.\n    return:\n      type: System.String\n      description: A <xref href=\"System.String\"></xref> containing the results of decoding the specified sequence of bytes.\n  overload: System.Text.ASCIIEncoding.GetString*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>bytes</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> or <code>count</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>index</code> and <code>count</code> do not denote a valid range in <code>bytes</code>.\"\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \\n  \\n -and-  \\n  \\n <xref href=\\\"System.Text.Encoding.DecoderFallback\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\"></xref>.\"\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/ASCIIEncoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.ASCIIEncoding.IsSingleByte\n  commentId: P:System.Text.ASCIIEncoding.IsSingleByte\n  id: IsSingleByte\n  parent: System.Text.ASCIIEncoding\n  langs:\n  - csharp\n  name: IsSingleByte\n  nameWithType: ASCIIEncoding.IsSingleByte\n  fullName: ASCIIEncoding.IsSingleByte\n  type: Property\n  assemblies:\n  - System.Text.Encoding.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Gets a value indicating whether the current encoding uses single-byte code points.\n  remarks: Instead of using the <xref:System.Text.ASCIIEncoding.IsSingleByte%2A> property to determine the size of a byte array for encoding operations  and the size of a character array for decoding operations (for example, so that the size of the byte array is <xref:System.Text.ASCIIEncoding.IsSingleByte%2A> * the number of characters to be encoded), you should call the <xref:System.Text.ASCIIEncoding.GetByteCount%2A> or <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> method for encoding operations and the <xref:System.Text.ASCIIEncoding.GetCharCount%2A> or <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> method for decoding operations. These methods takes the <xref:System.Text.ASCIIEncoding> object's replacement fallback strategy into account when calculating the required array size.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public override bool IsSingleByte { get; }\n    return:\n      type: System.Boolean\n      description: This property is always `true`.\n  overload: System.Text.ASCIIEncoding.IsSingleByte*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/ASCIIEncoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Text.Encoding\n  parent: System.Text\n  isExternal: false\n  name: Encoding\n  nameWithType: Encoding\n  fullName: System.Text.Encoding\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.Text.EncoderFallbackException\n  parent: System.Text\n  isExternal: false\n  name: EncoderFallbackException\n  nameWithType: EncoderFallbackException\n  fullName: System.Text.EncoderFallbackException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.Text.DecoderFallbackException\n  parent: System.Text\n  isExternal: false\n  name: DecoderFallbackException\n  nameWithType: DecoderFallbackException\n  fullName: System.Text.DecoderFallbackException\n- uid: System.Text.ASCIIEncoding.#ctor\n  parent: System.Text.ASCIIEncoding\n  isExternal: false\n  name: ASCIIEncoding()\n  nameWithType: ASCIIEncoding.ASCIIEncoding()\n  fullName: ASCIIEncoding.ASCIIEncoding()\n- uid: System.Text.ASCIIEncoding.GetByteCount(System.String)\n  parent: System.Text.ASCIIEncoding\n  isExternal: false\n  name: GetByteCount(String)\n  nameWithType: ASCIIEncoding.GetByteCount(String)\n  fullName: ASCIIEncoding.GetByteCount(String)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Text.ASCIIEncoding.GetByteCount(System.Char*,System.Int32)\n  parent: System.Text.ASCIIEncoding\n  isExternal: false\n  name: GetByteCount(Char*, Int32)\n  nameWithType: ASCIIEncoding.GetByteCount(Char*, Int32)\n  fullName: ASCIIEncoding.GetByteCount(Char*, Int32)\n- uid: System.Char\n  name: Char\n  nameWithType: Char\n  fullName: System.Char\n- uid: System.Char*\n  parent: System\n  isExternal: false\n  name: Char*\n  nameWithType: Char*\n  fullName: System.Char*\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    nameWithType: Char\n    fullName: System.Char\n  - name: '*'\n    nameWithType: '*'\n    fullName: '*'\n- uid: System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  parent: System.Text.ASCIIEncoding\n  isExternal: false\n  name: GetByteCount(Char[], Int32, Int32)\n  nameWithType: ASCIIEncoding.GetByteCount(Char[], Int32, Int32)\n  fullName: ASCIIEncoding.GetByteCount(Char[], Int32, Int32)\n- uid: System.Char[]\n  parent: System\n  isExternal: false\n  name: Char[]\n  nameWithType: Char[]\n  fullName: System.Char[]\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    nameWithType: Char\n    fullName: System.Char\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Text.ASCIIEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n  parent: System.Text.ASCIIEncoding\n  isExternal: false\n  name: GetBytes(Char*, Int32, Byte*, Int32)\n  nameWithType: ASCIIEncoding.GetBytes(Char*, Int32, Byte*, Int32)\n  fullName: ASCIIEncoding.GetBytes(Char*, Int32, Byte*, Int32)\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte*\n  parent: System\n  isExternal: false\n  name: Byte*\n  nameWithType: Byte*\n  fullName: System.Byte*\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '*'\n    nameWithType: '*'\n    fullName: '*'\n- uid: System.Text.ASCIIEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Text.ASCIIEncoding\n  isExternal: false\n  name: GetBytes(Char[], Int32, Int32, Byte[], Int32)\n  nameWithType: ASCIIEncoding.GetBytes(Char[], Int32, Int32, Byte[], Int32)\n  fullName: ASCIIEncoding.GetBytes(Char[], Int32, Int32, Byte[], Int32)\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Text.ASCIIEncoding\n  isExternal: false\n  name: GetBytes(String, Int32, Int32, Byte[], Int32)\n  nameWithType: ASCIIEncoding.GetBytes(String, Int32, Int32, Byte[], Int32)\n  fullName: ASCIIEncoding.GetBytes(String, Int32, Int32, Byte[], Int32)\n- uid: System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.ASCIIEncoding\n  isExternal: false\n  name: GetCharCount(Byte[], Int32, Int32)\n  nameWithType: ASCIIEncoding.GetCharCount(Byte[], Int32, Int32)\n  fullName: ASCIIEncoding.GetCharCount(Byte[], Int32, Int32)\n- uid: System.Text.ASCIIEncoding.GetCharCount(System.Byte*,System.Int32)\n  parent: System.Text.ASCIIEncoding\n  isExternal: false\n  name: GetCharCount(Byte*, Int32)\n  nameWithType: ASCIIEncoding.GetCharCount(Byte*, Int32)\n  fullName: ASCIIEncoding.GetCharCount(Byte*, Int32)\n- uid: System.Text.ASCIIEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  parent: System.Text.ASCIIEncoding\n  isExternal: false\n  name: GetChars(Byte*, Int32, Char*, Int32)\n  nameWithType: ASCIIEncoding.GetChars(Byte*, Int32, Char*, Int32)\n  fullName: ASCIIEncoding.GetChars(Byte*, Int32, Char*, Int32)\n- uid: System.Text.ASCIIEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  parent: System.Text.ASCIIEncoding\n  isExternal: false\n  name: GetChars(Byte[], Int32, Int32, Char[], Int32)\n  nameWithType: ASCIIEncoding.GetChars(Byte[], Int32, Int32, Char[], Int32)\n  fullName: ASCIIEncoding.GetChars(Byte[], Int32, Int32, Char[], Int32)\n- uid: System.Text.ASCIIEncoding.GetDecoder\n  parent: System.Text.ASCIIEncoding\n  isExternal: false\n  name: GetDecoder()\n  nameWithType: ASCIIEncoding.GetDecoder()\n  fullName: ASCIIEncoding.GetDecoder()\n- uid: System.Text.Decoder\n  parent: System.Text\n  isExternal: false\n  name: Decoder\n  nameWithType: Decoder\n  fullName: System.Text.Decoder\n- uid: System.Text.ASCIIEncoding.GetEncoder\n  parent: System.Text.ASCIIEncoding\n  isExternal: false\n  name: GetEncoder()\n  nameWithType: ASCIIEncoding.GetEncoder()\n  fullName: ASCIIEncoding.GetEncoder()\n- uid: System.Text.Encoder\n  parent: System.Text\n  isExternal: false\n  name: Encoder\n  nameWithType: Encoder\n  fullName: System.Text.Encoder\n- uid: System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)\n  parent: System.Text.ASCIIEncoding\n  isExternal: false\n  name: GetMaxByteCount(Int32)\n  nameWithType: ASCIIEncoding.GetMaxByteCount(Int32)\n  fullName: ASCIIEncoding.GetMaxByteCount(Int32)\n- uid: System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)\n  parent: System.Text.ASCIIEncoding\n  isExternal: false\n  name: GetMaxCharCount(Int32)\n  nameWithType: ASCIIEncoding.GetMaxCharCount(Int32)\n  fullName: ASCIIEncoding.GetMaxCharCount(Int32)\n- uid: System.Text.ASCIIEncoding.GetString(System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.ASCIIEncoding\n  isExternal: false\n  name: GetString(Byte[], Int32, Int32)\n  nameWithType: ASCIIEncoding.GetString(Byte[], Int32, Int32)\n  fullName: ASCIIEncoding.GetString(Byte[], Int32, Int32)\n- uid: System.Text.ASCIIEncoding.IsSingleByte\n  parent: System.Text.ASCIIEncoding\n  isExternal: false\n  name: IsSingleByte\n  nameWithType: ASCIIEncoding.IsSingleByte\n  fullName: ASCIIEncoding.IsSingleByte\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Text.ASCIIEncoding.#ctor*\n  parent: System.Text.ASCIIEncoding\n  isExternal: false\n  name: ASCIIEncoding\n  nameWithType: ASCIIEncoding.ASCIIEncoding\n  fullName: ASCIIEncoding.ASCIIEncoding\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/ASCIIEncoding.xml\n- uid: System.Text.ASCIIEncoding.GetByteCount*\n  parent: System.Text.ASCIIEncoding\n  isExternal: false\n  name: GetByteCount\n  nameWithType: ASCIIEncoding.GetByteCount\n  fullName: ASCIIEncoding.GetByteCount\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/ASCIIEncoding.xml\n- uid: System.Text.ASCIIEncoding.GetBytes*\n  parent: System.Text.ASCIIEncoding\n  isExternal: false\n  name: GetBytes\n  nameWithType: ASCIIEncoding.GetBytes\n  fullName: ASCIIEncoding.GetBytes\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/ASCIIEncoding.xml\n- uid: System.Text.ASCIIEncoding.GetCharCount*\n  parent: System.Text.ASCIIEncoding\n  isExternal: false\n  name: GetCharCount\n  nameWithType: ASCIIEncoding.GetCharCount\n  fullName: ASCIIEncoding.GetCharCount\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/ASCIIEncoding.xml\n- uid: System.Text.ASCIIEncoding.GetChars*\n  parent: System.Text.ASCIIEncoding\n  isExternal: false\n  name: GetChars\n  nameWithType: ASCIIEncoding.GetChars\n  fullName: ASCIIEncoding.GetChars\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/ASCIIEncoding.xml\n- uid: System.Text.ASCIIEncoding.GetDecoder*\n  parent: System.Text.ASCIIEncoding\n  isExternal: false\n  name: GetDecoder\n  nameWithType: ASCIIEncoding.GetDecoder\n  fullName: ASCIIEncoding.GetDecoder\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/ASCIIEncoding.xml\n- uid: System.Text.ASCIIEncoding.GetEncoder*\n  parent: System.Text.ASCIIEncoding\n  isExternal: false\n  name: GetEncoder\n  nameWithType: ASCIIEncoding.GetEncoder\n  fullName: ASCIIEncoding.GetEncoder\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/ASCIIEncoding.xml\n- uid: System.Text.ASCIIEncoding.GetMaxByteCount*\n  parent: System.Text.ASCIIEncoding\n  isExternal: false\n  name: GetMaxByteCount\n  nameWithType: ASCIIEncoding.GetMaxByteCount\n  fullName: ASCIIEncoding.GetMaxByteCount\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/ASCIIEncoding.xml\n- uid: System.Text.ASCIIEncoding.GetMaxCharCount*\n  parent: System.Text.ASCIIEncoding\n  isExternal: false\n  name: GetMaxCharCount\n  nameWithType: ASCIIEncoding.GetMaxCharCount\n  fullName: ASCIIEncoding.GetMaxCharCount\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/ASCIIEncoding.xml\n- uid: System.Text.ASCIIEncoding.GetString*\n  parent: System.Text.ASCIIEncoding\n  isExternal: false\n  name: GetString\n  nameWithType: ASCIIEncoding.GetString\n  fullName: ASCIIEncoding.GetString\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/ASCIIEncoding.xml\n- uid: System.Text.ASCIIEncoding.IsSingleByte*\n  parent: System.Text.ASCIIEncoding\n  isExternal: false\n  name: IsSingleByte\n  nameWithType: ASCIIEncoding.IsSingleByte\n  fullName: ASCIIEncoding.IsSingleByte\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/ASCIIEncoding.xml\n- uid: System.Text.Encoding.Equals(System.Object)\n  parent: System.Text.Encoding\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Encoding.Equals(Object)\n  fullName: Encoding.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Text.Encoding.GetHashCode\n  parent: System.Text.Encoding\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Encoding.GetHashCode()\n  fullName: Encoding.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Text.Encoding.ASCII\n  parent: System.Text.Encoding\n  isExternal: false\n  name: ASCII\n  nameWithType: Encoding.ASCII\n  fullName: Encoding.ASCII\n- uid: System.Text.Encoding.BigEndianUnicode\n  parent: System.Text.Encoding\n  isExternal: false\n  name: BigEndianUnicode\n  nameWithType: Encoding.BigEndianUnicode\n  fullName: Encoding.BigEndianUnicode\n- uid: System.Text.Encoding.BodyName\n  parent: System.Text.Encoding\n  isExternal: false\n  name: BodyName\n  nameWithType: Encoding.BodyName\n  fullName: Encoding.BodyName\n- uid: System.Text.Encoding.Clone\n  parent: System.Text.Encoding\n  isExternal: false\n  name: Clone()\n  nameWithType: Encoding.Clone()\n  fullName: Encoding.Clone()\n- uid: System.Text.Encoding.CodePage\n  parent: System.Text.Encoding\n  isExternal: false\n  name: CodePage\n  nameWithType: Encoding.CodePage\n  fullName: Encoding.CodePage\n- uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: false\n  name: Convert(Encoding, Encoding, Byte[], Int32, Int32)\n  nameWithType: Encoding.Convert(Encoding, Encoding, Byte[], Int32, Int32)\n  fullName: Encoding.Convert(Encoding, Encoding, Byte[], Int32, Int32)\n- uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])\n  parent: System.Text.Encoding\n  isExternal: false\n  name: Convert(Encoding, Encoding, Byte[])\n  nameWithType: Encoding.Convert(Encoding, Encoding, Byte[])\n  fullName: Encoding.Convert(Encoding, Encoding, Byte[])\n- uid: System.Text.Encoding.DecoderFallback\n  parent: System.Text.Encoding\n  isExternal: false\n  name: DecoderFallback\n  nameWithType: Encoding.DecoderFallback\n  fullName: Encoding.DecoderFallback\n- uid: System.Text.Encoding.Default\n  parent: System.Text.Encoding\n  isExternal: false\n  name: Default\n  nameWithType: Encoding.Default\n  fullName: Encoding.Default\n- uid: System.Text.Encoding.EncoderFallback\n  parent: System.Text.Encoding\n  isExternal: false\n  name: EncoderFallback\n  nameWithType: Encoding.EncoderFallback\n  fullName: Encoding.EncoderFallback\n- uid: System.Text.Encoding.EncodingName\n  parent: System.Text.Encoding\n  isExternal: false\n  name: EncodingName\n  nameWithType: Encoding.EncodingName\n  fullName: Encoding.EncodingName\n- uid: System.Text.Encoding.GetByteCount(System.String,System.Int32,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: false\n  name: GetByteCount(String, Int32, Int32)\n  nameWithType: Encoding.GetByteCount(String, Int32, Int32)\n  fullName: Encoding.GetByteCount(String, Int32, Int32)\n- uid: System.Text.Encoding.GetByteCount(System.Char[])\n  parent: System.Text.Encoding\n  isExternal: false\n  name: GetByteCount(Char[])\n  nameWithType: Encoding.GetByteCount(Char[])\n  fullName: Encoding.GetByteCount(Char[])\n- uid: System.Text.Encoding.GetBytes(System.Char[])\n  parent: System.Text.Encoding\n  isExternal: false\n  name: GetBytes(Char[])\n  nameWithType: Encoding.GetBytes(Char[])\n  fullName: Encoding.GetBytes(Char[])\n- uid: System.Text.Encoding.GetBytes(System.String)\n  parent: System.Text.Encoding\n  isExternal: false\n  name: GetBytes(String)\n  nameWithType: Encoding.GetBytes(String)\n  fullName: Encoding.GetBytes(String)\n- uid: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: false\n  name: GetBytes(Char[], Int32, Int32)\n  nameWithType: Encoding.GetBytes(Char[], Int32, Int32)\n  fullName: Encoding.GetBytes(Char[], Int32, Int32)\n- uid: System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: false\n  name: GetBytes(String, Int32, Int32)\n  nameWithType: Encoding.GetBytes(String, Int32, Int32)\n  fullName: Encoding.GetBytes(String, Int32, Int32)\n- uid: System.Text.Encoding.GetCharCount(System.Byte[])\n  parent: System.Text.Encoding\n  isExternal: false\n  name: GetCharCount(Byte[])\n  nameWithType: Encoding.GetCharCount(Byte[])\n  fullName: Encoding.GetCharCount(Byte[])\n- uid: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: false\n  name: GetChars(Byte[], Int32, Int32)\n  nameWithType: Encoding.GetChars(Byte[], Int32, Int32)\n  fullName: Encoding.GetChars(Byte[], Int32, Int32)\n- uid: System.Text.Encoding.GetChars(System.Byte[])\n  parent: System.Text.Encoding\n  isExternal: false\n  name: GetChars(Byte[])\n  nameWithType: Encoding.GetChars(Byte[])\n  fullName: Encoding.GetChars(Byte[])\n- uid: System.Text.Encoding.GetEncoding(System.Int32)\n  parent: System.Text.Encoding\n  isExternal: false\n  name: GetEncoding(Int32)\n  nameWithType: Encoding.GetEncoding(Int32)\n  fullName: Encoding.GetEncoding(Int32)\n- uid: System.Text.Encoding.GetEncoding(System.String)\n  parent: System.Text.Encoding\n  isExternal: false\n  name: GetEncoding(String)\n  nameWithType: Encoding.GetEncoding(String)\n  fullName: Encoding.GetEncoding(String)\n- uid: System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)\n  parent: System.Text.Encoding\n  isExternal: false\n  name: GetEncoding(Int32, EncoderFallback, DecoderFallback)\n  nameWithType: Encoding.GetEncoding(Int32, EncoderFallback, DecoderFallback)\n  fullName: Encoding.GetEncoding(Int32, EncoderFallback, DecoderFallback)\n- uid: System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)\n  parent: System.Text.Encoding\n  isExternal: false\n  name: GetEncoding(String, EncoderFallback, DecoderFallback)\n  nameWithType: Encoding.GetEncoding(String, EncoderFallback, DecoderFallback)\n  fullName: Encoding.GetEncoding(String, EncoderFallback, DecoderFallback)\n- uid: System.Text.Encoding.GetEncodings\n  parent: System.Text.Encoding\n  isExternal: false\n  name: GetEncodings()\n  nameWithType: Encoding.GetEncodings()\n  fullName: Encoding.GetEncodings()\n- uid: System.Text.Encoding.GetPreamble\n  parent: System.Text.Encoding\n  isExternal: false\n  name: GetPreamble()\n  nameWithType: Encoding.GetPreamble()\n  fullName: Encoding.GetPreamble()\n- uid: System.Text.Encoding.GetString(System.Byte[])\n  parent: System.Text.Encoding\n  isExternal: false\n  name: GetString(Byte[])\n  nameWithType: Encoding.GetString(Byte[])\n  fullName: Encoding.GetString(Byte[])\n- uid: System.Text.Encoding.GetString(System.Byte*,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: false\n  name: GetString(Byte*, Int32)\n  nameWithType: Encoding.GetString(Byte*, Int32)\n  fullName: Encoding.GetString(Byte*, Int32)\n- uid: System.Text.Encoding.HeaderName\n  parent: System.Text.Encoding\n  isExternal: false\n  name: HeaderName\n  nameWithType: Encoding.HeaderName\n  fullName: Encoding.HeaderName\n- uid: System.Text.Encoding.IsAlwaysNormalized\n  parent: System.Text.Encoding\n  isExternal: false\n  name: IsAlwaysNormalized()\n  nameWithType: Encoding.IsAlwaysNormalized()\n  fullName: Encoding.IsAlwaysNormalized()\n- uid: System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)\n  parent: System.Text.Encoding\n  isExternal: false\n  name: IsAlwaysNormalized(NormalizationForm)\n  nameWithType: Encoding.IsAlwaysNormalized(NormalizationForm)\n  fullName: Encoding.IsAlwaysNormalized(NormalizationForm)\n- uid: System.Text.Encoding.IsBrowserDisplay\n  parent: System.Text.Encoding\n  isExternal: false\n  name: IsBrowserDisplay\n  nameWithType: Encoding.IsBrowserDisplay\n  fullName: Encoding.IsBrowserDisplay\n- uid: System.Text.Encoding.IsBrowserSave\n  parent: System.Text.Encoding\n  isExternal: false\n  name: IsBrowserSave\n  nameWithType: Encoding.IsBrowserSave\n  fullName: Encoding.IsBrowserSave\n- uid: System.Text.Encoding.IsMailNewsDisplay\n  parent: System.Text.Encoding\n  isExternal: false\n  name: IsMailNewsDisplay\n  nameWithType: Encoding.IsMailNewsDisplay\n  fullName: Encoding.IsMailNewsDisplay\n- uid: System.Text.Encoding.IsMailNewsSave\n  parent: System.Text.Encoding\n  isExternal: false\n  name: IsMailNewsSave\n  nameWithType: Encoding.IsMailNewsSave\n  fullName: Encoding.IsMailNewsSave\n- uid: System.Text.Encoding.IsReadOnly\n  parent: System.Text.Encoding\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: Encoding.IsReadOnly\n  fullName: Encoding.IsReadOnly\n- uid: System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)\n  parent: System.Text.Encoding\n  isExternal: false\n  name: RegisterProvider(EncodingProvider)\n  nameWithType: Encoding.RegisterProvider(EncodingProvider)\n  fullName: Encoding.RegisterProvider(EncodingProvider)\n- uid: System.Text.Encoding.Unicode\n  parent: System.Text.Encoding\n  isExternal: false\n  name: Unicode\n  nameWithType: Encoding.Unicode\n  fullName: Encoding.Unicode\n- uid: System.Text.Encoding.UTF32\n  parent: System.Text.Encoding\n  isExternal: false\n  name: UTF32\n  nameWithType: Encoding.UTF32\n  fullName: Encoding.UTF32\n- uid: System.Text.Encoding.UTF7\n  parent: System.Text.Encoding\n  isExternal: false\n  name: UTF7\n  nameWithType: Encoding.UTF7\n  fullName: Encoding.UTF7\n- uid: System.Text.Encoding.UTF8\n  parent: System.Text.Encoding\n  isExternal: false\n  name: UTF8\n  nameWithType: Encoding.UTF8\n  fullName: Encoding.UTF8\n- uid: System.Text.Encoding.WebName\n  parent: System.Text.Encoding\n  isExternal: false\n  name: WebName\n  nameWithType: Encoding.WebName\n  fullName: Encoding.WebName\n- uid: System.Text.Encoding.WindowsCodePage\n  parent: System.Text.Encoding\n  isExternal: false\n  name: WindowsCodePage\n  nameWithType: Encoding.WindowsCodePage\n  fullName: Encoding.WindowsCodePage\n"}