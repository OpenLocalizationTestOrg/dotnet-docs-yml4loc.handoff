{"nodes":[{"content":"Provides common partitioning strategies for arrays, lists, and enumerables.","nodes":[{"pos":[0,75],"content":"Provides common partitioning strategies for arrays, lists, and enumerables.","nodes":[{"content":"Provides common partitioning strategies for arrays, lists, and enumerables.","pos":[0,75]}]}],"pos":[1234,1310],"yaml":true},{"content":"For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).","nodes":[{"pos":[0,145],"content":"For more information, see <bpt id=\"p1\">[</bpt>Custom Partitioners for PLINQ and TPL<ept id=\"p1\">](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)</ept>.","source":"For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)."}],"pos":[1321,1467],"yaml":true,"extradata":"MT"},{"content":"Creates a partitioner that chunks the user-specified range.","nodes":[{"pos":[0,59],"content":"Creates a partitioner that chunks the user-specified range.","nodes":[{"content":"Creates a partitioner that chunks the user-specified range.","pos":[0,59]}]}],"pos":[3420,3480],"yaml":true},{"content":"For more information and examples, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).","nodes":[{"pos":[0,158],"content":"For more information and examples, see <bpt id=\"p1\">[</bpt>Custom Partitioners for PLINQ and TPL<ept id=\"p1\">](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)</ept>.","source":"For more information and examples, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)."}],"pos":[3491,3650],"yaml":true,"extradata":"MT"},{"content":"The lower, inclusive bound of the range.","nodes":[{"pos":[0,40],"content":"The lower, inclusive bound of the range.","nodes":[{"content":"The lower, inclusive bound of the range.","pos":[0,40]}]}],"pos":[3883,3924],"yaml":true},{"content":"The upper, exclusive bound of the range.","nodes":[{"pos":[0,40],"content":"The upper, exclusive bound of the range.","nodes":[{"content":"The upper, exclusive bound of the range.","pos":[0,40]}]}],"pos":[3990,4031],"yaml":true},{"content":"A partitioner.","nodes":[{"pos":[0,14],"content":"A partitioner.","nodes":[{"content":"A partitioner.","pos":[0,14]}]}],"pos":[4166,4181],"yaml":true},{"content":"The <code>toExclusive</code> argument is less than or equal to the <code>fromInclusive</code> argument.","nodes":[{"pos":[0,103],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">toExclusive</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is less than or equal to the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">fromInclusive</ph><ept id=\"p2\">&lt;/code&gt;</ept> argument.","source":"The <code>toExclusive</code> argument is less than or equal to the <code>fromInclusive</code> argument."}],"pos":[4371,4475],"yaml":true},{"content":"Creates a partitioner that chunks the user-specified range.","nodes":[{"pos":[0,59],"content":"Creates a partitioner that chunks the user-specified range.","nodes":[{"content":"Creates a partitioner that chunks the user-specified range.","pos":[0,59]}]}],"pos":[6029,6089],"yaml":true},{"content":"For more information and examples, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).","nodes":[{"pos":[0,158],"content":"For more information and examples, see <bpt id=\"p1\">[</bpt>Custom Partitioners for PLINQ and TPL<ept id=\"p1\">](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)</ept>.","source":"For more information and examples, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)."}],"pos":[6100,6259],"yaml":true,"extradata":"MT"},{"content":"The lower, inclusive bound of the range.","nodes":[{"pos":[0,40],"content":"The lower, inclusive bound of the range.","nodes":[{"content":"The lower, inclusive bound of the range.","pos":[0,40]}]}],"pos":[6496,6537],"yaml":true},{"content":"The upper, exclusive bound of the range.","nodes":[{"pos":[0,40],"content":"The upper, exclusive bound of the range.","nodes":[{"content":"The upper, exclusive bound of the range.","pos":[0,40]}]}],"pos":[6603,6644],"yaml":true},{"content":"A partitioner.","nodes":[{"pos":[0,14],"content":"A partitioner.","nodes":[{"content":"A partitioner.","pos":[0,14]}]}],"pos":[6779,6794],"yaml":true},{"content":"The <code>toExclusive</code> argument is less than or equal to the <code>fromInclusive</code> argument.","nodes":[{"pos":[0,103],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">toExclusive</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is less than or equal to the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">fromInclusive</ph><ept id=\"p2\">&lt;/code&gt;</ept> argument.","source":"The <code>toExclusive</code> argument is less than or equal to the <code>fromInclusive</code> argument."}],"pos":[6984,7088],"yaml":true},{"content":"Creates a partitioner that chunks the user-specified range.","nodes":[{"pos":[0,59],"content":"Creates a partitioner that chunks the user-specified range.","nodes":[{"content":"Creates a partitioner that chunks the user-specified range.","pos":[0,59]}]}],"pos":[8702,8762],"yaml":true},{"content":"For more information and examples, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).","nodes":[{"pos":[0,158],"content":"For more information and examples, see <bpt id=\"p1\">[</bpt>Custom Partitioners for PLINQ and TPL<ept id=\"p1\">](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)</ept>.","source":"For more information and examples, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)."}],"pos":[8773,8932],"yaml":true,"extradata":"MT"},{"content":"The lower, inclusive bound of the range.","nodes":[{"pos":[0,40],"content":"The lower, inclusive bound of the range.","nodes":[{"content":"The lower, inclusive bound of the range.","pos":[0,40]}]}],"pos":[9180,9221],"yaml":true},{"content":"The upper, exclusive bound of the range.","nodes":[{"pos":[0,40],"content":"The upper, exclusive bound of the range.","nodes":[{"content":"The upper, exclusive bound of the range.","pos":[0,40]}]}],"pos":[9287,9328],"yaml":true},{"content":"The size of each subrange.","nodes":[{"pos":[0,26],"content":"The size of each subrange.","nodes":[{"content":"The size of each subrange.","pos":[0,26]}]}],"pos":[9392,9419],"yaml":true},{"content":"A partitioner.","nodes":[{"pos":[0,14],"content":"A partitioner.","nodes":[{"content":"A partitioner.","pos":[0,14]}]}],"pos":[9554,9569],"yaml":true},{"content":"The <code>toExclusive</code> argument is less than or equal to the <code>fromInclusive</code> argument.  \n  \n -or-  \n  \n The <code>rangeSize</code> argument is less than or equal to 0.","nodes":[{"pos":[0,103],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">toExclusive</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is less than or equal to the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">fromInclusive</ph><ept id=\"p2\">&lt;/code&gt;</ept> argument.","source":"The <code>toExclusive</code> argument is less than or equal to the <code>fromInclusive</code> argument."},{"pos":[110,114],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[121,184],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">rangeSize</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is less than or equal to 0.","source":"The <code>rangeSize</code> argument is less than or equal to 0."}],"pos":[9759,9950],"yaml":true},{"content":"Creates a partitioner that chunks the user-specified range.","nodes":[{"pos":[0,59],"content":"Creates a partitioner that chunks the user-specified range.","nodes":[{"content":"Creates a partitioner that chunks the user-specified range.","pos":[0,59]}]}],"pos":[11564,11624],"yaml":true},{"content":"For more information and examples, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).","nodes":[{"pos":[0,158],"content":"For more information and examples, see <bpt id=\"p1\">[</bpt>Custom Partitioners for PLINQ and TPL<ept id=\"p1\">](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)</ept>.","source":"For more information and examples, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)."}],"pos":[11635,11794],"yaml":true,"extradata":"MT"},{"content":"The lower, inclusive bound of the range.","nodes":[{"pos":[0,40],"content":"The lower, inclusive bound of the range.","nodes":[{"content":"The lower, inclusive bound of the range.","pos":[0,40]}]}],"pos":[12047,12088],"yaml":true},{"content":"The upper, exclusive bound of the range.","nodes":[{"pos":[0,40],"content":"The upper, exclusive bound of the range.","nodes":[{"content":"The upper, exclusive bound of the range.","pos":[0,40]}]}],"pos":[12154,12195],"yaml":true},{"content":"The size of each subrange.","nodes":[{"pos":[0,26],"content":"The size of each subrange.","nodes":[{"content":"The size of each subrange.","pos":[0,26]}]}],"pos":[12259,12286],"yaml":true},{"content":"A partitioner.","nodes":[{"pos":[0,14],"content":"A partitioner.","nodes":[{"content":"A partitioner.","pos":[0,14]}]}],"pos":[12421,12436],"yaml":true},{"content":"The <code>toExclusive</code> argument is less than or equal to the <code>fromInclusive</code> argument.  \n  \n -or-  \n  \n The <code>rangeSize</code> argument is less than or equal to 0.","nodes":[{"pos":[0,103],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">toExclusive</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is less than or equal to the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">fromInclusive</ph><ept id=\"p2\">&lt;/code&gt;</ept> argument.","source":"The <code>toExclusive</code> argument is less than or equal to the <code>fromInclusive</code> argument."},{"pos":[110,114],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[121,184],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">rangeSize</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is less than or equal to 0.","source":"The <code>rangeSize</code> argument is less than or equal to 0."}],"pos":[12626,12817],"yaml":true},{"content":"Creates an orderable partitioner from a <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> instance.","nodes":[{"pos":[0,111],"content":"Creates an orderable partitioner from a <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> instance.","source":"Creates an orderable partitioner from a <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> instance."}],"pos":[14485,14597],"yaml":true},{"content":"The ordering used in the created partitioner is determined by the natural order of the elements as retrieved from the source enumerable. For more information and examples, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).","nodes":[{"pos":[0,295],"content":"The ordering used in the created partitioner is determined by the natural order of the elements as retrieved from the source enumerable. For more information and examples, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).","nodes":[{"content":"The ordering used in the created partitioner is determined by the natural order of the elements as retrieved from the source enumerable.","pos":[0,136]},{"content":"For more information and examples, see <bpt id=\"p1\">[</bpt>Custom Partitioners for PLINQ and TPL<ept id=\"p1\">](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)</ept>.","pos":[137,295],"source":" For more information and examples, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)."}]}],"pos":[14608,14904],"yaml":true,"extradata":"MT"},{"content":"The enumerable to be partitioned.","nodes":[{"pos":[0,33],"content":"The enumerable to be partitioned.","nodes":[{"content":"The enumerable to be partitioned.","pos":[0,33]}]}],"pos":[15187,15221],"yaml":true},{"content":"Type of the elements in source enumerable.","nodes":[{"pos":[0,42],"content":"Type of the elements in source enumerable.","nodes":[{"content":"Type of the elements in source enumerable.","pos":[0,42]}]}],"pos":[15278,15321],"yaml":true},{"content":"An orderable partitioner based on the input array.","nodes":[{"pos":[0,50],"content":"An orderable partitioner based on the input array.","nodes":[{"content":"An orderable partitioner based on the input array.","pos":[0,50]}]}],"pos":[15417,15468],"yaml":true},{"content":"Creates an orderable partitioner from a <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> instance.","nodes":[{"pos":[0,111],"content":"Creates an orderable partitioner from a <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> instance.","source":"Creates an orderable partitioner from a <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> instance."}],"pos":[17485,17597],"yaml":true},{"content":"The ordering used in the created partitioner is determined by the natural order of the elements as retrieved from the source enumerable.","nodes":[{"pos":[0,136],"content":"The ordering used in the created partitioner is determined by the natural order of the elements as retrieved from the source enumerable.","nodes":[{"content":"The ordering used in the created partitioner is determined by the natural order of the elements as retrieved from the source enumerable.","pos":[0,136]}]}],"pos":[17608,17745],"yaml":true,"extradata":"MT"},{"content":"The enumerable to be partitioned.","nodes":[{"pos":[0,33],"content":"The enumerable to be partitioned.","nodes":[{"content":"The enumerable to be partitioned.","pos":[0,33]}]}],"pos":[18107,18141],"yaml":true},{"content":"Options to control the buffering behavior of the partitioner.","nodes":[{"pos":[0,61],"content":"Options to control the buffering behavior of the partitioner.","nodes":[{"content":"Options to control the buffering behavior of the partitioner.","pos":[0,61]}]}],"pos":[18260,18322],"yaml":true},{"content":"Type of the elements in source enumerable.","nodes":[{"pos":[0,42],"content":"Type of the elements in source enumerable.","nodes":[{"content":"Type of the elements in source enumerable.","pos":[0,42]}]}],"pos":[18379,18422],"yaml":true},{"content":"An orderable partitioner based on the input array.","nodes":[{"pos":[0,50],"content":"An orderable partitioner based on the input array.","nodes":[{"content":"An orderable partitioner based on the input array.","pos":[0,50]}]}],"pos":[18518,18569],"yaml":true},{"content":"The <code>partitionerOptions</code> argument specifies an invalid value for <xref href=\"System.Collections.Concurrent.EnumerablePartitionerOptions\"></xref>.","nodes":[{"pos":[0,156],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">partitionerOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid value for <ph id=\"ph2\">&lt;xref href=\"System.Collections.Concurrent.EnumerablePartitionerOptions\"&gt;&lt;/xref&gt;</ph>.","source":"The <code>partitionerOptions</code> argument specifies an invalid value for <xref href=\"System.Collections.Concurrent.EnumerablePartitionerOptions\"></xref>."}],"pos":[18762,18919],"yaml":true},{"content":"Creates an orderable partitioner from an <xref href=\"System.Collections.Generic.IList`1\"></xref> instance.","nodes":[{"pos":[0,106],"content":"Creates an orderable partitioner from an <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IList`1\"&gt;&lt;/xref&gt;</ph> instance.","source":"Creates an orderable partitioner from an <xref href=\"System.Collections.Generic.IList`1\"></xref> instance."}],"pos":[20623,20730],"yaml":true},{"content":"For more information and examples, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).","nodes":[{"pos":[0,158],"content":"For more information and examples, see <bpt id=\"p1\">[</bpt>Custom Partitioners for PLINQ and TPL<ept id=\"p1\">](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)</ept>.","source":"For more information and examples, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)."}],"pos":[20741,20900],"yaml":true,"extradata":"MT"},{"content":"The list to be partitioned.","nodes":[{"pos":[0,27],"content":"The list to be partitioned.","nodes":[{"content":"The list to be partitioned.","pos":[0,27]}]}],"pos":[21185,21213],"yaml":true},{"content":"A Boolean value that indicates whether the created partitioner should dynamically load balance between partitions rather than statically partition.","nodes":[{"pos":[0,147],"content":"A Boolean value that indicates whether the created partitioner should dynamically load balance between partitions rather than statically partition.","nodes":[{"content":"A Boolean value that indicates whether the created partitioner should dynamically load balance between partitions rather than statically partition.","pos":[0,147]}]}],"pos":[21281,21429],"yaml":true},{"content":"Type of the elements in source list.","nodes":[{"pos":[0,36],"content":"Type of the elements in source list.","nodes":[{"content":"Type of the elements in source list.","pos":[0,36]}]}],"pos":[21486,21523],"yaml":true},{"content":"An orderable partitioner based on the input list.","nodes":[{"pos":[0,49],"content":"An orderable partitioner based on the input list.","nodes":[{"content":"An orderable partitioner based on the input list.","pos":[0,49]}]}],"pos":[21619,21669],"yaml":true},{"content":"Creates an orderable partitioner from a <xref href=\"System.Array\"></xref> instance.","nodes":[{"pos":[0,83],"content":"Creates an orderable partitioner from a <ph id=\"ph1\">&lt;xref href=\"System.Array\"&gt;&lt;/xref&gt;</ph> instance.","source":"Creates an orderable partitioner from a <xref href=\"System.Array\"></xref> instance."}],"pos":[23344,23428],"yaml":true},{"content":"For more information and examples, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).","nodes":[{"pos":[0,158],"content":"For more information and examples, see <bpt id=\"p1\">[</bpt>Custom Partitioners for PLINQ and TPL<ept id=\"p1\">](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)</ept>.","source":"For more information and examples, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)."}],"pos":[23439,23598],"yaml":true,"extradata":"MT"},{"content":"The array to be partitioned.","nodes":[{"pos":[0,28],"content":"The array to be partitioned.","nodes":[{"content":"The array to be partitioned.","pos":[0,28]}]}],"pos":[23821,23850],"yaml":true},{"content":"A Boolean value that indicates whether the created partitioner should dynamically load balance between partitions rather than statically partition.","nodes":[{"pos":[0,147],"content":"A Boolean value that indicates whether the created partitioner should dynamically load balance between partitions rather than statically partition.","nodes":[{"content":"A Boolean value that indicates whether the created partitioner should dynamically load balance between partitions rather than statically partition.","pos":[0,147]}]}],"pos":[23918,24066],"yaml":true},{"content":"Type of the elements in source array.","nodes":[{"pos":[0,37],"content":"Type of the elements in source array.","nodes":[{"content":"Type of the elements in source array.","pos":[0,37]}]}],"pos":[24123,24161],"yaml":true},{"content":"An orderable partitioner based on the input array.","nodes":[{"pos":[0,50],"content":"An orderable partitioner based on the input array.","nodes":[{"content":"An orderable partitioner based on the input array.","pos":[0,50]}]}],"pos":[24257,24308],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Collections.Concurrent.Partitioner\n  commentId: T:System.Collections.Concurrent.Partitioner\n  id: Partitioner\n  children:\n  - System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32)\n  - System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64)\n  - System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32,System.Int32)\n  - System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64,System.Int64)\n  - System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Concurrent.EnumerablePartitionerOptions)\n  - System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IList{``0},System.Boolean)\n  - System.Collections.Concurrent.Partitioner.Create``1(``0[],System.Boolean)\n  langs:\n  - csharp\n  name: Partitioner\n  nameWithType: Partitioner\n  fullName: System.Collections.Concurrent.Partitioner\n  type: Class\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Provides common partitioning strategies for arrays, lists, and enumerables.\n  remarks: For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).\n  syntax:\n    content: public static class Partitioner\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/Partitioner.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32)\n  commentId: M:System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32)\n  id: Create(System.Int32,System.Int32)\n  parent: System.Collections.Concurrent.Partitioner\n  langs:\n  - csharp\n  name: Create(Int32, Int32)\n  nameWithType: Partitioner.Create(Int32, Int32)\n  fullName: Partitioner.Create(Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Creates a partitioner that chunks the user-specified range.\n  remarks: For more information and examples, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).\n  syntax:\n    content: public static System.Collections.Concurrent.OrderablePartitioner<Tuple<int,int>> Create (int fromInclusive, int toExclusive);\n    parameters:\n    - id: fromInclusive\n      type: System.Int32\n      description: The lower, inclusive bound of the range.\n    - id: toExclusive\n      type: System.Int32\n      description: The upper, exclusive bound of the range.\n    return:\n      type: System.Collections.Concurrent.OrderablePartitioner{System.Tuple{System.Int32,System.Int32}}\n      description: A partitioner.\n  overload: System.Collections.Concurrent.Partitioner.Create*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>toExclusive</code> argument is less than or equal to the <code>fromInclusive</code> argument.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/Partitioner.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64)\n  commentId: M:System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64)\n  id: Create(System.Int64,System.Int64)\n  parent: System.Collections.Concurrent.Partitioner\n  langs:\n  - csharp\n  name: Create(Int64, Int64)\n  nameWithType: Partitioner.Create(Int64, Int64)\n  fullName: Partitioner.Create(Int64, Int64)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Creates a partitioner that chunks the user-specified range.\n  remarks: For more information and examples, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).\n  syntax:\n    content: public static System.Collections.Concurrent.OrderablePartitioner<Tuple<long,long>> Create (long fromInclusive, long toExclusive);\n    parameters:\n    - id: fromInclusive\n      type: System.Int64\n      description: The lower, inclusive bound of the range.\n    - id: toExclusive\n      type: System.Int64\n      description: The upper, exclusive bound of the range.\n    return:\n      type: System.Collections.Concurrent.OrderablePartitioner{System.Tuple{System.Int64,System.Int64}}\n      description: A partitioner.\n  overload: System.Collections.Concurrent.Partitioner.Create*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>toExclusive</code> argument is less than or equal to the <code>fromInclusive</code> argument.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/Partitioner.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32,System.Int32)\n  commentId: M:System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32,System.Int32)\n  id: Create(System.Int32,System.Int32,System.Int32)\n  parent: System.Collections.Concurrent.Partitioner\n  langs:\n  - csharp\n  name: Create(Int32, Int32, Int32)\n  nameWithType: Partitioner.Create(Int32, Int32, Int32)\n  fullName: Partitioner.Create(Int32, Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Creates a partitioner that chunks the user-specified range.\n  remarks: For more information and examples, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).\n  syntax:\n    content: public static System.Collections.Concurrent.OrderablePartitioner<Tuple<int,int>> Create (int fromInclusive, int toExclusive, int rangeSize);\n    parameters:\n    - id: fromInclusive\n      type: System.Int32\n      description: The lower, inclusive bound of the range.\n    - id: toExclusive\n      type: System.Int32\n      description: The upper, exclusive bound of the range.\n    - id: rangeSize\n      type: System.Int32\n      description: The size of each subrange.\n    return:\n      type: System.Collections.Concurrent.OrderablePartitioner{System.Tuple{System.Int32,System.Int32}}\n      description: A partitioner.\n  overload: System.Collections.Concurrent.Partitioner.Create*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"The <code>toExclusive</code> argument is less than or equal to the <code>fromInclusive</code> argument.  \\n  \\n -or-  \\n  \\n The <code>rangeSize</code> argument is less than or equal to 0.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/Partitioner.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64,System.Int64)\n  commentId: M:System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64,System.Int64)\n  id: Create(System.Int64,System.Int64,System.Int64)\n  parent: System.Collections.Concurrent.Partitioner\n  langs:\n  - csharp\n  name: Create(Int64, Int64, Int64)\n  nameWithType: Partitioner.Create(Int64, Int64, Int64)\n  fullName: Partitioner.Create(Int64, Int64, Int64)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Creates a partitioner that chunks the user-specified range.\n  remarks: For more information and examples, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).\n  syntax:\n    content: public static System.Collections.Concurrent.OrderablePartitioner<Tuple<long,long>> Create (long fromInclusive, long toExclusive, long rangeSize);\n    parameters:\n    - id: fromInclusive\n      type: System.Int64\n      description: The lower, inclusive bound of the range.\n    - id: toExclusive\n      type: System.Int64\n      description: The upper, exclusive bound of the range.\n    - id: rangeSize\n      type: System.Int64\n      description: The size of each subrange.\n    return:\n      type: System.Collections.Concurrent.OrderablePartitioner{System.Tuple{System.Int64,System.Int64}}\n      description: A partitioner.\n  overload: System.Collections.Concurrent.Partitioner.Create*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"The <code>toExclusive</code> argument is less than or equal to the <code>fromInclusive</code> argument.  \\n  \\n -or-  \\n  \\n The <code>rangeSize</code> argument is less than or equal to 0.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/Partitioner.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IEnumerable{``0})\n  id: Create``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Collections.Concurrent.Partitioner\n  langs:\n  - csharp\n  name: Create<TSource>(IEnumerable<TSource>)\n  nameWithType: Partitioner.Create<TSource>(IEnumerable<TSource>)\n  fullName: Partitioner.Create<TSource>(IEnumerable<TSource>)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Creates an orderable partitioner from a <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> instance.\n  remarks: The ordering used in the created partitioner is determined by the natural order of the elements as retrieved from the source enumerable. For more information and examples, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).\n  syntax:\n    content: public static System.Collections.Concurrent.OrderablePartitioner<TSource> Create<TSource> (System.Collections.Generic.IEnumerable<TSource> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: The enumerable to be partitioned.\n    typeParameters:\n    - id: TSource\n      description: Type of the elements in source enumerable.\n    return:\n      type: System.Collections.Concurrent.OrderablePartitioner`1\n      description: An orderable partitioner based on the input array.\n  overload: System.Collections.Concurrent.Partitioner.Create``1*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/Partitioner.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Concurrent.EnumerablePartitionerOptions)\n  commentId: M:System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Concurrent.EnumerablePartitionerOptions)\n  id: Create``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Concurrent.EnumerablePartitionerOptions)\n  parent: System.Collections.Concurrent.Partitioner\n  langs:\n  - csharp\n  name: Create<TSource>(IEnumerable<TSource>, EnumerablePartitionerOptions)\n  nameWithType: Partitioner.Create<TSource>(IEnumerable<TSource>, EnumerablePartitionerOptions)\n  fullName: Partitioner.Create<TSource>(IEnumerable<TSource>, EnumerablePartitionerOptions)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Creates an orderable partitioner from a <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> instance.\n  remarks: The ordering used in the created partitioner is determined by the natural order of the elements as retrieved from the source enumerable.\n  syntax:\n    content: public static System.Collections.Concurrent.OrderablePartitioner<TSource> Create<TSource> (System.Collections.Generic.IEnumerable<TSource> source, System.Collections.Concurrent.EnumerablePartitionerOptions partitionerOptions);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: The enumerable to be partitioned.\n    - id: partitionerOptions\n      type: System.Collections.Concurrent.EnumerablePartitionerOptions\n      description: Options to control the buffering behavior of the partitioner.\n    typeParameters:\n    - id: TSource\n      description: Type of the elements in source enumerable.\n    return:\n      type: System.Collections.Concurrent.OrderablePartitioner`1\n      description: An orderable partitioner based on the input array.\n  overload: System.Collections.Concurrent.Partitioner.Create``1*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>partitionerOptions</code> argument specifies an invalid value for <xref href=\"System.Collections.Concurrent.EnumerablePartitionerOptions\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/Partitioner.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IList{``0},System.Boolean)\n  commentId: M:System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IList{``0},System.Boolean)\n  id: Create``1(System.Collections.Generic.IList{``0},System.Boolean)\n  parent: System.Collections.Concurrent.Partitioner\n  langs:\n  - csharp\n  name: Create<TSource>(IList<TSource>, Boolean)\n  nameWithType: Partitioner.Create<TSource>(IList<TSource>, Boolean)\n  fullName: Partitioner.Create<TSource>(IList<TSource>, Boolean)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Creates an orderable partitioner from an <xref href=\"System.Collections.Generic.IList`1\"></xref> instance.\n  remarks: For more information and examples, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).\n  syntax:\n    content: public static System.Collections.Concurrent.OrderablePartitioner<TSource> Create<TSource> (System.Collections.Generic.IList<TSource> list, bool loadBalance);\n    parameters:\n    - id: list\n      type: System.Collections.Generic.IList{TSource}\n      description: The list to be partitioned.\n    - id: loadBalance\n      type: System.Boolean\n      description: A Boolean value that indicates whether the created partitioner should dynamically load balance between partitions rather than statically partition.\n    typeParameters:\n    - id: TSource\n      description: Type of the elements in source list.\n    return:\n      type: System.Collections.Concurrent.OrderablePartitioner`1\n      description: An orderable partitioner based on the input list.\n  overload: System.Collections.Concurrent.Partitioner.Create``1*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/Partitioner.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.Partitioner.Create``1(``0[],System.Boolean)\n  commentId: M:System.Collections.Concurrent.Partitioner.Create``1(``0[],System.Boolean)\n  id: Create``1(``0[],System.Boolean)\n  parent: System.Collections.Concurrent.Partitioner\n  langs:\n  - csharp\n  name: Create<TSource>(TSource[], Boolean)\n  nameWithType: Partitioner.Create<TSource>(TSource[], Boolean)\n  fullName: Partitioner.Create<TSource>(TSource[], Boolean)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Creates an orderable partitioner from a <xref href=\"System.Array\"></xref> instance.\n  remarks: For more information and examples, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).\n  syntax:\n    content: public static System.Collections.Concurrent.OrderablePartitioner<TSource> Create<TSource> (TSource[] array, bool loadBalance);\n    parameters:\n    - id: array\n      type: TSource[]\n      description: The array to be partitioned.\n    - id: loadBalance\n      type: System.Boolean\n      description: A Boolean value that indicates whether the created partitioner should dynamically load balance between partitions rather than statically partition.\n    typeParameters:\n    - id: TSource\n      description: Type of the elements in source array.\n    return:\n      type: System.Collections.Concurrent.OrderablePartitioner`1\n      description: An orderable partitioner based on the input array.\n  overload: System.Collections.Concurrent.Partitioner.Create``1*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/Partitioner.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32)\n  parent: System.Collections.Concurrent.Partitioner\n  isExternal: false\n  name: Create(Int32, Int32)\n  nameWithType: Partitioner.Create(Int32, Int32)\n  fullName: Partitioner.Create(Int32, Int32)\n- uid: System.Collections.Concurrent.OrderablePartitioner`1\n  name: OrderablePartitioner<TSource>\n  nameWithType: OrderablePartitioner<TSource>\n  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>\n- uid: System.Tuple`2\n  name: Tuple<T1,T2>\n  nameWithType: Tuple<T1,T2>\n  fullName: System.Tuple<T1,T2>\n- uid: System.Int32\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Concurrent.OrderablePartitioner{System.Tuple{System.Int32,System.Int32}}\n  parent: System.Collections.Concurrent\n  isExternal: false\n  name: OrderablePartitioner<Tuple<Int32,Int32>>\n  nameWithType: OrderablePartitioner<Tuple<Int32,Int32>>\n  fullName: System.Collections.Concurrent.OrderablePartitioner<System.Tuple<System.Int32,System.Int32>>\n  spec.csharp:\n  - uid: System.Collections.Concurrent.OrderablePartitioner`1\n    name: OrderablePartitioner\n    nameWithType: OrderablePartitioner\n    fullName: System.Collections.Concurrent.OrderablePartitioner\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Tuple`2\n    name: Tuple\n    nameWithType: Tuple\n    fullName: System.Tuple\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64)\n  parent: System.Collections.Concurrent.Partitioner\n  isExternal: false\n  name: Create(Int64, Int64)\n  nameWithType: Partitioner.Create(Int64, Int64)\n  fullName: Partitioner.Create(Int64, Int64)\n- uid: System.Int64\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.Collections.Concurrent.OrderablePartitioner{System.Tuple{System.Int64,System.Int64}}\n  parent: System.Collections.Concurrent\n  isExternal: false\n  name: OrderablePartitioner<Tuple<Int64,Int64>>\n  nameWithType: OrderablePartitioner<Tuple<Int64,Int64>>\n  fullName: System.Collections.Concurrent.OrderablePartitioner<System.Tuple<System.Int64,System.Int64>>\n  spec.csharp:\n  - uid: System.Collections.Concurrent.OrderablePartitioner`1\n    name: OrderablePartitioner\n    nameWithType: OrderablePartitioner\n    fullName: System.Collections.Concurrent.OrderablePartitioner\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Tuple`2\n    name: Tuple\n    nameWithType: Tuple\n    fullName: System.Tuple\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Int64\n    name: Int64\n    nameWithType: Int64\n    fullName: System.Int64\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Int64\n    name: Int64\n    nameWithType: Int64\n    fullName: System.Int64\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32,System.Int32)\n  parent: System.Collections.Concurrent.Partitioner\n  isExternal: false\n  name: Create(Int32, Int32, Int32)\n  nameWithType: Partitioner.Create(Int32, Int32, Int32)\n  fullName: Partitioner.Create(Int32, Int32, Int32)\n- uid: System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64,System.Int64)\n  parent: System.Collections.Concurrent.Partitioner\n  isExternal: false\n  name: Create(Int64, Int64, Int64)\n  nameWithType: Partitioner.Create(Int64, Int64, Int64)\n  fullName: Partitioner.Create(Int64, Int64, Int64)\n- uid: System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Collections.Concurrent.Partitioner\n  isExternal: false\n  name: Create<TSource>(IEnumerable<TSource>)\n  nameWithType: Partitioner.Create<TSource>(IEnumerable<TSource>)\n  fullName: Partitioner.Create<TSource>(IEnumerable<TSource>)\n- uid: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<T>\n  nameWithType: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n- uid: TSource\n  name: TSource\n  nameWithType: TSource\n  fullName: TSource\n- uid: System.Collections.Generic.IEnumerable{TSource}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<TSource>\n  nameWithType: IEnumerable<TSource>\n  fullName: System.Collections.Generic.IEnumerable<TSource>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Concurrent.EnumerablePartitionerOptions)\n  parent: System.Collections.Concurrent.Partitioner\n  isExternal: false\n  name: Create<TSource>(IEnumerable<TSource>, EnumerablePartitionerOptions)\n  nameWithType: Partitioner.Create<TSource>(IEnumerable<TSource>, EnumerablePartitionerOptions)\n  fullName: Partitioner.Create<TSource>(IEnumerable<TSource>, EnumerablePartitionerOptions)\n- uid: System.Collections.Concurrent.EnumerablePartitionerOptions\n  parent: System.Collections.Concurrent\n  isExternal: false\n  name: EnumerablePartitionerOptions\n  nameWithType: EnumerablePartitionerOptions\n  fullName: System.Collections.Concurrent.EnumerablePartitionerOptions\n- uid: System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IList{``0},System.Boolean)\n  parent: System.Collections.Concurrent.Partitioner\n  isExternal: false\n  name: Create<TSource>(IList<TSource>, Boolean)\n  nameWithType: Partitioner.Create<TSource>(IList<TSource>, Boolean)\n  fullName: Partitioner.Create<TSource>(IList<TSource>, Boolean)\n- uid: System.Collections.Generic.IList`1\n  name: IList<T>\n  nameWithType: IList<T>\n  fullName: System.Collections.Generic.IList<T>\n- uid: System.Collections.Generic.IList{TSource}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IList<TSource>\n  nameWithType: IList<TSource>\n  fullName: System.Collections.Generic.IList<TSource>\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1\n    name: IList\n    nameWithType: IList\n    fullName: System.Collections.Generic.IList\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.Concurrent.Partitioner.Create``1(``0[],System.Boolean)\n  parent: System.Collections.Concurrent.Partitioner\n  isExternal: false\n  name: Create<TSource>(TSource[], Boolean)\n  nameWithType: Partitioner.Create<TSource>(TSource[], Boolean)\n  fullName: Partitioner.Create<TSource>(TSource[], Boolean)\n- uid: TSource[]\n  isExternal: true\n  name: TSource[]\n  nameWithType: TSource[]\n  fullName: TSource[]\n  spec.csharp:\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Collections.Concurrent.Partitioner.Create*\n  parent: System.Collections.Concurrent.Partitioner\n  isExternal: false\n  name: Create\n  nameWithType: Partitioner.Create\n  fullName: Partitioner.Create\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/Partitioner.xml\n- uid: System.Collections.Concurrent.Partitioner.Create``1*\n  parent: System.Collections.Concurrent.Partitioner\n  isExternal: false\n  name: Create<TSource>\n  nameWithType: Partitioner.Create<TSource>\n  fullName: Partitioner.Create<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/Partitioner.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}