{"nodes":[{"content":"Represents a design-time editor sheet for a custom expression. This class must be inherited.","nodes":[{"pos":[0,92],"content":"Represents a design-time editor sheet for a custom expression. This class must be inherited.","nodes":[{"content":"Represents a design-time editor sheet for a custom expression. This class must be inherited.","pos":[0,92],"nodes":[{"content":"Represents a design-time editor sheet for a custom expression.","pos":[0,62]},{"content":"This class must be inherited.","pos":[63,92]}]}]}],"pos":[675,768],"yaml":true},{"content":"A custom expression editor sheet lets a developer set properties on a custom expression at design-time. Control property values can be set using expression strings; the expression strings are evaluated at run time by an expression builder and at design time by an expression editor.  \n  \n When you browse the <xref:System.Web.UI.Design.HtmlControlDesigner.Expressions%2A> property for a control in the design-time properties grid, the visual designer displays a dialog box to set expressions that provide the value for a control property. You can select the expression type based on a list of expression prefixes. When you select an expression prefix from the list, the visual designer uses the associated <xref:System.Web.UI.Design.ExpressionEditor> and <xref:System.Web.UI.Design.ExpressionEditorSheet> objects to evaluate and convert the expression string based on the syntax for that type of expression. The visual designer uses expression editor sheet properties to prompt for one or more strings that combine into the custom expression string.  \n  \n Typically, to supply a new expression type at design time, you define a unique expression prefix and provide custom <xref:System.Web.Compilation.ExpressionBuilder> and <xref:System.Web.UI.Design.ExpressionEditor> implementations. Optionally, you can provide a custom <xref:System.Web.UI.Design.ExpressionEditorSheet> implementation that defines properties that are used to form the expression. To associate an expression prefix with an expression builder and an expression editor, apply the <xref:System.Web.Compilation.ExpressionEditorAttribute> attribute and an <xref:System.Web.Compilation.ExpressionPrefixAttribute> attribute to the custom <xref:System.Web.Configuration.ExpressionBuilder> class, and then configure the expression prefix for an expression builder in the `expressionBuilders` element in the Web configuration file.  \n  \n The default implementation of the <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> method returns a basic editor sheet, which uses a single input string to form the expression. Custom expression editors that are derived from the <xref:System.Web.UI.Design.ExpressionEditor> can override the <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> method to return a custom editor sheet implementation. Typically, a custom editor sheet contains multiple properties that are used to build the expression string. The <xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A> method returns the resulting expression string based on the current expression properties.  \n  \n For example, the <xref:System.Web.UI.Design.ResourceExpressionEditor> class derives from the <xref:System.Web.UI.Design.ExpressionEditor> class and provides an implementation for evaluating and associating a resource string reference with a control property at design time. The <xref:System.Web.Compilation.ResourceExpressionBuilder> class is associated with the expression prefix `Resources` and the <xref:System.Web.UI.Design.ResourceExpressionEditor> implementation. The <xref:System.Web.UI.Design.ResourceExpressionEditor.GetExpressionEditorSheet%2A> method returns a <xref:System.Web.UI.Design.ResourceExpressionEditorSheet>, which defines the individual properties that form a resource reference expression.  \n  \n When you inherit from the <xref:System.Web.UI.Design.ExpressionEditorSheet> class, you must override the following members:  \n  \n-   The <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> method to return a custom editor sheet implementation.  \n  \n-   The <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A> constructor to implement custom initialization actions for your expression editor sheet implementation.","nodes":[{"pos":[0,282],"content":"A custom expression editor sheet lets a developer set properties on a custom expression at design-time. Control property values can be set using expression strings; the expression strings are evaluated at run time by an expression builder and at design time by an expression editor.","nodes":[{"content":"A custom expression editor sheet lets a developer set properties on a custom expression at design-time. Control property values can be set using expression strings; the expression strings are evaluated at run time by an expression builder and at design time by an expression editor.","pos":[0,282],"nodes":[{"content":"A custom expression editor sheet lets a developer set properties on a custom expression at design-time.","pos":[0,103]},{"content":"Control property values can be set using expression strings; the expression strings are evaluated at run time by an expression builder and at design time by an expression editor.","pos":[104,282]}]}]},{"pos":[289,1049],"content":"When you browse the <xref:System.Web.UI.Design.HtmlControlDesigner.Expressions%2A> property for a control in the design-time properties grid, the visual designer displays a dialog box to set expressions that provide the value for a control property. You can select the expression type based on a list of expression prefixes. When you select an expression prefix from the list, the visual designer uses the associated <xref:System.Web.UI.Design.ExpressionEditor> and <xref:System.Web.UI.Design.ExpressionEditorSheet> objects to evaluate and convert the expression string based on the syntax for that type of expression. The visual designer uses expression editor sheet properties to prompt for one or more strings that combine into the custom expression string.","nodes":[{"content":"When you browse the <xref:System.Web.UI.Design.HtmlControlDesigner.Expressions%2A> property for a control in the design-time properties grid, the visual designer displays a dialog box to set expressions that provide the value for a control property. You can select the expression type based on a list of expression prefixes. When you select an expression prefix from the list, the visual designer uses the associated <xref:System.Web.UI.Design.ExpressionEditor> and <xref:System.Web.UI.Design.ExpressionEditorSheet> objects to evaluate and convert the expression string based on the syntax for that type of expression. The visual designer uses expression editor sheet properties to prompt for one or more strings that combine into the custom expression string.","pos":[0,760],"nodes":[{"content":"When you browse the <ph id=\"ph1\">&lt;xref:System.Web.UI.Design.HtmlControlDesigner.Expressions%2A&gt;</ph> property for a control in the design-time properties grid, the visual designer displays a dialog box to set expressions that provide the value for a control property.","pos":[0,249],"source":"When you browse the <xref:System.Web.UI.Design.HtmlControlDesigner.Expressions%2A> property for a control in the design-time properties grid, the visual designer displays a dialog box to set expressions that provide the value for a control property."},{"content":"You can select the expression type based on a list of expression prefixes.","pos":[250,324]},{"content":"When you select an expression prefix from the list, the visual designer uses the associated <ph id=\"ph1\">&lt;xref:System.Web.UI.Design.ExpressionEditor&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Web.UI.Design.ExpressionEditorSheet&gt;</ph> objects to evaluate and convert the expression string based on the syntax for that type of expression.","pos":[325,618],"source":" When you select an expression prefix from the list, the visual designer uses the associated <xref:System.Web.UI.Design.ExpressionEditor> and <xref:System.Web.UI.Design.ExpressionEditorSheet> objects to evaluate and convert the expression string based on the syntax for that type of expression."},{"content":"The visual designer uses expression editor sheet properties to prompt for one or more strings that combine into the custom expression string.","pos":[619,760]}]}]},{"pos":[1056,1890],"content":"Typically, to supply a new expression type at design time, you define a unique expression prefix and provide custom <xref:System.Web.Compilation.ExpressionBuilder> and <xref:System.Web.UI.Design.ExpressionEditor> implementations. Optionally, you can provide a custom <xref:System.Web.UI.Design.ExpressionEditorSheet> implementation that defines properties that are used to form the expression. To associate an expression prefix with an expression builder and an expression editor, apply the <xref:System.Web.Compilation.ExpressionEditorAttribute> attribute and an <xref:System.Web.Compilation.ExpressionPrefixAttribute> attribute to the custom <xref:System.Web.Configuration.ExpressionBuilder> class, and then configure the expression prefix for an expression builder in the `expressionBuilders` element in the Web configuration file.","nodes":[{"content":"Typically, to supply a new expression type at design time, you define a unique expression prefix and provide custom <ph id=\"ph1\">&lt;xref:System.Web.Compilation.ExpressionBuilder&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Web.UI.Design.ExpressionEditor&gt;</ph> implementations.","pos":[0,229],"source":"Typically, to supply a new expression type at design time, you define a unique expression prefix and provide custom <xref:System.Web.Compilation.ExpressionBuilder> and <xref:System.Web.UI.Design.ExpressionEditor> implementations."},{"content":"Optionally, you can provide a custom <ph id=\"ph1\">&lt;xref:System.Web.UI.Design.ExpressionEditorSheet&gt;</ph> implementation that defines properties that are used to form the expression.","pos":[230,393],"source":" Optionally, you can provide a custom <xref:System.Web.UI.Design.ExpressionEditorSheet> implementation that defines properties that are used to form the expression."},{"content":"To associate an expression prefix with an expression builder and an expression editor, apply the <ph id=\"ph1\">&lt;xref:System.Web.Compilation.ExpressionEditorAttribute&gt;</ph> attribute and an <ph id=\"ph2\">&lt;xref:System.Web.Compilation.ExpressionPrefixAttribute&gt;</ph> attribute to the custom <ph id=\"ph3\">&lt;xref:System.Web.Configuration.ExpressionBuilder&gt;</ph> class, and then configure the expression prefix for an expression builder in the <ph id=\"ph4\">`expressionBuilders`</ph> element in the Web configuration file.","pos":[394,834],"source":" To associate an expression prefix with an expression builder and an expression editor, apply the <xref:System.Web.Compilation.ExpressionEditorAttribute> attribute and an <xref:System.Web.Compilation.ExpressionPrefixAttribute> attribute to the custom <xref:System.Web.Configuration.ExpressionBuilder> class, and then configure the expression prefix for an expression builder in the `expressionBuilders` element in the Web configuration file."}]},{"pos":[1897,2609],"content":"The default implementation of the <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> method returns a basic editor sheet, which uses a single input string to form the expression. Custom expression editors that are derived from the <xref:System.Web.UI.Design.ExpressionEditor> can override the <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> method to return a custom editor sheet implementation. Typically, a custom editor sheet contains multiple properties that are used to build the expression string. The <xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A> method returns the resulting expression string based on the current expression properties.","nodes":[{"content":"The default implementation of the <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> method returns a basic editor sheet, which uses a single input string to form the expression. Custom expression editors that are derived from the <xref:System.Web.UI.Design.ExpressionEditor> can override the <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> method to return a custom editor sheet implementation. Typically, a custom editor sheet contains multiple properties that are used to build the expression string. The <xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A> method returns the resulting expression string based on the current expression properties.","pos":[0,712],"nodes":[{"content":"The default implementation of the <ph id=\"ph1\">&lt;xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A&gt;</ph> method returns a basic editor sheet, which uses a single input string to form the expression.","pos":[0,200],"source":"The default implementation of the <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> method returns a basic editor sheet, which uses a single input string to form the expression."},{"content":"Custom expression editors that are derived from the <ph id=\"ph1\">&lt;xref:System.Web.UI.Design.ExpressionEditor&gt;</ph> can override the <ph id=\"ph2\">&lt;xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A&gt;</ph> method to return a custom editor sheet implementation.","pos":[201,442],"source":" Custom expression editors that are derived from the <xref:System.Web.UI.Design.ExpressionEditor> can override the <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> method to return a custom editor sheet implementation."},{"content":"Typically, a custom editor sheet contains multiple properties that are used to build the expression string.","pos":[443,550]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A&gt;</ph> method returns the resulting expression string based on the current expression properties.","pos":[551,712],"source":" The <xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A> method returns the resulting expression string based on the current expression properties."}]}]},{"pos":[2616,3329],"content":"For example, the <xref:System.Web.UI.Design.ResourceExpressionEditor> class derives from the <xref:System.Web.UI.Design.ExpressionEditor> class and provides an implementation for evaluating and associating a resource string reference with a control property at design time. The <xref:System.Web.Compilation.ResourceExpressionBuilder> class is associated with the expression prefix `Resources` and the <xref:System.Web.UI.Design.ResourceExpressionEditor> implementation. The <xref:System.Web.UI.Design.ResourceExpressionEditor.GetExpressionEditorSheet%2A> method returns a <xref:System.Web.UI.Design.ResourceExpressionEditorSheet>, which defines the individual properties that form a resource reference expression.","nodes":[{"content":"For example, the <ph id=\"ph1\">&lt;xref:System.Web.UI.Design.ResourceExpressionEditor&gt;</ph> class derives from the <ph id=\"ph2\">&lt;xref:System.Web.UI.Design.ExpressionEditor&gt;</ph> class and provides an implementation for evaluating and associating a resource string reference with a control property at design time.","pos":[0,273],"source":"For example, the <xref:System.Web.UI.Design.ResourceExpressionEditor> class derives from the <xref:System.Web.UI.Design.ExpressionEditor> class and provides an implementation for evaluating and associating a resource string reference with a control property at design time."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.Compilation.ResourceExpressionBuilder&gt;</ph> class is associated with the expression prefix <ph id=\"ph2\">`Resources`</ph> and the <ph id=\"ph3\">&lt;xref:System.Web.UI.Design.ResourceExpressionEditor&gt;</ph> implementation.","pos":[274,469],"source":" The <xref:System.Web.Compilation.ResourceExpressionBuilder> class is associated with the expression prefix `Resources` and the <xref:System.Web.UI.Design.ResourceExpressionEditor> implementation."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.UI.Design.ResourceExpressionEditor.GetExpressionEditorSheet%2A&gt;</ph> method returns a <ph id=\"ph2\">&lt;xref:System.Web.UI.Design.ResourceExpressionEditorSheet&gt;</ph>, which defines the individual properties that form a resource reference expression.","pos":[470,713],"source":" The <xref:System.Web.UI.Design.ResourceExpressionEditor.GetExpressionEditorSheet%2A> method returns a <xref:System.Web.UI.Design.ResourceExpressionEditorSheet>, which defines the individual properties that form a resource reference expression."}]},{"pos":[3336,3459],"content":"When you inherit from the <xref:System.Web.UI.Design.ExpressionEditorSheet> class, you must override the following members:","nodes":[{"content":"When you inherit from the <ph id=\"ph1\">&lt;xref:System.Web.UI.Design.ExpressionEditorSheet&gt;</ph> class, you must override the following members:","pos":[0,123],"source":"When you inherit from the <xref:System.Web.UI.Design.ExpressionEditorSheet> class, you must override the following members:"}]},{"pos":[3469,3600],"content":"The <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> method to return a custom editor sheet implementation.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A&gt;</ph> method to return a custom editor sheet implementation.","pos":[0,131],"source":"The <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> method to return a custom editor sheet implementation."}]},{"pos":[3610,3778],"content":"The <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A> constructor to implement custom initialization actions for your expression editor sheet implementation.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A&gt;</ph> constructor to implement custom initialization actions for your expression editor sheet implementation.","pos":[0,168],"source":"The <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A> constructor to implement custom initialization actions for your expression editor sheet implementation."}]}],"pos":[779,4574],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Web.UI.Design.ExpressionEditorSheet\"></xref> class.","nodes":[{"pos":[0,104],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Web.UI.Design.ExpressionEditorSheet\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Web.UI.Design.ExpressionEditorSheet\"></xref> class."}],"pos":[6272,6377],"yaml":true},{"content":"Because the <xref:System.Web.UI.Design.ExpressionEditorSheet> class is abstract, you cannot create an instance of an <xref:System.Web.UI.Design.ExpressionEditorSheet> directly using the <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A> constructor.","nodes":[{"pos":[0,259],"content":"Because the <xref:System.Web.UI.Design.ExpressionEditorSheet> class is abstract, you cannot create an instance of an <xref:System.Web.UI.Design.ExpressionEditorSheet> directly using the <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A> constructor.","nodes":[{"content":"Because the <ph id=\"ph1\">&lt;xref:System.Web.UI.Design.ExpressionEditorSheet&gt;</ph> class is abstract, you cannot create an instance of an <ph id=\"ph2\">&lt;xref:System.Web.UI.Design.ExpressionEditorSheet&gt;</ph> directly using the <ph id=\"ph3\">&lt;xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A&gt;</ph> constructor.","pos":[0,259],"source":"Because the <xref:System.Web.UI.Design.ExpressionEditorSheet> class is abstract, you cannot create an instance of an <xref:System.Web.UI.Design.ExpressionEditorSheet> directly using the <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A> constructor."}]}],"pos":[6388,6648],"yaml":true,"extradata":"MT"},{"content":"A service provider implementation supplied by the designer host, used to obtain additional design-time services.","nodes":[{"pos":[0,112],"content":"A service provider implementation supplied by the designer host, used to obtain additional design-time services.","nodes":[{"content":"A service provider implementation supplied by the designer host, used to obtain additional design-time services.","pos":[0,112]}]}],"pos":[6836,6949],"yaml":true},{"content":"When overridden in a derived class, returns the expression string that is formed by the expression editor sheet property values.","nodes":[{"pos":[0,128],"content":"When overridden in a derived class, returns the expression string that is formed by the expression editor sheet property values.","nodes":[{"content":"When overridden in a derived class, returns the expression string that is formed by the expression editor sheet property values.","pos":[0,128]}]}],"pos":[8000,8129],"yaml":true},{"content":"A custom expression editor sheet contains design-time settings for multiple expression properties, which are combined to form an expression string. Control property values can be set using expression strings; the expression strings are evaluated at run time by an expression builder.  \n  \n The <xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A> method returns an expression string that is built from the current expression properties. The visual designer allows you to set the expression sheet properties, and then calls the <xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A> method to get the expression string and set the control property value.","nodes":[{"pos":[0,283],"content":"A custom expression editor sheet contains design-time settings for multiple expression properties, which are combined to form an expression string. Control property values can be set using expression strings; the expression strings are evaluated at run time by an expression builder.","nodes":[{"content":"A custom expression editor sheet contains design-time settings for multiple expression properties, which are combined to form an expression string. Control property values can be set using expression strings; the expression strings are evaluated at run time by an expression builder.","pos":[0,283],"nodes":[{"content":"A custom expression editor sheet contains design-time settings for multiple expression properties, which are combined to form an expression string.","pos":[0,147]},{"content":"Control property values can be set using expression strings; the expression strings are evaluated at run time by an expression builder.","pos":[148,283]}]}]},{"pos":[290,679],"content":"The <xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A> method returns an expression string that is built from the current expression properties. The visual designer allows you to set the expression sheet properties, and then calls the <xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A> method to get the expression string and set the control property value.","nodes":[{"content":"The <xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A> method returns an expression string that is built from the current expression properties. The visual designer allows you to set the expression sheet properties, and then calls the <xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A> method to get the expression string and set the control property value.","pos":[0,389],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A&gt;</ph> method returns an expression string that is built from the current expression properties.","pos":[0,160],"source":"The <xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A> method returns an expression string that is built from the current expression properties."},{"content":"The visual designer allows you to set the expression sheet properties, and then calls the <ph id=\"ph1\">&lt;xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A&gt;</ph> method to get the expression string and set the control property value.","pos":[161,389],"source":" The visual designer allows you to set the expression sheet properties, and then calls the <xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A> method to get the expression string and set the control property value."}]}]}],"pos":[8140,8824],"yaml":true,"extradata":"MT"},{"content":"The custom expression string for the current property values.","nodes":[{"pos":[0,61],"content":"The custom expression string for the current property values.","nodes":[{"content":"The custom expression string for the current property values.","pos":[0,61]}]}],"pos":[8964,9026],"yaml":true},{"content":"Gets a value that indicates whether the expression string is valid.","nodes":[{"pos":[0,67],"content":"Gets a value that indicates whether the expression string is valid.","nodes":[{"content":"Gets a value that indicates whether the expression string is valid.","pos":[0,67]}]}],"pos":[10045,10113],"yaml":true},{"content":"This base implementation always returns `true`.","nodes":[{"pos":[0,47],"content":"This base implementation always returns <ph id=\"ph1\">`true`</ph>.","source":"This base implementation always returns `true`."}],"pos":[10124,10172],"yaml":true,"extradata":"MT"},{"content":"`true`, if the expression string is valid; otherwise `false`.","nodes":[{"pos":[0,61],"content":"<ph id=\"ph1\">`true`</ph>, if the expression string is valid; otherwise <ph id=\"ph2\">`false`</ph>.","source":"`true`, if the expression string is valid; otherwise `false`."}],"pos":[10347,10411],"yaml":true},{"content":"Gets the service provider implementation that is used by the expression editor sheet.","nodes":[{"pos":[0,85],"content":"Gets the service provider implementation that is used by the expression editor sheet.","nodes":[{"content":"Gets the service provider implementation that is used by the expression editor sheet.","pos":[0,85]}]}],"pos":[11537,11623],"yaml":true},{"content":"Use the <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A> constructor to set the <xref:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider%2A> implementation for a custom expression editor sheet.  \n  \n The <xref:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider%2A> property can be used to access services that are provided by the designer host. For example, call the <xref:System.IServiceProvider.GetService%2A> method with the <xref:System.Web.UI.Design.IWebApplication> interface to access project items, documents, or configuration file details that are provided through the visual designer.","nodes":[{"pos":[0,213],"content":"Use the <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A> constructor to set the <xref:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider%2A> implementation for a custom expression editor sheet.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A&gt;</ph> constructor to set the <ph id=\"ph2\">&lt;xref:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider%2A&gt;</ph> implementation for a custom expression editor sheet.","pos":[0,213],"source":"Use the <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A> constructor to set the <xref:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider%2A> implementation for a custom expression editor sheet."}]},{"pos":[220,622],"content":"The <xref:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider%2A> property can be used to access services that are provided by the designer host. For example, call the <xref:System.IServiceProvider.GetService%2A> method with the <xref:System.Web.UI.Design.IWebApplication> interface to access project items, documents, or configuration file details that are provided through the visual designer.","nodes":[{"content":"The <xref:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider%2A> property can be used to access services that are provided by the designer host. For example, call the <xref:System.IServiceProvider.GetService%2A> method with the <xref:System.Web.UI.Design.IWebApplication> interface to access project items, documents, or configuration file details that are provided through the visual designer.","pos":[0,402],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider%2A&gt;</ph> property can be used to access services that are provided by the designer host.","pos":[0,152],"source":"The <xref:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider%2A> property can be used to access services that are provided by the designer host."},{"content":"For example, call the <ph id=\"ph1\">&lt;xref:System.IServiceProvider.GetService%2A&gt;</ph> method with the <ph id=\"ph2\">&lt;xref:System.Web.UI.Design.IWebApplication&gt;</ph> interface to access project items, documents, or configuration file details that are provided through the visual designer.","pos":[153,402],"source":" For example, call the <xref:System.IServiceProvider.GetService%2A> method with the <xref:System.Web.UI.Design.IWebApplication> interface to access project items, documents, or configuration file details that are provided through the visual designer."}]}]}],"pos":[11634,12261],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.IServiceProvider\"></xref>, typically provided by the design host, that can be used to obtain additional design-time services.","nodes":[{"pos":[0,147],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IServiceProvider\"&gt;&lt;/xref&gt;</ph>, typically provided by the design host, that can be used to obtain additional design-time services.","source":"An <xref href=\"System.IServiceProvider\"></xref>, typically provided by the design host, that can be used to obtain additional design-time services."}],"pos":[12457,12605],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.UI.Design.ExpressionEditorSheet\n  commentId: T:System.Web.UI.Design.ExpressionEditorSheet\n  id: ExpressionEditorSheet\n  children:\n  - System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)\n  - System.Web.UI.Design.ExpressionEditorSheet.GetExpression\n  - System.Web.UI.Design.ExpressionEditorSheet.IsValid\n  - System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider\n  langs:\n  - csharp\n  name: ExpressionEditorSheet\n  nameWithType: ExpressionEditorSheet\n  fullName: System.Web.UI.Design.ExpressionEditorSheet\n  type: Class\n  assemblies:\n  - System.Design\n  namespace: System.Web.UI.Design\n  summary: Represents a design-time editor sheet for a custom expression. This class must be inherited.\n  remarks: \"A custom expression editor sheet lets a developer set properties on a custom expression at design-time. Control property values can be set using expression strings; the expression strings are evaluated at run time by an expression builder and at design time by an expression editor.  \\n  \\n When you browse the <xref:System.Web.UI.Design.HtmlControlDesigner.Expressions%2A> property for a control in the design-time properties grid, the visual designer displays a dialog box to set expressions that provide the value for a control property. You can select the expression type based on a list of expression prefixes. When you select an expression prefix from the list, the visual designer uses the associated <xref:System.Web.UI.Design.ExpressionEditor> and <xref:System.Web.UI.Design.ExpressionEditorSheet> objects to evaluate and convert the expression string based on the syntax for that type of expression. The visual designer uses expression editor sheet properties to prompt for one or more strings that combine into the custom expression string.  \\n  \\n Typically, to supply a new expression type at design time, you define a unique expression prefix and provide custom <xref:System.Web.Compilation.ExpressionBuilder> and <xref:System.Web.UI.Design.ExpressionEditor> implementations. Optionally, you can provide a custom <xref:System.Web.UI.Design.ExpressionEditorSheet> implementation that defines properties that are used to form the expression. To associate an expression prefix with an expression builder and an expression editor, apply the <xref:System.Web.Compilation.ExpressionEditorAttribute> attribute and an <xref:System.Web.Compilation.ExpressionPrefixAttribute> attribute to the custom <xref:System.Web.Configuration.ExpressionBuilder> class, and then configure the expression prefix for an expression builder in the `expressionBuilders` element in the Web configuration file.  \\n  \\n The default implementation of the <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> method returns a basic editor sheet, which uses a single input string to form the expression. Custom expression editors that are derived from the <xref:System.Web.UI.Design.ExpressionEditor> can override the <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> method to return a custom editor sheet implementation. Typically, a custom editor sheet contains multiple properties that are used to build the expression string. The <xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A> method returns the resulting expression string based on the current expression properties.  \\n  \\n For example, the <xref:System.Web.UI.Design.ResourceExpressionEditor> class derives from the <xref:System.Web.UI.Design.ExpressionEditor> class and provides an implementation for evaluating and associating a resource string reference with a control property at design time. The <xref:System.Web.Compilation.ResourceExpressionBuilder> class is associated with the expression prefix `Resources` and the <xref:System.Web.UI.Design.ResourceExpressionEditor> implementation. The <xref:System.Web.UI.Design.ResourceExpressionEditor.GetExpressionEditorSheet%2A> method returns a <xref:System.Web.UI.Design.ResourceExpressionEditorSheet>, which defines the individual properties that form a resource reference expression.  \\n  \\n When you inherit from the <xref:System.Web.UI.Design.ExpressionEditorSheet> class, you must override the following members:  \\n  \\n-   The <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> method to return a custom editor sheet implementation.  \\n  \\n-   The <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A> constructor to implement custom initialization actions for your expression editor sheet implementation.\"\n  syntax:\n    content: public abstract class ExpressionEditorSheet\n  inheritance:\n  - System.Object\n  derivedClasses:\n  - System.Web.UI.Design.ResourceExpressionEditorSheet\n  - System.Web.UI.Design.RouteUrlExpressionEditorSheet\n  - System.Web.UI.Design.RouteValueExpressionEditorSheet\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.Design/ExpressionEditorSheet.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\n- uid: System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)\n  commentId: M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)\n  id: '#ctor(System.IServiceProvider)'\n  parent: System.Web.UI.Design.ExpressionEditorSheet\n  langs:\n  - csharp\n  name: ExpressionEditorSheet(IServiceProvider)\n  nameWithType: ExpressionEditorSheet.ExpressionEditorSheet(IServiceProvider)\n  fullName: ExpressionEditorSheet.ExpressionEditorSheet(IServiceProvider)\n  type: Constructor\n  assemblies:\n  - System.Design\n  namespace: System.Web.UI.Design\n  summary: Initializes a new instance of the <xref href=\"System.Web.UI.Design.ExpressionEditorSheet\"></xref> class.\n  remarks: Because the <xref:System.Web.UI.Design.ExpressionEditorSheet> class is abstract, you cannot create an instance of an <xref:System.Web.UI.Design.ExpressionEditorSheet> directly using the <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A> constructor.\n  syntax:\n    content: protected ExpressionEditorSheet (IServiceProvider serviceProvider);\n    parameters:\n    - id: serviceProvider\n      type: System.IServiceProvider\n      description: A service provider implementation supplied by the designer host, used to obtain additional design-time services.\n  overload: System.Web.UI.Design.ExpressionEditorSheet.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.Design/ExpressionEditorSheet.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\n- uid: System.Web.UI.Design.ExpressionEditorSheet.GetExpression\n  commentId: M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression\n  id: GetExpression\n  parent: System.Web.UI.Design.ExpressionEditorSheet\n  langs:\n  - csharp\n  name: GetExpression()\n  nameWithType: ExpressionEditorSheet.GetExpression()\n  fullName: ExpressionEditorSheet.GetExpression()\n  type: Method\n  assemblies:\n  - System.Design\n  namespace: System.Web.UI.Design\n  summary: When overridden in a derived class, returns the expression string that is formed by the expression editor sheet property values.\n  remarks: \"A custom expression editor sheet contains design-time settings for multiple expression properties, which are combined to form an expression string. Control property values can be set using expression strings; the expression strings are evaluated at run time by an expression builder.  \\n  \\n The <xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A> method returns an expression string that is built from the current expression properties. The visual designer allows you to set the expression sheet properties, and then calls the <xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A> method to get the expression string and set the control property value.\"\n  syntax:\n    content: public abstract string GetExpression ();\n    parameters: []\n    return:\n      type: System.String\n      description: The custom expression string for the current property values.\n  overload: System.Web.UI.Design.ExpressionEditorSheet.GetExpression*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.Design/ExpressionEditorSheet.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\n- uid: System.Web.UI.Design.ExpressionEditorSheet.IsValid\n  commentId: P:System.Web.UI.Design.ExpressionEditorSheet.IsValid\n  id: IsValid\n  parent: System.Web.UI.Design.ExpressionEditorSheet\n  langs:\n  - csharp\n  name: IsValid\n  nameWithType: ExpressionEditorSheet.IsValid\n  fullName: ExpressionEditorSheet.IsValid\n  type: Property\n  assemblies:\n  - System.Design\n  namespace: System.Web.UI.Design\n  summary: Gets a value that indicates whether the expression string is valid.\n  remarks: This base implementation always returns `true`.\n  syntax:\n    content: >-\n      [System.ComponentModel.Browsable(false)]\n\n      public virtual bool IsValid { get; }\n    return:\n      type: System.Boolean\n      description: '`true`, if the expression string is valid; otherwise `false`.'\n  overload: System.Web.UI.Design.ExpressionEditorSheet.IsValid*\n  exceptions: []\n  attributes:\n  - type: System.ComponentModel.BrowsableAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.Design/ExpressionEditorSheet.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\n- uid: System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider\n  commentId: P:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider\n  id: ServiceProvider\n  parent: System.Web.UI.Design.ExpressionEditorSheet\n  langs:\n  - csharp\n  name: ServiceProvider\n  nameWithType: ExpressionEditorSheet.ServiceProvider\n  fullName: ExpressionEditorSheet.ServiceProvider\n  type: Property\n  assemblies:\n  - System.Design\n  namespace: System.Web.UI.Design\n  summary: Gets the service provider implementation that is used by the expression editor sheet.\n  remarks: \"Use the <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A> constructor to set the <xref:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider%2A> implementation for a custom expression editor sheet.  \\n  \\n The <xref:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider%2A> property can be used to access services that are provided by the designer host. For example, call the <xref:System.IServiceProvider.GetService%2A> method with the <xref:System.Web.UI.Design.IWebApplication> interface to access project items, documents, or configuration file details that are provided through the visual designer.\"\n  syntax:\n    content: >-\n      [System.ComponentModel.Browsable(false)]\n\n      public IServiceProvider ServiceProvider { get; }\n    return:\n      type: System.IServiceProvider\n      description: An <xref href=\"System.IServiceProvider\"></xref>, typically provided by the design host, that can be used to obtain additional design-time services.\n  overload: System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider*\n  exceptions: []\n  attributes:\n  - type: System.ComponentModel.BrowsableAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.Design/ExpressionEditorSheet.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)\n  parent: System.Web.UI.Design.ExpressionEditorSheet\n  isExternal: false\n  name: ExpressionEditorSheet(IServiceProvider)\n  nameWithType: ExpressionEditorSheet.ExpressionEditorSheet(IServiceProvider)\n  fullName: ExpressionEditorSheet.ExpressionEditorSheet(IServiceProvider)\n- uid: System.IServiceProvider\n  parent: System\n  isExternal: false\n  name: IServiceProvider\n  nameWithType: IServiceProvider\n  fullName: System.IServiceProvider\n- uid: System.Web.UI.Design.ExpressionEditorSheet.GetExpression\n  parent: System.Web.UI.Design.ExpressionEditorSheet\n  isExternal: false\n  name: GetExpression()\n  nameWithType: ExpressionEditorSheet.GetExpression()\n  fullName: ExpressionEditorSheet.GetExpression()\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Web.UI.Design.ExpressionEditorSheet.IsValid\n  parent: System.Web.UI.Design.ExpressionEditorSheet\n  isExternal: false\n  name: IsValid\n  nameWithType: ExpressionEditorSheet.IsValid\n  fullName: ExpressionEditorSheet.IsValid\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider\n  parent: System.Web.UI.Design.ExpressionEditorSheet\n  isExternal: false\n  name: ServiceProvider\n  nameWithType: ExpressionEditorSheet.ServiceProvider\n  fullName: ExpressionEditorSheet.ServiceProvider\n- uid: System.Web.UI.Design.ExpressionEditorSheet.#ctor*\n  parent: System.Web.UI.Design.ExpressionEditorSheet\n  isExternal: false\n  name: ExpressionEditorSheet\n  nameWithType: ExpressionEditorSheet.ExpressionEditorSheet\n  fullName: ExpressionEditorSheet.ExpressionEditorSheet\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.Design/ExpressionEditorSheet.xml\n- uid: System.Web.UI.Design.ExpressionEditorSheet.GetExpression*\n  parent: System.Web.UI.Design.ExpressionEditorSheet\n  isExternal: false\n  name: GetExpression\n  nameWithType: ExpressionEditorSheet.GetExpression\n  fullName: ExpressionEditorSheet.GetExpression\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.Design/ExpressionEditorSheet.xml\n- uid: System.Web.UI.Design.ExpressionEditorSheet.IsValid*\n  parent: System.Web.UI.Design.ExpressionEditorSheet\n  isExternal: false\n  name: IsValid\n  nameWithType: ExpressionEditorSheet.IsValid\n  fullName: ExpressionEditorSheet.IsValid\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.Design/ExpressionEditorSheet.xml\n- uid: System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider*\n  parent: System.Web.UI.Design.ExpressionEditorSheet\n  isExternal: false\n  name: ServiceProvider\n  nameWithType: ExpressionEditorSheet.ServiceProvider\n  fullName: ExpressionEditorSheet.ServiceProvider\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.Design/ExpressionEditorSheet.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}