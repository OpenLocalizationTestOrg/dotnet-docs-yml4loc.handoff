<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e1636fa3777c43a6e7bbd81dfd534e3c7a067a18</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Runtime.Serialization.XmlSerializableServices.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5600bebcdab8d0a8e460e68d4881c86ad9e20d49</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4676023978df1221c7dc065589fa30b090830575</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Contains methods for reading and writing XML.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using <ph id="ph1">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph>, you can generate CLR types representing data contracts from XML schemas.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>In certain cases when doing so, the schemas may not all be represented as data contracts.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, you can use the <ph id="ph1">&lt;xref:System.Runtime.Serialization.ImportOptions.ImportXmlType%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Runtime.Serialization.ImportOptions&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting the property to <ph id="ph1">`true`</ph> specifies that these types are imported as XML types that implement the <ph id="ph2">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the process, the generated types can store anything, but they are read and written as XML by the serializer.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Serialization.XmlSerializableServices&gt;</ph> is an abstract helper class that contains code that is used by the generated <ph id="ph2">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph> types to read and write XML.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>It also contains code for generating schema for the generated types.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that details about the schemas are not stored.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only the name is stored in the generated type.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>This class generates a default schema that represents the XML schema type <ph id="ph1">`anyType`</ph> with the appropriate schema type name as the contract name.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Generates a default schema type given the specified type name and adds it to the specified schema set.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method contains code for generating a schema type for a data contract type with the specified type name.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.Schema.XmlSchemaSet"&gt;&lt;/xref&gt;</ph> to add the generated schema type to.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlQualifiedName"&gt;&lt;/xref&gt;</ph> that specifies the type name to assign the schema to.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">schemas</ph><ept id="p1">&lt;/code&gt;</ept> or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">typeQName</ph><ept id="p2">&lt;/code&gt;</ept> argument is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Reads a set of XML nodes from the specified reader and returns the result.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method reads all XML contained within the node the reader is positioned on when this call is made.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>This enables it to read and store all XML as an array of <ph id="ph1">&lt;xref:System.Xml.XmlNode&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is a helper method used by the types that implement <ph id="ph1">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph> and that use the <ph id="ph2">&lt;xref:System.Xml.Serialization.IXmlSerializable.ReadXml%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlReader"&gt;&lt;/xref&gt;</ph> used for reading.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>An array of type <ph id="ph1">&lt;xref href="System.Xml.XmlNode"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">xmlReader</ph><ept id="p1">&lt;/code&gt;</ept> argument is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>While reading, a <ph id="ph1">`null`</ph> node was encountered.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Writes the supplied nodes using the specified writer.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Xml.XmlWriter"&gt;&lt;/xref&gt;</ph> used for writing.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>An array of type <ph id="ph1">&lt;xref href="System.Xml.XmlNode"&gt;&lt;/xref&gt;</ph> to write.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">xmlWriter</ph><ept id="p1">&lt;/code&gt;</ept> argument is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>