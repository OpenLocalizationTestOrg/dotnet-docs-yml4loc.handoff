{"nodes":[{"content":"Signals to a <xref href=\"System.Threading.CancellationToken\"></xref> that it should be canceled.","nodes":[{"pos":[0,96],"content":"Signals to a <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> that it should be canceled.","source":"Signals to a <xref href=\"System.Threading.CancellationToken\"></xref> that it should be canceled."}],"pos":[1390,1487],"yaml":true},{"content":"Starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the .NET Framework uses a unified model for cooperative cancellation of asynchronous or long-running synchronous operations that involves two objects:  \n  \n-   A <xref:System.Threading.CancellationTokenSource> object, which provides a cancellation token through its <xref:System.Threading.CancellationTokenSource.Token%2A> property and sends a cancellation message by calling its <xref:System.Threading.CancellationTokenSource.Cancel%2A> or <xref:System.Threading.CancellationTokenSource.CancelAfter%2A> method.  \n  \n-   A <xref:System.Threading.CancellationToken> object, which indicates whether cancellation is requested.  \n  \n The general pattern for implementing the cooperative cancellation model is:  \n  \n-   Instantiate a <xref:System.Threading.CancellationTokenSource> object, which manages and sends cancellation notification to the individual cancellation tokens.  \n  \n-   Pass the token returned by the <xref:System.Threading.CancellationTokenSource.Token%2A?displayProperty=fullName> property to each task or thread that listens for cancellation.  \n  \n-   Call the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A?displayProperty=fullName> method from operations that receive the cancellation token. Provide a mechanism for each task or thread to respond to a cancellation request. Whether you choose to cancel an operation, and exactly how you do it, depends on your application logic.  \n  \n-   Call the <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=fullName> method to provide notification of cancellation. This sets the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A?displayProperty=fullName> property on every copy of the cancellation token to `true`.  \n  \n-   Call the <xref:System.Threading.CancellationTokenSource.Dispose%2A> method when you are finished with the <xref:System.Threading.CancellationTokenSource> object.  \n  \n For more information, see [Cancellation in Managed Threads](~/docs/standard/threading/cancellation-in-managed-threads.md).  \n  \n> [!IMPORTANT]\n>  This type implements the <xref:System.IDisposable> interface. When you have finished using an instance of the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.","nodes":[{"pos":[0,225],"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, the .NET Framework uses a unified model for cooperative cancellation of asynchronous or long-running synchronous operations that involves two objects:","source":"Starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the .NET Framework uses a unified model for cooperative cancellation of asynchronous or long-running synchronous operations that involves two objects:"},{"pos":[235,586],"content":"A <xref:System.Threading.CancellationTokenSource> object, which provides a cancellation token through its <xref:System.Threading.CancellationTokenSource.Token%2A> property and sends a cancellation message by calling its <xref:System.Threading.CancellationTokenSource.Cancel%2A> or <xref:System.Threading.CancellationTokenSource.CancelAfter%2A> method.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> object, which provides a cancellation token through its <ph id=\"ph2\">&lt;xref:System.Threading.CancellationTokenSource.Token%2A&gt;</ph> property and sends a cancellation message by calling its <ph id=\"ph3\">&lt;xref:System.Threading.CancellationTokenSource.Cancel%2A&gt;</ph> or <ph id=\"ph4\">&lt;xref:System.Threading.CancellationTokenSource.CancelAfter%2A&gt;</ph> method.","pos":[0,351],"source":"A <xref:System.Threading.CancellationTokenSource> object, which provides a cancellation token through its <xref:System.Threading.CancellationTokenSource.Token%2A> property and sends a cancellation message by calling its <xref:System.Threading.CancellationTokenSource.Cancel%2A> or <xref:System.Threading.CancellationTokenSource.CancelAfter%2A> method."}]},{"pos":[596,698],"content":"A <xref:System.Threading.CancellationToken> object, which indicates whether cancellation is requested.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Threading.CancellationToken&gt;</ph> object, which indicates whether cancellation is requested.","pos":[0,102],"source":"A <xref:System.Threading.CancellationToken> object, which indicates whether cancellation is requested."}]},{"pos":[705,780],"content":"The general pattern for implementing the cooperative cancellation model is:","nodes":[{"content":"The general pattern for implementing the cooperative cancellation model is:","pos":[0,75]}]},{"pos":[790,948],"content":"Instantiate a <xref:System.Threading.CancellationTokenSource> object, which manages and sends cancellation notification to the individual cancellation tokens.","nodes":[{"content":"Instantiate a <ph id=\"ph1\">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> object, which manages and sends cancellation notification to the individual cancellation tokens.","pos":[0,158],"source":"Instantiate a <xref:System.Threading.CancellationTokenSource> object, which manages and sends cancellation notification to the individual cancellation tokens."}]},{"pos":[958,1133],"content":"Pass the token returned by the <xref:System.Threading.CancellationTokenSource.Token%2A?displayProperty=fullName> property to each task or thread that listens for cancellation.","nodes":[{"content":"Pass the token returned by the <ph id=\"ph1\">&lt;xref:System.Threading.CancellationTokenSource.Token%2A?displayProperty=fullName&gt;</ph> property to each task or thread that listens for cancellation.","pos":[0,175],"source":"Pass the token returned by the <xref:System.Threading.CancellationTokenSource.Token%2A?displayProperty=fullName> property to each task or thread that listens for cancellation."}]},{"pos":[1143,1492],"content":"Call the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A?displayProperty=fullName> method from operations that receive the cancellation token. Provide a mechanism for each task or thread to respond to a cancellation request. Whether you choose to cancel an operation, and exactly how you do it, depends on your application logic.","nodes":[{"content":"Call the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A?displayProperty=fullName> method from operations that receive the cancellation token. Provide a mechanism for each task or thread to respond to a cancellation request. Whether you choose to cancel an operation, and exactly how you do it, depends on your application logic.","pos":[0,349],"nodes":[{"content":"Call the <ph id=\"ph1\">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A?displayProperty=fullName&gt;</ph> method from operations that receive the cancellation token.","pos":[0,162],"source":"Call the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A?displayProperty=fullName> method from operations that receive the cancellation token."},{"content":"Provide a mechanism for each task or thread to respond to a cancellation request.","pos":[163,244]},{"content":"Whether you choose to cancel an operation, and exactly how you do it, depends on your application logic.","pos":[245,349]}]}]},{"pos":[1502,1809],"content":"Call the <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=fullName> method to provide notification of cancellation. This sets the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A?displayProperty=fullName> property on every copy of the cancellation token to `true`.","nodes":[{"content":"Call the <ph id=\"ph1\">&lt;xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=fullName&gt;</ph> method to provide notification of cancellation.","pos":[0,139],"source":"Call the <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=fullName> method to provide notification of cancellation."},{"content":"This sets the <ph id=\"ph1\">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A?displayProperty=fullName&gt;</ph> property on every copy of the cancellation token to <ph id=\"ph2\">`true`</ph>.","pos":[140,307],"source":" This sets the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A?displayProperty=fullName> property on every copy of the cancellation token to `true`."}]},{"pos":[1819,1980],"content":"Call the <xref:System.Threading.CancellationTokenSource.Dispose%2A> method when you are finished with the <xref:System.Threading.CancellationTokenSource> object.","nodes":[{"content":"Call the <ph id=\"ph1\">&lt;xref:System.Threading.CancellationTokenSource.Dispose%2A&gt;</ph> method when you are finished with the <ph id=\"ph2\">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> object.","pos":[0,161],"source":"Call the <xref:System.Threading.CancellationTokenSource.Dispose%2A> method when you are finished with the <xref:System.Threading.CancellationTokenSource> object."}]},{"pos":[1987,2109],"content":"For more information, see <bpt id=\"p1\">[</bpt>Cancellation in Managed Threads<ept id=\"p1\">](~/docs/standard/threading/cancellation-in-managed-threads.md)</ept>.","source":"For more information, see [Cancellation in Managed Threads](~/docs/standard/threading/cancellation-in-managed-threads.md)."},{"pos":[2117,2658],"content":"[!IMPORTANT]\n This type implements the <xref:System.IDisposable> interface. When you have finished using an instance of the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.","leadings":["","> "],"nodes":[{"content":" This type implements the <xref:System.IDisposable> interface. When you have finished using an instance of the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.","pos":[13,539],"nodes":[{"content":"This type implements the <ph id=\"ph1\">&lt;xref:System.IDisposable&gt;</ph> interface.","pos":[1,62],"source":" This type implements the <xref:System.IDisposable> interface."},{"content":"When you have finished using an instance of the type, you should dispose of it either directly or indirectly.","pos":[63,172]},{"content":"To dispose of the type directly, call its <ph id=\"ph1\">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id=\"ph2\">`try`</ph><ph id=\"ph3\">/</ph><ph id=\"ph4\">`catch`</ph> block.","pos":[173,284],"source":" To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block."},{"content":"To dispose of it indirectly, use a language construct such as <ph id=\"ph1\">`using`</ph> (in C#) or <ph id=\"ph2\">`Using`</ph> (in Visual Basic).","pos":[285,392],"source":" To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic)."},{"content":"For more information, see the \"Using an Object that Implements IDisposable\" section in the <ph id=\"ph1\">&lt;xref:System.IDisposable&gt;</ph> interface topic.","pos":[393,526],"source":" For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic."}]}]}],"pos":[1498,4182],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Threading.CancellationTokenSource\"></xref> class.","nodes":[{"pos":[0,102],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Threading.CancellationTokenSource\"></xref> class."}],"pos":[7982,8085],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Threading.CancellationTokenSource\"></xref> class that will be canceled after the specified delay in milliseconds.","nodes":[{"pos":[0,166],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> class that will be canceled after the specified delay in milliseconds.","source":"Initializes a new instance of the <xref href=\"System.Threading.CancellationTokenSource\"></xref> class that will be canceled after the specified delay in milliseconds."}],"pos":[9831,9998],"yaml":true},{"content":"The countdown for the `millisecondsDelay` starts during the call to the constructor.  When the `millisecondsDelay` expires, the constructed <xref:System.Threading.CancellationTokenSource> is canceled (if it has not been canceled already).  \n  \n Subsequent calls to <xref:System.Threading.CancellationTokenSource.CancelAfter%2A> will reset the `millisecondsDelay` for the constructed <xref:System.Threading.CancellationTokenSource>, if it has not been canceled already.","nodes":[{"pos":[0,238],"content":"The countdown for the `millisecondsDelay` starts during the call to the constructor.  When the `millisecondsDelay` expires, the constructed <xref:System.Threading.CancellationTokenSource> is canceled (if it has not been canceled already).","nodes":[{"content":"The countdown for the <ph id=\"ph1\">`millisecondsDelay`</ph> starts during the call to the constructor.","pos":[0,84],"source":"The countdown for the `millisecondsDelay` starts during the call to the constructor."},{"content":"When the <ph id=\"ph1\">`millisecondsDelay`</ph> expires, the constructed <ph id=\"ph2\">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> is canceled (if it has not been canceled already).","pos":[86,238],"source":"  When the `millisecondsDelay` expires, the constructed <xref:System.Threading.CancellationTokenSource> is canceled (if it has not been canceled already)."}]},{"pos":[245,468],"content":"Subsequent calls to <ph id=\"ph1\">&lt;xref:System.Threading.CancellationTokenSource.CancelAfter%2A&gt;</ph> will reset the <ph id=\"ph2\">`millisecondsDelay`</ph> for the constructed <ph id=\"ph3\">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>, if it has not been canceled already.","source":"Subsequent calls to <xref:System.Threading.CancellationTokenSource.CancelAfter%2A> will reset the `millisecondsDelay` for the constructed <xref:System.Threading.CancellationTokenSource>, if it has not been canceled already."}],"pos":[10009,10482],"yaml":true,"extradata":"MT"},{"content":"The time interval in milliseconds to wait before canceling this <xref href=\"System.Threading.CancellationTokenSource\"></xref>.","nodes":[{"pos":[0,126],"content":"The time interval in milliseconds to wait before canceling this <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph>.","source":"The time interval in milliseconds to wait before canceling this <xref href=\"System.Threading.CancellationTokenSource\"></xref>."}],"pos":[10649,10776],"yaml":true},{"content":"<code>millisecondsDelay</code> is less than -1.","nodes":[{"pos":[0,47],"content":"<ph id=\"ph1\">&lt;code&gt;millisecondsDelay&lt;/code&gt;</ph> is less than -1.","source":"<code>millisecondsDelay</code> is less than -1."}],"pos":[10964,11012],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Threading.CancellationTokenSource\"></xref> class that will be canceled after the specified time span.","nodes":[{"pos":[0,154],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> class that will be canceled after the specified time span.","source":"Initializes a new instance of the <xref href=\"System.Threading.CancellationTokenSource\"></xref> class that will be canceled after the specified time span."}],"pos":[12622,12777],"yaml":true},{"content":"The countdown for the delay starts during the call to the constructor. When the delay expires, the constructed <xref:System.Threading.CancellationTokenSource> is canceled, if it has not been canceled already.  \n  \n Subsequent calls to <xref:System.Threading.CancellationTokenSource.CancelAfter%2A> will reset the delay for the constructed <xref:System.Threading.CancellationTokenSource>, if it has not been canceled already.","nodes":[{"pos":[0,208],"content":"The countdown for the delay starts during the call to the constructor. When the delay expires, the constructed <xref:System.Threading.CancellationTokenSource> is canceled, if it has not been canceled already.","nodes":[{"content":"The countdown for the delay starts during the call to the constructor. When the delay expires, the constructed <xref:System.Threading.CancellationTokenSource> is canceled, if it has not been canceled already.","pos":[0,208],"nodes":[{"content":"The countdown for the delay starts during the call to the constructor.","pos":[0,70]},{"content":"When the delay expires, the constructed <ph id=\"ph1\">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> is canceled, if it has not been canceled already.","pos":[71,208],"source":" When the delay expires, the constructed <xref:System.Threading.CancellationTokenSource> is canceled, if it has not been canceled already."}]}]},{"pos":[215,424],"content":"Subsequent calls to <xref:System.Threading.CancellationTokenSource.CancelAfter%2A> will reset the delay for the constructed <xref:System.Threading.CancellationTokenSource>, if it has not been canceled already.","nodes":[{"content":"Subsequent calls to <ph id=\"ph1\">&lt;xref:System.Threading.CancellationTokenSource.CancelAfter%2A&gt;</ph> will reset the delay for the constructed <ph id=\"ph2\">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>, if it has not been canceled already.","pos":[0,209],"source":"Subsequent calls to <xref:System.Threading.CancellationTokenSource.CancelAfter%2A> will reset the delay for the constructed <xref:System.Threading.CancellationTokenSource>, if it has not been canceled already."}]}],"pos":[12788,13217],"yaml":true,"extradata":"MT"},{"content":"The time interval to wait before canceling this <xref href=\"System.Threading.CancellationTokenSource\"></xref>.","nodes":[{"pos":[0,110],"content":"The time interval to wait before canceling this <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph>.","source":"The time interval to wait before canceling this <xref href=\"System.Threading.CancellationTokenSource\"></xref>."}],"pos":[13368,13479],"yaml":true},{"content":"<code>delay</code>\n    `.`\n    <xref href=\"System.TimeSpan.TotalMilliseconds\"></xref> is less than -1 or greater than <xref href=\"System.Int32.MaxValue\"></xref>.","nodes":[{"pos":[0,162],"content":"<ph id=\"ph1\">&lt;code&gt;delay&lt;/code&gt;</ph><ph id=\"ph2\">\n    `.`</ph><ph id=\"ph3\">\n    &lt;xref href=\"System.TimeSpan.TotalMilliseconds\"&gt;&lt;/xref&gt;</ph> is less than -1 or greater than <ph id=\"ph4\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>delay</code>\n    `.`\n    <xref href=\"System.TimeSpan.TotalMilliseconds\"></xref> is less than -1 or greater than <xref href=\"System.Int32.MaxValue\"></xref>."}],"pos":[13667,13850],"yaml":true},{"content":"Communicates a request for cancellation.","nodes":[{"pos":[0,40],"content":"Communicates a request for cancellation.","nodes":[{"content":"Communicates a request for cancellation.","pos":[0,40]}]}],"pos":[15330,15371],"yaml":true},{"content":"The associated <xref:System.Threading.CancellationToken> will be notified of the cancellation and will transition to a state where <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> returns true.  \n  \n Any callbacks or cancelable operations registered with the <xref:System.Threading.CancellationToken> will be executed.  \n  \n Cancelable operations and callbacks registered with the token should not throw exceptions.  \n  \n However, this overload of Cancel will aggregate any exceptions thrown into an <xref:System.AggregateException>, such that one callback throwing an exception will not prevent other registered callbacks from being executed.  \n  \n The <xref:System.Threading.ExecutionContext> that was captured when each callback was registered will be reestablished when the callback is invoked.","nodes":[{"pos":[0,213],"content":"The associated <xref:System.Threading.CancellationToken> will be notified of the cancellation and will transition to a state where <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> returns true.","nodes":[{"content":"The associated <ph id=\"ph1\">&lt;xref:System.Threading.CancellationToken&gt;</ph> will be notified of the cancellation and will transition to a state where <ph id=\"ph2\">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A&gt;</ph> returns true.","pos":[0,213],"source":"The associated <xref:System.Threading.CancellationToken> will be notified of the cancellation and will transition to a state where <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> returns true."}]},{"pos":[220,338],"content":"Any callbacks or cancelable operations registered with the <xref:System.Threading.CancellationToken> will be executed.","nodes":[{"content":"Any callbacks or cancelable operations registered with the <ph id=\"ph1\">&lt;xref:System.Threading.CancellationToken&gt;</ph> will be executed.","pos":[0,118],"source":"Any callbacks or cancelable operations registered with the <xref:System.Threading.CancellationToken> will be executed."}]},{"pos":[345,435],"content":"Cancelable operations and callbacks registered with the token should not throw exceptions.","nodes":[{"content":"Cancelable operations and callbacks registered with the token should not throw exceptions.","pos":[0,90]}]},{"pos":[442,663],"content":"However, this overload of Cancel will aggregate any exceptions thrown into an <xref:System.AggregateException>, such that one callback throwing an exception will not prevent other registered callbacks from being executed.","nodes":[{"content":"However, this overload of Cancel will aggregate any exceptions thrown into an <ph id=\"ph1\">&lt;xref:System.AggregateException&gt;</ph>, such that one callback throwing an exception will not prevent other registered callbacks from being executed.","pos":[0,221],"source":"However, this overload of Cancel will aggregate any exceptions thrown into an <xref:System.AggregateException>, such that one callback throwing an exception will not prevent other registered callbacks from being executed."}]},{"pos":[670,818],"content":"The <xref:System.Threading.ExecutionContext> that was captured when each callback was registered will be reestablished when the callback is invoked.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.ExecutionContext&gt;</ph> that was captured when each callback was registered will be reestablished when the callback is invoked.","pos":[0,148],"source":"The <xref:System.Threading.ExecutionContext> that was captured when each callback was registered will be reestablished when the callback is invoked."}]}],"pos":[15382,16211],"yaml":true,"extradata":"MT"},{"content":"This <xref href=\"System.Threading.CancellationTokenSource\"></xref> has been disposed.","nodes":[{"pos":[0,85],"content":"This <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"This <xref href=\"System.Threading.CancellationTokenSource\"></xref> has been disposed."}],"pos":[18142,18228],"yaml":true},{"content":"An aggregate exception containing all the exceptions thrown by the registered callbacks on the associated <xref href=\"System.Threading.CancellationToken\"></xref>.","nodes":[{"pos":[0,162],"content":"An aggregate exception containing all the exceptions thrown by the registered callbacks on the associated <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph>.","source":"An aggregate exception containing all the exceptions thrown by the registered callbacks on the associated <xref href=\"System.Threading.CancellationToken\"></xref>."}],"pos":[18324,18487],"yaml":true},{"content":"Communicates a request for cancellation, and specifies whether remaining callbacks and cancelable operations should be processed.","nodes":[{"pos":[0,129],"content":"Communicates a request for cancellation, and specifies whether remaining callbacks and cancelable operations should be processed.","nodes":[{"content":"Communicates a request for cancellation, and specifies whether remaining callbacks and cancelable operations should be processed.","pos":[0,129]}]}],"pos":[20036,20166],"yaml":true},{"content":"The associated <xref:System.Threading.CancellationToken> will be notified of the cancellation and will transition to a state where <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> returns `true`.  \n  \n Any callbacks or cancelable operations registered with the <xref:System.Threading.CancellationToken> will be executed.  \n  \n Cancelable operations and callbacks registered with the token should not throw exceptions.  \n  \n If `throwOnFirstException` is `true`, an exception will immediately propagate out of the call to <xref:System.Threading.CancellationTokenSource.Cancel%2A>, preventing the remaining callbacks and cancelable operations from being processed.  \n  \n If `throwOnFirstException` is `false`, this overload will aggregate any exceptions thrown into an <xref:System.AggregateException>, such that one callback throwing an exception will not prevent other registered callbacks from being executed.  \n  \n The <xref:System.Threading.ExecutionContext> that was captured when each callback was registered will be reestablished when the callback is invoked.","nodes":[{"pos":[0,215],"content":"The associated <ph id=\"ph1\">&lt;xref:System.Threading.CancellationToken&gt;</ph> will be notified of the cancellation and will transition to a state where <ph id=\"ph2\">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A&gt;</ph> returns <ph id=\"ph3\">`true`</ph>.","source":"The associated <xref:System.Threading.CancellationToken> will be notified of the cancellation and will transition to a state where <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> returns `true`."},{"pos":[222,340],"content":"Any callbacks or cancelable operations registered with the <xref:System.Threading.CancellationToken> will be executed.","nodes":[{"content":"Any callbacks or cancelable operations registered with the <ph id=\"ph1\">&lt;xref:System.Threading.CancellationToken&gt;</ph> will be executed.","pos":[0,118],"source":"Any callbacks or cancelable operations registered with the <xref:System.Threading.CancellationToken> will be executed."}]},{"pos":[347,437],"content":"Cancelable operations and callbacks registered with the token should not throw exceptions.","nodes":[{"content":"Cancelable operations and callbacks registered with the token should not throw exceptions.","pos":[0,90]}]},{"pos":[444,682],"content":"If <ph id=\"ph1\">`throwOnFirstException`</ph> is <ph id=\"ph2\">`true`</ph>, an exception will immediately propagate out of the call to <ph id=\"ph3\">&lt;xref:System.Threading.CancellationTokenSource.Cancel%2A&gt;</ph>, preventing the remaining callbacks and cancelable operations from being processed.","source":"If `throwOnFirstException` is `true`, an exception will immediately propagate out of the call to <xref:System.Threading.CancellationTokenSource.Cancel%2A>, preventing the remaining callbacks and cancelable operations from being processed."},{"pos":[689,930],"content":"If <ph id=\"ph1\">`throwOnFirstException`</ph> is <ph id=\"ph2\">`false`</ph>, this overload will aggregate any exceptions thrown into an <ph id=\"ph3\">&lt;xref:System.AggregateException&gt;</ph>, such that one callback throwing an exception will not prevent other registered callbacks from being executed.","source":"If `throwOnFirstException` is `false`, this overload will aggregate any exceptions thrown into an <xref:System.AggregateException>, such that one callback throwing an exception will not prevent other registered callbacks from being executed."},{"pos":[937,1085],"content":"The <xref:System.Threading.ExecutionContext> that was captured when each callback was registered will be reestablished when the callback is invoked.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.ExecutionContext&gt;</ph> that was captured when each callback was registered will be reestablished when the callback is invoked.","pos":[0,148],"source":"The <xref:System.Threading.ExecutionContext> that was captured when each callback was registered will be reestablished when the callback is invoked."}]}],"pos":[20177,21275],"yaml":true,"extradata":"MT"},{"content":"`true` if exceptions should immediately propagate; otherwise, `false`.","nodes":[{"pos":[0,70],"content":"<ph id=\"ph1\">`true`</ph> if exceptions should immediately propagate; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if exceptions should immediately propagate; otherwise, `false`."}],"pos":[21441,21514],"yaml":true},{"content":"This <xref href=\"System.Threading.CancellationTokenSource\"></xref> has been disposed.","nodes":[{"pos":[0,85],"content":"This <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"This <xref href=\"System.Threading.CancellationTokenSource\"></xref> has been disposed."}],"pos":[21695,21781],"yaml":true},{"content":"An aggregate exception containing all the exceptions thrown by the registered callbacks on the associated <xref href=\"System.Threading.CancellationToken\"></xref>.","nodes":[{"pos":[0,162],"content":"An aggregate exception containing all the exceptions thrown by the registered callbacks on the associated <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph>.","source":"An aggregate exception containing all the exceptions thrown by the registered callbacks on the associated <xref href=\"System.Threading.CancellationToken\"></xref>."}],"pos":[21877,22040],"yaml":true},{"content":"Schedules a cancel operation on this <xref href=\"System.Threading.CancellationTokenSource\"></xref> after the specified number of milliseconds.","nodes":[{"pos":[0,142],"content":"Schedules a cancel operation on this <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> after the specified number of milliseconds.","source":"Schedules a cancel operation on this <xref href=\"System.Threading.CancellationTokenSource\"></xref> after the specified number of milliseconds."}],"pos":[23607,23750],"yaml":true},{"content":"The countdown for the `millisecondsDelay` starts during this call. When the `millisecondsDelay` expires, this <xref:System.Threading.CancellationTokenSource> is canceled, if it has not been canceled already.  \n  \n Subsequent calls to CancelAfter will reset the `millisecondsDelay` for this <xref:System.Threading.CancellationTokenSource>, if it has not been canceled already.","nodes":[{"pos":[0,207],"content":"The countdown for the `millisecondsDelay` starts during this call. When the `millisecondsDelay` expires, this <xref:System.Threading.CancellationTokenSource> is canceled, if it has not been canceled already.","nodes":[{"content":"The countdown for the <ph id=\"ph1\">`millisecondsDelay`</ph> starts during this call.","pos":[0,66],"source":"The countdown for the `millisecondsDelay` starts during this call."},{"content":"When the <ph id=\"ph1\">`millisecondsDelay`</ph> expires, this <ph id=\"ph2\">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> is canceled, if it has not been canceled already.","pos":[67,207],"source":" When the `millisecondsDelay` expires, this <xref:System.Threading.CancellationTokenSource> is canceled, if it has not been canceled already."}]},{"pos":[214,375],"content":"Subsequent calls to CancelAfter will reset the <ph id=\"ph1\">`millisecondsDelay`</ph> for this <ph id=\"ph2\">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>, if it has not been canceled already.","source":"Subsequent calls to CancelAfter will reset the `millisecondsDelay` for this <xref:System.Threading.CancellationTokenSource>, if it has not been canceled already."}],"pos":[23761,24141],"yaml":true,"extradata":"MT"},{"content":"The time span to wait before canceling this <xref href=\"System.Threading.CancellationTokenSource\"></xref>.","nodes":[{"pos":[0,106],"content":"The time span to wait before canceling this <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph>.","source":"The time span to wait before canceling this <xref href=\"System.Threading.CancellationTokenSource\"></xref>."}],"pos":[24301,24408],"yaml":true},{"content":"The exception thrown when this <xref href=\"System.Threading.CancellationTokenSource\"></xref> has been disposed.","nodes":[{"pos":[0,111],"content":"The exception thrown when this <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"The exception thrown when this <xref href=\"System.Threading.CancellationTokenSource\"></xref> has been disposed."}],"pos":[24594,24706],"yaml":true},{"content":"The exception thrown when <code>millisecondsDelay</code> is less than -1.","nodes":[{"pos":[0,73],"content":"The exception thrown when <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">millisecondsDelay</ph><ept id=\"p1\">&lt;/code&gt;</ept> is less than -1.","source":"The exception thrown when <code>millisecondsDelay</code> is less than -1."}],"pos":[24820,24894],"yaml":true},{"content":"Schedules a cancel operation on this <xref href=\"System.Threading.CancellationTokenSource\"></xref> after the specified time span.","nodes":[{"pos":[0,129],"content":"Schedules a cancel operation on this <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> after the specified time span.","source":"Schedules a cancel operation on this <xref href=\"System.Threading.CancellationTokenSource\"></xref> after the specified time span."}],"pos":[26479,26609],"yaml":true},{"content":"The time span to wait before canceling this <xref href=\"System.Threading.CancellationTokenSource\"></xref>.","nodes":[{"pos":[0,106],"content":"The time span to wait before canceling this <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph>.","source":"The time span to wait before canceling this <xref href=\"System.Threading.CancellationTokenSource\"></xref>."}],"pos":[26753,26860],"yaml":true},{"content":"The exception thrown when this <xref href=\"System.Threading.CancellationTokenSource\"></xref> has been disposed.","nodes":[{"pos":[0,111],"content":"The exception thrown when this <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"The exception thrown when this <xref href=\"System.Threading.CancellationTokenSource\"></xref> has been disposed."}],"pos":[27046,27158],"yaml":true},{"content":"The exception that is thrown when <code>delay</code> is less than -1 or greater than Int32.MaxValue.","nodes":[{"pos":[0,100],"content":"The exception that is thrown when <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">delay</ph><ept id=\"p1\">&lt;/code&gt;</ept> is less than -1 or greater than Int32.MaxValue.","source":"The exception that is thrown when <code>delay</code> is less than -1 or greater than Int32.MaxValue."}],"pos":[27272,27373],"yaml":true},{"content":"Creates a <xref href=\"System.Threading.CancellationTokenSource\"></xref> that will be in the canceled state when any of the source tokens in the specified array are in the canceled state.","nodes":[{"pos":[0,186],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> that will be in the canceled state when any of the source tokens in the specified array are in the canceled state.","source":"Creates a <xref href=\"System.Threading.CancellationTokenSource\"></xref> that will be in the canceled state when any of the source tokens in the specified array are in the canceled state."}],"pos":[29126,29313],"yaml":true},{"content":"An array that contains the cancellation token instances to observe.","nodes":[{"pos":[0,67],"content":"An array that contains the cancellation token instances to observe.","nodes":[{"content":"An array that contains the cancellation token instances to observe.","pos":[0,67]}]}],"pos":[29563,29631],"yaml":true},{"content":"A <xref href=\"System.Threading.CancellationTokenSource\"></xref> that is linked to the source tokens.","nodes":[{"pos":[0,100],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> that is linked to the source tokens.","source":"A <xref href=\"System.Threading.CancellationTokenSource\"></xref> that is linked to the source tokens."}],"pos":[29715,29816],"yaml":true},{"content":"A <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with one of the source tokens has been disposed.","nodes":[{"pos":[0,123],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> associated with one of the source tokens has been disposed.","source":"A <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with one of the source tokens has been disposed."}],"pos":[30014,30138],"yaml":true},{"content":"<code>tokens</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;tokens&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>tokens</code> is `null`."}],"pos":[30240,30271],"yaml":true},{"content":"<code>tokens</code> is empty.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;tokens&lt;/code&gt;</ph> is empty.","source":"<code>tokens</code> is empty."}],"pos":[30365,30395],"yaml":true},{"content":"Creates a <xref href=\"System.Threading.CancellationTokenSource\"></xref> that will be in the canceled state when any of the source tokens are in the canceled state.","nodes":[{"pos":[0,163],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> that will be in the canceled state when any of the source tokens are in the canceled state.","source":"Creates a <xref href=\"System.Threading.CancellationTokenSource\"></xref> that will be in the canceled state when any of the source tokens are in the canceled state."}],"pos":[32298,32462],"yaml":true},{"content":"The first cancellation token to observe.","nodes":[{"pos":[0,40],"content":"The first cancellation token to observe.","nodes":[{"content":"The first cancellation token to observe.","pos":[0,40]}]}],"pos":[32751,32792],"yaml":true},{"content":"The second cancellation token to observe.","nodes":[{"pos":[0,41],"content":"The second cancellation token to observe.","nodes":[{"content":"The second cancellation token to observe.","pos":[0,41]}]}],"pos":[32875,32917],"yaml":true},{"content":"A <xref href=\"System.Threading.CancellationTokenSource\"></xref> that is linked to the source tokens.","nodes":[{"pos":[0,100],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> that is linked to the source tokens.","source":"A <xref href=\"System.Threading.CancellationTokenSource\"></xref> that is linked to the source tokens."}],"pos":[33001,33102],"yaml":true},{"content":"A <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with one of the source tokens has been disposed.","nodes":[{"pos":[0,123],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> associated with one of the source tokens has been disposed.","source":"A <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with one of the source tokens has been disposed."}],"pos":[33300,33424],"yaml":true},{"content":"Releases all resources used by the current instance of the <xref href=\"System.Threading.CancellationTokenSource\"></xref> class.","nodes":[{"pos":[0,127],"content":"Releases all resources used by the current instance of the <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> class.","source":"Releases all resources used by the current instance of the <xref href=\"System.Threading.CancellationTokenSource\"></xref> class."}],"pos":[34910,35038],"yaml":true},{"content":"Call `Dispose` when you are finished using the <xref:System.Threading.CancellationTokenSource>. The `Dispose` method leaves the <xref:System.Threading.CancellationTokenSource> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Threading.CancellationTokenSource> so the garbage collector can reclaim the memory that the <xref:System.Threading.CancellationTokenSource> was occupying.  \n  \n For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  \n  \n> [!NOTE]\n>  Always call `Dispose` before you release your last reference to the <xref:System.Threading.CancellationTokenSource>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.CancellationTokenSource> object's `Finalize` method.","nodes":[{"pos":[0,429],"content":"Call `Dispose` when you are finished using the <xref:System.Threading.CancellationTokenSource>. The `Dispose` method leaves the <xref:System.Threading.CancellationTokenSource> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Threading.CancellationTokenSource> so the garbage collector can reclaim the memory that the <xref:System.Threading.CancellationTokenSource> was occupying.","nodes":[{"content":"Call <ph id=\"ph1\">`Dispose`</ph> when you are finished using the <ph id=\"ph2\">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>.","pos":[0,95],"source":"Call `Dispose` when you are finished using the <xref:System.Threading.CancellationTokenSource>."},{"content":"The <ph id=\"ph1\">`Dispose`</ph> method leaves the <ph id=\"ph2\">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> in an unusable state.","pos":[96,197],"source":" The `Dispose` method leaves the <xref:System.Threading.CancellationTokenSource> in an unusable state."},{"content":"After calling <ph id=\"ph1\">`Dispose`</ph>, you must release all references to the <ph id=\"ph2\">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> so the garbage collector can reclaim the memory that the <ph id=\"ph3\">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> was occupying.","pos":[198,429],"source":" After calling `Dispose`, you must release all references to the <xref:System.Threading.CancellationTokenSource> so the garbage collector can reclaim the memory that the <xref:System.Threading.CancellationTokenSource> was occupying."}]},{"pos":[436,641],"content":"For more information, see <bpt id=\"p1\">[</bpt>Cleaning Up Unmanaged Resources<ept id=\"p1\">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id=\"p2\">[</bpt>Implementing a Dispose Method<ept id=\"p2\">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.","source":"For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md)."},{"pos":[649,945],"content":"[!NOTE]\n Always call `Dispose` before you release your last reference to the <xref:System.Threading.CancellationTokenSource>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.CancellationTokenSource> object's `Finalize` method.","leadings":["","> "],"nodes":[{"content":" Always call `Dispose` before you release your last reference to the <xref:System.Threading.CancellationTokenSource>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.CancellationTokenSource> object's `Finalize` method.","pos":[8,294],"nodes":[{"content":"Always call <ph id=\"ph1\">`Dispose`</ph> before you release your last reference to the <ph id=\"ph2\">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>.","pos":[1,117],"source":" Always call `Dispose` before you release your last reference to the <xref:System.Threading.CancellationTokenSource>."},{"content":"Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id=\"ph1\">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> object's <ph id=\"ph2\">`Finalize`</ph> method.","pos":[118,286],"source":" Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.CancellationTokenSource> object's `Finalize` method."}]}]}],"pos":[35049,36002],"yaml":true,"extradata":"MT"},{"content":"Releases the unmanaged resources used by the <xref href=\"System.Threading.CancellationTokenSource\"></xref> class and optionally releases the managed resources.","nodes":[{"pos":[0,159],"content":"Releases the unmanaged resources used by the <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> class and optionally releases the managed resources.","source":"Releases the unmanaged resources used by the <xref href=\"System.Threading.CancellationTokenSource\"></xref> class and optionally releases the managed resources."}],"pos":[37702,37862],"yaml":true},{"content":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.","nodes":[{"pos":[0,100],"content":"<ph id=\"ph1\">`true`</ph> to release both managed and unmanaged resources; <ph id=\"ph2\">`false`</ph> to release only unmanaged resources.","source":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources."}],"pos":[38016,38119],"yaml":true},{"content":"Gets whether cancellation has been requested for this <xref href=\"System.Threading.CancellationTokenSource\"></xref>.","nodes":[{"pos":[0,116],"content":"Gets whether cancellation has been requested for this <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph>.","source":"Gets whether cancellation has been requested for this <xref href=\"System.Threading.CancellationTokenSource\"></xref>."}],"pos":[39776,39893],"yaml":true},{"content":"This property indicates whether cancellation has been requested for this token source, such as due to a call to its <xref:System.Threading.CancellationTokenSource.Cancel%2A> method.  \n  \n If this property returns `true`, it only guarantees that cancellation has been requested. It does not guarantee that every handler registered with the corresponding token has finished executing, nor that cancellation requests have finished propagating to all registered handlers. Additional synchronization may be required, particularly in situations where related objects are being canceled concurrently.","nodes":[{"pos":[0,181],"content":"This property indicates whether cancellation has been requested for this token source, such as due to a call to its <xref:System.Threading.CancellationTokenSource.Cancel%2A> method.","nodes":[{"content":"This property indicates whether cancellation has been requested for this token source, such as due to a call to its <ph id=\"ph1\">&lt;xref:System.Threading.CancellationTokenSource.Cancel%2A&gt;</ph> method.","pos":[0,181],"source":"This property indicates whether cancellation has been requested for this token source, such as due to a call to its <xref:System.Threading.CancellationTokenSource.Cancel%2A> method."}]},{"pos":[188,593],"content":"If this property returns `true`, it only guarantees that cancellation has been requested. It does not guarantee that every handler registered with the corresponding token has finished executing, nor that cancellation requests have finished propagating to all registered handlers. Additional synchronization may be required, particularly in situations where related objects are being canceled concurrently.","nodes":[{"content":"If this property returns <ph id=\"ph1\">`true`</ph>, it only guarantees that cancellation has been requested.","pos":[0,89],"source":"If this property returns `true`, it only guarantees that cancellation has been requested."},{"content":"It does not guarantee that every handler registered with the corresponding token has finished executing, nor that cancellation requests have finished propagating to all registered handlers.","pos":[90,279]},{"content":"Additional synchronization may be required, particularly in situations where related objects are being canceled concurrently.","pos":[280,405]}]}],"pos":[39904,40502],"yaml":true,"extradata":"MT"},{"content":"`true` if cancellation has been requested for this <xref href=\"System.Threading.CancellationTokenSource\"></xref>; otherwise, `false`.","nodes":[{"pos":[0,133],"content":"<ph id=\"ph1\">`true`</ph> if cancellation has been requested for this <ph id=\"ph2\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if cancellation has been requested for this <xref href=\"System.Threading.CancellationTokenSource\"></xref>; otherwise, `false`."}],"pos":[40628,40764],"yaml":true},{"content":"Gets the <xref href=\"System.Threading.CancellationToken\"></xref> associated with this <xref href=\"System.Threading.CancellationTokenSource\"></xref>.","nodes":[{"pos":[0,148],"content":"Gets the <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> associated with this <ph id=\"ph2\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph>.","source":"Gets the <xref href=\"System.Threading.CancellationToken\"></xref> associated with this <xref href=\"System.Threading.CancellationTokenSource\"></xref>."}],"pos":[42329,42478],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationToken\"></xref> associated with this <xref href=\"System.Threading.CancellationTokenSource\"></xref>.","nodes":[{"pos":[0,143],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> associated with this <ph id=\"ph2\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Threading.CancellationToken\"></xref> associated with this <xref href=\"System.Threading.CancellationTokenSource\"></xref>."}],"pos":[42636,42780],"yaml":true},{"content":"The token source has been disposed.","nodes":[{"pos":[0,35],"content":"The token source has been disposed.","nodes":[{"content":"The token source has been disposed.","pos":[0,35]}]}],"pos":[42960,42996],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Threading.CancellationTokenSource\n  commentId: T:System.Threading.CancellationTokenSource\n  id: CancellationTokenSource\n  children:\n  - System.Threading.CancellationTokenSource.#ctor\n  - System.Threading.CancellationTokenSource.#ctor(System.Int32)\n  - System.Threading.CancellationTokenSource.#ctor(System.TimeSpan)\n  - System.Threading.CancellationTokenSource.Cancel\n  - System.Threading.CancellationTokenSource.Cancel(System.Boolean)\n  - System.Threading.CancellationTokenSource.CancelAfter(System.Int32)\n  - System.Threading.CancellationTokenSource.CancelAfter(System.TimeSpan)\n  - System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])\n  - System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken,System.Threading.CancellationToken)\n  - System.Threading.CancellationTokenSource.Dispose\n  - System.Threading.CancellationTokenSource.Dispose(System.Boolean)\n  - System.Threading.CancellationTokenSource.IsCancellationRequested\n  - System.Threading.CancellationTokenSource.Token\n  langs:\n  - csharp\n  name: CancellationTokenSource\n  nameWithType: CancellationTokenSource\n  fullName: System.Threading.CancellationTokenSource\n  type: Class\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Signals to a <xref href=\"System.Threading.CancellationToken\"></xref> that it should be canceled.\n  remarks: \"Starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the .NET Framework uses a unified model for cooperative cancellation of asynchronous or long-running synchronous operations that involves two objects:  \\n  \\n-   A <xref:System.Threading.CancellationTokenSource> object, which provides a cancellation token through its <xref:System.Threading.CancellationTokenSource.Token%2A> property and sends a cancellation message by calling its <xref:System.Threading.CancellationTokenSource.Cancel%2A> or <xref:System.Threading.CancellationTokenSource.CancelAfter%2A> method.  \\n  \\n-   A <xref:System.Threading.CancellationToken> object, which indicates whether cancellation is requested.  \\n  \\n The general pattern for implementing the cooperative cancellation model is:  \\n  \\n-   Instantiate a <xref:System.Threading.CancellationTokenSource> object, which manages and sends cancellation notification to the individual cancellation tokens.  \\n  \\n-   Pass the token returned by the <xref:System.Threading.CancellationTokenSource.Token%2A?displayProperty=fullName> property to each task or thread that listens for cancellation.  \\n  \\n-   Call the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A?displayProperty=fullName> method from operations that receive the cancellation token. Provide a mechanism for each task or thread to respond to a cancellation request. Whether you choose to cancel an operation, and exactly how you do it, depends on your application logic.  \\n  \\n-   Call the <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=fullName> method to provide notification of cancellation. This sets the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A?displayProperty=fullName> property on every copy of the cancellation token to `true`.  \\n  \\n-   Call the <xref:System.Threading.CancellationTokenSource.Dispose%2A> method when you are finished with the <xref:System.Threading.CancellationTokenSource> object.  \\n  \\n For more information, see [Cancellation in Managed Threads](~/docs/standard/threading/cancellation-in-managed-threads.md).  \\n  \\n> [!IMPORTANT]\\n>  This type implements the <xref:System.IDisposable> interface. When you have finished using an instance of the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \\\"Using an Object that Implements IDisposable\\\" section in the <xref:System.IDisposable> interface topic.\"\n  example:\n  - \"The following example uses a random number generator to emulate a data collection application that reads 10 integral values from eleven different instruments. A value of zero indicates that the measurement has failed for one instrument, in which case the operation should be cancelled and no overall mean should be computed.  \\n  \\n To handle the possible cancellation of the operation, the example instantiates a <xref:System.Threading.CancellationTokenSource> object that generates a cancellation token which is passed to a <xref:System.Threading.Tasks.TaskFactory> object. The <xref:System.Threading.Tasks.TaskFactory> object in turn passes the cancellation token to each of the tasks responsible for collecting readings for a particular instrument. The <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%60%602%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2CSystem.Func%7BSystem.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2C%60%601%7D%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> method is called to ensure that the mean is computed only after all readings have been gathered successfully. If a task has not because it has been cancelled, the call to the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A?displayProperty=fullName> method throws an exception.  \\n  \\n [!code-csharp[System.Threading.CancellationTokenSource.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.cancellationtokensource.class/cs/cancel1.cs#1)]\\n [!code-vb[System.Threading.CancellationTokenSource.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.cancellationtokensource.class/vb/cancel1.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public class CancellationTokenSource : IDisposable\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CancellationTokenSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.CancellationTokenSource.#ctor\n  commentId: M:System.Threading.CancellationTokenSource.#ctor\n  id: '#ctor'\n  parent: System.Threading.CancellationTokenSource\n  langs:\n  - csharp\n  name: CancellationTokenSource()\n  nameWithType: CancellationTokenSource.CancellationTokenSource()\n  fullName: CancellationTokenSource.CancellationTokenSource()\n  type: Constructor\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Initializes a new instance of the <xref href=\"System.Threading.CancellationTokenSource\"></xref> class.\n  syntax:\n    content: public CancellationTokenSource ();\n    parameters: []\n  overload: System.Threading.CancellationTokenSource.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CancellationTokenSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.CancellationTokenSource.#ctor(System.Int32)\n  commentId: M:System.Threading.CancellationTokenSource.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Threading.CancellationTokenSource\n  langs:\n  - csharp\n  name: CancellationTokenSource(Int32)\n  nameWithType: CancellationTokenSource.CancellationTokenSource(Int32)\n  fullName: CancellationTokenSource.CancellationTokenSource(Int32)\n  type: Constructor\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Initializes a new instance of the <xref href=\"System.Threading.CancellationTokenSource\"></xref> class that will be canceled after the specified delay in milliseconds.\n  remarks: \"The countdown for the `millisecondsDelay` starts during the call to the constructor.  When the `millisecondsDelay` expires, the constructed <xref:System.Threading.CancellationTokenSource> is canceled (if it has not been canceled already).  \\n  \\n Subsequent calls to <xref:System.Threading.CancellationTokenSource.CancelAfter%2A> will reset the `millisecondsDelay` for the constructed <xref:System.Threading.CancellationTokenSource>, if it has not been canceled already.\"\n  syntax:\n    content: public CancellationTokenSource (int millisecondsDelay);\n    parameters:\n    - id: millisecondsDelay\n      type: System.Int32\n      description: The time interval in milliseconds to wait before canceling this <xref href=\"System.Threading.CancellationTokenSource\"></xref>.\n  overload: System.Threading.CancellationTokenSource.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>millisecondsDelay</code> is less than -1.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CancellationTokenSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.CancellationTokenSource.#ctor(System.TimeSpan)\n  commentId: M:System.Threading.CancellationTokenSource.#ctor(System.TimeSpan)\n  id: '#ctor(System.TimeSpan)'\n  parent: System.Threading.CancellationTokenSource\n  langs:\n  - csharp\n  name: CancellationTokenSource(TimeSpan)\n  nameWithType: CancellationTokenSource.CancellationTokenSource(TimeSpan)\n  fullName: CancellationTokenSource.CancellationTokenSource(TimeSpan)\n  type: Constructor\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Initializes a new instance of the <xref href=\"System.Threading.CancellationTokenSource\"></xref> class that will be canceled after the specified time span.\n  remarks: \"The countdown for the delay starts during the call to the constructor. When the delay expires, the constructed <xref:System.Threading.CancellationTokenSource> is canceled, if it has not been canceled already.  \\n  \\n Subsequent calls to <xref:System.Threading.CancellationTokenSource.CancelAfter%2A> will reset the delay for the constructed <xref:System.Threading.CancellationTokenSource>, if it has not been canceled already.\"\n  syntax:\n    content: public CancellationTokenSource (TimeSpan delay);\n    parameters:\n    - id: delay\n      type: System.TimeSpan\n      description: The time interval to wait before canceling this <xref href=\"System.Threading.CancellationTokenSource\"></xref>.\n  overload: System.Threading.CancellationTokenSource.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: >-\n      <code>delay</code>\n          `.`\n          <xref href=\"System.TimeSpan.TotalMilliseconds\"></xref> is less than -1 or greater than <xref href=\"System.Int32.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CancellationTokenSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.CancellationTokenSource.Cancel\n  commentId: M:System.Threading.CancellationTokenSource.Cancel\n  id: Cancel\n  parent: System.Threading.CancellationTokenSource\n  langs:\n  - csharp\n  name: Cancel()\n  nameWithType: CancellationTokenSource.Cancel()\n  fullName: CancellationTokenSource.Cancel()\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Communicates a request for cancellation.\n  remarks: \"The associated <xref:System.Threading.CancellationToken> will be notified of the cancellation and will transition to a state where <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> returns true.  \\n  \\n Any callbacks or cancelable operations registered with the <xref:System.Threading.CancellationToken> will be executed.  \\n  \\n Cancelable operations and callbacks registered with the token should not throw exceptions.  \\n  \\n However, this overload of Cancel will aggregate any exceptions thrown into an <xref:System.AggregateException>, such that one callback throwing an exception will not prevent other registered callbacks from being executed.  \\n  \\n The <xref:System.Threading.ExecutionContext> that was captured when each callback was registered will be reestablished when the callback is invoked.\"\n  example:\n  - \"The following example uses a random number generator to emulate a data collection application that reads 10 integral values from eleven different instruments. A value of zero indicates that the measurement has failed for one instrument, in which case the operation should be cancelled and no overall mean should be computed.  \\n  \\n To handle the possible cancellation of the operation, the example instantiates a <xref:System.Threading.CancellationTokenSource> object that generates a cancellation token which is passed to a <xref:System.Threading.Tasks.TaskFactory> object. The <xref:System.Threading.Tasks.TaskFactory> object in turn passes the cancellation token to each of the tasks responsible for collecting readings for a particular instrument. The <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%60%602%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2CSystem.Func%7BSystem.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2C%60%601%7D%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> method is called to ensure that the mean is computed only after all readings have been gathered successfully. If a task has not because it has been cancelled, the call to the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A?displayProperty=fullName> method throws an exception.  \\n  \\n [!code-csharp[System.Threading.CancellationTokenSource.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.cancellationtokensource.class/cs/cancel1.cs#1)]\\n [!code-vb[System.Threading.CancellationTokenSource.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.cancellationtokensource.class/vb/cancel1.vb#1)]\"\n  syntax:\n    content: public void Cancel ();\n    parameters: []\n  overload: System.Threading.CancellationTokenSource.Cancel*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This <xref href=\"System.Threading.CancellationTokenSource\"></xref> has been disposed.\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: An aggregate exception containing all the exceptions thrown by the registered callbacks on the associated <xref href=\"System.Threading.CancellationToken\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CancellationTokenSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.CancellationTokenSource.Cancel(System.Boolean)\n  commentId: M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)\n  id: Cancel(System.Boolean)\n  parent: System.Threading.CancellationTokenSource\n  langs:\n  - csharp\n  name: Cancel(Boolean)\n  nameWithType: CancellationTokenSource.Cancel(Boolean)\n  fullName: CancellationTokenSource.Cancel(Boolean)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Communicates a request for cancellation, and specifies whether remaining callbacks and cancelable operations should be processed.\n  remarks: \"The associated <xref:System.Threading.CancellationToken> will be notified of the cancellation and will transition to a state where <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> returns `true`.  \\n  \\n Any callbacks or cancelable operations registered with the <xref:System.Threading.CancellationToken> will be executed.  \\n  \\n Cancelable operations and callbacks registered with the token should not throw exceptions.  \\n  \\n If `throwOnFirstException` is `true`, an exception will immediately propagate out of the call to <xref:System.Threading.CancellationTokenSource.Cancel%2A>, preventing the remaining callbacks and cancelable operations from being processed.  \\n  \\n If `throwOnFirstException` is `false`, this overload will aggregate any exceptions thrown into an <xref:System.AggregateException>, such that one callback throwing an exception will not prevent other registered callbacks from being executed.  \\n  \\n The <xref:System.Threading.ExecutionContext> that was captured when each callback was registered will be reestablished when the callback is invoked.\"\n  syntax:\n    content: public void Cancel (bool throwOnFirstException);\n    parameters:\n    - id: throwOnFirstException\n      type: System.Boolean\n      description: '`true` if exceptions should immediately propagate; otherwise, `false`.'\n  overload: System.Threading.CancellationTokenSource.Cancel*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This <xref href=\"System.Threading.CancellationTokenSource\"></xref> has been disposed.\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: An aggregate exception containing all the exceptions thrown by the registered callbacks on the associated <xref href=\"System.Threading.CancellationToken\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CancellationTokenSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.CancellationTokenSource.CancelAfter(System.Int32)\n  commentId: M:System.Threading.CancellationTokenSource.CancelAfter(System.Int32)\n  id: CancelAfter(System.Int32)\n  parent: System.Threading.CancellationTokenSource\n  langs:\n  - csharp\n  name: CancelAfter(Int32)\n  nameWithType: CancellationTokenSource.CancelAfter(Int32)\n  fullName: CancellationTokenSource.CancelAfter(Int32)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Schedules a cancel operation on this <xref href=\"System.Threading.CancellationTokenSource\"></xref> after the specified number of milliseconds.\n  remarks: \"The countdown for the `millisecondsDelay` starts during this call. When the `millisecondsDelay` expires, this <xref:System.Threading.CancellationTokenSource> is canceled, if it has not been canceled already.  \\n  \\n Subsequent calls to CancelAfter will reset the `millisecondsDelay` for this <xref:System.Threading.CancellationTokenSource>, if it has not been canceled already.\"\n  syntax:\n    content: public void CancelAfter (int millisecondsDelay);\n    parameters:\n    - id: millisecondsDelay\n      type: System.Int32\n      description: The time span to wait before canceling this <xref href=\"System.Threading.CancellationTokenSource\"></xref>.\n  overload: System.Threading.CancellationTokenSource.CancelAfter*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The exception thrown when this <xref href=\"System.Threading.CancellationTokenSource\"></xref> has been disposed.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The exception thrown when <code>millisecondsDelay</code> is less than -1.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CancellationTokenSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.CancellationTokenSource.CancelAfter(System.TimeSpan)\n  commentId: M:System.Threading.CancellationTokenSource.CancelAfter(System.TimeSpan)\n  id: CancelAfter(System.TimeSpan)\n  parent: System.Threading.CancellationTokenSource\n  langs:\n  - csharp\n  name: CancelAfter(TimeSpan)\n  nameWithType: CancellationTokenSource.CancelAfter(TimeSpan)\n  fullName: CancellationTokenSource.CancelAfter(TimeSpan)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Schedules a cancel operation on this <xref href=\"System.Threading.CancellationTokenSource\"></xref> after the specified time span.\n  syntax:\n    content: public void CancelAfter (TimeSpan delay);\n    parameters:\n    - id: delay\n      type: System.TimeSpan\n      description: The time span to wait before canceling this <xref href=\"System.Threading.CancellationTokenSource\"></xref>.\n  overload: System.Threading.CancellationTokenSource.CancelAfter*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The exception thrown when this <xref href=\"System.Threading.CancellationTokenSource\"></xref> has been disposed.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The exception that is thrown when <code>delay</code> is less than -1 or greater than Int32.MaxValue.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CancellationTokenSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])\n  commentId: M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])\n  id: CreateLinkedTokenSource(System.Threading.CancellationToken[])\n  parent: System.Threading.CancellationTokenSource\n  langs:\n  - csharp\n  name: CreateLinkedTokenSource(CancellationToken[])\n  nameWithType: CancellationTokenSource.CreateLinkedTokenSource(CancellationToken[])\n  fullName: CancellationTokenSource.CreateLinkedTokenSource(CancellationToken[])\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Creates a <xref href=\"System.Threading.CancellationTokenSource\"></xref> that will be in the canceled state when any of the source tokens in the specified array are in the canceled state.\n  syntax:\n    content: public static System.Threading.CancellationTokenSource CreateLinkedTokenSource (System.Threading.CancellationToken[] tokens);\n    parameters:\n    - id: tokens\n      type: System.Threading.CancellationToken[]\n      description: An array that contains the cancellation token instances to observe.\n    return:\n      type: System.Threading.CancellationTokenSource\n      description: A <xref href=\"System.Threading.CancellationTokenSource\"></xref> that is linked to the source tokens.\n  overload: System.Threading.CancellationTokenSource.CreateLinkedTokenSource*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: A <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with one of the source tokens has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>tokens</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>tokens</code> is empty.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CancellationTokenSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken,System.Threading.CancellationToken)\n  commentId: M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken,System.Threading.CancellationToken)\n  id: CreateLinkedTokenSource(System.Threading.CancellationToken,System.Threading.CancellationToken)\n  parent: System.Threading.CancellationTokenSource\n  langs:\n  - csharp\n  name: CreateLinkedTokenSource(CancellationToken, CancellationToken)\n  nameWithType: CancellationTokenSource.CreateLinkedTokenSource(CancellationToken, CancellationToken)\n  fullName: CancellationTokenSource.CreateLinkedTokenSource(CancellationToken, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Creates a <xref href=\"System.Threading.CancellationTokenSource\"></xref> that will be in the canceled state when any of the source tokens are in the canceled state.\n  syntax:\n    content: public static System.Threading.CancellationTokenSource CreateLinkedTokenSource (System.Threading.CancellationToken token1, System.Threading.CancellationToken token2);\n    parameters:\n    - id: token1\n      type: System.Threading.CancellationToken\n      description: The first cancellation token to observe.\n    - id: token2\n      type: System.Threading.CancellationToken\n      description: The second cancellation token to observe.\n    return:\n      type: System.Threading.CancellationTokenSource\n      description: A <xref href=\"System.Threading.CancellationTokenSource\"></xref> that is linked to the source tokens.\n  overload: System.Threading.CancellationTokenSource.CreateLinkedTokenSource*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: A <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with one of the source tokens has been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CancellationTokenSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.CancellationTokenSource.Dispose\n  commentId: M:System.Threading.CancellationTokenSource.Dispose\n  id: Dispose\n  parent: System.Threading.CancellationTokenSource\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: CancellationTokenSource.Dispose()\n  fullName: CancellationTokenSource.Dispose()\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Releases all resources used by the current instance of the <xref href=\"System.Threading.CancellationTokenSource\"></xref> class.\n  remarks: \"Call `Dispose` when you are finished using the <xref:System.Threading.CancellationTokenSource>. The `Dispose` method leaves the <xref:System.Threading.CancellationTokenSource> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Threading.CancellationTokenSource> so the garbage collector can reclaim the memory that the <xref:System.Threading.CancellationTokenSource> was occupying.  \\n  \\n For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  \\n  \\n> [!NOTE]\\n>  Always call `Dispose` before you release your last reference to the <xref:System.Threading.CancellationTokenSource>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.CancellationTokenSource> object's `Finalize` method.\"\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Threading.CancellationTokenSource.Dispose*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CancellationTokenSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.CancellationTokenSource.Dispose(System.Boolean)\n  commentId: M:System.Threading.CancellationTokenSource.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Threading.CancellationTokenSource\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: CancellationTokenSource.Dispose(Boolean)\n  fullName: CancellationTokenSource.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Releases the unmanaged resources used by the <xref href=\"System.Threading.CancellationTokenSource\"></xref> class and optionally releases the managed resources.\n  syntax:\n    content: protected virtual void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: '`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.'\n  overload: System.Threading.CancellationTokenSource.Dispose*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CancellationTokenSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.CancellationTokenSource.IsCancellationRequested\n  commentId: P:System.Threading.CancellationTokenSource.IsCancellationRequested\n  id: IsCancellationRequested\n  parent: System.Threading.CancellationTokenSource\n  langs:\n  - csharp\n  name: IsCancellationRequested\n  nameWithType: CancellationTokenSource.IsCancellationRequested\n  fullName: CancellationTokenSource.IsCancellationRequested\n  type: Property\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Gets whether cancellation has been requested for this <xref href=\"System.Threading.CancellationTokenSource\"></xref>.\n  remarks: \"This property indicates whether cancellation has been requested for this token source, such as due to a call to its <xref:System.Threading.CancellationTokenSource.Cancel%2A> method.  \\n  \\n If this property returns `true`, it only guarantees that cancellation has been requested. It does not guarantee that every handler registered with the corresponding token has finished executing, nor that cancellation requests have finished propagating to all registered handlers. Additional synchronization may be required, particularly in situations where related objects are being canceled concurrently.\"\n  syntax:\n    content: public bool IsCancellationRequested { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if cancellation has been requested for this <xref href=\"System.Threading.CancellationTokenSource\"></xref>; otherwise, `false`.'\n  overload: System.Threading.CancellationTokenSource.IsCancellationRequested*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CancellationTokenSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.CancellationTokenSource.Token\n  commentId: P:System.Threading.CancellationTokenSource.Token\n  id: Token\n  parent: System.Threading.CancellationTokenSource\n  langs:\n  - csharp\n  name: Token\n  nameWithType: CancellationTokenSource.Token\n  fullName: CancellationTokenSource.Token\n  type: Property\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Gets the <xref href=\"System.Threading.CancellationToken\"></xref> associated with this <xref href=\"System.Threading.CancellationTokenSource\"></xref>.\n  syntax:\n    content: public System.Threading.CancellationToken Token { get; }\n    return:\n      type: System.Threading.CancellationToken\n      description: The <xref href=\"System.Threading.CancellationToken\"></xref> associated with this <xref href=\"System.Threading.CancellationTokenSource\"></xref>.\n  overload: System.Threading.CancellationTokenSource.Token*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The token source has been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CancellationTokenSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.ObjectDisposedException\n  parent: System\n  isExternal: false\n  name: ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n- uid: System.AggregateException\n  parent: System\n  isExternal: false\n  name: AggregateException\n  nameWithType: AggregateException\n  fullName: System.AggregateException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.Threading.CancellationTokenSource.#ctor\n  parent: System.Threading.CancellationTokenSource\n  isExternal: false\n  name: CancellationTokenSource()\n  nameWithType: CancellationTokenSource.CancellationTokenSource()\n  fullName: CancellationTokenSource.CancellationTokenSource()\n- uid: System.Threading.CancellationTokenSource.#ctor(System.Int32)\n  parent: System.Threading.CancellationTokenSource\n  isExternal: false\n  name: CancellationTokenSource(Int32)\n  nameWithType: CancellationTokenSource.CancellationTokenSource(Int32)\n  fullName: CancellationTokenSource.CancellationTokenSource(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Threading.CancellationTokenSource.#ctor(System.TimeSpan)\n  parent: System.Threading.CancellationTokenSource\n  isExternal: false\n  name: CancellationTokenSource(TimeSpan)\n  nameWithType: CancellationTokenSource.CancellationTokenSource(TimeSpan)\n  fullName: CancellationTokenSource.CancellationTokenSource(TimeSpan)\n- uid: System.TimeSpan\n  parent: System\n  isExternal: false\n  name: TimeSpan\n  nameWithType: TimeSpan\n  fullName: System.TimeSpan\n- uid: System.Threading.CancellationTokenSource.Cancel\n  parent: System.Threading.CancellationTokenSource\n  isExternal: false\n  name: Cancel()\n  nameWithType: CancellationTokenSource.Cancel()\n  fullName: CancellationTokenSource.Cancel()\n- uid: System.Threading.CancellationTokenSource.Cancel(System.Boolean)\n  parent: System.Threading.CancellationTokenSource\n  isExternal: false\n  name: Cancel(Boolean)\n  nameWithType: CancellationTokenSource.Cancel(Boolean)\n  fullName: CancellationTokenSource.Cancel(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Threading.CancellationTokenSource.CancelAfter(System.Int32)\n  parent: System.Threading.CancellationTokenSource\n  isExternal: false\n  name: CancelAfter(Int32)\n  nameWithType: CancellationTokenSource.CancelAfter(Int32)\n  fullName: CancellationTokenSource.CancelAfter(Int32)\n- uid: System.Threading.CancellationTokenSource.CancelAfter(System.TimeSpan)\n  parent: System.Threading.CancellationTokenSource\n  isExternal: false\n  name: CancelAfter(TimeSpan)\n  nameWithType: CancellationTokenSource.CancelAfter(TimeSpan)\n  fullName: CancellationTokenSource.CancelAfter(TimeSpan)\n- uid: System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])\n  parent: System.Threading.CancellationTokenSource\n  isExternal: false\n  name: CreateLinkedTokenSource(CancellationToken[])\n  nameWithType: CancellationTokenSource.CreateLinkedTokenSource(CancellationToken[])\n  fullName: CancellationTokenSource.CreateLinkedTokenSource(CancellationToken[])\n- uid: System.Threading.CancellationTokenSource\n  parent: System.Threading\n  isExternal: false\n  name: CancellationTokenSource\n  nameWithType: CancellationTokenSource\n  fullName: System.Threading.CancellationTokenSource\n- uid: System.Threading.CancellationToken\n  name: CancellationToken\n  nameWithType: CancellationToken\n  fullName: System.Threading.CancellationToken\n- uid: System.Threading.CancellationToken[]\n  parent: System.Threading\n  isExternal: false\n  name: CancellationToken[]\n  nameWithType: CancellationToken[]\n  fullName: System.Threading.CancellationToken[]\n  spec.csharp:\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    nameWithType: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken,System.Threading.CancellationToken)\n  parent: System.Threading.CancellationTokenSource\n  isExternal: false\n  name: CreateLinkedTokenSource(CancellationToken, CancellationToken)\n  nameWithType: CancellationTokenSource.CreateLinkedTokenSource(CancellationToken, CancellationToken)\n  fullName: CancellationTokenSource.CreateLinkedTokenSource(CancellationToken, CancellationToken)\n- uid: System.Threading.CancellationTokenSource.Dispose\n  parent: System.Threading.CancellationTokenSource\n  isExternal: false\n  name: Dispose()\n  nameWithType: CancellationTokenSource.Dispose()\n  fullName: CancellationTokenSource.Dispose()\n- uid: System.Threading.CancellationTokenSource.Dispose(System.Boolean)\n  parent: System.Threading.CancellationTokenSource\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: CancellationTokenSource.Dispose(Boolean)\n  fullName: CancellationTokenSource.Dispose(Boolean)\n- uid: System.Threading.CancellationTokenSource.IsCancellationRequested\n  parent: System.Threading.CancellationTokenSource\n  isExternal: false\n  name: IsCancellationRequested\n  nameWithType: CancellationTokenSource.IsCancellationRequested\n  fullName: CancellationTokenSource.IsCancellationRequested\n- uid: System.Threading.CancellationTokenSource.Token\n  parent: System.Threading.CancellationTokenSource\n  isExternal: false\n  name: Token\n  nameWithType: CancellationTokenSource.Token\n  fullName: CancellationTokenSource.Token\n- uid: System.Threading.CancellationTokenSource.#ctor*\n  parent: System.Threading.CancellationTokenSource\n  isExternal: false\n  name: CancellationTokenSource\n  nameWithType: CancellationTokenSource.CancellationTokenSource\n  fullName: CancellationTokenSource.CancellationTokenSource\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CancellationTokenSource.xml\n- uid: System.Threading.CancellationTokenSource.Cancel*\n  parent: System.Threading.CancellationTokenSource\n  isExternal: false\n  name: Cancel\n  nameWithType: CancellationTokenSource.Cancel\n  fullName: CancellationTokenSource.Cancel\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CancellationTokenSource.xml\n- uid: System.Threading.CancellationTokenSource.CancelAfter*\n  parent: System.Threading.CancellationTokenSource\n  isExternal: false\n  name: CancelAfter\n  nameWithType: CancellationTokenSource.CancelAfter\n  fullName: CancellationTokenSource.CancelAfter\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CancellationTokenSource.xml\n- uid: System.Threading.CancellationTokenSource.CreateLinkedTokenSource*\n  parent: System.Threading.CancellationTokenSource\n  isExternal: false\n  name: CreateLinkedTokenSource\n  nameWithType: CancellationTokenSource.CreateLinkedTokenSource\n  fullName: CancellationTokenSource.CreateLinkedTokenSource\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CancellationTokenSource.xml\n- uid: System.Threading.CancellationTokenSource.Dispose*\n  parent: System.Threading.CancellationTokenSource\n  isExternal: false\n  name: Dispose\n  nameWithType: CancellationTokenSource.Dispose\n  fullName: CancellationTokenSource.Dispose\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CancellationTokenSource.xml\n- uid: System.Threading.CancellationTokenSource.IsCancellationRequested*\n  parent: System.Threading.CancellationTokenSource\n  isExternal: false\n  name: IsCancellationRequested\n  nameWithType: CancellationTokenSource.IsCancellationRequested\n  fullName: CancellationTokenSource.IsCancellationRequested\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CancellationTokenSource.xml\n- uid: System.Threading.CancellationTokenSource.Token*\n  parent: System.Threading.CancellationTokenSource\n  isExternal: false\n  name: Token\n  nameWithType: CancellationTokenSource.Token\n  fullName: CancellationTokenSource.Token\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CancellationTokenSource.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  nameWithType: IDisposable\n  fullName: System.IDisposable\n"}