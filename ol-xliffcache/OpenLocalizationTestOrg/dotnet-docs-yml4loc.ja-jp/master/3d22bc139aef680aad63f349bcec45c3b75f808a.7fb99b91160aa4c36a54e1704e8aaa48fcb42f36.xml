{"nodes":[{"content":"Provides information about methods and constructors.","nodes":[{"pos":[0,52],"content":"Provides information about methods and constructors.","nodes":[{"content":"Provides information about methods and constructors.","pos":[0,52]}]}],"pos":[4355,4408],"yaml":true},{"content":"`MethodBase` is the base class of <xref:System.Reflection.MethodInfo> and <xref:System.Reflection.ConstructorInfo>.","nodes":[{"pos":[0,115],"content":"<ph id=\"ph1\">`MethodBase`</ph> is the base class of <ph id=\"ph2\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Reflection.ConstructorInfo&gt;</ph>.","source":"`MethodBase` is the base class of <xref:System.Reflection.MethodInfo> and <xref:System.Reflection.ConstructorInfo>."}],"pos":[4419,4537],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Reflection.MethodBase\"></xref> class.","nodes":[{"pos":[0,90],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodBase\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Reflection.MethodBase\"></xref> class."}],"pos":[10235,10326],"yaml":true},{"content":"Gets the attributes associated with this method.","nodes":[{"pos":[0,48],"content":"Gets the attributes associated with this method.","nodes":[{"content":"Gets the attributes associated with this method.","pos":[0,48]}]}],"pos":[11595,11644],"yaml":true},{"content":"All members have a set of attributes, which are defined in relation to the specific type of member.  \n  \n To get the <xref:System.Reflection.MethodAttributes>, first get the type. From the type, get the method. From the method, get the <xref:System.Reflection.MethodAttributes>.","nodes":[{"pos":[0,99],"content":"All members have a set of attributes, which are defined in relation to the specific type of member.","nodes":[{"content":"All members have a set of attributes, which are defined in relation to the specific type of member.","pos":[0,99]}]},{"pos":[106,278],"content":"To get the <xref:System.Reflection.MethodAttributes>, first get the type. From the type, get the method. From the method, get the <xref:System.Reflection.MethodAttributes>.","nodes":[{"content":"To get the <xref:System.Reflection.MethodAttributes>, first get the type. From the type, get the method. From the method, get the <xref:System.Reflection.MethodAttributes>.","pos":[0,172],"nodes":[{"content":"To get the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodAttributes&gt;</ph>, first get the type.","pos":[0,73],"source":"To get the <xref:System.Reflection.MethodAttributes>, first get the type."},{"content":"From the type, get the method.","pos":[74,104]},{"content":"From the method, get the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodAttributes&gt;</ph>.","pos":[105,172],"source":" From the method, get the <xref:System.Reflection.MethodAttributes>."}]}]}],"pos":[11655,11938],"yaml":true,"extradata":"MT"},{"content":"One of the <xref href=\"System.Reflection.MethodAttributes\"></xref> values.","nodes":[{"pos":[0,74],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodAttributes\"&gt;&lt;/xref&gt;</ph> values.","source":"One of the <xref href=\"System.Reflection.MethodAttributes\"></xref> values."}],"pos":[12994,13069],"yaml":true},{"content":"Gets a value indicating the calling conventions for this method.","nodes":[{"pos":[0,64],"content":"Gets a value indicating the calling conventions for this method.","nodes":[{"content":"Gets a value indicating the calling conventions for this method.","pos":[0,64]}]}],"pos":[14662,14727],"yaml":true},{"content":"The <xref href=\"System.Reflection.CallingConventions\"></xref> for this method.","nodes":[{"pos":[0,78],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Reflection.CallingConventions\"&gt;&lt;/xref&gt;</ph> for this method.","source":"The <xref href=\"System.Reflection.CallingConventions\"></xref> for this method."}],"pos":[14909,14988],"yaml":true},{"content":"Gets a value indicating whether the generic method contains unassigned generic type parameters.","nodes":[{"pos":[0,95],"content":"Gets a value indicating whether the generic method contains unassigned generic type parameters.","nodes":[{"content":"Gets a value indicating whether the generic method contains unassigned generic type parameters.","pos":[0,95]}]}],"pos":[16636,16732],"yaml":true},{"content":"A generic method can be invoked only if there are no generic type definitions or open constructed types in the type arguments of the method itself or in any enclosing types. Because types can be arbitrarily complex, making this recursive determination is difficult. For convenience, and to reduce the chance of error, the <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> property provides a standard way to distinguish between closed constructed methods, which can be invoked, and open constructed methods, which cannot. If the <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> property returns `true`, the method cannot be invoked.  \n  \n The <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> property searches recursively for type parameters. For example, it returns `true` for any method in an open type `A<T>` (`A(Of T)` in Visual Basic), even though the method itself is not generic. Contrast this with the behavior of the <xref:System.Reflection.MethodBase.IsGenericMethod%2A> property, which returns `false` for such a method.  \n  \n Similarly, the <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> property parameter returns `true` for any constructor in an open type, even though constructors cannot have type parameters of their own.  \n  \n For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodInfo.IsGenericMethod%2A?displayProperty=fullName> property. For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=fullName> property.","nodes":[{"pos":[0,663],"content":"A generic method can be invoked only if there are no generic type definitions or open constructed types in the type arguments of the method itself or in any enclosing types. Because types can be arbitrarily complex, making this recursive determination is difficult. For convenience, and to reduce the chance of error, the <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> property provides a standard way to distinguish between closed constructed methods, which can be invoked, and open constructed methods, which cannot. If the <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> property returns `true`, the method cannot be invoked.","nodes":[{"content":"A generic method can be invoked only if there are no generic type definitions or open constructed types in the type arguments of the method itself or in any enclosing types.","pos":[0,173]},{"content":"Because types can be arbitrarily complex, making this recursive determination is difficult.","pos":[174,265]},{"content":"For convenience, and to reduce the chance of error, the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodBase.ContainsGenericParameters%2A&gt;</ph> property provides a standard way to distinguish between closed constructed methods, which can be invoked, and open constructed methods, which cannot.","pos":[266,536],"source":" For convenience, and to reduce the chance of error, the <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> property provides a standard way to distinguish between closed constructed methods, which can be invoked, and open constructed methods, which cannot."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodBase.ContainsGenericParameters%2A&gt;</ph> property returns <ph id=\"ph2\">`true`</ph>, the method cannot be invoked.","pos":[537,663],"source":" If the <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> property returns `true`, the method cannot be invoked."}]},{"pos":[670,1078],"content":"The <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> property searches recursively for type parameters. For example, it returns `true` for any method in an open type `A<T>` (`A(Of T)` in Visual Basic), even though the method itself is not generic. Contrast this with the behavior of the <xref:System.Reflection.MethodBase.IsGenericMethod%2A> property, which returns `false` for such a method.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.MethodBase.ContainsGenericParameters%2A&gt;</ph> property searches recursively for type parameters.","pos":[0,119],"source":"The <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> property searches recursively for type parameters."},{"content":"For example, it returns <ph id=\"ph1\">`true`</ph> for any method in an open type <ph id=\"ph2\">`A&lt;T&gt;`</ph> (<ph id=\"ph3\">`A(Of T)`</ph> in Visual Basic), even though the method itself is not generic.","pos":[120,263],"source":" For example, it returns `true` for any method in an open type `A<T>` (`A(Of T)` in Visual Basic), even though the method itself is not generic."},{"content":"Contrast this with the behavior of the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodBase.IsGenericMethod%2A&gt;</ph> property, which returns <ph id=\"ph2\">`false`</ph> for such a method.","pos":[264,408],"source":" Contrast this with the behavior of the <xref:System.Reflection.MethodBase.IsGenericMethod%2A> property, which returns `false` for such a method."}]},{"pos":[1085,1302],"content":"Similarly, the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodBase.ContainsGenericParameters%2A&gt;</ph> property parameter returns <ph id=\"ph2\">`true`</ph> for any constructor in an open type, even though constructors cannot have type parameters of their own.","source":"Similarly, the <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> property parameter returns `true` for any constructor in an open type, even though constructors cannot have type parameters of their own."},{"pos":[1309,1646],"content":"For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodInfo.IsGenericMethod%2A?displayProperty=fullName> property. For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=fullName> property.","nodes":[{"content":"For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodInfo.IsGenericMethod%2A?displayProperty=fullName> property. For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=fullName> property.","pos":[0,337],"nodes":[{"content":"For a list of the invariant conditions for terms specific to generic methods, see the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo.IsGenericMethod%2A?displayProperty=fullName&gt;</ph> property.","pos":[0,175],"source":"For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodInfo.IsGenericMethod%2A?displayProperty=fullName> property."},{"content":"For a list of the invariant conditions for other terms used in generic reflection, see the <ph id=\"ph1\">&lt;xref:System.Type.IsGenericType%2A?displayProperty=fullName&gt;</ph> property.","pos":[176,337],"source":" For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=fullName> property."}]}]}],"pos":[16743,18398],"yaml":true,"extradata":"MT"},{"content":"`true` if the current <xref href=\"System.Reflection.MethodBase\"></xref> object represents a generic method that contains unassigned generic type parameters; otherwise, `false`.","nodes":[{"pos":[0,176],"content":"<ph id=\"ph1\">`true`</ph> if the current <ph id=\"ph2\">&lt;xref href=\"System.Reflection.MethodBase\"&gt;&lt;/xref&gt;</ph> object represents a generic method that contains unassigned generic type parameters; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the current <xref href=\"System.Reflection.MethodBase\"></xref> object represents a generic method that contains unassigned generic type parameters; otherwise, `false`."}],"pos":[18534,18713],"yaml":true},{"content":"Returns a value that indicates whether this instance is equal to a specified object.","nodes":[{"pos":[0,84],"content":"Returns a value that indicates whether this instance is equal to a specified object.","nodes":[{"content":"Returns a value that indicates whether this instance is equal to a specified object.","pos":[0,84]}]}],"pos":[20322,20407],"yaml":true},{"content":"An object to compare with this instance, or `null`.","nodes":[{"pos":[0,51],"content":"An object to compare with this instance, or <ph id=\"ph1\">`null`</ph>.","source":"An object to compare with this instance, or `null`."}],"pos":[20547,20599],"yaml":true},{"content":"`true` if <code>obj</code> equals the type and value of this instance; otherwise, `false`.","nodes":[{"pos":[0,90],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">obj</ph><ept id=\"p1\">&lt;/code&gt;</ept> equals the type and value of this instance; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if <code>obj</code> equals the type and value of this instance; otherwise, `false`."}],"pos":[20657,20750],"yaml":true},{"content":"Returns a `MethodBase` object representing the currently executing method.","nodes":[{"pos":[0,74],"content":"Returns a <ph id=\"ph1\">`MethodBase`</ph> object representing the currently executing method.","source":"Returns a `MethodBase` object representing the currently executing method."}],"pos":[22315,22390],"yaml":true},{"content":"If the currently executing method is defined on a generic type, the <xref:System.Reflection.MethodInfo> that is returned by <xref:System.Reflection.MethodBase.GetCurrentMethod%2A> is obtained from the generic type definition (that is, <xref:System.Reflection.MethodInfo.ContainsGenericParameters%2A?displayProperty=fullName> returns `true`). Therefore, it does not reflect the type arguments that were used when the method was called. For example, if a method `M()` is defined on a generic type `C<T>` (`C(Of T)` in Visual Basic), and <xref:System.Reflection.MethodBase.GetCurrentMethod%2A> is called from `C<string>.M()`, then <xref:System.Reflection.MethodBase.GetCurrentMethod%2A> returns `C<T>.M()` (`C(Of T).M()` in Visual Basic).  \n  \n If the currently executing method is a generic method, <xref:System.Reflection.MethodBase.GetCurrentMethod%2A> returns the generic method definition. If the generic method is defined on a generic type, the <xref:System.Reflection.MethodInfo> is obtained from the generic type definition.","nodes":[{"pos":[0,735],"content":"If the currently executing method is defined on a generic type, the <xref:System.Reflection.MethodInfo> that is returned by <xref:System.Reflection.MethodBase.GetCurrentMethod%2A> is obtained from the generic type definition (that is, <xref:System.Reflection.MethodInfo.ContainsGenericParameters%2A?displayProperty=fullName> returns `true`). Therefore, it does not reflect the type arguments that were used when the method was called. For example, if a method `M()` is defined on a generic type `C<T>` (`C(Of T)` in Visual Basic), and <xref:System.Reflection.MethodBase.GetCurrentMethod%2A> is called from `C<string>.M()`, then <xref:System.Reflection.MethodBase.GetCurrentMethod%2A> returns `C<T>.M()` (`C(Of T).M()` in Visual Basic).","nodes":[{"content":"If the currently executing method is defined on a generic type, the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that is returned by <ph id=\"ph2\">&lt;xref:System.Reflection.MethodBase.GetCurrentMethod%2A&gt;</ph> is obtained from the generic type definition (that is, <ph id=\"ph3\">&lt;xref:System.Reflection.MethodInfo.ContainsGenericParameters%2A?displayProperty=fullName&gt;</ph> returns <ph id=\"ph4\">`true`</ph>).","pos":[0,341],"source":"If the currently executing method is defined on a generic type, the <xref:System.Reflection.MethodInfo> that is returned by <xref:System.Reflection.MethodBase.GetCurrentMethod%2A> is obtained from the generic type definition (that is, <xref:System.Reflection.MethodInfo.ContainsGenericParameters%2A?displayProperty=fullName> returns `true`)."},{"content":"Therefore, it does not reflect the type arguments that were used when the method was called.","pos":[342,434]},{"content":"For example, if a method <ph id=\"ph1\">`M()`</ph> is defined on a generic type <ph id=\"ph2\">`C&lt;T&gt;`</ph> (<ph id=\"ph3\">`C(Of T)`</ph> in Visual Basic), and <ph id=\"ph4\">&lt;xref:System.Reflection.MethodBase.GetCurrentMethod%2A&gt;</ph> is called from <ph id=\"ph5\">`C&lt;string&gt;.M()`</ph>, then <ph id=\"ph6\">&lt;xref:System.Reflection.MethodBase.GetCurrentMethod%2A&gt;</ph> returns <ph id=\"ph7\">`C&lt;T&gt;.M()`</ph> (<ph id=\"ph8\">`C(Of T).M()`</ph> in Visual Basic).","pos":[435,735],"source":" For example, if a method `M()` is defined on a generic type `C<T>` (`C(Of T)` in Visual Basic), and <xref:System.Reflection.MethodBase.GetCurrentMethod%2A> is called from `C<string>.M()`, then <xref:System.Reflection.MethodBase.GetCurrentMethod%2A> returns `C<T>.M()` (`C(Of T).M()` in Visual Basic)."}]},{"pos":[742,1029],"content":"If the currently executing method is a generic method, <xref:System.Reflection.MethodBase.GetCurrentMethod%2A> returns the generic method definition. If the generic method is defined on a generic type, the <xref:System.Reflection.MethodInfo> is obtained from the generic type definition.","nodes":[{"content":"If the currently executing method is a generic method, <xref:System.Reflection.MethodBase.GetCurrentMethod%2A> returns the generic method definition. If the generic method is defined on a generic type, the <xref:System.Reflection.MethodInfo> is obtained from the generic type definition.","pos":[0,287],"nodes":[{"content":"If the currently executing method is a generic method, <ph id=\"ph1\">&lt;xref:System.Reflection.MethodBase.GetCurrentMethod%2A&gt;</ph> returns the generic method definition.","pos":[0,149],"source":"If the currently executing method is a generic method, <xref:System.Reflection.MethodBase.GetCurrentMethod%2A> returns the generic method definition."},{"content":"If the generic method is defined on a generic type, the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> is obtained from the generic type definition.","pos":[150,287],"source":" If the generic method is defined on a generic type, the <xref:System.Reflection.MethodInfo> is obtained from the generic type definition."}]}]}],"pos":[22401,23435],"yaml":true,"extradata":"MT"},{"content":"<xref href=\"System.Reflection.MethodBase.GetCurrentMethod\"></xref> is a static method that is called from within an executing method and that returns information about that method.  \n  \n A `MethodBase` object representing the currently executing method.","nodes":[{"pos":[0,180],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodBase.GetCurrentMethod\"&gt;&lt;/xref&gt;</ph> is a static method that is called from within an executing method and that returns information about that method.","source":"<xref href=\"System.Reflection.MethodBase.GetCurrentMethod\"></xref> is a static method that is called from within an executing method and that returns information about that method."},{"pos":[187,253],"content":"A <ph id=\"ph1\">`MethodBase`</ph> object representing the currently executing method.","source":"A `MethodBase` object representing the currently executing method."}],"pos":[24471,24731],"yaml":true},{"content":"This member was invoked with a late-binding mechanism.","nodes":[{"pos":[0,54],"content":"This member was invoked with a late-binding mechanism.","nodes":[{"content":"This member was invoked with a late-binding mechanism.","pos":[0,54]}]}],"pos":[24916,24971],"yaml":true},{"content":"Returns an array of <xref href=\"System.Type\"></xref> objects that represent the type arguments of a generic method or the type parameters of a generic method definition.","nodes":[{"pos":[0,169],"content":"Returns an array of <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> objects that represent the type arguments of a generic method or the type parameters of a generic method definition.","source":"Returns an array of <xref href=\"System.Type\"></xref> objects that represent the type arguments of a generic method or the type parameters of a generic method definition."}],"pos":[26166,26336],"yaml":true},{"content":"The elements of the returned array are in the order in which they appear in the list of type parameters for the generic method.  \n  \n-   If the current method is a closed constructed method (that is, the <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> property returns `false`), the array returned by the <xref:System.Reflection.MethodBase.GetGenericArguments%2A> method contains the types that have been assigned to the generic type parameters of the generic method definition.  \n  \n-   If the current method is a generic method definition, the array contains the type parameters.  \n  \n-   If the current method is an open constructed method (that is, the <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> property returns `true`) in which specific types have been assigned to some type parameters and type parameters of enclosing generic types have been assigned to other type parameters, the array contains both types and type parameters. Use the <xref:System.Type.IsGenericParameter%2A> property to tell them apart. For a demonstration of this scenario, see the code example provided for the <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> property.  \n  \n Generic constructors are not supported in the .NET Framework version 2.0. This property throws <xref:System.NotSupportedException> if not overridden in a derived class, so an exception is thrown if the current instance is of type <xref:System.Reflection.ConstructorInfo>.  \n  \n For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodInfo.IsGenericMethod%2A?displayProperty=fullName> property. For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=fullName> property.","nodes":[{"pos":[0,127],"content":"The elements of the returned array are in the order in which they appear in the list of type parameters for the generic method.","nodes":[{"content":"The elements of the returned array are in the order in which they appear in the list of type parameters for the generic method.","pos":[0,127]}]},{"pos":[137,495],"content":"If the current method is a closed constructed method (that is, the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodBase.ContainsGenericParameters%2A&gt;</ph> property returns <ph id=\"ph2\">`false`</ph>), the array returned by the <ph id=\"ph3\">&lt;xref:System.Reflection.MethodBase.GetGenericArguments%2A&gt;</ph> method contains the types that have been assigned to the generic type parameters of the generic method definition.","source":"If the current method is a closed constructed method (that is, the <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> property returns `false`), the array returned by the <xref:System.Reflection.MethodBase.GetGenericArguments%2A> method contains the types that have been assigned to the generic type parameters of the generic method definition."},{"pos":[505,598],"content":"If the current method is a generic method definition, the array contains the type parameters.","nodes":[{"content":"If the current method is a generic method definition, the array contains the type parameters.","pos":[0,93]}]},{"pos":[608,1202],"content":"If the current method is an open constructed method (that is, the <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> property returns `true`) in which specific types have been assigned to some type parameters and type parameters of enclosing generic types have been assigned to other type parameters, the array contains both types and type parameters. Use the <xref:System.Type.IsGenericParameter%2A> property to tell them apart. For a demonstration of this scenario, see the code example provided for the <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> property.","nodes":[{"content":"If the current method is an open constructed method (that is, the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodBase.ContainsGenericParameters%2A&gt;</ph> property returns <ph id=\"ph2\">`true`</ph>) in which specific types have been assigned to some type parameters and type parameters of enclosing generic types have been assigned to other type parameters, the array contains both types and type parameters.","pos":[0,365],"source":"If the current method is an open constructed method (that is, the <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> property returns `true`) in which specific types have been assigned to some type parameters and type parameters of enclosing generic types have been assigned to other type parameters, the array contains both types and type parameters."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Type.IsGenericParameter%2A&gt;</ph> property to tell them apart.","pos":[366,443],"source":" Use the <xref:System.Type.IsGenericParameter%2A> property to tell them apart."},{"content":"For a demonstration of this scenario, see the code example provided for the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodBase.ContainsGenericParameters%2A&gt;</ph> property.","pos":[444,594],"source":" For a demonstration of this scenario, see the code example provided for the <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> property."}]},{"pos":[1209,1480],"content":"Generic constructors are not supported in the .NET Framework version 2.0. This property throws <xref:System.NotSupportedException> if not overridden in a derived class, so an exception is thrown if the current instance is of type <xref:System.Reflection.ConstructorInfo>.","nodes":[{"content":"Generic constructors are not supported in the .NET Framework version 2.0. This property throws <xref:System.NotSupportedException> if not overridden in a derived class, so an exception is thrown if the current instance is of type <xref:System.Reflection.ConstructorInfo>.","pos":[0,271],"nodes":[{"content":"Generic constructors are not supported in the .NET Framework version 2.0.","pos":[0,73]},{"content":"This property throws <ph id=\"ph1\">&lt;xref:System.NotSupportedException&gt;</ph> if not overridden in a derived class, so an exception is thrown if the current instance is of type <ph id=\"ph2\">&lt;xref:System.Reflection.ConstructorInfo&gt;</ph>.","pos":[74,271],"source":" This property throws <xref:System.NotSupportedException> if not overridden in a derived class, so an exception is thrown if the current instance is of type <xref:System.Reflection.ConstructorInfo>."}]}]},{"pos":[1487,1824],"content":"For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodInfo.IsGenericMethod%2A?displayProperty=fullName> property. For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=fullName> property.","nodes":[{"content":"For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodInfo.IsGenericMethod%2A?displayProperty=fullName> property. For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=fullName> property.","pos":[0,337],"nodes":[{"content":"For a list of the invariant conditions for terms specific to generic methods, see the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo.IsGenericMethod%2A?displayProperty=fullName&gt;</ph> property.","pos":[0,175],"source":"For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodInfo.IsGenericMethod%2A?displayProperty=fullName> property."},{"content":"For a list of the invariant conditions for other terms used in generic reflection, see the <ph id=\"ph1\">&lt;xref:System.Type.IsGenericType%2A?displayProperty=fullName&gt;</ph> property.","pos":[176,337],"source":" For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=fullName> property."}]}]}],"pos":[26347,28184],"yaml":true,"extradata":"MT"},{"content":"An array of <xref href=\"System.Type\"></xref> objects that represent the type arguments of a generic method or the type parameters of a generic method definition. Returns an empty array if the current method is not a generic method.","nodes":[{"pos":[0,231],"content":"An array of <xref href=\"System.Type\"></xref> objects that represent the type arguments of a generic method or the type parameters of a generic method definition. Returns an empty array if the current method is not a generic method.","nodes":[{"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> objects that represent the type arguments of a generic method or the type parameters of a generic method definition.","pos":[0,161],"source":"An array of <xref href=\"System.Type\"></xref> objects that represent the type arguments of a generic method or the type parameters of a generic method definition."},{"content":"Returns an empty array if the current method is not a generic method.","pos":[162,231]}]}],"pos":[28395,28627],"yaml":true},{"content":"The current object is a <xref href=\"System.Reflection.ConstructorInfo\"></xref>. Generic constructors are not supported in the .NET Framework version 2.0. This exception is the default behavior if this method is not overridden in a derived class.","nodes":[{"pos":[0,245],"content":"The current object is a <xref href=\"System.Reflection.ConstructorInfo\"></xref>. Generic constructors are not supported in the .NET Framework version 2.0. This exception is the default behavior if this method is not overridden in a derived class.","nodes":[{"content":"The current object is a <ph id=\"ph1\">&lt;xref href=\"System.Reflection.ConstructorInfo\"&gt;&lt;/xref&gt;</ph>.","pos":[0,79],"source":"The current object is a <xref href=\"System.Reflection.ConstructorInfo\"></xref>."},{"content":"Generic constructors are not supported in the .NET Framework version 2.0.","pos":[80,153]},{"content":"This exception is the default behavior if this method is not overridden in a derived class.","pos":[154,245]}]}],"pos":[28805,29051],"yaml":true},{"content":"Returns the hash code for this instance.","nodes":[{"pos":[0,40],"content":"Returns the hash code for this instance.","nodes":[{"content":"Returns the hash code for this instance.","pos":[0,40]}]}],"pos":[30617,30658],"yaml":true},{"content":"A 32-bit signed integer hash code.","nodes":[{"pos":[0,34],"content":"A 32-bit signed integer hash code.","nodes":[{"content":"A 32-bit signed integer hash code.","pos":[0,34]}]}],"pos":[30792,30827],"yaml":true},{"content":"When overridden in a derived class, gets a <xref href=\"System.Reflection.MethodBody\"></xref> object that provides access to the MSIL stream, local variables, and exceptions for the current method.","nodes":[{"pos":[0,196],"content":"When overridden in a derived class, gets a <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodBody\"&gt;&lt;/xref&gt;</ph> object that provides access to the MSIL stream, local variables, and exceptions for the current method.","source":"When overridden in a derived class, gets a <xref href=\"System.Reflection.MethodBody\"></xref> object that provides access to the MSIL stream, local variables, and exceptions for the current method."}],"pos":[32379,32576],"yaml":true},{"content":"You do not have to override the <xref:System.Reflection.MethodBase.GetMethodBody%2A> in order to use it. You can call the <xref:System.Reflection.MethodBase.GetMethodBody%2A> method on <xref:System.Reflection.MethodInfo> and <xref:System.Reflection.ConstructorInfo> objects, because the method is overridden in the runtime versions of these classes. For example, the runtime version of the <xref:System.Reflection.MethodInfo> class derives from the <xref:System.Reflection.MethodInfo> class, which in turn derives from the <xref:System.Reflection.MethodBase> class.","nodes":[{"pos":[0,565],"content":"You do not have to override the <xref:System.Reflection.MethodBase.GetMethodBody%2A> in order to use it. You can call the <xref:System.Reflection.MethodBase.GetMethodBody%2A> method on <xref:System.Reflection.MethodInfo> and <xref:System.Reflection.ConstructorInfo> objects, because the method is overridden in the runtime versions of these classes. For example, the runtime version of the <xref:System.Reflection.MethodInfo> class derives from the <xref:System.Reflection.MethodInfo> class, which in turn derives from the <xref:System.Reflection.MethodBase> class.","nodes":[{"content":"You do not have to override the <xref:System.Reflection.MethodBase.GetMethodBody%2A> in order to use it. You can call the <xref:System.Reflection.MethodBase.GetMethodBody%2A> method on <xref:System.Reflection.MethodInfo> and <xref:System.Reflection.ConstructorInfo> objects, because the method is overridden in the runtime versions of these classes. For example, the runtime version of the <xref:System.Reflection.MethodInfo> class derives from the <xref:System.Reflection.MethodInfo> class, which in turn derives from the <xref:System.Reflection.MethodBase> class.","pos":[0,565],"nodes":[{"content":"You do not have to override the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodBase.GetMethodBody%2A&gt;</ph> in order to use it.","pos":[0,104],"source":"You do not have to override the <xref:System.Reflection.MethodBase.GetMethodBody%2A> in order to use it."},{"content":"You can call the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodBase.GetMethodBody%2A&gt;</ph> method on <ph id=\"ph2\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Reflection.ConstructorInfo&gt;</ph> objects, because the method is overridden in the runtime versions of these classes.","pos":[105,349],"source":" You can call the <xref:System.Reflection.MethodBase.GetMethodBody%2A> method on <xref:System.Reflection.MethodInfo> and <xref:System.Reflection.ConstructorInfo> objects, because the method is overridden in the runtime versions of these classes."},{"content":"For example, the runtime version of the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> class derives from the <ph id=\"ph2\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> class, which in turn derives from the <ph id=\"ph3\">&lt;xref:System.Reflection.MethodBase&gt;</ph> class.","pos":[350,565],"source":" For example, the runtime version of the <xref:System.Reflection.MethodInfo> class derives from the <xref:System.Reflection.MethodInfo> class, which in turn derives from the <xref:System.Reflection.MethodBase> class."}]}]}],"pos":[32587,33153],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Reflection.MethodBody\"></xref> object that provides access to the MSIL stream, local variables, and exceptions for the current method.","nodes":[{"pos":[0,155],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodBody\"&gt;&lt;/xref&gt;</ph> object that provides access to the MSIL stream, local variables, and exceptions for the current method.","source":"A <xref href=\"System.Reflection.MethodBody\"></xref> object that provides access to the MSIL stream, local variables, and exceptions for the current method."}],"pos":[34596,34752],"yaml":true},{"content":"This method is invalid unless overridden in a derived class.","nodes":[{"pos":[0,60],"content":"This method is invalid unless overridden in a derived class.","nodes":[{"content":"This method is invalid unless overridden in a derived class.","pos":[0,60]}]}],"pos":[34932,34993],"yaml":true},{"content":"Gets method information by using the method's internal metadata representation (handle).","nodes":[{"pos":[0,88],"content":"Gets method information by using the method's internal metadata representation (handle).","nodes":[{"content":"Gets method information by using the method's internal metadata representation (handle).","pos":[0,88]}]}],"pos":[36346,36435],"yaml":true},{"content":"Handles are valid only in the application domain in which they were obtained.","nodes":[{"pos":[0,77],"content":"Handles are valid only in the application domain in which they were obtained.","nodes":[{"content":"Handles are valid only in the application domain in which they were obtained.","pos":[0,77]}]}],"pos":[36446,36524],"yaml":true,"extradata":"MT"},{"content":"The method's handle.","nodes":[{"pos":[0,20],"content":"The method's handle.","nodes":[{"content":"The method's handle.","pos":[0,20]}]}],"pos":[36731,36752],"yaml":true},{"content":"A `MethodBase` containing information about the method.","nodes":[{"pos":[0,55],"content":"A <ph id=\"ph1\">`MethodBase`</ph> containing information about the method.","source":"A `MethodBase` containing information about the method."}],"pos":[36824,36880],"yaml":true},{"content":"<code>handle</code> is invalid.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;handle&lt;/code&gt;</ph> is invalid.","source":"<code>handle</code> is invalid."}],"pos":[37050,37082],"yaml":true},{"content":"Gets a <xref href=\"System.Reflection.MethodBase\"></xref> object for the constructor or method represented by the specified handle, for the specified generic type.","nodes":[{"pos":[0,162],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodBase\"&gt;&lt;/xref&gt;</ph> object for the constructor or method represented by the specified handle, for the specified generic type.","source":"Gets a <xref href=\"System.Reflection.MethodBase\"></xref> object for the constructor or method represented by the specified handle, for the specified generic type."}],"pos":[38894,39057],"yaml":true},{"content":"Handles are valid only in the application domain in which they were obtained.  \n  \n A <xref:System.RuntimeMethodHandle> structure for a constructor or method of a generic type can represent different <xref:System.Reflection.MethodBase> objects, depending on the types specified for the type parameters of the generic type. For example, if `class G<T>` (`class G(Of T)` in Visual Basic, `generic <T> ref class G` in C++) has a method that returns type `T`, the <xref:System.Reflection.MethodBase> object for that method in a constructed class such as `G<int>` is different from the <xref:System.Reflection.MethodBase> object for that method in the generic type definition.","nodes":[{"pos":[0,77],"content":"Handles are valid only in the application domain in which they were obtained.","nodes":[{"content":"Handles are valid only in the application domain in which they were obtained.","pos":[0,77]}]},{"pos":[84,671],"content":"A <xref:System.RuntimeMethodHandle> structure for a constructor or method of a generic type can represent different <xref:System.Reflection.MethodBase> objects, depending on the types specified for the type parameters of the generic type. For example, if `class G<T>` (`class G(Of T)` in Visual Basic, `generic <T> ref class G` in C++) has a method that returns type `T`, the <xref:System.Reflection.MethodBase> object for that method in a constructed class such as `G<int>` is different from the <xref:System.Reflection.MethodBase> object for that method in the generic type definition.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.RuntimeMethodHandle&gt;</ph> structure for a constructor or method of a generic type can represent different <ph id=\"ph2\">&lt;xref:System.Reflection.MethodBase&gt;</ph> objects, depending on the types specified for the type parameters of the generic type.","pos":[0,238],"source":"A <xref:System.RuntimeMethodHandle> structure for a constructor or method of a generic type can represent different <xref:System.Reflection.MethodBase> objects, depending on the types specified for the type parameters of the generic type."},{"content":"For example, if <ph id=\"ph1\">`class G&lt;T&gt;`</ph> (<ph id=\"ph2\">`class G(Of T)`</ph> in Visual Basic, <ph id=\"ph3\">`generic &lt;T&gt; ref class G`</ph> in C++) has a method that returns type <ph id=\"ph4\">`T`</ph>, the <ph id=\"ph5\">&lt;xref:System.Reflection.MethodBase&gt;</ph> object for that method in a constructed class such as <ph id=\"ph6\">`G&lt;int&gt;`</ph> is different from the <ph id=\"ph7\">&lt;xref:System.Reflection.MethodBase&gt;</ph> object for that method in the generic type definition.","pos":[239,587],"source":" For example, if `class G<T>` (`class G(Of T)` in Visual Basic, `generic <T> ref class G` in C++) has a method that returns type `T`, the <xref:System.Reflection.MethodBase> object for that method in a constructed class such as `G<int>` is different from the <xref:System.Reflection.MethodBase> object for that method in the generic type definition."}]}],"pos":[39068,39744],"yaml":true,"extradata":"MT"},{"content":"A handle to the internal metadata representation of a constructor or method.","nodes":[{"pos":[0,76],"content":"A handle to the internal metadata representation of a constructor or method.","nodes":[{"content":"A handle to the internal metadata representation of a constructor or method.","pos":[0,76]}]}],"pos":[40051,40128],"yaml":true},{"content":"A handle to the generic type that defines the constructor or method.","nodes":[{"pos":[0,68],"content":"A handle to the generic type that defines the constructor or method.","nodes":[{"content":"A handle to the generic type that defines the constructor or method.","pos":[0,68]}]}],"pos":[40208,40277],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodBase\"></xref> object representing the method or constructor specified by <code>handle</code>, in the generic type specified by <code>declaringType</code>.","nodes":[{"pos":[0,192],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodBase\"&gt;&lt;/xref&gt;</ph> object representing the method or constructor specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">handle</ph><ept id=\"p1\">&lt;/code&gt;</ept>, in the generic type specified by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">declaringType</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"A <xref href=\"System.Reflection.MethodBase\"></xref> object representing the method or constructor specified by <code>handle</code>, in the generic type specified by <code>declaringType</code>."}],"pos":[40349,40542],"yaml":true},{"content":"<code>handle</code> is invalid.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;handle&lt;/code&gt;</ph> is invalid.","source":"<code>handle</code> is invalid."}],"pos":[40712,40744],"yaml":true},{"content":"When overridden in a derived class, returns the <xref href=\"System.Reflection.MethodImplAttributes\"></xref> flags.","nodes":[{"pos":[0,114],"content":"When overridden in a derived class, returns the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodImplAttributes\"&gt;&lt;/xref&gt;</ph> flags.","source":"When overridden in a derived class, returns the <xref href=\"System.Reflection.MethodImplAttributes\"></xref> flags."}],"pos":[42412,42527],"yaml":true},{"content":"The `MethodImplAttributes` flags.","nodes":[{"pos":[0,33],"content":"The <ph id=\"ph1\">`MethodImplAttributes`</ph> flags.","source":"The `MethodImplAttributes` flags."}],"pos":[43492,43526],"yaml":true},{"content":"When overridden in a derived class, gets the parameters of the specified method or constructor.","nodes":[{"pos":[0,95],"content":"When overridden in a derived class, gets the parameters of the specified method or constructor.","nodes":[{"content":"When overridden in a derived class, gets the parameters of the specified method or constructor.","pos":[0,95]}]}],"pos":[44917,45013],"yaml":true},{"content":"An array of type `ParameterInfo` containing information that matches the signature of the method (or constructor) reflected by this `MethodBase` instance.","nodes":[{"pos":[0,154],"content":"An array of type <ph id=\"ph1\">`ParameterInfo`</ph> containing information that matches the signature of the method (or constructor) reflected by this <ph id=\"ph2\">`MethodBase`</ph> instance.","source":"An array of type `ParameterInfo` containing information that matches the signature of the method (or constructor) reflected by this `MethodBase` instance."}],"pos":[45992,46147],"yaml":true},{"content":"When overridden in a derived class, invokes the reflected method or constructor with the given parameters.","nodes":[{"pos":[0,106],"content":"When overridden in a derived class, invokes the reflected method or constructor with the given parameters.","nodes":[{"content":"When overridden in a derived class, invokes the reflected method or constructor with the given parameters.","pos":[0,106]}]}],"pos":[48172,48279],"yaml":true},{"content":"Dynamically invokes the method reflected by this instance on `obj`, and passes along the specified parameters. If the method is static, the `obj` parameter is ignored. For non-static methods, `obj` should be an instance of a class that inherits or declares the method and must be the same type as this class. If the method has no parameters, the value of `parameters` should be `null`. Otherwise, the number, type, and order of elements in `parameters` should be identical to the number, type, and order of parameters for the method reflected by this instance.  \n  \n You may not omit optional parameters in calls to `Invoke`. To invoke a method omitting optional parameters, you should call `Type.InvokeMember` instead.  \n  \n> [!NOTE]\n>  If this method overload is used to invoke an instance constructor, the object supplied for `obj` is reinitialized; that is, all instance initializers are executed. The return value is `null`. If a class constructor is invoked, the class is reinitialized; that is, all class initializers are executed. The return value is `null`.  \n  \n For pass-by-value primitive parameters, normal widening is performed (Int16 -> Int32, for example). For pass-by-value reference parameters, normal reference widening is allowed (derived class to base class, and base class to interface type). However, for pass-by-reference primitive parameters, the types must match exactly. For pass-by-reference reference parameters, the normal widening still applies.  \n  \n For example, if the method reflected by this instance is declared as `public boolean Compare(String a, String b)`, then `parameters` should be an array of `Objects` with length 2 such that `parameters[0] = new Object(\"SomeString1\") and parameters[1] = new Object(\"SomeString2\")`.  \n  \n If a parameter of the current method is a value type, and the corresponding argument in `parameters` is `null`, the runtime passes a zero-initialized instance of the value type.  \n  \n Reflection uses dynamic method lookup when invoking virtual methods. For example, suppose that class B inherits from class A and both implement a virtual method named M. Now suppose that you have a `MethodInfo` object that represents M on class A. If you use the `Invoke` method to invoke M on an object of type B, then reflection will use the implementation given by class B. Even if the object of type B is cast to A, the implementation given by class B is used (see code sample below).  \n  \n On the other hand, if the method is non-virtual, then reflection will use the implementation given by the type from which the `MethodInfo` was obtained, regardless of the type of the object passed as the target.  \n  \n Access restrictions are ignored for fully trusted code. That is, private constructors, methods, fields, and properties can be accessed and invoked via reflection whenever the code is fully trusted.  \n  \n If the invoked method throws an exception, `TargetInvocationException.GetException` returns the exception. This implementation throws a `NotSupportedException`.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \n>   \n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.","nodes":[{"pos":[0,560],"content":"Dynamically invokes the method reflected by this instance on `obj`, and passes along the specified parameters. If the method is static, the `obj` parameter is ignored. For non-static methods, `obj` should be an instance of a class that inherits or declares the method and must be the same type as this class. If the method has no parameters, the value of `parameters` should be `null`. Otherwise, the number, type, and order of elements in `parameters` should be identical to the number, type, and order of parameters for the method reflected by this instance.","nodes":[{"content":"Dynamically invokes the method reflected by this instance on <ph id=\"ph1\">`obj`</ph>, and passes along the specified parameters.","pos":[0,110],"source":"Dynamically invokes the method reflected by this instance on `obj`, and passes along the specified parameters."},{"content":"If the method is static, the <ph id=\"ph1\">`obj`</ph> parameter is ignored.","pos":[111,167],"source":" If the method is static, the `obj` parameter is ignored."},{"content":"For non-static methods, <ph id=\"ph1\">`obj`</ph> should be an instance of a class that inherits or declares the method and must be the same type as this class.","pos":[168,308],"source":" For non-static methods, `obj` should be an instance of a class that inherits or declares the method and must be the same type as this class."},{"content":"If the method has no parameters, the value of <ph id=\"ph1\">`parameters`</ph> should be <ph id=\"ph2\">`null`</ph>.","pos":[309,385],"source":" If the method has no parameters, the value of `parameters` should be `null`."},{"content":"Otherwise, the number, type, and order of elements in <ph id=\"ph1\">`parameters`</ph> should be identical to the number, type, and order of parameters for the method reflected by this instance.","pos":[386,560],"source":" Otherwise, the number, type, and order of elements in `parameters` should be identical to the number, type, and order of parameters for the method reflected by this instance."}]},{"pos":[567,719],"content":"You may not omit optional parameters in calls to `Invoke`. To invoke a method omitting optional parameters, you should call `Type.InvokeMember` instead.","nodes":[{"content":"You may not omit optional parameters in calls to <ph id=\"ph1\">`Invoke`</ph>.","pos":[0,58],"source":"You may not omit optional parameters in calls to `Invoke`."},{"content":"To invoke a method omitting optional parameters, you should call <ph id=\"ph1\">`Type.InvokeMember`</ph> instead.","pos":[59,152],"source":" To invoke a method omitting optional parameters, you should call `Type.InvokeMember` instead."}]},{"pos":[727,1066],"content":"[!NOTE]\n If this method overload is used to invoke an instance constructor, the object supplied for `obj` is reinitialized; that is, all instance initializers are executed. The return value is `null`. If a class constructor is invoked, the class is reinitialized; that is, all class initializers are executed. The return value is `null`.","leadings":["","> "],"nodes":[{"content":" If this method overload is used to invoke an instance constructor, the object supplied for `obj` is reinitialized; that is, all instance initializers are executed. The return value is `null`. If a class constructor is invoked, the class is reinitialized; that is, all class initializers are executed. The return value is `null`.","pos":[8,337],"nodes":[{"content":"If this method overload is used to invoke an instance constructor, the object supplied for <ph id=\"ph1\">`obj`</ph> is reinitialized; that is, all instance initializers are executed.","pos":[1,164],"source":" If this method overload is used to invoke an instance constructor, the object supplied for `obj` is reinitialized; that is, all instance initializers are executed."},{"content":"The return value is <ph id=\"ph1\">`null`</ph>.","pos":[165,192],"source":" The return value is `null`."},{"content":"If a class constructor is invoked, the class is reinitialized; that is, all class initializers are executed.","pos":[193,301]},{"content":"The return value is <ph id=\"ph1\">`null`</ph>.","pos":[302,329],"source":" The return value is `null`."}]}]},{"pos":[1073,1476],"content":"For pass-by-value primitive parameters, normal widening is performed (Int16 -> Int32, for example). For pass-by-value reference parameters, normal reference widening is allowed (derived class to base class, and base class to interface type). However, for pass-by-reference primitive parameters, the types must match exactly. For pass-by-reference reference parameters, the normal widening still applies.","nodes":[{"content":"For pass-by-value primitive parameters, normal widening is performed (Int16 -> Int32, for example). For pass-by-value reference parameters, normal reference widening is allowed (derived class to base class, and base class to interface type). However, for pass-by-reference primitive parameters, the types must match exactly. For pass-by-reference reference parameters, the normal widening still applies.","pos":[0,403],"nodes":[{"content":"For pass-by-value primitive parameters, normal widening is performed (Int16 -&gt; Int32, for example).","pos":[0,99],"source":"For pass-by-value primitive parameters, normal widening is performed (Int16 -> Int32, for example)."},{"content":"For pass-by-value reference parameters, normal reference widening is allowed (derived class to base class, and base class to interface type).","pos":[100,241]},{"content":"However, for pass-by-reference primitive parameters, the types must match exactly.","pos":[242,324]},{"content":"For pass-by-reference reference parameters, the normal widening still applies.","pos":[325,403]}]}]},{"pos":[1483,1762],"content":"For example, if the method reflected by this instance is declared as <ph id=\"ph1\">`public boolean Compare(String a, String b)`</ph>, then <ph id=\"ph2\">`parameters`</ph> should be an array of <ph id=\"ph3\">`Objects`</ph> with length 2 such that <ph id=\"ph4\">`parameters[0] = new Object(\"SomeString1\") and parameters[1] = new Object(\"SomeString2\")`</ph>.","source":"For example, if the method reflected by this instance is declared as `public boolean Compare(String a, String b)`, then `parameters` should be an array of `Objects` with length 2 such that `parameters[0] = new Object(\"SomeString1\") and parameters[1] = new Object(\"SomeString2\")`."},{"pos":[1769,1946],"content":"If a parameter of the current method is a value type, and the corresponding argument in <ph id=\"ph1\">`parameters`</ph> is <ph id=\"ph2\">`null`</ph>, the runtime passes a zero-initialized instance of the value type.","source":"If a parameter of the current method is a value type, and the corresponding argument in `parameters` is `null`, the runtime passes a zero-initialized instance of the value type."},{"pos":[1953,2441],"content":"Reflection uses dynamic method lookup when invoking virtual methods. For example, suppose that class B inherits from class A and both implement a virtual method named M. Now suppose that you have a `MethodInfo` object that represents M on class A. If you use the `Invoke` method to invoke M on an object of type B, then reflection will use the implementation given by class B. Even if the object of type B is cast to A, the implementation given by class B is used (see code sample below).","nodes":[{"content":"Reflection uses dynamic method lookup when invoking virtual methods.","pos":[0,68]},{"content":"For example, suppose that class B inherits from class A and both implement a virtual method named M. Now suppose that you have a <ph id=\"ph1\">`MethodInfo`</ph> object that represents M on class A. If you use the <ph id=\"ph2\">`Invoke`</ph> method to invoke M on an object of type B, then reflection will use the implementation given by class B. Even if the object of type B is cast to A, the implementation given by class B is used (see code sample below).","pos":[69,488],"source":" For example, suppose that class B inherits from class A and both implement a virtual method named M. Now suppose that you have a `MethodInfo` object that represents M on class A. If you use the `Invoke` method to invoke M on an object of type B, then reflection will use the implementation given by class B. Even if the object of type B is cast to A, the implementation given by class B is used (see code sample below)."}]},{"pos":[2448,2659],"content":"On the other hand, if the method is non-virtual, then reflection will use the implementation given by the type from which the <ph id=\"ph1\">`MethodInfo`</ph> was obtained, regardless of the type of the object passed as the target.","source":"On the other hand, if the method is non-virtual, then reflection will use the implementation given by the type from which the `MethodInfo` was obtained, regardless of the type of the object passed as the target."},{"pos":[2666,2863],"content":"Access restrictions are ignored for fully trusted code. That is, private constructors, methods, fields, and properties can be accessed and invoked via reflection whenever the code is fully trusted.","nodes":[{"content":"Access restrictions are ignored for fully trusted code. That is, private constructors, methods, fields, and properties can be accessed and invoked via reflection whenever the code is fully trusted.","pos":[0,197],"nodes":[{"content":"Access restrictions are ignored for fully trusted code.","pos":[0,55]},{"content":"That is, private constructors, methods, fields, and properties can be accessed and invoked via reflection whenever the code is fully trusted.","pos":[56,197]}]}]},{"pos":[2870,3030],"content":"If the invoked method throws an exception, `TargetInvocationException.GetException` returns the exception. This implementation throws a `NotSupportedException`.","nodes":[{"content":"If the invoked method throws an exception, <ph id=\"ph1\">`TargetInvocationException.GetException`</ph> returns the exception.","pos":[0,106],"source":"If the invoked method throws an exception, `TargetInvocationException.GetException` returns the exception."},{"content":"This implementation throws a <ph id=\"ph1\">`NotSupportedException`</ph>.","pos":[107,160],"source":" This implementation throws a `NotSupportedException`."}]},{"pos":[3038,3608],"content":"[!NOTE]\n Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)","leadings":["","> "],"nodes":[{"content":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)","pos":[8,568],"nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public members if the caller has been granted <ph id=\"ph2\">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id=\"ph3\">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName&gt;</ph> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.","pos":[1,429],"source":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof."},{"content":"(See <bpt id=\"p1\">[</bpt>Security Considerations for Reflection<ept id=\"p1\">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)","pos":[430,560],"source":" (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)"}]}]},{"pos":[3619,3746],"content":"To use this functionality, your application should target the <ph id=\"ph1\">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.","source":"To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later."}],"pos":[48290,52067],"yaml":true,"extradata":"MT"},{"content":"The object on which to invoke the method or constructor. If a method is static, this argument is ignored. If a constructor is static, this argument must be `null` or an instance of the class that defines the constructor.","nodes":[{"pos":[0,220],"content":"The object on which to invoke the method or constructor. If a method is static, this argument is ignored. If a constructor is static, this argument must be `null` or an instance of the class that defines the constructor.","nodes":[{"content":"The object on which to invoke the method or constructor.","pos":[0,56]},{"content":"If a method is static, this argument is ignored.","pos":[57,105]},{"content":"If a constructor is static, this argument must be <ph id=\"ph1\">`null`</ph> or an instance of the class that defines the constructor.","pos":[106,220],"source":" If a constructor is static, this argument must be `null` or an instance of the class that defines the constructor."}]}],"pos":[53125,53346],"yaml":true},{"content":"A bitmask that is a combination of 0 or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>. If <code>binder</code> is `null`, this parameter is assigned the value <xref href=\"System.Reflection.BindingFlags.Default\"></xref>; thus, whatever you pass in is ignored.","nodes":[{"pos":[0,283],"content":"A bitmask that is a combination of 0 or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>. If <code>binder</code> is `null`, this parameter is assigned the value <xref href=\"System.Reflection.BindingFlags.Default\"></xref>; thus, whatever you pass in is ignored.","nodes":[{"content":"A bitmask that is a combination of 0 or more bit flags from <ph id=\"ph1\">&lt;xref href=\"System.Reflection.BindingFlags\"&gt;&lt;/xref&gt;</ph>.","pos":[0,112],"source":"A bitmask that is a combination of 0 or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">binder</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>, this parameter is assigned the value <ph id=\"ph3\">&lt;xref href=\"System.Reflection.BindingFlags.Default\"&gt;&lt;/xref&gt;</ph>; thus, whatever you pass in is ignored.","pos":[113,283],"source":" If <code>binder</code> is `null`, this parameter is assigned the value <xref href=\"System.Reflection.BindingFlags.Default\"></xref>; thus, whatever you pass in is ignored."}]}],"pos":[53429,53713],"yaml":true},{"content":"An object that enables the binding, coercion of argument types, invocation of members, and retrieval of `MemberInfo` objects via reflection. If <code>binder</code> is `null`, the default binder is used.","nodes":[{"pos":[0,202],"content":"An object that enables the binding, coercion of argument types, invocation of members, and retrieval of `MemberInfo` objects via reflection. If <code>binder</code> is `null`, the default binder is used.","nodes":[{"content":"An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <ph id=\"ph1\">`MemberInfo`</ph> objects via reflection.","pos":[0,140],"source":"An object that enables the binding, coercion of argument types, invocation of members, and retrieval of `MemberInfo` objects via reflection."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">binder</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>, the default binder is used.","pos":[141,202],"source":" If <code>binder</code> is `null`, the default binder is used."}]}],"pos":[53786,53989],"yaml":true},{"content":"An argument list for the invoked method or constructor. This is an array of objects with the same number, order, and type as the parameters of the method or constructor to be invoked. If there are no parameters, this should be `null`.  \n  \n If the method or constructor represented by this instance takes a ByRef parameter, there is no special attribute required for that parameter in order to invoke the method or constructor using this function. Any object in this array that is not explicitly initialized with a value will contain the default value for that object type. For reference-type elements, this value is `null`. For value-type elements, this value is 0, 0.0, or `false`, depending on the specific element type.","nodes":[{"pos":[0,234],"content":"An argument list for the invoked method or constructor. This is an array of objects with the same number, order, and type as the parameters of the method or constructor to be invoked. If there are no parameters, this should be `null`.","nodes":[{"content":"An argument list for the invoked method or constructor.","pos":[0,55]},{"content":"This is an array of objects with the same number, order, and type as the parameters of the method or constructor to be invoked.","pos":[56,183]},{"content":"If there are no parameters, this should be <ph id=\"ph1\">`null`</ph>.","pos":[184,234],"source":" If there are no parameters, this should be `null`."}]},{"pos":[241,723],"content":"If the method or constructor represented by this instance takes a ByRef parameter, there is no special attribute required for that parameter in order to invoke the method or constructor using this function. Any object in this array that is not explicitly initialized with a value will contain the default value for that object type. For reference-type elements, this value is `null`. For value-type elements, this value is 0, 0.0, or `false`, depending on the specific element type.","nodes":[{"content":"If the method or constructor represented by this instance takes a ByRef parameter, there is no special attribute required for that parameter in order to invoke the method or constructor using this function.","pos":[0,206]},{"content":"Any object in this array that is not explicitly initialized with a value will contain the default value for that object type.","pos":[207,332]},{"content":"For reference-type elements, this value is <ph id=\"ph1\">`null`</ph>.","pos":[333,383],"source":" For reference-type elements, this value is `null`."},{"content":"For value-type elements, this value is 0, 0.0, or <ph id=\"ph1\">`false`</ph>, depending on the specific element type.","pos":[384,482],"source":" For value-type elements, this value is 0, 0.0, or `false`, depending on the specific element type."}]}],"pos":[54057,54785],"yaml":true},{"content":"An instance of `CultureInfo` used to govern the coercion of types. If this is `null`, the `CultureInfo` for the current thread is used. (This is necessary to convert a `String` that represents 1000 to a `Double` value, for example, since 1000 is represented differently by different cultures.)","nodes":[{"pos":[0,293],"content":"An instance of `CultureInfo` used to govern the coercion of types. If this is `null`, the `CultureInfo` for the current thread is used. (This is necessary to convert a `String` that represents 1000 to a `Double` value, for example, since 1000 is represented differently by different cultures.)","nodes":[{"content":"An instance of <ph id=\"ph1\">`CultureInfo`</ph> used to govern the coercion of types.","pos":[0,66],"source":"An instance of `CultureInfo` used to govern the coercion of types."},{"content":"If this is <ph id=\"ph1\">`null`</ph>, the <ph id=\"ph2\">`CultureInfo`</ph> for the current thread is used.","pos":[67,135],"source":" If this is `null`, the `CultureInfo` for the current thread is used."},{"content":"(This is necessary to convert a <ph id=\"ph1\">`String`</ph> that represents 1000 to a <ph id=\"ph2\">`Double`</ph> value, for example, since 1000 is represented differently by different cultures.)","pos":[136,293],"source":" (This is necessary to convert a `String` that represents 1000 to a `Double` value, for example, since 1000 is represented differently by different cultures.)"}]}],"pos":[54867,55161],"yaml":true},{"content":"An `Object` containing the return value of the invoked method, or `null` in the case of a constructor, or `null` if the method's return type is `void`. Before calling the method or constructor, `Invoke` checks to see if the user has access permission and verifies that the parameters are valid.","nodes":[{"pos":[0,294],"content":"An `Object` containing the return value of the invoked method, or `null` in the case of a constructor, or `null` if the method's return type is `void`. Before calling the method or constructor, `Invoke` checks to see if the user has access permission and verifies that the parameters are valid.","nodes":[{"content":"An <ph id=\"ph1\">`Object`</ph> containing the return value of the invoked method, or <ph id=\"ph2\">`null`</ph> in the case of a constructor, or <ph id=\"ph3\">`null`</ph> if the method's return type is <ph id=\"ph4\">`void`</ph>.","pos":[0,151],"source":"An `Object` containing the return value of the invoked method, or `null` in the case of a constructor, or `null` if the method's return type is `void`."},{"content":"Before calling the method or constructor, <ph id=\"ph1\">`Invoke`</ph> checks to see if the user has access permission and verifies that the parameters are valid.","pos":[152,294],"source":" Before calling the method or constructor, `Invoke` checks to see if the user has access permission and verifies that the parameters are valid."}]}],"pos":[55218,55513],"yaml":true},{"content":"The <code>obj</code> parameter is `null` and the method is not static.  \n  \n -or-  \n  \n The method is not declared or inherited by the class of <code>obj</code>.  \n  \n -or-  \n  \n A static constructor is invoked, and <code>obj</code> is neither `null` nor an instance of the class that declared the constructor.","nodes":[{"pos":[0,70],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">obj</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph> and the method is not static.","source":"The <code>obj</code> parameter is `null` and the method is not static."},{"pos":[77,81],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[88,161],"content":"The method is not declared or inherited by the class of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">obj</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The method is not declared or inherited by the class of <code>obj</code>."},{"pos":[168,172],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[179,310],"content":"A static constructor is invoked, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">obj</ph><ept id=\"p1\">&lt;/code&gt;</ept> is neither <ph id=\"ph2\">`null`</ph> nor an instance of the class that declared the constructor.","source":"A static constructor is invoked, and <code>obj</code> is neither `null` nor an instance of the class that declared the constructor."}],"pos":[55688,56009],"yaml":true},{"content":"The type of the <code>parameters</code> parameter does not match the signature of the method or constructor reflected by this instance.","nodes":[{"pos":[0,135],"content":"The type of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">parameters</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter does not match the signature of the method or constructor reflected by this instance.","source":"The type of the <code>parameters</code> parameter does not match the signature of the method or constructor reflected by this instance."}],"pos":[56103,56239],"yaml":true},{"content":"The <code>parameters</code> array does not have the correct number of arguments.","nodes":[{"pos":[0,80],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">parameters</ph><ept id=\"p1\">&lt;/code&gt;</ept> array does not have the correct number of arguments.","source":"The <code>parameters</code> array does not have the correct number of arguments."}],"pos":[56379,56460],"yaml":true},{"content":"The invoked method or constructor throws an exception.","nodes":[{"pos":[0,54],"content":"The invoked method or constructor throws an exception.","nodes":[{"content":"The invoked method or constructor throws an exception.","pos":[0,54]}]}],"pos":[56592,56647],"yaml":true},{"content":"The caller does not have permission to execute the method or constructor that is represented by the current instance.","nodes":[{"pos":[0,117],"content":"The caller does not have permission to execute the method or constructor that is represented by the current instance.","nodes":[{"content":"The caller does not have permission to execute the method or constructor that is represented by the current instance.","pos":[0,117]}]}],"pos":[56749,56867],"yaml":true},{"content":"The type that declares the method is an open generic type. That is, the <xref href=\"System.Type.ContainsGenericParameters\"></xref> property returns `true` for the declaring type.","nodes":[{"pos":[0,178],"content":"The type that declares the method is an open generic type. That is, the <xref href=\"System.Type.ContainsGenericParameters\"></xref> property returns `true` for the declaring type.","nodes":[{"content":"The type that declares the method is an open generic type.","pos":[0,58]},{"content":"That is, the <ph id=\"ph1\">&lt;xref href=\"System.Type.ContainsGenericParameters\"&gt;&lt;/xref&gt;</ph> property returns <ph id=\"ph2\">`true`</ph> for the declaring type.","pos":[59,178],"source":" That is, the <xref href=\"System.Type.ContainsGenericParameters\"></xref> property returns `true` for the declaring type."}]}],"pos":[56977,57156],"yaml":true},{"content":"Invokes the method or constructor represented by the current instance, using the specified parameters.","nodes":[{"pos":[0,102],"content":"Invokes the method or constructor represented by the current instance, using the specified parameters.","nodes":[{"content":"Invokes the method or constructor represented by the current instance, using the specified parameters.","pos":[0,102]}]}],"pos":[58414,58517],"yaml":true},{"content":"This is a convenience method that calls the <xref:System.Reflection.MethodBase.Invoke%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> method overload, passing <xref:System.Reflection.BindingFlags.Default> for `invokeAttr` and `null` for `binder` and `culture`.  \n  \n If the invoked method throws an exception, the <xref:System.Exception.GetBaseException%2A?displayProperty=fullName> method returns the exception.  \n  \n To invoke a static method using its <xref:System.Reflection.MethodInfo> object, pass `null` for `obj`.  \n  \n> [!NOTE]\n>  If this method overload is used to invoke an instance constructor, the object supplied for `obj` is reinitialized; that is, all instance initializers are executed. The return value is `null`. If a class constructor is invoked, the class is reinitialized; that is, all class initializers are executed. The return value is `null`.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \n>   \n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.  \n  \n If a parameter of the current method is a value type, and the corresponding argument in `parameters` is `null`, the runtime passes a zero-initialized instance of the value type.","nodes":[{"pos":[0,349],"content":"This is a convenience method that calls the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodBase.Invoke%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29&gt;</ph> method overload, passing <ph id=\"ph2\">&lt;xref:System.Reflection.BindingFlags.Default&gt;</ph> for <ph id=\"ph3\">`invokeAttr`</ph> and <ph id=\"ph4\">`null`</ph> for <ph id=\"ph5\">`binder`</ph> and <ph id=\"ph6\">`culture`</ph>.","source":"This is a convenience method that calls the <xref:System.Reflection.MethodBase.Invoke%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> method overload, passing <xref:System.Reflection.BindingFlags.Default> for `invokeAttr` and `null` for `binder` and `culture`."},{"pos":[356,501],"content":"If the invoked method throws an exception, the <xref:System.Exception.GetBaseException%2A?displayProperty=fullName> method returns the exception.","nodes":[{"content":"If the invoked method throws an exception, the <ph id=\"ph1\">&lt;xref:System.Exception.GetBaseException%2A?displayProperty=fullName&gt;</ph> method returns the exception.","pos":[0,145],"source":"If the invoked method throws an exception, the <xref:System.Exception.GetBaseException%2A?displayProperty=fullName> method returns the exception."}]},{"pos":[508,610],"content":"To invoke a static method using its <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object, pass <ph id=\"ph2\">`null`</ph> for <ph id=\"ph3\">`obj`</ph>.","source":"To invoke a static method using its <xref:System.Reflection.MethodInfo> object, pass `null` for `obj`."},{"pos":[618,957],"content":"[!NOTE]\n If this method overload is used to invoke an instance constructor, the object supplied for `obj` is reinitialized; that is, all instance initializers are executed. The return value is `null`. If a class constructor is invoked, the class is reinitialized; that is, all class initializers are executed. The return value is `null`.","leadings":["","> "],"nodes":[{"content":" If this method overload is used to invoke an instance constructor, the object supplied for `obj` is reinitialized; that is, all instance initializers are executed. The return value is `null`. If a class constructor is invoked, the class is reinitialized; that is, all class initializers are executed. The return value is `null`.","pos":[8,337],"nodes":[{"content":"If this method overload is used to invoke an instance constructor, the object supplied for <ph id=\"ph1\">`obj`</ph> is reinitialized; that is, all instance initializers are executed.","pos":[1,164],"source":" If this method overload is used to invoke an instance constructor, the object supplied for `obj` is reinitialized; that is, all instance initializers are executed."},{"content":"The return value is <ph id=\"ph1\">`null`</ph>.","pos":[165,192],"source":" The return value is `null`."},{"content":"If a class constructor is invoked, the class is reinitialized; that is, all class initializers are executed.","pos":[193,301]},{"content":"The return value is <ph id=\"ph1\">`null`</ph>.","pos":[302,329],"source":" The return value is `null`."}]}]},{"pos":[965,1535],"content":"[!NOTE]\n Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)","leadings":["","> "],"nodes":[{"content":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)","pos":[8,568],"nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public members if the caller has been granted <ph id=\"ph2\">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id=\"ph3\">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName&gt;</ph> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.","pos":[1,429],"source":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof."},{"content":"(See <bpt id=\"p1\">[</bpt>Security Considerations for Reflection<ept id=\"p1\">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)","pos":[430,560],"source":" (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)"}]}]},{"pos":[1546,1673],"content":"To use this functionality, your application should target the <ph id=\"ph1\">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.","source":"To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later."},{"pos":[1680,1857],"content":"If a parameter of the current method is a value type, and the corresponding argument in <ph id=\"ph1\">`parameters`</ph> is <ph id=\"ph2\">`null`</ph>, the runtime passes a zero-initialized instance of the value type.","source":"If a parameter of the current method is a value type, and the corresponding argument in `parameters` is `null`, the runtime passes a zero-initialized instance of the value type."}],"pos":[58528,60402],"yaml":true,"extradata":"MT"},{"content":"The object on which to invoke the method or constructor. If a method is static, this argument is ignored. If a constructor is static, this argument must be `null` or an instance of the class that defines the constructor.","nodes":[{"pos":[0,220],"content":"The object on which to invoke the method or constructor. If a method is static, this argument is ignored. If a constructor is static, this argument must be `null` or an instance of the class that defines the constructor.","nodes":[{"content":"The object on which to invoke the method or constructor.","pos":[0,56]},{"content":"If a method is static, this argument is ignored.","pos":[57,105]},{"content":"If a constructor is static, this argument must be <ph id=\"ph1\">`null`</ph> or an instance of the class that defines the constructor.","pos":[106,220],"source":" If a constructor is static, this argument must be `null` or an instance of the class that defines the constructor."}]}],"pos":[61317,61538],"yaml":true},{"content":"An argument list for the invoked method or constructor. This is an array of objects with the same number, order, and type as the parameters of the method or constructor to be invoked. If there are no parameters, <code>parameters</code> should be `null`.  \n  \n If the method or constructor represented by this instance takes a `ref` parameter (`ByRef` in Visual Basic), no special attribute is required for that parameter in order to invoke the method or constructor using this function. Any object in this array that is not explicitly initialized with a value will contain the default value for that object type. For reference-type elements, this value is `null`. For value-type elements, this value is 0, 0.0, or `false`, depending on the specific element type.","nodes":[{"pos":[0,253],"content":"An argument list for the invoked method or constructor. This is an array of objects with the same number, order, and type as the parameters of the method or constructor to be invoked. If there are no parameters, <code>parameters</code> should be `null`.","nodes":[{"content":"An argument list for the invoked method or constructor.","pos":[0,55]},{"content":"This is an array of objects with the same number, order, and type as the parameters of the method or constructor to be invoked.","pos":[56,183]},{"content":"If there are no parameters, <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">parameters</ph><ept id=\"p1\">&lt;/code&gt;</ept> should be <ph id=\"ph2\">`null`</ph>.","pos":[184,253],"source":" If there are no parameters, <code>parameters</code> should be `null`."}]},{"pos":[260,762],"content":"If the method or constructor represented by this instance takes a `ref` parameter (`ByRef` in Visual Basic), no special attribute is required for that parameter in order to invoke the method or constructor using this function. Any object in this array that is not explicitly initialized with a value will contain the default value for that object type. For reference-type elements, this value is `null`. For value-type elements, this value is 0, 0.0, or `false`, depending on the specific element type.","nodes":[{"content":"If the method or constructor represented by this instance takes a <ph id=\"ph1\">`ref`</ph> parameter (<ph id=\"ph2\">`ByRef`</ph> in Visual Basic), no special attribute is required for that parameter in order to invoke the method or constructor using this function.","pos":[0,226],"source":"If the method or constructor represented by this instance takes a `ref` parameter (`ByRef` in Visual Basic), no special attribute is required for that parameter in order to invoke the method or constructor using this function."},{"content":"Any object in this array that is not explicitly initialized with a value will contain the default value for that object type.","pos":[227,352]},{"content":"For reference-type elements, this value is <ph id=\"ph1\">`null`</ph>.","pos":[353,403],"source":" For reference-type elements, this value is `null`."},{"content":"For value-type elements, this value is 0, 0.0, or <ph id=\"ph1\">`false`</ph>, depending on the specific element type.","pos":[404,502],"source":" For value-type elements, this value is 0, 0.0, or `false`, depending on the specific element type."}]}],"pos":[61606,62373],"yaml":true},{"content":"An object containing the return value of the invoked method, or `null` in the case of a constructor.","nodes":[{"pos":[0,100],"content":"An object containing the return value of the invoked method, or <ph id=\"ph1\">`null`</ph> in the case of a constructor.","source":"An object containing the return value of the invoked method, or `null` in the case of a constructor."}],"pos":[62430,62531],"yaml":true},{"content":"<block subset=\"none\" type=\"note\">\n      <p>  \n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch <xref href=\"System.Exception\"></xref> instead.  \n  \n</p>\n    </block>  \n  \n The <code>obj</code> parameter is `null` and the method is not static.  \n  \n -or-  \n  \n The method is not declared or inherited by the class of <code>obj</code>.  \n  \n -or-  \n  \n A static constructor is invoked, and <code>obj</code> is neither `null` nor an instance of the class that declared the constructor.","nodes":[{"pos":[0,310],"content":"<block subset=\"none\" type=\"note\">\n      <p>  \n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch <xref href=\"System.Exception\"></xref> instead.","nodes":[{"content":"In the <bpt id=\"p1\">[</bpt>.NET for Windows Store apps<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id=\"p2\">[</bpt>Portable Class Library<ept id=\"p2\">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch <ph id=\"ph1\">&lt;xref href=\"System.Exception\"&gt;&lt;/xref&gt;</ph> instead.","pos":[47,310],"source":" In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch <xref href=\"System.Exception\"></xref> instead."}]},{"pos":[316,333],"content":"</p>\n    </block>","nodes":[]},{"pos":[340,410],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">obj</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph> and the method is not static.","source":"The <code>obj</code> parameter is `null` and the method is not static."},{"pos":[417,421],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[428,501],"content":"The method is not declared or inherited by the class of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">obj</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The method is not declared or inherited by the class of <code>obj</code>."},{"pos":[508,512],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[519,650],"content":"A static constructor is invoked, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">obj</ph><ept id=\"p1\">&lt;/code&gt;</ept> is neither <ph id=\"ph2\">`null`</ph> nor an instance of the class that declared the constructor.","source":"A static constructor is invoked, and <code>obj</code> is neither `null` nor an instance of the class that declared the constructor."}],"pos":[62706,63380],"yaml":true},{"content":"The elements of the <code>parameters</code> array do not match the signature of the method or constructor reflected by this instance.","nodes":[{"pos":[0,133],"content":"The elements of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">parameters</ph><ept id=\"p1\">&lt;/code&gt;</ept> array do not match the signature of the method or constructor reflected by this instance.","source":"The elements of the <code>parameters</code> array do not match the signature of the method or constructor reflected by this instance."}],"pos":[63474,63608],"yaml":true},{"content":"The invoked method or constructor throws an exception.  \n  \n -or-  \n  \n The current instance is a <xref href=\"System.Reflection.Emit.DynamicMethod\"></xref> that contains unverifiable code. See the \"Verification\" section in Remarks for <xref href=\"System.Reflection.Emit.DynamicMethod\"></xref>.","nodes":[{"pos":[0,54],"content":"The invoked method or constructor throws an exception.","nodes":[{"content":"The invoked method or constructor throws an exception.","pos":[0,54]}]},{"pos":[61,65],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[72,293],"content":"The current instance is a <xref href=\"System.Reflection.Emit.DynamicMethod\"></xref> that contains unverifiable code. See the \"Verification\" section in Remarks for <xref href=\"System.Reflection.Emit.DynamicMethod\"></xref>.","nodes":[{"content":"The current instance is a <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.DynamicMethod\"&gt;&lt;/xref&gt;</ph> that contains unverifiable code.","pos":[0,116],"source":"The current instance is a <xref href=\"System.Reflection.Emit.DynamicMethod\"></xref> that contains unverifiable code."},{"content":"See the \"Verification\" section in Remarks for <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.DynamicMethod\"&gt;&lt;/xref&gt;</ph>.","pos":[117,221],"source":" See the \"Verification\" section in Remarks for <xref href=\"System.Reflection.Emit.DynamicMethod\"></xref>."}]}],"pos":[63740,64046],"yaml":true},{"content":"The <code>parameters</code> array does not have the correct number of arguments.","nodes":[{"pos":[0,80],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">parameters</ph><ept id=\"p1\">&lt;/code&gt;</ept> array does not have the correct number of arguments.","source":"The <code>parameters</code> array does not have the correct number of arguments."}],"pos":[64186,64267],"yaml":true},{"content":"<block subset=\"none\" type=\"note\">\n      <p>  \n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\"System.MemberAccessException\"></xref>, instead.  \n  \n</p>\n    </block>  \n  \n The caller does not have permission to execute the method or constructor that is represented by the current instance.","nodes":[{"pos":[0,349],"content":"<block subset=\"none\" type=\"note\">\n      <p>  \n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\"System.MemberAccessException\"></xref>, instead.","nodes":[{"content":"In the <bpt id=\"p1\">[</bpt>.NET for Windows Store apps<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id=\"p2\">[</bpt>Portable Class Library<ept id=\"p2\">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch the base class exception, <ph id=\"ph1\">&lt;xref href=\"System.MemberAccessException\"&gt;&lt;/xref&gt;</ph>, instead.","pos":[47,349],"source":" In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\"System.MemberAccessException\"></xref>, instead."}]},{"pos":[355,372],"content":"</p>\n    </block>","nodes":[]},{"pos":[379,496],"content":"The caller does not have permission to execute the method or constructor that is represented by the current instance.","nodes":[{"content":"The caller does not have permission to execute the method or constructor that is represented by the current instance.","pos":[0,117]}]}],"pos":[64369,64881],"yaml":true},{"content":"The type that declares the method is an open generic type. That is, the <xref href=\"System.Type.ContainsGenericParameters\"></xref> property returns `true` for the declaring type.","nodes":[{"pos":[0,178],"content":"The type that declares the method is an open generic type. That is, the <xref href=\"System.Type.ContainsGenericParameters\"></xref> property returns `true` for the declaring type.","nodes":[{"content":"The type that declares the method is an open generic type.","pos":[0,58]},{"content":"That is, the <ph id=\"ph1\">&lt;xref href=\"System.Type.ContainsGenericParameters\"&gt;&lt;/xref&gt;</ph> property returns <ph id=\"ph2\">`true`</ph> for the declaring type.","pos":[59,178],"source":" That is, the <xref href=\"System.Type.ContainsGenericParameters\"></xref> property returns `true` for the declaring type."}]}],"pos":[64991,65170],"yaml":true},{"content":"The current instance is a <xref href=\"System.Reflection.Emit.MethodBuilder\"></xref>.","nodes":[{"pos":[0,84],"content":"The current instance is a <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.MethodBuilder\"&gt;&lt;/xref&gt;</ph>.","source":"The current instance is a <xref href=\"System.Reflection.Emit.MethodBuilder\"></xref>."}],"pos":[65272,65357],"yaml":true},{"content":"Gets a value indicating whether the method is abstract.","nodes":[{"pos":[0,55],"content":"Gets a value indicating whether the method is abstract.","nodes":[{"content":"Gets a value indicating whether the method is abstract.","pos":[0,55]}]}],"pos":[66855,66911],"yaml":true},{"content":"An abstract member is declared on a base class and has no implementation supplied.  \n  \n To get the <xref:System.Reflection.MethodBase>, first get the type. From the type, get the method. From the method, get the `MethodBase`. If the `MethodBase` or constructor is other than public, it is protected and cannot be readily accessed. To access a non-public method, set the <xref:System.Reflection.BindingFlags> mask to `NonPublic` in `GetMethod`.","nodes":[{"pos":[0,82],"content":"An abstract member is declared on a base class and has no implementation supplied.","nodes":[{"content":"An abstract member is declared on a base class and has no implementation supplied.","pos":[0,82]}]},{"pos":[89,444],"content":"To get the <xref:System.Reflection.MethodBase>, first get the type. From the type, get the method. From the method, get the `MethodBase`. If the `MethodBase` or constructor is other than public, it is protected and cannot be readily accessed. To access a non-public method, set the <xref:System.Reflection.BindingFlags> mask to `NonPublic` in `GetMethod`.","nodes":[{"content":"To get the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodBase&gt;</ph>, first get the type.","pos":[0,67],"source":"To get the <xref:System.Reflection.MethodBase>, first get the type."},{"content":"From the type, get the method.","pos":[68,98]},{"content":"From the method, get the <ph id=\"ph1\">`MethodBase`</ph>.","pos":[99,137],"source":" From the method, get the `MethodBase`."},{"content":"If the <ph id=\"ph1\">`MethodBase`</ph> or constructor is other than public, it is protected and cannot be readily accessed.","pos":[138,242],"source":" If the `MethodBase` or constructor is other than public, it is protected and cannot be readily accessed."},{"content":"To access a non-public method, set the <ph id=\"ph1\">&lt;xref:System.Reflection.BindingFlags&gt;</ph> mask to <ph id=\"ph2\">`NonPublic`</ph> in <ph id=\"ph3\">`GetMethod`</ph>.","pos":[243,355],"source":" To access a non-public method, set the <xref:System.Reflection.BindingFlags> mask to `NonPublic` in `GetMethod`."}]}],"pos":[66922,67371],"yaml":true,"extradata":"MT"},{"content":"`true` if the method is abstract; otherwise, `false`.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">`true`</ph> if the method is abstract; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the method is abstract; otherwise, `false`."}],"pos":[68089,68145],"yaml":true},{"content":"Gets a value indicating whether the potential visibility of this method or constructor is described by <xref href=\"System.Reflection.MethodAttributes.Assembly\"></xref>; that is, the method or constructor is visible at most to other types in the same assembly, and is not visible to derived types outside the assembly.","nodes":[{"pos":[0,317],"content":"Gets a value indicating whether the potential visibility of this method or constructor is described by <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodAttributes.Assembly\"&gt;&lt;/xref&gt;</ph>; that is, the method or constructor is visible at most to other types in the same assembly, and is not visible to derived types outside the assembly.","source":"Gets a value indicating whether the potential visibility of this method or constructor is described by <xref href=\"System.Reflection.MethodAttributes.Assembly\"></xref>; that is, the method or constructor is visible at most to other types in the same assembly, and is not visible to derived types outside the assembly."}],"pos":[69696,70014],"yaml":true},{"content":"The actual visibility of a method is limited by the visibility of its type. The <xref:System.Reflection.MethodBase.IsAssembly%2A> property might be `true` for a method, but if it is a method of a private nested type then the method is not visible outside the containing type.  \n  \n The visibility of a method or constructor is exactly described by <xref:System.Reflection.MethodAttributes?displayProperty=fullName> if the only visibility modifier is `internal` (`Friend` in Visual Basic). This property is `false` for methods that are `protected internal` in C# (`Protected Friend` in Visual Basic, `protected public` in C++); use the <xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A> property to identify such methods.","nodes":[{"pos":[0,275],"content":"The actual visibility of a method is limited by the visibility of its type. The <xref:System.Reflection.MethodBase.IsAssembly%2A> property might be `true` for a method, but if it is a method of a private nested type then the method is not visible outside the containing type.","nodes":[{"content":"The actual visibility of a method is limited by the visibility of its type.","pos":[0,75]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.MethodBase.IsAssembly%2A&gt;</ph> property might be <ph id=\"ph2\">`true`</ph> for a method, but if it is a method of a private nested type then the method is not visible outside the containing type.","pos":[76,275],"source":" The <xref:System.Reflection.MethodBase.IsAssembly%2A> property might be `true` for a method, but if it is a method of a private nested type then the method is not visible outside the containing type."}]},{"pos":[282,727],"content":"The visibility of a method or constructor is exactly described by <xref:System.Reflection.MethodAttributes?displayProperty=fullName> if the only visibility modifier is `internal` (`Friend` in Visual Basic). This property is `false` for methods that are `protected internal` in C# (`Protected Friend` in Visual Basic, `protected public` in C++); use the <xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A> property to identify such methods.","nodes":[{"content":"The visibility of a method or constructor is exactly described by <ph id=\"ph1\">&lt;xref:System.Reflection.MethodAttributes?displayProperty=fullName&gt;</ph> if the only visibility modifier is <ph id=\"ph2\">`internal`</ph> (<ph id=\"ph3\">`Friend`</ph> in Visual Basic).","pos":[0,206],"source":"The visibility of a method or constructor is exactly described by <xref:System.Reflection.MethodAttributes?displayProperty=fullName> if the only visibility modifier is `internal` (`Friend` in Visual Basic)."},{"content":"This property is <ph id=\"ph1\">`false`</ph> for methods that are <ph id=\"ph2\">`protected internal`</ph> in C# (<ph id=\"ph3\">`Protected Friend`</ph> in Visual Basic, <ph id=\"ph4\">`protected public`</ph> in C++); use the <ph id=\"ph5\">&lt;xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A&gt;</ph> property to identify such methods.","pos":[207,445],"source":" This property is `false` for methods that are `protected internal` in C# (`Protected Friend` in Visual Basic, `protected public` in C++); use the <xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A> property to identify such methods."}]}],"pos":[70025,70757],"yaml":true,"extradata":"MT"},{"content":"`true` if the visibility of this method or constructor is exactly described by <xref href=\"System.Reflection.MethodAttributes.Assembly\"></xref>; otherwise, `false`.","nodes":[{"pos":[0,164],"content":"<ph id=\"ph1\">`true`</ph> if the visibility of this method or constructor is exactly described by <ph id=\"ph2\">&lt;xref href=\"System.Reflection.MethodAttributes.Assembly\"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the visibility of this method or constructor is exactly described by <xref href=\"System.Reflection.MethodAttributes.Assembly\"></xref>; otherwise, `false`."}],"pos":[71933,72100],"yaml":true},{"content":"Gets a value indicating whether the method is a constructor.","nodes":[{"pos":[0,60],"content":"Gets a value indicating whether the method is a constructor.","nodes":[{"content":"Gets a value indicating whether the method is a constructor.","pos":[0,60]}]}],"pos":[73669,73730],"yaml":true},{"content":"> [!NOTE]\n>  The <xref:System.Reflection.MethodBase.IsConstructor%2A> property returns `false` for a <xref:System.Reflection.Emit.ConstructorBuilder> object in a dynamic type, unless the <xref:System.Reflection.MethodAttributes?displayProperty=fullName> flag was included in the `attributes` parameter when the constructor was defined. Omitting the <xref:System.Reflection.MethodAttributes.RTSpecialName> flag does not affect the correctness of the emitted constructor.","nodes":[{"pos":[2,469],"content":"[!NOTE]\n The <xref:System.Reflection.MethodBase.IsConstructor%2A> property returns `false` for a <xref:System.Reflection.Emit.ConstructorBuilder> object in a dynamic type, unless the <xref:System.Reflection.MethodAttributes?displayProperty=fullName> flag was included in the `attributes` parameter when the constructor was defined. Omitting the <xref:System.Reflection.MethodAttributes.RTSpecialName> flag does not affect the correctness of the emitted constructor.","leadings":["","> "],"nodes":[{"content":" The <xref:System.Reflection.MethodBase.IsConstructor%2A> property returns `false` for a <xref:System.Reflection.Emit.ConstructorBuilder> object in a dynamic type, unless the <xref:System.Reflection.MethodAttributes?displayProperty=fullName> flag was included in the `attributes` parameter when the constructor was defined. Omitting the <xref:System.Reflection.MethodAttributes.RTSpecialName> flag does not affect the correctness of the emitted constructor.","pos":[8,465],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.MethodBase.IsConstructor%2A&gt;</ph> property returns <ph id=\"ph2\">`false`</ph> for a <ph id=\"ph3\">&lt;xref:System.Reflection.Emit.ConstructorBuilder&gt;</ph> object in a dynamic type, unless the <ph id=\"ph4\">&lt;xref:System.Reflection.MethodAttributes?displayProperty=fullName&gt;</ph> flag was included in the <ph id=\"ph5\">`attributes`</ph> parameter when the constructor was defined.","pos":[1,323],"source":" The <xref:System.Reflection.MethodBase.IsConstructor%2A> property returns `false` for a <xref:System.Reflection.Emit.ConstructorBuilder> object in a dynamic type, unless the <xref:System.Reflection.MethodAttributes?displayProperty=fullName> flag was included in the `attributes` parameter when the constructor was defined."},{"content":"Omitting the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodAttributes.RTSpecialName&gt;</ph> flag does not affect the correctness of the emitted constructor.","pos":[324,457],"source":" Omitting the <xref:System.Reflection.MethodAttributes.RTSpecialName> flag does not affect the correctness of the emitted constructor."}]}]}],"pos":[73741,74223],"yaml":true,"extradata":"MT"},{"content":"`true` if this method is a constructor represented by a <xref href=\"System.Reflection.ConstructorInfo\"></xref> object (see note in Remarks about <xref href=\"System.Reflection.Emit.ConstructorBuilder\"></xref> objects); otherwise, `false`.","nodes":[{"pos":[0,237],"content":"<ph id=\"ph1\">`true`</ph> if this method is a constructor represented by a <ph id=\"ph2\">&lt;xref href=\"System.Reflection.ConstructorInfo\"&gt;&lt;/xref&gt;</ph> object (see note in Remarks about <ph id=\"ph3\">&lt;xref href=\"System.Reflection.Emit.ConstructorBuilder\"&gt;&lt;/xref&gt;</ph> objects); otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if this method is a constructor represented by a <xref href=\"System.Reflection.ConstructorInfo\"></xref> object (see note in Remarks about <xref href=\"System.Reflection.Emit.ConstructorBuilder\"></xref> objects); otherwise, `false`."}],"pos":[74405,74645],"yaml":true},{"content":"Gets a value indicating whether the visibility of this method or constructor is described by <xref href=\"System.Reflection.MethodAttributes.Family\"></xref>; that is, the method or constructor is visible only within its class and derived classes.","nodes":[{"pos":[0,245],"content":"Gets a value indicating whether the visibility of this method or constructor is described by <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodAttributes.Family\"&gt;&lt;/xref&gt;</ph>; that is, the method or constructor is visible only within its class and derived classes.","source":"Gets a value indicating whether the visibility of this method or constructor is described by <xref href=\"System.Reflection.MethodAttributes.Family\"></xref>; that is, the method or constructor is visible only within its class and derived classes."}],"pos":[76262,76508],"yaml":true},{"content":"The visibility of a method or constructor is exactly described by <xref:System.Reflection.MethodAttributes?displayProperty=fullName> if the only visibility modifier is `protected`. This property is `false` for methods that are `protected internal` in C# (`Protected Friend` in Visual Basic, `protected public` in C++); use the <xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A> property to identify such methods.","nodes":[{"pos":[0,419],"content":"The visibility of a method or constructor is exactly described by <xref:System.Reflection.MethodAttributes?displayProperty=fullName> if the only visibility modifier is `protected`. This property is `false` for methods that are `protected internal` in C# (`Protected Friend` in Visual Basic, `protected public` in C++); use the <xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A> property to identify such methods.","nodes":[{"content":"The visibility of a method or constructor is exactly described by <ph id=\"ph1\">&lt;xref:System.Reflection.MethodAttributes?displayProperty=fullName&gt;</ph> if the only visibility modifier is <ph id=\"ph2\">`protected`</ph>.","pos":[0,180],"source":"The visibility of a method or constructor is exactly described by <xref:System.Reflection.MethodAttributes?displayProperty=fullName> if the only visibility modifier is `protected`."},{"content":"This property is <ph id=\"ph1\">`false`</ph> for methods that are <ph id=\"ph2\">`protected internal`</ph> in C# (<ph id=\"ph3\">`Protected Friend`</ph> in Visual Basic, <ph id=\"ph4\">`protected public`</ph> in C++); use the <ph id=\"ph5\">&lt;xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A&gt;</ph> property to identify such methods.","pos":[181,419],"source":" This property is `false` for methods that are `protected internal` in C# (`Protected Friend` in Visual Basic, `protected public` in C++); use the <xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A> property to identify such methods."}]}],"pos":[76519,76939],"yaml":true,"extradata":"MT"},{"content":"`true` if access to this method or constructor is exactly described by <xref href=\"System.Reflection.MethodAttributes.Family\"></xref>; otherwise, `false`.","nodes":[{"pos":[0,154],"content":"<ph id=\"ph1\">`true`</ph> if access to this method or constructor is exactly described by <ph id=\"ph2\">&lt;xref href=\"System.Reflection.MethodAttributes.Family\"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if access to this method or constructor is exactly described by <xref href=\"System.Reflection.MethodAttributes.Family\"></xref>; otherwise, `false`."}],"pos":[78113,78270],"yaml":true},{"content":"Gets a value indicating whether the visibility of this method or constructor is described by <xref href=\"System.Reflection.MethodAttributes.FamANDAssem\"></xref>; that is, the method or constructor can be called by derived classes, but only if they are in the same assembly.","nodes":[{"pos":[0,273],"content":"Gets a value indicating whether the visibility of this method or constructor is described by <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodAttributes.FamANDAssem\"&gt;&lt;/xref&gt;</ph>; that is, the method or constructor can be called by derived classes, but only if they are in the same assembly.","source":"Gets a value indicating whether the visibility of this method or constructor is described by <xref href=\"System.Reflection.MethodAttributes.FamANDAssem\"></xref>; that is, the method or constructor can be called by derived classes, but only if they are in the same assembly."}],"pos":[79873,80147],"yaml":true},{"content":"The visibility of a method or constructor is exactly described by <xref:System.Reflection.MethodAttributes?displayProperty=fullName> if the visibility modifier is `protected private` in C++. Methods with this visibility cannot be defined in Visual Basic or C#.","nodes":[{"pos":[0,260],"content":"The visibility of a method or constructor is exactly described by <xref:System.Reflection.MethodAttributes?displayProperty=fullName> if the visibility modifier is `protected private` in C++. Methods with this visibility cannot be defined in Visual Basic or C#.","nodes":[{"content":"The visibility of a method or constructor is exactly described by <ph id=\"ph1\">&lt;xref:System.Reflection.MethodAttributes?displayProperty=fullName&gt;</ph> if the visibility modifier is <ph id=\"ph2\">`protected private`</ph> in C++.","pos":[0,190],"source":"The visibility of a method or constructor is exactly described by <xref:System.Reflection.MethodAttributes?displayProperty=fullName> if the visibility modifier is `protected private` in C++."},{"content":"Methods with this visibility cannot be defined in Visual Basic or C#.","pos":[191,260]}]}],"pos":[80158,80419],"yaml":true,"extradata":"MT"},{"content":"`true` if access to this method or constructor is exactly described by <xref href=\"System.Reflection.MethodAttributes.FamANDAssem\"></xref>; otherwise, `false`.","nodes":[{"pos":[0,159],"content":"<ph id=\"ph1\">`true`</ph> if access to this method or constructor is exactly described by <ph id=\"ph2\">&lt;xref href=\"System.Reflection.MethodAttributes.FamANDAssem\"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if access to this method or constructor is exactly described by <xref href=\"System.Reflection.MethodAttributes.FamANDAssem\"></xref>; otherwise, `false`."}],"pos":[81604,81766],"yaml":true},{"content":"Gets a value indicating whether the potential visibility of this method or constructor is described by <xref href=\"System.Reflection.MethodAttributes.FamORAssem\"></xref>; that is, the method or constructor can be called by derived classes wherever they are, and by classes in the same assembly.","nodes":[{"pos":[0,294],"content":"Gets a value indicating whether the potential visibility of this method or constructor is described by <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodAttributes.FamORAssem\"&gt;&lt;/xref&gt;</ph>; that is, the method or constructor can be called by derived classes wherever they are, and by classes in the same assembly.","source":"Gets a value indicating whether the potential visibility of this method or constructor is described by <xref href=\"System.Reflection.MethodAttributes.FamORAssem\"></xref>; that is, the method or constructor can be called by derived classes wherever they are, and by classes in the same assembly."}],"pos":[83374,83669],"yaml":true},{"content":"If a type member has <xref:System.Reflection.MethodAttributes?displayProperty=fullName>visibility, it can be called from any member in a derived class or any member in the same assembly, but not from any other type.  \n  \n The actual visibility of a method is limited by the visibility of its type. The <xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A> property might be `true` for a method, but if it is a method of a private nested type then the method is not visible outside the containing type.  \n  \n The visibility of a method or constructor is exactly described by <xref:System.Reflection.MethodAttributes?displayProperty=fullName> if the visibility modifier is `protected internal` in C# (`Protected Friend` in Visual Basic, `protected public` in C++).","nodes":[{"pos":[0,215],"content":"If a type member has <xref:System.Reflection.MethodAttributes?displayProperty=fullName>visibility, it can be called from any member in a derived class or any member in the same assembly, but not from any other type.","nodes":[{"content":"If a type member has <ph id=\"ph1\">&lt;xref:System.Reflection.MethodAttributes?displayProperty=fullName&gt;</ph>visibility, it can be called from any member in a derived class or any member in the same assembly, but not from any other type.","pos":[0,215],"source":"If a type member has <xref:System.Reflection.MethodAttributes?displayProperty=fullName>visibility, it can be called from any member in a derived class or any member in the same assembly, but not from any other type."}]},{"pos":[222,505],"content":"The actual visibility of a method is limited by the visibility of its type. The <xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A> property might be `true` for a method, but if it is a method of a private nested type then the method is not visible outside the containing type.","nodes":[{"content":"The actual visibility of a method is limited by the visibility of its type.","pos":[0,75]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A&gt;</ph> property might be <ph id=\"ph2\">`true`</ph> for a method, but if it is a method of a private nested type then the method is not visible outside the containing type.","pos":[76,283],"source":" The <xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A> property might be `true` for a method, but if it is a method of a private nested type then the method is not visible outside the containing type."}]},{"pos":[512,766],"content":"The visibility of a method or constructor is exactly described by <ph id=\"ph1\">&lt;xref:System.Reflection.MethodAttributes?displayProperty=fullName&gt;</ph> if the visibility modifier is <ph id=\"ph2\">`protected internal`</ph> in C# (<ph id=\"ph3\">`Protected Friend`</ph> in Visual Basic, <ph id=\"ph4\">`protected public`</ph> in C++).","source":"The visibility of a method or constructor is exactly described by <xref:System.Reflection.MethodAttributes?displayProperty=fullName> if the visibility modifier is `protected internal` in C# (`Protected Friend` in Visual Basic, `protected public` in C++)."}],"pos":[83680,84453],"yaml":true,"extradata":"MT"},{"content":"`true` if access to this method or constructor is exactly described by <xref href=\"System.Reflection.MethodAttributes.FamORAssem\"></xref>; otherwise, `false`.","nodes":[{"pos":[0,158],"content":"<ph id=\"ph1\">`true`</ph> if access to this method or constructor is exactly described by <ph id=\"ph2\">&lt;xref href=\"System.Reflection.MethodAttributes.FamORAssem\"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if access to this method or constructor is exactly described by <xref href=\"System.Reflection.MethodAttributes.FamORAssem\"></xref>; otherwise, `false`."}],"pos":[85637,85798],"yaml":true},{"content":"Gets a value indicating whether this method is `final`.","nodes":[{"pos":[0,55],"content":"Gets a value indicating whether this method is <ph id=\"ph1\">`final`</ph>.","source":"Gets a value indicating whether this method is `final`."}],"pos":[87339,87395],"yaml":true},{"content":"To determine if a method is overridable, it is not sufficient to check that <xref:System.Reflection.MethodBase.IsVirtual%2A> is `true`. For a method to be overridable, `IsVirtual` must be `true` and `IsFinal` must be `false`. For example, a method might be non-virtual, but it implements an interface method. The common language runtime requires that all methods that implement interface members must be marked as `virtual`; therefore, the compiler marks the method `virtual final`. So there are cases where a method is marked as `virtual` but is still not overridable.  \n  \n To establish with certainty whether a method is overridable, use code such as this:  \n  \n `if (MethodInfo.IsVirtual && !MethodInfo.IsFinal)`  \n  \n If `IsVirtual` is `false` or `IsFinal` is `true`, then the method cannot be overridden.","nodes":[{"pos":[0,569],"content":"To determine if a method is overridable, it is not sufficient to check that <xref:System.Reflection.MethodBase.IsVirtual%2A> is `true`. For a method to be overridable, `IsVirtual` must be `true` and `IsFinal` must be `false`. For example, a method might be non-virtual, but it implements an interface method. The common language runtime requires that all methods that implement interface members must be marked as `virtual`; therefore, the compiler marks the method `virtual final`. So there are cases where a method is marked as `virtual` but is still not overridable.","nodes":[{"content":"To determine if a method is overridable, it is not sufficient to check that <ph id=\"ph1\">&lt;xref:System.Reflection.MethodBase.IsVirtual%2A&gt;</ph> is <ph id=\"ph2\">`true`</ph>.","pos":[0,135],"source":"To determine if a method is overridable, it is not sufficient to check that <xref:System.Reflection.MethodBase.IsVirtual%2A> is `true`."},{"content":"For a method to be overridable, <ph id=\"ph1\">`IsVirtual`</ph> must be <ph id=\"ph2\">`true`</ph> and <ph id=\"ph3\">`IsFinal`</ph> must be <ph id=\"ph4\">`false`</ph>.","pos":[136,225],"source":" For a method to be overridable, `IsVirtual` must be `true` and `IsFinal` must be `false`."},{"content":"For example, a method might be non-virtual, but it implements an interface method.","pos":[226,308]},{"content":"The common language runtime requires that all methods that implement interface members must be marked as <ph id=\"ph1\">`virtual`</ph>; therefore, the compiler marks the method <ph id=\"ph2\">`virtual final`</ph>.","pos":[309,482],"source":" The common language runtime requires that all methods that implement interface members must be marked as `virtual`; therefore, the compiler marks the method `virtual final`."},{"content":"So there are cases where a method is marked as <ph id=\"ph1\">`virtual`</ph> but is still not overridable.","pos":[483,569],"source":" So there are cases where a method is marked as `virtual` but is still not overridable."}]},{"pos":[576,659],"content":"To establish with certainty whether a method is overridable, use code such as this:","nodes":[{"content":"To establish with certainty whether a method is overridable, use code such as this:","pos":[0,83]}]},{"pos":[723,810],"content":"If <ph id=\"ph1\">`IsVirtual`</ph> is <ph id=\"ph2\">`false`</ph> or <ph id=\"ph3\">`IsFinal`</ph> is <ph id=\"ph4\">`true`</ph>, then the method cannot be overridden.","source":"If `IsVirtual` is `false` or `IsFinal` is `true`, then the method cannot be overridden."}],"pos":[87406,88225],"yaml":true,"extradata":"MT"},{"content":"`true` if this method is `final`; otherwise, `false`.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">`true`</ph> if this method is <ph id=\"ph2\">`final`</ph>; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if this method is `final`; otherwise, `false`."}],"pos":[89049,89105],"yaml":true},{"content":"Gets a value indicating whether the method is generic.","nodes":[{"pos":[0,54],"content":"Gets a value indicating whether the method is generic.","nodes":[{"content":"Gets a value indicating whether the method is generic.","pos":[0,54]}]}],"pos":[90683,90738],"yaml":true},{"content":"Use the <xref:System.Reflection.MethodBase.IsGenericMethod%2A> property to determine whether the current <xref:System.Reflection.MethodBase> object represents a generic method. Use the <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> property to determine whether the current <xref:System.Reflection.MethodBase> object represents an open constructed method or a closed constructed method.  \n  \n> [!NOTE]\n>  Generics are not supported by default; this property returns `false` if not overridden in a derived class. Generic constructors are not supported in the .NET Framework version 2.0, so this property returns `false` if the current instance is of type <xref:System.Reflection.ConstructorInfo>.  \n  \n For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodInfo.IsGenericMethod%2A?displayProperty=fullName> property. For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=fullName> property.","nodes":[{"pos":[0,404],"content":"Use the <xref:System.Reflection.MethodBase.IsGenericMethod%2A> property to determine whether the current <xref:System.Reflection.MethodBase> object represents a generic method. Use the <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> property to determine whether the current <xref:System.Reflection.MethodBase> object represents an open constructed method or a closed constructed method.","nodes":[{"content":"Use the <xref:System.Reflection.MethodBase.IsGenericMethod%2A> property to determine whether the current <xref:System.Reflection.MethodBase> object represents a generic method. Use the <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> property to determine whether the current <xref:System.Reflection.MethodBase> object represents an open constructed method or a closed constructed method.","pos":[0,404],"nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodBase.IsGenericMethod%2A&gt;</ph> property to determine whether the current <ph id=\"ph2\">&lt;xref:System.Reflection.MethodBase&gt;</ph> object represents a generic method.","pos":[0,176],"source":"Use the <xref:System.Reflection.MethodBase.IsGenericMethod%2A> property to determine whether the current <xref:System.Reflection.MethodBase> object represents a generic method."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodBase.ContainsGenericParameters%2A&gt;</ph> property to determine whether the current <ph id=\"ph2\">&lt;xref:System.Reflection.MethodBase&gt;</ph> object represents an open constructed method or a closed constructed method.","pos":[177,404],"source":" Use the <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> property to determine whether the current <xref:System.Reflection.MethodBase> object represents an open constructed method or a closed constructed method."}]}]},{"pos":[412,713],"content":"[!NOTE]\n Generics are not supported by default; this property returns `false` if not overridden in a derived class. Generic constructors are not supported in the .NET Framework version 2.0, so this property returns `false` if the current instance is of type <xref:System.Reflection.ConstructorInfo>.","leadings":["","> "],"nodes":[{"content":" Generics are not supported by default; this property returns `false` if not overridden in a derived class. Generic constructors are not supported in the .NET Framework version 2.0, so this property returns `false` if the current instance is of type <xref:System.Reflection.ConstructorInfo>.","pos":[8,299],"nodes":[{"content":"Generics are not supported by default; this property returns <ph id=\"ph1\">`false`</ph> if not overridden in a derived class.","pos":[1,107],"source":" Generics are not supported by default; this property returns `false` if not overridden in a derived class."},{"content":"Generic constructors are not supported in the .NET Framework version 2.0, so this property returns <ph id=\"ph1\">`false`</ph> if the current instance is of type <ph id=\"ph2\">&lt;xref:System.Reflection.ConstructorInfo&gt;</ph>.","pos":[108,291],"source":" Generic constructors are not supported in the .NET Framework version 2.0, so this property returns `false` if the current instance is of type <xref:System.Reflection.ConstructorInfo>."}]}]},{"pos":[720,1057],"content":"For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodInfo.IsGenericMethod%2A?displayProperty=fullName> property. For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=fullName> property.","nodes":[{"content":"For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodInfo.IsGenericMethod%2A?displayProperty=fullName> property. For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=fullName> property.","pos":[0,337],"nodes":[{"content":"For a list of the invariant conditions for terms specific to generic methods, see the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo.IsGenericMethod%2A?displayProperty=fullName&gt;</ph> property.","pos":[0,175],"source":"For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodInfo.IsGenericMethod%2A?displayProperty=fullName> property."},{"content":"For a list of the invariant conditions for other terms used in generic reflection, see the <ph id=\"ph1\">&lt;xref:System.Type.IsGenericType%2A?displayProperty=fullName&gt;</ph> property.","pos":[176,337],"source":" For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=fullName> property."}]}]}],"pos":[90749,91814],"yaml":true,"extradata":"MT"},{"content":"`true` if the current <xref href=\"System.Reflection.MethodBase\"></xref> represents a generic method; otherwise, `false`.","nodes":[{"pos":[0,120],"content":"<ph id=\"ph1\">`true`</ph> if the current <ph id=\"ph2\">&lt;xref href=\"System.Reflection.MethodBase\"&gt;&lt;/xref&gt;</ph> represents a generic method; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the current <xref href=\"System.Reflection.MethodBase\"></xref> represents a generic method; otherwise, `false`."}],"pos":[91940,92063],"yaml":true},{"content":"Gets a value indicating whether the method is a generic method definition.","nodes":[{"pos":[0,74],"content":"Gets a value indicating whether the method is a generic method definition.","nodes":[{"content":"Gets a value indicating whether the method is a generic method definition.","pos":[0,74]}]}],"pos":[93709,93784],"yaml":true},{"content":"If the current <xref:System.Reflection.MethodBase> represents a generic method definition, then:  \n  \n-   The <xref:System.Reflection.MethodBase.IsGenericMethodDefinition%2A> property is `true`.  \n  \n-   For each <xref:System.Type> object in the array returned by the <xref:System.Reflection.MethodBase.GetGenericArguments%2A> method:  \n  \n    -   The <xref:System.Type.IsGenericParameter%2A?displayProperty=fullName> property is `true`.  \n  \n    -   The <xref:System.Type.DeclaringMethod%2A?displayProperty=fullName> property returns the current instance.  \n  \n    -   The <xref:System.Type.GenericParameterPosition%2A?displayProperty=fullName> property is the same as the position of the <xref:System.Type> object in the array.  \n  \n> [!NOTE]\n>  Generics are not supported by default; this property returns `false` if not overridden in a derived class. Generic constructors are not supported in the .NET Framework version 2.0, so this property returns `false` if the current instance is of type <xref:System.Reflection.ConstructorInfo>.  \n  \n For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodInfo.IsGenericMethod%2A?displayProperty=fullName> property. For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=fullName> property.","nodes":[{"pos":[0,96],"content":"If the current <xref:System.Reflection.MethodBase> represents a generic method definition, then:","nodes":[{"content":"If the current <ph id=\"ph1\">&lt;xref:System.Reflection.MethodBase&gt;</ph> represents a generic method definition, then:","pos":[0,96],"source":"If the current <xref:System.Reflection.MethodBase> represents a generic method definition, then:"}]},{"pos":[106,194],"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.MethodBase.IsGenericMethodDefinition%2A&gt;</ph> property is <ph id=\"ph2\">`true`</ph>.","source":"The <xref:System.Reflection.MethodBase.IsGenericMethodDefinition%2A> property is `true`."},{"pos":[204,334],"content":"For each <xref:System.Type> object in the array returned by the <xref:System.Reflection.MethodBase.GetGenericArguments%2A> method:","nodes":[{"content":"For each <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph> object in the array returned by the <ph id=\"ph2\">&lt;xref:System.Reflection.MethodBase.GetGenericArguments%2A&gt;</ph> method:","pos":[0,130],"source":"For each <xref:System.Type> object in the array returned by the <xref:System.Reflection.MethodBase.GetGenericArguments%2A> method:"}]},{"pos":[348,437],"content":"The <ph id=\"ph1\">&lt;xref:System.Type.IsGenericParameter%2A?displayProperty=fullName&gt;</ph> property is <ph id=\"ph2\">`true`</ph>.","source":"The <xref:System.Type.IsGenericParameter%2A?displayProperty=fullName> property is `true`."},{"pos":[451,556],"content":"The <xref:System.Type.DeclaringMethod%2A?displayProperty=fullName> property returns the current instance.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Type.DeclaringMethod%2A?displayProperty=fullName&gt;</ph> property returns the current instance.","pos":[0,105],"source":"The <xref:System.Type.DeclaringMethod%2A?displayProperty=fullName> property returns the current instance."}]},{"pos":[570,729],"content":"The <xref:System.Type.GenericParameterPosition%2A?displayProperty=fullName> property is the same as the position of the <xref:System.Type> object in the array.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Type.GenericParameterPosition%2A?displayProperty=fullName&gt;</ph> property is the same as the position of the <ph id=\"ph2\">&lt;xref:System.Type&gt;</ph> object in the array.","pos":[0,159],"source":"The <xref:System.Type.GenericParameterPosition%2A?displayProperty=fullName> property is the same as the position of the <xref:System.Type> object in the array."}]},{"pos":[737,1038],"content":"[!NOTE]\n Generics are not supported by default; this property returns `false` if not overridden in a derived class. Generic constructors are not supported in the .NET Framework version 2.0, so this property returns `false` if the current instance is of type <xref:System.Reflection.ConstructorInfo>.","leadings":["","> "],"nodes":[{"content":" Generics are not supported by default; this property returns `false` if not overridden in a derived class. Generic constructors are not supported in the .NET Framework version 2.0, so this property returns `false` if the current instance is of type <xref:System.Reflection.ConstructorInfo>.","pos":[8,299],"nodes":[{"content":"Generics are not supported by default; this property returns <ph id=\"ph1\">`false`</ph> if not overridden in a derived class.","pos":[1,107],"source":" Generics are not supported by default; this property returns `false` if not overridden in a derived class."},{"content":"Generic constructors are not supported in the .NET Framework version 2.0, so this property returns <ph id=\"ph1\">`false`</ph> if the current instance is of type <ph id=\"ph2\">&lt;xref:System.Reflection.ConstructorInfo&gt;</ph>.","pos":[108,291],"source":" Generic constructors are not supported in the .NET Framework version 2.0, so this property returns `false` if the current instance is of type <xref:System.Reflection.ConstructorInfo>."}]}]},{"pos":[1045,1382],"content":"For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodInfo.IsGenericMethod%2A?displayProperty=fullName> property. For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=fullName> property.","nodes":[{"content":"For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodInfo.IsGenericMethod%2A?displayProperty=fullName> property. For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=fullName> property.","pos":[0,337],"nodes":[{"content":"For a list of the invariant conditions for terms specific to generic methods, see the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo.IsGenericMethod%2A?displayProperty=fullName&gt;</ph> property.","pos":[0,175],"source":"For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodInfo.IsGenericMethod%2A?displayProperty=fullName> property."},{"content":"For a list of the invariant conditions for other terms used in generic reflection, see the <ph id=\"ph1\">&lt;xref:System.Type.IsGenericType%2A?displayProperty=fullName&gt;</ph> property.","pos":[176,337],"source":" For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=fullName> property."}]}]}],"pos":[93795,95195],"yaml":true,"extradata":"MT"},{"content":"`true` if the current <xref href=\"System.Reflection.MethodBase\"></xref> object represents the definition of a generic method; otherwise, `false`.","nodes":[{"pos":[0,145],"content":"<ph id=\"ph1\">`true`</ph> if the current <ph id=\"ph2\">&lt;xref href=\"System.Reflection.MethodBase\"&gt;&lt;/xref&gt;</ph> object represents the definition of a generic method; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the current <xref href=\"System.Reflection.MethodBase\"></xref> object represents the definition of a generic method; otherwise, `false`."}],"pos":[95331,95479],"yaml":true},{"content":"Gets a value indicating whether only a member of the same kind with exactly the same signature is hidden in the derived class.","nodes":[{"pos":[0,126],"content":"Gets a value indicating whether only a member of the same kind with exactly the same signature is hidden in the derived class.","nodes":[{"content":"Gets a value indicating whether only a member of the same kind with exactly the same signature is hidden in the derived class.","pos":[0,126]}]}],"pos":[97051,97178],"yaml":true},{"content":"When a member in a derived class is declared with the C# `new` modifier or the Visual Basic `Shadows` modifier, it can hide a member of the same name in the base class. C# hides base class members by signature. That is, if the base class member has multiple overloads, the only one that is hidden is the one that has the identical signature. By contrast, Visual Basic hides all the base class overloads. Thus, <xref:System.Reflection.MethodBase.IsHideBySig%2A> returns `false` on a member declared with the Visual Basic `Shadows` modifier, and `true` on a member declared with the C# `new` modifier.  \n  \n> [!WARNING]\n>  This property does not determine whether a method has the <xref:System.Reflection.MethodAttributes.NewSlot> attribute. A method that is declared with either the `new` or the `Shadows` modifier will have the <xref:System.Reflection.MethodAttributes.NewSlot> attribute, but only methods declared with `new` (that is, only C# methods) will have the <xref:System.Reflection.MethodBase.IsHideBySig%2A> property set to `true`.  To determine whether a method has the <xref:System.Reflection.MethodAttributes.NewSlot> attribute, use code similar to the following: `if ((myMethodInfo.Attributes & MethodAttributes.VtableLayoutMask) == MethodAttributes.NewSlot)` in C# or `If (myMethodInfo.Attributes And MethodAttributes.VtableLayoutMask) = MethodAttributes.NewSlot` in Visual Basic. Note, however, that although all methods declared with `new` or `Shadows` have the <xref:System.Reflection.MethodAttributes.NewSlot> attribute, not all methods that have the <xref:System.Reflection.MethodAttributes.NewSlot> attribute are declared with `new` or `Shadows`.","nodes":[{"pos":[0,599],"content":"When a member in a derived class is declared with the C# `new` modifier or the Visual Basic `Shadows` modifier, it can hide a member of the same name in the base class. C# hides base class members by signature. That is, if the base class member has multiple overloads, the only one that is hidden is the one that has the identical signature. By contrast, Visual Basic hides all the base class overloads. Thus, <xref:System.Reflection.MethodBase.IsHideBySig%2A> returns `false` on a member declared with the Visual Basic `Shadows` modifier, and `true` on a member declared with the C# `new` modifier.","nodes":[{"content":"When a member in a derived class is declared with the C# <ph id=\"ph1\">`new`</ph> modifier or the Visual Basic <ph id=\"ph2\">`Shadows`</ph> modifier, it can hide a member of the same name in the base class.","pos":[0,168],"source":"When a member in a derived class is declared with the C# `new` modifier or the Visual Basic `Shadows` modifier, it can hide a member of the same name in the base class."},{"content":"C# hides base class members by signature.","pos":[169,210]},{"content":"That is, if the base class member has multiple overloads, the only one that is hidden is the one that has the identical signature.","pos":[211,341]},{"content":"By contrast, Visual Basic hides all the base class overloads.","pos":[342,403]},{"content":"Thus, <ph id=\"ph1\">&lt;xref:System.Reflection.MethodBase.IsHideBySig%2A&gt;</ph> returns <ph id=\"ph2\">`false`</ph> on a member declared with the Visual Basic <ph id=\"ph3\">`Shadows`</ph> modifier, and <ph id=\"ph4\">`true`</ph> on a member declared with the C# <ph id=\"ph5\">`new`</ph> modifier.","pos":[404,599],"source":" Thus, <xref:System.Reflection.MethodBase.IsHideBySig%2A> returns `false` on a member declared with the Visual Basic `Shadows` modifier, and `true` on a member declared with the C# `new` modifier."}]},{"pos":[607,1667],"content":"[!WARNING]\n This property does not determine whether a method has the <xref:System.Reflection.MethodAttributes.NewSlot> attribute. A method that is declared with either the `new` or the `Shadows` modifier will have the <xref:System.Reflection.MethodAttributes.NewSlot> attribute, but only methods declared with `new` (that is, only C# methods) will have the <xref:System.Reflection.MethodBase.IsHideBySig%2A> property set to `true`.  To determine whether a method has the <xref:System.Reflection.MethodAttributes.NewSlot> attribute, use code similar to the following: `if ((myMethodInfo.Attributes & MethodAttributes.VtableLayoutMask) == MethodAttributes.NewSlot)` in C# or `If (myMethodInfo.Attributes And MethodAttributes.VtableLayoutMask) = MethodAttributes.NewSlot` in Visual Basic. Note, however, that although all methods declared with `new` or `Shadows` have the <xref:System.Reflection.MethodAttributes.NewSlot> attribute, not all methods that have the <xref:System.Reflection.MethodAttributes.NewSlot> attribute are declared with `new` or `Shadows`.","leadings":["","> "],"nodes":[{"content":" This property does not determine whether a method has the <xref:System.Reflection.MethodAttributes.NewSlot> attribute. A method that is declared with either the `new` or the `Shadows` modifier will have the <xref:System.Reflection.MethodAttributes.NewSlot> attribute, but only methods declared with `new` (that is, only C# methods) will have the <xref:System.Reflection.MethodBase.IsHideBySig%2A> property set to `true`.  To determine whether a method has the <xref:System.Reflection.MethodAttributes.NewSlot> attribute, use code similar to the following: `if ((myMethodInfo.Attributes & MethodAttributes.VtableLayoutMask) == MethodAttributes.NewSlot)` in C# or `If (myMethodInfo.Attributes And MethodAttributes.VtableLayoutMask) = MethodAttributes.NewSlot` in Visual Basic. Note, however, that although all methods declared with `new` or `Shadows` have the <xref:System.Reflection.MethodAttributes.NewSlot> attribute, not all methods that have the <xref:System.Reflection.MethodAttributes.NewSlot> attribute are declared with `new` or `Shadows`.","pos":[11,1058],"nodes":[{"content":"This property does not determine whether a method has the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodAttributes.NewSlot&gt;</ph> attribute.","pos":[1,119],"source":" This property does not determine whether a method has the <xref:System.Reflection.MethodAttributes.NewSlot> attribute."},{"content":"A method that is declared with either the <ph id=\"ph1\">`new`</ph> or the <ph id=\"ph2\">`Shadows`</ph> modifier will have the <ph id=\"ph3\">&lt;xref:System.Reflection.MethodAttributes.NewSlot&gt;</ph> attribute, but only methods declared with <ph id=\"ph4\">`new`</ph> (that is, only C# methods) will have the <ph id=\"ph5\">&lt;xref:System.Reflection.MethodBase.IsHideBySig%2A&gt;</ph> property set to <ph id=\"ph6\">`true`</ph>.","pos":[120,421],"source":" A method that is declared with either the `new` or the `Shadows` modifier will have the <xref:System.Reflection.MethodAttributes.NewSlot> attribute, but only methods declared with `new` (that is, only C# methods) will have the <xref:System.Reflection.MethodBase.IsHideBySig%2A> property set to `true`."},{"content":"To determine whether a method has the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodAttributes.NewSlot&gt;</ph> attribute, use code similar to the following: <ph id=\"ph2\">`if ((myMethodInfo.Attributes &amp; MethodAttributes.VtableLayoutMask) == MethodAttributes.NewSlot)`</ph> in C# or <ph id=\"ph3\">`If (myMethodInfo.Attributes And MethodAttributes.VtableLayoutMask) = MethodAttributes.NewSlot`</ph> in Visual Basic.","pos":[423,775],"source":"  To determine whether a method has the <xref:System.Reflection.MethodAttributes.NewSlot> attribute, use code similar to the following: `if ((myMethodInfo.Attributes & MethodAttributes.VtableLayoutMask) == MethodAttributes.NewSlot)` in C# or `If (myMethodInfo.Attributes And MethodAttributes.VtableLayoutMask) = MethodAttributes.NewSlot` in Visual Basic."},{"content":"Note, however, that although all methods declared with <ph id=\"ph1\">`new`</ph> or <ph id=\"ph2\">`Shadows`</ph> have the <ph id=\"ph3\">&lt;xref:System.Reflection.MethodAttributes.NewSlot&gt;</ph> attribute, not all methods that have the <ph id=\"ph4\">&lt;xref:System.Reflection.MethodAttributes.NewSlot&gt;</ph> attribute are declared with <ph id=\"ph5\">`new`</ph> or <ph id=\"ph6\">`Shadows`</ph>.","pos":[776,1047],"source":" Note, however, that although all methods declared with `new` or `Shadows` have the <xref:System.Reflection.MethodAttributes.NewSlot> attribute, not all methods that have the <xref:System.Reflection.MethodAttributes.NewSlot> attribute are declared with `new` or `Shadows`."}]}]}],"pos":[97189,98862],"yaml":true,"extradata":"MT"},{"content":"`true` if the member is hidden by signature; otherwise, `false`.","nodes":[{"pos":[0,64],"content":"<ph id=\"ph1\">`true`</ph> if the member is hidden by signature; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the member is hidden by signature; otherwise, `false`."}],"pos":[99889,99956],"yaml":true},{"content":"Gets a value indicating whether this member is private.","nodes":[{"pos":[0,55],"content":"Gets a value indicating whether this member is private.","nodes":[{"content":"Gets a value indicating whether this member is private.","pos":[0,55]}]}],"pos":[101502,101558],"yaml":true},{"content":"If a type member has `Private` level visibility, it can be called from any member in the same class and no others.","nodes":[{"pos":[0,114],"content":"If a type member has <ph id=\"ph1\">`Private`</ph> level visibility, it can be called from any member in the same class and no others.","source":"If a type member has `Private` level visibility, it can be called from any member in the same class and no others."}],"pos":[101569,101684],"yaml":true,"extradata":"MT"},{"content":"`true` if access to this method is restricted to other members of the class itself; otherwise, `false`.","nodes":[{"pos":[0,103],"content":"<ph id=\"ph1\">`true`</ph> if access to this method is restricted to other members of the class itself; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if access to this method is restricted to other members of the class itself; otherwise, `false`."}],"pos":[101796,101902],"yaml":true},{"content":"Gets a value indicating whether this is a public method.","nodes":[{"pos":[0,56],"content":"Gets a value indicating whether this is a public method.","nodes":[{"content":"Gets a value indicating whether this is a public method.","pos":[0,56]}]}],"pos":[103440,103497],"yaml":true},{"content":"To get the <xref:System.Reflection.MethodBase>, first get the type. From the type, get the method. From the method, get the `MethodBase`. If the `MethodBase` or constructor is other than public, it is protected and cannot be readily accessed. To access a non-public method, set the <xref:System.Reflection.BindingFlags> mask to `NonPublic` in `GetMethod`.","nodes":[{"pos":[0,355],"content":"To get the <xref:System.Reflection.MethodBase>, first get the type. From the type, get the method. From the method, get the `MethodBase`. If the `MethodBase` or constructor is other than public, it is protected and cannot be readily accessed. To access a non-public method, set the <xref:System.Reflection.BindingFlags> mask to `NonPublic` in `GetMethod`.","nodes":[{"content":"To get the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodBase&gt;</ph>, first get the type.","pos":[0,67],"source":"To get the <xref:System.Reflection.MethodBase>, first get the type."},{"content":"From the type, get the method.","pos":[68,98]},{"content":"From the method, get the <ph id=\"ph1\">`MethodBase`</ph>.","pos":[99,137],"source":" From the method, get the `MethodBase`."},{"content":"If the <ph id=\"ph1\">`MethodBase`</ph> or constructor is other than public, it is protected and cannot be readily accessed.","pos":[138,242],"source":" If the `MethodBase` or constructor is other than public, it is protected and cannot be readily accessed."},{"content":"To access a non-public method, set the <ph id=\"ph1\">&lt;xref:System.Reflection.BindingFlags&gt;</ph> mask to <ph id=\"ph2\">`NonPublic`</ph> in <ph id=\"ph3\">`GetMethod`</ph>.","pos":[243,355],"source":" To access a non-public method, set the <xref:System.Reflection.BindingFlags> mask to `NonPublic` in `GetMethod`."}]}],"pos":[103508,103864],"yaml":true,"extradata":"MT"},{"content":"`true` if this method is public; otherwise, `false`.","nodes":[{"pos":[0,52],"content":"<ph id=\"ph1\">`true`</ph> if this method is public; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if this method is public; otherwise, `false`."}],"pos":[104633,104688],"yaml":true},{"content":"Gets a value that indicates whether the current method or constructor is security-critical or security-safe-critical at the current trust level, and therefore can perform critical operations.","nodes":[{"pos":[0,191],"content":"Gets a value that indicates whether the current method or constructor is security-critical or security-safe-critical at the current trust level, and therefore can perform critical operations.","nodes":[{"content":"Gets a value that indicates whether the current method or constructor is security-critical or security-safe-critical at the current trust level, and therefore can perform critical operations.","pos":[0,191]}]}],"pos":[106263,106455],"yaml":true},{"content":"The <xref:System.Reflection.MethodBase.IsSecurityCritical%2A>, <xref:System.Reflection.MethodBase.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.MethodBase.IsSecurityTransparent%2A> properties report the transparency level of the method or constructor at its current trust level, as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:  \n  \n|Security level|IsSecurityCritical|IsSecuritySafeCritical|IsSecurityTransparent|  \n|--------------------|------------------------|----------------------------|---------------------------|  \n|Critical|`true`|`false`|`false`|  \n|Safe critical|`true`|`true`|`false`|  \n|Transparent|`false`|`false`|`true`|  \n  \n Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.  \n  \n> [!IMPORTANT]\n>  For partial-trust assemblies, the value of this property depends on the current trust level of the assembly. If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly. The assembly and all its types are treated as transparent. The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application). By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted. You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=fullName> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=fullName> properties.  \n  \n For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md). For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).","nodes":[{"pos":[0,411],"content":"The <xref:System.Reflection.MethodBase.IsSecurityCritical%2A>, <xref:System.Reflection.MethodBase.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.MethodBase.IsSecurityTransparent%2A> properties report the transparency level of the method or constructor at its current trust level, as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:","nodes":[{"content":"The <xref:System.Reflection.MethodBase.IsSecurityCritical%2A>, <xref:System.Reflection.MethodBase.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.MethodBase.IsSecurityTransparent%2A> properties report the transparency level of the method or constructor at its current trust level, as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:","pos":[0,411],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.MethodBase.IsSecurityCritical%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Reflection.MethodBase.IsSecuritySafeCritical%2A&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Reflection.MethodBase.IsSecurityTransparent%2A&gt;</ph> properties report the transparency level of the method or constructor at its current trust level, as determined by the common language runtime (CLR).","pos":[0,340],"source":"The <xref:System.Reflection.MethodBase.IsSecurityCritical%2A>, <xref:System.Reflection.MethodBase.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.MethodBase.IsSecurityTransparent%2A> properties report the transparency level of the method or constructor at its current trust level, as determined by the common language runtime (CLR)."},{"content":"The combinations of these properties are shown in the following table:","pos":[341,411]}]}]},{"pos":[418,432],"content":"Security level","nodes":[{"content":"Security level","pos":[0,14]}]},{"pos":[433,451],"content":"IsSecurityCritical","nodes":[{"content":"IsSecurityCritical","pos":[0,18]}]},{"pos":[452,474],"content":"IsSecuritySafeCritical","nodes":[{"content":"IsSecuritySafeCritical","pos":[0,22]}]},{"pos":[475,496],"content":"IsSecurityTransparent","nodes":[{"content":"IsSecurityTransparent","pos":[0,21]}]},{"pos":[608,616],"content":"Critical","nodes":[{"content":"Critical","pos":[0,8]}]},{"pos":[644,657],"content":"Safe critical","nodes":[{"content":"Safe critical","pos":[0,13]}]},{"pos":[684,695],"content":"Transparent","nodes":[{"content":"Transparent","pos":[0,11]}]},{"pos":[726,929],"content":"Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.","nodes":[{"content":"Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.","pos":[0,203]}]},{"pos":[937,2048],"content":"[!IMPORTANT]\n For partial-trust assemblies, the value of this property depends on the current trust level of the assembly. If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly. The assembly and all its types are treated as transparent. The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application). By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted. You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=fullName> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=fullName> properties.","leadings":["","> "],"nodes":[{"content":" For partial-trust assemblies, the value of this property depends on the current trust level of the assembly. If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly. The assembly and all its types are treated as transparent. The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application). By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted. You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=fullName> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=fullName> properties.","pos":[13,1109],"nodes":[{"content":"For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.","pos":[1,109]},{"content":"If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly.","pos":[110,293]},{"content":"The assembly and all its types are treated as transparent.","pos":[294,352]},{"content":"The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).","pos":[353,586]},{"content":"By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.","pos":[587,842]},{"content":"You can determine the current trust levels of assemblies and application domains by using the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=fullName&gt;</ph> properties.","pos":[843,1096],"source":" You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=fullName> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=fullName> properties."}]}]},{"pos":[2055,2346],"content":"For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md). For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).","nodes":[{"content":"For more information about reflection and transparency, see <bpt id=\"p1\">[</bpt>Security Considerations for Reflection<ept id=\"p1\">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.","pos":[0,184],"source":"For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)."},{"content":"For information about transparency, see <bpt id=\"p1\">[</bpt>Security Changes<ept id=\"p1\">](~/docs/framework/security/security-changes.md)</ept>.","pos":[185,291],"source":" For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md)."}]}],"pos":[106466,108828],"yaml":true,"extradata":"MT"},{"content":"`true` if the current method or constructor is security-critical or security-safe-critical at the current trust level; `false` if it is transparent.","nodes":[{"pos":[0,148],"content":"<ph id=\"ph1\">`true`</ph> if the current method or constructor is security-critical or security-safe-critical at the current trust level; <ph id=\"ph2\">`false`</ph> if it is transparent.","source":"`true` if the current method or constructor is security-critical or security-safe-critical at the current trust level; `false` if it is transparent."}],"pos":[108957,109108],"yaml":true},{"content":"Gets a value that indicates whether the current method or constructor is security-safe-critical at the current trust level; that is, whether it can perform critical operations and can be accessed by transparent code.","nodes":[{"pos":[0,216],"content":"Gets a value that indicates whether the current method or constructor is security-safe-critical at the current trust level; that is, whether it can perform critical operations and can be accessed by transparent code.","nodes":[{"content":"Gets a value that indicates whether the current method or constructor is security-safe-critical at the current trust level; that is, whether it can perform critical operations and can be accessed by transparent code.","pos":[0,216]}]}],"pos":[110373,110590],"yaml":true},{"content":"The <xref:System.Reflection.MethodBase.IsSecurityCritical%2A>, <xref:System.Reflection.MethodBase.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.MethodBase.IsSecurityTransparent%2A> properties report the transparency level of the method or constructor at its current trust level, as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:  \n  \n|Security level|IsSecurityCritical|IsSecuritySafeCritical|IsSecurityTransparent|  \n|--------------------|------------------------|----------------------------|---------------------------|  \n|Critical|`true`|`false`|`false`|  \n|Safe critical|`true`|`true`|`false`|  \n|Transparent|`false`|`false`|`true`|  \n  \n Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.  \n  \n> [!IMPORTANT]\n>  For partial-trust assemblies, the value of this property depends on the current trust level of the assembly. If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly. The assembly and all its types are treated as transparent. The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application). By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted. You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=fullName> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=fullName> properties.  \n  \n For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md). For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).","nodes":[{"pos":[0,411],"content":"The <xref:System.Reflection.MethodBase.IsSecurityCritical%2A>, <xref:System.Reflection.MethodBase.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.MethodBase.IsSecurityTransparent%2A> properties report the transparency level of the method or constructor at its current trust level, as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:","nodes":[{"content":"The <xref:System.Reflection.MethodBase.IsSecurityCritical%2A>, <xref:System.Reflection.MethodBase.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.MethodBase.IsSecurityTransparent%2A> properties report the transparency level of the method or constructor at its current trust level, as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:","pos":[0,411],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.MethodBase.IsSecurityCritical%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Reflection.MethodBase.IsSecuritySafeCritical%2A&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Reflection.MethodBase.IsSecurityTransparent%2A&gt;</ph> properties report the transparency level of the method or constructor at its current trust level, as determined by the common language runtime (CLR).","pos":[0,340],"source":"The <xref:System.Reflection.MethodBase.IsSecurityCritical%2A>, <xref:System.Reflection.MethodBase.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.MethodBase.IsSecurityTransparent%2A> properties report the transparency level of the method or constructor at its current trust level, as determined by the common language runtime (CLR)."},{"content":"The combinations of these properties are shown in the following table:","pos":[341,411]}]}]},{"pos":[418,432],"content":"Security level","nodes":[{"content":"Security level","pos":[0,14]}]},{"pos":[433,451],"content":"IsSecurityCritical","nodes":[{"content":"IsSecurityCritical","pos":[0,18]}]},{"pos":[452,474],"content":"IsSecuritySafeCritical","nodes":[{"content":"IsSecuritySafeCritical","pos":[0,22]}]},{"pos":[475,496],"content":"IsSecurityTransparent","nodes":[{"content":"IsSecurityTransparent","pos":[0,21]}]},{"pos":[608,616],"content":"Critical","nodes":[{"content":"Critical","pos":[0,8]}]},{"pos":[644,657],"content":"Safe critical","nodes":[{"content":"Safe critical","pos":[0,13]}]},{"pos":[684,695],"content":"Transparent","nodes":[{"content":"Transparent","pos":[0,11]}]},{"pos":[726,929],"content":"Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.","nodes":[{"content":"Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.","pos":[0,203]}]},{"pos":[937,2048],"content":"[!IMPORTANT]\n For partial-trust assemblies, the value of this property depends on the current trust level of the assembly. If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly. The assembly and all its types are treated as transparent. The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application). By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted. You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=fullName> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=fullName> properties.","leadings":["","> "],"nodes":[{"content":" For partial-trust assemblies, the value of this property depends on the current trust level of the assembly. If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly. The assembly and all its types are treated as transparent. The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application). By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted. You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=fullName> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=fullName> properties.","pos":[13,1109],"nodes":[{"content":"For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.","pos":[1,109]},{"content":"If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly.","pos":[110,293]},{"content":"The assembly and all its types are treated as transparent.","pos":[294,352]},{"content":"The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).","pos":[353,586]},{"content":"By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.","pos":[587,842]},{"content":"You can determine the current trust levels of assemblies and application domains by using the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=fullName&gt;</ph> properties.","pos":[843,1096],"source":" You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=fullName> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=fullName> properties."}]}]},{"pos":[2055,2346],"content":"For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md). For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).","nodes":[{"content":"For more information about reflection and transparency, see <bpt id=\"p1\">[</bpt>Security Considerations for Reflection<ept id=\"p1\">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.","pos":[0,184],"source":"For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)."},{"content":"For information about transparency, see <bpt id=\"p1\">[</bpt>Security Changes<ept id=\"p1\">](~/docs/framework/security/security-changes.md)</ept>.","pos":[185,291],"source":" For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md)."}]}],"pos":[110601,112963],"yaml":true,"extradata":"MT"},{"content":"`true` if the method or constructor is security-safe-critical at the current trust level; `false` if it is security-critical or transparent.","nodes":[{"pos":[0,140],"content":"<ph id=\"ph1\">`true`</ph> if the method or constructor is security-safe-critical at the current trust level; <ph id=\"ph2\">`false`</ph> if it is security-critical or transparent.","source":"`true` if the method or constructor is security-safe-critical at the current trust level; `false` if it is security-critical or transparent."}],"pos":[113096,113239],"yaml":true},{"content":"Gets a value that indicates whether the current method or constructor is transparent at the current trust level, and therefore cannot perform critical operations.","nodes":[{"pos":[0,162],"content":"Gets a value that indicates whether the current method or constructor is transparent at the current trust level, and therefore cannot perform critical operations.","nodes":[{"content":"Gets a value that indicates whether the current method or constructor is transparent at the current trust level, and therefore cannot perform critical operations.","pos":[0,162]}]}],"pos":[114502,114665],"yaml":true},{"content":"If this property returns `true`, the <xref:System.Reflection.MethodBase.IsSecurityCritical%2A> and <xref:System.Reflection.MethodBase.IsSecuritySafeCritical%2A> properties return `false`.  \n  \n The <xref:System.Reflection.MethodBase.IsSecurityCritical%2A>, <xref:System.Reflection.MethodBase.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.MethodBase.IsSecurityTransparent%2A> properties report the transparency level of the method or constructor at its current trust level, as determined by the common language runtime (CLR). Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.  \n  \n> [!IMPORTANT]\n>  For partial-trust assemblies, the value of this property depends on the current trust level of the assembly. If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly. The assembly and all its types are treated as transparent. The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application). By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted. You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=fullName> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=fullName> properties.  \n  \n For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md). For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).","nodes":[{"pos":[0,187],"content":"If this property returns <ph id=\"ph1\">`true`</ph>, the <ph id=\"ph2\">&lt;xref:System.Reflection.MethodBase.IsSecurityCritical%2A&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Reflection.MethodBase.IsSecuritySafeCritical%2A&gt;</ph> properties return <ph id=\"ph4\">`false`</ph>.","source":"If this property returns `true`, the <xref:System.Reflection.MethodBase.IsSecurityCritical%2A> and <xref:System.Reflection.MethodBase.IsSecuritySafeCritical%2A> properties return `false`."},{"pos":[194,738],"content":"The <xref:System.Reflection.MethodBase.IsSecurityCritical%2A>, <xref:System.Reflection.MethodBase.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.MethodBase.IsSecurityTransparent%2A> properties report the transparency level of the method or constructor at its current trust level, as determined by the common language runtime (CLR). Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.","nodes":[{"content":"The <xref:System.Reflection.MethodBase.IsSecurityCritical%2A>, <xref:System.Reflection.MethodBase.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.MethodBase.IsSecurityTransparent%2A> properties report the transparency level of the method or constructor at its current trust level, as determined by the common language runtime (CLR). Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.","pos":[0,544],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.MethodBase.IsSecurityCritical%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Reflection.MethodBase.IsSecuritySafeCritical%2A&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Reflection.MethodBase.IsSecurityTransparent%2A&gt;</ph> properties report the transparency level of the method or constructor at its current trust level, as determined by the common language runtime (CLR).","pos":[0,340],"source":"The <xref:System.Reflection.MethodBase.IsSecurityCritical%2A>, <xref:System.Reflection.MethodBase.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.MethodBase.IsSecurityTransparent%2A> properties report the transparency level of the method or constructor at its current trust level, as determined by the common language runtime (CLR)."},{"content":"Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.","pos":[341,544]}]}]},{"pos":[746,1857],"content":"[!IMPORTANT]\n For partial-trust assemblies, the value of this property depends on the current trust level of the assembly. If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly. The assembly and all its types are treated as transparent. The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application). By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted. You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=fullName> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=fullName> properties.","leadings":["","> "],"nodes":[{"content":" For partial-trust assemblies, the value of this property depends on the current trust level of the assembly. If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly. The assembly and all its types are treated as transparent. The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application). By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted. You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=fullName> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=fullName> properties.","pos":[13,1109],"nodes":[{"content":"For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.","pos":[1,109]},{"content":"If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly.","pos":[110,293]},{"content":"The assembly and all its types are treated as transparent.","pos":[294,352]},{"content":"The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).","pos":[353,586]},{"content":"By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.","pos":[587,842]},{"content":"You can determine the current trust levels of assemblies and application domains by using the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=fullName&gt;</ph> properties.","pos":[843,1096],"source":" You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=fullName> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=fullName> properties."}]}]},{"pos":[1864,2155],"content":"For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md). For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).","nodes":[{"content":"For more information about reflection and transparency, see <bpt id=\"p1\">[</bpt>Security Considerations for Reflection<ept id=\"p1\">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.","pos":[0,184],"source":"For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)."},{"content":"For information about transparency, see <bpt id=\"p1\">[</bpt>Security Changes<ept id=\"p1\">](~/docs/framework/security/security-changes.md)</ept>.","pos":[185,291],"source":" For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md)."}]}],"pos":[114676,116841],"yaml":true,"extradata":"MT"},{"content":"`true` if the method or constructor is security-transparent at the current trust level; otherwise, `false`.","nodes":[{"pos":[0,107],"content":"<ph id=\"ph1\">`true`</ph> if the method or constructor is security-transparent at the current trust level; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the method or constructor is security-transparent at the current trust level; otherwise, `false`."}],"pos":[116973,117083],"yaml":true},{"content":"Gets a value indicating whether this method has a special name.","nodes":[{"pos":[0,63],"content":"Gets a value indicating whether this method has a special name.","nodes":[{"content":"Gets a value indicating whether this method has a special name.","pos":[0,63]}]}],"pos":[118319,118383],"yaml":true},{"content":"The <xref:System.Reflection.MethodAttributes.SpecialName> bit is set to flag members that are treated in a special way by some compilers (such as property accessors and operator overloading methods).","nodes":[{"pos":[0,199],"content":"The <xref:System.Reflection.MethodAttributes.SpecialName> bit is set to flag members that are treated in a special way by some compilers (such as property accessors and operator overloading methods).","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.MethodAttributes.SpecialName&gt;</ph> bit is set to flag members that are treated in a special way by some compilers (such as property accessors and operator overloading methods).","pos":[0,199],"source":"The <xref:System.Reflection.MethodAttributes.SpecialName> bit is set to flag members that are treated in a special way by some compilers (such as property accessors and operator overloading methods)."}]}],"pos":[118394,118594],"yaml":true,"extradata":"MT"},{"content":"`true` if this method has a special name; otherwise, `false`.","nodes":[{"pos":[0,61],"content":"<ph id=\"ph1\">`true`</ph> if this method has a special name; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if this method has a special name; otherwise, `false`."}],"pos":[119332,119396],"yaml":true},{"content":"Gets a value indicating whether the method is `static`.","nodes":[{"pos":[0,55],"content":"Gets a value indicating whether the method is <ph id=\"ph1\">`static`</ph>.","source":"Gets a value indicating whether the method is `static`."}],"pos":[120938,120994],"yaml":true},{"content":"A static member cannot implicitly reference instance data in a class.","nodes":[{"pos":[0,69],"content":"A static member cannot implicitly reference instance data in a class.","nodes":[{"content":"A static member cannot implicitly reference instance data in a class.","pos":[0,69]}]}],"pos":[121005,121075],"yaml":true,"extradata":"MT"},{"content":"`true` if this method is `static`; otherwise, `false`.","nodes":[{"pos":[0,54],"content":"<ph id=\"ph1\">`true`</ph> if this method is <ph id=\"ph2\">`static`</ph>; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if this method is `static`; otherwise, `false`."}],"pos":[121186,121243],"yaml":true},{"content":"Gets a value indicating whether the method is `virtual`.","nodes":[{"pos":[0,56],"content":"Gets a value indicating whether the method is <ph id=\"ph1\">`virtual`</ph>.","source":"Gets a value indicating whether the method is `virtual`."}],"pos":[122786,122843],"yaml":true},{"content":"A virtual member may reference instance data in a class and must be referenced through an instance of the class.  \n  \n To determine if a method is overridable, it is not sufficient to check that `IsVirtual` is `true`. For a method to be overridable, `IsVirtual` must be `true` and <xref:System.Reflection.MethodBase.IsFinal%2A> must be `false`. For example, a method might be non-virtual, but it implements an interface method. The common language runtime requires that all methods that implement interface members must be marked as `virtual`; therefore, the compiler marks the method `virtual final`. So there are cases where a method is marked as `virtual` but is still not overridable.  \n  \n To establish with certainty whether a method is overridable, use code such as this:  \n  \n```csharp  \nif (MethodInfo.IsVirtual && !MethodInfo.IsFinal)  \n```  \n  \n```vb  \nIf MethodInfo.IsVirtual AndAlso Not MethodInfo.IsFinal Then  \n```  \n  \n If `IsVirtual` is `false` or `IsFinal` is `true`, then the method cannot be overridden.  \n  \n You can determine whether the current method overrides a method in a base class by calling the <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A?displayProperty=fullName> method. The following example implements an `IsOverride` method that does this.  \n  \n [!code-csharp[system.reflection.methodinfo.getbasedefinition#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.methodinfo.getbasedefinition/cs/IsOverride1.cs#2)]\n [!code-vb[system.reflection.methodinfo.getbasedefinition#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.methodinfo.getbasedefinition/vb/IsOverride1.vb#2)]","nodes":[{"pos":[0,112],"content":"A virtual member may reference instance data in a class and must be referenced through an instance of the class.","nodes":[{"content":"A virtual member may reference instance data in a class and must be referenced through an instance of the class.","pos":[0,112]}]},{"pos":[119,688],"content":"To determine if a method is overridable, it is not sufficient to check that `IsVirtual` is `true`. For a method to be overridable, `IsVirtual` must be `true` and <xref:System.Reflection.MethodBase.IsFinal%2A> must be `false`. For example, a method might be non-virtual, but it implements an interface method. The common language runtime requires that all methods that implement interface members must be marked as `virtual`; therefore, the compiler marks the method `virtual final`. So there are cases where a method is marked as `virtual` but is still not overridable.","nodes":[{"content":"To determine if a method is overridable, it is not sufficient to check that <ph id=\"ph1\">`IsVirtual`</ph> is <ph id=\"ph2\">`true`</ph>.","pos":[0,98],"source":"To determine if a method is overridable, it is not sufficient to check that `IsVirtual` is `true`."},{"content":"For a method to be overridable, <ph id=\"ph1\">`IsVirtual`</ph> must be <ph id=\"ph2\">`true`</ph> and <ph id=\"ph3\">&lt;xref:System.Reflection.MethodBase.IsFinal%2A&gt;</ph> must be <ph id=\"ph4\">`false`</ph>.","pos":[99,225],"source":" For a method to be overridable, `IsVirtual` must be `true` and <xref:System.Reflection.MethodBase.IsFinal%2A> must be `false`."},{"content":"For example, a method might be non-virtual, but it implements an interface method.","pos":[226,308]},{"content":"The common language runtime requires that all methods that implement interface members must be marked as <ph id=\"ph1\">`virtual`</ph>; therefore, the compiler marks the method <ph id=\"ph2\">`virtual final`</ph>.","pos":[309,482],"source":" The common language runtime requires that all methods that implement interface members must be marked as `virtual`; therefore, the compiler marks the method `virtual final`."},{"content":"So there are cases where a method is marked as <ph id=\"ph1\">`virtual`</ph> but is still not overridable.","pos":[483,569],"source":" So there are cases where a method is marked as `virtual` but is still not overridable."}]},{"pos":[695,778],"content":"To establish with certainty whether a method is overridable, use code such as this:","nodes":[{"content":"To establish with certainty whether a method is overridable, use code such as this:","pos":[0,83]}]},{"pos":[936,1023],"content":"If <ph id=\"ph1\">`IsVirtual`</ph> is <ph id=\"ph2\">`false`</ph> or <ph id=\"ph3\">`IsFinal`</ph> is <ph id=\"ph4\">`true`</ph>, then the method cannot be overridden.","source":"If `IsVirtual` is `false` or `IsFinal` is `true`, then the method cannot be overridden."},{"pos":[1030,1286],"content":"You can determine whether the current method overrides a method in a base class by calling the <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A?displayProperty=fullName> method. The following example implements an `IsOverride` method that does this.","nodes":[{"content":"You can determine whether the current method overrides a method in a base class by calling the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo.GetBaseDefinition%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,184],"source":"You can determine whether the current method overrides a method in a base class by calling the <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A?displayProperty=fullName> method."},{"content":"The following example implements an <ph id=\"ph1\">`IsOverride`</ph> method that does this.","pos":[185,256],"source":" The following example implements an `IsOverride` method that does this."}]},{"pos":[1293,1658],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>system.reflection.methodinfo.getbasedefinition#2<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.methodinfo.getbasedefinition/cs/IsOverride1.cs#2)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>system.reflection.methodinfo.getbasedefinition#2<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.methodinfo.getbasedefinition/vb/IsOverride1.vb#2)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[system.reflection.methodinfo.getbasedefinition#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.methodinfo.getbasedefinition/cs/IsOverride1.cs#2)]\n [!code-vb[system.reflection.methodinfo.getbasedefinition#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.methodinfo.getbasedefinition/vb/IsOverride1.vb#2)]"}],"pos":[122854,124534],"yaml":true,"extradata":"MT"},{"content":"`true` if this method is `virtual`; otherwise, `false`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">`true`</ph> if this method is <ph id=\"ph2\">`virtual`</ph>; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if this method is `virtual`; otherwise, `false`."}],"pos":[125364,125422],"yaml":true},{"content":"Gets a handle to the internal metadata representation of a method.","nodes":[{"pos":[0,66],"content":"Gets a handle to the internal metadata representation of a method.","nodes":[{"content":"Gets a handle to the internal metadata representation of a method.","pos":[0,66]}]}],"pos":[126962,127029],"yaml":true},{"content":"The handles are valid only in the application domain in which they were obtained.","nodes":[{"pos":[0,81],"content":"The handles are valid only in the application domain in which they were obtained.","nodes":[{"content":"The handles are valid only in the application domain in which they were obtained.","pos":[0,81]}]}],"pos":[127040,127122],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.RuntimeMethodHandle\"></xref> object.","nodes":[{"pos":[0,57],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.RuntimeMethodHandle\"&gt;&lt;/xref&gt;</ph> object.","source":"A <xref href=\"System.RuntimeMethodHandle\"></xref> object."}],"pos":[127273,127331],"yaml":true},{"content":"Gets the <xref href=\"System.Reflection.MethodImplAttributes\"></xref> flags that specify the attributes of a method implementation.","nodes":[{"pos":[0,130],"content":"Gets the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodImplAttributes\"&gt;&lt;/xref&gt;</ph> flags that specify the attributes of a method implementation.","source":"Gets the <xref href=\"System.Reflection.MethodImplAttributes\"></xref> flags that specify the attributes of a method implementation."}],"pos":[128630,128761],"yaml":true},{"content":"See the <xref:System.Reflection.MethodBase.GetMethodImplementationFlags%2A> method for more information.","nodes":[{"pos":[0,104],"content":"See the <xref:System.Reflection.MethodBase.GetMethodImplementationFlags%2A> method for more information.","nodes":[{"content":"See the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodBase.GetMethodImplementationFlags%2A&gt;</ph> method for more information.","pos":[0,104],"source":"See the <xref:System.Reflection.MethodBase.GetMethodImplementationFlags%2A> method for more information."}]}],"pos":[128772,128877],"yaml":true,"extradata":"MT"},{"content":"The method implementation flags.","nodes":[{"pos":[0,32],"content":"The method implementation flags.","nodes":[{"content":"The method implementation flags.","pos":[0,32]}]}],"pos":[129071,129104],"yaml":true},{"content":"Indicates whether two <xref href=\"System.Reflection.MethodBase\"></xref> objects are equal.","nodes":[{"pos":[0,90],"content":"Indicates whether two <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodBase\"&gt;&lt;/xref&gt;</ph> objects are equal.","source":"Indicates whether two <xref href=\"System.Reflection.MethodBase\"></xref> objects are equal."}],"pos":[130903,130994],"yaml":true},{"content":"The first object to compare.","nodes":[{"pos":[0,28],"content":"The first object to compare.","nodes":[{"content":"The first object to compare.","pos":[0,28]}]}],"pos":[131212,131241],"yaml":true},{"content":"The second object to compare.","nodes":[{"pos":[0,29],"content":"The second object to compare.","nodes":[{"content":"The second object to compare.","pos":[0,29]}]}],"pos":[131317,131347],"yaml":true},{"content":"`true` if <code>left</code> is equal to <code>right</code>; otherwise, `false`.","nodes":[{"pos":[0,79],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> is equal to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>left</code> is equal to <code>right</code>; otherwise, `false`."}],"pos":[131405,131487],"yaml":true},{"content":"Indicates whether two <xref href=\"System.Reflection.MethodBase\"></xref> objects are not equal.","nodes":[{"pos":[0,94],"content":"Indicates whether two <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodBase\"&gt;&lt;/xref&gt;</ph> objects are not equal.","source":"Indicates whether two <xref href=\"System.Reflection.MethodBase\"></xref> objects are not equal."}],"pos":[132940,133035],"yaml":true},{"content":"The first object to compare.","nodes":[{"pos":[0,28],"content":"The first object to compare.","nodes":[{"content":"The first object to compare.","pos":[0,28]}]}],"pos":[133255,133284],"yaml":true},{"content":"The second object to compare.","nodes":[{"pos":[0,29],"content":"The second object to compare.","nodes":[{"content":"The second object to compare.","pos":[0,29]}]}],"pos":[133360,133390],"yaml":true},{"content":"`true` if <code>left</code> is not equal to <code>right</code>; otherwise, `false`.","nodes":[{"pos":[0,83],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not equal to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>left</code> is not equal to <code>right</code>; otherwise, `false`."}],"pos":[133448,133534],"yaml":true},{"content":"Maps a set of names to a corresponding set of dispatch identifiers.","nodes":[{"pos":[0,67],"content":"Maps a set of names to a corresponding set of dispatch identifiers.","nodes":[{"content":"Maps a set of names to a corresponding set of dispatch identifiers.","pos":[0,67]}]}],"pos":[135206,135274],"yaml":true},{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.","nodes":[{"pos":[0,186],"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.","nodes":[{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::GetIDsOfNames`</ph>, see the MSDN Library.","pos":[110,186],"source":" For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library."}]}],"pos":[135285,135472],"yaml":true,"extradata":"MT"},{"content":"Reserved for future use. Must be IID_NULL.","nodes":[{"pos":[0,42],"content":"Reserved for future use. Must be IID_NULL.","nodes":[{"content":"Reserved for future use. Must be IID_NULL.","pos":[0,42],"nodes":[{"content":"Reserved for future use.","pos":[0,24]},{"content":"Must be IID_NULL.","pos":[25,42]}]}]}],"pos":[135676,135719],"yaml":true},{"content":"Passed-in array of names to be mapped.","nodes":[{"pos":[0,38],"content":"Passed-in array of names to be mapped.","nodes":[{"content":"Passed-in array of names to be mapped.","pos":[0,38]}]}],"pos":[135784,135823],"yaml":true},{"content":"Count of the names to be mapped.","nodes":[{"pos":[0,32],"content":"Count of the names to be mapped.","nodes":[{"content":"Count of the names to be mapped.","pos":[0,32]}]}],"pos":[135885,135918],"yaml":true},{"content":"The locale context in which to interpret the names.","nodes":[{"pos":[0,51],"content":"The locale context in which to interpret the names.","nodes":[{"content":"The locale context in which to interpret the names.","pos":[0,51]}]}],"pos":[135978,136030],"yaml":true},{"content":"Caller-allocated array which receives the IDs corresponding to the names.","nodes":[{"pos":[0,73],"content":"Caller-allocated array which receives the IDs corresponding to the names.","nodes":[{"content":"Caller-allocated array which receives the IDs corresponding to the names.","pos":[0,73]}]}],"pos":[136094,136168],"yaml":true},{"content":"Late-bound access using the COM <code>IDispatch</code> interface is not supported.","nodes":[{"pos":[0,82],"content":"Late-bound access using the COM <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IDispatch</ph><ept id=\"p1\">&lt;/code&gt;</ept> interface is not supported.","source":"Late-bound access using the COM <code>IDispatch</code> interface is not supported."}],"pos":[136387,136470],"yaml":true},{"content":"For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.GetType\"></xref>.","nodes":[{"pos":[0,110],"content":"For a description of this member, see <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices._MethodBase.GetType\"&gt;&lt;/xref&gt;</ph>.","source":"For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.GetType\"></xref>."}],"pos":[137643,137754],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.","nodes":[{"pos":[0,208],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.","pos":[0,208],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodBase&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices._MethodBase&gt;</ph> interface.","pos":[60,208],"source":" It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface."}]}]}],"pos":[137765,137974],"yaml":true,"extradata":"MT"},{"content":"For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.GetType\"></xref>.","nodes":[{"pos":[0,110],"content":"For a description of this member, see <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices._MethodBase.GetType\"&gt;&lt;/xref&gt;</ph>.","source":"For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.GetType\"></xref>."}],"pos":[138100,138211],"yaml":true},{"content":"Retrieves the type information for an object, which can then be used to get the type information for an interface.","nodes":[{"pos":[0,114],"content":"Retrieves the type information for an object, which can then be used to get the type information for an interface.","nodes":[{"content":"Retrieves the type information for an object, which can then be used to get the type information for an interface.","pos":[0,114]}]}],"pos":[139713,139828],"yaml":true},{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.","nodes":[{"pos":[0,184],"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.","nodes":[{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::GetTypeInfo`</ph>, see the MSDN Library.","pos":[110,184],"source":" For more information about `IDispatch::GetTypeInfo`, see the MSDN Library."}]}],"pos":[139839,140024],"yaml":true,"extradata":"MT"},{"content":"The type information to return.","nodes":[{"pos":[0,31],"content":"The type information to return.","nodes":[{"content":"The type information to return.","pos":[0,31]}]}],"pos":[140196,140228],"yaml":true},{"content":"The locale identifier for the type information.","nodes":[{"pos":[0,47],"content":"The locale identifier for the type information.","nodes":[{"content":"The locale identifier for the type information.","pos":[0,47]}]}],"pos":[140288,140336],"yaml":true},{"content":"Receives a pointer to the requested type information object.","nodes":[{"pos":[0,60],"content":"Receives a pointer to the requested type information object.","nodes":[{"content":"Receives a pointer to the requested type information object.","pos":[0,60]}]}],"pos":[140399,140460],"yaml":true},{"content":"Late-bound access using the COM <code>IDispatch</code> interface is not supported.","nodes":[{"pos":[0,82],"content":"Late-bound access using the COM <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IDispatch</ph><ept id=\"p1\">&lt;/code&gt;</ept> interface is not supported.","source":"Late-bound access using the COM <code>IDispatch</code> interface is not supported."}],"pos":[140677,140760],"yaml":true},{"content":"Retrieves the number of type information interfaces that an object provides (either 0 or 1).","nodes":[{"pos":[0,92],"content":"Retrieves the number of type information interfaces that an object provides (either 0 or 1).","nodes":[{"content":"Retrieves the number of type information interfaces that an object provides (either 0 or 1).","pos":[0,92]}]}],"pos":[142053,142146],"yaml":true},{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.","nodes":[{"pos":[0,189],"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.","nodes":[{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::GetTypeInfoCount`</ph>, see the MSDN Library.","pos":[110,189],"source":" For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library."}]}],"pos":[142157,142347],"yaml":true,"extradata":"MT"},{"content":"Points to a location that receives the number of type information interfaces provided by the object.","nodes":[{"pos":[0,100],"content":"Points to a location that receives the number of type information interfaces provided by the object.","nodes":[{"content":"Points to a location that receives the number of type information interfaces provided by the object.","pos":[0,100]}]}],"pos":[142503,142604],"yaml":true},{"content":"Late-bound access using the COM <code>IDispatch</code> interface is not supported.","nodes":[{"pos":[0,82],"content":"Late-bound access using the COM <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IDispatch</ph><ept id=\"p1\">&lt;/code&gt;</ept> interface is not supported.","source":"Late-bound access using the COM <code>IDispatch</code> interface is not supported."}],"pos":[142826,142909],"yaml":true},{"content":"Provides access to properties and methods exposed by an object.","nodes":[{"pos":[0,63],"content":"Provides access to properties and methods exposed by an object.","nodes":[{"content":"Provides access to properties and methods exposed by an object.","pos":[0,63]}]}],"pos":[144586,144650],"yaml":true},{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.","nodes":[{"pos":[0,179],"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.","nodes":[{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::Invoke`</ph>, see the MSDN Library.","pos":[110,179],"source":" For more information about `IDispatch::Invoke`, see the MSDN Library."}]}],"pos":[144661,144841],"yaml":true,"extradata":"MT"},{"content":"Identifies the member.","nodes":[{"pos":[0,22],"content":"Identifies the member.","nodes":[{"content":"Identifies the member.","pos":[0,22]}]}],"pos":[145108,145131],"yaml":true},{"content":"Reserved for future use. Must be IID_NULL.","nodes":[{"pos":[0,42],"content":"Reserved for future use. Must be IID_NULL.","nodes":[{"content":"Reserved for future use. Must be IID_NULL.","pos":[0,42],"nodes":[{"content":"Reserved for future use.","pos":[0,24]},{"content":"Must be IID_NULL.","pos":[25,42]}]}]}],"pos":[145189,145232],"yaml":true},{"content":"The locale context in which to interpret arguments.","nodes":[{"pos":[0,51],"content":"The locale context in which to interpret arguments.","nodes":[{"content":"The locale context in which to interpret arguments.","pos":[0,51]}]}],"pos":[145292,145344],"yaml":true},{"content":"Flags describing the context of the call.","nodes":[{"pos":[0,41],"content":"Flags describing the context of the call.","nodes":[{"content":"Flags describing the context of the call.","pos":[0,41]}]}],"pos":[145405,145447],"yaml":true},{"content":"Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.","nodes":[{"pos":[0,159],"content":"Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.","nodes":[{"content":"Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.","pos":[0,159]}]}],"pos":[145514,145674],"yaml":true},{"content":"Pointer to the location where the result is to be stored.","nodes":[{"pos":[0,57],"content":"Pointer to the location where the result is to be stored.","nodes":[{"content":"Pointer to the location where the result is to be stored.","pos":[0,57]}]}],"pos":[145740,145798],"yaml":true},{"content":"Pointer to a structure that contains exception information.","nodes":[{"pos":[0,59],"content":"Pointer to a structure that contains exception information.","nodes":[{"content":"Pointer to a structure that contains exception information.","pos":[0,59]}]}],"pos":[145864,145924],"yaml":true},{"content":"The index of the first argument that has an error.","nodes":[{"pos":[0,50],"content":"The index of the first argument that has an error.","nodes":[{"content":"The index of the first argument that has an error.","pos":[0,50]}]}],"pos":[145988,146039],"yaml":true},{"content":"Late-bound access using the COM <code>IDispatch</code> interface is not supported.","nodes":[{"pos":[0,82],"content":"Late-bound access using the COM <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IDispatch</ph><ept id=\"p1\">&lt;/code&gt;</ept> interface is not supported.","source":"Late-bound access using the COM <code>IDispatch</code> interface is not supported."}],"pos":[146251,146334],"yaml":true},{"content":"For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsAbstract\"></xref>.","nodes":[{"pos":[0,113],"content":"For a description of this member, see <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices._MethodBase.IsAbstract\"&gt;&lt;/xref&gt;</ph>.","source":"For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsAbstract\"></xref>."}],"pos":[147521,147635],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.","nodes":[{"pos":[0,208],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.","pos":[0,208],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodBase&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices._MethodBase&gt;</ph> interface.","pos":[60,208],"source":" It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface."}]}]}],"pos":[147646,147855],"yaml":true,"extradata":"MT"},{"content":"For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsAbstract\"></xref>.","nodes":[{"pos":[0,113],"content":"For a description of this member, see <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices._MethodBase.IsAbstract\"&gt;&lt;/xref&gt;</ph>.","source":"For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsAbstract\"></xref>."}],"pos":[148004,148118],"yaml":true},{"content":"For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsAssembly\"></xref>.","nodes":[{"pos":[0,113],"content":"For a description of this member, see <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices._MethodBase.IsAssembly\"&gt;&lt;/xref&gt;</ph>.","source":"For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsAssembly\"></xref>."}],"pos":[149378,149492],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.","nodes":[{"pos":[0,208],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.","pos":[0,208],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodBase&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices._MethodBase&gt;</ph> interface.","pos":[60,208],"source":" It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface."}]}]}],"pos":[149503,149712],"yaml":true,"extradata":"MT"},{"content":"For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsAssembly\"></xref>.","nodes":[{"pos":[0,113],"content":"For a description of this member, see <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices._MethodBase.IsAssembly\"&gt;&lt;/xref&gt;</ph>.","source":"For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsAssembly\"></xref>."}],"pos":[149861,149975],"yaml":true},{"content":"For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsConstructor\"></xref>.","nodes":[{"pos":[0,116],"content":"For a description of this member, see <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices._MethodBase.IsConstructor\"&gt;&lt;/xref&gt;</ph>.","source":"For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsConstructor\"></xref>."}],"pos":[151253,151370],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.","nodes":[{"pos":[0,208],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.","pos":[0,208],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodBase&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices._MethodBase&gt;</ph> interface.","pos":[60,208],"source":" It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface."}]}]}],"pos":[151381,151590],"yaml":true,"extradata":"MT"},{"content":"For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsConstructor\"></xref>.","nodes":[{"pos":[0,116],"content":"For a description of this member, see <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices._MethodBase.IsConstructor\"&gt;&lt;/xref&gt;</ph>.","source":"For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsConstructor\"></xref>."}],"pos":[151742,151859],"yaml":true},{"content":"For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsFamily\"></xref>.","nodes":[{"pos":[0,111],"content":"For a description of this member, see <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices._MethodBase.IsFamily\"&gt;&lt;/xref&gt;</ph>.","source":"For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsFamily\"></xref>."}],"pos":[153110,153222],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.","nodes":[{"pos":[0,208],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.","pos":[0,208],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodBase&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices._MethodBase&gt;</ph> interface.","pos":[60,208],"source":" It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface."}]}]}],"pos":[153233,153442],"yaml":true,"extradata":"MT"},{"content":"For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsFamily\"></xref>.","nodes":[{"pos":[0,111],"content":"For a description of this member, see <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices._MethodBase.IsFamily\"&gt;&lt;/xref&gt;</ph>.","source":"For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsFamily\"></xref>."}],"pos":[153589,153701],"yaml":true},{"content":"For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsFamilyAndAssembly\"></xref>.","nodes":[{"pos":[0,122],"content":"For a description of this member, see <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices._MethodBase.IsFamilyAndAssembly\"&gt;&lt;/xref&gt;</ph>.","source":"For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsFamilyAndAssembly\"></xref>."}],"pos":[155013,155136],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.","nodes":[{"pos":[0,208],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.","pos":[0,208],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodBase&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices._MethodBase&gt;</ph> interface.","pos":[60,208],"source":" It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface."}]}]}],"pos":[155147,155356],"yaml":true,"extradata":"MT"},{"content":"For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsFamilyAndAssembly\"></xref>.","nodes":[{"pos":[0,122],"content":"For a description of this member, see <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices._MethodBase.IsFamilyAndAssembly\"&gt;&lt;/xref&gt;</ph>.","source":"For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsFamilyAndAssembly\"></xref>."}],"pos":[155514,155637],"yaml":true},{"content":"For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsFamilyOrAssembly\"></xref>.","nodes":[{"pos":[0,121],"content":"For a description of this member, see <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices._MethodBase.IsFamilyOrAssembly\"&gt;&lt;/xref&gt;</ph>.","source":"For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsFamilyOrAssembly\"></xref>."}],"pos":[156954,157076],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.","nodes":[{"pos":[0,208],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.","pos":[0,208],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodBase&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices._MethodBase&gt;</ph> interface.","pos":[60,208],"source":" It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface."}]}]}],"pos":[157087,157296],"yaml":true,"extradata":"MT"},{"content":"For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsFamilyOrAssembly\"></xref>.","nodes":[{"pos":[0,121],"content":"For a description of this member, see <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices._MethodBase.IsFamilyOrAssembly\"&gt;&lt;/xref&gt;</ph>.","source":"For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsFamilyOrAssembly\"></xref>."}],"pos":[157453,157575],"yaml":true},{"content":"For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsFinal\"></xref>.","nodes":[{"pos":[0,110],"content":"For a description of this member, see <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices._MethodBase.IsFinal\"&gt;&lt;/xref&gt;</ph>.","source":"For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsFinal\"></xref>."}],"pos":[158825,158936],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.","nodes":[{"pos":[0,208],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.","pos":[0,208],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodBase&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices._MethodBase&gt;</ph> interface.","pos":[60,208],"source":" It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface."}]}]}],"pos":[158947,159156],"yaml":true,"extradata":"MT"},{"content":"For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsFinal\"></xref>.","nodes":[{"pos":[0,110],"content":"For a description of this member, see <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices._MethodBase.IsFinal\"&gt;&lt;/xref&gt;</ph>.","source":"For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsFinal\"></xref>."}],"pos":[159302,159413],"yaml":true},{"content":"For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsHideBySig\"></xref>.","nodes":[{"pos":[0,114],"content":"For a description of this member, see <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices._MethodBase.IsHideBySig\"&gt;&lt;/xref&gt;</ph>.","source":"For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsHideBySig\"></xref>."}],"pos":[160676,160791],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.","nodes":[{"pos":[0,208],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.","pos":[0,208],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodBase&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices._MethodBase&gt;</ph> interface.","pos":[60,208],"source":" It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface."}]}]}],"pos":[160802,161011],"yaml":true,"extradata":"MT"},{"content":"For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsHideBySig\"></xref>.","nodes":[{"pos":[0,114],"content":"For a description of this member, see <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices._MethodBase.IsHideBySig\"&gt;&lt;/xref&gt;</ph>.","source":"For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsHideBySig\"></xref>."}],"pos":[161161,161276],"yaml":true},{"content":"For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsPrivate\"></xref>.","nodes":[{"pos":[0,112],"content":"For a description of this member, see <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices._MethodBase.IsPrivate\"&gt;&lt;/xref&gt;</ph>.","source":"For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsPrivate\"></xref>."}],"pos":[162531,162644],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.","nodes":[{"pos":[0,208],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.","pos":[0,208],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodBase&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices._MethodBase&gt;</ph> interface.","pos":[60,208],"source":" It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface."}]}]}],"pos":[162655,162864],"yaml":true,"extradata":"MT"},{"content":"For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsPrivate\"></xref>.","nodes":[{"pos":[0,112],"content":"For a description of this member, see <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices._MethodBase.IsPrivate\"&gt;&lt;/xref&gt;</ph>.","source":"For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsPrivate\"></xref>."}],"pos":[163012,163125],"yaml":true},{"content":"For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsPublic\"></xref>.","nodes":[{"pos":[0,111],"content":"For a description of this member, see <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices._MethodBase.IsPublic\"&gt;&lt;/xref&gt;</ph>.","source":"For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsPublic\"></xref>."}],"pos":[164372,164484],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.","nodes":[{"pos":[0,208],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.","pos":[0,208],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodBase&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices._MethodBase&gt;</ph> interface.","pos":[60,208],"source":" It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface."}]}]}],"pos":[164495,164704],"yaml":true,"extradata":"MT"},{"content":"For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsPublic\"></xref>.","nodes":[{"pos":[0,111],"content":"For a description of this member, see <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices._MethodBase.IsPublic\"&gt;&lt;/xref&gt;</ph>.","source":"For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsPublic\"></xref>."}],"pos":[164851,164963],"yaml":true},{"content":"For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsSpecialName\"></xref>.","nodes":[{"pos":[0,116],"content":"For a description of this member, see <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices._MethodBase.IsSpecialName\"&gt;&lt;/xref&gt;</ph>.","source":"For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsSpecialName\"></xref>."}],"pos":[166239,166356],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.","nodes":[{"pos":[0,208],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.","pos":[0,208],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodBase&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices._MethodBase&gt;</ph> interface.","pos":[60,208],"source":" It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface."}]}]}],"pos":[166367,166576],"yaml":true,"extradata":"MT"},{"content":"For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsSpecialName\"></xref>.","nodes":[{"pos":[0,116],"content":"For a description of this member, see <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices._MethodBase.IsSpecialName\"&gt;&lt;/xref&gt;</ph>.","source":"For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsSpecialName\"></xref>."}],"pos":[166728,166845],"yaml":true},{"content":"For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsStatic\"></xref>.","nodes":[{"pos":[0,111],"content":"For a description of this member, see <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices._MethodBase.IsStatic\"&gt;&lt;/xref&gt;</ph>.","source":"For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsStatic\"></xref>."}],"pos":[168096,168208],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.","nodes":[{"pos":[0,208],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.","pos":[0,208],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodBase&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices._MethodBase&gt;</ph> interface.","pos":[60,208],"source":" It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface."}]}]}],"pos":[168219,168428],"yaml":true,"extradata":"MT"},{"content":"For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsStatic\"></xref>.","nodes":[{"pos":[0,111],"content":"For a description of this member, see <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices._MethodBase.IsStatic\"&gt;&lt;/xref&gt;</ph>.","source":"For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsStatic\"></xref>."}],"pos":[168575,168687],"yaml":true},{"content":"For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsVirtual\"></xref>.","nodes":[{"pos":[0,112],"content":"For a description of this member, see <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices._MethodBase.IsVirtual\"&gt;&lt;/xref&gt;</ph>.","source":"For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsVirtual\"></xref>."}],"pos":[169939,170052],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.","nodes":[{"pos":[0,208],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.","pos":[0,208],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodBase&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices._MethodBase&gt;</ph> interface.","pos":[60,208],"source":" It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface."}]}]}],"pos":[170063,170272],"yaml":true,"extradata":"MT"},{"content":"For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsVirtual\"></xref>.","nodes":[{"pos":[0,112],"content":"For a description of this member, see <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices._MethodBase.IsVirtual\"&gt;&lt;/xref&gt;</ph>.","source":"For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsVirtual\"></xref>."}],"pos":[170420,170533],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Reflection.MethodBase\n  commentId: T:System.Reflection.MethodBase\n  id: MethodBase\n  children:\n  - System.Reflection.MethodBase.#ctor\n  - System.Reflection.MethodBase.Attributes\n  - System.Reflection.MethodBase.CallingConvention\n  - System.Reflection.MethodBase.ContainsGenericParameters\n  - System.Reflection.MethodBase.Equals(System.Object)\n  - System.Reflection.MethodBase.GetCurrentMethod\n  - System.Reflection.MethodBase.GetGenericArguments\n  - System.Reflection.MethodBase.GetHashCode\n  - System.Reflection.MethodBase.GetMethodBody\n  - System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)\n  - System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)\n  - System.Reflection.MethodBase.GetMethodImplementationFlags\n  - System.Reflection.MethodBase.GetParameters\n  - System.Reflection.MethodBase.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)\n  - System.Reflection.MethodBase.Invoke(System.Object,System.Object[])\n  - System.Reflection.MethodBase.IsAbstract\n  - System.Reflection.MethodBase.IsAssembly\n  - System.Reflection.MethodBase.IsConstructor\n  - System.Reflection.MethodBase.IsFamily\n  - System.Reflection.MethodBase.IsFamilyAndAssembly\n  - System.Reflection.MethodBase.IsFamilyOrAssembly\n  - System.Reflection.MethodBase.IsFinal\n  - System.Reflection.MethodBase.IsGenericMethod\n  - System.Reflection.MethodBase.IsGenericMethodDefinition\n  - System.Reflection.MethodBase.IsHideBySig\n  - System.Reflection.MethodBase.IsPrivate\n  - System.Reflection.MethodBase.IsPublic\n  - System.Reflection.MethodBase.IsSecurityCritical\n  - System.Reflection.MethodBase.IsSecuritySafeCritical\n  - System.Reflection.MethodBase.IsSecurityTransparent\n  - System.Reflection.MethodBase.IsSpecialName\n  - System.Reflection.MethodBase.IsStatic\n  - System.Reflection.MethodBase.IsVirtual\n  - System.Reflection.MethodBase.MethodHandle\n  - System.Reflection.MethodBase.MethodImplementationFlags\n  - System.Reflection.MethodBase.op_Equality(System.Reflection.MethodBase,System.Reflection.MethodBase)\n  - System.Reflection.MethodBase.op_Inequality(System.Reflection.MethodBase,System.Reflection.MethodBase)\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetType\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetTypeInfoCount(System.UInt32@)\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsAbstract\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsAssembly\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsConstructor\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamily\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamilyAndAssembly\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamilyOrAssembly\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFinal\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsHideBySig\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsPrivate\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsPublic\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsSpecialName\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsStatic\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsVirtual\n  langs:\n  - csharp\n  name: MethodBase\n  nameWithType: MethodBase\n  fullName: System.Reflection.MethodBase\n  type: Class\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Provides information about methods and constructors.\n  remarks: '`MethodBase` is the base class of <xref:System.Reflection.MethodInfo> and <xref:System.Reflection.ConstructorInfo>.'\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public abstract class MethodBase : System.Reflection.MemberInfo, System.Runtime.InteropServices._MethodBase\n  inheritance:\n  - System.Object\n  - System.Reflection.MemberInfo\n  derivedClasses:\n  - System.Reflection.ConstructorInfo\n  - System.Reflection.MethodInfo\n  implements:\n  - System.Runtime.InteropServices._MethodBase\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Reflection.MemberInfo.CustomAttributes\n  - System.Reflection.MemberInfo.DeclaringType\n  - System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)\n  - System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)\n  - System.Reflection.MemberInfo.GetCustomAttributesData\n  - System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)\n  - System.Reflection.MemberInfo.MemberType\n  - System.Reflection.MemberInfo.MetadataToken\n  - System.Reflection.MemberInfo.Module\n  - System.Reflection.MemberInfo.Name\n  - System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)\n  - System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)\n  - System.Reflection.MemberInfo.ReflectedType\n  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetType\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  extensionMethods:\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type)\n  - System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Reflection.MemberInfoExtensions.GetMetadataToken(System.Reflection.MemberInfo)\n  - System.Reflection.MemberInfoExtensions.HasMetadataToken(System.Reflection.MemberInfo)\n  attributes:\n  - type: System.Runtime.InteropServices.ClassInterfaceAttribute\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodBase.#ctor\n  commentId: M:System.Reflection.MethodBase.#ctor\n  id: '#ctor'\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  name: MethodBase()\n  nameWithType: MethodBase.MethodBase()\n  fullName: MethodBase.MethodBase()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Initializes a new instance of the <xref href=\"System.Reflection.MethodBase\"></xref> class.\n  syntax:\n    content: protected MethodBase ();\n    parameters: []\n  overload: System.Reflection.MethodBase.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodBase.Attributes\n  commentId: P:System.Reflection.MethodBase.Attributes\n  id: Attributes\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  name: Attributes\n  nameWithType: MethodBase.Attributes\n  fullName: MethodBase.Attributes\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the attributes associated with this method.\n  remarks: \"All members have a set of attributes, which are defined in relation to the specific type of member.  \\n  \\n To get the <xref:System.Reflection.MethodAttributes>, first get the type. From the type, get the method. From the method, get the <xref:System.Reflection.MethodAttributes>.\"\n  example:\n  - \"The following code example displays the attributes of the user-defined method Mymethod.  \\n  \\n [!code-cpp[Classic MethodBase.Attributes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic MethodBase.Attributes Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic MethodBase.Attributes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MethodBase.Attributes Example/CS/source.cs#1)]\\n [!code-vb[Classic MethodBase.Attributes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MethodBase.Attributes Example/VB/source.vb#1)]  \\n  \\n This code produces the following output:  \\n  \\n Reflection.MethodBase.Attributes Sample  \\n  \\n Mymethodbase = Void Mymethod(Int32, System.String ByRef, System.String ByRef)  \\n  \\n PrivateScope  \\n  \\n FamANDAssem  \\n  \\n Family  \\n  \\n Public  \\n  \\n HideBySig  \\n  \\n ReuseSlot\"\n  syntax:\n    content: public abstract System.Reflection.MethodAttributes Attributes { get; }\n    return:\n      type: System.Reflection.MethodAttributes\n      description: One of the <xref href=\"System.Reflection.MethodAttributes\"></xref> values.\n  overload: System.Reflection.MethodBase.Attributes*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodBase.CallingConvention\n  commentId: P:System.Reflection.MethodBase.CallingConvention\n  id: CallingConvention\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  name: CallingConvention\n  nameWithType: MethodBase.CallingConvention\n  fullName: MethodBase.CallingConvention\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a value indicating the calling conventions for this method.\n  syntax:\n    content: public virtual System.Reflection.CallingConventions CallingConvention { get; }\n    return:\n      type: System.Reflection.CallingConventions\n      description: The <xref href=\"System.Reflection.CallingConventions\"></xref> for this method.\n  overload: System.Reflection.MethodBase.CallingConvention*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodBase.ContainsGenericParameters\n  commentId: P:System.Reflection.MethodBase.ContainsGenericParameters\n  id: ContainsGenericParameters\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  name: ContainsGenericParameters\n  nameWithType: MethodBase.ContainsGenericParameters\n  fullName: MethodBase.ContainsGenericParameters\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a value indicating whether the generic method contains unassigned generic type parameters.\n  remarks: \"A generic method can be invoked only if there are no generic type definitions or open constructed types in the type arguments of the method itself or in any enclosing types. Because types can be arbitrarily complex, making this recursive determination is difficult. For convenience, and to reduce the chance of error, the <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> property provides a standard way to distinguish between closed constructed methods, which can be invoked, and open constructed methods, which cannot. If the <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> property returns `true`, the method cannot be invoked.  \\n  \\n The <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> property searches recursively for type parameters. For example, it returns `true` for any method in an open type `A<T>` (`A(Of T)` in Visual Basic), even though the method itself is not generic. Contrast this with the behavior of the <xref:System.Reflection.MethodBase.IsGenericMethod%2A> property, which returns `false` for such a method.  \\n  \\n Similarly, the <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> property parameter returns `true` for any constructor in an open type, even though constructors cannot have type parameters of their own.  \\n  \\n For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodInfo.IsGenericMethod%2A?displayProperty=fullName> property. For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=fullName> property.\"\n  syntax:\n    content: public virtual bool ContainsGenericParameters { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the current <xref href=\"System.Reflection.MethodBase\"></xref> object represents a generic method that contains unassigned generic type parameters; otherwise, `false`.'\n  overload: System.Reflection.MethodBase.ContainsGenericParameters*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodBase.Equals(System.Object)\n  commentId: M:System.Reflection.MethodBase.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: MethodBase.Equals(Object)\n  fullName: MethodBase.Equals(Object)\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns a value that indicates whether this instance is equal to a specified object.\n  syntax:\n    content: public override bool Equals (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: An object to compare with this instance, or `null`.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>obj</code> equals the type and value of this instance; otherwise, `false`.'\n  overload: System.Reflection.MethodBase.Equals*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodBase.GetCurrentMethod\n  commentId: M:System.Reflection.MethodBase.GetCurrentMethod\n  id: GetCurrentMethod\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  name: GetCurrentMethod()\n  nameWithType: MethodBase.GetCurrentMethod()\n  fullName: MethodBase.GetCurrentMethod()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns a `MethodBase` object representing the currently executing method.\n  remarks: \"If the currently executing method is defined on a generic type, the <xref:System.Reflection.MethodInfo> that is returned by <xref:System.Reflection.MethodBase.GetCurrentMethod%2A> is obtained from the generic type definition (that is, <xref:System.Reflection.MethodInfo.ContainsGenericParameters%2A?displayProperty=fullName> returns `true`). Therefore, it does not reflect the type arguments that were used when the method was called. For example, if a method `M()` is defined on a generic type `C<T>` (`C(Of T)` in Visual Basic), and <xref:System.Reflection.MethodBase.GetCurrentMethod%2A> is called from `C<string>.M()`, then <xref:System.Reflection.MethodBase.GetCurrentMethod%2A> returns `C<T>.M()` (`C(Of T).M()` in Visual Basic).  \\n  \\n If the currently executing method is a generic method, <xref:System.Reflection.MethodBase.GetCurrentMethod%2A> returns the generic method definition. If the generic method is defined on a generic type, the <xref:System.Reflection.MethodInfo> is obtained from the generic type definition.\"\n  example:\n  - \"The following example defines two types. The first is a non-generic class, `TestClass`, includes a constructor, a method named `GetValue`, and a read-write property named `GetValue`. The second is a generic class named `TestClass<T>` that includes a constructor, a `GetValue` method, and a generic method, `ConvertValue<Y>`. Each constructor, method, and property accessor includes a call to the <xref:System.Reflection.MethodBase.GetCurrentMethod%2A> method.  \\n  \\n [!code-csharp[System.Reflection.MethodBase.GetCurrentMethod#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Reflection.MethodBase.GetCurrentMethod/cs/GetCurentMethod1.cs#1)]\\n [!code-vb[System.Reflection.MethodBase.GetCurrentMethod#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Reflection.MethodBase.GetCurrentMethod/vb/GetCurentMethod1.vb#1)]\"\n  syntax:\n    content: public static System.Reflection.MethodBase GetCurrentMethod ();\n    parameters: []\n    return:\n      type: System.Reflection.MethodBase\n      description: \"<xref href=\\\"System.Reflection.MethodBase.GetCurrentMethod\\\"></xref> is a static method that is called from within an executing method and that returns information about that method.  \\n  \\n A `MethodBase` object representing the currently executing method.\"\n  overload: System.Reflection.MethodBase.GetCurrentMethod*\n  exceptions:\n  - type: System.Reflection.TargetException\n    commentId: T:System.Reflection.TargetException\n    description: This member was invoked with a late-binding mechanism.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodBase.GetGenericArguments\n  commentId: M:System.Reflection.MethodBase.GetGenericArguments\n  id: GetGenericArguments\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  name: GetGenericArguments()\n  nameWithType: MethodBase.GetGenericArguments()\n  fullName: MethodBase.GetGenericArguments()\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns an array of <xref href=\"System.Type\"></xref> objects that represent the type arguments of a generic method or the type parameters of a generic method definition.\n  remarks: \"The elements of the returned array are in the order in which they appear in the list of type parameters for the generic method.  \\n  \\n-   If the current method is a closed constructed method (that is, the <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> property returns `false`), the array returned by the <xref:System.Reflection.MethodBase.GetGenericArguments%2A> method contains the types that have been assigned to the generic type parameters of the generic method definition.  \\n  \\n-   If the current method is a generic method definition, the array contains the type parameters.  \\n  \\n-   If the current method is an open constructed method (that is, the <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> property returns `true`) in which specific types have been assigned to some type parameters and type parameters of enclosing generic types have been assigned to other type parameters, the array contains both types and type parameters. Use the <xref:System.Type.IsGenericParameter%2A> property to tell them apart. For a demonstration of this scenario, see the code example provided for the <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> property.  \\n  \\n Generic constructors are not supported in the .NET Framework version 2.0. This property throws <xref:System.NotSupportedException> if not overridden in a derived class, so an exception is thrown if the current instance is of type <xref:System.Reflection.ConstructorInfo>.  \\n  \\n For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodInfo.IsGenericMethod%2A?displayProperty=fullName> property. For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=fullName> property.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public virtual Type[] GetGenericArguments ();\n    parameters: []\n    return:\n      type: System.Type[]\n      description: An array of <xref href=\"System.Type\"></xref> objects that represent the type arguments of a generic method or the type parameters of a generic method definition. Returns an empty array if the current method is not a generic method.\n  overload: System.Reflection.MethodBase.GetGenericArguments*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The current object is a <xref href=\"System.Reflection.ConstructorInfo\"></xref>. Generic constructors are not supported in the .NET Framework version 2.0. This exception is the default behavior if this method is not overridden in a derived class.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodBase.GetHashCode\n  commentId: M:System.Reflection.MethodBase.GetHashCode\n  id: GetHashCode\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: MethodBase.GetHashCode()\n  fullName: MethodBase.GetHashCode()\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns the hash code for this instance.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: A 32-bit signed integer hash code.\n  overload: System.Reflection.MethodBase.GetHashCode*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodBase.GetMethodBody\n  commentId: M:System.Reflection.MethodBase.GetMethodBody\n  id: GetMethodBody\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  name: GetMethodBody()\n  nameWithType: MethodBase.GetMethodBody()\n  fullName: MethodBase.GetMethodBody()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: When overridden in a derived class, gets a <xref href=\"System.Reflection.MethodBody\"></xref> object that provides access to the MSIL stream, local variables, and exceptions for the current method.\n  remarks: You do not have to override the <xref:System.Reflection.MethodBase.GetMethodBody%2A> in order to use it. You can call the <xref:System.Reflection.MethodBase.GetMethodBody%2A> method on <xref:System.Reflection.MethodInfo> and <xref:System.Reflection.ConstructorInfo> objects, because the method is overridden in the runtime versions of these classes. For example, the runtime version of the <xref:System.Reflection.MethodInfo> class derives from the <xref:System.Reflection.MethodInfo> class, which in turn derives from the <xref:System.Reflection.MethodBase> class.\n  example:\n  - \"The following code example defines a test method named `MethodBodyExample` and displays its local variable information and exception-handling clauses. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method.  \\n  \\n The <xref:System.Reflection.MethodBody.LocalVariables%2A> property is used to obtain a list of <xref:System.Reflection.LocalVariableInfo> objects and display their types and index order. The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of exception-handling clauses.  \\n  \\n> [!NOTE]\\n>  Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions?displayProperty=fullName> clauses. The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.  \\n  \\n [!code-cpp[MethodBody#1](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#1)]\\n [!code-csharp[MethodBody#1](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#1)]\\n [!code-vb[MethodBody#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual System.Reflection.MethodBody GetMethodBody ();\n    parameters: []\n    return:\n      type: System.Reflection.MethodBody\n      description: A <xref href=\"System.Reflection.MethodBody\"></xref> object that provides access to the MSIL stream, local variables, and exceptions for the current method.\n  overload: System.Reflection.MethodBase.GetMethodBody*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: This method is invalid unless overridden in a derived class.\n  attributes: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)\n  commentId: M:System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)\n  id: GetMethodFromHandle(System.RuntimeMethodHandle)\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  name: GetMethodFromHandle(RuntimeMethodHandle)\n  nameWithType: MethodBase.GetMethodFromHandle(RuntimeMethodHandle)\n  fullName: MethodBase.GetMethodFromHandle(RuntimeMethodHandle)\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets method information by using the method's internal metadata representation (handle).\n  remarks: Handles are valid only in the application domain in which they were obtained.\n  syntax:\n    content: public static System.Reflection.MethodBase GetMethodFromHandle (RuntimeMethodHandle handle);\n    parameters:\n    - id: handle\n      type: System.RuntimeMethodHandle\n      description: The method's handle.\n    return:\n      type: System.Reflection.MethodBase\n      description: A `MethodBase` containing information about the method.\n  overload: System.Reflection.MethodBase.GetMethodFromHandle*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>handle</code> is invalid.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)\n  commentId: M:System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)\n  id: GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  name: GetMethodFromHandle(RuntimeMethodHandle, RuntimeTypeHandle)\n  nameWithType: MethodBase.GetMethodFromHandle(RuntimeMethodHandle, RuntimeTypeHandle)\n  fullName: MethodBase.GetMethodFromHandle(RuntimeMethodHandle, RuntimeTypeHandle)\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a <xref href=\"System.Reflection.MethodBase\"></xref> object for the constructor or method represented by the specified handle, for the specified generic type.\n  remarks: \"Handles are valid only in the application domain in which they were obtained.  \\n  \\n A <xref:System.RuntimeMethodHandle> structure for a constructor or method of a generic type can represent different <xref:System.Reflection.MethodBase> objects, depending on the types specified for the type parameters of the generic type. For example, if `class G<T>` (`class G(Of T)` in Visual Basic, `generic <T> ref class G` in C++) has a method that returns type `T`, the <xref:System.Reflection.MethodBase> object for that method in a constructed class such as `G<int>` is different from the <xref:System.Reflection.MethodBase> object for that method in the generic type definition.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public static System.Reflection.MethodBase GetMethodFromHandle (RuntimeMethodHandle handle, RuntimeTypeHandle declaringType);\n    parameters:\n    - id: handle\n      type: System.RuntimeMethodHandle\n      description: A handle to the internal metadata representation of a constructor or method.\n    - id: declaringType\n      type: System.RuntimeTypeHandle\n      description: A handle to the generic type that defines the constructor or method.\n    return:\n      type: System.Reflection.MethodBase\n      description: A <xref href=\"System.Reflection.MethodBase\"></xref> object representing the method or constructor specified by <code>handle</code>, in the generic type specified by <code>declaringType</code>.\n  overload: System.Reflection.MethodBase.GetMethodFromHandle*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>handle</code> is invalid.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodBase.GetMethodImplementationFlags\n  commentId: M:System.Reflection.MethodBase.GetMethodImplementationFlags\n  id: GetMethodImplementationFlags\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  name: GetMethodImplementationFlags()\n  nameWithType: MethodBase.GetMethodImplementationFlags()\n  fullName: MethodBase.GetMethodImplementationFlags()\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: When overridden in a derived class, returns the <xref href=\"System.Reflection.MethodImplAttributes\"></xref> flags.\n  remarks: ''\n  example:\n  - \"The following example defines a constructor in a dynamic assembly and then uses the <xref:System.Reflection.MethodBase.GetMethodImplementationFlags%2A> method to display the method implementation flags that are set by default.  \\n  \\n [!code-cpp[ConstructorBuilder_GetModule_4#3](~/samples/snippets/cpp/VS_Snippets_CLR/ConstructorBuilder_GetModule_4/CPP/constructorbuilder_getmodule_4.cpp#3)]\\n [!code-csharp[ConstructorBuilder_GetModule_4#3](~/samples/snippets/csharp/VS_Snippets_CLR/ConstructorBuilder_GetModule_4/CS/constructorbuilder_getmodule_4.cs#3)]\\n [!code-vb[ConstructorBuilder_GetModule_4#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/ConstructorBuilder_GetModule_4/VB/constructorbuilder_getmodule_4.vb#3)]\"\n  syntax:\n    content: public abstract System.Reflection.MethodImplAttributes GetMethodImplementationFlags ();\n    parameters: []\n    return:\n      type: System.Reflection.MethodImplAttributes\n      description: The `MethodImplAttributes` flags.\n  overload: System.Reflection.MethodBase.GetMethodImplementationFlags*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodBase.GetParameters\n  commentId: M:System.Reflection.MethodBase.GetParameters\n  id: GetParameters\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  name: GetParameters()\n  nameWithType: MethodBase.GetParameters()\n  fullName: MethodBase.GetParameters()\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: When overridden in a derived class, gets the parameters of the specified method or constructor.\n  remarks: ''\n  example:\n  - \"The following example uses the <xref:System.Reflection.MethodBase.GetParameters%2A> method to retrieve the parameters of the `Invoke` method of a delegate.  \\n  \\n The example defines a delegate named `MyDelegate` and an event named `ev` of type `MyDelegate`. The code in the `Main` method discovers the event signature by getting the delegate type of the event, getting the `Invoke` method of the delegate type, and then retrieving and displaying the parameters.  \\n  \\n [!code-cpp[eventarg#1](~/samples/snippets/cpp/VS_Snippets_CLR/EventArg/CPP/eventarg.cpp#1)]\\n [!code-csharp[eventarg#1](~/samples/snippets/csharp/VS_Snippets_CLR/EventArg/CS/eventarg.cs#1)]\\n [!code-vb[eventarg#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventArg/VB/eventarg.vb#1)]\"\n  syntax:\n    content: public abstract System.Reflection.ParameterInfo[] GetParameters ();\n    parameters: []\n    return:\n      type: System.Reflection.ParameterInfo[]\n      description: An array of type `ParameterInfo` containing information that matches the signature of the method (or constructor) reflected by this `MethodBase` instance.\n  overload: System.Reflection.MethodBase.GetParameters*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodBase.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)\n  commentId: M:System.Reflection.MethodBase.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)\n  id: Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  name: Invoke(Object, BindingFlags, Binder, Object[], CultureInfo)\n  nameWithType: MethodBase.Invoke(Object, BindingFlags, Binder, Object[], CultureInfo)\n  fullName: MethodBase.Invoke(Object, BindingFlags, Binder, Object[], CultureInfo)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: When overridden in a derived class, invokes the reflected method or constructor with the given parameters.\n  remarks: \"Dynamically invokes the method reflected by this instance on `obj`, and passes along the specified parameters. If the method is static, the `obj` parameter is ignored. For non-static methods, `obj` should be an instance of a class that inherits or declares the method and must be the same type as this class. If the method has no parameters, the value of `parameters` should be `null`. Otherwise, the number, type, and order of elements in `parameters` should be identical to the number, type, and order of parameters for the method reflected by this instance.  \\n  \\n You may not omit optional parameters in calls to `Invoke`. To invoke a method omitting optional parameters, you should call `Type.InvokeMember` instead.  \\n  \\n> [!NOTE]\\n>  If this method overload is used to invoke an instance constructor, the object supplied for `obj` is reinitialized; that is, all instance initializers are executed. The return value is `null`. If a class constructor is invoked, the class is reinitialized; that is, all class initializers are executed. The return value is `null`.  \\n  \\n For pass-by-value primitive parameters, normal widening is performed (Int16 -> Int32, for example). For pass-by-value reference parameters, normal reference widening is allowed (derived class to base class, and base class to interface type). However, for pass-by-reference primitive parameters, the types must match exactly. For pass-by-reference reference parameters, the normal widening still applies.  \\n  \\n For example, if the method reflected by this instance is declared as `public boolean Compare(String a, String b)`, then `parameters` should be an array of `Objects` with length 2 such that `parameters[0] = new Object(\\\"SomeString1\\\") and parameters[1] = new Object(\\\"SomeString2\\\")`.  \\n  \\n If a parameter of the current method is a value type, and the corresponding argument in `parameters` is `null`, the runtime passes a zero-initialized instance of the value type.  \\n  \\n Reflection uses dynamic method lookup when invoking virtual methods. For example, suppose that class B inherits from class A and both implement a virtual method named M. Now suppose that you have a `MethodInfo` object that represents M on class A. If you use the `Invoke` method to invoke M on an object of type B, then reflection will use the implementation given by class B. Even if the object of type B is cast to A, the implementation given by class B is used (see code sample below).  \\n  \\n On the other hand, if the method is non-virtual, then reflection will use the implementation given by the type from which the `MethodInfo` was obtained, regardless of the type of the object passed as the target.  \\n  \\n Access restrictions are ignored for fully trusted code. That is, private constructors, methods, fields, and properties can be accessed and invoked via reflection whenever the code is fully trusted.  \\n  \\n If the invoked method throws an exception, `TargetInvocationException.GetException` returns the exception. This implementation throws a `NotSupportedException`.  \\n  \\n> [!NOTE]\\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \\n>   \\n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.\"\n  example:\n  - \"The following example demonstrates all members of the <xref:System.Reflection.Binder?displayProperty=fullName> class using an overload of <xref:System.Type.InvokeMember%2A?displayProperty=fullName>. The private method `CanConvertFrom` finds compatible types for a given type. For another example of invoking members in a custom binding scenario, see [Dynamically Loading and Using Types](~/docs/framework/reflection-and-codedom/dynamically-loading-and-using-types.md).  \\n  \\n [!code-cpp[Binder_1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Binder_1/CPP/binder.cpp#1)]\\n [!code-csharp[Binder_1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Binder_1/CS/binder.cs#1)]\\n [!code-vb[Binder_1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Binder_1/VB/binder.vb#1)]\"\n  syntax:\n    content: public abstract object Invoke (object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object on which to invoke the method or constructor. If a method is static, this argument is ignored. If a constructor is static, this argument must be `null` or an instance of the class that defines the constructor.\n    - id: invokeAttr\n      type: System.Reflection.BindingFlags\n      description: A bitmask that is a combination of 0 or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>. If <code>binder</code> is `null`, this parameter is assigned the value <xref href=\"System.Reflection.BindingFlags.Default\"></xref>; thus, whatever you pass in is ignored.\n    - id: binder\n      type: System.Reflection.Binder\n      description: An object that enables the binding, coercion of argument types, invocation of members, and retrieval of `MemberInfo` objects via reflection. If <code>binder</code> is `null`, the default binder is used.\n    - id: parameters\n      type: System.Object[]\n      description: \"An argument list for the invoked method or constructor. This is an array of objects with the same number, order, and type as the parameters of the method or constructor to be invoked. If there are no parameters, this should be `null`.  \\n  \\n If the method or constructor represented by this instance takes a ByRef parameter, there is no special attribute required for that parameter in order to invoke the method or constructor using this function. Any object in this array that is not explicitly initialized with a value will contain the default value for that object type. For reference-type elements, this value is `null`. For value-type elements, this value is 0, 0.0, or `false`, depending on the specific element type.\"\n    - id: culture\n      type: System.Globalization.CultureInfo\n      description: An instance of `CultureInfo` used to govern the coercion of types. If this is `null`, the `CultureInfo` for the current thread is used. (This is necessary to convert a `String` that represents 1000 to a `Double` value, for example, since 1000 is represented differently by different cultures.)\n    return:\n      type: System.Object\n      description: An `Object` containing the return value of the invoked method, or `null` in the case of a constructor, or `null` if the method's return type is `void`. Before calling the method or constructor, `Invoke` checks to see if the user has access permission and verifies that the parameters are valid.\n  overload: System.Reflection.MethodBase.Invoke*\n  exceptions:\n  - type: System.Reflection.TargetException\n    commentId: T:System.Reflection.TargetException\n    description: \"The <code>obj</code> parameter is `null` and the method is not static.  \\n  \\n -or-  \\n  \\n The method is not declared or inherited by the class of <code>obj</code>.  \\n  \\n -or-  \\n  \\n A static constructor is invoked, and <code>obj</code> is neither `null` nor an instance of the class that declared the constructor.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The type of the <code>parameters</code> parameter does not match the signature of the method or constructor reflected by this instance.\n  - type: System.Reflection.TargetParameterCountException\n    commentId: T:System.Reflection.TargetParameterCountException\n    description: The <code>parameters</code> array does not have the correct number of arguments.\n  - type: System.Reflection.TargetInvocationException\n    commentId: T:System.Reflection.TargetInvocationException\n    description: The invoked method or constructor throws an exception.\n  - type: System.MethodAccessException\n    commentId: T:System.MethodAccessException\n    description: The caller does not have permission to execute the method or constructor that is represented by the current instance.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The type that declares the method is an open generic type. That is, the <xref href=\"System.Type.ContainsGenericParameters\"></xref> property returns `true` for the declaring type.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodBase.Invoke(System.Object,System.Object[])\n  commentId: M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])\n  id: Invoke(System.Object,System.Object[])\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  name: Invoke(Object, Object[])\n  nameWithType: MethodBase.Invoke(Object, Object[])\n  fullName: MethodBase.Invoke(Object, Object[])\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Invokes the method or constructor represented by the current instance, using the specified parameters.\n  remarks: \"This is a convenience method that calls the <xref:System.Reflection.MethodBase.Invoke%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> method overload, passing <xref:System.Reflection.BindingFlags.Default> for `invokeAttr` and `null` for `binder` and `culture`.  \\n  \\n If the invoked method throws an exception, the <xref:System.Exception.GetBaseException%2A?displayProperty=fullName> method returns the exception.  \\n  \\n To invoke a static method using its <xref:System.Reflection.MethodInfo> object, pass `null` for `obj`.  \\n  \\n> [!NOTE]\\n>  If this method overload is used to invoke an instance constructor, the object supplied for `obj` is reinitialized; that is, all instance initializers are executed. The return value is `null`. If a class constructor is invoked, the class is reinitialized; that is, all class initializers are executed. The return value is `null`.  \\n  \\n> [!NOTE]\\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \\n>   \\n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.  \\n  \\n If a parameter of the current method is a value type, and the corresponding argument in `parameters` is `null`, the runtime passes a zero-initialized instance of the value type.\"\n  example:\n  - \"The following code example demonstrates dynamic method lookup using reflection. Note that you cannot use the <xref:System.Reflection.MethodInfo> object from the base class to invoke the overridden method in the derived class, because late binding cannot resolve overrides.  \\n  \\n [!code-cpp[Classic MethodBase.Invoke1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic MethodBase.Invoke1 Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic MethodBase.Invoke1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MethodBase.Invoke1 Example/CS/source.cs#1)]\\n [!code-vb[Classic MethodBase.Invoke1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MethodBase.Invoke1 Example/VB/source.vb#1)]\"\n  syntax:\n    content: public object Invoke (object obj, object[] parameters);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object on which to invoke the method or constructor. If a method is static, this argument is ignored. If a constructor is static, this argument must be `null` or an instance of the class that defines the constructor.\n    - id: parameters\n      type: System.Object[]\n      description: \"An argument list for the invoked method or constructor. This is an array of objects with the same number, order, and type as the parameters of the method or constructor to be invoked. If there are no parameters, <code>parameters</code> should be `null`.  \\n  \\n If the method or constructor represented by this instance takes a `ref` parameter (`ByRef` in Visual Basic), no special attribute is required for that parameter in order to invoke the method or constructor using this function. Any object in this array that is not explicitly initialized with a value will contain the default value for that object type. For reference-type elements, this value is `null`. For value-type elements, this value is 0, 0.0, or `false`, depending on the specific element type.\"\n    return:\n      type: System.Object\n      description: An object containing the return value of the invoked method, or `null` in the case of a constructor.\n  overload: System.Reflection.MethodBase.Invoke*\n  exceptions:\n  - type: System.Reflection.TargetException\n    commentId: T:System.Reflection.TargetException\n    description: \"<block subset=\\\"none\\\" type=\\\"note\\\">\\n      <p>  \\n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch <xref href=\\\"System.Exception\\\"></xref> instead.  \\n  \\n</p>\\n    </block>  \\n  \\n The <code>obj</code> parameter is `null` and the method is not static.  \\n  \\n -or-  \\n  \\n The method is not declared or inherited by the class of <code>obj</code>.  \\n  \\n -or-  \\n  \\n A static constructor is invoked, and <code>obj</code> is neither `null` nor an instance of the class that declared the constructor.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The elements of the <code>parameters</code> array do not match the signature of the method or constructor reflected by this instance.\n  - type: System.Reflection.TargetInvocationException\n    commentId: T:System.Reflection.TargetInvocationException\n    description: \"The invoked method or constructor throws an exception.  \\n  \\n -or-  \\n  \\n The current instance is a <xref href=\\\"System.Reflection.Emit.DynamicMethod\\\"></xref> that contains unverifiable code. See the \\\"Verification\\\" section in Remarks for <xref href=\\\"System.Reflection.Emit.DynamicMethod\\\"></xref>.\"\n  - type: System.Reflection.TargetParameterCountException\n    commentId: T:System.Reflection.TargetParameterCountException\n    description: The <code>parameters</code> array does not have the correct number of arguments.\n  - type: System.MethodAccessException\n    commentId: T:System.MethodAccessException\n    description: \"<block subset=\\\"none\\\" type=\\\"note\\\">\\n      <p>  \\n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\\\"System.MemberAccessException\\\"></xref>, instead.  \\n  \\n</p>\\n    </block>  \\n  \\n The caller does not have permission to execute the method or constructor that is represented by the current instance.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The type that declares the method is an open generic type. That is, the <xref href=\"System.Type.ContainsGenericParameters\"></xref> property returns `true` for the declaring type.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The current instance is a <xref href=\"System.Reflection.Emit.MethodBuilder\"></xref>.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodBase.IsAbstract\n  commentId: P:System.Reflection.MethodBase.IsAbstract\n  id: IsAbstract\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  name: IsAbstract\n  nameWithType: MethodBase.IsAbstract\n  fullName: MethodBase.IsAbstract\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a value indicating whether the method is abstract.\n  remarks: \"An abstract member is declared on a base class and has no implementation supplied.  \\n  \\n To get the <xref:System.Reflection.MethodBase>, first get the type. From the type, get the method. From the method, get the `MethodBase`. If the `MethodBase` or constructor is other than public, it is protected and cannot be readily accessed. To access a non-public method, set the <xref:System.Reflection.BindingFlags> mask to `NonPublic` in `GetMethod`.\"\n  example:\n  - \"The following example determines whether specified the method is abstract and displays the result.  \\n  \\n [!code-cpp[Classic MethodBase.IsAbstract Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic MethodBase.IsAbstract Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic MethodBase.IsAbstract Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MethodBase.IsAbstract Example/CS/source.cs#1)]\\n [!code-vb[Classic MethodBase.IsAbstract Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MethodBase.IsAbstract Example/VB/source.vb#1)]\"\n  syntax:\n    content: public bool IsAbstract { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the method is abstract; otherwise, `false`.'\n  overload: System.Reflection.MethodBase.IsAbstract*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodBase.IsAssembly\n  commentId: P:System.Reflection.MethodBase.IsAssembly\n  id: IsAssembly\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  name: IsAssembly\n  nameWithType: MethodBase.IsAssembly\n  fullName: MethodBase.IsAssembly\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a value indicating whether the potential visibility of this method or constructor is described by <xref href=\"System.Reflection.MethodAttributes.Assembly\"></xref>; that is, the method or constructor is visible at most to other types in the same assembly, and is not visible to derived types outside the assembly.\n  remarks: \"The actual visibility of a method is limited by the visibility of its type. The <xref:System.Reflection.MethodBase.IsAssembly%2A> property might be `true` for a method, but if it is a method of a private nested type then the method is not visible outside the containing type.  \\n  \\n The visibility of a method or constructor is exactly described by <xref:System.Reflection.MethodAttributes?displayProperty=fullName> if the only visibility modifier is `internal` (`Friend` in Visual Basic). This property is `false` for methods that are `protected internal` in C# (`Protected Friend` in Visual Basic, `protected public` in C++); use the <xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A> property to identify such methods.\"\n  example:\n  - \"The following code example defines methods with varying levels of visibility, and displays the values of their <xref:System.Reflection.MethodBase.IsAssembly%2A>, <xref:System.Reflection.MethodBase.IsFamily%2A>, <xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A>, and <xref:System.Reflection.MethodBase.IsFamilyAndAssembly%2A> properties.  \\n  \\n> [!NOTE]\\n>  The Visual Basic and C# languages cannot define methods with <xref:System.Reflection.MethodAttributes?displayProperty=fullName> visibility; that access level appears only in the C++ example.  \\n  \\n [!code-cpp[Classic MethodBase.IsAssembly Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic MethodBase.IsAssembly Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic MethodBase.IsAssembly Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MethodBase.IsAssembly Example/CS/source.cs#1)]\\n [!code-vb[Classic MethodBase.IsAssembly Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MethodBase.IsAssembly Example/VB/source.vb#1)]\"\n  syntax:\n    content: public bool IsAssembly { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the visibility of this method or constructor is exactly described by <xref href=\"System.Reflection.MethodAttributes.Assembly\"></xref>; otherwise, `false`.'\n  overload: System.Reflection.MethodBase.IsAssembly*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodBase.IsConstructor\n  commentId: P:System.Reflection.MethodBase.IsConstructor\n  id: IsConstructor\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  name: IsConstructor\n  nameWithType: MethodBase.IsConstructor\n  fullName: MethodBase.IsConstructor\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a value indicating whether the method is a constructor.\n  remarks: >-\n    > [!NOTE]\n\n    >  The <xref:System.Reflection.MethodBase.IsConstructor%2A> property returns `false` for a <xref:System.Reflection.Emit.ConstructorBuilder> object in a dynamic type, unless the <xref:System.Reflection.MethodAttributes?displayProperty=fullName> flag was included in the `attributes` parameter when the constructor was defined. Omitting the <xref:System.Reflection.MethodAttributes.RTSpecialName> flag does not affect the correctness of the emitted constructor.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public bool IsConstructor { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if this method is a constructor represented by a <xref href=\"System.Reflection.ConstructorInfo\"></xref> object (see note in Remarks about <xref href=\"System.Reflection.Emit.ConstructorBuilder\"></xref> objects); otherwise, `false`.'\n  overload: System.Reflection.MethodBase.IsConstructor*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodBase.IsFamily\n  commentId: P:System.Reflection.MethodBase.IsFamily\n  id: IsFamily\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  name: IsFamily\n  nameWithType: MethodBase.IsFamily\n  fullName: MethodBase.IsFamily\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a value indicating whether the visibility of this method or constructor is described by <xref href=\"System.Reflection.MethodAttributes.Family\"></xref>; that is, the method or constructor is visible only within its class and derived classes.\n  remarks: The visibility of a method or constructor is exactly described by <xref:System.Reflection.MethodAttributes?displayProperty=fullName> if the only visibility modifier is `protected`. This property is `false` for methods that are `protected internal` in C# (`Protected Friend` in Visual Basic, `protected public` in C++); use the <xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A> property to identify such methods.\n  example:\n  - \"The following code example defines methods with varying levels of visibility, and displays the values of their <xref:System.Reflection.MethodBase.IsAssembly%2A>, <xref:System.Reflection.MethodBase.IsFamily%2A>, <xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A>, and <xref:System.Reflection.MethodBase.IsFamilyAndAssembly%2A> properties.  \\n  \\n> [!NOTE]\\n>  The Visual Basic and C# languages cannot define methods with <xref:System.Reflection.MethodAttributes?displayProperty=fullName> visibility; that access level appears only in the C++ example.  \\n  \\n [!code-cpp[Classic MethodBase.IsAssembly Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic MethodBase.IsAssembly Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic MethodBase.IsAssembly Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MethodBase.IsAssembly Example/CS/source.cs#1)]\\n [!code-vb[Classic MethodBase.IsAssembly Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MethodBase.IsAssembly Example/VB/source.vb#1)]\"\n  syntax:\n    content: public bool IsFamily { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if access to this method or constructor is exactly described by <xref href=\"System.Reflection.MethodAttributes.Family\"></xref>; otherwise, `false`.'\n  overload: System.Reflection.MethodBase.IsFamily*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodBase.IsFamilyAndAssembly\n  commentId: P:System.Reflection.MethodBase.IsFamilyAndAssembly\n  id: IsFamilyAndAssembly\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  name: IsFamilyAndAssembly\n  nameWithType: MethodBase.IsFamilyAndAssembly\n  fullName: MethodBase.IsFamilyAndAssembly\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a value indicating whether the visibility of this method or constructor is described by <xref href=\"System.Reflection.MethodAttributes.FamANDAssem\"></xref>; that is, the method or constructor can be called by derived classes, but only if they are in the same assembly.\n  remarks: The visibility of a method or constructor is exactly described by <xref:System.Reflection.MethodAttributes?displayProperty=fullName> if the visibility modifier is `protected private` in C++. Methods with this visibility cannot be defined in Visual Basic or C#.\n  example:\n  - \"The following code example defines methods with varying levels of visibility, and displays the values of their <xref:System.Reflection.MethodBase.IsAssembly%2A>, <xref:System.Reflection.MethodBase.IsFamily%2A>, <xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A>, and <xref:System.Reflection.MethodBase.IsFamilyAndAssembly%2A> properties.  \\n  \\n> [!NOTE]\\n>  The Visual Basic and C# languages cannot define methods with <xref:System.Reflection.MethodAttributes?displayProperty=fullName> visibility; that access level appears only in the C++ example.  \\n  \\n [!code-cpp[Classic MethodBase.IsAssembly Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic MethodBase.IsAssembly Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic MethodBase.IsAssembly Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MethodBase.IsAssembly Example/CS/source.cs#1)]\\n [!code-vb[Classic MethodBase.IsAssembly Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MethodBase.IsAssembly Example/VB/source.vb#1)]\"\n  syntax:\n    content: public bool IsFamilyAndAssembly { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if access to this method or constructor is exactly described by <xref href=\"System.Reflection.MethodAttributes.FamANDAssem\"></xref>; otherwise, `false`.'\n  overload: System.Reflection.MethodBase.IsFamilyAndAssembly*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodBase.IsFamilyOrAssembly\n  commentId: P:System.Reflection.MethodBase.IsFamilyOrAssembly\n  id: IsFamilyOrAssembly\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  name: IsFamilyOrAssembly\n  nameWithType: MethodBase.IsFamilyOrAssembly\n  fullName: MethodBase.IsFamilyOrAssembly\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a value indicating whether the potential visibility of this method or constructor is described by <xref href=\"System.Reflection.MethodAttributes.FamORAssem\"></xref>; that is, the method or constructor can be called by derived classes wherever they are, and by classes in the same assembly.\n  remarks: \"If a type member has <xref:System.Reflection.MethodAttributes?displayProperty=fullName>visibility, it can be called from any member in a derived class or any member in the same assembly, but not from any other type.  \\n  \\n The actual visibility of a method is limited by the visibility of its type. The <xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A> property might be `true` for a method, but if it is a method of a private nested type then the method is not visible outside the containing type.  \\n  \\n The visibility of a method or constructor is exactly described by <xref:System.Reflection.MethodAttributes?displayProperty=fullName> if the visibility modifier is `protected internal` in C# (`Protected Friend` in Visual Basic, `protected public` in C++).\"\n  example:\n  - \"The following code example defines methods with varying levels of visibility, and displays the values of their <xref:System.Reflection.MethodBase.IsAssembly%2A>, <xref:System.Reflection.MethodBase.IsFamily%2A>, <xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A>, and <xref:System.Reflection.MethodBase.IsFamilyAndAssembly%2A> properties.  \\n  \\n> [!NOTE]\\n>  The Visual Basic and C# languages cannot define methods with <xref:System.Reflection.MethodAttributes?displayProperty=fullName> visibility; that access level appears only in the C++ example.  \\n  \\n [!code-cpp[Classic MethodBase.IsAssembly Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic MethodBase.IsAssembly Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic MethodBase.IsAssembly Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MethodBase.IsAssembly Example/CS/source.cs#1)]\\n [!code-vb[Classic MethodBase.IsAssembly Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MethodBase.IsAssembly Example/VB/source.vb#1)]\"\n  syntax:\n    content: public bool IsFamilyOrAssembly { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if access to this method or constructor is exactly described by <xref href=\"System.Reflection.MethodAttributes.FamORAssem\"></xref>; otherwise, `false`.'\n  overload: System.Reflection.MethodBase.IsFamilyOrAssembly*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodBase.IsFinal\n  commentId: P:System.Reflection.MethodBase.IsFinal\n  id: IsFinal\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  name: IsFinal\n  nameWithType: MethodBase.IsFinal\n  fullName: MethodBase.IsFinal\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a value indicating whether this method is `final`.\n  remarks: \"To determine if a method is overridable, it is not sufficient to check that <xref:System.Reflection.MethodBase.IsVirtual%2A> is `true`. For a method to be overridable, `IsVirtual` must be `true` and `IsFinal` must be `false`. For example, a method might be non-virtual, but it implements an interface method. The common language runtime requires that all methods that implement interface members must be marked as `virtual`; therefore, the compiler marks the method `virtual final`. So there are cases where a method is marked as `virtual` but is still not overridable.  \\n  \\n To establish with certainty whether a method is overridable, use code such as this:  \\n  \\n `if (MethodInfo.IsVirtual && !MethodInfo.IsFinal)`  \\n  \\n If `IsVirtual` is `false` or `IsFinal` is `true`, then the method cannot be overridden.\"\n  example:\n  - \"The following example displays `false` for `IsFinal`, which might lead you to think that MyMethod is overridable. The code prints `false` even though MyMethod is not marked `virtual` and thus cannot be overridden.  \\n  \\n [!code-cpp[Classic MethodBase.IsVirtual Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic MethodBase.IsVirtual Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic MethodBase.IsVirtual Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MethodBase.IsVirtual Example/CS/source.cs#1)]\\n [!code-vb[Classic MethodBase.IsVirtual Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MethodBase.IsVirtual Example/VB/source.vb#1)]\"\n  syntax:\n    content: public bool IsFinal { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if this method is `final`; otherwise, `false`.'\n  overload: System.Reflection.MethodBase.IsFinal*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodBase.IsGenericMethod\n  commentId: P:System.Reflection.MethodBase.IsGenericMethod\n  id: IsGenericMethod\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  name: IsGenericMethod\n  nameWithType: MethodBase.IsGenericMethod\n  fullName: MethodBase.IsGenericMethod\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a value indicating whether the method is generic.\n  remarks: \"Use the <xref:System.Reflection.MethodBase.IsGenericMethod%2A> property to determine whether the current <xref:System.Reflection.MethodBase> object represents a generic method. Use the <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> property to determine whether the current <xref:System.Reflection.MethodBase> object represents an open constructed method or a closed constructed method.  \\n  \\n> [!NOTE]\\n>  Generics are not supported by default; this property returns `false` if not overridden in a derived class. Generic constructors are not supported in the .NET Framework version 2.0, so this property returns `false` if the current instance is of type <xref:System.Reflection.ConstructorInfo>.  \\n  \\n For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodInfo.IsGenericMethod%2A?displayProperty=fullName> property. For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=fullName> property.\"\n  syntax:\n    content: public virtual bool IsGenericMethod { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the current <xref href=\"System.Reflection.MethodBase\"></xref> represents a generic method; otherwise, `false`.'\n  overload: System.Reflection.MethodBase.IsGenericMethod*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodBase.IsGenericMethodDefinition\n  commentId: P:System.Reflection.MethodBase.IsGenericMethodDefinition\n  id: IsGenericMethodDefinition\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  name: IsGenericMethodDefinition\n  nameWithType: MethodBase.IsGenericMethodDefinition\n  fullName: MethodBase.IsGenericMethodDefinition\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a value indicating whether the method is a generic method definition.\n  remarks: \"If the current <xref:System.Reflection.MethodBase> represents a generic method definition, then:  \\n  \\n-   The <xref:System.Reflection.MethodBase.IsGenericMethodDefinition%2A> property is `true`.  \\n  \\n-   For each <xref:System.Type> object in the array returned by the <xref:System.Reflection.MethodBase.GetGenericArguments%2A> method:  \\n  \\n    -   The <xref:System.Type.IsGenericParameter%2A?displayProperty=fullName> property is `true`.  \\n  \\n    -   The <xref:System.Type.DeclaringMethod%2A?displayProperty=fullName> property returns the current instance.  \\n  \\n    -   The <xref:System.Type.GenericParameterPosition%2A?displayProperty=fullName> property is the same as the position of the <xref:System.Type> object in the array.  \\n  \\n> [!NOTE]\\n>  Generics are not supported by default; this property returns `false` if not overridden in a derived class. Generic constructors are not supported in the .NET Framework version 2.0, so this property returns `false` if the current instance is of type <xref:System.Reflection.ConstructorInfo>.  \\n  \\n For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodInfo.IsGenericMethod%2A?displayProperty=fullName> property. For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=fullName> property.\"\n  syntax:\n    content: public virtual bool IsGenericMethodDefinition { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the current <xref href=\"System.Reflection.MethodBase\"></xref> object represents the definition of a generic method; otherwise, `false`.'\n  overload: System.Reflection.MethodBase.IsGenericMethodDefinition*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodBase.IsHideBySig\n  commentId: P:System.Reflection.MethodBase.IsHideBySig\n  id: IsHideBySig\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  name: IsHideBySig\n  nameWithType: MethodBase.IsHideBySig\n  fullName: MethodBase.IsHideBySig\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a value indicating whether only a member of the same kind with exactly the same signature is hidden in the derived class.\n  remarks: \"When a member in a derived class is declared with the C# `new` modifier or the Visual Basic `Shadows` modifier, it can hide a member of the same name in the base class. C# hides base class members by signature. That is, if the base class member has multiple overloads, the only one that is hidden is the one that has the identical signature. By contrast, Visual Basic hides all the base class overloads. Thus, <xref:System.Reflection.MethodBase.IsHideBySig%2A> returns `false` on a member declared with the Visual Basic `Shadows` modifier, and `true` on a member declared with the C# `new` modifier.  \\n  \\n> [!WARNING]\\n>  This property does not determine whether a method has the <xref:System.Reflection.MethodAttributes.NewSlot> attribute. A method that is declared with either the `new` or the `Shadows` modifier will have the <xref:System.Reflection.MethodAttributes.NewSlot> attribute, but only methods declared with `new` (that is, only C# methods) will have the <xref:System.Reflection.MethodBase.IsHideBySig%2A> property set to `true`.  To determine whether a method has the <xref:System.Reflection.MethodAttributes.NewSlot> attribute, use code similar to the following: `if ((myMethodInfo.Attributes & MethodAttributes.VtableLayoutMask) == MethodAttributes.NewSlot)` in C# or `If (myMethodInfo.Attributes And MethodAttributes.VtableLayoutMask) = MethodAttributes.NewSlot` in Visual Basic. Note, however, that although all methods declared with `new` or `Shadows` have the <xref:System.Reflection.MethodAttributes.NewSlot> attribute, not all methods that have the <xref:System.Reflection.MethodAttributes.NewSlot> attribute are declared with `new` or `Shadows`.\"\n  example:\n  - \"The following code example contains a base class with an overloaded method, and a derived class that hides one of the overloads. In the Visual Basic version of the code example, the <xref:System.Reflection.MethodBase.IsHideBySig%2A> property returns `false` for the member in the derived class. In the C# version of the code sample, the property returns `true` for the member in the derived class.  \\n  \\n [!code-cpp[System.Reflection.MethodBase.IsHideBySig#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.MethodBase.IsHideBySig/cpp/hide.cpp#1)]\\n [!code-csharp[System.Reflection.MethodBase.IsHideBySig#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.MethodBase.IsHideBySig/CS/hide.cs#1)]\\n [!code-vb[System.Reflection.MethodBase.IsHideBySig#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.MethodBase.IsHideBySig/VB/hide.vb#1)]\"\n  syntax:\n    content: public bool IsHideBySig { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the member is hidden by signature; otherwise, `false`.'\n  overload: System.Reflection.MethodBase.IsHideBySig*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodBase.IsPrivate\n  commentId: P:System.Reflection.MethodBase.IsPrivate\n  id: IsPrivate\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  name: IsPrivate\n  nameWithType: MethodBase.IsPrivate\n  fullName: MethodBase.IsPrivate\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a value indicating whether this member is private.\n  remarks: If a type member has `Private` level visibility, it can be called from any member in the same class and no others.\n  syntax:\n    content: public bool IsPrivate { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if access to this method is restricted to other members of the class itself; otherwise, `false`.'\n  overload: System.Reflection.MethodBase.IsPrivate*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodBase.IsPublic\n  commentId: P:System.Reflection.MethodBase.IsPublic\n  id: IsPublic\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  name: IsPublic\n  nameWithType: MethodBase.IsPublic\n  fullName: MethodBase.IsPublic\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a value indicating whether this is a public method.\n  remarks: To get the <xref:System.Reflection.MethodBase>, first get the type. From the type, get the method. From the method, get the `MethodBase`. If the `MethodBase` or constructor is other than public, it is protected and cannot be readily accessed. To access a non-public method, set the <xref:System.Reflection.BindingFlags> mask to `NonPublic` in `GetMethod`.\n  example:\n  - \"The following example uses the <xref:System.Reflection.MethodBase.IsPublic%2A> property to display a message that indicates whether the specified method is public.  \\n  \\n [!code-cpp[Classic MethodBase.IsPublic Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic MethodBase.IsPublic Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic MethodBase.IsPublic Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MethodBase.IsPublic Example/CS/source.cs#1)]\\n [!code-vb[Classic MethodBase.IsPublic Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MethodBase.IsPublic Example/VB/source.vb#1)]\"\n  syntax:\n    content: public bool IsPublic { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if this method is public; otherwise, `false`.'\n  overload: System.Reflection.MethodBase.IsPublic*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodBase.IsSecurityCritical\n  commentId: P:System.Reflection.MethodBase.IsSecurityCritical\n  id: IsSecurityCritical\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  name: IsSecurityCritical\n  nameWithType: MethodBase.IsSecurityCritical\n  fullName: MethodBase.IsSecurityCritical\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a value that indicates whether the current method or constructor is security-critical or security-safe-critical at the current trust level, and therefore can perform critical operations.\n  remarks: \"The <xref:System.Reflection.MethodBase.IsSecurityCritical%2A>, <xref:System.Reflection.MethodBase.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.MethodBase.IsSecurityTransparent%2A> properties report the transparency level of the method or constructor at its current trust level, as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:  \\n  \\n|Security level|IsSecurityCritical|IsSecuritySafeCritical|IsSecurityTransparent|  \\n|--------------------|------------------------|----------------------------|---------------------------|  \\n|Critical|`true`|`false`|`false`|  \\n|Safe critical|`true`|`true`|`false`|  \\n|Transparent|`false`|`false`|`true`|  \\n  \\n Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.  \\n  \\n> [!IMPORTANT]\\n>  For partial-trust assemblies, the value of this property depends on the current trust level of the assembly. If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly. The assembly and all its types are treated as transparent. The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application). By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted. You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=fullName> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=fullName> properties.  \\n  \\n For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md). For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).\"\n  syntax:\n    content: public virtual bool IsSecurityCritical { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the current method or constructor is security-critical or security-safe-critical at the current trust level; `false` if it is transparent.'\n  overload: System.Reflection.MethodBase.IsSecurityCritical*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodBase.IsSecuritySafeCritical\n  commentId: P:System.Reflection.MethodBase.IsSecuritySafeCritical\n  id: IsSecuritySafeCritical\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  name: IsSecuritySafeCritical\n  nameWithType: MethodBase.IsSecuritySafeCritical\n  fullName: MethodBase.IsSecuritySafeCritical\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a value that indicates whether the current method or constructor is security-safe-critical at the current trust level; that is, whether it can perform critical operations and can be accessed by transparent code.\n  remarks: \"The <xref:System.Reflection.MethodBase.IsSecurityCritical%2A>, <xref:System.Reflection.MethodBase.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.MethodBase.IsSecurityTransparent%2A> properties report the transparency level of the method or constructor at its current trust level, as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:  \\n  \\n|Security level|IsSecurityCritical|IsSecuritySafeCritical|IsSecurityTransparent|  \\n|--------------------|------------------------|----------------------------|---------------------------|  \\n|Critical|`true`|`false`|`false`|  \\n|Safe critical|`true`|`true`|`false`|  \\n|Transparent|`false`|`false`|`true`|  \\n  \\n Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.  \\n  \\n> [!IMPORTANT]\\n>  For partial-trust assemblies, the value of this property depends on the current trust level of the assembly. If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly. The assembly and all its types are treated as transparent. The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application). By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted. You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=fullName> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=fullName> properties.  \\n  \\n For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md). For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).\"\n  syntax:\n    content: public virtual bool IsSecuritySafeCritical { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the method or constructor is security-safe-critical at the current trust level; `false` if it is security-critical or transparent.'\n  overload: System.Reflection.MethodBase.IsSecuritySafeCritical*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodBase.IsSecurityTransparent\n  commentId: P:System.Reflection.MethodBase.IsSecurityTransparent\n  id: IsSecurityTransparent\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  name: IsSecurityTransparent\n  nameWithType: MethodBase.IsSecurityTransparent\n  fullName: MethodBase.IsSecurityTransparent\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a value that indicates whether the current method or constructor is transparent at the current trust level, and therefore cannot perform critical operations.\n  remarks: \"If this property returns `true`, the <xref:System.Reflection.MethodBase.IsSecurityCritical%2A> and <xref:System.Reflection.MethodBase.IsSecuritySafeCritical%2A> properties return `false`.  \\n  \\n The <xref:System.Reflection.MethodBase.IsSecurityCritical%2A>, <xref:System.Reflection.MethodBase.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.MethodBase.IsSecurityTransparent%2A> properties report the transparency level of the method or constructor at its current trust level, as determined by the common language runtime (CLR). Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.  \\n  \\n> [!IMPORTANT]\\n>  For partial-trust assemblies, the value of this property depends on the current trust level of the assembly. If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly. The assembly and all its types are treated as transparent. The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application). By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted. You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=fullName> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=fullName> properties.  \\n  \\n For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md). For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).\"\n  syntax:\n    content: public virtual bool IsSecurityTransparent { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the method or constructor is security-transparent at the current trust level; otherwise, `false`.'\n  overload: System.Reflection.MethodBase.IsSecurityTransparent*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodBase.IsSpecialName\n  commentId: P:System.Reflection.MethodBase.IsSpecialName\n  id: IsSpecialName\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  name: IsSpecialName\n  nameWithType: MethodBase.IsSpecialName\n  fullName: MethodBase.IsSpecialName\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a value indicating whether this method has a special name.\n  remarks: The <xref:System.Reflection.MethodAttributes.SpecialName> bit is set to flag members that are treated in a special way by some compilers (such as property accessors and operator overloading methods).\n  example:\n  - \"This example shows a use of <xref:System.Reflection.MethodBase.IsSpecialName%2A> to filter internal or private members out of a list.  \\n  \\n [!code-cpp[Classic Type.IsSpecialName Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.IsSpecialName Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic Type.IsSpecialName Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.IsSpecialName Example/CS/source.cs#1)]\\n [!code-vb[Classic Type.IsSpecialName Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.IsSpecialName Example/VB/source.vb#1)]\"\n  syntax:\n    content: public bool IsSpecialName { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if this method has a special name; otherwise, `false`.'\n  overload: System.Reflection.MethodBase.IsSpecialName*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodBase.IsStatic\n  commentId: P:System.Reflection.MethodBase.IsStatic\n  id: IsStatic\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  name: IsStatic\n  nameWithType: MethodBase.IsStatic\n  fullName: MethodBase.IsStatic\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a value indicating whether the method is `static`.\n  remarks: A static member cannot implicitly reference instance data in a class.\n  syntax:\n    content: public bool IsStatic { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if this method is `static`; otherwise, `false`.'\n  overload: System.Reflection.MethodBase.IsStatic*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodBase.IsVirtual\n  commentId: P:System.Reflection.MethodBase.IsVirtual\n  id: IsVirtual\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  name: IsVirtual\n  nameWithType: MethodBase.IsVirtual\n  fullName: MethodBase.IsVirtual\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a value indicating whether the method is `virtual`.\n  remarks: \"A virtual member may reference instance data in a class and must be referenced through an instance of the class.  \\n  \\n To determine if a method is overridable, it is not sufficient to check that `IsVirtual` is `true`. For a method to be overridable, `IsVirtual` must be `true` and <xref:System.Reflection.MethodBase.IsFinal%2A> must be `false`. For example, a method might be non-virtual, but it implements an interface method. The common language runtime requires that all methods that implement interface members must be marked as `virtual`; therefore, the compiler marks the method `virtual final`. So there are cases where a method is marked as `virtual` but is still not overridable.  \\n  \\n To establish with certainty whether a method is overridable, use code such as this:  \\n  \\n```csharp  \\nif (MethodInfo.IsVirtual && !MethodInfo.IsFinal)  \\n```  \\n  \\n```vb  \\nIf MethodInfo.IsVirtual AndAlso Not MethodInfo.IsFinal Then  \\n```  \\n  \\n If `IsVirtual` is `false` or `IsFinal` is `true`, then the method cannot be overridden.  \\n  \\n You can determine whether the current method overrides a method in a base class by calling the <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A?displayProperty=fullName> method. The following example implements an `IsOverride` method that does this.  \\n  \\n [!code-csharp[system.reflection.methodinfo.getbasedefinition#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.methodinfo.getbasedefinition/cs/IsOverride1.cs#2)]\\n [!code-vb[system.reflection.methodinfo.getbasedefinition#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.methodinfo.getbasedefinition/vb/IsOverride1.vb#2)]\"\n  example:\n  - \"The following example displays `false` for `IsFinal`, which might lead you to think that `MyMethod` is overridable. The code prints `false` even though `MyMethod` is not marked `virtual` and thus cannot be overridden.  \\n  \\n [!code-cpp[Classic MethodBase.IsVirtual Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic MethodBase.IsVirtual Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic MethodBase.IsVirtual Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MethodBase.IsVirtual Example/CS/source.cs#1)]\\n [!code-vb[Classic MethodBase.IsVirtual Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MethodBase.IsVirtual Example/VB/source.vb#1)]\"\n  syntax:\n    content: public bool IsVirtual { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if this method is `virtual`; otherwise, `false`.'\n  overload: System.Reflection.MethodBase.IsVirtual*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodBase.MethodHandle\n  commentId: P:System.Reflection.MethodBase.MethodHandle\n  id: MethodHandle\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  name: MethodHandle\n  nameWithType: MethodBase.MethodHandle\n  fullName: MethodBase.MethodHandle\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a handle to the internal metadata representation of a method.\n  remarks: The handles are valid only in the application domain in which they were obtained.\n  syntax:\n    content: public abstract RuntimeMethodHandle MethodHandle { get; }\n    return:\n      type: System.RuntimeMethodHandle\n      description: A <xref href=\"System.RuntimeMethodHandle\"></xref> object.\n  overload: System.Reflection.MethodBase.MethodHandle*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodBase.MethodImplementationFlags\n  commentId: P:System.Reflection.MethodBase.MethodImplementationFlags\n  id: MethodImplementationFlags\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  name: MethodImplementationFlags\n  nameWithType: MethodBase.MethodImplementationFlags\n  fullName: MethodBase.MethodImplementationFlags\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the <xref href=\"System.Reflection.MethodImplAttributes\"></xref> flags that specify the attributes of a method implementation.\n  remarks: See the <xref:System.Reflection.MethodBase.GetMethodImplementationFlags%2A> method for more information.\n  syntax:\n    content: public virtual System.Reflection.MethodImplAttributes MethodImplementationFlags { get; }\n    return:\n      type: System.Reflection.MethodImplAttributes\n      description: The method implementation flags.\n  overload: System.Reflection.MethodBase.MethodImplementationFlags*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodBase.op_Equality(System.Reflection.MethodBase,System.Reflection.MethodBase)\n  commentId: M:System.Reflection.MethodBase.op_Equality(System.Reflection.MethodBase,System.Reflection.MethodBase)\n  id: op_Equality(System.Reflection.MethodBase,System.Reflection.MethodBase)\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  name: op_Equality(MethodBase, MethodBase)\n  nameWithType: MethodBase.op_Equality(MethodBase, MethodBase)\n  fullName: MethodBase.op_Equality(MethodBase, MethodBase)\n  type: Operator\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Indicates whether two <xref href=\"System.Reflection.MethodBase\"></xref> objects are equal.\n  syntax:\n    content: public static bool op_Equality (System.Reflection.MethodBase left, System.Reflection.MethodBase right);\n    parameters:\n    - id: left\n      type: System.Reflection.MethodBase\n      description: The first object to compare.\n    - id: right\n      type: System.Reflection.MethodBase\n      description: The second object to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>left</code> is equal to <code>right</code>; otherwise, `false`.'\n  overload: System.Reflection.MethodBase.op_Equality*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodBase.op_Inequality(System.Reflection.MethodBase,System.Reflection.MethodBase)\n  commentId: M:System.Reflection.MethodBase.op_Inequality(System.Reflection.MethodBase,System.Reflection.MethodBase)\n  id: op_Inequality(System.Reflection.MethodBase,System.Reflection.MethodBase)\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  name: op_Inequality(MethodBase, MethodBase)\n  nameWithType: MethodBase.op_Inequality(MethodBase, MethodBase)\n  fullName: MethodBase.op_Inequality(MethodBase, MethodBase)\n  type: Operator\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Indicates whether two <xref href=\"System.Reflection.MethodBase\"></xref> objects are not equal.\n  syntax:\n    content: public static bool op_Inequality (System.Reflection.MethodBase left, System.Reflection.MethodBase right);\n    parameters:\n    - id: left\n      type: System.Reflection.MethodBase\n      description: The first object to compare.\n    - id: right\n      type: System.Reflection.MethodBase\n      description: The second object to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>left</code> is not equal to <code>right</code>; otherwise, `false`.'\n  overload: System.Reflection.MethodBase.op_Inequality*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  commentId: M:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  id: System#Runtime#InteropServices#_MethodBase#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  isEii: true\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  name: _MethodBase.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: MethodBase._MethodBase.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: MethodBase._MethodBase.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Maps a set of names to a corresponding set of dispatch identifiers.\n  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.\n  syntax:\n    content: void _MethodBase.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);\n    parameters:\n    - id: riid\n      type: System.Guid\n      description: Reserved for future use. Must be IID_NULL.\n    - id: rgszNames\n      type: System.IntPtr\n      description: Passed-in array of names to be mapped.\n    - id: cNames\n      type: System.UInt32\n      description: Count of the names to be mapped.\n    - id: lcid\n      type: System.UInt32\n      description: The locale context in which to interpret the names.\n    - id: rgDispId\n      type: System.IntPtr\n      description: Caller-allocated array which receives the IDs corresponding to the names.\n  overload: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetIDsOfNames*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetType\n  commentId: M:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetType\n  id: System#Runtime#InteropServices#_MethodBase#GetType\n  isEii: true\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  name: _MethodBase.GetType()\n  nameWithType: MethodBase._MethodBase.GetType()\n  fullName: MethodBase._MethodBase.GetType()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.GetType\"></xref>.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.\n  syntax:\n    content: Type _MethodBase.GetType ();\n    parameters: []\n    return:\n      type: System.Type\n      description: For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.GetType\"></xref>.\n  overload: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetType*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  commentId: M:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  id: System#Runtime#InteropServices#_MethodBase#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  isEii: true\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  name: _MethodBase.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: MethodBase._MethodBase.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: MethodBase._MethodBase.GetTypeInfo(UInt32, UInt32, IntPtr)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Retrieves the type information for an object, which can then be used to get the type information for an interface.\n  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.\n  syntax:\n    content: void _MethodBase.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);\n    parameters:\n    - id: iTInfo\n      type: System.UInt32\n      description: The type information to return.\n    - id: lcid\n      type: System.UInt32\n      description: The locale identifier for the type information.\n    - id: ppTInfo\n      type: System.IntPtr\n      description: Receives a pointer to the requested type information object.\n  overload: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetTypeInfo*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetTypeInfoCount(System.UInt32@)\n  commentId: M:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetTypeInfoCount(System.UInt32@)\n  id: System#Runtime#InteropServices#_MethodBase#GetTypeInfoCount(System.UInt32@)\n  isEii: true\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  name: _MethodBase.GetTypeInfoCount(UInt32)\n  nameWithType: MethodBase._MethodBase.GetTypeInfoCount(UInt32)\n  fullName: MethodBase._MethodBase.GetTypeInfoCount(UInt32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Retrieves the number of type information interfaces that an object provides (either 0 or 1).\n  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.\n  syntax:\n    content: void _MethodBase.GetTypeInfoCount (out uint pcTInfo);\n    parameters:\n    - id: pcTInfo\n      type: System.UInt32\n      description: Points to a location that receives the number of type information interfaces provided by the object.\n  overload: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetTypeInfoCount*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  commentId: M:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  id: System#Runtime#InteropServices#_MethodBase#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  isEii: true\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  name: _MethodBase.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: MethodBase._MethodBase.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: MethodBase._MethodBase.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Provides access to properties and methods exposed by an object.\n  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.\n  syntax:\n    content: void _MethodBase.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);\n    parameters:\n    - id: dispIdMember\n      type: System.UInt32\n      description: Identifies the member.\n    - id: riid\n      type: System.Guid\n      description: Reserved for future use. Must be IID_NULL.\n    - id: lcid\n      type: System.UInt32\n      description: The locale context in which to interpret arguments.\n    - id: wFlags\n      type: System.Int16\n      description: Flags describing the context of the call.\n    - id: pDispParams\n      type: System.IntPtr\n      description: Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.\n    - id: pVarResult\n      type: System.IntPtr\n      description: Pointer to the location where the result is to be stored.\n    - id: pExcepInfo\n      type: System.IntPtr\n      description: Pointer to a structure that contains exception information.\n    - id: puArgErr\n      type: System.IntPtr\n      description: The index of the first argument that has an error.\n  overload: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#Invoke*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsAbstract\n  commentId: P:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsAbstract\n  id: System#Runtime#InteropServices#_MethodBase#IsAbstract\n  isEii: true\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  name: _MethodBase.IsAbstract\n  nameWithType: MethodBase._MethodBase.IsAbstract\n  fullName: MethodBase._MethodBase.IsAbstract\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsAbstract\"></xref>.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.\n  syntax:\n    content: bool System.Runtime.InteropServices._MethodBase.IsAbstract { get; }\n    return:\n      type: System.Boolean\n      description: For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsAbstract\"></xref>.\n  overload: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsAbstract*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsAssembly\n  commentId: P:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsAssembly\n  id: System#Runtime#InteropServices#_MethodBase#IsAssembly\n  isEii: true\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  name: _MethodBase.IsAssembly\n  nameWithType: MethodBase._MethodBase.IsAssembly\n  fullName: MethodBase._MethodBase.IsAssembly\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsAssembly\"></xref>.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.\n  syntax:\n    content: bool System.Runtime.InteropServices._MethodBase.IsAssembly { get; }\n    return:\n      type: System.Boolean\n      description: For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsAssembly\"></xref>.\n  overload: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsAssembly*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsConstructor\n  commentId: P:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsConstructor\n  id: System#Runtime#InteropServices#_MethodBase#IsConstructor\n  isEii: true\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  name: _MethodBase.IsConstructor\n  nameWithType: MethodBase._MethodBase.IsConstructor\n  fullName: MethodBase._MethodBase.IsConstructor\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsConstructor\"></xref>.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.\n  syntax:\n    content: bool System.Runtime.InteropServices._MethodBase.IsConstructor { get; }\n    return:\n      type: System.Boolean\n      description: For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsConstructor\"></xref>.\n  overload: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsConstructor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamily\n  commentId: P:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamily\n  id: System#Runtime#InteropServices#_MethodBase#IsFamily\n  isEii: true\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  name: _MethodBase.IsFamily\n  nameWithType: MethodBase._MethodBase.IsFamily\n  fullName: MethodBase._MethodBase.IsFamily\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsFamily\"></xref>.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.\n  syntax:\n    content: bool System.Runtime.InteropServices._MethodBase.IsFamily { get; }\n    return:\n      type: System.Boolean\n      description: For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsFamily\"></xref>.\n  overload: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamily*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamilyAndAssembly\n  commentId: P:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamilyAndAssembly\n  id: System#Runtime#InteropServices#_MethodBase#IsFamilyAndAssembly\n  isEii: true\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  name: _MethodBase.IsFamilyAndAssembly\n  nameWithType: MethodBase._MethodBase.IsFamilyAndAssembly\n  fullName: MethodBase._MethodBase.IsFamilyAndAssembly\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsFamilyAndAssembly\"></xref>.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.\n  syntax:\n    content: bool System.Runtime.InteropServices._MethodBase.IsFamilyAndAssembly { get; }\n    return:\n      type: System.Boolean\n      description: For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsFamilyAndAssembly\"></xref>.\n  overload: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamilyAndAssembly*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamilyOrAssembly\n  commentId: P:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamilyOrAssembly\n  id: System#Runtime#InteropServices#_MethodBase#IsFamilyOrAssembly\n  isEii: true\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  name: _MethodBase.IsFamilyOrAssembly\n  nameWithType: MethodBase._MethodBase.IsFamilyOrAssembly\n  fullName: MethodBase._MethodBase.IsFamilyOrAssembly\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsFamilyOrAssembly\"></xref>.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.\n  syntax:\n    content: bool System.Runtime.InteropServices._MethodBase.IsFamilyOrAssembly { get; }\n    return:\n      type: System.Boolean\n      description: For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsFamilyOrAssembly\"></xref>.\n  overload: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamilyOrAssembly*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFinal\n  commentId: P:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFinal\n  id: System#Runtime#InteropServices#_MethodBase#IsFinal\n  isEii: true\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  name: _MethodBase.IsFinal\n  nameWithType: MethodBase._MethodBase.IsFinal\n  fullName: MethodBase._MethodBase.IsFinal\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsFinal\"></xref>.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.\n  syntax:\n    content: bool System.Runtime.InteropServices._MethodBase.IsFinal { get; }\n    return:\n      type: System.Boolean\n      description: For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsFinal\"></xref>.\n  overload: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFinal*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsHideBySig\n  commentId: P:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsHideBySig\n  id: System#Runtime#InteropServices#_MethodBase#IsHideBySig\n  isEii: true\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  name: _MethodBase.IsHideBySig\n  nameWithType: MethodBase._MethodBase.IsHideBySig\n  fullName: MethodBase._MethodBase.IsHideBySig\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsHideBySig\"></xref>.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.\n  syntax:\n    content: bool System.Runtime.InteropServices._MethodBase.IsHideBySig { get; }\n    return:\n      type: System.Boolean\n      description: For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsHideBySig\"></xref>.\n  overload: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsHideBySig*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsPrivate\n  commentId: P:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsPrivate\n  id: System#Runtime#InteropServices#_MethodBase#IsPrivate\n  isEii: true\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  name: _MethodBase.IsPrivate\n  nameWithType: MethodBase._MethodBase.IsPrivate\n  fullName: MethodBase._MethodBase.IsPrivate\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsPrivate\"></xref>.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.\n  syntax:\n    content: bool System.Runtime.InteropServices._MethodBase.IsPrivate { get; }\n    return:\n      type: System.Boolean\n      description: For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsPrivate\"></xref>.\n  overload: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsPrivate*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsPublic\n  commentId: P:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsPublic\n  id: System#Runtime#InteropServices#_MethodBase#IsPublic\n  isEii: true\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  name: _MethodBase.IsPublic\n  nameWithType: MethodBase._MethodBase.IsPublic\n  fullName: MethodBase._MethodBase.IsPublic\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsPublic\"></xref>.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.\n  syntax:\n    content: bool System.Runtime.InteropServices._MethodBase.IsPublic { get; }\n    return:\n      type: System.Boolean\n      description: For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsPublic\"></xref>.\n  overload: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsPublic*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsSpecialName\n  commentId: P:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsSpecialName\n  id: System#Runtime#InteropServices#_MethodBase#IsSpecialName\n  isEii: true\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  name: _MethodBase.IsSpecialName\n  nameWithType: MethodBase._MethodBase.IsSpecialName\n  fullName: MethodBase._MethodBase.IsSpecialName\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsSpecialName\"></xref>.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.\n  syntax:\n    content: bool System.Runtime.InteropServices._MethodBase.IsSpecialName { get; }\n    return:\n      type: System.Boolean\n      description: For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsSpecialName\"></xref>.\n  overload: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsSpecialName*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsStatic\n  commentId: P:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsStatic\n  id: System#Runtime#InteropServices#_MethodBase#IsStatic\n  isEii: true\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  name: _MethodBase.IsStatic\n  nameWithType: MethodBase._MethodBase.IsStatic\n  fullName: MethodBase._MethodBase.IsStatic\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsStatic\"></xref>.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.\n  syntax:\n    content: bool System.Runtime.InteropServices._MethodBase.IsStatic { get; }\n    return:\n      type: System.Boolean\n      description: For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsStatic\"></xref>.\n  overload: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsStatic*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsVirtual\n  commentId: P:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsVirtual\n  id: System#Runtime#InteropServices#_MethodBase#IsVirtual\n  isEii: true\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  name: _MethodBase.IsVirtual\n  nameWithType: MethodBase._MethodBase.IsVirtual\n  fullName: MethodBase._MethodBase.IsVirtual\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsVirtual\"></xref>.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.\n  syntax:\n    content: bool System.Runtime.InteropServices._MethodBase.IsVirtual { get; }\n    return:\n      type: System.Boolean\n      description: For a description of this member, see <xref href=\"System.Runtime.InteropServices._MethodBase.IsVirtual\"></xref>.\n  overload: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsVirtual*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Reflection.MemberInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MemberInfo\n  nameWithType: MemberInfo\n  fullName: System.Reflection.MemberInfo\n- uid: System.Reflection.TargetException\n  parent: System.Reflection\n  isExternal: false\n  name: TargetException\n  nameWithType: TargetException\n  fullName: System.Reflection.TargetException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  nameWithType: NotSupportedException\n  fullName: System.NotSupportedException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.Reflection.TargetParameterCountException\n  parent: System.Reflection\n  isExternal: false\n  name: TargetParameterCountException\n  nameWithType: TargetParameterCountException\n  fullName: System.Reflection.TargetParameterCountException\n- uid: System.Reflection.TargetInvocationException\n  parent: System.Reflection\n  isExternal: false\n  name: TargetInvocationException\n  nameWithType: TargetInvocationException\n  fullName: System.Reflection.TargetInvocationException\n- uid: System.MethodAccessException\n  parent: System\n  isExternal: false\n  name: MethodAccessException\n  nameWithType: MethodAccessException\n  fullName: System.MethodAccessException\n- uid: System.NotImplementedException\n  parent: System\n  isExternal: false\n  name: NotImplementedException\n  nameWithType: NotImplementedException\n  fullName: System.NotImplementedException\n- uid: System.Reflection.MethodBase.#ctor\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: MethodBase()\n  nameWithType: MethodBase.MethodBase()\n  fullName: MethodBase.MethodBase()\n- uid: System.Reflection.MethodBase.Attributes\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: Attributes\n  nameWithType: MethodBase.Attributes\n  fullName: MethodBase.Attributes\n- uid: System.Reflection.MethodAttributes\n  parent: System.Reflection\n  isExternal: false\n  name: MethodAttributes\n  nameWithType: MethodAttributes\n  fullName: System.Reflection.MethodAttributes\n- uid: System.Reflection.MethodBase.CallingConvention\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: CallingConvention\n  nameWithType: MethodBase.CallingConvention\n  fullName: MethodBase.CallingConvention\n- uid: System.Reflection.CallingConventions\n  parent: System.Reflection\n  isExternal: false\n  name: CallingConventions\n  nameWithType: CallingConventions\n  fullName: System.Reflection.CallingConventions\n- uid: System.Reflection.MethodBase.ContainsGenericParameters\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: ContainsGenericParameters\n  nameWithType: MethodBase.ContainsGenericParameters\n  fullName: MethodBase.ContainsGenericParameters\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Reflection.MethodBase.Equals(System.Object)\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: MethodBase.Equals(Object)\n  fullName: MethodBase.Equals(Object)\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Reflection.MethodBase.GetCurrentMethod\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: GetCurrentMethod()\n  nameWithType: MethodBase.GetCurrentMethod()\n  fullName: MethodBase.GetCurrentMethod()\n- uid: System.Reflection.MethodBase\n  parent: System.Reflection\n  isExternal: false\n  name: MethodBase\n  nameWithType: MethodBase\n  fullName: System.Reflection.MethodBase\n- uid: System.Reflection.MethodBase.GetGenericArguments\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: GetGenericArguments()\n  nameWithType: MethodBase.GetGenericArguments()\n  fullName: MethodBase.GetGenericArguments()\n- uid: System.Type\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Type[]\n  parent: System\n  isExternal: false\n  name: Type[]\n  nameWithType: Type[]\n  fullName: System.Type[]\n  spec.csharp:\n  - uid: System.Type\n    name: Type\n    nameWithType: Type\n    fullName: System.Type\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.MethodBase.GetHashCode\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: MethodBase.GetHashCode()\n  fullName: MethodBase.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Reflection.MethodBase.GetMethodBody\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: GetMethodBody()\n  nameWithType: MethodBase.GetMethodBody()\n  fullName: MethodBase.GetMethodBody()\n- uid: System.Reflection.MethodBody\n  parent: System.Reflection\n  isExternal: false\n  name: MethodBody\n  nameWithType: MethodBody\n  fullName: System.Reflection.MethodBody\n- uid: System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: GetMethodFromHandle(RuntimeMethodHandle)\n  nameWithType: MethodBase.GetMethodFromHandle(RuntimeMethodHandle)\n  fullName: MethodBase.GetMethodFromHandle(RuntimeMethodHandle)\n- uid: System.RuntimeMethodHandle\n  parent: System\n  isExternal: false\n  name: RuntimeMethodHandle\n  nameWithType: RuntimeMethodHandle\n  fullName: System.RuntimeMethodHandle\n- uid: System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: GetMethodFromHandle(RuntimeMethodHandle, RuntimeTypeHandle)\n  nameWithType: MethodBase.GetMethodFromHandle(RuntimeMethodHandle, RuntimeTypeHandle)\n  fullName: MethodBase.GetMethodFromHandle(RuntimeMethodHandle, RuntimeTypeHandle)\n- uid: System.RuntimeTypeHandle\n  parent: System\n  isExternal: false\n  name: RuntimeTypeHandle\n  nameWithType: RuntimeTypeHandle\n  fullName: System.RuntimeTypeHandle\n- uid: System.Reflection.MethodBase.GetMethodImplementationFlags\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: GetMethodImplementationFlags()\n  nameWithType: MethodBase.GetMethodImplementationFlags()\n  fullName: MethodBase.GetMethodImplementationFlags()\n- uid: System.Reflection.MethodImplAttributes\n  parent: System.Reflection\n  isExternal: false\n  name: MethodImplAttributes\n  nameWithType: MethodImplAttributes\n  fullName: System.Reflection.MethodImplAttributes\n- uid: System.Reflection.MethodBase.GetParameters\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: GetParameters()\n  nameWithType: MethodBase.GetParameters()\n  fullName: MethodBase.GetParameters()\n- uid: System.Reflection.ParameterInfo\n  name: ParameterInfo\n  nameWithType: ParameterInfo\n  fullName: System.Reflection.ParameterInfo\n- uid: System.Reflection.ParameterInfo[]\n  parent: System.Reflection\n  isExternal: false\n  name: ParameterInfo[]\n  nameWithType: ParameterInfo[]\n  fullName: System.Reflection.ParameterInfo[]\n  spec.csharp:\n  - uid: System.Reflection.ParameterInfo\n    name: ParameterInfo\n    nameWithType: ParameterInfo\n    fullName: System.Reflection.ParameterInfo\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.MethodBase.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: Invoke(Object, BindingFlags, Binder, Object[], CultureInfo)\n  nameWithType: MethodBase.Invoke(Object, BindingFlags, Binder, Object[], CultureInfo)\n  fullName: MethodBase.Invoke(Object, BindingFlags, Binder, Object[], CultureInfo)\n- uid: System.Reflection.BindingFlags\n  parent: System.Reflection\n  isExternal: false\n  name: BindingFlags\n  nameWithType: BindingFlags\n  fullName: System.Reflection.BindingFlags\n- uid: System.Reflection.Binder\n  parent: System.Reflection\n  isExternal: false\n  name: Binder\n  nameWithType: Binder\n  fullName: System.Reflection.Binder\n- uid: System.Object[]\n  parent: System\n  isExternal: false\n  name: Object[]\n  nameWithType: Object[]\n  fullName: System.Object[]\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Globalization.CultureInfo\n  parent: System.Globalization\n  isExternal: false\n  name: CultureInfo\n  nameWithType: CultureInfo\n  fullName: System.Globalization.CultureInfo\n- uid: System.Reflection.MethodBase.Invoke(System.Object,System.Object[])\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: Invoke(Object, Object[])\n  nameWithType: MethodBase.Invoke(Object, Object[])\n  fullName: MethodBase.Invoke(Object, Object[])\n- uid: System.Reflection.MethodBase.IsAbstract\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsAbstract\n  nameWithType: MethodBase.IsAbstract\n  fullName: MethodBase.IsAbstract\n- uid: System.Reflection.MethodBase.IsAssembly\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsAssembly\n  nameWithType: MethodBase.IsAssembly\n  fullName: MethodBase.IsAssembly\n- uid: System.Reflection.MethodBase.IsConstructor\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsConstructor\n  nameWithType: MethodBase.IsConstructor\n  fullName: MethodBase.IsConstructor\n- uid: System.Reflection.MethodBase.IsFamily\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsFamily\n  nameWithType: MethodBase.IsFamily\n  fullName: MethodBase.IsFamily\n- uid: System.Reflection.MethodBase.IsFamilyAndAssembly\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsFamilyAndAssembly\n  nameWithType: MethodBase.IsFamilyAndAssembly\n  fullName: MethodBase.IsFamilyAndAssembly\n- uid: System.Reflection.MethodBase.IsFamilyOrAssembly\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsFamilyOrAssembly\n  nameWithType: MethodBase.IsFamilyOrAssembly\n  fullName: MethodBase.IsFamilyOrAssembly\n- uid: System.Reflection.MethodBase.IsFinal\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsFinal\n  nameWithType: MethodBase.IsFinal\n  fullName: MethodBase.IsFinal\n- uid: System.Reflection.MethodBase.IsGenericMethod\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsGenericMethod\n  nameWithType: MethodBase.IsGenericMethod\n  fullName: MethodBase.IsGenericMethod\n- uid: System.Reflection.MethodBase.IsGenericMethodDefinition\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsGenericMethodDefinition\n  nameWithType: MethodBase.IsGenericMethodDefinition\n  fullName: MethodBase.IsGenericMethodDefinition\n- uid: System.Reflection.MethodBase.IsHideBySig\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsHideBySig\n  nameWithType: MethodBase.IsHideBySig\n  fullName: MethodBase.IsHideBySig\n- uid: System.Reflection.MethodBase.IsPrivate\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsPrivate\n  nameWithType: MethodBase.IsPrivate\n  fullName: MethodBase.IsPrivate\n- uid: System.Reflection.MethodBase.IsPublic\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsPublic\n  nameWithType: MethodBase.IsPublic\n  fullName: MethodBase.IsPublic\n- uid: System.Reflection.MethodBase.IsSecurityCritical\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsSecurityCritical\n  nameWithType: MethodBase.IsSecurityCritical\n  fullName: MethodBase.IsSecurityCritical\n- uid: System.Reflection.MethodBase.IsSecuritySafeCritical\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsSecuritySafeCritical\n  nameWithType: MethodBase.IsSecuritySafeCritical\n  fullName: MethodBase.IsSecuritySafeCritical\n- uid: System.Reflection.MethodBase.IsSecurityTransparent\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsSecurityTransparent\n  nameWithType: MethodBase.IsSecurityTransparent\n  fullName: MethodBase.IsSecurityTransparent\n- uid: System.Reflection.MethodBase.IsSpecialName\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsSpecialName\n  nameWithType: MethodBase.IsSpecialName\n  fullName: MethodBase.IsSpecialName\n- uid: System.Reflection.MethodBase.IsStatic\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsStatic\n  nameWithType: MethodBase.IsStatic\n  fullName: MethodBase.IsStatic\n- uid: System.Reflection.MethodBase.IsVirtual\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsVirtual\n  nameWithType: MethodBase.IsVirtual\n  fullName: MethodBase.IsVirtual\n- uid: System.Reflection.MethodBase.MethodHandle\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: MethodHandle\n  nameWithType: MethodBase.MethodHandle\n  fullName: MethodBase.MethodHandle\n- uid: System.Reflection.MethodBase.MethodImplementationFlags\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: MethodImplementationFlags\n  nameWithType: MethodBase.MethodImplementationFlags\n  fullName: MethodBase.MethodImplementationFlags\n- uid: System.Reflection.MethodBase.op_Equality(System.Reflection.MethodBase,System.Reflection.MethodBase)\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: op_Equality(MethodBase, MethodBase)\n  nameWithType: MethodBase.op_Equality(MethodBase, MethodBase)\n  fullName: MethodBase.op_Equality(MethodBase, MethodBase)\n- uid: System.Reflection.MethodBase.op_Inequality(System.Reflection.MethodBase,System.Reflection.MethodBase)\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: op_Inequality(MethodBase, MethodBase)\n  nameWithType: MethodBase.op_Inequality(MethodBase, MethodBase)\n  fullName: MethodBase.op_Inequality(MethodBase, MethodBase)\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: MethodBase._MethodBase.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: MethodBase._MethodBase.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n- uid: System.Guid\n  parent: System\n  isExternal: false\n  name: Guid\n  nameWithType: Guid\n  fullName: System.Guid\n- uid: System.IntPtr\n  parent: System\n  isExternal: false\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.UInt32\n  parent: System\n  isExternal: false\n  name: UInt32\n  nameWithType: UInt32\n  fullName: System.UInt32\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetType\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.GetType()\n  nameWithType: MethodBase._MethodBase.GetType()\n  fullName: MethodBase._MethodBase.GetType()\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: MethodBase._MethodBase.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: MethodBase._MethodBase.GetTypeInfo(UInt32, UInt32, IntPtr)\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetTypeInfoCount(System.UInt32@)\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.GetTypeInfoCount(UInt32)\n  nameWithType: MethodBase._MethodBase.GetTypeInfoCount(UInt32)\n  fullName: MethodBase._MethodBase.GetTypeInfoCount(UInt32)\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: MethodBase._MethodBase.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: MethodBase._MethodBase.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n- uid: System.Int16\n  parent: System\n  isExternal: false\n  name: Int16\n  nameWithType: Int16\n  fullName: System.Int16\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsAbstract\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.IsAbstract\n  nameWithType: MethodBase._MethodBase.IsAbstract\n  fullName: MethodBase._MethodBase.IsAbstract\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsAssembly\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.IsAssembly\n  nameWithType: MethodBase._MethodBase.IsAssembly\n  fullName: MethodBase._MethodBase.IsAssembly\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsConstructor\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.IsConstructor\n  nameWithType: MethodBase._MethodBase.IsConstructor\n  fullName: MethodBase._MethodBase.IsConstructor\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamily\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.IsFamily\n  nameWithType: MethodBase._MethodBase.IsFamily\n  fullName: MethodBase._MethodBase.IsFamily\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamilyAndAssembly\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.IsFamilyAndAssembly\n  nameWithType: MethodBase._MethodBase.IsFamilyAndAssembly\n  fullName: MethodBase._MethodBase.IsFamilyAndAssembly\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamilyOrAssembly\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.IsFamilyOrAssembly\n  nameWithType: MethodBase._MethodBase.IsFamilyOrAssembly\n  fullName: MethodBase._MethodBase.IsFamilyOrAssembly\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFinal\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.IsFinal\n  nameWithType: MethodBase._MethodBase.IsFinal\n  fullName: MethodBase._MethodBase.IsFinal\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsHideBySig\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.IsHideBySig\n  nameWithType: MethodBase._MethodBase.IsHideBySig\n  fullName: MethodBase._MethodBase.IsHideBySig\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsPrivate\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.IsPrivate\n  nameWithType: MethodBase._MethodBase.IsPrivate\n  fullName: MethodBase._MethodBase.IsPrivate\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsPublic\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.IsPublic\n  nameWithType: MethodBase._MethodBase.IsPublic\n  fullName: MethodBase._MethodBase.IsPublic\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsSpecialName\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.IsSpecialName\n  nameWithType: MethodBase._MethodBase.IsSpecialName\n  fullName: MethodBase._MethodBase.IsSpecialName\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsStatic\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.IsStatic\n  nameWithType: MethodBase._MethodBase.IsStatic\n  fullName: MethodBase._MethodBase.IsStatic\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsVirtual\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.IsVirtual\n  nameWithType: MethodBase._MethodBase.IsVirtual\n  fullName: MethodBase._MethodBase.IsVirtual\n- uid: System.Reflection.MethodBase.#ctor*\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: MethodBase\n  nameWithType: MethodBase.MethodBase\n  fullName: MethodBase.MethodBase\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n- uid: System.Reflection.MethodBase.Attributes*\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: Attributes\n  nameWithType: MethodBase.Attributes\n  fullName: MethodBase.Attributes\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n- uid: System.Reflection.MethodBase.CallingConvention*\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: CallingConvention\n  nameWithType: MethodBase.CallingConvention\n  fullName: MethodBase.CallingConvention\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n- uid: System.Reflection.MethodBase.ContainsGenericParameters*\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: ContainsGenericParameters\n  nameWithType: MethodBase.ContainsGenericParameters\n  fullName: MethodBase.ContainsGenericParameters\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n- uid: System.Reflection.MethodBase.Equals*\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: Equals\n  nameWithType: MethodBase.Equals\n  fullName: MethodBase.Equals\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n- uid: System.Reflection.MethodBase.GetCurrentMethod*\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: GetCurrentMethod\n  nameWithType: MethodBase.GetCurrentMethod\n  fullName: MethodBase.GetCurrentMethod\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n- uid: System.Reflection.MethodBase.GetGenericArguments*\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: GetGenericArguments\n  nameWithType: MethodBase.GetGenericArguments\n  fullName: MethodBase.GetGenericArguments\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n- uid: System.Reflection.MethodBase.GetHashCode*\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: GetHashCode\n  nameWithType: MethodBase.GetHashCode\n  fullName: MethodBase.GetHashCode\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n- uid: System.Reflection.MethodBase.GetMethodBody*\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: GetMethodBody\n  nameWithType: MethodBase.GetMethodBody\n  fullName: MethodBase.GetMethodBody\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n- uid: System.Reflection.MethodBase.GetMethodFromHandle*\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: GetMethodFromHandle\n  nameWithType: MethodBase.GetMethodFromHandle\n  fullName: MethodBase.GetMethodFromHandle\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n- uid: System.Reflection.MethodBase.GetMethodImplementationFlags*\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: GetMethodImplementationFlags\n  nameWithType: MethodBase.GetMethodImplementationFlags\n  fullName: MethodBase.GetMethodImplementationFlags\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n- uid: System.Reflection.MethodBase.GetParameters*\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: GetParameters\n  nameWithType: MethodBase.GetParameters\n  fullName: MethodBase.GetParameters\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n- uid: System.Reflection.MethodBase.Invoke*\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: Invoke\n  nameWithType: MethodBase.Invoke\n  fullName: MethodBase.Invoke\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n- uid: System.Reflection.MethodBase.IsAbstract*\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsAbstract\n  nameWithType: MethodBase.IsAbstract\n  fullName: MethodBase.IsAbstract\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n- uid: System.Reflection.MethodBase.IsAssembly*\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsAssembly\n  nameWithType: MethodBase.IsAssembly\n  fullName: MethodBase.IsAssembly\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n- uid: System.Reflection.MethodBase.IsConstructor*\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsConstructor\n  nameWithType: MethodBase.IsConstructor\n  fullName: MethodBase.IsConstructor\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n- uid: System.Reflection.MethodBase.IsFamily*\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsFamily\n  nameWithType: MethodBase.IsFamily\n  fullName: MethodBase.IsFamily\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n- uid: System.Reflection.MethodBase.IsFamilyAndAssembly*\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsFamilyAndAssembly\n  nameWithType: MethodBase.IsFamilyAndAssembly\n  fullName: MethodBase.IsFamilyAndAssembly\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n- uid: System.Reflection.MethodBase.IsFamilyOrAssembly*\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsFamilyOrAssembly\n  nameWithType: MethodBase.IsFamilyOrAssembly\n  fullName: MethodBase.IsFamilyOrAssembly\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n- uid: System.Reflection.MethodBase.IsFinal*\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsFinal\n  nameWithType: MethodBase.IsFinal\n  fullName: MethodBase.IsFinal\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n- uid: System.Reflection.MethodBase.IsGenericMethod*\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsGenericMethod\n  nameWithType: MethodBase.IsGenericMethod\n  fullName: MethodBase.IsGenericMethod\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n- uid: System.Reflection.MethodBase.IsGenericMethodDefinition*\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsGenericMethodDefinition\n  nameWithType: MethodBase.IsGenericMethodDefinition\n  fullName: MethodBase.IsGenericMethodDefinition\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n- uid: System.Reflection.MethodBase.IsHideBySig*\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsHideBySig\n  nameWithType: MethodBase.IsHideBySig\n  fullName: MethodBase.IsHideBySig\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n- uid: System.Reflection.MethodBase.IsPrivate*\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsPrivate\n  nameWithType: MethodBase.IsPrivate\n  fullName: MethodBase.IsPrivate\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n- uid: System.Reflection.MethodBase.IsPublic*\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsPublic\n  nameWithType: MethodBase.IsPublic\n  fullName: MethodBase.IsPublic\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n- uid: System.Reflection.MethodBase.IsSecurityCritical*\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsSecurityCritical\n  nameWithType: MethodBase.IsSecurityCritical\n  fullName: MethodBase.IsSecurityCritical\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n- uid: System.Reflection.MethodBase.IsSecuritySafeCritical*\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsSecuritySafeCritical\n  nameWithType: MethodBase.IsSecuritySafeCritical\n  fullName: MethodBase.IsSecuritySafeCritical\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n- uid: System.Reflection.MethodBase.IsSecurityTransparent*\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsSecurityTransparent\n  nameWithType: MethodBase.IsSecurityTransparent\n  fullName: MethodBase.IsSecurityTransparent\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n- uid: System.Reflection.MethodBase.IsSpecialName*\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsSpecialName\n  nameWithType: MethodBase.IsSpecialName\n  fullName: MethodBase.IsSpecialName\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n- uid: System.Reflection.MethodBase.IsStatic*\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsStatic\n  nameWithType: MethodBase.IsStatic\n  fullName: MethodBase.IsStatic\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n- uid: System.Reflection.MethodBase.IsVirtual*\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsVirtual\n  nameWithType: MethodBase.IsVirtual\n  fullName: MethodBase.IsVirtual\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n- uid: System.Reflection.MethodBase.MethodHandle*\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: MethodHandle\n  nameWithType: MethodBase.MethodHandle\n  fullName: MethodBase.MethodHandle\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n- uid: System.Reflection.MethodBase.MethodImplementationFlags*\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: MethodImplementationFlags\n  nameWithType: MethodBase.MethodImplementationFlags\n  fullName: MethodBase.MethodImplementationFlags\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n- uid: System.Reflection.MethodBase.op_Equality*\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: op_Equality\n  nameWithType: MethodBase.op_Equality\n  fullName: MethodBase.op_Equality\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n- uid: System.Reflection.MethodBase.op_Inequality*\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: op_Inequality\n  nameWithType: MethodBase.op_Inequality\n  fullName: MethodBase.op_Inequality\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetIDsOfNames*\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: System.Runtime.InteropServices._MethodBase.GetIDsOfNames\n  nameWithType: MethodBase.System.Runtime.InteropServices._MethodBase.GetIDsOfNames\n  fullName: MethodBase.System.Runtime.InteropServices._MethodBase.GetIDsOfNames\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetType*\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: System.Runtime.InteropServices._MethodBase.GetType\n  nameWithType: MethodBase.System.Runtime.InteropServices._MethodBase.GetType\n  fullName: MethodBase.System.Runtime.InteropServices._MethodBase.GetType\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetTypeInfo*\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: System.Runtime.InteropServices._MethodBase.GetTypeInfo\n  nameWithType: MethodBase.System.Runtime.InteropServices._MethodBase.GetTypeInfo\n  fullName: MethodBase.System.Runtime.InteropServices._MethodBase.GetTypeInfo\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetTypeInfoCount*\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: System.Runtime.InteropServices._MethodBase.GetTypeInfoCount\n  nameWithType: MethodBase.System.Runtime.InteropServices._MethodBase.GetTypeInfoCount\n  fullName: MethodBase.System.Runtime.InteropServices._MethodBase.GetTypeInfoCount\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#Invoke*\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: System.Runtime.InteropServices._MethodBase.Invoke\n  nameWithType: MethodBase.System.Runtime.InteropServices._MethodBase.Invoke\n  fullName: MethodBase.System.Runtime.InteropServices._MethodBase.Invoke\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsAbstract*\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: System.Runtime.InteropServices._MethodBase.IsAbstract\n  nameWithType: MethodBase.System.Runtime.InteropServices._MethodBase.IsAbstract\n  fullName: MethodBase.System.Runtime.InteropServices._MethodBase.IsAbstract\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsAssembly*\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: System.Runtime.InteropServices._MethodBase.IsAssembly\n  nameWithType: MethodBase.System.Runtime.InteropServices._MethodBase.IsAssembly\n  fullName: MethodBase.System.Runtime.InteropServices._MethodBase.IsAssembly\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsConstructor*\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: System.Runtime.InteropServices._MethodBase.IsConstructor\n  nameWithType: MethodBase.System.Runtime.InteropServices._MethodBase.IsConstructor\n  fullName: MethodBase.System.Runtime.InteropServices._MethodBase.IsConstructor\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamily*\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: System.Runtime.InteropServices._MethodBase.IsFamily\n  nameWithType: MethodBase.System.Runtime.InteropServices._MethodBase.IsFamily\n  fullName: MethodBase.System.Runtime.InteropServices._MethodBase.IsFamily\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamilyAndAssembly*\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: System.Runtime.InteropServices._MethodBase.IsFamilyAndAssembly\n  nameWithType: MethodBase.System.Runtime.InteropServices._MethodBase.IsFamilyAndAssembly\n  fullName: MethodBase.System.Runtime.InteropServices._MethodBase.IsFamilyAndAssembly\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamilyOrAssembly*\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: System.Runtime.InteropServices._MethodBase.IsFamilyOrAssembly\n  nameWithType: MethodBase.System.Runtime.InteropServices._MethodBase.IsFamilyOrAssembly\n  fullName: MethodBase.System.Runtime.InteropServices._MethodBase.IsFamilyOrAssembly\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFinal*\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: System.Runtime.InteropServices._MethodBase.IsFinal\n  nameWithType: MethodBase.System.Runtime.InteropServices._MethodBase.IsFinal\n  fullName: MethodBase.System.Runtime.InteropServices._MethodBase.IsFinal\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsHideBySig*\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: System.Runtime.InteropServices._MethodBase.IsHideBySig\n  nameWithType: MethodBase.System.Runtime.InteropServices._MethodBase.IsHideBySig\n  fullName: MethodBase.System.Runtime.InteropServices._MethodBase.IsHideBySig\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsPrivate*\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: System.Runtime.InteropServices._MethodBase.IsPrivate\n  nameWithType: MethodBase.System.Runtime.InteropServices._MethodBase.IsPrivate\n  fullName: MethodBase.System.Runtime.InteropServices._MethodBase.IsPrivate\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsPublic*\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: System.Runtime.InteropServices._MethodBase.IsPublic\n  nameWithType: MethodBase.System.Runtime.InteropServices._MethodBase.IsPublic\n  fullName: MethodBase.System.Runtime.InteropServices._MethodBase.IsPublic\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsSpecialName*\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: System.Runtime.InteropServices._MethodBase.IsSpecialName\n  nameWithType: MethodBase.System.Runtime.InteropServices._MethodBase.IsSpecialName\n  fullName: MethodBase.System.Runtime.InteropServices._MethodBase.IsSpecialName\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsStatic*\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: System.Runtime.InteropServices._MethodBase.IsStatic\n  nameWithType: MethodBase.System.Runtime.InteropServices._MethodBase.IsStatic\n  fullName: MethodBase.System.Runtime.InteropServices._MethodBase.IsStatic\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsVirtual*\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: System.Runtime.InteropServices._MethodBase.IsVirtual\n  nameWithType: MethodBase.System.Runtime.InteropServices._MethodBase.IsVirtual\n  fullName: MethodBase.System.Runtime.InteropServices._MethodBase.IsVirtual\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBase.xml\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Reflection.MemberInfo.CustomAttributes\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: CustomAttributes\n  nameWithType: MemberInfo.CustomAttributes\n  fullName: MemberInfo.CustomAttributes\n- uid: System.Reflection.MemberInfo.DeclaringType\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: DeclaringType\n  nameWithType: MemberInfo.DeclaringType\n  fullName: MemberInfo.DeclaringType\n- uid: System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: GetCustomAttributes(Boolean)\n  nameWithType: MemberInfo.GetCustomAttributes(Boolean)\n  fullName: MemberInfo.GetCustomAttributes(Boolean)\n- uid: System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: GetCustomAttributes(Type, Boolean)\n  nameWithType: MemberInfo.GetCustomAttributes(Type, Boolean)\n  fullName: MemberInfo.GetCustomAttributes(Type, Boolean)\n- uid: System.Reflection.MemberInfo.GetCustomAttributesData\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: GetCustomAttributesData()\n  nameWithType: MemberInfo.GetCustomAttributesData()\n  fullName: MemberInfo.GetCustomAttributesData()\n- uid: System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: IsDefined(Type, Boolean)\n  nameWithType: MemberInfo.IsDefined(Type, Boolean)\n  fullName: MemberInfo.IsDefined(Type, Boolean)\n- uid: System.Reflection.MemberInfo.MemberType\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: MemberType\n  nameWithType: MemberInfo.MemberType\n  fullName: MemberInfo.MemberType\n- uid: System.Reflection.MemberInfo.MetadataToken\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: MetadataToken\n  nameWithType: MemberInfo.MetadataToken\n  fullName: MemberInfo.MetadataToken\n- uid: System.Reflection.MemberInfo.Module\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: Module\n  nameWithType: MemberInfo.Module\n  fullName: MemberInfo.Module\n- uid: System.Reflection.MemberInfo.Name\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: Name\n  nameWithType: MemberInfo.Name\n  fullName: MemberInfo.Name\n- uid: System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: op_Equality(MemberInfo, MemberInfo)\n  nameWithType: MemberInfo.op_Equality(MemberInfo, MemberInfo)\n  fullName: MemberInfo.op_Equality(MemberInfo, MemberInfo)\n- uid: System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: op_Inequality(MemberInfo, MemberInfo)\n  nameWithType: MemberInfo.op_Inequality(MemberInfo, MemberInfo)\n  fullName: MemberInfo.op_Inequality(MemberInfo, MemberInfo)\n- uid: System.Reflection.MemberInfo.ReflectedType\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: ReflectedType\n  nameWithType: MemberInfo.ReflectedType\n  fullName: MemberInfo.ReflectedType\n- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  nameWithType: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  fullName: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  nameWithType: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  fullName: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: ICustomAttributeProvider.IsDefined(Type, Boolean)\n  nameWithType: MemberInfo.ICustomAttributeProvider.IsDefined(Type, Boolean)\n  fullName: MemberInfo.ICustomAttributeProvider.IsDefined(Type, Boolean)\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: MemberInfo._MemberInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: MemberInfo._MemberInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetType\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.GetType()\n  nameWithType: MemberInfo._MemberInfo.GetType()\n  fullName: MemberInfo._MemberInfo.GetType()\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: MemberInfo._MemberInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: MemberInfo._MemberInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.GetTypeInfoCount(UInt32)\n  nameWithType: MemberInfo._MemberInfo.GetTypeInfoCount(UInt32)\n  fullName: MemberInfo._MemberInfo.GetTypeInfoCount(UInt32)\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: MemberInfo._MemberInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: MemberInfo._MemberInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttribute(MemberInfo, Type)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type)\n  fullName: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttribute(MemberInfo, Type, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttribute<T>(MemberInfo)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo)\n  fullName: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttribute<T>(MemberInfo, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo)\n  fullName: CustomAttributeExtensions.GetCustomAttributes(MemberInfo)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Type)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type)\n  fullName: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Type, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes<T>(MemberInfo)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo)\n  fullName: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes<T>(MemberInfo, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: IsDefined(MemberInfo, Type)\n  nameWithType: CustomAttributeExtensions.IsDefined(MemberInfo, Type)\n  fullName: CustomAttributeExtensions.IsDefined(MemberInfo, Type)\n- uid: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: IsDefined(MemberInfo, Type, Boolean)\n  nameWithType: CustomAttributeExtensions.IsDefined(MemberInfo, Type, Boolean)\n  fullName: CustomAttributeExtensions.IsDefined(MemberInfo, Type, Boolean)\n- uid: System.Reflection.MemberInfoExtensions.GetMetadataToken(System.Reflection.MemberInfo)\n  parent: System.Reflection.MemberInfoExtensions\n  isExternal: false\n  name: GetMetadataToken(MemberInfo)\n  nameWithType: MemberInfoExtensions.GetMetadataToken(MemberInfo)\n  fullName: MemberInfoExtensions.GetMetadataToken(MemberInfo)\n- uid: System.Reflection.MemberInfoExtensions.HasMetadataToken(System.Reflection.MemberInfo)\n  parent: System.Reflection.MemberInfoExtensions\n  isExternal: false\n  name: HasMetadataToken(MemberInfo)\n  nameWithType: MemberInfoExtensions.HasMetadataToken(MemberInfo)\n  fullName: MemberInfoExtensions.HasMetadataToken(MemberInfo)\n- uid: System.Runtime.InteropServices._MethodBase\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: _MethodBase\n  nameWithType: _MethodBase\n  fullName: System.Runtime.InteropServices._MethodBase\n"}