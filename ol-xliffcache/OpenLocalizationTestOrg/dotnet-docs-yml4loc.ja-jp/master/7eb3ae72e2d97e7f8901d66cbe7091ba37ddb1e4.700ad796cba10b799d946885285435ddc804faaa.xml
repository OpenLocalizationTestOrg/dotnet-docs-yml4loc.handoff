{"nodes":[{"content":"Provides methods for building signatures.","nodes":[{"pos":[0,41],"content":"Provides methods for building signatures.","nodes":[{"content":"Provides methods for building signatures.","pos":[0,41]}]}],"pos":[3094,3136],"yaml":true},{"content":"Use the <xref:System.Reflection.Emit.SignatureHelper> class to create a signature blob that can be passed to the <xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A> method of the <xref:System.Reflection.Emit.DynamicILInfo> class. A <xref:System.Reflection.Emit.SignatureHelper> object can also be passed to the <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.Emit.SignatureHelper%29?displayProperty=fullName> method overload to insert an instruction and a signature token into a Microsoft intermediate language (MSIL) stream. For information on signature blobs and signature metadata, see the ECMA Partition II Metadata documentation.  \n  \n> [!NOTE]\n>  The ECMA Partition II documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","nodes":[{"pos":[0,697],"content":"Use the <xref:System.Reflection.Emit.SignatureHelper> class to create a signature blob that can be passed to the <xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A> method of the <xref:System.Reflection.Emit.DynamicILInfo> class. A <xref:System.Reflection.Emit.SignatureHelper> object can also be passed to the <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.Emit.SignatureHelper%29?displayProperty=fullName> method overload to insert an instruction and a signature token into a Microsoft intermediate language (MSIL) stream. For information on signature blobs and signature metadata, see the ECMA Partition II Metadata documentation.","nodes":[{"content":"Use the <xref:System.Reflection.Emit.SignatureHelper> class to create a signature blob that can be passed to the <xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A> method of the <xref:System.Reflection.Emit.DynamicILInfo> class. A <xref:System.Reflection.Emit.SignatureHelper> object can also be passed to the <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.Emit.SignatureHelper%29?displayProperty=fullName> method overload to insert an instruction and a signature token into a Microsoft intermediate language (MSIL) stream. For information on signature blobs and signature metadata, see the ECMA Partition II Metadata documentation.","pos":[0,697],"nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.SignatureHelper&gt;</ph> class to create a signature blob that can be passed to the <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> class.","pos":[0,242],"source":"Use the <xref:System.Reflection.Emit.SignatureHelper> class to create a signature blob that can be passed to the <xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A> method of the <xref:System.Reflection.Emit.DynamicILInfo> class."},{"content":"A <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.SignatureHelper&gt;</ph> object can also be passed to the <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.Emit.SignatureHelper%29?displayProperty=fullName&gt;</ph> method overload to insert an instruction and a signature token into a Microsoft intermediate language (MSIL) stream.","pos":[243,588],"source":" A <xref:System.Reflection.Emit.SignatureHelper> object can also be passed to the <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.Emit.SignatureHelper%29?displayProperty=fullName> method overload to insert an instruction and a signature token into a Microsoft intermediate language (MSIL) stream."},{"content":"For information on signature blobs and signature metadata, see the ECMA Partition II Metadata documentation.","pos":[589,697]}]}]},{"pos":[705,1030],"content":"[!NOTE]\n The ECMA Partition II documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","leadings":["","> "],"nodes":[{"content":"The ECMA Partition II documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.","pos":[9,323],"source":" The ECMA Partition II documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."}]}],"pos":[3147,4183],"yaml":true,"extradata":"MT"},{"content":"Adds an argument to the signature.","nodes":[{"pos":[0,34],"content":"Adds an argument to the signature.","nodes":[{"content":"Adds an argument to the signature.","pos":[0,34]}]}],"pos":[6165,6200],"yaml":true},{"content":"To add an argument with optional or required custom modifiers, use the <xref:System.Reflection.Emit.SignatureHelper.AddArgument%28System.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method overload.","nodes":[{"pos":[0,202],"content":"To add an argument with optional or required custom modifiers, use the <xref:System.Reflection.Emit.SignatureHelper.AddArgument%28System.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method overload.","nodes":[{"content":"To add an argument with optional or required custom modifiers, use the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.SignatureHelper.AddArgument%28System.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29&gt;</ph> method overload.","pos":[0,202],"source":"To add an argument with optional or required custom modifiers, use the <xref:System.Reflection.Emit.SignatureHelper.AddArgument%28System.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method overload."}]}],"pos":[6211,6414],"yaml":true,"extradata":"MT"},{"content":"The type of the argument.","nodes":[{"pos":[0,25],"content":"The type of the argument.","nodes":[{"content":"The type of the argument.","pos":[0,25]}]}],"pos":[6562,6588],"yaml":true},{"content":"The signature has already been finished.","nodes":[{"pos":[0,40],"content":"The signature has already been finished.","nodes":[{"content":"The signature has already been finished.","pos":[0,40]}]}],"pos":[6760,6801],"yaml":true},{"content":"<code>clsArgument</code> is `null`.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;clsArgument&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>clsArgument</code> is `null`."}],"pos":[6903,6939],"yaml":true},{"content":"Adds an argument of the specified type to the signature, specifying whether the argument is pinned.","nodes":[{"pos":[0,99],"content":"Adds an argument of the specified type to the signature, specifying whether the argument is pinned.","nodes":[{"content":"Adds an argument of the specified type to the signature, specifying whether the argument is pinned.","pos":[0,99]}]}],"pos":[8271,8371],"yaml":true},{"content":"To add an argument with optional or required custom modifiers, use the <xref:System.Reflection.Emit.SignatureHelper.AddArgument%28System.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method overload.","nodes":[{"pos":[0,202],"content":"To add an argument with optional or required custom modifiers, use the <xref:System.Reflection.Emit.SignatureHelper.AddArgument%28System.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method overload.","nodes":[{"content":"To add an argument with optional or required custom modifiers, use the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.SignatureHelper.AddArgument%28System.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29&gt;</ph> method overload.","pos":[0,202],"source":"To add an argument with optional or required custom modifiers, use the <xref:System.Reflection.Emit.SignatureHelper.AddArgument%28System.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method overload."}]}],"pos":[8382,8585],"yaml":true,"extradata":"MT"},{"content":"The argument type.","nodes":[{"pos":[0,18],"content":"The argument type.","nodes":[{"content":"The argument type.","pos":[0,18]}]}],"pos":[8740,8759],"yaml":true},{"content":"`true` if the argument is pinned; otherwise, `false`.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">`true`</ph> if the argument is pinned; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the argument is pinned; otherwise, `false`."}],"pos":[8822,8878],"yaml":true},{"content":"<code>argument</code> is `null`.","nodes":[{"pos":[0,32],"content":"<ph id=\"ph1\">&lt;code&gt;argument&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>argument</code> is `null`."}],"pos":[9058,9091],"yaml":true},{"content":"Adds an argument to the signature, with the specified custom modifiers.","nodes":[{"pos":[0,71],"content":"Adds an argument to the signature, with the specified custom modifiers.","nodes":[{"content":"Adds an argument to the signature, with the specified custom modifiers.","pos":[0,71]}]}],"pos":[10483,10555],"yaml":true},{"content":"See the <xref:System.Runtime.CompilerServices> namespace for classes that represent custom modifiers.","nodes":[{"pos":[0,101],"content":"See the <xref:System.Runtime.CompilerServices> namespace for classes that represent custom modifiers.","nodes":[{"content":"See the <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices&gt;</ph> namespace for classes that represent custom modifiers.","pos":[0,101],"source":"See the <xref:System.Runtime.CompilerServices> namespace for classes that represent custom modifiers."}]}],"pos":[10566,10668],"yaml":true,"extradata":"MT"},{"content":"The argument type.","nodes":[{"pos":[0,18],"content":"The argument type.","nodes":[{"content":"The argument type.","pos":[0,18]}]}],"pos":[10874,10893],"yaml":true},{"content":"An array of types representing the required custom modifiers for the argument, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref> or <xref href=\"System.Runtime.CompilerServices.IsBoxed\"></xref>. If the argument has no required custom modifiers, specify `null`.","nodes":[{"pos":[0,278],"content":"An array of types representing the required custom modifiers for the argument, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref> or <xref href=\"System.Runtime.CompilerServices.IsBoxed\"></xref>. If the argument has no required custom modifiers, specify `null`.","nodes":[{"content":"An array of types representing the required custom modifiers for the argument, such as <ph id=\"ph1\">&lt;xref href=\"System.Runtime.CompilerServices.IsConst\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph2\">&lt;xref href=\"System.Runtime.CompilerServices.IsBoxed\"&gt;&lt;/xref&gt;</ph>.","pos":[0,212],"source":"An array of types representing the required custom modifiers for the argument, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref> or <xref href=\"System.Runtime.CompilerServices.IsBoxed\"></xref>."},{"content":"If the argument has no required custom modifiers, specify <ph id=\"ph1\">`null`</ph>.","pos":[213,278],"source":" If the argument has no required custom modifiers, specify `null`."}]}],"pos":[10972,11251],"yaml":true},{"content":"An array of types representing the optional custom modifiers for the argument, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref> or <xref href=\"System.Runtime.CompilerServices.IsBoxed\"></xref>. If the argument has no optional custom modifiers, specify `null`.","nodes":[{"pos":[0,278],"content":"An array of types representing the optional custom modifiers for the argument, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref> or <xref href=\"System.Runtime.CompilerServices.IsBoxed\"></xref>. If the argument has no optional custom modifiers, specify `null`.","nodes":[{"content":"An array of types representing the optional custom modifiers for the argument, such as <ph id=\"ph1\">&lt;xref href=\"System.Runtime.CompilerServices.IsConst\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph2\">&lt;xref href=\"System.Runtime.CompilerServices.IsBoxed\"&gt;&lt;/xref&gt;</ph>.","pos":[0,212],"source":"An array of types representing the optional custom modifiers for the argument, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref> or <xref href=\"System.Runtime.CompilerServices.IsBoxed\"></xref>."},{"content":"If the argument has no optional custom modifiers, specify <ph id=\"ph1\">`null`</ph>.","pos":[213,278],"source":" If the argument has no optional custom modifiers, specify `null`."}]}],"pos":[11330,11609],"yaml":true},{"content":"<code>argument</code> is `null`.  \n  \n -or-  \n  \n An element of <code>requiredCustomModifiers</code> or <code>optionalCustomModifiers</code> is `null`.","nodes":[{"pos":[0,32],"content":"<ph id=\"ph1\">&lt;code&gt;argument&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>argument</code> is `null`."},{"pos":[39,43],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[50,151],"content":"An element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">requiredCustomModifiers</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">optionalCustomModifiers</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>.","source":"An element of <code>requiredCustomModifiers</code> or <code>optionalCustomModifiers</code> is `null`."}],"pos":[11789,11947],"yaml":true},{"content":"The signature has already been finished.  \n  \n -or-  \n  \n One of the specified custom modifiers is an array type.  \n  \n -or-  \n  \n One of the specified custom modifiers is an open generic type. That is, the <xref href=\"System.Type.ContainsGenericParameters\"></xref> property is `true` for the custom modifier.","nodes":[{"pos":[0,40],"content":"The signature has already been finished.","nodes":[{"content":"The signature has already been finished.","pos":[0,40]}]},{"pos":[47,51],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[58,113],"content":"One of the specified custom modifiers is an array type.","nodes":[{"content":"One of the specified custom modifiers is an array type.","pos":[0,55]}]},{"pos":[120,124],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[131,309],"content":"One of the specified custom modifiers is an open generic type. That is, the <xref href=\"System.Type.ContainsGenericParameters\"></xref> property is `true` for the custom modifier.","nodes":[{"content":"One of the specified custom modifiers is an open generic type.","pos":[0,62]},{"content":"That is, the <ph id=\"ph1\">&lt;xref href=\"System.Type.ContainsGenericParameters\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph2\">`true`</ph> for the custom modifier.","pos":[63,178],"source":" That is, the <xref href=\"System.Type.ContainsGenericParameters\"></xref> property is `true` for the custom modifier."}]}],"pos":[12041,12363],"yaml":true},{"content":"Adds a set of arguments to the signature, with the specified custom modifiers.","nodes":[{"pos":[0,78],"content":"Adds a set of arguments to the signature, with the specified custom modifiers.","nodes":[{"content":"Adds a set of arguments to the signature, with the specified custom modifiers.","pos":[0,78]}]}],"pos":[13797,13876],"yaml":true},{"content":"The arguments are added to the end of the signature, in order of the elements of `arguments`.  \n  \n See the <xref:System.Runtime.CompilerServices> namespace for classes that represent custom modifiers.","nodes":[{"pos":[0,93],"content":"The arguments are added to the end of the signature, in order of the elements of <ph id=\"ph1\">`arguments`</ph>.","source":"The arguments are added to the end of the signature, in order of the elements of `arguments`."},{"pos":[100,201],"content":"See the <xref:System.Runtime.CompilerServices> namespace for classes that represent custom modifiers.","nodes":[{"content":"See the <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices&gt;</ph> namespace for classes that represent custom modifiers.","pos":[0,101],"source":"See the <xref:System.Runtime.CompilerServices> namespace for classes that represent custom modifiers."}]}],"pos":[13887,14093],"yaml":true,"extradata":"MT"},{"content":"The types of the arguments to be added.","nodes":[{"pos":[0,39],"content":"The types of the arguments to be added.","nodes":[{"content":"The types of the arguments to be added.","pos":[0,39]}]}],"pos":[14310,14350],"yaml":true},{"content":"An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding argument, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref> or <xref href=\"System.Runtime.CompilerServices.IsBoxed\"></xref>. If a particular argument has no required custom modifiers, specify `null` instead of an array of types. If none of the arguments have required custom modifiers, specify `null` instead of an array of arrays.","nodes":[{"pos":[0,462],"content":"An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding argument, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref> or <xref href=\"System.Runtime.CompilerServices.IsBoxed\"></xref>. If a particular argument has no required custom modifiers, specify `null` instead of an array of types. If none of the arguments have required custom modifiers, specify `null` instead of an array of arrays.","nodes":[{"content":"An array of arrays of types.","pos":[0,28]},{"content":"Each array of types represents the required custom modifiers for the corresponding argument, such as <ph id=\"ph1\">&lt;xref href=\"System.Runtime.CompilerServices.IsConst\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph2\">&lt;xref href=\"System.Runtime.CompilerServices.IsBoxed\"&gt;&lt;/xref&gt;</ph>.","pos":[29,255],"source":" Each array of types represents the required custom modifiers for the corresponding argument, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref> or <xref href=\"System.Runtime.CompilerServices.IsBoxed\"></xref>."},{"content":"If a particular argument has no required custom modifiers, specify <ph id=\"ph1\">`null`</ph> instead of an array of types.","pos":[256,359],"source":" If a particular argument has no required custom modifiers, specify `null` instead of an array of types."},{"content":"If none of the arguments have required custom modifiers, specify <ph id=\"ph1\">`null`</ph> instead of an array of arrays.","pos":[360,462],"source":" If none of the arguments have required custom modifiers, specify `null` instead of an array of arrays."}]}],"pos":[14431,14894],"yaml":true},{"content":"An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding argument, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref> or <xref href=\"System.Runtime.CompilerServices.IsBoxed\"></xref>. If a particular argument has no optional custom modifiers, specify `null` instead of an array of types. If none of the arguments have optional custom modifiers, specify `null` instead of an array of arrays.","nodes":[{"pos":[0,462],"content":"An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding argument, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref> or <xref href=\"System.Runtime.CompilerServices.IsBoxed\"></xref>. If a particular argument has no optional custom modifiers, specify `null` instead of an array of types. If none of the arguments have optional custom modifiers, specify `null` instead of an array of arrays.","nodes":[{"content":"An array of arrays of types.","pos":[0,28]},{"content":"Each array of types represents the optional custom modifiers for the corresponding argument, such as <ph id=\"ph1\">&lt;xref href=\"System.Runtime.CompilerServices.IsConst\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph2\">&lt;xref href=\"System.Runtime.CompilerServices.IsBoxed\"&gt;&lt;/xref&gt;</ph>.","pos":[29,255],"source":" Each array of types represents the optional custom modifiers for the corresponding argument, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref> or <xref href=\"System.Runtime.CompilerServices.IsBoxed\"></xref>."},{"content":"If a particular argument has no optional custom modifiers, specify <ph id=\"ph1\">`null`</ph> instead of an array of types.","pos":[256,359],"source":" If a particular argument has no optional custom modifiers, specify `null` instead of an array of types."},{"content":"If none of the arguments have optional custom modifiers, specify <ph id=\"ph1\">`null`</ph> instead of an array of arrays.","pos":[360,462],"source":" If none of the arguments have optional custom modifiers, specify `null` instead of an array of arrays."}]}],"pos":[14975,15438],"yaml":true},{"content":"An element of <code>arguments</code> is `null`.  \n  \n -or-  \n  \n One of the specified custom modifiers is `null`. (However, `null` can be specified for the array of custom modifiers for any argument.)","nodes":[{"pos":[0,47],"content":"An element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">arguments</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>.","source":"An element of <code>arguments</code> is `null`."},{"pos":[54,58],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[65,200],"content":"One of the specified custom modifiers is `null`. (However, `null` can be specified for the array of custom modifiers for any argument.)","nodes":[{"content":"One of the specified custom modifiers is <ph id=\"ph1\">`null`</ph>.","pos":[0,48],"source":"One of the specified custom modifiers is `null`."},{"content":"(However, <ph id=\"ph1\">`null`</ph> can be specified for the array of custom modifiers for any argument.)","pos":[49,135],"source":" (However, `null` can be specified for the array of custom modifiers for any argument.)"}]}],"pos":[15619,15826],"yaml":true},{"content":"The signature has already been finished.  \n  \n -or-  \n  \n One of the specified custom modifiers is an array type.  \n  \n -or-  \n  \n One of the specified custom modifiers is an open generic type. That is, the <xref href=\"System.Type.ContainsGenericParameters\"></xref> property is `true` for the custom modifier.  \n  \n -or-  \n  \n The size of <code>requiredCustomModifiers</code> or <code>optionalCustomModifiers</code> does not equal the size of <code>arguments</code>.","nodes":[{"pos":[0,40],"content":"The signature has already been finished.","nodes":[{"content":"The signature has already been finished.","pos":[0,40]}]},{"pos":[47,51],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[58,113],"content":"One of the specified custom modifiers is an array type.","nodes":[{"content":"One of the specified custom modifiers is an array type.","pos":[0,55]}]},{"pos":[120,124],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[131,309],"content":"One of the specified custom modifiers is an open generic type. That is, the <xref href=\"System.Type.ContainsGenericParameters\"></xref> property is `true` for the custom modifier.","nodes":[{"content":"One of the specified custom modifiers is an open generic type.","pos":[0,62]},{"content":"That is, the <ph id=\"ph1\">&lt;xref href=\"System.Type.ContainsGenericParameters\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph2\">`true`</ph> for the custom modifier.","pos":[63,178],"source":" That is, the <xref href=\"System.Type.ContainsGenericParameters\"></xref> property is `true` for the custom modifier."}]},{"pos":[316,320],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[327,466],"content":"The size of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">requiredCustomModifiers</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">optionalCustomModifiers</ph><ept id=\"p2\">&lt;/code&gt;</ept> does not equal the size of <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">arguments</ph><ept id=\"p3\">&lt;/code&gt;</ept>.","source":"The size of <code>requiredCustomModifiers</code> or <code>optionalCustomModifiers</code> does not equal the size of <code>arguments</code>."}],"pos":[15920,16403],"yaml":true},{"content":"Marks the end of a vararg fixed part. This is only used if the caller is creating a vararg signature call site.","nodes":[{"pos":[0,111],"content":"Marks the end of a vararg fixed part. This is only used if the caller is creating a vararg signature call site.","nodes":[{"content":"Marks the end of a vararg fixed part. This is only used if the caller is creating a vararg signature call site.","pos":[0,111],"nodes":[{"content":"Marks the end of a vararg fixed part.","pos":[0,37]},{"content":"This is only used if the caller is creating a vararg signature call site.","pos":[38,111]}]}]}],"pos":[17612,17724],"yaml":true},{"content":"Checks if this instance is equal to the given object.","nodes":[{"pos":[0,53],"content":"Checks if this instance is equal to the given object.","nodes":[{"content":"Checks if this instance is equal to the given object.","pos":[0,53]}]}],"pos":[19117,19171],"yaml":true},{"content":"The object with which this instance should be compared.","nodes":[{"pos":[0,55],"content":"The object with which this instance should be compared.","nodes":[{"content":"The object with which this instance should be compared.","pos":[0,55]}]}],"pos":[19311,19367],"yaml":true},{"content":"`true` if the given object is a `SignatureHelper` and represents the same signature; otherwise, `false`.","nodes":[{"pos":[0,104],"content":"<ph id=\"ph1\">`true`</ph> if the given object is a <ph id=\"ph2\">`SignatureHelper`</ph> and represents the same signature; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the given object is a `SignatureHelper` and represents the same signature; otherwise, `false`."}],"pos":[19425,19532],"yaml":true},{"content":"Returns a signature helper for a field.","nodes":[{"pos":[0,39],"content":"Returns a signature helper for a field.","nodes":[{"content":"Returns a signature helper for a field.","pos":[0,39]}]}],"pos":[20909,20949],"yaml":true},{"content":"The dynamic module that contains the field for which the `SignatureHelper` is requested.","nodes":[{"pos":[0,88],"content":"The dynamic module that contains the field for which the <ph id=\"ph1\">`SignatureHelper`</ph> is requested.","source":"The dynamic module that contains the field for which the `SignatureHelper` is requested."}],"pos":[21161,21250],"yaml":true},{"content":"The `SignatureHelper` object for a field.","nodes":[{"pos":[0,41],"content":"The <ph id=\"ph1\">`SignatureHelper`</ph> object for a field.","source":"The `SignatureHelper` object for a field."}],"pos":[21332,21374],"yaml":true},{"content":"Creates and returns a hash code for this instance.","nodes":[{"pos":[0,50],"content":"Creates and returns a hash code for this instance.","nodes":[{"content":"Creates and returns a hash code for this instance.","pos":[0,50]}]}],"pos":[22670,22721],"yaml":true},{"content":"The hash code is created from the name of this instance, so the return value is the same as if the `GetHashCode` method were called on the value of the `Name` property.","nodes":[{"pos":[0,168],"content":"The hash code is created from the name of this instance, so the return value is the same as if the <ph id=\"ph1\">`GetHashCode`</ph> method were called on the value of the <ph id=\"ph2\">`Name`</ph> property.","source":"The hash code is created from the name of this instance, so the return value is the same as if the `GetHashCode` method were called on the value of the `Name` property."}],"pos":[22732,22901],"yaml":true,"extradata":"MT"},{"content":"Returns the hash code based on the name.","nodes":[{"pos":[0,40],"content":"Returns the hash code based on the name.","nodes":[{"content":"Returns the hash code based on the name.","pos":[0,40]}]}],"pos":[23035,23076],"yaml":true},{"content":"Returns a signature helper for a local variable.","nodes":[{"pos":[0,48],"content":"Returns a signature helper for a local variable.","nodes":[{"content":"Returns a signature helper for a local variable.","pos":[0,48]}]}],"pos":[24380,24429],"yaml":true},{"content":"A <xref href=\"System.Reflection.Emit.SignatureHelper\"></xref> for a local variable.","nodes":[{"pos":[0,83],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.SignatureHelper\"&gt;&lt;/xref&gt;</ph> for a local variable.","source":"A <xref href=\"System.Reflection.Emit.SignatureHelper\"></xref> for a local variable."}],"pos":[24631,24715],"yaml":true},{"content":"Returns a signature helper for a local variable.","nodes":[{"pos":[0,48],"content":"Returns a signature helper for a local variable.","nodes":[{"content":"Returns a signature helper for a local variable.","pos":[0,48]}]}],"pos":[26164,26213],"yaml":true},{"content":"The dynamic module that contains the local variable for which the `SignatureHelper` is requested.","nodes":[{"pos":[0,97],"content":"The dynamic module that contains the local variable for which the <ph id=\"ph1\">`SignatureHelper`</ph> is requested.","source":"The dynamic module that contains the local variable for which the `SignatureHelper` is requested."}],"pos":[26428,26526],"yaml":true},{"content":"The `SignatureHelper` object for a local variable.","nodes":[{"pos":[0,50],"content":"The <ph id=\"ph1\">`SignatureHelper`</ph> object for a local variable.","source":"The `SignatureHelper` object for a local variable."}],"pos":[26608,26659],"yaml":true},{"content":"Returns a signature helper for a method with a standard calling convention, given the method's module, return type, and argument types.","nodes":[{"pos":[0,135],"content":"Returns a signature helper for a method with a standard calling convention, given the method's module, return type, and argument types.","nodes":[{"content":"Returns a signature helper for a method with a standard calling convention, given the method's module, return type, and argument types.","pos":[0,135]}]}],"pos":[28216,28352],"yaml":true},{"content":"This overload creates a signature with a standard calling convention.  \n  \n To create a method signature with custom modifiers, use the <xref:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper%28System.Reflection.Module%2CSystem.Reflection.CallingConventions%2CSystem.Type%29> method overload and then use the <xref:System.Reflection.Emit.SignatureHelper.AddArgument%28System.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> or <xref:System.Reflection.Emit.SignatureHelper.AddArguments%28System.Type%5B%5D%2CSystem.Type%5B%5D%5B%5D%2CSystem.Type%5B%5D%5B%5D%29> method overloads to add arguments with custom modifiers.","nodes":[{"pos":[0,69],"content":"This overload creates a signature with a standard calling convention.","nodes":[{"content":"This overload creates a signature with a standard calling convention.","pos":[0,69]}]},{"pos":[76,625],"content":"To create a method signature with custom modifiers, use the <xref:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper%28System.Reflection.Module%2CSystem.Reflection.CallingConventions%2CSystem.Type%29> method overload and then use the <xref:System.Reflection.Emit.SignatureHelper.AddArgument%28System.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> or <xref:System.Reflection.Emit.SignatureHelper.AddArguments%28System.Type%5B%5D%2CSystem.Type%5B%5D%5B%5D%2CSystem.Type%5B%5D%5B%5D%29> method overloads to add arguments with custom modifiers.","nodes":[{"content":"To create a method signature with custom modifiers, use the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper%28System.Reflection.Module%2CSystem.Reflection.CallingConventions%2CSystem.Type%29&gt;</ph> method overload and then use the <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.SignatureHelper.AddArgument%28System.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Reflection.Emit.SignatureHelper.AddArguments%28System.Type%5B%5D%2CSystem.Type%5B%5D%5B%5D%2CSystem.Type%5B%5D%5B%5D%29&gt;</ph> method overloads to add arguments with custom modifiers.","pos":[0,549],"source":"To create a method signature with custom modifiers, use the <xref:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper%28System.Reflection.Module%2CSystem.Reflection.CallingConventions%2CSystem.Type%29> method overload and then use the <xref:System.Reflection.Emit.SignatureHelper.AddArgument%28System.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> or <xref:System.Reflection.Emit.SignatureHelper.AddArguments%28System.Type%5B%5D%2CSystem.Type%5B%5D%5B%5D%2CSystem.Type%5B%5D%5B%5D%29> method overloads to add arguments with custom modifiers."}]}],"pos":[28363,28993],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Reflection.Emit.ModuleBuilder\"></xref> that contains the method for which the `SignatureHelper` is requested.","nodes":[{"pos":[0,132],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.ModuleBuilder\"&gt;&lt;/xref&gt;</ph> that contains the method for which the <ph id=\"ph2\">`SignatureHelper`</ph> is requested.","source":"The <xref href=\"System.Reflection.Emit.ModuleBuilder\"></xref> that contains the method for which the `SignatureHelper` is requested."}],"pos":[29246,29379],"yaml":true},{"content":"The return type of the method, or `null` for a void return type (`Sub` procedure in Visual Basic).","nodes":[{"pos":[0,98],"content":"The return type of the method, or <ph id=\"ph1\">`null`</ph> for a void return type (<ph id=\"ph2\">`Sub`</ph> procedure in Visual Basic).","source":"The return type of the method, or `null` for a void return type (`Sub` procedure in Visual Basic)."}],"pos":[29443,29542],"yaml":true},{"content":"The types of the arguments of the method, or `null` if the method has no arguments.","nodes":[{"pos":[0,83],"content":"The types of the arguments of the method, or <ph id=\"ph1\">`null`</ph> if the method has no arguments.","source":"The types of the arguments of the method, or `null` if the method has no arguments."}],"pos":[29612,29696],"yaml":true},{"content":"The `SignatureHelper` object for a method.","nodes":[{"pos":[0,42],"content":"The <ph id=\"ph1\">`SignatureHelper`</ph> object for a method.","source":"The `SignatureHelper` object for a method."}],"pos":[29778,29821],"yaml":true},{"content":"<code>mod</code> is `null`.  \n  \n -or-  \n  \n An element of <code>parameterTypes</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;mod&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>mod</code> is `null`."},{"pos":[34,38],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[45,97],"content":"An element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">parameterTypes</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>.","source":"An element of <code>parameterTypes</code> is `null`."}],"pos":[30008,30112],"yaml":true},{"content":"<code>mod</code> is not a <xref href=\"System.Reflection.Emit.ModuleBuilder\"></xref>.","nodes":[{"pos":[0,84],"content":"<ph id=\"ph1\">&lt;code&gt;mod&lt;/code&gt;</ph> is not a <ph id=\"ph2\">&lt;xref href=\"System.Reflection.Emit.ModuleBuilder\"&gt;&lt;/xref&gt;</ph>.","source":"<code>mod</code> is not a <xref href=\"System.Reflection.Emit.ModuleBuilder\"></xref>."}],"pos":[30206,30291],"yaml":true},{"content":"Returns a signature helper for a method given the method's module, unmanaged calling convention, and return type.","nodes":[{"pos":[0,113],"content":"Returns a signature helper for a method given the method's module, unmanaged calling convention, and return type.","nodes":[{"content":"Returns a signature helper for a method given the method's module, unmanaged calling convention, and return type.","pos":[0,113]}]}],"pos":[31856,31970],"yaml":true},{"content":"The <xref href=\"System.Reflection.Emit.ModuleBuilder\"></xref> that contains the method for which the `SignatureHelper` is requested.","nodes":[{"pos":[0,132],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.ModuleBuilder\"&gt;&lt;/xref&gt;</ph> that contains the method for which the <ph id=\"ph2\">`SignatureHelper`</ph> is requested.","source":"The <xref href=\"System.Reflection.Emit.ModuleBuilder\"></xref> that contains the method for which the `SignatureHelper` is requested."}],"pos":[32268,32401],"yaml":true},{"content":"The unmanaged calling convention of the method.","nodes":[{"pos":[0,47],"content":"The unmanaged calling convention of the method.","nodes":[{"content":"The unmanaged calling convention of the method.","pos":[0,47]}]}],"pos":[32509,32557],"yaml":true},{"content":"The return type of the method, or `null` for a void return type (`Sub` procedure in Visual Basic).","nodes":[{"pos":[0,98],"content":"The return type of the method, or <ph id=\"ph1\">`null`</ph> for a void return type (<ph id=\"ph2\">`Sub`</ph> procedure in Visual Basic).","source":"The return type of the method, or `null` for a void return type (`Sub` procedure in Visual Basic)."}],"pos":[32621,32720],"yaml":true},{"content":"The `SignatureHelper` object for a method.","nodes":[{"pos":[0,42],"content":"The <ph id=\"ph1\">`SignatureHelper`</ph> object for a method.","source":"The `SignatureHelper` object for a method."}],"pos":[32802,32845],"yaml":true},{"content":"<code>mod</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;mod&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>mod</code> is `null`."}],"pos":[33032,33060],"yaml":true},{"content":"<code>mod</code> is not a <xref href=\"System.Reflection.Emit.ModuleBuilder\"></xref>.  \n  \n -or-  \n  \n <code>unmanagedCallConv</code> is an unknown unmanaged calling convention.","nodes":[{"pos":[0,84],"content":"<ph id=\"ph1\">&lt;code&gt;mod&lt;/code&gt;</ph> is not a <ph id=\"ph2\">&lt;xref href=\"System.Reflection.Emit.ModuleBuilder\"&gt;&lt;/xref&gt;</ph>.","source":"<code>mod</code> is not a <xref href=\"System.Reflection.Emit.ModuleBuilder\"></xref>."},{"pos":[91,95],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[102,176],"content":"<ph id=\"ph1\">&lt;code&gt;unmanagedCallConv&lt;/code&gt;</ph> is an unknown unmanaged calling convention.","source":"<code>unmanagedCallConv</code> is an unknown unmanaged calling convention."}],"pos":[33154,33339],"yaml":true},{"content":"Returns a signature helper for a method given the method's unmanaged calling convention and return type.","nodes":[{"pos":[0,104],"content":"Returns a signature helper for a method given the method's unmanaged calling convention and return type.","nodes":[{"content":"Returns a signature helper for a method given the method's unmanaged calling convention and return type.","pos":[0,104]}]}],"pos":[34669,34774],"yaml":true},{"content":"The unmanaged calling convention of the method.","nodes":[{"pos":[0,47],"content":"The unmanaged calling convention of the method.","nodes":[{"content":"The unmanaged calling convention of the method.","pos":[0,47]}]}],"pos":[35098,35146],"yaml":true},{"content":"The return type of the method, or `null` for a void return type (`Sub` procedure in Visual Basic).","nodes":[{"pos":[0,98],"content":"The return type of the method, or <ph id=\"ph1\">`null`</ph> for a void return type (<ph id=\"ph2\">`Sub`</ph> procedure in Visual Basic).","source":"The return type of the method, or `null` for a void return type (`Sub` procedure in Visual Basic)."}],"pos":[35210,35309],"yaml":true},{"content":"The `SignatureHelper` object for a method.","nodes":[{"pos":[0,42],"content":"The <ph id=\"ph1\">`SignatureHelper`</ph> object for a method.","source":"The `SignatureHelper` object for a method."}],"pos":[35391,35434],"yaml":true},{"content":"<code>unmanagedCallConv</code> is an unknown unmanaged calling convention.","nodes":[{"pos":[0,74],"content":"<ph id=\"ph1\">&lt;code&gt;unmanagedCallConv&lt;/code&gt;</ph> is an unknown unmanaged calling convention.","source":"<code>unmanagedCallConv</code> is an unknown unmanaged calling convention."}],"pos":[35613,35688],"yaml":true},{"content":"Returns a signature helper for a method given the method's calling convention and return type.","nodes":[{"pos":[0,94],"content":"Returns a signature helper for a method given the method's calling convention and return type.","nodes":[{"content":"Returns a signature helper for a method given the method's calling convention and return type.","pos":[0,94]}]}],"pos":[37025,37120],"yaml":true},{"content":"The calling convention of the method.","nodes":[{"pos":[0,37],"content":"The calling convention of the method.","nodes":[{"content":"The calling convention of the method.","pos":[0,37]}]}],"pos":[37402,37440],"yaml":true},{"content":"The return type of the method, or `null` for a void return type (`Sub` procedure in Visual Basic).","nodes":[{"pos":[0,98],"content":"The return type of the method, or <ph id=\"ph1\">`null`</ph> for a void return type (<ph id=\"ph2\">`Sub`</ph> procedure in Visual Basic).","source":"The return type of the method, or `null` for a void return type (`Sub` procedure in Visual Basic)."}],"pos":[37504,37603],"yaml":true},{"content":"The `SignatureHelper` object for a method.","nodes":[{"pos":[0,42],"content":"The <ph id=\"ph1\">`SignatureHelper`</ph> object for a method.","source":"The `SignatureHelper` object for a method."}],"pos":[37685,37728],"yaml":true},{"content":"Returns a signature helper for a method given the method's module, calling convention, and return type.","nodes":[{"pos":[0,103],"content":"Returns a signature helper for a method given the method's module, calling convention, and return type.","nodes":[{"content":"Returns a signature helper for a method given the method's module, calling convention, and return type.","pos":[0,103]}]}],"pos":[39388,39492],"yaml":true},{"content":"The <xref href=\"System.Reflection.Emit.ModuleBuilder\"></xref> that contains the method for which the `SignatureHelper` is requested.","nodes":[{"pos":[0,132],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.ModuleBuilder\"&gt;&lt;/xref&gt;</ph> that contains the method for which the <ph id=\"ph2\">`SignatureHelper`</ph> is requested.","source":"The <xref href=\"System.Reflection.Emit.ModuleBuilder\"></xref> that contains the method for which the `SignatureHelper` is requested."}],"pos":[39778,39911],"yaml":true},{"content":"The calling convention of the method.","nodes":[{"pos":[0,37],"content":"The calling convention of the method.","nodes":[{"content":"The calling convention of the method.","pos":[0,37]}]}],"pos":[40007,40045],"yaml":true},{"content":"The return type of the method, or `null` for a void return type (`Sub` procedure in Visual Basic).","nodes":[{"pos":[0,98],"content":"The return type of the method, or <ph id=\"ph1\">`null`</ph> for a void return type (<ph id=\"ph2\">`Sub`</ph> procedure in Visual Basic).","source":"The return type of the method, or `null` for a void return type (`Sub` procedure in Visual Basic)."}],"pos":[40109,40208],"yaml":true},{"content":"The `SignatureHelper` object for a method.","nodes":[{"pos":[0,42],"content":"The <ph id=\"ph1\">`SignatureHelper`</ph> object for a method.","source":"The `SignatureHelper` object for a method."}],"pos":[40290,40333],"yaml":true},{"content":"<code>mod</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;mod&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>mod</code> is `null`."}],"pos":[40520,40548],"yaml":true},{"content":"<code>mod</code> is not a <xref href=\"System.Reflection.Emit.ModuleBuilder\"></xref>.","nodes":[{"pos":[0,84],"content":"<ph id=\"ph1\">&lt;code&gt;mod&lt;/code&gt;</ph> is not a <ph id=\"ph2\">&lt;xref href=\"System.Reflection.Emit.ModuleBuilder\"&gt;&lt;/xref&gt;</ph>.","source":"<code>mod</code> is not a <xref href=\"System.Reflection.Emit.ModuleBuilder\"></xref>."}],"pos":[40642,40727],"yaml":true},{"content":"Returns a signature helper for a property, given the dynamic module that contains the property, the property type, and the property arguments.","nodes":[{"pos":[0,142],"content":"Returns a signature helper for a property, given the dynamic module that contains the property, the property type, and the property arguments.","nodes":[{"content":"Returns a signature helper for a property, given the dynamic module that contains the property, the property type, and the property arguments.","pos":[0,142]}]}],"pos":[42206,42349],"yaml":true},{"content":"To create a signature helper for a property with optional or required custom modifiers, use the <xref:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper%28System.Reflection.Module%2CSystem.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%5B%5D%2CSystem.Type%5B%5D%5B%5D%29> method overload.","nodes":[{"pos":[0,335],"content":"To create a signature helper for a property with optional or required custom modifiers, use the <xref:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper%28System.Reflection.Module%2CSystem.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%5B%5D%2CSystem.Type%5B%5D%5B%5D%29> method overload.","nodes":[{"content":"To create a signature helper for a property with optional or required custom modifiers, use the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper%28System.Reflection.Module%2CSystem.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%5B%5D%2CSystem.Type%5B%5D%5B%5D%29&gt;</ph> method overload.","pos":[0,335],"source":"To create a signature helper for a property with optional or required custom modifiers, use the <xref:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper%28System.Reflection.Module%2CSystem.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%5B%5D%2CSystem.Type%5B%5D%5B%5D%29> method overload."}]}],"pos":[42360,42696],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Reflection.Emit.ModuleBuilder\"></xref> that contains the property for which the <xref href=\"System.Reflection.Emit.SignatureHelper\"></xref> is requested.","nodes":[{"pos":[0,176],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.ModuleBuilder\"&gt;&lt;/xref&gt;</ph> that contains the property for which the <ph id=\"ph2\">&lt;xref href=\"System.Reflection.Emit.SignatureHelper\"&gt;&lt;/xref&gt;</ph> is requested.","source":"The <xref href=\"System.Reflection.Emit.ModuleBuilder\"></xref> that contains the property for which the <xref href=\"System.Reflection.Emit.SignatureHelper\"></xref> is requested."}],"pos":[42951,43128],"yaml":true},{"content":"The property type.","nodes":[{"pos":[0,18],"content":"The property type.","nodes":[{"content":"The property type.","pos":[0,18]}]}],"pos":[43192,43211],"yaml":true},{"content":"The argument types, or `null` if the property has no arguments.","nodes":[{"pos":[0,63],"content":"The argument types, or <ph id=\"ph1\">`null`</ph> if the property has no arguments.","source":"The argument types, or `null` if the property has no arguments."}],"pos":[43281,43345],"yaml":true},{"content":"A <xref href=\"System.Reflection.Emit.SignatureHelper\"></xref> object for a property.","nodes":[{"pos":[0,84],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.SignatureHelper\"&gt;&lt;/xref&gt;</ph> object for a property.","source":"A <xref href=\"System.Reflection.Emit.SignatureHelper\"></xref> object for a property."}],"pos":[43427,43512],"yaml":true},{"content":"<code>mod</code> is `null`.  \n  \n -or-  \n  \n An element of <code>parameterTypes</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;mod&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>mod</code> is `null`."},{"pos":[34,38],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[45,97],"content":"An element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">parameterTypes</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>.","source":"An element of <code>parameterTypes</code> is `null`."}],"pos":[43701,43805],"yaml":true},{"content":"<code>mod</code> is not a <xref href=\"System.Reflection.Emit.ModuleBuilder\"></xref>.","nodes":[{"pos":[0,84],"content":"<ph id=\"ph1\">&lt;code&gt;mod&lt;/code&gt;</ph> is not a <ph id=\"ph2\">&lt;xref href=\"System.Reflection.Emit.ModuleBuilder\"&gt;&lt;/xref&gt;</ph>.","source":"<code>mod</code> is not a <xref href=\"System.Reflection.Emit.ModuleBuilder\"></xref>."}],"pos":[43899,43984],"yaml":true},{"content":"Returns a signature helper for a property, given the dynamic module that contains the property, the property type, the property arguments, and custom modifiers for the return type and arguments.","nodes":[{"pos":[0,194],"content":"Returns a signature helper for a property, given the dynamic module that contains the property, the property type, the property arguments, and custom modifiers for the return type and arguments.","nodes":[{"content":"Returns a signature helper for a property, given the dynamic module that contains the property, the property type, the property arguments, and custom modifiers for the return type and arguments.","pos":[0,194]}]}],"pos":[45751,45946],"yaml":true},{"content":"See the <xref:System.Runtime.CompilerServices> namespace for classes that represent custom modifiers.  \n  \n If a property has no custom modifiers, use the <xref:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper%28System.Reflection.Module%2CSystem.Type%2CSystem.Type%5B%5D%29> method overload.","nodes":[{"pos":[0,101],"content":"See the <xref:System.Runtime.CompilerServices> namespace for classes that represent custom modifiers.","nodes":[{"content":"See the <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices&gt;</ph> namespace for classes that represent custom modifiers.","pos":[0,101],"source":"See the <xref:System.Runtime.CompilerServices> namespace for classes that represent custom modifiers."}]},{"pos":[108,302],"content":"If a property has no custom modifiers, use the <xref:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper%28System.Reflection.Module%2CSystem.Type%2CSystem.Type%5B%5D%29> method overload.","nodes":[{"content":"If a property has no custom modifiers, use the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper%28System.Reflection.Module%2CSystem.Type%2CSystem.Type%5B%5D%29&gt;</ph> method overload.","pos":[0,194],"source":"If a property has no custom modifiers, use the <xref:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper%28System.Reflection.Module%2CSystem.Type%2CSystem.Type%5B%5D%29> method overload."}]}],"pos":[45957,46264],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Reflection.Emit.ModuleBuilder\"></xref> that contains the property for which the <xref href=\"System.Reflection.Emit.SignatureHelper\"></xref> is requested.","nodes":[{"pos":[0,176],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.ModuleBuilder\"&gt;&lt;/xref&gt;</ph> that contains the property for which the <ph id=\"ph2\">&lt;xref href=\"System.Reflection.Emit.SignatureHelper\"&gt;&lt;/xref&gt;</ph> is requested.","source":"The <xref href=\"System.Reflection.Emit.ModuleBuilder\"></xref> that contains the property for which the <xref href=\"System.Reflection.Emit.SignatureHelper\"></xref> is requested."}],"pos":[46697,46874],"yaml":true},{"content":"The property type.","nodes":[{"pos":[0,18],"content":"The property type.","nodes":[{"content":"The property type.","pos":[0,18]}]}],"pos":[46938,46957],"yaml":true},{"content":"An array of types representing the required custom modifiers for the return type, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref> or <xref href=\"System.Runtime.CompilerServices.IsBoxed\"></xref>. If the return type has no required custom modifiers, specify `null`.","nodes":[{"pos":[0,284],"content":"An array of types representing the required custom modifiers for the return type, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref> or <xref href=\"System.Runtime.CompilerServices.IsBoxed\"></xref>. If the return type has no required custom modifiers, specify `null`.","nodes":[{"content":"An array of types representing the required custom modifiers for the return type, such as <ph id=\"ph1\">&lt;xref href=\"System.Runtime.CompilerServices.IsConst\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph2\">&lt;xref href=\"System.Runtime.CompilerServices.IsBoxed\"&gt;&lt;/xref&gt;</ph>.","pos":[0,215],"source":"An array of types representing the required custom modifiers for the return type, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref> or <xref href=\"System.Runtime.CompilerServices.IsBoxed\"></xref>."},{"content":"If the return type has no required custom modifiers, specify <ph id=\"ph1\">`null`</ph>.","pos":[216,284],"source":" If the return type has no required custom modifiers, specify `null`."}]}],"pos":[47046,47331],"yaml":true},{"content":"An array of types representing the optional custom modifiers for the return type, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref> or <xref href=\"System.Runtime.CompilerServices.IsBoxed\"></xref>. If the return type has no optional custom modifiers, specify `null`.","nodes":[{"pos":[0,284],"content":"An array of types representing the optional custom modifiers for the return type, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref> or <xref href=\"System.Runtime.CompilerServices.IsBoxed\"></xref>. If the return type has no optional custom modifiers, specify `null`.","nodes":[{"content":"An array of types representing the optional custom modifiers for the return type, such as <ph id=\"ph1\">&lt;xref href=\"System.Runtime.CompilerServices.IsConst\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph2\">&lt;xref href=\"System.Runtime.CompilerServices.IsBoxed\"&gt;&lt;/xref&gt;</ph>.","pos":[0,215],"source":"An array of types representing the optional custom modifiers for the return type, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref> or <xref href=\"System.Runtime.CompilerServices.IsBoxed\"></xref>."},{"content":"If the return type has no optional custom modifiers, specify <ph id=\"ph1\">`null`</ph>.","pos":[216,284],"source":" If the return type has no optional custom modifiers, specify `null`."}]}],"pos":[47420,47705],"yaml":true},{"content":"The types of the property's arguments, or `null` if the property has no arguments.","nodes":[{"pos":[0,82],"content":"The types of the property's arguments, or <ph id=\"ph1\">`null`</ph> if the property has no arguments.","source":"The types of the property's arguments, or `null` if the property has no arguments."}],"pos":[47775,47858],"yaml":true},{"content":"An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding argument of the property. If a particular argument has no required custom modifiers, specify `null` instead of an array of types. If the property has no arguments, or if none of the arguments have required custom modifiers, specify `null` instead of an array of arrays.","nodes":[{"pos":[0,381],"content":"An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding argument of the property. If a particular argument has no required custom modifiers, specify `null` instead of an array of types. If the property has no arguments, or if none of the arguments have required custom modifiers, specify `null` instead of an array of arrays.","nodes":[{"content":"An array of arrays of types.","pos":[0,28]},{"content":"Each array of types represents the required custom modifiers for the corresponding argument of the property.","pos":[29,137]},{"content":"If a particular argument has no required custom modifiers, specify <ph id=\"ph1\">`null`</ph> instead of an array of types.","pos":[138,241],"source":" If a particular argument has no required custom modifiers, specify `null` instead of an array of types."},{"content":"If the property has no arguments, or if none of the arguments have required custom modifiers, specify <ph id=\"ph1\">`null`</ph> instead of an array of arrays.","pos":[242,381],"source":" If the property has no arguments, or if none of the arguments have required custom modifiers, specify `null` instead of an array of arrays."}]}],"pos":[47952,48334],"yaml":true},{"content":"An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding argument of the property. If a particular argument has no optional custom modifiers, specify `null` instead of an array of types. If the property has no arguments, or if none of the arguments have optional custom modifiers, specify `null` instead of an array of arrays.","nodes":[{"pos":[0,381],"content":"An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding argument of the property. If a particular argument has no optional custom modifiers, specify `null` instead of an array of types. If the property has no arguments, or if none of the arguments have optional custom modifiers, specify `null` instead of an array of arrays.","nodes":[{"content":"An array of arrays of types.","pos":[0,28]},{"content":"Each array of types represents the optional custom modifiers for the corresponding argument of the property.","pos":[29,137]},{"content":"If a particular argument has no optional custom modifiers, specify <ph id=\"ph1\">`null`</ph> instead of an array of types.","pos":[138,241],"source":" If a particular argument has no optional custom modifiers, specify `null` instead of an array of types."},{"content":"If the property has no arguments, or if none of the arguments have optional custom modifiers, specify <ph id=\"ph1\">`null`</ph> instead of an array of arrays.","pos":[242,381],"source":" If the property has no arguments, or if none of the arguments have optional custom modifiers, specify `null` instead of an array of arrays."}]}],"pos":[48428,48810],"yaml":true},{"content":"A <xref href=\"System.Reflection.Emit.SignatureHelper\"></xref> object for a property.","nodes":[{"pos":[0,84],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.SignatureHelper\"&gt;&lt;/xref&gt;</ph> object for a property.","source":"A <xref href=\"System.Reflection.Emit.SignatureHelper\"></xref> object for a property."}],"pos":[48892,48977],"yaml":true},{"content":"<code>mod</code> is `null`.  \n  \n -or-  \n  \n An element of <code>parameterTypes</code> is `null`.  \n  \n -or-  \n  \n One of the specified custom modifiers is `null`. (However, `null` can be specified for the array of custom modifiers for any argument.)","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;mod&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>mod</code> is `null`."},{"pos":[34,38],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[45,97],"content":"An element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">parameterTypes</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>.","source":"An element of <code>parameterTypes</code> is `null`."},{"pos":[104,108],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[115,250],"content":"One of the specified custom modifiers is `null`. (However, `null` can be specified for the array of custom modifiers for any argument.)","nodes":[{"content":"One of the specified custom modifiers is <ph id=\"ph1\">`null`</ph>.","pos":[0,48],"source":"One of the specified custom modifiers is `null`."},{"content":"(However, <ph id=\"ph1\">`null`</ph> can be specified for the array of custom modifiers for any argument.)","pos":[49,135],"source":" (However, `null` can be specified for the array of custom modifiers for any argument.)"}]}],"pos":[49166,49427],"yaml":true},{"content":"The signature has already been finished.  \n  \n -or-  \n  \n <code>mod</code> is not a <xref href=\"System.Reflection.Emit.ModuleBuilder\"></xref>.  \n  \n -or-  \n  \n One of the specified custom modifiers is an array type.  \n  \n -or-  \n  \n One of the specified custom modifiers is an open generic type. That is, the <xref href=\"System.Type.ContainsGenericParameters\"></xref> property is `true` for the custom modifier.  \n  \n -or-  \n  \n The size of <code>requiredParameterTypeCustomModifiers</code> or <code>optionalParameterTypeCustomModifiers</code> does not equal the size of <code>parameterTypes</code>.","nodes":[{"pos":[0,40],"content":"The signature has already been finished.","nodes":[{"content":"The signature has already been finished.","pos":[0,40]}]},{"pos":[47,51],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[58,142],"content":"<ph id=\"ph1\">&lt;code&gt;mod&lt;/code&gt;</ph> is not a <ph id=\"ph2\">&lt;xref href=\"System.Reflection.Emit.ModuleBuilder\"&gt;&lt;/xref&gt;</ph>.","source":"<code>mod</code> is not a <xref href=\"System.Reflection.Emit.ModuleBuilder\"></xref>."},{"pos":[149,153],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[160,215],"content":"One of the specified custom modifiers is an array type.","nodes":[{"content":"One of the specified custom modifiers is an array type.","pos":[0,55]}]},{"pos":[222,226],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[233,411],"content":"One of the specified custom modifiers is an open generic type. That is, the <xref href=\"System.Type.ContainsGenericParameters\"></xref> property is `true` for the custom modifier.","nodes":[{"content":"One of the specified custom modifiers is an open generic type.","pos":[0,62]},{"content":"That is, the <ph id=\"ph1\">&lt;xref href=\"System.Type.ContainsGenericParameters\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph2\">`true`</ph> for the custom modifier.","pos":[63,178],"source":" That is, the <xref href=\"System.Type.ContainsGenericParameters\"></xref> property is `true` for the custom modifier."}]},{"pos":[418,422],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[429,599],"content":"The size of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">requiredParameterTypeCustomModifiers</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">optionalParameterTypeCustomModifiers</ph><ept id=\"p2\">&lt;/code&gt;</ept> does not equal the size of <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">parameterTypes</ph><ept id=\"p3\">&lt;/code&gt;</ept>.","source":"The size of <code>requiredParameterTypeCustomModifiers</code> or <code>optionalParameterTypeCustomModifiers</code> does not equal the size of <code>parameterTypes</code>."}],"pos":[49521,50143],"yaml":true},{"content":"Returns a signature helper for a property, given the dynamic module that contains the property, the calling convention, the property type, the property arguments, and custom modifiers for the return type and arguments.","nodes":[{"pos":[0,218],"content":"Returns a signature helper for a property, given the dynamic module that contains the property, the calling convention, the property type, the property arguments, and custom modifiers for the return type and arguments.","nodes":[{"content":"Returns a signature helper for a property, given the dynamic module that contains the property, the calling convention, the property type, the property arguments, and custom modifiers for the return type and arguments.","pos":[0,218]}]}],"pos":[52081,52300],"yaml":true},{"content":"See the <xref:System.Runtime.CompilerServices> namespace for classes that represent custom modifiers.  \n  \n If a property has no custom modifiers, use the <xref:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper%28System.Reflection.Module%2CSystem.Type%2CSystem.Type%5B%5D%29> method overload.  \n  \n> [!NOTE]\n>  This method overload is introduced in the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.","nodes":[{"pos":[0,101],"content":"See the <xref:System.Runtime.CompilerServices> namespace for classes that represent custom modifiers.","nodes":[{"content":"See the <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices&gt;</ph> namespace for classes that represent custom modifiers.","pos":[0,101],"source":"See the <xref:System.Runtime.CompilerServices> namespace for classes that represent custom modifiers."}]},{"pos":[108,302],"content":"If a property has no custom modifiers, use the <xref:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper%28System.Reflection.Module%2CSystem.Type%2CSystem.Type%5B%5D%29> method overload.","nodes":[{"content":"If a property has no custom modifiers, use the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper%28System.Reflection.Module%2CSystem.Type%2CSystem.Type%5B%5D%29&gt;</ph> method overload.","pos":[0,194],"source":"If a property has no custom modifiers, use the <xref:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper%28System.Reflection.Module%2CSystem.Type%2CSystem.Type%5B%5D%29> method overload."}]},{"pos":[310,428],"content":"[!NOTE]\n This method overload is introduced in the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.","leadings":["","> "],"nodes":[{"content":"This method overload is introduced in the <ph id=\"ph1\">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.","pos":[9,116],"source":" This method overload is introduced in the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later."}]}],"pos":[52311,52747],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Reflection.Emit.ModuleBuilder\"></xref> that contains the property for which the <xref href=\"System.Reflection.Emit.SignatureHelper\"></xref> is requested.","nodes":[{"pos":[0,176],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.ModuleBuilder\"&gt;&lt;/xref&gt;</ph> that contains the property for which the <ph id=\"ph2\">&lt;xref href=\"System.Reflection.Emit.SignatureHelper\"&gt;&lt;/xref&gt;</ph> is requested.","source":"The <xref href=\"System.Reflection.Emit.ModuleBuilder\"></xref> that contains the property for which the <xref href=\"System.Reflection.Emit.SignatureHelper\"></xref> is requested."}],"pos":[53236,53413],"yaml":true},{"content":"The calling convention of the property accessors.","nodes":[{"pos":[0,49],"content":"The calling convention of the property accessors.","nodes":[{"content":"The calling convention of the property accessors.","pos":[0,49]}]}],"pos":[53509,53559],"yaml":true},{"content":"The property type.","nodes":[{"pos":[0,18],"content":"The property type.","nodes":[{"content":"The property type.","pos":[0,18]}]}],"pos":[53623,53642],"yaml":true},{"content":"An array of types representing the required custom modifiers for the return type, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref> or <xref href=\"System.Runtime.CompilerServices.IsBoxed\"></xref>. If the return type has no required custom modifiers, specify `null`.","nodes":[{"pos":[0,284],"content":"An array of types representing the required custom modifiers for the return type, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref> or <xref href=\"System.Runtime.CompilerServices.IsBoxed\"></xref>. If the return type has no required custom modifiers, specify `null`.","nodes":[{"content":"An array of types representing the required custom modifiers for the return type, such as <ph id=\"ph1\">&lt;xref href=\"System.Runtime.CompilerServices.IsConst\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph2\">&lt;xref href=\"System.Runtime.CompilerServices.IsBoxed\"&gt;&lt;/xref&gt;</ph>.","pos":[0,215],"source":"An array of types representing the required custom modifiers for the return type, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref> or <xref href=\"System.Runtime.CompilerServices.IsBoxed\"></xref>."},{"content":"If the return type has no required custom modifiers, specify <ph id=\"ph1\">`null`</ph>.","pos":[216,284],"source":" If the return type has no required custom modifiers, specify `null`."}]}],"pos":[53731,54016],"yaml":true},{"content":"An array of types representing the optional custom modifiers for the return type, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref> or <xref href=\"System.Runtime.CompilerServices.IsBoxed\"></xref>. If the return type has no optional custom modifiers, specify `null`.","nodes":[{"pos":[0,284],"content":"An array of types representing the optional custom modifiers for the return type, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref> or <xref href=\"System.Runtime.CompilerServices.IsBoxed\"></xref>. If the return type has no optional custom modifiers, specify `null`.","nodes":[{"content":"An array of types representing the optional custom modifiers for the return type, such as <ph id=\"ph1\">&lt;xref href=\"System.Runtime.CompilerServices.IsConst\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph2\">&lt;xref href=\"System.Runtime.CompilerServices.IsBoxed\"&gt;&lt;/xref&gt;</ph>.","pos":[0,215],"source":"An array of types representing the optional custom modifiers for the return type, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref> or <xref href=\"System.Runtime.CompilerServices.IsBoxed\"></xref>."},{"content":"If the return type has no optional custom modifiers, specify <ph id=\"ph1\">`null`</ph>.","pos":[216,284],"source":" If the return type has no optional custom modifiers, specify `null`."}]}],"pos":[54105,54390],"yaml":true},{"content":"The types of the property's arguments, or `null` if the property has no arguments.","nodes":[{"pos":[0,82],"content":"The types of the property's arguments, or <ph id=\"ph1\">`null`</ph> if the property has no arguments.","source":"The types of the property's arguments, or `null` if the property has no arguments."}],"pos":[54460,54543],"yaml":true},{"content":"An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding argument of the property. If a particular argument has no required custom modifiers, specify `null` instead of an array of types. If the property has no arguments, or if none of the arguments have required custom modifiers, specify `null` instead of an array of arrays.","nodes":[{"pos":[0,381],"content":"An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding argument of the property. If a particular argument has no required custom modifiers, specify `null` instead of an array of types. If the property has no arguments, or if none of the arguments have required custom modifiers, specify `null` instead of an array of arrays.","nodes":[{"content":"An array of arrays of types.","pos":[0,28]},{"content":"Each array of types represents the required custom modifiers for the corresponding argument of the property.","pos":[29,137]},{"content":"If a particular argument has no required custom modifiers, specify <ph id=\"ph1\">`null`</ph> instead of an array of types.","pos":[138,241],"source":" If a particular argument has no required custom modifiers, specify `null` instead of an array of types."},{"content":"If the property has no arguments, or if none of the arguments have required custom modifiers, specify <ph id=\"ph1\">`null`</ph> instead of an array of arrays.","pos":[242,381],"source":" If the property has no arguments, or if none of the arguments have required custom modifiers, specify `null` instead of an array of arrays."}]}],"pos":[54637,55019],"yaml":true},{"content":"An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding argument of the property. If a particular argument has no optional custom modifiers, specify `null` instead of an array of types. If the property has no arguments, or if none of the arguments have optional custom modifiers, specify `null` instead of an array of arrays.","nodes":[{"pos":[0,381],"content":"An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding argument of the property. If a particular argument has no optional custom modifiers, specify `null` instead of an array of types. If the property has no arguments, or if none of the arguments have optional custom modifiers, specify `null` instead of an array of arrays.","nodes":[{"content":"An array of arrays of types.","pos":[0,28]},{"content":"Each array of types represents the optional custom modifiers for the corresponding argument of the property.","pos":[29,137]},{"content":"If a particular argument has no optional custom modifiers, specify <ph id=\"ph1\">`null`</ph> instead of an array of types.","pos":[138,241],"source":" If a particular argument has no optional custom modifiers, specify `null` instead of an array of types."},{"content":"If the property has no arguments, or if none of the arguments have optional custom modifiers, specify <ph id=\"ph1\">`null`</ph> instead of an array of arrays.","pos":[242,381],"source":" If the property has no arguments, or if none of the arguments have optional custom modifiers, specify `null` instead of an array of arrays."}]}],"pos":[55113,55495],"yaml":true},{"content":"A <xref href=\"System.Reflection.Emit.SignatureHelper\"></xref> object for a property.","nodes":[{"pos":[0,84],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.SignatureHelper\"&gt;&lt;/xref&gt;</ph> object for a property.","source":"A <xref href=\"System.Reflection.Emit.SignatureHelper\"></xref> object for a property."}],"pos":[55577,55662],"yaml":true},{"content":"<code>mod</code> is `null`.  \n  \n -or-  \n  \n An element of <code>parameterTypes</code> is `null`.  \n  \n -or-  \n  \n One of the specified custom modifiers is `null`. (However, `null` can be specified for the array of custom modifiers for any argument.)","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;mod&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>mod</code> is `null`."},{"pos":[34,38],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[45,97],"content":"An element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">parameterTypes</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>.","source":"An element of <code>parameterTypes</code> is `null`."},{"pos":[104,108],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[115,250],"content":"One of the specified custom modifiers is `null`. (However, `null` can be specified for the array of custom modifiers for any argument.)","nodes":[{"content":"One of the specified custom modifiers is <ph id=\"ph1\">`null`</ph>.","pos":[0,48],"source":"One of the specified custom modifiers is `null`."},{"content":"(However, <ph id=\"ph1\">`null`</ph> can be specified for the array of custom modifiers for any argument.)","pos":[49,135],"source":" (However, `null` can be specified for the array of custom modifiers for any argument.)"}]}],"pos":[55851,56112],"yaml":true},{"content":"The signature has already been finished.  \n  \n -or-  \n  \n <code>mod</code> is not a <xref href=\"System.Reflection.Emit.ModuleBuilder\"></xref>.  \n  \n -or-  \n  \n One of the specified custom modifiers is an array type.  \n  \n -or-  \n  \n One of the specified custom modifiers is an open generic type. That is, the <xref href=\"System.Type.ContainsGenericParameters\"></xref> property is `true` for the custom modifier.  \n  \n -or-  \n  \n The size of <code>requiredParameterTypeCustomModifiers</code> or <code>optionalParameterTypeCustomModifiers</code> does not equal the size of <code>parameterTypes</code>.","nodes":[{"pos":[0,40],"content":"The signature has already been finished.","nodes":[{"content":"The signature has already been finished.","pos":[0,40]}]},{"pos":[47,51],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[58,142],"content":"<ph id=\"ph1\">&lt;code&gt;mod&lt;/code&gt;</ph> is not a <ph id=\"ph2\">&lt;xref href=\"System.Reflection.Emit.ModuleBuilder\"&gt;&lt;/xref&gt;</ph>.","source":"<code>mod</code> is not a <xref href=\"System.Reflection.Emit.ModuleBuilder\"></xref>."},{"pos":[149,153],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[160,215],"content":"One of the specified custom modifiers is an array type.","nodes":[{"content":"One of the specified custom modifiers is an array type.","pos":[0,55]}]},{"pos":[222,226],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[233,411],"content":"One of the specified custom modifiers is an open generic type. That is, the <xref href=\"System.Type.ContainsGenericParameters\"></xref> property is `true` for the custom modifier.","nodes":[{"content":"One of the specified custom modifiers is an open generic type.","pos":[0,62]},{"content":"That is, the <ph id=\"ph1\">&lt;xref href=\"System.Type.ContainsGenericParameters\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph2\">`true`</ph> for the custom modifier.","pos":[63,178],"source":" That is, the <xref href=\"System.Type.ContainsGenericParameters\"></xref> property is `true` for the custom modifier."}]},{"pos":[418,422],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[429,599],"content":"The size of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">requiredParameterTypeCustomModifiers</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">optionalParameterTypeCustomModifiers</ph><ept id=\"p2\">&lt;/code&gt;</ept> does not equal the size of <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">parameterTypes</ph><ept id=\"p3\">&lt;/code&gt;</ept>.","source":"The size of <code>requiredParameterTypeCustomModifiers</code> or <code>optionalParameterTypeCustomModifiers</code> does not equal the size of <code>parameterTypes</code>."}],"pos":[56206,56828],"yaml":true},{"content":"Adds the end token to the signature and marks the signature as finished, so no further tokens can be added.","nodes":[{"pos":[0,107],"content":"Adds the end token to the signature and marks the signature as finished, so no further tokens can be added.","nodes":[{"content":"Adds the end token to the signature and marks the signature as finished, so no further tokens can be added.","pos":[0,107]}]}],"pos":[58043,58151],"yaml":true},{"content":"Returns a byte array made up of the full signature.","nodes":[{"pos":[0,51],"content":"Returns a byte array made up of the full signature.","nodes":[{"content":"Returns a byte array made up of the full signature.","pos":[0,51]}]}],"pos":[58281,58333],"yaml":true},{"content":"Returns a string representing the signature arguments.","nodes":[{"pos":[0,54],"content":"Returns a string representing the signature arguments.","nodes":[{"content":"Returns a string representing the signature arguments.","pos":[0,54]}]}],"pos":[59606,59661],"yaml":true},{"content":"Returns a string representing the arguments of this signature.","nodes":[{"pos":[0,62],"content":"Returns a string representing the arguments of this signature.","nodes":[{"content":"Returns a string representing the arguments of this signature.","pos":[0,62]}]}],"pos":[59796,59859],"yaml":true},{"content":"Maps a set of names to a corresponding set of dispatch identifiers.","nodes":[{"pos":[0,67],"content":"Maps a set of names to a corresponding set of dispatch identifiers.","nodes":[{"content":"Maps a set of names to a corresponding set of dispatch identifiers.","pos":[0,67]}]}],"pos":[61605,61673],"yaml":true},{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.","nodes":[{"pos":[0,186],"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.","nodes":[{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::GetIDsOfNames`</ph>, see the MSDN Library.","pos":[110,186],"source":" For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library."}]}],"pos":[61684,61871],"yaml":true,"extradata":"MT"},{"content":"Reserved for future use. Must be IID_NULL.","nodes":[{"pos":[0,42],"content":"Reserved for future use. Must be IID_NULL.","nodes":[{"content":"Reserved for future use. Must be IID_NULL.","pos":[0,42],"nodes":[{"content":"Reserved for future use.","pos":[0,24]},{"content":"Must be IID_NULL.","pos":[25,42]}]}]}],"pos":[62080,62123],"yaml":true},{"content":"Passed-in array of names to be mapped.","nodes":[{"pos":[0,38],"content":"Passed-in array of names to be mapped.","nodes":[{"content":"Passed-in array of names to be mapped.","pos":[0,38]}]}],"pos":[62188,62227],"yaml":true},{"content":"Count of the names to be mapped.","nodes":[{"pos":[0,32],"content":"Count of the names to be mapped.","nodes":[{"content":"Count of the names to be mapped.","pos":[0,32]}]}],"pos":[62289,62322],"yaml":true},{"content":"The locale context in which to interpret the names.","nodes":[{"pos":[0,51],"content":"The locale context in which to interpret the names.","nodes":[{"content":"The locale context in which to interpret the names.","pos":[0,51]}]}],"pos":[62382,62434],"yaml":true},{"content":"Caller-allocated array which receives the IDs corresponding to the names.","nodes":[{"pos":[0,73],"content":"Caller-allocated array which receives the IDs corresponding to the names.","nodes":[{"content":"Caller-allocated array which receives the IDs corresponding to the names.","pos":[0,73]}]}],"pos":[62498,62572],"yaml":true},{"content":"Late-bound access using the COM <code>IDispatch</code> interface is not supported.","nodes":[{"pos":[0,82],"content":"Late-bound access using the COM <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IDispatch</ph><ept id=\"p1\">&lt;/code&gt;</ept> interface is not supported.","source":"Late-bound access using the COM <code>IDispatch</code> interface is not supported."}],"pos":[62806,62889],"yaml":true},{"content":"Retrieves the type information for an object, which can then be used to get the type information for an interface.","nodes":[{"pos":[0,114],"content":"Retrieves the type information for an object, which can then be used to get the type information for an interface.","nodes":[{"content":"Retrieves the type information for an object, which can then be used to get the type information for an interface.","pos":[0,114]}]}],"pos":[64326,64441],"yaml":true},{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.","nodes":[{"pos":[0,184],"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.","nodes":[{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::GetTypeInfo`</ph>, see the MSDN Library.","pos":[110,184],"source":" For more information about `IDispatch::GetTypeInfo`, see the MSDN Library."}]}],"pos":[64452,64637],"yaml":true,"extradata":"MT"},{"content":"The type information to return.","nodes":[{"pos":[0,31],"content":"The type information to return.","nodes":[{"content":"The type information to return.","pos":[0,31]}]}],"pos":[64814,64846],"yaml":true},{"content":"The locale identifier for the type information.","nodes":[{"pos":[0,47],"content":"The locale identifier for the type information.","nodes":[{"content":"The locale identifier for the type information.","pos":[0,47]}]}],"pos":[64906,64954],"yaml":true},{"content":"Receives a pointer to the requested type information object.","nodes":[{"pos":[0,60],"content":"Receives a pointer to the requested type information object.","nodes":[{"content":"Receives a pointer to the requested type information object.","pos":[0,60]}]}],"pos":[65017,65078],"yaml":true},{"content":"Late-bound access using the COM <code>IDispatch</code> interface is not supported.","nodes":[{"pos":[0,82],"content":"Late-bound access using the COM <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IDispatch</ph><ept id=\"p1\">&lt;/code&gt;</ept> interface is not supported.","source":"Late-bound access using the COM <code>IDispatch</code> interface is not supported."}],"pos":[65310,65393],"yaml":true},{"content":"Retrieves the number of type information interfaces that an object provides (either 0 or 1).","nodes":[{"pos":[0,92],"content":"Retrieves the number of type information interfaces that an object provides (either 0 or 1).","nodes":[{"content":"Retrieves the number of type information interfaces that an object provides (either 0 or 1).","pos":[0,92]}]}],"pos":[66731,66824],"yaml":true},{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.","nodes":[{"pos":[0,189],"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.","nodes":[{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::GetTypeInfoCount`</ph>, see the MSDN Library.","pos":[110,189],"source":" For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library."}]}],"pos":[66835,67025],"yaml":true,"extradata":"MT"},{"content":"Points to a location that receives the number of type information interfaces provided by the object.","nodes":[{"pos":[0,100],"content":"Points to a location that receives the number of type information interfaces provided by the object.","nodes":[{"content":"Points to a location that receives the number of type information interfaces provided by the object.","pos":[0,100]}]}],"pos":[67186,67287],"yaml":true},{"content":"Late-bound access using the COM <code>IDispatch</code> interface is not supported.","nodes":[{"pos":[0,82],"content":"Late-bound access using the COM <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IDispatch</ph><ept id=\"p1\">&lt;/code&gt;</ept> interface is not supported.","source":"Late-bound access using the COM <code>IDispatch</code> interface is not supported."}],"pos":[67524,67607],"yaml":true},{"content":"Provides access to properties and methods exposed by an object.","nodes":[{"pos":[0,63],"content":"Provides access to properties and methods exposed by an object.","nodes":[{"content":"Provides access to properties and methods exposed by an object.","pos":[0,63]}]}],"pos":[69329,69393],"yaml":true},{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.","nodes":[{"pos":[0,179],"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.","nodes":[{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::Invoke`</ph>, see the MSDN Library.","pos":[110,179],"source":" For more information about `IDispatch::Invoke`, see the MSDN Library."}]}],"pos":[69404,69584],"yaml":true,"extradata":"MT"},{"content":"Identifies the member.","nodes":[{"pos":[0,22],"content":"Identifies the member.","nodes":[{"content":"Identifies the member.","pos":[0,22]}]}],"pos":[69856,69879],"yaml":true},{"content":"Reserved for future use. Must be IID_NULL.","nodes":[{"pos":[0,42],"content":"Reserved for future use. Must be IID_NULL.","nodes":[{"content":"Reserved for future use. Must be IID_NULL.","pos":[0,42],"nodes":[{"content":"Reserved for future use.","pos":[0,24]},{"content":"Must be IID_NULL.","pos":[25,42]}]}]}],"pos":[69937,69980],"yaml":true},{"content":"The locale context in which to interpret arguments.","nodes":[{"pos":[0,51],"content":"The locale context in which to interpret arguments.","nodes":[{"content":"The locale context in which to interpret arguments.","pos":[0,51]}]}],"pos":[70040,70092],"yaml":true},{"content":"Flags describing the context of the call.","nodes":[{"pos":[0,41],"content":"Flags describing the context of the call.","nodes":[{"content":"Flags describing the context of the call.","pos":[0,41]}]}],"pos":[70153,70195],"yaml":true},{"content":"Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.","nodes":[{"pos":[0,159],"content":"Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.","nodes":[{"content":"Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.","pos":[0,159]}]}],"pos":[70262,70422],"yaml":true},{"content":"Pointer to the location where the result is to be stored.","nodes":[{"pos":[0,57],"content":"Pointer to the location where the result is to be stored.","nodes":[{"content":"Pointer to the location where the result is to be stored.","pos":[0,57]}]}],"pos":[70488,70546],"yaml":true},{"content":"Pointer to a structure that contains exception information.","nodes":[{"pos":[0,59],"content":"Pointer to a structure that contains exception information.","nodes":[{"content":"Pointer to a structure that contains exception information.","pos":[0,59]}]}],"pos":[70612,70672],"yaml":true},{"content":"The index of the first argument that has an error.","nodes":[{"pos":[0,50],"content":"The index of the first argument that has an error.","nodes":[{"content":"The index of the first argument that has an error.","pos":[0,50]}]}],"pos":[70736,70787],"yaml":true},{"content":"Late-bound access using the COM <code>IDispatch</code> interface is not supported.","nodes":[{"pos":[0,82],"content":"Late-bound access using the COM <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IDispatch</ph><ept id=\"p1\">&lt;/code&gt;</ept> interface is not supported.","source":"Late-bound access using the COM <code>IDispatch</code> interface is not supported."}],"pos":[71014,71097],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Reflection.Emit.SignatureHelper\n  commentId: T:System.Reflection.Emit.SignatureHelper\n  id: SignatureHelper\n  children:\n  - System.Reflection.Emit.SignatureHelper.AddArgument(System.Type)\n  - System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Boolean)\n  - System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Type[],System.Type[])\n  - System.Reflection.Emit.SignatureHelper.AddArguments(System.Type[],System.Type[][],System.Type[][])\n  - System.Reflection.Emit.SignatureHelper.AddSentinel\n  - System.Reflection.Emit.SignatureHelper.Equals(System.Object)\n  - System.Reflection.Emit.SignatureHelper.GetFieldSigHelper(System.Reflection.Module)\n  - System.Reflection.Emit.SignatureHelper.GetHashCode\n  - System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper\n  - System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper(System.Reflection.Module)\n  - System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Type,System.Type[])\n  - System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Runtime.InteropServices.CallingConvention,System.Type)\n  - System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Runtime.InteropServices.CallingConvention,System.Type)\n  - System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.CallingConventions,System.Type)\n  - System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type)\n  - System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[])\n  - System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])\n  - System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])\n  - System.Reflection.Emit.SignatureHelper.GetSignature\n  - System.Reflection.Emit.SignatureHelper.ToString\n  - System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#GetTypeInfoCount(System.UInt32@)\n  - System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  langs:\n  - csharp\n  name: SignatureHelper\n  nameWithType: SignatureHelper\n  fullName: System.Reflection.Emit.SignatureHelper\n  type: Class\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Provides methods for building signatures.\n  remarks: \"Use the <xref:System.Reflection.Emit.SignatureHelper> class to create a signature blob that can be passed to the <xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A> method of the <xref:System.Reflection.Emit.DynamicILInfo> class. A <xref:System.Reflection.Emit.SignatureHelper> object can also be passed to the <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.Emit.SignatureHelper%29?displayProperty=fullName> method overload to insert an instruction and a signature token into a Microsoft intermediate language (MSIL) stream. For information on signature blobs and signature metadata, see the ECMA Partition II Metadata documentation.  \\n  \\n> [!NOTE]\\n>  The ECMA Partition II documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class SignatureHelper : System.Runtime.InteropServices._SignatureHelper\n  inheritance:\n  - System.Object\n  implements:\n  - System.Runtime.InteropServices._SignatureHelper\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  attributes:\n  - type: System.Runtime.InteropServices.ClassInterfaceAttribute\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.SignatureHelper.AddArgument(System.Type)\n  commentId: M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type)\n  id: AddArgument(System.Type)\n  parent: System.Reflection.Emit.SignatureHelper\n  langs:\n  - csharp\n  name: AddArgument(Type)\n  nameWithType: SignatureHelper.AddArgument(Type)\n  fullName: SignatureHelper.AddArgument(Type)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Adds an argument to the signature.\n  remarks: To add an argument with optional or required custom modifiers, use the <xref:System.Reflection.Emit.SignatureHelper.AddArgument%28System.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method overload.\n  syntax:\n    content: public void AddArgument (Type clsArgument);\n    parameters:\n    - id: clsArgument\n      type: System.Type\n      description: The type of the argument.\n  overload: System.Reflection.Emit.SignatureHelper.AddArgument*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The signature has already been finished.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>clsArgument</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Boolean)\n  commentId: M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Boolean)\n  id: AddArgument(System.Type,System.Boolean)\n  parent: System.Reflection.Emit.SignatureHelper\n  langs:\n  - csharp\n  name: AddArgument(Type, Boolean)\n  nameWithType: SignatureHelper.AddArgument(Type, Boolean)\n  fullName: SignatureHelper.AddArgument(Type, Boolean)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Adds an argument of the specified type to the signature, specifying whether the argument is pinned.\n  remarks: To add an argument with optional or required custom modifiers, use the <xref:System.Reflection.Emit.SignatureHelper.AddArgument%28System.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method overload.\n  syntax:\n    content: public void AddArgument (Type argument, bool pinned);\n    parameters:\n    - id: argument\n      type: System.Type\n      description: The argument type.\n    - id: pinned\n      type: System.Boolean\n      description: '`true` if the argument is pinned; otherwise, `false`.'\n  overload: System.Reflection.Emit.SignatureHelper.AddArgument*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>argument</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Type[],System.Type[])\n  commentId: M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Type[],System.Type[])\n  id: AddArgument(System.Type,System.Type[],System.Type[])\n  parent: System.Reflection.Emit.SignatureHelper\n  langs:\n  - csharp\n  name: AddArgument(Type, Type[], Type[])\n  nameWithType: SignatureHelper.AddArgument(Type, Type[], Type[])\n  fullName: SignatureHelper.AddArgument(Type, Type[], Type[])\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Adds an argument to the signature, with the specified custom modifiers.\n  remarks: See the <xref:System.Runtime.CompilerServices> namespace for classes that represent custom modifiers.\n  syntax:\n    content: public void AddArgument (Type argument, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers);\n    parameters:\n    - id: argument\n      type: System.Type\n      description: The argument type.\n    - id: requiredCustomModifiers\n      type: System.Type[]\n      description: An array of types representing the required custom modifiers for the argument, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref> or <xref href=\"System.Runtime.CompilerServices.IsBoxed\"></xref>. If the argument has no required custom modifiers, specify `null`.\n    - id: optionalCustomModifiers\n      type: System.Type[]\n      description: An array of types representing the optional custom modifiers for the argument, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref> or <xref href=\"System.Runtime.CompilerServices.IsBoxed\"></xref>. If the argument has no optional custom modifiers, specify `null`.\n  overload: System.Reflection.Emit.SignatureHelper.AddArgument*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>argument</code> is `null`.  \\n  \\n -or-  \\n  \\n An element of <code>requiredCustomModifiers</code> or <code>optionalCustomModifiers</code> is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The signature has already been finished.  \\n  \\n -or-  \\n  \\n One of the specified custom modifiers is an array type.  \\n  \\n -or-  \\n  \\n One of the specified custom modifiers is an open generic type. That is, the <xref href=\\\"System.Type.ContainsGenericParameters\\\"></xref> property is `true` for the custom modifier.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.SignatureHelper.AddArguments(System.Type[],System.Type[][],System.Type[][])\n  commentId: M:System.Reflection.Emit.SignatureHelper.AddArguments(System.Type[],System.Type[][],System.Type[][])\n  id: AddArguments(System.Type[],System.Type[][],System.Type[][])\n  parent: System.Reflection.Emit.SignatureHelper\n  langs:\n  - csharp\n  name: AddArguments(Type[], Type[][], Type[][])\n  nameWithType: SignatureHelper.AddArguments(Type[], Type[][], Type[][])\n  fullName: SignatureHelper.AddArguments(Type[], Type[][], Type[][])\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Adds a set of arguments to the signature, with the specified custom modifiers.\n  remarks: \"The arguments are added to the end of the signature, in order of the elements of `arguments`.  \\n  \\n See the <xref:System.Runtime.CompilerServices> namespace for classes that represent custom modifiers.\"\n  syntax:\n    content: public void AddArguments (Type[] arguments, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers);\n    parameters:\n    - id: arguments\n      type: System.Type[]\n      description: The types of the arguments to be added.\n    - id: requiredCustomModifiers\n      type: System.Type[][]\n      description: An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding argument, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref> or <xref href=\"System.Runtime.CompilerServices.IsBoxed\"></xref>. If a particular argument has no required custom modifiers, specify `null` instead of an array of types. If none of the arguments have required custom modifiers, specify `null` instead of an array of arrays.\n    - id: optionalCustomModifiers\n      type: System.Type[][]\n      description: An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding argument, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref> or <xref href=\"System.Runtime.CompilerServices.IsBoxed\"></xref>. If a particular argument has no optional custom modifiers, specify `null` instead of an array of types. If none of the arguments have optional custom modifiers, specify `null` instead of an array of arrays.\n  overload: System.Reflection.Emit.SignatureHelper.AddArguments*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"An element of <code>arguments</code> is `null`.  \\n  \\n -or-  \\n  \\n One of the specified custom modifiers is `null`. (However, `null` can be specified for the array of custom modifiers for any argument.)\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The signature has already been finished.  \\n  \\n -or-  \\n  \\n One of the specified custom modifiers is an array type.  \\n  \\n -or-  \\n  \\n One of the specified custom modifiers is an open generic type. That is, the <xref href=\\\"System.Type.ContainsGenericParameters\\\"></xref> property is `true` for the custom modifier.  \\n  \\n -or-  \\n  \\n The size of <code>requiredCustomModifiers</code> or <code>optionalCustomModifiers</code> does not equal the size of <code>arguments</code>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.SignatureHelper.AddSentinel\n  commentId: M:System.Reflection.Emit.SignatureHelper.AddSentinel\n  id: AddSentinel\n  parent: System.Reflection.Emit.SignatureHelper\n  langs:\n  - csharp\n  name: AddSentinel()\n  nameWithType: SignatureHelper.AddSentinel()\n  fullName: SignatureHelper.AddSentinel()\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Marks the end of a vararg fixed part. This is only used if the caller is creating a vararg signature call site.\n  syntax:\n    content: public void AddSentinel ();\n    parameters: []\n  overload: System.Reflection.Emit.SignatureHelper.AddSentinel*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.SignatureHelper.Equals(System.Object)\n  commentId: M:System.Reflection.Emit.SignatureHelper.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Reflection.Emit.SignatureHelper\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: SignatureHelper.Equals(Object)\n  fullName: SignatureHelper.Equals(Object)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Checks if this instance is equal to the given object.\n  syntax:\n    content: public override bool Equals (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object with which this instance should be compared.\n    return:\n      type: System.Boolean\n      description: '`true` if the given object is a `SignatureHelper` and represents the same signature; otherwise, `false`.'\n  overload: System.Reflection.Emit.SignatureHelper.Equals*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.SignatureHelper.GetFieldSigHelper(System.Reflection.Module)\n  commentId: M:System.Reflection.Emit.SignatureHelper.GetFieldSigHelper(System.Reflection.Module)\n  id: GetFieldSigHelper(System.Reflection.Module)\n  parent: System.Reflection.Emit.SignatureHelper\n  langs:\n  - csharp\n  name: GetFieldSigHelper(Module)\n  nameWithType: SignatureHelper.GetFieldSigHelper(Module)\n  fullName: SignatureHelper.GetFieldSigHelper(Module)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns a signature helper for a field.\n  syntax:\n    content: public static System.Reflection.Emit.SignatureHelper GetFieldSigHelper (System.Reflection.Module mod);\n    parameters:\n    - id: mod\n      type: System.Reflection.Module\n      description: The dynamic module that contains the field for which the `SignatureHelper` is requested.\n    return:\n      type: System.Reflection.Emit.SignatureHelper\n      description: The `SignatureHelper` object for a field.\n  overload: System.Reflection.Emit.SignatureHelper.GetFieldSigHelper*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.SignatureHelper.GetHashCode\n  commentId: M:System.Reflection.Emit.SignatureHelper.GetHashCode\n  id: GetHashCode\n  parent: System.Reflection.Emit.SignatureHelper\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: SignatureHelper.GetHashCode()\n  fullName: SignatureHelper.GetHashCode()\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Creates and returns a hash code for this instance.\n  remarks: The hash code is created from the name of this instance, so the return value is the same as if the `GetHashCode` method were called on the value of the `Name` property.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: Returns the hash code based on the name.\n  overload: System.Reflection.Emit.SignatureHelper.GetHashCode*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper\n  commentId: M:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper\n  id: GetLocalVarSigHelper\n  parent: System.Reflection.Emit.SignatureHelper\n  langs:\n  - csharp\n  name: GetLocalVarSigHelper()\n  nameWithType: SignatureHelper.GetLocalVarSigHelper()\n  fullName: SignatureHelper.GetLocalVarSigHelper()\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns a signature helper for a local variable.\n  syntax:\n    content: public static System.Reflection.Emit.SignatureHelper GetLocalVarSigHelper ();\n    parameters: []\n    return:\n      type: System.Reflection.Emit.SignatureHelper\n      description: A <xref href=\"System.Reflection.Emit.SignatureHelper\"></xref> for a local variable.\n  overload: System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper(System.Reflection.Module)\n  commentId: M:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper(System.Reflection.Module)\n  id: GetLocalVarSigHelper(System.Reflection.Module)\n  parent: System.Reflection.Emit.SignatureHelper\n  langs:\n  - csharp\n  name: GetLocalVarSigHelper(Module)\n  nameWithType: SignatureHelper.GetLocalVarSigHelper(Module)\n  fullName: SignatureHelper.GetLocalVarSigHelper(Module)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns a signature helper for a local variable.\n  syntax:\n    content: public static System.Reflection.Emit.SignatureHelper GetLocalVarSigHelper (System.Reflection.Module mod);\n    parameters:\n    - id: mod\n      type: System.Reflection.Module\n      description: The dynamic module that contains the local variable for which the `SignatureHelper` is requested.\n    return:\n      type: System.Reflection.Emit.SignatureHelper\n      description: The `SignatureHelper` object for a local variable.\n  overload: System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Type,System.Type[])\n  commentId: M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Type,System.Type[])\n  id: GetMethodSigHelper(System.Reflection.Module,System.Type,System.Type[])\n  parent: System.Reflection.Emit.SignatureHelper\n  langs:\n  - csharp\n  name: GetMethodSigHelper(Module, Type, Type[])\n  nameWithType: SignatureHelper.GetMethodSigHelper(Module, Type, Type[])\n  fullName: SignatureHelper.GetMethodSigHelper(Module, Type, Type[])\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns a signature helper for a method with a standard calling convention, given the method's module, return type, and argument types.\n  remarks: \"This overload creates a signature with a standard calling convention.  \\n  \\n To create a method signature with custom modifiers, use the <xref:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper%28System.Reflection.Module%2CSystem.Reflection.CallingConventions%2CSystem.Type%29> method overload and then use the <xref:System.Reflection.Emit.SignatureHelper.AddArgument%28System.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> or <xref:System.Reflection.Emit.SignatureHelper.AddArguments%28System.Type%5B%5D%2CSystem.Type%5B%5D%5B%5D%2CSystem.Type%5B%5D%5B%5D%29> method overloads to add arguments with custom modifiers.\"\n  syntax:\n    content: public static System.Reflection.Emit.SignatureHelper GetMethodSigHelper (System.Reflection.Module mod, Type returnType, Type[] parameterTypes);\n    parameters:\n    - id: mod\n      type: System.Reflection.Module\n      description: The <xref href=\"System.Reflection.Emit.ModuleBuilder\"></xref> that contains the method for which the `SignatureHelper` is requested.\n    - id: returnType\n      type: System.Type\n      description: The return type of the method, or `null` for a void return type (`Sub` procedure in Visual Basic).\n    - id: parameterTypes\n      type: System.Type[]\n      description: The types of the arguments of the method, or `null` if the method has no arguments.\n    return:\n      type: System.Reflection.Emit.SignatureHelper\n      description: The `SignatureHelper` object for a method.\n  overload: System.Reflection.Emit.SignatureHelper.GetMethodSigHelper*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>mod</code> is `null`.  \\n  \\n -or-  \\n  \\n An element of <code>parameterTypes</code> is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>mod</code> is not a <xref href=\"System.Reflection.Emit.ModuleBuilder\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Runtime.InteropServices.CallingConvention,System.Type)\n  commentId: M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Runtime.InteropServices.CallingConvention,System.Type)\n  id: GetMethodSigHelper(System.Reflection.Module,System.Runtime.InteropServices.CallingConvention,System.Type)\n  parent: System.Reflection.Emit.SignatureHelper\n  langs:\n  - csharp\n  name: GetMethodSigHelper(Module, CallingConvention, Type)\n  nameWithType: SignatureHelper.GetMethodSigHelper(Module, CallingConvention, Type)\n  fullName: SignatureHelper.GetMethodSigHelper(Module, CallingConvention, Type)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns a signature helper for a method given the method's module, unmanaged calling convention, and return type.\n  syntax:\n    content: public static System.Reflection.Emit.SignatureHelper GetMethodSigHelper (System.Reflection.Module mod, System.Runtime.InteropServices.CallingConvention unmanagedCallConv, Type returnType);\n    parameters:\n    - id: mod\n      type: System.Reflection.Module\n      description: The <xref href=\"System.Reflection.Emit.ModuleBuilder\"></xref> that contains the method for which the `SignatureHelper` is requested.\n    - id: unmanagedCallConv\n      type: System.Runtime.InteropServices.CallingConvention\n      description: The unmanaged calling convention of the method.\n    - id: returnType\n      type: System.Type\n      description: The return type of the method, or `null` for a void return type (`Sub` procedure in Visual Basic).\n    return:\n      type: System.Reflection.Emit.SignatureHelper\n      description: The `SignatureHelper` object for a method.\n  overload: System.Reflection.Emit.SignatureHelper.GetMethodSigHelper*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>mod</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>mod</code> is not a <xref href=\\\"System.Reflection.Emit.ModuleBuilder\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>unmanagedCallConv</code> is an unknown unmanaged calling convention.\"\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Runtime.InteropServices.CallingConvention,System.Type)\n  commentId: M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Runtime.InteropServices.CallingConvention,System.Type)\n  id: GetMethodSigHelper(System.Runtime.InteropServices.CallingConvention,System.Type)\n  parent: System.Reflection.Emit.SignatureHelper\n  langs:\n  - csharp\n  name: GetMethodSigHelper(CallingConvention, Type)\n  nameWithType: SignatureHelper.GetMethodSigHelper(CallingConvention, Type)\n  fullName: SignatureHelper.GetMethodSigHelper(CallingConvention, Type)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns a signature helper for a method given the method's unmanaged calling convention and return type.\n  syntax:\n    content: public static System.Reflection.Emit.SignatureHelper GetMethodSigHelper (System.Runtime.InteropServices.CallingConvention unmanagedCallingConvention, Type returnType);\n    parameters:\n    - id: unmanagedCallingConvention\n      type: System.Runtime.InteropServices.CallingConvention\n      description: The unmanaged calling convention of the method.\n    - id: returnType\n      type: System.Type\n      description: The return type of the method, or `null` for a void return type (`Sub` procedure in Visual Basic).\n    return:\n      type: System.Reflection.Emit.SignatureHelper\n      description: The `SignatureHelper` object for a method.\n  overload: System.Reflection.Emit.SignatureHelper.GetMethodSigHelper*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>unmanagedCallConv</code> is an unknown unmanaged calling convention.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.CallingConventions,System.Type)\n  commentId: M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.CallingConventions,System.Type)\n  id: GetMethodSigHelper(System.Reflection.CallingConventions,System.Type)\n  parent: System.Reflection.Emit.SignatureHelper\n  langs:\n  - csharp\n  name: GetMethodSigHelper(CallingConventions, Type)\n  nameWithType: SignatureHelper.GetMethodSigHelper(CallingConventions, Type)\n  fullName: SignatureHelper.GetMethodSigHelper(CallingConventions, Type)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns a signature helper for a method given the method's calling convention and return type.\n  syntax:\n    content: public static System.Reflection.Emit.SignatureHelper GetMethodSigHelper (System.Reflection.CallingConventions callingConvention, Type returnType);\n    parameters:\n    - id: callingConvention\n      type: System.Reflection.CallingConventions\n      description: The calling convention of the method.\n    - id: returnType\n      type: System.Type\n      description: The return type of the method, or `null` for a void return type (`Sub` procedure in Visual Basic).\n    return:\n      type: System.Reflection.Emit.SignatureHelper\n      description: The `SignatureHelper` object for a method.\n  overload: System.Reflection.Emit.SignatureHelper.GetMethodSigHelper*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type)\n  commentId: M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type)\n  id: GetMethodSigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type)\n  parent: System.Reflection.Emit.SignatureHelper\n  langs:\n  - csharp\n  name: GetMethodSigHelper(Module, CallingConventions, Type)\n  nameWithType: SignatureHelper.GetMethodSigHelper(Module, CallingConventions, Type)\n  fullName: SignatureHelper.GetMethodSigHelper(Module, CallingConventions, Type)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns a signature helper for a method given the method's module, calling convention, and return type.\n  syntax:\n    content: public static System.Reflection.Emit.SignatureHelper GetMethodSigHelper (System.Reflection.Module mod, System.Reflection.CallingConventions callingConvention, Type returnType);\n    parameters:\n    - id: mod\n      type: System.Reflection.Module\n      description: The <xref href=\"System.Reflection.Emit.ModuleBuilder\"></xref> that contains the method for which the `SignatureHelper` is requested.\n    - id: callingConvention\n      type: System.Reflection.CallingConventions\n      description: The calling convention of the method.\n    - id: returnType\n      type: System.Type\n      description: The return type of the method, or `null` for a void return type (`Sub` procedure in Visual Basic).\n    return:\n      type: System.Reflection.Emit.SignatureHelper\n      description: The `SignatureHelper` object for a method.\n  overload: System.Reflection.Emit.SignatureHelper.GetMethodSigHelper*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>mod</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>mod</code> is not a <xref href=\"System.Reflection.Emit.ModuleBuilder\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[])\n  commentId: M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[])\n  id: GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[])\n  parent: System.Reflection.Emit.SignatureHelper\n  langs:\n  - csharp\n  name: GetPropertySigHelper(Module, Type, Type[])\n  nameWithType: SignatureHelper.GetPropertySigHelper(Module, Type, Type[])\n  fullName: SignatureHelper.GetPropertySigHelper(Module, Type, Type[])\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns a signature helper for a property, given the dynamic module that contains the property, the property type, and the property arguments.\n  remarks: To create a signature helper for a property with optional or required custom modifiers, use the <xref:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper%28System.Reflection.Module%2CSystem.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%5B%5D%2CSystem.Type%5B%5D%5B%5D%29> method overload.\n  syntax:\n    content: public static System.Reflection.Emit.SignatureHelper GetPropertySigHelper (System.Reflection.Module mod, Type returnType, Type[] parameterTypes);\n    parameters:\n    - id: mod\n      type: System.Reflection.Module\n      description: The <xref href=\"System.Reflection.Emit.ModuleBuilder\"></xref> that contains the property for which the <xref href=\"System.Reflection.Emit.SignatureHelper\"></xref> is requested.\n    - id: returnType\n      type: System.Type\n      description: The property type.\n    - id: parameterTypes\n      type: System.Type[]\n      description: The argument types, or `null` if the property has no arguments.\n    return:\n      type: System.Reflection.Emit.SignatureHelper\n      description: A <xref href=\"System.Reflection.Emit.SignatureHelper\"></xref> object for a property.\n  overload: System.Reflection.Emit.SignatureHelper.GetPropertySigHelper*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>mod</code> is `null`.  \\n  \\n -or-  \\n  \\n An element of <code>parameterTypes</code> is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>mod</code> is not a <xref href=\"System.Reflection.Emit.ModuleBuilder\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])\n  commentId: M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])\n  id: GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])\n  parent: System.Reflection.Emit.SignatureHelper\n  langs:\n  - csharp\n  name: GetPropertySigHelper(Module, Type, Type[], Type[], Type[], Type[][], Type[][])\n  nameWithType: SignatureHelper.GetPropertySigHelper(Module, Type, Type[], Type[], Type[], Type[][], Type[][])\n  fullName: SignatureHelper.GetPropertySigHelper(Module, Type, Type[], Type[], Type[], Type[][], Type[][])\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns a signature helper for a property, given the dynamic module that contains the property, the property type, the property arguments, and custom modifiers for the return type and arguments.\n  remarks: \"See the <xref:System.Runtime.CompilerServices> namespace for classes that represent custom modifiers.  \\n  \\n If a property has no custom modifiers, use the <xref:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper%28System.Reflection.Module%2CSystem.Type%2CSystem.Type%5B%5D%29> method overload.\"\n  syntax:\n    content: public static System.Reflection.Emit.SignatureHelper GetPropertySigHelper (System.Reflection.Module mod, Type returnType, Type[] requiredReturnTypeCustomModifiers, Type[] optionalReturnTypeCustomModifiers, Type[] parameterTypes, Type[][] requiredParameterTypeCustomModifiers, Type[][] optionalParameterTypeCustomModifiers);\n    parameters:\n    - id: mod\n      type: System.Reflection.Module\n      description: The <xref href=\"System.Reflection.Emit.ModuleBuilder\"></xref> that contains the property for which the <xref href=\"System.Reflection.Emit.SignatureHelper\"></xref> is requested.\n    - id: returnType\n      type: System.Type\n      description: The property type.\n    - id: requiredReturnTypeCustomModifiers\n      type: System.Type[]\n      description: An array of types representing the required custom modifiers for the return type, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref> or <xref href=\"System.Runtime.CompilerServices.IsBoxed\"></xref>. If the return type has no required custom modifiers, specify `null`.\n    - id: optionalReturnTypeCustomModifiers\n      type: System.Type[]\n      description: An array of types representing the optional custom modifiers for the return type, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref> or <xref href=\"System.Runtime.CompilerServices.IsBoxed\"></xref>. If the return type has no optional custom modifiers, specify `null`.\n    - id: parameterTypes\n      type: System.Type[]\n      description: The types of the property's arguments, or `null` if the property has no arguments.\n    - id: requiredParameterTypeCustomModifiers\n      type: System.Type[][]\n      description: An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding argument of the property. If a particular argument has no required custom modifiers, specify `null` instead of an array of types. If the property has no arguments, or if none of the arguments have required custom modifiers, specify `null` instead of an array of arrays.\n    - id: optionalParameterTypeCustomModifiers\n      type: System.Type[][]\n      description: An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding argument of the property. If a particular argument has no optional custom modifiers, specify `null` instead of an array of types. If the property has no arguments, or if none of the arguments have optional custom modifiers, specify `null` instead of an array of arrays.\n    return:\n      type: System.Reflection.Emit.SignatureHelper\n      description: A <xref href=\"System.Reflection.Emit.SignatureHelper\"></xref> object for a property.\n  overload: System.Reflection.Emit.SignatureHelper.GetPropertySigHelper*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>mod</code> is `null`.  \\n  \\n -or-  \\n  \\n An element of <code>parameterTypes</code> is `null`.  \\n  \\n -or-  \\n  \\n One of the specified custom modifiers is `null`. (However, `null` can be specified for the array of custom modifiers for any argument.)\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The signature has already been finished.  \\n  \\n -or-  \\n  \\n <code>mod</code> is not a <xref href=\\\"System.Reflection.Emit.ModuleBuilder\\\"></xref>.  \\n  \\n -or-  \\n  \\n One of the specified custom modifiers is an array type.  \\n  \\n -or-  \\n  \\n One of the specified custom modifiers is an open generic type. That is, the <xref href=\\\"System.Type.ContainsGenericParameters\\\"></xref> property is `true` for the custom modifier.  \\n  \\n -or-  \\n  \\n The size of <code>requiredParameterTypeCustomModifiers</code> or <code>optionalParameterTypeCustomModifiers</code> does not equal the size of <code>parameterTypes</code>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])\n  commentId: M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])\n  id: GetPropertySigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])\n  parent: System.Reflection.Emit.SignatureHelper\n  langs:\n  - csharp\n  name: GetPropertySigHelper(Module, CallingConventions, Type, Type[], Type[], Type[], Type[][], Type[][])\n  nameWithType: SignatureHelper.GetPropertySigHelper(Module, CallingConventions, Type, Type[], Type[], Type[], Type[][], Type[][])\n  fullName: SignatureHelper.GetPropertySigHelper(Module, CallingConventions, Type, Type[], Type[], Type[], Type[][], Type[][])\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns a signature helper for a property, given the dynamic module that contains the property, the calling convention, the property type, the property arguments, and custom modifiers for the return type and arguments.\n  remarks: \"See the <xref:System.Runtime.CompilerServices> namespace for classes that represent custom modifiers.  \\n  \\n If a property has no custom modifiers, use the <xref:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper%28System.Reflection.Module%2CSystem.Type%2CSystem.Type%5B%5D%29> method overload.  \\n  \\n> [!NOTE]\\n>  This method overload is introduced in the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.\"\n  syntax:\n    content: public static System.Reflection.Emit.SignatureHelper GetPropertySigHelper (System.Reflection.Module mod, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] requiredReturnTypeCustomModifiers, Type[] optionalReturnTypeCustomModifiers, Type[] parameterTypes, Type[][] requiredParameterTypeCustomModifiers, Type[][] optionalParameterTypeCustomModifiers);\n    parameters:\n    - id: mod\n      type: System.Reflection.Module\n      description: The <xref href=\"System.Reflection.Emit.ModuleBuilder\"></xref> that contains the property for which the <xref href=\"System.Reflection.Emit.SignatureHelper\"></xref> is requested.\n    - id: callingConvention\n      type: System.Reflection.CallingConventions\n      description: The calling convention of the property accessors.\n    - id: returnType\n      type: System.Type\n      description: The property type.\n    - id: requiredReturnTypeCustomModifiers\n      type: System.Type[]\n      description: An array of types representing the required custom modifiers for the return type, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref> or <xref href=\"System.Runtime.CompilerServices.IsBoxed\"></xref>. If the return type has no required custom modifiers, specify `null`.\n    - id: optionalReturnTypeCustomModifiers\n      type: System.Type[]\n      description: An array of types representing the optional custom modifiers for the return type, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref> or <xref href=\"System.Runtime.CompilerServices.IsBoxed\"></xref>. If the return type has no optional custom modifiers, specify `null`.\n    - id: parameterTypes\n      type: System.Type[]\n      description: The types of the property's arguments, or `null` if the property has no arguments.\n    - id: requiredParameterTypeCustomModifiers\n      type: System.Type[][]\n      description: An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding argument of the property. If a particular argument has no required custom modifiers, specify `null` instead of an array of types. If the property has no arguments, or if none of the arguments have required custom modifiers, specify `null` instead of an array of arrays.\n    - id: optionalParameterTypeCustomModifiers\n      type: System.Type[][]\n      description: An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding argument of the property. If a particular argument has no optional custom modifiers, specify `null` instead of an array of types. If the property has no arguments, or if none of the arguments have optional custom modifiers, specify `null` instead of an array of arrays.\n    return:\n      type: System.Reflection.Emit.SignatureHelper\n      description: A <xref href=\"System.Reflection.Emit.SignatureHelper\"></xref> object for a property.\n  overload: System.Reflection.Emit.SignatureHelper.GetPropertySigHelper*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>mod</code> is `null`.  \\n  \\n -or-  \\n  \\n An element of <code>parameterTypes</code> is `null`.  \\n  \\n -or-  \\n  \\n One of the specified custom modifiers is `null`. (However, `null` can be specified for the array of custom modifiers for any argument.)\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The signature has already been finished.  \\n  \\n -or-  \\n  \\n <code>mod</code> is not a <xref href=\\\"System.Reflection.Emit.ModuleBuilder\\\"></xref>.  \\n  \\n -or-  \\n  \\n One of the specified custom modifiers is an array type.  \\n  \\n -or-  \\n  \\n One of the specified custom modifiers is an open generic type. That is, the <xref href=\\\"System.Type.ContainsGenericParameters\\\"></xref> property is `true` for the custom modifier.  \\n  \\n -or-  \\n  \\n The size of <code>requiredParameterTypeCustomModifiers</code> or <code>optionalParameterTypeCustomModifiers</code> does not equal the size of <code>parameterTypes</code>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.SignatureHelper.GetSignature\n  commentId: M:System.Reflection.Emit.SignatureHelper.GetSignature\n  id: GetSignature\n  parent: System.Reflection.Emit.SignatureHelper\n  langs:\n  - csharp\n  name: GetSignature()\n  nameWithType: SignatureHelper.GetSignature()\n  fullName: SignatureHelper.GetSignature()\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Adds the end token to the signature and marks the signature as finished, so no further tokens can be added.\n  syntax:\n    content: public byte[] GetSignature ();\n    parameters: []\n    return:\n      type: System.Byte[]\n      description: Returns a byte array made up of the full signature.\n  overload: System.Reflection.Emit.SignatureHelper.GetSignature*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.SignatureHelper.ToString\n  commentId: M:System.Reflection.Emit.SignatureHelper.ToString\n  id: ToString\n  parent: System.Reflection.Emit.SignatureHelper\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: SignatureHelper.ToString()\n  fullName: SignatureHelper.ToString()\n  type: Method\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns a string representing the signature arguments.\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: Returns a string representing the arguments of this signature.\n  overload: System.Reflection.Emit.SignatureHelper.ToString*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  commentId: M:System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  id: System#Runtime#InteropServices#_SignatureHelper#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  isEii: true\n  parent: System.Reflection.Emit.SignatureHelper\n  langs:\n  - csharp\n  name: _SignatureHelper.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: SignatureHelper._SignatureHelper.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: SignatureHelper._SignatureHelper.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Maps a set of names to a corresponding set of dispatch identifiers.\n  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.\n  syntax:\n    content: void _SignatureHelper.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);\n    parameters:\n    - id: riid\n      type: System.Guid\n      description: Reserved for future use. Must be IID_NULL.\n    - id: rgszNames\n      type: System.IntPtr\n      description: Passed-in array of names to be mapped.\n    - id: cNames\n      type: System.UInt32\n      description: Count of the names to be mapped.\n    - id: lcid\n      type: System.UInt32\n      description: The locale context in which to interpret the names.\n    - id: rgDispId\n      type: System.IntPtr\n      description: Caller-allocated array which receives the IDs corresponding to the names.\n  overload: System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#GetIDsOfNames*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  commentId: M:System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  id: System#Runtime#InteropServices#_SignatureHelper#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  isEii: true\n  parent: System.Reflection.Emit.SignatureHelper\n  langs:\n  - csharp\n  name: _SignatureHelper.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: SignatureHelper._SignatureHelper.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: SignatureHelper._SignatureHelper.GetTypeInfo(UInt32, UInt32, IntPtr)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Retrieves the type information for an object, which can then be used to get the type information for an interface.\n  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.\n  syntax:\n    content: void _SignatureHelper.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);\n    parameters:\n    - id: iTInfo\n      type: System.UInt32\n      description: The type information to return.\n    - id: lcid\n      type: System.UInt32\n      description: The locale identifier for the type information.\n    - id: ppTInfo\n      type: System.IntPtr\n      description: Receives a pointer to the requested type information object.\n  overload: System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#GetTypeInfo*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#GetTypeInfoCount(System.UInt32@)\n  commentId: M:System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#GetTypeInfoCount(System.UInt32@)\n  id: System#Runtime#InteropServices#_SignatureHelper#GetTypeInfoCount(System.UInt32@)\n  isEii: true\n  parent: System.Reflection.Emit.SignatureHelper\n  langs:\n  - csharp\n  name: _SignatureHelper.GetTypeInfoCount(UInt32)\n  nameWithType: SignatureHelper._SignatureHelper.GetTypeInfoCount(UInt32)\n  fullName: SignatureHelper._SignatureHelper.GetTypeInfoCount(UInt32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Retrieves the number of type information interfaces that an object provides (either 0 or 1).\n  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.\n  syntax:\n    content: void _SignatureHelper.GetTypeInfoCount (out uint pcTInfo);\n    parameters:\n    - id: pcTInfo\n      type: System.UInt32\n      description: Points to a location that receives the number of type information interfaces provided by the object.\n  overload: System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#GetTypeInfoCount*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  commentId: M:System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  id: System#Runtime#InteropServices#_SignatureHelper#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  isEii: true\n  parent: System.Reflection.Emit.SignatureHelper\n  langs:\n  - csharp\n  name: _SignatureHelper.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: SignatureHelper._SignatureHelper.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: SignatureHelper._SignatureHelper.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Provides access to properties and methods exposed by an object.\n  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.\n  syntax:\n    content: void _SignatureHelper.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);\n    parameters:\n    - id: dispIdMember\n      type: System.UInt32\n      description: Identifies the member.\n    - id: riid\n      type: System.Guid\n      description: Reserved for future use. Must be IID_NULL.\n    - id: lcid\n      type: System.UInt32\n      description: The locale context in which to interpret arguments.\n    - id: wFlags\n      type: System.Int16\n      description: Flags describing the context of the call.\n    - id: pDispParams\n      type: System.IntPtr\n      description: Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.\n    - id: pVarResult\n      type: System.IntPtr\n      description: Pointer to the location where the result is to be stored.\n    - id: pExcepInfo\n      type: System.IntPtr\n      description: Pointer to a structure that contains exception information.\n    - id: puArgErr\n      type: System.IntPtr\n      description: The index of the first argument that has an error.\n  overload: System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#Invoke*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.NotImplementedException\n  parent: System\n  isExternal: false\n  name: NotImplementedException\n  nameWithType: NotImplementedException\n  fullName: System.NotImplementedException\n- uid: System.Reflection.Emit.SignatureHelper.AddArgument(System.Type)\n  parent: System.Reflection.Emit.SignatureHelper\n  isExternal: false\n  name: AddArgument(Type)\n  nameWithType: SignatureHelper.AddArgument(Type)\n  fullName: SignatureHelper.AddArgument(Type)\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Boolean)\n  parent: System.Reflection.Emit.SignatureHelper\n  isExternal: false\n  name: AddArgument(Type, Boolean)\n  nameWithType: SignatureHelper.AddArgument(Type, Boolean)\n  fullName: SignatureHelper.AddArgument(Type, Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Type[],System.Type[])\n  parent: System.Reflection.Emit.SignatureHelper\n  isExternal: false\n  name: AddArgument(Type, Type[], Type[])\n  nameWithType: SignatureHelper.AddArgument(Type, Type[], Type[])\n  fullName: SignatureHelper.AddArgument(Type, Type[], Type[])\n- uid: System.Type[]\n  parent: System\n  isExternal: false\n  name: Type[]\n  nameWithType: Type[]\n  fullName: System.Type[]\n  spec.csharp:\n  - uid: System.Type\n    name: Type\n    nameWithType: Type\n    fullName: System.Type\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Emit.SignatureHelper.AddArguments(System.Type[],System.Type[][],System.Type[][])\n  parent: System.Reflection.Emit.SignatureHelper\n  isExternal: false\n  name: AddArguments(Type[], Type[][], Type[][])\n  nameWithType: SignatureHelper.AddArguments(Type[], Type[][], Type[][])\n  fullName: SignatureHelper.AddArguments(Type[], Type[][], Type[][])\n- uid: System.Type[][]\n  parent: System\n  isExternal: false\n  name: Type[][]\n  nameWithType: Type[][]\n  fullName: System.Type[][]\n  spec.csharp:\n  - uid: System.Type\n    name: Type\n    nameWithType: Type\n    fullName: System.Type\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Emit.SignatureHelper.AddSentinel\n  parent: System.Reflection.Emit.SignatureHelper\n  isExternal: false\n  name: AddSentinel()\n  nameWithType: SignatureHelper.AddSentinel()\n  fullName: SignatureHelper.AddSentinel()\n- uid: System.Reflection.Emit.SignatureHelper.Equals(System.Object)\n  parent: System.Reflection.Emit.SignatureHelper\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: SignatureHelper.Equals(Object)\n  fullName: SignatureHelper.Equals(Object)\n- uid: System.Reflection.Emit.SignatureHelper.GetFieldSigHelper(System.Reflection.Module)\n  parent: System.Reflection.Emit.SignatureHelper\n  isExternal: false\n  name: GetFieldSigHelper(Module)\n  nameWithType: SignatureHelper.GetFieldSigHelper(Module)\n  fullName: SignatureHelper.GetFieldSigHelper(Module)\n- uid: System.Reflection.Emit.SignatureHelper\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: SignatureHelper\n  nameWithType: SignatureHelper\n  fullName: System.Reflection.Emit.SignatureHelper\n- uid: System.Reflection.Module\n  parent: System.Reflection\n  isExternal: false\n  name: Module\n  nameWithType: Module\n  fullName: System.Reflection.Module\n- uid: System.Reflection.Emit.SignatureHelper.GetHashCode\n  parent: System.Reflection.Emit.SignatureHelper\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: SignatureHelper.GetHashCode()\n  fullName: SignatureHelper.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper\n  parent: System.Reflection.Emit.SignatureHelper\n  isExternal: false\n  name: GetLocalVarSigHelper()\n  nameWithType: SignatureHelper.GetLocalVarSigHelper()\n  fullName: SignatureHelper.GetLocalVarSigHelper()\n- uid: System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper(System.Reflection.Module)\n  parent: System.Reflection.Emit.SignatureHelper\n  isExternal: false\n  name: GetLocalVarSigHelper(Module)\n  nameWithType: SignatureHelper.GetLocalVarSigHelper(Module)\n  fullName: SignatureHelper.GetLocalVarSigHelper(Module)\n- uid: System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Type,System.Type[])\n  parent: System.Reflection.Emit.SignatureHelper\n  isExternal: false\n  name: GetMethodSigHelper(Module, Type, Type[])\n  nameWithType: SignatureHelper.GetMethodSigHelper(Module, Type, Type[])\n  fullName: SignatureHelper.GetMethodSigHelper(Module, Type, Type[])\n- uid: System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Runtime.InteropServices.CallingConvention,System.Type)\n  parent: System.Reflection.Emit.SignatureHelper\n  isExternal: false\n  name: GetMethodSigHelper(Module, CallingConvention, Type)\n  nameWithType: SignatureHelper.GetMethodSigHelper(Module, CallingConvention, Type)\n  fullName: SignatureHelper.GetMethodSigHelper(Module, CallingConvention, Type)\n- uid: System.Runtime.InteropServices.CallingConvention\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: CallingConvention\n  nameWithType: CallingConvention\n  fullName: System.Runtime.InteropServices.CallingConvention\n- uid: System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Runtime.InteropServices.CallingConvention,System.Type)\n  parent: System.Reflection.Emit.SignatureHelper\n  isExternal: false\n  name: GetMethodSigHelper(CallingConvention, Type)\n  nameWithType: SignatureHelper.GetMethodSigHelper(CallingConvention, Type)\n  fullName: SignatureHelper.GetMethodSigHelper(CallingConvention, Type)\n- uid: System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.CallingConventions,System.Type)\n  parent: System.Reflection.Emit.SignatureHelper\n  isExternal: false\n  name: GetMethodSigHelper(CallingConventions, Type)\n  nameWithType: SignatureHelper.GetMethodSigHelper(CallingConventions, Type)\n  fullName: SignatureHelper.GetMethodSigHelper(CallingConventions, Type)\n- uid: System.Reflection.CallingConventions\n  parent: System.Reflection\n  isExternal: false\n  name: CallingConventions\n  nameWithType: CallingConventions\n  fullName: System.Reflection.CallingConventions\n- uid: System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type)\n  parent: System.Reflection.Emit.SignatureHelper\n  isExternal: false\n  name: GetMethodSigHelper(Module, CallingConventions, Type)\n  nameWithType: SignatureHelper.GetMethodSigHelper(Module, CallingConventions, Type)\n  fullName: SignatureHelper.GetMethodSigHelper(Module, CallingConventions, Type)\n- uid: System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[])\n  parent: System.Reflection.Emit.SignatureHelper\n  isExternal: false\n  name: GetPropertySigHelper(Module, Type, Type[])\n  nameWithType: SignatureHelper.GetPropertySigHelper(Module, Type, Type[])\n  fullName: SignatureHelper.GetPropertySigHelper(Module, Type, Type[])\n- uid: System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])\n  parent: System.Reflection.Emit.SignatureHelper\n  isExternal: false\n  name: GetPropertySigHelper(Module, Type, Type[], Type[], Type[], Type[][], Type[][])\n  nameWithType: SignatureHelper.GetPropertySigHelper(Module, Type, Type[], Type[], Type[], Type[][], Type[][])\n  fullName: SignatureHelper.GetPropertySigHelper(Module, Type, Type[], Type[], Type[], Type[][], Type[][])\n- uid: System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])\n  parent: System.Reflection.Emit.SignatureHelper\n  isExternal: false\n  name: GetPropertySigHelper(Module, CallingConventions, Type, Type[], Type[], Type[], Type[][], Type[][])\n  nameWithType: SignatureHelper.GetPropertySigHelper(Module, CallingConventions, Type, Type[], Type[], Type[], Type[][], Type[][])\n  fullName: SignatureHelper.GetPropertySigHelper(Module, CallingConventions, Type, Type[], Type[], Type[], Type[][], Type[][])\n- uid: System.Reflection.Emit.SignatureHelper.GetSignature\n  parent: System.Reflection.Emit.SignatureHelper\n  isExternal: false\n  name: GetSignature()\n  nameWithType: SignatureHelper.GetSignature()\n  fullName: SignatureHelper.GetSignature()\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Emit.SignatureHelper.ToString\n  parent: System.Reflection.Emit.SignatureHelper\n  isExternal: false\n  name: ToString()\n  nameWithType: SignatureHelper.ToString()\n  fullName: SignatureHelper.ToString()\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.Emit.SignatureHelper\n  isExternal: false\n  name: _SignatureHelper.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: SignatureHelper._SignatureHelper.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: SignatureHelper._SignatureHelper.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n- uid: System.Guid\n  parent: System\n  isExternal: false\n  name: Guid\n  nameWithType: Guid\n  fullName: System.Guid\n- uid: System.IntPtr\n  parent: System\n  isExternal: false\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.UInt32\n  parent: System\n  isExternal: false\n  name: UInt32\n  nameWithType: UInt32\n  fullName: System.UInt32\n- uid: System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.Emit.SignatureHelper\n  isExternal: false\n  name: _SignatureHelper.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: SignatureHelper._SignatureHelper.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: SignatureHelper._SignatureHelper.GetTypeInfo(UInt32, UInt32, IntPtr)\n- uid: System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#GetTypeInfoCount(System.UInt32@)\n  parent: System.Reflection.Emit.SignatureHelper\n  isExternal: false\n  name: _SignatureHelper.GetTypeInfoCount(UInt32)\n  nameWithType: SignatureHelper._SignatureHelper.GetTypeInfoCount(UInt32)\n  fullName: SignatureHelper._SignatureHelper.GetTypeInfoCount(UInt32)\n- uid: System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  parent: System.Reflection.Emit.SignatureHelper\n  isExternal: false\n  name: _SignatureHelper.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: SignatureHelper._SignatureHelper.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: SignatureHelper._SignatureHelper.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n- uid: System.Int16\n  parent: System\n  isExternal: false\n  name: Int16\n  nameWithType: Int16\n  fullName: System.Int16\n- uid: System.Reflection.Emit.SignatureHelper.AddArgument*\n  parent: System.Reflection.Emit.SignatureHelper\n  isExternal: false\n  name: AddArgument\n  nameWithType: SignatureHelper.AddArgument\n  fullName: SignatureHelper.AddArgument\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml\n- uid: System.Reflection.Emit.SignatureHelper.AddArguments*\n  parent: System.Reflection.Emit.SignatureHelper\n  isExternal: false\n  name: AddArguments\n  nameWithType: SignatureHelper.AddArguments\n  fullName: SignatureHelper.AddArguments\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml\n- uid: System.Reflection.Emit.SignatureHelper.AddSentinel*\n  parent: System.Reflection.Emit.SignatureHelper\n  isExternal: false\n  name: AddSentinel\n  nameWithType: SignatureHelper.AddSentinel\n  fullName: SignatureHelper.AddSentinel\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml\n- uid: System.Reflection.Emit.SignatureHelper.Equals*\n  parent: System.Reflection.Emit.SignatureHelper\n  isExternal: false\n  name: Equals\n  nameWithType: SignatureHelper.Equals\n  fullName: SignatureHelper.Equals\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml\n- uid: System.Reflection.Emit.SignatureHelper.GetFieldSigHelper*\n  parent: System.Reflection.Emit.SignatureHelper\n  isExternal: false\n  name: GetFieldSigHelper\n  nameWithType: SignatureHelper.GetFieldSigHelper\n  fullName: SignatureHelper.GetFieldSigHelper\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml\n- uid: System.Reflection.Emit.SignatureHelper.GetHashCode*\n  parent: System.Reflection.Emit.SignatureHelper\n  isExternal: false\n  name: GetHashCode\n  nameWithType: SignatureHelper.GetHashCode\n  fullName: SignatureHelper.GetHashCode\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml\n- uid: System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper*\n  parent: System.Reflection.Emit.SignatureHelper\n  isExternal: false\n  name: GetLocalVarSigHelper\n  nameWithType: SignatureHelper.GetLocalVarSigHelper\n  fullName: SignatureHelper.GetLocalVarSigHelper\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml\n- uid: System.Reflection.Emit.SignatureHelper.GetMethodSigHelper*\n  parent: System.Reflection.Emit.SignatureHelper\n  isExternal: false\n  name: GetMethodSigHelper\n  nameWithType: SignatureHelper.GetMethodSigHelper\n  fullName: SignatureHelper.GetMethodSigHelper\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml\n- uid: System.Reflection.Emit.SignatureHelper.GetPropertySigHelper*\n  parent: System.Reflection.Emit.SignatureHelper\n  isExternal: false\n  name: GetPropertySigHelper\n  nameWithType: SignatureHelper.GetPropertySigHelper\n  fullName: SignatureHelper.GetPropertySigHelper\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml\n- uid: System.Reflection.Emit.SignatureHelper.GetSignature*\n  parent: System.Reflection.Emit.SignatureHelper\n  isExternal: false\n  name: GetSignature\n  nameWithType: SignatureHelper.GetSignature\n  fullName: SignatureHelper.GetSignature\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml\n- uid: System.Reflection.Emit.SignatureHelper.ToString*\n  parent: System.Reflection.Emit.SignatureHelper\n  isExternal: false\n  name: ToString\n  nameWithType: SignatureHelper.ToString\n  fullName: SignatureHelper.ToString\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml\n- uid: System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#GetIDsOfNames*\n  parent: System.Reflection.Emit.SignatureHelper\n  isExternal: false\n  name: System.Runtime.InteropServices._SignatureHelper.GetIDsOfNames\n  nameWithType: SignatureHelper.System.Runtime.InteropServices._SignatureHelper.GetIDsOfNames\n  fullName: SignatureHelper.System.Runtime.InteropServices._SignatureHelper.GetIDsOfNames\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml\n- uid: System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#GetTypeInfo*\n  parent: System.Reflection.Emit.SignatureHelper\n  isExternal: false\n  name: System.Runtime.InteropServices._SignatureHelper.GetTypeInfo\n  nameWithType: SignatureHelper.System.Runtime.InteropServices._SignatureHelper.GetTypeInfo\n  fullName: SignatureHelper.System.Runtime.InteropServices._SignatureHelper.GetTypeInfo\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml\n- uid: System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#GetTypeInfoCount*\n  parent: System.Reflection.Emit.SignatureHelper\n  isExternal: false\n  name: System.Runtime.InteropServices._SignatureHelper.GetTypeInfoCount\n  nameWithType: SignatureHelper.System.Runtime.InteropServices._SignatureHelper.GetTypeInfoCount\n  fullName: SignatureHelper.System.Runtime.InteropServices._SignatureHelper.GetTypeInfoCount\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml\n- uid: System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#Invoke*\n  parent: System.Reflection.Emit.SignatureHelper\n  isExternal: false\n  name: System.Runtime.InteropServices._SignatureHelper.Invoke\n  nameWithType: SignatureHelper.System.Runtime.InteropServices._SignatureHelper.Invoke\n  fullName: SignatureHelper.System.Runtime.InteropServices._SignatureHelper.Invoke\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Runtime.InteropServices._SignatureHelper\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: _SignatureHelper\n  nameWithType: _SignatureHelper\n  fullName: System.Runtime.InteropServices._SignatureHelper\n"}