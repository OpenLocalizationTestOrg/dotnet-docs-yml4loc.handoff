{"nodes":[{"content":"Represents the abstract base class for all keys that are generated using symmetric algorithms.","nodes":[{"pos":[0,94],"content":"Represents the abstract base class for all keys that are generated using symmetric algorithms.","nodes":[{"content":"Represents the abstract base class for all keys that are generated using symmetric algorithms.","pos":[0,94]}]}],"pos":[1184,1279],"yaml":true},{"content":"Typically, this class is used by the infrastructure to transform XML using a symmetric key.","nodes":[{"pos":[0,91],"content":"Typically, this class is used by the infrastructure to transform XML using a symmetric key.","nodes":[{"content":"Typically, this class is used by the infrastructure to transform XML using a symmetric key.","pos":[0,91]}]}],"pos":[1290,1382],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.SymmetricSecurityKey\"></xref> class.","nodes":[{"pos":[0,110],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IdentityModel.Tokens.SymmetricSecurityKey\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.SymmetricSecurityKey\"></xref> class."}],"pos":[3471,3582],"yaml":true},{"content":"When overridden in a derived class, generates a derived key using the specified cryptographic algorithm and parameters for the current key.","nodes":[{"pos":[0,139],"content":"When overridden in a derived class, generates a derived key using the specified cryptographic algorithm and parameters for the current key.","nodes":[{"content":"When overridden in a derived class, generates a derived key using the specified cryptographic algorithm and parameters for the current key.","pos":[0,139]}]}],"pos":[5136,5276],"yaml":true},{"content":"To specify P-SHA1 as the cryptographic algorithm, use the <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation> field.","nodes":[{"pos":[0,137],"content":"To specify P-SHA1 as the cryptographic algorithm, use the <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation> field.","nodes":[{"content":"To specify P-SHA1 as the cryptographic algorithm, use the <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation&gt;</ph> field.","pos":[0,137],"source":"To specify P-SHA1 as the cryptographic algorithm, use the <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation> field."}]}],"pos":[5287,5425],"yaml":true,"extradata":"MT"},{"content":"A URI that represents the cryptographic algorithm to use to generate the derived key.","nodes":[{"pos":[0,85],"content":"A URI that represents the cryptographic algorithm to use to generate the derived key.","nodes":[{"content":"A URI that represents the cryptographic algorithm to use to generate the derived key.","pos":[0,85]}]}],"pos":[5653,5739],"yaml":true},{"content":"An array of <xref href=\"System.Byte\"></xref> that contains the label parameter for the cryptographic algorithm.","nodes":[{"pos":[0,111],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> that contains the label parameter for the cryptographic algorithm.","source":"An array of <xref href=\"System.Byte\"></xref> that contains the label parameter for the cryptographic algorithm."}],"pos":[5800,5912],"yaml":true},{"content":"An array of <xref href=\"System.Byte\"></xref> that contains the nonce that is used to create a derived key.","nodes":[{"pos":[0,106],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> that contains the nonce that is used to create a derived key.","source":"An array of <xref href=\"System.Byte\"></xref> that contains the nonce that is used to create a derived key."}],"pos":[5973,6080],"yaml":true},{"content":"The size of the derived key.","nodes":[{"pos":[0,28],"content":"The size of the derived key.","nodes":[{"content":"The size of the derived key.","pos":[0,28]}]}],"pos":[6151,6180],"yaml":true},{"content":"The position at which the derived key is located in the byte array that is returned from this method.","nodes":[{"pos":[0,101],"content":"The position at which the derived key is located in the byte array that is returned from this method.","nodes":[{"content":"The position at which the derived key is located in the byte array that is returned from this method.","pos":[0,101]}]}],"pos":[6241,6343],"yaml":true},{"content":"An array of <xref href=\"System.Byte\"></xref> that contains the derived key.","nodes":[{"pos":[0,75],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> that contains the derived key.","source":"An array of <xref href=\"System.Byte\"></xref> that contains the derived key."}],"pos":[6400,6476],"yaml":true},{"content":"When overridden in a derived class, gets a transform that decrypts cipher text using the specified cryptographic algorithm.","nodes":[{"pos":[0,123],"content":"When overridden in a derived class, gets a transform that decrypts cipher text using the specified cryptographic algorithm.","nodes":[{"content":"When overridden in a derived class, gets a transform that decrypts cipher text using the specified cryptographic algorithm.","pos":[0,123]}]}],"pos":[7804,7928],"yaml":true},{"content":"Use the fields that represent decryption algorithms in the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.","nodes":[{"pos":[0,144],"content":"Use the fields that represent decryption algorithms in the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.","nodes":[{"content":"Use the fields that represent decryption algorithms in the <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms&gt;</ph> class to specify the algorithm.","pos":[0,144],"source":"Use the fields that represent decryption algorithms in the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm."}]}],"pos":[7939,8084],"yaml":true,"extradata":"MT"},{"content":"A cryptographic algorithm that decrypts cipher text, such as encrypted XML.","nodes":[{"pos":[0,75],"content":"A cryptographic algorithm that decrypts cipher text, such as encrypted XML.","nodes":[{"content":"A cryptographic algorithm that decrypts cipher text, such as encrypted XML.","pos":[0,75]}]}],"pos":[8304,8380],"yaml":true},{"content":"An array of <xref href=\"System.Byte\"></xref> that contains the initialization vector (`IV`) for the specified algorithm.","nodes":[{"pos":[0,120],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> that contains the initialization vector (<ph id=\"ph2\">`IV`</ph>) for the specified algorithm.","source":"An array of <xref href=\"System.Byte\"></xref> that contains the initialization vector (`IV`) for the specified algorithm."}],"pos":[8438,8559],"yaml":true},{"content":"An <xref href=\"System.Security.Cryptography.ICryptoTransform\"></xref> that represents the decryption transform.","nodes":[{"pos":[0,111],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.ICryptoTransform\"&gt;&lt;/xref&gt;</ph> that represents the decryption transform.","source":"An <xref href=\"System.Security.Cryptography.ICryptoTransform\"></xref> that represents the decryption transform."}],"pos":[8648,8760],"yaml":true},{"content":"When overridden in a derived class, gets a transform that encrypts XML using the specified cryptographic algorithm.","nodes":[{"pos":[0,115],"content":"When overridden in a derived class, gets a transform that encrypts XML using the specified cryptographic algorithm.","nodes":[{"content":"When overridden in a derived class, gets a transform that encrypts XML using the specified cryptographic algorithm.","pos":[0,115]}]}],"pos":[10092,10208],"yaml":true},{"content":"Use the fields that represent decryption algorithms in the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.","nodes":[{"pos":[0,144],"content":"Use the fields that represent decryption algorithms in the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.","nodes":[{"content":"Use the fields that represent decryption algorithms in the <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms&gt;</ph> class to specify the algorithm.","pos":[0,144],"source":"Use the fields that represent decryption algorithms in the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm."}]}],"pos":[10219,10364],"yaml":true,"extradata":"MT"},{"content":"A cryptographic algorithm that encrypts XML.","nodes":[{"pos":[0,44],"content":"A cryptographic algorithm that encrypts XML.","nodes":[{"content":"A cryptographic algorithm that encrypts XML.","pos":[0,44]}]}],"pos":[10584,10629],"yaml":true},{"content":"An array of <xref href=\"System.Byte\"></xref> that contains the initialization vector (`IV`) for the specified algorithm.","nodes":[{"pos":[0,120],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> that contains the initialization vector (<ph id=\"ph2\">`IV`</ph>) for the specified algorithm.","source":"An array of <xref href=\"System.Byte\"></xref> that contains the initialization vector (`IV`) for the specified algorithm."}],"pos":[10687,10808],"yaml":true},{"content":"An <xref href=\"System.Security.Cryptography.ICryptoTransform\"></xref> that represents the encryption transform.","nodes":[{"pos":[0,111],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.ICryptoTransform\"&gt;&lt;/xref&gt;</ph> that represents the encryption transform.","source":"An <xref href=\"System.Security.Cryptography.ICryptoTransform\"></xref> that represents the encryption transform."}],"pos":[10897,11009],"yaml":true},{"content":"When overridden in a derived class, gets the size, in bits, of the initialization vector (`IV`) that is required for the specified cryptographic algorithm.","nodes":[{"pos":[0,155],"content":"When overridden in a derived class, gets the size, in bits, of the initialization vector (<ph id=\"ph1\">`IV`</ph>) that is required for the specified cryptographic algorithm.","source":"When overridden in a derived class, gets the size, in bits, of the initialization vector (`IV`) that is required for the specified cryptographic algorithm."}],"pos":[12197,12353],"yaml":true},{"content":"The cryptographic algorithm to get the size of the initialization vector (`IV`).","nodes":[{"pos":[0,80],"content":"The cryptographic algorithm to get the size of the initialization vector (<ph id=\"ph1\">`IV`</ph>).","source":"The cryptographic algorithm to get the size of the initialization vector (`IV`)."}],"pos":[12507,12588],"yaml":true},{"content":"The size, in bits, of the initialization vector (`IV`) that is required for the cryptographic algorithm specified in the <code>algorithm</code> parameter.","nodes":[{"pos":[0,154],"content":"The size, in bits, of the initialization vector (<ph id=\"ph1\">`IV`</ph>) that is required for the cryptographic algorithm specified in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">algorithm</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","source":"The size, in bits, of the initialization vector (`IV`) that is required for the cryptographic algorithm specified in the <code>algorithm</code> parameter."}],"pos":[12644,12799],"yaml":true},{"content":"When overridden in a derived class, gets an instance of the specified keyed hash algorithm.","nodes":[{"pos":[0,91],"content":"When overridden in a derived class, gets an instance of the specified keyed hash algorithm.","nodes":[{"content":"When overridden in a derived class, gets an instance of the specified keyed hash algorithm.","pos":[0,91]}]}],"pos":[14046,14138],"yaml":true},{"content":"Use the fields that represent keyed hash algorithms in the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.","nodes":[{"pos":[0,144],"content":"Use the fields that represent keyed hash algorithms in the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.","nodes":[{"content":"Use the fields that represent keyed hash algorithms in the <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms&gt;</ph> class to specify the algorithm.","pos":[0,144],"source":"Use the fields that represent keyed hash algorithms in the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm."}]}],"pos":[14149,14294],"yaml":true,"extradata":"MT"},{"content":"The keyed hash algorithm to get an instance of.","nodes":[{"pos":[0,47],"content":"The keyed hash algorithm to get an instance of.","nodes":[{"content":"The keyed hash algorithm to get an instance of.","pos":[0,47]}]}],"pos":[14504,14552],"yaml":true},{"content":"A <xref href=\"System.Security.Cryptography.KeyedHashAlgorithm\"></xref> that represents the keyed hash algorithm.","nodes":[{"pos":[0,112],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.KeyedHashAlgorithm\"&gt;&lt;/xref&gt;</ph> that represents the keyed hash algorithm.","source":"A <xref href=\"System.Security.Cryptography.KeyedHashAlgorithm\"></xref> that represents the keyed hash algorithm."}],"pos":[14643,14756],"yaml":true},{"content":"When overridden in a derived class, gets an instance of the specified symmetric algorithm.","nodes":[{"pos":[0,90],"content":"When overridden in a derived class, gets an instance of the specified symmetric algorithm.","nodes":[{"content":"When overridden in a derived class, gets an instance of the specified symmetric algorithm.","pos":[0,90]}]}],"pos":[16015,16106],"yaml":true},{"content":"Use the fields that represent symmetric algorithms in the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.","nodes":[{"pos":[0,143],"content":"Use the fields that represent symmetric algorithms in the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.","nodes":[{"content":"Use the fields that represent symmetric algorithms in the <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms&gt;</ph> class to specify the algorithm.","pos":[0,143],"source":"Use the fields that represent symmetric algorithms in the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm."}]}],"pos":[16117,16261],"yaml":true,"extradata":"MT"},{"content":"The symmetric algorithm to get an instance of.","nodes":[{"pos":[0,46],"content":"The symmetric algorithm to get an instance of.","nodes":[{"content":"The symmetric algorithm to get an instance of.","pos":[0,46]}]}],"pos":[16471,16518],"yaml":true},{"content":"A <xref href=\"System.Security.Cryptography.SymmetricAlgorithm\"></xref> that represents the symmetric algorithm.","nodes":[{"pos":[0,111],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.SymmetricAlgorithm\"&gt;&lt;/xref&gt;</ph> that represents the symmetric algorithm.","source":"A <xref href=\"System.Security.Cryptography.SymmetricAlgorithm\"></xref> that represents the symmetric algorithm."}],"pos":[16609,16721],"yaml":true},{"content":"When overridden in a derived class, gets the bytes that represent the symmetric key.","nodes":[{"pos":[0,84],"content":"When overridden in a derived class, gets the bytes that represent the symmetric key.","nodes":[{"content":"When overridden in a derived class, gets the bytes that represent the symmetric key.","pos":[0,84]}]}],"pos":[17881,17966],"yaml":true},{"content":"An array of <xref href=\"System.Byte\"></xref> that contains the symmetric key.","nodes":[{"pos":[0,77],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> that contains the symmetric key.","source":"An array of <xref href=\"System.Byte\"></xref> that contains the symmetric key."}],"pos":[18108,18186],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.IdentityModel.Tokens.SymmetricSecurityKey\n  commentId: T:System.IdentityModel.Tokens.SymmetricSecurityKey\n  id: SymmetricSecurityKey\n  children:\n  - System.IdentityModel.Tokens.SymmetricSecurityKey.#ctor\n  - System.IdentityModel.Tokens.SymmetricSecurityKey.GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)\n  - System.IdentityModel.Tokens.SymmetricSecurityKey.GetDecryptionTransform(System.String,System.Byte[])\n  - System.IdentityModel.Tokens.SymmetricSecurityKey.GetEncryptionTransform(System.String,System.Byte[])\n  - System.IdentityModel.Tokens.SymmetricSecurityKey.GetIVSize(System.String)\n  - System.IdentityModel.Tokens.SymmetricSecurityKey.GetKeyedHashAlgorithm(System.String)\n  - System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricAlgorithm(System.String)\n  - System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricKey\n  langs:\n  - csharp\n  name: SymmetricSecurityKey\n  nameWithType: SymmetricSecurityKey\n  fullName: System.IdentityModel.Tokens.SymmetricSecurityKey\n  type: Class\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Represents the abstract base class for all keys that are generated using symmetric algorithms.\n  remarks: Typically, this class is used by the infrastructure to transform XML using a symmetric key.\n  syntax:\n    content: 'public abstract class SymmetricSecurityKey : System.IdentityModel.Tokens.SecurityKey'\n  inheritance:\n  - System.Object\n  - System.IdentityModel.Tokens.SecurityKey\n  derivedClasses:\n  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  implements: []\n  inheritedMembers:\n  - System.IdentityModel.Tokens.SecurityKey.DecryptKey(System.String,System.Byte[])\n  - System.IdentityModel.Tokens.SecurityKey.EncryptKey(System.String,System.Byte[])\n  - System.IdentityModel.Tokens.SecurityKey.IsAsymmetricAlgorithm(System.String)\n  - System.IdentityModel.Tokens.SecurityKey.IsSupportedAlgorithm(System.String)\n  - System.IdentityModel.Tokens.SecurityKey.IsSymmetricAlgorithm(System.String)\n  - System.IdentityModel.Tokens.SecurityKey.KeySize\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SymmetricSecurityKey.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.#ctor\n  commentId: M:System.IdentityModel.Tokens.SymmetricSecurityKey.#ctor\n  id: '#ctor'\n  parent: System.IdentityModel.Tokens.SymmetricSecurityKey\n  langs:\n  - csharp\n  name: SymmetricSecurityKey()\n  nameWithType: SymmetricSecurityKey.SymmetricSecurityKey()\n  fullName: SymmetricSecurityKey.SymmetricSecurityKey()\n  type: Constructor\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.SymmetricSecurityKey\"></xref> class.\n  syntax:\n    content: protected SymmetricSecurityKey ();\n    parameters: []\n  overload: System.IdentityModel.Tokens.SymmetricSecurityKey.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SymmetricSecurityKey.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.IdentityModel.Tokens.SymmetricSecurityKey.GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)\n  id: GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)\n  parent: System.IdentityModel.Tokens.SymmetricSecurityKey\n  langs:\n  - csharp\n  name: GenerateDerivedKey(String, Byte[], Byte[], Int32, Int32)\n  nameWithType: SymmetricSecurityKey.GenerateDerivedKey(String, Byte[], Byte[], Int32, Int32)\n  fullName: SymmetricSecurityKey.GenerateDerivedKey(String, Byte[], Byte[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: When overridden in a derived class, generates a derived key using the specified cryptographic algorithm and parameters for the current key.\n  remarks: To specify P-SHA1 as the cryptographic algorithm, use the <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation> field.\n  syntax:\n    content: public abstract byte[] GenerateDerivedKey (string algorithm, byte[] label, byte[] nonce, int derivedKeyLength, int offset);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: A URI that represents the cryptographic algorithm to use to generate the derived key.\n    - id: label\n      type: System.Byte[]\n      description: An array of <xref href=\"System.Byte\"></xref> that contains the label parameter for the cryptographic algorithm.\n    - id: nonce\n      type: System.Byte[]\n      description: An array of <xref href=\"System.Byte\"></xref> that contains the nonce that is used to create a derived key.\n    - id: derivedKeyLength\n      type: System.Int32\n      description: The size of the derived key.\n    - id: offset\n      type: System.Int32\n      description: The position at which the derived key is located in the byte array that is returned from this method.\n    return:\n      type: System.Byte[]\n      description: An array of <xref href=\"System.Byte\"></xref> that contains the derived key.\n  overload: System.IdentityModel.Tokens.SymmetricSecurityKey.GenerateDerivedKey*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SymmetricSecurityKey.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetDecryptionTransform(System.String,System.Byte[])\n  commentId: M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetDecryptionTransform(System.String,System.Byte[])\n  id: GetDecryptionTransform(System.String,System.Byte[])\n  parent: System.IdentityModel.Tokens.SymmetricSecurityKey\n  langs:\n  - csharp\n  name: GetDecryptionTransform(String, Byte[])\n  nameWithType: SymmetricSecurityKey.GetDecryptionTransform(String, Byte[])\n  fullName: SymmetricSecurityKey.GetDecryptionTransform(String, Byte[])\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: When overridden in a derived class, gets a transform that decrypts cipher text using the specified cryptographic algorithm.\n  remarks: Use the fields that represent decryption algorithms in the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.\n  syntax:\n    content: public abstract System.Security.Cryptography.ICryptoTransform GetDecryptionTransform (string algorithm, byte[] iv);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: A cryptographic algorithm that decrypts cipher text, such as encrypted XML.\n    - id: iv\n      type: System.Byte[]\n      description: An array of <xref href=\"System.Byte\"></xref> that contains the initialization vector (`IV`) for the specified algorithm.\n    return:\n      type: System.Security.Cryptography.ICryptoTransform\n      description: An <xref href=\"System.Security.Cryptography.ICryptoTransform\"></xref> that represents the decryption transform.\n  overload: System.IdentityModel.Tokens.SymmetricSecurityKey.GetDecryptionTransform*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SymmetricSecurityKey.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetEncryptionTransform(System.String,System.Byte[])\n  commentId: M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetEncryptionTransform(System.String,System.Byte[])\n  id: GetEncryptionTransform(System.String,System.Byte[])\n  parent: System.IdentityModel.Tokens.SymmetricSecurityKey\n  langs:\n  - csharp\n  name: GetEncryptionTransform(String, Byte[])\n  nameWithType: SymmetricSecurityKey.GetEncryptionTransform(String, Byte[])\n  fullName: SymmetricSecurityKey.GetEncryptionTransform(String, Byte[])\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: When overridden in a derived class, gets a transform that encrypts XML using the specified cryptographic algorithm.\n  remarks: Use the fields that represent decryption algorithms in the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.\n  syntax:\n    content: public abstract System.Security.Cryptography.ICryptoTransform GetEncryptionTransform (string algorithm, byte[] iv);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: A cryptographic algorithm that encrypts XML.\n    - id: iv\n      type: System.Byte[]\n      description: An array of <xref href=\"System.Byte\"></xref> that contains the initialization vector (`IV`) for the specified algorithm.\n    return:\n      type: System.Security.Cryptography.ICryptoTransform\n      description: An <xref href=\"System.Security.Cryptography.ICryptoTransform\"></xref> that represents the encryption transform.\n  overload: System.IdentityModel.Tokens.SymmetricSecurityKey.GetEncryptionTransform*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SymmetricSecurityKey.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetIVSize(System.String)\n  commentId: M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetIVSize(System.String)\n  id: GetIVSize(System.String)\n  parent: System.IdentityModel.Tokens.SymmetricSecurityKey\n  langs:\n  - csharp\n  name: GetIVSize(String)\n  nameWithType: SymmetricSecurityKey.GetIVSize(String)\n  fullName: SymmetricSecurityKey.GetIVSize(String)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: When overridden in a derived class, gets the size, in bits, of the initialization vector (`IV`) that is required for the specified cryptographic algorithm.\n  syntax:\n    content: public abstract int GetIVSize (string algorithm);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: The cryptographic algorithm to get the size of the initialization vector (`IV`).\n    return:\n      type: System.Int32\n      description: The size, in bits, of the initialization vector (`IV`) that is required for the cryptographic algorithm specified in the <code>algorithm</code> parameter.\n  overload: System.IdentityModel.Tokens.SymmetricSecurityKey.GetIVSize*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SymmetricSecurityKey.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetKeyedHashAlgorithm(System.String)\n  commentId: M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetKeyedHashAlgorithm(System.String)\n  id: GetKeyedHashAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.SymmetricSecurityKey\n  langs:\n  - csharp\n  name: GetKeyedHashAlgorithm(String)\n  nameWithType: SymmetricSecurityKey.GetKeyedHashAlgorithm(String)\n  fullName: SymmetricSecurityKey.GetKeyedHashAlgorithm(String)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: When overridden in a derived class, gets an instance of the specified keyed hash algorithm.\n  remarks: Use the fields that represent keyed hash algorithms in the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.\n  syntax:\n    content: public abstract System.Security.Cryptography.KeyedHashAlgorithm GetKeyedHashAlgorithm (string algorithm);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: The keyed hash algorithm to get an instance of.\n    return:\n      type: System.Security.Cryptography.KeyedHashAlgorithm\n      description: A <xref href=\"System.Security.Cryptography.KeyedHashAlgorithm\"></xref> that represents the keyed hash algorithm.\n  overload: System.IdentityModel.Tokens.SymmetricSecurityKey.GetKeyedHashAlgorithm*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SymmetricSecurityKey.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricAlgorithm(System.String)\n  commentId: M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricAlgorithm(System.String)\n  id: GetSymmetricAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.SymmetricSecurityKey\n  langs:\n  - csharp\n  name: GetSymmetricAlgorithm(String)\n  nameWithType: SymmetricSecurityKey.GetSymmetricAlgorithm(String)\n  fullName: SymmetricSecurityKey.GetSymmetricAlgorithm(String)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: When overridden in a derived class, gets an instance of the specified symmetric algorithm.\n  remarks: Use the fields that represent symmetric algorithms in the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.\n  syntax:\n    content: public abstract System.Security.Cryptography.SymmetricAlgorithm GetSymmetricAlgorithm (string algorithm);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: The symmetric algorithm to get an instance of.\n    return:\n      type: System.Security.Cryptography.SymmetricAlgorithm\n      description: A <xref href=\"System.Security.Cryptography.SymmetricAlgorithm\"></xref> that represents the symmetric algorithm.\n  overload: System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricAlgorithm*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SymmetricSecurityKey.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricKey\n  commentId: M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricKey\n  id: GetSymmetricKey\n  parent: System.IdentityModel.Tokens.SymmetricSecurityKey\n  langs:\n  - csharp\n  name: GetSymmetricKey()\n  nameWithType: SymmetricSecurityKey.GetSymmetricKey()\n  fullName: SymmetricSecurityKey.GetSymmetricKey()\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: When overridden in a derived class, gets the bytes that represent the symmetric key.\n  syntax:\n    content: public abstract byte[] GetSymmetricKey ();\n    parameters: []\n    return:\n      type: System.Byte[]\n      description: An array of <xref href=\"System.Byte\"></xref> that contains the symmetric key.\n  overload: System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricKey*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SymmetricSecurityKey.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\nreferences:\n- uid: System.IdentityModel.Tokens.SecurityKey\n  parent: System.IdentityModel.Tokens\n  isExternal: false\n  name: SecurityKey\n  nameWithType: SecurityKey\n  fullName: System.IdentityModel.Tokens.SecurityKey\n- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.#ctor\n  parent: System.IdentityModel.Tokens.SymmetricSecurityKey\n  isExternal: false\n  name: SymmetricSecurityKey()\n  nameWithType: SymmetricSecurityKey.SymmetricSecurityKey()\n  fullName: SymmetricSecurityKey.SymmetricSecurityKey()\n- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)\n  parent: System.IdentityModel.Tokens.SymmetricSecurityKey\n  isExternal: false\n  name: GenerateDerivedKey(String, Byte[], Byte[], Int32, Int32)\n  nameWithType: SymmetricSecurityKey.GenerateDerivedKey(String, Byte[], Byte[], Int32, Int32)\n  fullName: SymmetricSecurityKey.GenerateDerivedKey(String, Byte[], Byte[], Int32, Int32)\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetDecryptionTransform(System.String,System.Byte[])\n  parent: System.IdentityModel.Tokens.SymmetricSecurityKey\n  isExternal: false\n  name: GetDecryptionTransform(String, Byte[])\n  nameWithType: SymmetricSecurityKey.GetDecryptionTransform(String, Byte[])\n  fullName: SymmetricSecurityKey.GetDecryptionTransform(String, Byte[])\n- uid: System.Security.Cryptography.ICryptoTransform\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ICryptoTransform\n  nameWithType: ICryptoTransform\n  fullName: System.Security.Cryptography.ICryptoTransform\n- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetEncryptionTransform(System.String,System.Byte[])\n  parent: System.IdentityModel.Tokens.SymmetricSecurityKey\n  isExternal: false\n  name: GetEncryptionTransform(String, Byte[])\n  nameWithType: SymmetricSecurityKey.GetEncryptionTransform(String, Byte[])\n  fullName: SymmetricSecurityKey.GetEncryptionTransform(String, Byte[])\n- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetIVSize(System.String)\n  parent: System.IdentityModel.Tokens.SymmetricSecurityKey\n  isExternal: false\n  name: GetIVSize(String)\n  nameWithType: SymmetricSecurityKey.GetIVSize(String)\n  fullName: SymmetricSecurityKey.GetIVSize(String)\n- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetKeyedHashAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.SymmetricSecurityKey\n  isExternal: false\n  name: GetKeyedHashAlgorithm(String)\n  nameWithType: SymmetricSecurityKey.GetKeyedHashAlgorithm(String)\n  fullName: SymmetricSecurityKey.GetKeyedHashAlgorithm(String)\n- uid: System.Security.Cryptography.KeyedHashAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: KeyedHashAlgorithm\n  nameWithType: KeyedHashAlgorithm\n  fullName: System.Security.Cryptography.KeyedHashAlgorithm\n- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.SymmetricSecurityKey\n  isExternal: false\n  name: GetSymmetricAlgorithm(String)\n  nameWithType: SymmetricSecurityKey.GetSymmetricAlgorithm(String)\n  fullName: SymmetricSecurityKey.GetSymmetricAlgorithm(String)\n- uid: System.Security.Cryptography.SymmetricAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: SymmetricAlgorithm\n  nameWithType: SymmetricAlgorithm\n  fullName: System.Security.Cryptography.SymmetricAlgorithm\n- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricKey\n  parent: System.IdentityModel.Tokens.SymmetricSecurityKey\n  isExternal: false\n  name: GetSymmetricKey()\n  nameWithType: SymmetricSecurityKey.GetSymmetricKey()\n  fullName: SymmetricSecurityKey.GetSymmetricKey()\n- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.#ctor*\n  parent: System.IdentityModel.Tokens.SymmetricSecurityKey\n  isExternal: false\n  name: SymmetricSecurityKey\n  nameWithType: SymmetricSecurityKey.SymmetricSecurityKey\n  fullName: SymmetricSecurityKey.SymmetricSecurityKey\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SymmetricSecurityKey.xml\n- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GenerateDerivedKey*\n  parent: System.IdentityModel.Tokens.SymmetricSecurityKey\n  isExternal: false\n  name: GenerateDerivedKey\n  nameWithType: SymmetricSecurityKey.GenerateDerivedKey\n  fullName: SymmetricSecurityKey.GenerateDerivedKey\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SymmetricSecurityKey.xml\n- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetDecryptionTransform*\n  parent: System.IdentityModel.Tokens.SymmetricSecurityKey\n  isExternal: false\n  name: GetDecryptionTransform\n  nameWithType: SymmetricSecurityKey.GetDecryptionTransform\n  fullName: SymmetricSecurityKey.GetDecryptionTransform\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SymmetricSecurityKey.xml\n- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetEncryptionTransform*\n  parent: System.IdentityModel.Tokens.SymmetricSecurityKey\n  isExternal: false\n  name: GetEncryptionTransform\n  nameWithType: SymmetricSecurityKey.GetEncryptionTransform\n  fullName: SymmetricSecurityKey.GetEncryptionTransform\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SymmetricSecurityKey.xml\n- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetIVSize*\n  parent: System.IdentityModel.Tokens.SymmetricSecurityKey\n  isExternal: false\n  name: GetIVSize\n  nameWithType: SymmetricSecurityKey.GetIVSize\n  fullName: SymmetricSecurityKey.GetIVSize\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SymmetricSecurityKey.xml\n- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetKeyedHashAlgorithm*\n  parent: System.IdentityModel.Tokens.SymmetricSecurityKey\n  isExternal: false\n  name: GetKeyedHashAlgorithm\n  nameWithType: SymmetricSecurityKey.GetKeyedHashAlgorithm\n  fullName: SymmetricSecurityKey.GetKeyedHashAlgorithm\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SymmetricSecurityKey.xml\n- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricAlgorithm*\n  parent: System.IdentityModel.Tokens.SymmetricSecurityKey\n  isExternal: false\n  name: GetSymmetricAlgorithm\n  nameWithType: SymmetricSecurityKey.GetSymmetricAlgorithm\n  fullName: SymmetricSecurityKey.GetSymmetricAlgorithm\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SymmetricSecurityKey.xml\n- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricKey*\n  parent: System.IdentityModel.Tokens.SymmetricSecurityKey\n  isExternal: false\n  name: GetSymmetricKey\n  nameWithType: SymmetricSecurityKey.GetSymmetricKey\n  fullName: SymmetricSecurityKey.GetSymmetricKey\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/SymmetricSecurityKey.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.IdentityModel.Tokens.SecurityKey.DecryptKey(System.String,System.Byte[])\n  parent: System.IdentityModel.Tokens.SecurityKey\n  isExternal: false\n  name: DecryptKey(String, Byte[])\n  nameWithType: SecurityKey.DecryptKey(String, Byte[])\n  fullName: SecurityKey.DecryptKey(String, Byte[])\n- uid: System.IdentityModel.Tokens.SecurityKey.EncryptKey(System.String,System.Byte[])\n  parent: System.IdentityModel.Tokens.SecurityKey\n  isExternal: false\n  name: EncryptKey(String, Byte[])\n  nameWithType: SecurityKey.EncryptKey(String, Byte[])\n  fullName: SecurityKey.EncryptKey(String, Byte[])\n- uid: System.IdentityModel.Tokens.SecurityKey.IsAsymmetricAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.SecurityKey\n  isExternal: false\n  name: IsAsymmetricAlgorithm(String)\n  nameWithType: SecurityKey.IsAsymmetricAlgorithm(String)\n  fullName: SecurityKey.IsAsymmetricAlgorithm(String)\n- uid: System.IdentityModel.Tokens.SecurityKey.IsSupportedAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.SecurityKey\n  isExternal: false\n  name: IsSupportedAlgorithm(String)\n  nameWithType: SecurityKey.IsSupportedAlgorithm(String)\n  fullName: SecurityKey.IsSupportedAlgorithm(String)\n- uid: System.IdentityModel.Tokens.SecurityKey.IsSymmetricAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.SecurityKey\n  isExternal: false\n  name: IsSymmetricAlgorithm(String)\n  nameWithType: SecurityKey.IsSymmetricAlgorithm(String)\n  fullName: SecurityKey.IsSymmetricAlgorithm(String)\n- uid: System.IdentityModel.Tokens.SecurityKey.KeySize\n  parent: System.IdentityModel.Tokens.SecurityKey\n  isExternal: false\n  name: KeySize\n  nameWithType: SecurityKey.KeySize\n  fullName: SecurityKey.KeySize\n"}