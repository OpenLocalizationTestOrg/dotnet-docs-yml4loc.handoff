{"nodes":[{"content":"Represents a UTF-7 encoding of Unicode characters.","nodes":[{"pos":[0,50],"content":"Represents a UTF-7 encoding of Unicode characters.","nodes":[{"content":"Represents a UTF-7 encoding of Unicode characters.","pos":[0,50]}]}],"pos":[1692,1743],"yaml":true},{"content":"Encoding is the process of transforming a set of Unicode characters into a sequence of bytes. Decoding is the process of transforming a sequence of encoded bytes into a set of Unicode characters.  \n  \n The UTF-7 encoding represents Unicode characters as sequences of 7-bit ASCII characters. This encoding supports certain protocols for which it is required, most often e-mail or newsgroup protocols. Since UTF-7 is not particularly secure or robust, and most modern systems allow 8-bit encodings, UTF-8 should normally be preferred to UTF-7.  \n  \n> [!NOTE]\n>  <xref:System.Text.UTF7Encoding> does not provide error detection. For security reasons, the application should use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.  \n  \n For more information about the UTFs and other encodings supported by <xref:System.Text>, see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md).  \n  \n The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.UTF7Encoding.GetBytes%2A> method performs the actual encoding.  \n  \n Likewise, the <xref:System.Text.UTF7Encoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.UTF7Encoding.GetChars%2A> and <xref:System.Text.UTF7Encoding.GetString%2A> methods perform the actual decoding.  \n  \n <xref:System.Text.UTF7Encoding> corresponds to the Windows code page 65000.  \n  \n> [!NOTE]\n>  The state of a UTF-7 encoded object is not preserved if the object is serialized and deserialized using different .NET Framework versions.","nodes":[{"pos":[0,195],"content":"Encoding is the process of transforming a set of Unicode characters into a sequence of bytes. Decoding is the process of transforming a sequence of encoded bytes into a set of Unicode characters.","nodes":[{"content":"Encoding is the process of transforming a set of Unicode characters into a sequence of bytes. Decoding is the process of transforming a sequence of encoded bytes into a set of Unicode characters.","pos":[0,195],"nodes":[{"content":"Encoding is the process of transforming a set of Unicode characters into a sequence of bytes.","pos":[0,93]},{"content":"Decoding is the process of transforming a sequence of encoded bytes into a set of Unicode characters.","pos":[94,195]}]}]},{"pos":[202,541],"content":"The UTF-7 encoding represents Unicode characters as sequences of 7-bit ASCII characters. This encoding supports certain protocols for which it is required, most often e-mail or newsgroup protocols. Since UTF-7 is not particularly secure or robust, and most modern systems allow 8-bit encodings, UTF-8 should normally be preferred to UTF-7.","nodes":[{"content":"The UTF-7 encoding represents Unicode characters as sequences of 7-bit ASCII characters. This encoding supports certain protocols for which it is required, most often e-mail or newsgroup protocols. Since UTF-7 is not particularly secure or robust, and most modern systems allow 8-bit encodings, UTF-8 should normally be preferred to UTF-7.","pos":[0,339],"nodes":[{"content":"The UTF-7 encoding represents Unicode characters as sequences of 7-bit ASCII characters.","pos":[0,88]},{"content":"This encoding supports certain protocols for which it is required, most often e-mail or newsgroup protocols.","pos":[89,197]},{"content":"Since UTF-7 is not particularly secure or robust, and most modern systems allow 8-bit encodings, UTF-8 should normally be preferred to UTF-7.","pos":[198,339]}]}]},{"pos":[549,807],"content":"[!NOTE]\n <xref:System.Text.UTF7Encoding> does not provide error detection. For security reasons, the application should use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.","leadings":["","> "],"nodes":[{"content":" <xref:System.Text.UTF7Encoding> does not provide error detection. For security reasons, the application should use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.","pos":[8,256],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding&gt;</ph> does not provide error detection.","pos":[1,66],"source":" <xref:System.Text.UTF7Encoding> does not provide error detection."},{"content":"For security reasons, the application should use <ph id=\"ph1\">&lt;xref:System.Text.UTF8Encoding&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Text.UTF32Encoding&gt;</ph> and enable error detection.","pos":[67,248],"source":" For security reasons, the application should use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection."}]}]},{"pos":[814,1000],"content":"For more information about the UTFs and other encodings supported by <ph id=\"ph1\">&lt;xref:System.Text&gt;</ph>, see <bpt id=\"p1\">[</bpt>Character Encoding in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/character-encoding.md)</ept>.","source":"For more information about the UTFs and other encodings supported by <xref:System.Text>, see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md)."},{"pos":[1007,1228],"content":"The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.UTF7Encoding.GetBytes%2A> method performs the actual encoding.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding.GetByteCount%2A&gt;</ph> method determines how many bytes result in encoding a set of Unicode characters, and the <ph id=\"ph2\">&lt;xref:System.Text.UTF7Encoding.GetBytes%2A&gt;</ph> method performs the actual encoding.","pos":[0,221],"source":"The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.UTF7Encoding.GetBytes%2A> method performs the actual encoding."}]},{"pos":[1235,1512],"content":"Likewise, the <xref:System.Text.UTF7Encoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.UTF7Encoding.GetChars%2A> and <xref:System.Text.UTF7Encoding.GetString%2A> methods perform the actual decoding.","nodes":[{"content":"Likewise, the <ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding.GetCharCount%2A&gt;</ph> method determines how many characters result in decoding a sequence of bytes, and the <ph id=\"ph2\">&lt;xref:System.Text.UTF7Encoding.GetChars%2A&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Text.UTF7Encoding.GetString%2A&gt;</ph> methods perform the actual decoding.","pos":[0,277],"source":"Likewise, the <xref:System.Text.UTF7Encoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.UTF7Encoding.GetChars%2A> and <xref:System.Text.UTF7Encoding.GetString%2A> methods perform the actual decoding."}]},{"pos":[1519,1594],"content":"<xref:System.Text.UTF7Encoding> corresponds to the Windows code page 65000.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding&gt;</ph> corresponds to the Windows code page 65000.","pos":[0,75],"source":"<xref:System.Text.UTF7Encoding> corresponds to the Windows code page 65000."}]},{"pos":[1602,1751],"content":"[!NOTE]\n The state of a UTF-7 encoded object is not preserved if the object is serialized and deserialized using different .NET Framework versions.","leadings":["","> "],"nodes":[{"content":"The state of a UTF-7 encoded object is not preserved if the object is serialized and deserialized using different .NET Framework versions.","pos":[9,147]}]}],"pos":[1754,3524],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Text.UTF7Encoding\"></xref> class.","nodes":[{"pos":[0,86],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Text.UTF7Encoding\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Text.UTF7Encoding\"></xref> class."}],"pos":[8304,8391],"yaml":true},{"content":"This constructor creates an instance that does not allow optional characters. Calling the <xref:System.Text.UTF7Encoding.%23ctor%2A> constructor is equivalent to calling the <xref:System.Text.UTF7Encoding.%23ctor%28System.Boolean%29?displayProperty=fullName> constructor that takes an `allowOptionals` parameter and specifying `false` for that parameter.  \n  \n If an instance allows optional characters, Unicode code points are encoded with a corresponding optional character instead of a modified base 64 character. The optional characters are exclamation point (\"!\"), backward slash (\"\\\\\"), vertical line (\"&#124;\"), double quote (\"\"\"), number sign (\"#\"), dollar sign (\"$\"), percent sign (\"%\"), ampersand (\"&\"), asterisk (\"*\"), semicolon (\";\"), left angle bracket (\"\\<\"), right angle bracket (\">\"), left curly bracket (\"{\"), right curly bracket (\"}\"), left square bracket (\"[\"), right square bracket (\"]\"), equal sign (\"=\"), at sign (\"@\"), circumflex accent (\"^\"), underscore (\"_\"), and grave accent (\"`\").  \n  \n> [!NOTE]\n>  <xref:System.Text.UTF7Encoding> does not provide error detection. For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.","nodes":[{"pos":[0,354],"content":"This constructor creates an instance that does not allow optional characters. Calling the <xref:System.Text.UTF7Encoding.%23ctor%2A> constructor is equivalent to calling the <xref:System.Text.UTF7Encoding.%23ctor%28System.Boolean%29?displayProperty=fullName> constructor that takes an `allowOptionals` parameter and specifying `false` for that parameter.","nodes":[{"content":"This constructor creates an instance that does not allow optional characters.","pos":[0,77]},{"content":"Calling the <ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding.%23ctor%2A&gt;</ph> constructor is equivalent to calling the <ph id=\"ph2\">&lt;xref:System.Text.UTF7Encoding.%23ctor%28System.Boolean%29?displayProperty=fullName&gt;</ph> constructor that takes an <ph id=\"ph3\">`allowOptionals`</ph> parameter and specifying <ph id=\"ph4\">`false`</ph> for that parameter.","pos":[78,354],"source":" Calling the <xref:System.Text.UTF7Encoding.%23ctor%2A> constructor is equivalent to calling the <xref:System.Text.UTF7Encoding.%23ctor%28System.Boolean%29?displayProperty=fullName> constructor that takes an `allowOptionals` parameter and specifying `false` for that parameter."}]},{"pos":[361,1008],"content":"If an instance allows optional characters, Unicode code points are encoded with a corresponding optional character instead of a modified base 64 character. The optional characters are exclamation point (\"!\"), backward slash (\"\\\\\"), vertical line (\"&#124;\"), double quote (\"\"\"), number sign (\"#\"), dollar sign (\"$\"), percent sign (\"%\"), ampersand (\"&\"), asterisk (\"*\"), semicolon (\";\"), left angle bracket (\"\\<\"), right angle bracket (\">\"), left curly bracket (\"{\"), right curly bracket (\"}\"), left square bracket (\"[\"), right square bracket (\"]\"), equal sign (\"=\"), at sign (\"@\"), circumflex accent (\"^\"), underscore (\"_\"), and grave accent (\"`\").","nodes":[{"content":"If an instance allows optional characters, Unicode code points are encoded with a corresponding optional character instead of a modified base 64 character. The optional characters are exclamation point (\"!\"), backward slash (\"\\\\\"), vertical line (\"&#124;\"), double quote (\"\"\"), number sign (\"#\"), dollar sign (\"$\"), percent sign (\"%\"), ampersand (\"&\"), asterisk (\"*\"), semicolon (\";\"), left angle bracket (\"\\<\"), right angle bracket (\">\"), left curly bracket (\"{\"), right curly bracket (\"}\"), left square bracket (\"[\"), right square bracket (\"]\"), equal sign (\"=\"), at sign (\"@\"), circumflex accent (\"^\"), underscore (\"_\"), and grave accent (\"`\").","pos":[0,647],"nodes":[{"content":"If an instance allows optional characters, Unicode code points are encoded with a corresponding optional character instead of a modified base 64 character.","pos":[0,155]},{"content":"The optional characters are exclamation point (\"!\"), backward slash (\"<ph id=\"ph1\">\\\\</ph>\"), vertical line (\"&amp;#124;\"), double quote (\"\"\"), number sign (\"#\"), dollar sign (\"$\"), percent sign (\"%\"), ampersand (\"&amp;\"), asterisk (\"*\"), semicolon (\";\"), left angle bracket (\"<ph id=\"ph2\">\\&lt;</ph>\"), right angle bracket (\"&gt;\"), left curly bracket (\"{\"), right curly bracket (\"}\"), left square bracket (\"[\"), right square bracket (\"]\"), equal sign (\"=\"), at sign (\"@\"), circumflex accent (\"^\"), underscore (\"_\"), and grave accent (\"`\").","pos":[156,647],"source":" The optional characters are exclamation point (\"!\"), backward slash (\"\\\\\"), vertical line (\"&#124;\"), double quote (\"\"\"), number sign (\"#\"), dollar sign (\"$\"), percent sign (\"%\"), ampersand (\"&\"), asterisk (\"*\"), semicolon (\";\"), left angle bracket (\"\\<\"), right angle bracket (\">\"), left curly bracket (\"{\"), right curly bracket (\"}\"), left square bracket (\"[\"), right square bracket (\"]\"), equal sign (\"=\"), at sign (\"@\"), circumflex accent (\"^\"), underscore (\"_\"), and grave accent (\"`\")."}]}]},{"pos":[1016,1288],"content":"[!NOTE]\n <xref:System.Text.UTF7Encoding> does not provide error detection. For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.","leadings":["","> "],"nodes":[{"content":" <xref:System.Text.UTF7Encoding> does not provide error detection. For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.","pos":[8,270],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding&gt;</ph> does not provide error detection.","pos":[1,66],"source":" <xref:System.Text.UTF7Encoding> does not provide error detection."},{"content":"For security reasons, your applications are recommended to use <ph id=\"ph1\">&lt;xref:System.Text.UTF8Encoding&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Text.UTF32Encoding&gt;</ph> and enable error detection.","pos":[67,262],"source":" For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection."}]}]}],"pos":[8402,9744],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Text.UTF7Encoding\"></xref> class. A parameter specifies whether to allow optional characters.","nodes":[{"pos":[0,146],"content":"Initializes a new instance of the <xref href=\"System.Text.UTF7Encoding\"></xref> class. A parameter specifies whether to allow optional characters.","nodes":[{"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Text.UTF7Encoding\"&gt;&lt;/xref&gt;</ph> class.","pos":[0,86],"source":"Initializes a new instance of the <xref href=\"System.Text.UTF7Encoding\"></xref> class."},{"content":"A parameter specifies whether to allow optional characters.","pos":[87,146]}]}],"pos":[11882,12029],"yaml":true},{"content":"If an instance allows optional characters, Unicode code points are encoded with a corresponding optional character instead of a modified base 64 character. The optional characters are exclamation point (\"!\"), backward slash (\"\\\\\"), vertical line (\"&#124;\"), double quote (\"\"\"), number sign (\"#\"), dollar sign (\"$\"), percent sign (\"%\"), ampersand (\"&\"), asterisk (\"*\"), semicolon (\";\"), left angle bracket (\"\\<\"), right angle bracket (\">\"), left curly bracket (\"{\"), right curly bracket (\"}\"), left square bracket (\"[\"), right square bracket (\"]\"), equal sign (\"=\"), at sign (\"@\"), circumflex accent (\"^\"), underscore (\"_\"), and grave accent (\"`\").  \n  \n> [!NOTE]\n>  <xref:System.Text.UTF7Encoding> does not provide error detection. For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.","nodes":[{"pos":[0,647],"content":"If an instance allows optional characters, Unicode code points are encoded with a corresponding optional character instead of a modified base 64 character. The optional characters are exclamation point (\"!\"), backward slash (\"\\\\\"), vertical line (\"&#124;\"), double quote (\"\"\"), number sign (\"#\"), dollar sign (\"$\"), percent sign (\"%\"), ampersand (\"&\"), asterisk (\"*\"), semicolon (\";\"), left angle bracket (\"\\<\"), right angle bracket (\">\"), left curly bracket (\"{\"), right curly bracket (\"}\"), left square bracket (\"[\"), right square bracket (\"]\"), equal sign (\"=\"), at sign (\"@\"), circumflex accent (\"^\"), underscore (\"_\"), and grave accent (\"`\").","nodes":[{"content":"If an instance allows optional characters, Unicode code points are encoded with a corresponding optional character instead of a modified base 64 character. The optional characters are exclamation point (\"!\"), backward slash (\"\\\\\"), vertical line (\"&#124;\"), double quote (\"\"\"), number sign (\"#\"), dollar sign (\"$\"), percent sign (\"%\"), ampersand (\"&\"), asterisk (\"*\"), semicolon (\";\"), left angle bracket (\"\\<\"), right angle bracket (\">\"), left curly bracket (\"{\"), right curly bracket (\"}\"), left square bracket (\"[\"), right square bracket (\"]\"), equal sign (\"=\"), at sign (\"@\"), circumflex accent (\"^\"), underscore (\"_\"), and grave accent (\"`\").","pos":[0,647],"nodes":[{"content":"If an instance allows optional characters, Unicode code points are encoded with a corresponding optional character instead of a modified base 64 character.","pos":[0,155]},{"content":"The optional characters are exclamation point (\"!\"), backward slash (\"<ph id=\"ph1\">\\\\</ph>\"), vertical line (\"&amp;#124;\"), double quote (\"\"\"), number sign (\"#\"), dollar sign (\"$\"), percent sign (\"%\"), ampersand (\"&amp;\"), asterisk (\"*\"), semicolon (\";\"), left angle bracket (\"<ph id=\"ph2\">\\&lt;</ph>\"), right angle bracket (\"&gt;\"), left curly bracket (\"{\"), right curly bracket (\"}\"), left square bracket (\"[\"), right square bracket (\"]\"), equal sign (\"=\"), at sign (\"@\"), circumflex accent (\"^\"), underscore (\"_\"), and grave accent (\"`\").","pos":[156,647],"source":" The optional characters are exclamation point (\"!\"), backward slash (\"\\\\\"), vertical line (\"&#124;\"), double quote (\"\"\"), number sign (\"#\"), dollar sign (\"$\"), percent sign (\"%\"), ampersand (\"&\"), asterisk (\"*\"), semicolon (\";\"), left angle bracket (\"\\<\"), right angle bracket (\">\"), left curly bracket (\"{\"), right curly bracket (\"}\"), left square bracket (\"[\"), right square bracket (\"]\"), equal sign (\"=\"), at sign (\"@\"), circumflex accent (\"^\"), underscore (\"_\"), and grave accent (\"`\")."}]}]},{"pos":[655,927],"content":"[!NOTE]\n <xref:System.Text.UTF7Encoding> does not provide error detection. For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.","leadings":["","> "],"nodes":[{"content":" <xref:System.Text.UTF7Encoding> does not provide error detection. For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.","pos":[8,270],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding&gt;</ph> does not provide error detection.","pos":[1,66],"source":" <xref:System.Text.UTF7Encoding> does not provide error detection."},{"content":"For security reasons, your applications are recommended to use <ph id=\"ph1\">&lt;xref:System.Text.UTF8Encoding&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Text.UTF32Encoding&gt;</ph> and enable error detection.","pos":[67,262],"source":" For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection."}]}]}],"pos":[12040,13019],"yaml":true,"extradata":"MT"},{"content":"`true` to specify that optional characters are allowed; otherwise, `false`.","nodes":[{"pos":[0,75],"content":"<ph id=\"ph1\">`true`</ph> to specify that optional characters are allowed; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to specify that optional characters are allowed; otherwise, `false`."}],"pos":[13833,13911],"yaml":true},{"content":"Gets a value indicating whether the specified object is equal to the current <xref href=\"System.Text.UTF7Encoding\"></xref> object.","nodes":[{"pos":[0,130],"content":"Gets a value indicating whether the specified object is equal to the current <ph id=\"ph1\">&lt;xref href=\"System.Text.UTF7Encoding\"&gt;&lt;/xref&gt;</ph> object.","source":"Gets a value indicating whether the specified object is equal to the current <xref href=\"System.Text.UTF7Encoding\"></xref> object."}],"pos":[15313,15444],"yaml":true},{"content":"Two <xref:System.Text.UTF7Encoding> objects are equal if they both either allow or disallow optional characters, and if their underlying <xref:System.Text.Encoding.EncoderFallback%2A> and <xref:System.Text.Encoding.DecoderFallback%2A> properties are equal.","nodes":[{"pos":[0,256],"content":"Two <xref:System.Text.UTF7Encoding> objects are equal if they both either allow or disallow optional characters, and if their underlying <xref:System.Text.Encoding.EncoderFallback%2A> and <xref:System.Text.Encoding.DecoderFallback%2A> properties are equal.","nodes":[{"content":"Two <ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding&gt;</ph> objects are equal if they both either allow or disallow optional characters, and if their underlying <ph id=\"ph2\">&lt;xref:System.Text.Encoding.EncoderFallback%2A&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Text.Encoding.DecoderFallback%2A&gt;</ph> properties are equal.","pos":[0,256],"source":"Two <xref:System.Text.UTF7Encoding> objects are equal if they both either allow or disallow optional characters, and if their underlying <xref:System.Text.Encoding.EncoderFallback%2A> and <xref:System.Text.Encoding.DecoderFallback%2A> properties are equal."}]}],"pos":[15455,15712],"yaml":true,"extradata":"MT"},{"content":"An object to compare to the current <xref href=\"System.Text.UTF7Encoding\"></xref> object.","nodes":[{"pos":[0,89],"content":"An object to compare to the current <ph id=\"ph1\">&lt;xref href=\"System.Text.UTF7Encoding\"&gt;&lt;/xref&gt;</ph> object.","source":"An object to compare to the current <xref href=\"System.Text.UTF7Encoding\"></xref> object."}],"pos":[15923,16013],"yaml":true},{"content":"`true` if <code>value</code> is a <xref href=\"System.Text.UTF7Encoding\"></xref> object and is equal to the current <xref href=\"System.Text.UTF7Encoding\"></xref> object; otherwise, `false`.","nodes":[{"pos":[0,188],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is a <ph id=\"ph3\">&lt;xref href=\"System.Text.UTF7Encoding\"&gt;&lt;/xref&gt;</ph> object and is equal to the current <ph id=\"ph4\">&lt;xref href=\"System.Text.UTF7Encoding\"&gt;&lt;/xref&gt;</ph> object; otherwise, <ph id=\"ph5\">`false`</ph>.","source":"`true` if <code>value</code> is a <xref href=\"System.Text.UTF7Encoding\"></xref> object and is equal to the current <xref href=\"System.Text.UTF7Encoding\"></xref> object; otherwise, `false`."}],"pos":[16071,16262],"yaml":true},{"content":"Calculates the number of bytes produced by encoding the characters in the specified <xref href=\"System.String\"></xref> object.","nodes":[{"pos":[0,126],"content":"Calculates the number of bytes produced by encoding the characters in the specified <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> object.","source":"Calculates the number of bytes produced by encoding the characters in the specified <xref href=\"System.String\"></xref> object."}],"pos":[17776,17903],"yaml":true},{"content":"To calculate the exact array size that <xref:System.Text.UTF7Encoding.GetBytes%2A> requires to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>. The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.","nodes":[{"pos":[0,505],"content":"To calculate the exact array size that <xref:System.Text.UTF7Encoding.GetBytes%2A> requires to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>. The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.","nodes":[{"content":"To calculate the exact array size that <xref:System.Text.UTF7Encoding.GetBytes%2A> requires to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>. The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.","pos":[0,505],"nodes":[{"content":"To calculate the exact array size that <ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding.GetBytes%2A&gt;</ph> requires to store the resulting bytes, the application uses <ph id=\"ph2\">&lt;xref:System.Text.UTF7Encoding.GetByteCount%2A&gt;</ph>.","pos":[0,191],"source":"To calculate the exact array size that <xref:System.Text.UTF7Encoding.GetBytes%2A> requires to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>."},{"content":"To calculate the maximum array size, the application should use <ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding.GetMaxByteCount%2A&gt;</ph>.","pos":[192,307],"source":" To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding.GetByteCount%2A&gt;</ph> method generally allows allocation of less memory, while the <ph id=\"ph2\">&lt;xref:System.Text.UTF7Encoding.GetMaxByteCount%2A&gt;</ph> method generally executes faster.","pos":[308,505],"source":" The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster."}]}]}],"pos":[17914,18420],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.String\"></xref> object containing the set of characters to encode.","nodes":[{"pos":[0,89],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> object containing the set of characters to encode.","source":"The <xref href=\"System.String\"></xref> object containing the set of characters to encode."}],"pos":[19432,19522],"yaml":true},{"content":"The number of bytes produced by encoding the specified characters.","nodes":[{"pos":[0,66],"content":"The number of bytes produced by encoding the specified characters.","nodes":[{"content":"The number of bytes produced by encoding the specified characters.","pos":[0,66]}]}],"pos":[19578,19645],"yaml":true},{"content":"<code>s</code> is `null` (`Nothing`).","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;s&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> (<ph id=\"ph3\">`Nothing`</ph>).","source":"<code>s</code> is `null` (`Nothing`)."}],"pos":[19812,19850],"yaml":true},{"content":"The resulting number of bytes is greater than the maximum number that can be returned as an int.","nodes":[{"pos":[0,96],"content":"The resulting number of bytes is greater than the maximum number that can be returned as an int.","nodes":[{"content":"The resulting number of bytes is greater than the maximum number that can be returned as an int.","pos":[0,96]}]}],"pos":[19964,20061],"yaml":true},{"content":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>.","nodes":[{"pos":[0,141],"content":"A fallback occurred (see <bpt id=\"p1\">[</bpt>Character Encoding in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)","source":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)"},{"pos":[148,153],"content":"-and-","nodes":[{"content":"-and-","pos":[0,5]}]},{"pos":[160,286],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Text.Encoding.EncoderFallback\"&gt;&lt;/xref&gt;</ph> is set to <ph id=\"ph2\">&lt;xref href=\"System.Text.EncoderExceptionFallback\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."}],"pos":[20179,20476],"yaml":true},{"content":"Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.","nodes":[{"pos":[0,116],"content":"Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.","nodes":[{"content":"Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.","pos":[0,116]}]}],"pos":[21982,22099],"yaml":true},{"content":"To calculate the exact array size that <xref:System.Text.UTF7Encoding.GetBytes%2A> requires to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>. The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.","nodes":[{"pos":[0,505],"content":"To calculate the exact array size that <xref:System.Text.UTF7Encoding.GetBytes%2A> requires to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>. The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.","nodes":[{"content":"To calculate the exact array size that <xref:System.Text.UTF7Encoding.GetBytes%2A> requires to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>. The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.","pos":[0,505],"nodes":[{"content":"To calculate the exact array size that <ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding.GetBytes%2A&gt;</ph> requires to store the resulting bytes, the application uses <ph id=\"ph2\">&lt;xref:System.Text.UTF7Encoding.GetByteCount%2A&gt;</ph>.","pos":[0,191],"source":"To calculate the exact array size that <xref:System.Text.UTF7Encoding.GetBytes%2A> requires to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>."},{"content":"To calculate the maximum array size, the application should use <ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding.GetMaxByteCount%2A&gt;</ph>.","pos":[192,307],"source":" To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding.GetByteCount%2A&gt;</ph> method generally allows allocation of less memory, while the <ph id=\"ph2\">&lt;xref:System.Text.UTF7Encoding.GetMaxByteCount%2A&gt;</ph> method generally executes faster.","pos":[308,505],"source":" The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster."}]}]}],"pos":[22110,22616],"yaml":true,"extradata":"MT"},{"content":"A pointer to the first character to encode.","nodes":[{"pos":[0,43],"content":"A pointer to the first character to encode.","nodes":[{"content":"A pointer to the first character to encode.","pos":[0,43]}]}],"pos":[22919,22963],"yaml":true},{"content":"The number of characters to encode.","nodes":[{"pos":[0,35],"content":"The number of characters to encode.","nodes":[{"content":"The number of characters to encode.","pos":[0,35]}]}],"pos":[23023,23059],"yaml":true},{"content":"The number of bytes produced by encoding the specified characters.","nodes":[{"pos":[0,66],"content":"The number of bytes produced by encoding the specified characters.","nodes":[{"content":"The number of bytes produced by encoding the specified characters.","pos":[0,66]}]}],"pos":[23115,23182],"yaml":true},{"content":"<code>chars</code> is `null` (`Nothing` in Visual Basic .NET).","nodes":[{"pos":[0,62],"content":"<ph id=\"ph1\">&lt;code&gt;chars&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> (<ph id=\"ph3\">`Nothing`</ph> in Visual Basic .NET).","source":"<code>chars</code> is `null` (`Nothing` in Visual Basic .NET)."}],"pos":[23349,23412],"yaml":true},{"content":"<code>count</code> is less than zero.  \n  \n -or-  \n  \n The resulting number of bytes is greater than the maximum number that can be returned as an int.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","source":"<code>count</code> is less than zero."},{"pos":[44,48],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[55,151],"content":"The resulting number of bytes is greater than the maximum number that can be returned as an int.","nodes":[{"content":"The resulting number of bytes is greater than the maximum number that can be returned as an int.","pos":[0,96]}]}],"pos":[23526,23684],"yaml":true},{"content":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>.","nodes":[{"pos":[0,143],"content":"A fallback occurred (see <bpt id=\"p1\">[</bpt>Character Encoding in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/character-encoding.md)</ept> for complete explanation)","source":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)"},{"pos":[150,155],"content":"-and-","nodes":[{"content":"-and-","pos":[0,5]}]},{"pos":[162,288],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Text.Encoding.EncoderFallback\"&gt;&lt;/xref&gt;</ph> is set to <ph id=\"ph2\">&lt;xref href=\"System.Text.EncoderExceptionFallback\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."}],"pos":[23802,24101],"yaml":true},{"content":"Calculates the number of bytes produced by encoding a set of characters from the specified character array.","nodes":[{"pos":[0,107],"content":"Calculates the number of bytes produced by encoding a set of characters from the specified character array.","nodes":[{"content":"Calculates the number of bytes produced by encoding a set of characters from the specified character array.","pos":[0,107]}]}],"pos":[25764,25872],"yaml":true},{"content":"To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>. The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.","nodes":[{"pos":[0,503],"content":"To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>. The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.","nodes":[{"content":"To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>. The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.","pos":[0,503],"nodes":[{"content":"To calculate the exact array size required by <ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding.GetBytes%2A&gt;</ph> to store the resulting bytes, the application uses <ph id=\"ph2\">&lt;xref:System.Text.UTF7Encoding.GetByteCount%2A&gt;</ph>.","pos":[0,189],"source":"To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>."},{"content":"To calculate the maximum array size, the application should use <ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding.GetMaxByteCount%2A&gt;</ph>.","pos":[190,305],"source":" To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding.GetByteCount%2A&gt;</ph> method generally allows allocation of less memory, while the <ph id=\"ph2\">&lt;xref:System.Text.UTF7Encoding.GetMaxByteCount%2A&gt;</ph> method generally executes faster.","pos":[306,503],"source":" The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster."}]}]}],"pos":[25883,26387],"yaml":true,"extradata":"MT"},{"content":"The character array containing the set of characters to encode.","nodes":[{"pos":[0,63],"content":"The character array containing the set of characters to encode.","nodes":[{"content":"The character array containing the set of characters to encode.","pos":[0,63]}]}],"pos":[27375,27439],"yaml":true},{"content":"The index of the first character to encode.","nodes":[{"pos":[0,43],"content":"The index of the first character to encode.","nodes":[{"content":"The index of the first character to encode.","pos":[0,43]}]}],"pos":[27499,27543],"yaml":true},{"content":"The number of characters to encode.","nodes":[{"pos":[0,35],"content":"The number of characters to encode.","nodes":[{"content":"The number of characters to encode.","pos":[0,35]}]}],"pos":[27603,27639],"yaml":true},{"content":"The number of bytes produced by encoding the specified characters.","nodes":[{"pos":[0,66],"content":"The number of bytes produced by encoding the specified characters.","nodes":[{"content":"The number of bytes produced by encoding the specified characters.","pos":[0,66]}]}],"pos":[27695,27762],"yaml":true},{"content":"<code>chars</code> is `null` (`Nothing`).","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;chars&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> (<ph id=\"ph3\">`Nothing`</ph>).","source":"<code>chars</code> is `null` (`Nothing`)."}],"pos":[27929,27971],"yaml":true},{"content":"<code>index</code> or <code>count</code> is less than zero.  \n  \n -or-  \n  \n <code>index</code> and <code>count</code> do not denote a valid range in <code>chars</code>.  \n  \n -or-  \n  \n The resulting number of bytes is greater than the maximum number that can be returned as an int.","nodes":[{"pos":[0,59],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","source":"<code>index</code> or <code>count</code> is less than zero."},{"pos":[66,70],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[77,169],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> do not denote a valid range in <ph id=\"ph3\">&lt;code&gt;chars&lt;/code&gt;</ph>.","source":"<code>index</code> and <code>count</code> do not denote a valid range in <code>chars</code>."},{"pos":[176,180],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[187,283],"content":"The resulting number of bytes is greater than the maximum number that can be returned as an int.","nodes":[{"content":"The resulting number of bytes is greater than the maximum number that can be returned as an int.","pos":[0,96]}]}],"pos":[28085,28379],"yaml":true},{"content":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>.","nodes":[{"pos":[0,143],"content":"A fallback occurred (see <bpt id=\"p1\">[</bpt>Character Encoding in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/character-encoding.md)</ept> for complete explanation)","source":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)"},{"pos":[150,155],"content":"-and-","nodes":[{"content":"-and-","pos":[0,5]}]},{"pos":[162,288],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Text.Encoding.EncoderFallback\"&gt;&lt;/xref&gt;</ph> is set to <ph id=\"ph2\">&lt;xref href=\"System.Text.EncoderExceptionFallback\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."}],"pos":[28497,28796],"yaml":true},{"content":"Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.","nodes":[{"pos":[0,152],"content":"Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.","nodes":[{"content":"Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.","pos":[0,152]}]}],"pos":[30340,30493],"yaml":true},{"content":"To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>. The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.  \n  \n Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.  \n  \n> [!NOTE]\n>  <xref:System.Text.UTF7Encoding> does not provide error detection. Invalid characters are encoded as a modified base 64 character. For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.","nodes":[{"pos":[0,503],"content":"To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>. The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.","nodes":[{"content":"To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>. The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.","pos":[0,503],"nodes":[{"content":"To calculate the exact array size required by <ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding.GetBytes%2A&gt;</ph> to store the resulting bytes, the application uses <ph id=\"ph2\">&lt;xref:System.Text.UTF7Encoding.GetByteCount%2A&gt;</ph>.","pos":[0,189],"source":"To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>."},{"content":"To calculate the maximum array size, the application should use <ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding.GetMaxByteCount%2A&gt;</ph>.","pos":[190,305],"source":" To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding.GetByteCount%2A&gt;</ph> method generally allows allocation of less memory, while the <ph id=\"ph2\">&lt;xref:System.Text.UTF7Encoding.GetMaxByteCount%2A&gt;</ph> method generally executes faster.","pos":[306,503],"source":" The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster."}]}]},{"pos":[510,946],"content":"Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.","nodes":[{"content":"Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.","pos":[0,436],"nodes":[{"content":"Data to be converted, such as data read from a stream, might be available only in sequential blocks.","pos":[0,100]},{"content":"In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <ph id=\"ph1\">&lt;xref:System.Text.Decoder&gt;</ph> or the <ph id=\"ph2\">&lt;xref:System.Text.Encoder&gt;</ph> provided by the <ph id=\"ph3\">&lt;xref:System.Text.UTF7Encoding.GetDecoder%2A&gt;</ph> method or the <ph id=\"ph4\">&lt;xref:System.Text.UTF7Encoding.GetEncoder%2A&gt;</ph> method, respectively.","pos":[101,436],"source":" In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively."}]}]},{"pos":[954,1290],"content":"[!NOTE]\n <xref:System.Text.UTF7Encoding> does not provide error detection. Invalid characters are encoded as a modified base 64 character. For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.","leadings":["","> "],"nodes":[{"content":" <xref:System.Text.UTF7Encoding> does not provide error detection. Invalid characters are encoded as a modified base 64 character. For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.","pos":[8,334],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding&gt;</ph> does not provide error detection.","pos":[1,66],"source":" <xref:System.Text.UTF7Encoding> does not provide error detection."},{"content":"Invalid characters are encoded as a modified base 64 character.","pos":[67,130]},{"content":"For security reasons, your applications are recommended to use <ph id=\"ph1\">&lt;xref:System.Text.UTF8Encoding&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Text.UTF32Encoding&gt;</ph> and enable error detection.","pos":[131,326],"source":" For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection."}]}]}],"pos":[30504,31802],"yaml":true,"extradata":"MT"},{"content":"A pointer to the first character to encode.","nodes":[{"pos":[0,43],"content":"A pointer to the first character to encode.","nodes":[{"content":"A pointer to the first character to encode.","pos":[0,43]}]}],"pos":[32133,32177],"yaml":true},{"content":"The number of characters to encode.","nodes":[{"pos":[0,35],"content":"The number of characters to encode.","nodes":[{"content":"The number of characters to encode.","pos":[0,35]}]}],"pos":[32241,32277],"yaml":true},{"content":"A pointer to the location at which to start writing the resulting sequence of bytes.","nodes":[{"pos":[0,84],"content":"A pointer to the location at which to start writing the resulting sequence of bytes.","nodes":[{"content":"A pointer to the location at which to start writing the resulting sequence of bytes.","pos":[0,84]}]}],"pos":[32337,32422],"yaml":true},{"content":"The maximum number of bytes to write.","nodes":[{"pos":[0,37],"content":"The maximum number of bytes to write.","nodes":[{"content":"The maximum number of bytes to write.","pos":[0,37]}]}],"pos":[32486,32524],"yaml":true},{"content":"The actual number of bytes written at the location indicated by <code>bytes</code>.","nodes":[{"pos":[0,83],"content":"The actual number of bytes written at the location indicated by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">bytes</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The actual number of bytes written at the location indicated by <code>bytes</code>."}],"pos":[32580,32664],"yaml":true},{"content":"<code>chars</code> is `null` (`Nothing`).  \n  \n -or-  \n  \n <code>bytes</code> is `null` (`Nothing`).","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;chars&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> (<ph id=\"ph3\">`Nothing`</ph>).","source":"<code>chars</code> is `null` (`Nothing`)."},{"pos":[48,52],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[59,100],"content":"<ph id=\"ph1\">&lt;code&gt;bytes&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> (<ph id=\"ph3\">`Nothing`</ph>).","source":"<code>bytes</code> is `null` (`Nothing`)."}],"pos":[32827,32934],"yaml":true},{"content":"<code>charCount</code> or <code>byteCount</code> is less than zero.","nodes":[{"pos":[0,67],"content":"<ph id=\"ph1\">&lt;code&gt;charCount&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;byteCount&lt;/code&gt;</ph> is less than zero.","source":"<code>charCount</code> or <code>byteCount</code> is less than zero."}],"pos":[33048,33116],"yaml":true},{"content":"<code>byteCount</code> is less than the resulting number of bytes.","nodes":[{"pos":[0,66],"content":"<ph id=\"ph1\">&lt;code&gt;byteCount&lt;/code&gt;</ph> is less than the resulting number of bytes.","source":"<code>byteCount</code> is less than the resulting number of bytes."}],"pos":[33210,33277],"yaml":true},{"content":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>.","nodes":[{"pos":[0,141],"content":"A fallback occurred (see <bpt id=\"p1\">[</bpt>Character Encoding in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)","source":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)"},{"pos":[148,153],"content":"-and-","nodes":[{"content":"-and-","pos":[0,5]}]},{"pos":[160,286],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Text.Encoding.EncoderFallback\"&gt;&lt;/xref&gt;</ph> is set to <ph id=\"ph2\">&lt;xref href=\"System.Text.EncoderExceptionFallback\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."}],"pos":[33395,33692],"yaml":true},{"content":"Encodes a set of characters from the specified character array into the specified byte array.","nodes":[{"pos":[0,93],"content":"Encodes a set of characters from the specified character array into the specified byte array.","nodes":[{"content":"Encodes a set of characters from the specified character array into the specified byte array.","pos":[0,93]}]}],"pos":[35457,35551],"yaml":true},{"content":"To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>. The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.  \n  \n Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.  \n  \n> [!NOTE]\n>  <xref:System.Text.UTF7Encoding> does not provide error detection. Invalid characters are encoded as a modified base 64 character. For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.","nodes":[{"pos":[0,503],"content":"To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>. The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.","nodes":[{"content":"To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>. The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.","pos":[0,503],"nodes":[{"content":"To calculate the exact array size required by <ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding.GetBytes%2A&gt;</ph> to store the resulting bytes, the application uses <ph id=\"ph2\">&lt;xref:System.Text.UTF7Encoding.GetByteCount%2A&gt;</ph>.","pos":[0,189],"source":"To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>."},{"content":"To calculate the maximum array size, the application should use <ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding.GetMaxByteCount%2A&gt;</ph>.","pos":[190,305],"source":" To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding.GetByteCount%2A&gt;</ph> method generally allows allocation of less memory, while the <ph id=\"ph2\">&lt;xref:System.Text.UTF7Encoding.GetMaxByteCount%2A&gt;</ph> method generally executes faster.","pos":[306,503],"source":" The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster."}]}]},{"pos":[510,946],"content":"Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.","nodes":[{"content":"Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.","pos":[0,436],"nodes":[{"content":"Data to be converted, such as data read from a stream, might be available only in sequential blocks.","pos":[0,100]},{"content":"In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <ph id=\"ph1\">&lt;xref:System.Text.Decoder&gt;</ph> or the <ph id=\"ph2\">&lt;xref:System.Text.Encoder&gt;</ph> provided by the <ph id=\"ph3\">&lt;xref:System.Text.UTF7Encoding.GetDecoder%2A&gt;</ph> method or the <ph id=\"ph4\">&lt;xref:System.Text.UTF7Encoding.GetEncoder%2A&gt;</ph> method, respectively.","pos":[101,436],"source":" In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively."}]}]},{"pos":[954,1290],"content":"[!NOTE]\n <xref:System.Text.UTF7Encoding> does not provide error detection. Invalid characters are encoded as a modified base 64 character. For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.","leadings":["","> "],"nodes":[{"content":" <xref:System.Text.UTF7Encoding> does not provide error detection. Invalid characters are encoded as a modified base 64 character. For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.","pos":[8,334],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding&gt;</ph> does not provide error detection.","pos":[1,66],"source":" <xref:System.Text.UTF7Encoding> does not provide error detection."},{"content":"Invalid characters are encoded as a modified base 64 character.","pos":[67,130]},{"content":"For security reasons, your applications are recommended to use <ph id=\"ph1\">&lt;xref:System.Text.UTF8Encoding&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Text.UTF32Encoding&gt;</ph> and enable error detection.","pos":[131,326],"source":" For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection."}]}]}],"pos":[35562,36860],"yaml":true,"extradata":"MT"},{"content":"The character array containing the set of characters to encode.","nodes":[{"pos":[0,63],"content":"The character array containing the set of characters to encode.","nodes":[{"content":"The character array containing the set of characters to encode.","pos":[0,63]}]}],"pos":[37927,37991],"yaml":true},{"content":"The index of the first character to encode.","nodes":[{"pos":[0,43],"content":"The index of the first character to encode.","nodes":[{"content":"The index of the first character to encode.","pos":[0,43]}]}],"pos":[38055,38099],"yaml":true},{"content":"The number of characters to encode.","nodes":[{"pos":[0,35],"content":"The number of characters to encode.","nodes":[{"content":"The number of characters to encode.","pos":[0,35]}]}],"pos":[38163,38199],"yaml":true},{"content":"The byte array to contain the resulting sequence of bytes.","nodes":[{"pos":[0,58],"content":"The byte array to contain the resulting sequence of bytes.","nodes":[{"content":"The byte array to contain the resulting sequence of bytes.","pos":[0,58]}]}],"pos":[38260,38319],"yaml":true},{"content":"The index at which to start writing the resulting sequence of bytes.","nodes":[{"pos":[0,68],"content":"The index at which to start writing the resulting sequence of bytes.","nodes":[{"content":"The index at which to start writing the resulting sequence of bytes.","pos":[0,68]}]}],"pos":[38383,38452],"yaml":true},{"content":"The actual number of bytes written into <code>bytes</code>.","nodes":[{"pos":[0,59],"content":"The actual number of bytes written into <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">bytes</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The actual number of bytes written into <code>bytes</code>."}],"pos":[38508,38568],"yaml":true},{"content":"<code>chars</code> is `null` (`Nothing`).  \n  \n -or-  \n  \n <code>bytes</code> is `null` (`Nothing`).","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;chars&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> (<ph id=\"ph3\">`Nothing`</ph>).","source":"<code>chars</code> is `null` (`Nothing`)."},{"pos":[48,52],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[59,100],"content":"<ph id=\"ph1\">&lt;code&gt;bytes&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> (<ph id=\"ph3\">`Nothing`</ph>).","source":"<code>bytes</code> is `null` (`Nothing`)."}],"pos":[38731,38838],"yaml":true},{"content":"<code>charIndex</code> or <code>charCount</code> or <code>byteIndex</code> is less than zero.  \n  \n -or-  \n  \n <code>charIndex</code> and <code>charCount</code> do not denote a valid range in <code>chars</code>.  \n  \n -or-  \n  \n <code>byteIndex</code> is not a valid index in <code>bytes</code>.","nodes":[{"pos":[0,93],"content":"<ph id=\"ph1\">&lt;code&gt;charIndex&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;charCount&lt;/code&gt;</ph> or <ph id=\"ph3\">&lt;code&gt;byteIndex&lt;/code&gt;</ph> is less than zero.","source":"<code>charIndex</code> or <code>charCount</code> or <code>byteIndex</code> is less than zero."},{"pos":[100,104],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[111,211],"content":"<ph id=\"ph1\">&lt;code&gt;charIndex&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;charCount&lt;/code&gt;</ph> do not denote a valid range in <ph id=\"ph3\">&lt;code&gt;chars&lt;/code&gt;</ph>.","source":"<code>charIndex</code> and <code>charCount</code> do not denote a valid range in <code>chars</code>."},{"pos":[218,222],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[229,295],"content":"<ph id=\"ph1\">&lt;code&gt;byteIndex&lt;/code&gt;</ph> is not a valid index in <ph id=\"ph2\">&lt;code&gt;bytes&lt;/code&gt;</ph>.","source":"<code>byteIndex</code> is not a valid index in <code>bytes</code>."}],"pos":[38952,39258],"yaml":true},{"content":"<code>bytes</code> does not have enough capacity from <code>byteIndex</code> to the end of the array to accommodate the resulting bytes.","nodes":[{"pos":[0,136],"content":"<ph id=\"ph1\">&lt;code&gt;bytes&lt;/code&gt;</ph> does not have enough capacity from <ph id=\"ph2\">&lt;code&gt;byteIndex&lt;/code&gt;</ph> to the end of the array to accommodate the resulting bytes.","source":"<code>bytes</code> does not have enough capacity from <code>byteIndex</code> to the end of the array to accommodate the resulting bytes."}],"pos":[39352,39489],"yaml":true},{"content":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>.","nodes":[{"pos":[0,141],"content":"A fallback occurred (see <bpt id=\"p1\">[</bpt>Character Encoding in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)","source":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)"},{"pos":[148,153],"content":"-and-","nodes":[{"content":"-and-","pos":[0,5]}]},{"pos":[160,286],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Text.Encoding.EncoderFallback\"&gt;&lt;/xref&gt;</ph> is set to <ph id=\"ph2\">&lt;xref href=\"System.Text.EncoderExceptionFallback\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."}],"pos":[39607,39904],"yaml":true},{"content":"Encodes a set of characters from the specified <xref href=\"System.String\"></xref> into the specified byte array.","nodes":[{"pos":[0,112],"content":"Encodes a set of characters from the specified <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> into the specified byte array.","source":"Encodes a set of characters from the specified <xref href=\"System.String\"></xref> into the specified byte array."}],"pos":[41520,41633],"yaml":true},{"content":"To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>. The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.  \n  \n Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.  \n  \n> [!NOTE]\n>  <xref:System.Text.UTF7Encoding> does not provide error detection. Invalid characters are encoded as a modified base 64 character. For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.","nodes":[{"pos":[0,503],"content":"To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>. The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.","nodes":[{"content":"To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>. The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.","pos":[0,503],"nodes":[{"content":"To calculate the exact array size required by <ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding.GetBytes%2A&gt;</ph> to store the resulting bytes, the application uses <ph id=\"ph2\">&lt;xref:System.Text.UTF7Encoding.GetByteCount%2A&gt;</ph>.","pos":[0,189],"source":"To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>."},{"content":"To calculate the maximum array size, the application should use <ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding.GetMaxByteCount%2A&gt;</ph>.","pos":[190,305],"source":" To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding.GetByteCount%2A&gt;</ph> method generally allows allocation of less memory, while the <ph id=\"ph2\">&lt;xref:System.Text.UTF7Encoding.GetMaxByteCount%2A&gt;</ph> method generally executes faster.","pos":[306,503],"source":" The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster."}]}]},{"pos":[510,946],"content":"Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.","nodes":[{"content":"Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.","pos":[0,436],"nodes":[{"content":"Data to be converted, such as data read from a stream, might be available only in sequential blocks.","pos":[0,100]},{"content":"In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <ph id=\"ph1\">&lt;xref:System.Text.Decoder&gt;</ph> or the <ph id=\"ph2\">&lt;xref:System.Text.Encoder&gt;</ph> provided by the <ph id=\"ph3\">&lt;xref:System.Text.UTF7Encoding.GetDecoder%2A&gt;</ph> method or the <ph id=\"ph4\">&lt;xref:System.Text.UTF7Encoding.GetEncoder%2A&gt;</ph> method, respectively.","pos":[101,436],"source":" In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively."}]}]},{"pos":[954,1290],"content":"[!NOTE]\n <xref:System.Text.UTF7Encoding> does not provide error detection. Invalid characters are encoded as a modified base 64 character. For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.","leadings":["","> "],"nodes":[{"content":" <xref:System.Text.UTF7Encoding> does not provide error detection. Invalid characters are encoded as a modified base 64 character. For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.","pos":[8,334],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding&gt;</ph> does not provide error detection.","pos":[1,66],"source":" <xref:System.Text.UTF7Encoding> does not provide error detection."},{"content":"Invalid characters are encoded as a modified base 64 character.","pos":[67,130]},{"content":"For security reasons, your applications are recommended to use <ph id=\"ph1\">&lt;xref:System.Text.UTF8Encoding&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Text.UTF32Encoding&gt;</ph> and enable error detection.","pos":[131,326],"source":" For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection."}]}]}],"pos":[41644,42942],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.String\"></xref> containing the set of characters to encode.","nodes":[{"pos":[0,82],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> containing the set of characters to encode.","source":"The <xref href=\"System.String\"></xref> containing the set of characters to encode."}],"pos":[44070,44153],"yaml":true},{"content":"The index of the first character to encode.","nodes":[{"pos":[0,43],"content":"The index of the first character to encode.","nodes":[{"content":"The index of the first character to encode.","pos":[0,43]}]}],"pos":[44217,44261],"yaml":true},{"content":"The number of characters to encode.","nodes":[{"pos":[0,35],"content":"The number of characters to encode.","nodes":[{"content":"The number of characters to encode.","pos":[0,35]}]}],"pos":[44325,44361],"yaml":true},{"content":"The byte array to contain the resulting sequence of bytes.","nodes":[{"pos":[0,58],"content":"The byte array to contain the resulting sequence of bytes.","nodes":[{"content":"The byte array to contain the resulting sequence of bytes.","pos":[0,58]}]}],"pos":[44422,44481],"yaml":true},{"content":"The index at which to start writing the resulting sequence of bytes.","nodes":[{"pos":[0,68],"content":"The index at which to start writing the resulting sequence of bytes.","nodes":[{"content":"The index at which to start writing the resulting sequence of bytes.","pos":[0,68]}]}],"pos":[44545,44614],"yaml":true},{"content":"The actual number of bytes written into <code>bytes</code>.","nodes":[{"pos":[0,59],"content":"The actual number of bytes written into <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">bytes</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The actual number of bytes written into <code>bytes</code>."}],"pos":[44670,44730],"yaml":true},{"content":"<code>s</code> is `null` (`Nothing`).  \n  \n -or-  \n  \n <code>bytes</code> is `null` (`Nothing`).","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;s&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> (<ph id=\"ph3\">`Nothing`</ph>).","source":"<code>s</code> is `null` (`Nothing`)."},{"pos":[44,48],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[55,96],"content":"<ph id=\"ph1\">&lt;code&gt;bytes&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> (<ph id=\"ph3\">`Nothing`</ph>).","source":"<code>bytes</code> is `null` (`Nothing`)."}],"pos":[44893,44996],"yaml":true},{"content":"<code>charIndex</code> or <code>charCount</code> or <code>byteIndex</code> is less than zero.  \n  \n -or-  \n  \n <code>charIndex</code> and <code>charCount</code> do not denote a valid range in <code>chars</code>.  \n  \n -or-  \n  \n <code>byteIndex</code> is not a valid index in <code>bytes</code>.","nodes":[{"pos":[0,93],"content":"<ph id=\"ph1\">&lt;code&gt;charIndex&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;charCount&lt;/code&gt;</ph> or <ph id=\"ph3\">&lt;code&gt;byteIndex&lt;/code&gt;</ph> is less than zero.","source":"<code>charIndex</code> or <code>charCount</code> or <code>byteIndex</code> is less than zero."},{"pos":[100,104],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[111,211],"content":"<ph id=\"ph1\">&lt;code&gt;charIndex&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;charCount&lt;/code&gt;</ph> do not denote a valid range in <ph id=\"ph3\">&lt;code&gt;chars&lt;/code&gt;</ph>.","source":"<code>charIndex</code> and <code>charCount</code> do not denote a valid range in <code>chars</code>."},{"pos":[218,222],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[229,295],"content":"<ph id=\"ph1\">&lt;code&gt;byteIndex&lt;/code&gt;</ph> is not a valid index in <ph id=\"ph2\">&lt;code&gt;bytes&lt;/code&gt;</ph>.","source":"<code>byteIndex</code> is not a valid index in <code>bytes</code>."}],"pos":[45110,45416],"yaml":true},{"content":"<code>bytes</code> does not have enough capacity from <code>byteIndex</code> to the end of the array to accommodate the resulting bytes.","nodes":[{"pos":[0,136],"content":"<ph id=\"ph1\">&lt;code&gt;bytes&lt;/code&gt;</ph> does not have enough capacity from <ph id=\"ph2\">&lt;code&gt;byteIndex&lt;/code&gt;</ph> to the end of the array to accommodate the resulting bytes.","source":"<code>bytes</code> does not have enough capacity from <code>byteIndex</code> to the end of the array to accommodate the resulting bytes."}],"pos":[45510,45647],"yaml":true},{"content":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>.","nodes":[{"pos":[0,141],"content":"A fallback occurred (see <bpt id=\"p1\">[</bpt>Character Encoding in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)","source":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)"},{"pos":[148,153],"content":"-and-","nodes":[{"content":"-and-","pos":[0,5]}]},{"pos":[160,286],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Text.Encoding.EncoderFallback\"&gt;&lt;/xref&gt;</ph> is set to <ph id=\"ph2\">&lt;xref href=\"System.Text.EncoderExceptionFallback\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."}],"pos":[45765,46062],"yaml":true},{"content":"Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.","nodes":[{"pos":[0,107],"content":"Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.","nodes":[{"content":"Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.","pos":[0,107]}]}],"pos":[47634,47742],"yaml":true},{"content":"To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, use <xref:System.Text.UTF7Encoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>. The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster.","nodes":[{"pos":[0,491],"content":"To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, use <xref:System.Text.UTF7Encoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>. The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster.","nodes":[{"content":"To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, use <xref:System.Text.UTF7Encoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>. The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster.","pos":[0,491],"nodes":[{"content":"To calculate the exact array size required by <ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding.GetChars%2A&gt;</ph> to store the resulting characters, use <ph id=\"ph2\">&lt;xref:System.Text.UTF7Encoding.GetCharCount%2A&gt;</ph>.","pos":[0,177],"source":"To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, use <xref:System.Text.UTF7Encoding.GetCharCount%2A>."},{"content":"To calculate the maximum array size, the application should use <ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding.GetMaxCharCount%2A&gt;</ph>.","pos":[178,293],"source":" To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding.GetCharCount%2A&gt;</ph> method generally allows allocation of less memory, while the <ph id=\"ph2\">&lt;xref:System.Text.UTF7Encoding.GetMaxCharCount%2A&gt;</ph> method generally executes faster.","pos":[294,491],"source":" The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster."}]}]}],"pos":[47753,48245],"yaml":true,"extradata":"MT"},{"content":"The byte array containing the sequence of bytes to decode.","nodes":[{"pos":[0,58],"content":"The byte array containing the sequence of bytes to decode.","nodes":[{"content":"The byte array containing the sequence of bytes to decode.","pos":[0,58]}]}],"pos":[49263,49322],"yaml":true},{"content":"The index of the first byte to decode.","nodes":[{"pos":[0,38],"content":"The index of the first byte to decode.","nodes":[{"content":"The index of the first byte to decode.","pos":[0,38]}]}],"pos":[49382,49421],"yaml":true},{"content":"The number of bytes to decode.","nodes":[{"pos":[0,30],"content":"The number of bytes to decode.","nodes":[{"content":"The number of bytes to decode.","pos":[0,30]}]}],"pos":[49481,49512],"yaml":true},{"content":"The number of characters produced by decoding the specified sequence of bytes.","nodes":[{"pos":[0,78],"content":"The number of characters produced by decoding the specified sequence of bytes.","nodes":[{"content":"The number of characters produced by decoding the specified sequence of bytes.","pos":[0,78]}]}],"pos":[49568,49647],"yaml":true},{"content":"<code>bytes</code> is `null` (`Nothing`).","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;bytes&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> (<ph id=\"ph3\">`Nothing`</ph>).","source":"<code>bytes</code> is `null` (`Nothing`)."}],"pos":[49814,49856],"yaml":true},{"content":"<code>index</code> or <code>count</code> is less than zero.  \n  \n -or-  \n  \n <code>index</code> and <code>count</code> do not denote a valid range in <code>bytes</code>.  \n  \n -or-  \n  \n The resulting number of characters is greater than the maximum number that can be returned as an int.","nodes":[{"pos":[0,59],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","source":"<code>index</code> or <code>count</code> is less than zero."},{"pos":[66,70],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[77,169],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> do not denote a valid range in <ph id=\"ph3\">&lt;code&gt;bytes&lt;/code&gt;</ph>.","source":"<code>index</code> and <code>count</code> do not denote a valid range in <code>bytes</code>."},{"pos":[176,180],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[187,288],"content":"The resulting number of characters is greater than the maximum number that can be returned as an int.","nodes":[{"content":"The resulting number of characters is greater than the maximum number that can be returned as an int.","pos":[0,101]}]}],"pos":[49970,50269],"yaml":true},{"content":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>.","nodes":[{"pos":[0,143],"content":"A fallback occurred (see <bpt id=\"p1\">[</bpt>Character Encoding in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/character-encoding.md)</ept> for complete explanation)","source":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)"},{"pos":[150,155],"content":"-and-","nodes":[{"content":"-and-","pos":[0,5]}]},{"pos":[162,288],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Text.Encoding.DecoderFallback\"&gt;&lt;/xref&gt;</ph> is set to <ph id=\"ph2\">&lt;xref href=\"System.Text.DecoderExceptionFallback\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."}],"pos":[50387,50686],"yaml":true},{"content":"Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.","nodes":[{"pos":[0,116],"content":"Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.","nodes":[{"content":"Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.","pos":[0,116]}]}],"pos":[52134,52251],"yaml":true},{"content":"To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, use <xref:System.Text.UTF7Encoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>. The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster.","nodes":[{"pos":[0,491],"content":"To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, use <xref:System.Text.UTF7Encoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>. The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster.","nodes":[{"content":"To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, use <xref:System.Text.UTF7Encoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>. The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster.","pos":[0,491],"nodes":[{"content":"To calculate the exact array size required by <ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding.GetChars%2A&gt;</ph> to store the resulting characters, use <ph id=\"ph2\">&lt;xref:System.Text.UTF7Encoding.GetCharCount%2A&gt;</ph>.","pos":[0,177],"source":"To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, use <xref:System.Text.UTF7Encoding.GetCharCount%2A>."},{"content":"To calculate the maximum array size, the application should use <ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding.GetMaxCharCount%2A&gt;</ph>.","pos":[178,293],"source":" To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding.GetCharCount%2A&gt;</ph> method generally allows allocation of less memory, while the <ph id=\"ph2\">&lt;xref:System.Text.UTF7Encoding.GetMaxCharCount%2A&gt;</ph> method generally executes faster.","pos":[294,491],"source":" The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster."}]}]}],"pos":[52262,52754],"yaml":true,"extradata":"MT"},{"content":"A pointer to the first byte to decode.","nodes":[{"pos":[0,38],"content":"A pointer to the first byte to decode.","nodes":[{"content":"A pointer to the first byte to decode.","pos":[0,38]}]}],"pos":[53057,53096],"yaml":true},{"content":"The number of bytes to decode.","nodes":[{"pos":[0,30],"content":"The number of bytes to decode.","nodes":[{"content":"The number of bytes to decode.","pos":[0,30]}]}],"pos":[53156,53187],"yaml":true},{"content":"The number of characters produced by decoding the specified sequence of bytes.","nodes":[{"pos":[0,78],"content":"The number of characters produced by decoding the specified sequence of bytes.","nodes":[{"content":"The number of characters produced by decoding the specified sequence of bytes.","pos":[0,78]}]}],"pos":[53243,53322],"yaml":true},{"content":"<code>bytes</code> is `null` (`Nothing`).","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;bytes&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> (<ph id=\"ph3\">`Nothing`</ph>).","source":"<code>bytes</code> is `null` (`Nothing`)."}],"pos":[53489,53531],"yaml":true},{"content":"<code>count</code> is less than zero.  \n  \n -or-  \n  \n The resulting number of characters is greater than the maximum number that can be returned as an int.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","source":"<code>count</code> is less than zero."},{"pos":[44,48],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[55,156],"content":"The resulting number of characters is greater than the maximum number that can be returned as an int.","nodes":[{"content":"The resulting number of characters is greater than the maximum number that can be returned as an int.","pos":[0,101]}]}],"pos":[53645,53808],"yaml":true},{"content":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>.","nodes":[{"pos":[0,141],"content":"A fallback occurred (see <bpt id=\"p1\">[</bpt>Character Encoding in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)","source":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)"},{"pos":[148,153],"content":"-and-","nodes":[{"content":"-and-","pos":[0,5]}]},{"pos":[160,286],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Text.Encoding.DecoderFallback\"&gt;&lt;/xref&gt;</ph> is set to <ph id=\"ph2\">&lt;xref href=\"System.Text.DecoderExceptionFallback\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."}],"pos":[53926,54223],"yaml":true},{"content":"Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.","nodes":[{"pos":[0,152],"content":"Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.","nodes":[{"content":"Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.","pos":[0,152]}]}],"pos":[55916,56069],"yaml":true},{"content":"To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, use <xref:System.Text.UTF7Encoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>. The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster.  \n  \n Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.  \n  \n> [!NOTE]\n>  <xref:System.Text.UTF7Encoding> does not provide error detection. When invalid bytes are encountered, <xref:System.Text.UTF7Encoding> generally emits the invalid bytes. If a byte is larger than hexadecimal 0x7F, the byte value is zero-extended into a Unicode character, the result is stored in the `chars` array, and any shift sequence is terminated. For example, if the byte to encode is hexadecimal 0x81, the resulting character is U+0081. For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.","nodes":[{"pos":[0,491],"content":"To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, use <xref:System.Text.UTF7Encoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>. The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster.","nodes":[{"content":"To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, use <xref:System.Text.UTF7Encoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>. The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster.","pos":[0,491],"nodes":[{"content":"To calculate the exact array size required by <ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding.GetChars%2A&gt;</ph> to store the resulting characters, use <ph id=\"ph2\">&lt;xref:System.Text.UTF7Encoding.GetCharCount%2A&gt;</ph>.","pos":[0,177],"source":"To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, use <xref:System.Text.UTF7Encoding.GetCharCount%2A>."},{"content":"To calculate the maximum array size, the application should use <ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding.GetMaxCharCount%2A&gt;</ph>.","pos":[178,293],"source":" To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding.GetCharCount%2A&gt;</ph> method generally allows allocation of less memory, while the <ph id=\"ph2\">&lt;xref:System.Text.UTF7Encoding.GetMaxCharCount%2A&gt;</ph> method generally executes faster.","pos":[294,491],"source":" The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster."}]}]},{"pos":[498,934],"content":"Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.","nodes":[{"content":"Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.","pos":[0,436],"nodes":[{"content":"Data to be converted, such as data read from a stream, might be available only in sequential blocks.","pos":[0,100]},{"content":"In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <ph id=\"ph1\">&lt;xref:System.Text.Decoder&gt;</ph> or the <ph id=\"ph2\">&lt;xref:System.Text.Encoder&gt;</ph> provided by the <ph id=\"ph3\">&lt;xref:System.Text.UTF7Encoding.GetDecoder%2A&gt;</ph> method or the <ph id=\"ph4\">&lt;xref:System.Text.UTF7Encoding.GetEncoder%2A&gt;</ph> method, respectively.","pos":[101,436],"source":" In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively."}]}]},{"pos":[942,1590],"content":"[!NOTE]\n <xref:System.Text.UTF7Encoding> does not provide error detection. When invalid bytes are encountered, <xref:System.Text.UTF7Encoding> generally emits the invalid bytes. If a byte is larger than hexadecimal 0x7F, the byte value is zero-extended into a Unicode character, the result is stored in the `chars` array, and any shift sequence is terminated. For example, if the byte to encode is hexadecimal 0x81, the resulting character is U+0081. For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.","leadings":["","> "],"nodes":[{"content":" <xref:System.Text.UTF7Encoding> does not provide error detection. When invalid bytes are encountered, <xref:System.Text.UTF7Encoding> generally emits the invalid bytes. If a byte is larger than hexadecimal 0x7F, the byte value is zero-extended into a Unicode character, the result is stored in the `chars` array, and any shift sequence is terminated. For example, if the byte to encode is hexadecimal 0x81, the resulting character is U+0081. For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.","pos":[8,646],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding&gt;</ph> does not provide error detection.","pos":[1,66],"source":" <xref:System.Text.UTF7Encoding> does not provide error detection."},{"content":"When invalid bytes are encountered, <ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding&gt;</ph> generally emits the invalid bytes.","pos":[67,169],"source":" When invalid bytes are encountered, <xref:System.Text.UTF7Encoding> generally emits the invalid bytes."},{"content":"If a byte is larger than hexadecimal 0x7F, the byte value is zero-extended into a Unicode character, the result is stored in the <ph id=\"ph1\">`chars`</ph> array, and any shift sequence is terminated.","pos":[170,351],"source":" If a byte is larger than hexadecimal 0x7F, the byte value is zero-extended into a Unicode character, the result is stored in the `chars` array, and any shift sequence is terminated."},{"content":"For example, if the byte to encode is hexadecimal 0x81, the resulting character is U+0081.","pos":[352,442]},{"content":"For security reasons, your applications are recommended to use <ph id=\"ph1\">&lt;xref:System.Text.UTF8Encoding&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Text.UTF32Encoding&gt;</ph> and enable error detection.","pos":[443,638],"source":" For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection."}]}]}],"pos":[56080,57678],"yaml":true,"extradata":"MT"},{"content":"A pointer to the first byte to decode.","nodes":[{"pos":[0,38],"content":"A pointer to the first byte to decode.","nodes":[{"content":"A pointer to the first byte to decode.","pos":[0,38]}]}],"pos":[58009,58048],"yaml":true},{"content":"The number of bytes to decode.","nodes":[{"pos":[0,30],"content":"The number of bytes to decode.","nodes":[{"content":"The number of bytes to decode.","pos":[0,30]}]}],"pos":[58112,58143],"yaml":true},{"content":"A pointer to the location at which to start writing the resulting set of characters.","nodes":[{"pos":[0,84],"content":"A pointer to the location at which to start writing the resulting set of characters.","nodes":[{"content":"A pointer to the location at which to start writing the resulting set of characters.","pos":[0,84]}]}],"pos":[58203,58288],"yaml":true},{"content":"The maximum number of characters to write.","nodes":[{"pos":[0,42],"content":"The maximum number of characters to write.","nodes":[{"content":"The maximum number of characters to write.","pos":[0,42]}]}],"pos":[58352,58395],"yaml":true},{"content":"The actual number of characters written at the location indicated by <code>chars</code>.","nodes":[{"pos":[0,88],"content":"The actual number of characters written at the location indicated by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">chars</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The actual number of characters written at the location indicated by <code>chars</code>."}],"pos":[58451,58540],"yaml":true},{"content":"<code>bytes</code> is `null` (`Nothing`).  \n  \n -or-  \n  \n <code>chars</code> is `null` (`Nothing`).","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;bytes&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> (<ph id=\"ph3\">`Nothing`</ph>).","source":"<code>bytes</code> is `null` (`Nothing`)."},{"pos":[48,52],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[59,100],"content":"<ph id=\"ph1\">&lt;code&gt;chars&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> (<ph id=\"ph3\">`Nothing`</ph>).","source":"<code>chars</code> is `null` (`Nothing`)."}],"pos":[58703,58810],"yaml":true},{"content":"<code>byteCount</code> or <code>charCount</code> is less than zero.","nodes":[{"pos":[0,67],"content":"<ph id=\"ph1\">&lt;code&gt;byteCount&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;charCount&lt;/code&gt;</ph> is less than zero.","source":"<code>byteCount</code> or <code>charCount</code> is less than zero."}],"pos":[58924,58992],"yaml":true},{"content":"<code>charCount</code> is less than the resulting number of characters.","nodes":[{"pos":[0,71],"content":"<ph id=\"ph1\">&lt;code&gt;charCount&lt;/code&gt;</ph> is less than the resulting number of characters.","source":"<code>charCount</code> is less than the resulting number of characters."}],"pos":[59086,59158],"yaml":true},{"content":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>.","nodes":[{"pos":[0,143],"content":"A fallback occurred (see <bpt id=\"p1\">[</bpt>Character Encoding in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/character-encoding.md)</ept> for complete explanation)","source":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)"},{"pos":[150,155],"content":"-and-","nodes":[{"content":"-and-","pos":[0,5]}]},{"pos":[162,288],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Text.Encoding.DecoderFallback\"&gt;&lt;/xref&gt;</ph> is set to <ph id=\"ph2\">&lt;xref href=\"System.Text.DecoderExceptionFallback\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."}],"pos":[59276,59575],"yaml":true},{"content":"Decodes a sequence of bytes from the specified byte array into the specified character array.","nodes":[{"pos":[0,93],"content":"Decodes a sequence of bytes from the specified byte array into the specified character array.","nodes":[{"content":"Decodes a sequence of bytes from the specified byte array into the specified character array.","pos":[0,93]}]}],"pos":[61340,61434],"yaml":true},{"content":"To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, use <xref:System.Text.UTF7Encoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>. The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster.  \n  \n Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.  \n  \n> [!NOTE]\n>  <xref:System.Text.UTF7Encoding> does not provide error detection. When invalid bytes are encountered, <xref:System.Text.UTF7Encoding> generally emits the invalid bytes. If a byte is larger than hexadecimal 0x7F, the byte value is zero-extended into a Unicode character, the result is stored in the `chars` array, and any shift sequence is terminated. For example, if the byte to encode is hexadecimal 0x81, the resulting character is U+0081. For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.","nodes":[{"pos":[0,491],"content":"To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, use <xref:System.Text.UTF7Encoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>. The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster.","nodes":[{"content":"To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, use <xref:System.Text.UTF7Encoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>. The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster.","pos":[0,491],"nodes":[{"content":"To calculate the exact array size required by <ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding.GetChars%2A&gt;</ph> to store the resulting characters, use <ph id=\"ph2\">&lt;xref:System.Text.UTF7Encoding.GetCharCount%2A&gt;</ph>.","pos":[0,177],"source":"To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, use <xref:System.Text.UTF7Encoding.GetCharCount%2A>."},{"content":"To calculate the maximum array size, the application should use <ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding.GetMaxCharCount%2A&gt;</ph>.","pos":[178,293],"source":" To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding.GetCharCount%2A&gt;</ph> method generally allows allocation of less memory, while the <ph id=\"ph2\">&lt;xref:System.Text.UTF7Encoding.GetMaxCharCount%2A&gt;</ph> method generally executes faster.","pos":[294,491],"source":" The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster."}]}]},{"pos":[498,934],"content":"Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.","nodes":[{"content":"Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.","pos":[0,436],"nodes":[{"content":"Data to be converted, such as data read from a stream, might be available only in sequential blocks.","pos":[0,100]},{"content":"In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <ph id=\"ph1\">&lt;xref:System.Text.Decoder&gt;</ph> or the <ph id=\"ph2\">&lt;xref:System.Text.Encoder&gt;</ph> provided by the <ph id=\"ph3\">&lt;xref:System.Text.UTF7Encoding.GetDecoder%2A&gt;</ph> method or the <ph id=\"ph4\">&lt;xref:System.Text.UTF7Encoding.GetEncoder%2A&gt;</ph> method, respectively.","pos":[101,436],"source":" In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively."}]}]},{"pos":[942,1590],"content":"[!NOTE]\n <xref:System.Text.UTF7Encoding> does not provide error detection. When invalid bytes are encountered, <xref:System.Text.UTF7Encoding> generally emits the invalid bytes. If a byte is larger than hexadecimal 0x7F, the byte value is zero-extended into a Unicode character, the result is stored in the `chars` array, and any shift sequence is terminated. For example, if the byte to encode is hexadecimal 0x81, the resulting character is U+0081. For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.","leadings":["","> "],"nodes":[{"content":" <xref:System.Text.UTF7Encoding> does not provide error detection. When invalid bytes are encountered, <xref:System.Text.UTF7Encoding> generally emits the invalid bytes. If a byte is larger than hexadecimal 0x7F, the byte value is zero-extended into a Unicode character, the result is stored in the `chars` array, and any shift sequence is terminated. For example, if the byte to encode is hexadecimal 0x81, the resulting character is U+0081. For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.","pos":[8,646],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding&gt;</ph> does not provide error detection.","pos":[1,66],"source":" <xref:System.Text.UTF7Encoding> does not provide error detection."},{"content":"When invalid bytes are encountered, <ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding&gt;</ph> generally emits the invalid bytes.","pos":[67,169],"source":" When invalid bytes are encountered, <xref:System.Text.UTF7Encoding> generally emits the invalid bytes."},{"content":"If a byte is larger than hexadecimal 0x7F, the byte value is zero-extended into a Unicode character, the result is stored in the <ph id=\"ph1\">`chars`</ph> array, and any shift sequence is terminated.","pos":[170,351],"source":" If a byte is larger than hexadecimal 0x7F, the byte value is zero-extended into a Unicode character, the result is stored in the `chars` array, and any shift sequence is terminated."},{"content":"For example, if the byte to encode is hexadecimal 0x81, the resulting character is U+0081.","pos":[352,442]},{"content":"For security reasons, your applications are recommended to use <ph id=\"ph1\">&lt;xref:System.Text.UTF8Encoding&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Text.UTF32Encoding&gt;</ph> and enable error detection.","pos":[443,638],"source":" For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection."}]}]}],"pos":[61445,63043],"yaml":true,"extradata":"MT"},{"content":"The byte array containing the sequence of bytes to decode.","nodes":[{"pos":[0,58],"content":"The byte array containing the sequence of bytes to decode.","nodes":[{"content":"The byte array containing the sequence of bytes to decode.","pos":[0,58]}]}],"pos":[64071,64130],"yaml":true},{"content":"The index of the first byte to decode.","nodes":[{"pos":[0,38],"content":"The index of the first byte to decode.","nodes":[{"content":"The index of the first byte to decode.","pos":[0,38]}]}],"pos":[64194,64233],"yaml":true},{"content":"The number of bytes to decode.","nodes":[{"pos":[0,30],"content":"The number of bytes to decode.","nodes":[{"content":"The number of bytes to decode.","pos":[0,30]}]}],"pos":[64297,64328],"yaml":true},{"content":"The character array to contain the resulting set of characters.","nodes":[{"pos":[0,63],"content":"The character array to contain the resulting set of characters.","nodes":[{"content":"The character array to contain the resulting set of characters.","pos":[0,63]}]}],"pos":[64389,64453],"yaml":true},{"content":"The index at which to start writing the resulting set of characters.","nodes":[{"pos":[0,68],"content":"The index at which to start writing the resulting set of characters.","nodes":[{"content":"The index at which to start writing the resulting set of characters.","pos":[0,68]}]}],"pos":[64517,64586],"yaml":true},{"content":"The actual number of characters written into <code>chars</code>.","nodes":[{"pos":[0,64],"content":"The actual number of characters written into <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">chars</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The actual number of characters written into <code>chars</code>."}],"pos":[64642,64707],"yaml":true},{"content":"<code>bytes</code> is `null` (`Nothing`).  \n  \n -or-  \n  \n <code>chars</code> is `null` (`Nothing`).","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;bytes&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> (<ph id=\"ph3\">`Nothing`</ph>).","source":"<code>bytes</code> is `null` (`Nothing`)."},{"pos":[48,52],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[59,100],"content":"<ph id=\"ph1\">&lt;code&gt;chars&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> (<ph id=\"ph3\">`Nothing`</ph>).","source":"<code>chars</code> is `null` (`Nothing`)."}],"pos":[64870,64977],"yaml":true},{"content":"<code>byteIndex</code> or <code>byteCount</code> or <code>charIndex</code> is less than zero.  \n  \n -or-  \n  \n <code>byteindex</code> and <code>byteCount</code> do not denote a valid range in <code>bytes</code>.  \n  \n -or-  \n  \n <code>charIndex</code> is not a valid index in <code>chars</code>.","nodes":[{"pos":[0,93],"content":"<ph id=\"ph1\">&lt;code&gt;byteIndex&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;byteCount&lt;/code&gt;</ph> or <ph id=\"ph3\">&lt;code&gt;charIndex&lt;/code&gt;</ph> is less than zero.","source":"<code>byteIndex</code> or <code>byteCount</code> or <code>charIndex</code> is less than zero."},{"pos":[100,104],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[111,211],"content":"<ph id=\"ph1\">&lt;code&gt;byteindex&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;byteCount&lt;/code&gt;</ph> do not denote a valid range in <ph id=\"ph3\">&lt;code&gt;bytes&lt;/code&gt;</ph>.","source":"<code>byteindex</code> and <code>byteCount</code> do not denote a valid range in <code>bytes</code>."},{"pos":[218,222],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[229,295],"content":"<ph id=\"ph1\">&lt;code&gt;charIndex&lt;/code&gt;</ph> is not a valid index in <ph id=\"ph2\">&lt;code&gt;chars&lt;/code&gt;</ph>.","source":"<code>charIndex</code> is not a valid index in <code>chars</code>."}],"pos":[65091,65397],"yaml":true},{"content":"<code>chars</code> does not have enough capacity from <code>charIndex</code> to the end of the array to accommodate the resulting characters.","nodes":[{"pos":[0,141],"content":"<ph id=\"ph1\">&lt;code&gt;chars&lt;/code&gt;</ph> does not have enough capacity from <ph id=\"ph2\">&lt;code&gt;charIndex&lt;/code&gt;</ph> to the end of the array to accommodate the resulting characters.","source":"<code>chars</code> does not have enough capacity from <code>charIndex</code> to the end of the array to accommodate the resulting characters."}],"pos":[65491,65633],"yaml":true},{"content":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>.","nodes":[{"pos":[0,143],"content":"A fallback occurred (see <bpt id=\"p1\">[</bpt>Character Encoding in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/character-encoding.md)</ept> for complete explanation)","source":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)"},{"pos":[150,155],"content":"-and-","nodes":[{"content":"-and-","pos":[0,5]}]},{"pos":[162,288],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Text.Encoding.DecoderFallback\"&gt;&lt;/xref&gt;</ph> is set to <ph id=\"ph2\">&lt;xref href=\"System.Text.DecoderExceptionFallback\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."}],"pos":[65751,66050],"yaml":true},{"content":"Obtains a decoder that converts a UTF-7 encoded sequence of bytes into a sequence of Unicode characters.","nodes":[{"pos":[0,104],"content":"Obtains a decoder that converts a UTF-7 encoded sequence of bytes into a sequence of Unicode characters.","nodes":[{"content":"Obtains a decoder that converts a UTF-7 encoded sequence of bytes into a sequence of Unicode characters.","pos":[0,104]}]}],"pos":[67369,67474],"yaml":true},{"content":"The <xref:System.Text.Decoder.GetChars%2A?displayProperty=fullName> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref:System.Text.UTF7Encoding.GetChars%2A> method of this class. However, a <xref:System.Text.Decoder> maintains state information between calls so it can correctly decode byte sequences that span blocks. The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation. Therefore, <xref:System.Text.UTF7Encoding.GetDecoder%2A> and <xref:System.Text.UTF7Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.","nodes":[{"pos":[0,783],"content":"The <xref:System.Text.Decoder.GetChars%2A?displayProperty=fullName> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref:System.Text.UTF7Encoding.GetChars%2A> method of this class. However, a <xref:System.Text.Decoder> maintains state information between calls so it can correctly decode byte sequences that span blocks. The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation. Therefore, <xref:System.Text.UTF7Encoding.GetDecoder%2A> and <xref:System.Text.UTF7Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.","nodes":[{"content":"The <xref:System.Text.Decoder.GetChars%2A?displayProperty=fullName> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref:System.Text.UTF7Encoding.GetChars%2A> method of this class. However, a <xref:System.Text.Decoder> maintains state information between calls so it can correctly decode byte sequences that span blocks. The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation. Therefore, <xref:System.Text.UTF7Encoding.GetDecoder%2A> and <xref:System.Text.UTF7Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.","pos":[0,783],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.Decoder.GetChars%2A?displayProperty=fullName&gt;</ph> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <ph id=\"ph2\">&lt;xref:System.Text.UTF7Encoding.GetChars%2A&gt;</ph> method of this class.","pos":[0,241],"source":"The <xref:System.Text.Decoder.GetChars%2A?displayProperty=fullName> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref:System.Text.UTF7Encoding.GetChars%2A> method of this class."},{"content":"However, a <ph id=\"ph1\">&lt;xref:System.Text.Decoder&gt;</ph> maintains state information between calls so it can correctly decode byte sequences that span blocks.","pos":[242,381],"source":" However, a <xref:System.Text.Decoder> maintains state information between calls so it can correctly decode byte sequences that span blocks."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.Decoder&gt;</ph> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation.","pos":[382,528],"source":" The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation."},{"content":"Therefore, <ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding.GetDecoder%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Text.UTF7Encoding.GetEncoder%2A&gt;</ph> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.","pos":[529,783],"source":" Therefore, <xref:System.Text.UTF7Encoding.GetDecoder%2A> and <xref:System.Text.UTF7Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream."}]}]}],"pos":[67485,68269],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Text.Decoder\"></xref> that converts a UTF-7 encoded sequence of bytes into a sequence of Unicode characters.","nodes":[{"pos":[0,129],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Text.Decoder\"&gt;&lt;/xref&gt;</ph> that converts a UTF-7 encoded sequence of bytes into a sequence of Unicode characters.","source":"A <xref href=\"System.Text.Decoder\"></xref> that converts a UTF-7 encoded sequence of bytes into a sequence of Unicode characters."}],"pos":[69173,69303],"yaml":true},{"content":"Obtains an encoder that converts a sequence of Unicode characters into a UTF-7 encoded sequence of bytes.","nodes":[{"pos":[0,105],"content":"Obtains an encoder that converts a sequence of Unicode characters into a UTF-7 encoded sequence of bytes.","nodes":[{"content":"Obtains an encoder that converts a sequence of Unicode characters into a UTF-7 encoded sequence of bytes.","pos":[0,105]}]}],"pos":[70671,70777],"yaml":true},{"content":"The <xref:System.Text.Decoder.GetChars%2A?displayProperty=fullName> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref:System.Text.UTF7Encoding.GetChars%2A> method. However, a <xref:System.Text.Decoder> maintains state information between calls so it can correctly decode byte sequences that span blocks. The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation. Therefore, <xref:System.Text.UTF7Encoding.GetDecoder%2A> and <xref:System.Text.UTF7Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.","nodes":[{"pos":[0,769],"content":"The <xref:System.Text.Decoder.GetChars%2A?displayProperty=fullName> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref:System.Text.UTF7Encoding.GetChars%2A> method. However, a <xref:System.Text.Decoder> maintains state information between calls so it can correctly decode byte sequences that span blocks. The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation. Therefore, <xref:System.Text.UTF7Encoding.GetDecoder%2A> and <xref:System.Text.UTF7Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.","nodes":[{"content":"The <xref:System.Text.Decoder.GetChars%2A?displayProperty=fullName> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref:System.Text.UTF7Encoding.GetChars%2A> method. However, a <xref:System.Text.Decoder> maintains state information between calls so it can correctly decode byte sequences that span blocks. The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation. Therefore, <xref:System.Text.UTF7Encoding.GetDecoder%2A> and <xref:System.Text.UTF7Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.","pos":[0,769],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.Decoder.GetChars%2A?displayProperty=fullName&gt;</ph> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <ph id=\"ph2\">&lt;xref:System.Text.UTF7Encoding.GetChars%2A&gt;</ph> method.","pos":[0,227],"source":"The <xref:System.Text.Decoder.GetChars%2A?displayProperty=fullName> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref:System.Text.UTF7Encoding.GetChars%2A> method."},{"content":"However, a <ph id=\"ph1\">&lt;xref:System.Text.Decoder&gt;</ph> maintains state information between calls so it can correctly decode byte sequences that span blocks.","pos":[228,367],"source":" However, a <xref:System.Text.Decoder> maintains state information between calls so it can correctly decode byte sequences that span blocks."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.Decoder&gt;</ph> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation.","pos":[368,514],"source":" The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation."},{"content":"Therefore, <ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding.GetDecoder%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Text.UTF7Encoding.GetEncoder%2A&gt;</ph> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.","pos":[515,769],"source":" Therefore, <xref:System.Text.UTF7Encoding.GetDecoder%2A> and <xref:System.Text.UTF7Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream."}]}]}],"pos":[70788,71558],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Text.Encoder\"></xref> that converts a sequence of Unicode characters into a UTF-7 encoded sequence of bytes.","nodes":[{"pos":[0,129],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Text.Encoder\"&gt;&lt;/xref&gt;</ph> that converts a sequence of Unicode characters into a UTF-7 encoded sequence of bytes.","source":"A <xref href=\"System.Text.Encoder\"></xref> that converts a sequence of Unicode characters into a UTF-7 encoded sequence of bytes."}],"pos":[72473,72603],"yaml":true},{"content":"Returns the hash code for the current <xref href=\"System.Text.UTF7Encoding\"></xref> object.","nodes":[{"pos":[0,91],"content":"Returns the hash code for the current <ph id=\"ph1\">&lt;xref href=\"System.Text.UTF7Encoding\"&gt;&lt;/xref&gt;</ph> object.","source":"Returns the hash code for the current <xref href=\"System.Text.UTF7Encoding\"></xref> object."}],"pos":[73977,74069],"yaml":true},{"content":"The value returned by the <xref:System.Text.UTF7Encoding.GetHashCode%2A> method is not suitable for distinguishing one <xref:System.Text.UTF7Encoding> object from another. If your application needs a unique hash code, it should override the <xref:System.Text.UTF7Encoding.GetHashCode%2A> method.","nodes":[{"pos":[0,295],"content":"The value returned by the <xref:System.Text.UTF7Encoding.GetHashCode%2A> method is not suitable for distinguishing one <xref:System.Text.UTF7Encoding> object from another. If your application needs a unique hash code, it should override the <xref:System.Text.UTF7Encoding.GetHashCode%2A> method.","nodes":[{"content":"The value returned by the <xref:System.Text.UTF7Encoding.GetHashCode%2A> method is not suitable for distinguishing one <xref:System.Text.UTF7Encoding> object from another. If your application needs a unique hash code, it should override the <xref:System.Text.UTF7Encoding.GetHashCode%2A> method.","pos":[0,295],"nodes":[{"content":"The value returned by the <ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding.GetHashCode%2A&gt;</ph> method is not suitable for distinguishing one <ph id=\"ph2\">&lt;xref:System.Text.UTF7Encoding&gt;</ph> object from another.","pos":[0,171],"source":"The value returned by the <xref:System.Text.UTF7Encoding.GetHashCode%2A> method is not suitable for distinguishing one <xref:System.Text.UTF7Encoding> object from another."},{"content":"If your application needs a unique hash code, it should override the <ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding.GetHashCode%2A&gt;</ph> method.","pos":[172,295],"source":" If your application needs a unique hash code, it should override the <xref:System.Text.UTF7Encoding.GetHashCode%2A> method."}]}]}],"pos":[74080,74376],"yaml":true,"extradata":"MT"},{"content":"A 32-bit signed integer hash code.","nodes":[{"pos":[0,34],"content":"A 32-bit signed integer hash code.","nodes":[{"content":"A 32-bit signed integer hash code.","pos":[0,34]}]}],"pos":[74577,74612],"yaml":true},{"content":"Calculates the maximum number of bytes produced by encoding the specified number of characters.","nodes":[{"pos":[0,95],"content":"Calculates the maximum number of bytes produced by encoding the specified number of characters.","nodes":[{"content":"Calculates the maximum number of bytes produced by encoding the specified number of characters.","pos":[0,95]}]}],"pos":[76143,76239],"yaml":true},{"content":"To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>. The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.  \n  \n <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> is a worst-case number, including the worst case for the currently selected <xref:System.Text.EncoderFallback>. If a fallback is chosen with a potentially large string, <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> can return large values.  \n  \n In most cases, this method returns reasonable numbers for small strings. For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded. You might also want to consider a different approach using <xref:System.Text.UTF7Encoding.GetByteCount%2A> or <xref:System.Text.Encoder.Convert%2A?displayProperty=fullName>. While UTF-7 is very efficient at encoding ASCII data, one byte per character, it is extremely inefficient for other data. As remarked above, <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> deals with a worst case. If the data to be encoded is largely ASCII, and especially if the ASCII characters cluster together, UTF-7 is significantly more efficient than the number returned by this method suggests.  \n  \n <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> has no relation to <xref:System.Text.UTF7Encoding.GetChars%2A>. If your application needs a similar function to use with <xref:System.Text.UTF7Encoding.GetChars%2A>, it should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>.  \n  \n> [!NOTE]\n>  `GetMaxByteCount(N)` is not necessarily the same value as `N* GetMaxByteCount(1)`.","nodes":[{"pos":[0,503],"content":"To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>. The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.","nodes":[{"content":"To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>. The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.","pos":[0,503],"nodes":[{"content":"To calculate the exact array size required by <ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding.GetBytes%2A&gt;</ph> to store the resulting bytes, the application uses <ph id=\"ph2\">&lt;xref:System.Text.UTF7Encoding.GetByteCount%2A&gt;</ph>.","pos":[0,189],"source":"To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>."},{"content":"To calculate the maximum array size, the application should use <ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding.GetMaxByteCount%2A&gt;</ph>.","pos":[190,305],"source":" To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding.GetByteCount%2A&gt;</ph> method generally allows allocation of less memory, while the <ph id=\"ph2\">&lt;xref:System.Text.UTF7Encoding.GetMaxByteCount%2A&gt;</ph> method generally executes faster.","pos":[306,503],"source":" The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster."}]}]},{"pos":[510,805],"content":"<xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> is a worst-case number, including the worst case for the currently selected <xref:System.Text.EncoderFallback>. If a fallback is chosen with a potentially large string, <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> can return large values.","nodes":[{"content":"<xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> is a worst-case number, including the worst case for the currently selected <xref:System.Text.EncoderFallback>. If a fallback is chosen with a potentially large string, <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> can return large values.","pos":[0,295],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding.GetMaxByteCount%2A&gt;</ph> is a worst-case number, including the worst case for the currently selected <ph id=\"ph2\">&lt;xref:System.Text.EncoderFallback&gt;</ph>.","pos":[0,162],"source":"<xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> is a worst-case number, including the worst case for the currently selected <xref:System.Text.EncoderFallback>."},{"content":"If a fallback is chosen with a potentially large string, <ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding.GetMaxByteCount%2A&gt;</ph> can return large values.","pos":[163,295],"source":" If a fallback is chosen with a potentially large string, <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> can return large values."}]}]},{"pos":[812,1621],"content":"In most cases, this method returns reasonable numbers for small strings. For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded. You might also want to consider a different approach using <xref:System.Text.UTF7Encoding.GetByteCount%2A> or <xref:System.Text.Encoder.Convert%2A?displayProperty=fullName>. While UTF-7 is very efficient at encoding ASCII data, one byte per character, it is extremely inefficient for other data. As remarked above, <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> deals with a worst case. If the data to be encoded is largely ASCII, and especially if the ASCII characters cluster together, UTF-7 is significantly more efficient than the number returned by this method suggests.","nodes":[{"content":"In most cases, this method returns reasonable numbers for small strings. For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded. You might also want to consider a different approach using <xref:System.Text.UTF7Encoding.GetByteCount%2A> or <xref:System.Text.Encoder.Convert%2A?displayProperty=fullName>. While UTF-7 is very efficient at encoding ASCII data, one byte per character, it is extremely inefficient for other data. As remarked above, <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> deals with a worst case. If the data to be encoded is largely ASCII, and especially if the ASCII characters cluster together, UTF-7 is significantly more efficient than the number returned by this method suggests.","pos":[0,809],"nodes":[{"content":"In most cases, this method returns reasonable numbers for small strings.","pos":[0,72]},{"content":"For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded.","pos":[73,229]},{"content":"You might also want to consider a different approach using <ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding.GetByteCount%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Text.Encoder.Convert%2A?displayProperty=fullName&gt;</ph>.","pos":[230,403],"source":" You might also want to consider a different approach using <xref:System.Text.UTF7Encoding.GetByteCount%2A> or <xref:System.Text.Encoder.Convert%2A?displayProperty=fullName>."},{"content":"While UTF-7 is very efficient at encoding ASCII data, one byte per character, it is extremely inefficient for other data.","pos":[404,525]},{"content":"As remarked above, <ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding.GetMaxByteCount%2A&gt;</ph> deals with a worst case.","pos":[526,620],"source":" As remarked above, <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> deals with a worst case."},{"content":"If the data to be encoded is largely ASCII, and especially if the ASCII characters cluster together, UTF-7 is significantly more efficient than the number returned by this method suggests.","pos":[621,809]}]}]},{"pos":[1628,1910],"content":"<xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> has no relation to <xref:System.Text.UTF7Encoding.GetChars%2A>. If your application needs a similar function to use with <xref:System.Text.UTF7Encoding.GetChars%2A>, it should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>.","nodes":[{"content":"<xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> has no relation to <xref:System.Text.UTF7Encoding.GetChars%2A>. If your application needs a similar function to use with <xref:System.Text.UTF7Encoding.GetChars%2A>, it should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>.","pos":[0,282],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding.GetMaxByteCount%2A&gt;</ph> has no relation to <ph id=\"ph2\">&lt;xref:System.Text.UTF7Encoding.GetChars%2A&gt;</ph>.","pos":[0,114],"source":"<xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> has no relation to <xref:System.Text.UTF7Encoding.GetChars%2A>."},{"content":"If your application needs a similar function to use with <ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding.GetChars%2A&gt;</ph>, it should use <ph id=\"ph2\">&lt;xref:System.Text.UTF7Encoding.GetMaxCharCount%2A&gt;</ph>.","pos":[115,282],"source":" If your application needs a similar function to use with <xref:System.Text.UTF7Encoding.GetChars%2A>, it should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>."}]}]},{"pos":[1918,2011],"content":"[!NOTE]\n `GetMaxByteCount(N)` is not necessarily the same value as `N* GetMaxByteCount(1)`.","leadings":["","> "],"nodes":[{"content":"<ph id=\"ph1\"> `GetMaxByteCount(N)`</ph> is not necessarily the same value as <ph id=\"ph2\">`N* GetMaxByteCount(1)`</ph>.","pos":[8,91],"source":" `GetMaxByteCount(N)` is not necessarily the same value as `N* GetMaxByteCount(1)`."}]}],"pos":[76250,78273],"yaml":true,"extradata":"MT"},{"content":"The number of characters to encode.","nodes":[{"pos":[0,35],"content":"The number of characters to encode.","nodes":[{"content":"The number of characters to encode.","pos":[0,35]}]}],"pos":[79247,79283],"yaml":true},{"content":"The maximum number of bytes produced by encoding the specified number of characters.","nodes":[{"pos":[0,84],"content":"The maximum number of bytes produced by encoding the specified number of characters.","nodes":[{"content":"The maximum number of bytes produced by encoding the specified number of characters.","pos":[0,84]}]}],"pos":[79339,79424],"yaml":true},{"content":"<code>charCount</code> is less than zero.  \n  \n -or-  \n  \n The resulting number of bytes is greater than the maximum number that can be returned as an int.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;charCount&lt;/code&gt;</ph> is less than zero.","source":"<code>charCount</code> is less than zero."},{"pos":[48,52],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[59,155],"content":"The resulting number of bytes is greater than the maximum number that can be returned as an int.","nodes":[{"content":"The resulting number of bytes is greater than the maximum number that can be returned as an int.","pos":[0,96]}]}],"pos":[79606,79768],"yaml":true},{"content":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>.","nodes":[{"pos":[0,143],"content":"A fallback occurred (see <bpt id=\"p1\">[</bpt>Character Encoding in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/character-encoding.md)</ept> for complete explanation)","source":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)"},{"pos":[150,155],"content":"-and-","nodes":[{"content":"-and-","pos":[0,5]}]},{"pos":[162,288],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Text.Encoding.EncoderFallback\"&gt;&lt;/xref&gt;</ph> is set to <ph id=\"ph2\">&lt;xref href=\"System.Text.EncoderExceptionFallback\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."}],"pos":[79886,80185],"yaml":true},{"content":"Calculates the maximum number of characters produced by decoding the specified number of bytes.","nodes":[{"pos":[0,95],"content":"Calculates the maximum number of characters produced by decoding the specified number of bytes.","nodes":[{"content":"Calculates the maximum number of characters produced by decoding the specified number of bytes.","pos":[0,95]}]}],"pos":[81574,81670],"yaml":true},{"content":"To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.UTF7Encoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>. The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster.  \n  \n <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> is a worst-case number, including the worst case for the currently selected <xref:System.Text.DecoderFallback>. If a fallback is chosen with a potentially large string, <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> can return large values.  \n  \n In most cases, this method returns reasonable numbers for small strings. For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded. You might also want to consider a different approach using <xref:System.Text.UTF7Encoding.GetCharCount%2A> or <xref:System.Text.Decoder.Convert%2A?displayProperty=fullName>.  \n  \n <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> has no relation to <xref:System.Text.UTF7Encoding.GetBytes%2A>. If your application needs a similar function to use with <xref:System.Text.UTF7Encoding.GetBytes%2A>, it should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>.  \n  \n> [!NOTE]\n>  `GetMaxCharCount(N)` is not necessarily the same value as `N* GetMaxCharCount(1)`.","nodes":[{"pos":[0,508],"content":"To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.UTF7Encoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>. The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster.","nodes":[{"content":"To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.UTF7Encoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>. The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster.","pos":[0,508],"nodes":[{"content":"To calculate the exact array size required by <ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding.GetChars%2A&gt;</ph> to store the resulting characters, the application uses <ph id=\"ph2\">&lt;xref:System.Text.UTF7Encoding.GetCharCount%2A&gt;</ph>.","pos":[0,194],"source":"To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.UTF7Encoding.GetCharCount%2A>."},{"content":"To calculate the maximum array size, the application should use <ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding.GetMaxCharCount%2A&gt;</ph>.","pos":[195,310],"source":" To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding.GetCharCount%2A&gt;</ph> method generally allows allocation of less memory, while the <ph id=\"ph2\">&lt;xref:System.Text.UTF7Encoding.GetMaxCharCount%2A&gt;</ph> method generally executes faster.","pos":[311,508],"source":" The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster."}]}]},{"pos":[515,810],"content":"<xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> is a worst-case number, including the worst case for the currently selected <xref:System.Text.DecoderFallback>. If a fallback is chosen with a potentially large string, <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> can return large values.","nodes":[{"content":"<xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> is a worst-case number, including the worst case for the currently selected <xref:System.Text.DecoderFallback>. If a fallback is chosen with a potentially large string, <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> can return large values.","pos":[0,295],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding.GetMaxCharCount%2A&gt;</ph> is a worst-case number, including the worst case for the currently selected <ph id=\"ph2\">&lt;xref:System.Text.DecoderFallback&gt;</ph>.","pos":[0,162],"source":"<xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> is a worst-case number, including the worst case for the currently selected <xref:System.Text.DecoderFallback>."},{"content":"If a fallback is chosen with a potentially large string, <ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding.GetMaxCharCount%2A&gt;</ph> can return large values.","pos":[163,295],"source":" If a fallback is chosen with a potentially large string, <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> can return large values."}]}]},{"pos":[817,1220],"content":"In most cases, this method returns reasonable numbers for small strings. For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded. You might also want to consider a different approach using <xref:System.Text.UTF7Encoding.GetCharCount%2A> or <xref:System.Text.Decoder.Convert%2A?displayProperty=fullName>.","nodes":[{"content":"In most cases, this method returns reasonable numbers for small strings. For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded. You might also want to consider a different approach using <xref:System.Text.UTF7Encoding.GetCharCount%2A> or <xref:System.Text.Decoder.Convert%2A?displayProperty=fullName>.","pos":[0,403],"nodes":[{"content":"In most cases, this method returns reasonable numbers for small strings.","pos":[0,72]},{"content":"For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded.","pos":[73,229]},{"content":"You might also want to consider a different approach using <ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding.GetCharCount%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Text.Decoder.Convert%2A?displayProperty=fullName&gt;</ph>.","pos":[230,403],"source":" You might also want to consider a different approach using <xref:System.Text.UTF7Encoding.GetCharCount%2A> or <xref:System.Text.Decoder.Convert%2A?displayProperty=fullName>."}]}]},{"pos":[1227,1509],"content":"<xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> has no relation to <xref:System.Text.UTF7Encoding.GetBytes%2A>. If your application needs a similar function to use with <xref:System.Text.UTF7Encoding.GetBytes%2A>, it should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>.","nodes":[{"content":"<xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> has no relation to <xref:System.Text.UTF7Encoding.GetBytes%2A>. If your application needs a similar function to use with <xref:System.Text.UTF7Encoding.GetBytes%2A>, it should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>.","pos":[0,282],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding.GetMaxCharCount%2A&gt;</ph> has no relation to <ph id=\"ph2\">&lt;xref:System.Text.UTF7Encoding.GetBytes%2A&gt;</ph>.","pos":[0,114],"source":"<xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> has no relation to <xref:System.Text.UTF7Encoding.GetBytes%2A>."},{"content":"If your application needs a similar function to use with <ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding.GetBytes%2A&gt;</ph>, it should use <ph id=\"ph2\">&lt;xref:System.Text.UTF7Encoding.GetMaxByteCount%2A&gt;</ph>.","pos":[115,282],"source":" If your application needs a similar function to use with <xref:System.Text.UTF7Encoding.GetBytes%2A>, it should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>."}]}]},{"pos":[1517,1610],"content":"[!NOTE]\n `GetMaxCharCount(N)` is not necessarily the same value as `N* GetMaxCharCount(1)`.","leadings":["","> "],"nodes":[{"content":"<ph id=\"ph1\"> `GetMaxCharCount(N)`</ph> is not necessarily the same value as <ph id=\"ph2\">`N* GetMaxCharCount(1)`</ph>.","pos":[8,91],"source":" `GetMaxCharCount(N)` is not necessarily the same value as `N* GetMaxCharCount(1)`."}]}],"pos":[81681,83303],"yaml":true,"extradata":"MT"},{"content":"The number of bytes to decode.","nodes":[{"pos":[0,30],"content":"The number of bytes to decode.","nodes":[{"content":"The number of bytes to decode.","pos":[0,30]}]}],"pos":[84279,84310],"yaml":true},{"content":"The maximum number of characters produced by decoding the specified number of bytes.","nodes":[{"pos":[0,84],"content":"The maximum number of characters produced by decoding the specified number of bytes.","nodes":[{"content":"The maximum number of characters produced by decoding the specified number of bytes.","pos":[0,84]}]}],"pos":[84366,84451],"yaml":true},{"content":"<code>byteCount</code> is less than zero.  \n  \n -or-  \n  \n The resulting number of characters is greater than the maximum number that can be returned as an int.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;byteCount&lt;/code&gt;</ph> is less than zero.","source":"<code>byteCount</code> is less than zero."},{"pos":[48,52],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[59,160],"content":"The resulting number of characters is greater than the maximum number that can be returned as an int.","nodes":[{"content":"The resulting number of characters is greater than the maximum number that can be returned as an int.","pos":[0,101]}]}],"pos":[84633,84800],"yaml":true},{"content":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>.","nodes":[{"pos":[0,143],"content":"A fallback occurred (see <bpt id=\"p1\">[</bpt>Character Encoding in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/character-encoding.md)</ept> for complete explanation)","source":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)"},{"pos":[150,155],"content":"-and-","nodes":[{"content":"-and-","pos":[0,5]}]},{"pos":[162,288],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Text.Encoding.DecoderFallback\"&gt;&lt;/xref&gt;</ph> is set to <ph id=\"ph2\">&lt;xref href=\"System.Text.DecoderExceptionFallback\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."}],"pos":[84918,85217],"yaml":true},{"content":"Decodes a range of bytes from a byte array into a string.","nodes":[{"pos":[0,57],"content":"Decodes a range of bytes from a byte array into a string.","nodes":[{"content":"Decodes a range of bytes from a byte array into a string.","pos":[0,57]}]}],"pos":[86696,86754],"yaml":true},{"content":"Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.  \n  \n> [!NOTE]\n>  <xref:System.Text.UTF7Encoding> does not provide error detection. When invalid bytes are encountered, <xref:System.Text.UTF7Encoding> generally emits the invalid bytes. If a byte is larger than hexadecimal 0x7F, the byte value is zero-extended into a Unicode character, the result is stored in the `chars` array, and any shift sequence is terminated. For example, if the byte to encode is hexadecimal 0x81, the resulting character is U+0081. For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.","nodes":[{"pos":[0,436],"content":"Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.","nodes":[{"content":"Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.","pos":[0,436],"nodes":[{"content":"Data to be converted, such as data read from a stream, might be available only in sequential blocks.","pos":[0,100]},{"content":"In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <ph id=\"ph1\">&lt;xref:System.Text.Decoder&gt;</ph> or the <ph id=\"ph2\">&lt;xref:System.Text.Encoder&gt;</ph> provided by the <ph id=\"ph3\">&lt;xref:System.Text.UTF7Encoding.GetDecoder%2A&gt;</ph> method or the <ph id=\"ph4\">&lt;xref:System.Text.UTF7Encoding.GetEncoder%2A&gt;</ph> method, respectively.","pos":[101,436],"source":" In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively."}]}]},{"pos":[444,1092],"content":"[!NOTE]\n <xref:System.Text.UTF7Encoding> does not provide error detection. When invalid bytes are encountered, <xref:System.Text.UTF7Encoding> generally emits the invalid bytes. If a byte is larger than hexadecimal 0x7F, the byte value is zero-extended into a Unicode character, the result is stored in the `chars` array, and any shift sequence is terminated. For example, if the byte to encode is hexadecimal 0x81, the resulting character is U+0081. For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.","leadings":["","> "],"nodes":[{"content":" <xref:System.Text.UTF7Encoding> does not provide error detection. When invalid bytes are encountered, <xref:System.Text.UTF7Encoding> generally emits the invalid bytes. If a byte is larger than hexadecimal 0x7F, the byte value is zero-extended into a Unicode character, the result is stored in the `chars` array, and any shift sequence is terminated. For example, if the byte to encode is hexadecimal 0x81, the resulting character is U+0081. For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.","pos":[8,646],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding&gt;</ph> does not provide error detection.","pos":[1,66],"source":" <xref:System.Text.UTF7Encoding> does not provide error detection."},{"content":"When invalid bytes are encountered, <ph id=\"ph1\">&lt;xref:System.Text.UTF7Encoding&gt;</ph> generally emits the invalid bytes.","pos":[67,169],"source":" When invalid bytes are encountered, <xref:System.Text.UTF7Encoding> generally emits the invalid bytes."},{"content":"If a byte is larger than hexadecimal 0x7F, the byte value is zero-extended into a Unicode character, the result is stored in the <ph id=\"ph1\">`chars`</ph> array, and any shift sequence is terminated.","pos":[170,351],"source":" If a byte is larger than hexadecimal 0x7F, the byte value is zero-extended into a Unicode character, the result is stored in the `chars` array, and any shift sequence is terminated."},{"content":"For example, if the byte to encode is hexadecimal 0x81, the resulting character is U+0081.","pos":[352,442]},{"content":"For security reasons, your applications are recommended to use <ph id=\"ph1\">&lt;xref:System.Text.UTF8Encoding&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Text.UTF32Encoding&gt;</ph> and enable error detection.","pos":[443,638],"source":" For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection."}]}]}],"pos":[86765,87863],"yaml":true,"extradata":"MT"},{"content":"The byte array containing the sequence of bytes to decode.","nodes":[{"pos":[0,58],"content":"The byte array containing the sequence of bytes to decode.","nodes":[{"content":"The byte array containing the sequence of bytes to decode.","pos":[0,58]}]}],"pos":[88710,88769],"yaml":true},{"content":"The index of the first byte to decode.","nodes":[{"pos":[0,38],"content":"The index of the first byte to decode.","nodes":[{"content":"The index of the first byte to decode.","pos":[0,38]}]}],"pos":[88829,88868],"yaml":true},{"content":"The number of bytes to decode.","nodes":[{"pos":[0,30],"content":"The number of bytes to decode.","nodes":[{"content":"The number of bytes to decode.","pos":[0,30]}]}],"pos":[88928,88959],"yaml":true},{"content":"A <xref href=\"System.String\"></xref> containing the results of decoding the specified sequence of bytes.","nodes":[{"pos":[0,104],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> containing the results of decoding the specified sequence of bytes.","source":"A <xref href=\"System.String\"></xref> containing the results of decoding the specified sequence of bytes."}],"pos":[89016,89121],"yaml":true},{"content":"<code>bytes</code> is `null` (`Nothing`).","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;bytes&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> (<ph id=\"ph3\">`Nothing`</ph>).","source":"<code>bytes</code> is `null` (`Nothing`)."}],"pos":[89285,89327],"yaml":true},{"content":"<code>index</code> or <code>count</code> is less than zero.  \n  \n -or-  \n  \n <code>index</code> and <code>count</code> do not denote a valid range in <code>bytes</code>.","nodes":[{"pos":[0,59],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","source":"<code>index</code> or <code>count</code> is less than zero."},{"pos":[66,70],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[77,169],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> do not denote a valid range in <ph id=\"ph3\">&lt;code&gt;bytes&lt;/code&gt;</ph>.","source":"<code>index</code> and <code>count</code> do not denote a valid range in <code>bytes</code>."}],"pos":[89441,89617],"yaml":true},{"content":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>.","nodes":[{"pos":[0,141],"content":"A fallback occurred (see <bpt id=\"p1\">[</bpt>Character Encoding in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)","source":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)"},{"pos":[148,153],"content":"-and-","nodes":[{"content":"-and-","pos":[0,5]}]},{"pos":[160,286],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Text.Encoding.DecoderFallback\"&gt;&lt;/xref&gt;</ph> is set to <ph id=\"ph2\">&lt;xref href=\"System.Text.DecoderExceptionFallback\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."}],"pos":[89735,90032],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Text.UTF7Encoding\n  commentId: T:System.Text.UTF7Encoding\n  id: UTF7Encoding\n  children:\n  - System.Text.UTF7Encoding.#ctor\n  - System.Text.UTF7Encoding.#ctor(System.Boolean)\n  - System.Text.UTF7Encoding.Equals(System.Object)\n  - System.Text.UTF7Encoding.GetByteCount(System.String)\n  - System.Text.UTF7Encoding.GetByteCount(System.Char*,System.Int32)\n  - System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  - System.Text.UTF7Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n  - System.Text.UTF7Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  - System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  - System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  - System.Text.UTF7Encoding.GetCharCount(System.Byte*,System.Int32)\n  - System.Text.UTF7Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  - System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  - System.Text.UTF7Encoding.GetDecoder\n  - System.Text.UTF7Encoding.GetEncoder\n  - System.Text.UTF7Encoding.GetHashCode\n  - System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)\n  - System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)\n  - System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n  langs:\n  - csharp\n  name: UTF7Encoding\n  nameWithType: UTF7Encoding\n  fullName: System.Text.UTF7Encoding\n  type: Class\n  assemblies:\n  - System.Text.Encoding.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Represents a UTF-7 encoding of Unicode characters.\n  remarks: \"Encoding is the process of transforming a set of Unicode characters into a sequence of bytes. Decoding is the process of transforming a sequence of encoded bytes into a set of Unicode characters.  \\n  \\n The UTF-7 encoding represents Unicode characters as sequences of 7-bit ASCII characters. This encoding supports certain protocols for which it is required, most often e-mail or newsgroup protocols. Since UTF-7 is not particularly secure or robust, and most modern systems allow 8-bit encodings, UTF-8 should normally be preferred to UTF-7.  \\n  \\n> [!NOTE]\\n>  <xref:System.Text.UTF7Encoding> does not provide error detection. For security reasons, the application should use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.  \\n  \\n For more information about the UTFs and other encodings supported by <xref:System.Text>, see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md).  \\n  \\n The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.UTF7Encoding.GetBytes%2A> method performs the actual encoding.  \\n  \\n Likewise, the <xref:System.Text.UTF7Encoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.UTF7Encoding.GetChars%2A> and <xref:System.Text.UTF7Encoding.GetString%2A> methods perform the actual decoding.  \\n  \\n <xref:System.Text.UTF7Encoding> corresponds to the Windows code page 65000.  \\n  \\n> [!NOTE]\\n>  The state of a UTF-7 encoded object is not preserved if the object is serialized and deserialized using different .NET Framework versions.\"\n  example:\n  - \"The following code example demonstrates how to use a <xref:System.Text.UTF7Encoding> to encode a string of Unicode characters and store them in a byte array. Notice that when the byte array is decoded back to a string, no data is lost.  \\n  \\n [!code-cpp[System.Text.UTF7Encoding Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding Example/CPP/snippet.cpp#1)]\\n [!code-csharp[System.Text.UTF7Encoding Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding Example/CS/snippet.cs#1)]\\n [!code-vb[System.Text.UTF7Encoding Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding Example/VB/snippet.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class UTF7Encoding : System.Text.Encoding\n  inheritance:\n  - System.Object\n  - System.Text.Encoding\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Text.Encoding.ASCII\n  - System.Text.Encoding.BigEndianUnicode\n  - System.Text.Encoding.BodyName\n  - System.Text.Encoding.Clone\n  - System.Text.Encoding.CodePage\n  - System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])\n  - System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)\n  - System.Text.Encoding.DecoderFallback\n  - System.Text.Encoding.Default\n  - System.Text.Encoding.EncoderFallback\n  - System.Text.Encoding.EncodingName\n  - System.Text.Encoding.GetByteCount(System.Char[])\n  - System.Text.Encoding.GetByteCount(System.String,System.Int32,System.Int32)\n  - System.Text.Encoding.GetBytes(System.Char[])\n  - System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)\n  - System.Text.Encoding.GetBytes(System.String)\n  - System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32)\n  - System.Text.Encoding.GetCharCount(System.Byte[])\n  - System.Text.Encoding.GetChars(System.Byte[])\n  - System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)\n  - System.Text.Encoding.GetEncoding(System.Int32)\n  - System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)\n  - System.Text.Encoding.GetEncoding(System.String)\n  - System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)\n  - System.Text.Encoding.GetEncodings\n  - System.Text.Encoding.GetPreamble\n  - System.Text.Encoding.GetString(System.Byte*,System.Int32)\n  - System.Text.Encoding.GetString(System.Byte[])\n  - System.Text.Encoding.HeaderName\n  - System.Text.Encoding.IsAlwaysNormalized\n  - System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)\n  - System.Text.Encoding.IsBrowserDisplay\n  - System.Text.Encoding.IsBrowserSave\n  - System.Text.Encoding.IsMailNewsDisplay\n  - System.Text.Encoding.IsMailNewsSave\n  - System.Text.Encoding.IsReadOnly\n  - System.Text.Encoding.IsSingleByte\n  - System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)\n  - System.Text.Encoding.Unicode\n  - System.Text.Encoding.UTF32\n  - System.Text.Encoding.UTF7\n  - System.Text.Encoding.UTF8\n  - System.Text.Encoding.WebName\n  - System.Text.Encoding.WindowsCodePage\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.UTF7Encoding.#ctor\n  commentId: M:System.Text.UTF7Encoding.#ctor\n  id: '#ctor'\n  parent: System.Text.UTF7Encoding\n  langs:\n  - csharp\n  name: UTF7Encoding()\n  nameWithType: UTF7Encoding.UTF7Encoding()\n  fullName: UTF7Encoding.UTF7Encoding()\n  type: Constructor\n  assemblies:\n  - System.Text.Encoding.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Initializes a new instance of the <xref href=\"System.Text.UTF7Encoding\"></xref> class.\n  remarks: \"This constructor creates an instance that does not allow optional characters. Calling the <xref:System.Text.UTF7Encoding.%23ctor%2A> constructor is equivalent to calling the <xref:System.Text.UTF7Encoding.%23ctor%28System.Boolean%29?displayProperty=fullName> constructor that takes an `allowOptionals` parameter and specifying `false` for that parameter.  \\n  \\n If an instance allows optional characters, Unicode code points are encoded with a corresponding optional character instead of a modified base 64 character. The optional characters are exclamation point (\\\"!\\\"), backward slash (\\\"\\\\\\\\\\\"), vertical line (\\\"&#124;\\\"), double quote (\\\"\\\"\\\"), number sign (\\\"#\\\"), dollar sign (\\\"$\\\"), percent sign (\\\"%\\\"), ampersand (\\\"&\\\"), asterisk (\\\"*\\\"), semicolon (\\\";\\\"), left angle bracket (\\\"\\\\<\\\"), right angle bracket (\\\">\\\"), left curly bracket (\\\"{\\\"), right curly bracket (\\\"}\\\"), left square bracket (\\\"[\\\"), right square bracket (\\\"]\\\"), equal sign (\\\"=\\\"), at sign (\\\"@\\\"), circumflex accent (\\\"^\\\"), underscore (\\\"_\\\"), and grave accent (\\\"`\\\").  \\n  \\n> [!NOTE]\\n>  <xref:System.Text.UTF7Encoding> does not provide error detection. For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.\"\n  example:\n  - \"The following code example demonstrates how to create a new <xref:System.Text.UTF7Encoding> instance and display the name of the encoding.  \\n  \\n [!code-cpp[System.Text.UTF7Encoding.ctor1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.ctor1 Example/CPP/ctor.cpp#1)]\\n [!code-csharp[System.Text.UTF7Encoding.ctor1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.ctor1 Example/CS/ctor.cs#1)]\\n [!code-vb[System.Text.UTF7Encoding.ctor1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.ctor1 Example/VB/ctor.vb#1)]\"\n  syntax:\n    content: public UTF7Encoding ();\n    parameters: []\n  overload: System.Text.UTF7Encoding.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.UTF7Encoding.#ctor(System.Boolean)\n  commentId: M:System.Text.UTF7Encoding.#ctor(System.Boolean)\n  id: '#ctor(System.Boolean)'\n  parent: System.Text.UTF7Encoding\n  langs:\n  - csharp\n  name: UTF7Encoding(Boolean)\n  nameWithType: UTF7Encoding.UTF7Encoding(Boolean)\n  fullName: UTF7Encoding.UTF7Encoding(Boolean)\n  type: Constructor\n  assemblies:\n  - System.Text.Encoding.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Initializes a new instance of the <xref href=\"System.Text.UTF7Encoding\"></xref> class. A parameter specifies whether to allow optional characters.\n  remarks: \"If an instance allows optional characters, Unicode code points are encoded with a corresponding optional character instead of a modified base 64 character. The optional characters are exclamation point (\\\"!\\\"), backward slash (\\\"\\\\\\\\\\\"), vertical line (\\\"&#124;\\\"), double quote (\\\"\\\"\\\"), number sign (\\\"#\\\"), dollar sign (\\\"$\\\"), percent sign (\\\"%\\\"), ampersand (\\\"&\\\"), asterisk (\\\"*\\\"), semicolon (\\\";\\\"), left angle bracket (\\\"\\\\<\\\"), right angle bracket (\\\">\\\"), left curly bracket (\\\"{\\\"), right curly bracket (\\\"}\\\"), left square bracket (\\\"[\\\"), right square bracket (\\\"]\\\"), equal sign (\\\"=\\\"), at sign (\\\"@\\\"), circumflex accent (\\\"^\\\"), underscore (\\\"_\\\"), and grave accent (\\\"`\\\").  \\n  \\n> [!NOTE]\\n>  <xref:System.Text.UTF7Encoding> does not provide error detection. For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.\"\n  example:\n  - \"The following code example demonstrates how to create a new <xref:System.Text.UTF7Encoding> instance that allows optional characters.  \\n  \\n [!code-cpp[System.Text.UTF7Encoding.ctor2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.ctor2 Example/CPP/ctor-boolean.cpp#1)]\\n [!code-csharp[System.Text.UTF7Encoding.ctor2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.ctor2 Example/CS/ctor-boolean.cs#1)]\\n [!code-vb[System.Text.UTF7Encoding.ctor2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.ctor2 Example/VB/ctor-boolean.vb#1)]\"\n  syntax:\n    content: public UTF7Encoding (bool allowOptionals);\n    parameters:\n    - id: allowOptionals\n      type: System.Boolean\n      description: '`true` to specify that optional characters are allowed; otherwise, `false`.'\n  overload: System.Text.UTF7Encoding.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.UTF7Encoding.Equals(System.Object)\n  commentId: M:System.Text.UTF7Encoding.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Text.UTF7Encoding\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: UTF7Encoding.Equals(Object)\n  fullName: UTF7Encoding.Equals(Object)\n  type: Method\n  assemblies:\n  - System.Text.Encoding.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Gets a value indicating whether the specified object is equal to the current <xref href=\"System.Text.UTF7Encoding\"></xref> object.\n  remarks: Two <xref:System.Text.UTF7Encoding> objects are equal if they both either allow or disallow optional characters, and if their underlying <xref:System.Text.Encoding.EncoderFallback%2A> and <xref:System.Text.Encoding.DecoderFallback%2A> properties are equal.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public override bool Equals (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: An object to compare to the current <xref href=\"System.Text.UTF7Encoding\"></xref> object.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>value</code> is a <xref href=\"System.Text.UTF7Encoding\"></xref> object and is equal to the current <xref href=\"System.Text.UTF7Encoding\"></xref> object; otherwise, `false`.'\n  overload: System.Text.UTF7Encoding.Equals*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.UTF7Encoding.GetByteCount(System.String)\n  commentId: M:System.Text.UTF7Encoding.GetByteCount(System.String)\n  id: GetByteCount(System.String)\n  parent: System.Text.UTF7Encoding\n  langs:\n  - csharp\n  name: GetByteCount(String)\n  nameWithType: UTF7Encoding.GetByteCount(String)\n  fullName: UTF7Encoding.GetByteCount(String)\n  type: Method\n  assemblies:\n  - System.Text.Encoding.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Calculates the number of bytes produced by encoding the characters in the specified <xref href=\"System.String\"></xref> object.\n  remarks: To calculate the exact array size that <xref:System.Text.UTF7Encoding.GetBytes%2A> requires to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>. The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.\n  example:\n  - \"The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetByteCount%2A> method to return the number of bytes required to encode a character array.  \\n  \\n [!code-cpp[System.Text.UTF7Encoding.GetByteCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetByteCount Example/CPP/getbytecount-char[]-int32-int32.cpp#1)]\\n [!code-csharp[System.Text.UTF7Encoding.GetByteCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetByteCount Example/CS/getbytecount-char[]-int32-int32.cs#1)]\\n [!code-vb[System.Text.UTF7Encoding.GetByteCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetByteCount Example/VB/getbytecount-char[]-int32-int32.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public override int GetByteCount (string s);\n    parameters:\n    - id: s\n      type: System.String\n      description: The <xref href=\"System.String\"></xref> object containing the set of characters to encode.\n    return:\n      type: System.Int32\n      description: The number of bytes produced by encoding the specified characters.\n  overload: System.Text.UTF7Encoding.GetByteCount*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>s</code> is `null` (`Nothing`).\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The resulting number of bytes is greater than the maximum number that can be returned as an int.\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \\n  \\n -and-  \\n  \\n <xref href=\\\"System.Text.Encoding.EncoderFallback\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\"></xref>.\"\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.UTF7Encoding.GetByteCount(System.Char*,System.Int32)\n  commentId: M:System.Text.UTF7Encoding.GetByteCount(System.Char*,System.Int32)\n  id: GetByteCount(System.Char*,System.Int32)\n  parent: System.Text.UTF7Encoding\n  langs:\n  - csharp\n  name: GetByteCount(Char*, Int32)\n  nameWithType: UTF7Encoding.GetByteCount(Char*, Int32)\n  fullName: UTF7Encoding.GetByteCount(Char*, Int32)\n  type: Method\n  assemblies:\n  - System.Text.Encoding.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.\n  remarks: To calculate the exact array size that <xref:System.Text.UTF7Encoding.GetBytes%2A> requires to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>. The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      [System.Security.SecurityCritical]\n\n      public override int GetByteCount (char* chars, int count);\n    parameters:\n    - id: chars\n      type: System.Char*\n      description: A pointer to the first character to encode.\n    - id: count\n      type: System.Int32\n      description: The number of characters to encode.\n    return:\n      type: System.Int32\n      description: The number of bytes produced by encoding the specified characters.\n  overload: System.Text.UTF7Encoding.GetByteCount*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>chars</code> is `null` (`Nothing` in Visual Basic .NET).\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>count</code> is less than zero.  \\n  \\n -or-  \\n  \\n The resulting number of bytes is greater than the maximum number that can be returned as an int.\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \\n  \\n -and-  \\n  \\n <xref href=\\\"System.Text.Encoding.EncoderFallback\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\"></xref>.\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  id: GetByteCount(System.Char[],System.Int32,System.Int32)\n  parent: System.Text.UTF7Encoding\n  langs:\n  - csharp\n  name: GetByteCount(Char[], Int32, Int32)\n  nameWithType: UTF7Encoding.GetByteCount(Char[], Int32, Int32)\n  fullName: UTF7Encoding.GetByteCount(Char[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Text.Encoding.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Calculates the number of bytes produced by encoding a set of characters from the specified character array.\n  remarks: To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>. The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.\n  example:\n  - \"The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetByteCount%2A> method to return the number of bytes required to encode an array of Unicode characters.  \\n  \\n [!code-cpp[System.Text.UTF7Encoding.GetByteCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetByteCount Example/CPP/getbytecount-char[]-int32-int32.cpp#1)]\\n [!code-csharp[System.Text.UTF7Encoding.GetByteCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetByteCount Example/CS/getbytecount-char[]-int32-int32.cs#1)]\\n [!code-vb[System.Text.UTF7Encoding.GetByteCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetByteCount Example/VB/getbytecount-char[]-int32-int32.vb#1)]\"\n  syntax:\n    content: public override int GetByteCount (char[] chars, int index, int count);\n    parameters:\n    - id: chars\n      type: System.Char[]\n      description: The character array containing the set of characters to encode.\n    - id: index\n      type: System.Int32\n      description: The index of the first character to encode.\n    - id: count\n      type: System.Int32\n      description: The number of characters to encode.\n    return:\n      type: System.Int32\n      description: The number of bytes produced by encoding the specified characters.\n  overload: System.Text.UTF7Encoding.GetByteCount*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>chars</code> is `null` (`Nothing`).\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> or <code>count</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>index</code> and <code>count</code> do not denote a valid range in <code>chars</code>.  \\n  \\n -or-  \\n  \\n The resulting number of bytes is greater than the maximum number that can be returned as an int.\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \\n  \\n -and-  \\n  \\n <xref href=\\\"System.Text.Encoding.EncoderFallback\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\"></xref>.\"\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.UTF7Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n  commentId: M:System.Text.UTF7Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n  id: GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n  parent: System.Text.UTF7Encoding\n  langs:\n  - csharp\n  name: GetBytes(Char*, Int32, Byte*, Int32)\n  nameWithType: UTF7Encoding.GetBytes(Char*, Int32, Byte*, Int32)\n  fullName: UTF7Encoding.GetBytes(Char*, Int32, Byte*, Int32)\n  type: Method\n  assemblies:\n  - System.Text.Encoding.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.\n  remarks: \"To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>. The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.  \\n  \\n Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.  \\n  \\n> [!NOTE]\\n>  <xref:System.Text.UTF7Encoding> does not provide error detection. Invalid characters are encoded as a modified base 64 character. For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      [System.Security.SecurityCritical]\n\n      public override int GetBytes (char* chars, int charCount, byte* bytes, int byteCount);\n    parameters:\n    - id: chars\n      type: System.Char*\n      description: A pointer to the first character to encode.\n    - id: charCount\n      type: System.Int32\n      description: The number of characters to encode.\n    - id: bytes\n      type: System.Byte*\n      description: A pointer to the location at which to start writing the resulting sequence of bytes.\n    - id: byteCount\n      type: System.Int32\n      description: The maximum number of bytes to write.\n    return:\n      type: System.Int32\n      description: The actual number of bytes written at the location indicated by <code>bytes</code>.\n  overload: System.Text.UTF7Encoding.GetBytes*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>chars</code> is `null` (`Nothing`).  \\n  \\n -or-  \\n  \\n <code>bytes</code> is `null` (`Nothing`).\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>charCount</code> or <code>byteCount</code> is less than zero.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>byteCount</code> is less than the resulting number of bytes.\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \\n  \\n -and-  \\n  \\n <xref href=\\\"System.Text.Encoding.EncoderFallback\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\"></xref>.\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.UTF7Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  commentId: M:System.Text.UTF7Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  id: GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Text.UTF7Encoding\n  langs:\n  - csharp\n  name: GetBytes(Char[], Int32, Int32, Byte[], Int32)\n  nameWithType: UTF7Encoding.GetBytes(Char[], Int32, Int32, Byte[], Int32)\n  fullName: UTF7Encoding.GetBytes(Char[], Int32, Int32, Byte[], Int32)\n  type: Method\n  assemblies:\n  - System.Text.Encoding.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Encodes a set of characters from the specified character array into the specified byte array.\n  remarks: \"To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>. The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.  \\n  \\n Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.  \\n  \\n> [!NOTE]\\n>  <xref:System.Text.UTF7Encoding> does not provide error detection. Invalid characters are encoded as a modified base 64 character. For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.\"\n  example:\n  - \"The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetBytes%2A> method to encode a range of characters from a <xref:System.String> and store the encoded bytes in a range of elements in a byte array.  \\n  \\n [!code-cpp[System.Text.UTF7Encoding.GetBytes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetBytes Example/CPP/getbytes-char[]-int32-int32-byte[]-int32.cpp#1)]\\n [!code-csharp[System.Text.UTF7Encoding.GetBytes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetBytes Example/CS/getbytes-char[]-int32-int32-byte[]-int32.cs#1)]\\n [!code-vb[System.Text.UTF7Encoding.GetBytes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetBytes Example/VB/getbytes-char[]-int32-int32-byte[]-int32.vb#1)]\"\n  syntax:\n    content: public override int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);\n    parameters:\n    - id: chars\n      type: System.Char[]\n      description: The character array containing the set of characters to encode.\n    - id: charIndex\n      type: System.Int32\n      description: The index of the first character to encode.\n    - id: charCount\n      type: System.Int32\n      description: The number of characters to encode.\n    - id: bytes\n      type: System.Byte[]\n      description: The byte array to contain the resulting sequence of bytes.\n    - id: byteIndex\n      type: System.Int32\n      description: The index at which to start writing the resulting sequence of bytes.\n    return:\n      type: System.Int32\n      description: The actual number of bytes written into <code>bytes</code>.\n  overload: System.Text.UTF7Encoding.GetBytes*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>chars</code> is `null` (`Nothing`).  \\n  \\n -or-  \\n  \\n <code>bytes</code> is `null` (`Nothing`).\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>charIndex</code> or <code>charCount</code> or <code>byteIndex</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>charIndex</code> and <code>charCount</code> do not denote a valid range in <code>chars</code>.  \\n  \\n -or-  \\n  \\n <code>byteIndex</code> is not a valid index in <code>bytes</code>.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>bytes</code> does not have enough capacity from <code>byteIndex</code> to the end of the array to accommodate the resulting bytes.\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \\n  \\n -and-  \\n  \\n <xref href=\\\"System.Text.Encoding.EncoderFallback\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\"></xref>.\"\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  commentId: M:System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  id: GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Text.UTF7Encoding\n  langs:\n  - csharp\n  name: GetBytes(String, Int32, Int32, Byte[], Int32)\n  nameWithType: UTF7Encoding.GetBytes(String, Int32, Int32, Byte[], Int32)\n  fullName: UTF7Encoding.GetBytes(String, Int32, Int32, Byte[], Int32)\n  type: Method\n  assemblies:\n  - System.Text.Encoding.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Encodes a set of characters from the specified <xref href=\"System.String\"></xref> into the specified byte array.\n  remarks: \"To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>. The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.  \\n  \\n Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.  \\n  \\n> [!NOTE]\\n>  <xref:System.Text.UTF7Encoding> does not provide error detection. Invalid characters are encoded as a modified base 64 character. For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.\"\n  example:\n  - \"The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetBytes%2A> method to encode a range of elements from a Unicode character array, and store the encoded bytes in a range of elements in a byte array.  \\n  \\n [!code-cpp[System.Text.UTF7Encoding.GetBytes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetBytes Example/CPP/getbytes-char[]-int32-int32-byte[]-int32.cpp#1)]\\n [!code-csharp[System.Text.UTF7Encoding.GetBytes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetBytes Example/CS/getbytes-char[]-int32-int32-byte[]-int32.cs#1)]\\n [!code-vb[System.Text.UTF7Encoding.GetBytes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetBytes Example/VB/getbytes-char[]-int32-int32-byte[]-int32.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public override int GetBytes (string s, int charIndex, int charCount, byte[] bytes, int byteIndex);\n    parameters:\n    - id: s\n      type: System.String\n      description: The <xref href=\"System.String\"></xref> containing the set of characters to encode.\n    - id: charIndex\n      type: System.Int32\n      description: The index of the first character to encode.\n    - id: charCount\n      type: System.Int32\n      description: The number of characters to encode.\n    - id: bytes\n      type: System.Byte[]\n      description: The byte array to contain the resulting sequence of bytes.\n    - id: byteIndex\n      type: System.Int32\n      description: The index at which to start writing the resulting sequence of bytes.\n    return:\n      type: System.Int32\n      description: The actual number of bytes written into <code>bytes</code>.\n  overload: System.Text.UTF7Encoding.GetBytes*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>s</code> is `null` (`Nothing`).  \\n  \\n -or-  \\n  \\n <code>bytes</code> is `null` (`Nothing`).\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>charIndex</code> or <code>charCount</code> or <code>byteIndex</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>charIndex</code> and <code>charCount</code> do not denote a valid range in <code>chars</code>.  \\n  \\n -or-  \\n  \\n <code>byteIndex</code> is not a valid index in <code>bytes</code>.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>bytes</code> does not have enough capacity from <code>byteIndex</code> to the end of the array to accommodate the resulting bytes.\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \\n  \\n -and-  \\n  \\n <xref href=\\\"System.Text.Encoding.EncoderFallback\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\"></xref>.\"\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  id: GetCharCount(System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.UTF7Encoding\n  langs:\n  - csharp\n  name: GetCharCount(Byte[], Int32, Int32)\n  nameWithType: UTF7Encoding.GetCharCount(Byte[], Int32, Int32)\n  fullName: UTF7Encoding.GetCharCount(Byte[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Text.Encoding.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.\n  remarks: To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, use <xref:System.Text.UTF7Encoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>. The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster.\n  example:\n  - \"The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetCharCount%2A> method to return the number of characters produced by decoding a range of elements in a byte array.  \\n  \\n [!code-cpp[System.Text.UnicodeEncoding.GetCharCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetCharCount Example/CPP/getcharcount-byte[]-int32-int32.cpp#1)]\\n [!code-csharp[System.Text.UnicodeEncoding.GetCharCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetCharCount Example/CS/getcharcount-byte[]-int32-int32.cs#1)]\\n [!code-vb[System.Text.UnicodeEncoding.GetCharCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetCharCount Example/VB/getcharcount-byte[]-int32-int32.vb#1)]\"\n  syntax:\n    content: public override int GetCharCount (byte[] bytes, int index, int count);\n    parameters:\n    - id: bytes\n      type: System.Byte[]\n      description: The byte array containing the sequence of bytes to decode.\n    - id: index\n      type: System.Int32\n      description: The index of the first byte to decode.\n    - id: count\n      type: System.Int32\n      description: The number of bytes to decode.\n    return:\n      type: System.Int32\n      description: The number of characters produced by decoding the specified sequence of bytes.\n  overload: System.Text.UTF7Encoding.GetCharCount*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>bytes</code> is `null` (`Nothing`).\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> or <code>count</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>index</code> and <code>count</code> do not denote a valid range in <code>bytes</code>.  \\n  \\n -or-  \\n  \\n The resulting number of characters is greater than the maximum number that can be returned as an int.\"\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \\n  \\n -and-  \\n  \\n <xref href=\\\"System.Text.Encoding.DecoderFallback\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\"></xref>.\"\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.UTF7Encoding.GetCharCount(System.Byte*,System.Int32)\n  commentId: M:System.Text.UTF7Encoding.GetCharCount(System.Byte*,System.Int32)\n  id: GetCharCount(System.Byte*,System.Int32)\n  parent: System.Text.UTF7Encoding\n  langs:\n  - csharp\n  name: GetCharCount(Byte*, Int32)\n  nameWithType: UTF7Encoding.GetCharCount(Byte*, Int32)\n  fullName: UTF7Encoding.GetCharCount(Byte*, Int32)\n  type: Method\n  assemblies:\n  - System.Text.Encoding.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.\n  remarks: To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, use <xref:System.Text.UTF7Encoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>. The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster.\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      [System.Security.SecurityCritical]\n\n      public override int GetCharCount (byte* bytes, int count);\n    parameters:\n    - id: bytes\n      type: System.Byte*\n      description: A pointer to the first byte to decode.\n    - id: count\n      type: System.Int32\n      description: The number of bytes to decode.\n    return:\n      type: System.Int32\n      description: The number of characters produced by decoding the specified sequence of bytes.\n  overload: System.Text.UTF7Encoding.GetCharCount*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>bytes</code> is `null` (`Nothing`).\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>count</code> is less than zero.  \\n  \\n -or-  \\n  \\n The resulting number of characters is greater than the maximum number that can be returned as an int.\"\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \\n  \\n -and-  \\n  \\n <xref href=\\\"System.Text.Encoding.DecoderFallback\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\"></xref>.\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.UTF7Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  commentId: M:System.Text.UTF7Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  id: GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  parent: System.Text.UTF7Encoding\n  langs:\n  - csharp\n  name: GetChars(Byte*, Int32, Char*, Int32)\n  nameWithType: UTF7Encoding.GetChars(Byte*, Int32, Char*, Int32)\n  fullName: UTF7Encoding.GetChars(Byte*, Int32, Char*, Int32)\n  type: Method\n  assemblies:\n  - System.Text.Encoding.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.\n  remarks: \"To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, use <xref:System.Text.UTF7Encoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>. The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster.  \\n  \\n Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.  \\n  \\n> [!NOTE]\\n>  <xref:System.Text.UTF7Encoding> does not provide error detection. When invalid bytes are encountered, <xref:System.Text.UTF7Encoding> generally emits the invalid bytes. If a byte is larger than hexadecimal 0x7F, the byte value is zero-extended into a Unicode character, the result is stored in the `chars` array, and any shift sequence is terminated. For example, if the byte to encode is hexadecimal 0x81, the resulting character is U+0081. For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      [System.Security.SecurityCritical]\n\n      public override int GetChars (byte* bytes, int byteCount, char* chars, int charCount);\n    parameters:\n    - id: bytes\n      type: System.Byte*\n      description: A pointer to the first byte to decode.\n    - id: byteCount\n      type: System.Int32\n      description: The number of bytes to decode.\n    - id: chars\n      type: System.Char*\n      description: A pointer to the location at which to start writing the resulting set of characters.\n    - id: charCount\n      type: System.Int32\n      description: The maximum number of characters to write.\n    return:\n      type: System.Int32\n      description: The actual number of characters written at the location indicated by <code>chars</code>.\n  overload: System.Text.UTF7Encoding.GetChars*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>bytes</code> is `null` (`Nothing`).  \\n  \\n -or-  \\n  \\n <code>chars</code> is `null` (`Nothing`).\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>byteCount</code> or <code>charCount</code> is less than zero.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>charCount</code> is less than the resulting number of characters.\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \\n  \\n -and-  \\n  \\n <xref href=\\\"System.Text.Encoding.DecoderFallback\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\"></xref>.\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  commentId: M:System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  id: GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  parent: System.Text.UTF7Encoding\n  langs:\n  - csharp\n  name: GetChars(Byte[], Int32, Int32, Char[], Int32)\n  nameWithType: UTF7Encoding.GetChars(Byte[], Int32, Int32, Char[], Int32)\n  fullName: UTF7Encoding.GetChars(Byte[], Int32, Int32, Char[], Int32)\n  type: Method\n  assemblies:\n  - System.Text.Encoding.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Decodes a sequence of bytes from the specified byte array into the specified character array.\n  remarks: \"To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, use <xref:System.Text.UTF7Encoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>. The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster.  \\n  \\n Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.  \\n  \\n> [!NOTE]\\n>  <xref:System.Text.UTF7Encoding> does not provide error detection. When invalid bytes are encountered, <xref:System.Text.UTF7Encoding> generally emits the invalid bytes. If a byte is larger than hexadecimal 0x7F, the byte value is zero-extended into a Unicode character, the result is stored in the `chars` array, and any shift sequence is terminated. For example, if the byte to encode is hexadecimal 0x81, the resulting character is U+0081. For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.\"\n  example:\n  - \"The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetChars%2A> method to decode a range of elements in a byte array and store the result in a character array.  \\n  \\n [!code-cpp[System.Text.UTF7Encoding.GetChars Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetChars Example/CPP/getchars-byte[]-int32-int32-char[]-int32.cpp#1)]\\n [!code-csharp[System.Text.UTF7Encoding.GetChars Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetChars Example/CS/getchars-byte[]-int32-int32-char[]-int32.cs#1)]\\n [!code-vb[System.Text.UTF7Encoding.GetChars Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetChars Example/VB/getchars-byte[]-int32-int32-char[]-int32.vb#1)]\"\n  syntax:\n    content: public override int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);\n    parameters:\n    - id: bytes\n      type: System.Byte[]\n      description: The byte array containing the sequence of bytes to decode.\n    - id: byteIndex\n      type: System.Int32\n      description: The index of the first byte to decode.\n    - id: byteCount\n      type: System.Int32\n      description: The number of bytes to decode.\n    - id: chars\n      type: System.Char[]\n      description: The character array to contain the resulting set of characters.\n    - id: charIndex\n      type: System.Int32\n      description: The index at which to start writing the resulting set of characters.\n    return:\n      type: System.Int32\n      description: The actual number of characters written into <code>chars</code>.\n  overload: System.Text.UTF7Encoding.GetChars*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>bytes</code> is `null` (`Nothing`).  \\n  \\n -or-  \\n  \\n <code>chars</code> is `null` (`Nothing`).\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>byteIndex</code> or <code>byteCount</code> or <code>charIndex</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>byteindex</code> and <code>byteCount</code> do not denote a valid range in <code>bytes</code>.  \\n  \\n -or-  \\n  \\n <code>charIndex</code> is not a valid index in <code>chars</code>.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>chars</code> does not have enough capacity from <code>charIndex</code> to the end of the array to accommodate the resulting characters.\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \\n  \\n -and-  \\n  \\n <xref href=\\\"System.Text.Encoding.DecoderFallback\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\"></xref>.\"\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.UTF7Encoding.GetDecoder\n  commentId: M:System.Text.UTF7Encoding.GetDecoder\n  id: GetDecoder\n  parent: System.Text.UTF7Encoding\n  langs:\n  - csharp\n  name: GetDecoder()\n  nameWithType: UTF7Encoding.GetDecoder()\n  fullName: UTF7Encoding.GetDecoder()\n  type: Method\n  assemblies:\n  - System.Text.Encoding.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Obtains a decoder that converts a UTF-7 encoded sequence of bytes into a sequence of Unicode characters.\n  remarks: The <xref:System.Text.Decoder.GetChars%2A?displayProperty=fullName> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref:System.Text.UTF7Encoding.GetChars%2A> method of this class. However, a <xref:System.Text.Decoder> maintains state information between calls so it can correctly decode byte sequences that span blocks. The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation. Therefore, <xref:System.Text.UTF7Encoding.GetDecoder%2A> and <xref:System.Text.UTF7Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.\n  example:\n  - \"The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method to obtain a decoder to convert the UTF-7 encoded bytes into a sequence of characters.  \\n  \\n [!code-cpp[System.Text.UTF7Encoding.GetDecoder Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetDecoder Example/CPP/getdecoder-.cpp#1)]\\n [!code-csharp[System.Text.UTF7Encoding.GetDecoder Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetDecoder Example/CS/getdecoder-.cs#1)]\\n [!code-vb[System.Text.UTF7Encoding.GetDecoder Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetDecoder Example/VB/getdecoder-.vb#1)]\"\n  syntax:\n    content: public override System.Text.Decoder GetDecoder ();\n    parameters: []\n    return:\n      type: System.Text.Decoder\n      description: A <xref href=\"System.Text.Decoder\"></xref> that converts a UTF-7 encoded sequence of bytes into a sequence of Unicode characters.\n  overload: System.Text.UTF7Encoding.GetDecoder*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.UTF7Encoding.GetEncoder\n  commentId: M:System.Text.UTF7Encoding.GetEncoder\n  id: GetEncoder\n  parent: System.Text.UTF7Encoding\n  langs:\n  - csharp\n  name: GetEncoder()\n  nameWithType: UTF7Encoding.GetEncoder()\n  fullName: UTF7Encoding.GetEncoder()\n  type: Method\n  assemblies:\n  - System.Text.Encoding.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Obtains an encoder that converts a sequence of Unicode characters into a UTF-7 encoded sequence of bytes.\n  remarks: The <xref:System.Text.Decoder.GetChars%2A?displayProperty=fullName> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref:System.Text.UTF7Encoding.GetChars%2A> method. However, a <xref:System.Text.Decoder> maintains state information between calls so it can correctly decode byte sequences that span blocks. The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation. Therefore, <xref:System.Text.UTF7Encoding.GetDecoder%2A> and <xref:System.Text.UTF7Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.\n  example:\n  - \"The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method to obtain an encoder to convert a sequence of characters into a UTF-7 encoded sequence of bytes.  \\n  \\n [!code-cpp[System.Text.UTF7Encoding.GetEncoder Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetEncoder Example/CPP/getencoder-.cpp#1)]\\n [!code-csharp[System.Text.UTF7Encoding.GetEncoder Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetEncoder Example/CS/getencoder-.cs#1)]\\n [!code-vb[System.Text.UTF7Encoding.GetEncoder Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetEncoder Example/VB/getencoder-.vb#1)]\"\n  syntax:\n    content: public override System.Text.Encoder GetEncoder ();\n    parameters: []\n    return:\n      type: System.Text.Encoder\n      description: A <xref href=\"System.Text.Encoder\"></xref> that converts a sequence of Unicode characters into a UTF-7 encoded sequence of bytes.\n  overload: System.Text.UTF7Encoding.GetEncoder*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.UTF7Encoding.GetHashCode\n  commentId: M:System.Text.UTF7Encoding.GetHashCode\n  id: GetHashCode\n  parent: System.Text.UTF7Encoding\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: UTF7Encoding.GetHashCode()\n  fullName: UTF7Encoding.GetHashCode()\n  type: Method\n  assemblies:\n  - System.Text.Encoding.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Returns the hash code for the current <xref href=\"System.Text.UTF7Encoding\"></xref> object.\n  remarks: The value returned by the <xref:System.Text.UTF7Encoding.GetHashCode%2A> method is not suitable for distinguishing one <xref:System.Text.UTF7Encoding> object from another. If your application needs a unique hash code, it should override the <xref:System.Text.UTF7Encoding.GetHashCode%2A> method.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: A 32-bit signed integer hash code.\n  overload: System.Text.UTF7Encoding.GetHashCode*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)\n  commentId: M:System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)\n  id: GetMaxByteCount(System.Int32)\n  parent: System.Text.UTF7Encoding\n  langs:\n  - csharp\n  name: GetMaxByteCount(Int32)\n  nameWithType: UTF7Encoding.GetMaxByteCount(Int32)\n  fullName: UTF7Encoding.GetMaxByteCount(Int32)\n  type: Method\n  assemblies:\n  - System.Text.Encoding.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Calculates the maximum number of bytes produced by encoding the specified number of characters.\n  remarks: \"To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>. The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.  \\n  \\n <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> is a worst-case number, including the worst case for the currently selected <xref:System.Text.EncoderFallback>. If a fallback is chosen with a potentially large string, <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> can return large values.  \\n  \\n In most cases, this method returns reasonable numbers for small strings. For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded. You might also want to consider a different approach using <xref:System.Text.UTF7Encoding.GetByteCount%2A> or <xref:System.Text.Encoder.Convert%2A?displayProperty=fullName>. While UTF-7 is very efficient at encoding ASCII data, one byte per character, it is extremely inefficient for other data. As remarked above, <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> deals with a worst case. If the data to be encoded is largely ASCII, and especially if the ASCII characters cluster together, UTF-7 is significantly more efficient than the number returned by this method suggests.  \\n  \\n <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> has no relation to <xref:System.Text.UTF7Encoding.GetChars%2A>. If your application needs a similar function to use with <xref:System.Text.UTF7Encoding.GetChars%2A>, it should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>.  \\n  \\n> [!NOTE]\\n>  `GetMaxByteCount(N)` is not necessarily the same value as `N* GetMaxByteCount(1)`.\"\n  example:\n  - \"The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method to return the maximum number of bytes required to encode a specified number of characters.  \\n  \\n [!code-cpp[System.Text.UTF7Encoding.GetMaxByteCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetMaxByteCount Example/CPP/getmaxbytecount-int32.cpp#1)]\\n [!code-csharp[System.Text.UTF7Encoding.GetMaxByteCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetMaxByteCount Example/CS/getmaxbytecount-int32.cs#1)]\\n [!code-vb[System.Text.UTF7Encoding.GetMaxByteCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetMaxByteCount Example/VB/getmaxbytecount-int32.vb#1)]\"\n  syntax:\n    content: public override int GetMaxByteCount (int charCount);\n    parameters:\n    - id: charCount\n      type: System.Int32\n      description: The number of characters to encode.\n    return:\n      type: System.Int32\n      description: The maximum number of bytes produced by encoding the specified number of characters.\n  overload: System.Text.UTF7Encoding.GetMaxByteCount*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>charCount</code> is less than zero.  \\n  \\n -or-  \\n  \\n The resulting number of bytes is greater than the maximum number that can be returned as an int.\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \\n  \\n -and-  \\n  \\n <xref href=\\\"System.Text.Encoding.EncoderFallback\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\"></xref>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)\n  commentId: M:System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)\n  id: GetMaxCharCount(System.Int32)\n  parent: System.Text.UTF7Encoding\n  langs:\n  - csharp\n  name: GetMaxCharCount(Int32)\n  nameWithType: UTF7Encoding.GetMaxCharCount(Int32)\n  fullName: UTF7Encoding.GetMaxCharCount(Int32)\n  type: Method\n  assemblies:\n  - System.Text.Encoding.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Calculates the maximum number of characters produced by decoding the specified number of bytes.\n  remarks: \"To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.UTF7Encoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>. The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster.  \\n  \\n <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> is a worst-case number, including the worst case for the currently selected <xref:System.Text.DecoderFallback>. If a fallback is chosen with a potentially large string, <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> can return large values.  \\n  \\n In most cases, this method returns reasonable numbers for small strings. For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded. You might also want to consider a different approach using <xref:System.Text.UTF7Encoding.GetCharCount%2A> or <xref:System.Text.Decoder.Convert%2A?displayProperty=fullName>.  \\n  \\n <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> has no relation to <xref:System.Text.UTF7Encoding.GetBytes%2A>. If your application needs a similar function to use with <xref:System.Text.UTF7Encoding.GetBytes%2A>, it should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>.  \\n  \\n> [!NOTE]\\n>  `GetMaxCharCount(N)` is not necessarily the same value as `N* GetMaxCharCount(1)`.\"\n  example:\n  - \"The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method to return the maximum number of characters produced by decoding a specified number of bytes.  \\n  \\n [!code-cpp[System.Text.UTF7Encoding.GetMaxCharCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetMaxCharCount Example/CPP/getmaxcharcount-int32.cpp#1)]\\n [!code-csharp[System.Text.UTF7Encoding.GetMaxCharCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetMaxCharCount Example/CS/getmaxcharcount-int32.cs#1)]\\n [!code-vb[System.Text.UTF7Encoding.GetMaxCharCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetMaxCharCount Example/VB/getmaxcharcount-int32.vb#1)]\"\n  syntax:\n    content: public override int GetMaxCharCount (int byteCount);\n    parameters:\n    - id: byteCount\n      type: System.Int32\n      description: The number of bytes to decode.\n    return:\n      type: System.Int32\n      description: The maximum number of characters produced by decoding the specified number of bytes.\n  overload: System.Text.UTF7Encoding.GetMaxCharCount*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>byteCount</code> is less than zero.  \\n  \\n -or-  \\n  \\n The resulting number of characters is greater than the maximum number that can be returned as an int.\"\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \\n  \\n -and-  \\n  \\n <xref href=\\\"System.Text.Encoding.DecoderFallback\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\"></xref>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n  id: GetString(System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.UTF7Encoding\n  langs:\n  - csharp\n  name: GetString(Byte[], Int32, Int32)\n  nameWithType: UTF7Encoding.GetString(Byte[], Int32, Int32)\n  fullName: UTF7Encoding.GetString(Byte[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Text.Encoding.Extensions\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Decodes a range of bytes from a byte array into a string.\n  remarks: \"Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.  \\n  \\n> [!NOTE]\\n>  <xref:System.Text.UTF7Encoding> does not provide error detection. When invalid bytes are encountered, <xref:System.Text.UTF7Encoding> generally emits the invalid bytes. If a byte is larger than hexadecimal 0x7F, the byte value is zero-extended into a Unicode character, the result is stored in the `chars` array, and any shift sequence is terminated. For example, if the byte to encode is hexadecimal 0x81, the resulting character is U+0081. For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.\"\n  example:\n  - \"The following code example encodes a string into an array of bytes, and then decodes the bytes back into a string.  \\n  \\n [!code-cpp[System.Text.UTF7Encoding.getstring#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.getstring/CPP/getstring.cpp#1)]\\n [!code-csharp[System.Text.UTF7Encoding.getstring#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.getstring/CS/getstring.cs#1)]\\n [!code-vb[System.Text.UTF7Encoding.getstring#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.getstring/VB/getstring.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public override string GetString (byte[] bytes, int index, int count);\n    parameters:\n    - id: bytes\n      type: System.Byte[]\n      description: The byte array containing the sequence of bytes to decode.\n    - id: index\n      type: System.Int32\n      description: The index of the first byte to decode.\n    - id: count\n      type: System.Int32\n      description: The number of bytes to decode.\n    return:\n      type: System.String\n      description: A <xref href=\"System.String\"></xref> containing the results of decoding the specified sequence of bytes.\n  overload: System.Text.UTF7Encoding.GetString*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>bytes</code> is `null` (`Nothing`).\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> or <code>count</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>index</code> and <code>count</code> do not denote a valid range in <code>bytes</code>.\"\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \\n  \\n -and-  \\n  \\n <xref href=\\\"System.Text.Encoding.DecoderFallback\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\"></xref>.\"\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Text.Encoding\n  parent: System.Text\n  isExternal: false\n  name: Encoding\n  nameWithType: Encoding\n  fullName: System.Text.Encoding\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.Text.EncoderFallbackException\n  parent: System.Text\n  isExternal: false\n  name: EncoderFallbackException\n  nameWithType: EncoderFallbackException\n  fullName: System.Text.EncoderFallbackException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.Text.DecoderFallbackException\n  parent: System.Text\n  isExternal: false\n  name: DecoderFallbackException\n  nameWithType: DecoderFallbackException\n  fullName: System.Text.DecoderFallbackException\n- uid: System.Text.UTF7Encoding.#ctor\n  parent: System.Text.UTF7Encoding\n  isExternal: false\n  name: UTF7Encoding()\n  nameWithType: UTF7Encoding.UTF7Encoding()\n  fullName: UTF7Encoding.UTF7Encoding()\n- uid: System.Text.UTF7Encoding.#ctor(System.Boolean)\n  parent: System.Text.UTF7Encoding\n  isExternal: false\n  name: UTF7Encoding(Boolean)\n  nameWithType: UTF7Encoding.UTF7Encoding(Boolean)\n  fullName: UTF7Encoding.UTF7Encoding(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Text.UTF7Encoding.Equals(System.Object)\n  parent: System.Text.UTF7Encoding\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: UTF7Encoding.Equals(Object)\n  fullName: UTF7Encoding.Equals(Object)\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Text.UTF7Encoding.GetByteCount(System.String)\n  parent: System.Text.UTF7Encoding\n  isExternal: false\n  name: GetByteCount(String)\n  nameWithType: UTF7Encoding.GetByteCount(String)\n  fullName: UTF7Encoding.GetByteCount(String)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Text.UTF7Encoding.GetByteCount(System.Char*,System.Int32)\n  parent: System.Text.UTF7Encoding\n  isExternal: false\n  name: GetByteCount(Char*, Int32)\n  nameWithType: UTF7Encoding.GetByteCount(Char*, Int32)\n  fullName: UTF7Encoding.GetByteCount(Char*, Int32)\n- uid: System.Char\n  name: Char\n  nameWithType: Char\n  fullName: System.Char\n- uid: System.Char*\n  parent: System\n  isExternal: false\n  name: Char*\n  nameWithType: Char*\n  fullName: System.Char*\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    nameWithType: Char\n    fullName: System.Char\n  - name: '*'\n    nameWithType: '*'\n    fullName: '*'\n- uid: System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  parent: System.Text.UTF7Encoding\n  isExternal: false\n  name: GetByteCount(Char[], Int32, Int32)\n  nameWithType: UTF7Encoding.GetByteCount(Char[], Int32, Int32)\n  fullName: UTF7Encoding.GetByteCount(Char[], Int32, Int32)\n- uid: System.Char[]\n  parent: System\n  isExternal: false\n  name: Char[]\n  nameWithType: Char[]\n  fullName: System.Char[]\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    nameWithType: Char\n    fullName: System.Char\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Text.UTF7Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n  parent: System.Text.UTF7Encoding\n  isExternal: false\n  name: GetBytes(Char*, Int32, Byte*, Int32)\n  nameWithType: UTF7Encoding.GetBytes(Char*, Int32, Byte*, Int32)\n  fullName: UTF7Encoding.GetBytes(Char*, Int32, Byte*, Int32)\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte*\n  parent: System\n  isExternal: false\n  name: Byte*\n  nameWithType: Byte*\n  fullName: System.Byte*\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '*'\n    nameWithType: '*'\n    fullName: '*'\n- uid: System.Text.UTF7Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Text.UTF7Encoding\n  isExternal: false\n  name: GetBytes(Char[], Int32, Int32, Byte[], Int32)\n  nameWithType: UTF7Encoding.GetBytes(Char[], Int32, Int32, Byte[], Int32)\n  fullName: UTF7Encoding.GetBytes(Char[], Int32, Int32, Byte[], Int32)\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Text.UTF7Encoding\n  isExternal: false\n  name: GetBytes(String, Int32, Int32, Byte[], Int32)\n  nameWithType: UTF7Encoding.GetBytes(String, Int32, Int32, Byte[], Int32)\n  fullName: UTF7Encoding.GetBytes(String, Int32, Int32, Byte[], Int32)\n- uid: System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.UTF7Encoding\n  isExternal: false\n  name: GetCharCount(Byte[], Int32, Int32)\n  nameWithType: UTF7Encoding.GetCharCount(Byte[], Int32, Int32)\n  fullName: UTF7Encoding.GetCharCount(Byte[], Int32, Int32)\n- uid: System.Text.UTF7Encoding.GetCharCount(System.Byte*,System.Int32)\n  parent: System.Text.UTF7Encoding\n  isExternal: false\n  name: GetCharCount(Byte*, Int32)\n  nameWithType: UTF7Encoding.GetCharCount(Byte*, Int32)\n  fullName: UTF7Encoding.GetCharCount(Byte*, Int32)\n- uid: System.Text.UTF7Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  parent: System.Text.UTF7Encoding\n  isExternal: false\n  name: GetChars(Byte*, Int32, Char*, Int32)\n  nameWithType: UTF7Encoding.GetChars(Byte*, Int32, Char*, Int32)\n  fullName: UTF7Encoding.GetChars(Byte*, Int32, Char*, Int32)\n- uid: System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  parent: System.Text.UTF7Encoding\n  isExternal: false\n  name: GetChars(Byte[], Int32, Int32, Char[], Int32)\n  nameWithType: UTF7Encoding.GetChars(Byte[], Int32, Int32, Char[], Int32)\n  fullName: UTF7Encoding.GetChars(Byte[], Int32, Int32, Char[], Int32)\n- uid: System.Text.UTF7Encoding.GetDecoder\n  parent: System.Text.UTF7Encoding\n  isExternal: false\n  name: GetDecoder()\n  nameWithType: UTF7Encoding.GetDecoder()\n  fullName: UTF7Encoding.GetDecoder()\n- uid: System.Text.Decoder\n  parent: System.Text\n  isExternal: false\n  name: Decoder\n  nameWithType: Decoder\n  fullName: System.Text.Decoder\n- uid: System.Text.UTF7Encoding.GetEncoder\n  parent: System.Text.UTF7Encoding\n  isExternal: false\n  name: GetEncoder()\n  nameWithType: UTF7Encoding.GetEncoder()\n  fullName: UTF7Encoding.GetEncoder()\n- uid: System.Text.Encoder\n  parent: System.Text\n  isExternal: false\n  name: Encoder\n  nameWithType: Encoder\n  fullName: System.Text.Encoder\n- uid: System.Text.UTF7Encoding.GetHashCode\n  parent: System.Text.UTF7Encoding\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: UTF7Encoding.GetHashCode()\n  fullName: UTF7Encoding.GetHashCode()\n- uid: System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)\n  parent: System.Text.UTF7Encoding\n  isExternal: false\n  name: GetMaxByteCount(Int32)\n  nameWithType: UTF7Encoding.GetMaxByteCount(Int32)\n  fullName: UTF7Encoding.GetMaxByteCount(Int32)\n- uid: System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)\n  parent: System.Text.UTF7Encoding\n  isExternal: false\n  name: GetMaxCharCount(Int32)\n  nameWithType: UTF7Encoding.GetMaxCharCount(Int32)\n  fullName: UTF7Encoding.GetMaxCharCount(Int32)\n- uid: System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.UTF7Encoding\n  isExternal: false\n  name: GetString(Byte[], Int32, Int32)\n  nameWithType: UTF7Encoding.GetString(Byte[], Int32, Int32)\n  fullName: UTF7Encoding.GetString(Byte[], Int32, Int32)\n- uid: System.Text.UTF7Encoding.#ctor*\n  parent: System.Text.UTF7Encoding\n  isExternal: false\n  name: UTF7Encoding\n  nameWithType: UTF7Encoding.UTF7Encoding\n  fullName: UTF7Encoding.UTF7Encoding\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml\n- uid: System.Text.UTF7Encoding.Equals*\n  parent: System.Text.UTF7Encoding\n  isExternal: false\n  name: Equals\n  nameWithType: UTF7Encoding.Equals\n  fullName: UTF7Encoding.Equals\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml\n- uid: System.Text.UTF7Encoding.GetByteCount*\n  parent: System.Text.UTF7Encoding\n  isExternal: false\n  name: GetByteCount\n  nameWithType: UTF7Encoding.GetByteCount\n  fullName: UTF7Encoding.GetByteCount\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml\n- uid: System.Text.UTF7Encoding.GetBytes*\n  parent: System.Text.UTF7Encoding\n  isExternal: false\n  name: GetBytes\n  nameWithType: UTF7Encoding.GetBytes\n  fullName: UTF7Encoding.GetBytes\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml\n- uid: System.Text.UTF7Encoding.GetCharCount*\n  parent: System.Text.UTF7Encoding\n  isExternal: false\n  name: GetCharCount\n  nameWithType: UTF7Encoding.GetCharCount\n  fullName: UTF7Encoding.GetCharCount\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml\n- uid: System.Text.UTF7Encoding.GetChars*\n  parent: System.Text.UTF7Encoding\n  isExternal: false\n  name: GetChars\n  nameWithType: UTF7Encoding.GetChars\n  fullName: UTF7Encoding.GetChars\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml\n- uid: System.Text.UTF7Encoding.GetDecoder*\n  parent: System.Text.UTF7Encoding\n  isExternal: false\n  name: GetDecoder\n  nameWithType: UTF7Encoding.GetDecoder\n  fullName: UTF7Encoding.GetDecoder\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml\n- uid: System.Text.UTF7Encoding.GetEncoder*\n  parent: System.Text.UTF7Encoding\n  isExternal: false\n  name: GetEncoder\n  nameWithType: UTF7Encoding.GetEncoder\n  fullName: UTF7Encoding.GetEncoder\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml\n- uid: System.Text.UTF7Encoding.GetHashCode*\n  parent: System.Text.UTF7Encoding\n  isExternal: false\n  name: GetHashCode\n  nameWithType: UTF7Encoding.GetHashCode\n  fullName: UTF7Encoding.GetHashCode\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml\n- uid: System.Text.UTF7Encoding.GetMaxByteCount*\n  parent: System.Text.UTF7Encoding\n  isExternal: false\n  name: GetMaxByteCount\n  nameWithType: UTF7Encoding.GetMaxByteCount\n  fullName: UTF7Encoding.GetMaxByteCount\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml\n- uid: System.Text.UTF7Encoding.GetMaxCharCount*\n  parent: System.Text.UTF7Encoding\n  isExternal: false\n  name: GetMaxCharCount\n  nameWithType: UTF7Encoding.GetMaxCharCount\n  fullName: UTF7Encoding.GetMaxCharCount\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml\n- uid: System.Text.UTF7Encoding.GetString*\n  parent: System.Text.UTF7Encoding\n  isExternal: false\n  name: GetString\n  nameWithType: UTF7Encoding.GetString\n  fullName: UTF7Encoding.GetString\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF7Encoding.xml\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Text.Encoding.ASCII\n  parent: System.Text.Encoding\n  isExternal: false\n  name: ASCII\n  nameWithType: Encoding.ASCII\n  fullName: Encoding.ASCII\n- uid: System.Text.Encoding.BigEndianUnicode\n  parent: System.Text.Encoding\n  isExternal: false\n  name: BigEndianUnicode\n  nameWithType: Encoding.BigEndianUnicode\n  fullName: Encoding.BigEndianUnicode\n- uid: System.Text.Encoding.BodyName\n  parent: System.Text.Encoding\n  isExternal: false\n  name: BodyName\n  nameWithType: Encoding.BodyName\n  fullName: Encoding.BodyName\n- uid: System.Text.Encoding.Clone\n  parent: System.Text.Encoding\n  isExternal: false\n  name: Clone()\n  nameWithType: Encoding.Clone()\n  fullName: Encoding.Clone()\n- uid: System.Text.Encoding.CodePage\n  parent: System.Text.Encoding\n  isExternal: false\n  name: CodePage\n  nameWithType: Encoding.CodePage\n  fullName: Encoding.CodePage\n- uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: false\n  name: Convert(Encoding, Encoding, Byte[], Int32, Int32)\n  nameWithType: Encoding.Convert(Encoding, Encoding, Byte[], Int32, Int32)\n  fullName: Encoding.Convert(Encoding, Encoding, Byte[], Int32, Int32)\n- uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])\n  parent: System.Text.Encoding\n  isExternal: false\n  name: Convert(Encoding, Encoding, Byte[])\n  nameWithType: Encoding.Convert(Encoding, Encoding, Byte[])\n  fullName: Encoding.Convert(Encoding, Encoding, Byte[])\n- uid: System.Text.Encoding.DecoderFallback\n  parent: System.Text.Encoding\n  isExternal: false\n  name: DecoderFallback\n  nameWithType: Encoding.DecoderFallback\n  fullName: Encoding.DecoderFallback\n- uid: System.Text.Encoding.Default\n  parent: System.Text.Encoding\n  isExternal: false\n  name: Default\n  nameWithType: Encoding.Default\n  fullName: Encoding.Default\n- uid: System.Text.Encoding.EncoderFallback\n  parent: System.Text.Encoding\n  isExternal: false\n  name: EncoderFallback\n  nameWithType: Encoding.EncoderFallback\n  fullName: Encoding.EncoderFallback\n- uid: System.Text.Encoding.EncodingName\n  parent: System.Text.Encoding\n  isExternal: false\n  name: EncodingName\n  nameWithType: Encoding.EncodingName\n  fullName: Encoding.EncodingName\n- uid: System.Text.Encoding.GetByteCount(System.String,System.Int32,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: false\n  name: GetByteCount(String, Int32, Int32)\n  nameWithType: Encoding.GetByteCount(String, Int32, Int32)\n  fullName: Encoding.GetByteCount(String, Int32, Int32)\n- uid: System.Text.Encoding.GetByteCount(System.Char[])\n  parent: System.Text.Encoding\n  isExternal: false\n  name: GetByteCount(Char[])\n  nameWithType: Encoding.GetByteCount(Char[])\n  fullName: Encoding.GetByteCount(Char[])\n- uid: System.Text.Encoding.GetBytes(System.Char[])\n  parent: System.Text.Encoding\n  isExternal: false\n  name: GetBytes(Char[])\n  nameWithType: Encoding.GetBytes(Char[])\n  fullName: Encoding.GetBytes(Char[])\n- uid: System.Text.Encoding.GetBytes(System.String)\n  parent: System.Text.Encoding\n  isExternal: false\n  name: GetBytes(String)\n  nameWithType: Encoding.GetBytes(String)\n  fullName: Encoding.GetBytes(String)\n- uid: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: false\n  name: GetBytes(Char[], Int32, Int32)\n  nameWithType: Encoding.GetBytes(Char[], Int32, Int32)\n  fullName: Encoding.GetBytes(Char[], Int32, Int32)\n- uid: System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: false\n  name: GetBytes(String, Int32, Int32)\n  nameWithType: Encoding.GetBytes(String, Int32, Int32)\n  fullName: Encoding.GetBytes(String, Int32, Int32)\n- uid: System.Text.Encoding.GetCharCount(System.Byte[])\n  parent: System.Text.Encoding\n  isExternal: false\n  name: GetCharCount(Byte[])\n  nameWithType: Encoding.GetCharCount(Byte[])\n  fullName: Encoding.GetCharCount(Byte[])\n- uid: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: false\n  name: GetChars(Byte[], Int32, Int32)\n  nameWithType: Encoding.GetChars(Byte[], Int32, Int32)\n  fullName: Encoding.GetChars(Byte[], Int32, Int32)\n- uid: System.Text.Encoding.GetChars(System.Byte[])\n  parent: System.Text.Encoding\n  isExternal: false\n  name: GetChars(Byte[])\n  nameWithType: Encoding.GetChars(Byte[])\n  fullName: Encoding.GetChars(Byte[])\n- uid: System.Text.Encoding.GetEncoding(System.Int32)\n  parent: System.Text.Encoding\n  isExternal: false\n  name: GetEncoding(Int32)\n  nameWithType: Encoding.GetEncoding(Int32)\n  fullName: Encoding.GetEncoding(Int32)\n- uid: System.Text.Encoding.GetEncoding(System.String)\n  parent: System.Text.Encoding\n  isExternal: false\n  name: GetEncoding(String)\n  nameWithType: Encoding.GetEncoding(String)\n  fullName: Encoding.GetEncoding(String)\n- uid: System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)\n  parent: System.Text.Encoding\n  isExternal: false\n  name: GetEncoding(Int32, EncoderFallback, DecoderFallback)\n  nameWithType: Encoding.GetEncoding(Int32, EncoderFallback, DecoderFallback)\n  fullName: Encoding.GetEncoding(Int32, EncoderFallback, DecoderFallback)\n- uid: System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)\n  parent: System.Text.Encoding\n  isExternal: false\n  name: GetEncoding(String, EncoderFallback, DecoderFallback)\n  nameWithType: Encoding.GetEncoding(String, EncoderFallback, DecoderFallback)\n  fullName: Encoding.GetEncoding(String, EncoderFallback, DecoderFallback)\n- uid: System.Text.Encoding.GetEncodings\n  parent: System.Text.Encoding\n  isExternal: false\n  name: GetEncodings()\n  nameWithType: Encoding.GetEncodings()\n  fullName: Encoding.GetEncodings()\n- uid: System.Text.Encoding.GetPreamble\n  parent: System.Text.Encoding\n  isExternal: false\n  name: GetPreamble()\n  nameWithType: Encoding.GetPreamble()\n  fullName: Encoding.GetPreamble()\n- uid: System.Text.Encoding.GetString(System.Byte[])\n  parent: System.Text.Encoding\n  isExternal: false\n  name: GetString(Byte[])\n  nameWithType: Encoding.GetString(Byte[])\n  fullName: Encoding.GetString(Byte[])\n- uid: System.Text.Encoding.GetString(System.Byte*,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: false\n  name: GetString(Byte*, Int32)\n  nameWithType: Encoding.GetString(Byte*, Int32)\n  fullName: Encoding.GetString(Byte*, Int32)\n- uid: System.Text.Encoding.HeaderName\n  parent: System.Text.Encoding\n  isExternal: false\n  name: HeaderName\n  nameWithType: Encoding.HeaderName\n  fullName: Encoding.HeaderName\n- uid: System.Text.Encoding.IsAlwaysNormalized\n  parent: System.Text.Encoding\n  isExternal: false\n  name: IsAlwaysNormalized()\n  nameWithType: Encoding.IsAlwaysNormalized()\n  fullName: Encoding.IsAlwaysNormalized()\n- uid: System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)\n  parent: System.Text.Encoding\n  isExternal: false\n  name: IsAlwaysNormalized(NormalizationForm)\n  nameWithType: Encoding.IsAlwaysNormalized(NormalizationForm)\n  fullName: Encoding.IsAlwaysNormalized(NormalizationForm)\n- uid: System.Text.Encoding.IsBrowserDisplay\n  parent: System.Text.Encoding\n  isExternal: false\n  name: IsBrowserDisplay\n  nameWithType: Encoding.IsBrowserDisplay\n  fullName: Encoding.IsBrowserDisplay\n- uid: System.Text.Encoding.IsBrowserSave\n  parent: System.Text.Encoding\n  isExternal: false\n  name: IsBrowserSave\n  nameWithType: Encoding.IsBrowserSave\n  fullName: Encoding.IsBrowserSave\n- uid: System.Text.Encoding.IsMailNewsDisplay\n  parent: System.Text.Encoding\n  isExternal: false\n  name: IsMailNewsDisplay\n  nameWithType: Encoding.IsMailNewsDisplay\n  fullName: Encoding.IsMailNewsDisplay\n- uid: System.Text.Encoding.IsMailNewsSave\n  parent: System.Text.Encoding\n  isExternal: false\n  name: IsMailNewsSave\n  nameWithType: Encoding.IsMailNewsSave\n  fullName: Encoding.IsMailNewsSave\n- uid: System.Text.Encoding.IsReadOnly\n  parent: System.Text.Encoding\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: Encoding.IsReadOnly\n  fullName: Encoding.IsReadOnly\n- uid: System.Text.Encoding.IsSingleByte\n  parent: System.Text.Encoding\n  isExternal: false\n  name: IsSingleByte\n  nameWithType: Encoding.IsSingleByte\n  fullName: Encoding.IsSingleByte\n- uid: System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)\n  parent: System.Text.Encoding\n  isExternal: false\n  name: RegisterProvider(EncodingProvider)\n  nameWithType: Encoding.RegisterProvider(EncodingProvider)\n  fullName: Encoding.RegisterProvider(EncodingProvider)\n- uid: System.Text.Encoding.Unicode\n  parent: System.Text.Encoding\n  isExternal: false\n  name: Unicode\n  nameWithType: Encoding.Unicode\n  fullName: Encoding.Unicode\n- uid: System.Text.Encoding.UTF32\n  parent: System.Text.Encoding\n  isExternal: false\n  name: UTF32\n  nameWithType: Encoding.UTF32\n  fullName: Encoding.UTF32\n- uid: System.Text.Encoding.UTF7\n  parent: System.Text.Encoding\n  isExternal: false\n  name: UTF7\n  nameWithType: Encoding.UTF7\n  fullName: Encoding.UTF7\n- uid: System.Text.Encoding.UTF8\n  parent: System.Text.Encoding\n  isExternal: false\n  name: UTF8\n  nameWithType: Encoding.UTF8\n  fullName: Encoding.UTF8\n- uid: System.Text.Encoding.WebName\n  parent: System.Text.Encoding\n  isExternal: false\n  name: WebName\n  nameWithType: Encoding.WebName\n  fullName: Encoding.WebName\n- uid: System.Text.Encoding.WindowsCodePage\n  parent: System.Text.Encoding\n  isExternal: false\n  name: WindowsCodePage\n  nameWithType: Encoding.WindowsCodePage\n  fullName: Encoding.WindowsCodePage\n"}