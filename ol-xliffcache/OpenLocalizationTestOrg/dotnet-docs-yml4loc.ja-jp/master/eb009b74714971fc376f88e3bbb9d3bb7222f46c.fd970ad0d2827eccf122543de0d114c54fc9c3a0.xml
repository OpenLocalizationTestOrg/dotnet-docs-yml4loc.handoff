{"nodes":[{"content":"Represents a callback method to be executed by a thread pool thread.","nodes":[{"pos":[0,68],"content":"Represents a callback method to be executed by a thread pool thread.","nodes":[{"content":"Represents a callback method to be executed by a thread pool thread.","pos":[0,68]}]}],"pos":[382,451],"yaml":true},{"content":"<xref:System.Threading.WaitCallback> represents a callback method that you want to execute on a <xref:System.Threading.ThreadPool> thread. Create the delegate by passing your callback method to the <xref:System.Threading.WaitCallback> constructor. Your method must have the signature shown here.  \n  \n Queue your task for execution by passing the <xref:System.Threading.WaitCallback> delegate to <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A?displayProperty=fullName>. Your callback method executes when a thread pool thread becomes available.  \n  \n> [!NOTE]\n>  Visual Basic users can omit the <xref:System.Threading.WaitCallback> constructor, and simply use the `AddressOf` operator when passing the callback method to <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>. Visual Basic automatically calls the correct delegate constructor.  \n  \n If you want to pass information to your callback method, create an object that contains the necessary information and pass it to <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> when you queue your task for execution. Each time your callback method executes, the `state` parameter contains this object.  \n  \n For more information about using callbacks to synchronize thread pool threads, see [The Managed Thread Pool](~/docs/standard/threading/the-managed-thread-pool.md).","nodes":[{"pos":[0,295],"content":"<xref:System.Threading.WaitCallback> represents a callback method that you want to execute on a <xref:System.Threading.ThreadPool> thread. Create the delegate by passing your callback method to the <xref:System.Threading.WaitCallback> constructor. Your method must have the signature shown here.","nodes":[{"content":"<xref:System.Threading.WaitCallback> represents a callback method that you want to execute on a <xref:System.Threading.ThreadPool> thread. Create the delegate by passing your callback method to the <xref:System.Threading.WaitCallback> constructor. Your method must have the signature shown here.","pos":[0,295],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Threading.WaitCallback&gt;</ph> represents a callback method that you want to execute on a <ph id=\"ph2\">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread.","pos":[0,138],"source":"<xref:System.Threading.WaitCallback> represents a callback method that you want to execute on a <xref:System.Threading.ThreadPool> thread."},{"content":"Create the delegate by passing your callback method to the <ph id=\"ph1\">&lt;xref:System.Threading.WaitCallback&gt;</ph> constructor.","pos":[139,247],"source":" Create the delegate by passing your callback method to the <xref:System.Threading.WaitCallback> constructor."},{"content":"Your method must have the signature shown here.","pos":[248,295]}]}]},{"pos":[302,552],"content":"Queue your task for execution by passing the <xref:System.Threading.WaitCallback> delegate to <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A?displayProperty=fullName>. Your callback method executes when a thread pool thread becomes available.","nodes":[{"content":"Queue your task for execution by passing the <xref:System.Threading.WaitCallback> delegate to <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A?displayProperty=fullName>. Your callback method executes when a thread pool thread becomes available.","pos":[0,250],"nodes":[{"content":"Queue your task for execution by passing the <ph id=\"ph1\">&lt;xref:System.Threading.WaitCallback&gt;</ph> delegate to <ph id=\"ph2\">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A?displayProperty=fullName&gt;</ph>.","pos":[0,175],"source":"Queue your task for execution by passing the <xref:System.Threading.WaitCallback> delegate to <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A?displayProperty=fullName>."},{"content":"Your callback method executes when a thread pool thread becomes available.","pos":[176,250]}]}]},{"pos":[560,852],"content":"[!NOTE]\n Visual Basic users can omit the <xref:System.Threading.WaitCallback> constructor, and simply use the `AddressOf` operator when passing the callback method to <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>. Visual Basic automatically calls the correct delegate constructor.","leadings":["","> "],"nodes":[{"content":" Visual Basic users can omit the <xref:System.Threading.WaitCallback> constructor, and simply use the `AddressOf` operator when passing the callback method to <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>. Visual Basic automatically calls the correct delegate constructor.","pos":[8,290],"nodes":[{"content":"Visual Basic users can omit the <ph id=\"ph1\">&lt;xref:System.Threading.WaitCallback&gt;</ph> constructor, and simply use the <ph id=\"ph2\">`AddressOf`</ph> operator when passing the callback method to <ph id=\"ph3\">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph>.","pos":[1,215],"source":" Visual Basic users can omit the <xref:System.Threading.WaitCallback> constructor, and simply use the `AddressOf` operator when passing the callback method to <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>."},{"content":"Visual Basic automatically calls the correct delegate constructor.","pos":[216,282]}]}]},{"pos":[859,1168],"content":"If you want to pass information to your callback method, create an object that contains the necessary information and pass it to <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> when you queue your task for execution. Each time your callback method executes, the `state` parameter contains this object.","nodes":[{"content":"If you want to pass information to your callback method, create an object that contains the necessary information and pass it to <ph id=\"ph1\">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph> when you queue your task for execution.","pos":[0,224],"source":"If you want to pass information to your callback method, create an object that contains the necessary information and pass it to <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> when you queue your task for execution."},{"content":"Each time your callback method executes, the <ph id=\"ph1\">`state`</ph> parameter contains this object.","pos":[225,309],"source":" Each time your callback method executes, the `state` parameter contains this object."}]},{"pos":[1175,1338],"content":"For more information about using callbacks to synchronize thread pool threads, see <bpt id=\"p1\">[</bpt>The Managed Thread Pool<ept id=\"p1\">](~/docs/standard/threading/the-managed-thread-pool.md)</ept>.","source":"For more information about using callbacks to synchronize thread pool threads, see [The Managed Thread Pool](~/docs/standard/threading/the-managed-thread-pool.md)."}],"pos":[462,1812],"yaml":true,"extradata":"MT"}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Threading.WaitCallback\n  commentId: T:System.Threading.WaitCallback\n  id: WaitCallback\n  langs:\n  - csharp\n  name: WaitCallback\n  nameWithType: WaitCallback\n  fullName: System.Threading.WaitCallback\n  type: Delegate\n  assemblies:\n  - System.Threading.ThreadPool\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Represents a callback method to be executed by a thread pool thread.\n  remarks: \"<xref:System.Threading.WaitCallback> represents a callback method that you want to execute on a <xref:System.Threading.ThreadPool> thread. Create the delegate by passing your callback method to the <xref:System.Threading.WaitCallback> constructor. Your method must have the signature shown here.  \\n  \\n Queue your task for execution by passing the <xref:System.Threading.WaitCallback> delegate to <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A?displayProperty=fullName>. Your callback method executes when a thread pool thread becomes available.  \\n  \\n> [!NOTE]\\n>  Visual Basic users can omit the <xref:System.Threading.WaitCallback> constructor, and simply use the `AddressOf` operator when passing the callback method to <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>. Visual Basic automatically calls the correct delegate constructor.  \\n  \\n If you want to pass information to your callback method, create an object that contains the necessary information and pass it to <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> when you queue your task for execution. Each time your callback method executes, the `state` parameter contains this object.  \\n  \\n For more information about using callbacks to synchronize thread pool threads, see [The Managed Thread Pool](~/docs/standard/threading/the-managed-thread-pool.md).\"\n  example:\n  - \"This section contains two examples. The first example demonstrates how you can queue a simple task for execution by the thread pool.  \\n  \\n The second example demonstrates how you can queue a task and pass information to it.  \\n  \\n **Example 1**  \\n  \\n This example shows how to use the <xref:System.Threading.WaitCallback> delegate to queue a task for execution by the thread pool. The code example uses the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=fullName> method overload to queue a task, which is represented by a <xref:System.Threading.WaitCallback> that wraps the `ThreadProc` method, to execute when a thread becomes available. No task information is supplied with this overload. Therefore, the information that is available to the `ThreadProc` method is limited to the object the method belongs to.  \\n  \\n [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/CPP/source.cpp#1)]\\n [!code-csharp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/CS/source.cs#1)]\\n [!code-vb[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/VB/source.vb#1)]  \\n  \\n **Example 2**  \\n  \\n This example shows how to create an object that contains task information. It also demonstrates how to pass that object to a task that is queued for execution by the thread pool.  \\n  \\n [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem1/CPP/source.cpp#1)]\\n [!code-csharp[System.Threading.ThreadPool QueueUserWorkItem1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem1/CS/source.cs#1)]\\n [!code-vb[System.Threading.ThreadPool QueueUserWorkItem1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem1/VB/source.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public delegate void WaitCallback(object state);\n  inheritance:\n  - System.Object\n  - System.Delegate\n  extensionMethods:\n  - System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/WaitCallback.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Delegate\n  parent: System\n  isExternal: false\n  name: Delegate\n  nameWithType: Delegate\n  fullName: System.Delegate\n- uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n  parent: System.Reflection.RuntimeReflectionExtensions\n  isExternal: false\n  name: GetMethodInfo(Delegate)\n  nameWithType: RuntimeReflectionExtensions.GetMethodInfo(Delegate)\n  fullName: RuntimeReflectionExtensions.GetMethodInfo(Delegate)\n"}