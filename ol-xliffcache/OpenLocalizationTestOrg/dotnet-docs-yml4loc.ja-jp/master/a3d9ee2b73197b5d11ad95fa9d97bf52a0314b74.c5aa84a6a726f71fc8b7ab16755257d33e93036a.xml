{"nodes":[{"content":"Provides a safe handle to a Windows thread or process access token. For more information see [Access Tokens](https://msdn.microsoft.com/library/windows/desktop/aa374909.aspx)","nodes":[{"pos":[0,174],"content":"Provides a safe handle to a Windows thread or process access token. For more information see [Access Tokens](https://msdn.microsoft.com/library/windows/desktop/aa374909.aspx)","nodes":[{"content":"Provides a safe handle to a Windows thread or process access token.","pos":[0,67]},{"content":"For more information see <bpt id=\"p1\">[</bpt>Access Tokens<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/desktop/aa374909.aspx)</ept>","pos":[68,174],"source":" For more information see [Access Tokens](https://msdn.microsoft.com/library/windows/desktop/aa374909.aspx)"}]}],"pos":[754,929],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\"></xref> class.","nodes":[{"pos":[0,111],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\"></xref> class."}],"pos":[3385,3497],"yaml":true},{"content":"An <xref href=\"System.IntPtr\"></xref> object that represents the pre-existing handle to use. Using <xref href=\"System.IntPtr.Zero\"></xref> returns an invalid handle.","nodes":[{"pos":[0,165],"content":"An <xref href=\"System.IntPtr\"></xref> object that represents the pre-existing handle to use. Using <xref href=\"System.IntPtr.Zero\"></xref> returns an invalid handle.","nodes":[{"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IntPtr\"&gt;&lt;/xref&gt;</ph> object that represents the pre-existing handle to use.","pos":[0,92],"source":"An <xref href=\"System.IntPtr\"></xref> object that represents the pre-existing handle to use."},{"content":"Using <ph id=\"ph1\">&lt;xref href=\"System.IntPtr.Zero\"&gt;&lt;/xref&gt;</ph> returns an invalid handle.","pos":[93,165],"source":" Using <xref href=\"System.IntPtr.Zero\"></xref> returns an invalid handle."}]}],"pos":[3644,3810],"yaml":true},{"content":"Returns an invalid handle by instantiating a <xref href=\"Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\"></xref> object with <xref href=\"System.IntPtr.Zero\"></xref>.","nodes":[{"pos":[0,168],"content":"Returns an invalid handle by instantiating a <ph id=\"ph1\">&lt;xref href=\"Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\"&gt;&lt;/xref&gt;</ph> object with <ph id=\"ph2\">&lt;xref href=\"System.IntPtr.Zero\"&gt;&lt;/xref&gt;</ph>.","source":"Returns an invalid handle by instantiating a <xref href=\"Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\"></xref> object with <xref href=\"System.IntPtr.Zero\"></xref>."}],"pos":[5035,5204],"yaml":true},{"content":"Returns a <xref href=\"Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\"></xref> object.","nodes":[{"pos":[0,88],"content":"Returns a <ph id=\"ph1\">&lt;xref href=\"Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\"&gt;&lt;/xref&gt;</ph> object.","source":"Returns a <xref href=\"Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\"></xref> object."}],"pos":[5463,5552],"yaml":true},{"content":"Gets a value that indicates whether the handle is invalid.","nodes":[{"pos":[0,58],"content":"Gets a value that indicates whether the handle is invalid.","nodes":[{"content":"Gets a value that indicates whether the handle is invalid.","pos":[0,58]}]}],"pos":[6825,6884],"yaml":true},{"content":"`true` if the handle is not valid; otherwise, `false`.","nodes":[{"pos":[0,54],"content":"<ph id=\"ph1\">`true`</ph> if the handle is not valid; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the handle is not valid; otherwise, `false`."}],"pos":[7061,7118],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\n  commentId: T:Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\n  id: SafeAccessTokenHandle\n  children:\n  - Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.#ctor(System.IntPtr)\n  - Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.InvalidHandle\n  - Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.IsInvalid\n  - Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.ReleaseHandle\n  langs:\n  - csharp\n  name: SafeAccessTokenHandle\n  nameWithType: SafeAccessTokenHandle\n  fullName: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\n  type: Class\n  assemblies:\n  - System.Security.Principal.Windows\n  - mscorlib\n  namespace: Microsoft.Win32.SafeHandles\n  summary: Provides a safe handle to a Windows thread or process access token. For more information see [Access Tokens](https://msdn.microsoft.com/library/windows/desktop/aa374909.aspx)\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public sealed class SafeAccessTokenHandle : System.Runtime.InteropServices.SafeHandle\n  inheritance:\n  - System.Object\n  - System.Runtime.InteropServices.SafeHandle\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Runtime.InteropServices.SafeHandle.Close\n  - System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)\n  - System.Runtime.InteropServices.SafeHandle.DangerousGetHandle\n  - System.Runtime.InteropServices.SafeHandle.DangerousRelease\n  - System.Runtime.InteropServices.SafeHandle.Dispose\n  - System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)\n  - System.Runtime.InteropServices.SafeHandle.handle\n  - System.Runtime.InteropServices.SafeHandle.IsClosed\n  - System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)\n  - System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32.SafeHandles/SafeAccessTokenHandle.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.#ctor(System.IntPtr)\n  commentId: M:Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.#ctor(System.IntPtr)\n  id: '#ctor(System.IntPtr)'\n  parent: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\n  langs:\n  - csharp\n  name: SafeAccessTokenHandle(IntPtr)\n  nameWithType: SafeAccessTokenHandle.SafeAccessTokenHandle(IntPtr)\n  fullName: SafeAccessTokenHandle.SafeAccessTokenHandle(IntPtr)\n  type: Constructor\n  assemblies:\n  - System.Security.Principal.Windows\n  - mscorlib\n  namespace: Microsoft.Win32.SafeHandles\n  summary: Initializes a new instance of the <xref href=\"Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\"></xref> class.\n  syntax:\n    content: public SafeAccessTokenHandle (IntPtr handle);\n    parameters:\n    - id: handle\n      type: System.IntPtr\n      description: An <xref href=\"System.IntPtr\"></xref> object that represents the pre-existing handle to use. Using <xref href=\"System.IntPtr.Zero\"></xref> returns an invalid handle.\n  overload: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32.SafeHandles/SafeAccessTokenHandle.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.InvalidHandle\n  commentId: P:Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.InvalidHandle\n  id: InvalidHandle\n  parent: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\n  langs:\n  - csharp\n  name: InvalidHandle\n  nameWithType: SafeAccessTokenHandle.InvalidHandle\n  fullName: SafeAccessTokenHandle.InvalidHandle\n  type: Property\n  assemblies:\n  - System.Security.Principal.Windows\n  - mscorlib\n  namespace: Microsoft.Win32.SafeHandles\n  summary: Returns an invalid handle by instantiating a <xref href=\"Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\"></xref> object with <xref href=\"System.IntPtr.Zero\"></xref>.\n  syntax:\n    content: >-\n      [get: System.Security.SecurityCritical]\n\n      public static Microsoft.Win32.SafeHandles.SafeAccessTokenHandle InvalidHandle { get; }\n    return:\n      type: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\n      description: Returns a <xref href=\"Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\"></xref> object.\n  overload: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.InvalidHandle*\n  exceptions: []\n  attributes:\n  - type: 'get: System.Security.SecurityCritical'\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32.SafeHandles/SafeAccessTokenHandle.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.IsInvalid\n  commentId: P:Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.IsInvalid\n  id: IsInvalid\n  parent: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\n  langs:\n  - csharp\n  name: IsInvalid\n  nameWithType: SafeAccessTokenHandle.IsInvalid\n  fullName: SafeAccessTokenHandle.IsInvalid\n  type: Property\n  assemblies:\n  - System.Security.Principal.Windows\n  - mscorlib\n  namespace: Microsoft.Win32.SafeHandles\n  summary: Gets a value that indicates whether the handle is invalid.\n  syntax:\n    content: >-\n      [get: System.Security.SecurityCritical]\n\n      public override bool IsInvalid { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the handle is not valid; otherwise, `false`.'\n  overload: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.IsInvalid*\n  exceptions: []\n  attributes:\n  - type: 'get: System.Security.SecurityCritical'\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32.SafeHandles/SafeAccessTokenHandle.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.ReleaseHandle\n  commentId: M:Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.ReleaseHandle\n  id: ReleaseHandle\n  parent: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\n  langs:\n  - csharp\n  name: ReleaseHandle()\n  nameWithType: SafeAccessTokenHandle.ReleaseHandle()\n  fullName: SafeAccessTokenHandle.ReleaseHandle()\n  type: Method\n  assemblies:\n  - System.Security.Principal.Windows\n  - mscorlib\n  namespace: Microsoft.Win32.SafeHandles\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      protected override bool ReleaseHandle ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: ''\n  overload: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.ReleaseHandle*\n  exceptions: []\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32.SafeHandles/SafeAccessTokenHandle.xml\nreferences:\n- uid: System.Runtime.InteropServices.SafeHandle\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: SafeHandle\n  nameWithType: SafeHandle\n  fullName: System.Runtime.InteropServices.SafeHandle\n- uid: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.#ctor(System.IntPtr)\n  parent: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\n  isExternal: false\n  name: SafeAccessTokenHandle(IntPtr)\n  nameWithType: SafeAccessTokenHandle.SafeAccessTokenHandle(IntPtr)\n  fullName: SafeAccessTokenHandle.SafeAccessTokenHandle(IntPtr)\n- uid: System.IntPtr\n  parent: System\n  isExternal: false\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.InvalidHandle\n  parent: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\n  isExternal: false\n  name: InvalidHandle\n  nameWithType: SafeAccessTokenHandle.InvalidHandle\n  fullName: SafeAccessTokenHandle.InvalidHandle\n- uid: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\n  parent: Microsoft.Win32.SafeHandles\n  isExternal: false\n  name: SafeAccessTokenHandle\n  nameWithType: SafeAccessTokenHandle\n  fullName: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\n- uid: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.IsInvalid\n  parent: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\n  isExternal: false\n  name: IsInvalid\n  nameWithType: SafeAccessTokenHandle.IsInvalid\n  fullName: SafeAccessTokenHandle.IsInvalid\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.ReleaseHandle\n  parent: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\n  isExternal: false\n  name: ReleaseHandle()\n  nameWithType: SafeAccessTokenHandle.ReleaseHandle()\n  fullName: SafeAccessTokenHandle.ReleaseHandle()\n- uid: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.#ctor*\n  parent: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\n  isExternal: false\n  name: SafeAccessTokenHandle\n  nameWithType: SafeAccessTokenHandle.SafeAccessTokenHandle\n  fullName: SafeAccessTokenHandle.SafeAccessTokenHandle\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32.SafeHandles/SafeAccessTokenHandle.xml\n- uid: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.InvalidHandle*\n  parent: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\n  isExternal: false\n  name: InvalidHandle\n  nameWithType: SafeAccessTokenHandle.InvalidHandle\n  fullName: SafeAccessTokenHandle.InvalidHandle\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32.SafeHandles/SafeAccessTokenHandle.xml\n- uid: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.IsInvalid*\n  parent: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\n  isExternal: false\n  name: IsInvalid\n  nameWithType: SafeAccessTokenHandle.IsInvalid\n  fullName: SafeAccessTokenHandle.IsInvalid\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32.SafeHandles/SafeAccessTokenHandle.xml\n- uid: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.ReleaseHandle*\n  parent: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\n  isExternal: false\n  name: ReleaseHandle\n  nameWithType: SafeAccessTokenHandle.ReleaseHandle\n  fullName: SafeAccessTokenHandle.ReleaseHandle\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32.SafeHandles/SafeAccessTokenHandle.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Runtime.InteropServices.SafeHandle.Close\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: Close()\n  nameWithType: SafeHandle.Close()\n  fullName: SafeHandle.Close()\n- uid: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: DangerousAddRef(Boolean)\n  nameWithType: SafeHandle.DangerousAddRef(Boolean)\n  fullName: SafeHandle.DangerousAddRef(Boolean)\n- uid: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: DangerousGetHandle()\n  nameWithType: SafeHandle.DangerousGetHandle()\n  fullName: SafeHandle.DangerousGetHandle()\n- uid: System.Runtime.InteropServices.SafeHandle.DangerousRelease\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: DangerousRelease()\n  nameWithType: SafeHandle.DangerousRelease()\n  fullName: SafeHandle.DangerousRelease()\n- uid: System.Runtime.InteropServices.SafeHandle.Dispose\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: Dispose()\n  nameWithType: SafeHandle.Dispose()\n  fullName: SafeHandle.Dispose()\n- uid: System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: SafeHandle.Dispose(Boolean)\n  fullName: SafeHandle.Dispose(Boolean)\n- uid: System.Runtime.InteropServices.SafeHandle.handle\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: handle\n  nameWithType: SafeHandle.handle\n  fullName: SafeHandle.handle\n- uid: System.Runtime.InteropServices.SafeHandle.IsClosed\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: IsClosed\n  nameWithType: SafeHandle.IsClosed\n  fullName: SafeHandle.IsClosed\n- uid: System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: SetHandle(IntPtr)\n  nameWithType: SafeHandle.SetHandle(IntPtr)\n  fullName: SafeHandle.SetHandle(IntPtr)\n- uid: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: SetHandleAsInvalid()\n  nameWithType: SafeHandle.SetHandleAsInvalid()\n  fullName: SafeHandle.SetHandleAsInvalid()\n"}