### YamlMime:ManagedReference
items:
- uid: System.Activator
  commentId: T:System.Activator
  id: Activator
  children:
  - System.Activator.CreateComInstanceFrom(System.String,System.String)
  - System.Activator.CreateComInstanceFrom(System.String,System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)
  - System.Activator.CreateInstance(System.AppDomain,System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)
  - System.Activator.CreateInstance(System.AppDomain,System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  - System.Activator.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  - System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  - System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)
  - System.Activator.CreateInstance(System.Type,System.Object[],System.Object[])
  - System.Activator.CreateInstance(System.String,System.String,System.Object[])
  - System.Activator.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)
  - System.Activator.CreateInstance(System.Type,System.Object[])
  - System.Activator.CreateInstance(System.Type,System.Boolean)
  - System.Activator.CreateInstance(System.String,System.String)
  - System.Activator.CreateInstance(System.ActivationContext,System.String[])
  - System.Activator.CreateInstance(System.Type)
  - System.Activator.CreateInstance(System.ActivationContext)
  - System.Activator.CreateInstance(System.AppDomain,System.String,System.String)
  - System.Activator.CreateInstance``1
  - System.Activator.CreateInstanceFrom(System.AppDomain,System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)
  - System.Activator.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)
  - System.Activator.CreateInstanceFrom(System.AppDomain,System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  - System.Activator.CreateInstanceFrom(System.String,System.String,System.Object[])
  - System.Activator.CreateInstanceFrom(System.AppDomain,System.String,System.String)
  - System.Activator.CreateInstanceFrom(System.String,System.String)
  - System.Activator.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  - System.Activator.GetObject(System.Type,System.String)
  - System.Activator.GetObject(System.Type,System.String,System.Object)
  - System.Activator.System#Runtime#InteropServices#_Activator#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  - System.Activator.System#Runtime#InteropServices#_Activator#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  - System.Activator.System#Runtime#InteropServices#_Activator#GetTypeInfoCount(System.UInt32@)
  - System.Activator.System#Runtime#InteropServices#_Activator#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  langs:
  - csharp
  name: Activator
  nameWithType: Activator
  fullName: System.Activator
  type: Class
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Contains methods to create types of objects locally or remotely, or obtain references to existing remote objects. This class cannot be inherited.
  remarks: "The <xref:System.Activator.CreateInstance%2A> method creates an instance of a type defined in an assembly by invoking the constructor that best matches the specified arguments. If no arguments are specified, the constructor that takes no parameters, that is, the default constructor, is invoked.  \n  \n You must have sufficient permission to search for and call a constructor; otherwise, an exception is thrown. By default, only public constructors are considered during the search for a constructor. If no constructor or default constructor can be found, an exception is thrown.  \n  \n A binder parameter specifies an object that searches an assembly for a suitable constructor. You can specify your own binder and search criteria. If no binder is specified, a default binder is used. For more information, see the <xref:System.Reflection.Binder?displayProperty=fullName> and <xref:System.Reflection.BindingFlags?displayProperty=fullName> classes.  \n  \n An evidence parameter affects the security policy and permissions for the constructor. For more information, see the <xref:System.Security.Policy.Evidence?displayProperty=fullName> class.  \n  \n An instance of a type can be created at a local or remote site. If the type is created remotely, an activation attribute parameter specifies the URI of the remote site. The call to create the instance might pass through intermediary sites before it reaches the remote site. Other activation attributes can modify the environment, or context, in which the call operates at the remote and intermediary sites.  \n  \n If the instance is created locally, a reference to that object is returned. If the instance is created remotely, a reference to a proxy is returned. The remote object is manipulated through the proxy as if it were a local object.  \n  \n The <xref:System.Activator.GetObject%2A> method creates a proxy to a currently running remote object, server-activated well-known object, or XML Web service. You can specify the connection medium, that is, the channel. For more information, see the <xref:System.Runtime.Remoting.Channels.ChannelServices?displayProperty=fullName> class.  \n  \n Assemblies contain type definitions. The <xref:System.Activator.CreateInstance%2A> method creates an instance of a type from a currently running assembly. The <xref:System.Activator.CreateInstanceFrom%2A> method creates an instance from a file that contains an assembly. The <xref:System.Activator.CreateComInstanceFrom%2A> method creates an instance of a COM object from a file that contains an assembly."
  example:
  - "The following example shows how to use the <xref:System.Activator> class to dynamically construct objects at run time.  \n  \n [!code-cpp[ActivatorX#1](~/samples/snippets/cpp/VS_Snippets_CLR/ActivatorX/cpp/ActivatorX.cpp#1)]\n [!code-csharp[ActivatorX#1](~/samples/snippets/csharp/VS_Snippets_CLR/ActivatorX/cs/ActivatorX.cs#1)]\n [!code-vb[ActivatorX#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ActivatorX/VB/ActivatorX.vb#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]

      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class Activator : System.Runtime.InteropServices._Activator
  inheritance:
  - System.Object
  implements:
  - System.Runtime.InteropServices._Activator
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: System.Runtime.InteropServices.ClassInterfaceAttribute
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Activator.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Activator.CreateComInstanceFrom(System.String,System.String)
  commentId: M:System.Activator.CreateComInstanceFrom(System.String,System.String)
  id: CreateComInstanceFrom(System.String,System.String)
  parent: System.Activator
  langs:
  - csharp
  name: CreateComInstanceFrom(String, String)
  nameWithType: Activator.CreateComInstanceFrom(String, String)
  fullName: Activator.CreateComInstanceFrom(String, String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates an instance of the COM object whose name is specified, using the named assembly file and the default constructor.
  remarks: "Use the <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName> method to unwrap the return value.  \n  \n A <xref:System.Runtime.InteropServices.ComVisibleAttribute?displayProperty=fullName> attribute with a value of `true` must be applied either explicitly or by default to the COM type so the <xref:System.Activator.CreateComInstanceFrom%2A> method can create an instance of that type; otherwise, <xref:System.TypeLoadException> is thrown.  \n  \n For information about other exceptions that can be thrown by invoked methods, see the Exceptions section of the <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=fullName> and <xref:System.Activator.CreateInstance%2A> methods.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to create nonpublic types if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the assembly that contains the nonpublic types is restricted to the caller’s grant set or to a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \n>   \n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later."
  syntax:
    content: public static System.Runtime.Remoting.ObjectHandle CreateComInstanceFrom (string assemblyName, string typeName);
    parameters:
    - id: assemblyName
      type: System.String
      description: The name of a file that contains an assembly where the type named <code>typeName</code> is sought.
    - id: typeName
      type: System.String
      description: The name of the preferred type.
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: A handle that must be unwrapped to access the newly created instance.
  overload: System.Activator.CreateComInstanceFrom*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>typeName</code> or <code>assemblyName</code> is `null`.
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: "An instance cannot be created through COM.  \n  \n -or-  \n  \n <code>typename</code> was not found in <code>assemblyName</code>."
  - type: System.MissingMethodException
    commentId: T:System.MissingMethodException
    description: No matching constructor was found.
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: <code>assemblyName</code> is not found, or the module you are trying to load does not specify a file name extension.
  - type: System.MemberAccessException
    commentId: T:System.MemberAccessException
    description: "Cannot create an instance of an abstract class.  \n  \n -or-  \n  \n This member was invoked with a late-binding mechanism."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The caller cannot provide activation attributes for an object that does not inherit from <xref href="System.MarshalByRefObject"></xref>.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>assemblyName</code> is the empty string ("").
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Activator.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Activator.CreateComInstanceFrom(System.String,System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)
  commentId: M:System.Activator.CreateComInstanceFrom(System.String,System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)
  id: CreateComInstanceFrom(System.String,System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)
  parent: System.Activator
  langs:
  - csharp
  name: CreateComInstanceFrom(String, String, Byte[], AssemblyHashAlgorithm)
  nameWithType: Activator.CreateComInstanceFrom(String, String, Byte[], AssemblyHashAlgorithm)
  fullName: Activator.CreateComInstanceFrom(String, String, Byte[], AssemblyHashAlgorithm)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates an instance of the COM object whose name is specified, using the named assembly file and the default constructor.
  remarks: "Use the <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName> method to unwrap the return value.  \n  \n A <xref:System.Runtime.InteropServices.ComVisibleAttribute?displayProperty=fullName> attribute with a value of `true` must be applied either explicitly or by default to the COM type so the <xref:System.Activator.CreateComInstanceFrom%2A> method can create an instance of that type; otherwise, <xref:System.TypeLoadException> is thrown.  \n  \n For information about other exceptions that can be thrown by invoked methods, see the Exceptions section of the <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=fullName> and <xref:System.Activator.CreateInstance%2A> methods.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to create nonpublic types if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the assembly that contains the nonpublic types is restricted to the caller’s grant set or to a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \n>   \n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later."
  syntax:
    content: public static System.Runtime.Remoting.ObjectHandle CreateComInstanceFrom (string assemblyName, string typeName, byte[] hashValue, System.Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm);
    parameters:
    - id: assemblyName
      type: System.String
      description: The name of a file that contains an assembly where the type named <code>typeName</code> is sought.
    - id: typeName
      type: System.String
      description: The name of the preferred type.
    - id: hashValue
      type: System.Byte[]
      description: The value of the computed hash code.
    - id: hashAlgorithm
      type: System.Configuration.Assemblies.AssemblyHashAlgorithm
      description: The hash algorithm used for hashing files and generating the strong name.
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: A handle that must be unwrapped to access the newly created instance.
  overload: System.Activator.CreateComInstanceFrom*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>typeName</code> or <code>assemblyName</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>assemblyName</code> is the empty string ("").
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: An assembly or module was loaded twice with two different evidences, or the assembly name is longer than MAX_PATH characters.
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: <code>assemblyName</code> is not found, or the module you are trying to load does not specify a file name extension.
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: <code>assemblyName</code> is found but cannot be loaded.
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: <code>assemblyName</code> is not a valid assembly.
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: A code base that does not start with "file://" was specified without the required `WebPermission`.
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: "An instance cannot be created through COM.  \n  \n -or-  \n  \n <code>typename</code> was not found in <code>assemblyName</code>."
  - type: System.MissingMethodException
    commentId: T:System.MissingMethodException
    description: No matching constructor was found.
  - type: System.MemberAccessException
    commentId: T:System.MemberAccessException
    description: "An instance of an abstract class cannot be created.  \n  \n -or-  \n  \n This member was invoked with a late-binding mechanism."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The caller cannot provide activation attributes for an object that does not inherit from <xref href="System.MarshalByRefObject"></xref>.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Activator.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Activator.CreateInstance(System.AppDomain,System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)
  commentId: M:System.Activator.CreateInstance(System.AppDomain,System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)
  id: CreateInstance(System.AppDomain,System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)
  parent: System.Activator
  langs:
  - csharp
  name: CreateInstance(AppDomain, String, String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[], Evidence)
  nameWithType: Activator.CreateInstance(AppDomain, String, String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[], Evidence)
  fullName: Activator.CreateInstance(AppDomain, String, String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[], Evidence)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates an instance of the type whose name is specified in the specified remote domain, using the named assembly and the constructor that best matches the specified parameters.
  remarks: "Use <xref:System.Activator.CreateInstance%2A> when a host needs to execute code in an application domain that has restricted security permissions.  \n  \n Use <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName> to unwrap the return value.  \n  \n> [!NOTE]\n>  This method uses <xref:System.Security.Permissions.SecurityAction?displayProperty=fullName> to require the immediate caller to have full trust."
  syntax:
    content: >-
      [System.Obsolete("Methods which use evidence to sandbox are obsolete and will be removed in a future release of the .NET Framework. Please use an overload of CreateInstance which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")]

      [System.Security.SecurityCritical]

      public static System.Runtime.Remoting.ObjectHandle CreateInstance (AppDomain domain, string assemblyName, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes, System.Security.Policy.Evidence securityAttributes);
    parameters:
    - id: domain
      type: System.AppDomain
      description: The domain where the type named <code>typeName</code> is created.
    - id: assemblyName
      type: System.String
      description: The name of the assembly where the type named <code>typeName</code> is sought. If <code>assemblyName</code> is `null`, the executing assembly is searched.
    - id: typeName
      type: System.String
      description: The fully qualified name of the preferred type.
    - id: ignoreCase
      type: System.Boolean
      description: '`true` to specify that the search for <code>typeName</code> is not case-sensitive; `false` to specify that the search is case-sensitive.'
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: A combination of zero or more bit flags that affect the search for the <code>typeName</code> constructor. If <code>bindingAttr</code> is zero, a case-sensitive search for public constructors is conducted.
    - id: binder
      type: System.Reflection.Binder
      description: An object that uses <code>bindingAttr</code> and <code>args</code> to seek and identify the <code>typeName</code> constructor. If <code>binder</code> is `null`, the default binder is used.
    - id: args
      type: System.Object[]
      description: An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If <code>args</code> is an empty array or `null`, the constructor that takes no parameters (the default constructor) is invoked.
    - id: culture
      type: System.Globalization.CultureInfo
      description: Culture-specific information that governs the coercion of <code>args</code> to the formal types declared for the <code>typeName</code> constructor. If <code>culture</code> is `null`, the <xref href="System.Globalization.CultureInfo"></xref> for the current thread is used.
    - id: activationAttributes
      type: System.Object[]
      description: An array of one or more attributes that can participate in activation. This is typically an array that contains a single <xref href="System.Runtime.Remoting.Activation.UrlAttribute"></xref> object. The <xref href="System.Runtime.Remoting.Activation.UrlAttribute"></xref> specifies the URL that is required to activate a remote object.
    - id: securityAttributes
      type: System.Security.Policy.Evidence
      description: Information used to make security policy decisions and grant code permissions.
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: A handle that must be unwrapped to access the newly created instance.
  overload: System.Activator.CreateInstance*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>domain</code> or <code>typeName</code> is `null`.
  - type: System.MissingMethodException
    commentId: T:System.MissingMethodException
    description: No matching constructor was found.
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: <code>typename</code> was not found in <code>assemblyName</code>.
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: <code>assemblyName</code> was not found.
  - type: System.MethodAccessException
    commentId: T:System.MethodAccessException
    description: The caller does not have permission to call this constructor.
  - type: System.MemberAccessException
    commentId: T:System.MemberAccessException
    description: Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: The constructor, which was invoked through reflection, threw an exception.
  - type: System.Runtime.InteropServices.InvalidComObjectException
    commentId: T:System.Runtime.InteropServices.InvalidComObjectException
    description: The COM type was not obtained through <xref href="System.Type.GetTypeFromProgID*"></xref> or <xref href="System.Type.GetTypeFromCLSID*"></xref>.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Creation of <xref href=\"System.TypedReference\"></xref>, <xref href=\"System.ArgIterator\"></xref>, <xref href=\"System.Void\"></xref>, and <xref href=\"System.RuntimeArgumentHandle\"></xref> types, or arrays of those types, is not supported.  \n  \n -or-  \n  \n <code>activationAttributes</code> is not an empty array, and the type being created does not derive from <xref href=\"System.MarshalByRefObject\"></xref>.  \n  \n -or-  \n  \n The constructor that best matches <code>args</code> has `varargs` arguments."
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "<code>assemblyName</code> is not a valid assembly.  \n  \n -or-  \n  \n The common language runtime (CLR) version 2.0 or later is currently loaded, and <code>assemblyName</code> was compiled for a version of the CLR that is later than the currently loaded version. Note that the .NET Framework versions 2.0, 3.0, and 3.5 all use CLR version 2.0."
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: "An assembly or module was loaded twice with two different evidences.  \n  \n -or-  \n  \n The assembly name or code base is invalid."
  attributes:
  - type: System.ObsoleteAttribute
  - type: System.Security.SecurityCriticalAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Activator.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Activator.CreateInstance(System.AppDomain,System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  commentId: M:System.Activator.CreateInstance(System.AppDomain,System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  id: CreateInstance(System.AppDomain,System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  parent: System.Activator
  langs:
  - csharp
  name: CreateInstance(AppDomain, String, String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[])
  nameWithType: Activator.CreateInstance(AppDomain, String, String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[])
  fullName: Activator.CreateInstance(AppDomain, String, String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates an instance of the type whose name is specified in the specified remote domain, using the named assembly and the constructor that best matches the specified parameters.
  remarks: "Use <xref:System.Activator.CreateInstance%2A> when a host needs to execute code in an application domain that has restricted security permissions.  \n  \n Use <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName> to unwrap the return value.  \n  \n> [!NOTE]\n>  This method uses <xref:System.Security.Permissions.SecurityAction?displayProperty=fullName> to require the immediate caller to have full trust."
  syntax:
    content: >-
      [System.Security.SecurityCritical]

      public static System.Runtime.Remoting.ObjectHandle CreateInstance (AppDomain domain, string assemblyName, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes);
    parameters:
    - id: domain
      type: System.AppDomain
      description: The domain where the type named <code>typeName</code> is created.
    - id: assemblyName
      type: System.String
      description: The name of the assembly where the type named <code>typeName</code> is sought. If <code>assemblyName</code> is `null`, the executing assembly is searched.
    - id: typeName
      type: System.String
      description: The fully qualified name of the preferred type.
    - id: ignoreCase
      type: System.Boolean
      description: '`true` to specify that the search for <code>typeName</code> is not case-sensitive; `false` to specify that the search is case-sensitive.'
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: A combination of zero or more bit flags that affect the search for the <code>typeName</code> constructor. If <code>bindingAttr</code> is zero, a case-sensitive search for public constructors is conducted.
    - id: binder
      type: System.Reflection.Binder
      description: An object that uses <code>bindingAttr</code> and <code>args</code> to seek and identify the <code>typeName</code> constructor. If <code>binder</code> is `null`, the default binder is used.
    - id: args
      type: System.Object[]
      description: An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If <code>args</code> is an empty array or `null`, the constructor that takes no parameters (the default constructor) is invoked.
    - id: culture
      type: System.Globalization.CultureInfo
      description: Culture-specific information that governs the coercion of <code>args</code> to the formal types declared for the <code>typeName</code> constructor. If <code>culture</code> is `null`, the <xref href="System.Globalization.CultureInfo"></xref> for the current thread is used.
    - id: activationAttributes
      type: System.Object[]
      description: "An array of one or more attributes that can participate in activation. This is typically an array that contains a single <xref href=\"System.Runtime.Remoting.Activation.UrlAttribute\"></xref> object that specifies the URL that is required to activate a remote object.  \n  \n This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation."
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: A handle that must be unwrapped to access the newly created instance.
  overload: System.Activator.CreateInstance*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>domain</code> or <code>typeName</code> is `null`.
  - type: System.MissingMethodException
    commentId: T:System.MissingMethodException
    description: No matching constructor was found.
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: <code>typename</code> was not found in <code>assemblyName</code>.
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: <code>assemblyName</code> was not found.
  - type: System.MethodAccessException
    commentId: T:System.MethodAccessException
    description: The caller does not have permission to call this constructor.
  - type: System.MemberAccessException
    commentId: T:System.MemberAccessException
    description: Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: The constructor, which was invoked through reflection, threw an exception.
  - type: System.Runtime.InteropServices.InvalidComObjectException
    commentId: T:System.Runtime.InteropServices.InvalidComObjectException
    description: The COM type was not obtained through <xref href="System.Type.GetTypeFromProgID*"></xref> or <xref href="System.Type.GetTypeFromCLSID*"></xref>.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Creation of <xref href=\"System.TypedReference\"></xref>, <xref href=\"System.ArgIterator\"></xref>, <xref href=\"System.Void\"></xref>, and <xref href=\"System.RuntimeArgumentHandle\"></xref> types, or arrays of those types, is not supported.  \n  \n -or-  \n  \n <code>activationAttributes</code> is not an empty array, and the type being created does not derive from <xref href=\"System.MarshalByRefObject\"></xref>.  \n  \n -or-  \n  \n The constructor that best matches <code>args</code> has `varargs` arguments."
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "<code>assemblyName</code> is not a valid assembly.  \n  \n -or-  \n  \n The common language runtime (CLR) version 2.0 or later is currently loaded, and <code>assemblyName</code> was compiled for a version of the CLR that is later than the currently loaded version. Note that the .NET Framework versions 2.0, 3.0, and 3.5 all use CLR version 2.0."
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: "An assembly or module was loaded twice with two different evidences.  \n  \n -or-  \n  \n The assembly name or code base is invalid."
  attributes:
  - type: System.Security.SecurityCriticalAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Activator.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Activator.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  commentId: M:System.Activator.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  id: CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  parent: System.Activator
  langs:
  - csharp
  name: CreateInstance(String, String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[])
  nameWithType: Activator.CreateInstance(String, String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[])
  fullName: Activator.CreateInstance(String, String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates an instance of the type whose name is specified, using the named assembly and the constructor that best matches the specified parameters.
  remarks: "Use <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName> to unwrap the return value.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to create nonpublic types and members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the assembly that contains the nonpublic types and members is restricted to the caller’s grant set or to a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)42d9dc2a-8fcc-4ff3-b002-4ff260ef3dc5.)  \n>   \n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later."
  syntax:
    content: public static System.Runtime.Remoting.ObjectHandle CreateInstance (string assemblyName, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes);
    parameters:
    - id: assemblyName
      type: System.String
      description: The name of the assembly where the type named <code>typeName</code> is sought. If <code>assemblyName</code> is `null`, the executing assembly is searched.
    - id: typeName
      type: System.String
      description: The fully qualified name of the preferred type.
    - id: ignoreCase
      type: System.Boolean
      description: '`true` to specify that the search for <code>typeName</code> is not case-sensitive; `false` to specify that the search is case-sensitive.'
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: A combination of zero or more bit flags that affect the search for the <code>typeName</code> constructor. If <code>bindingAttr</code> is zero, a case-sensitive search for public constructors is conducted.
    - id: binder
      type: System.Reflection.Binder
      description: An object that uses <code>bindingAttr</code> and <code>args</code> to seek and identify the <code>typeName</code> constructor. If <code>binder</code> is `null`, the default binder is used.
    - id: args
      type: System.Object[]
      description: An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If <code>args</code> is an empty array or `null`, the constructor that takes no parameters (the default constructor) is invoked.
    - id: culture
      type: System.Globalization.CultureInfo
      description: Culture-specific information that governs the coercion of <code>args</code> to the formal types declared for the <code>typeName</code> constructor. If <code>culture</code> is `null`, the <xref href="System.Globalization.CultureInfo"></xref> for the current thread is used.
    - id: activationAttributes
      type: System.Object[]
      description: "An array of one or more attributes that can participate in activation. This is typically an array that contains a single <xref href=\"System.Runtime.Remoting.Activation.UrlAttribute\"></xref> object that specifies the URL that is required to activate a remote object.  \n  \n This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation."
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: A handle that must be unwrapped to access the newly created instance.
  overload: System.Activator.CreateInstance*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>typeName</code> is `null`.
  - type: System.MissingMethodException
    commentId: T:System.MissingMethodException
    description: No matching constructor was found.
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: <code>typename</code> was not found in <code>assemblyName</code>.
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: <code>assemblyName</code> was not found.
  - type: System.MethodAccessException
    commentId: T:System.MethodAccessException
    description: The caller does not have permission to call this constructor.
  - type: System.MemberAccessException
    commentId: T:System.MemberAccessException
    description: Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: The constructor, which was invoked through reflection, threw an exception.
  - type: System.Runtime.InteropServices.InvalidComObjectException
    commentId: T:System.Runtime.InteropServices.InvalidComObjectException
    description: The COM type was not obtained through <xref href="System.Type.GetTypeFromProgID*"></xref> or <xref href="System.Type.GetTypeFromCLSID*"></xref>.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Creation of <xref href=\"System.TypedReference\"></xref>, <xref href=\"System.ArgIterator\"></xref>, <xref href=\"System.Void\"></xref>, and <xref href=\"System.RuntimeArgumentHandle\"></xref> types, or arrays of those types, is not supported.  \n  \n -or-  \n  \n <code>activationAttributes</code> is not an empty array, and the type being created does not derive from <xref href=\"System.MarshalByRefObject\"></xref>.  \n  \n -or-  \n  \n The constructor that best matches <code>args</code> has `varargs` arguments."
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "<code>assemblyName</code> is not a valid assembly.  \n  \n -or-  \n  \n The common language runtime (CLR) version 2.0 or later is currently loaded, and <code>assemblyName</code> was compiled for a version of the CLR that is later than the currently loaded version. Note that the .NET Framework versions 2.0, 3.0, and 3.5 all use CLR version 2.0."
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: "An assembly or module was loaded twice with two different evidences.  \n  \n -or-  \n  \n The assembly name or code base is invalid."
  attributes: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Activator.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  commentId: M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  id: CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  parent: System.Activator
  langs:
  - csharp
  name: CreateInstance(Type, BindingFlags, Binder, Object[], CultureInfo, Object[])
  nameWithType: Activator.CreateInstance(Type, BindingFlags, Binder, Object[], CultureInfo, Object[])
  fullName: Activator.CreateInstance(Type, BindingFlags, Binder, Object[], CultureInfo, Object[])
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Creates an instance of the specified type using the constructor that best matches the specified parameters.
  remarks: "The constructor to be invoked must provide the most specific match with the specified argument list under the constraints of the specified binder and binding attributes.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access nonpublic types and members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the nonpublic types and members is restricted to the caller’s grant set or to a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \n>   \n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later."
  syntax:
    content: public static object CreateInstance (Type type, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes);
    parameters:
    - id: type
      type: System.Type
      description: The type of object to create.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: A combination of zero or more bit flags that affect the search for the <code>type</code> constructor. If <code>bindingAttr</code> is zero, a case-sensitive search for public constructors is conducted.
    - id: binder
      type: System.Reflection.Binder
      description: An object that uses <code>bindingAttr</code> and <code>args</code> to seek and identify the <code>type</code> constructor. If <code>binder</code> is `null`, the default binder is used.
    - id: args
      type: System.Object[]
      description: An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If <code>args</code> is an empty array or `null`, the constructor that takes no parameters (the default constructor) is invoked.
    - id: culture
      type: System.Globalization.CultureInfo
      description: Culture-specific information that governs the coercion of <code>args</code> to the formal types declared for the <code>type</code> constructor. If <code>culture</code> is `null`, the <xref href="System.Globalization.CultureInfo"></xref> for the current thread is used.
    - id: activationAttributes
      type: System.Object[]
      description: "An array of one or more attributes that can participate in activation. This is typically an array that contains a single <xref href=\"System.Runtime.Remoting.Activation.UrlAttribute\"></xref> object that specifies the URL that is required to activate a remote object.  \n  \n This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation."
    return:
      type: System.Object
      description: A reference to the newly created object.
  overload: System.Activator.CreateInstance*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>type</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>type</code> is not a `RuntimeType`.  \n  \n -or-  \n  \n <code>type</code> is an open generic type (that is, the <xref href=\"System.Type.ContainsGenericParameters\"></xref> property returns `true`)."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>type</code> cannot be a <xref href=\"System.Reflection.Emit.TypeBuilder\"></xref>.  \n  \n -or-  \n  \n Creation of <xref href=\"System.TypedReference\"></xref>, <xref href=\"System.ArgIterator\"></xref>, <xref href=\"System.Void\"></xref>, and <xref href=\"System.RuntimeArgumentHandle\"></xref> types, or arrays of those types, is not supported.  \n  \n -or-  \n  \n <code>activationAttributes</code> is not an empty array, and the type being created does not derive from <xref href=\"System.MarshalByRefObject\"></xref>.  \n  \n -or-  \n  \n The assembly that contains <code>type</code> is a dynamic assembly that was created with <xref href=\"System.Reflection.Emit.AssemblyBuilderAccess.Save\"></xref>.  \n  \n -or-  \n  \n The constructor that best matches <code>args</code> has `varargs` arguments."
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: The constructor being called throws an exception.
  - type: System.MethodAccessException
    commentId: T:System.MethodAccessException
    description: The caller does not have permission to call this constructor.
  - type: System.MemberAccessException
    commentId: T:System.MemberAccessException
    description: Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.
  - type: System.Runtime.InteropServices.InvalidComObjectException
    commentId: T:System.Runtime.InteropServices.InvalidComObjectException
    description: The COM type was not obtained through <xref href="System.Type.GetTypeFromProgID*"></xref> or <xref href="System.Type.GetTypeFromCLSID*"></xref>.
  - type: System.MissingMethodException
    commentId: T:System.MissingMethodException
    description: No matching constructor was found.
  - type: System.Runtime.InteropServices.COMException
    commentId: T:System.Runtime.InteropServices.COMException
    description: <code>type</code> is a COM object but the class identifier used to obtain the type is invalid, or the identified class is not registered.
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: <code>type</code> is not a valid type.
  attributes: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Activator.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)
  commentId: M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)
  id: CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)
  parent: System.Activator
  langs:
  - csharp
  name: CreateInstance(Type, BindingFlags, Binder, Object[], CultureInfo)
  nameWithType: Activator.CreateInstance(Type, BindingFlags, Binder, Object[], CultureInfo)
  fullName: Activator.CreateInstance(Type, BindingFlags, Binder, Object[], CultureInfo)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Creates an instance of the specified type using the constructor that best matches the specified parameters.
  remarks: "The constructor to be invoked must provide the most specific match with the specified argument list under the constraints of the specified binder and binding attributes.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access nonpublic types and members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the assembly that contains the nonpublic types and members is restricted to the caller’s grant set or to a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \n>   \n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later."
  syntax:
    content: public static object CreateInstance (Type type, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture);
    parameters:
    - id: type
      type: System.Type
      description: The type of object to create.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: A combination of zero or more bit flags that affect the search for the <code>type</code> constructor. If <code>bindingAttr</code> is zero, a case-sensitive search for public constructors is conducted.
    - id: binder
      type: System.Reflection.Binder
      description: An object that uses <code>bindingAttr</code> and <code>args</code> to seek and identify the <code>type</code> constructor. If <code>binder</code> is `null`, the default binder is used.
    - id: args
      type: System.Object[]
      description: An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If <code>args</code> is an empty array or `null`, the constructor that takes no parameters (the default constructor) is invoked.
    - id: culture
      type: System.Globalization.CultureInfo
      description: Culture-specific information that governs the coercion of <code>args</code> to the formal types declared for the <code>type</code> constructor. If <code>culture</code> is `null`, the <xref href="System.Globalization.CultureInfo"></xref> for the current thread is used.
    return:
      type: System.Object
      description: A reference to the newly created object.
  overload: System.Activator.CreateInstance*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>type</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>type</code> is not a `RuntimeType`.  \n  \n -or-  \n  \n <code>type</code> is an open generic type (that is, the <xref href=\"System.Type.ContainsGenericParameters\"></xref> property returns `true`)."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>type</code> cannot be a <xref href=\"System.Reflection.Emit.TypeBuilder\"></xref>.  \n  \n -or-  \n  \n Creation of <xref href=\"System.TypedReference\"></xref>, <xref href=\"System.ArgIterator\"></xref>, <xref href=\"System.Void\"></xref>, and <xref href=\"System.RuntimeArgumentHandle\"></xref> types, or arrays of those types, is not supported.  \n  \n -or-  \n  \n The assembly that contains <code>type</code> is a dynamic assembly that was created with <xref href=\"System.Reflection.Emit.AssemblyBuilderAccess.Save\"></xref>.  \n  \n -or-  \n  \n The constructor that best matches <code>args</code> has `varargs` arguments."
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: The constructor being called throws an exception.
  - type: System.MethodAccessException
    commentId: T:System.MethodAccessException
    description: The caller does not have permission to call this constructor.
  - type: System.MemberAccessException
    commentId: T:System.MemberAccessException
    description: Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.
  - type: System.Runtime.InteropServices.InvalidComObjectException
    commentId: T:System.Runtime.InteropServices.InvalidComObjectException
    description: The COM type was not obtained through <xref href="System.Type.GetTypeFromProgID*"></xref> or <xref href="System.Type.GetTypeFromCLSID*"></xref>.
  - type: System.MissingMethodException
    commentId: T:System.MissingMethodException
    description: No matching constructor was found.
  - type: System.Runtime.InteropServices.COMException
    commentId: T:System.Runtime.InteropServices.COMException
    description: <code>type</code> is a COM object but the class identifier used to obtain the type is invalid, or the identified class is not registered.
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: <code>type</code> is not a valid type.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Activator.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Activator.CreateInstance(System.Type,System.Object[],System.Object[])
  commentId: M:System.Activator.CreateInstance(System.Type,System.Object[],System.Object[])
  id: CreateInstance(System.Type,System.Object[],System.Object[])
  parent: System.Activator
  langs:
  - csharp
  name: CreateInstance(Type, Object[], Object[])
  nameWithType: Activator.CreateInstance(Type, Object[], Object[])
  fullName: Activator.CreateInstance(Type, Object[], Object[])
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Creates an instance of the specified type using the constructor that best matches the specified parameters.
  remarks: "The constructor to be invoked must be accessible and must provide the most specific match with the specified argument list.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access nonpublic types if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the assembly that contains the nonpublic types is restricted to the caller’s grant set or to a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \n>   \n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later."
  syntax:
    content: public static object CreateInstance (Type type, object[] args, object[] activationAttributes);
    parameters:
    - id: type
      type: System.Type
      description: The type of object to create.
    - id: args
      type: System.Object[]
      description: An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If <code>args</code> is an empty array or `null`, the constructor that takes no parameters (the default constructor) is invoked.
    - id: activationAttributes
      type: System.Object[]
      description: "An array of one or more attributes that can participate in activation. This is typically an array that contains a single <xref href=\"System.Runtime.Remoting.Activation.UrlAttribute\"></xref> object that specifies the URL that is required to activate a remote object.  \n  \n This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation."
    return:
      type: System.Object
      description: A reference to the newly created object.
  overload: System.Activator.CreateInstance*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>type</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>type</code> is not a `RuntimeType`.  \n  \n -or-  \n  \n <code>type</code> is an open generic type (that is, the <xref href=\"System.Type.ContainsGenericParameters\"></xref> property returns `true`)."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>type</code> cannot be a <xref href=\"System.Reflection.Emit.TypeBuilder\"></xref>.  \n  \n -or-  \n  \n Creation of <xref href=\"System.TypedReference\"></xref>, <xref href=\"System.ArgIterator\"></xref>, <xref href=\"System.Void\"></xref>, and <xref href=\"System.RuntimeArgumentHandle\"></xref> types, or arrays of those types, is not supported.  \n  \n -or-  \n  \n <code>activationAttributes</code> is not an empty array, and the type being created does not derive from <xref href=\"System.MarshalByRefObject\"></xref>.  \n  \n -or-  \n  \n The assembly that contains <code>type</code> is a dynamic assembly that was created with <xref href=\"System.Reflection.Emit.AssemblyBuilderAccess.Save\"></xref>.  \n  \n -or-  \n  \n The constructor that best matches <code>args</code> has `varargs` arguments."
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: The constructor being called throws an exception.
  - type: System.MethodAccessException
    commentId: T:System.MethodAccessException
    description: The caller does not have permission to call this constructor.
  - type: System.MemberAccessException
    commentId: T:System.MemberAccessException
    description: Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.
  - type: System.Runtime.InteropServices.InvalidComObjectException
    commentId: T:System.Runtime.InteropServices.InvalidComObjectException
    description: The COM type was not obtained through <xref href="System.Type.GetTypeFromProgID*"></xref> or <xref href="System.Type.GetTypeFromCLSID*"></xref>.
  - type: System.MissingMethodException
    commentId: T:System.MissingMethodException
    description: No matching public constructor was found.
  - type: System.Runtime.InteropServices.COMException
    commentId: T:System.Runtime.InteropServices.COMException
    description: <code>type</code> is a COM object but the class identifier used to obtain the type is invalid, or the identified class is not registered.
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: <code>type</code> is not a valid type.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Activator.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Activator.CreateInstance(System.String,System.String,System.Object[])
  commentId: M:System.Activator.CreateInstance(System.String,System.String,System.Object[])
  id: CreateInstance(System.String,System.String,System.Object[])
  parent: System.Activator
  langs:
  - csharp
  name: CreateInstance(String, String, Object[])
  nameWithType: Activator.CreateInstance(String, String, Object[])
  fullName: Activator.CreateInstance(String, String, Object[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates an instance of the type whose name is specified, using the named assembly and default constructor.
  remarks: "Use <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName> to unwrap the return value.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to create nonpublic types if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the nonpublic types is restricted to the caller’s grant set or to a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \n>   \n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later."
  syntax:
    content: public static System.Runtime.Remoting.ObjectHandle CreateInstance (string assemblyName, string typeName, object[] activationAttributes);
    parameters:
    - id: assemblyName
      type: System.String
      description: The name of the assembly where the type named <code>typeName</code> is sought. If <code>assemblyName</code> is `null`, the executing assembly is searched.
    - id: typeName
      type: System.String
      description: The fully qualified name of the preferred type.
    - id: activationAttributes
      type: System.Object[]
      description: "An array of one or more attributes that can participate in activation. This is typically an array that contains a single <xref href=\"System.Runtime.Remoting.Activation.UrlAttribute\"></xref> object that specifies the URL that is required to activate a remote object.  \n  \n This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation."
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: A handle that must be unwrapped to access the newly created instance.
  overload: System.Activator.CreateInstance*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>typeName</code> is `null`.
  - type: System.MissingMethodException
    commentId: T:System.MissingMethodException
    description: No matching public constructor was found.
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: <code>typename</code> was not found in <code>assemblyName</code>.
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: <code>assemblyName</code> was not found.
  - type: System.MethodAccessException
    commentId: T:System.MethodAccessException
    description: The caller does not have permission to call this constructor.
  - type: System.MemberAccessException
    commentId: T:System.MemberAccessException
    description: Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.
  - type: System.Runtime.InteropServices.InvalidComObjectException
    commentId: T:System.Runtime.InteropServices.InvalidComObjectException
    description: The COM type was not obtained through <xref href="System.Type.GetTypeFromProgID*"></xref> or <xref href="System.Type.GetTypeFromCLSID*"></xref>.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Creation of <xref href=\"System.TypedReference\"></xref>, <xref href=\"System.ArgIterator\"></xref>, <xref href=\"System.Void\"></xref>, and <xref href=\"System.RuntimeArgumentHandle\"></xref> types, or arrays of those types, is not supported.  \n  \n -or-  \n  \n <code>activationAttributes</code> is not an empty array, and the type being created does not derive from <xref href=\"System.MarshalByRefObject\"></xref>.  \n  \n -or-  \n  \n <code>activationAttributes</code> is not a <xref href=\"System.Runtime.Remoting.Activation.UrlAttribute\"></xref>  \n  \n array."
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "<code>assemblyName</code> is not a valid assembly.  \n  \n -or-  \n  \n The common language runtime (CLR) version 2.0 or later is currently loaded, and <code>assemblyName</code> was compiled for a version of the CLR that is later than the currently loaded version. Note that the .NET Framework versions 2.0, 3.0, and 3.5 all use CLR version 2.0."
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: "An assembly or module was loaded twice with two different evidences.  \n  \n -or-  \n  \n The assembly name or code base is invalid."
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: An error occurred when attempting remote activation in a target specified in <code>activationAttributes</code>.
  attributes: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Activator.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Activator.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)
  commentId: M:System.Activator.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)
  id: CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)
  parent: System.Activator
  langs:
  - csharp
  name: CreateInstance(String, String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[], Evidence)
  nameWithType: Activator.CreateInstance(String, String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[], Evidence)
  fullName: Activator.CreateInstance(String, String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[], Evidence)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates an instance of the type whose name is specified, using the named assembly and the constructor that best matches the specified parameters.
  remarks: "Use <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName> to unwrap the return value.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to create nonpublic types and members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the assembly that contains the nonpublic types and members is restricted to the caller’s grant set or to a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \n>   \n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later."
  syntax:
    content: >-
      [System.Obsolete("Methods which use evidence to sandbox are obsolete and will be removed in a future release of the .NET Framework. Please use an overload of CreateInstance which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")]

      public static System.Runtime.Remoting.ObjectHandle CreateInstance (string assemblyName, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes, System.Security.Policy.Evidence securityInfo);
    parameters:
    - id: assemblyName
      type: System.String
      description: The name of the assembly where the type named <code>typeName</code> is sought. If <code>assemblyName</code> is `null`, the executing assembly is searched.
    - id: typeName
      type: System.String
      description: The fully qualified name of the preferred type.
    - id: ignoreCase
      type: System.Boolean
      description: '`true` to specify that the search for <code>typeName</code> is not case-sensitive; `false` to specify that the search is case-sensitive.'
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: A combination of zero or more bit flags that affect the search for the <code>typeName</code> constructor. If <code>bindingAttr</code> is zero, a case-sensitive search for public constructors is conducted.
    - id: binder
      type: System.Reflection.Binder
      description: An object that uses <code>bindingAttr</code> and <code>args</code> to seek and identify the <code>typeName</code> constructor. If <code>binder</code> is `null`, the default binder is used.
    - id: args
      type: System.Object[]
      description: An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If <code>args</code> is an empty array or `null`, the constructor that takes no parameters (the default constructor) is invoked.
    - id: culture
      type: System.Globalization.CultureInfo
      description: Culture-specific information that governs the coercion of <code>args</code> to the formal types declared for the <code>typeName</code> constructor. If <code>culture</code> is `null`, the <xref href="System.Globalization.CultureInfo"></xref> for the current thread is used.
    - id: activationAttributes
      type: System.Object[]
      description: "An array of one or more attributes that can participate in activation. This is typically an array that contains a single <xref href=\"System.Runtime.Remoting.Activation.UrlAttribute\"></xref> object that specifies the URL that is required to activate a remote object.  \n  \n This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation."
    - id: securityInfo
      type: System.Security.Policy.Evidence
      description: Information used to make security policy decisions and grant code permissions.
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: A handle that must be unwrapped to access the newly created instance.
  overload: System.Activator.CreateInstance*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>typeName</code> is `null`.
  - type: System.MissingMethodException
    commentId: T:System.MissingMethodException
    description: No matching constructor was found.
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: <code>typename</code> was not found in <code>assemblyName</code>.
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: <code>assemblyName</code> was not found.
  - type: System.MethodAccessException
    commentId: T:System.MethodAccessException
    description: The caller does not have permission to call this constructor.
  - type: System.MemberAccessException
    commentId: T:System.MemberAccessException
    description: Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: The constructor, which was invoked through reflection, threw an exception.
  - type: System.Runtime.InteropServices.InvalidComObjectException
    commentId: T:System.Runtime.InteropServices.InvalidComObjectException
    description: The COM type was not obtained through <xref href="System.Type.GetTypeFromProgID*"></xref> or <xref href="System.Type.GetTypeFromCLSID*"></xref>.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Creation of <xref href=\"System.TypedReference\"></xref>, <xref href=\"System.ArgIterator\"></xref>, <xref href=\"System.Void\"></xref>, and <xref href=\"System.RuntimeArgumentHandle\"></xref> types, or arrays of those types, is not supported.  \n  \n -or-  \n  \n <code>activationAttributes</code> is not an empty array, and the type being created does not derive from <xref href=\"System.MarshalByRefObject\"></xref>.  \n  \n -or-  \n  \n The constructor that best matches <code>args</code> has `varargs` arguments."
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "<code>assemblyName</code> is not a valid assembly.  \n  \n -or-  \n  \n The common language runtime (CLR) version 2.0 or later is currently loaded, and <code>assemblyName</code> was compiled for a version of the CLR that is later than the currently loaded version. Note that the .NET Framework versions 2.0, 3.0, and 3.5 all use CLR version 2.0."
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: "An assembly or module was loaded twice with two different evidences.  \n  \n -or-  \n  \n The assembly name or code base is invalid."
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Activator.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Activator.CreateInstance(System.Type,System.Object[])
  commentId: M:System.Activator.CreateInstance(System.Type,System.Object[])
  id: CreateInstance(System.Type,System.Object[])
  parent: System.Activator
  langs:
  - csharp
  name: CreateInstance(Type, Object[])
  nameWithType: Activator.CreateInstance(Type, Object[])
  fullName: Activator.CreateInstance(Type, Object[])
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Creates an instance of the specified type using the constructor that best matches the specified parameters.
  remarks: "The constructor to be invoked must be accessible and must provide the most specific match with the specified argument list.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access nonpublic types if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the assembly that contains the nonpublic types is restricted to the caller’s grant set or to a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \n>   \n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later."
  example:
  - "The following example calls the  <xref:System.Activator.CreateInstance%28System.Type%2CSystem.Object%5B%5D%29> method to create a <xref:System.String> object. It calls the <xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=fullName> constructor to instantiate a string that contains ten elements from a character array starting at the fourteenth position.  \n  \n [!code-csharp[System.Activator.CreateInstance#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.activator.createinstance/cs/CreateInstance5.cs#5)]\n [!code-vb[System.Activator.CreateInstance#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.activator.createinstance/vb/CreateInstance5.vb#5)]  \n  \n The following example creates a jagged array whose elements are arguments to be passed to a <xref:System.String> constructor. The example then passes each array to the <xref:System.Activator.CreateInstance%28System.Type%2CSystem.Object%5B%5D%29> method to invoke the appropriate string constructor.  \n  \n [!code-csharp[System.Activator.CreateInstance#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.activator.createinstance/cs/createinstance2.cs#4)]\n [!code-vb[System.Activator.CreateInstance#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.activator.createinstance/vb/createinstance2.vb#4)]"
  syntax:
    content: public static object CreateInstance (Type type, object[] args);
    parameters:
    - id: type
      type: System.Type
      description: The type of object to create.
    - id: args
      type: System.Object[]
      description: An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If <code>args</code> is an empty array or `null`, the constructor that takes no parameters (the default constructor) is invoked.
    return:
      type: System.Object
      description: A reference to the newly created object.
  overload: System.Activator.CreateInstance*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>type</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>type</code> is not a `RuntimeType`.  \n  \n -or-  \n  \n <code>type</code> is an open generic type (that is, the <xref href=\"System.Type.ContainsGenericParameters\"></xref> property returns `true`)."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>type</code> cannot be a <xref href=\"System.Reflection.Emit.TypeBuilder\"></xref>.  \n  \n -or-  \n  \n Creation of <xref href=\"System.TypedReference\"></xref>, <xref href=\"System.ArgIterator\"></xref>, <xref href=\"System.Void\"></xref>, and <xref href=\"System.RuntimeArgumentHandle\"></xref> types, or arrays of those types, is not supported.  \n  \n -or-  \n  \n The assembly that contains <code>type</code> is a dynamic assembly that was created with <xref href=\"System.Reflection.Emit.AssemblyBuilderAccess.Save\"></xref>.  \n  \n -or-  \n  \n The constructor that best matches <code>args</code> has `varargs` arguments."
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: The constructor being called throws an exception.
  - type: System.MethodAccessException
    commentId: T:System.MethodAccessException
    description: "<block subset=\"none\" type=\"note\">\n      <p>  \n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\"System.MemberAccessException\"></xref>, instead.  \n  \n</p>\n    </block>  \n  \n The caller does not have permission to call this constructor."
  - type: System.MemberAccessException
    commentId: T:System.MemberAccessException
    description: Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.
  - type: System.Runtime.InteropServices.InvalidComObjectException
    commentId: T:System.Runtime.InteropServices.InvalidComObjectException
    description: The COM type was not obtained through <xref href="System.Type.GetTypeFromProgID*"></xref> or <xref href="System.Type.GetTypeFromCLSID*"></xref>.
  - type: System.MissingMethodException
    commentId: T:System.MissingMethodException
    description: "<block subset=\"none\" type=\"note\">\n      <p>  \n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\"System.MissingMemberException\"></xref>, instead.  \n  \n</p>\n    </block>  \n  \n No matching public constructor was found."
  - type: System.Runtime.InteropServices.COMException
    commentId: T:System.Runtime.InteropServices.COMException
    description: <code>type</code> is a COM object but the class identifier used to obtain the type is invalid, or the identified class is not registered.
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: <code>type</code> is not a valid type.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Activator.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Activator.CreateInstance(System.Type,System.Boolean)
  commentId: M:System.Activator.CreateInstance(System.Type,System.Boolean)
  id: CreateInstance(System.Type,System.Boolean)
  parent: System.Activator
  langs:
  - csharp
  name: CreateInstance(Type, Boolean)
  nameWithType: Activator.CreateInstance(Type, Boolean)
  fullName: Activator.CreateInstance(Type, Boolean)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Creates an instance of the specified type using that type's default constructor.
  remarks: "> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access nonpublic types and members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the assembly that contains the nonpublic types and members is restricted to the caller’s grant set or to a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \n>   \n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later."
  syntax:
    content: public static object CreateInstance (Type type, bool nonPublic);
    parameters:
    - id: type
      type: System.Type
      description: The type of object to create.
    - id: nonPublic
      type: System.Boolean
      description: '`true` if a public or nonpublic default constructor can match; `false` if only a public default constructor can match.'
    return:
      type: System.Object
      description: A reference to the newly created object.
  overload: System.Activator.CreateInstance*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>type</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>type</code> is not a `RuntimeType`.  \n  \n -or-  \n  \n <code>type</code> is an open generic type (that is, the <xref href=\"System.Type.ContainsGenericParameters\"></xref> property returns `true`)."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>type</code> cannot be a <xref href=\"System.Reflection.Emit.TypeBuilder\"></xref>.  \n  \n -or-  \n  \n Creation of <xref href=\"System.TypedReference\"></xref>, <xref href=\"System.ArgIterator\"></xref>, <xref href=\"System.Void\"></xref>, and <xref href=\"System.RuntimeArgumentHandle\"></xref> types, or arrays of those types, is not supported.  \n  \n -or-  \n  \n The assembly that contains <code>type</code> is a dynamic assembly that was created with <xref href=\"System.Reflection.Emit.AssemblyBuilderAccess.Save\"></xref>."
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: The constructor being called throws an exception.
  - type: System.MethodAccessException
    commentId: T:System.MethodAccessException
    description: The caller does not have permission to call this constructor.
  - type: System.MemberAccessException
    commentId: T:System.MemberAccessException
    description: Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.
  - type: System.Runtime.InteropServices.InvalidComObjectException
    commentId: T:System.Runtime.InteropServices.InvalidComObjectException
    description: The COM type was not obtained through <xref href="System.Type.GetTypeFromProgID*"></xref> or <xref href="System.Type.GetTypeFromCLSID*"></xref>.
  - type: System.MissingMethodException
    commentId: T:System.MissingMethodException
    description: No matching public constructor was found.
  - type: System.Runtime.InteropServices.COMException
    commentId: T:System.Runtime.InteropServices.COMException
    description: <code>type</code> is a COM object but the class identifier used to obtain the type is invalid, or the identified class is not registered.
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: <code>type</code> is not a valid type.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Activator.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Activator.CreateInstance(System.String,System.String)
  commentId: M:System.Activator.CreateInstance(System.String,System.String)
  id: CreateInstance(System.String,System.String)
  parent: System.Activator
  langs:
  - csharp
  name: CreateInstance(String, String)
  nameWithType: Activator.CreateInstance(String, String)
  fullName: Activator.CreateInstance(String, String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates an instance of the type whose name is specified, using the named assembly and default constructor.
  remarks: "Use <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName> to unwrap the return value.  \n  \n `assemblyName` can be either of the following:  \n  \n-   The simple name of an assembly, without its path or file extension. For example, you would specify `TypeExtensions` for an assembly whose path and name are .\\bin\\TypeExtensions.dll.  \n  \n-   The full name of a signed assembly, which consists of its simple name, version, culture, and public key token; for example, \"TypeExtensions, Version=1.0.0.0, Culture=neutral, PublicKeyToken=181869f2f7435b51\".  \n  \n For more information on how the common language runtime identifies and loads assemblies, see [How the Runtime Locates Assemblies](~/docs/framework/deployment/how-the-runtime-locates-assemblies.md). For information on using the application configuration file to define assembly locations, see [Specifying an Assembly's Location](~/docs/framework/configure-apps/specify-assembly-location.md). If `assemblyName` is found, it is loaded in the default context.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to create nonpublic types if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the assembly that contains the nonpublic types is restricted to the caller’s grant set or to a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \n>   \n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later."
  example:
  - "The following example defines a class named `Person` in an assembly named `PersonInfo`. Note that the `Person` class has two constructors, one of which is parameterless.  \n  \n [!code-csharp[System.Activator.CreateInstance#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.activator.createinstance/cs/personinfo.cs#1)]\n [!code-vb[System.Activator.CreateInstance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.activator.createinstance/vb/personinfo.vb#1)]  \n  \n The following example calls the <xref:System.Activator.CreateInstance%28System.String%2CSystem.String%29> method to instantiate the `Person` class. It requires a reference to PersonInfo.dll to be added to the project. Because the <xref:System.Activator.CreateInstance%28System.String%2CSystem.String%29> method calls the `Person` class default constructor,  the example assigns a value to its `Name` property.  \n  \n [!code-csharp[System.Activator.CreateInstance#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.activator.createinstance/cs/createinstanceex1.cs#2)]\n [!code-vb[System.Activator.CreateInstance#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.activator.createinstance/vb/createinstanceex1.vb#2)]  \n  \n However, <xref:System.Activator.CreateInstance%2A> is frequently called to instantiate a type that crosses machine boundaries or that is not known at design time. In this case, you cannot include a reference to the assembly in the project and cannot make early-bound calls to the type's members. To work around this limitation, the following example uses the <xref:System.Activator.CreateInstance%2A> method along with reflection to assign a value to the `Person` object's `Name` property and to display its value.  \n  \n [!code-csharp[System.Activator.CreateInstance#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.activator.createinstance/cs/createinstanceex1a.cs#3)]\n [!code-vb[System.Activator.CreateInstance#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.activator.createinstance/vb/createinstanceex1a.vb#3)]"
  syntax:
    content: public static System.Runtime.Remoting.ObjectHandle CreateInstance (string assemblyName, string typeName);
    parameters:
    - id: assemblyName
      type: System.String
      description: The name of the assembly where the type named <code>typeName</code> is sought. If <code>assemblyName</code> is `null`, the executing assembly is searched.
    - id: typeName
      type: System.String
      description: The fully qualified name of the preferred type.
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: A handle that must be unwrapped to access the newly created instance.
  overload: System.Activator.CreateInstance*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>typeName</code> is `null`.
  - type: System.MissingMethodException
    commentId: T:System.MissingMethodException
    description: No matching public constructor was found.
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: <code>typename</code> was not found in <code>assemblyName</code>.
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: <code>assemblyName</code> was not found.
  - type: System.MethodAccessException
    commentId: T:System.MethodAccessException
    description: The caller does not have permission to call this constructor.
  - type: System.MemberAccessException
    commentId: T:System.MemberAccessException
    description: You cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: The constructor, which was invoked through reflection, threw an exception.
  - type: System.Runtime.InteropServices.InvalidComObjectException
    commentId: T:System.Runtime.InteropServices.InvalidComObjectException
    description: The COM type was not obtained through <xref href="System.Type.GetTypeFromProgID*"></xref> or <xref href="System.Type.GetTypeFromCLSID*"></xref>.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: Creation of <xref href="System.TypedReference"></xref>, <xref href="System.ArgIterator"></xref>, <xref href="System.Void"></xref>, and <xref href="System.RuntimeArgumentHandle"></xref> types, or arrays of those types, is not supported.
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "<code>assemblyName</code> is not a valid assembly.  \n  \n -or-  \n  \n The common language runtime (CLR) version 2.0 or later is currently loaded, and <code>assemblyName</code> was compiled for a version of the CLR that is later than the currently loaded version. Note that the .NET Framework versions 2.0, 3.0, and 3.5 all use CLR version 2.0."
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: "An assembly or module was loaded twice with two different evidences.  \n  \n -or-  \n  \n The assembly name or code base is invalid."
  attributes: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Activator.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Activator.CreateInstance(System.ActivationContext,System.String[])
  commentId: M:System.Activator.CreateInstance(System.ActivationContext,System.String[])
  id: CreateInstance(System.ActivationContext,System.String[])
  parent: System.Activator
  langs:
  - csharp
  name: CreateInstance(ActivationContext, String[])
  nameWithType: Activator.CreateInstance(ActivationContext, String[])
  fullName: Activator.CreateInstance(ActivationContext, String[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates an instance of the type that is designated by the specified <xref href="System.ActivationContext"></xref> object and activated with the specified custom activation data.
  remarks: "Use the <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName> method to unwrap the return value.  \n  \n The activation context is used during manifest-based activation to set up the domain policy and to provide an application-based security model. The <xref:System.ActivationContext> class contains an <xref:System.ApplicationIdentity> object that provides access to the application manifest. For more information, see the <xref:System.Security.Policy.ApplicationSecurityManager> class."
  syntax:
    content: public static System.Runtime.Remoting.ObjectHandle CreateInstance (ActivationContext activationContext, string[] activationCustomData);
    parameters:
    - id: activationContext
      type: System.ActivationContext
      description: An activation context object that specifies the object to create.
    - id: activationCustomData
      type: System.String[]
      description: An array of Unicode strings that contain custom activation data.
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: A handle that must be unwrapped to access the newly created object.
  overload: System.Activator.CreateInstance*
  exceptions: []
  attributes: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Activator.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Activator.CreateInstance(System.Type)
  commentId: M:System.Activator.CreateInstance(System.Type)
  id: CreateInstance(System.Type)
  parent: System.Activator
  langs:
  - csharp
  name: CreateInstance(Type)
  nameWithType: Activator.CreateInstance(Type)
  fullName: Activator.CreateInstance(Type)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Creates an instance of the specified type using that type's default constructor.
  remarks: "The constructor to be invoked must be accessible.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access nonpublic types if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the assembly that contains the nonpublic types is restricted to the caller’s grant set or to a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \n>   \n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later."
  example:
  - "The following code example demonstrates how to call the <xref:System.Activator.CreateInstance%28System.Type%29> method. Instances of several different types are created and their default values are displayed.  \n  \n [!code-cpp[ActivatorX#4](~/samples/snippets/cpp/VS_Snippets_CLR/ActivatorX/cpp/source2.cpp#4)]\n [!code-csharp[ActivatorX#4](~/samples/snippets/csharp/VS_Snippets_CLR/ActivatorX/cs/source2.cs#4)]\n [!code-vb[ActivatorX#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/ActivatorX/VB/source2.vb#4)]"
  syntax:
    content: public static object CreateInstance (Type type);
    parameters:
    - id: type
      type: System.Type
      description: The type of object to create.
    return:
      type: System.Object
      description: A reference to the newly created object.
  overload: System.Activator.CreateInstance*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>type</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>type</code> is not a `RuntimeType`.  \n  \n -or-  \n  \n <code>type</code> is an open generic type (that is, the <xref href=\"System.Type.ContainsGenericParameters\"></xref> property returns `true`)."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>type</code> cannot be a <xref href=\"System.Reflection.Emit.TypeBuilder\"></xref>.  \n  \n -or-  \n  \n Creation of <xref href=\"System.TypedReference\"></xref>, <xref href=\"System.ArgIterator\"></xref>, <xref href=\"System.Void\"></xref>, and <xref href=\"System.RuntimeArgumentHandle\"></xref> types, or arrays of those types, is not supported.  \n  \n -or-  \n  \n The assembly that contains <code>type</code> is a dynamic assembly that was created with <xref href=\"System.Reflection.Emit.AssemblyBuilderAccess.Save\"></xref>."
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: The constructor being called throws an exception.
  - type: System.MethodAccessException
    commentId: T:System.MethodAccessException
    description: "<block subset=\"none\" type=\"note\">\n      <p>  \n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\"System.MemberAccessException\"></xref>, instead.  \n  \n</p>\n    </block>  \n  \n The caller does not have permission to call this constructor."
  - type: System.MemberAccessException
    commentId: T:System.MemberAccessException
    description: Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.
  - type: System.Runtime.InteropServices.InvalidComObjectException
    commentId: T:System.Runtime.InteropServices.InvalidComObjectException
    description: The COM type was not obtained through <xref href="System.Type.GetTypeFromProgID*"></xref> or <xref href="System.Type.GetTypeFromCLSID*"></xref>.
  - type: System.MissingMethodException
    commentId: T:System.MissingMethodException
    description: "<block subset=\"none\" type=\"note\">\n      <p>  \n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\"System.MissingMemberException\"></xref>, instead.  \n  \n</p>\n    </block>  \n  \n No matching public constructor was found."
  - type: System.Runtime.InteropServices.COMException
    commentId: T:System.Runtime.InteropServices.COMException
    description: <code>type</code> is a COM object but the class identifier used to obtain the type is invalid, or the identified class is not registered.
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: <code>type</code> is not a valid type.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Activator.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Activator.CreateInstance(System.ActivationContext)
  commentId: M:System.Activator.CreateInstance(System.ActivationContext)
  id: CreateInstance(System.ActivationContext)
  parent: System.Activator
  langs:
  - csharp
  name: CreateInstance(ActivationContext)
  nameWithType: Activator.CreateInstance(ActivationContext)
  fullName: Activator.CreateInstance(ActivationContext)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates an instance of the type designated by the specified <xref href="System.ActivationContext"></xref> object.
  remarks: "Use the <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName> method to unwrap the return value.  \n  \n The activation context is used during manifest-based activation to set up the domain policy and to provide an application-based security model. The <xref:System.ActivationContext> class contains an <xref:System.ApplicationIdentity> object that provides access to the application manifest. For more information, see the <xref:System.Security.Policy.ApplicationSecurityManager> class."
  syntax:
    content: public static System.Runtime.Remoting.ObjectHandle CreateInstance (ActivationContext activationContext);
    parameters:
    - id: activationContext
      type: System.ActivationContext
      description: An activation context object that specifies the object to create.
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: A handle that must be unwrapped to access the newly created object.
  overload: System.Activator.CreateInstance*
  exceptions: []
  attributes: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Activator.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Activator.CreateInstance(System.AppDomain,System.String,System.String)
  commentId: M:System.Activator.CreateInstance(System.AppDomain,System.String,System.String)
  id: CreateInstance(System.AppDomain,System.String,System.String)
  parent: System.Activator
  langs:
  - csharp
  name: CreateInstance(AppDomain, String, String)
  nameWithType: Activator.CreateInstance(AppDomain, String, String)
  fullName: Activator.CreateInstance(AppDomain, String, String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates an instance of the type whose name is specified in the specified remote domain, using the named assembly and default constructor.
  remarks: "Use <xref:System.Activator.CreateInstance%2A> when a host needs to execute code in an application domain that has restricted security permissions.  \n  \n Use <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName> to unwrap the return value.  \n  \n> [!NOTE]\n>  This method uses <xref:System.Security.Permissions.SecurityAction?displayProperty=fullName> to require the immediate caller to have full trust."
  syntax:
    content: >-
      [System.Security.SecurityCritical]

      public static System.Runtime.Remoting.ObjectHandle CreateInstance (AppDomain domain, string assemblyName, string typeName);
    parameters:
    - id: domain
      type: System.AppDomain
      description: The remote domain where the type named <code>typeName</code> is created.
    - id: assemblyName
      type: System.String
      description: The name of the assembly where the type named <code>typeName</code> is sought. If <code>assemblyName</code> is `null`, the executing assembly is searched.
    - id: typeName
      type: System.String
      description: The fully qualified name of the preferred type.
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: A handle that must be unwrapped to access the newly created instance.
  overload: System.Activator.CreateInstance*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>typeName</code> or <code>domain</code> is `null`.
  - type: System.MissingMethodException
    commentId: T:System.MissingMethodException
    description: No matching public constructor was found.
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: <code>typename</code> was not found in <code>assemblyName</code>.
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: <code>assemblyName</code> was not found.
  - type: System.MethodAccessException
    commentId: T:System.MethodAccessException
    description: The caller does not have permission to call this constructor.
  - type: System.MemberAccessException
    commentId: T:System.MemberAccessException
    description: "Cannot create an instance of an abstract type.  \n  \n -or-  \n  \n This member was invoked with a late-binding mechanism."
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: The constructor, which was invoked through reflection, threw an exception.
  - type: System.Runtime.InteropServices.InvalidComObjectException
    commentId: T:System.Runtime.InteropServices.InvalidComObjectException
    description: The COM type was not obtained through <xref href="System.Type.GetTypeFromProgID*"></xref> or <xref href="System.Type.GetTypeFromCLSID*"></xref>.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: Creation of <xref href="System.TypedReference"></xref>, <xref href="System.ArgIterator"></xref>, <xref href="System.Void"></xref>, and <xref href="System.RuntimeArgumentHandle"></xref> types, or arrays of those types, is not supported.
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "<code>assemblyName</code> is not a valid assembly.  \n  \n -or-  \n  \n The common language runtime (CLR) version 2.0 or later is currently loaded, and <code>assemblyName</code> was compiled for a version of the CLR that is later than the currently loaded version. Note that the .NET Framework versions 2.0, 3.0, and 3.5 all use CLR version 2.0."
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: "An assembly or module was loaded twice with two different evidences.  \n  \n -or-  \n  \n The assembly name or code base is invalid."
  attributes:
  - type: System.Security.SecurityCriticalAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Activator.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Activator.CreateInstance``1
  commentId: M:System.Activator.CreateInstance``1
  id: CreateInstance``1
  parent: System.Activator
  langs:
  - csharp
  name: CreateInstance<T>()
  nameWithType: Activator.CreateInstance<T>()
  fullName: Activator.CreateInstance<T>()
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Creates an instance of the type designated by the specified generic type parameter, using the parameterless constructor.
  remarks: "The <xref:System.Activator.CreateInstance%60%601> generic method is used by compilers to implement the instantiation of types specified by type parameters. For example, in the following generic method, the implementation of `new T()` (`gcnew T()` in C++) uses the <xref:System.Activator.CreateInstance%60%601> generic method.  \n  \n [!code-cpp[System.Activation.CreateInstance~~1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.activation.createinstance~~1/cpp/remarks.cpp#1)]\n [!code-csharp[System.Activation.CreateInstance~~1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.activation.createinstance~~1/cs/remarks.cs#1)]\n [!code-vb[System.Activation.CreateInstance~~1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.activation.createinstance~~1/vb/remarks.vb#1)]  \n  \n In general, there is no use for the <xref:System.Activator.CreateInstance%60%601> generic method in application code, because the type must be known at compile time. If the type is known at compile time, normal instantiation syntax can be used (`new` operator in C#, `New` in Visual Basic, `gcnew` in C++). If the type is not known at compile time, you can call a non-generic overload of <xref:System.Activator.CreateInstance%2A>.  \n  \n There are no overloads of the <xref:System.Activator.CreateInstance%60%601> generic method that take argument lists, because the non-generic overloads of <xref:System.Activator.CreateInstance%2A> already provide late-bound constructor resolution."
  syntax:
    content: public static T CreateInstance<T> ();
    parameters: []
    typeParameters:
    - id: T
      description: The type to create.
    return:
      type: T
      description: A reference to the newly created object.
  overload: System.Activator.CreateInstance``1*
  exceptions:
  - type: System.MissingMethodException
    commentId: T:System.MissingMethodException
    description: "<block subset=\"none\" type=\"note\">\n      <p>  \n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\"System.MissingMemberException\"></xref>, instead.  \n  \n</p>\n    </block>  \n  \n The type that is specified for <code>T</code> does not have a parameterless constructor."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Activator.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Activator.CreateInstanceFrom(System.AppDomain,System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)
  commentId: M:System.Activator.CreateInstanceFrom(System.AppDomain,System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)
  id: CreateInstanceFrom(System.AppDomain,System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)
  parent: System.Activator
  langs:
  - csharp
  name: CreateInstanceFrom(AppDomain, String, String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[], Evidence)
  nameWithType: Activator.CreateInstanceFrom(AppDomain, String, String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[], Evidence)
  fullName: Activator.CreateInstanceFrom(AppDomain, String, String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[], Evidence)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates an instance of the type whose name is specified in the specified remote domain, using the named assembly file and the constructor that best matches the specified parameters.
  remarks: "Use <xref:System.Activator.CreateInstanceFrom%2A> when a host needs to execute code in an application domain that has restricted security permissions.  \n  \n Use the <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName> method to unwrap the return value.  \n  \n> [!NOTE]\n>  This method uses <xref:System.Security.Permissions.SecurityAction?displayProperty=fullName> to require the immediate caller to have full trust.  \n  \n For information about other exceptions that can be thrown by invoked methods, see the Exceptions section of the <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=fullName> and <xref:System.Activator.CreateInstance%2A> methods."
  syntax:
    content: >-
      [System.Obsolete("Methods which use Evidence to sandbox are obsolete and will be removed in a future release of the .NET Framework. Please use an overload of CreateInstanceFrom which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")]

      [System.Security.SecurityCritical]

      public static System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (AppDomain domain, string assemblyFile, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes, System.Security.Policy.Evidence securityAttributes);
    parameters:
    - id: domain
      type: System.AppDomain
      description: The remote domain where the type named <code>typeName</code> is created.
    - id: assemblyFile
      type: System.String
      description: The name of a file that contains an assembly where the type named <code>typeName</code> is sought.
    - id: typeName
      type: System.String
      description: The name of the preferred type.
    - id: ignoreCase
      type: System.Boolean
      description: '`true` to specify that the search for <code>typeName</code> is not case-sensitive; `false` to specify that the search is case-sensitive.'
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: A combination of zero or more bit flags that affect the search for the <code>typeName</code> constructor. If <code>bindingAttr</code> is zero, a case-sensitive search for public constructors is conducted.
    - id: binder
      type: System.Reflection.Binder
      description: An object that uses <code>bindingAttr</code> and <code>args</code> to seek and identify the <code>typeName</code> constructor. If <code>binder</code> is `null`, the default binder is used.
    - id: args
      type: System.Object[]
      description: An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If <code>args</code> is an empty array or `null`, the constructor that takes no parameters (the default constructor) is invoked.
    - id: culture
      type: System.Globalization.CultureInfo
      description: Culture-specific information that governs the coercion of <code>args</code> to the formal types declared for the <code>typeName</code> constructor. If <code>culture</code> is `null`, the <xref href="System.Globalization.CultureInfo"></xref> for the current thread is used.
    - id: activationAttributes
      type: System.Object[]
      description: "An array of one or more attributes that can participate in activation. This is typically an array that contains a single <xref href=\"System.Runtime.Remoting.Activation.UrlAttribute\"></xref> object that specifies the URL that is required to activate a remote object.  \n  \n This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation."
    - id: securityAttributes
      type: System.Security.Policy.Evidence
      description: Information used to make security policy decisions and grant code permissions.
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: A handle that must be unwrapped to access the newly created instance.
  overload: System.Activator.CreateInstanceFrom*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>domain</code> or <code>typeName</code> is `null`.
  - type: System.MissingMethodException
    commentId: T:System.MissingMethodException
    description: No matching constructor was found.
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: <code>typename</code> was not found in <code>assemblyFile</code>.
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: <code>assemblyFile</code> was not found.
  - type: System.MethodAccessException
    commentId: T:System.MethodAccessException
    description: The caller does not have permission to call this constructor.
  - type: System.MemberAccessException
    commentId: T:System.MemberAccessException
    description: Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: The constructor, which was invoked through reflection, threw an exception.
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: The caller does have the required <xref href="System.Security.Permissions.FileIOPermission"></xref>.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: <code>activationAttributes</code> is not an empty array, and the type being created does not derive from <xref href="System.MarshalByRefObject"></xref>.
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "<code>assemblyFile</code> is not a valid assembly.  \n  \n -or-  \n  \n The common language runtime (CLR) version 2.0 or later is currently loaded, and <code>assemblyName</code> was compiled for a version of the CLR that is later than the currently loaded version. Note that the .NET Framework versions 2.0, 3.0, and 3.5 all use CLR version 2.0."
  attributes:
  - type: System.ObsoleteAttribute
  - type: System.Security.SecurityCriticalAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Activator.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Activator.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)
  commentId: M:System.Activator.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)
  id: CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)
  parent: System.Activator
  langs:
  - csharp
  name: CreateInstanceFrom(String, String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[], Evidence)
  nameWithType: Activator.CreateInstanceFrom(String, String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[], Evidence)
  fullName: Activator.CreateInstanceFrom(String, String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[], Evidence)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates an instance of the type whose name is specified, using the named assembly file and the constructor that best matches the specified parameters.
  remarks: "Use the <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName> method to unwrap the return value.  \n  \n For information about other exceptions that can be thrown by invoked methods, see the Exceptions section of the <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=fullName> and <xref:System.Activator.CreateInstance%2A> methods."
  syntax:
    content: >-
      [System.Obsolete("Methods which use evidence to sandbox are obsolete and will be removed in a future release of the .NET Framework. Please use an overload of CreateInstanceFrom which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")]

      public static System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (string assemblyFile, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes, System.Security.Policy.Evidence securityInfo);
    parameters:
    - id: assemblyFile
      type: System.String
      description: The name of a file that contains an assembly where the type named <code>typeName</code> is sought.
    - id: typeName
      type: System.String
      description: The name of the preferred type.
    - id: ignoreCase
      type: System.Boolean
      description: '`true` to specify that the search for <code>typeName</code> is not case-sensitive; `false` to specify that the search is case-sensitive.'
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: A combination of zero or more bit flags that affect the search for the <code>typeName</code> constructor. If <code>bindingAttr</code> is zero, a case-sensitive search for public constructors is conducted.
    - id: binder
      type: System.Reflection.Binder
      description: An object that uses <code>bindingAttr</code> and <code>args</code> to seek and identify the <code>typeName</code> constructor. If <code>binder</code> is `null`, the default binder is used.
    - id: args
      type: System.Object[]
      description: An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If <code>args</code> is an empty array or `null`, the constructor that takes no parameters (the default constructor) is invoked.
    - id: culture
      type: System.Globalization.CultureInfo
      description: Culture-specific information that governs the coercion of <code>args</code> to the formal types declared for the <code>typeName</code> constructor. If <code>culture</code> is `null`, the <xref href="System.Globalization.CultureInfo"></xref> for the current thread is used.
    - id: activationAttributes
      type: System.Object[]
      description: "An array of one or more attributes that can participate in activation. This is typically an array that contains a single <xref href=\"System.Runtime.Remoting.Activation.UrlAttribute\"></xref> object that specifies the URL that is required to activate a remote object.  \n  \n This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation."
    - id: securityInfo
      type: System.Security.Policy.Evidence
      description: Information used to make security policy decisions and grant code permissions.
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: A handle that must be unwrapped to access the newly created instance.
  overload: System.Activator.CreateInstanceFrom*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>typeName</code> is `null`.
  - type: System.MissingMethodException
    commentId: T:System.MissingMethodException
    description: No matching constructor was found.
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: <code>typename</code> was not found in <code>assemblyFile</code>.
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: <code>assemblyFile</code> was not found.
  - type: System.MethodAccessException
    commentId: T:System.MethodAccessException
    description: The caller does not have permission to call this constructor.
  - type: System.MemberAccessException
    commentId: T:System.MemberAccessException
    description: Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: The constructor, which was invoked through reflection, threw an exception.
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: The caller does not have the required <xref href="System.Security.Permissions.FileIOPermission"></xref>.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: <code>activationAttributes</code> is not an empty array, and the type being created does not derive from <xref href="System.MarshalByRefObject"></xref>.
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "<code>assemblyFile</code> is not a valid assembly.  \n  \n -or-  \n  \n The common language runtime (CLR) version 2.0 or later is currently loaded, and <code>assemblyName</code> was compiled for a version of the CLR that is later than the currently loaded version. Note that the .NET Framework versions 2.0, 3.0, and 3.5 all use CLR version 2.0."
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Activator.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Activator.CreateInstanceFrom(System.AppDomain,System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  commentId: M:System.Activator.CreateInstanceFrom(System.AppDomain,System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  id: CreateInstanceFrom(System.AppDomain,System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  parent: System.Activator
  langs:
  - csharp
  name: CreateInstanceFrom(AppDomain, String, String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[])
  nameWithType: Activator.CreateInstanceFrom(AppDomain, String, String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[])
  fullName: Activator.CreateInstanceFrom(AppDomain, String, String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates an instance of the type whose name is specified in the specified remote domain, using the named assembly file and the constructor that best matches the specified parameters.
  remarks: "Use <xref:System.Activator.CreateInstanceFrom%2A> when a host needs to execute code in an application domain that has restricted security permissions.  \n  \n Use the <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName> method to unwrap the return value.  \n  \n For information about other exceptions that can be thrown by invoked methods, see the Exceptions sections of the <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=fullName> and <xref:System.Activator.CreateInstance%2A> methods."
  syntax:
    content: >-
      [System.Security.SecurityCritical]

      public static System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (AppDomain domain, string assemblyFile, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes);
    parameters:
    - id: domain
      type: System.AppDomain
      description: The remote domain where the type named <code>typeName</code> is created.
    - id: assemblyFile
      type: System.String
      description: The name of a file that contains an assembly where the type named <code>typeName</code> is sought.
    - id: typeName
      type: System.String
      description: The name of the preferred type.
    - id: ignoreCase
      type: System.Boolean
      description: '`true` to specify that the search for <code>typeName</code> is not case-sensitive; `false` to specify that the search is case-sensitive.'
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: A combination of zero or more bit flags that affect the search for the <code>typeName</code> constructor. If <code>bindingAttr</code> is zero, a case-sensitive search for public constructors is conducted.
    - id: binder
      type: System.Reflection.Binder
      description: An object that uses <code>bindingAttr</code> and <code>args</code> to seek and identify the <code>typeName</code> constructor. If <code>binder</code> is `null`, the default binder is used.
    - id: args
      type: System.Object[]
      description: An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If <code>args</code> is an empty array or `null`, the constructor that takes no parameters (the default constructor) is invoked.
    - id: culture
      type: System.Globalization.CultureInfo
      description: Culture-specific information that governs the coercion of <code>args</code> to the formal types declared for the <code>typeName</code> constructor. If <code>culture</code> is `null`, the <xref href="System.Globalization.CultureInfo"></xref> for the current thread is used.
    - id: activationAttributes
      type: System.Object[]
      description: "An array of one or more attributes that can participate in activation. This is typically an array that contains a single <xref href=\"System.Runtime.Remoting.Activation.UrlAttribute\"></xref> object that specifies the URL that is required to activate a remote object.  \n  \n This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation."
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: A handle that must be unwrapped to access the newly created instance.
  overload: System.Activator.CreateInstanceFrom*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>domain</code> or <code>typeName</code> is `null`.
  - type: System.MissingMethodException
    commentId: T:System.MissingMethodException
    description: No matching constructor was found.
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: <code>typename</code> was not found in <code>assemblyFile</code>.
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: <code>assemblyFile</code> was not found.
  - type: System.MethodAccessException
    commentId: T:System.MethodAccessException
    description: The caller does not have permission to call this constructor.
  - type: System.MemberAccessException
    commentId: T:System.MemberAccessException
    description: Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: The constructor, which was invoked through reflection, threw an exception.
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: The caller does have the required <xref href="System.Security.Permissions.FileIOPermission"></xref>.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: <code>activationAttributes</code> is not an empty array, and the type being created does not derive from <xref href="System.MarshalByRefObject"></xref>.
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "<code>assemblyFile</code> is not a valid assembly.  \n  \n -or-  \n  \n <code>assemblyName</code> was compiled for a version of the common language runtime that is later than the version that is currently loaded."
  attributes:
  - type: System.Security.SecurityCriticalAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Activator.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Activator.CreateInstanceFrom(System.String,System.String,System.Object[])
  commentId: M:System.Activator.CreateInstanceFrom(System.String,System.String,System.Object[])
  id: CreateInstanceFrom(System.String,System.String,System.Object[])
  parent: System.Activator
  langs:
  - csharp
  name: CreateInstanceFrom(String, String, Object[])
  nameWithType: Activator.CreateInstanceFrom(String, String, Object[])
  fullName: Activator.CreateInstanceFrom(String, String, Object[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates an instance of the type whose name is specified, using the named assembly file and default constructor.
  remarks: "Use the <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName> method to unwrap the return value.  \n  \n For information about other exceptions that can be thrown by invoked methods, see the Exceptions section of the <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=fullName> and <xref:System.Activator.CreateInstance%2A> methods."
  syntax:
    content: public static System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (string assemblyFile, string typeName, object[] activationAttributes);
    parameters:
    - id: assemblyFile
      type: System.String
      description: The name of a file that contains an assembly where the type named <code>typeName</code> is sought.
    - id: typeName
      type: System.String
      description: The name of the preferred type.
    - id: activationAttributes
      type: System.Object[]
      description: "An array of one or more attributes that can participate in activation. This is typically an array that contains a single <xref href=\"System.Runtime.Remoting.Activation.UrlAttribute\"></xref> object that specifies the URL that is required to activate a remote object.  \n  \n This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation."
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: A handle that must be unwrapped to access the newly created instance.
  overload: System.Activator.CreateInstanceFrom*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>typeName</code> is `null`.
  - type: System.MissingMethodException
    commentId: T:System.MissingMethodException
    description: No matching public constructor was found.
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: <code>typename</code> was not found in <code>assemblyFile</code>.
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: <code>assemblyFile</code> was not found.
  - type: System.MethodAccessException
    commentId: T:System.MethodAccessException
    description: The caller does not have permission to call this constructor.
  - type: System.MemberAccessException
    commentId: T:System.MemberAccessException
    description: Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: The constructor, which was invoked through reflection, threw an exception.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: <code>activationAttributes</code> is not an empty array, and the type being created does not derive from <xref href="System.MarshalByRefObject"></xref>.
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: The caller does have the required <xref href="System.Security.Permissions.FileIOPermission"></xref>.
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "<code>assemblyFile</code> is not a valid assembly.  \n  \n -or-  \n  \n The common language runtime (CLR) version 2.0 or later is currently loaded, and <code>assemblyName</code> was compiled for a version of the CLR that is later than the currently loaded version. Note that the .NET Framework versions 2.0, 3.0, and 3.5 all use CLR version 2.0."
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Activator.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Activator.CreateInstanceFrom(System.AppDomain,System.String,System.String)
  commentId: M:System.Activator.CreateInstanceFrom(System.AppDomain,System.String,System.String)
  id: CreateInstanceFrom(System.AppDomain,System.String,System.String)
  parent: System.Activator
  langs:
  - csharp
  name: CreateInstanceFrom(AppDomain, String, String)
  nameWithType: Activator.CreateInstanceFrom(AppDomain, String, String)
  fullName: Activator.CreateInstanceFrom(AppDomain, String, String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates an instance of the type whose name is specified in the specified remote domain, using the named assembly file and default constructor.
  remarks: "Use <xref:System.Activator.CreateInstanceFrom%2A> when a host needs to execute code in an application domain that has restricted security permissions.  \n  \n Use the <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName> method to unwrap the return value.  \n  \n> [!NOTE]\n>  This method uses <xref:System.Security.Permissions.SecurityAction?displayProperty=fullName> to require the immediate caller to have full trust.  \n  \n For information about other exceptions that can be thrown by invoked methods, see the Exceptions section of the <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=fullName> and <xref:System.Activator.CreateInstance%2A> methods."
  syntax:
    content: >-
      [System.Security.SecurityCritical]

      public static System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (AppDomain domain, string assemblyFile, string typeName);
    parameters:
    - id: domain
      type: System.AppDomain
      description: The remote domain where the type named <code>typeName</code> is created.
    - id: assemblyFile
      type: System.String
      description: The name of a file that contains an assembly where the type named <code>typeName</code> is sought.
    - id: typeName
      type: System.String
      description: The name of the preferred type.
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: A handle that must be unwrapped to access the newly created instance.
  overload: System.Activator.CreateInstanceFrom*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>domain</code> or <code>typeName</code> is `null`.
  - type: System.MissingMethodException
    commentId: T:System.MissingMethodException
    description: No matching public constructor was found.
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: <code>typename</code> was not found in <code>assemblyFile</code>.
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: <code>assemblyFile</code> was not found.
  - type: System.MethodAccessException
    commentId: T:System.MethodAccessException
    description: The caller does not have permission to call this constructor.
  - type: System.MemberAccessException
    commentId: T:System.MemberAccessException
    description: Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: The constructor, which was invoked through reflection, threw an exception.
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: The caller does have the required <xref href="System.Security.Permissions.FileIOPermission"></xref>.
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "<code>assemblyFile</code> is not a valid assembly.  \n  \n -or-  \n  \n The common language runtime (CLR) version 2.0 or later is currently loaded, and <code>assemblyName</code> was compiled for a version of the CLR that is later than the currently loaded version. Note that the .NET Framework versions 2.0, 3.0, and 3.5 all use CLR version 2.0."
  attributes:
  - type: System.Security.SecurityCriticalAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Activator.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Activator.CreateInstanceFrom(System.String,System.String)
  commentId: M:System.Activator.CreateInstanceFrom(System.String,System.String)
  id: CreateInstanceFrom(System.String,System.String)
  parent: System.Activator
  langs:
  - csharp
  name: CreateInstanceFrom(String, String)
  nameWithType: Activator.CreateInstanceFrom(String, String)
  fullName: Activator.CreateInstanceFrom(String, String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates an instance of the type whose name is specified, using the named assembly file and default constructor.
  remarks: "Use the <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName> method to unwrap the return value.  \n  \n For information about other exceptions that can be thrown by invoked methods, see the Exceptions section of the <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=fullName> and <xref:System.Activator.CreateInstance%2A> methods."
  example:
  - "The following code example demonstrates how to call the <xref:System.Activator.CreateInstanceFrom%2A> method. This code example is part of a larger example provided for the <xref:System.Activator> class.  \n  \n [!code-cpp[ActivatorX#3](~/samples/snippets/cpp/VS_Snippets_CLR/ActivatorX/cpp/ActivatorX.cpp#3)]\n [!code-csharp[ActivatorX#3](~/samples/snippets/csharp/VS_Snippets_CLR/ActivatorX/cs/ActivatorX.cs#3)]\n [!code-vb[ActivatorX#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/ActivatorX/VB/ActivatorX.vb#3)]"
  syntax:
    content: public static System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (string assemblyFile, string typeName);
    parameters:
    - id: assemblyFile
      type: System.String
      description: The name of a file that contains an assembly where the type named <code>typeName</code> is sought.
    - id: typeName
      type: System.String
      description: The name of the preferred type.
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: A handle that must be unwrapped to access the newly created instance.
  overload: System.Activator.CreateInstanceFrom*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>typeName</code> is `null`.
  - type: System.MissingMethodException
    commentId: T:System.MissingMethodException
    description: No matching public constructor was found.
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: <code>typename</code> was not found in <code>assemblyFile</code>.
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: <code>assemblyFile</code> was not found.
  - type: System.MethodAccessException
    commentId: T:System.MethodAccessException
    description: The caller does not have permission to call this constructor.
  - type: System.MemberAccessException
    commentId: T:System.MemberAccessException
    description: Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: The constructor, which was invoked through reflection, threw an exception.
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: The caller does have the required <xref href="System.Security.Permissions.FileIOPermission"></xref>.
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "<code>assemblyFile</code> is not a valid assembly.  \n  \n -or-  \n  \n The common language runtime (CLR) version 2.0 or later is currently loaded, and <code>assemblyName</code> was compiled for a version of the CLR that is later than the currently loaded version. Note that the .NET Framework versions 2.0, 3.0, and 3.5 all use CLR version 2.0."
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Activator.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Activator.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  commentId: M:System.Activator.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  id: CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  parent: System.Activator
  langs:
  - csharp
  name: CreateInstanceFrom(String, String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[])
  nameWithType: Activator.CreateInstanceFrom(String, String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[])
  fullName: Activator.CreateInstanceFrom(String, String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates an instance of the type whose name is specified, using the named assembly file and the constructor that best matches the specified parameters.
  remarks: "Use the <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName> method to unwrap the return value.  \n  \n For information about other exceptions that can be thrown by invoked methods, see the Exceptions section of the <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=fullName> and <xref:System.Activator.CreateInstance%2A> methods."
  syntax:
    content: public static System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (string assemblyFile, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes);
    parameters:
    - id: assemblyFile
      type: System.String
      description: The name of a file that contains an assembly where the type named <code>typeName</code> is sought.
    - id: typeName
      type: System.String
      description: The name of the preferred type.
    - id: ignoreCase
      type: System.Boolean
      description: '`true` to specify that the search for <code>typeName</code> is not case-sensitive; `false` to specify that the search is case-sensitive.'
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: A combination of zero or more bit flags that affect the search for the <code>typeName</code> constructor. If <code>bindingAttr</code> is zero, a case-sensitive search for public constructors is conducted.
    - id: binder
      type: System.Reflection.Binder
      description: An object that uses <code>bindingAttr</code> and <code>args</code> to seek and identify the <code>typeName</code> constructor. If <code>binder</code> is `null`, the default binder is used.
    - id: args
      type: System.Object[]
      description: An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If <code>args</code> is an empty array or `null`, the constructor that takes no parameters (the default constructor) is invoked.
    - id: culture
      type: System.Globalization.CultureInfo
      description: Culture-specific information that governs the coercion of <code>args</code> to the formal types declared for the <code>typeName</code> constructor. If <code>culture</code> is `null`, the <xref href="System.Globalization.CultureInfo"></xref> for the current thread is used.
    - id: activationAttributes
      type: System.Object[]
      description: "An array of one or more attributes that can participate in activation. This is typically an array that contains a single <xref href=\"System.Runtime.Remoting.Activation.UrlAttribute\"></xref> object that specifies the URL that is required to activate a remote object.  \n  \n This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation."
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: A handle that must be unwrapped to access the newly created instance.
  overload: System.Activator.CreateInstanceFrom*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>typeName</code> is `null`.
  - type: System.MissingMethodException
    commentId: T:System.MissingMethodException
    description: No matching constructor was found.
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: <code>typename</code> was not found in <code>assemblyFile</code>.
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: <code>assemblyFile</code> was not found.
  - type: System.MethodAccessException
    commentId: T:System.MethodAccessException
    description: The caller does not have permission to call this constructor.
  - type: System.MemberAccessException
    commentId: T:System.MemberAccessException
    description: Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: The constructor, which was invoked through reflection, threw an exception.
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: The caller does not have the required <xref href="System.Security.Permissions.FileIOPermission"></xref>.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: <code>activationAttributes</code> is not an empty array, and the type being created does not derive from <xref href="System.MarshalByRefObject"></xref>.
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "<code>assemblyFile</code> is not a valid assembly.  \n  \n -or-  \n  \n The common language runtime (CLR) version 2.0 or later is currently loaded, and <code>assemblyName</code> was compiled for a version of the CLR that is later than the currently loaded version. Note that the .NET Framework versions 2.0, 3.0, and 3.5 all use CLR version 2.0."
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Activator.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Activator.GetObject(System.Type,System.String)
  commentId: M:System.Activator.GetObject(System.Type,System.String)
  id: GetObject(System.Type,System.String)
  parent: System.Activator
  langs:
  - csharp
  name: GetObject(Type, String)
  nameWithType: Activator.GetObject(Type, String)
  fullName: Activator.GetObject(Type, String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates a proxy for the well-known object indicated by the specified type and URL.
  remarks: Call the proxy to send messages to the remote object. No messages are sent over the network until a method is called on the proxy.
  syntax:
    content: >-
      [System.Security.SecurityCritical]

      public static object GetObject (Type type, string url);
    parameters:
    - id: type
      type: System.Type
      description: The type of the well-known object to which you want to connect.
    - id: url
      type: System.String
      description: The URL of the well-known object.
    return:
      type: System.Object
      description: A proxy that points to an endpoint served by the requested well-known object.
  overload: System.Activator.GetObject*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>type</code> or <code>url</code> is `null`.
  - type: System.Runtime.Remoting.RemotingException
    commentId: T:System.Runtime.Remoting.RemotingException
    description: <code>type</code> is not marshaled by reference and is not an interface.
  - type: System.MemberAccessException
    commentId: T:System.MemberAccessException
    description: This member was invoked with a late-binding mechanism.
  attributes:
  - type: System.Security.SecurityCriticalAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Activator.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Activator.GetObject(System.Type,System.String,System.Object)
  commentId: M:System.Activator.GetObject(System.Type,System.String,System.Object)
  id: GetObject(System.Type,System.String,System.Object)
  parent: System.Activator
  langs:
  - csharp
  name: GetObject(Type, String, Object)
  nameWithType: Activator.GetObject(Type, String, Object)
  fullName: Activator.GetObject(Type, String, Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates a proxy for the well-known object indicated by the specified type, URL, and channel data.
  remarks: "Call the proxy to send messages to the remote object. No messages are sent over the network until a method is called on the proxy.  \n  \n The `state` parameter communicates information to the channel, and is passed to the <xref:System.Runtime.Remoting.Channels.IChannelSender.CreateMessageSink%2A?displayProperty=fullName> method."
  syntax:
    content: >-
      [System.Security.SecurityCritical]

      public static object GetObject (Type type, string url, object state);
    parameters:
    - id: type
      type: System.Type
      description: The type of the well-known object to which you want to connect.
    - id: url
      type: System.String
      description: The URL of the well-known object.
    - id: state
      type: System.Object
      description: Channel-specific data or `null`.
    return:
      type: System.Object
      description: A proxy that points to an endpoint served by the requested well-known object.
  overload: System.Activator.GetObject*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>type</code> or <code>url</code> is `null`.
  - type: System.Runtime.Remoting.RemotingException
    commentId: T:System.Runtime.Remoting.RemotingException
    description: <code>type</code> is not marshaled by reference and is not an interface.
  - type: System.MemberAccessException
    commentId: T:System.MemberAccessException
    description: This member was invoked with a late-binding mechanism.
  attributes:
  - type: System.Security.SecurityCriticalAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Activator.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Activator.System#Runtime#InteropServices#_Activator#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  commentId: M:System.Activator.System#Runtime#InteropServices#_Activator#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  id: System#Runtime#InteropServices#_Activator#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  isEii: true
  parent: System.Activator
  langs:
  - csharp
  name: _Activator.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
  nameWithType: Activator._Activator.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
  fullName: Activator._Activator.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Maps a set of names to a corresponding set of dispatch identifiers.
  remarks: This method is used to access managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.
  syntax:
    content: void _Activator.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
    parameters:
    - id: riid
      type: System.Guid
      description: Reserved for future use. Must be IID_NULL.
    - id: rgszNames
      type: System.IntPtr
      description: The passed-in array of names to map.
    - id: cNames
      type: System.UInt32
      description: The count of the names to map.
    - id: lcid
      type: System.UInt32
      description: The locale context in which to interpret the names.
    - id: rgDispId
      type: System.IntPtr
      description: The caller-allocated array that receives the IDs corresponding to the names.
  overload: System.Activator.System#Runtime#InteropServices#_Activator#GetIDsOfNames*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Activator.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Activator.System#Runtime#InteropServices#_Activator#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  commentId: M:System.Activator.System#Runtime#InteropServices#_Activator#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  id: System#Runtime#InteropServices#_Activator#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  isEii: true
  parent: System.Activator
  langs:
  - csharp
  name: _Activator.GetTypeInfo(UInt32, UInt32, IntPtr)
  nameWithType: Activator._Activator.GetTypeInfo(UInt32, UInt32, IntPtr)
  fullName: Activator._Activator.GetTypeInfo(UInt32, UInt32, IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Retrieves the type information for an object, which can then be used to get the type information for an interface.
  remarks: This method is used to access managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.
  syntax:
    content: void _Activator.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);
    parameters:
    - id: iTInfo
      type: System.UInt32
      description: The type information to return.
    - id: lcid
      type: System.UInt32
      description: The locale identifier for the type information.
    - id: ppTInfo
      type: System.IntPtr
      description: An object that receives a pointer to the requested type information object.
  overload: System.Activator.System#Runtime#InteropServices#_Activator#GetTypeInfo*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Activator.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Activator.System#Runtime#InteropServices#_Activator#GetTypeInfoCount(System.UInt32@)
  commentId: M:System.Activator.System#Runtime#InteropServices#_Activator#GetTypeInfoCount(System.UInt32@)
  id: System#Runtime#InteropServices#_Activator#GetTypeInfoCount(System.UInt32@)
  isEii: true
  parent: System.Activator
  langs:
  - csharp
  name: _Activator.GetTypeInfoCount(UInt32)
  nameWithType: Activator._Activator.GetTypeInfoCount(UInt32)
  fullName: Activator._Activator.GetTypeInfoCount(UInt32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Retrieves the number of type information interfaces that an object provides (either 0 or 1).
  remarks: This method is used to access managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.
  syntax:
    content: void _Activator.GetTypeInfoCount (out uint pcTInfo);
    parameters:
    - id: pcTInfo
      type: System.UInt32
      description: When this method returns, contains a pointer to a location that receives the number of type information interfaces provided by the object. This parameter is passed uninitialized.
  overload: System.Activator.System#Runtime#InteropServices#_Activator#GetTypeInfoCount*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Activator.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Activator.System#Runtime#InteropServices#_Activator#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  commentId: M:System.Activator.System#Runtime#InteropServices#_Activator#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  id: System#Runtime#InteropServices#_Activator#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  isEii: true
  parent: System.Activator
  langs:
  - csharp
  name: _Activator.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
  nameWithType: Activator._Activator.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
  fullName: Activator._Activator.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Provides access to properties and methods exposed by an object.
  remarks: This method is used to access managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.
  syntax:
    content: void _Activator.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
    parameters:
    - id: dispIdMember
      type: System.UInt32
      description: A dispatch identifier that identifies the member.
    - id: riid
      type: System.Guid
      description: Reserved for future use. Must be IID_NULL.
    - id: lcid
      type: System.UInt32
      description: The locale context in which to interpret arguments.
    - id: wFlags
      type: System.Int16
      description: Flags describing the context of the call.
    - id: pDispParams
      type: System.IntPtr
      description: A pointer to a structure that contains an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.
    - id: pVarResult
      type: System.IntPtr
      description: A pointer to the location where the result is to be stored.
    - id: pExcepInfo
      type: System.IntPtr
      description: A pointer to a structure that contains exception information.
    - id: puArgErr
      type: System.IntPtr
      description: The index of the first argument that has an error.
  overload: System.Activator.System#Runtime#InteropServices#_Activator#Invoke*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Activator.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.TypeLoadException
  parent: System
  isExternal: false
  name: TypeLoadException
  nameWithType: TypeLoadException
  fullName: System.TypeLoadException
- uid: System.MissingMethodException
  parent: System
  isExternal: false
  name: MissingMethodException
  nameWithType: MissingMethodException
  fullName: System.MissingMethodException
- uid: System.IO.FileNotFoundException
  parent: System.IO
  isExternal: false
  name: FileNotFoundException
  nameWithType: FileNotFoundException
  fullName: System.IO.FileNotFoundException
- uid: System.MemberAccessException
  parent: System
  isExternal: false
  name: MemberAccessException
  nameWithType: MemberAccessException
  fullName: System.MemberAccessException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.IO.PathTooLongException
  parent: System.IO
  isExternal: false
  name: PathTooLongException
  nameWithType: PathTooLongException
  fullName: System.IO.PathTooLongException
- uid: System.IO.FileLoadException
  parent: System.IO
  isExternal: false
  name: FileLoadException
  nameWithType: FileLoadException
  fullName: System.IO.FileLoadException
- uid: System.BadImageFormatException
  parent: System
  isExternal: false
  name: BadImageFormatException
  nameWithType: BadImageFormatException
  fullName: System.BadImageFormatException
- uid: System.Security.SecurityException
  parent: System.Security
  isExternal: false
  name: SecurityException
  nameWithType: SecurityException
  fullName: System.Security.SecurityException
- uid: System.MethodAccessException
  parent: System
  isExternal: false
  name: MethodAccessException
  nameWithType: MethodAccessException
  fullName: System.MethodAccessException
- uid: System.Reflection.TargetInvocationException
  parent: System.Reflection
  isExternal: false
  name: TargetInvocationException
  nameWithType: TargetInvocationException
  fullName: System.Reflection.TargetInvocationException
- uid: System.Runtime.InteropServices.InvalidComObjectException
  parent: System.Runtime.InteropServices
  isExternal: false
  name: InvalidComObjectException
  nameWithType: InvalidComObjectException
  fullName: System.Runtime.InteropServices.InvalidComObjectException
- uid: System.Runtime.InteropServices.COMException
  parent: System.Runtime.InteropServices
  isExternal: false
  name: COMException
  nameWithType: COMException
  fullName: System.Runtime.InteropServices.COMException
- uid: System.Runtime.Remoting.RemotingException
  parent: System.Runtime.Remoting
  isExternal: false
  name: RemotingException
  nameWithType: RemotingException
  fullName: System.Runtime.Remoting.RemotingException
- uid: System.NotImplementedException
  parent: System
  isExternal: false
  name: NotImplementedException
  nameWithType: NotImplementedException
  fullName: System.NotImplementedException
- uid: System.Activator.CreateComInstanceFrom(System.String,System.String)
  parent: System.Activator
  isExternal: false
  name: CreateComInstanceFrom(String, String)
  nameWithType: Activator.CreateComInstanceFrom(String, String)
  fullName: Activator.CreateComInstanceFrom(String, String)
- uid: System.Runtime.Remoting.ObjectHandle
  parent: System.Runtime.Remoting
  isExternal: false
  name: ObjectHandle
  nameWithType: ObjectHandle
  fullName: System.Runtime.Remoting.ObjectHandle
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Activator.CreateComInstanceFrom(System.String,System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)
  parent: System.Activator
  isExternal: false
  name: CreateComInstanceFrom(String, String, Byte[], AssemblyHashAlgorithm)
  nameWithType: Activator.CreateComInstanceFrom(String, String, Byte[], AssemblyHashAlgorithm)
  fullName: Activator.CreateComInstanceFrom(String, String, Byte[], AssemblyHashAlgorithm)
- uid: System.Byte
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Byte[]
  parent: System
  isExternal: false
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Configuration.Assemblies.AssemblyHashAlgorithm
  parent: System.Configuration.Assemblies
  isExternal: false
  name: AssemblyHashAlgorithm
  nameWithType: AssemblyHashAlgorithm
  fullName: System.Configuration.Assemblies.AssemblyHashAlgorithm
- uid: System.Activator.CreateInstance(System.AppDomain,System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)
  parent: System.Activator
  isExternal: false
  name: CreateInstance(AppDomain, String, String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[], Evidence)
  nameWithType: Activator.CreateInstance(AppDomain, String, String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[], Evidence)
  fullName: Activator.CreateInstance(AppDomain, String, String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[], Evidence)
- uid: System.AppDomain
  parent: System
  isExternal: false
  name: AppDomain
  nameWithType: AppDomain
  fullName: System.AppDomain
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.Binder
  parent: System.Reflection
  isExternal: false
  name: Binder
  nameWithType: Binder
  fullName: System.Reflection.Binder
- uid: System.Object[]
  parent: System
  isExternal: false
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: false
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Security.Policy.Evidence
  parent: System.Security.Policy
  isExternal: false
  name: Evidence
  nameWithType: Evidence
  fullName: System.Security.Policy.Evidence
- uid: System.Activator.CreateInstance(System.AppDomain,System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  parent: System.Activator
  isExternal: false
  name: CreateInstance(AppDomain, String, String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[])
  nameWithType: Activator.CreateInstance(AppDomain, String, String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[])
  fullName: Activator.CreateInstance(AppDomain, String, String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[])
- uid: System.Activator.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  parent: System.Activator
  isExternal: false
  name: CreateInstance(String, String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[])
  nameWithType: Activator.CreateInstance(String, String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[])
  fullName: Activator.CreateInstance(String, String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[])
- uid: System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  parent: System.Activator
  isExternal: false
  name: CreateInstance(Type, BindingFlags, Binder, Object[], CultureInfo, Object[])
  nameWithType: Activator.CreateInstance(Type, BindingFlags, Binder, Object[], CultureInfo, Object[])
  fullName: Activator.CreateInstance(Type, BindingFlags, Binder, Object[], CultureInfo, Object[])
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)
  parent: System.Activator
  isExternal: false
  name: CreateInstance(Type, BindingFlags, Binder, Object[], CultureInfo)
  nameWithType: Activator.CreateInstance(Type, BindingFlags, Binder, Object[], CultureInfo)
  fullName: Activator.CreateInstance(Type, BindingFlags, Binder, Object[], CultureInfo)
- uid: System.Activator.CreateInstance(System.Type,System.Object[],System.Object[])
  parent: System.Activator
  isExternal: false
  name: CreateInstance(Type, Object[], Object[])
  nameWithType: Activator.CreateInstance(Type, Object[], Object[])
  fullName: Activator.CreateInstance(Type, Object[], Object[])
- uid: System.Activator.CreateInstance(System.String,System.String,System.Object[])
  parent: System.Activator
  isExternal: false
  name: CreateInstance(String, String, Object[])
  nameWithType: Activator.CreateInstance(String, String, Object[])
  fullName: Activator.CreateInstance(String, String, Object[])
- uid: System.Activator.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)
  parent: System.Activator
  isExternal: false
  name: CreateInstance(String, String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[], Evidence)
  nameWithType: Activator.CreateInstance(String, String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[], Evidence)
  fullName: Activator.CreateInstance(String, String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[], Evidence)
- uid: System.Activator.CreateInstance(System.Type,System.Object[])
  parent: System.Activator
  isExternal: false
  name: CreateInstance(Type, Object[])
  nameWithType: Activator.CreateInstance(Type, Object[])
  fullName: Activator.CreateInstance(Type, Object[])
- uid: System.Activator.CreateInstance(System.Type,System.Boolean)
  parent: System.Activator
  isExternal: false
  name: CreateInstance(Type, Boolean)
  nameWithType: Activator.CreateInstance(Type, Boolean)
  fullName: Activator.CreateInstance(Type, Boolean)
- uid: System.Activator.CreateInstance(System.String,System.String)
  parent: System.Activator
  isExternal: false
  name: CreateInstance(String, String)
  nameWithType: Activator.CreateInstance(String, String)
  fullName: Activator.CreateInstance(String, String)
- uid: System.Activator.CreateInstance(System.ActivationContext,System.String[])
  parent: System.Activator
  isExternal: false
  name: CreateInstance(ActivationContext, String[])
  nameWithType: Activator.CreateInstance(ActivationContext, String[])
  fullName: Activator.CreateInstance(ActivationContext, String[])
- uid: System.ActivationContext
  parent: System
  isExternal: false
  name: ActivationContext
  nameWithType: ActivationContext
  fullName: System.ActivationContext
- uid: System.String[]
  parent: System
  isExternal: false
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Activator.CreateInstance(System.Type)
  parent: System.Activator
  isExternal: false
  name: CreateInstance(Type)
  nameWithType: Activator.CreateInstance(Type)
  fullName: Activator.CreateInstance(Type)
- uid: System.Activator.CreateInstance(System.ActivationContext)
  parent: System.Activator
  isExternal: false
  name: CreateInstance(ActivationContext)
  nameWithType: Activator.CreateInstance(ActivationContext)
  fullName: Activator.CreateInstance(ActivationContext)
- uid: System.Activator.CreateInstance(System.AppDomain,System.String,System.String)
  parent: System.Activator
  isExternal: false
  name: CreateInstance(AppDomain, String, String)
  nameWithType: Activator.CreateInstance(AppDomain, String, String)
  fullName: Activator.CreateInstance(AppDomain, String, String)
- uid: System.Activator.CreateInstance``1
  parent: System.Activator
  isExternal: false
  name: CreateInstance<T>()
  nameWithType: Activator.CreateInstance<T>()
  fullName: Activator.CreateInstance<T>()
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Activator.CreateInstanceFrom(System.AppDomain,System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)
  parent: System.Activator
  isExternal: false
  name: CreateInstanceFrom(AppDomain, String, String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[], Evidence)
  nameWithType: Activator.CreateInstanceFrom(AppDomain, String, String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[], Evidence)
  fullName: Activator.CreateInstanceFrom(AppDomain, String, String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[], Evidence)
- uid: System.Activator.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)
  parent: System.Activator
  isExternal: false
  name: CreateInstanceFrom(String, String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[], Evidence)
  nameWithType: Activator.CreateInstanceFrom(String, String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[], Evidence)
  fullName: Activator.CreateInstanceFrom(String, String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[], Evidence)
- uid: System.Activator.CreateInstanceFrom(System.AppDomain,System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  parent: System.Activator
  isExternal: false
  name: CreateInstanceFrom(AppDomain, String, String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[])
  nameWithType: Activator.CreateInstanceFrom(AppDomain, String, String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[])
  fullName: Activator.CreateInstanceFrom(AppDomain, String, String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[])
- uid: System.Activator.CreateInstanceFrom(System.String,System.String,System.Object[])
  parent: System.Activator
  isExternal: false
  name: CreateInstanceFrom(String, String, Object[])
  nameWithType: Activator.CreateInstanceFrom(String, String, Object[])
  fullName: Activator.CreateInstanceFrom(String, String, Object[])
- uid: System.Activator.CreateInstanceFrom(System.AppDomain,System.String,System.String)
  parent: System.Activator
  isExternal: false
  name: CreateInstanceFrom(AppDomain, String, String)
  nameWithType: Activator.CreateInstanceFrom(AppDomain, String, String)
  fullName: Activator.CreateInstanceFrom(AppDomain, String, String)
- uid: System.Activator.CreateInstanceFrom(System.String,System.String)
  parent: System.Activator
  isExternal: false
  name: CreateInstanceFrom(String, String)
  nameWithType: Activator.CreateInstanceFrom(String, String)
  fullName: Activator.CreateInstanceFrom(String, String)
- uid: System.Activator.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  parent: System.Activator
  isExternal: false
  name: CreateInstanceFrom(String, String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[])
  nameWithType: Activator.CreateInstanceFrom(String, String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[])
  fullName: Activator.CreateInstanceFrom(String, String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[])
- uid: System.Activator.GetObject(System.Type,System.String)
  parent: System.Activator
  isExternal: false
  name: GetObject(Type, String)
  nameWithType: Activator.GetObject(Type, String)
  fullName: Activator.GetObject(Type, String)
- uid: System.Activator.GetObject(System.Type,System.String,System.Object)
  parent: System.Activator
  isExternal: false
  name: GetObject(Type, String, Object)
  nameWithType: Activator.GetObject(Type, String, Object)
  fullName: Activator.GetObject(Type, String, Object)
- uid: System.Activator.System#Runtime#InteropServices#_Activator#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  parent: System.Activator
  isExternal: false
  name: _Activator.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
  nameWithType: Activator._Activator.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
  fullName: Activator._Activator.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
- uid: System.Guid
  parent: System
  isExternal: false
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Activator.System#Runtime#InteropServices#_Activator#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  parent: System.Activator
  isExternal: false
  name: _Activator.GetTypeInfo(UInt32, UInt32, IntPtr)
  nameWithType: Activator._Activator.GetTypeInfo(UInt32, UInt32, IntPtr)
  fullName: Activator._Activator.GetTypeInfo(UInt32, UInt32, IntPtr)
- uid: System.Activator.System#Runtime#InteropServices#_Activator#GetTypeInfoCount(System.UInt32@)
  parent: System.Activator
  isExternal: false
  name: _Activator.GetTypeInfoCount(UInt32)
  nameWithType: Activator._Activator.GetTypeInfoCount(UInt32)
  fullName: Activator._Activator.GetTypeInfoCount(UInt32)
- uid: System.Activator.System#Runtime#InteropServices#_Activator#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  parent: System.Activator
  isExternal: false
  name: _Activator.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
  nameWithType: Activator._Activator.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
  fullName: Activator._Activator.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Activator.CreateComInstanceFrom*
  parent: System.Activator
  isExternal: false
  name: CreateComInstanceFrom
  nameWithType: Activator.CreateComInstanceFrom
  fullName: Activator.CreateComInstanceFrom
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Activator.xml
- uid: System.Activator.CreateInstance*
  parent: System.Activator
  isExternal: false
  name: CreateInstance
  nameWithType: Activator.CreateInstance
  fullName: Activator.CreateInstance
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  - netcore-2.0
  - netstandard-2.0
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Activator.xml
- uid: System.Activator.CreateInstance``1*
  parent: System.Activator
  isExternal: false
  name: CreateInstance<T>
  nameWithType: Activator.CreateInstance<T>
  fullName: Activator.CreateInstance<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Activator.xml
- uid: System.Activator.CreateInstanceFrom*
  parent: System.Activator
  isExternal: false
  name: CreateInstanceFrom
  nameWithType: Activator.CreateInstanceFrom
  fullName: Activator.CreateInstanceFrom
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Activator.xml
- uid: System.Activator.GetObject*
  parent: System.Activator
  isExternal: false
  name: GetObject
  nameWithType: Activator.GetObject
  fullName: Activator.GetObject
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Activator.xml
- uid: System.Activator.System#Runtime#InteropServices#_Activator#GetIDsOfNames*
  parent: System.Activator
  isExternal: false
  name: System.Runtime.InteropServices._Activator.GetIDsOfNames
  nameWithType: Activator.System.Runtime.InteropServices._Activator.GetIDsOfNames
  fullName: Activator.System.Runtime.InteropServices._Activator.GetIDsOfNames
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Activator.xml
- uid: System.Activator.System#Runtime#InteropServices#_Activator#GetTypeInfo*
  parent: System.Activator
  isExternal: false
  name: System.Runtime.InteropServices._Activator.GetTypeInfo
  nameWithType: Activator.System.Runtime.InteropServices._Activator.GetTypeInfo
  fullName: Activator.System.Runtime.InteropServices._Activator.GetTypeInfo
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Activator.xml
- uid: System.Activator.System#Runtime#InteropServices#_Activator#GetTypeInfoCount*
  parent: System.Activator
  isExternal: false
  name: System.Runtime.InteropServices._Activator.GetTypeInfoCount
  nameWithType: Activator.System.Runtime.InteropServices._Activator.GetTypeInfoCount
  fullName: Activator.System.Runtime.InteropServices._Activator.GetTypeInfoCount
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Activator.xml
- uid: System.Activator.System#Runtime#InteropServices#_Activator#Invoke*
  parent: System.Activator
  isExternal: false
  name: System.Runtime.InteropServices._Activator.Invoke
  nameWithType: Activator.System.Runtime.InteropServices._Activator.Invoke
  fullName: Activator.System.Runtime.InteropServices._Activator.Invoke
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Activator.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
- uid: System.Runtime.InteropServices._Activator
  parent: System.Runtime.InteropServices
  isExternal: false
  name: _Activator
  nameWithType: _Activator
  fullName: System.Runtime.InteropServices._Activator
