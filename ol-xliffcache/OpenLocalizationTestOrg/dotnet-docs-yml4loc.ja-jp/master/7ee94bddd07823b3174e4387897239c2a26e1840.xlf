<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7ee94bddd07823b3174e4387897239c2a26e1840</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Runtime.InteropServices.DllImportAttribute.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0abc55782210d36ccaef9499063978137aba5112</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d3cf7ba3eb6ef6a8bda41704b303693bbf15f979</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Indicates that the attributed method is exposed by an unmanaged dynamic-link library (DLL) as a static entry point.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can apply this attribute to methods.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> attribute provides the information needed to call a function exported from an unmanaged DLL.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>As a minimum requirement, you must supply the name of the DLL containing the entry point.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>You apply this attribute directly to C# and C++ method definitions; however, the Visual Basic compiler emits this attribute when you use the <ph id="ph1">`Declare`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>For complex method definitions that include <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph>, <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention&gt;</ph>, <ph id="ph3">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling&gt;</ph>, <ph id="ph4">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph>, <ph id="ph5">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError&gt;</ph>, or <ph id="ph6">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> fields, you apply this attribute directly to Visual Basic method definitions.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept> JScript does not support this attribute.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use C# or Visual Basic wrapper classes to access unmanaged API methods from JScript programs.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>For additional information about using the platform invoke service to access functions in unmanaged DLLs, see <bpt id="p1">[</bpt>Consuming Unmanaged DLL Functions<ept id="p1">](~/docs/framework/interop/consuming-unmanaged-dll-functions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> does not support marshaling of generic types.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.DllImportAttribute"&gt;&lt;/xref&gt;</ph> class with the name of the DLL containing the method to import.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an unmanaged DLL file is included in an assembly, for example, by using the linker or the <ph id="ph1">`/linkresource`</ph> compiler option, you can specify the assembly display name as part of <ph id="ph2">`dllName`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if an unmanaged DLL named <ph id="ph1">`unmanaged.dll`</ph> is included in a managed assembly named <ph id="ph2">`MyAssembly`</ph>, the attribute might be specified as shown in the following code.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.Runtime.InteropServices.DllImportAttribute#2<ept id="p2">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#2)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>System.Runtime.InteropServices.DllImportAttribute#2<ept id="p4">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#2)</ept><ept id="p3">]</ept> <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.Runtime.InteropServices.DllImportAttribute#2<ept id="p6">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#2)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The name of the DLL that contains the unmanaged method.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This can include an assembly display name, if the DLL is included in an assembly.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Enables or disables best-fit mapping behavior when converting Unicode characters to ANSI characters.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`true`</ph>, best-fit mapping behavior is enabled; otherwise, best-fit mapping is disabled.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph> field is <ph id="ph2">`true`</ph> by default.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>Settings for this field override the any level settings for the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.BestFitMappingAttribute?displayProperty=fullName&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>The common language runtime converts to ANSI characters any managed Unicode characters passed to an unmanaged method executing on Windows 98 or Windows Me.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>Best-fit mapping enables the interop marshaler to provide a close-matching character when no exact match exists.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the marshaler converts the Unicode copyright character to 'c' for unmanaged methods that accept ANSI characters.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>Some characters lack a best-fit representation; these characters are called unmappable.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unmappable characters are usually converted to the default '?' ANSI character.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>Certain Unicode characters are converted to dangerous characters, such as the backslash '<ph id="ph1">\\</ph>' character, which can inadvertently change a path.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>By setting the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> field to <ph id="ph2">`true`</ph>, you can signal the presence of an unmappable character to the caller by throwing an exception.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot change the default values provided by the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> fields when passing a managed array whose elements are ANSI Chars or LPSTRs to an unmanaged safe array.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>Best-fit mapping is always enabled and no exception is thrown.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>Be aware that this combination can compromise your security model.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Indicates the calling convention of an entry point.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>You set this field to one of the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.CallingConvention&gt;</ph> enumeration members.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default value for the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention&gt;</ph> field is <ph id="ph2">&lt;xref:System.Runtime.InteropServices.CallingConvention.Winapi&gt;</ph>, which in turn defaults to <ph id="ph3">&lt;xref:System.Runtime.InteropServices.CallingConvention.StdCall&gt;</ph> convention.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see Calling Convention in the MSDN library.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Indicates how to marshal string parameters to the method and controls name mangling.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this field with a member of the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.CharSet&gt;</ph> enumeration to specify the marshaling behavior of string parameters and to specify which entry-point name to invoke (the exact name given or a name ending with "A" or "W").</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default enumeration member for C# and Visual Basic is <ph id="ph1">`CharSet.Ansi`</ph> and the default enumeration member for C++ is <ph id="ph2">`CharSet.None`</ph>, which is equivalent to <ph id="ph3">`CharSet.Ansi`</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>In Visual Basic, you use the <ph id="ph1">`Declare`</ph> statement to specify the <ph id="ph2">`CharSet`</ph> field.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling&gt;</ph> field influences the behavior of the <ph id="ph2">`CharSet`</ph> field in determining which entry-point name to invoke.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a detailed description and examples of the string marshaling and name matching behavior associated with the <ph id="ph1">`CharSet`</ph> field, see <bpt id="p1">[</bpt>Specifying a Character Set<ept id="p1">](~/docs/framework/interop/specifying-a-character-set.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Indicates the name or ordinal of the DLL entry point to be called.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can specify the entry-point name by supplying a string indicating the name of the DLL containing the entry point, or you can identify the entry point by its ordinal.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>Ordinals are prefixed with the # sign, for example, #1.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you omit this field, the common language runtime uses the name of the.NET method marked with the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>For additional information, see <bpt id="p1">[</bpt>Identifying Functions in DLLs<ept id="p1">](~/docs/framework/interop/identifying-functions-in-dlls.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>For examples showing how to use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint&gt;</ph> field, see <bpt id="p1">[</bpt>Specifying an Entry Point<ept id="p1">](~/docs/framework/interop/specifying-an-entry-point.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Controls whether the <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.DllImportAttribute.CharSet"&gt;&lt;/xref&gt;</ph> field causes the common language runtime to search an unmanaged DLL for entry-point names other than the one specified.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`false`</ph>, the entry point name appended with the letter A is invoked when the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=fullName&gt;</ph> field is set to <ph id="ph3">`CharSet.Ansi`</ph>, and the entry-point name appended with the letter W is invoked when the <ph id="ph4">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=fullName&gt;</ph> field is set to the <ph id="ph5">`CharSet.Unicode`</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, managed compilers set this field.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table shows the relationship between the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CharSet&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling&gt;</ph> fields, based on default values imposed by the programming language.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can override the default setting, but do so with caution.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>Language</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>ANSI</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unicode</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>Auto</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>Visual Basic</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>ExactSpelling:=True</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>ExactSpelling:=True</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>ExactSpelling:=False</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>C#</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>ExactSpelling=false</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>ExactSpelling=false</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>ExactSpelling=false</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>C++</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>ExactSpelling=false</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>ExactSpelling=false</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>ExactSpelling=false</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Indicates whether unmanaged methods that have <ph id="ph1">`HRESULT`</ph> or <ph id="ph2">`retval`</ph> return values are directly translated or whether <ph id="ph3">`HRESULT`</ph> or <ph id="ph4">`retval`</ph> return values are automatically converted to exceptions.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>Set the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> field to <ph id="ph2">`true`</ph> to directly translate unmanaged signatures with <ph id="ph3">`HRESULT`</ph> or <ph id="ph4">`retval`</ph> values; set it to <ph id="ph5">`false`</ph> to automatically convert <ph id="ph6">`HRESULT`</ph> or <ph id="ph7">`retval`</ph> values to exceptions.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> field is <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">`true`</ph>, the resulting method signature returns an integer value that contains the <ph id="ph2">`HRESULT`</ph> value.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, you must manually inspect the return value and respond accordingly in your application.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you set the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> field to <ph id="ph2">`false`</ph>, the resulting method signature contains a void return type instead of an integer (<ph id="ph3">`HRESULT`</ph>) return type.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the unmanaged method produces an <ph id="ph1">`HRESULT`</ph>, the runtime automatically ignores a return value of <ph id="ph2">`S_OK`</ph> (or 0) and does not throw an exception.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>For <ph id="ph1">`HRESULT`</ph>s other than <ph id="ph2">`S_OK`</ph>, the runtime automatically throws an exception that corresponds to the <ph id="ph3">`HRESULT`</ph>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> attribute only performs this conversion to methods that return an <ph id="ph2">`HRESULT`</ph>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>You might decide to change the default error reporting behavior from <ph id="ph1">`HRESULT`</ph>s to exceptions in cases where exceptions better fit the error reporting structure of your application.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>This field is similar to the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.PreserveSigAttribute&gt;</ph>; however, in contrast to the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> field, the default value for the attribute is <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>In some cases, Visual Basic developers use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>, instead of using the <ph id="ph2">`Declare`</ph> statement, to define a DLL function in managed code.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> field is one of those cases.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Indicates whether the callee calls the <ph id="ph1">`SetLastError`</ph> Win32 API function before returning from the attributed method.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`true`</ph> to indicate that the callee will call <ph id="ph2">`SetLastError`</ph>; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>The runtime marshaler calls <ph id="ph1">`GetLastError`</ph> and caches the value returned to prevent it from being overwritten by other API calls.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can retrieve the error code by calling <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.GetLastWin32Error%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI "?" character.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`true`</ph> to indicate that an exception is thrown each time the interop marshaler converts an unmappable character; <ph id="ph2">`false`</ph> to indicate that the <ph id="ph3">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> field is disabled.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>This field is <ph id="ph1">`false`</ph> by default.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>The common language runtime converts to ANSI characters any managed Unicode characters passed to an unmanaged method executing on Windows 98 or Windows Me.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>Best-fit mapping enables the interop marshaler to provide a close-matching character when no exact match exists.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the marshaler converts the Unicode copyright character to 'c' for unmanaged methods that accept ANSI characters.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>Some characters lack a best-fit representation; these characters are called unmappable.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unmappable characters are usually converted to the default '?' ANSI character.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>Certain Unicode characters are converted to dangerous characters, such as the backslash '<ph id="ph1">\\</ph>' character, which can inadvertently change a path.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>By setting the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> field to <ph id="ph2">`true`</ph>, you can signal the presence of an unmappable character to the caller by throwing an exception.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot change the default values provided by the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> fields when passing a managed array whose elements are ANSI Chars or LPSTRs to an unmanaged safe array.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>Best-fit mapping is always enabled and no exception is thrown.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>Be aware that this combination can compromise your security model.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Gets the name of the DLL file that contains the entry point.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can provide a full or relative path.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you provide no path, the DLL must be in the current path at run time, unless the DLL is loaded by some other means.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>Be aware, however, that using a fully qualified path can introduce inaccuracy if the DLL is moved.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The name of the DLL file that contains the entry point.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>