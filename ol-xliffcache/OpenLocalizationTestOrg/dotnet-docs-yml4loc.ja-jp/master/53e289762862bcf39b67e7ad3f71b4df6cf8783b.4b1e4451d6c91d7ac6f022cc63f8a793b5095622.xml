{"nodes":[{"content":"Defines a lifetime lease object that is used by the remoting lifetime service.","nodes":[{"pos":[0,78],"content":"Defines a lifetime lease object that is used by the remoting lifetime service.","nodes":[{"content":"Defines a lifetime lease object that is used by the remoting lifetime service.","pos":[0,78]}]}],"pos":[1050,1129],"yaml":true},{"content":"Distributed garbage collection controls when server applications can be deleted. Traditionally, distributed garbage collection uses reference counts and pinging for control. This works well when there are a few clients per object, but does not work well when there are thousands of clients per each object. The lifetime service can assume the function of a traditional distributed garbage collector, and scales well when the number of clients increases.  \n  \n The lifetime service associates a lease with each remotely activated object. When the lease expires, the object is removed. A lease can specify that an object has an infinite lifetime.  \n  \n Each <xref:System.AppDomain> contains a lease manager that administers the leases in the domain. The lease manager periodically examines the leases for time expiration. If a lease has expired, it can either be canceled by removing its reference to the lease, or renewed by invoking one or more of the lease's sponsors.  \n  \n A lease contains properties that determine its policies, and methods that renew the lease time. The lease exposes the <xref:System.Runtime.Remoting.Lifetime.ILease> interface.  \n  \n For an example showing how to use the <xref:System.Runtime.Remoting.Lifetime.ILease> interface see [Lifetimes](http://msdn.microsoft.com/en-us/334a30e5-33cb-4f0f-a38a-ed4abc5560fa).","nodes":[{"pos":[0,453],"content":"Distributed garbage collection controls when server applications can be deleted. Traditionally, distributed garbage collection uses reference counts and pinging for control. This works well when there are a few clients per object, but does not work well when there are thousands of clients per each object. The lifetime service can assume the function of a traditional distributed garbage collector, and scales well when the number of clients increases.","nodes":[{"content":"Distributed garbage collection controls when server applications can be deleted. Traditionally, distributed garbage collection uses reference counts and pinging for control. This works well when there are a few clients per object, but does not work well when there are thousands of clients per each object. The lifetime service can assume the function of a traditional distributed garbage collector, and scales well when the number of clients increases.","pos":[0,453],"nodes":[{"content":"Distributed garbage collection controls when server applications can be deleted.","pos":[0,80]},{"content":"Traditionally, distributed garbage collection uses reference counts and pinging for control.","pos":[81,173]},{"content":"This works well when there are a few clients per object, but does not work well when there are thousands of clients per each object.","pos":[174,306]},{"content":"The lifetime service can assume the function of a traditional distributed garbage collector, and scales well when the number of clients increases.","pos":[307,453]}]}]},{"pos":[460,644],"content":"The lifetime service associates a lease with each remotely activated object. When the lease expires, the object is removed. A lease can specify that an object has an infinite lifetime.","nodes":[{"content":"The lifetime service associates a lease with each remotely activated object. When the lease expires, the object is removed. A lease can specify that an object has an infinite lifetime.","pos":[0,184],"nodes":[{"content":"The lifetime service associates a lease with each remotely activated object.","pos":[0,76]},{"content":"When the lease expires, the object is removed.","pos":[77,123]},{"content":"A lease can specify that an object has an infinite lifetime.","pos":[124,184]}]}]},{"pos":[651,969],"content":"Each <xref:System.AppDomain> contains a lease manager that administers the leases in the domain. The lease manager periodically examines the leases for time expiration. If a lease has expired, it can either be canceled by removing its reference to the lease, or renewed by invoking one or more of the lease's sponsors.","nodes":[{"content":"Each <xref:System.AppDomain> contains a lease manager that administers the leases in the domain. The lease manager periodically examines the leases for time expiration. If a lease has expired, it can either be canceled by removing its reference to the lease, or renewed by invoking one or more of the lease's sponsors.","pos":[0,318],"nodes":[{"content":"Each <ph id=\"ph1\">&lt;xref:System.AppDomain&gt;</ph> contains a lease manager that administers the leases in the domain.","pos":[0,96],"source":"Each <xref:System.AppDomain> contains a lease manager that administers the leases in the domain."},{"content":"The lease manager periodically examines the leases for time expiration.","pos":[97,168]},{"content":"If a lease has expired, it can either be canceled by removing its reference to the lease, or renewed by invoking one or more of the lease's sponsors.","pos":[169,318]}]}]},{"pos":[976,1151],"content":"A lease contains properties that determine its policies, and methods that renew the lease time. The lease exposes the <xref:System.Runtime.Remoting.Lifetime.ILease> interface.","nodes":[{"content":"A lease contains properties that determine its policies, and methods that renew the lease time. The lease exposes the <xref:System.Runtime.Remoting.Lifetime.ILease> interface.","pos":[0,175],"nodes":[{"content":"A lease contains properties that determine its policies, and methods that renew the lease time.","pos":[0,95]},{"content":"The lease exposes the <ph id=\"ph1\">&lt;xref:System.Runtime.Remoting.Lifetime.ILease&gt;</ph> interface.","pos":[96,175],"source":" The lease exposes the <xref:System.Runtime.Remoting.Lifetime.ILease> interface."}]}]},{"pos":[1158,1339],"content":"For an example showing how to use the <ph id=\"ph1\">&lt;xref:System.Runtime.Remoting.Lifetime.ILease&gt;</ph> interface see <bpt id=\"p1\">[</bpt>Lifetimes<ept id=\"p1\">](http://msdn.microsoft.com/en-us/334a30e5-33cb-4f0f-a38a-ed4abc5560fa)</ept>.","source":"For an example showing how to use the <xref:System.Runtime.Remoting.Lifetime.ILease> interface see [Lifetimes](http://msdn.microsoft.com/en-us/334a30e5-33cb-4f0f-a38a-ed4abc5560fa)."}],"pos":[1140,2490],"yaml":true,"extradata":"MT"},{"content":"Gets the amount of time remaining on the lease.","nodes":[{"pos":[0,47],"content":"Gets the amount of time remaining on the lease.","nodes":[{"content":"Gets the amount of time remaining on the lease.","pos":[0,47]}]}],"pos":[3748,3796],"yaml":true},{"content":"The amount of time remaining on the lease.","nodes":[{"pos":[0,42],"content":"The amount of time remaining on the lease.","nodes":[{"content":"The amount of time remaining on the lease.","pos":[0,42]}]}],"pos":[3920,3963],"yaml":true},{"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","nodes":[{"pos":[0,117],"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","nodes":[{"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","pos":[0,117]}]}],"pos":[4159,4277],"yaml":true},{"content":"Gets the current <xref href=\"System.Runtime.Remoting.Lifetime.LeaseState\"></xref> of the lease.","nodes":[{"pos":[0,95],"content":"Gets the current <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Remoting.Lifetime.LeaseState\"&gt;&lt;/xref&gt;</ph> of the lease.","source":"Gets the current <xref href=\"System.Runtime.Remoting.Lifetime.LeaseState\"></xref> of the lease."}],"pos":[5306,5402],"yaml":true},{"content":"The current <xref href=\"System.Runtime.Remoting.Lifetime.LeaseState\"></xref> of the lease.","nodes":[{"pos":[0,90],"content":"The current <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Remoting.Lifetime.LeaseState\"&gt;&lt;/xref&gt;</ph> of the lease.","source":"The current <xref href=\"System.Runtime.Remoting.Lifetime.LeaseState\"></xref> of the lease."}],"pos":[5585,5676],"yaml":true},{"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","nodes":[{"pos":[0,117],"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","nodes":[{"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","pos":[0,117]}]}],"pos":[5868,5986],"yaml":true},{"content":"Gets or sets the initial time for the lease.","nodes":[{"pos":[0,44],"content":"Gets or sets the initial time for the lease.","nodes":[{"content":"Gets or sets the initial time for the lease.","pos":[0,44]}]}],"pos":[7039,7084],"yaml":true},{"content":"If the <xref:System.Runtime.Remoting.Lifetime.ILease.InitialLeaseTime%2A> property is set to <xref:System.TimeSpan?displayProperty=fullName>, then the lease will never time out and the object associated with it will have an infinite lifetime.","nodes":[{"pos":[0,242],"content":"If the <xref:System.Runtime.Remoting.Lifetime.ILease.InitialLeaseTime%2A> property is set to <xref:System.TimeSpan?displayProperty=fullName>, then the lease will never time out and the object associated with it will have an infinite lifetime.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Runtime.Remoting.Lifetime.ILease.InitialLeaseTime%2A&gt;</ph> property is set to <ph id=\"ph2\">&lt;xref:System.TimeSpan?displayProperty=fullName&gt;</ph>, then the lease will never time out and the object associated with it will have an infinite lifetime.","pos":[0,242],"source":"If the <xref:System.Runtime.Remoting.Lifetime.ILease.InitialLeaseTime%2A> property is set to <xref:System.TimeSpan?displayProperty=fullName>, then the lease will never time out and the object associated with it will have an infinite lifetime."}]}],"pos":[7095,7338],"yaml":true,"extradata":"MT"},{"content":"The initial time for the lease.","nodes":[{"pos":[0,31],"content":"The initial time for the lease.","nodes":[{"content":"The initial time for the lease.","pos":[0,31]}]}],"pos":[7467,7499],"yaml":true},{"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","nodes":[{"pos":[0,117],"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","nodes":[{"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","pos":[0,117]}]}],"pos":[7695,7813],"yaml":true},{"content":"Registers a sponsor for the lease without renewing the lease.","nodes":[{"pos":[0,61],"content":"Registers a sponsor for the lease without renewing the lease.","nodes":[{"content":"Registers a sponsor for the lease without renewing the lease.","pos":[0,61]}]}],"pos":[8975,9037],"yaml":true},{"content":"If a sponsor is registered with the current method, the lease is not renewed.","nodes":[{"pos":[0,77],"content":"If a sponsor is registered with the current method, the lease is not renewed.","nodes":[{"content":"If a sponsor is registered with the current method, the lease is not renewed.","pos":[0,77]}]}],"pos":[9048,9126],"yaml":true,"extradata":"MT"},{"content":"The callback object of the sponsor.","nodes":[{"pos":[0,35],"content":"The callback object of the sponsor.","nodes":[{"content":"The callback object of the sponsor.","pos":[0,35]}]}],"pos":[9322,9358],"yaml":true},{"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","nodes":[{"pos":[0,117],"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","nodes":[{"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","pos":[0,117]}]}],"pos":[9546,9664],"yaml":true},{"content":"Registers a sponsor for the lease, and renews it by the specified <xref href=\"System.TimeSpan\"></xref>.","nodes":[{"pos":[0,103],"content":"Registers a sponsor for the lease, and renews it by the specified <ph id=\"ph1\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph>.","source":"Registers a sponsor for the lease, and renews it by the specified <xref href=\"System.TimeSpan\"></xref>."}],"pos":[10904,11008],"yaml":true},{"content":"The callback object of the sponsor.","nodes":[{"pos":[0,35],"content":"The callback object of the sponsor.","nodes":[{"content":"The callback object of the sponsor.","pos":[0,35]}]}],"pos":[11226,11262],"yaml":true},{"content":"The length of time to renew the lease by.","nodes":[{"pos":[0,41],"content":"The length of time to renew the lease by.","nodes":[{"content":"The length of time to renew the lease by.","pos":[0,41]}]}],"pos":[11331,11373],"yaml":true},{"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","nodes":[{"pos":[0,117],"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","nodes":[{"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","pos":[0,117]}]}],"pos":[11561,11679],"yaml":true},{"content":"Renews a lease for the specified time.","nodes":[{"pos":[0,38],"content":"Renews a lease for the specified time.","nodes":[{"content":"Renews a lease for the specified time.","pos":[0,38]}]}],"pos":[12745,12784],"yaml":true},{"content":"The lease time is set to the maximum of the <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A> or the current time plus the renewal time.","nodes":[{"pos":[0,153],"content":"The lease time is set to the maximum of the <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A> or the current time plus the renewal time.","nodes":[{"content":"The lease time is set to the maximum of the <ph id=\"ph1\">&lt;xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A&gt;</ph> or the current time plus the renewal time.","pos":[0,153],"source":"The lease time is set to the maximum of the <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A> or the current time plus the renewal time."}]}],"pos":[12795,12949],"yaml":true,"extradata":"MT"},{"content":"The length of time to renew the lease by.","nodes":[{"pos":[0,41],"content":"The length of time to renew the lease by.","nodes":[{"content":"The length of time to renew the lease by.","pos":[0,41]}]}],"pos":[13103,13145],"yaml":true},{"content":"The new expiration time of the lease.","nodes":[{"pos":[0,37],"content":"The new expiration time of the lease.","nodes":[{"content":"The new expiration time of the lease.","pos":[0,37]}]}],"pos":[13204,13242],"yaml":true},{"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","nodes":[{"pos":[0,117],"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","nodes":[{"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","pos":[0,117]}]}],"pos":[13427,13545],"yaml":true},{"content":"Gets or sets the amount of time by which a call to the remote object renews the <xref href=\"System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime\"></xref>.","nodes":[{"pos":[0,158],"content":"Gets or sets the amount of time by which a call to the remote object renews the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime\"&gt;&lt;/xref&gt;</ph>.","source":"Gets or sets the amount of time by which a call to the remote object renews the <xref href=\"System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime\"></xref>."}],"pos":[14592,14751],"yaml":true},{"content":"When you make a call to a remote object, the lifetime service adds the <xref:System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime%2A> to the <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A> only if the <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A> has dropped below the <xref:System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime%2A>. Sequential calls therefore do not increase the <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A> without bound. Instead, immediately after any call, the <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A> is guaranteed to be the <xref:System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime%2A> or longer.","nodes":[{"pos":[0,716],"content":"When you make a call to a remote object, the lifetime service adds the <xref:System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime%2A> to the <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A> only if the <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A> has dropped below the <xref:System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime%2A>. Sequential calls therefore do not increase the <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A> without bound. Instead, immediately after any call, the <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A> is guaranteed to be the <xref:System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime%2A> or longer.","nodes":[{"content":"When you make a call to a remote object, the lifetime service adds the <xref:System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime%2A> to the <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A> only if the <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A> has dropped below the <xref:System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime%2A>. Sequential calls therefore do not increase the <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A> without bound. Instead, immediately after any call, the <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A> is guaranteed to be the <xref:System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime%2A> or longer.","pos":[0,716],"nodes":[{"content":"When you make a call to a remote object, the lifetime service adds the <ph id=\"ph1\">&lt;xref:System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime%2A&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A&gt;</ph> only if the <ph id=\"ph3\">&lt;xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A&gt;</ph> has dropped below the <ph id=\"ph4\">&lt;xref:System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime%2A&gt;</ph>.","pos":[0,378],"source":"When you make a call to a remote object, the lifetime service adds the <xref:System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime%2A> to the <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A> only if the <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A> has dropped below the <xref:System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime%2A>."},{"content":"Sequential calls therefore do not increase the <ph id=\"ph1\">&lt;xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A&gt;</ph> without bound.","pos":[379,507],"source":" Sequential calls therefore do not increase the <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A> without bound."},{"content":"Instead, immediately after any call, the <ph id=\"ph1\">&lt;xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A&gt;</ph> is guaranteed to be the <ph id=\"ph2\">&lt;xref:System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime%2A&gt;</ph> or longer.","pos":[508,716],"source":" Instead, immediately after any call, the <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A> is guaranteed to be the <xref:System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime%2A> or longer."}]}]}],"pos":[14762,15479],"yaml":true,"extradata":"MT"},{"content":"The amount of time by which a call to the remote object renews the <xref href=\"System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime\"></xref>.","nodes":[{"pos":[0,145],"content":"The amount of time by which a call to the remote object renews the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime\"&gt;&lt;/xref&gt;</ph>.","source":"The amount of time by which a call to the remote object renews the <xref href=\"System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime\"></xref>."}],"pos":[15607,15753],"yaml":true},{"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","nodes":[{"pos":[0,117],"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","nodes":[{"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","pos":[0,117]}]}],"pos":[15948,16066],"yaml":true},{"content":"Gets or sets the amount of time to wait for a sponsor to return with a lease renewal time.","nodes":[{"pos":[0,90],"content":"Gets or sets the amount of time to wait for a sponsor to return with a lease renewal time.","nodes":[{"content":"Gets or sets the amount of time to wait for a sponsor to return with a lease renewal time.","pos":[0,90]}]}],"pos":[17131,17222],"yaml":true},{"content":"If the <xref:System.Runtime.Remoting.Lifetime.ILease.SponsorshipTimeout%2A> is <xref:System.TimeSpan?displayProperty=fullName>, then this lease will not take sponsors.  \n  \n If a sponsor does not respond to a call to renew a lease within the time-out period, it is assumed to be dead and is removed from the list of sponsors for the current lease.","nodes":[{"pos":[0,167],"content":"If the <xref:System.Runtime.Remoting.Lifetime.ILease.SponsorshipTimeout%2A> is <xref:System.TimeSpan?displayProperty=fullName>, then this lease will not take sponsors.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Runtime.Remoting.Lifetime.ILease.SponsorshipTimeout%2A&gt;</ph> is <ph id=\"ph2\">&lt;xref:System.TimeSpan?displayProperty=fullName&gt;</ph>, then this lease will not take sponsors.","pos":[0,167],"source":"If the <xref:System.Runtime.Remoting.Lifetime.ILease.SponsorshipTimeout%2A> is <xref:System.TimeSpan?displayProperty=fullName>, then this lease will not take sponsors."}]},{"pos":[174,347],"content":"If a sponsor does not respond to a call to renew a lease within the time-out period, it is assumed to be dead and is removed from the list of sponsors for the current lease.","nodes":[{"content":"If a sponsor does not respond to a call to renew a lease within the time-out period, it is assumed to be dead and is removed from the list of sponsors for the current lease.","pos":[0,173]}]}],"pos":[17233,17585],"yaml":true,"extradata":"MT"},{"content":"The amount of time to wait for a sponsor to return with a lease renewal time.","nodes":[{"pos":[0,77],"content":"The amount of time to wait for a sponsor to return with a lease renewal time.","nodes":[{"content":"The amount of time to wait for a sponsor to return with a lease renewal time.","pos":[0,77]}]}],"pos":[17716,17794],"yaml":true},{"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","nodes":[{"pos":[0,117],"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","nodes":[{"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","pos":[0,117]}]}],"pos":[17992,18110],"yaml":true},{"content":"Removes a sponsor from the sponsor list.","nodes":[{"pos":[0,40],"content":"Removes a sponsor from the sponsor list.","nodes":[{"content":"Removes a sponsor from the sponsor list.","pos":[0,40]}]}],"pos":[19284,19325],"yaml":true},{"content":"The lease sponsor to unregister.","nodes":[{"pos":[0,32],"content":"The lease sponsor to unregister.","nodes":[{"content":"The lease sponsor to unregister.","pos":[0,32]}]}],"pos":[19523,19556],"yaml":true},{"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","nodes":[{"pos":[0,117],"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","nodes":[{"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","pos":[0,117]}]}],"pos":[19746,19864],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Runtime.Remoting.Lifetime.ILease\n  commentId: T:System.Runtime.Remoting.Lifetime.ILease\n  id: ILease\n  children:\n  - System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime\n  - System.Runtime.Remoting.Lifetime.ILease.CurrentState\n  - System.Runtime.Remoting.Lifetime.ILease.InitialLeaseTime\n  - System.Runtime.Remoting.Lifetime.ILease.Register(System.Runtime.Remoting.Lifetime.ISponsor)\n  - System.Runtime.Remoting.Lifetime.ILease.Register(System.Runtime.Remoting.Lifetime.ISponsor,System.TimeSpan)\n  - System.Runtime.Remoting.Lifetime.ILease.Renew(System.TimeSpan)\n  - System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime\n  - System.Runtime.Remoting.Lifetime.ILease.SponsorshipTimeout\n  - System.Runtime.Remoting.Lifetime.ILease.Unregister(System.Runtime.Remoting.Lifetime.ISponsor)\n  langs:\n  - csharp\n  name: ILease\n  nameWithType: ILease\n  fullName: System.Runtime.Remoting.Lifetime.ILease\n  type: Interface\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Lifetime\n  summary: Defines a lifetime lease object that is used by the remoting lifetime service.\n  remarks: \"Distributed garbage collection controls when server applications can be deleted. Traditionally, distributed garbage collection uses reference counts and pinging for control. This works well when there are a few clients per object, but does not work well when there are thousands of clients per each object. The lifetime service can assume the function of a traditional distributed garbage collector, and scales well when the number of clients increases.  \\n  \\n The lifetime service associates a lease with each remotely activated object. When the lease expires, the object is removed. A lease can specify that an object has an infinite lifetime.  \\n  \\n Each <xref:System.AppDomain> contains a lease manager that administers the leases in the domain. The lease manager periodically examines the leases for time expiration. If a lease has expired, it can either be canceled by removing its reference to the lease, or renewed by invoking one or more of the lease's sponsors.  \\n  \\n A lease contains properties that determine its policies, and methods that renew the lease time. The lease exposes the <xref:System.Runtime.Remoting.Lifetime.ILease> interface.  \\n  \\n For an example showing how to use the <xref:System.Runtime.Remoting.Lifetime.ILease> interface see [Lifetimes](http://msdn.microsoft.com/en-us/334a30e5-33cb-4f0f-a38a-ed4abc5560fa).\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public interface ILease\n  implements: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting.Lifetime/ILease.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime\n  commentId: P:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime\n  id: CurrentLeaseTime\n  parent: System.Runtime.Remoting.Lifetime.ILease\n  langs:\n  - csharp\n  name: CurrentLeaseTime\n  nameWithType: ILease.CurrentLeaseTime\n  fullName: ILease.CurrentLeaseTime\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Lifetime\n  summary: Gets the amount of time remaining on the lease.\n  syntax:\n    content: public TimeSpan CurrentLeaseTime { get; }\n    return:\n      type: System.TimeSpan\n      description: The amount of time remaining on the lease.\n  overload: System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting.Lifetime/ILease.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Runtime.Remoting.Lifetime.ILease.CurrentState\n  commentId: P:System.Runtime.Remoting.Lifetime.ILease.CurrentState\n  id: CurrentState\n  parent: System.Runtime.Remoting.Lifetime.ILease\n  langs:\n  - csharp\n  name: CurrentState\n  nameWithType: ILease.CurrentState\n  fullName: ILease.CurrentState\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Lifetime\n  summary: Gets the current <xref href=\"System.Runtime.Remoting.Lifetime.LeaseState\"></xref> of the lease.\n  syntax:\n    content: public System.Runtime.Remoting.Lifetime.LeaseState CurrentState { get; }\n    return:\n      type: System.Runtime.Remoting.Lifetime.LeaseState\n      description: The current <xref href=\"System.Runtime.Remoting.Lifetime.LeaseState\"></xref> of the lease.\n  overload: System.Runtime.Remoting.Lifetime.ILease.CurrentState*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting.Lifetime/ILease.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Runtime.Remoting.Lifetime.ILease.InitialLeaseTime\n  commentId: P:System.Runtime.Remoting.Lifetime.ILease.InitialLeaseTime\n  id: InitialLeaseTime\n  parent: System.Runtime.Remoting.Lifetime.ILease\n  langs:\n  - csharp\n  name: InitialLeaseTime\n  nameWithType: ILease.InitialLeaseTime\n  fullName: ILease.InitialLeaseTime\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Lifetime\n  summary: Gets or sets the initial time for the lease.\n  remarks: If the <xref:System.Runtime.Remoting.Lifetime.ILease.InitialLeaseTime%2A> property is set to <xref:System.TimeSpan?displayProperty=fullName>, then the lease will never time out and the object associated with it will have an infinite lifetime.\n  syntax:\n    content: public TimeSpan InitialLeaseTime { get; set; }\n    return:\n      type: System.TimeSpan\n      description: The initial time for the lease.\n  overload: System.Runtime.Remoting.Lifetime.ILease.InitialLeaseTime*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting.Lifetime/ILease.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Runtime.Remoting.Lifetime.ILease.Register(System.Runtime.Remoting.Lifetime.ISponsor)\n  commentId: M:System.Runtime.Remoting.Lifetime.ILease.Register(System.Runtime.Remoting.Lifetime.ISponsor)\n  id: Register(System.Runtime.Remoting.Lifetime.ISponsor)\n  parent: System.Runtime.Remoting.Lifetime.ILease\n  langs:\n  - csharp\n  name: Register(ISponsor)\n  nameWithType: ILease.Register(ISponsor)\n  fullName: ILease.Register(ISponsor)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Lifetime\n  summary: Registers a sponsor for the lease without renewing the lease.\n  remarks: If a sponsor is registered with the current method, the lease is not renewed.\n  syntax:\n    content: public void Register (System.Runtime.Remoting.Lifetime.ISponsor obj);\n    parameters:\n    - id: obj\n      type: System.Runtime.Remoting.Lifetime.ISponsor\n      description: The callback object of the sponsor.\n  overload: System.Runtime.Remoting.Lifetime.ILease.Register*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting.Lifetime/ILease.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Runtime.Remoting.Lifetime.ILease.Register(System.Runtime.Remoting.Lifetime.ISponsor,System.TimeSpan)\n  commentId: M:System.Runtime.Remoting.Lifetime.ILease.Register(System.Runtime.Remoting.Lifetime.ISponsor,System.TimeSpan)\n  id: Register(System.Runtime.Remoting.Lifetime.ISponsor,System.TimeSpan)\n  parent: System.Runtime.Remoting.Lifetime.ILease\n  langs:\n  - csharp\n  name: Register(ISponsor, TimeSpan)\n  nameWithType: ILease.Register(ISponsor, TimeSpan)\n  fullName: ILease.Register(ISponsor, TimeSpan)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Lifetime\n  summary: Registers a sponsor for the lease, and renews it by the specified <xref href=\"System.TimeSpan\"></xref>.\n  syntax:\n    content: public void Register (System.Runtime.Remoting.Lifetime.ISponsor obj, TimeSpan renewalTime);\n    parameters:\n    - id: obj\n      type: System.Runtime.Remoting.Lifetime.ISponsor\n      description: The callback object of the sponsor.\n    - id: renewalTime\n      type: System.TimeSpan\n      description: The length of time to renew the lease by.\n  overload: System.Runtime.Remoting.Lifetime.ILease.Register*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting.Lifetime/ILease.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Runtime.Remoting.Lifetime.ILease.Renew(System.TimeSpan)\n  commentId: M:System.Runtime.Remoting.Lifetime.ILease.Renew(System.TimeSpan)\n  id: Renew(System.TimeSpan)\n  parent: System.Runtime.Remoting.Lifetime.ILease\n  langs:\n  - csharp\n  name: Renew(TimeSpan)\n  nameWithType: ILease.Renew(TimeSpan)\n  fullName: ILease.Renew(TimeSpan)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Lifetime\n  summary: Renews a lease for the specified time.\n  remarks: The lease time is set to the maximum of the <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A> or the current time plus the renewal time.\n  syntax:\n    content: public TimeSpan Renew (TimeSpan renewalTime);\n    parameters:\n    - id: renewalTime\n      type: System.TimeSpan\n      description: The length of time to renew the lease by.\n    return:\n      type: System.TimeSpan\n      description: The new expiration time of the lease.\n  overload: System.Runtime.Remoting.Lifetime.ILease.Renew*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting.Lifetime/ILease.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime\n  commentId: P:System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime\n  id: RenewOnCallTime\n  parent: System.Runtime.Remoting.Lifetime.ILease\n  langs:\n  - csharp\n  name: RenewOnCallTime\n  nameWithType: ILease.RenewOnCallTime\n  fullName: ILease.RenewOnCallTime\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Lifetime\n  summary: Gets or sets the amount of time by which a call to the remote object renews the <xref href=\"System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime\"></xref>.\n  remarks: When you make a call to a remote object, the lifetime service adds the <xref:System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime%2A> to the <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A> only if the <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A> has dropped below the <xref:System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime%2A>. Sequential calls therefore do not increase the <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A> without bound. Instead, immediately after any call, the <xref:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime%2A> is guaranteed to be the <xref:System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime%2A> or longer.\n  syntax:\n    content: public TimeSpan RenewOnCallTime { get; set; }\n    return:\n      type: System.TimeSpan\n      description: The amount of time by which a call to the remote object renews the <xref href=\"System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime\"></xref>.\n  overload: System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting.Lifetime/ILease.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Runtime.Remoting.Lifetime.ILease.SponsorshipTimeout\n  commentId: P:System.Runtime.Remoting.Lifetime.ILease.SponsorshipTimeout\n  id: SponsorshipTimeout\n  parent: System.Runtime.Remoting.Lifetime.ILease\n  langs:\n  - csharp\n  name: SponsorshipTimeout\n  nameWithType: ILease.SponsorshipTimeout\n  fullName: ILease.SponsorshipTimeout\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Lifetime\n  summary: Gets or sets the amount of time to wait for a sponsor to return with a lease renewal time.\n  remarks: \"If the <xref:System.Runtime.Remoting.Lifetime.ILease.SponsorshipTimeout%2A> is <xref:System.TimeSpan?displayProperty=fullName>, then this lease will not take sponsors.  \\n  \\n If a sponsor does not respond to a call to renew a lease within the time-out period, it is assumed to be dead and is removed from the list of sponsors for the current lease.\"\n  syntax:\n    content: public TimeSpan SponsorshipTimeout { get; set; }\n    return:\n      type: System.TimeSpan\n      description: The amount of time to wait for a sponsor to return with a lease renewal time.\n  overload: System.Runtime.Remoting.Lifetime.ILease.SponsorshipTimeout*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting.Lifetime/ILease.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Runtime.Remoting.Lifetime.ILease.Unregister(System.Runtime.Remoting.Lifetime.ISponsor)\n  commentId: M:System.Runtime.Remoting.Lifetime.ILease.Unregister(System.Runtime.Remoting.Lifetime.ISponsor)\n  id: Unregister(System.Runtime.Remoting.Lifetime.ISponsor)\n  parent: System.Runtime.Remoting.Lifetime.ILease\n  langs:\n  - csharp\n  name: Unregister(ISponsor)\n  nameWithType: ILease.Unregister(ISponsor)\n  fullName: ILease.Unregister(ISponsor)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Lifetime\n  summary: Removes a sponsor from the sponsor list.\n  syntax:\n    content: public void Unregister (System.Runtime.Remoting.Lifetime.ISponsor obj);\n    parameters:\n    - id: obj\n      type: System.Runtime.Remoting.Lifetime.ISponsor\n      description: The lease sponsor to unregister.\n  overload: System.Runtime.Remoting.Lifetime.ILease.Unregister*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting.Lifetime/ILease.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\nreferences:\n- uid: System.Security.SecurityException\n  parent: System.Security\n  isExternal: false\n  name: SecurityException\n  nameWithType: SecurityException\n  fullName: System.Security.SecurityException\n- uid: System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime\n  parent: System.Runtime.Remoting.Lifetime.ILease\n  isExternal: false\n  name: CurrentLeaseTime\n  nameWithType: ILease.CurrentLeaseTime\n  fullName: ILease.CurrentLeaseTime\n- uid: System.TimeSpan\n  parent: System\n  isExternal: false\n  name: TimeSpan\n  nameWithType: TimeSpan\n  fullName: System.TimeSpan\n- uid: System.Runtime.Remoting.Lifetime.ILease.CurrentState\n  parent: System.Runtime.Remoting.Lifetime.ILease\n  isExternal: false\n  name: CurrentState\n  nameWithType: ILease.CurrentState\n  fullName: ILease.CurrentState\n- uid: System.Runtime.Remoting.Lifetime.LeaseState\n  parent: System.Runtime.Remoting.Lifetime\n  isExternal: false\n  name: LeaseState\n  nameWithType: LeaseState\n  fullName: System.Runtime.Remoting.Lifetime.LeaseState\n- uid: System.Runtime.Remoting.Lifetime.ILease.InitialLeaseTime\n  parent: System.Runtime.Remoting.Lifetime.ILease\n  isExternal: false\n  name: InitialLeaseTime\n  nameWithType: ILease.InitialLeaseTime\n  fullName: ILease.InitialLeaseTime\n- uid: System.Runtime.Remoting.Lifetime.ILease.Register(System.Runtime.Remoting.Lifetime.ISponsor)\n  parent: System.Runtime.Remoting.Lifetime.ILease\n  isExternal: false\n  name: Register(ISponsor)\n  nameWithType: ILease.Register(ISponsor)\n  fullName: ILease.Register(ISponsor)\n- uid: System.Runtime.Remoting.Lifetime.ISponsor\n  parent: System.Runtime.Remoting.Lifetime\n  isExternal: false\n  name: ISponsor\n  nameWithType: ISponsor\n  fullName: System.Runtime.Remoting.Lifetime.ISponsor\n- uid: System.Runtime.Remoting.Lifetime.ILease.Register(System.Runtime.Remoting.Lifetime.ISponsor,System.TimeSpan)\n  parent: System.Runtime.Remoting.Lifetime.ILease\n  isExternal: false\n  name: Register(ISponsor, TimeSpan)\n  nameWithType: ILease.Register(ISponsor, TimeSpan)\n  fullName: ILease.Register(ISponsor, TimeSpan)\n- uid: System.Runtime.Remoting.Lifetime.ILease.Renew(System.TimeSpan)\n  parent: System.Runtime.Remoting.Lifetime.ILease\n  isExternal: false\n  name: Renew(TimeSpan)\n  nameWithType: ILease.Renew(TimeSpan)\n  fullName: ILease.Renew(TimeSpan)\n- uid: System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime\n  parent: System.Runtime.Remoting.Lifetime.ILease\n  isExternal: false\n  name: RenewOnCallTime\n  nameWithType: ILease.RenewOnCallTime\n  fullName: ILease.RenewOnCallTime\n- uid: System.Runtime.Remoting.Lifetime.ILease.SponsorshipTimeout\n  parent: System.Runtime.Remoting.Lifetime.ILease\n  isExternal: false\n  name: SponsorshipTimeout\n  nameWithType: ILease.SponsorshipTimeout\n  fullName: ILease.SponsorshipTimeout\n- uid: System.Runtime.Remoting.Lifetime.ILease.Unregister(System.Runtime.Remoting.Lifetime.ISponsor)\n  parent: System.Runtime.Remoting.Lifetime.ILease\n  isExternal: false\n  name: Unregister(ISponsor)\n  nameWithType: ILease.Unregister(ISponsor)\n  fullName: ILease.Unregister(ISponsor)\n- uid: System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime*\n  parent: System.Runtime.Remoting.Lifetime.ILease\n  isExternal: false\n  name: CurrentLeaseTime\n  nameWithType: ILease.CurrentLeaseTime\n  fullName: ILease.CurrentLeaseTime\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting.Lifetime/ILease.xml\n- uid: System.Runtime.Remoting.Lifetime.ILease.CurrentState*\n  parent: System.Runtime.Remoting.Lifetime.ILease\n  isExternal: false\n  name: CurrentState\n  nameWithType: ILease.CurrentState\n  fullName: ILease.CurrentState\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting.Lifetime/ILease.xml\n- uid: System.Runtime.Remoting.Lifetime.ILease.InitialLeaseTime*\n  parent: System.Runtime.Remoting.Lifetime.ILease\n  isExternal: false\n  name: InitialLeaseTime\n  nameWithType: ILease.InitialLeaseTime\n  fullName: ILease.InitialLeaseTime\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting.Lifetime/ILease.xml\n- uid: System.Runtime.Remoting.Lifetime.ILease.Register*\n  parent: System.Runtime.Remoting.Lifetime.ILease\n  isExternal: false\n  name: Register\n  nameWithType: ILease.Register\n  fullName: ILease.Register\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting.Lifetime/ILease.xml\n- uid: System.Runtime.Remoting.Lifetime.ILease.Renew*\n  parent: System.Runtime.Remoting.Lifetime.ILease\n  isExternal: false\n  name: Renew\n  nameWithType: ILease.Renew\n  fullName: ILease.Renew\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting.Lifetime/ILease.xml\n- uid: System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime*\n  parent: System.Runtime.Remoting.Lifetime.ILease\n  isExternal: false\n  name: RenewOnCallTime\n  nameWithType: ILease.RenewOnCallTime\n  fullName: ILease.RenewOnCallTime\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting.Lifetime/ILease.xml\n- uid: System.Runtime.Remoting.Lifetime.ILease.SponsorshipTimeout*\n  parent: System.Runtime.Remoting.Lifetime.ILease\n  isExternal: false\n  name: SponsorshipTimeout\n  nameWithType: ILease.SponsorshipTimeout\n  fullName: ILease.SponsorshipTimeout\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting.Lifetime/ILease.xml\n- uid: System.Runtime.Remoting.Lifetime.ILease.Unregister*\n  parent: System.Runtime.Remoting.Lifetime.ILease\n  isExternal: false\n  name: Unregister\n  nameWithType: ILease.Unregister\n  fullName: ILease.Unregister\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting.Lifetime/ILease.xml\n"}