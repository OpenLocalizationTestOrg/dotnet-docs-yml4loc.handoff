{"nodes":[{"content":"Executes an operation on a separate thread.","nodes":[{"pos":[0,43],"content":"Executes an operation on a separate thread.","nodes":[{"content":"Executes an operation on a separate thread.","pos":[0,43]}]}],"pos":[1688,1732],"yaml":true},{"content":"The <xref:System.ComponentModel.BackgroundWorker> class allows you to run an operation on a separate, dedicated thread. Time-consuming operations like downloads and database transactions can cause your user interface (UI) to seem as though it has stopped responding while they are running. When you want a responsive UI and you are faced with long delays associated with such operations, the <xref:System.ComponentModel.BackgroundWorker> class provides a convenient solution.  \n  \n To execute a time-consuming operation in the background, create a <xref:System.ComponentModel.BackgroundWorker> and listen for events that report the progress of your operation and signal when your operation is finished. You can create the <xref:System.ComponentModel.BackgroundWorker> programmatically or you can drag it onto your form from the **Components** tab of the **Toolbox**. If you create the <xref:System.ComponentModel.BackgroundWorker> in the Windows Forms Designer, it will appear in the Component Tray, and its properties will be displayed in the Properties window.  \n  \n To set up for a background operation, add an event handler for the <xref:System.ComponentModel.BackgroundWorker.DoWork> event. Call your time-consuming operation in this event handler. To start the operation, call <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>. To receive notifications of progress updates, handle the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event. To receive a notification when the operation is completed, handle the <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event.  \n  \n> [!NOTE]\n>  You must be careful not to manipulate any user-interface objects in your <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler. Instead, communicate to the user interface through the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> and <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> events.  \n>   \n>  <xref:System.ComponentModel.BackgroundWorker> events are not marshaled across <xref:System.AppDomain> boundaries. Do not use a <xref:System.ComponentModel.BackgroundWorker> component to perform multithreaded operations in more than one <xref:System.AppDomain>.  \n  \n If your background operation requires a parameter, call <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> with your parameter. Inside the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler, you can extract the parameter from the <xref:System.ComponentModel.DoWorkEventArgs.Argument%2A?displayProperty=fullName> property.  \n  \n For more information about <xref:System.ComponentModel.BackgroundWorker>, see [How to: Run an Operation in the Background](~/docs/framework/winforms/controls/how-to-run-an-operation-in-the-background.md).","nodes":[{"pos":[0,475],"content":"The <xref:System.ComponentModel.BackgroundWorker> class allows you to run an operation on a separate, dedicated thread. Time-consuming operations like downloads and database transactions can cause your user interface (UI) to seem as though it has stopped responding while they are running. When you want a responsive UI and you are faced with long delays associated with such operations, the <xref:System.ComponentModel.BackgroundWorker> class provides a convenient solution.","nodes":[{"content":"The <xref:System.ComponentModel.BackgroundWorker> class allows you to run an operation on a separate, dedicated thread. Time-consuming operations like downloads and database transactions can cause your user interface (UI) to seem as though it has stopped responding while they are running. When you want a responsive UI and you are faced with long delays associated with such operations, the <xref:System.ComponentModel.BackgroundWorker> class provides a convenient solution.","pos":[0,475],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class allows you to run an operation on a separate, dedicated thread.","pos":[0,119],"source":"The <xref:System.ComponentModel.BackgroundWorker> class allows you to run an operation on a separate, dedicated thread."},{"content":"Time-consuming operations like downloads and database transactions can cause your user interface (UI) to seem as though it has stopped responding while they are running.","pos":[120,289]},{"content":"When you want a responsive UI and you are faced with long delays associated with such operations, the <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class provides a convenient solution.","pos":[290,475],"source":" When you want a responsive UI and you are faced with long delays associated with such operations, the <xref:System.ComponentModel.BackgroundWorker> class provides a convenient solution."}]}]},{"pos":[482,1062],"content":"To execute a time-consuming operation in the background, create a <xref:System.ComponentModel.BackgroundWorker> and listen for events that report the progress of your operation and signal when your operation is finished. You can create the <xref:System.ComponentModel.BackgroundWorker> programmatically or you can drag it onto your form from the **Components** tab of the **Toolbox**. If you create the <xref:System.ComponentModel.BackgroundWorker> in the Windows Forms Designer, it will appear in the Component Tray, and its properties will be displayed in the Properties window.","nodes":[{"content":"To execute a time-consuming operation in the background, create a <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> and listen for events that report the progress of your operation and signal when your operation is finished.","pos":[0,220],"source":"To execute a time-consuming operation in the background, create a <xref:System.ComponentModel.BackgroundWorker> and listen for events that report the progress of your operation and signal when your operation is finished."},{"content":"You can create the <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> programmatically or you can drag it onto your form from the <bpt id=\"p1\">**</bpt>Components<ept id=\"p1\">**</ept> tab of the <bpt id=\"p2\">**</bpt>Toolbox<ept id=\"p2\">**</ept>.","pos":[221,384],"source":" You can create the <xref:System.ComponentModel.BackgroundWorker> programmatically or you can drag it onto your form from the **Components** tab of the **Toolbox**."},{"content":"If you create the <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> in the Windows Forms Designer, it will appear in the Component Tray, and its properties will be displayed in the Properties window.","pos":[385,580],"source":" If you create the <xref:System.ComponentModel.BackgroundWorker> in the Windows Forms Designer, it will appear in the Component Tray, and its properties will be displayed in the Properties window."}]},{"pos":[1069,1615],"content":"To set up for a background operation, add an event handler for the <xref:System.ComponentModel.BackgroundWorker.DoWork> event. Call your time-consuming operation in this event handler. To start the operation, call <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>. To receive notifications of progress updates, handle the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event. To receive a notification when the operation is completed, handle the <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event.","nodes":[{"content":"To set up for a background operation, add an event handler for the <xref:System.ComponentModel.BackgroundWorker.DoWork> event. Call your time-consuming operation in this event handler. To start the operation, call <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>. To receive notifications of progress updates, handle the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event. To receive a notification when the operation is completed, handle the <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event.","pos":[0,546],"nodes":[{"content":"To set up for a background operation, add an event handler for the <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event.","pos":[0,126],"source":"To set up for a background operation, add an event handler for the <xref:System.ComponentModel.BackgroundWorker.DoWork> event."},{"content":"Call your time-consuming operation in this event handler.","pos":[127,184]},{"content":"To start the operation, call <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph>.","pos":[185,278],"source":" To start the operation, call <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>."},{"content":"To receive notifications of progress updates, handle the <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> event.","pos":[279,404],"source":" To receive notifications of progress updates, handle the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event."},{"content":"To receive a notification when the operation is completed, handle the <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event.","pos":[405,546],"source":" To receive a notification when the operation is completed, handle the <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event."}]}]},{"pos":[1623,1968],"content":"[!NOTE]\n You must be careful not to manipulate any user-interface objects in your <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler. Instead, communicate to the user interface through the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> and <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> events.","leadings":["","> "],"nodes":[{"content":" You must be careful not to manipulate any user-interface objects in your <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler. Instead, communicate to the user interface through the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> and <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> events.","pos":[8,343],"nodes":[{"content":"You must be careful not to manipulate any user-interface objects in your <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler.","pos":[1,141],"source":" You must be careful not to manipulate any user-interface objects in your <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler."},{"content":"Instead, communicate to the user interface through the <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> events.","pos":[142,335],"source":" Instead, communicate to the user interface through the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> and <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> events."}]}]},{"pos":[1979,2239],"content":"<xref:System.ComponentModel.BackgroundWorker> events are not marshaled across <xref:System.AppDomain> boundaries. Do not use a <xref:System.ComponentModel.BackgroundWorker> component to perform multithreaded operations in more than one <xref:System.AppDomain>.","nodes":[{"content":"<xref:System.ComponentModel.BackgroundWorker> events are not marshaled across <xref:System.AppDomain> boundaries. Do not use a <xref:System.ComponentModel.BackgroundWorker> component to perform multithreaded operations in more than one <xref:System.AppDomain>.","pos":[0,260],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> events are not marshaled across <ph id=\"ph2\">&lt;xref:System.AppDomain&gt;</ph> boundaries.","pos":[0,113],"source":"<xref:System.ComponentModel.BackgroundWorker> events are not marshaled across <xref:System.AppDomain> boundaries."},{"content":"Do not use a <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> component to perform multithreaded operations in more than one <ph id=\"ph2\">&lt;xref:System.AppDomain&gt;</ph>.","pos":[114,260],"source":" Do not use a <xref:System.ComponentModel.BackgroundWorker> component to perform multithreaded operations in more than one <xref:System.AppDomain>."}]}]},{"pos":[2246,2596],"content":"If your background operation requires a parameter, call <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> with your parameter. Inside the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler, you can extract the parameter from the <xref:System.ComponentModel.DoWorkEventArgs.Argument%2A?displayProperty=fullName> property.","nodes":[{"content":"If your background operation requires a parameter, call <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> with your parameter. Inside the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler, you can extract the parameter from the <xref:System.ComponentModel.DoWorkEventArgs.Argument%2A?displayProperty=fullName> property.","pos":[0,350],"nodes":[{"content":"If your background operation requires a parameter, call <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> with your parameter.","pos":[0,140],"source":"If your background operation requires a parameter, call <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> with your parameter."},{"content":"Inside the <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler, you can extract the parameter from the <ph id=\"ph2\">&lt;xref:System.ComponentModel.DoWorkEventArgs.Argument%2A?displayProperty=fullName&gt;</ph> property.","pos":[141,350],"source":" Inside the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler, you can extract the parameter from the <xref:System.ComponentModel.DoWorkEventArgs.Argument%2A?displayProperty=fullName> property."}]}]},{"pos":[2603,2807],"content":"For more information about <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>, see <bpt id=\"p1\">[</bpt>How to: Run an Operation in the Background<ept id=\"p1\">](~/docs/framework/winforms/controls/how-to-run-an-operation-in-the-background.md)</ept>.","source":"For more information about <xref:System.ComponentModel.BackgroundWorker>, see [How to: Run an Operation in the Background](~/docs/framework/winforms/controls/how-to-run-an-operation-in-the-background.md)."}],"pos":[1743,4566],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.ComponentModel.BackgroundWorker\"></xref> class.","nodes":[{"pos":[0,100],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.BackgroundWorker\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.ComponentModel.BackgroundWorker\"></xref> class."}],"pos":[8823,8924],"yaml":true},{"content":"This constructor initializes a <xref:System.ComponentModel.BackgroundWorker>.","nodes":[{"pos":[0,77],"content":"This constructor initializes a <xref:System.ComponentModel.BackgroundWorker>.","nodes":[{"content":"This constructor initializes a <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>.","pos":[0,77],"source":"This constructor initializes a <xref:System.ComponentModel.BackgroundWorker>."}]}],"pos":[8935,9013],"yaml":true,"extradata":"MT"},{"content":"Requests cancellation of a pending background operation.","nodes":[{"pos":[0,56],"content":"Requests cancellation of a pending background operation.","nodes":[{"content":"Requests cancellation of a pending background operation.","pos":[0,56]}]}],"pos":[10423,10480],"yaml":true},{"content":"<xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> submits a request to terminate the pending background operation and sets the <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> property to `true`.  \n  \n When you call <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A>, your worker method has an opportunity to stop its execution and exit. The worker code should periodically check the <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> property to see if it has been set to `true`.  \n  \n> [!CAUTION]\n>  Be aware that your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> being set to `true`. In this case, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName> in your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler will not be set to `true`, even though a cancellation request was made. This situation is called a *race condition* and is a common concern in multithreaded programming. For more information about multithreading design issues, see [Managed Threading Best Practices](~/docs/standard/threading/managed-threading-best-practices.md).","nodes":[{"pos":[0,226],"content":"<ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A&gt;</ph> submits a request to terminate the pending background operation and sets the <ph id=\"ph2\">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> property to <ph id=\"ph3\">`true`</ph>.","source":"<xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> submits a request to terminate the pending background operation and sets the <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> property to `true`."},{"pos":[233,539],"content":"When you call <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A>, your worker method has an opportunity to stop its execution and exit. The worker code should periodically check the <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> property to see if it has been set to `true`.","nodes":[{"content":"When you call <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A&gt;</ph>, your worker method has an opportunity to stop its execution and exit.","pos":[0,145],"source":"When you call <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A>, your worker method has an opportunity to stop its execution and exit."},{"content":"The worker code should periodically check the <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> property to see if it has been set to <ph id=\"ph2\">`true`</ph>.","pos":[146,306],"source":" The worker code should periodically check the <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> property to see if it has been set to `true`."}]},{"pos":[547,1431],"content":"[!CAUTION]\n Be aware that your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> being set to `true`. In this case, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName> in your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler will not be set to `true`, even though a cancellation request was made. This situation is called a *race condition* and is a common concern in multithreaded programming. For more information about multithreading design issues, see [Managed Threading Best Practices](~/docs/standard/threading/managed-threading-best-practices.md).","leadings":["","> "],"nodes":[{"content":" Be aware that your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> being set to `true`. In this case, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName> in your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler will not be set to `true`, even though a cancellation request was made. This situation is called a *race condition* and is a common concern in multithreaded programming. For more information about multithreading design issues, see [Managed Threading Best Practices](~/docs/standard/threading/managed-threading-best-practices.md).","pos":[11,882],"nodes":[{"content":"Be aware that your code in the <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <ph id=\"ph2\">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> being set to <ph id=\"ph3\">`true`</ph>.","pos":[1,280],"source":" Be aware that your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> being set to `true`."},{"content":"In this case, the <ph id=\"ph1\">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> flag of <ph id=\"ph2\">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName&gt;</ph> in your <ph id=\"ph3\">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event handler will not be set to <ph id=\"ph4\">`true`</ph>, even though a cancellation request was made.","pos":[281,613],"source":" In this case, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName> in your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler will not be set to `true`, even though a cancellation request was made."},{"content":"This situation is called a <bpt id=\"p1\">*</bpt>race condition<ept id=\"p1\">*</ept> and is a common concern in multithreaded programming.","pos":[614,711],"source":" This situation is called a *race condition* and is a common concern in multithreaded programming."},{"content":"For more information about multithreading design issues, see <bpt id=\"p1\">[</bpt>Managed Threading Best Practices<ept id=\"p1\">](~/docs/standard/threading/managed-threading-best-practices.md)</ept>.","pos":[712,871],"source":" For more information about multithreading design issues, see [Managed Threading Best Practices](~/docs/standard/threading/managed-threading-best-practices.md)."}]}]}],"pos":[10491,11930],"yaml":true,"extradata":"MT"},{"content":"<xref href=\"System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation\"></xref> is `false`.","nodes":[{"pos":[0,98],"content":"<ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation\"&gt;&lt;/xref&gt;</ph> is <ph id=\"ph2\">`false`</ph>.","source":"<xref href=\"System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation\"></xref> is `false`."}],"pos":[13005,13104],"yaml":true},{"content":"Gets a value indicating whether the application has requested cancellation of a background operation.","nodes":[{"pos":[0,101],"content":"Gets a value indicating whether the application has requested cancellation of a background operation.","nodes":[{"content":"Gets a value indicating whether the application has requested cancellation of a background operation.","pos":[0,101]}]}],"pos":[14413,14515],"yaml":true},{"content":"If <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> is `true`, then the <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> method has been called on the <xref:System.ComponentModel.BackgroundWorker>.  \n  \n This property is meant for use by the worker thread, which should periodically check <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> and abort the background operation when it is set to `true`.","nodes":[{"pos":[0,229],"content":"If <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> is <ph id=\"ph2\">`true`</ph>, then the <ph id=\"ph3\">&lt;xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A&gt;</ph> method has been called on the <ph id=\"ph4\">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>.","source":"If <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> is `true`, then the <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> method has been called on the <xref:System.ComponentModel.BackgroundWorker>."},{"pos":[236,450],"content":"This property is meant for use by the worker thread, which should periodically check <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> and abort the background operation when it is set to <ph id=\"ph2\">`true`</ph>.","source":"This property is meant for use by the worker thread, which should periodically check <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> and abort the background operation when it is set to `true`."}],"pos":[14526,14981],"yaml":true,"extradata":"MT"},{"content":"`true` if the application has requested cancellation of a background operation; otherwise, `false`. The default is `false`.","nodes":[{"pos":[0,123],"content":"`true` if the application has requested cancellation of a background operation; otherwise, `false`. The default is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the application has requested cancellation of a background operation; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,99],"source":"`true` if the application has requested cancellation of a background operation; otherwise, `false`."},{"content":"The default is <ph id=\"ph1\">`false`</ph>.","pos":[100,123],"source":" The default is `false`."}]}],"pos":[16020,16146],"yaml":true},{"content":"Occurs when <xref href=\"System.ComponentModel.BackgroundWorker.RunWorkerAsync\"></xref> is called.","nodes":[{"pos":[0,97],"content":"Occurs when <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.BackgroundWorker.RunWorkerAsync\"&gt;&lt;/xref&gt;</ph> is called.","source":"Occurs when <xref href=\"System.ComponentModel.BackgroundWorker.RunWorkerAsync\"></xref> is called."}],"pos":[19272,19370],"yaml":true},{"content":"This event is raised when you call the <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method. This is where you start the operation that performs the potentially time-consuming work.  \n  \n Your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler should periodically check the <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> property value and abort the operation if it is `true`. When this occurs, you can set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> flag of <xref:System.ComponentModel.DoWorkEventArgs?displayProperty=fullName> to `true`, and the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName> in your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler will be set to `true`.  \n  \n> [!CAUTION]\n>  Be aware that your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> being set to `true`. In this case, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName> in your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler will not be set to `true`, even though a cancellation request was made. This situation is called a *race condition* and is a common concern in multithreaded programming. For more information about multithreading design issues, see [Managed Threading Best Practices](~/docs/standard/threading/managed-threading-best-practices.md).  \n  \n If your operation produces a result, you can assign the result to the <xref:System.ComponentModel.DoWorkEventArgs.Result%2A?displayProperty=fullName> property. This will be available to the <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler in the <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=fullName> property.  \n  \n If the operation raises an exception that your code does not handle, the <xref:System.ComponentModel.BackgroundWorker> catches the exception and passes it into the <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler, where it is exposed as the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName>. If you are running under the Visual Studio debugger, the debugger will break at the point in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler where the unhandled exception was raised. If you have more than one <xref:System.ComponentModel.BackgroundWorker>, you should not reference any of them directly, as this would couple your <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler to a specific instance of <xref:System.ComponentModel.BackgroundWorker>. Instead, you should access your <xref:System.ComponentModel.BackgroundWorker> by casting the `sender` parameter in your <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler.  \n  \n You must be careful not to manipulate any user-interface objects in your <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler. Instead, communicate to the user interface through the <xref:System.ComponentModel.BackgroundWorker> events.  \n  \n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).","nodes":[{"pos":[0,199],"content":"This event is raised when you call the <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method. This is where you start the operation that performs the potentially time-consuming work.","nodes":[{"content":"This event is raised when you call the <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method. This is where you start the operation that performs the potentially time-consuming work.","pos":[0,199],"nodes":[{"content":"This event is raised when you call the <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> method.","pos":[0,110],"source":"This event is raised when you call the <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method."},{"content":"This is where you start the operation that performs the potentially time-consuming work.","pos":[111,199]}]}]},{"pos":[206,896],"content":"Your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler should periodically check the <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> property value and abort the operation if it is `true`. When this occurs, you can set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> flag of <xref:System.ComponentModel.DoWorkEventArgs?displayProperty=fullName> to `true`, and the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName> in your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler will be set to `true`.","nodes":[{"content":"Your code in the <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler should periodically check the <ph id=\"ph2\">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> property value and abort the operation if it is <ph id=\"ph3\">`true`</ph>.","pos":[0,238],"source":"Your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler should periodically check the <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> property value and abort the operation if it is `true`."},{"content":"When this occurs, you can set the <ph id=\"ph1\">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph> flag of <ph id=\"ph2\">&lt;xref:System.ComponentModel.DoWorkEventArgs?displayProperty=fullName&gt;</ph> to <ph id=\"ph3\">`true`</ph>, and the <ph id=\"ph4\">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> flag of <ph id=\"ph5\">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName&gt;</ph> in your <ph id=\"ph6\">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event handler will be set to <ph id=\"ph7\">`true`</ph>.","pos":[239,690],"source":" When this occurs, you can set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> flag of <xref:System.ComponentModel.DoWorkEventArgs?displayProperty=fullName> to `true`, and the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName> in your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler will be set to `true`."}]},{"pos":[904,1788],"content":"[!CAUTION]\n Be aware that your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> being set to `true`. In this case, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName> in your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler will not be set to `true`, even though a cancellation request was made. This situation is called a *race condition* and is a common concern in multithreaded programming. For more information about multithreading design issues, see [Managed Threading Best Practices](~/docs/standard/threading/managed-threading-best-practices.md).","leadings":["","> "],"nodes":[{"content":" Be aware that your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> being set to `true`. In this case, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName> in your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler will not be set to `true`, even though a cancellation request was made. This situation is called a *race condition* and is a common concern in multithreaded programming. For more information about multithreading design issues, see [Managed Threading Best Practices](~/docs/standard/threading/managed-threading-best-practices.md).","pos":[11,882],"nodes":[{"content":"Be aware that your code in the <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <ph id=\"ph2\">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> being set to <ph id=\"ph3\">`true`</ph>.","pos":[1,280],"source":" Be aware that your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> being set to `true`."},{"content":"In this case, the <ph id=\"ph1\">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> flag of <ph id=\"ph2\">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName&gt;</ph> in your <ph id=\"ph3\">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event handler will not be set to <ph id=\"ph4\">`true`</ph>, even though a cancellation request was made.","pos":[281,613],"source":" In this case, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName> in your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler will not be set to `true`, even though a cancellation request was made."},{"content":"This situation is called a <bpt id=\"p1\">*</bpt>race condition<ept id=\"p1\">*</ept> and is a common concern in multithreaded programming.","pos":[614,711],"source":" This situation is called a *race condition* and is a common concern in multithreaded programming."},{"content":"For more information about multithreading design issues, see <bpt id=\"p1\">[</bpt>Managed Threading Best Practices<ept id=\"p1\">](~/docs/standard/threading/managed-threading-best-practices.md)</ept>.","pos":[712,871],"source":" For more information about multithreading design issues, see [Managed Threading Best Practices](~/docs/standard/threading/managed-threading-best-practices.md)."}]}]},{"pos":[1795,2172],"content":"If your operation produces a result, you can assign the result to the <xref:System.ComponentModel.DoWorkEventArgs.Result%2A?displayProperty=fullName> property. This will be available to the <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler in the <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=fullName> property.","nodes":[{"content":"If your operation produces a result, you can assign the result to the <xref:System.ComponentModel.DoWorkEventArgs.Result%2A?displayProperty=fullName> property. This will be available to the <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler in the <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=fullName> property.","pos":[0,377],"nodes":[{"content":"If your operation produces a result, you can assign the result to the <ph id=\"ph1\">&lt;xref:System.ComponentModel.DoWorkEventArgs.Result%2A?displayProperty=fullName&gt;</ph> property.","pos":[0,159],"source":"If your operation produces a result, you can assign the result to the <xref:System.ComponentModel.DoWorkEventArgs.Result%2A?displayProperty=fullName> property."},{"content":"This will be available to the <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event handler in the <ph id=\"ph2\">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=fullName&gt;</ph> property.","pos":[160,377],"source":" This will be available to the <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler in the <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=fullName> property."}]}]},{"pos":[2179,3286],"content":"If the operation raises an exception that your code does not handle, the <xref:System.ComponentModel.BackgroundWorker> catches the exception and passes it into the <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler, where it is exposed as the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName>. If you are running under the Visual Studio debugger, the debugger will break at the point in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler where the unhandled exception was raised. If you have more than one <xref:System.ComponentModel.BackgroundWorker>, you should not reference any of them directly, as this would couple your <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler to a specific instance of <xref:System.ComponentModel.BackgroundWorker>. Instead, you should access your <xref:System.ComponentModel.BackgroundWorker> by casting the `sender` parameter in your <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler.","nodes":[{"content":"If the operation raises an exception that your code does not handle, the <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> catches the exception and passes it into the <ph id=\"ph2\">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event handler, where it is exposed as the <ph id=\"ph3\">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A&gt;</ph> property of <ph id=\"ph4\">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName&gt;</ph>.","pos":[0,427],"source":"If the operation raises an exception that your code does not handle, the <xref:System.ComponentModel.BackgroundWorker> catches the exception and passes it into the <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler, where it is exposed as the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName>."},{"content":"If you are running under the Visual Studio debugger, the debugger will break at the point in the <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler where the unhandled exception was raised.","pos":[428,633],"source":" If you are running under the Visual Studio debugger, the debugger will break at the point in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler where the unhandled exception was raised."},{"content":"If you have more than one <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>, you should not reference any of them directly, as this would couple your <ph id=\"ph2\">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler to a specific instance of <ph id=\"ph3\">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>.","pos":[634,919],"source":" If you have more than one <xref:System.ComponentModel.BackgroundWorker>, you should not reference any of them directly, as this would couple your <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler to a specific instance of <xref:System.ComponentModel.BackgroundWorker>."},{"content":"Instead, you should access your <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> by casting the <ph id=\"ph2\">`sender`</ph> parameter in your <ph id=\"ph3\">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler.","pos":[920,1107],"source":" Instead, you should access your <xref:System.ComponentModel.BackgroundWorker> by casting the `sender` parameter in your <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler."}]},{"pos":[3293,3542],"content":"You must be careful not to manipulate any user-interface objects in your <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler. Instead, communicate to the user interface through the <xref:System.ComponentModel.BackgroundWorker> events.","nodes":[{"content":"You must be careful not to manipulate any user-interface objects in your <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler. Instead, communicate to the user interface through the <xref:System.ComponentModel.BackgroundWorker> events.","pos":[0,249],"nodes":[{"content":"You must be careful not to manipulate any user-interface objects in your <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler.","pos":[0,140],"source":"You must be careful not to manipulate any user-interface objects in your <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler."},{"content":"Instead, communicate to the user interface through the <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> events.","pos":[141,249],"source":" Instead, communicate to the user interface through the <xref:System.ComponentModel.BackgroundWorker> events."}]}]},{"pos":[3549,3691],"content":"For more information about handling events, see <bpt id=\"p1\">[</bpt>NIB: Consuming Events<ept id=\"p1\">](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.","source":"For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."}],"pos":[19381,23088],"yaml":true,"extradata":"MT"},{"content":"Gets a value indicating whether the <xref href=\"System.ComponentModel.BackgroundWorker\"></xref> is running an asynchronous operation.","nodes":[{"pos":[0,133],"content":"Gets a value indicating whether the <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.BackgroundWorker\"&gt;&lt;/xref&gt;</ph> is running an asynchronous operation.","source":"Gets a value indicating whether the <xref href=\"System.ComponentModel.BackgroundWorker\"></xref> is running an asynchronous operation."}],"pos":[25298,25432],"yaml":true},{"content":"The <xref:System.ComponentModel.BackgroundWorker> starts an asynchronous operation when you call <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>.","nodes":[{"pos":[0,161],"content":"The <xref:System.ComponentModel.BackgroundWorker> starts an asynchronous operation when you call <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> starts an asynchronous operation when you call <ph id=\"ph2\">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph>.","pos":[0,161],"source":"The <xref:System.ComponentModel.BackgroundWorker> starts an asynchronous operation when you call <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>."}]}],"pos":[25443,25605],"yaml":true,"extradata":"MT"},{"content":"`true`, if the <xref href=\"System.ComponentModel.BackgroundWorker\"></xref> is running an asynchronous operation; otherwise, `false`.","nodes":[{"pos":[0,132],"content":"<ph id=\"ph1\">`true`</ph>, if the <ph id=\"ph2\">&lt;xref href=\"System.ComponentModel.BackgroundWorker\"&gt;&lt;/xref&gt;</ph> is running an asynchronous operation; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true`, if the <xref href=\"System.ComponentModel.BackgroundWorker\"></xref> is running an asynchronous operation; otherwise, `false`."}],"pos":[26532,26667],"yaml":true},{"content":"Raises the <xref href=\"System.ComponentModel.BackgroundWorker.DoWork\"></xref> event.","nodes":[{"pos":[0,84],"content":"Raises the <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.BackgroundWorker.DoWork\"&gt;&lt;/xref&gt;</ph> event.","source":"Raises the <xref href=\"System.ComponentModel.BackgroundWorker.DoWork\"></xref> event."}],"pos":[28217,28302],"yaml":true},{"content":"An <xref href=\"System.EventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,70],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.EventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"An <xref href=\"System.EventArgs\"></xref> that contains the event data."}],"pos":[28497,28568],"yaml":true},{"content":"Raises the <xref href=\"System.ComponentModel.BackgroundWorker.ProgressChanged\"></xref> event.","nodes":[{"pos":[0,93],"content":"Raises the <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.BackgroundWorker.ProgressChanged\"&gt;&lt;/xref&gt;</ph> event.","source":"Raises the <xref href=\"System.ComponentModel.BackgroundWorker.ProgressChanged\"></xref> event."}],"pos":[30163,30257],"yaml":true},{"content":"Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  \n  \n The <xref:System.ComponentModel.BackgroundWorker.OnProgressChanged%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","nodes":[{"pos":[0,183],"content":"Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).","nodes":[{"content":"Raising an event invokes the event handler through a delegate.","pos":[0,62]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>NIB: Raising an Event<ept id=\"p1\">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.","pos":[63,183],"source":" For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)."}]},{"pos":[190,420],"content":"The <xref:System.ComponentModel.BackgroundWorker.OnProgressChanged%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","nodes":[{"content":"The <xref:System.ComponentModel.BackgroundWorker.OnProgressChanged%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","pos":[0,230],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker.OnProgressChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.","pos":[0,155],"source":"The <xref:System.ComponentModel.BackgroundWorker.OnProgressChanged%2A> method also allows derived classes to handle the event without attaching a delegate."},{"content":"This is the preferred technique for handling the event in a derived class.","pos":[156,230]}]}]}],"pos":[30268,30693],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.EventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,70],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.EventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"An <xref href=\"System.EventArgs\"></xref> that contains the event data."}],"pos":[31626,31697],"yaml":true},{"content":"Raises the <xref href=\"System.ComponentModel.BackgroundWorker.RunWorkerCompleted\"></xref> event.","nodes":[{"pos":[0,96],"content":"Raises the <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.BackgroundWorker.RunWorkerCompleted\"&gt;&lt;/xref&gt;</ph> event.","source":"Raises the <xref href=\"System.ComponentModel.BackgroundWorker.RunWorkerCompleted\"></xref> event."}],"pos":[33337,33434],"yaml":true},{"content":"Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  \n  \n The <xref:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","nodes":[{"pos":[0,183],"content":"Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).","nodes":[{"content":"Raising an event invokes the event handler through a delegate.","pos":[0,62]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>NIB: Raising an Event<ept id=\"p1\">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.","pos":[63,183],"source":" For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)."}]},{"pos":[190,423],"content":"The <xref:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","nodes":[{"content":"The <xref:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","pos":[0,233],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.","pos":[0,158],"source":"The <xref:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted%2A> method also allows derived classes to handle the event without attaching a delegate."},{"content":"This is the preferred technique for handling the event in a derived class.","pos":[159,233]}]}]}],"pos":[33445,33873],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.EventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,70],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.EventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"An <xref href=\"System.EventArgs\"></xref> that contains the event data."}],"pos":[34104,34175],"yaml":true},{"content":"Occurs when <xref href=\"System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)\"></xref> is called.","nodes":[{"pos":[0,111],"content":"Occurs when <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)\"&gt;&lt;/xref&gt;</ph> is called.","source":"Occurs when <xref href=\"System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)\"></xref> is called."}],"pos":[35547,35659],"yaml":true},{"content":"This event is raised when you call the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method.  \n  \n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).","nodes":[{"pos":[0,110],"content":"This event is raised when you call the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method.","nodes":[{"content":"This event is raised when you call the <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> method.","pos":[0,110],"source":"This event is raised when you call the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method."}]},{"pos":[117,259],"content":"For more information about handling events, see <bpt id=\"p1\">[</bpt>NIB: Consuming Events<ept id=\"p1\">](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.","source":"For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."}],"pos":[35670,35934],"yaml":true,"extradata":"MT"},{"content":"Raises the <xref href=\"System.ComponentModel.BackgroundWorker.ProgressChanged\"></xref> event.","nodes":[{"pos":[0,93],"content":"Raises the <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.BackgroundWorker.ProgressChanged\"&gt;&lt;/xref&gt;</ph> event.","source":"Raises the <xref href=\"System.ComponentModel.BackgroundWorker.ProgressChanged\"></xref> event."}],"pos":[38318,38412],"yaml":true},{"content":"If you need the background operation to report on its progress, you can call the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method to raise the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event. The <xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A> property value must be `true`, or <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> will throw an <xref:System.InvalidOperationException>.  \n  \n It is up to you to implement a meaningful way of measuring your background operation's progress as a percentage of the total task completed.  \n  \n The call to the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method is asynchronous and returns immediately. The <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event handler executes on the thread that created the <xref:System.ComponentModel.BackgroundWorker>.","nodes":[{"pos":[0,461],"content":"If you need the background operation to report on its progress, you can call the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method to raise the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event. The <xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A> property value must be `true`, or <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> will throw an <xref:System.InvalidOperationException>.","nodes":[{"content":"If you need the background operation to report on its progress, you can call the <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> method to raise the <ph id=\"ph2\">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> event.","pos":[0,233],"source":"If you need the background operation to report on its progress, you can call the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method to raise the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event."},{"content":"The <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A&gt;</ph> property value must be <ph id=\"ph2\">`true`</ph>, or <ph id=\"ph3\">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> will throw an <ph id=\"ph4\">&lt;xref:System.InvalidOperationException&gt;</ph>.","pos":[234,461],"source":" The <xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A> property value must be `true`, or <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> will throw an <xref:System.InvalidOperationException>."}]},{"pos":[468,608],"content":"It is up to you to implement a meaningful way of measuring your background operation's progress as a percentage of the total task completed.","nodes":[{"content":"It is up to you to implement a meaningful way of measuring your background operation's progress as a percentage of the total task completed.","pos":[0,140]}]},{"pos":[615,909],"content":"The call to the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method is asynchronous and returns immediately. The <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event handler executes on the thread that created the <xref:System.ComponentModel.BackgroundWorker>.","nodes":[{"content":"The call to the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method is asynchronous and returns immediately. The <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event handler executes on the thread that created the <xref:System.ComponentModel.BackgroundWorker>.","pos":[0,294],"nodes":[{"content":"The call to the <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> method is asynchronous and returns immediately.","pos":[0,127],"source":"The call to the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method is asynchronous and returns immediately."},{"content":"The <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> event handler executes on the thread that created the <ph id=\"ph2\">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>.","pos":[128,294],"source":" The <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event handler executes on the thread that created the <xref:System.ComponentModel.BackgroundWorker>."}]}]}],"pos":[38423,39339],"yaml":true,"extradata":"MT"},{"content":"The percentage, from 0 to 100, of the background operation that is complete.","nodes":[{"pos":[0,76],"content":"The percentage, from 0 to 100, of the background operation that is complete.","nodes":[{"content":"The percentage, from 0 to 100, of the background operation that is complete.","pos":[0,76]}]}],"pos":[40329,40406],"yaml":true},{"content":"The <xref href=\"System.ComponentModel.BackgroundWorker.WorkerReportsProgress\"></xref> property is set to `false`.","nodes":[{"pos":[0,113],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.BackgroundWorker.WorkerReportsProgress\"&gt;&lt;/xref&gt;</ph> property is set to <ph id=\"ph2\">`false`</ph>.","source":"The <xref href=\"System.ComponentModel.BackgroundWorker.WorkerReportsProgress\"></xref> property is set to `false`."}],"pos":[40597,40711],"yaml":true},{"content":"Raises the <xref href=\"System.ComponentModel.BackgroundWorker.ProgressChanged\"></xref> event.","nodes":[{"pos":[0,93],"content":"Raises the <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.BackgroundWorker.ProgressChanged\"&gt;&lt;/xref&gt;</ph> event.","source":"Raises the <xref href=\"System.ComponentModel.BackgroundWorker.ProgressChanged\"></xref> event."}],"pos":[42117,42211],"yaml":true},{"content":"If you need the background operation to report on its progress, you can call the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method to raise the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event. The <xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A> property value must `true`, or <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> will throw an <xref:System.InvalidOperationException>.  \n  \n It is up to you to implement a meaningful way of measuring your background operation's progress as a percentage of the total task completed.","nodes":[{"pos":[0,458],"content":"If you need the background operation to report on its progress, you can call the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method to raise the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event. The <xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A> property value must `true`, or <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> will throw an <xref:System.InvalidOperationException>.","nodes":[{"content":"If you need the background operation to report on its progress, you can call the <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> method to raise the <ph id=\"ph2\">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> event.","pos":[0,233],"source":"If you need the background operation to report on its progress, you can call the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method to raise the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event."},{"content":"The <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A&gt;</ph> property value must <ph id=\"ph2\">`true`</ph>, or <ph id=\"ph3\">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> will throw an <ph id=\"ph4\">&lt;xref:System.InvalidOperationException&gt;</ph>.","pos":[234,458],"source":" The <xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A> property value must `true`, or <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> will throw an <xref:System.InvalidOperationException>."}]},{"pos":[465,605],"content":"It is up to you to implement a meaningful way of measuring your background operation's progress as a percentage of the total task completed.","nodes":[{"content":"It is up to you to implement a meaningful way of measuring your background operation's progress as a percentage of the total task completed.","pos":[0,140]}]}],"pos":[42222,42832],"yaml":true,"extradata":"MT"},{"content":"The percentage, from 0 to 100, of the background operation that is complete.","nodes":[{"pos":[0,76],"content":"The percentage, from 0 to 100, of the background operation that is complete.","nodes":[{"content":"The percentage, from 0 to 100, of the background operation that is complete.","pos":[0,76]}]}],"pos":[43679,43756],"yaml":true},{"content":"The state object passed to <xref href=\"System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)\"></xref>.","nodes":[{"pos":[0,117],"content":"The state object passed to <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)\"&gt;&lt;/xref&gt;</ph>.","source":"The state object passed to <xref href=\"System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)\"></xref>."}],"pos":[43821,43939],"yaml":true},{"content":"The <xref href=\"System.ComponentModel.BackgroundWorker.WorkerReportsProgress\"></xref> property is set to `false`.","nodes":[{"pos":[0,113],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.BackgroundWorker.WorkerReportsProgress\"&gt;&lt;/xref&gt;</ph> property is set to <ph id=\"ph2\">`false`</ph>.","source":"The <xref href=\"System.ComponentModel.BackgroundWorker.WorkerReportsProgress\"></xref> property is set to `false`."}],"pos":[44130,44244],"yaml":true},{"content":"Starts execution of a background operation.","nodes":[{"pos":[0,43],"content":"Starts execution of a background operation.","nodes":[{"content":"Starts execution of a background operation.","pos":[0,43]}]}],"pos":[45527,45571],"yaml":true},{"content":"The <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method submits a request to start the operation running asynchronously. When the request is serviced, the <xref:System.ComponentModel.BackgroundWorker.DoWork> event is raised, which in turn starts execution of your background operation.  \n  \n If the background operation is already running, calling <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> again will raise an <xref:System.InvalidOperationException>.","nodes":[{"pos":[0,304],"content":"The <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method submits a request to start the operation running asynchronously. When the request is serviced, the <xref:System.ComponentModel.BackgroundWorker.DoWork> event is raised, which in turn starts execution of your background operation.","nodes":[{"content":"The <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method submits a request to start the operation running asynchronously. When the request is serviced, the <xref:System.ComponentModel.BackgroundWorker.DoWork> event is raised, which in turn starts execution of your background operation.","pos":[0,304],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> method submits a request to start the operation running asynchronously.","pos":[0,139],"source":"The <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method submits a request to start the operation running asynchronously."},{"content":"When the request is serviced, the <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event is raised, which in turn starts execution of your background operation.","pos":[140,304],"source":" When the request is serviced, the <xref:System.ComponentModel.BackgroundWorker.DoWork> event is raised, which in turn starts execution of your background operation."}]}]},{"pos":[311,491],"content":"If the background operation is already running, calling <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> again will raise an <xref:System.InvalidOperationException>.","nodes":[{"content":"If the background operation is already running, calling <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> again will raise an <ph id=\"ph2\">&lt;xref:System.InvalidOperationException&gt;</ph>.","pos":[0,180],"source":"If the background operation is already running, calling <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> again will raise an <xref:System.InvalidOperationException>."}]}],"pos":[45582,46078],"yaml":true,"extradata":"MT"},{"content":"<xref href=\"System.ComponentModel.BackgroundWorker.IsBusy\"></xref> is `true`.","nodes":[{"pos":[0,77],"content":"<ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.BackgroundWorker.IsBusy\"&gt;&lt;/xref&gt;</ph> is <ph id=\"ph2\">`true`</ph>.","source":"<xref href=\"System.ComponentModel.BackgroundWorker.IsBusy\"></xref> is `true`."}],"pos":[47045,47123],"yaml":true},{"content":"Starts execution of a background operation.","nodes":[{"pos":[0,43],"content":"Starts execution of a background operation.","nodes":[{"content":"Starts execution of a background operation.","pos":[0,43]}]}],"pos":[48469,48513],"yaml":true},{"content":"The <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method submits a request to start the operation running asynchronously. When the request is serviced, the <xref:System.ComponentModel.BackgroundWorker.DoWork> event is raised, which in turn starts execution of your background operation.  \n  \n If your operation requires a parameter, you can provide it as the `argument` parameter to <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>.  \n  \n If the background operation is already running, calling <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> again will raise an <xref:System.InvalidOperationException>.","nodes":[{"pos":[0,304],"content":"The <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method submits a request to start the operation running asynchronously. When the request is serviced, the <xref:System.ComponentModel.BackgroundWorker.DoWork> event is raised, which in turn starts execution of your background operation.","nodes":[{"content":"The <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method submits a request to start the operation running asynchronously. When the request is serviced, the <xref:System.ComponentModel.BackgroundWorker.DoWork> event is raised, which in turn starts execution of your background operation.","pos":[0,304],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> method submits a request to start the operation running asynchronously.","pos":[0,139],"source":"The <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method submits a request to start the operation running asynchronously."},{"content":"When the request is serviced, the <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event is raised, which in turn starts execution of your background operation.","pos":[140,304],"source":" When the request is serviced, the <xref:System.ComponentModel.BackgroundWorker.DoWork> event is raised, which in turn starts execution of your background operation."}]}]},{"pos":[311,465],"content":"If your operation requires a parameter, you can provide it as the <ph id=\"ph1\">`argument`</ph> parameter to <ph id=\"ph2\">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph>.","source":"If your operation requires a parameter, you can provide it as the `argument` parameter to <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>."},{"pos":[472,652],"content":"If the background operation is already running, calling <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> again will raise an <xref:System.InvalidOperationException>.","nodes":[{"content":"If the background operation is already running, calling <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> again will raise an <ph id=\"ph2\">&lt;xref:System.InvalidOperationException&gt;</ph>.","pos":[0,180],"source":"If the background operation is already running, calling <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> again will raise an <xref:System.InvalidOperationException>."}]}],"pos":[48524,49183],"yaml":true,"extradata":"MT"},{"content":"A parameter for use by the background operation to be executed in the <xref href=\"System.ComponentModel.BackgroundWorker.DoWork\"></xref> event handler.","nodes":[{"pos":[0,151],"content":"A parameter for use by the background operation to be executed in the <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.BackgroundWorker.DoWork\"&gt;&lt;/xref&gt;</ph> event handler.","source":"A parameter for use by the background operation to be executed in the <xref href=\"System.ComponentModel.BackgroundWorker.DoWork\"></xref> event handler."}],"pos":[50134,50286],"yaml":true},{"content":"<xref href=\"System.ComponentModel.BackgroundWorker.IsBusy\"></xref> is `true`.","nodes":[{"pos":[0,77],"content":"<ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.BackgroundWorker.IsBusy\"&gt;&lt;/xref&gt;</ph> is <ph id=\"ph2\">`true`</ph>.","source":"<xref href=\"System.ComponentModel.BackgroundWorker.IsBusy\"></xref> is `true`."}],"pos":[50477,50555],"yaml":true},{"content":"Occurs when the background operation has completed, has been canceled, or has raised an exception.","nodes":[{"pos":[0,98],"content":"Occurs when the background operation has completed, has been canceled, or has raised an exception.","nodes":[{"content":"Occurs when the background operation has completed, has been canceled, or has raised an exception.","pos":[0,98]}]}],"pos":[51855,51954],"yaml":true},{"content":"This event is raised when the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler returns.  \n  \n If the operation completes successfully and its result is assigned in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler, you can access the result through the <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=fullName> property.  \n  \n The <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName> indicates that an exception was thrown by the operation.  \n  \n The <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName> indicates whether a cancellation request was processed by the background operation. If your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler detects a cancellation request by checking the <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> flag and setting the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> flag of <xref:System.ComponentModel.DoWorkEventArgs?displayProperty=fullName> to `true`, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName> also will be set to `true`.  \n  \n> [!CAUTION]\n>  Be aware that your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> being set to `true`. In this case, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName> in your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler will not be set to `true`, even though a cancellation request was made. This situation is called a *race condition* and is a common concern in multithreaded programming. For more information about multithreading design issues, see [Managed Threading Best Practices](~/docs/standard/threading/managed-threading-best-practices.md).  \n  \n Your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler should always check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A?displayProperty=fullName> and <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A?displayProperty=fullName> properties before accessing the <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=fullName> property. If an exception was raised or if the operation was canceled, accessing the <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=fullName> property raises an exception.","nodes":[{"pos":[0,105],"content":"This event is raised when the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler returns.","nodes":[{"content":"This event is raised when the <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler returns.","pos":[0,105],"source":"This event is raised when the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler returns."}]},{"pos":[112,393],"content":"If the operation completes successfully and its result is assigned in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler, you can access the result through the <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=fullName> property.","nodes":[{"content":"If the operation completes successfully and its result is assigned in the <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler, you can access the result through the <ph id=\"ph2\">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=fullName&gt;</ph> property.","pos":[0,281],"source":"If the operation completes successfully and its result is assigned in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler, you can access the result through the <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=fullName> property."}]},{"pos":[400,616],"content":"The <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName> indicates that an exception was thrown by the operation.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A&gt;</ph> property of <ph id=\"ph2\">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName&gt;</ph> indicates that an exception was thrown by the operation.","pos":[0,216],"source":"The <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName> indicates that an exception was thrown by the operation."}]},{"pos":[623,1426],"content":"The <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName> indicates whether a cancellation request was processed by the background operation. If your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler detects a cancellation request by checking the <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> flag and setting the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> flag of <xref:System.ComponentModel.DoWorkEventArgs?displayProperty=fullName> to `true`, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName> also will be set to `true`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> property of <ph id=\"ph2\">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName&gt;</ph> indicates whether a cancellation request was processed by the background operation.","pos":[0,247],"source":"The <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName> indicates whether a cancellation request was processed by the background operation."},{"content":"If your code in the <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler detects a cancellation request by checking the <ph id=\"ph2\">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> flag and setting the <ph id=\"ph3\">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph> flag of <ph id=\"ph4\">&lt;xref:System.ComponentModel.DoWorkEventArgs?displayProperty=fullName&gt;</ph> to <ph id=\"ph5\">`true`</ph>, the <ph id=\"ph6\">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> flag of <ph id=\"ph7\">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName&gt;</ph> also will be set to <ph id=\"ph8\">`true`</ph>.","pos":[248,803],"source":" If your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler detects a cancellation request by checking the <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> flag and setting the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> flag of <xref:System.ComponentModel.DoWorkEventArgs?displayProperty=fullName> to `true`, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName> also will be set to `true`."}]},{"pos":[1434,2318],"content":"[!CAUTION]\n Be aware that your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> being set to `true`. In this case, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName> in your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler will not be set to `true`, even though a cancellation request was made. This situation is called a *race condition* and is a common concern in multithreaded programming. For more information about multithreading design issues, see [Managed Threading Best Practices](~/docs/standard/threading/managed-threading-best-practices.md).","leadings":["","> "],"nodes":[{"content":" Be aware that your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> being set to `true`. In this case, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName> in your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler will not be set to `true`, even though a cancellation request was made. This situation is called a *race condition* and is a common concern in multithreaded programming. For more information about multithreading design issues, see [Managed Threading Best Practices](~/docs/standard/threading/managed-threading-best-practices.md).","pos":[11,882],"nodes":[{"content":"Be aware that your code in the <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <ph id=\"ph2\">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> being set to <ph id=\"ph3\">`true`</ph>.","pos":[1,280],"source":" Be aware that your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> being set to `true`."},{"content":"In this case, the <ph id=\"ph1\">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> flag of <ph id=\"ph2\">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName&gt;</ph> in your <ph id=\"ph3\">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event handler will not be set to <ph id=\"ph4\">`true`</ph>, even though a cancellation request was made.","pos":[281,613],"source":" In this case, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName> in your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler will not be set to `true`, even though a cancellation request was made."},{"content":"This situation is called a <bpt id=\"p1\">*</bpt>race condition<ept id=\"p1\">*</ept> and is a common concern in multithreaded programming.","pos":[614,711],"source":" This situation is called a *race condition* and is a common concern in multithreaded programming."},{"content":"For more information about multithreading design issues, see <bpt id=\"p1\">[</bpt>Managed Threading Best Practices<ept id=\"p1\">](~/docs/standard/threading/managed-threading-best-practices.md)</ept>.","pos":[712,871],"source":" For more information about multithreading design issues, see [Managed Threading Best Practices](~/docs/standard/threading/managed-threading-best-practices.md)."}]}]},{"pos":[2325,2945],"content":"Your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler should always check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A?displayProperty=fullName> and <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A?displayProperty=fullName> properties before accessing the <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=fullName> property. If an exception was raised or if the operation was canceled, accessing the <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=fullName> property raises an exception.","nodes":[{"content":"Your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler should always check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A?displayProperty=fullName> and <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A?displayProperty=fullName> properties before accessing the <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=fullName> property. If an exception was raised or if the operation was canceled, accessing the <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=fullName> property raises an exception.","pos":[0,620],"nodes":[{"content":"Your <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event handler should always check the <ph id=\"ph2\">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A?displayProperty=fullName&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A?displayProperty=fullName&gt;</ph> properties before accessing the <ph id=\"ph4\">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=fullName&gt;</ph> property.","pos":[0,423],"source":"Your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler should always check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A?displayProperty=fullName> and <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A?displayProperty=fullName> properties before accessing the <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=fullName> property."},{"content":"If an exception was raised or if the operation was canceled, accessing the <ph id=\"ph1\">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=fullName&gt;</ph> property raises an exception.","pos":[424,620],"source":" If an exception was raised or if the operation was canceled, accessing the <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=fullName> property raises an exception."}]}]}],"pos":[51965,54924],"yaml":true,"extradata":"MT"},{"content":"Gets or sets a value indicating whether the <xref href=\"System.ComponentModel.BackgroundWorker\"></xref> can report progress updates.","nodes":[{"pos":[0,132],"content":"Gets or sets a value indicating whether the <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.BackgroundWorker\"&gt;&lt;/xref&gt;</ph> can report progress updates.","source":"Gets or sets a value indicating whether the <xref href=\"System.ComponentModel.BackgroundWorker\"></xref> can report progress updates."}],"pos":[57287,57420],"yaml":true},{"content":"Set the <xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A> property to `true` if you want the <xref:System.ComponentModel.BackgroundWorker> to support progress updates. When this property is `true`, user code can call the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method to raise the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event.","nodes":[{"pos":[0,394],"content":"Set the <xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A> property to `true` if you want the <xref:System.ComponentModel.BackgroundWorker> to support progress updates. When this property is `true`, user code can call the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method to raise the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event.","nodes":[{"content":"Set the <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A&gt;</ph> property to <ph id=\"ph2\">`true`</ph> if you want the <ph id=\"ph3\">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> to support progress updates.","pos":[0,188],"source":"Set the <xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A> property to `true` if you want the <xref:System.ComponentModel.BackgroundWorker> to support progress updates."},{"content":"When this property is <ph id=\"ph1\">`true`</ph>, user code can call the <ph id=\"ph2\">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> method to raise the <ph id=\"ph3\">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> event.","pos":[189,394],"source":" When this property is `true`, user code can call the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method to raise the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event."}]}],"pos":[57431,57826],"yaml":true,"extradata":"MT"},{"content":"`true` if the <xref href=\"System.ComponentModel.BackgroundWorker\"></xref> supports progress updates; otherwise `false`. The default is `false`.","nodes":[{"pos":[0,143],"content":"`true` if the <xref href=\"System.ComponentModel.BackgroundWorker\"></xref> supports progress updates; otherwise `false`. The default is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.ComponentModel.BackgroundWorker\"&gt;&lt;/xref&gt;</ph> supports progress updates; otherwise <ph id=\"ph3\">`false`</ph>.","pos":[0,119],"source":"`true` if the <xref href=\"System.ComponentModel.BackgroundWorker\"></xref> supports progress updates; otherwise `false`."},{"content":"The default is <ph id=\"ph1\">`false`</ph>.","pos":[120,143],"source":" The default is `false`."}]}],"pos":[57955,58101],"yaml":true},{"content":"Gets or sets a value indicating whether the <xref href=\"System.ComponentModel.BackgroundWorker\"></xref> supports asynchronous cancellation.","nodes":[{"pos":[0,139],"content":"Gets or sets a value indicating whether the <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.BackgroundWorker\"&gt;&lt;/xref&gt;</ph> supports asynchronous cancellation.","source":"Gets or sets a value indicating whether the <xref href=\"System.ComponentModel.BackgroundWorker\"></xref> supports asynchronous cancellation."}],"pos":[59560,59700],"yaml":true},{"content":"Set the <xref:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation%2A> property to `true` if you want the <xref:System.ComponentModel.BackgroundWorker> to support cancellation. When this property is `true`, you can call the <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> method to interrupt a background operation.","nodes":[{"pos":[0,341],"content":"Set the <xref:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation%2A> property to `true` if you want the <xref:System.ComponentModel.BackgroundWorker> to support cancellation. When this property is `true`, you can call the <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> method to interrupt a background operation.","nodes":[{"content":"Set the <ph id=\"ph1\">&lt;xref:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation%2A&gt;</ph> property to <ph id=\"ph2\">`true`</ph> if you want the <ph id=\"ph3\">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> to support cancellation.","pos":[0,189],"source":"Set the <xref:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation%2A> property to `true` if you want the <xref:System.ComponentModel.BackgroundWorker> to support cancellation."},{"content":"When this property is <ph id=\"ph1\">`true`</ph>, you can call the <ph id=\"ph2\">&lt;xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A&gt;</ph> method to interrupt a background operation.","pos":[190,341],"source":" When this property is `true`, you can call the <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> method to interrupt a background operation."}]}],"pos":[59711,60053],"yaml":true,"extradata":"MT"},{"content":"`true` if the <xref href=\"System.ComponentModel.BackgroundWorker\"></xref> supports cancellation; otherwise `false`. The default is `false`.","nodes":[{"pos":[0,139],"content":"`true` if the <xref href=\"System.ComponentModel.BackgroundWorker\"></xref> supports cancellation; otherwise `false`. The default is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.ComponentModel.BackgroundWorker\"&gt;&lt;/xref&gt;</ph> supports cancellation; otherwise <ph id=\"ph3\">`false`</ph>.","pos":[0,115],"source":"`true` if the <xref href=\"System.ComponentModel.BackgroundWorker\"></xref> supports cancellation; otherwise `false`."},{"content":"The default is <ph id=\"ph1\">`false`</ph>.","pos":[116,139],"source":" The default is `false`."}]}],"pos":[60187,60329],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ComponentModel.BackgroundWorker\n  commentId: T:System.ComponentModel.BackgroundWorker\n  id: BackgroundWorker\n  children:\n  - System.ComponentModel.BackgroundWorker.#ctor\n  - System.ComponentModel.BackgroundWorker.CancelAsync\n  - System.ComponentModel.BackgroundWorker.CancellationPending\n  - System.ComponentModel.BackgroundWorker.Dispose\n  - System.ComponentModel.BackgroundWorker.Dispose(System.Boolean)\n  - System.ComponentModel.BackgroundWorker.DoWork\n  - System.ComponentModel.BackgroundWorker.IsBusy\n  - System.ComponentModel.BackgroundWorker.OnDoWork(System.ComponentModel.DoWorkEventArgs)\n  - System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)\n  - System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)\n  - System.ComponentModel.BackgroundWorker.ProgressChanged\n  - System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)\n  - System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)\n  - System.ComponentModel.BackgroundWorker.RunWorkerAsync\n  - System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)\n  - System.ComponentModel.BackgroundWorker.RunWorkerCompleted\n  - System.ComponentModel.BackgroundWorker.WorkerReportsProgress\n  - System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation\n  langs:\n  - csharp\n  name: BackgroundWorker\n  nameWithType: BackgroundWorker\n  fullName: System.ComponentModel.BackgroundWorker\n  type: Class\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  - System\n  - netstandard\n  namespace: System.ComponentModel\n  summary: Executes an operation on a separate thread.\n  remarks: \"The <xref:System.ComponentModel.BackgroundWorker> class allows you to run an operation on a separate, dedicated thread. Time-consuming operations like downloads and database transactions can cause your user interface (UI) to seem as though it has stopped responding while they are running. When you want a responsive UI and you are faced with long delays associated with such operations, the <xref:System.ComponentModel.BackgroundWorker> class provides a convenient solution.  \\n  \\n To execute a time-consuming operation in the background, create a <xref:System.ComponentModel.BackgroundWorker> and listen for events that report the progress of your operation and signal when your operation is finished. You can create the <xref:System.ComponentModel.BackgroundWorker> programmatically or you can drag it onto your form from the **Components** tab of the **Toolbox**. If you create the <xref:System.ComponentModel.BackgroundWorker> in the Windows Forms Designer, it will appear in the Component Tray, and its properties will be displayed in the Properties window.  \\n  \\n To set up for a background operation, add an event handler for the <xref:System.ComponentModel.BackgroundWorker.DoWork> event. Call your time-consuming operation in this event handler. To start the operation, call <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>. To receive notifications of progress updates, handle the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event. To receive a notification when the operation is completed, handle the <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event.  \\n  \\n> [!NOTE]\\n>  You must be careful not to manipulate any user-interface objects in your <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler. Instead, communicate to the user interface through the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> and <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> events.  \\n>   \\n>  <xref:System.ComponentModel.BackgroundWorker> events are not marshaled across <xref:System.AppDomain> boundaries. Do not use a <xref:System.ComponentModel.BackgroundWorker> component to perform multithreaded operations in more than one <xref:System.AppDomain>.  \\n  \\n If your background operation requires a parameter, call <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> with your parameter. Inside the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler, you can extract the parameter from the <xref:System.ComponentModel.DoWorkEventArgs.Argument%2A?displayProperty=fullName> property.  \\n  \\n For more information about <xref:System.ComponentModel.BackgroundWorker>, see [How to: Run an Operation in the Background](~/docs/framework/winforms/controls/how-to-run-an-operation-in-the-background.md).\"\n  example:\n  - \"The following code example demonstrates the basics of the <xref:System.ComponentModel.BackgroundWorker> class for executing a time-consuming operation asynchronously. The following illustration shows an example of the output.  \\n  \\n ![BackgroundWorker simple example](~/add/media/backgroundworker-simple.png \\\"BackgroundWorker simple example\\\")  \\n  \\n To try this code, create a Windows Forms application. Add a <xref:System.Windows.Forms.Label> control named `resultLabel` and add two <xref:System.Windows.Forms.Button> controls named `startAsyncButton` and `cancelAsyncButton`. Create <xref:System.Windows.Forms.Control.Click> event handlers for both buttons. From the **Components** tab of the Toolbox, add a <xref:System.ComponentModel.BackgroundWorker> component named `backgroundWorker1`. Create <xref:System.ComponentModel.BackgroundWorker.DoWork>, <xref:System.ComponentModel.BackgroundWorker.ProgressChanged>, and <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handlers for the <xref:System.ComponentModel.BackgroundWorker>. In the code for the form, replace the existing code with the following code.  \\n  \\n [!code-csharp[System.ComponentModel.BackgroundWorkerSimple#1](~/samples/snippets/csharp/VS_Snippets_Winforms/system.componentmodel.backgroundworkersimple/cs/form1.cs#1)]\\n [!code-vb[System.ComponentModel.BackgroundWorkerSimple#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/system.componentmodel.backgroundworkersimple/vb/form1.vb#1)]  \\n  \\n The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker> class for executing a time-consuming operation asynchronously. The following illustration shows an example of the output.  \\n  \\n ![BackgroundWorker Fibonacci example](~/add/media/backgroundworker-fibonacci.png \\\"BackgroundWorker Fibonacci example\\\")  \\n  \\n The operation computes the selected Fibonacci number, reports progress updates as the calculation proceeds, and permits a pending calculation to be canceled.  \\n  \\n [!code-cpp[System.ComponentModel.BackgroundWorker#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#1)]\\n [!code-csharp[System.ComponentModel.BackgroundWorker#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#1)]\\n [!code-vb[System.ComponentModel.BackgroundWorker#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#1)]\"\n  syntax:\n    content: 'public class BackgroundWorker : System.ComponentModel.Component'\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.BackgroundWorker.#ctor\n  commentId: M:System.ComponentModel.BackgroundWorker.#ctor\n  id: '#ctor'\n  parent: System.ComponentModel.BackgroundWorker\n  langs:\n  - csharp\n  name: BackgroundWorker()\n  nameWithType: BackgroundWorker.BackgroundWorker()\n  fullName: BackgroundWorker.BackgroundWorker()\n  type: Constructor\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  - System\n  - netstandard\n  namespace: System.ComponentModel\n  summary: Initializes a new instance of the <xref href=\"System.ComponentModel.BackgroundWorker\"></xref> class.\n  remarks: This constructor initializes a <xref:System.ComponentModel.BackgroundWorker>.\n  syntax:\n    content: public BackgroundWorker ();\n    parameters: []\n  overload: System.ComponentModel.BackgroundWorker.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.BackgroundWorker.CancelAsync\n  commentId: M:System.ComponentModel.BackgroundWorker.CancelAsync\n  id: CancelAsync\n  parent: System.ComponentModel.BackgroundWorker\n  langs:\n  - csharp\n  name: CancelAsync()\n  nameWithType: BackgroundWorker.CancelAsync()\n  fullName: BackgroundWorker.CancelAsync()\n  type: Method\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  - System\n  - netstandard\n  namespace: System.ComponentModel\n  summary: Requests cancellation of a pending background operation.\n  remarks: \"<xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> submits a request to terminate the pending background operation and sets the <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> property to `true`.  \\n  \\n When you call <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A>, your worker method has an opportunity to stop its execution and exit. The worker code should periodically check the <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> property to see if it has been set to `true`.  \\n  \\n> [!CAUTION]\\n>  Be aware that your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> being set to `true`. In this case, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName> in your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler will not be set to `true`, even though a cancellation request was made. This situation is called a *race condition* and is a common concern in multithreaded programming. For more information about multithreading design issues, see [Managed Threading Best Practices](~/docs/standard/threading/managed-threading-best-practices.md).\"\n  example:\n  - \"The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> method to cancel an asynchronous (\\\"background\\\") operation. This code example is part of a larger example provided for the <xref:System.ComponentModel.BackgroundWorker> class.  \\n  \\n [!code-cpp[System.ComponentModel.BackgroundWorker#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#4)]\\n [!code-csharp[System.ComponentModel.BackgroundWorker#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#4)]\\n [!code-vb[System.ComponentModel.BackgroundWorker#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#4)]\"\n  syntax:\n    content: public void CancelAsync ();\n    parameters: []\n  overload: System.ComponentModel.BackgroundWorker.CancelAsync*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <xref href=\"System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation\"></xref> is `false`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.BackgroundWorker.CancellationPending\n  commentId: P:System.ComponentModel.BackgroundWorker.CancellationPending\n  id: CancellationPending\n  parent: System.ComponentModel.BackgroundWorker\n  langs:\n  - csharp\n  name: CancellationPending\n  nameWithType: BackgroundWorker.CancellationPending\n  fullName: BackgroundWorker.CancellationPending\n  type: Property\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  - System\n  - netstandard\n  namespace: System.ComponentModel\n  summary: Gets a value indicating whether the application has requested cancellation of a background operation.\n  remarks: \"If <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> is `true`, then the <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> method has been called on the <xref:System.ComponentModel.BackgroundWorker>.  \\n  \\n This property is meant for use by the worker thread, which should periodically check <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> and abort the background operation when it is set to `true`.\"\n  example:\n  - \"The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> property to query a <xref:System.ComponentModel.BackgroundWorker> about its cancellation state. This code example is part of a larger example provided for the <xref:System.ComponentModel.BackgroundWorker> class.  \\n  \\n [!code-cpp[System.ComponentModel.BackgroundWorker#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#8)]\\n [!code-csharp[System.ComponentModel.BackgroundWorker#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#8)]\\n [!code-vb[System.ComponentModel.BackgroundWorker#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#8)]\"\n  syntax:\n    content: >-\n      [System.ComponentModel.Browsable(false)]\n\n      public bool CancellationPending { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the application has requested cancellation of a background operation; otherwise, `false`. The default is `false`.'\n  overload: System.ComponentModel.BackgroundWorker.CancellationPending*\n  exceptions: []\n  attributes:\n  - type: System.ComponentModel.BrowsableAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.BackgroundWorker.Dispose\n  commentId: M:System.ComponentModel.BackgroundWorker.Dispose\n  id: Dispose\n  parent: System.ComponentModel.BackgroundWorker\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: BackgroundWorker.Dispose()\n  fullName: BackgroundWorker.Dispose()\n  type: Method\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  namespace: System.ComponentModel\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.ComponentModel.BackgroundWorker.Dispose*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.BackgroundWorker.Dispose(System.Boolean)\n  commentId: M:System.ComponentModel.BackgroundWorker.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.ComponentModel.BackgroundWorker\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: BackgroundWorker.Dispose(Boolean)\n  fullName: BackgroundWorker.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  namespace: System.ComponentModel\n  syntax:\n    content: protected virtual void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: ''\n  overload: System.ComponentModel.BackgroundWorker.Dispose*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml\n- uid: System.ComponentModel.BackgroundWorker.DoWork\n  commentId: E:System.ComponentModel.BackgroundWorker.DoWork\n  id: DoWork\n  parent: System.ComponentModel.BackgroundWorker\n  langs:\n  - csharp\n  name: DoWork\n  nameWithType: BackgroundWorker.DoWork\n  fullName: BackgroundWorker.DoWork\n  type: Event\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  - System\n  - netstandard\n  namespace: System.ComponentModel\n  summary: Occurs when <xref href=\"System.ComponentModel.BackgroundWorker.RunWorkerAsync\"></xref> is called.\n  remarks: \"This event is raised when you call the <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method. This is where you start the operation that performs the potentially time-consuming work.  \\n  \\n Your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler should periodically check the <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> property value and abort the operation if it is `true`. When this occurs, you can set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> flag of <xref:System.ComponentModel.DoWorkEventArgs?displayProperty=fullName> to `true`, and the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName> in your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler will be set to `true`.  \\n  \\n> [!CAUTION]\\n>  Be aware that your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> being set to `true`. In this case, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName> in your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler will not be set to `true`, even though a cancellation request was made. This situation is called a *race condition* and is a common concern in multithreaded programming. For more information about multithreading design issues, see [Managed Threading Best Practices](~/docs/standard/threading/managed-threading-best-practices.md).  \\n  \\n If your operation produces a result, you can assign the result to the <xref:System.ComponentModel.DoWorkEventArgs.Result%2A?displayProperty=fullName> property. This will be available to the <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler in the <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=fullName> property.  \\n  \\n If the operation raises an exception that your code does not handle, the <xref:System.ComponentModel.BackgroundWorker> catches the exception and passes it into the <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler, where it is exposed as the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName>. If you are running under the Visual Studio debugger, the debugger will break at the point in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler where the unhandled exception was raised. If you have more than one <xref:System.ComponentModel.BackgroundWorker>, you should not reference any of them directly, as this would couple your <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler to a specific instance of <xref:System.ComponentModel.BackgroundWorker>. Instead, you should access your <xref:System.ComponentModel.BackgroundWorker> by casting the `sender` parameter in your <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler.  \\n  \\n You must be careful not to manipulate any user-interface objects in your <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler. Instead, communicate to the user interface through the <xref:System.ComponentModel.BackgroundWorker> events.  \\n  \\n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).\"\n  example:\n  - \"The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.DoWork> event to start an asynchronous operation. This code example is part of a larger example provided for the <xref:System.ComponentModel.BackgroundWorker> class.  \\n  \\n [!code-cpp[System.ComponentModel.BackgroundWorker#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#5)]\\n [!code-csharp[System.ComponentModel.BackgroundWorker#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#5)]\\n [!code-vb[System.ComponentModel.BackgroundWorker#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#5)]\"\n  syntax:\n    content: public event System.ComponentModel.DoWorkEventHandler DoWork;\n    return:\n      type: System.ComponentModel.DoWorkEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.BackgroundWorker.IsBusy\n  commentId: P:System.ComponentModel.BackgroundWorker.IsBusy\n  id: IsBusy\n  parent: System.ComponentModel.BackgroundWorker\n  langs:\n  - csharp\n  name: IsBusy\n  nameWithType: BackgroundWorker.IsBusy\n  fullName: BackgroundWorker.IsBusy\n  type: Property\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  - System\n  - netstandard\n  namespace: System.ComponentModel\n  summary: Gets a value indicating whether the <xref href=\"System.ComponentModel.BackgroundWorker\"></xref> is running an asynchronous operation.\n  remarks: The <xref:System.ComponentModel.BackgroundWorker> starts an asynchronous operation when you call <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>.\n  example:\n  - \"The following code example demonstrates how to use the <xref:System.ComponentModel.BackgroundWorker.IsBusy%2A> property to wait for completion of a <xref:System.ComponentModel.BackgroundWorker> operation. This code example is part of a larger example described in [How to: Download a File in the Background](~/docs/framework/winforms/controls/how-to-download-a-file-in-the-background.md).  \\n  \\n [!code-csharp[System.ComponentModel.BackgroundWorker.IsBusy#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.IsBusy/CS/Form1.cs#2)]\\n [!code-vb[System.ComponentModel.BackgroundWorker.IsBusy#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.IsBusy/VB/Form1.vb#2)]\"\n  syntax:\n    content: >-\n      [System.ComponentModel.Browsable(false)]\n\n      public bool IsBusy { get; }\n    return:\n      type: System.Boolean\n      description: '`true`, if the <xref href=\"System.ComponentModel.BackgroundWorker\"></xref> is running an asynchronous operation; otherwise, `false`.'\n  overload: System.ComponentModel.BackgroundWorker.IsBusy*\n  exceptions: []\n  attributes:\n  - type: System.ComponentModel.BrowsableAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.BackgroundWorker.OnDoWork(System.ComponentModel.DoWorkEventArgs)\n  commentId: M:System.ComponentModel.BackgroundWorker.OnDoWork(System.ComponentModel.DoWorkEventArgs)\n  id: OnDoWork(System.ComponentModel.DoWorkEventArgs)\n  parent: System.ComponentModel.BackgroundWorker\n  langs:\n  - csharp\n  name: OnDoWork(DoWorkEventArgs)\n  nameWithType: BackgroundWorker.OnDoWork(DoWorkEventArgs)\n  fullName: BackgroundWorker.OnDoWork(DoWorkEventArgs)\n  type: Method\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  - System\n  - netstandard\n  namespace: System.ComponentModel\n  summary: Raises the <xref href=\"System.ComponentModel.BackgroundWorker.DoWork\"></xref> event.\n  syntax:\n    content: protected virtual void OnDoWork (System.ComponentModel.DoWorkEventArgs e);\n    parameters:\n    - id: e\n      type: System.ComponentModel.DoWorkEventArgs\n      description: An <xref href=\"System.EventArgs\"></xref> that contains the event data.\n  overload: System.ComponentModel.BackgroundWorker.OnDoWork*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)\n  commentId: M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)\n  id: OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)\n  parent: System.ComponentModel.BackgroundWorker\n  langs:\n  - csharp\n  name: OnProgressChanged(ProgressChangedEventArgs)\n  nameWithType: BackgroundWorker.OnProgressChanged(ProgressChangedEventArgs)\n  fullName: BackgroundWorker.OnProgressChanged(ProgressChangedEventArgs)\n  type: Method\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  - System\n  - netstandard\n  namespace: System.ComponentModel\n  summary: Raises the <xref href=\"System.ComponentModel.BackgroundWorker.ProgressChanged\"></xref> event.\n  remarks: \"Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  \\n  \\n The <xref:System.ComponentModel.BackgroundWorker.OnProgressChanged%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.\"\n  example:\n  - \"The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.OnProgressChanged%2A> method to report the progress of an asynchronous operation. This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager> class.  \\n  \\n [!code-csharp[System.ComponentModel.AsyncOperationManager#24](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#24)]\\n [!code-vb[System.ComponentModel.AsyncOperationManager#24](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#24)]\"\n  syntax:\n    content: protected virtual void OnProgressChanged (System.ComponentModel.ProgressChangedEventArgs e);\n    parameters:\n    - id: e\n      type: System.ComponentModel.ProgressChangedEventArgs\n      description: An <xref href=\"System.EventArgs\"></xref> that contains the event data.\n  overload: System.ComponentModel.BackgroundWorker.OnProgressChanged*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)\n  commentId: M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)\n  id: OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)\n  parent: System.ComponentModel.BackgroundWorker\n  langs:\n  - csharp\n  name: OnRunWorkerCompleted(RunWorkerCompletedEventArgs)\n  nameWithType: BackgroundWorker.OnRunWorkerCompleted(RunWorkerCompletedEventArgs)\n  fullName: BackgroundWorker.OnRunWorkerCompleted(RunWorkerCompletedEventArgs)\n  type: Method\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  - System\n  - netstandard\n  namespace: System.ComponentModel\n  summary: Raises the <xref href=\"System.ComponentModel.BackgroundWorker.RunWorkerCompleted\"></xref> event.\n  remarks: \"Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  \\n  \\n The <xref:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.\"\n  syntax:\n    content: protected virtual void OnRunWorkerCompleted (System.ComponentModel.RunWorkerCompletedEventArgs e);\n    parameters:\n    - id: e\n      type: System.ComponentModel.RunWorkerCompletedEventArgs\n      description: An <xref href=\"System.EventArgs\"></xref> that contains the event data.\n  overload: System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.BackgroundWorker.ProgressChanged\n  commentId: E:System.ComponentModel.BackgroundWorker.ProgressChanged\n  id: ProgressChanged\n  parent: System.ComponentModel.BackgroundWorker\n  langs:\n  - csharp\n  name: ProgressChanged\n  nameWithType: BackgroundWorker.ProgressChanged\n  fullName: BackgroundWorker.ProgressChanged\n  type: Event\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  - System\n  - netstandard\n  namespace: System.ComponentModel\n  summary: Occurs when <xref href=\"System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)\"></xref> is called.\n  remarks: \"This event is raised when you call the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method.  \\n  \\n For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).\"\n  example:\n  - \"The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event to report the progress of an asynchronous operation to the user. This code example is part of a larger example provided for the <xref:System.ComponentModel.BackgroundWorker> class.  \\n  \\n [!code-cpp[System.ComponentModel.BackgroundWorker#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#7)]\\n [!code-csharp[System.ComponentModel.BackgroundWorker#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#7)]\\n [!code-vb[System.ComponentModel.BackgroundWorker#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#7)]\"\n  syntax:\n    content: public event System.ComponentModel.ProgressChangedEventHandler ProgressChanged;\n    return:\n      type: System.ComponentModel.ProgressChangedEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)\n  commentId: M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)\n  id: ReportProgress(System.Int32)\n  parent: System.ComponentModel.BackgroundWorker\n  langs:\n  - csharp\n  name: ReportProgress(Int32)\n  nameWithType: BackgroundWorker.ReportProgress(Int32)\n  fullName: BackgroundWorker.ReportProgress(Int32)\n  type: Method\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  - System\n  - netstandard\n  namespace: System.ComponentModel\n  summary: Raises the <xref href=\"System.ComponentModel.BackgroundWorker.ProgressChanged\"></xref> event.\n  remarks: \"If you need the background operation to report on its progress, you can call the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method to raise the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event. The <xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A> property value must be `true`, or <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> will throw an <xref:System.InvalidOperationException>.  \\n  \\n It is up to you to implement a meaningful way of measuring your background operation's progress as a percentage of the total task completed.  \\n  \\n The call to the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method is asynchronous and returns immediately. The <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event handler executes on the thread that created the <xref:System.ComponentModel.BackgroundWorker>.\"\n  example:\n  - \"The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method to report the progress of an asynchronous operation to the user. This code example is part of a larger example provided for the <xref:System.ComponentModel.BackgroundWorker> class.  \\n  \\n [!code-cpp[System.ComponentModel.BackgroundWorker#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#8)]\\n [!code-csharp[System.ComponentModel.BackgroundWorker#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#8)]\\n [!code-vb[System.ComponentModel.BackgroundWorker#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#8)]\"\n  syntax:\n    content: public void ReportProgress (int percentProgress);\n    parameters:\n    - id: percentProgress\n      type: System.Int32\n      description: The percentage, from 0 to 100, of the background operation that is complete.\n  overload: System.ComponentModel.BackgroundWorker.ReportProgress*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The <xref href=\"System.ComponentModel.BackgroundWorker.WorkerReportsProgress\"></xref> property is set to `false`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)\n  commentId: M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)\n  id: ReportProgress(System.Int32,System.Object)\n  parent: System.ComponentModel.BackgroundWorker\n  langs:\n  - csharp\n  name: ReportProgress(Int32, Object)\n  nameWithType: BackgroundWorker.ReportProgress(Int32, Object)\n  fullName: BackgroundWorker.ReportProgress(Int32, Object)\n  type: Method\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  - System\n  - netstandard\n  namespace: System.ComponentModel\n  summary: Raises the <xref href=\"System.ComponentModel.BackgroundWorker.ProgressChanged\"></xref> event.\n  remarks: \"If you need the background operation to report on its progress, you can call the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method to raise the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event. The <xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A> property value must `true`, or <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> will throw an <xref:System.InvalidOperationException>.  \\n  \\n It is up to you to implement a meaningful way of measuring your background operation's progress as a percentage of the total task completed.\"\n  example:\n  - \"The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method to report the progress of an asynchronous operation to the user. This code example is part of a larger example provided for the <xref:System.Windows.Forms.ToolStripProgressBar> class.  \\n  \\n [!code-csharp[System.Windows.Forms.ToolStripProgressBar#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ToolStripProgressBar/CS/form1.cs#10)]\\n [!code-vb[System.Windows.Forms.ToolStripProgressBar#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ToolStripProgressBar/VB/form1.vb#10)]\"\n  syntax:\n    content: public void ReportProgress (int percentProgress, object userState);\n    parameters:\n    - id: percentProgress\n      type: System.Int32\n      description: The percentage, from 0 to 100, of the background operation that is complete.\n    - id: userState\n      type: System.Object\n      description: The state object passed to <xref href=\"System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)\"></xref>.\n  overload: System.ComponentModel.BackgroundWorker.ReportProgress*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The <xref href=\"System.ComponentModel.BackgroundWorker.WorkerReportsProgress\"></xref> property is set to `false`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.BackgroundWorker.RunWorkerAsync\n  commentId: M:System.ComponentModel.BackgroundWorker.RunWorkerAsync\n  id: RunWorkerAsync\n  parent: System.ComponentModel.BackgroundWorker\n  langs:\n  - csharp\n  name: RunWorkerAsync()\n  nameWithType: BackgroundWorker.RunWorkerAsync()\n  fullName: BackgroundWorker.RunWorkerAsync()\n  type: Method\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  - System\n  - netstandard\n  namespace: System.ComponentModel\n  summary: Starts execution of a background operation.\n  remarks: \"The <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method submits a request to start the operation running asynchronously. When the request is serviced, the <xref:System.ComponentModel.BackgroundWorker.DoWork> event is raised, which in turn starts execution of your background operation.  \\n  \\n If the background operation is already running, calling <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> again will raise an <xref:System.InvalidOperationException>.\"\n  example:\n  - \"The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method to start an asynchronous operation. It is part of a larger example described in [How to: Download a File in the Background](~/docs/framework/winforms/controls/how-to-download-a-file-in-the-background.md).  \\n  \\n [!code-csharp[System.ComponentModel.BackgroundWorker.IsBusy#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.IsBusy/CS/Form1.cs#2)]\\n [!code-vb[System.ComponentModel.BackgroundWorker.IsBusy#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.IsBusy/VB/Form1.vb#2)]\"\n  syntax:\n    content: public void RunWorkerAsync ();\n    parameters: []\n  overload: System.ComponentModel.BackgroundWorker.RunWorkerAsync*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <xref href=\"System.ComponentModel.BackgroundWorker.IsBusy\"></xref> is `true`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)\n  commentId: M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)\n  id: RunWorkerAsync(System.Object)\n  parent: System.ComponentModel.BackgroundWorker\n  langs:\n  - csharp\n  name: RunWorkerAsync(Object)\n  nameWithType: BackgroundWorker.RunWorkerAsync(Object)\n  fullName: BackgroundWorker.RunWorkerAsync(Object)\n  type: Method\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  - System\n  - netstandard\n  namespace: System.ComponentModel\n  summary: Starts execution of a background operation.\n  remarks: \"The <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method submits a request to start the operation running asynchronously. When the request is serviced, the <xref:System.ComponentModel.BackgroundWorker.DoWork> event is raised, which in turn starts execution of your background operation.  \\n  \\n If your operation requires a parameter, you can provide it as the `argument` parameter to <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>.  \\n  \\n If the background operation is already running, calling <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> again will raise an <xref:System.InvalidOperationException>.\"\n  example:\n  - \"The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method to start an asynchronous operation. This code example is part of a larger example provided for the <xref:System.ComponentModel.BackgroundWorker> class.  \\n  \\n [!code-cpp[System.ComponentModel.BackgroundWorker#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#3)]\\n [!code-csharp[System.ComponentModel.BackgroundWorker#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#3)]\\n [!code-vb[System.ComponentModel.BackgroundWorker#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#3)]\"\n  syntax:\n    content: public void RunWorkerAsync (object argument);\n    parameters:\n    - id: argument\n      type: System.Object\n      description: A parameter for use by the background operation to be executed in the <xref href=\"System.ComponentModel.BackgroundWorker.DoWork\"></xref> event handler.\n  overload: System.ComponentModel.BackgroundWorker.RunWorkerAsync*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <xref href=\"System.ComponentModel.BackgroundWorker.IsBusy\"></xref> is `true`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.BackgroundWorker.RunWorkerCompleted\n  commentId: E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted\n  id: RunWorkerCompleted\n  parent: System.ComponentModel.BackgroundWorker\n  langs:\n  - csharp\n  name: RunWorkerCompleted\n  nameWithType: BackgroundWorker.RunWorkerCompleted\n  fullName: BackgroundWorker.RunWorkerCompleted\n  type: Event\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  - System\n  - netstandard\n  namespace: System.ComponentModel\n  summary: Occurs when the background operation has completed, has been canceled, or has raised an exception.\n  remarks: \"This event is raised when the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler returns.  \\n  \\n If the operation completes successfully and its result is assigned in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler, you can access the result through the <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=fullName> property.  \\n  \\n The <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName> indicates that an exception was thrown by the operation.  \\n  \\n The <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName> indicates whether a cancellation request was processed by the background operation. If your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler detects a cancellation request by checking the <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> flag and setting the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> flag of <xref:System.ComponentModel.DoWorkEventArgs?displayProperty=fullName> to `true`, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName> also will be set to `true`.  \\n  \\n> [!CAUTION]\\n>  Be aware that your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> being set to `true`. In this case, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName> in your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler will not be set to `true`, even though a cancellation request was made. This situation is called a *race condition* and is a common concern in multithreaded programming. For more information about multithreading design issues, see [Managed Threading Best Practices](~/docs/standard/threading/managed-threading-best-practices.md).  \\n  \\n Your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler should always check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A?displayProperty=fullName> and <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A?displayProperty=fullName> properties before accessing the <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=fullName> property. If an exception was raised or if the operation was canceled, accessing the <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=fullName> property raises an exception.\"\n  example:\n  - \"The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event to handle the result of an asynchronous operation. This code example is part of a larger example provided for the <xref:System.ComponentModel.BackgroundWorker> class.  \\n  \\n [!code-cpp[System.ComponentModel.BackgroundWorker#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#6)]\\n [!code-csharp[System.ComponentModel.BackgroundWorker#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#6)]\\n [!code-vb[System.ComponentModel.BackgroundWorker#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#6)]\"\n  syntax:\n    content: public event System.ComponentModel.RunWorkerCompletedEventHandler RunWorkerCompleted;\n    return:\n      type: System.ComponentModel.RunWorkerCompletedEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.BackgroundWorker.WorkerReportsProgress\n  commentId: P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress\n  id: WorkerReportsProgress\n  parent: System.ComponentModel.BackgroundWorker\n  langs:\n  - csharp\n  name: WorkerReportsProgress\n  nameWithType: BackgroundWorker.WorkerReportsProgress\n  fullName: BackgroundWorker.WorkerReportsProgress\n  type: Property\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  - System\n  - netstandard\n  namespace: System.ComponentModel\n  summary: Gets or sets a value indicating whether the <xref href=\"System.ComponentModel.BackgroundWorker\"></xref> can report progress updates.\n  remarks: Set the <xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A> property to `true` if you want the <xref:System.ComponentModel.BackgroundWorker> to support progress updates. When this property is `true`, user code can call the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method to raise the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event.\n  syntax:\n    content: public bool WorkerReportsProgress { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.ComponentModel.BackgroundWorker\"></xref> supports progress updates; otherwise `false`. The default is `false`.'\n  overload: System.ComponentModel.BackgroundWorker.WorkerReportsProgress*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation\n  commentId: P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation\n  id: WorkerSupportsCancellation\n  parent: System.ComponentModel.BackgroundWorker\n  langs:\n  - csharp\n  name: WorkerSupportsCancellation\n  nameWithType: BackgroundWorker.WorkerSupportsCancellation\n  fullName: BackgroundWorker.WorkerSupportsCancellation\n  type: Property\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  - System\n  - netstandard\n  namespace: System.ComponentModel\n  summary: Gets or sets a value indicating whether the <xref href=\"System.ComponentModel.BackgroundWorker\"></xref> supports asynchronous cancellation.\n  remarks: Set the <xref:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation%2A> property to `true` if you want the <xref:System.ComponentModel.BackgroundWorker> to support cancellation. When this property is `true`, you can call the <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> method to interrupt a background operation.\n  syntax:\n    content: public bool WorkerSupportsCancellation { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.ComponentModel.BackgroundWorker\"></xref> supports cancellation; otherwise `false`. The default is `false`.'\n  overload: System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.ComponentModel.BackgroundWorker.#ctor\n  parent: System.ComponentModel.BackgroundWorker\n  isExternal: false\n  name: BackgroundWorker()\n  nameWithType: BackgroundWorker.BackgroundWorker()\n  fullName: BackgroundWorker.BackgroundWorker()\n- uid: System.ComponentModel.BackgroundWorker.CancelAsync\n  parent: System.ComponentModel.BackgroundWorker\n  isExternal: false\n  name: CancelAsync()\n  nameWithType: BackgroundWorker.CancelAsync()\n  fullName: BackgroundWorker.CancelAsync()\n- uid: System.ComponentModel.BackgroundWorker.CancellationPending\n  parent: System.ComponentModel.BackgroundWorker\n  isExternal: false\n  name: CancellationPending\n  nameWithType: BackgroundWorker.CancellationPending\n  fullName: BackgroundWorker.CancellationPending\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.ComponentModel.BackgroundWorker.Dispose\n  parent: System.ComponentModel.BackgroundWorker\n  isExternal: false\n  name: Dispose()\n  nameWithType: BackgroundWorker.Dispose()\n  fullName: BackgroundWorker.Dispose()\n- uid: System.ComponentModel.BackgroundWorker.Dispose(System.Boolean)\n  parent: System.ComponentModel.BackgroundWorker\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: BackgroundWorker.Dispose(Boolean)\n  fullName: BackgroundWorker.Dispose(Boolean)\n- uid: System.ComponentModel.BackgroundWorker.DoWork\n  parent: System.ComponentModel.BackgroundWorker\n  isExternal: false\n  name: DoWork\n  nameWithType: BackgroundWorker.DoWork\n  fullName: BackgroundWorker.DoWork\n- uid: System.ComponentModel.DoWorkEventHandler\n  parent: System.ComponentModel\n  isExternal: false\n  name: DoWorkEventHandler\n  nameWithType: DoWorkEventHandler\n  fullName: System.ComponentModel.DoWorkEventHandler\n- uid: System.ComponentModel.BackgroundWorker.IsBusy\n  parent: System.ComponentModel.BackgroundWorker\n  isExternal: false\n  name: IsBusy\n  nameWithType: BackgroundWorker.IsBusy\n  fullName: BackgroundWorker.IsBusy\n- uid: System.ComponentModel.BackgroundWorker.OnDoWork(System.ComponentModel.DoWorkEventArgs)\n  parent: System.ComponentModel.BackgroundWorker\n  isExternal: false\n  name: OnDoWork(DoWorkEventArgs)\n  nameWithType: BackgroundWorker.OnDoWork(DoWorkEventArgs)\n  fullName: BackgroundWorker.OnDoWork(DoWorkEventArgs)\n- uid: System.ComponentModel.DoWorkEventArgs\n  parent: System.ComponentModel\n  isExternal: false\n  name: DoWorkEventArgs\n  nameWithType: DoWorkEventArgs\n  fullName: System.ComponentModel.DoWorkEventArgs\n- uid: System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)\n  parent: System.ComponentModel.BackgroundWorker\n  isExternal: false\n  name: OnProgressChanged(ProgressChangedEventArgs)\n  nameWithType: BackgroundWorker.OnProgressChanged(ProgressChangedEventArgs)\n  fullName: BackgroundWorker.OnProgressChanged(ProgressChangedEventArgs)\n- uid: System.ComponentModel.ProgressChangedEventArgs\n  parent: System.ComponentModel\n  isExternal: false\n  name: ProgressChangedEventArgs\n  nameWithType: ProgressChangedEventArgs\n  fullName: System.ComponentModel.ProgressChangedEventArgs\n- uid: System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)\n  parent: System.ComponentModel.BackgroundWorker\n  isExternal: false\n  name: OnRunWorkerCompleted(RunWorkerCompletedEventArgs)\n  nameWithType: BackgroundWorker.OnRunWorkerCompleted(RunWorkerCompletedEventArgs)\n  fullName: BackgroundWorker.OnRunWorkerCompleted(RunWorkerCompletedEventArgs)\n- uid: System.ComponentModel.RunWorkerCompletedEventArgs\n  parent: System.ComponentModel\n  isExternal: false\n  name: RunWorkerCompletedEventArgs\n  nameWithType: RunWorkerCompletedEventArgs\n  fullName: System.ComponentModel.RunWorkerCompletedEventArgs\n- uid: System.ComponentModel.BackgroundWorker.ProgressChanged\n  parent: System.ComponentModel.BackgroundWorker\n  isExternal: false\n  name: ProgressChanged\n  nameWithType: BackgroundWorker.ProgressChanged\n  fullName: BackgroundWorker.ProgressChanged\n- uid: System.ComponentModel.ProgressChangedEventHandler\n  parent: System.ComponentModel\n  isExternal: false\n  name: ProgressChangedEventHandler\n  nameWithType: ProgressChangedEventHandler\n  fullName: System.ComponentModel.ProgressChangedEventHandler\n- uid: System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)\n  parent: System.ComponentModel.BackgroundWorker\n  isExternal: false\n  name: ReportProgress(Int32)\n  nameWithType: BackgroundWorker.ReportProgress(Int32)\n  fullName: BackgroundWorker.ReportProgress(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)\n  parent: System.ComponentModel.BackgroundWorker\n  isExternal: false\n  name: ReportProgress(Int32, Object)\n  nameWithType: BackgroundWorker.ReportProgress(Int32, Object)\n  fullName: BackgroundWorker.ReportProgress(Int32, Object)\n- uid: System.ComponentModel.BackgroundWorker.RunWorkerAsync\n  parent: System.ComponentModel.BackgroundWorker\n  isExternal: false\n  name: RunWorkerAsync()\n  nameWithType: BackgroundWorker.RunWorkerAsync()\n  fullName: BackgroundWorker.RunWorkerAsync()\n- uid: System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)\n  parent: System.ComponentModel.BackgroundWorker\n  isExternal: false\n  name: RunWorkerAsync(Object)\n  nameWithType: BackgroundWorker.RunWorkerAsync(Object)\n  fullName: BackgroundWorker.RunWorkerAsync(Object)\n- uid: System.ComponentModel.BackgroundWorker.RunWorkerCompleted\n  parent: System.ComponentModel.BackgroundWorker\n  isExternal: false\n  name: RunWorkerCompleted\n  nameWithType: BackgroundWorker.RunWorkerCompleted\n  fullName: BackgroundWorker.RunWorkerCompleted\n- uid: System.ComponentModel.RunWorkerCompletedEventHandler\n  parent: System.ComponentModel\n  isExternal: false\n  name: RunWorkerCompletedEventHandler\n  nameWithType: RunWorkerCompletedEventHandler\n  fullName: System.ComponentModel.RunWorkerCompletedEventHandler\n- uid: System.ComponentModel.BackgroundWorker.WorkerReportsProgress\n  parent: System.ComponentModel.BackgroundWorker\n  isExternal: false\n  name: WorkerReportsProgress\n  nameWithType: BackgroundWorker.WorkerReportsProgress\n  fullName: BackgroundWorker.WorkerReportsProgress\n- uid: System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation\n  parent: System.ComponentModel.BackgroundWorker\n  isExternal: false\n  name: WorkerSupportsCancellation\n  nameWithType: BackgroundWorker.WorkerSupportsCancellation\n  fullName: BackgroundWorker.WorkerSupportsCancellation\n- uid: System.ComponentModel.BackgroundWorker.#ctor*\n  parent: System.ComponentModel.BackgroundWorker\n  isExternal: false\n  name: BackgroundWorker\n  nameWithType: BackgroundWorker.BackgroundWorker\n  fullName: BackgroundWorker.BackgroundWorker\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml\n- uid: System.ComponentModel.BackgroundWorker.CancelAsync*\n  parent: System.ComponentModel.BackgroundWorker\n  isExternal: false\n  name: CancelAsync\n  nameWithType: BackgroundWorker.CancelAsync\n  fullName: BackgroundWorker.CancelAsync\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml\n- uid: System.ComponentModel.BackgroundWorker.CancellationPending*\n  parent: System.ComponentModel.BackgroundWorker\n  isExternal: false\n  name: CancellationPending\n  nameWithType: BackgroundWorker.CancellationPending\n  fullName: BackgroundWorker.CancellationPending\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml\n- uid: System.ComponentModel.BackgroundWorker.Dispose*\n  parent: System.ComponentModel.BackgroundWorker\n  isExternal: false\n  name: Dispose\n  nameWithType: BackgroundWorker.Dispose\n  fullName: BackgroundWorker.Dispose\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml\n- uid: System.ComponentModel.BackgroundWorker.IsBusy*\n  parent: System.ComponentModel.BackgroundWorker\n  isExternal: false\n  name: IsBusy\n  nameWithType: BackgroundWorker.IsBusy\n  fullName: BackgroundWorker.IsBusy\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml\n- uid: System.ComponentModel.BackgroundWorker.OnDoWork*\n  parent: System.ComponentModel.BackgroundWorker\n  isExternal: false\n  name: OnDoWork\n  nameWithType: BackgroundWorker.OnDoWork\n  fullName: BackgroundWorker.OnDoWork\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml\n- uid: System.ComponentModel.BackgroundWorker.OnProgressChanged*\n  parent: System.ComponentModel.BackgroundWorker\n  isExternal: false\n  name: OnProgressChanged\n  nameWithType: BackgroundWorker.OnProgressChanged\n  fullName: BackgroundWorker.OnProgressChanged\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml\n- uid: System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted*\n  parent: System.ComponentModel.BackgroundWorker\n  isExternal: false\n  name: OnRunWorkerCompleted\n  nameWithType: BackgroundWorker.OnRunWorkerCompleted\n  fullName: BackgroundWorker.OnRunWorkerCompleted\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml\n- uid: System.ComponentModel.BackgroundWorker.ReportProgress*\n  parent: System.ComponentModel.BackgroundWorker\n  isExternal: false\n  name: ReportProgress\n  nameWithType: BackgroundWorker.ReportProgress\n  fullName: BackgroundWorker.ReportProgress\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml\n- uid: System.ComponentModel.BackgroundWorker.RunWorkerAsync*\n  parent: System.ComponentModel.BackgroundWorker\n  isExternal: false\n  name: RunWorkerAsync\n  nameWithType: BackgroundWorker.RunWorkerAsync\n  fullName: BackgroundWorker.RunWorkerAsync\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml\n- uid: System.ComponentModel.BackgroundWorker.WorkerReportsProgress*\n  parent: System.ComponentModel.BackgroundWorker\n  isExternal: false\n  name: WorkerReportsProgress\n  nameWithType: BackgroundWorker.WorkerReportsProgress\n  fullName: BackgroundWorker.WorkerReportsProgress\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml\n- uid: System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation*\n  parent: System.ComponentModel.BackgroundWorker\n  isExternal: false\n  name: WorkerSupportsCancellation\n  nameWithType: BackgroundWorker.WorkerSupportsCancellation\n  fullName: BackgroundWorker.WorkerSupportsCancellation\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}