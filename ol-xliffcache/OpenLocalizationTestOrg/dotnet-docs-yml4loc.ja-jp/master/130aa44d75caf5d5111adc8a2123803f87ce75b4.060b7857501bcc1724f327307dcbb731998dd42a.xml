{"nodes":[{"content":"Specifies the values that are used in <xref href=\"System.Net.PeerToPeer\"></xref> object permissions.","nodes":[{"pos":[0,100],"content":"Specifies the values that are used in <ph id=\"ph1\">&lt;xref href=\"System.Net.PeerToPeer\"&gt;&lt;/xref&gt;</ph> object permissions.","source":"Specifies the values that are used in <xref href=\"System.Net.PeerToPeer\"></xref> object permissions."}],"pos":[969,1070],"yaml":true},{"content":"The default permissions allow all local and Intranet zone applications to access PNRP services. If the default permissions are not changed, all link-local and site-local applications have access to Peer-to-Peer services, but global (internet) applications have no access.  \n  \n Instances of this type have two permission states: they either have no access to the resource(s) protected by the permission, or they have unrestricted full access to those resources.","nodes":[{"pos":[0,271],"content":"The default permissions allow all local and Intranet zone applications to access PNRP services. If the default permissions are not changed, all link-local and site-local applications have access to Peer-to-Peer services, but global (internet) applications have no access.","nodes":[{"content":"The default permissions allow all local and Intranet zone applications to access PNRP services. If the default permissions are not changed, all link-local and site-local applications have access to Peer-to-Peer services, but global (internet) applications have no access.","pos":[0,271],"nodes":[{"content":"The default permissions allow all local and Intranet zone applications to access PNRP services.","pos":[0,95]},{"content":"If the default permissions are not changed, all link-local and site-local applications have access to Peer-to-Peer services, but global (internet) applications have no access.","pos":[96,271]}]}]},{"pos":[278,461],"content":"Instances of this type have two permission states: they either have no access to the resource(s) protected by the permission, or they have unrestricted full access to those resources.","nodes":[{"content":"Instances of this type have two permission states: they either have no access to the resource(s) protected by the permission, or they have unrestricted full access to those resources.","pos":[0,183]}]}],"pos":[1081,1547],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref> class with the supplied initial permission state.","nodes":[{"pos":[0,141],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Net.PeerToPeer.PnrpPermission\"&gt;&lt;/xref&gt;</ph> class with the supplied initial permission state.","source":"Initializes a new instance of the <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref> class with the supplied initial permission state."}],"pos":[4115,4257],"yaml":true},{"content":"Instances of this type have two permission states: they either have no access to the resource(s) protected by the permission, or they have unrestricted full access to those resources.  \n  \n If `state` is Unrestricted, the PnrpPermission instance passes all demands. If `state` contains any other value, the PnrpPermission instance fails all demands.","nodes":[{"pos":[0,183],"content":"Instances of this type have two permission states: they either have no access to the resource(s) protected by the permission, or they have unrestricted full access to those resources.","nodes":[{"content":"Instances of this type have two permission states: they either have no access to the resource(s) protected by the permission, or they have unrestricted full access to those resources.","pos":[0,183]}]},{"pos":[190,349],"content":"If `state` is Unrestricted, the PnrpPermission instance passes all demands. If `state` contains any other value, the PnrpPermission instance fails all demands.","nodes":[{"content":"If <ph id=\"ph1\">`state`</ph> is Unrestricted, the PnrpPermission instance passes all demands.","pos":[0,75],"source":"If `state` is Unrestricted, the PnrpPermission instance passes all demands."},{"content":"If <ph id=\"ph1\">`state`</ph> contains any other value, the PnrpPermission instance fails all demands.","pos":[76,159],"source":" If `state` contains any other value, the PnrpPermission instance fails all demands."}]}],"pos":[4268,4622],"yaml":true,"extradata":"MT"},{"content":"One of the values in the <xref href=\"System.Security.Permissions.PermissionState\"></xref> enumeration.","nodes":[{"pos":[0,102],"content":"One of the values in the <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.PermissionState\"&gt;&lt;/xref&gt;</ph> enumeration.","source":"One of the values in the <xref href=\"System.Security.Permissions.PermissionState\"></xref> enumeration."}],"pos":[4827,4930],"yaml":true},{"content":"Creates and returns an identical copy of the current <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref>.","nodes":[{"pos":[0,111],"content":"Creates and returns an identical copy of the current <ph id=\"ph1\">&lt;xref href=\"System.Net.PeerToPeer.PnrpPermission\"&gt;&lt;/xref&gt;</ph>.","source":"Creates and returns an identical copy of the current <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref>."}],"pos":[5905,6017],"yaml":true},{"content":"A copy of a permission represents the same access to resources as the original permission.  \n  \n Instances of this type have two permission states: they either have no access to the resource(s) protected by the permission, or they have unrestricted full access to those resources.","nodes":[{"pos":[0,90],"content":"A copy of a permission represents the same access to resources as the original permission.","nodes":[{"content":"A copy of a permission represents the same access to resources as the original permission.","pos":[0,90]}]},{"pos":[97,280],"content":"Instances of this type have two permission states: they either have no access to the resource(s) protected by the permission, or they have unrestricted full access to those resources.","nodes":[{"content":"Instances of this type have two permission states: they either have no access to the resource(s) protected by the permission, or they have unrestricted full access to those resources.","pos":[0,183]}]}],"pos":[6028,6313],"yaml":true,"extradata":"MT"},{"content":"An object with an IPermission interface, whose instance contains a copy of the current instance of <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref>.","nodes":[{"pos":[0,157],"content":"An object with an IPermission interface, whose instance contains a copy of the current instance of <ph id=\"ph1\">&lt;xref href=\"System.Net.PeerToPeer.PnrpPermission\"&gt;&lt;/xref&gt;</ph>.","source":"An object with an IPermission interface, whose instance contains a copy of the current instance of <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref>."}],"pos":[6479,6637],"yaml":true},{"content":"-   The parameter is not a valid <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref> element.  \n  \n-   The parameter's version number is not supported.","nodes":[{"pos":[4,99],"content":"The parameter is not a valid <ph id=\"ph1\">&lt;xref href=\"System.Net.PeerToPeer.PnrpPermission\"&gt;&lt;/xref&gt;</ph> element.","source":"The parameter is not a valid <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref> element."},{"pos":[109,157],"content":"The parameter's version number is not supported.","nodes":[{"content":"The parameter's version number is not supported.","pos":[0,48]}]}],"pos":[6800,6964],"yaml":true},{"content":"The parameter is a `null` reference (`Nothing` in Visual Basic).","nodes":[{"pos":[0,64],"content":"The parameter is a <ph id=\"ph1\">`null`</ph> reference (<ph id=\"ph2\">`Nothing`</ph> in Visual Basic).","source":"The parameter is a `null` reference (`Nothing` in Visual Basic)."}],"pos":[7066,7131],"yaml":true},{"content":"Reconstructs a security object with a specified state from an XML encoding.","nodes":[{"pos":[0,75],"content":"Reconstructs a security object with a specified state from an XML encoding.","nodes":[{"content":"Reconstructs a security object with a specified state from an XML encoding.","pos":[0,75]}]}],"pos":[8195,8271],"yaml":true},{"content":"Represents the XML object model for encoding security objects. This class cannot be inherited.  \n  \n This class is intended to be a lightweight implementation of a simple XML object model for use within the security system, and not for use as a general XML object model.","nodes":[{"pos":[0,94],"content":"Represents the XML object model for encoding security objects. This class cannot be inherited.","nodes":[{"content":"Represents the XML object model for encoding security objects. This class cannot be inherited.","pos":[0,94],"nodes":[{"content":"Represents the XML object model for encoding security objects.","pos":[0,62]},{"content":"This class cannot be inherited.","pos":[63,94]}]}]},{"pos":[101,270],"content":"This class is intended to be a lightweight implementation of a simple XML object model for use within the security system, and not for use as a general XML object model.","nodes":[{"content":"This class is intended to be a lightweight implementation of a simple XML object model for use within the security system, and not for use as a general XML object model.","pos":[0,169]}]}],"pos":[8282,8557],"yaml":true,"extradata":"MT"},{"content":"The XML encoding to use to reconstruct the permission.","nodes":[{"pos":[0,54],"content":"The XML encoding to use to reconstruct the permission.","nodes":[{"content":"The XML encoding to use to reconstruct the permission.","pos":[0,54]}]}],"pos":[8737,8792],"yaml":true},{"content":"-   The parameter is not a valid <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref> element.  \n  \n-   The parameter's version number is not supported.","nodes":[{"pos":[4,99],"content":"The parameter is not a valid <ph id=\"ph1\">&lt;xref href=\"System.Net.PeerToPeer.PnrpPermission\"&gt;&lt;/xref&gt;</ph> element.","source":"The parameter is not a valid <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref> element."},{"pos":[109,157],"content":"The parameter's version number is not supported.","nodes":[{"content":"The parameter's version number is not supported.","pos":[0,48]}]}],"pos":[8958,9122],"yaml":true},{"content":"The parameter is a `null` reference (`Nothing` in Visual Basic).","nodes":[{"pos":[0,64],"content":"The parameter is a <ph id=\"ph1\">`null`</ph> reference (<ph id=\"ph2\">`Nothing`</ph> in Visual Basic).","source":"The parameter is a `null` reference (`Nothing` in Visual Basic)."}],"pos":[9224,9289],"yaml":true},{"content":"Creates and returns a permission that is the intersection of the current <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref> and the specified permission.","nodes":[{"pos":[0,160],"content":"Creates and returns a permission that is the intersection of the current <ph id=\"ph1\">&lt;xref href=\"System.Net.PeerToPeer.PnrpPermission\"&gt;&lt;/xref&gt;</ph> and the specified permission.","source":"Creates and returns a permission that is the intersection of the current <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref> and the specified permission."}],"pos":[10341,10502],"yaml":true},{"content":"The intersection of two permissions is a permission that describes the set of operations they both describe in common. Only a demand that passes both original permissions will pass the intersection.  \n  \n The following statements are required to be `true` for all implementations of the Intersect method. X and Y represent <xref:System.Security.IPermission> object references that are not a `null` reference (Nothing in Visual Basic).  \n  \n-   X.Intersect(X) returns a value equal to X.  \n  \n-   X.Intersect(Y) returns the same value as Y.Intersect(X).  \n  \n-   X.Intersect(a `null` reference (`Nothing` in Visual Basic)) returns a `null` reference (`Nothing` in Visual Basic).","nodes":[{"pos":[0,198],"content":"The intersection of two permissions is a permission that describes the set of operations they both describe in common. Only a demand that passes both original permissions will pass the intersection.","nodes":[{"content":"The intersection of two permissions is a permission that describes the set of operations they both describe in common. Only a demand that passes both original permissions will pass the intersection.","pos":[0,198],"nodes":[{"content":"The intersection of two permissions is a permission that describes the set of operations they both describe in common.","pos":[0,118]},{"content":"Only a demand that passes both original permissions will pass the intersection.","pos":[119,198]}]}]},{"pos":[205,434],"content":"The following statements are required to be `true` for all implementations of the Intersect method. X and Y represent <xref:System.Security.IPermission> object references that are not a `null` reference (Nothing in Visual Basic).","nodes":[{"content":"The following statements are required to be <ph id=\"ph1\">`true`</ph> for all implementations of the Intersect method.","pos":[0,99],"source":"The following statements are required to be `true` for all implementations of the Intersect method."},{"content":"X and Y represent <ph id=\"ph1\">&lt;xref:System.Security.IPermission&gt;</ph> object references that are not a <ph id=\"ph2\">`null`</ph> reference (Nothing in Visual Basic).","pos":[100,229],"source":" X and Y represent <xref:System.Security.IPermission> object references that are not a `null` reference (Nothing in Visual Basic)."}]},{"pos":[444,486],"content":"X.Intersect(X) returns a value equal to X.","nodes":[{"content":"X.Intersect(X) returns a value equal to X.","pos":[0,42]}]},{"pos":[496,552],"content":"X.Intersect(Y) returns the same value as Y.Intersect(X).","nodes":[{"content":"X.Intersect(Y) returns the same value as Y.Intersect(X).","pos":[0,56]}]},{"pos":[562,677],"content":"X.Intersect(a <ph id=\"ph1\">`null`</ph> reference (<ph id=\"ph2\">`Nothing`</ph> in Visual Basic)) returns a <ph id=\"ph3\">`null`</ph> reference (<ph id=\"ph4\">`Nothing`</ph> in Visual Basic).","source":"X.Intersect(a `null` reference (`Nothing` in Visual Basic)) returns a `null` reference (`Nothing` in Visual Basic)."}],"pos":[10513,11201],"yaml":true,"extradata":"MT"},{"content":"A permission to <xref href=\"System.Net.PeerToPeer.PnrpPermission.Intersect(System.Security.IPermission)\"></xref> with the current permission. It must be of the same type as the current permission.","nodes":[{"pos":[0,196],"content":"A permission to <xref href=\"System.Net.PeerToPeer.PnrpPermission.Intersect(System.Security.IPermission)\"></xref> with the current permission. It must be of the same type as the current permission.","nodes":[{"content":"A permission to <ph id=\"ph1\">&lt;xref href=\"System.Net.PeerToPeer.PnrpPermission.Intersect(System.Security.IPermission)\"&gt;&lt;/xref&gt;</ph> with the current permission.","pos":[0,141],"source":"A permission to <xref href=\"System.Net.PeerToPeer.PnrpPermission.Intersect(System.Security.IPermission)\"></xref> with the current permission."},{"content":"It must be of the same type as the current permission.","pos":[142,196]}]}],"pos":[11408,11605],"yaml":true},{"content":"A new permission that represents the intersection of the current <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref> and the specified permission. This new permission is a `null` reference (`Nothing` in Visual Basic) if the intersection is empty.","nodes":[{"pos":[0,252],"content":"A new permission that represents the intersection of the current <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref> and the specified permission. This new permission is a `null` reference (`Nothing` in Visual Basic) if the intersection is empty.","nodes":[{"content":"A new permission that represents the intersection of the current <ph id=\"ph1\">&lt;xref href=\"System.Net.PeerToPeer.PnrpPermission\"&gt;&lt;/xref&gt;</ph> and the specified permission.","pos":[0,152],"source":"A new permission that represents the intersection of the current <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref> and the specified permission."},{"content":"This new permission is a <ph id=\"ph1\">`null`</ph> reference (<ph id=\"ph2\">`Nothing`</ph> in Visual Basic) if the intersection is empty.","pos":[153,252],"source":" This new permission is a `null` reference (`Nothing` in Visual Basic) if the intersection is empty."}]}],"pos":[11676,11929],"yaml":true},{"content":"The target parameter is not a `null` reference (`Nothing` in Visual Basic) and is not an instance of the same class as the current permission.","nodes":[{"pos":[0,142],"content":"The target parameter is not a <ph id=\"ph1\">`null`</ph> reference (<ph id=\"ph2\">`Nothing`</ph> in Visual Basic) and is not an instance of the same class as the current permission.","source":"The target parameter is not a `null` reference (`Nothing` in Visual Basic) and is not an instance of the same class as the current permission."}],"pos":[12097,12240],"yaml":true},{"content":"Determines whether the current <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref> is a subset of the specified permission.","nodes":[{"pos":[0,129],"content":"Determines whether the current <ph id=\"ph1\">&lt;xref href=\"System.Net.PeerToPeer.PnrpPermission\"&gt;&lt;/xref&gt;</ph> is a subset of the specified permission.","source":"Determines whether the current <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref> is a subset of the specified permission."}],"pos":[13298,13428],"yaml":true},{"content":"The current <xref:System.Net.PeerToPeer.PnrpPermission> is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained by the specified permission. For example, a permission that represents access to \"*C:\\example.txt*\" is a subset of a permission that represents access to \"*C:\\\\*\". If this method returns `true`, the current permission represents no more access to the protected resource than does the specified permission.  \n  \n The following statements are required to be `true` for all implementations of the IsSubsetOf method. X, Y, and Z represent <xref:System.Security.IPermission> objects that are not a `null` reference (`Nothing` in Visual Basic).  \n  \n-   X.IsSubsetOf(X) returns `true`.  \n  \n-   X.IsSubsetOf(Y) returns the same value as Y.IsSubsetOf(X) if and only if X and Y represent the same set of permissions.  \n  \n-   If X.IsSubsetOf(Y) and Y.IsSubsetOf(Z) both return `true`, X.IsSubsetOf(Z) returns `true`.  \n  \n-  \n  \n If X represents an empty IPermission object with a permission state of *None* and Y represents an IPermission object that is a `null` reference (`Nothing` in Visual Basic), X.IsSubsetOf(Y) returns `true`. If Z is also an empty permission, the compound set operation X.Union(Z).IsSubsetOf(Y) also returns `true` because the <xref:System.Net.PeerToPeer.PnrpPermission.Union%2A> of two empty permissions is an empty permission.","nodes":[{"pos":[0,482],"content":"The current <xref:System.Net.PeerToPeer.PnrpPermission> is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained by the specified permission. For example, a permission that represents access to \"*C:\\example.txt*\" is a subset of a permission that represents access to \"*C:\\\\*\". If this method returns `true`, the current permission represents no more access to the protected resource than does the specified permission.","nodes":[{"content":"The current <ph id=\"ph1\">&lt;xref:System.Net.PeerToPeer.PnrpPermission&gt;</ph> is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained by the specified permission.","pos":[0,205],"source":"The current <xref:System.Net.PeerToPeer.PnrpPermission> is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained by the specified permission."},{"content":"For example, a permission that represents access to \"<bpt id=\"p1\">*</bpt>C:\\example.txt<ept id=\"p1\">*</ept>\" is a subset of a permission that represents access to \"<bpt id=\"p2\">*</bpt>C:<ph id=\"ph1\">\\\\</ph><ept id=\"p2\">*</ept>\".","pos":[206,340],"source":" For example, a permission that represents access to \"*C:\\example.txt*\" is a subset of a permission that represents access to \"*C:\\\\*\"."},{"content":"If this method returns <ph id=\"ph1\">`true`</ph>, the current permission represents no more access to the protected resource than does the specified permission.","pos":[341,482],"source":" If this method returns `true`, the current permission represents no more access to the protected resource than does the specified permission."}]},{"pos":[489,715],"content":"The following statements are required to be `true` for all implementations of the IsSubsetOf method. X, Y, and Z represent <xref:System.Security.IPermission> objects that are not a `null` reference (`Nothing` in Visual Basic).","nodes":[{"content":"The following statements are required to be <ph id=\"ph1\">`true`</ph> for all implementations of the IsSubsetOf method.","pos":[0,100],"source":"The following statements are required to be `true` for all implementations of the IsSubsetOf method."},{"content":"X, Y, and Z represent <ph id=\"ph1\">&lt;xref:System.Security.IPermission&gt;</ph> objects that are not a <ph id=\"ph2\">`null`</ph> reference (<ph id=\"ph3\">`Nothing`</ph> in Visual Basic).","pos":[101,226],"source":" X, Y, and Z represent <xref:System.Security.IPermission> objects that are not a `null` reference (`Nothing` in Visual Basic)."}]},{"pos":[725,756],"content":"X.IsSubsetOf(X) returns <ph id=\"ph1\">`true`</ph>.","source":"X.IsSubsetOf(X) returns `true`."},{"pos":[766,885],"content":"X.IsSubsetOf(Y) returns the same value as Y.IsSubsetOf(X) if and only if X and Y represent the same set of permissions.","nodes":[{"content":"X.IsSubsetOf(Y) returns the same value as Y.IsSubsetOf(X) if and only if X and Y represent the same set of permissions.","pos":[0,119]}]},{"pos":[895,985],"content":"If X.IsSubsetOf(Y) and Y.IsSubsetOf(Z) both return <ph id=\"ph1\">`true`</ph>, X.IsSubsetOf(Z) returns <ph id=\"ph2\">`true`</ph>.","source":"If X.IsSubsetOf(Y) and Y.IsSubsetOf(Z) both return `true`, X.IsSubsetOf(Z) returns `true`."},{"pos":[999,1423],"content":"If X represents an empty IPermission object with a permission state of *None* and Y represents an IPermission object that is a `null` reference (`Nothing` in Visual Basic), X.IsSubsetOf(Y) returns `true`. If Z is also an empty permission, the compound set operation X.Union(Z).IsSubsetOf(Y) also returns `true` because the <xref:System.Net.PeerToPeer.PnrpPermission.Union%2A> of two empty permissions is an empty permission.","nodes":[{"content":"If X represents an empty IPermission object with a permission state of <bpt id=\"p1\">*</bpt>None<ept id=\"p1\">*</ept> and Y represents an IPermission object that is a <ph id=\"ph1\">`null`</ph> reference (<ph id=\"ph2\">`Nothing`</ph> in Visual Basic), X.IsSubsetOf(Y) returns <ph id=\"ph3\">`true`</ph>.","pos":[0,204],"source":"If X represents an empty IPermission object with a permission state of *None* and Y represents an IPermission object that is a `null` reference (`Nothing` in Visual Basic), X.IsSubsetOf(Y) returns `true`."},{"content":"If Z is also an empty permission, the compound set operation X.Union(Z).IsSubsetOf(Y) also returns <ph id=\"ph1\">`true`</ph> because the <ph id=\"ph2\">&lt;xref:System.Net.PeerToPeer.PnrpPermission.Union%2A&gt;</ph> of two empty permissions is an empty permission.","pos":[205,424],"source":" If Z is also an empty permission, the compound set operation X.Union(Z).IsSubsetOf(Y) also returns `true` because the <xref:System.Net.PeerToPeer.PnrpPermission.Union%2A> of two empty permissions is an empty permission."}]}],"pos":[13439,14884],"yaml":true,"extradata":"MT"},{"content":"A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.","nodes":[{"pos":[0,130],"content":"A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.","nodes":[{"content":"A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.","pos":[0,130],"nodes":[{"content":"A permission that is to be tested for the subset relationship.","pos":[0,62]},{"content":"This permission must be of the same type as the current permission.","pos":[63,130]}]}]}],"pos":[15069,15200],"yaml":true},{"content":"`True` if the current <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref> is a subset of the specified permission; otherwise, `false`.","nodes":[{"pos":[0,140],"content":"<ph id=\"ph1\">`True`</ph> if the current <ph id=\"ph2\">&lt;xref href=\"System.Net.PeerToPeer.PnrpPermission\"&gt;&lt;/xref&gt;</ph> is a subset of the specified permission; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`True` if the current <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref> is a subset of the specified permission; otherwise, `false`."}],"pos":[15258,15401],"yaml":true},{"content":"The target parameter is not a `null` reference (`Nothing` in Visual Basic) and is not an instance of the same class as the current permission.","nodes":[{"pos":[0,142],"content":"The target parameter is not a <ph id=\"ph1\">`null`</ph> reference (<ph id=\"ph2\">`Nothing`</ph> in Visual Basic) and is not an instance of the same class as the current permission.","source":"The target parameter is not a `null` reference (`Nothing` in Visual Basic) and is not an instance of the same class as the current permission."}],"pos":[15570,15713],"yaml":true},{"content":"Returns a value specifying whether the current <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref> is unrestricted.","nodes":[{"pos":[0,121],"content":"Returns a value specifying whether the current <ph id=\"ph1\">&lt;xref href=\"System.Net.PeerToPeer.PnrpPermission\"&gt;&lt;/xref&gt;</ph> is unrestricted.","source":"Returns a value specifying whether the current <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref> is unrestricted."}],"pos":[16675,16797],"yaml":true},{"content":"An unrestricted permission represents access to any and all resources protected by the permission.","nodes":[{"pos":[0,98],"content":"An unrestricted permission represents access to any and all resources protected by the permission.","nodes":[{"content":"An unrestricted permission represents access to any and all resources protected by the permission.","pos":[0,98]}]}],"pos":[16808,16907],"yaml":true,"extradata":"MT"},{"content":"`True` if the current permission is unrestricted; otherwise, `false`.","nodes":[{"pos":[0,69],"content":"<ph id=\"ph1\">`True`</ph> if the current permission is unrestricted; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`True` if the current permission is unrestricted; otherwise, `false`."}],"pos":[17038,17110],"yaml":true},{"content":"Creates an XML encoding of the <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref> and its current state.","nodes":[{"pos":[0,111],"content":"Creates an XML encoding of the <ph id=\"ph1\">&lt;xref href=\"System.Net.PeerToPeer.PnrpPermission\"&gt;&lt;/xref&gt;</ph> and its current state.","source":"Creates an XML encoding of the <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref> and its current state."}],"pos":[18100,18212],"yaml":true},{"content":"A <xref href=\"System.Security.SecurityElement\"></xref> object that contains an XML encoding of the permission, including any state information.","nodes":[{"pos":[0,143],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Security.SecurityElement\"&gt;&lt;/xref&gt;</ph> object that contains an XML encoding of the permission, including any state information.","source":"A <xref href=\"System.Security.SecurityElement\"></xref> object that contains an XML encoding of the permission, including any state information."}],"pos":[18387,18531],"yaml":true},{"content":"Creates a permission that is the union of the current <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref> and the specified permission.","nodes":[{"pos":[0,141],"content":"Creates a permission that is the union of the current <ph id=\"ph1\">&lt;xref href=\"System.Net.PeerToPeer.PnrpPermission\"&gt;&lt;/xref&gt;</ph> and the specified permission.","source":"Creates a permission that is the union of the current <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref> and the specified permission."}],"pos":[19632,19774],"yaml":true},{"content":"The result of a call to <xref:System.Net.PeerToPeer.PnrpPermission.Union%2A> is a permission that represents all the operations represented by both the current <xref:System.Net.PeerToPeer.PnrpPermission> and the specified permission. Any demand that passes either permission passes their union.  \n  \n The following statements are required to be `true` for all implementations of the Union method. X and Y represent <xref:System.Security.IPermission> objects that are not a `null` reference (`Nothing` in Visual Basic).  \n  \n-   X.Union(X) returns an object that has the same value as X.  \n  \n-   X.Union(Y) returns an object that has the same value as the object returned by Y.Union(X).  \n  \n-   X.Union(a `null` reference (`Nothing` in Visual Basic)) returns an object that has the same value as X.","nodes":[{"pos":[0,294],"content":"The result of a call to <xref:System.Net.PeerToPeer.PnrpPermission.Union%2A> is a permission that represents all the operations represented by both the current <xref:System.Net.PeerToPeer.PnrpPermission> and the specified permission. Any demand that passes either permission passes their union.","nodes":[{"content":"The result of a call to <xref:System.Net.PeerToPeer.PnrpPermission.Union%2A> is a permission that represents all the operations represented by both the current <xref:System.Net.PeerToPeer.PnrpPermission> and the specified permission. Any demand that passes either permission passes their union.","pos":[0,294],"nodes":[{"content":"The result of a call to <ph id=\"ph1\">&lt;xref:System.Net.PeerToPeer.PnrpPermission.Union%2A&gt;</ph> is a permission that represents all the operations represented by both the current <ph id=\"ph2\">&lt;xref:System.Net.PeerToPeer.PnrpPermission&gt;</ph> and the specified permission.","pos":[0,233],"source":"The result of a call to <xref:System.Net.PeerToPeer.PnrpPermission.Union%2A> is a permission that represents all the operations represented by both the current <xref:System.Net.PeerToPeer.PnrpPermission> and the specified permission."},{"content":"Any demand that passes either permission passes their union.","pos":[234,294]}]}]},{"pos":[301,518],"content":"The following statements are required to be `true` for all implementations of the Union method. X and Y represent <xref:System.Security.IPermission> objects that are not a `null` reference (`Nothing` in Visual Basic).","nodes":[{"content":"The following statements are required to be <ph id=\"ph1\">`true`</ph> for all implementations of the Union method.","pos":[0,95],"source":"The following statements are required to be `true` for all implementations of the Union method."},{"content":"X and Y represent <ph id=\"ph1\">&lt;xref:System.Security.IPermission&gt;</ph> objects that are not a <ph id=\"ph2\">`null`</ph> reference (<ph id=\"ph3\">`Nothing`</ph> in Visual Basic).","pos":[96,217],"source":" X and Y represent <xref:System.Security.IPermission> objects that are not a `null` reference (`Nothing` in Visual Basic)."}]},{"pos":[528,586],"content":"X.Union(X) returns an object that has the same value as X.","nodes":[{"content":"X.Union(X) returns an object that has the same value as X.","pos":[0,58]}]},{"pos":[596,686],"content":"X.Union(Y) returns an object that has the same value as the object returned by Y.Union(X).","nodes":[{"content":"X.Union(Y) returns an object that has the same value as the object returned by Y.Union(X).","pos":[0,90]}]},{"pos":[696,799],"content":"X.Union(a <ph id=\"ph1\">`null`</ph> reference (<ph id=\"ph2\">`Nothing`</ph> in Visual Basic)) returns an object that has the same value as X.","source":"X.Union(a `null` reference (`Nothing` in Visual Basic)) returns an object that has the same value as X."}],"pos":[19785,20595],"yaml":true,"extradata":"MT"},{"content":"A permission to combine with the current permission. It must be of the same type as the current permission.","nodes":[{"pos":[0,107],"content":"A permission to combine with the current permission. It must be of the same type as the current permission.","nodes":[{"content":"A permission to combine with the current permission. It must be of the same type as the current permission.","pos":[0,107],"nodes":[{"content":"A permission to combine with the current permission.","pos":[0,52]},{"content":"It must be of the same type as the current permission.","pos":[53,107]}]}]}],"pos":[20798,20906],"yaml":true},{"content":"A new permission that represents the <xref href=\"System.Net.PeerToPeer.PnrpPermission.Union(System.Security.IPermission)\"></xref> of the current <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref> and the specified permission.","nodes":[{"pos":[0,232],"content":"A new permission that represents the <ph id=\"ph1\">&lt;xref href=\"System.Net.PeerToPeer.PnrpPermission.Union(System.Security.IPermission)\"&gt;&lt;/xref&gt;</ph> of the current <ph id=\"ph2\">&lt;xref href=\"System.Net.PeerToPeer.PnrpPermission\"&gt;&lt;/xref&gt;</ph> and the specified permission.","source":"A new permission that represents the <xref href=\"System.Net.PeerToPeer.PnrpPermission.Union(System.Security.IPermission)\"></xref> of the current <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref> and the specified permission."}],"pos":[20977,21210],"yaml":true},{"content":"<code>target</code> parameter is invalid.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;target&lt;/code&gt;</ph> parameter is invalid.","source":"<code>target</code> parameter is invalid."}],"pos":[21374,21416],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Net.PeerToPeer.PnrpPermission\n  commentId: T:System.Net.PeerToPeer.PnrpPermission\n  id: PnrpPermission\n  children:\n  - System.Net.PeerToPeer.PnrpPermission.#ctor(System.Security.Permissions.PermissionState)\n  - System.Net.PeerToPeer.PnrpPermission.Copy\n  - System.Net.PeerToPeer.PnrpPermission.FromXml(System.Security.SecurityElement)\n  - System.Net.PeerToPeer.PnrpPermission.Intersect(System.Security.IPermission)\n  - System.Net.PeerToPeer.PnrpPermission.IsSubsetOf(System.Security.IPermission)\n  - System.Net.PeerToPeer.PnrpPermission.IsUnrestricted\n  - System.Net.PeerToPeer.PnrpPermission.ToXml\n  - System.Net.PeerToPeer.PnrpPermission.Union(System.Security.IPermission)\n  langs:\n  - csharp\n  name: PnrpPermission\n  nameWithType: PnrpPermission\n  fullName: System.Net.PeerToPeer.PnrpPermission\n  type: Class\n  assemblies:\n  - System.Net\n  - System.Security.Permissions\n  namespace: System.Net.PeerToPeer\n  summary: Specifies the values that are used in <xref href=\"System.Net.PeerToPeer\"></xref> object permissions.\n  remarks: \"The default permissions allow all local and Intranet zone applications to access PNRP services. If the default permissions are not changed, all link-local and site-local applications have access to Peer-to-Peer services, but global (internet) applications have no access.  \\n  \\n Instances of this type have two permission states: they either have no access to the resource(s) protected by the permission, or they have unrestricted full access to those resources.\"\n  syntax:\n    content: 'public sealed class PnrpPermission : System.Security.CodeAccessPermission, System.Security.Permissions.IUnrestrictedPermission'\n  inheritance:\n  - System.Object\n  - System.Security.CodeAccessPermission\n  implements:\n  - System.Security.Permissions.IUnrestrictedPermission\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Security.CodeAccessPermission.Assert\n  - System.Security.CodeAccessPermission.Demand\n  - System.Security.CodeAccessPermission.Deny\n  - System.Security.CodeAccessPermission.Equals(System.Object)\n  - System.Security.CodeAccessPermission.GetHashCode\n  - System.Security.CodeAccessPermission.PermitOnly\n  - System.Security.CodeAccessPermission.RevertAll\n  - System.Security.CodeAccessPermission.RevertAssert\n  - System.Security.CodeAccessPermission.RevertDeny\n  - System.Security.CodeAccessPermission.RevertPermitOnly\n  - System.Security.CodeAccessPermission.System#Security#IPermission#Demand\n  - System.Security.CodeAccessPermission.System#Security#IStackWalk#Assert\n  - System.Security.CodeAccessPermission.System#Security#IStackWalk#Demand\n  - System.Security.CodeAccessPermission.System#Security#IStackWalk#Deny\n  - System.Security.CodeAccessPermission.System#Security#IStackWalk#PermitOnly\n  - System.Security.CodeAccessPermission.ToString\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.PeerToPeer/PnrpPermission.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.PeerToPeer.PnrpPermission.#ctor(System.Security.Permissions.PermissionState)\n  commentId: M:System.Net.PeerToPeer.PnrpPermission.#ctor(System.Security.Permissions.PermissionState)\n  id: '#ctor(System.Security.Permissions.PermissionState)'\n  parent: System.Net.PeerToPeer.PnrpPermission\n  langs:\n  - csharp\n  name: PnrpPermission(PermissionState)\n  nameWithType: PnrpPermission.PnrpPermission(PermissionState)\n  fullName: PnrpPermission.PnrpPermission(PermissionState)\n  type: Constructor\n  assemblies:\n  - System.Net\n  - System.Security.Permissions\n  namespace: System.Net.PeerToPeer\n  summary: Initializes a new instance of the <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref> class with the supplied initial permission state.\n  remarks: \"Instances of this type have two permission states: they either have no access to the resource(s) protected by the permission, or they have unrestricted full access to those resources.  \\n  \\n If `state` is Unrestricted, the PnrpPermission instance passes all demands. If `state` contains any other value, the PnrpPermission instance fails all demands.\"\n  syntax:\n    content: public PnrpPermission (System.Security.Permissions.PermissionState state);\n    parameters:\n    - id: state\n      type: System.Security.Permissions.PermissionState\n      description: One of the values in the <xref href=\"System.Security.Permissions.PermissionState\"></xref> enumeration.\n  overload: System.Net.PeerToPeer.PnrpPermission.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.PeerToPeer/PnrpPermission.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.PeerToPeer.PnrpPermission.Copy\n  commentId: M:System.Net.PeerToPeer.PnrpPermission.Copy\n  id: Copy\n  parent: System.Net.PeerToPeer.PnrpPermission\n  langs:\n  - csharp\n  name: Copy()\n  nameWithType: PnrpPermission.Copy()\n  fullName: PnrpPermission.Copy()\n  type: Method\n  assemblies:\n  - System.Net\n  - System.Security.Permissions\n  namespace: System.Net.PeerToPeer\n  summary: Creates and returns an identical copy of the current <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref>.\n  remarks: \"A copy of a permission represents the same access to resources as the original permission.  \\n  \\n Instances of this type have two permission states: they either have no access to the resource(s) protected by the permission, or they have unrestricted full access to those resources.\"\n  syntax:\n    content: public override System.Security.IPermission Copy ();\n    parameters: []\n    return:\n      type: System.Security.IPermission\n      description: An object with an IPermission interface, whose instance contains a copy of the current instance of <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref>.\n  overload: System.Net.PeerToPeer.PnrpPermission.Copy*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"-   The parameter is not a valid <xref href=\\\"System.Net.PeerToPeer.PnrpPermission\\\"></xref> element.  \\n  \\n-   The parameter's version number is not supported.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The parameter is a `null` reference (`Nothing` in Visual Basic).\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.PeerToPeer/PnrpPermission.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.PeerToPeer.PnrpPermission.FromXml(System.Security.SecurityElement)\n  commentId: M:System.Net.PeerToPeer.PnrpPermission.FromXml(System.Security.SecurityElement)\n  id: FromXml(System.Security.SecurityElement)\n  parent: System.Net.PeerToPeer.PnrpPermission\n  langs:\n  - csharp\n  name: FromXml(SecurityElement)\n  nameWithType: PnrpPermission.FromXml(SecurityElement)\n  fullName: PnrpPermission.FromXml(SecurityElement)\n  type: Method\n  assemblies:\n  - System.Net\n  - System.Security.Permissions\n  namespace: System.Net.PeerToPeer\n  summary: Reconstructs a security object with a specified state from an XML encoding.\n  remarks: \"Represents the XML object model for encoding security objects. This class cannot be inherited.  \\n  \\n This class is intended to be a lightweight implementation of a simple XML object model for use within the security system, and not for use as a general XML object model.\"\n  syntax:\n    content: public override void FromXml (System.Security.SecurityElement e);\n    parameters:\n    - id: e\n      type: System.Security.SecurityElement\n      description: The XML encoding to use to reconstruct the permission.\n  overload: System.Net.PeerToPeer.PnrpPermission.FromXml*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"-   The parameter is not a valid <xref href=\\\"System.Net.PeerToPeer.PnrpPermission\\\"></xref> element.  \\n  \\n-   The parameter's version number is not supported.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The parameter is a `null` reference (`Nothing` in Visual Basic).\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.PeerToPeer/PnrpPermission.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.PeerToPeer.PnrpPermission.Intersect(System.Security.IPermission)\n  commentId: M:System.Net.PeerToPeer.PnrpPermission.Intersect(System.Security.IPermission)\n  id: Intersect(System.Security.IPermission)\n  parent: System.Net.PeerToPeer.PnrpPermission\n  langs:\n  - csharp\n  name: Intersect(IPermission)\n  nameWithType: PnrpPermission.Intersect(IPermission)\n  fullName: PnrpPermission.Intersect(IPermission)\n  type: Method\n  assemblies:\n  - System.Net\n  - System.Security.Permissions\n  namespace: System.Net.PeerToPeer\n  summary: Creates and returns a permission that is the intersection of the current <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref> and the specified permission.\n  remarks: \"The intersection of two permissions is a permission that describes the set of operations they both describe in common. Only a demand that passes both original permissions will pass the intersection.  \\n  \\n The following statements are required to be `true` for all implementations of the Intersect method. X and Y represent <xref:System.Security.IPermission> object references that are not a `null` reference (Nothing in Visual Basic).  \\n  \\n-   X.Intersect(X) returns a value equal to X.  \\n  \\n-   X.Intersect(Y) returns the same value as Y.Intersect(X).  \\n  \\n-   X.Intersect(a `null` reference (`Nothing` in Visual Basic)) returns a `null` reference (`Nothing` in Visual Basic).\"\n  syntax:\n    content: public override System.Security.IPermission Intersect (System.Security.IPermission target);\n    parameters:\n    - id: target\n      type: System.Security.IPermission\n      description: A permission to <xref href=\"System.Net.PeerToPeer.PnrpPermission.Intersect(System.Security.IPermission)\"></xref> with the current permission. It must be of the same type as the current permission.\n    return:\n      type: System.Security.IPermission\n      description: A new permission that represents the intersection of the current <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref> and the specified permission. This new permission is a `null` reference (`Nothing` in Visual Basic) if the intersection is empty.\n  overload: System.Net.PeerToPeer.PnrpPermission.Intersect*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The target parameter is not a `null` reference (`Nothing` in Visual Basic) and is not an instance of the same class as the current permission.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.PeerToPeer/PnrpPermission.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.PeerToPeer.PnrpPermission.IsSubsetOf(System.Security.IPermission)\n  commentId: M:System.Net.PeerToPeer.PnrpPermission.IsSubsetOf(System.Security.IPermission)\n  id: IsSubsetOf(System.Security.IPermission)\n  parent: System.Net.PeerToPeer.PnrpPermission\n  langs:\n  - csharp\n  name: IsSubsetOf(IPermission)\n  nameWithType: PnrpPermission.IsSubsetOf(IPermission)\n  fullName: PnrpPermission.IsSubsetOf(IPermission)\n  type: Method\n  assemblies:\n  - System.Net\n  - System.Security.Permissions\n  namespace: System.Net.PeerToPeer\n  summary: Determines whether the current <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref> is a subset of the specified permission.\n  remarks: \"The current <xref:System.Net.PeerToPeer.PnrpPermission> is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained by the specified permission. For example, a permission that represents access to \\\"*C:\\\\example.txt*\\\" is a subset of a permission that represents access to \\\"*C:\\\\\\\\*\\\". If this method returns `true`, the current permission represents no more access to the protected resource than does the specified permission.  \\n  \\n The following statements are required to be `true` for all implementations of the IsSubsetOf method. X, Y, and Z represent <xref:System.Security.IPermission> objects that are not a `null` reference (`Nothing` in Visual Basic).  \\n  \\n-   X.IsSubsetOf(X) returns `true`.  \\n  \\n-   X.IsSubsetOf(Y) returns the same value as Y.IsSubsetOf(X) if and only if X and Y represent the same set of permissions.  \\n  \\n-   If X.IsSubsetOf(Y) and Y.IsSubsetOf(Z) both return `true`, X.IsSubsetOf(Z) returns `true`.  \\n  \\n-  \\n  \\n If X represents an empty IPermission object with a permission state of *None* and Y represents an IPermission object that is a `null` reference (`Nothing` in Visual Basic), X.IsSubsetOf(Y) returns `true`. If Z is also an empty permission, the compound set operation X.Union(Z).IsSubsetOf(Y) also returns `true` because the <xref:System.Net.PeerToPeer.PnrpPermission.Union%2A> of two empty permissions is an empty permission.\"\n  syntax:\n    content: public override bool IsSubsetOf (System.Security.IPermission target);\n    parameters:\n    - id: target\n      type: System.Security.IPermission\n      description: A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.\n    return:\n      type: System.Boolean\n      description: '`True` if the current <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref> is a subset of the specified permission; otherwise, `false`.'\n  overload: System.Net.PeerToPeer.PnrpPermission.IsSubsetOf*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The target parameter is not a `null` reference (`Nothing` in Visual Basic) and is not an instance of the same class as the current permission.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.PeerToPeer/PnrpPermission.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.PeerToPeer.PnrpPermission.IsUnrestricted\n  commentId: M:System.Net.PeerToPeer.PnrpPermission.IsUnrestricted\n  id: IsUnrestricted\n  parent: System.Net.PeerToPeer.PnrpPermission\n  langs:\n  - csharp\n  name: IsUnrestricted()\n  nameWithType: PnrpPermission.IsUnrestricted()\n  fullName: PnrpPermission.IsUnrestricted()\n  type: Method\n  assemblies:\n  - System.Net\n  - System.Security.Permissions\n  namespace: System.Net.PeerToPeer\n  summary: Returns a value specifying whether the current <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref> is unrestricted.\n  remarks: An unrestricted permission represents access to any and all resources protected by the permission.\n  syntax:\n    content: public bool IsUnrestricted ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`True` if the current permission is unrestricted; otherwise, `false`.'\n  overload: System.Net.PeerToPeer.PnrpPermission.IsUnrestricted*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.PeerToPeer/PnrpPermission.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.PeerToPeer.PnrpPermission.ToXml\n  commentId: M:System.Net.PeerToPeer.PnrpPermission.ToXml\n  id: ToXml\n  parent: System.Net.PeerToPeer.PnrpPermission\n  langs:\n  - csharp\n  name: ToXml()\n  nameWithType: PnrpPermission.ToXml()\n  fullName: PnrpPermission.ToXml()\n  type: Method\n  assemblies:\n  - System.Net\n  - System.Security.Permissions\n  namespace: System.Net.PeerToPeer\n  summary: Creates an XML encoding of the <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref> and its current state.\n  syntax:\n    content: public override System.Security.SecurityElement ToXml ();\n    parameters: []\n    return:\n      type: System.Security.SecurityElement\n      description: A <xref href=\"System.Security.SecurityElement\"></xref> object that contains an XML encoding of the permission, including any state information.\n  overload: System.Net.PeerToPeer.PnrpPermission.ToXml*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.PeerToPeer/PnrpPermission.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.PeerToPeer.PnrpPermission.Union(System.Security.IPermission)\n  commentId: M:System.Net.PeerToPeer.PnrpPermission.Union(System.Security.IPermission)\n  id: Union(System.Security.IPermission)\n  parent: System.Net.PeerToPeer.PnrpPermission\n  langs:\n  - csharp\n  name: Union(IPermission)\n  nameWithType: PnrpPermission.Union(IPermission)\n  fullName: PnrpPermission.Union(IPermission)\n  type: Method\n  assemblies:\n  - System.Net\n  - System.Security.Permissions\n  namespace: System.Net.PeerToPeer\n  summary: Creates a permission that is the union of the current <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref> and the specified permission.\n  remarks: \"The result of a call to <xref:System.Net.PeerToPeer.PnrpPermission.Union%2A> is a permission that represents all the operations represented by both the current <xref:System.Net.PeerToPeer.PnrpPermission> and the specified permission. Any demand that passes either permission passes their union.  \\n  \\n The following statements are required to be `true` for all implementations of the Union method. X and Y represent <xref:System.Security.IPermission> objects that are not a `null` reference (`Nothing` in Visual Basic).  \\n  \\n-   X.Union(X) returns an object that has the same value as X.  \\n  \\n-   X.Union(Y) returns an object that has the same value as the object returned by Y.Union(X).  \\n  \\n-   X.Union(a `null` reference (`Nothing` in Visual Basic)) returns an object that has the same value as X.\"\n  syntax:\n    content: public override System.Security.IPermission Union (System.Security.IPermission target);\n    parameters:\n    - id: target\n      type: System.Security.IPermission\n      description: A permission to combine with the current permission. It must be of the same type as the current permission.\n    return:\n      type: System.Security.IPermission\n      description: A new permission that represents the <xref href=\"System.Net.PeerToPeer.PnrpPermission.Union(System.Security.IPermission)\"></xref> of the current <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref> and the specified permission.\n  overload: System.Net.PeerToPeer.PnrpPermission.Union*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>target</code> parameter is invalid.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.PeerToPeer/PnrpPermission.xml\n  ms.author: bobdel\n  manager: markl\nreferences:\n- uid: System.Security.CodeAccessPermission\n  parent: System.Security\n  isExternal: false\n  name: CodeAccessPermission\n  nameWithType: CodeAccessPermission\n  fullName: System.Security.CodeAccessPermission\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.Net.PeerToPeer.PnrpPermission.#ctor(System.Security.Permissions.PermissionState)\n  parent: System.Net.PeerToPeer.PnrpPermission\n  isExternal: false\n  name: PnrpPermission(PermissionState)\n  nameWithType: PnrpPermission.PnrpPermission(PermissionState)\n  fullName: PnrpPermission.PnrpPermission(PermissionState)\n- uid: System.Security.Permissions.PermissionState\n  parent: System.Security.Permissions\n  isExternal: false\n  name: PermissionState\n  nameWithType: PermissionState\n  fullName: System.Security.Permissions.PermissionState\n- uid: System.Net.PeerToPeer.PnrpPermission.Copy\n  parent: System.Net.PeerToPeer.PnrpPermission\n  isExternal: false\n  name: Copy()\n  nameWithType: PnrpPermission.Copy()\n  fullName: PnrpPermission.Copy()\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Net.PeerToPeer.PnrpPermission.FromXml(System.Security.SecurityElement)\n  parent: System.Net.PeerToPeer.PnrpPermission\n  isExternal: false\n  name: FromXml(SecurityElement)\n  nameWithType: PnrpPermission.FromXml(SecurityElement)\n  fullName: PnrpPermission.FromXml(SecurityElement)\n- uid: System.Security.SecurityElement\n  parent: System.Security\n  isExternal: false\n  name: SecurityElement\n  nameWithType: SecurityElement\n  fullName: System.Security.SecurityElement\n- uid: System.Net.PeerToPeer.PnrpPermission.Intersect(System.Security.IPermission)\n  parent: System.Net.PeerToPeer.PnrpPermission\n  isExternal: false\n  name: Intersect(IPermission)\n  nameWithType: PnrpPermission.Intersect(IPermission)\n  fullName: PnrpPermission.Intersect(IPermission)\n- uid: System.Net.PeerToPeer.PnrpPermission.IsSubsetOf(System.Security.IPermission)\n  parent: System.Net.PeerToPeer.PnrpPermission\n  isExternal: false\n  name: IsSubsetOf(IPermission)\n  nameWithType: PnrpPermission.IsSubsetOf(IPermission)\n  fullName: PnrpPermission.IsSubsetOf(IPermission)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Net.PeerToPeer.PnrpPermission.IsUnrestricted\n  parent: System.Net.PeerToPeer.PnrpPermission\n  isExternal: false\n  name: IsUnrestricted()\n  nameWithType: PnrpPermission.IsUnrestricted()\n  fullName: PnrpPermission.IsUnrestricted()\n- uid: System.Net.PeerToPeer.PnrpPermission.ToXml\n  parent: System.Net.PeerToPeer.PnrpPermission\n  isExternal: false\n  name: ToXml()\n  nameWithType: PnrpPermission.ToXml()\n  fullName: PnrpPermission.ToXml()\n- uid: System.Net.PeerToPeer.PnrpPermission.Union(System.Security.IPermission)\n  parent: System.Net.PeerToPeer.PnrpPermission\n  isExternal: false\n  name: Union(IPermission)\n  nameWithType: PnrpPermission.Union(IPermission)\n  fullName: PnrpPermission.Union(IPermission)\n- uid: System.Net.PeerToPeer.PnrpPermission.#ctor*\n  parent: System.Net.PeerToPeer.PnrpPermission\n  isExternal: false\n  name: PnrpPermission\n  nameWithType: PnrpPermission.PnrpPermission\n  fullName: PnrpPermission.PnrpPermission\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.PeerToPeer/PnrpPermission.xml\n- uid: System.Net.PeerToPeer.PnrpPermission.Copy*\n  parent: System.Net.PeerToPeer.PnrpPermission\n  isExternal: false\n  name: Copy\n  nameWithType: PnrpPermission.Copy\n  fullName: PnrpPermission.Copy\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.PeerToPeer/PnrpPermission.xml\n- uid: System.Net.PeerToPeer.PnrpPermission.FromXml*\n  parent: System.Net.PeerToPeer.PnrpPermission\n  isExternal: false\n  name: FromXml\n  nameWithType: PnrpPermission.FromXml\n  fullName: PnrpPermission.FromXml\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.PeerToPeer/PnrpPermission.xml\n- uid: System.Net.PeerToPeer.PnrpPermission.Intersect*\n  parent: System.Net.PeerToPeer.PnrpPermission\n  isExternal: false\n  name: Intersect\n  nameWithType: PnrpPermission.Intersect\n  fullName: PnrpPermission.Intersect\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.PeerToPeer/PnrpPermission.xml\n- uid: System.Net.PeerToPeer.PnrpPermission.IsSubsetOf*\n  parent: System.Net.PeerToPeer.PnrpPermission\n  isExternal: false\n  name: IsSubsetOf\n  nameWithType: PnrpPermission.IsSubsetOf\n  fullName: PnrpPermission.IsSubsetOf\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.PeerToPeer/PnrpPermission.xml\n- uid: System.Net.PeerToPeer.PnrpPermission.IsUnrestricted*\n  parent: System.Net.PeerToPeer.PnrpPermission\n  isExternal: false\n  name: IsUnrestricted\n  nameWithType: PnrpPermission.IsUnrestricted\n  fullName: PnrpPermission.IsUnrestricted\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.PeerToPeer/PnrpPermission.xml\n- uid: System.Net.PeerToPeer.PnrpPermission.ToXml*\n  parent: System.Net.PeerToPeer.PnrpPermission\n  isExternal: false\n  name: ToXml\n  nameWithType: PnrpPermission.ToXml\n  fullName: PnrpPermission.ToXml\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.PeerToPeer/PnrpPermission.xml\n- uid: System.Net.PeerToPeer.PnrpPermission.Union*\n  parent: System.Net.PeerToPeer.PnrpPermission\n  isExternal: false\n  name: Union\n  nameWithType: PnrpPermission.Union\n  fullName: PnrpPermission.Union\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.PeerToPeer/PnrpPermission.xml\n- uid: System.Security.CodeAccessPermission.Equals(System.Object)\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: CodeAccessPermission.Equals(Object)\n  fullName: CodeAccessPermission.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Security.CodeAccessPermission.GetHashCode\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: CodeAccessPermission.GetHashCode()\n  fullName: CodeAccessPermission.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Security.CodeAccessPermission.ToString\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: ToString()\n  nameWithType: CodeAccessPermission.ToString()\n  fullName: CodeAccessPermission.ToString()\n- uid: System.Security.CodeAccessPermission.Assert\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: Assert()\n  nameWithType: CodeAccessPermission.Assert()\n  fullName: CodeAccessPermission.Assert()\n- uid: System.Security.CodeAccessPermission.Demand\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: Demand()\n  nameWithType: CodeAccessPermission.Demand()\n  fullName: CodeAccessPermission.Demand()\n- uid: System.Security.CodeAccessPermission.Deny\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: Deny()\n  nameWithType: CodeAccessPermission.Deny()\n  fullName: CodeAccessPermission.Deny()\n- uid: System.Security.CodeAccessPermission.PermitOnly\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: PermitOnly()\n  nameWithType: CodeAccessPermission.PermitOnly()\n  fullName: CodeAccessPermission.PermitOnly()\n- uid: System.Security.CodeAccessPermission.RevertAll\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: RevertAll()\n  nameWithType: CodeAccessPermission.RevertAll()\n  fullName: CodeAccessPermission.RevertAll()\n- uid: System.Security.CodeAccessPermission.RevertAssert\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: RevertAssert()\n  nameWithType: CodeAccessPermission.RevertAssert()\n  fullName: CodeAccessPermission.RevertAssert()\n- uid: System.Security.CodeAccessPermission.RevertDeny\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: RevertDeny()\n  nameWithType: CodeAccessPermission.RevertDeny()\n  fullName: CodeAccessPermission.RevertDeny()\n- uid: System.Security.CodeAccessPermission.RevertPermitOnly\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: RevertPermitOnly()\n  nameWithType: CodeAccessPermission.RevertPermitOnly()\n  fullName: CodeAccessPermission.RevertPermitOnly()\n- uid: System.Security.CodeAccessPermission.System#Security#IPermission#Demand\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: IPermission.Demand()\n  nameWithType: CodeAccessPermission.IPermission.Demand()\n  fullName: CodeAccessPermission.IPermission.Demand()\n- uid: System.Security.CodeAccessPermission.System#Security#IStackWalk#Assert\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: IStackWalk.Assert()\n  nameWithType: CodeAccessPermission.IStackWalk.Assert()\n  fullName: CodeAccessPermission.IStackWalk.Assert()\n- uid: System.Security.CodeAccessPermission.System#Security#IStackWalk#Demand\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: IStackWalk.Demand()\n  nameWithType: CodeAccessPermission.IStackWalk.Demand()\n  fullName: CodeAccessPermission.IStackWalk.Demand()\n- uid: System.Security.CodeAccessPermission.System#Security#IStackWalk#Deny\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: IStackWalk.Deny()\n  nameWithType: CodeAccessPermission.IStackWalk.Deny()\n  fullName: CodeAccessPermission.IStackWalk.Deny()\n- uid: System.Security.CodeAccessPermission.System#Security#IStackWalk#PermitOnly\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: IStackWalk.PermitOnly()\n  nameWithType: CodeAccessPermission.IStackWalk.PermitOnly()\n  fullName: CodeAccessPermission.IStackWalk.PermitOnly()\n- uid: System.Security.Permissions.IUnrestrictedPermission\n  parent: System.Security.Permissions\n  isExternal: false\n  name: IUnrestrictedPermission\n  nameWithType: IUnrestrictedPermission\n  fullName: System.Security.Permissions.IUnrestrictedPermission\n"}