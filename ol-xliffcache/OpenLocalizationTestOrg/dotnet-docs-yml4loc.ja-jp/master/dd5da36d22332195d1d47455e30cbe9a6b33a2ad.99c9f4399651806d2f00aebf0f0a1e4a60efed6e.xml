{"nodes":[{"content":"Represents a simple last-in-first-out (LIFO) non-generic collection of objects.","nodes":[{"pos":[0,79],"content":"Represents a simple last-in-first-out (LIFO) non-generic collection of objects.","nodes":[{"content":"Represents a simple last-in-first-out (LIFO) non-generic collection of objects.","pos":[0,79]}]}],"pos":[1077,1157],"yaml":true},{"content":"For the generic version of this collection, see <xref:System.Collections.Generic.Stack%601?displayProperty=fullName>.  \n  \n The capacity of a <xref:System.Collections.Stack> is the number of elements the <xref:System.Collections.Stack> can hold. As elements are added to a <xref:System.Collections.Stack>, the capacity is automatically increased as required through reallocation.  \n  \n If <xref:System.Collections.Stack.Count%2A> is less than the capacity of the stack, <xref:System.Collections.Stack.Push%2A> is an O(1) operation. If the capacity needs to be increased to accommodate the new element, <xref:System.Collections.Stack.Push%2A> becomes an O(`n`) operation, where `n` is <xref:System.Collections.Stack.Count%2A>. <xref:System.Collections.Stack.Pop%2A> is an O(1) operation.  \n  \n <xref:System.Collections.Stack> accepts `null` as a valid value and allows duplicate elements.","nodes":[{"pos":[0,117],"content":"For the generic version of this collection, see <xref:System.Collections.Generic.Stack%601?displayProperty=fullName>.","nodes":[{"content":"For the generic version of this collection, see <ph id=\"ph1\">&lt;xref:System.Collections.Generic.Stack%601?displayProperty=fullName&gt;</ph>.","pos":[0,117],"source":"For the generic version of this collection, see <xref:System.Collections.Generic.Stack%601?displayProperty=fullName>."}]},{"pos":[124,379],"content":"The capacity of a <xref:System.Collections.Stack> is the number of elements the <xref:System.Collections.Stack> can hold. As elements are added to a <xref:System.Collections.Stack>, the capacity is automatically increased as required through reallocation.","nodes":[{"content":"The capacity of a <xref:System.Collections.Stack> is the number of elements the <xref:System.Collections.Stack> can hold. As elements are added to a <xref:System.Collections.Stack>, the capacity is automatically increased as required through reallocation.","pos":[0,255],"nodes":[{"content":"The capacity of a <ph id=\"ph1\">&lt;xref:System.Collections.Stack&gt;</ph> is the number of elements the <ph id=\"ph2\">&lt;xref:System.Collections.Stack&gt;</ph> can hold.","pos":[0,121],"source":"The capacity of a <xref:System.Collections.Stack> is the number of elements the <xref:System.Collections.Stack> can hold."},{"content":"As elements are added to a <ph id=\"ph1\">&lt;xref:System.Collections.Stack&gt;</ph>, the capacity is automatically increased as required through reallocation.","pos":[122,255],"source":" As elements are added to a <xref:System.Collections.Stack>, the capacity is automatically increased as required through reallocation."}]}]},{"pos":[386,786],"content":"If <xref:System.Collections.Stack.Count%2A> is less than the capacity of the stack, <xref:System.Collections.Stack.Push%2A> is an O(1) operation. If the capacity needs to be increased to accommodate the new element, <xref:System.Collections.Stack.Push%2A> becomes an O(`n`) operation, where `n` is <xref:System.Collections.Stack.Count%2A>. <xref:System.Collections.Stack.Pop%2A> is an O(1) operation.","nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph> is less than the capacity of the stack, <ph id=\"ph2\">&lt;xref:System.Collections.Stack.Push%2A&gt;</ph> is an O(1) operation.","pos":[0,145],"source":"If <xref:System.Collections.Stack.Count%2A> is less than the capacity of the stack, <xref:System.Collections.Stack.Push%2A> is an O(1) operation."},{"content":"If the capacity needs to be increased to accommodate the new element, <ph id=\"ph1\">&lt;xref:System.Collections.Stack.Push%2A&gt;</ph> becomes an O(<ph id=\"ph2\">`n`</ph>) operation, where <ph id=\"ph3\">`n`</ph> is <ph id=\"ph4\">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph>.","pos":[146,339],"source":" If the capacity needs to be increased to accommodate the new element, <xref:System.Collections.Stack.Push%2A> becomes an O(`n`) operation, where `n` is <xref:System.Collections.Stack.Count%2A>."},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Stack.Pop%2A&gt;</ph> is an O(1) operation.","pos":[340,400],"source":" <xref:System.Collections.Stack.Pop%2A> is an O(1) operation."}]},{"pos":[793,887],"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Stack&gt;</ph> accepts <ph id=\"ph2\">`null`</ph> as a valid value and allows duplicate elements.","source":"<xref:System.Collections.Stack> accepts `null` as a valid value and allows duplicate elements."}],"pos":[1168,2064],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Collections.Stack\"></xref> class that is empty and has the default initial capacity.","nodes":[{"pos":[0,137],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Stack\"&gt;&lt;/xref&gt;</ph> class that is empty and has the default initial capacity.","source":"Initializes a new instance of the <xref href=\"System.Collections.Stack\"></xref> class that is empty and has the default initial capacity."}],"pos":[4676,4814],"yaml":true},{"content":"The capacity of a <xref:System.Collections.Stack> is the number of elements that the <xref:System.Collections.Stack> can hold. As elements are added to a <xref:System.Collections.Stack>, the capacity is automatically increased as required by reallocating the internal array.  \n  \n If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Stack>.  \n  \n This constructor is an O(1) operation.","nodes":[{"pos":[0,274],"content":"The capacity of a <xref:System.Collections.Stack> is the number of elements that the <xref:System.Collections.Stack> can hold. As elements are added to a <xref:System.Collections.Stack>, the capacity is automatically increased as required by reallocating the internal array.","nodes":[{"content":"The capacity of a <xref:System.Collections.Stack> is the number of elements that the <xref:System.Collections.Stack> can hold. As elements are added to a <xref:System.Collections.Stack>, the capacity is automatically increased as required by reallocating the internal array.","pos":[0,274],"nodes":[{"content":"The capacity of a <ph id=\"ph1\">&lt;xref:System.Collections.Stack&gt;</ph> is the number of elements that the <ph id=\"ph2\">&lt;xref:System.Collections.Stack&gt;</ph> can hold.","pos":[0,126],"source":"The capacity of a <xref:System.Collections.Stack> is the number of elements that the <xref:System.Collections.Stack> can hold."},{"content":"As elements are added to a <ph id=\"ph1\">&lt;xref:System.Collections.Stack&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.","pos":[127,274],"source":" As elements are added to a <xref:System.Collections.Stack>, the capacity is automatically increased as required by reallocating the internal array."}]}]},{"pos":[281,485],"content":"If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Stack>.","nodes":[{"content":"If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id=\"ph1\">&lt;xref:System.Collections.Stack&gt;</ph>.","pos":[0,204],"source":"If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Stack>."}]},{"pos":[492,530],"content":"This constructor is an O(1) operation.","nodes":[{"content":"This constructor is an O(1) operation.","pos":[0,38]}]}],"pos":[4825,5362],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Collections.Stack\"></xref> class that contains elements copied from the specified collection and has the same initial capacity as the number of elements copied.","nodes":[{"pos":[0,213],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Stack\"&gt;&lt;/xref&gt;</ph> class that contains elements copied from the specified collection and has the same initial capacity as the number of elements copied.","source":"Initializes a new instance of the <xref href=\"System.Collections.Stack\"></xref> class that contains elements copied from the specified collection and has the same initial capacity as the number of elements copied."}],"pos":[6758,6972],"yaml":true},{"content":"The capacity of a <xref:System.Collections.Stack> is the number of elements that the <xref:System.Collections.Stack> can hold. As elements are added to a <xref:System.Collections.Stack>, the capacity is automatically increased as required by reallocating the internal array.  \n  \n If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Stack>.  \n  \n The elements are copied onto the <xref:System.Collections.Stack> in the same order they are read by the <xref:System.Collections.IEnumerator> of the <xref:System.Collections.ICollection>.  \n  \n This constructor is an O(`n`) operation, where `n` is the number of elements in `col`.","nodes":[{"pos":[0,274],"content":"The capacity of a <xref:System.Collections.Stack> is the number of elements that the <xref:System.Collections.Stack> can hold. As elements are added to a <xref:System.Collections.Stack>, the capacity is automatically increased as required by reallocating the internal array.","nodes":[{"content":"The capacity of a <xref:System.Collections.Stack> is the number of elements that the <xref:System.Collections.Stack> can hold. As elements are added to a <xref:System.Collections.Stack>, the capacity is automatically increased as required by reallocating the internal array.","pos":[0,274],"nodes":[{"content":"The capacity of a <ph id=\"ph1\">&lt;xref:System.Collections.Stack&gt;</ph> is the number of elements that the <ph id=\"ph2\">&lt;xref:System.Collections.Stack&gt;</ph> can hold.","pos":[0,126],"source":"The capacity of a <xref:System.Collections.Stack> is the number of elements that the <xref:System.Collections.Stack> can hold."},{"content":"As elements are added to a <ph id=\"ph1\">&lt;xref:System.Collections.Stack&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.","pos":[127,274],"source":" As elements are added to a <xref:System.Collections.Stack>, the capacity is automatically increased as required by reallocating the internal array."}]}]},{"pos":[281,485],"content":"If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Stack>.","nodes":[{"content":"If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id=\"ph1\">&lt;xref:System.Collections.Stack&gt;</ph>.","pos":[0,204],"source":"If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Stack>."}]},{"pos":[492,679],"content":"The elements are copied onto the <xref:System.Collections.Stack> in the same order they are read by the <xref:System.Collections.IEnumerator> of the <xref:System.Collections.ICollection>.","nodes":[{"content":"The elements are copied onto the <ph id=\"ph1\">&lt;xref:System.Collections.Stack&gt;</ph> in the same order they are read by the <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator&gt;</ph> of the <ph id=\"ph3\">&lt;xref:System.Collections.ICollection&gt;</ph>.","pos":[0,187],"source":"The elements are copied onto the <xref:System.Collections.Stack> in the same order they are read by the <xref:System.Collections.IEnumerator> of the <xref:System.Collections.ICollection>."}]},{"pos":[686,772],"content":"This constructor is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is the number of elements in <ph id=\"ph3\">`col`</ph>.","source":"This constructor is an O(`n`) operation, where `n` is the number of elements in `col`."}],"pos":[6983,7764],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Collections.ICollection\"></xref> to copy elements from.","nodes":[{"pos":[0,78],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> to copy elements from.","source":"The <xref href=\"System.Collections.ICollection\"></xref> to copy elements from."}],"pos":[7930,8009],"yaml":true},{"content":"<code>col</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;col&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>col</code> is `null`."}],"pos":[8169,8197],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Collections.Stack\"></xref> class that is empty and has the specified initial capacity or the default initial capacity, whichever is greater.","nodes":[{"pos":[0,193],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Stack\"&gt;&lt;/xref&gt;</ph> class that is empty and has the specified initial capacity or the default initial capacity, whichever is greater.","source":"Initializes a new instance of the <xref href=\"System.Collections.Stack\"></xref> class that is empty and has the specified initial capacity or the default initial capacity, whichever is greater."}],"pos":[9401,9595],"yaml":true},{"content":"The capacity of a <xref:System.Collections.Stack> is the number of elements that the <xref:System.Collections.Stack> can hold. As elements are added to a <xref:System.Collections.Stack>, the capacity is automatically increased as required by reallocating the internal array.  \n  \n If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Stack>.  \n  \n This constructor is an O(`n`) operation, where `n` is `initialCapacity`.","nodes":[{"pos":[0,274],"content":"The capacity of a <xref:System.Collections.Stack> is the number of elements that the <xref:System.Collections.Stack> can hold. As elements are added to a <xref:System.Collections.Stack>, the capacity is automatically increased as required by reallocating the internal array.","nodes":[{"content":"The capacity of a <xref:System.Collections.Stack> is the number of elements that the <xref:System.Collections.Stack> can hold. As elements are added to a <xref:System.Collections.Stack>, the capacity is automatically increased as required by reallocating the internal array.","pos":[0,274],"nodes":[{"content":"The capacity of a <ph id=\"ph1\">&lt;xref:System.Collections.Stack&gt;</ph> is the number of elements that the <ph id=\"ph2\">&lt;xref:System.Collections.Stack&gt;</ph> can hold.","pos":[0,126],"source":"The capacity of a <xref:System.Collections.Stack> is the number of elements that the <xref:System.Collections.Stack> can hold."},{"content":"As elements are added to a <ph id=\"ph1\">&lt;xref:System.Collections.Stack&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.","pos":[127,274],"source":" As elements are added to a <xref:System.Collections.Stack>, the capacity is automatically increased as required by reallocating the internal array."}]}]},{"pos":[281,485],"content":"If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Stack>.","nodes":[{"content":"If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id=\"ph1\">&lt;xref:System.Collections.Stack&gt;</ph>.","pos":[0,204],"source":"If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Stack>."}]},{"pos":[492,564],"content":"This constructor is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">`initialCapacity`</ph>.","source":"This constructor is an O(`n`) operation, where `n` is `initialCapacity`."}],"pos":[9606,10177],"yaml":true,"extradata":"MT"},{"content":"The initial number of elements that the <xref href=\"System.Collections.Stack\"></xref> can contain.","nodes":[{"pos":[0,98],"content":"The initial number of elements that the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Stack\"&gt;&lt;/xref&gt;</ph> can contain.","source":"The initial number of elements that the <xref href=\"System.Collections.Stack\"></xref> can contain."}],"pos":[10322,10421],"yaml":true},{"content":"<code>initialCapacity</code> is less than zero.","nodes":[{"pos":[0,47],"content":"<ph id=\"ph1\">&lt;code&gt;initialCapacity&lt;/code&gt;</ph> is less than zero.","source":"<code>initialCapacity</code> is less than zero."}],"pos":[10593,10641],"yaml":true},{"content":"Removes all objects from the <xref href=\"System.Collections.Stack\"></xref>.","nodes":[{"pos":[0,75],"content":"Removes all objects from the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Stack\"&gt;&lt;/xref&gt;</ph>.","source":"Removes all objects from the <xref href=\"System.Collections.Stack\"></xref>."}],"pos":[11781,11857],"yaml":true},{"content":"<xref:System.Collections.Stack.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.Stack.Count%2A>.","nodes":[{"pos":[0,139],"content":"<xref:System.Collections.Stack.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph> is set to zero, and references to other objects from elements of the collection are also released.","pos":[0,139],"source":"<xref:System.Collections.Stack.Count%2A> is set to zero, and references to other objects from elements of the collection are also released."}]},{"pos":[146,236],"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph>.","source":"This method is an O(`n`) operation, where `n` is <xref:System.Collections.Stack.Count%2A>."}],"pos":[11868,12109],"yaml":true,"extradata":"MT"},{"content":"Creates a shallow copy of the <xref href=\"System.Collections.Stack\"></xref>.","nodes":[{"pos":[0,76],"content":"Creates a shallow copy of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Stack\"&gt;&lt;/xref&gt;</ph>.","source":"Creates a shallow copy of the <xref href=\"System.Collections.Stack\"></xref>."}],"pos":[13920,13997],"yaml":true},{"content":"A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but it does not copy the objects that the references refer to. The references in the new collection point to the same objects that the references in the original collection point to.  \n  \n In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.Stack.Count%2A>.","nodes":[{"pos":[0,306],"content":"A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but it does not copy the objects that the references refer to. The references in the new collection point to the same objects that the references in the original collection point to.","nodes":[{"content":"A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but it does not copy the objects that the references refer to. The references in the new collection point to the same objects that the references in the original collection point to.","pos":[0,306],"nodes":[{"content":"A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but it does not copy the objects that the references refer to.","pos":[0,186]},{"content":"The references in the new collection point to the same objects that the references in the original collection point to.","pos":[187,306]}]}]},{"pos":[313,439],"content":"In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.","nodes":[{"content":"In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.","pos":[0,126]}]},{"pos":[446,536],"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph>.","source":"This method is an O(`n`) operation, where `n` is <xref:System.Collections.Stack.Count%2A>."}],"pos":[14008,14551],"yaml":true,"extradata":"MT"},{"content":"A shallow copy of the <xref href=\"System.Collections.Stack\"></xref>.","nodes":[{"pos":[0,68],"content":"A shallow copy of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Stack\"&gt;&lt;/xref&gt;</ph>.","source":"A shallow copy of the <xref href=\"System.Collections.Stack\"></xref>."}],"pos":[14682,14751],"yaml":true},{"content":"Determines whether an element is in the <xref href=\"System.Collections.Stack\"></xref>.","nodes":[{"pos":[0,86],"content":"Determines whether an element is in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Stack\"&gt;&lt;/xref&gt;</ph>.","source":"Determines whether an element is in the <xref href=\"System.Collections.Stack\"></xref>."}],"pos":[16033,16120],"yaml":true},{"content":"This method determines equality by calling the <xref:System.Object.Equals%2A?displayProperty=fullName> method.  \n  \n This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Stack.Count%2A>.  \n  \n Starting with the .NET Framework 2.0, this method tests for equality by passing the `obj` argument to the <xref:System.Object.Equals%2A> method of individual objects in the collection. In the earlier versions of the .NET Framework, this determination was made by using passing the individual items in the collection to the <xref:System.Object.Equals%2A> method of the `obj` argument.","nodes":[{"pos":[0,110],"content":"This method determines equality by calling the <xref:System.Object.Equals%2A?displayProperty=fullName> method.","nodes":[{"content":"This method determines equality by calling the <ph id=\"ph1\">&lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,110],"source":"This method determines equality by calling the <xref:System.Object.Equals%2A?displayProperty=fullName> method."}]},{"pos":[117,256],"content":"This method performs a linear search; therefore, this method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph>.","source":"This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Stack.Count%2A>."},{"pos":[263,646],"content":"Starting with the .NET Framework 2.0, this method tests for equality by passing the `obj` argument to the <xref:System.Object.Equals%2A> method of individual objects in the collection. In the earlier versions of the .NET Framework, this determination was made by using passing the individual items in the collection to the <xref:System.Object.Equals%2A> method of the `obj` argument.","nodes":[{"content":"Starting with the .NET Framework 2.0, this method tests for equality by passing the <ph id=\"ph1\">`obj`</ph> argument to the <ph id=\"ph2\">&lt;xref:System.Object.Equals%2A&gt;</ph> method of individual objects in the collection.","pos":[0,184],"source":"Starting with the .NET Framework 2.0, this method tests for equality by passing the `obj` argument to the <xref:System.Object.Equals%2A> method of individual objects in the collection."},{"content":"In the earlier versions of the .NET Framework, this determination was made by using passing the individual items in the collection to the <ph id=\"ph1\">&lt;xref:System.Object.Equals%2A&gt;</ph> method of the <ph id=\"ph2\">`obj`</ph> argument.","pos":[185,383],"source":" In the earlier versions of the .NET Framework, this determination was made by using passing the individual items in the collection to the <xref:System.Object.Equals%2A> method of the `obj` argument."}]}],"pos":[16131,16784],"yaml":true,"extradata":"MT"},{"content":"The object to locate in the <xref href=\"System.Collections.Stack\"></xref>. The value can be `null`.","nodes":[{"pos":[0,99],"content":"The object to locate in the <xref href=\"System.Collections.Stack\"></xref>. The value can be `null`.","nodes":[{"content":"The object to locate in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Stack\"&gt;&lt;/xref&gt;</ph>.","pos":[0,74],"source":"The object to locate in the <xref href=\"System.Collections.Stack\"></xref>."},{"content":"The value can be <ph id=\"ph1\">`null`</ph>.","pos":[75,99],"source":" The value can be `null`."}]}],"pos":[16925,17025],"yaml":true},{"content":"`true`, if <code>obj</code> is found in the <xref href=\"System.Collections.Stack\"></xref>; otherwise, `false`.","nodes":[{"pos":[0,110],"content":"<ph id=\"ph1\">`true`</ph>, if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">obj</ph><ept id=\"p1\">&lt;/code&gt;</ept> is found in the <ph id=\"ph3\">&lt;xref href=\"System.Collections.Stack\"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true`, if <code>obj</code> is found in the <xref href=\"System.Collections.Stack\"></xref>; otherwise, `false`."}],"pos":[17083,17196],"yaml":true},{"content":"Copies the <xref href=\"System.Collections.Stack\"></xref> to an existing one-dimensional <xref href=\"System.Array\"></xref>, starting at the specified array index.","nodes":[{"pos":[0,161],"content":"Copies the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Stack\"&gt;&lt;/xref&gt;</ph> to an existing one-dimensional <ph id=\"ph2\">&lt;xref href=\"System.Array\"&gt;&lt;/xref&gt;</ph>, starting at the specified array index.","source":"Copies the <xref href=\"System.Collections.Stack\"></xref> to an existing one-dimensional <xref href=\"System.Array\"></xref>, starting at the specified array index."}],"pos":[18523,18685],"yaml":true},{"content":"The elements are copied onto the array in last-in-first-out (LIFO) order, similar to the order of the elements returned by a succession of calls to <xref:System.Collections.Stack.Pop%2A>.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.Stack.Count%2A>.","nodes":[{"pos":[0,187],"content":"The elements are copied onto the array in last-in-first-out (LIFO) order, similar to the order of the elements returned by a succession of calls to <xref:System.Collections.Stack.Pop%2A>.","nodes":[{"content":"The elements are copied onto the array in last-in-first-out (LIFO) order, similar to the order of the elements returned by a succession of calls to <ph id=\"ph1\">&lt;xref:System.Collections.Stack.Pop%2A&gt;</ph>.","pos":[0,187],"source":"The elements are copied onto the array in last-in-first-out (LIFO) order, similar to the order of the elements returned by a succession of calls to <xref:System.Collections.Stack.Pop%2A>."}]},{"pos":[194,284],"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph>.","source":"This method is an O(`n`) operation, where `n` is <xref:System.Collections.Stack.Count%2A>."}],"pos":[18696,18985],"yaml":true,"extradata":"MT"},{"content":"The one-dimensional <xref href=\"System.Array\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.Stack\"></xref>. The <xref href=\"System.Array\"></xref> must have zero-based indexing.","nodes":[{"pos":[0,221],"content":"The one-dimensional <xref href=\"System.Array\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.Stack\"></xref>. The <xref href=\"System.Array\"></xref> must have zero-based indexing.","nodes":[{"content":"The one-dimensional <ph id=\"ph1\">&lt;xref href=\"System.Array\"&gt;&lt;/xref&gt;</ph> that is the destination of the elements copied from <ph id=\"ph2\">&lt;xref href=\"System.Collections.Stack\"&gt;&lt;/xref&gt;</ph>.","pos":[0,152],"source":"The one-dimensional <xref href=\"System.Array\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.Stack\"></xref>."},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Array\"&gt;&lt;/xref&gt;</ph> must have zero-based indexing.","pos":[153,221],"source":" The <xref href=\"System.Array\"></xref> must have zero-based indexing."}]}],"pos":[19693,19915],"yaml":true},{"content":"The zero-based index in <code>array</code> at which copying begins.","nodes":[{"pos":[0,67],"content":"The zero-based index in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">array</ph><ept id=\"p1\">&lt;/code&gt;</ept> at which copying begins.","source":"The zero-based index in <code>array</code> at which copying begins."}],"pos":[19975,20043],"yaml":true},{"content":"<code>array</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>array</code> is `null`."}],"pos":[20204,20234],"yaml":true},{"content":"<code>index</code> is less than zero.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.","source":"<code>index</code> is less than zero."}],"pos":[20348,20386],"yaml":true},{"content":"<code>array</code> is multidimensional.  \n  \n -or-  \n  \n The number of elements in the source <xref href=\"System.Collections.Stack\"></xref> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>.","nodes":[{"pos":[0,39],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is multidimensional.","source":"<code>array</code> is multidimensional."},{"pos":[46,50],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[57,249],"content":"The number of elements in the source <ph id=\"ph1\">&lt;xref href=\"System.Collections.Stack\"&gt;&lt;/xref&gt;</ph> is greater than the available space from <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept> to the end of the destination <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">array</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The number of elements in the source <xref href=\"System.Collections.Stack\"></xref> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>."}],"pos":[20480,20738],"yaml":true},{"content":"The type of the source <xref href=\"System.Collections.Stack\"></xref> cannot be cast automatically to the type of the destination <code>array</code>.","nodes":[{"pos":[0,148],"content":"The type of the source <ph id=\"ph1\">&lt;xref href=\"System.Collections.Stack\"&gt;&lt;/xref&gt;</ph> cannot be cast automatically to the type of the destination <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">array</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the source <xref href=\"System.Collections.Stack\"></xref> cannot be cast automatically to the type of the destination <code>array</code>."}],"pos":[20838,20987],"yaml":true},{"content":"Gets the number of elements contained in the <xref href=\"System.Collections.Stack\"></xref>.","nodes":[{"pos":[0,91],"content":"Gets the number of elements contained in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Stack\"&gt;&lt;/xref&gt;</ph>.","source":"Gets the number of elements contained in the <xref href=\"System.Collections.Stack\"></xref>."}],"pos":[22123,22215],"yaml":true},{"content":"The capacity is the number of elements that the <xref:System.Collections.Stack> can store. <xref:System.Collections.Stack.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Stack>.  \n  \n The capacity is always greater than or equal to <xref:System.Collections.Stack.Count%2A>. If <xref:System.Collections.Stack.Count%2A> exceeds the capacity while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.  \n  \n Retrieving the value of this property is an O(1) operation.","nodes":[{"pos":[0,215],"content":"The capacity is the number of elements that the <xref:System.Collections.Stack> can store. <xref:System.Collections.Stack.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Stack>.","nodes":[{"content":"The capacity is the number of elements that the <xref:System.Collections.Stack> can store. <xref:System.Collections.Stack.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Stack>.","pos":[0,215],"nodes":[{"content":"The capacity is the number of elements that the <ph id=\"ph1\">&lt;xref:System.Collections.Stack&gt;</ph> can store.","pos":[0,90],"source":"The capacity is the number of elements that the <xref:System.Collections.Stack> can store."},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph> is the number of elements that are actually in the <ph id=\"ph2\">&lt;xref:System.Collections.Stack&gt;</ph>.","pos":[91,215],"source":" <xref:System.Collections.Stack.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Stack>."}]}]},{"pos":[222,535],"content":"The capacity is always greater than or equal to <xref:System.Collections.Stack.Count%2A>. If <xref:System.Collections.Stack.Count%2A> exceeds the capacity while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.","nodes":[{"content":"The capacity is always greater than or equal to <xref:System.Collections.Stack.Count%2A>. If <xref:System.Collections.Stack.Count%2A> exceeds the capacity while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.","pos":[0,313],"nodes":[{"content":"The capacity is always greater than or equal to <ph id=\"ph1\">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph>.","pos":[0,89],"source":"The capacity is always greater than or equal to <xref:System.Collections.Stack.Count%2A>."},{"content":"If <ph id=\"ph1\">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph> exceeds the capacity while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.","pos":[90,313],"source":" If <xref:System.Collections.Stack.Count%2A> exceeds the capacity while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements."}]}]},{"pos":[542,601],"content":"Retrieving the value of this property is an O(1) operation.","nodes":[{"content":"Retrieving the value of this property is an O(1) operation.","pos":[0,59]}]}],"pos":[22226,22834],"yaml":true,"extradata":"MT"},{"content":"The number of elements contained in the <xref href=\"System.Collections.Stack\"></xref>.","nodes":[{"pos":[0,86],"content":"The number of elements contained in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Stack\"&gt;&lt;/xref&gt;</ph>.","source":"The number of elements contained in the <xref href=\"System.Collections.Stack\"></xref>."}],"pos":[22947,23034],"yaml":true},{"content":"Returns an <xref href=\"System.Collections.IEnumerator\"></xref> for the <xref href=\"System.Collections.Stack\"></xref>.","nodes":[{"pos":[0,117],"content":"Returns an <ph id=\"ph1\">&lt;xref href=\"System.Collections.IEnumerator\"&gt;&lt;/xref&gt;</ph> for the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Stack\"&gt;&lt;/xref&gt;</ph>.","source":"Returns an <xref href=\"System.Collections.IEnumerator\"></xref> for the <xref href=\"System.Collections.Stack\"></xref>."}],"pos":[24283,24401],"yaml":true},{"content":"[Visual Basic, C#]  \n  \n The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \n  \n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \n  \n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  \n  \n <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  \n  \n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \n  \n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \n  \n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \n  \n This method is an O(1) operation.","nodes":[{"pos":[0,18],"content":"[Visual Basic, C#]","nodes":[{"content":"[Visual Basic, C#]","pos":[0,18]}]},{"pos":[25,230],"content":"The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.","nodes":[{"content":"The <ph id=\"ph1\">`foreach`</ph> statement of the C# language (<ph id=\"ph2\">`for each`</ph> in Visual Basic) hides the complexity of the enumerators.","pos":[0,112],"source":"The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators."},{"content":"Therefore, using <ph id=\"ph1\">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.","pos":[114,205],"source":"  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator."}]},{"pos":[237,357],"content":"Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.","nodes":[{"content":"Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.","pos":[0,120]}]},{"pos":[364,844],"content":"Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.","nodes":[{"content":"Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.","pos":[0,480],"nodes":[{"content":"Initially, the enumerator is positioned before the first element in the collection.","pos":[0,83]},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> also brings the enumerator back to this position.","pos":[84,180],"source":" <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position."},{"content":"At this position, <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.","pos":[182,262],"source":"  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined."},{"content":"Therefore, you must call <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.","pos":[263,480],"source":" Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>."}]}]},{"pos":[851,1172],"content":"<xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.","nodes":[{"content":"<xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.","pos":[0,321],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> returns the same object until either <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> is called.","pos":[0,196],"source":"<xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called."},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the next element.","pos":[197,321],"source":" <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element."}]}]},{"pos":[1179,1914],"content":"If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.","nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id=\"ph3\">`false`</ph>.","pos":[0,227],"source":"If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`."},{"content":"When the enumerator is at this position, subsequent calls to <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id=\"ph2\">`false`</ph>.","pos":[228,359],"source":" When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`."},{"content":"If the last call to <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id=\"ph2\">`false`</ph>, <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.","pos":[360,510],"source":" If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined."},{"content":"To set <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the first element of the collection again, you can call <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> followed by <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.","pos":[511,735],"source":" To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>."}]},{"pos":[1921,2156],"content":"An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.","nodes":[{"content":"An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.","pos":[0,235],"nodes":[{"content":"An enumerator remains valid as long as the collection remains unchanged.","pos":[0,72]},{"content":"If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.","pos":[73,235]}]}]},{"pos":[2163,2554],"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","nodes":[{"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","pos":[0,391],"nodes":[{"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[0,154]},{"content":"To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.","pos":[156,261]},{"content":"To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","pos":[263,391]}]}]},{"pos":[2561,2594],"content":"This method is an O(1) operation.","nodes":[{"content":"This method is an O(1) operation.","pos":[0,33]}]}],"pos":[24412,27025],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.IEnumerator\"></xref> for the <xref href=\"System.Collections.Stack\"></xref>.","nodes":[{"pos":[0,109],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.IEnumerator\"&gt;&lt;/xref&gt;</ph> for the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Stack\"&gt;&lt;/xref&gt;</ph>.","source":"An <xref href=\"System.Collections.IEnumerator\"></xref> for the <xref href=\"System.Collections.Stack\"></xref>."}],"pos":[27205,27315],"yaml":true},{"content":"Gets a value indicating whether access to the <xref href=\"System.Collections.Stack\"></xref> is synchronized (thread safe).","nodes":[{"pos":[0,122],"content":"Gets a value indicating whether access to the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Stack\"&gt;&lt;/xref&gt;</ph> is synchronized (thread safe).","source":"Gets a value indicating whether access to the <xref href=\"System.Collections.Stack\"></xref> is synchronized (thread safe)."}],"pos":[28574,28697],"yaml":true},{"content":"To guarantee the thread safety of the <xref:System.Collections.Stack>, all operations must be done through the wrapper returned by the <xref:System.Collections.Stack.Synchronized%2A> method.  \n  \n Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  \n  \n The following code example shows how to lock the collection using the <xref:System.Collections.Stack.SyncRoot%2A> during the entire enumeration.  \n  \n [!code-cpp[Classic Stack.IsSynchronized Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Stack.IsSynchronized Example/CPP/source2.cpp#2)]\n [!code-csharp[Classic Stack.IsSynchronized Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Stack.IsSynchronized Example/CS/source2.cs#2)]\n [!code-vb[Classic Stack.IsSynchronized Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Stack.IsSynchronized Example/VB/source2.vb#2)]  \n  \n Retrieving the value of this property is an O(1) operation.","nodes":[{"pos":[0,190],"content":"To guarantee the thread safety of the <xref:System.Collections.Stack>, all operations must be done through the wrapper returned by the <xref:System.Collections.Stack.Synchronized%2A> method.","nodes":[{"content":"To guarantee the thread safety of the <ph id=\"ph1\">&lt;xref:System.Collections.Stack&gt;</ph>, all operations must be done through the wrapper returned by the <ph id=\"ph2\">&lt;xref:System.Collections.Stack.Synchronized%2A&gt;</ph> method.","pos":[0,190],"source":"To guarantee the thread safety of the <xref:System.Collections.Stack>, all operations must be done through the wrapper returned by the <xref:System.Collections.Stack.Synchronized%2A> method."}]},{"pos":[197,595],"content":"Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","nodes":[{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[0,398],"nodes":[{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[0,78]},{"content":"Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.","pos":[79,216]},{"content":"To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[217,398]}]}]},{"pos":[602,746],"content":"The following code example shows how to lock the collection using the <xref:System.Collections.Stack.SyncRoot%2A> during the entire enumeration.","nodes":[{"content":"The following code example shows how to lock the collection using the <ph id=\"ph1\">&lt;xref:System.Collections.Stack.SyncRoot%2A&gt;</ph> during the entire enumeration.","pos":[0,144],"source":"The following code example shows how to lock the collection using the <xref:System.Collections.Stack.SyncRoot%2A> during the entire enumeration."}]},{"pos":[753,1228],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>Classic Stack.IsSynchronized Example#2<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Stack.IsSynchronized Example/CPP/source2.cpp#2)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>Classic Stack.IsSynchronized Example#2<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Stack.IsSynchronized Example/CS/source2.cs#2)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>Classic Stack.IsSynchronized Example#2<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Stack.IsSynchronized Example/VB/source2.vb#2)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[Classic Stack.IsSynchronized Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Stack.IsSynchronized Example/CPP/source2.cpp#2)]\n [!code-csharp[Classic Stack.IsSynchronized Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Stack.IsSynchronized Example/CS/source2.cs#2)]\n [!code-vb[Classic Stack.IsSynchronized Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Stack.IsSynchronized Example/VB/source2.vb#2)]"},{"pos":[1235,1294],"content":"Retrieving the value of this property is an O(1) operation.","nodes":[{"content":"Retrieving the value of this property is an O(1) operation.","pos":[0,59]}]}],"pos":[28708,30015],"yaml":true,"extradata":"MT"},{"content":"`true`, if access to the <xref href=\"System.Collections.Stack\"></xref> is synchronized (thread safe); otherwise, `false`. The default is `false`.","nodes":[{"pos":[0,145],"content":"`true`, if access to the <xref href=\"System.Collections.Stack\"></xref> is synchronized (thread safe); otherwise, `false`. The default is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph>, if access to the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Stack\"&gt;&lt;/xref&gt;</ph> is synchronized (thread safe); otherwise, <ph id=\"ph3\">`false`</ph>.","pos":[0,121],"source":"`true`, if access to the <xref href=\"System.Collections.Stack\"></xref> is synchronized (thread safe); otherwise, `false`."},{"content":"The default is <ph id=\"ph1\">`false`</ph>.","pos":[122,145],"source":" The default is `false`."}]}],"pos":[30842,30990],"yaml":true},{"content":"Returns the object at the top of the <xref href=\"System.Collections.Stack\"></xref> without removing it.","nodes":[{"pos":[0,103],"content":"Returns the object at the top of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Stack\"&gt;&lt;/xref&gt;</ph> without removing it.","source":"Returns the object at the top of the <xref href=\"System.Collections.Stack\"></xref> without removing it."}],"pos":[32194,32298],"yaml":true},{"content":"This method is similar to the <xref:System.Collections.Stack.Pop%2A> method, but <xref:System.Collections.Stack.Peek%2A> does not modify the <xref:System.Collections.Stack>.  \n  \n `null` can be pushed onto the <xref:System.Collections.Stack> as a placeholder, if needed. To distinguish between a null value and the end of the stack, check the <xref:System.Collections.Stack.Count%2A> property or catch the <xref:System.InvalidOperationException>, which is thrown when the <xref:System.Collections.Stack> is empty.  \n  \n This method is an O(1) operation.","nodes":[{"pos":[0,173],"content":"This method is similar to the <xref:System.Collections.Stack.Pop%2A> method, but <xref:System.Collections.Stack.Peek%2A> does not modify the <xref:System.Collections.Stack>.","nodes":[{"content":"This method is similar to the <ph id=\"ph1\">&lt;xref:System.Collections.Stack.Pop%2A&gt;</ph> method, but <ph id=\"ph2\">&lt;xref:System.Collections.Stack.Peek%2A&gt;</ph> does not modify the <ph id=\"ph3\">&lt;xref:System.Collections.Stack&gt;</ph>.","pos":[0,173],"source":"This method is similar to the <xref:System.Collections.Stack.Pop%2A> method, but <xref:System.Collections.Stack.Peek%2A> does not modify the <xref:System.Collections.Stack>."}]},{"pos":[180,513],"content":"`null` can be pushed onto the <xref:System.Collections.Stack> as a placeholder, if needed. To distinguish between a null value and the end of the stack, check the <xref:System.Collections.Stack.Count%2A> property or catch the <xref:System.InvalidOperationException>, which is thrown when the <xref:System.Collections.Stack> is empty.","nodes":[{"content":"<ph id=\"ph1\">`null`</ph> can be pushed onto the <ph id=\"ph2\">&lt;xref:System.Collections.Stack&gt;</ph> as a placeholder, if needed.","pos":[0,90],"source":"`null` can be pushed onto the <xref:System.Collections.Stack> as a placeholder, if needed."},{"content":"To distinguish between a null value and the end of the stack, check the <ph id=\"ph1\">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph> property or catch the <ph id=\"ph2\">&lt;xref:System.InvalidOperationException&gt;</ph>, which is thrown when the <ph id=\"ph3\">&lt;xref:System.Collections.Stack&gt;</ph> is empty.","pos":[91,333],"source":" To distinguish between a null value and the end of the stack, check the <xref:System.Collections.Stack.Count%2A> property or catch the <xref:System.InvalidOperationException>, which is thrown when the <xref:System.Collections.Stack> is empty."}]},{"pos":[520,553],"content":"This method is an O(1) operation.","nodes":[{"content":"This method is an O(1) operation.","pos":[0,33]}]}],"pos":[32309,32869],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Object\"></xref> at the top of the <xref href=\"System.Collections.Stack\"></xref>.","nodes":[{"pos":[0,103],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> at the top of the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Stack\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Object\"></xref> at the top of the <xref href=\"System.Collections.Stack\"></xref>."}],"pos":[33656,33760],"yaml":true},{"content":"The <xref href=\"System.Collections.Stack\"></xref> is empty.","nodes":[{"pos":[0,59],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Stack\"&gt;&lt;/xref&gt;</ph> is empty.","source":"The <xref href=\"System.Collections.Stack\"></xref> is empty."}],"pos":[33927,33987],"yaml":true},{"content":"Removes and returns the object at the top of the <xref href=\"System.Collections.Stack\"></xref>.","nodes":[{"pos":[0,95],"content":"Removes and returns the object at the top of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Stack\"&gt;&lt;/xref&gt;</ph>.","source":"Removes and returns the object at the top of the <xref href=\"System.Collections.Stack\"></xref>."}],"pos":[35115,35211],"yaml":true},{"content":"This method is similar to the <xref:System.Collections.Stack.Peek%2A> method, but <xref:System.Collections.Stack.Peek%2A> does not modify the <xref:System.Collections.Stack>.  \n  \n `null` can be pushed onto the <xref:System.Collections.Stack> as a placeholder, if needed. To distinguish between a null value and the end of the stack, check the <xref:System.Collections.Stack.Count%2A> property or catch the <xref:System.InvalidOperationException>, which is thrown when the <xref:System.Collections.Stack> is empty.  \n  \n This method is an O(1) operation.","nodes":[{"pos":[0,174],"content":"This method is similar to the <xref:System.Collections.Stack.Peek%2A> method, but <xref:System.Collections.Stack.Peek%2A> does not modify the <xref:System.Collections.Stack>.","nodes":[{"content":"This method is similar to the <ph id=\"ph1\">&lt;xref:System.Collections.Stack.Peek%2A&gt;</ph> method, but <ph id=\"ph2\">&lt;xref:System.Collections.Stack.Peek%2A&gt;</ph> does not modify the <ph id=\"ph3\">&lt;xref:System.Collections.Stack&gt;</ph>.","pos":[0,174],"source":"This method is similar to the <xref:System.Collections.Stack.Peek%2A> method, but <xref:System.Collections.Stack.Peek%2A> does not modify the <xref:System.Collections.Stack>."}]},{"pos":[181,514],"content":"`null` can be pushed onto the <xref:System.Collections.Stack> as a placeholder, if needed. To distinguish between a null value and the end of the stack, check the <xref:System.Collections.Stack.Count%2A> property or catch the <xref:System.InvalidOperationException>, which is thrown when the <xref:System.Collections.Stack> is empty.","nodes":[{"content":"<ph id=\"ph1\">`null`</ph> can be pushed onto the <ph id=\"ph2\">&lt;xref:System.Collections.Stack&gt;</ph> as a placeholder, if needed.","pos":[0,90],"source":"`null` can be pushed onto the <xref:System.Collections.Stack> as a placeholder, if needed."},{"content":"To distinguish between a null value and the end of the stack, check the <ph id=\"ph1\">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph> property or catch the <ph id=\"ph2\">&lt;xref:System.InvalidOperationException&gt;</ph>, which is thrown when the <ph id=\"ph3\">&lt;xref:System.Collections.Stack&gt;</ph> is empty.","pos":[91,333],"source":" To distinguish between a null value and the end of the stack, check the <xref:System.Collections.Stack.Count%2A> property or catch the <xref:System.InvalidOperationException>, which is thrown when the <xref:System.Collections.Stack> is empty."}]},{"pos":[521,554],"content":"This method is an O(1) operation.","nodes":[{"content":"This method is an O(1) operation.","pos":[0,33]}]}],"pos":[35222,35783],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Object\"></xref> removed from the top of the <xref href=\"System.Collections.Stack\"></xref>.","nodes":[{"pos":[0,113],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> removed from the top of the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Stack\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Object\"></xref> removed from the top of the <xref href=\"System.Collections.Stack\"></xref>."}],"pos":[36569,36683],"yaml":true},{"content":"The <xref href=\"System.Collections.Stack\"></xref> is empty.","nodes":[{"pos":[0,59],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Stack\"&gt;&lt;/xref&gt;</ph> is empty.","source":"The <xref href=\"System.Collections.Stack\"></xref> is empty."}],"pos":[36849,36909],"yaml":true},{"content":"Inserts an object at the top of the <xref href=\"System.Collections.Stack\"></xref>.","nodes":[{"pos":[0,82],"content":"Inserts an object at the top of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Stack\"&gt;&lt;/xref&gt;</ph>.","source":"Inserts an object at the top of the <xref href=\"System.Collections.Stack\"></xref>."}],"pos":[38106,38189],"yaml":true},{"content":"If <xref:System.Collections.Stack.Count%2A> already equals the capacity, the capacity of the <xref:System.Collections.Stack> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.  \n  \n `null` can be pushed onto the <xref:System.Collections.Stack> as a placeholder, if needed. It occupies a slot in the stack and is treated like any object.  \n  \n If <xref:System.Collections.Stack.Count%2A> is less than the capacity of the stack, <xref:System.Collections.Stack.Push%2A> is an O(1) operation. If the capacity needs to be increased to accommodate the new element, <xref:System.Collections.Stack.Push%2A> becomes an O(`n`) operation, where `n` is <xref:System.Collections.Stack.Count%2A>.","nodes":[{"pos":[0,274],"content":"If <xref:System.Collections.Stack.Count%2A> already equals the capacity, the capacity of the <xref:System.Collections.Stack> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.","nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph> already equals the capacity, the capacity of the <ph id=\"ph2\">&lt;xref:System.Collections.Stack&gt;</ph> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.","pos":[0,274],"source":"If <xref:System.Collections.Stack.Count%2A> already equals the capacity, the capacity of the <xref:System.Collections.Stack> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added."}]},{"pos":[281,435],"content":"`null` can be pushed onto the <xref:System.Collections.Stack> as a placeholder, if needed. It occupies a slot in the stack and is treated like any object.","nodes":[{"content":"<ph id=\"ph1\">`null`</ph> can be pushed onto the <ph id=\"ph2\">&lt;xref:System.Collections.Stack&gt;</ph> as a placeholder, if needed.","pos":[0,90],"source":"`null` can be pushed onto the <xref:System.Collections.Stack> as a placeholder, if needed."},{"content":"It occupies a slot in the stack and is treated like any object.","pos":[91,154]}]},{"pos":[442,781],"content":"If <xref:System.Collections.Stack.Count%2A> is less than the capacity of the stack, <xref:System.Collections.Stack.Push%2A> is an O(1) operation. If the capacity needs to be increased to accommodate the new element, <xref:System.Collections.Stack.Push%2A> becomes an O(`n`) operation, where `n` is <xref:System.Collections.Stack.Count%2A>.","nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph> is less than the capacity of the stack, <ph id=\"ph2\">&lt;xref:System.Collections.Stack.Push%2A&gt;</ph> is an O(1) operation.","pos":[0,145],"source":"If <xref:System.Collections.Stack.Count%2A> is less than the capacity of the stack, <xref:System.Collections.Stack.Push%2A> is an O(1) operation."},{"content":"If the capacity needs to be increased to accommodate the new element, <ph id=\"ph1\">&lt;xref:System.Collections.Stack.Push%2A&gt;</ph> becomes an O(<ph id=\"ph2\">`n`</ph>) operation, where <ph id=\"ph3\">`n`</ph> is <ph id=\"ph4\">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph>.","pos":[146,339],"source":" If the capacity needs to be increased to accommodate the new element, <xref:System.Collections.Stack.Push%2A> becomes an O(`n`) operation, where `n` is <xref:System.Collections.Stack.Count%2A>."}]}],"pos":[38200,38988],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Object\"></xref> to push onto the <xref href=\"System.Collections.Stack\"></xref>. The value can be `null`.","nodes":[{"pos":[0,127],"content":"The <xref href=\"System.Object\"></xref> to push onto the <xref href=\"System.Collections.Stack\"></xref>. The value can be `null`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> to push onto the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Stack\"&gt;&lt;/xref&gt;</ph>.","pos":[0,102],"source":"The <xref href=\"System.Object\"></xref> to push onto the <xref href=\"System.Collections.Stack\"></xref>."},{"content":"The value can be <ph id=\"ph1\">`null`</ph>.","pos":[103,127],"source":" The value can be `null`."}]}],"pos":[39782,39910],"yaml":true},{"content":"Returns a synchronized (thread safe) wrapper for the <xref href=\"System.Collections.Stack\"></xref>.","nodes":[{"pos":[0,99],"content":"Returns a synchronized (thread safe) wrapper for the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Stack\"&gt;&lt;/xref&gt;</ph>.","source":"Returns a synchronized (thread safe) wrapper for the <xref href=\"System.Collections.Stack\"></xref>."}],"pos":[41245,41345],"yaml":true},{"content":"To guarantee the thread safety of the <xref:System.Collections.Stack>, all operations must be done through this wrapper.  \n  \n Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  \n  \n The following code example shows how to lock the collection using the <xref:System.Collections.Stack.SyncRoot%2A> during the entire enumeration.  \n  \n [!code-cpp[Classic Stack.IsSynchronized Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Stack.IsSynchronized Example/CPP/source2.cpp#2)]\n [!code-csharp[Classic Stack.IsSynchronized Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Stack.IsSynchronized Example/CS/source2.cs#2)]\n [!code-vb[Classic Stack.IsSynchronized Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Stack.IsSynchronized Example/VB/source2.vb#2)]  \n  \n This method is an O(1) operation.","nodes":[{"pos":[0,120],"content":"To guarantee the thread safety of the <xref:System.Collections.Stack>, all operations must be done through this wrapper.","nodes":[{"content":"To guarantee the thread safety of the <ph id=\"ph1\">&lt;xref:System.Collections.Stack&gt;</ph>, all operations must be done through this wrapper.","pos":[0,120],"source":"To guarantee the thread safety of the <xref:System.Collections.Stack>, all operations must be done through this wrapper."}]},{"pos":[127,525],"content":"Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","nodes":[{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[0,398],"nodes":[{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[0,78]},{"content":"Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.","pos":[79,216]},{"content":"To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[217,398]}]}]},{"pos":[532,676],"content":"The following code example shows how to lock the collection using the <xref:System.Collections.Stack.SyncRoot%2A> during the entire enumeration.","nodes":[{"content":"The following code example shows how to lock the collection using the <ph id=\"ph1\">&lt;xref:System.Collections.Stack.SyncRoot%2A&gt;</ph> during the entire enumeration.","pos":[0,144],"source":"The following code example shows how to lock the collection using the <xref:System.Collections.Stack.SyncRoot%2A> during the entire enumeration."}]},{"pos":[683,1158],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>Classic Stack.IsSynchronized Example#2<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Stack.IsSynchronized Example/CPP/source2.cpp#2)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>Classic Stack.IsSynchronized Example#2<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Stack.IsSynchronized Example/CS/source2.cs#2)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>Classic Stack.IsSynchronized Example#2<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Stack.IsSynchronized Example/VB/source2.vb#2)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[Classic Stack.IsSynchronized Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Stack.IsSynchronized Example/CPP/source2.cpp#2)]\n [!code-csharp[Classic Stack.IsSynchronized Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Stack.IsSynchronized Example/CS/source2.cs#2)]\n [!code-vb[Classic Stack.IsSynchronized Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Stack.IsSynchronized Example/VB/source2.vb#2)]"},{"pos":[1165,1198],"content":"This method is an O(1) operation.","nodes":[{"content":"This method is an O(1) operation.","pos":[0,33]}]}],"pos":[41356,42567],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Collections.Stack\"></xref> to synchronize.","nodes":[{"pos":[0,65],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Stack\"&gt;&lt;/xref&gt;</ph> to synchronize.","source":"The <xref href=\"System.Collections.Stack\"></xref> to synchronize."}],"pos":[43466,43532],"yaml":true},{"content":"A synchronized wrapper around the <xref href=\"System.Collections.Stack\"></xref>.","nodes":[{"pos":[0,80],"content":"A synchronized wrapper around the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Stack\"&gt;&lt;/xref&gt;</ph>.","source":"A synchronized wrapper around the <xref href=\"System.Collections.Stack\"></xref>."}],"pos":[43600,43681],"yaml":true},{"content":"<code>stack</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;stack&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>stack</code> is `null`."}],"pos":[43848,43878],"yaml":true},{"content":"Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.Stack\"></xref>.","nodes":[{"pos":[0,107],"content":"Gets an object that can be used to synchronize access to the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Stack\"&gt;&lt;/xref&gt;</ph>.","source":"Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.Stack\"></xref>."}],"pos":[45032,45140],"yaml":true},{"content":"To create a synchronized version of the <xref:System.Collections.Stack>, use the <xref:System.Collections.Stack.Synchronized%2A> method. However, derived classes can provide their own synchronized version of the <xref:System.Collections.Stack> using the <xref:System.Collections.Stack.SyncRoot%2A> property. The synchronizing code must perform operations on the <xref:System.Collections.Stack.SyncRoot%2A> of the <xref:System.Collections.Stack>, not directly on the <xref:System.Collections.Stack>. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.Stack> object.  \n  \n Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  \n  \n The following code example shows how to lock the collection using the <xref:System.Collections.Stack.SyncRoot%2A> during the entire enumeration.  \n  \n [!code-cpp[Classic Stack.IsSynchronized Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Stack.IsSynchronized Example/CPP/source2.cpp#2)]\n [!code-csharp[Classic Stack.IsSynchronized Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Stack.IsSynchronized Example/CS/source2.cs#2)]\n [!code-vb[Classic Stack.IsSynchronized Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Stack.IsSynchronized Example/VB/source2.vb#2)]  \n  \n Retrieving the value of this property is an O(1) operation.","nodes":[{"pos":[0,732],"content":"To create a synchronized version of the <xref:System.Collections.Stack>, use the <xref:System.Collections.Stack.Synchronized%2A> method. However, derived classes can provide their own synchronized version of the <xref:System.Collections.Stack> using the <xref:System.Collections.Stack.SyncRoot%2A> property. The synchronizing code must perform operations on the <xref:System.Collections.Stack.SyncRoot%2A> of the <xref:System.Collections.Stack>, not directly on the <xref:System.Collections.Stack>. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.Stack> object.","nodes":[{"content":"To create a synchronized version of the <xref:System.Collections.Stack>, use the <xref:System.Collections.Stack.Synchronized%2A> method. However, derived classes can provide their own synchronized version of the <xref:System.Collections.Stack> using the <xref:System.Collections.Stack.SyncRoot%2A> property. The synchronizing code must perform operations on the <xref:System.Collections.Stack.SyncRoot%2A> of the <xref:System.Collections.Stack>, not directly on the <xref:System.Collections.Stack>. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.Stack> object.","pos":[0,732],"nodes":[{"content":"To create a synchronized version of the <ph id=\"ph1\">&lt;xref:System.Collections.Stack&gt;</ph>, use the <ph id=\"ph2\">&lt;xref:System.Collections.Stack.Synchronized%2A&gt;</ph> method.","pos":[0,136],"source":"To create a synchronized version of the <xref:System.Collections.Stack>, use the <xref:System.Collections.Stack.Synchronized%2A> method."},{"content":"However, derived classes can provide their own synchronized version of the <ph id=\"ph1\">&lt;xref:System.Collections.Stack&gt;</ph> using the <ph id=\"ph2\">&lt;xref:System.Collections.Stack.SyncRoot%2A&gt;</ph> property.","pos":[137,307],"source":" However, derived classes can provide their own synchronized version of the <xref:System.Collections.Stack> using the <xref:System.Collections.Stack.SyncRoot%2A> property."},{"content":"The synchronizing code must perform operations on the <ph id=\"ph1\">&lt;xref:System.Collections.Stack.SyncRoot%2A&gt;</ph> of the <ph id=\"ph2\">&lt;xref:System.Collections.Stack&gt;</ph>, not directly on the <ph id=\"ph3\">&lt;xref:System.Collections.Stack&gt;</ph>.","pos":[308,498],"source":" The synchronizing code must perform operations on the <xref:System.Collections.Stack.SyncRoot%2A> of the <xref:System.Collections.Stack>, not directly on the <xref:System.Collections.Stack>."},{"content":"This ensures proper operation of collections that are derived from other objects.","pos":[499,580]},{"content":"Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <ph id=\"ph1\">&lt;xref:System.Collections.Stack&gt;</ph> object.","pos":[581,732],"source":" Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.Stack> object."}]}]},{"pos":[739,1137],"content":"Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","nodes":[{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[0,398],"nodes":[{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[0,78]},{"content":"Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.","pos":[79,216]},{"content":"To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[217,398]}]}]},{"pos":[1144,1288],"content":"The following code example shows how to lock the collection using the <xref:System.Collections.Stack.SyncRoot%2A> during the entire enumeration.","nodes":[{"content":"The following code example shows how to lock the collection using the <ph id=\"ph1\">&lt;xref:System.Collections.Stack.SyncRoot%2A&gt;</ph> during the entire enumeration.","pos":[0,144],"source":"The following code example shows how to lock the collection using the <xref:System.Collections.Stack.SyncRoot%2A> during the entire enumeration."}]},{"pos":[1295,1770],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>Classic Stack.IsSynchronized Example#2<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Stack.IsSynchronized Example/CPP/source2.cpp#2)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>Classic Stack.IsSynchronized Example#2<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Stack.IsSynchronized Example/CS/source2.cs#2)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>Classic Stack.IsSynchronized Example#2<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Stack.IsSynchronized Example/VB/source2.vb#2)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[Classic Stack.IsSynchronized Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Stack.IsSynchronized Example/CPP/source2.cpp#2)]\n [!code-csharp[Classic Stack.IsSynchronized Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Stack.IsSynchronized Example/CS/source2.cs#2)]\n [!code-vb[Classic Stack.IsSynchronized Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Stack.IsSynchronized Example/VB/source2.vb#2)]"},{"pos":[1777,1836],"content":"Retrieving the value of this property is an O(1) operation.","nodes":[{"content":"Retrieving the value of this property is an O(1) operation.","pos":[0,59]}]}],"pos":[45151,47000],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Object\"></xref> that can be used to synchronize access to the <xref href=\"System.Collections.Stack\"></xref>.","nodes":[{"pos":[0,130],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> that can be used to synchronize access to the <ph id=\"ph2\">&lt;xref href=\"System.Collections.Stack\"&gt;&lt;/xref&gt;</ph>.","source":"An <xref href=\"System.Object\"></xref> that can be used to synchronize access to the <xref href=\"System.Collections.Stack\"></xref>."}],"pos":[47120,47251],"yaml":true},{"content":"Copies the <xref href=\"System.Collections.Stack\"></xref> to a new array.","nodes":[{"pos":[0,72],"content":"Copies the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Stack\"&gt;&lt;/xref&gt;</ph> to a new array.","source":"Copies the <xref href=\"System.Collections.Stack\"></xref> to a new array."}],"pos":[48467,48540],"yaml":true},{"content":"The elements are copied onto the array in last-in-first-out (LIFO) order, similar to the order of the elements returned by a succession of calls to <xref:System.Collections.Stack.Pop%2A>.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.Stack.Count%2A>.","nodes":[{"pos":[0,187],"content":"The elements are copied onto the array in last-in-first-out (LIFO) order, similar to the order of the elements returned by a succession of calls to <xref:System.Collections.Stack.Pop%2A>.","nodes":[{"content":"The elements are copied onto the array in last-in-first-out (LIFO) order, similar to the order of the elements returned by a succession of calls to <ph id=\"ph1\">&lt;xref:System.Collections.Stack.Pop%2A&gt;</ph>.","pos":[0,187],"source":"The elements are copied onto the array in last-in-first-out (LIFO) order, similar to the order of the elements returned by a succession of calls to <xref:System.Collections.Stack.Pop%2A>."}]},{"pos":[194,284],"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph>.","source":"This method is an O(`n`) operation, where `n` is <xref:System.Collections.Stack.Count%2A>."}],"pos":[48551,48840],"yaml":true,"extradata":"MT"},{"content":"A new array containing copies of the elements of the <xref href=\"System.Collections.Stack\"></xref>.","nodes":[{"pos":[0,99],"content":"A new array containing copies of the elements of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Stack\"&gt;&lt;/xref&gt;</ph>.","source":"A new array containing copies of the elements of the <xref href=\"System.Collections.Stack\"></xref>."}],"pos":[49533,49633],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Collections.Stack\n  commentId: T:System.Collections.Stack\n  id: Stack\n  children:\n  - System.Collections.Stack.#ctor\n  - System.Collections.Stack.#ctor(System.Collections.ICollection)\n  - System.Collections.Stack.#ctor(System.Int32)\n  - System.Collections.Stack.Clear\n  - System.Collections.Stack.Clone\n  - System.Collections.Stack.Contains(System.Object)\n  - System.Collections.Stack.CopyTo(System.Array,System.Int32)\n  - System.Collections.Stack.Count\n  - System.Collections.Stack.GetEnumerator\n  - System.Collections.Stack.IsSynchronized\n  - System.Collections.Stack.Peek\n  - System.Collections.Stack.Pop\n  - System.Collections.Stack.Push(System.Object)\n  - System.Collections.Stack.Synchronized(System.Collections.Stack)\n  - System.Collections.Stack.SyncRoot\n  - System.Collections.Stack.ToArray\n  langs:\n  - csharp\n  name: Stack\n  nameWithType: Stack\n  fullName: System.Collections.Stack\n  type: Class\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Represents a simple last-in-first-out (LIFO) non-generic collection of objects.\n  remarks: \"For the generic version of this collection, see <xref:System.Collections.Generic.Stack%601?displayProperty=fullName>.  \\n  \\n The capacity of a <xref:System.Collections.Stack> is the number of elements the <xref:System.Collections.Stack> can hold. As elements are added to a <xref:System.Collections.Stack>, the capacity is automatically increased as required through reallocation.  \\n  \\n If <xref:System.Collections.Stack.Count%2A> is less than the capacity of the stack, <xref:System.Collections.Stack.Push%2A> is an O(1) operation. If the capacity needs to be increased to accommodate the new element, <xref:System.Collections.Stack.Push%2A> becomes an O(`n`) operation, where `n` is <xref:System.Collections.Stack.Count%2A>. <xref:System.Collections.Stack.Pop%2A> is an O(1) operation.  \\n  \\n <xref:System.Collections.Stack> accepts `null` as a valid value and allows duplicate elements.\"\n  example:\n  - \"The following example shows how to create and add values to a <xref:System.Collections.Stack> and how to display its values.  \\n  \\n [!code-cpp[Classic Stack Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Stack Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic Stack Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Stack Example/CS/source.cs#1)]\\n [!code-vb[Classic Stack Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Stack Example/VB/source.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class Stack : ICloneable, System.Collections.ICollection\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.ICollection\n  - System.ICloneable\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  extensionMethods:\n  - System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  - System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  - System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  - System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/Stack.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Stack.#ctor\n  commentId: M:System.Collections.Stack.#ctor\n  id: '#ctor'\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  name: Stack()\n  nameWithType: Stack.Stack()\n  fullName: Stack.Stack()\n  type: Constructor\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Initializes a new instance of the <xref href=\"System.Collections.Stack\"></xref> class that is empty and has the default initial capacity.\n  remarks: \"The capacity of a <xref:System.Collections.Stack> is the number of elements that the <xref:System.Collections.Stack> can hold. As elements are added to a <xref:System.Collections.Stack>, the capacity is automatically increased as required by reallocating the internal array.  \\n  \\n If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Stack>.  \\n  \\n This constructor is an O(1) operation.\"\n  syntax:\n    content: public Stack ();\n    parameters: []\n  overload: System.Collections.Stack.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/Stack.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Stack.#ctor(System.Collections.ICollection)\n  commentId: M:System.Collections.Stack.#ctor(System.Collections.ICollection)\n  id: '#ctor(System.Collections.ICollection)'\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  name: Stack(ICollection)\n  nameWithType: Stack.Stack(ICollection)\n  fullName: Stack.Stack(ICollection)\n  type: Constructor\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Initializes a new instance of the <xref href=\"System.Collections.Stack\"></xref> class that contains elements copied from the specified collection and has the same initial capacity as the number of elements copied.\n  remarks: \"The capacity of a <xref:System.Collections.Stack> is the number of elements that the <xref:System.Collections.Stack> can hold. As elements are added to a <xref:System.Collections.Stack>, the capacity is automatically increased as required by reallocating the internal array.  \\n  \\n If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Stack>.  \\n  \\n The elements are copied onto the <xref:System.Collections.Stack> in the same order they are read by the <xref:System.Collections.IEnumerator> of the <xref:System.Collections.ICollection>.  \\n  \\n This constructor is an O(`n`) operation, where `n` is the number of elements in `col`.\"\n  syntax:\n    content: public Stack (System.Collections.ICollection col);\n    parameters:\n    - id: col\n      type: System.Collections.ICollection\n      description: The <xref href=\"System.Collections.ICollection\"></xref> to copy elements from.\n  overload: System.Collections.Stack.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>col</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/Stack.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Stack.#ctor(System.Int32)\n  commentId: M:System.Collections.Stack.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  name: Stack(Int32)\n  nameWithType: Stack.Stack(Int32)\n  fullName: Stack.Stack(Int32)\n  type: Constructor\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Initializes a new instance of the <xref href=\"System.Collections.Stack\"></xref> class that is empty and has the specified initial capacity or the default initial capacity, whichever is greater.\n  remarks: \"The capacity of a <xref:System.Collections.Stack> is the number of elements that the <xref:System.Collections.Stack> can hold. As elements are added to a <xref:System.Collections.Stack>, the capacity is automatically increased as required by reallocating the internal array.  \\n  \\n If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Stack>.  \\n  \\n This constructor is an O(`n`) operation, where `n` is `initialCapacity`.\"\n  syntax:\n    content: public Stack (int initialCapacity);\n    parameters:\n    - id: initialCapacity\n      type: System.Int32\n      description: The initial number of elements that the <xref href=\"System.Collections.Stack\"></xref> can contain.\n  overload: System.Collections.Stack.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>initialCapacity</code> is less than zero.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/Stack.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Stack.Clear\n  commentId: M:System.Collections.Stack.Clear\n  id: Clear\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: Stack.Clear()\n  fullName: Stack.Clear()\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Removes all objects from the <xref href=\"System.Collections.Stack\"></xref>.\n  remarks: \"<xref:System.Collections.Stack.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.  \\n  \\n This method is an O(`n`) operation, where `n` is <xref:System.Collections.Stack.Count%2A>.\"\n  example:\n  - \"The following example shows how to clear the values of the <xref:System.Collections.Stack>.  \\n  \\n [!code-cpp[Classic Stack.Clear Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Stack.Clear Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic Stack.Clear Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Stack.Clear Example/CS/source.cs#1)]\\n [!code-vb[Classic Stack.Clear Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Stack.Clear Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual void Clear ();\n    parameters: []\n  overload: System.Collections.Stack.Clear*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/Stack.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Stack.Clone\n  commentId: M:System.Collections.Stack.Clone\n  id: Clone\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  name: Clone()\n  nameWithType: Stack.Clone()\n  fullName: Stack.Clone()\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Creates a shallow copy of the <xref href=\"System.Collections.Stack\"></xref>.\n  remarks: \"A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but it does not copy the objects that the references refer to. The references in the new collection point to the same objects that the references in the original collection point to.  \\n  \\n In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.  \\n  \\n This method is an O(`n`) operation, where `n` is <xref:System.Collections.Stack.Count%2A>.\"\n  syntax:\n    content: public virtual object Clone ();\n    parameters: []\n    return:\n      type: System.Object\n      description: A shallow copy of the <xref href=\"System.Collections.Stack\"></xref>.\n  overload: System.Collections.Stack.Clone*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/Stack.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Stack.Contains(System.Object)\n  commentId: M:System.Collections.Stack.Contains(System.Object)\n  id: Contains(System.Object)\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  name: Contains(Object)\n  nameWithType: Stack.Contains(Object)\n  fullName: Stack.Contains(Object)\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Determines whether an element is in the <xref href=\"System.Collections.Stack\"></xref>.\n  remarks: \"This method determines equality by calling the <xref:System.Object.Equals%2A?displayProperty=fullName> method.  \\n  \\n This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Stack.Count%2A>.  \\n  \\n Starting with the .NET Framework 2.0, this method tests for equality by passing the `obj` argument to the <xref:System.Object.Equals%2A> method of individual objects in the collection. In the earlier versions of the .NET Framework, this determination was made by using passing the individual items in the collection to the <xref:System.Object.Equals%2A> method of the `obj` argument.\"\n  syntax:\n    content: public virtual bool Contains (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object to locate in the <xref href=\"System.Collections.Stack\"></xref>. The value can be `null`.\n    return:\n      type: System.Boolean\n      description: '`true`, if <code>obj</code> is found in the <xref href=\"System.Collections.Stack\"></xref>; otherwise, `false`.'\n  overload: System.Collections.Stack.Contains*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/Stack.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Stack.CopyTo(System.Array,System.Int32)\n  commentId: M:System.Collections.Stack.CopyTo(System.Array,System.Int32)\n  id: CopyTo(System.Array,System.Int32)\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  name: CopyTo(Array, Int32)\n  nameWithType: Stack.CopyTo(Array, Int32)\n  fullName: Stack.CopyTo(Array, Int32)\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Copies the <xref href=\"System.Collections.Stack\"></xref> to an existing one-dimensional <xref href=\"System.Array\"></xref>, starting at the specified array index.\n  remarks: \"The elements are copied onto the array in last-in-first-out (LIFO) order, similar to the order of the elements returned by a succession of calls to <xref:System.Collections.Stack.Pop%2A>.  \\n  \\n This method is an O(`n`) operation, where `n` is <xref:System.Collections.Stack.Count%2A>.\"\n  example:\n  - \"The following example shows how to copy a <xref:System.Collections.Stack> into a one-dimensional array.  \\n  \\n [!code-cpp[Classic Stack.CopyTo Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Stack.CopyTo Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic Stack.CopyTo Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Stack.CopyTo Example/CS/source.cs#1)]\\n [!code-vb[Classic Stack.CopyTo Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Stack.CopyTo Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual void CopyTo (Array array, int index);\n    parameters:\n    - id: array\n      type: System.Array\n      description: The one-dimensional <xref href=\"System.Array\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.Stack\"></xref>. The <xref href=\"System.Array\"></xref> must have zero-based indexing.\n    - id: index\n      type: System.Int32\n      description: The zero-based index in <code>array</code> at which copying begins.\n  overload: System.Collections.Stack.CopyTo*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>array</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> is less than zero.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>array</code> is multidimensional.  \\n  \\n -or-  \\n  \\n The number of elements in the source <xref href=\\\"System.Collections.Stack\\\"></xref> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>.\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: The type of the source <xref href=\"System.Collections.Stack\"></xref> cannot be cast automatically to the type of the destination <code>array</code>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/Stack.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Stack.Count\n  commentId: P:System.Collections.Stack.Count\n  id: Count\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  name: Count\n  nameWithType: Stack.Count\n  fullName: Stack.Count\n  type: Property\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Gets the number of elements contained in the <xref href=\"System.Collections.Stack\"></xref>.\n  remarks: \"The capacity is the number of elements that the <xref:System.Collections.Stack> can store. <xref:System.Collections.Stack.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Stack>.  \\n  \\n The capacity is always greater than or equal to <xref:System.Collections.Stack.Count%2A>. If <xref:System.Collections.Stack.Count%2A> exceeds the capacity while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  syntax:\n    content: public virtual int Count { get; }\n    return:\n      type: System.Int32\n      description: The number of elements contained in the <xref href=\"System.Collections.Stack\"></xref>.\n  overload: System.Collections.Stack.Count*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/Stack.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Stack.GetEnumerator\n  commentId: M:System.Collections.Stack.GetEnumerator\n  id: GetEnumerator\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: Stack.GetEnumerator()\n  fullName: Stack.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Returns an <xref href=\"System.Collections.IEnumerator\"></xref> for the <xref href=\"System.Collections.Stack\"></xref>.\n  remarks: \"[Visual Basic, C#]  \\n  \\n The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \\n  \\n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \\n  \\n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  \\n  \\n <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  \\n  \\n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \\n  \\n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \\n  \\n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \\n  \\n This method is an O(1) operation.\"\n  syntax:\n    content: public virtual System.Collections.IEnumerator GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: An <xref href=\"System.Collections.IEnumerator\"></xref> for the <xref href=\"System.Collections.Stack\"></xref>.\n  overload: System.Collections.Stack.GetEnumerator*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/Stack.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Stack.IsSynchronized\n  commentId: P:System.Collections.Stack.IsSynchronized\n  id: IsSynchronized\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  name: IsSynchronized\n  nameWithType: Stack.IsSynchronized\n  fullName: Stack.IsSynchronized\n  type: Property\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Gets a value indicating whether access to the <xref href=\"System.Collections.Stack\"></xref> is synchronized (thread safe).\n  remarks: \"To guarantee the thread safety of the <xref:System.Collections.Stack>, all operations must be done through the wrapper returned by the <xref:System.Collections.Stack.Synchronized%2A> method.  \\n  \\n Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  \\n  \\n The following code example shows how to lock the collection using the <xref:System.Collections.Stack.SyncRoot%2A> during the entire enumeration.  \\n  \\n [!code-cpp[Classic Stack.IsSynchronized Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Stack.IsSynchronized Example/CPP/source2.cpp#2)]\\n [!code-csharp[Classic Stack.IsSynchronized Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Stack.IsSynchronized Example/CS/source2.cs#2)]\\n [!code-vb[Classic Stack.IsSynchronized Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Stack.IsSynchronized Example/VB/source2.vb#2)]  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  example:\n  - \"The following example shows how to synchronize a <xref:System.Collections.Stack>, determine if a <xref:System.Collections.Stack> is synchronized, and use a synchronized <xref:System.Collections.Stack>.  \\n  \\n [!code-cpp[Classic Stack.IsSynchronized Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Stack.IsSynchronized Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic Stack.IsSynchronized Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Stack.IsSynchronized Example/CS/source.cs#1)]\\n [!code-vb[Classic Stack.IsSynchronized Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Stack.IsSynchronized Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual bool IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: '`true`, if access to the <xref href=\"System.Collections.Stack\"></xref> is synchronized (thread safe); otherwise, `false`. The default is `false`.'\n  overload: System.Collections.Stack.IsSynchronized*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/Stack.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Stack.Peek\n  commentId: M:System.Collections.Stack.Peek\n  id: Peek\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  name: Peek()\n  nameWithType: Stack.Peek()\n  fullName: Stack.Peek()\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Returns the object at the top of the <xref href=\"System.Collections.Stack\"></xref> without removing it.\n  remarks: \"This method is similar to the <xref:System.Collections.Stack.Pop%2A> method, but <xref:System.Collections.Stack.Peek%2A> does not modify the <xref:System.Collections.Stack>.  \\n  \\n `null` can be pushed onto the <xref:System.Collections.Stack> as a placeholder, if needed. To distinguish between a null value and the end of the stack, check the <xref:System.Collections.Stack.Count%2A> property or catch the <xref:System.InvalidOperationException>, which is thrown when the <xref:System.Collections.Stack> is empty.  \\n  \\n This method is an O(1) operation.\"\n  example:\n  - \"The following example shows how to add elements to the <xref:System.Collections.Stack>, remove elements from the <xref:System.Collections.Stack>, or view the element at the top of the <xref:System.Collections.Stack>.  \\n  \\n [!code-cpp[Classic Stack.Peek Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Stack.Peek Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic Stack.Peek Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Stack.Peek Example/CS/source.cs#1)]\\n [!code-vb[Classic Stack.Peek Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Stack.Peek Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual object Peek ();\n    parameters: []\n    return:\n      type: System.Object\n      description: The <xref href=\"System.Object\"></xref> at the top of the <xref href=\"System.Collections.Stack\"></xref>.\n  overload: System.Collections.Stack.Peek*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The <xref href=\"System.Collections.Stack\"></xref> is empty.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/Stack.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Stack.Pop\n  commentId: M:System.Collections.Stack.Pop\n  id: Pop\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  name: Pop()\n  nameWithType: Stack.Pop()\n  fullName: Stack.Pop()\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Removes and returns the object at the top of the <xref href=\"System.Collections.Stack\"></xref>.\n  remarks: \"This method is similar to the <xref:System.Collections.Stack.Peek%2A> method, but <xref:System.Collections.Stack.Peek%2A> does not modify the <xref:System.Collections.Stack>.  \\n  \\n `null` can be pushed onto the <xref:System.Collections.Stack> as a placeholder, if needed. To distinguish between a null value and the end of the stack, check the <xref:System.Collections.Stack.Count%2A> property or catch the <xref:System.InvalidOperationException>, which is thrown when the <xref:System.Collections.Stack> is empty.  \\n  \\n This method is an O(1) operation.\"\n  example:\n  - \"The following example shows how to add elements to the <xref:System.Collections.Stack>, remove elements from the <xref:System.Collections.Stack>, or view the element at the top of the <xref:System.Collections.Stack>.  \\n  \\n [!code-cpp[Classic Stack.Peek Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Stack.Peek Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic Stack.Peek Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Stack.Peek Example/CS/source.cs#1)]\\n [!code-vb[Classic Stack.Peek Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Stack.Peek Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual object Pop ();\n    parameters: []\n    return:\n      type: System.Object\n      description: The <xref href=\"System.Object\"></xref> removed from the top of the <xref href=\"System.Collections.Stack\"></xref>.\n  overload: System.Collections.Stack.Pop*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The <xref href=\"System.Collections.Stack\"></xref> is empty.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/Stack.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Stack.Push(System.Object)\n  commentId: M:System.Collections.Stack.Push(System.Object)\n  id: Push(System.Object)\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  name: Push(Object)\n  nameWithType: Stack.Push(Object)\n  fullName: Stack.Push(Object)\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Inserts an object at the top of the <xref href=\"System.Collections.Stack\"></xref>.\n  remarks: \"If <xref:System.Collections.Stack.Count%2A> already equals the capacity, the capacity of the <xref:System.Collections.Stack> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.  \\n  \\n `null` can be pushed onto the <xref:System.Collections.Stack> as a placeholder, if needed. It occupies a slot in the stack and is treated like any object.  \\n  \\n If <xref:System.Collections.Stack.Count%2A> is less than the capacity of the stack, <xref:System.Collections.Stack.Push%2A> is an O(1) operation. If the capacity needs to be increased to accommodate the new element, <xref:System.Collections.Stack.Push%2A> becomes an O(`n`) operation, where `n` is <xref:System.Collections.Stack.Count%2A>.\"\n  example:\n  - \"The following example shows how to add elements to the <xref:System.Collections.Stack>, remove elements from the <xref:System.Collections.Stack>, or view the element at the top of the <xref:System.Collections.Stack>.  \\n  \\n [!code-cpp[Classic Stack.Peek Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Stack.Peek Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic Stack.Peek Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Stack.Peek Example/CS/source.cs#1)]\\n [!code-vb[Classic Stack.Peek Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Stack.Peek Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual void Push (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The <xref href=\"System.Object\"></xref> to push onto the <xref href=\"System.Collections.Stack\"></xref>. The value can be `null`.\n  overload: System.Collections.Stack.Push*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/Stack.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Stack.Synchronized(System.Collections.Stack)\n  commentId: M:System.Collections.Stack.Synchronized(System.Collections.Stack)\n  id: Synchronized(System.Collections.Stack)\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  name: Synchronized(Stack)\n  nameWithType: Stack.Synchronized(Stack)\n  fullName: Stack.Synchronized(Stack)\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Returns a synchronized (thread safe) wrapper for the <xref href=\"System.Collections.Stack\"></xref>.\n  remarks: \"To guarantee the thread safety of the <xref:System.Collections.Stack>, all operations must be done through this wrapper.  \\n  \\n Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  \\n  \\n The following code example shows how to lock the collection using the <xref:System.Collections.Stack.SyncRoot%2A> during the entire enumeration.  \\n  \\n [!code-cpp[Classic Stack.IsSynchronized Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Stack.IsSynchronized Example/CPP/source2.cpp#2)]\\n [!code-csharp[Classic Stack.IsSynchronized Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Stack.IsSynchronized Example/CS/source2.cs#2)]\\n [!code-vb[Classic Stack.IsSynchronized Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Stack.IsSynchronized Example/VB/source2.vb#2)]  \\n  \\n This method is an O(1) operation.\"\n  example:\n  - \"The following example shows how to synchronize a <xref:System.Collections.Stack>, determine if a <xref:System.Collections.Stack> is synchronized, and use a synchronized <xref:System.Collections.Stack>.  \\n  \\n [!code-cpp[Classic Stack.IsSynchronized Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Stack.IsSynchronized Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic Stack.IsSynchronized Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Stack.IsSynchronized Example/CS/source.cs#1)]\\n [!code-vb[Classic Stack.IsSynchronized Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Stack.IsSynchronized Example/VB/source.vb#1)]\"\n  syntax:\n    content: public static System.Collections.Stack Synchronized (System.Collections.Stack stack);\n    parameters:\n    - id: stack\n      type: System.Collections.Stack\n      description: The <xref href=\"System.Collections.Stack\"></xref> to synchronize.\n    return:\n      type: System.Collections.Stack\n      description: A synchronized wrapper around the <xref href=\"System.Collections.Stack\"></xref>.\n  overload: System.Collections.Stack.Synchronized*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>stack</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/Stack.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Stack.SyncRoot\n  commentId: P:System.Collections.Stack.SyncRoot\n  id: SyncRoot\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  name: SyncRoot\n  nameWithType: Stack.SyncRoot\n  fullName: Stack.SyncRoot\n  type: Property\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.Stack\"></xref>.\n  remarks: \"To create a synchronized version of the <xref:System.Collections.Stack>, use the <xref:System.Collections.Stack.Synchronized%2A> method. However, derived classes can provide their own synchronized version of the <xref:System.Collections.Stack> using the <xref:System.Collections.Stack.SyncRoot%2A> property. The synchronizing code must perform operations on the <xref:System.Collections.Stack.SyncRoot%2A> of the <xref:System.Collections.Stack>, not directly on the <xref:System.Collections.Stack>. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.Stack> object.  \\n  \\n Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  \\n  \\n The following code example shows how to lock the collection using the <xref:System.Collections.Stack.SyncRoot%2A> during the entire enumeration.  \\n  \\n [!code-cpp[Classic Stack.IsSynchronized Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Stack.IsSynchronized Example/CPP/source2.cpp#2)]\\n [!code-csharp[Classic Stack.IsSynchronized Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Stack.IsSynchronized Example/CS/source2.cs#2)]\\n [!code-vb[Classic Stack.IsSynchronized Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Stack.IsSynchronized Example/VB/source2.vb#2)]  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  syntax:\n    content: public virtual object SyncRoot { get; }\n    return:\n      type: System.Object\n      description: An <xref href=\"System.Object\"></xref> that can be used to synchronize access to the <xref href=\"System.Collections.Stack\"></xref>.\n  overload: System.Collections.Stack.SyncRoot*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/Stack.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Stack.ToArray\n  commentId: M:System.Collections.Stack.ToArray\n  id: ToArray\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  name: ToArray()\n  nameWithType: Stack.ToArray()\n  fullName: Stack.ToArray()\n  type: Method\n  assemblies:\n  - System.Collections.NonGeneric\n  - mscorlib\n  - netstandard\n  namespace: System.Collections\n  summary: Copies the <xref href=\"System.Collections.Stack\"></xref> to a new array.\n  remarks: \"The elements are copied onto the array in last-in-first-out (LIFO) order, similar to the order of the elements returned by a succession of calls to <xref:System.Collections.Stack.Pop%2A>.  \\n  \\n This method is an O(`n`) operation, where `n` is <xref:System.Collections.Stack.Count%2A>.\"\n  example:\n  - \"The following example shows how to copy a <xref:System.Collections.Stack> into a one-dimensional array.  \\n  \\n [!code-cpp[Classic Stack.CopyTo Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Stack.CopyTo Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic Stack.CopyTo Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Stack.CopyTo Example/CS/source.cs#1)]\\n [!code-vb[Classic Stack.CopyTo Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Stack.CopyTo Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual object[] ToArray ();\n    parameters: []\n    return:\n      type: System.Object[]\n      description: A new array containing copies of the elements of the <xref href=\"System.Collections.Stack\"></xref>.\n  overload: System.Collections.Stack.ToArray*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/Stack.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.InvalidCastException\n  parent: System\n  isExternal: false\n  name: InvalidCastException\n  nameWithType: InvalidCastException\n  fullName: System.InvalidCastException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.Collections.Stack.#ctor\n  parent: System.Collections.Stack\n  isExternal: false\n  name: Stack()\n  nameWithType: Stack.Stack()\n  fullName: Stack.Stack()\n- uid: System.Collections.Stack.#ctor(System.Collections.ICollection)\n  parent: System.Collections.Stack\n  isExternal: false\n  name: Stack(ICollection)\n  nameWithType: Stack.Stack(ICollection)\n  fullName: Stack.Stack(ICollection)\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: false\n  name: ICollection\n  nameWithType: ICollection\n  fullName: System.Collections.ICollection\n- uid: System.Collections.Stack.#ctor(System.Int32)\n  parent: System.Collections.Stack\n  isExternal: false\n  name: Stack(Int32)\n  nameWithType: Stack.Stack(Int32)\n  fullName: Stack.Stack(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Stack.Clear\n  parent: System.Collections.Stack\n  isExternal: false\n  name: Clear()\n  nameWithType: Stack.Clear()\n  fullName: Stack.Clear()\n- uid: System.Collections.Stack.Clone\n  parent: System.Collections.Stack\n  isExternal: false\n  name: Clone()\n  nameWithType: Stack.Clone()\n  fullName: Stack.Clone()\n- uid: System.Collections.Stack.Contains(System.Object)\n  parent: System.Collections.Stack\n  isExternal: false\n  name: Contains(Object)\n  nameWithType: Stack.Contains(Object)\n  fullName: Stack.Contains(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.Stack.CopyTo(System.Array,System.Int32)\n  parent: System.Collections.Stack\n  isExternal: false\n  name: CopyTo(Array, Int32)\n  nameWithType: Stack.CopyTo(Array, Int32)\n  fullName: Stack.CopyTo(Array, Int32)\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: System.Collections.Stack.Count\n  parent: System.Collections.Stack\n  isExternal: false\n  name: Count\n  nameWithType: Stack.Count\n  fullName: Stack.Count\n- uid: System.Collections.Stack.GetEnumerator\n  parent: System.Collections.Stack\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: Stack.GetEnumerator()\n  fullName: Stack.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Collections.Stack.IsSynchronized\n  parent: System.Collections.Stack\n  isExternal: false\n  name: IsSynchronized\n  nameWithType: Stack.IsSynchronized\n  fullName: Stack.IsSynchronized\n- uid: System.Collections.Stack.Peek\n  parent: System.Collections.Stack\n  isExternal: false\n  name: Peek()\n  nameWithType: Stack.Peek()\n  fullName: Stack.Peek()\n- uid: System.Collections.Stack.Pop\n  parent: System.Collections.Stack\n  isExternal: false\n  name: Pop()\n  nameWithType: Stack.Pop()\n  fullName: Stack.Pop()\n- uid: System.Collections.Stack.Push(System.Object)\n  parent: System.Collections.Stack\n  isExternal: false\n  name: Push(Object)\n  nameWithType: Stack.Push(Object)\n  fullName: Stack.Push(Object)\n- uid: System.Collections.Stack.Synchronized(System.Collections.Stack)\n  parent: System.Collections.Stack\n  isExternal: false\n  name: Synchronized(Stack)\n  nameWithType: Stack.Synchronized(Stack)\n  fullName: Stack.Synchronized(Stack)\n- uid: System.Collections.Stack\n  parent: System.Collections\n  isExternal: false\n  name: Stack\n  nameWithType: Stack\n  fullName: System.Collections.Stack\n- uid: System.Collections.Stack.SyncRoot\n  parent: System.Collections.Stack\n  isExternal: false\n  name: SyncRoot\n  nameWithType: Stack.SyncRoot\n  fullName: Stack.SyncRoot\n- uid: System.Collections.Stack.ToArray\n  parent: System.Collections.Stack\n  isExternal: false\n  name: ToArray()\n  nameWithType: Stack.ToArray()\n  fullName: Stack.ToArray()\n- uid: System.Object[]\n  parent: System\n  isExternal: false\n  name: Object[]\n  nameWithType: Object[]\n  fullName: System.Object[]\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Collections.Stack.#ctor*\n  parent: System.Collections.Stack\n  isExternal: false\n  name: Stack\n  nameWithType: Stack.Stack\n  fullName: Stack.Stack\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/Stack.xml\n- uid: System.Collections.Stack.Clear*\n  parent: System.Collections.Stack\n  isExternal: false\n  name: Clear\n  nameWithType: Stack.Clear\n  fullName: Stack.Clear\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/Stack.xml\n- uid: System.Collections.Stack.Clone*\n  parent: System.Collections.Stack\n  isExternal: false\n  name: Clone\n  nameWithType: Stack.Clone\n  fullName: Stack.Clone\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/Stack.xml\n- uid: System.Collections.Stack.Contains*\n  parent: System.Collections.Stack\n  isExternal: false\n  name: Contains\n  nameWithType: Stack.Contains\n  fullName: Stack.Contains\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/Stack.xml\n- uid: System.Collections.Stack.CopyTo*\n  parent: System.Collections.Stack\n  isExternal: false\n  name: CopyTo\n  nameWithType: Stack.CopyTo\n  fullName: Stack.CopyTo\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/Stack.xml\n- uid: System.Collections.Stack.Count*\n  parent: System.Collections.Stack\n  isExternal: false\n  name: Count\n  nameWithType: Stack.Count\n  fullName: Stack.Count\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/Stack.xml\n- uid: System.Collections.Stack.GetEnumerator*\n  parent: System.Collections.Stack\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: Stack.GetEnumerator\n  fullName: Stack.GetEnumerator\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/Stack.xml\n- uid: System.Collections.Stack.IsSynchronized*\n  parent: System.Collections.Stack\n  isExternal: false\n  name: IsSynchronized\n  nameWithType: Stack.IsSynchronized\n  fullName: Stack.IsSynchronized\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/Stack.xml\n- uid: System.Collections.Stack.Peek*\n  parent: System.Collections.Stack\n  isExternal: false\n  name: Peek\n  nameWithType: Stack.Peek\n  fullName: Stack.Peek\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/Stack.xml\n- uid: System.Collections.Stack.Pop*\n  parent: System.Collections.Stack\n  isExternal: false\n  name: Pop\n  nameWithType: Stack.Pop\n  fullName: Stack.Pop\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/Stack.xml\n- uid: System.Collections.Stack.Push*\n  parent: System.Collections.Stack\n  isExternal: false\n  name: Push\n  nameWithType: Stack.Push\n  fullName: Stack.Push\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/Stack.xml\n- uid: System.Collections.Stack.Synchronized*\n  parent: System.Collections.Stack\n  isExternal: false\n  name: Synchronized\n  nameWithType: Stack.Synchronized\n  fullName: Stack.Synchronized\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/Stack.xml\n- uid: System.Collections.Stack.SyncRoot*\n  parent: System.Collections.Stack\n  isExternal: false\n  name: SyncRoot\n  nameWithType: Stack.SyncRoot\n  fullName: Stack.SyncRoot\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/Stack.xml\n- uid: System.Collections.Stack.ToArray*\n  parent: System.Collections.Stack\n  isExternal: false\n  name: ToArray\n  nameWithType: Stack.ToArray\n  fullName: Stack.ToArray\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/Stack.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Cast<TResult>(IEnumerable)\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  fullName: Enumerable.Cast<TResult>(IEnumerable)\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OfType<TResult>(IEnumerable)\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  fullName: Enumerable.OfType<TResult>(IEnumerable)\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  parent: System.Linq.ParallelEnumerable\n  isExternal: false\n  name: AsParallel(IEnumerable)\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n  fullName: ParallelEnumerable.AsParallel(IEnumerable)\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: AsQueryable(IEnumerable)\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n  fullName: Queryable.AsQueryable(IEnumerable)\n- uid: System.ICloneable\n  parent: System\n  isExternal: false\n  name: ICloneable\n  nameWithType: ICloneable\n  fullName: System.ICloneable\n"}