{"nodes":[{"content":"A factory that creates new instances of a part that provides the specified export.","nodes":[{"pos":[0,82],"content":"A factory that creates new instances of a part that provides the specified export.","nodes":[{"content":"A factory that creates new instances of a part that provides the specified export.","pos":[0,82]}]}],"pos":[776,859],"yaml":true},{"content":"When you refer indirectly to a part by using a <xref:System.Lazy%601> object, the <xref:System.Lazy%601.Value%2A> property always returns a reference to the same object. In some circumstances, you might want each reference to result in the creation of a new object. <xref:System.ComponentModel.Composition.ExportFactory%601> is designed for those scenarios.  \n  \n <xref:System.ComponentModel.Composition.ExportFactory%601> can be used in a similar fashion to <xref:System.Lazy%601> when creating attributed parts. That is, an import contract that is defined on <xref:System.ComponentModel.Composition.ExportFactory%601> with a generic parameter of `T` will match an export that is defined on `T`. For example, the follow export and import match:  \n  \n```csharp  \n[Export]  \npublic String myData = \"Example Data.\";  \n  \n[Import]  \npublic ExportFactory<String> theData { get; set; }  \n```  \n  \n```vb  \n<Export()>  \nPublic myData As String = \"Example Data.\"  \n  \n<Import()>  \nPublic Property theData As ExportFactory(Of String)  \n```  \n  \n The <xref:System.ComponentModel.Composition.ExportFactory%601.CreateExport%2A?displayProperty=fullName> method returns an <xref:System.ComponentModel.Composition.ExportLifetimeContext%601> object, which has two pieces. The <xref:System.ComponentModel.Composition.ExportLifetimeContext%601.Value%2A?displayProperty=fullName> property provides access to the created part. Calling the <xref:System.ComponentModel.Composition.ExportLifetimeContext%601.Dispose%2A> method of the <xref:System.ComponentModel.Composition.ExportLifetimeContext%601> object cleans up the created part and all of its dependencies, thereby allowing the part's lifetime to be managed without reference to the container that created it.","nodes":[{"pos":[0,357],"content":"When you refer indirectly to a part by using a <xref:System.Lazy%601> object, the <xref:System.Lazy%601.Value%2A> property always returns a reference to the same object. In some circumstances, you might want each reference to result in the creation of a new object. <xref:System.ComponentModel.Composition.ExportFactory%601> is designed for those scenarios.","nodes":[{"content":"When you refer indirectly to a part by using a <xref:System.Lazy%601> object, the <xref:System.Lazy%601.Value%2A> property always returns a reference to the same object. In some circumstances, you might want each reference to result in the creation of a new object. <xref:System.ComponentModel.Composition.ExportFactory%601> is designed for those scenarios.","pos":[0,357],"nodes":[{"content":"When you refer indirectly to a part by using a <ph id=\"ph1\">&lt;xref:System.Lazy%601&gt;</ph> object, the <ph id=\"ph2\">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> property always returns a reference to the same object.","pos":[0,169],"source":"When you refer indirectly to a part by using a <xref:System.Lazy%601> object, the <xref:System.Lazy%601.Value%2A> property always returns a reference to the same object."},{"content":"In some circumstances, you might want each reference to result in the creation of a new object.","pos":[170,265]},{"content":"<ph id=\"ph1\">&lt;xref:System.ComponentModel.Composition.ExportFactory%601&gt;</ph> is designed for those scenarios.","pos":[266,357],"source":" <xref:System.ComponentModel.Composition.ExportFactory%601> is designed for those scenarios."}]}]},{"pos":[364,745],"content":"<xref:System.ComponentModel.Composition.ExportFactory%601> can be used in a similar fashion to <xref:System.Lazy%601> when creating attributed parts. That is, an import contract that is defined on <xref:System.ComponentModel.Composition.ExportFactory%601> with a generic parameter of `T` will match an export that is defined on `T`. For example, the follow export and import match:","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.ComponentModel.Composition.ExportFactory%601&gt;</ph> can be used in a similar fashion to <ph id=\"ph2\">&lt;xref:System.Lazy%601&gt;</ph> when creating attributed parts.","pos":[0,149],"source":"<xref:System.ComponentModel.Composition.ExportFactory%601> can be used in a similar fashion to <xref:System.Lazy%601> when creating attributed parts."},{"content":"That is, an import contract that is defined on <ph id=\"ph1\">&lt;xref:System.ComponentModel.Composition.ExportFactory%601&gt;</ph> with a generic parameter of <ph id=\"ph2\">`T`</ph> will match an export that is defined on <ph id=\"ph3\">`T`</ph>.","pos":[150,332],"source":" That is, an import contract that is defined on <xref:System.ComponentModel.Composition.ExportFactory%601> with a generic parameter of `T` will match an export that is defined on `T`."},{"content":"For example, the follow export and import match:","pos":[333,381]}]},{"pos":[1037,1743],"content":"The <xref:System.ComponentModel.Composition.ExportFactory%601.CreateExport%2A?displayProperty=fullName> method returns an <xref:System.ComponentModel.Composition.ExportLifetimeContext%601> object, which has two pieces. The <xref:System.ComponentModel.Composition.ExportLifetimeContext%601.Value%2A?displayProperty=fullName> property provides access to the created part. Calling the <xref:System.ComponentModel.Composition.ExportLifetimeContext%601.Dispose%2A> method of the <xref:System.ComponentModel.Composition.ExportLifetimeContext%601> object cleans up the created part and all of its dependencies, thereby allowing the part's lifetime to be managed without reference to the container that created it.","nodes":[{"content":"The <xref:System.ComponentModel.Composition.ExportFactory%601.CreateExport%2A?displayProperty=fullName> method returns an <xref:System.ComponentModel.Composition.ExportLifetimeContext%601> object, which has two pieces. The <xref:System.ComponentModel.Composition.ExportLifetimeContext%601.Value%2A?displayProperty=fullName> property provides access to the created part. Calling the <xref:System.ComponentModel.Composition.ExportLifetimeContext%601.Dispose%2A> method of the <xref:System.ComponentModel.Composition.ExportLifetimeContext%601> object cleans up the created part and all of its dependencies, thereby allowing the part's lifetime to be managed without reference to the container that created it.","pos":[0,706],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.ComponentModel.Composition.ExportFactory%601.CreateExport%2A?displayProperty=fullName&gt;</ph> method returns an <ph id=\"ph2\">&lt;xref:System.ComponentModel.Composition.ExportLifetimeContext%601&gt;</ph> object, which has two pieces.","pos":[0,218],"source":"The <xref:System.ComponentModel.Composition.ExportFactory%601.CreateExport%2A?displayProperty=fullName> method returns an <xref:System.ComponentModel.Composition.ExportLifetimeContext%601> object, which has two pieces."},{"content":"The <ph id=\"ph1\">&lt;xref:System.ComponentModel.Composition.ExportLifetimeContext%601.Value%2A?displayProperty=fullName&gt;</ph> property provides access to the created part.","pos":[219,369],"source":" The <xref:System.ComponentModel.Composition.ExportLifetimeContext%601.Value%2A?displayProperty=fullName> property provides access to the created part."},{"content":"Calling the <ph id=\"ph1\">&lt;xref:System.ComponentModel.Composition.ExportLifetimeContext%601.Dispose%2A&gt;</ph> method of the <ph id=\"ph2\">&lt;xref:System.ComponentModel.Composition.ExportLifetimeContext%601&gt;</ph> object cleans up the created part and all of its dependencies, thereby allowing the part's lifetime to be managed without reference to the container that created it.","pos":[370,706],"source":" Calling the <xref:System.ComponentModel.Composition.ExportLifetimeContext%601.Dispose%2A> method of the <xref:System.ComponentModel.Composition.ExportLifetimeContext%601> object cleans up the created part and all of its dependencies, thereby allowing the part's lifetime to be managed without reference to the container that created it."}]}]}],"pos":[870,2640],"yaml":true,"extradata":"MT"},{"content":"The type of the export.","nodes":[{"pos":[0,23],"content":"The type of the export.","nodes":[{"content":"The type of the export.","pos":[0,23]}]}],"pos":[2744,2768],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.ComponentModel.Composition.ExportFactory`1\"></xref> class.","nodes":[{"pos":[0,111],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.Composition.ExportFactory`1\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.ComponentModel.Composition.ExportFactory`1\"></xref> class."}],"pos":[4541,4653],"yaml":true},{"content":"A function that returns the exported value and an <xref href=\"System.Action\"></xref> that releases it.","nodes":[{"pos":[0,102],"content":"A function that returns the exported value and an <ph id=\"ph1\">&lt;xref href=\"System.Action\"&gt;&lt;/xref&gt;</ph> that releases it.","source":"A function that returns the exported value and an <xref href=\"System.Action\"></xref> that releases it."}],"pos":[4880,4983],"yaml":true},{"content":"Creates an instance of the factory's export type.","nodes":[{"pos":[0,49],"content":"Creates an instance of the factory's export type.","nodes":[{"content":"Creates an instance of the factory's export type.","pos":[0,49]}]}],"pos":[6230,6280],"yaml":true},{"content":"A valid instance of the factory's exported type.","nodes":[{"pos":[0,48],"content":"A valid instance of the factory's exported type.","nodes":[{"content":"A valid instance of the factory's exported type.","pos":[0,48]}]}],"pos":[6506,6555],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ComponentModel.Composition.ExportFactory`1\n  commentId: T:System.ComponentModel.Composition.ExportFactory`1\n  id: ExportFactory`1\n  children:\n  - System.ComponentModel.Composition.ExportFactory`1.#ctor(System.Func{System.Tuple{`0,System.Action}})\n  - System.ComponentModel.Composition.ExportFactory`1.CreateExport\n  - System.ComponentModel.Composition.ExportFactory`1.OnFilterScopedCatalog(System.ComponentModel.Composition.Primitives.ComposablePartDefinition)\n  langs:\n  - csharp\n  name: ExportFactory<T>\n  nameWithType: ExportFactory<T>\n  fullName: System.ComponentModel.Composition.ExportFactory<T>\n  type: Class\n  assemblies:\n  - System.ComponentModel.Composition\n  namespace: System.ComponentModel.Composition\n  summary: A factory that creates new instances of a part that provides the specified export.\n  remarks: \"When you refer indirectly to a part by using a <xref:System.Lazy%601> object, the <xref:System.Lazy%601.Value%2A> property always returns a reference to the same object. In some circumstances, you might want each reference to result in the creation of a new object. <xref:System.ComponentModel.Composition.ExportFactory%601> is designed for those scenarios.  \\n  \\n <xref:System.ComponentModel.Composition.ExportFactory%601> can be used in a similar fashion to <xref:System.Lazy%601> when creating attributed parts. That is, an import contract that is defined on <xref:System.ComponentModel.Composition.ExportFactory%601> with a generic parameter of `T` will match an export that is defined on `T`. For example, the follow export and import match:  \\n  \\n```csharp  \\n[Export]  \\npublic String myData = \\\"Example Data.\\\";  \\n  \\n[Import]  \\npublic ExportFactory<String> theData { get; set; }  \\n```  \\n  \\n```vb  \\n<Export()>  \\nPublic myData As String = \\\"Example Data.\\\"  \\n  \\n<Import()>  \\nPublic Property theData As ExportFactory(Of String)  \\n```  \\n  \\n The <xref:System.ComponentModel.Composition.ExportFactory%601.CreateExport%2A?displayProperty=fullName> method returns an <xref:System.ComponentModel.Composition.ExportLifetimeContext%601> object, which has two pieces. The <xref:System.ComponentModel.Composition.ExportLifetimeContext%601.Value%2A?displayProperty=fullName> property provides access to the created part. Calling the <xref:System.ComponentModel.Composition.ExportLifetimeContext%601.Dispose%2A> method of the <xref:System.ComponentModel.Composition.ExportLifetimeContext%601> object cleans up the created part and all of its dependencies, thereby allowing the part's lifetime to be managed without reference to the container that created it.\"\n  syntax:\n    content: public class ExportFactory<T>\n    typeParameters:\n    - id: T\n      description: The type of the export.\n  inheritance:\n  - System.Object\n  derivedClasses:\n  - System.ComponentModel.Composition.ExportFactory`2\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Composition/ExportFactory`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.ComponentModel.Composition.ExportFactory`1.#ctor(System.Func{System.Tuple{`0,System.Action}})\n  commentId: M:System.ComponentModel.Composition.ExportFactory`1.#ctor(System.Func{System.Tuple{`0,System.Action}})\n  id: '#ctor(System.Func{System.Tuple{`0,System.Action}})'\n  parent: System.ComponentModel.Composition.ExportFactory`1\n  langs:\n  - csharp\n  name: ExportFactory<T>(Func<Tuple<T,Action>>)\n  nameWithType: ExportFactory<T>.ExportFactory<T>(Func<Tuple<T,Action>>)\n  fullName: ExportFactory<T>.ExportFactory<T>(Func<Tuple<T,Action>>)\n  type: Constructor\n  assemblies:\n  - System.ComponentModel.Composition\n  namespace: System.ComponentModel.Composition\n  summary: Initializes a new instance of the <xref href=\"System.ComponentModel.Composition.ExportFactory`1\"></xref> class.\n  syntax:\n    content: public ExportFactory (Func<Tuple<T,Action>> exportLifetimeContextCreator);\n    parameters:\n    - id: exportLifetimeContextCreator\n      type: System.Func{System.Tuple{T,System.Action}}\n      description: A function that returns the exported value and an <xref href=\"System.Action\"></xref> that releases it.\n  overload: System.ComponentModel.Composition.ExportFactory`1.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Composition/ExportFactory`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.ComponentModel.Composition.ExportFactory`1.CreateExport\n  commentId: M:System.ComponentModel.Composition.ExportFactory`1.CreateExport\n  id: CreateExport\n  parent: System.ComponentModel.Composition.ExportFactory`1\n  langs:\n  - csharp\n  name: CreateExport()\n  nameWithType: ExportFactory<T>.CreateExport()\n  fullName: ExportFactory<T>.CreateExport()\n  type: Method\n  assemblies:\n  - System.ComponentModel.Composition\n  namespace: System.ComponentModel.Composition\n  summary: Creates an instance of the factory's export type.\n  syntax:\n    content: public System.ComponentModel.Composition.ExportLifetimeContext<T> CreateExport ();\n    parameters: []\n    return:\n      type: System.ComponentModel.Composition.ExportLifetimeContext`1\n      description: A valid instance of the factory's exported type.\n  overload: System.ComponentModel.Composition.ExportFactory`1.CreateExport*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Composition/ExportFactory`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.ComponentModel.Composition.ExportFactory`1.OnFilterScopedCatalog(System.ComponentModel.Composition.Primitives.ComposablePartDefinition)\n  commentId: M:System.ComponentModel.Composition.ExportFactory`1.OnFilterScopedCatalog(System.ComponentModel.Composition.Primitives.ComposablePartDefinition)\n  id: OnFilterScopedCatalog(System.ComponentModel.Composition.Primitives.ComposablePartDefinition)\n  parent: System.ComponentModel.Composition.ExportFactory`1\n  langs:\n  - csharp\n  name: OnFilterScopedCatalog(ComposablePartDefinition)\n  nameWithType: ExportFactory<T>.OnFilterScopedCatalog(ComposablePartDefinition)\n  fullName: ExportFactory<T>.OnFilterScopedCatalog(ComposablePartDefinition)\n  type: Method\n  assemblies:\n  - System.ComponentModel.Composition\n  namespace: System.ComponentModel.Composition\n  syntax:\n    content: protected virtual bool OnFilterScopedCatalog (System.ComponentModel.Composition.Primitives.ComposablePartDefinition composablePartDefinition);\n    parameters:\n    - id: composablePartDefinition\n      type: System.ComponentModel.Composition.Primitives.ComposablePartDefinition\n      description: ''\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.ComponentModel.Composition.ExportFactory`1.OnFilterScopedCatalog*\n  exceptions: []\n  version:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Composition/ExportFactory`1.xml\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ComponentModel.Composition.ExportFactory`1.#ctor(System.Func{System.Tuple{`0,System.Action}})\n  parent: System.ComponentModel.Composition.ExportFactory`1\n  isExternal: false\n  name: ExportFactory<T>(Func<Tuple<T,Action>>)\n  nameWithType: ExportFactory<T>.ExportFactory<T>(Func<Tuple<T,Action>>)\n  fullName: ExportFactory<T>.ExportFactory<T>(Func<Tuple<T,Action>>)\n- uid: System.Func`1\n  name: Func<TResult>\n  nameWithType: Func<TResult>\n  fullName: System.Func<TResult>\n- uid: System.Tuple`2\n  name: Tuple<T1,T2>\n  nameWithType: Tuple<T1,T2>\n  fullName: System.Tuple<T1,T2>\n- uid: T\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Action\n  name: Action\n  nameWithType: Action\n  fullName: System.Action\n- uid: System.Func{System.Tuple{T,System.Action}}\n  parent: System\n  isExternal: false\n  name: Func<Tuple<T,Action>>\n  nameWithType: Func<Tuple<T,Action>>\n  fullName: System.Func<System.Tuple<T,System.Action>>\n  spec.csharp:\n  - uid: System.Func`1\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Tuple`2\n    name: Tuple\n    nameWithType: Tuple\n    fullName: System.Tuple\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: T\n    name: T\n    nameWithType: T\n    fullName: T\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Action\n    name: Action\n    nameWithType: Action\n    fullName: System.Action\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.ComponentModel.Composition.ExportFactory`1.CreateExport\n  parent: System.ComponentModel.Composition.ExportFactory`1\n  isExternal: false\n  name: CreateExport()\n  nameWithType: ExportFactory<T>.CreateExport()\n  fullName: ExportFactory<T>.CreateExport()\n- uid: System.ComponentModel.Composition.ExportLifetimeContext`1\n  parent: System.ComponentModel.Composition\n  isExternal: false\n  name: ExportLifetimeContext<T>\n  nameWithType: ExportLifetimeContext<T>\n  fullName: System.ComponentModel.Composition.ExportLifetimeContext<T>\n- uid: System.ComponentModel.Composition.ExportFactory`1.OnFilterScopedCatalog(System.ComponentModel.Composition.Primitives.ComposablePartDefinition)\n  parent: System.ComponentModel.Composition.ExportFactory`1\n  isExternal: false\n  name: OnFilterScopedCatalog(ComposablePartDefinition)\n  nameWithType: ExportFactory<T>.OnFilterScopedCatalog(ComposablePartDefinition)\n  fullName: ExportFactory<T>.OnFilterScopedCatalog(ComposablePartDefinition)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.ComponentModel.Composition.Primitives.ComposablePartDefinition\n  parent: System.ComponentModel.Composition.Primitives\n  isExternal: false\n  name: ComposablePartDefinition\n  nameWithType: ComposablePartDefinition\n  fullName: System.ComponentModel.Composition.Primitives.ComposablePartDefinition\n- uid: System.ComponentModel.Composition.ExportFactory`1.#ctor*\n  parent: System.ComponentModel.Composition.ExportFactory`1\n  isExternal: false\n  name: ExportFactory<T>\n  nameWithType: ExportFactory<T>.ExportFactory<T>\n  fullName: ExportFactory<T>.ExportFactory<T>\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Composition/ExportFactory`1.xml\n- uid: System.ComponentModel.Composition.ExportFactory`1.CreateExport*\n  parent: System.ComponentModel.Composition.ExportFactory`1\n  isExternal: false\n  name: CreateExport\n  nameWithType: ExportFactory<T>.CreateExport\n  fullName: ExportFactory<T>.CreateExport\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Composition/ExportFactory`1.xml\n- uid: System.ComponentModel.Composition.ExportFactory`1.OnFilterScopedCatalog*\n  parent: System.ComponentModel.Composition.ExportFactory`1\n  isExternal: false\n  name: OnFilterScopedCatalog\n  nameWithType: ExportFactory<T>.OnFilterScopedCatalog\n  fullName: ExportFactory<T>.OnFilterScopedCatalog\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Composition/ExportFactory`1.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}