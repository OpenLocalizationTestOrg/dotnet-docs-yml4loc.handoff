{"nodes":[{"content":"Provides a threading service that allows the host application creating a workflow instance to donate the <xref href=\"System.Threading.Thread\"></xref> on which the workflow instance is run. Using this threading service, host applications can run a workflow instance on a single <xref href=\"System.Threading.Thread\"></xref> in synchronous mode (although if the workflow contains a delay activity, the work is postponed until after the delay activity is executed on a separate thread spawned by <xref href=\"System.Threading.Timer\"></xref>).This mode blocks the execution of the host application until the workflow instance becomes idle. Subsequently, the workflow instance can only be executed using the <xref href=\"System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.RunWorkflow(System.Guid)\"></xref> method of this service.","nodes":[{"pos":[0,833],"content":"Provides a threading service that allows the host application creating a workflow instance to donate the <xref href=\"System.Threading.Thread\"></xref> on which the workflow instance is run. Using this threading service, host applications can run a workflow instance on a single <xref href=\"System.Threading.Thread\"></xref> in synchronous mode (although if the workflow contains a delay activity, the work is postponed until after the delay activity is executed on a separate thread spawned by <xref href=\"System.Threading.Timer\"></xref>).This mode blocks the execution of the host application until the workflow instance becomes idle. Subsequently, the workflow instance can only be executed using the <xref href=\"System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.RunWorkflow(System.Guid)\"></xref> method of this service.","nodes":[{"content":"Provides a threading service that allows the host application creating a workflow instance to donate the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Thread\"&gt;&lt;/xref&gt;</ph> on which the workflow instance is run.","pos":[0,188],"source":"Provides a threading service that allows the host application creating a workflow instance to donate the <xref href=\"System.Threading.Thread\"></xref> on which the workflow instance is run."},{"content":"Using this threading service, host applications can run a workflow instance on a single <ph id=\"ph1\">&lt;xref href=\"System.Threading.Thread\"&gt;&lt;/xref&gt;</ph> in synchronous mode (although if the workflow contains a delay activity, the work is postponed until after the delay activity is executed on a separate thread spawned by <ph id=\"ph2\">&lt;xref href=\"System.Threading.Timer\"&gt;&lt;/xref&gt;</ph>).This mode blocks the execution of the host application until the workflow instance becomes idle.","pos":[189,633],"source":" Using this threading service, host applications can run a workflow instance on a single <xref href=\"System.Threading.Thread\"></xref> in synchronous mode (although if the workflow contains a delay activity, the work is postponed until after the delay activity is executed on a separate thread spawned by <xref href=\"System.Threading.Timer\"></xref>).This mode blocks the execution of the host application until the workflow instance becomes idle."},{"content":"Subsequently, the workflow instance can only be executed using the <ph id=\"ph1\">&lt;xref href=\"System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.RunWorkflow(System.Guid)\"&gt;&lt;/xref&gt;</ph> method of this service.","pos":[634,833],"source":" Subsequently, the workflow instance can only be executed using the <xref href=\"System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.RunWorkflow(System.Guid)\"></xref> method of this service."}]}],"pos":[1407,2241],"yaml":true},{"content":"> [!NOTE]\n>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  \n  \n <xref:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService> does not automatically run a workflow instance that is in the queue. The host must call <xref:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.RunWorkflow%2A> to run a specified workflow.","nodes":[{"pos":[2,78],"content":"[!NOTE]\n [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]","leadings":["","> "],"nodes":[]},{"pos":[85,356],"content":"<xref:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService> does not automatically run a workflow instance that is in the queue. The host must call <xref:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.RunWorkflow%2A> to run a specified workflow.","nodes":[{"content":"<xref:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService> does not automatically run a workflow instance that is in the queue. The host must call <xref:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.RunWorkflow%2A> to run a specified workflow.","pos":[0,271],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService&gt;</ph> does not automatically run a workflow instance that is in the queue.","pos":[0,138],"source":"<xref:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService> does not automatically run a workflow instance that is in the queue."},{"content":"The host must call <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.RunWorkflow%2A&gt;</ph> to run a specified workflow.","pos":[139,271],"source":" The host must call <xref:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.RunWorkflow%2A> to run a specified workflow."}]}]}],"pos":[2252,2614],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\"></xref> class.","nodes":[{"pos":[0,124],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\"></xref> class."}],"pos":[4890,5015],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\"></xref> class.","nodes":[{"pos":[0,124],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\"></xref> class."}],"pos":[6370,6495],"yaml":true},{"content":"`Boolean` that determines how delay activities are handled. If `true`, the scheduler service automatically resumes workflows after delay activities expire (by using an in-memory timer). If `false`, the host must manually resume the workflow after the delay activities expire.","nodes":[{"pos":[0,275],"content":"`Boolean` that determines how delay activities are handled. If `true`, the scheduler service automatically resumes workflows after delay activities expire (by using an in-memory timer). If `false`, the host must manually resume the workflow after the delay activities expire.","nodes":[{"content":"<ph id=\"ph1\">`Boolean`</ph> that determines how delay activities are handled.","pos":[0,59],"source":"`Boolean` that determines how delay activities are handled."},{"content":"If <ph id=\"ph1\">`true`</ph>, the scheduler service automatically resumes workflows after delay activities expire (by using an in-memory timer).","pos":[60,185],"source":" If `true`, the scheduler service automatically resumes workflows after delay activities expire (by using an in-memory timer)."},{"content":"If <ph id=\"ph1\">`false`</ph>, the host must manually resume the workflow after the delay activities expire.","pos":[186,275],"source":" If `false`, the host must manually resume the workflow after the delay activities expire."}]}],"pos":[6668,6946],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\"></xref> class.","nodes":[{"pos":[0,124],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\"></xref> class."}],"pos":[8361,8486],"yaml":true},{"content":"A <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> that contains parameters for <code>useActiveTimers</code>. If `true`, the scheduler service automatically resumes workflows after delay activities expire (by using an in-memory timer). If `false`, the host must manually resume the workflow after the delay activities expire.","nodes":[{"pos":[0,348],"content":"A <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> that contains parameters for <code>useActiveTimers</code>. If `true`, the scheduler service automatically resumes workflows after delay activities expire (by using an in-memory timer). If `false`, the host must manually resume the workflow after the delay activities expire.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.NameValueCollection\"&gt;&lt;/xref&gt;</ph> that contains parameters for <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">useActiveTimers</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[0,132],"source":"A <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> that contains parameters for <code>useActiveTimers</code>."},{"content":"If <ph id=\"ph1\">`true`</ph>, the scheduler service automatically resumes workflows after delay activities expire (by using an in-memory timer).","pos":[133,258],"source":" If `true`, the scheduler service automatically resumes workflows after delay activities expire (by using an in-memory timer)."},{"content":"If <ph id=\"ph1\">`false`</ph>, the host must manually resume the workflow after the delay activities expire.","pos":[259,348],"source":" If `false`, the host must manually resume the workflow after the delay activities expire."}]}],"pos":[8731,9080],"yaml":true},{"content":"Cancels the specified existing workflow instance work item.","nodes":[{"pos":[0,59],"content":"Cancels the specified existing workflow instance work item.","nodes":[{"content":"Cancels the specified existing workflow instance work item.","pos":[0,59]}]}],"pos":[10257,10317],"yaml":true},{"content":"The <xref href=\"System.Guid\"></xref> associated with the existing scheduled work item to cancel.","nodes":[{"pos":[0,96],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Guid\"&gt;&lt;/xref&gt;</ph> associated with the existing scheduled work item to cancel.","source":"The <xref href=\"System.Guid\"></xref> associated with the existing scheduled work item to cancel."}],"pos":[10464,10561],"yaml":true},{"content":"Overloaded from <xref href=\"System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted\"></xref>. This method is called whenever <xref href=\"System.Workflow.Runtime.WorkflowRuntime.StartRuntime\"></xref> is called and is used by the <xref href=\"System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\"></xref> to do work that is needed when the <xref href=\"System.Workflow.Runtime.WorkflowRuntime\"></xref> starts.","nodes":[{"pos":[0,424],"content":"Overloaded from <xref href=\"System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted\"></xref>. This method is called whenever <xref href=\"System.Workflow.Runtime.WorkflowRuntime.StartRuntime\"></xref> is called and is used by the <xref href=\"System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\"></xref> to do work that is needed when the <xref href=\"System.Workflow.Runtime.WorkflowRuntime\"></xref> starts.","nodes":[{"content":"Overloaded from <ph id=\"ph1\">&lt;xref href=\"System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted\"&gt;&lt;/xref&gt;</ph>.","pos":[0,102],"source":"Overloaded from <xref href=\"System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted\"></xref>."},{"content":"This method is called whenever <ph id=\"ph1\">&lt;xref href=\"System.Workflow.Runtime.WorkflowRuntime.StartRuntime\"&gt;&lt;/xref&gt;</ph> is called and is used by the <ph id=\"ph2\">&lt;xref href=\"System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\"&gt;&lt;/xref&gt;</ph> to do work that is needed when the <ph id=\"ph3\">&lt;xref href=\"System.Workflow.Runtime.WorkflowRuntime\"&gt;&lt;/xref&gt;</ph> starts.","pos":[103,424],"source":" This method is called whenever <xref href=\"System.Workflow.Runtime.WorkflowRuntime.StartRuntime\"></xref> is called and is used by the <xref href=\"System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\"></xref> to do work that is needed when the <xref href=\"System.Workflow.Runtime.WorkflowRuntime\"></xref> starts."}]}],"pos":[11706,12131],"yaml":true},{"content":"Runs the specified workflow instance.","nodes":[{"pos":[0,37],"content":"Runs the specified workflow instance.","nodes":[{"content":"Runs the specified workflow instance.","pos":[0,37]}]}],"pos":[13422,13460],"yaml":true},{"content":"This is a synchronous call that uses the current thread to run the workflow. It does not return until the workflow idles, suspends, completes, terminates, or aborts.","nodes":[{"pos":[0,165],"content":"This is a synchronous call that uses the current thread to run the workflow. It does not return until the workflow idles, suspends, completes, terminates, or aborts.","nodes":[{"content":"This is a synchronous call that uses the current thread to run the workflow. It does not return until the workflow idles, suspends, completes, terminates, or aborts.","pos":[0,165],"nodes":[{"content":"This is a synchronous call that uses the current thread to run the workflow.","pos":[0,76]},{"content":"It does not return until the workflow idles, suspends, completes, terminates, or aborts.","pos":[77,165]}]}]}],"pos":[13471,13637],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Guid\"></xref> for the workflow instance to run.","nodes":[{"pos":[0,70],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Guid\"&gt;&lt;/xref&gt;</ph> for the workflow instance to run.","source":"The <xref href=\"System.Guid\"></xref> for the workflow instance to run."}],"pos":[13799,13870],"yaml":true},{"content":"`true` if the workflow starts running; otherwise, `false`.","nodes":[{"pos":[0,58],"content":"<ph id=\"ph1\">`true`</ph> if the workflow starts running; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the workflow starts running; otherwise, `false`."}],"pos":[13928,13989],"yaml":true},{"content":"<code>workflowInstanceId</code> is an empty GUID.","nodes":[{"pos":[0,49],"content":"<ph id=\"ph1\">&lt;code&gt;workflowInstanceId&lt;/code&gt;</ph> is an empty GUID.","source":"<code>workflowInstanceId</code> is an empty GUID."}],"pos":[14185,14235],"yaml":true},{"content":"Adds a workflow instance to the pending work items queue using the specified workflow instance using the specified multicast delegate.","nodes":[{"pos":[0,134],"content":"Adds a workflow instance to the pending work items queue using the specified workflow instance using the specified multicast delegate.","nodes":[{"content":"Adds a workflow instance to the pending work items queue using the specified workflow instance using the specified multicast delegate.","pos":[0,134]}]}],"pos":[15457,15592],"yaml":true},{"content":"A <xref href=\"System.Threading.WaitCallback\"></xref> multicast delegate that represents the method to run.","nodes":[{"pos":[0,106],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Threading.WaitCallback\"&gt;&lt;/xref&gt;</ph> multicast delegate that represents the method to run.","source":"A <xref href=\"System.Threading.WaitCallback\"></xref> multicast delegate that represents the method to run."}],"pos":[15811,15918],"yaml":true},{"content":"A <xref href=\"System.Guid\"></xref> that represents the workflow instance.","nodes":[{"pos":[0,73],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Guid\"&gt;&lt;/xref&gt;</ph> that represents the workflow instance.","source":"A <xref href=\"System.Guid\"></xref> that represents the workflow instance."}],"pos":[15990,16064],"yaml":true},{"content":"<code>callback</code> contains a null reference (`Nothing` in Visual Basic).","nodes":[{"pos":[0,76],"content":"<ph id=\"ph1\">&lt;code&gt;callback&lt;/code&gt;</ph> contains a null reference (<ph id=\"ph2\">`Nothing`</ph> in Visual Basic).","source":"<code>callback</code> contains a null reference (`Nothing` in Visual Basic)."}],"pos":[16265,16342],"yaml":true},{"content":"Adds the specified workflow instance to the pending work item queue using the specified multicast delegate, <xref href=\"System.DateTime\"></xref> and GUIDs.","nodes":[{"pos":[0,155],"content":"Adds the specified workflow instance to the pending work item queue using the specified multicast delegate, <ph id=\"ph1\">&lt;xref href=\"System.DateTime\"&gt;&lt;/xref&gt;</ph> and GUIDs.","source":"Adds the specified workflow instance to the pending work item queue using the specified multicast delegate, <xref href=\"System.DateTime\"></xref> and GUIDs."}],"pos":[17696,17852],"yaml":true},{"content":"A <xref href=\"System.Threading.WaitCallback\"></xref> multicast delegate that represents the method to run.","nodes":[{"pos":[0,106],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Threading.WaitCallback\"&gt;&lt;/xref&gt;</ph> multicast delegate that represents the method to run.","source":"A <xref href=\"System.Threading.WaitCallback\"></xref> multicast delegate that represents the method to run."}],"pos":[18103,18210],"yaml":true},{"content":"A <xref href=\"System.Guid\"></xref> that represents the workflow instance.","nodes":[{"pos":[0,73],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Guid\"&gt;&lt;/xref&gt;</ph> that represents the workflow instance.","source":"A <xref href=\"System.Guid\"></xref> that represents the workflow instance."}],"pos":[18282,18356],"yaml":true},{"content":"The <xref href=\"System.DateTime\"></xref> that indicates the time to begin running the thread.","nodes":[{"pos":[0,93],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.DateTime\"&gt;&lt;/xref&gt;</ph> that indicates the time to begin running the thread.","source":"The <xref href=\"System.DateTime\"></xref> that indicates the time to begin running the thread."}],"pos":[18421,18515],"yaml":true},{"content":"A <xref href=\"System.Guid\"></xref> that represents the scheduled thread.","nodes":[{"pos":[0,72],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Guid\"&gt;&lt;/xref&gt;</ph> that represents the scheduled thread.","source":"A <xref href=\"System.Guid\"></xref> that represents the scheduled thread."}],"pos":[18576,18649],"yaml":true},{"content":"<code>callback</code> contains a null reference (`Nothing` in Visual Basic).","nodes":[{"pos":[0,76],"content":"<ph id=\"ph1\">&lt;code&gt;callback&lt;/code&gt;</ph> contains a null reference (<ph id=\"ph2\">`Nothing`</ph> in Visual Basic).","source":"<code>callback</code> contains a null reference (`Nothing` in Visual Basic)."}],"pos":[18850,18927],"yaml":true},{"content":"<code>workflowInstanceId</code> or <code>timerId</code> is an empty GUID.","nodes":[{"pos":[0,73],"content":"<ph id=\"ph1\">&lt;code&gt;workflowInstanceId&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;timerId&lt;/code&gt;</ph> is an empty GUID.","source":"<code>workflowInstanceId</code> or <code>timerId</code> is an empty GUID."}],"pos":[19021,19095],"yaml":true},{"content":"Overloaded from <xref href=\"System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop\"></xref>. The <xref href=\"System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\"></xref> uses this method to do work that is needed when the <xref href=\"System.Workflow.Runtime.WorkflowRuntime\"></xref> stops.","nodes":[{"pos":[0,305],"content":"Overloaded from <xref href=\"System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop\"></xref>. The <xref href=\"System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\"></xref> uses this method to do work that is needed when the <xref href=\"System.Workflow.Runtime.WorkflowRuntime\"></xref> stops.","nodes":[{"content":"Overloaded from <ph id=\"ph1\">&lt;xref href=\"System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop\"&gt;&lt;/xref&gt;</ph>.","pos":[0,97],"source":"Overloaded from <xref href=\"System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop\"></xref>."},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\"&gt;&lt;/xref&gt;</ph> uses this method to do work that is needed when the <ph id=\"ph2\">&lt;xref href=\"System.Workflow.Runtime.WorkflowRuntime\"&gt;&lt;/xref&gt;</ph> stops.","pos":[98,305],"source":" The <xref href=\"System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\"></xref> uses this method to do work that is needed when the <xref href=\"System.Workflow.Runtime.WorkflowRuntime\"></xref> stops."}]}],"pos":[20110,20416],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\n  commentId: T:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\n  id: ManualWorkflowSchedulerService\n  children:\n  - System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.#ctor\n  - System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.#ctor(System.Boolean)\n  - System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.#ctor(System.Collections.Specialized.NameValueCollection)\n  - System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Cancel(System.Guid)\n  - System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.OnStarted\n  - System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.RunWorkflow(System.Guid)\n  - System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Schedule(System.Threading.WaitCallback,System.Guid)\n  - System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Schedule(System.Threading.WaitCallback,System.Guid,System.DateTime,System.Guid)\n  - System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Stop\n  langs:\n  - csharp\n  name: ManualWorkflowSchedulerService\n  nameWithType: ManualWorkflowSchedulerService\n  fullName: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\n  type: Class\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime.Hosting\n  summary: Provides a threading service that allows the host application creating a workflow instance to donate the <xref href=\"System.Threading.Thread\"></xref> on which the workflow instance is run. Using this threading service, host applications can run a workflow instance on a single <xref href=\"System.Threading.Thread\"></xref> in synchronous mode (although if the workflow contains a delay activity, the work is postponed until after the delay activity is executed on a separate thread spawned by <xref href=\"System.Threading.Timer\"></xref>).This mode blocks the execution of the host application until the workflow instance becomes idle. Subsequently, the workflow instance can only be executed using the <xref href=\"System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.RunWorkflow(System.Guid)\"></xref> method of this service.\n  remarks: \"> [!NOTE]\\n>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  \\n  \\n <xref:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService> does not automatically run a workflow instance that is in the queue. The host must call <xref:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.RunWorkflow%2A> to run a specified workflow.\"\n  syntax:\n    content: >-\n      [System.Obsolete(\"The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*\")]\n\n      public class ManualWorkflowSchedulerService : System.Workflow.Runtime.Hosting.WorkflowSchedulerService\n  inheritance:\n  - System.Object\n  - System.Workflow.Runtime.Hosting.WorkflowRuntimeService\n  - System.Workflow.Runtime.Hosting.WorkflowSchedulerService\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped\n  - System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent(System.Exception,System.Guid)\n  - System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime\n  - System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start\n  - System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/ManualWorkflowSchedulerService.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.#ctor\n  commentId: M:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.#ctor\n  id: '#ctor'\n  parent: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\n  langs:\n  - csharp\n  name: ManualWorkflowSchedulerService()\n  nameWithType: ManualWorkflowSchedulerService.ManualWorkflowSchedulerService()\n  fullName: ManualWorkflowSchedulerService.ManualWorkflowSchedulerService()\n  type: Constructor\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime.Hosting\n  summary: Initializes a new instance of the <xref href=\"System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\"></xref> class.\n  syntax:\n    content: public ManualWorkflowSchedulerService ();\n    parameters: []\n  overload: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/ManualWorkflowSchedulerService.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.#ctor(System.Boolean)\n  commentId: M:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.#ctor(System.Boolean)\n  id: '#ctor(System.Boolean)'\n  parent: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\n  langs:\n  - csharp\n  name: ManualWorkflowSchedulerService(Boolean)\n  nameWithType: ManualWorkflowSchedulerService.ManualWorkflowSchedulerService(Boolean)\n  fullName: ManualWorkflowSchedulerService.ManualWorkflowSchedulerService(Boolean)\n  type: Constructor\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime.Hosting\n  summary: Initializes a new instance of the <xref href=\"System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\"></xref> class.\n  syntax:\n    content: public ManualWorkflowSchedulerService (bool useActiveTimers);\n    parameters:\n    - id: useActiveTimers\n      type: System.Boolean\n      description: '`Boolean` that determines how delay activities are handled. If `true`, the scheduler service automatically resumes workflows after delay activities expire (by using an in-memory timer). If `false`, the host must manually resume the workflow after the delay activities expire.'\n  overload: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/ManualWorkflowSchedulerService.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.#ctor(System.Collections.Specialized.NameValueCollection)\n  commentId: M:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.#ctor(System.Collections.Specialized.NameValueCollection)\n  id: '#ctor(System.Collections.Specialized.NameValueCollection)'\n  parent: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\n  langs:\n  - csharp\n  name: ManualWorkflowSchedulerService(NameValueCollection)\n  nameWithType: ManualWorkflowSchedulerService.ManualWorkflowSchedulerService(NameValueCollection)\n  fullName: ManualWorkflowSchedulerService.ManualWorkflowSchedulerService(NameValueCollection)\n  type: Constructor\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime.Hosting\n  summary: Initializes a new instance of the <xref href=\"System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\"></xref> class.\n  syntax:\n    content: public ManualWorkflowSchedulerService (System.Collections.Specialized.NameValueCollection parameters);\n    parameters:\n    - id: parameters\n      type: System.Collections.Specialized.NameValueCollection\n      description: A <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> that contains parameters for <code>useActiveTimers</code>. If `true`, the scheduler service automatically resumes workflows after delay activities expire (by using an in-memory timer). If `false`, the host must manually resume the workflow after the delay activities expire.\n  overload: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/ManualWorkflowSchedulerService.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Cancel(System.Guid)\n  commentId: M:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Cancel(System.Guid)\n  id: Cancel(System.Guid)\n  parent: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\n  langs:\n  - csharp\n  name: Cancel(Guid)\n  nameWithType: ManualWorkflowSchedulerService.Cancel(Guid)\n  fullName: ManualWorkflowSchedulerService.Cancel(Guid)\n  type: Method\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime.Hosting\n  summary: Cancels the specified existing workflow instance work item.\n  syntax:\n    content: protected override void Cancel (Guid timerId);\n    parameters:\n    - id: timerId\n      type: System.Guid\n      description: The <xref href=\"System.Guid\"></xref> associated with the existing scheduled work item to cancel.\n  overload: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Cancel*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/ManualWorkflowSchedulerService.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.OnStarted\n  commentId: M:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.OnStarted\n  id: OnStarted\n  parent: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\n  langs:\n  - csharp\n  name: OnStarted()\n  nameWithType: ManualWorkflowSchedulerService.OnStarted()\n  fullName: ManualWorkflowSchedulerService.OnStarted()\n  type: Method\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime.Hosting\n  summary: Overloaded from <xref href=\"System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted\"></xref>. This method is called whenever <xref href=\"System.Workflow.Runtime.WorkflowRuntime.StartRuntime\"></xref> is called and is used by the <xref href=\"System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\"></xref> to do work that is needed when the <xref href=\"System.Workflow.Runtime.WorkflowRuntime\"></xref> starts.\n  syntax:\n    content: protected override void OnStarted ();\n    parameters: []\n  overload: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.OnStarted*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/ManualWorkflowSchedulerService.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.RunWorkflow(System.Guid)\n  commentId: M:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.RunWorkflow(System.Guid)\n  id: RunWorkflow(System.Guid)\n  parent: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\n  langs:\n  - csharp\n  name: RunWorkflow(Guid)\n  nameWithType: ManualWorkflowSchedulerService.RunWorkflow(Guid)\n  fullName: ManualWorkflowSchedulerService.RunWorkflow(Guid)\n  type: Method\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime.Hosting\n  summary: Runs the specified workflow instance.\n  remarks: This is a synchronous call that uses the current thread to run the workflow. It does not return until the workflow idles, suspends, completes, terminates, or aborts.\n  syntax:\n    content: public bool RunWorkflow (Guid workflowInstanceId);\n    parameters:\n    - id: workflowInstanceId\n      type: System.Guid\n      description: The <xref href=\"System.Guid\"></xref> for the workflow instance to run.\n    return:\n      type: System.Boolean\n      description: '`true` if the workflow starts running; otherwise, `false`.'\n  overload: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.RunWorkflow*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>workflowInstanceId</code> is an empty GUID.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/ManualWorkflowSchedulerService.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Schedule(System.Threading.WaitCallback,System.Guid)\n  commentId: M:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Schedule(System.Threading.WaitCallback,System.Guid)\n  id: Schedule(System.Threading.WaitCallback,System.Guid)\n  parent: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\n  langs:\n  - csharp\n  name: Schedule(WaitCallback, Guid)\n  nameWithType: ManualWorkflowSchedulerService.Schedule(WaitCallback, Guid)\n  fullName: ManualWorkflowSchedulerService.Schedule(WaitCallback, Guid)\n  type: Method\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime.Hosting\n  summary: Adds a workflow instance to the pending work items queue using the specified workflow instance using the specified multicast delegate.\n  syntax:\n    content: protected override void Schedule (System.Threading.WaitCallback callback, Guid workflowInstanceId);\n    parameters:\n    - id: callback\n      type: System.Threading.WaitCallback\n      description: A <xref href=\"System.Threading.WaitCallback\"></xref> multicast delegate that represents the method to run.\n    - id: workflowInstanceId\n      type: System.Guid\n      description: A <xref href=\"System.Guid\"></xref> that represents the workflow instance.\n  overload: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Schedule*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>callback</code> contains a null reference (`Nothing` in Visual Basic).\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/ManualWorkflowSchedulerService.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Schedule(System.Threading.WaitCallback,System.Guid,System.DateTime,System.Guid)\n  commentId: M:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Schedule(System.Threading.WaitCallback,System.Guid,System.DateTime,System.Guid)\n  id: Schedule(System.Threading.WaitCallback,System.Guid,System.DateTime,System.Guid)\n  parent: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\n  langs:\n  - csharp\n  name: Schedule(WaitCallback, Guid, DateTime, Guid)\n  nameWithType: ManualWorkflowSchedulerService.Schedule(WaitCallback, Guid, DateTime, Guid)\n  fullName: ManualWorkflowSchedulerService.Schedule(WaitCallback, Guid, DateTime, Guid)\n  type: Method\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime.Hosting\n  summary: Adds the specified workflow instance to the pending work item queue using the specified multicast delegate, <xref href=\"System.DateTime\"></xref> and GUIDs.\n  syntax:\n    content: protected override void Schedule (System.Threading.WaitCallback callback, Guid workflowInstanceId, DateTime whenUtc, Guid timerId);\n    parameters:\n    - id: callback\n      type: System.Threading.WaitCallback\n      description: A <xref href=\"System.Threading.WaitCallback\"></xref> multicast delegate that represents the method to run.\n    - id: workflowInstanceId\n      type: System.Guid\n      description: A <xref href=\"System.Guid\"></xref> that represents the workflow instance.\n    - id: whenUtc\n      type: System.DateTime\n      description: The <xref href=\"System.DateTime\"></xref> that indicates the time to begin running the thread.\n    - id: timerId\n      type: System.Guid\n      description: A <xref href=\"System.Guid\"></xref> that represents the scheduled thread.\n  overload: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Schedule*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>callback</code> contains a null reference (`Nothing` in Visual Basic).\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>workflowInstanceId</code> or <code>timerId</code> is an empty GUID.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/ManualWorkflowSchedulerService.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Stop\n  commentId: M:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Stop\n  id: Stop\n  parent: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\n  langs:\n  - csharp\n  name: Stop()\n  nameWithType: ManualWorkflowSchedulerService.Stop()\n  fullName: ManualWorkflowSchedulerService.Stop()\n  type: Method\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime.Hosting\n  summary: Overloaded from <xref href=\"System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop\"></xref>. The <xref href=\"System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\"></xref> uses this method to do work that is needed when the <xref href=\"System.Workflow.Runtime.WorkflowRuntime\"></xref> stops.\n  syntax:\n    content: protected override void Stop ();\n    parameters: []\n  overload: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Stop*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/ManualWorkflowSchedulerService.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\nreferences:\n- uid: System.Workflow.Runtime.Hosting.WorkflowSchedulerService\n  parent: System.Workflow.Runtime.Hosting\n  isExternal: false\n  name: WorkflowSchedulerService\n  nameWithType: WorkflowSchedulerService\n  fullName: System.Workflow.Runtime.Hosting.WorkflowSchedulerService\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.#ctor\n  parent: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\n  isExternal: false\n  name: ManualWorkflowSchedulerService()\n  nameWithType: ManualWorkflowSchedulerService.ManualWorkflowSchedulerService()\n  fullName: ManualWorkflowSchedulerService.ManualWorkflowSchedulerService()\n- uid: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.#ctor(System.Boolean)\n  parent: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\n  isExternal: false\n  name: ManualWorkflowSchedulerService(Boolean)\n  nameWithType: ManualWorkflowSchedulerService.ManualWorkflowSchedulerService(Boolean)\n  fullName: ManualWorkflowSchedulerService.ManualWorkflowSchedulerService(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.#ctor(System.Collections.Specialized.NameValueCollection)\n  parent: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\n  isExternal: false\n  name: ManualWorkflowSchedulerService(NameValueCollection)\n  nameWithType: ManualWorkflowSchedulerService.ManualWorkflowSchedulerService(NameValueCollection)\n  fullName: ManualWorkflowSchedulerService.ManualWorkflowSchedulerService(NameValueCollection)\n- uid: System.Collections.Specialized.NameValueCollection\n  parent: System.Collections.Specialized\n  isExternal: false\n  name: NameValueCollection\n  nameWithType: NameValueCollection\n  fullName: System.Collections.Specialized.NameValueCollection\n- uid: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Cancel(System.Guid)\n  parent: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\n  isExternal: false\n  name: Cancel(Guid)\n  nameWithType: ManualWorkflowSchedulerService.Cancel(Guid)\n  fullName: ManualWorkflowSchedulerService.Cancel(Guid)\n- uid: System.Guid\n  parent: System\n  isExternal: false\n  name: Guid\n  nameWithType: Guid\n  fullName: System.Guid\n- uid: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.OnStarted\n  parent: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\n  isExternal: false\n  name: OnStarted()\n  nameWithType: ManualWorkflowSchedulerService.OnStarted()\n  fullName: ManualWorkflowSchedulerService.OnStarted()\n- uid: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.RunWorkflow(System.Guid)\n  parent: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\n  isExternal: false\n  name: RunWorkflow(Guid)\n  nameWithType: ManualWorkflowSchedulerService.RunWorkflow(Guid)\n  fullName: ManualWorkflowSchedulerService.RunWorkflow(Guid)\n- uid: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Schedule(System.Threading.WaitCallback,System.Guid)\n  parent: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\n  isExternal: false\n  name: Schedule(WaitCallback, Guid)\n  nameWithType: ManualWorkflowSchedulerService.Schedule(WaitCallback, Guid)\n  fullName: ManualWorkflowSchedulerService.Schedule(WaitCallback, Guid)\n- uid: System.Threading.WaitCallback\n  parent: System.Threading\n  isExternal: false\n  name: WaitCallback\n  nameWithType: WaitCallback\n  fullName: System.Threading.WaitCallback\n- uid: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Schedule(System.Threading.WaitCallback,System.Guid,System.DateTime,System.Guid)\n  parent: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\n  isExternal: false\n  name: Schedule(WaitCallback, Guid, DateTime, Guid)\n  nameWithType: ManualWorkflowSchedulerService.Schedule(WaitCallback, Guid, DateTime, Guid)\n  fullName: ManualWorkflowSchedulerService.Schedule(WaitCallback, Guid, DateTime, Guid)\n- uid: System.DateTime\n  parent: System\n  isExternal: false\n  name: DateTime\n  nameWithType: DateTime\n  fullName: System.DateTime\n- uid: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Stop\n  parent: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\n  isExternal: false\n  name: Stop()\n  nameWithType: ManualWorkflowSchedulerService.Stop()\n  fullName: ManualWorkflowSchedulerService.Stop()\n- uid: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.#ctor*\n  parent: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\n  isExternal: false\n  name: ManualWorkflowSchedulerService\n  nameWithType: ManualWorkflowSchedulerService.ManualWorkflowSchedulerService\n  fullName: ManualWorkflowSchedulerService.ManualWorkflowSchedulerService\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/ManualWorkflowSchedulerService.xml\n- uid: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Cancel*\n  parent: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\n  isExternal: false\n  name: Cancel\n  nameWithType: ManualWorkflowSchedulerService.Cancel\n  fullName: ManualWorkflowSchedulerService.Cancel\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/ManualWorkflowSchedulerService.xml\n- uid: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.OnStarted*\n  parent: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\n  isExternal: false\n  name: OnStarted\n  nameWithType: ManualWorkflowSchedulerService.OnStarted\n  fullName: ManualWorkflowSchedulerService.OnStarted\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/ManualWorkflowSchedulerService.xml\n- uid: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.RunWorkflow*\n  parent: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\n  isExternal: false\n  name: RunWorkflow\n  nameWithType: ManualWorkflowSchedulerService.RunWorkflow\n  fullName: ManualWorkflowSchedulerService.RunWorkflow\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/ManualWorkflowSchedulerService.xml\n- uid: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Schedule*\n  parent: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\n  isExternal: false\n  name: Schedule\n  nameWithType: ManualWorkflowSchedulerService.Schedule\n  fullName: ManualWorkflowSchedulerService.Schedule\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/ManualWorkflowSchedulerService.xml\n- uid: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Stop*\n  parent: System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService\n  isExternal: false\n  name: Stop\n  nameWithType: ManualWorkflowSchedulerService.Stop\n  fullName: ManualWorkflowSchedulerService.Stop\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime.Hosting/ManualWorkflowSchedulerService.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped\n  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService\n  isExternal: false\n  name: OnStopped()\n  nameWithType: WorkflowRuntimeService.OnStopped()\n  fullName: WorkflowRuntimeService.OnStopped()\n- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent(System.Exception,System.Guid)\n  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService\n  isExternal: false\n  name: RaiseServicesExceptionNotHandledEvent(Exception, Guid)\n  nameWithType: WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent(Exception, Guid)\n  fullName: WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent(Exception, Guid)\n- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime\n  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService\n  isExternal: false\n  name: Runtime\n  nameWithType: WorkflowRuntimeService.Runtime\n  fullName: WorkflowRuntimeService.Runtime\n- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start\n  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService\n  isExternal: false\n  name: Start()\n  nameWithType: WorkflowRuntimeService.Start()\n  fullName: WorkflowRuntimeService.Start()\n- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State\n  parent: System.Workflow.Runtime.Hosting.WorkflowRuntimeService\n  isExternal: false\n  name: State\n  nameWithType: WorkflowRuntimeService.State\n  fullName: WorkflowRuntimeService.State\n"}