{"nodes":[{"content":"Represents the method that handles the <xref href=\"System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart\"></xref> event of a <xref href=\"System.Web.UI.WebControls.WebParts.WebPartManager\"></xref> object.","nodes":[{"pos":[0,216],"content":"Represents the method that handles the <ph id=\"ph1\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart\"&gt;&lt;/xref&gt;</ph> event of a <ph id=\"ph2\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.WebPartManager\"&gt;&lt;/xref&gt;</ph> object.","source":"Represents the method that handles the <xref href=\"System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart\"></xref> event of a <xref href=\"System.Web.UI.WebControls.WebParts.WebPartManager\"></xref> object."}],"pos":[528,745],"yaml":true},{"content":"The <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart> event is raised before a Web Parts control is added to a Web Parts zone. You can specify which Web Parts controls can be added to a zone by customizing how the event is handled. The method specified in the <xref:System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventHandler> delegate is called when an <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart> event is raised.  \n  \n Page developers can provide custom handlers for Web Parts events by adding an `OnAuthorizeWebPart` attribute to the `<asp:webpartmanager>` element in a page, and assigning a custom method name to the attribute. A custom handler can also be assigned programmatically. For more information on programmatically assigning an event handler, see [NIB: How to: Connect Event Handler Methods to Events](http://msdn.microsoft.com/en-us/348e9600-22e3-49a2-8864-11c5bb3e98fc).","nodes":[{"pos":[0,476],"content":"The <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart> event is raised before a Web Parts control is added to a Web Parts zone. You can specify which Web Parts controls can be added to a zone by customizing how the event is handled. The method specified in the <xref:System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventHandler> delegate is called when an <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart> event is raised.","nodes":[{"content":"The <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart> event is raised before a Web Parts control is added to a Web Parts zone. You can specify which Web Parts controls can be added to a zone by customizing how the event is handled. The method specified in the <xref:System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventHandler> delegate is called when an <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart> event is raised.","pos":[0,476],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart&gt;</ph> event is raised before a Web Parts control is added to a Web Parts zone.","pos":[0,150],"source":"The <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart> event is raised before a Web Parts control is added to a Web Parts zone."},{"content":"You can specify which Web Parts controls can be added to a zone by customizing how the event is handled.","pos":[151,255]},{"content":"The method specified in the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventHandler&gt;</ph> delegate is called when an <ph id=\"ph2\">&lt;xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart&gt;</ph> event is raised.","pos":[256,476],"source":" The method specified in the <xref:System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventHandler> delegate is called when an <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart> event is raised."}]}]},{"pos":[483,948],"content":"Page developers can provide custom handlers for Web Parts events by adding an `OnAuthorizeWebPart` attribute to the `<asp:webpartmanager>` element in a page, and assigning a custom method name to the attribute. A custom handler can also be assigned programmatically. For more information on programmatically assigning an event handler, see [NIB: How to: Connect Event Handler Methods to Events](http://msdn.microsoft.com/en-us/348e9600-22e3-49a2-8864-11c5bb3e98fc).","nodes":[{"content":"Page developers can provide custom handlers for Web Parts events by adding an <ph id=\"ph1\">`OnAuthorizeWebPart`</ph> attribute to the <ph id=\"ph2\">`&lt;asp:webpartmanager&gt;`</ph> element in a page, and assigning a custom method name to the attribute.","pos":[0,210],"source":"Page developers can provide custom handlers for Web Parts events by adding an `OnAuthorizeWebPart` attribute to the `<asp:webpartmanager>` element in a page, and assigning a custom method name to the attribute."},{"content":"A custom handler can also be assigned programmatically.","pos":[211,266]},{"content":"For more information on programmatically assigning an event handler, see <bpt id=\"p1\">[</bpt>NIB: How to: Connect Event Handler Methods to Events<ept id=\"p1\">](http://msdn.microsoft.com/en-us/348e9600-22e3-49a2-8864-11c5bb3e98fc)</ept>.","pos":[267,465],"source":" For more information on programmatically assigning an event handler, see [NIB: How to: Connect Event Handler Methods to Events](http://msdn.microsoft.com/en-us/348e9600-22e3-49a2-8864-11c5bb3e98fc)."}]}],"pos":[756,1709],"yaml":true,"extradata":"MT"}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventHandler\n  commentId: T:System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventHandler\n  id: WebPartAuthorizationEventHandler\n  langs:\n  - csharp\n  name: WebPartAuthorizationEventHandler\n  nameWithType: WebPartAuthorizationEventHandler\n  fullName: System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventHandler\n  type: Delegate\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls.WebParts\n  summary: Represents the method that handles the <xref href=\"System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart\"></xref> event of a <xref href=\"System.Web.UI.WebControls.WebParts.WebPartManager\"></xref> object.\n  remarks: \"The <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart> event is raised before a Web Parts control is added to a Web Parts zone. You can specify which Web Parts controls can be added to a zone by customizing how the event is handled. The method specified in the <xref:System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventHandler> delegate is called when an <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart> event is raised.  \\n  \\n Page developers can provide custom handlers for Web Parts events by adding an `OnAuthorizeWebPart` attribute to the `<asp:webpartmanager>` element in a page, and assigning a custom method name to the attribute. A custom handler can also be assigned programmatically. For more information on programmatically assigning an event handler, see [NIB: How to: Connect Event Handler Methods to Events](http://msdn.microsoft.com/en-us/348e9600-22e3-49a2-8864-11c5bb3e98fc).\"\n  syntax:\n    content: public delegate void WebPartAuthorizationEventHandler(object sender, WebPartAuthorizationEventArgs e);\n  inheritance:\n  - System.Object\n  - System.Delegate\n  extensionMethods:\n  - System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.WebControls.WebParts/WebPartAuthorizationEventHandler.xml\n  ms.technology:\n  - dotnet-webforms\n  author: tdykstra\n  ms.author: tdykstra\n  manager: wpickett\nreferences:\n- uid: System.Delegate\n  parent: System\n  isExternal: false\n  name: Delegate\n  nameWithType: Delegate\n  fullName: System.Delegate\n- uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n  parent: System.Reflection.RuntimeReflectionExtensions\n  isExternal: false\n  name: GetMethodInfo(Delegate)\n  nameWithType: RuntimeReflectionExtensions.GetMethodInfo(Delegate)\n  fullName: RuntimeReflectionExtensions.GetMethodInfo(Delegate)\n"}