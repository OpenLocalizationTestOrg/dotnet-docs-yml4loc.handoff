{"nodes":[{"content":"Contains constants that specify infinite time-out intervals. This class cannot be inherited.","nodes":[{"pos":[0,92],"content":"Contains constants that specify infinite time-out intervals. This class cannot be inherited.","nodes":[{"content":"Contains constants that specify infinite time-out intervals. This class cannot be inherited.","pos":[0,92],"nodes":[{"content":"Contains constants that specify infinite time-out intervals.","pos":[0,60]},{"content":"This class cannot be inherited.","pos":[61,92]}]}]}],"pos":[432,525],"yaml":true},{"content":"The members of this class are used to specify infinite time-out intervals in threading operations. <xref:System.Threading.Timeout.Infinite> is used by methods that accept an integer `millisecondsTimeout` parameter, such as <xref:System.Threading.Thread.Sleep%28System.Int32%29?displayProperty=fullName>, <xref:System.Threading.Thread.Join%28System.Int32%29?displayProperty=fullName>, and <xref:System.Threading.ReaderWriterLock.AcquireReaderLock%28System.Int32%29?displayProperty=fullName>. <xref:System.Threading.Timeout.InfiniteTimeSpan> is used by methods that accept a `timeout` parameter of type <xref:System.TimeSpan>, such as <xref:System.Threading.Thread.Sleep%28System.TimeSpan%29?displayProperty=fullName>, <xref:System.Threading.Thread.Join%28System.TimeSpan%29?displayProperty=fullName>, and <xref:System.Threading.ReaderWriterLock.AcquireReaderLock%28System.TimeSpan%29?displayProperty=fullName>.","nodes":[{"pos":[0,909],"content":"The members of this class are used to specify infinite time-out intervals in threading operations. <xref:System.Threading.Timeout.Infinite> is used by methods that accept an integer `millisecondsTimeout` parameter, such as <xref:System.Threading.Thread.Sleep%28System.Int32%29?displayProperty=fullName>, <xref:System.Threading.Thread.Join%28System.Int32%29?displayProperty=fullName>, and <xref:System.Threading.ReaderWriterLock.AcquireReaderLock%28System.Int32%29?displayProperty=fullName>. <xref:System.Threading.Timeout.InfiniteTimeSpan> is used by methods that accept a `timeout` parameter of type <xref:System.TimeSpan>, such as <xref:System.Threading.Thread.Sleep%28System.TimeSpan%29?displayProperty=fullName>, <xref:System.Threading.Thread.Join%28System.TimeSpan%29?displayProperty=fullName>, and <xref:System.Threading.ReaderWriterLock.AcquireReaderLock%28System.TimeSpan%29?displayProperty=fullName>.","nodes":[{"content":"The members of this class are used to specify infinite time-out intervals in threading operations.","pos":[0,98]},{"content":"<ph id=\"ph1\">&lt;xref:System.Threading.Timeout.Infinite&gt;</ph> is used by methods that accept an integer <ph id=\"ph2\">`millisecondsTimeout`</ph> parameter, such as <ph id=\"ph3\">&lt;xref:System.Threading.Thread.Sleep%28System.Int32%29?displayProperty=fullName&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Threading.Thread.Join%28System.Int32%29?displayProperty=fullName&gt;</ph>, and <ph id=\"ph5\">&lt;xref:System.Threading.ReaderWriterLock.AcquireReaderLock%28System.Int32%29?displayProperty=fullName&gt;</ph>.","pos":[99,490],"source":" <xref:System.Threading.Timeout.Infinite> is used by methods that accept an integer `millisecondsTimeout` parameter, such as <xref:System.Threading.Thread.Sleep%28System.Int32%29?displayProperty=fullName>, <xref:System.Threading.Thread.Join%28System.Int32%29?displayProperty=fullName>, and <xref:System.Threading.ReaderWriterLock.AcquireReaderLock%28System.Int32%29?displayProperty=fullName>."},{"content":"<ph id=\"ph1\">&lt;xref:System.Threading.Timeout.InfiniteTimeSpan&gt;</ph> is used by methods that accept a <ph id=\"ph2\">`timeout`</ph> parameter of type <ph id=\"ph3\">&lt;xref:System.TimeSpan&gt;</ph>, such as <ph id=\"ph4\">&lt;xref:System.Threading.Thread.Sleep%28System.TimeSpan%29?displayProperty=fullName&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.Threading.Thread.Join%28System.TimeSpan%29?displayProperty=fullName&gt;</ph>, and <ph id=\"ph6\">&lt;xref:System.Threading.ReaderWriterLock.AcquireReaderLock%28System.TimeSpan%29?displayProperty=fullName&gt;</ph>.","pos":[491,909],"source":" <xref:System.Threading.Timeout.InfiniteTimeSpan> is used by methods that accept a `timeout` parameter of type <xref:System.TimeSpan>, such as <xref:System.Threading.Thread.Sleep%28System.TimeSpan%29?displayProperty=fullName>, <xref:System.Threading.Thread.Join%28System.TimeSpan%29?displayProperty=fullName>, and <xref:System.Threading.ReaderWriterLock.AcquireReaderLock%28System.TimeSpan%29?displayProperty=fullName>."}]}],"pos":[536,1446],"yaml":true,"extradata":"MT"},{"content":"A constant used to specify an infinite waiting period, for threading methods that accept an <xref href=\"System.Int32\"></xref> parameter.","nodes":[{"pos":[0,136],"content":"A constant used to specify an infinite waiting period, for threading methods that accept an <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> parameter.","source":"A constant used to specify an infinite waiting period, for threading methods that accept an <xref href=\"System.Int32\"></xref> parameter."}],"pos":[3988,4125],"yaml":true},{"content":"For threading methods that accept a `millisecondsTimeout` parameter, such as <xref:System.Threading.Thread.Sleep%28System.Int32%29?displayProperty=fullName> and <xref:System.Threading.Thread.Join%28System.Int32%29?displayProperty=fullName>, this value is used to suspend the thread indefinitely. However, in most cases, we recommend that you use other <xref:System.Threading?displayProperty=fullName> classes such as <xref:System.Threading.Mutex>, <xref:System.Threading.Monitor>, <xref:System.Threading.EventWaitHandle>, or <xref:System.Threading.Semaphore> instead to sychronize threads or manage resources.  \n  \n The value of this field is -1 (0xFFFFFFFF).","nodes":[{"pos":[0,609],"content":"For threading methods that accept a `millisecondsTimeout` parameter, such as <xref:System.Threading.Thread.Sleep%28System.Int32%29?displayProperty=fullName> and <xref:System.Threading.Thread.Join%28System.Int32%29?displayProperty=fullName>, this value is used to suspend the thread indefinitely. However, in most cases, we recommend that you use other <xref:System.Threading?displayProperty=fullName> classes such as <xref:System.Threading.Mutex>, <xref:System.Threading.Monitor>, <xref:System.Threading.EventWaitHandle>, or <xref:System.Threading.Semaphore> instead to sychronize threads or manage resources.","nodes":[{"content":"For threading methods that accept a <ph id=\"ph1\">`millisecondsTimeout`</ph> parameter, such as <ph id=\"ph2\">&lt;xref:System.Threading.Thread.Sleep%28System.Int32%29?displayProperty=fullName&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Threading.Thread.Join%28System.Int32%29?displayProperty=fullName&gt;</ph>, this value is used to suspend the thread indefinitely.","pos":[0,295],"source":"For threading methods that accept a `millisecondsTimeout` parameter, such as <xref:System.Threading.Thread.Sleep%28System.Int32%29?displayProperty=fullName> and <xref:System.Threading.Thread.Join%28System.Int32%29?displayProperty=fullName>, this value is used to suspend the thread indefinitely."},{"content":"However, in most cases, we recommend that you use other <ph id=\"ph1\">&lt;xref:System.Threading?displayProperty=fullName&gt;</ph> classes such as <ph id=\"ph2\">&lt;xref:System.Threading.Mutex&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Threading.Monitor&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>, or <ph id=\"ph5\">&lt;xref:System.Threading.Semaphore&gt;</ph> instead to sychronize threads or manage resources.","pos":[296,609],"source":" However, in most cases, we recommend that you use other <xref:System.Threading?displayProperty=fullName> classes such as <xref:System.Threading.Mutex>, <xref:System.Threading.Monitor>, <xref:System.Threading.EventWaitHandle>, or <xref:System.Threading.Semaphore> instead to sychronize threads or manage resources."}]},{"pos":[616,659],"content":"The value of this field is -1 (0xFFFFFFFF).","nodes":[{"content":"The value of this field is -1 (0xFFFFFFFF).","pos":[0,43]}]}],"pos":[4136,4800],"yaml":true,"extradata":"MT"},{"content":"A constant used to specify an infinite waiting period, for methods that accept a <xref href=\"System.TimeSpan\"></xref> parameter.","nodes":[{"pos":[0,128],"content":"A constant used to specify an infinite waiting period, for methods that accept a <ph id=\"ph1\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> parameter.","source":"A constant used to specify an infinite waiting period, for methods that accept a <xref href=\"System.TimeSpan\"></xref> parameter."}],"pos":[6400,6529],"yaml":true},{"content":"For threading methods that accept a `timeout` parameter of type <xref:System.TimeSpan>, such as <xref:System.Threading.Thread.Sleep%28System.TimeSpan%29?displayProperty=fullName> and <xref:System.Threading.Thread.Join%28System.TimeSpan%29?displayProperty=fullName>, this value is used to suspend the thread indefinitely. However, in most cases, we recommend that you use other <xref:System.Threading?displayProperty=fullName> classes such as <xref:System.Threading.Mutex>, <xref:System.Threading.Monitor>, <xref:System.Threading.EventWaitHandle>, or <xref:System.Threading.Semaphore> instead to sychronize threads or manage resources.  \n  \n The value of this field is -00:00:00.0010000, or -1 millisecond.","nodes":[{"pos":[0,634],"content":"For threading methods that accept a `timeout` parameter of type <xref:System.TimeSpan>, such as <xref:System.Threading.Thread.Sleep%28System.TimeSpan%29?displayProperty=fullName> and <xref:System.Threading.Thread.Join%28System.TimeSpan%29?displayProperty=fullName>, this value is used to suspend the thread indefinitely. However, in most cases, we recommend that you use other <xref:System.Threading?displayProperty=fullName> classes such as <xref:System.Threading.Mutex>, <xref:System.Threading.Monitor>, <xref:System.Threading.EventWaitHandle>, or <xref:System.Threading.Semaphore> instead to sychronize threads or manage resources.","nodes":[{"content":"For threading methods that accept a <ph id=\"ph1\">`timeout`</ph> parameter of type <ph id=\"ph2\">&lt;xref:System.TimeSpan&gt;</ph>, such as <ph id=\"ph3\">&lt;xref:System.Threading.Thread.Sleep%28System.TimeSpan%29?displayProperty=fullName&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.Threading.Thread.Join%28System.TimeSpan%29?displayProperty=fullName&gt;</ph>, this value is used to suspend the thread indefinitely.","pos":[0,320],"source":"For threading methods that accept a `timeout` parameter of type <xref:System.TimeSpan>, such as <xref:System.Threading.Thread.Sleep%28System.TimeSpan%29?displayProperty=fullName> and <xref:System.Threading.Thread.Join%28System.TimeSpan%29?displayProperty=fullName>, this value is used to suspend the thread indefinitely."},{"content":"However, in most cases, we recommend that you use other <ph id=\"ph1\">&lt;xref:System.Threading?displayProperty=fullName&gt;</ph> classes such as <ph id=\"ph2\">&lt;xref:System.Threading.Mutex&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Threading.Monitor&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>, or <ph id=\"ph5\">&lt;xref:System.Threading.Semaphore&gt;</ph> instead to sychronize threads or manage resources.","pos":[321,634],"source":" However, in most cases, we recommend that you use other <xref:System.Threading?displayProperty=fullName> classes such as <xref:System.Threading.Mutex>, <xref:System.Threading.Monitor>, <xref:System.Threading.EventWaitHandle>, or <xref:System.Threading.Semaphore> instead to sychronize threads or manage resources."}]},{"pos":[641,705],"content":"The value of this field is -00:00:00.0010000, or -1 millisecond.","nodes":[{"content":"The value of this field is -00:00:00.0010000, or -1 millisecond.","pos":[0,64]}]}],"pos":[6540,7250],"yaml":true,"extradata":"MT"}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Threading.Timeout\n  commentId: T:System.Threading.Timeout\n  id: Timeout\n  children:\n  - System.Threading.Timeout.Infinite\n  - System.Threading.Timeout.InfiniteTimeSpan\n  langs:\n  - csharp\n  name: Timeout\n  nameWithType: Timeout\n  fullName: System.Threading.Timeout\n  type: Class\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Contains constants that specify infinite time-out intervals. This class cannot be inherited.\n  remarks: The members of this class are used to specify infinite time-out intervals in threading operations. <xref:System.Threading.Timeout.Infinite> is used by methods that accept an integer `millisecondsTimeout` parameter, such as <xref:System.Threading.Thread.Sleep%28System.Int32%29?displayProperty=fullName>, <xref:System.Threading.Thread.Join%28System.Int32%29?displayProperty=fullName>, and <xref:System.Threading.ReaderWriterLock.AcquireReaderLock%28System.Int32%29?displayProperty=fullName>. <xref:System.Threading.Timeout.InfiniteTimeSpan> is used by methods that accept a `timeout` parameter of type <xref:System.TimeSpan>, such as <xref:System.Threading.Thread.Sleep%28System.TimeSpan%29?displayProperty=fullName>, <xref:System.Threading.Thread.Join%28System.TimeSpan%29?displayProperty=fullName>, and <xref:System.Threading.ReaderWriterLock.AcquireReaderLock%28System.TimeSpan%29?displayProperty=fullName>.\n  example:\n  - \"The following example shows a thread going to sleep for an infinite time and subsequently being woken up.  \\n  \\n [!code-cpp[System.Threading.Thread.Interrupt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Interrupt/CPP/source.cpp#1)]\\n [!code-csharp[System.Threading.Thread.Interrupt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Interrupt/CS/source.cs#1)]\\n [!code-vb[System.Threading.Thread.Interrupt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Interrupt/VB/source.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public static class Timeout\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Timeout.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Timeout.Infinite\n  commentId: F:System.Threading.Timeout.Infinite\n  id: Infinite\n  parent: System.Threading.Timeout\n  langs:\n  - csharp\n  name: Infinite\n  nameWithType: Timeout.Infinite\n  fullName: Timeout.Infinite\n  type: Field\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: A constant used to specify an infinite waiting period, for threading methods that accept an <xref href=\"System.Int32\"></xref> parameter.\n  remarks: \"For threading methods that accept a `millisecondsTimeout` parameter, such as <xref:System.Threading.Thread.Sleep%28System.Int32%29?displayProperty=fullName> and <xref:System.Threading.Thread.Join%28System.Int32%29?displayProperty=fullName>, this value is used to suspend the thread indefinitely. However, in most cases, we recommend that you use other <xref:System.Threading?displayProperty=fullName> classes such as <xref:System.Threading.Mutex>, <xref:System.Threading.Monitor>, <xref:System.Threading.EventWaitHandle>, or <xref:System.Threading.Semaphore> instead to sychronize threads or manage resources.  \\n  \\n The value of this field is -1 (0xFFFFFFFF).\"\n  syntax:\n    content: public const int Infinite = -1;\n    return:\n      type: System.Int32\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Timeout.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Timeout.InfiniteTimeSpan\n  commentId: F:System.Threading.Timeout.InfiniteTimeSpan\n  id: InfiniteTimeSpan\n  parent: System.Threading.Timeout\n  langs:\n  - csharp\n  name: InfiniteTimeSpan\n  nameWithType: Timeout.InfiniteTimeSpan\n  fullName: Timeout.InfiniteTimeSpan\n  type: Field\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: A constant used to specify an infinite waiting period, for methods that accept a <xref href=\"System.TimeSpan\"></xref> parameter.\n  remarks: \"For threading methods that accept a `timeout` parameter of type <xref:System.TimeSpan>, such as <xref:System.Threading.Thread.Sleep%28System.TimeSpan%29?displayProperty=fullName> and <xref:System.Threading.Thread.Join%28System.TimeSpan%29?displayProperty=fullName>, this value is used to suspend the thread indefinitely. However, in most cases, we recommend that you use other <xref:System.Threading?displayProperty=fullName> classes such as <xref:System.Threading.Mutex>, <xref:System.Threading.Monitor>, <xref:System.Threading.EventWaitHandle>, or <xref:System.Threading.Semaphore> instead to sychronize threads or manage resources.  \\n  \\n The value of this field is -00:00:00.0010000, or -1 millisecond.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public static readonly TimeSpan InfiniteTimeSpan;\n    return:\n      type: System.TimeSpan\n      description: ''\n  exceptions: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Timeout.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Threading.Timeout.Infinite\n  parent: System.Threading.Timeout\n  isExternal: false\n  name: Infinite\n  nameWithType: Timeout.Infinite\n  fullName: Timeout.Infinite\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Threading.Timeout.InfiniteTimeSpan\n  parent: System.Threading.Timeout\n  isExternal: false\n  name: InfiniteTimeSpan\n  nameWithType: Timeout.InfiniteTimeSpan\n  fullName: Timeout.InfiniteTimeSpan\n- uid: System.TimeSpan\n  parent: System\n  isExternal: false\n  name: TimeSpan\n  nameWithType: TimeSpan\n  fullName: System.TimeSpan\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}