{"nodes":[{"content":"Tracks the lifetime of an asynchronous operation.","nodes":[{"pos":[0,49],"content":"Tracks the lifetime of an asynchronous operation.","nodes":[{"content":"Tracks the lifetime of an asynchronous operation.","pos":[0,49]}]}],"pos":[876,926],"yaml":true},{"content":"When you implement a class according to the [Event-based Asynchronous Pattern Overview](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), you may need to track the lifetime of each asynchronous operation invoked on an instance of your class. The <xref:System.ComponentModel.AsyncOperation> class provides ways to track and report the progress of an asynchronous task.  \n  \n The following list identifies ways to use an <xref:System.ComponentModel.AsyncOperation> object:  \n  \n-   To report progress and interim results to the client, call <xref:System.ComponentModel.AsyncOperation.Post%2A> from your asynchronous worker code.  \n  \n-   To indicate that an asynchronous task has completed, or to cancel a pending asynchronous task, call <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>.  \n  \n Your class should get an <xref:System.ComponentModel.AsyncOperation> object for each asynchronous task by calling <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=fullName> when each task starts. To allow the client to distinguish separate asynchronous tasks, <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=fullName> takes a parameter for a unique client-provided token, which becomes the <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> property. It can then be used by client code to identify the particular asynchronous task that is raising progress or completion events.","nodes":[{"pos":[0,414],"content":"When you implement a class according to the [Event-based Asynchronous Pattern Overview](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), you may need to track the lifetime of each asynchronous operation invoked on an instance of your class. The <xref:System.ComponentModel.AsyncOperation> class provides ways to track and report the progress of an asynchronous task.","nodes":[{"content":"When you implement a class according to the <bpt id=\"p1\">[</bpt>Event-based Asynchronous Pattern Overview<ept id=\"p1\">](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md)</ept>, you may need to track the lifetime of each asynchronous operation invoked on an instance of your class.","pos":[0,288],"source":"When you implement a class according to the [Event-based Asynchronous Pattern Overview](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), you may need to track the lifetime of each asynchronous operation invoked on an instance of your class."},{"content":"The <ph id=\"ph1\">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> class provides ways to track and report the progress of an asynchronous task.","pos":[289,414],"source":" The <xref:System.ComponentModel.AsyncOperation> class provides ways to track and report the progress of an asynchronous task."}]},{"pos":[421,517],"content":"The following list identifies ways to use an <xref:System.ComponentModel.AsyncOperation> object:","nodes":[{"content":"The following list identifies ways to use an <ph id=\"ph1\">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> object:","pos":[0,96],"source":"The following list identifies ways to use an <xref:System.ComponentModel.AsyncOperation> object:"}]},{"pos":[527,673],"content":"To report progress and interim results to the client, call <xref:System.ComponentModel.AsyncOperation.Post%2A> from your asynchronous worker code.","nodes":[{"content":"To report progress and interim results to the client, call <ph id=\"ph1\">&lt;xref:System.ComponentModel.AsyncOperation.Post%2A&gt;</ph> from your asynchronous worker code.","pos":[0,146],"source":"To report progress and interim results to the client, call <xref:System.ComponentModel.AsyncOperation.Post%2A> from your asynchronous worker code."}]},{"pos":[683,853],"content":"To indicate that an asynchronous task has completed, or to cancel a pending asynchronous task, call <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>.","nodes":[{"content":"To indicate that an asynchronous task has completed, or to cancel a pending asynchronous task, call <ph id=\"ph1\">&lt;xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A&gt;</ph>.","pos":[0,170],"source":"To indicate that an asynchronous task has completed, or to cancel a pending asynchronous task, call <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>."}]},{"pos":[860,1524],"content":"Your class should get an <xref:System.ComponentModel.AsyncOperation> object for each asynchronous task by calling <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=fullName> when each task starts. To allow the client to distinguish separate asynchronous tasks, <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=fullName> takes a parameter for a unique client-provided token, which becomes the <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> property. It can then be used by client code to identify the particular asynchronous task that is raising progress or completion events.","nodes":[{"content":"Your class should get an <xref:System.ComponentModel.AsyncOperation> object for each asynchronous task by calling <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=fullName> when each task starts. To allow the client to distinguish separate asynchronous tasks, <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=fullName> takes a parameter for a unique client-provided token, which becomes the <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> property. It can then be used by client code to identify the particular asynchronous task that is raising progress or completion events.","pos":[0,664],"nodes":[{"content":"Your class should get an <ph id=\"ph1\">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> object for each asynchronous task by calling <ph id=\"ph2\">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=fullName&gt;</ph> when each task starts.","pos":[0,231],"source":"Your class should get an <xref:System.ComponentModel.AsyncOperation> object for each asynchronous task by calling <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=fullName> when each task starts."},{"content":"To allow the client to distinguish separate asynchronous tasks, <ph id=\"ph1\">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=fullName&gt;</ph> takes a parameter for a unique client-provided token, which becomes the <ph id=\"ph2\">&lt;xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A&gt;</ph> property.","pos":[232,537],"source":" To allow the client to distinguish separate asynchronous tasks, <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=fullName> takes a parameter for a unique client-provided token, which becomes the <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> property."},{"content":"It can then be used by client code to identify the particular asynchronous task that is raising progress or completion events.","pos":[538,664]}]}]}],"pos":[937,2472],"yaml":true,"extradata":"MT"},{"content":"Finalizes the asynchronous operation.","nodes":[{"pos":[0,37],"content":"Finalizes the asynchronous operation.","nodes":[{"content":"Finalizes the asynchronous operation.","pos":[0,37]}]}],"pos":[5222,5260],"yaml":true},{"content":"Ends the lifetime of an asynchronous operation.","nodes":[{"pos":[0,47],"content":"Ends the lifetime of an asynchronous operation.","nodes":[{"content":"Ends the lifetime of an asynchronous operation.","pos":[0,47]}]}],"pos":[6653,6701],"yaml":true},{"content":"Call the <xref:System.ComponentModel.AsyncOperation.OperationCompleted%2A> method to end the lifetime of an asynchronous operation. After this method is called for a particular task, calls to its corresponding <xref:System.ComponentModel.AsyncOperation> will raise an exception.","nodes":[{"pos":[0,278],"content":"Call the <xref:System.ComponentModel.AsyncOperation.OperationCompleted%2A> method to end the lifetime of an asynchronous operation. After this method is called for a particular task, calls to its corresponding <xref:System.ComponentModel.AsyncOperation> will raise an exception.","nodes":[{"content":"Call the <xref:System.ComponentModel.AsyncOperation.OperationCompleted%2A> method to end the lifetime of an asynchronous operation. After this method is called for a particular task, calls to its corresponding <xref:System.ComponentModel.AsyncOperation> will raise an exception.","pos":[0,278],"nodes":[{"content":"Call the <ph id=\"ph1\">&lt;xref:System.ComponentModel.AsyncOperation.OperationCompleted%2A&gt;</ph> method to end the lifetime of an asynchronous operation.","pos":[0,131],"source":"Call the <xref:System.ComponentModel.AsyncOperation.OperationCompleted%2A> method to end the lifetime of an asynchronous operation."},{"content":"After this method is called for a particular task, calls to its corresponding <ph id=\"ph1\">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> will raise an exception.","pos":[132,278],"source":" After this method is called for a particular task, calls to its corresponding <xref:System.ComponentModel.AsyncOperation> will raise an exception."}]}]}],"pos":[6712,6991],"yaml":true,"extradata":"MT"},{"content":"<xref href=\"System.ComponentModel.AsyncOperation.OperationCompleted\"></xref> has been called previously for this task.","nodes":[{"pos":[0,118],"content":"<ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.AsyncOperation.OperationCompleted\"&gt;&lt;/xref&gt;</ph> has been called previously for this task.","source":"<xref href=\"System.ComponentModel.AsyncOperation.OperationCompleted\"></xref> has been called previously for this task."}],"pos":[7261,7380],"yaml":true},{"content":"Invokes a delegate on the thread or context appropriate for the application model.","nodes":[{"pos":[0,82],"content":"Invokes a delegate on the thread or context appropriate for the application model.","nodes":[{"content":"Invokes a delegate on the thread or context appropriate for the application model.","pos":[0,82]}]}],"pos":[8822,8905],"yaml":true},{"content":"The <xref:System.ComponentModel.AsyncOperation.Post%2A> method invokes the delegate specified by the `arg` parameter without ending the lifetime of the asynchronous operation.  \n  \n You can call the <xref:System.ComponentModel.AsyncOperation.Post%2A> method as often as you like while the lifetime of the asynchronous operation has not been ended by a call to <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>. You can use the method to report progress or interim results back to clients.  \n  \n The `d` parameter wraps the delegate you want called when you want to post an update about the status of the asynchronous task. The <xref:System.ComponentModel.AsyncOperation> object will ensure that your delegate is invoked on the thread or context appropriate for the application model. Your method can optionally raise an event that notifies clients of a status change, progress update, or newly available incremental results.  \n  \n The `arg` parameter should be used to pass state to the delegate wrapped by the `d` parameter. It might be a reference to an <xref:System.ComponentModel.AsyncOperation>, or it might be a <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=fullName> object. It may be desirable to derive your own class from <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=fullName> to provide additional state storage.","nodes":[{"pos":[0,175],"content":"The <ph id=\"ph1\">&lt;xref:System.ComponentModel.AsyncOperation.Post%2A&gt;</ph> method invokes the delegate specified by the <ph id=\"ph2\">`arg`</ph> parameter without ending the lifetime of the asynchronous operation.","source":"The <xref:System.ComponentModel.AsyncOperation.Post%2A> method invokes the delegate specified by the `arg` parameter without ending the lifetime of the asynchronous operation."},{"pos":[182,508],"content":"You can call the <xref:System.ComponentModel.AsyncOperation.Post%2A> method as often as you like while the lifetime of the asynchronous operation has not been ended by a call to <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>. You can use the method to report progress or interim results back to clients.","nodes":[{"content":"You can call the <xref:System.ComponentModel.AsyncOperation.Post%2A> method as often as you like while the lifetime of the asynchronous operation has not been ended by a call to <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>. You can use the method to report progress or interim results back to clients.","pos":[0,326],"nodes":[{"content":"You can call the <ph id=\"ph1\">&lt;xref:System.ComponentModel.AsyncOperation.Post%2A&gt;</ph> method as often as you like while the lifetime of the asynchronous operation has not been ended by a call to <ph id=\"ph2\">&lt;xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A&gt;</ph>.","pos":[0,248],"source":"You can call the <xref:System.ComponentModel.AsyncOperation.Post%2A> method as often as you like while the lifetime of the asynchronous operation has not been ended by a call to <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>."},{"content":"You can use the method to report progress or interim results back to clients.","pos":[249,326]}]}]},{"pos":[515,944],"content":"The `d` parameter wraps the delegate you want called when you want to post an update about the status of the asynchronous task. The <xref:System.ComponentModel.AsyncOperation> object will ensure that your delegate is invoked on the thread or context appropriate for the application model. Your method can optionally raise an event that notifies clients of a status change, progress update, or newly available incremental results.","nodes":[{"content":"The <ph id=\"ph1\">`d`</ph> parameter wraps the delegate you want called when you want to post an update about the status of the asynchronous task.","pos":[0,127],"source":"The `d` parameter wraps the delegate you want called when you want to post an update about the status of the asynchronous task."},{"content":"The <ph id=\"ph1\">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> object will ensure that your delegate is invoked on the thread or context appropriate for the application model.","pos":[128,288],"source":" The <xref:System.ComponentModel.AsyncOperation> object will ensure that your delegate is invoked on the thread or context appropriate for the application model."},{"content":"Your method can optionally raise an event that notifies clients of a status change, progress update, or newly available incremental results.","pos":[289,429]}]},{"pos":[951,1390],"content":"The `arg` parameter should be used to pass state to the delegate wrapped by the `d` parameter. It might be a reference to an <xref:System.ComponentModel.AsyncOperation>, or it might be a <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=fullName> object. It may be desirable to derive your own class from <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=fullName> to provide additional state storage.","nodes":[{"content":"The <ph id=\"ph1\">`arg`</ph> parameter should be used to pass state to the delegate wrapped by the <ph id=\"ph2\">`d`</ph> parameter.","pos":[0,94],"source":"The `arg` parameter should be used to pass state to the delegate wrapped by the `d` parameter."},{"content":"It might be a reference to an <ph id=\"ph1\">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph>, or it might be a <ph id=\"ph2\">&lt;xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=fullName&gt;</ph> object.","pos":[95,273],"source":" It might be a reference to an <xref:System.ComponentModel.AsyncOperation>, or it might be a <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=fullName> object."},{"content":"It may be desirable to derive your own class from <ph id=\"ph1\">&lt;xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=fullName&gt;</ph> to provide additional state storage.","pos":[274,439],"source":" It may be desirable to derive your own class from <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=fullName> to provide additional state storage."}]}],"pos":[8916,10315],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Threading.SendOrPostCallback\"></xref> object that wraps the delegate to be called when the operation ends.","nodes":[{"pos":[0,127],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Threading.SendOrPostCallback\"&gt;&lt;/xref&gt;</ph> object that wraps the delegate to be called when the operation ends.","source":"A <xref href=\"System.Threading.SendOrPostCallback\"></xref> object that wraps the delegate to be called when the operation ends."}],"pos":[11241,11369],"yaml":true},{"content":"An argument for the delegate contained in the <code>d</code> parameter.","nodes":[{"pos":[0,71],"content":"An argument for the delegate contained in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">d</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","source":"An argument for the delegate contained in the <code>d</code> parameter."}],"pos":[11428,11500],"yaml":true},{"content":"The <xref href=\"System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)\"></xref> method has been called previously for this task.","nodes":[{"pos":[0,184],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)\"&gt;&lt;/xref&gt;</ph> method has been called previously for this task.","source":"The <xref href=\"System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)\"></xref> method has been called previously for this task."}],"pos":[11679,11864],"yaml":true},{"content":"<code>d</code> is `null`.","nodes":[{"pos":[0,25],"content":"<ph id=\"ph1\">&lt;code&gt;d&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>d</code> is `null`."}],"pos":[11966,11992],"yaml":true},{"content":"Ends the lifetime of an asynchronous operation.","nodes":[{"pos":[0,47],"content":"Ends the lifetime of an asynchronous operation.","nodes":[{"content":"Ends the lifetime of an asynchronous operation.","pos":[0,47]}]}],"pos":[13542,13590],"yaml":true},{"content":"Call the <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> method to end the lifetime of an asynchronous operation. After this method is called for a particular task, calls to its corresponding <xref:System.ComponentModel.AsyncOperation> object will raise an exception.  \n  \n The `d` parameter wraps the delegate you want your class to call when the task's lifetime ends due to completion, cancellation, or failure of the task. The <xref:System.ComponentModel.AsyncOperation> object will ensure that your delegate is invoked on the thread or context appropriate for the application model. Your delegate can optionally raise an event that notifies clients that the asynchronous task's lifetime has ended.  \n  \n The `arg` parameter is used to pass state information to the completion delegate `d`. You can use an <xref:System.ComponentModel.AsyncOperation> object, or an <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=fullName> object as the parameter value. Alternatively, if you want to provide additional state storage, you can use an instance of a class you derive from the <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=fullName> class.","nodes":[{"pos":[0,289],"content":"Call the <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> method to end the lifetime of an asynchronous operation. After this method is called for a particular task, calls to its corresponding <xref:System.ComponentModel.AsyncOperation> object will raise an exception.","nodes":[{"content":"Call the <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> method to end the lifetime of an asynchronous operation. After this method is called for a particular task, calls to its corresponding <xref:System.ComponentModel.AsyncOperation> object will raise an exception.","pos":[0,289],"nodes":[{"content":"Call the <ph id=\"ph1\">&lt;xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A&gt;</ph> method to end the lifetime of an asynchronous operation.","pos":[0,135],"source":"Call the <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> method to end the lifetime of an asynchronous operation."},{"content":"After this method is called for a particular task, calls to its corresponding <ph id=\"ph1\">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> object will raise an exception.","pos":[136,289],"source":" After this method is called for a particular task, calls to its corresponding <xref:System.ComponentModel.AsyncOperation> object will raise an exception."}]}]},{"pos":[296,723],"content":"The `d` parameter wraps the delegate you want your class to call when the task's lifetime ends due to completion, cancellation, or failure of the task. The <xref:System.ComponentModel.AsyncOperation> object will ensure that your delegate is invoked on the thread or context appropriate for the application model. Your delegate can optionally raise an event that notifies clients that the asynchronous task's lifetime has ended.","nodes":[{"content":"The <ph id=\"ph1\">`d`</ph> parameter wraps the delegate you want your class to call when the task's lifetime ends due to completion, cancellation, or failure of the task.","pos":[0,151],"source":"The `d` parameter wraps the delegate you want your class to call when the task's lifetime ends due to completion, cancellation, or failure of the task."},{"content":"The <ph id=\"ph1\">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> object will ensure that your delegate is invoked on the thread or context appropriate for the application model.","pos":[152,312],"source":" The <xref:System.ComponentModel.AsyncOperation> object will ensure that your delegate is invoked on the thread or context appropriate for the application model."},{"content":"Your delegate can optionally raise an event that notifies clients that the asynchronous task's lifetime has ended.","pos":[313,427]}]},{"pos":[730,1201],"content":"The `arg` parameter is used to pass state information to the completion delegate `d`. You can use an <xref:System.ComponentModel.AsyncOperation> object, or an <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=fullName> object as the parameter value. Alternatively, if you want to provide additional state storage, you can use an instance of a class you derive from the <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=fullName> class.","nodes":[{"content":"The <ph id=\"ph1\">`arg`</ph> parameter is used to pass state information to the completion delegate <ph id=\"ph2\">`d`</ph>.","pos":[0,85],"source":"The `arg` parameter is used to pass state information to the completion delegate `d`."},{"content":"You can use an <ph id=\"ph1\">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> object, or an <ph id=\"ph2\">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=fullName&gt;</ph> object as the parameter value.","pos":[86,267],"source":" You can use an <xref:System.ComponentModel.AsyncOperation> object, or an <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=fullName> object as the parameter value."},{"content":"Alternatively, if you want to provide additional state storage, you can use an instance of a class you derive from the <ph id=\"ph1\">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=fullName&gt;</ph> class.","pos":[268,471],"source":" Alternatively, if you want to provide additional state storage, you can use an instance of a class you derive from the <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=fullName> class."}]}],"pos":[13601,14809],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Threading.SendOrPostCallback\"></xref> object that wraps the delegate to be called when the operation ends.","nodes":[{"pos":[0,127],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Threading.SendOrPostCallback\"&gt;&lt;/xref&gt;</ph> object that wraps the delegate to be called when the operation ends.","source":"A <xref href=\"System.Threading.SendOrPostCallback\"></xref> object that wraps the delegate to be called when the operation ends."}],"pos":[15744,15872],"yaml":true},{"content":"An argument for the delegate contained in the <code>d</code> parameter.","nodes":[{"pos":[0,71],"content":"An argument for the delegate contained in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">d</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","source":"An argument for the delegate contained in the <code>d</code> parameter."}],"pos":[15931,16003],"yaml":true},{"content":"<xref href=\"System.ComponentModel.AsyncOperation.OperationCompleted\"></xref> has been called previously for this task.","nodes":[{"pos":[0,118],"content":"<ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.AsyncOperation.OperationCompleted\"&gt;&lt;/xref&gt;</ph> has been called previously for this task.","source":"<xref href=\"System.ComponentModel.AsyncOperation.OperationCompleted\"></xref> has been called previously for this task."}],"pos":[16200,16319],"yaml":true},{"content":"<code>d</code> is `null`.","nodes":[{"pos":[0,25],"content":"<ph id=\"ph1\">&lt;code&gt;d&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>d</code> is `null`."}],"pos":[16421,16447],"yaml":true},{"content":"Gets the <xref href=\"System.Threading.SynchronizationContext\"></xref> object that was passed to the constructor.","nodes":[{"pos":[0,112],"content":"Gets the <ph id=\"ph1\">&lt;xref href=\"System.Threading.SynchronizationContext\"&gt;&lt;/xref&gt;</ph> object that was passed to the constructor.","source":"Gets the <xref href=\"System.Threading.SynchronizationContext\"></xref> object that was passed to the constructor."}],"pos":[17762,17875],"yaml":true},{"content":"The <xref href=\"System.Threading.SynchronizationContext\"></xref> object that was passed to the constructor.","nodes":[{"pos":[0,107],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.SynchronizationContext\"&gt;&lt;/xref&gt;</ph> object that was passed to the constructor.","source":"The <xref href=\"System.Threading.SynchronizationContext\"></xref> object that was passed to the constructor."}],"pos":[18060,18168],"yaml":true},{"content":"Gets or sets an object used to uniquely identify an asynchronous operation.","nodes":[{"pos":[0,75],"content":"Gets or sets an object used to uniquely identify an asynchronous operation.","nodes":[{"content":"Gets or sets an object used to uniquely identify an asynchronous operation.","pos":[0,75]}]}],"pos":[19543,19619],"yaml":true},{"content":"If your class supports multiple asynchronous methods or multiple invocations of a single asynchronous method, clients will need a way to determine which asynchronous task is raising events. Your `MethodNameAsync` method should take a parameter of type <xref:System.Object> that will act as a task ID. You will use this task ID when you call the <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=fullName>, method and this will associate the client's task ID with a particular invocation of your asynchronous operation. This task ID is made available to your implementation through the <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> property.  \n  \n> [!CAUTION]\n>  Client code must be careful to provide a unique value for the <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> property. Non-unique task IDs may cause your implementation to report progress and other events incorrectly. Your code should check for a non-unique task ID and raise an <xref:System.ArgumentException> if one is detected.","nodes":[{"pos":[0,694],"content":"If your class supports multiple asynchronous methods or multiple invocations of a single asynchronous method, clients will need a way to determine which asynchronous task is raising events. Your `MethodNameAsync` method should take a parameter of type <xref:System.Object> that will act as a task ID. You will use this task ID when you call the <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=fullName>, method and this will associate the client's task ID with a particular invocation of your asynchronous operation. This task ID is made available to your implementation through the <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> property.","nodes":[{"content":"If your class supports multiple asynchronous methods or multiple invocations of a single asynchronous method, clients will need a way to determine which asynchronous task is raising events.","pos":[0,189]},{"content":"Your <ph id=\"ph1\">`MethodNameAsync`</ph> method should take a parameter of type <ph id=\"ph2\">&lt;xref:System.Object&gt;</ph> that will act as a task ID.","pos":[190,300],"source":" Your `MethodNameAsync` method should take a parameter of type <xref:System.Object> that will act as a task ID."},{"content":"You will use this task ID when you call the <ph id=\"ph1\">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=fullName&gt;</ph>, method and this will associate the client's task ID with a particular invocation of your asynchronous operation.","pos":[301,553],"source":" You will use this task ID when you call the <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=fullName>, method and this will associate the client's task ID with a particular invocation of your asynchronous operation."},{"content":"This task ID is made available to your implementation through the <ph id=\"ph1\">&lt;xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A&gt;</ph> property.","pos":[554,694],"source":" This task ID is made available to your implementation through the <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> property."}]},{"pos":[702,1064],"content":"[!CAUTION]\n Client code must be careful to provide a unique value for the <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> property. Non-unique task IDs may cause your implementation to report progress and other events incorrectly. Your code should check for a non-unique task ID and raise an <xref:System.ArgumentException> if one is detected.","leadings":["","> "],"nodes":[{"content":" Client code must be careful to provide a unique value for the <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> property. Non-unique task IDs may cause your implementation to report progress and other events incorrectly. Your code should check for a non-unique task ID and raise an <xref:System.ArgumentException> if one is detected.","pos":[11,360],"nodes":[{"content":"Client code must be careful to provide a unique value for the <ph id=\"ph1\">&lt;xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A&gt;</ph> property.","pos":[1,137],"source":" Client code must be careful to provide a unique value for the <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> property."},{"content":"Non-unique task IDs may cause your implementation to report progress and other events incorrectly.","pos":[138,236]},{"content":"Your code should check for a non-unique task ID and raise an <ph id=\"ph1\">&lt;xref:System.ArgumentException&gt;</ph> if one is detected.","pos":[237,349],"source":" Your code should check for a non-unique task ID and raise an <xref:System.ArgumentException> if one is detected."}]}]}],"pos":[19630,20700],"yaml":true,"extradata":"MT"},{"content":"The state object passed to the asynchronous method invocation.","nodes":[{"pos":[0,62],"content":"The state object passed to the asynchronous method invocation.","nodes":[{"content":"The state object passed to the asynchronous method invocation.","pos":[0,62]}]}],"pos":[21534,21597],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ComponentModel.AsyncOperation\n  commentId: T:System.ComponentModel.AsyncOperation\n  id: AsyncOperation\n  children:\n  - System.ComponentModel.AsyncOperation.Finalize\n  - System.ComponentModel.AsyncOperation.OperationCompleted\n  - System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)\n  - System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)\n  - System.ComponentModel.AsyncOperation.SynchronizationContext\n  - System.ComponentModel.AsyncOperation.UserSuppliedState\n  langs:\n  - csharp\n  name: AsyncOperation\n  nameWithType: AsyncOperation\n  fullName: System.ComponentModel.AsyncOperation\n  type: Class\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  - System\n  - netstandard\n  namespace: System.ComponentModel\n  summary: Tracks the lifetime of an asynchronous operation.\n  remarks: \"When you implement a class according to the [Event-based Asynchronous Pattern Overview](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), you may need to track the lifetime of each asynchronous operation invoked on an instance of your class. The <xref:System.ComponentModel.AsyncOperation> class provides ways to track and report the progress of an asynchronous task.  \\n  \\n The following list identifies ways to use an <xref:System.ComponentModel.AsyncOperation> object:  \\n  \\n-   To report progress and interim results to the client, call <xref:System.ComponentModel.AsyncOperation.Post%2A> from your asynchronous worker code.  \\n  \\n-   To indicate that an asynchronous task has completed, or to cancel a pending asynchronous task, call <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>.  \\n  \\n Your class should get an <xref:System.ComponentModel.AsyncOperation> object for each asynchronous task by calling <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=fullName> when each task starts. To allow the client to distinguish separate asynchronous tasks, <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=fullName> takes a parameter for a unique client-provided token, which becomes the <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> property. It can then be used by client code to identify the particular asynchronous task that is raising progress or completion events.\"\n  example:\n  - \"The following code example demonstrates using an <xref:System.ComponentModel.AsyncOperation> object to track the lifetime of asynchronous operations. This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=fullName> class.  \\n  \\n For a full code listing, see [How to: Implement a Component That Supports the Event-based Asynchronous Pattern](http://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf). For a full code listing of a client form, see [How to: Implement a Client of the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md).  \\n  \\n [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]\\n [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]\"\n  syntax:\n    content: public sealed class AsyncOperation\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/AsyncOperation.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.AsyncOperation.Finalize\n  commentId: M:System.ComponentModel.AsyncOperation.Finalize\n  id: Finalize\n  parent: System.ComponentModel.AsyncOperation\n  langs:\n  - csharp\n  name: Finalize()\n  nameWithType: AsyncOperation.Finalize()\n  fullName: AsyncOperation.Finalize()\n  type: Method\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  - System\n  namespace: System.ComponentModel\n  summary: Finalizes the asynchronous operation.\n  syntax:\n    content: ~AsyncOperation ();\n    parameters: []\n  overload: System.ComponentModel.AsyncOperation.Finalize*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/AsyncOperation.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.AsyncOperation.OperationCompleted\n  commentId: M:System.ComponentModel.AsyncOperation.OperationCompleted\n  id: OperationCompleted\n  parent: System.ComponentModel.AsyncOperation\n  langs:\n  - csharp\n  name: OperationCompleted()\n  nameWithType: AsyncOperation.OperationCompleted()\n  fullName: AsyncOperation.OperationCompleted()\n  type: Method\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  - System\n  - netstandard\n  namespace: System.ComponentModel\n  summary: Ends the lifetime of an asynchronous operation.\n  remarks: Call the <xref:System.ComponentModel.AsyncOperation.OperationCompleted%2A> method to end the lifetime of an asynchronous operation. After this method is called for a particular task, calls to its corresponding <xref:System.ComponentModel.AsyncOperation> will raise an exception.\n  syntax:\n    content: public void OperationCompleted ();\n    parameters: []\n  overload: System.ComponentModel.AsyncOperation.OperationCompleted*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <xref href=\"System.ComponentModel.AsyncOperation.OperationCompleted\"></xref> has been called previously for this task.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/AsyncOperation.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)\n  commentId: M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)\n  id: Post(System.Threading.SendOrPostCallback,System.Object)\n  parent: System.ComponentModel.AsyncOperation\n  langs:\n  - csharp\n  name: Post(SendOrPostCallback, Object)\n  nameWithType: AsyncOperation.Post(SendOrPostCallback, Object)\n  fullName: AsyncOperation.Post(SendOrPostCallback, Object)\n  type: Method\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  - System\n  - netstandard\n  namespace: System.ComponentModel\n  summary: Invokes a delegate on the thread or context appropriate for the application model.\n  remarks: \"The <xref:System.ComponentModel.AsyncOperation.Post%2A> method invokes the delegate specified by the `arg` parameter without ending the lifetime of the asynchronous operation.  \\n  \\n You can call the <xref:System.ComponentModel.AsyncOperation.Post%2A> method as often as you like while the lifetime of the asynchronous operation has not been ended by a call to <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>. You can use the method to report progress or interim results back to clients.  \\n  \\n The `d` parameter wraps the delegate you want called when you want to post an update about the status of the asynchronous task. The <xref:System.ComponentModel.AsyncOperation> object will ensure that your delegate is invoked on the thread or context appropriate for the application model. Your method can optionally raise an event that notifies clients of a status change, progress update, or newly available incremental results.  \\n  \\n The `arg` parameter should be used to pass state to the delegate wrapped by the `d` parameter. It might be a reference to an <xref:System.ComponentModel.AsyncOperation>, or it might be a <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=fullName> object. It may be desirable to derive your own class from <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=fullName> to provide additional state storage.\"\n  example:\n  - \"The following code example demonstrates using the <xref:System.ComponentModel.AsyncOperation.Post%2A> method for reporting progress and incremental results of an asynchronous operation. This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=fullName> class.  \\n  \\n  \\n[!code-csharp[System.ComponentModel.AsyncOperationManager#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#5)]\\n[!code-vb[System.ComponentModel.AsyncOperationManager#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#5)]\"\n  syntax:\n    content: public void Post (System.Threading.SendOrPostCallback d, object arg);\n    parameters:\n    - id: d\n      type: System.Threading.SendOrPostCallback\n      description: A <xref href=\"System.Threading.SendOrPostCallback\"></xref> object that wraps the delegate to be called when the operation ends.\n    - id: arg\n      type: System.Object\n      description: An argument for the delegate contained in the <code>d</code> parameter.\n  overload: System.ComponentModel.AsyncOperation.Post*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The <xref href=\"System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)\"></xref> method has been called previously for this task.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>d</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/AsyncOperation.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)\n  commentId: M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)\n  id: PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)\n  parent: System.ComponentModel.AsyncOperation\n  langs:\n  - csharp\n  name: PostOperationCompleted(SendOrPostCallback, Object)\n  nameWithType: AsyncOperation.PostOperationCompleted(SendOrPostCallback, Object)\n  fullName: AsyncOperation.PostOperationCompleted(SendOrPostCallback, Object)\n  type: Method\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  - System\n  - netstandard\n  namespace: System.ComponentModel\n  summary: Ends the lifetime of an asynchronous operation.\n  remarks: \"Call the <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> method to end the lifetime of an asynchronous operation. After this method is called for a particular task, calls to its corresponding <xref:System.ComponentModel.AsyncOperation> object will raise an exception.  \\n  \\n The `d` parameter wraps the delegate you want your class to call when the task's lifetime ends due to completion, cancellation, or failure of the task. The <xref:System.ComponentModel.AsyncOperation> object will ensure that your delegate is invoked on the thread or context appropriate for the application model. Your delegate can optionally raise an event that notifies clients that the asynchronous task's lifetime has ended.  \\n  \\n The `arg` parameter is used to pass state information to the completion delegate `d`. You can use an <xref:System.ComponentModel.AsyncOperation> object, or an <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=fullName> object as the parameter value. Alternatively, if you want to provide additional state storage, you can use an instance of a class you derive from the <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=fullName> class.\"\n  example:\n  - \"The following code example demonstrates using the <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> method to end the lifetime of an asynchronous operation. This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=fullName> class.  \\n  \\n  \\n[!code-csharp[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#4)]\\n[!code-vb[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#4)]\"\n  syntax:\n    content: public void PostOperationCompleted (System.Threading.SendOrPostCallback d, object arg);\n    parameters:\n    - id: d\n      type: System.Threading.SendOrPostCallback\n      description: A <xref href=\"System.Threading.SendOrPostCallback\"></xref> object that wraps the delegate to be called when the operation ends.\n    - id: arg\n      type: System.Object\n      description: An argument for the delegate contained in the <code>d</code> parameter.\n  overload: System.ComponentModel.AsyncOperation.PostOperationCompleted*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <xref href=\"System.ComponentModel.AsyncOperation.OperationCompleted\"></xref> has been called previously for this task.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>d</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/AsyncOperation.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.AsyncOperation.SynchronizationContext\n  commentId: P:System.ComponentModel.AsyncOperation.SynchronizationContext\n  id: SynchronizationContext\n  parent: System.ComponentModel.AsyncOperation\n  langs:\n  - csharp\n  name: SynchronizationContext\n  nameWithType: AsyncOperation.SynchronizationContext\n  fullName: AsyncOperation.SynchronizationContext\n  type: Property\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  - System\n  - netstandard\n  namespace: System.ComponentModel\n  summary: Gets the <xref href=\"System.Threading.SynchronizationContext\"></xref> object that was passed to the constructor.\n  syntax:\n    content: public System.Threading.SynchronizationContext SynchronizationContext { get; }\n    return:\n      type: System.Threading.SynchronizationContext\n      description: The <xref href=\"System.Threading.SynchronizationContext\"></xref> object that was passed to the constructor.\n  overload: System.ComponentModel.AsyncOperation.SynchronizationContext*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/AsyncOperation.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.AsyncOperation.UserSuppliedState\n  commentId: P:System.ComponentModel.AsyncOperation.UserSuppliedState\n  id: UserSuppliedState\n  parent: System.ComponentModel.AsyncOperation\n  langs:\n  - csharp\n  name: UserSuppliedState\n  nameWithType: AsyncOperation.UserSuppliedState\n  fullName: AsyncOperation.UserSuppliedState\n  type: Property\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  - System\n  - netstandard\n  namespace: System.ComponentModel\n  summary: Gets or sets an object used to uniquely identify an asynchronous operation.\n  remarks: \"If your class supports multiple asynchronous methods or multiple invocations of a single asynchronous method, clients will need a way to determine which asynchronous task is raising events. Your `MethodNameAsync` method should take a parameter of type <xref:System.Object> that will act as a task ID. You will use this task ID when you call the <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=fullName>, method and this will associate the client's task ID with a particular invocation of your asynchronous operation. This task ID is made available to your implementation through the <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> property.  \\n  \\n> [!CAUTION]\\n>  Client code must be careful to provide a unique value for the <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> property. Non-unique task IDs may cause your implementation to report progress and other events incorrectly. Your code should check for a non-unique task ID and raise an <xref:System.ArgumentException> if one is detected.\"\n  example:\n  - \"The following code example demonstrates using <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> to track the lifetime of asynchronous operations. This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=fullName> class.  \\n  \\n  \\n[!code-csharp[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#4)]\\n[!code-vb[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#4)]\"\n  syntax:\n    content: public object UserSuppliedState { get; }\n    return:\n      type: System.Object\n      description: The state object passed to the asynchronous method invocation.\n  overload: System.ComponentModel.AsyncOperation.UserSuppliedState*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/AsyncOperation.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ComponentModel.AsyncOperation.Finalize\n  parent: System.ComponentModel.AsyncOperation\n  isExternal: false\n  name: Finalize()\n  nameWithType: AsyncOperation.Finalize()\n  fullName: AsyncOperation.Finalize()\n- uid: System.ComponentModel.AsyncOperation.OperationCompleted\n  parent: System.ComponentModel.AsyncOperation\n  isExternal: false\n  name: OperationCompleted()\n  nameWithType: AsyncOperation.OperationCompleted()\n  fullName: AsyncOperation.OperationCompleted()\n- uid: System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)\n  parent: System.ComponentModel.AsyncOperation\n  isExternal: false\n  name: Post(SendOrPostCallback, Object)\n  nameWithType: AsyncOperation.Post(SendOrPostCallback, Object)\n  fullName: AsyncOperation.Post(SendOrPostCallback, Object)\n- uid: System.Threading.SendOrPostCallback\n  parent: System.Threading\n  isExternal: false\n  name: SendOrPostCallback\n  nameWithType: SendOrPostCallback\n  fullName: System.Threading.SendOrPostCallback\n- uid: System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)\n  parent: System.ComponentModel.AsyncOperation\n  isExternal: false\n  name: PostOperationCompleted(SendOrPostCallback, Object)\n  nameWithType: AsyncOperation.PostOperationCompleted(SendOrPostCallback, Object)\n  fullName: AsyncOperation.PostOperationCompleted(SendOrPostCallback, Object)\n- uid: System.ComponentModel.AsyncOperation.SynchronizationContext\n  parent: System.ComponentModel.AsyncOperation\n  isExternal: false\n  name: SynchronizationContext\n  nameWithType: AsyncOperation.SynchronizationContext\n  fullName: AsyncOperation.SynchronizationContext\n- uid: System.Threading.SynchronizationContext\n  parent: System.Threading\n  isExternal: false\n  name: SynchronizationContext\n  nameWithType: SynchronizationContext\n  fullName: System.Threading.SynchronizationContext\n- uid: System.ComponentModel.AsyncOperation.UserSuppliedState\n  parent: System.ComponentModel.AsyncOperation\n  isExternal: false\n  name: UserSuppliedState\n  nameWithType: AsyncOperation.UserSuppliedState\n  fullName: AsyncOperation.UserSuppliedState\n- uid: System.ComponentModel.AsyncOperation.Finalize*\n  parent: System.ComponentModel.AsyncOperation\n  isExternal: false\n  name: Finalize\n  nameWithType: AsyncOperation.Finalize\n  fullName: AsyncOperation.Finalize\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/AsyncOperation.xml\n- uid: System.ComponentModel.AsyncOperation.OperationCompleted*\n  parent: System.ComponentModel.AsyncOperation\n  isExternal: false\n  name: OperationCompleted\n  nameWithType: AsyncOperation.OperationCompleted\n  fullName: AsyncOperation.OperationCompleted\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/AsyncOperation.xml\n- uid: System.ComponentModel.AsyncOperation.Post*\n  parent: System.ComponentModel.AsyncOperation\n  isExternal: false\n  name: Post\n  nameWithType: AsyncOperation.Post\n  fullName: AsyncOperation.Post\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/AsyncOperation.xml\n- uid: System.ComponentModel.AsyncOperation.PostOperationCompleted*\n  parent: System.ComponentModel.AsyncOperation\n  isExternal: false\n  name: PostOperationCompleted\n  nameWithType: AsyncOperation.PostOperationCompleted\n  fullName: AsyncOperation.PostOperationCompleted\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/AsyncOperation.xml\n- uid: System.ComponentModel.AsyncOperation.SynchronizationContext*\n  parent: System.ComponentModel.AsyncOperation\n  isExternal: false\n  name: SynchronizationContext\n  nameWithType: AsyncOperation.SynchronizationContext\n  fullName: AsyncOperation.SynchronizationContext\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/AsyncOperation.xml\n- uid: System.ComponentModel.AsyncOperation.UserSuppliedState*\n  parent: System.ComponentModel.AsyncOperation\n  isExternal: false\n  name: UserSuppliedState\n  nameWithType: AsyncOperation.UserSuppliedState\n  fullName: AsyncOperation.UserSuppliedState\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/AsyncOperation.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}