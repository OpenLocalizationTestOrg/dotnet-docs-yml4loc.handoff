{"nodes":[{"content":"Computes the <xref href=\"System.Security.Cryptography.SHA512\"></xref> hash algorithm for the input data using the managed library.","nodes":[{"pos":[0,130],"content":"Computes the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.SHA512\"&gt;&lt;/xref&gt;</ph> hash algorithm for the input data using the managed library.","source":"Computes the <xref href=\"System.Security.Cryptography.SHA512\"></xref> hash algorithm for the input data using the managed library."}],"pos":[849,980],"yaml":true},{"content":"The hash is used as a unique value of fixed size representing a large amount of data. Hashes of two sets of data should match if and only if the corresponding data also matches. Small changes to the data result in large unpredictable changes in the hash.  \n  \n The hash size for the <xref:System.Security.Cryptography.SHA512Managed> algorithm is 512 bits.","nodes":[{"pos":[0,254],"content":"The hash is used as a unique value of fixed size representing a large amount of data. Hashes of two sets of data should match if and only if the corresponding data also matches. Small changes to the data result in large unpredictable changes in the hash.","nodes":[{"content":"The hash is used as a unique value of fixed size representing a large amount of data. Hashes of two sets of data should match if and only if the corresponding data also matches. Small changes to the data result in large unpredictable changes in the hash.","pos":[0,254],"nodes":[{"content":"The hash is used as a unique value of fixed size representing a large amount of data.","pos":[0,85]},{"content":"Hashes of two sets of data should match if and only if the corresponding data also matches.","pos":[86,177]},{"content":"Small changes to the data result in large unpredictable changes in the hash.","pos":[178,254]}]}]},{"pos":[261,355],"content":"The hash size for the <xref:System.Security.Cryptography.SHA512Managed> algorithm is 512 bits.","nodes":[{"content":"The hash size for the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.SHA512Managed&gt;</ph> algorithm is 512 bits.","pos":[0,94],"source":"The hash size for the <xref:System.Security.Cryptography.SHA512Managed> algorithm is 512 bits."}]}],"pos":[991,1351],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.SHA512Managed\"></xref> class.","nodes":[{"pos":[0,104],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.SHA512Managed\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.SHA512Managed\"></xref> class."}],"pos":[5131,5236],"yaml":true},{"content":"The hash is used as a unique value of fixed size representing a large amount of data. Hashes of two sets of data should match if and only if the corresponding data also matches. Small changes to the data result in large unpredictable changes in the hash.  \n  \n The hash size for the <xref:System.Security.Cryptography.SHA512Managed> algorithm is 512 bits.  \n  \n **Important** If you enable the FIPS security setting either in the Local Security Policy or as part of Group Policy you will get an <xref:System.InvalidOperationException> when you attempt to use this constructor.","nodes":[{"pos":[0,254],"content":"The hash is used as a unique value of fixed size representing a large amount of data. Hashes of two sets of data should match if and only if the corresponding data also matches. Small changes to the data result in large unpredictable changes in the hash.","nodes":[{"content":"The hash is used as a unique value of fixed size representing a large amount of data. Hashes of two sets of data should match if and only if the corresponding data also matches. Small changes to the data result in large unpredictable changes in the hash.","pos":[0,254],"nodes":[{"content":"The hash is used as a unique value of fixed size representing a large amount of data.","pos":[0,85]},{"content":"Hashes of two sets of data should match if and only if the corresponding data also matches.","pos":[86,177]},{"content":"Small changes to the data result in large unpredictable changes in the hash.","pos":[178,254]}]}]},{"pos":[261,355],"content":"The hash size for the <xref:System.Security.Cryptography.SHA512Managed> algorithm is 512 bits.","nodes":[{"content":"The hash size for the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.SHA512Managed&gt;</ph> algorithm is 512 bits.","pos":[0,94],"source":"The hash size for the <xref:System.Security.Cryptography.SHA512Managed> algorithm is 512 bits."}]},{"pos":[362,576],"content":"<bpt id=\"p1\">**</bpt>Important<ept id=\"p1\">**</ept> If you enable the FIPS security setting either in the Local Security Policy or as part of Group Policy you will get an <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> when you attempt to use this constructor.","source":"**Important** If you enable the FIPS security setting either in the Local Security Policy or as part of Group Policy you will get an <xref:System.InvalidOperationException> when you attempt to use this constructor."}],"pos":[5247,5830],"yaml":true,"extradata":"MT"},{"content":"The Federal Information Processing Standards (FIPS) security setting is enabled. This implementation is not part of the Windows Platform FIPS-validated cryptographic algorithms.","nodes":[{"pos":[0,177],"content":"The Federal Information Processing Standards (FIPS) security setting is enabled. This implementation is not part of the Windows Platform FIPS-validated cryptographic algorithms.","nodes":[{"content":"The Federal Information Processing Standards (FIPS) security setting is enabled. This implementation is not part of the Windows Platform FIPS-validated cryptographic algorithms.","pos":[0,177],"nodes":[{"content":"The Federal Information Processing Standards (FIPS) security setting is enabled.","pos":[0,80]},{"content":"This implementation is not part of the Windows Platform FIPS-validated cryptographic algorithms.","pos":[81,177]}]}]}],"pos":[6083,6261],"yaml":true},{"content":"When overridden in a derived class, routes data written to the object into the <xref href=\"System.Security.Cryptography.SHA512Managed\"></xref> hash algorithm for computing the hash.","nodes":[{"pos":[0,181],"content":"When overridden in a derived class, routes data written to the object into the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.SHA512Managed\"&gt;&lt;/xref&gt;</ph> hash algorithm for computing the hash.","source":"When overridden in a derived class, routes data written to the object into the <xref href=\"System.Security.Cryptography.SHA512Managed\"></xref> hash algorithm for computing the hash."}],"pos":[9309,9491],"yaml":true},{"content":"This method is not called by application code.  \n  \n This abstract method performs the hash computation. Every write to the cryptographic stream object passes the data through this method. For each block of data, this method updates the state of the hash object so a correct hash value is returned at the end of the data stream.","nodes":[{"pos":[0,46],"content":"This method is not called by application code.","nodes":[{"content":"This method is not called by application code.","pos":[0,46]}]},{"pos":[53,328],"content":"This abstract method performs the hash computation. Every write to the cryptographic stream object passes the data through this method. For each block of data, this method updates the state of the hash object so a correct hash value is returned at the end of the data stream.","nodes":[{"content":"This abstract method performs the hash computation. Every write to the cryptographic stream object passes the data through this method. For each block of data, this method updates the state of the hash object so a correct hash value is returned at the end of the data stream.","pos":[0,275],"nodes":[{"content":"This abstract method performs the hash computation.","pos":[0,51]},{"content":"Every write to the cryptographic stream object passes the data through this method.","pos":[52,135]},{"content":"For each block of data, this method updates the state of the hash object so a correct hash value is returned at the end of the data stream.","pos":[136,275]}]}]}],"pos":[9502,9835],"yaml":true,"extradata":"MT"},{"content":"The input data.","nodes":[{"pos":[0,15],"content":"The input data.","nodes":[{"content":"The input data.","pos":[0,15]}]}],"pos":[10005,10021],"yaml":true},{"content":"The offset into the byte array from which to begin using data.","nodes":[{"pos":[0,62],"content":"The offset into the byte array from which to begin using data.","nodes":[{"content":"The offset into the byte array from which to begin using data.","pos":[0,62]}]}],"pos":[10083,10146],"yaml":true},{"content":"The number of bytes in the array to use as data.","nodes":[{"pos":[0,48],"content":"The number of bytes in the array to use as data.","nodes":[{"content":"The number of bytes in the array to use as data.","pos":[0,48]}]}],"pos":[10207,10256],"yaml":true},{"content":"When overridden in a derived class, finalizes the hash computation after the last data is processed by the cryptographic stream object.","nodes":[{"pos":[0,135],"content":"When overridden in a derived class, finalizes the hash computation after the last data is processed by the cryptographic stream object.","nodes":[{"content":"When overridden in a derived class, finalizes the hash computation after the last data is processed by the cryptographic stream object.","pos":[0,135]}]}],"pos":[11563,11699],"yaml":true},{"content":"This method is not called by application code. This method finalizes any partial computation and returns the correct hash value of the data stream.","nodes":[{"pos":[0,147],"content":"This method is not called by application code. This method finalizes any partial computation and returns the correct hash value of the data stream.","nodes":[{"content":"This method is not called by application code. This method finalizes any partial computation and returns the correct hash value of the data stream.","pos":[0,147],"nodes":[{"content":"This method is not called by application code.","pos":[0,46]},{"content":"This method finalizes any partial computation and returns the correct hash value of the data stream.","pos":[47,147]}]}]}],"pos":[11710,11858],"yaml":true,"extradata":"MT"},{"content":"The computed hash code.","nodes":[{"pos":[0,23],"content":"The computed hash code.","nodes":[{"content":"The computed hash code.","pos":[0,23]}]}],"pos":[11997,12021],"yaml":true},{"content":"Initializes an instance of the <xref href=\"System.Security.Cryptography.SHA512Managed\"></xref> class using the managed library.","nodes":[{"pos":[0,127],"content":"Initializes an instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.SHA512Managed\"&gt;&lt;/xref&gt;</ph> class using the managed library.","source":"Initializes an instance of the <xref href=\"System.Security.Cryptography.SHA512Managed\"></xref> class using the managed library."}],"pos":[13335,13463],"yaml":true},{"content":"The hash is used as a unique value of fixed size representing a large amount of data. Hashes of two sets of data should match if and only if the corresponding data also matches. Small changes to the data result in large unpredictable changes in the hash.  \n  \n The hash size for the <xref:System.Security.Cryptography.SHA512Managed> algorithm is 512 bits.","nodes":[{"pos":[0,254],"content":"The hash is used as a unique value of fixed size representing a large amount of data. Hashes of two sets of data should match if and only if the corresponding data also matches. Small changes to the data result in large unpredictable changes in the hash.","nodes":[{"content":"The hash is used as a unique value of fixed size representing a large amount of data. Hashes of two sets of data should match if and only if the corresponding data also matches. Small changes to the data result in large unpredictable changes in the hash.","pos":[0,254],"nodes":[{"content":"The hash is used as a unique value of fixed size representing a large amount of data.","pos":[0,85]},{"content":"Hashes of two sets of data should match if and only if the corresponding data also matches.","pos":[86,177]},{"content":"Small changes to the data result in large unpredictable changes in the hash.","pos":[178,254]}]}]},{"pos":[261,355],"content":"The hash size for the <xref:System.Security.Cryptography.SHA512Managed> algorithm is 512 bits.","nodes":[{"content":"The hash size for the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.SHA512Managed&gt;</ph> algorithm is 512 bits.","pos":[0,94],"source":"The hash size for the <xref:System.Security.Cryptography.SHA512Managed> algorithm is 512 bits."}]}],"pos":[13474,13834],"yaml":true,"extradata":"MT"}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.SHA512Managed\n  commentId: T:System.Security.Cryptography.SHA512Managed\n  id: SHA512Managed\n  children:\n  - System.Security.Cryptography.SHA512Managed.#ctor\n  - System.Security.Cryptography.SHA512Managed.Dispose(System.Boolean)\n  - System.Security.Cryptography.SHA512Managed.Finalize\n  - System.Security.Cryptography.SHA512Managed.HashCore(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.SHA512Managed.HashFinal\n  - System.Security.Cryptography.SHA512Managed.Initialize\n  langs:\n  - csharp\n  name: SHA512Managed\n  nameWithType: SHA512Managed\n  fullName: System.Security.Cryptography.SHA512Managed\n  type: Class\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: Computes the <xref href=\"System.Security.Cryptography.SHA512\"></xref> hash algorithm for the input data using the managed library.\n  remarks: \"The hash is used as a unique value of fixed size representing a large amount of data. Hashes of two sets of data should match if and only if the corresponding data also matches. Small changes to the data result in large unpredictable changes in the hash.  \\n  \\n The hash size for the <xref:System.Security.Cryptography.SHA512Managed> algorithm is 512 bits.\"\n  example:\n  - \"The following example computes the <xref:System.Security.Cryptography.SHA512Managed> hash for `data` and stores it in `result`. This example assumes that there is a predefined constant `DATA_SIZE`.  \\n  \\n [!code-cpp[Classic SHA512Managed Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SHA512Managed Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic SHA512Managed Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SHA512Managed Example/CS/source.cs#1)]\\n [!code-vb[Classic SHA512Managed Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SHA512Managed Example/VB/source.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class SHA512Managed : System.Security.Cryptography.SHA512\n  inheritance:\n  - System.Object\n  - System.Security.Cryptography.HashAlgorithm\n  - System.Security.Cryptography.SHA512\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Security.Cryptography.HashAlgorithm.CanReuseTransform\n  - System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks\n  - System.Security.Cryptography.HashAlgorithm.Clear\n  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])\n  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)\n  - System.Security.Cryptography.HashAlgorithm.Dispose\n  - System.Security.Cryptography.HashAlgorithm.Hash\n  - System.Security.Cryptography.HashAlgorithm.HashSize\n  - System.Security.Cryptography.HashAlgorithm.HashSizeValue\n  - System.Security.Cryptography.HashAlgorithm.HashValue\n  - System.Security.Cryptography.HashAlgorithm.InputBlockSize\n  - System.Security.Cryptography.HashAlgorithm.OutputBlockSize\n  - System.Security.Cryptography.HashAlgorithm.State\n  - System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  - System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.SHA512.Create\n  - System.Security.Cryptography.SHA512.Create(System.String)\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/SHA512Managed.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.SHA512Managed.#ctor\n  commentId: M:System.Security.Cryptography.SHA512Managed.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.SHA512Managed\n  langs:\n  - csharp\n  name: SHA512Managed()\n  nameWithType: SHA512Managed.SHA512Managed()\n  fullName: SHA512Managed.SHA512Managed()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.SHA512Managed\"></xref> class.\n  remarks: \"The hash is used as a unique value of fixed size representing a large amount of data. Hashes of two sets of data should match if and only if the corresponding data also matches. Small changes to the data result in large unpredictable changes in the hash.  \\n  \\n The hash size for the <xref:System.Security.Cryptography.SHA512Managed> algorithm is 512 bits.  \\n  \\n **Important** If you enable the FIPS security setting either in the Local Security Policy or as part of Group Policy you will get an <xref:System.InvalidOperationException> when you attempt to use this constructor.\"\n  syntax:\n    content: public SHA512Managed ();\n    parameters: []\n  overload: System.Security.Cryptography.SHA512Managed.#ctor*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The Federal Information Processing Standards (FIPS) security setting is enabled. This implementation is not part of the Windows Platform FIPS-validated cryptographic algorithms.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/SHA512Managed.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.SHA512Managed.Dispose(System.Boolean)\n  commentId: M:System.Security.Cryptography.SHA512Managed.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Security.Cryptography.SHA512Managed\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: SHA512Managed.Dispose(Boolean)\n  fullName: SHA512Managed.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: ''\n  overload: System.Security.Cryptography.SHA512Managed.Dispose*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - xamarinios-10.8\n  monikers:\n  - netcore-2.0\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/SHA512Managed.xml\n- uid: System.Security.Cryptography.SHA512Managed.Finalize\n  commentId: M:System.Security.Cryptography.SHA512Managed.Finalize\n  id: Finalize\n  parent: System.Security.Cryptography.SHA512Managed\n  langs:\n  - csharp\n  name: Finalize()\n  nameWithType: SHA512Managed.Finalize()\n  fullName: SHA512Managed.Finalize()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: ~SHA512Managed ();\n    parameters: []\n  overload: System.Security.Cryptography.SHA512Managed.Finalize*\n  exceptions: []\n  version:\n  - xamarinios-10.8\n  monikers:\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/SHA512Managed.xml\n- uid: System.Security.Cryptography.SHA512Managed.HashCore(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Security.Cryptography.SHA512Managed.HashCore(System.Byte[],System.Int32,System.Int32)\n  id: HashCore(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.SHA512Managed\n  langs:\n  - csharp\n  name: HashCore(Byte[], Int32, Int32)\n  nameWithType: SHA512Managed.HashCore(Byte[], Int32, Int32)\n  fullName: SHA512Managed.HashCore(Byte[], Int32, Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, routes data written to the object into the <xref href=\"System.Security.Cryptography.SHA512Managed\"></xref> hash algorithm for computing the hash.\n  remarks: \"This method is not called by application code.  \\n  \\n This abstract method performs the hash computation. Every write to the cryptographic stream object passes the data through this method. For each block of data, this method updates the state of the hash object so a correct hash value is returned at the end of the data stream.\"\n  syntax:\n    content: protected override void HashCore (byte[] rgb, int ibStart, int cbSize);\n    parameters:\n    - id: rgb\n      type: System.Byte[]\n      description: The input data.\n    - id: ibStart\n      type: System.Int32\n      description: The offset into the byte array from which to begin using data.\n    - id: cbSize\n      type: System.Int32\n      description: The number of bytes in the array to use as data.\n  overload: System.Security.Cryptography.SHA512Managed.HashCore*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/SHA512Managed.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.SHA512Managed.HashFinal\n  commentId: M:System.Security.Cryptography.SHA512Managed.HashFinal\n  id: HashFinal\n  parent: System.Security.Cryptography.SHA512Managed\n  langs:\n  - csharp\n  name: HashFinal()\n  nameWithType: SHA512Managed.HashFinal()\n  fullName: SHA512Managed.HashFinal()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, finalizes the hash computation after the last data is processed by the cryptographic stream object.\n  remarks: This method is not called by application code. This method finalizes any partial computation and returns the correct hash value of the data stream.\n  syntax:\n    content: protected override byte[] HashFinal ();\n    parameters: []\n    return:\n      type: System.Byte[]\n      description: The computed hash code.\n  overload: System.Security.Cryptography.SHA512Managed.HashFinal*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/SHA512Managed.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.SHA512Managed.Initialize\n  commentId: M:System.Security.Cryptography.SHA512Managed.Initialize\n  id: Initialize\n  parent: System.Security.Cryptography.SHA512Managed\n  langs:\n  - csharp\n  name: Initialize()\n  nameWithType: SHA512Managed.Initialize()\n  fullName: SHA512Managed.Initialize()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: Initializes an instance of the <xref href=\"System.Security.Cryptography.SHA512Managed\"></xref> class using the managed library.\n  remarks: \"The hash is used as a unique value of fixed size representing a large amount of data. Hashes of two sets of data should match if and only if the corresponding data also matches. Small changes to the data result in large unpredictable changes in the hash.  \\n  \\n The hash size for the <xref:System.Security.Cryptography.SHA512Managed> algorithm is 512 bits.\"\n  syntax:\n    content: public override void Initialize ();\n    parameters: []\n  overload: System.Security.Cryptography.SHA512Managed.Initialize*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/SHA512Managed.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Security.Cryptography.SHA512\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: SHA512\n  nameWithType: SHA512\n  fullName: System.Security.Cryptography.SHA512\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.Security.Cryptography.SHA512Managed.#ctor\n  parent: System.Security.Cryptography.SHA512Managed\n  isExternal: false\n  name: SHA512Managed()\n  nameWithType: SHA512Managed.SHA512Managed()\n  fullName: SHA512Managed.SHA512Managed()\n- uid: System.Security.Cryptography.SHA512Managed.Dispose(System.Boolean)\n  parent: System.Security.Cryptography.SHA512Managed\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: SHA512Managed.Dispose(Boolean)\n  fullName: SHA512Managed.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.SHA512Managed.Finalize\n  parent: System.Security.Cryptography.SHA512Managed\n  isExternal: false\n  name: Finalize()\n  nameWithType: SHA512Managed.Finalize()\n  fullName: SHA512Managed.Finalize()\n- uid: System.Security.Cryptography.SHA512Managed.HashCore(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.SHA512Managed\n  isExternal: false\n  name: HashCore(Byte[], Int32, Int32)\n  nameWithType: SHA512Managed.HashCore(Byte[], Int32, Int32)\n  fullName: SHA512Managed.HashCore(Byte[], Int32, Int32)\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.SHA512Managed.HashFinal\n  parent: System.Security.Cryptography.SHA512Managed\n  isExternal: false\n  name: HashFinal()\n  nameWithType: SHA512Managed.HashFinal()\n  fullName: SHA512Managed.HashFinal()\n- uid: System.Security.Cryptography.SHA512Managed.Initialize\n  parent: System.Security.Cryptography.SHA512Managed\n  isExternal: false\n  name: Initialize()\n  nameWithType: SHA512Managed.Initialize()\n  fullName: SHA512Managed.Initialize()\n- uid: System.Security.Cryptography.SHA512Managed.#ctor*\n  parent: System.Security.Cryptography.SHA512Managed\n  isExternal: false\n  name: SHA512Managed\n  nameWithType: SHA512Managed.SHA512Managed\n  fullName: SHA512Managed.SHA512Managed\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/SHA512Managed.xml\n- uid: System.Security.Cryptography.SHA512Managed.Dispose*\n  parent: System.Security.Cryptography.SHA512Managed\n  isExternal: false\n  name: Dispose\n  nameWithType: SHA512Managed.Dispose\n  fullName: SHA512Managed.Dispose\n  monikers:\n  - netcore-2.0\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/SHA512Managed.xml\n- uid: System.Security.Cryptography.SHA512Managed.Finalize*\n  parent: System.Security.Cryptography.SHA512Managed\n  isExternal: false\n  name: Finalize\n  nameWithType: SHA512Managed.Finalize\n  fullName: SHA512Managed.Finalize\n  monikers:\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/SHA512Managed.xml\n- uid: System.Security.Cryptography.SHA512Managed.HashCore*\n  parent: System.Security.Cryptography.SHA512Managed\n  isExternal: false\n  name: HashCore\n  nameWithType: SHA512Managed.HashCore\n  fullName: SHA512Managed.HashCore\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/SHA512Managed.xml\n- uid: System.Security.Cryptography.SHA512Managed.HashFinal*\n  parent: System.Security.Cryptography.SHA512Managed\n  isExternal: false\n  name: HashFinal\n  nameWithType: SHA512Managed.HashFinal\n  fullName: SHA512Managed.HashFinal\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/SHA512Managed.xml\n- uid: System.Security.Cryptography.SHA512Managed.Initialize*\n  parent: System.Security.Cryptography.SHA512Managed\n  isExternal: false\n  name: Initialize\n  nameWithType: SHA512Managed.Initialize\n  fullName: SHA512Managed.Initialize\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/SHA512Managed.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Security.Cryptography.HashAlgorithm.CanReuseTransform\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: CanReuseTransform\n  nameWithType: HashAlgorithm.CanReuseTransform\n  fullName: HashAlgorithm.CanReuseTransform\n- uid: System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: CanTransformMultipleBlocks\n  nameWithType: HashAlgorithm.CanTransformMultipleBlocks\n  fullName: HashAlgorithm.CanTransformMultipleBlocks\n- uid: System.Security.Cryptography.HashAlgorithm.Clear\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: Clear()\n  nameWithType: HashAlgorithm.Clear()\n  fullName: HashAlgorithm.Clear()\n- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: ComputeHash(Byte[])\n  nameWithType: HashAlgorithm.ComputeHash(Byte[])\n  fullName: HashAlgorithm.ComputeHash(Byte[])\n- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: ComputeHash(Stream)\n  nameWithType: HashAlgorithm.ComputeHash(Stream)\n  fullName: HashAlgorithm.ComputeHash(Stream)\n- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: ComputeHash(Byte[], Int32, Int32)\n  nameWithType: HashAlgorithm.ComputeHash(Byte[], Int32, Int32)\n  fullName: HashAlgorithm.ComputeHash(Byte[], Int32, Int32)\n- uid: System.Security.Cryptography.SHA512.Create\n  parent: System.Security.Cryptography.SHA512\n  isExternal: false\n  name: Create()\n  nameWithType: SHA512.Create()\n  fullName: SHA512.Create()\n- uid: System.Security.Cryptography.SHA512.Create(System.String)\n  parent: System.Security.Cryptography.SHA512\n  isExternal: false\n  name: Create(String)\n  nameWithType: SHA512.Create(String)\n  fullName: SHA512.Create(String)\n- uid: System.Security.Cryptography.HashAlgorithm.Dispose\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: Dispose()\n  nameWithType: HashAlgorithm.Dispose()\n  fullName: HashAlgorithm.Dispose()\n- uid: System.Security.Cryptography.HashAlgorithm.Hash\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: Hash\n  nameWithType: HashAlgorithm.Hash\n  fullName: HashAlgorithm.Hash\n- uid: System.Security.Cryptography.HashAlgorithm.HashSize\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: HashSize\n  nameWithType: HashAlgorithm.HashSize\n  fullName: HashAlgorithm.HashSize\n- uid: System.Security.Cryptography.HashAlgorithm.HashSizeValue\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: HashSizeValue\n  nameWithType: HashAlgorithm.HashSizeValue\n  fullName: HashAlgorithm.HashSizeValue\n- uid: System.Security.Cryptography.HashAlgorithm.HashValue\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: HashValue\n  nameWithType: HashAlgorithm.HashValue\n  fullName: HashAlgorithm.HashValue\n- uid: System.Security.Cryptography.HashAlgorithm.InputBlockSize\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: InputBlockSize\n  nameWithType: HashAlgorithm.InputBlockSize\n  fullName: HashAlgorithm.InputBlockSize\n- uid: System.Security.Cryptography.HashAlgorithm.OutputBlockSize\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: OutputBlockSize\n  nameWithType: HashAlgorithm.OutputBlockSize\n  fullName: HashAlgorithm.OutputBlockSize\n- uid: System.Security.Cryptography.HashAlgorithm.State\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: State\n  nameWithType: HashAlgorithm.State\n  fullName: HashAlgorithm.State\n- uid: System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: TransformBlock(Byte[], Int32, Int32, Byte[], Int32)\n  nameWithType: HashAlgorithm.TransformBlock(Byte[], Int32, Int32, Byte[], Int32)\n  fullName: HashAlgorithm.TransformBlock(Byte[], Int32, Int32, Byte[], Int32)\n- uid: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: TransformFinalBlock(Byte[], Int32, Int32)\n  nameWithType: HashAlgorithm.TransformFinalBlock(Byte[], Int32, Int32)\n  fullName: HashAlgorithm.TransformFinalBlock(Byte[], Int32, Int32)\n"}