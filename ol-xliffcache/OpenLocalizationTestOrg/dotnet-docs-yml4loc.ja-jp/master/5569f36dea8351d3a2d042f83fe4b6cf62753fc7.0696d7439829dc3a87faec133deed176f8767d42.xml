{"nodes":[{"content":"Defines objects used to fill the interiors of graphical shapes such as rectangles, ellipses, pies, polygons, and paths.","nodes":[{"pos":[0,119],"content":"Defines objects used to fill the interiors of graphical shapes such as rectangles, ellipses, pies, polygons, and paths.","nodes":[{"content":"Defines objects used to fill the interiors of graphical shapes such as rectangles, ellipses, pies, polygons, and paths.","pos":[0,119]}]}],"pos":[532,652],"yaml":true},{"content":"This is an abstract base class and cannot be instantiated. To create a brush object, use classes derived from <xref:System.Drawing.Brush>, such as <xref:System.Drawing.SolidBrush>, <xref:System.Drawing.TextureBrush>, and <xref:System.Drawing.Drawing2D.LinearGradientBrush>.","nodes":[{"pos":[0,273],"content":"This is an abstract base class and cannot be instantiated. To create a brush object, use classes derived from <xref:System.Drawing.Brush>, such as <xref:System.Drawing.SolidBrush>, <xref:System.Drawing.TextureBrush>, and <xref:System.Drawing.Drawing2D.LinearGradientBrush>.","nodes":[{"content":"This is an abstract base class and cannot be instantiated. To create a brush object, use classes derived from <xref:System.Drawing.Brush>, such as <xref:System.Drawing.SolidBrush>, <xref:System.Drawing.TextureBrush>, and <xref:System.Drawing.Drawing2D.LinearGradientBrush>.","pos":[0,273],"nodes":[{"content":"This is an abstract base class and cannot be instantiated.","pos":[0,58]},{"content":"To create a brush object, use classes derived from <ph id=\"ph1\">&lt;xref:System.Drawing.Brush&gt;</ph>, such as <ph id=\"ph2\">&lt;xref:System.Drawing.SolidBrush&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Drawing.TextureBrush&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Drawing.Drawing2D.LinearGradientBrush&gt;</ph>.","pos":[59,273],"source":" To create a brush object, use classes derived from <xref:System.Drawing.Brush>, such as <xref:System.Drawing.SolidBrush>, <xref:System.Drawing.TextureBrush>, and <xref:System.Drawing.Drawing2D.LinearGradientBrush>."}]}]}],"pos":[663,937],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Drawing.Brush\"></xref> class.","nodes":[{"pos":[0,82],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Drawing.Brush\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Drawing.Brush\"></xref> class."}],"pos":[2716,2799],"yaml":true},{"content":"When overridden in a derived class, creates an exact copy of this <xref href=\"System.Drawing.Brush\"></xref>.","nodes":[{"pos":[0,108],"content":"When overridden in a derived class, creates an exact copy of this <ph id=\"ph1\">&lt;xref href=\"System.Drawing.Brush\"&gt;&lt;/xref&gt;</ph>.","source":"When overridden in a derived class, creates an exact copy of this <xref href=\"System.Drawing.Brush\"></xref>."}],"pos":[3736,3845],"yaml":true},{"content":"The new <xref href=\"System.Drawing.Brush\"></xref> that this method creates.","nodes":[{"pos":[0,75],"content":"The new <ph id=\"ph1\">&lt;xref href=\"System.Drawing.Brush\"&gt;&lt;/xref&gt;</ph> that this method creates.","source":"The new <xref href=\"System.Drawing.Brush\"></xref> that this method creates."}],"pos":[3977,4053],"yaml":true},{"content":"Releases all resources used by this <xref href=\"System.Drawing.Brush\"></xref> object.","nodes":[{"pos":[0,85],"content":"Releases all resources used by this <ph id=\"ph1\">&lt;xref href=\"System.Drawing.Brush\"&gt;&lt;/xref&gt;</ph> object.","source":"Releases all resources used by this <xref href=\"System.Drawing.Brush\"></xref> object."}],"pos":[4940,5026],"yaml":true},{"content":"Calling <xref:System.Drawing.Brush.Dispose%2A> allows the resources used by this <xref:System.Drawing.Brush> object to be reallocated for other purposes.  \n  \n Call <xref:System.Drawing.Brush.Dispose%2A> when you are finished using the <xref:System.Drawing.Brush>. The <xref:System.Drawing.Brush.Dispose%2A> method leaves the <xref:System.Drawing.Brush> in an unusable state. After calling <xref:System.Drawing.Brush.Dispose%2A>, you must release all references to the <xref:System.Drawing.Brush> so the garbage collector can reclaim the memory that the <xref:System.Drawing.Brush> was occupying. For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  \n  \n> [!NOTE]\n>  Always call <xref:System.Drawing.Brush.Dispose%2A> before you release your last reference to the <xref:System.Drawing.Brush>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Drawing.Brush> object's `Finalize` method.","nodes":[{"pos":[0,153],"content":"Calling <xref:System.Drawing.Brush.Dispose%2A> allows the resources used by this <xref:System.Drawing.Brush> object to be reallocated for other purposes.","nodes":[{"content":"Calling <ph id=\"ph1\">&lt;xref:System.Drawing.Brush.Dispose%2A&gt;</ph> allows the resources used by this <ph id=\"ph2\">&lt;xref:System.Drawing.Brush&gt;</ph> object to be reallocated for other purposes.","pos":[0,153],"source":"Calling <xref:System.Drawing.Brush.Dispose%2A> allows the resources used by this <xref:System.Drawing.Brush> object to be reallocated for other purposes."}]},{"pos":[160,802],"content":"Call <xref:System.Drawing.Brush.Dispose%2A> when you are finished using the <xref:System.Drawing.Brush>. The <xref:System.Drawing.Brush.Dispose%2A> method leaves the <xref:System.Drawing.Brush> in an unusable state. After calling <xref:System.Drawing.Brush.Dispose%2A>, you must release all references to the <xref:System.Drawing.Brush> so the garbage collector can reclaim the memory that the <xref:System.Drawing.Brush> was occupying. For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).","nodes":[{"content":"Call <ph id=\"ph1\">&lt;xref:System.Drawing.Brush.Dispose%2A&gt;</ph> when you are finished using the <ph id=\"ph2\">&lt;xref:System.Drawing.Brush&gt;</ph>.","pos":[0,104],"source":"Call <xref:System.Drawing.Brush.Dispose%2A> when you are finished using the <xref:System.Drawing.Brush>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Drawing.Brush.Dispose%2A&gt;</ph> method leaves the <ph id=\"ph2\">&lt;xref:System.Drawing.Brush&gt;</ph> in an unusable state.","pos":[105,215],"source":" The <xref:System.Drawing.Brush.Dispose%2A> method leaves the <xref:System.Drawing.Brush> in an unusable state."},{"content":"After calling <ph id=\"ph1\">&lt;xref:System.Drawing.Brush.Dispose%2A&gt;</ph>, you must release all references to the <ph id=\"ph2\">&lt;xref:System.Drawing.Brush&gt;</ph> so the garbage collector can reclaim the memory that the <ph id=\"ph3\">&lt;xref:System.Drawing.Brush&gt;</ph> was occupying.","pos":[216,436],"source":" After calling <xref:System.Drawing.Brush.Dispose%2A>, you must release all references to the <xref:System.Drawing.Brush> so the garbage collector can reclaim the memory that the <xref:System.Drawing.Brush> was occupying."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Cleaning Up Unmanaged Resources<ept id=\"p1\">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id=\"p2\">[</bpt>Implementing a Dispose Method<ept id=\"p2\">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.","pos":[437,642],"source":" For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md)."}]},{"pos":[810,1095],"content":"[!NOTE]\n Always call <xref:System.Drawing.Brush.Dispose%2A> before you release your last reference to the <xref:System.Drawing.Brush>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Drawing.Brush> object's `Finalize` method.","leadings":["","> "],"nodes":[{"content":" Always call <xref:System.Drawing.Brush.Dispose%2A> before you release your last reference to the <xref:System.Drawing.Brush>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Drawing.Brush> object's `Finalize` method.","pos":[8,283],"nodes":[{"content":"Always call <ph id=\"ph1\">&lt;xref:System.Drawing.Brush.Dispose%2A&gt;</ph> before you release your last reference to the <ph id=\"ph2\">&lt;xref:System.Drawing.Brush&gt;</ph>.","pos":[1,126],"source":" Always call <xref:System.Drawing.Brush.Dispose%2A> before you release your last reference to the <xref:System.Drawing.Brush>."},{"content":"Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id=\"ph1\">&lt;xref:System.Drawing.Brush&gt;</ph> object's <ph id=\"ph2\">`Finalize`</ph> method.","pos":[127,275],"source":" Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Drawing.Brush> object's `Finalize` method."}]}]}],"pos":[5037,6140],"yaml":true,"extradata":"MT"},{"content":"Releases the unmanaged resources used by the <xref href=\"System.Drawing.Brush\"></xref> and optionally releases the managed resources.","nodes":[{"pos":[0,133],"content":"Releases the unmanaged resources used by the <ph id=\"ph1\">&lt;xref href=\"System.Drawing.Brush\"&gt;&lt;/xref&gt;</ph> and optionally releases the managed resources.","source":"Releases the unmanaged resources used by the <xref href=\"System.Drawing.Brush\"></xref> and optionally releases the managed resources."}],"pos":[7164,7298],"yaml":true},{"content":"This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.  \n  \n When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.Drawing.Brush> references. This method invokes the `Dispose()` method of each referenced object.","nodes":[{"pos":[0,293],"content":"This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.","nodes":[{"content":"This method is called by the public <ph id=\"ph1\">`Dispose()`</ph> method and the <ph id=\"ph2\">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.","pos":[0,103],"source":"This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method."},{"content":"<ph id=\"ph1\">`Dispose()`</ph> invokes the protected <ph id=\"ph2\">`Dispose(Boolean)`</ph> method with the <ph id=\"ph3\">`disposing`</ph> parameter set to <ph id=\"ph4\">`true`</ph>.","pos":[104,209],"source":"`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`."},{"content":"<ph id=\"ph1\">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id=\"ph2\">`Dispose`</ph> with <ph id=\"ph3\">`disposing`</ph> set to <ph id=\"ph4\">`false`</ph>.","pos":[210,293],"source":" <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`."}]},{"pos":[300,522],"content":"When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.Drawing.Brush> references. This method invokes the `Dispose()` method of each referenced object.","nodes":[{"content":"When the <ph id=\"ph1\">`disposing`</ph> parameter is true, this method releases all resources held by any managed objects that this <ph id=\"ph2\">&lt;xref:System.Drawing.Brush&gt;</ph> references.","pos":[0,152],"source":"When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.Drawing.Brush> references."},{"content":"This method invokes the <ph id=\"ph1\">`Dispose()`</ph> method of each referenced object.","pos":[153,222],"source":" This method invokes the `Dispose()` method of each referenced object."}]}],"pos":[7309,7836],"yaml":true,"extradata":"MT"},{"content":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.","nodes":[{"pos":[0,100],"content":"<ph id=\"ph1\">`true`</ph> to release both managed and unmanaged resources; <ph id=\"ph2\">`false`</ph> to release only unmanaged resources.","source":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources."}],"pos":[7990,8093],"yaml":true},{"content":"Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.","nodes":[{"pos":[0,124],"content":"Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.","nodes":[{"content":"Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.","pos":[0,124]}]}],"pos":[8988,9113],"yaml":true},{"content":"In a derived class, sets a reference to a [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] brush object.","nodes":[{"pos":[0,113],"content":"In a derived class, sets a reference to a <ph id=\"ph1\">[!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)]</ph> brush object.","source":"In a derived class, sets a reference to a [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] brush object."}],"pos":[10161,10275],"yaml":true},{"content":"A pointer to the [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] brush object.","nodes":[{"pos":[0,88],"content":"A pointer to the <ph id=\"ph1\">[!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)]</ph> brush object.","source":"A pointer to the [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] brush object."}],"pos":[10421,10510],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Drawing.Brush\n  commentId: T:System.Drawing.Brush\n  id: Brush\n  children:\n  - System.Drawing.Brush.#ctor\n  - System.Drawing.Brush.Clone\n  - System.Drawing.Brush.Dispose\n  - System.Drawing.Brush.Dispose(System.Boolean)\n  - System.Drawing.Brush.Finalize\n  - System.Drawing.Brush.SetNativeBrush(System.IntPtr)\n  langs:\n  - csharp\n  name: Brush\n  nameWithType: Brush\n  fullName: System.Drawing.Brush\n  type: Class\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Defines objects used to fill the interiors of graphical shapes such as rectangles, ellipses, pies, polygons, and paths.\n  remarks: This is an abstract base class and cannot be instantiated. To create a brush object, use classes derived from <xref:System.Drawing.Brush>, such as <xref:System.Drawing.SolidBrush>, <xref:System.Drawing.TextureBrush>, and <xref:System.Drawing.Drawing2D.LinearGradientBrush>.\n  syntax:\n    content: 'public abstract class Brush : MarshalByRefObject, ICloneable, IDisposable'\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  derivedClasses:\n  - System.Drawing.SolidBrush\n  - System.Drawing.TextureBrush\n  - System.Drawing.Drawing2D.HatchBrush\n  - System.Drawing.Drawing2D.LinearGradientBrush\n  - System.Drawing.Drawing2D.PathGradientBrush\n  implements:\n  - System.ICloneable\n  - System.IDisposable\n  inheritedMembers:\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.InitializeLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Brush.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Drawing.Brush.#ctor\n  commentId: M:System.Drawing.Brush.#ctor\n  id: '#ctor'\n  parent: System.Drawing.Brush\n  langs:\n  - csharp\n  name: Brush()\n  nameWithType: Brush.Brush()\n  fullName: Brush.Brush()\n  type: Constructor\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Initializes a new instance of the <xref href=\"System.Drawing.Brush\"></xref> class.\n  syntax:\n    content: protected Brush ();\n    parameters: []\n  overload: System.Drawing.Brush.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Brush.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Drawing.Brush.Clone\n  commentId: M:System.Drawing.Brush.Clone\n  id: Clone\n  parent: System.Drawing.Brush\n  langs:\n  - csharp\n  name: Clone()\n  nameWithType: Brush.Clone()\n  fullName: Brush.Clone()\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: When overridden in a derived class, creates an exact copy of this <xref href=\"System.Drawing.Brush\"></xref>.\n  syntax:\n    content: public abstract object Clone ();\n    parameters: []\n    return:\n      type: System.Object\n      description: The new <xref href=\"System.Drawing.Brush\"></xref> that this method creates.\n  overload: System.Drawing.Brush.Clone*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Brush.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Drawing.Brush.Dispose\n  commentId: M:System.Drawing.Brush.Dispose\n  id: Dispose\n  parent: System.Drawing.Brush\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: Brush.Dispose()\n  fullName: Brush.Dispose()\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Releases all resources used by this <xref href=\"System.Drawing.Brush\"></xref> object.\n  remarks: \"Calling <xref:System.Drawing.Brush.Dispose%2A> allows the resources used by this <xref:System.Drawing.Brush> object to be reallocated for other purposes.  \\n  \\n Call <xref:System.Drawing.Brush.Dispose%2A> when you are finished using the <xref:System.Drawing.Brush>. The <xref:System.Drawing.Brush.Dispose%2A> method leaves the <xref:System.Drawing.Brush> in an unusable state. After calling <xref:System.Drawing.Brush.Dispose%2A>, you must release all references to the <xref:System.Drawing.Brush> so the garbage collector can reclaim the memory that the <xref:System.Drawing.Brush> was occupying. For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  \\n  \\n> [!NOTE]\\n>  Always call <xref:System.Drawing.Brush.Dispose%2A> before you release your last reference to the <xref:System.Drawing.Brush>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Drawing.Brush> object's `Finalize` method.\"\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Drawing.Brush.Dispose*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Brush.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Drawing.Brush.Dispose(System.Boolean)\n  commentId: M:System.Drawing.Brush.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Drawing.Brush\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: Brush.Dispose(Boolean)\n  fullName: Brush.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Releases the unmanaged resources used by the <xref href=\"System.Drawing.Brush\"></xref> and optionally releases the managed resources.\n  remarks: \"This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.  \\n  \\n When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.Drawing.Brush> references. This method invokes the `Dispose()` method of each referenced object.\"\n  syntax:\n    content: protected virtual void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: '`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.'\n  overload: System.Drawing.Brush.Dispose*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Brush.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Drawing.Brush.Finalize\n  commentId: M:System.Drawing.Brush.Finalize\n  id: Finalize\n  parent: System.Drawing.Brush\n  langs:\n  - csharp\n  name: Finalize()\n  nameWithType: Brush.Finalize()\n  fullName: Brush.Finalize()\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.\n  syntax:\n    content: ~Brush ();\n    parameters: []\n  overload: System.Drawing.Brush.Finalize*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Brush.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Drawing.Brush.SetNativeBrush(System.IntPtr)\n  commentId: M:System.Drawing.Brush.SetNativeBrush(System.IntPtr)\n  id: SetNativeBrush(System.IntPtr)\n  parent: System.Drawing.Brush\n  langs:\n  - csharp\n  name: SetNativeBrush(IntPtr)\n  nameWithType: Brush.SetNativeBrush(IntPtr)\n  fullName: Brush.SetNativeBrush(IntPtr)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: In a derived class, sets a reference to a [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] brush object.\n  syntax:\n    content: protected void SetNativeBrush (IntPtr brush);\n    parameters:\n    - id: brush\n      type: System.IntPtr\n      description: A pointer to the [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] brush object.\n  overload: System.Drawing.Brush.SetNativeBrush*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Brush.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.MarshalByRefObject\n  parent: System\n  isExternal: false\n  name: MarshalByRefObject\n  nameWithType: MarshalByRefObject\n  fullName: System.MarshalByRefObject\n- uid: System.Drawing.Brush.#ctor\n  parent: System.Drawing.Brush\n  isExternal: false\n  name: Brush()\n  nameWithType: Brush.Brush()\n  fullName: Brush.Brush()\n- uid: System.Drawing.Brush.Clone\n  parent: System.Drawing.Brush\n  isExternal: false\n  name: Clone()\n  nameWithType: Brush.Clone()\n  fullName: Brush.Clone()\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Drawing.Brush.Dispose\n  parent: System.Drawing.Brush\n  isExternal: false\n  name: Dispose()\n  nameWithType: Brush.Dispose()\n  fullName: Brush.Dispose()\n- uid: System.Drawing.Brush.Dispose(System.Boolean)\n  parent: System.Drawing.Brush\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: Brush.Dispose(Boolean)\n  fullName: Brush.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Drawing.Brush.Finalize\n  parent: System.Drawing.Brush\n  isExternal: false\n  name: Finalize()\n  nameWithType: Brush.Finalize()\n  fullName: Brush.Finalize()\n- uid: System.Drawing.Brush.SetNativeBrush(System.IntPtr)\n  parent: System.Drawing.Brush\n  isExternal: false\n  name: SetNativeBrush(IntPtr)\n  nameWithType: Brush.SetNativeBrush(IntPtr)\n  fullName: Brush.SetNativeBrush(IntPtr)\n- uid: System.IntPtr\n  parent: System\n  isExternal: false\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.Drawing.Brush.#ctor*\n  parent: System.Drawing.Brush\n  isExternal: false\n  name: Brush\n  nameWithType: Brush.Brush\n  fullName: Brush.Brush\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Brush.xml\n- uid: System.Drawing.Brush.Clone*\n  parent: System.Drawing.Brush\n  isExternal: false\n  name: Clone\n  nameWithType: Brush.Clone\n  fullName: Brush.Clone\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Brush.xml\n- uid: System.Drawing.Brush.Dispose*\n  parent: System.Drawing.Brush\n  isExternal: false\n  name: Dispose\n  nameWithType: Brush.Dispose\n  fullName: Brush.Dispose\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Brush.xml\n- uid: System.Drawing.Brush.Finalize*\n  parent: System.Drawing.Brush\n  isExternal: false\n  name: Finalize\n  nameWithType: Brush.Finalize\n  fullName: Brush.Finalize\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Brush.xml\n- uid: System.Drawing.Brush.SetNativeBrush*\n  parent: System.Drawing.Brush\n  isExternal: false\n  name: SetNativeBrush\n  nameWithType: Brush.SetNativeBrush\n  fullName: Brush.SetNativeBrush\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Drawing/Brush.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.MarshalByRefObject.CreateObjRef(System.Type)\n  parent: System.MarshalByRefObject\n  isExternal: false\n  name: CreateObjRef(Type)\n  nameWithType: MarshalByRefObject.CreateObjRef(Type)\n  fullName: MarshalByRefObject.CreateObjRef(Type)\n- uid: System.MarshalByRefObject.GetLifetimeService\n  parent: System.MarshalByRefObject\n  isExternal: false\n  name: GetLifetimeService()\n  nameWithType: MarshalByRefObject.GetLifetimeService()\n  fullName: MarshalByRefObject.GetLifetimeService()\n- uid: System.MarshalByRefObject.InitializeLifetimeService\n  parent: System.MarshalByRefObject\n  isExternal: false\n  name: InitializeLifetimeService()\n  nameWithType: MarshalByRefObject.InitializeLifetimeService()\n  fullName: MarshalByRefObject.InitializeLifetimeService()\n- uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  parent: System.MarshalByRefObject\n  isExternal: false\n  name: MemberwiseClone(Boolean)\n  nameWithType: MarshalByRefObject.MemberwiseClone(Boolean)\n  fullName: MarshalByRefObject.MemberwiseClone(Boolean)\n- uid: System.ICloneable\n  parent: System\n  isExternal: false\n  name: ICloneable\n  nameWithType: ICloneable\n  fullName: System.ICloneable\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  nameWithType: IDisposable\n  fullName: System.IDisposable\n"}