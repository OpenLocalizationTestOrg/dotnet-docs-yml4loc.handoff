{"nodes":[{"content":"Provides a safe handle that represents a view of a block of unmanaged memory for random access.","nodes":[{"pos":[0,95],"content":"Provides a safe handle that represents a view of a block of unmanaged memory for random access.","nodes":[{"content":"Provides a safe handle that represents a view of a block of unmanaged memory for random access.","pos":[0,95]}]}],"pos":[595,691],"yaml":true},{"content":"Use the <xref:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.SafeMemoryMappedViewHandle%2A?displayProperty=fullName> property to obtain the safe handle.  \n  \n> [!IMPORTANT]\n>  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.","nodes":[{"pos":[0,158],"content":"Use the <xref:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.SafeMemoryMappedViewHandle%2A?displayProperty=fullName> property to obtain the safe handle.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.SafeMemoryMappedViewHandle%2A?displayProperty=fullName&gt;</ph> property to obtain the safe handle.","pos":[0,158],"source":"Use the <xref:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.SafeMemoryMappedViewHandle%2A?displayProperty=fullName> property to obtain the safe handle."}]},{"pos":[166,692],"content":"[!IMPORTANT]\n This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.","leadings":["","> "],"nodes":[{"content":" This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.","pos":[13,524],"nodes":[{"content":"This type implements the <ph id=\"ph1\">&lt;xref:System.IDisposable&gt;</ph> interface.","pos":[1,62],"source":" This type implements the <xref:System.IDisposable> interface."},{"content":"When you have finished using the type, you should dispose of it either directly or indirectly.","pos":[63,157]},{"content":"To dispose of the type directly, call its <ph id=\"ph1\">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id=\"ph2\">`try`</ph><ph id=\"ph3\">/</ph><ph id=\"ph4\">`catch`</ph> block.","pos":[158,269],"source":" To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block."},{"content":"To dispose of it indirectly, use a language construct such as <ph id=\"ph1\">`using`</ph> (in C#) or <ph id=\"ph2\">`Using`</ph> (in Visual Basic).","pos":[270,377],"source":" To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic)."},{"content":"For more information, see the \"Using an Object that Implements IDisposable\" section in the <ph id=\"ph1\">&lt;xref:System.IDisposable&gt;</ph> interface topic.","pos":[378,511],"source":" For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic."}]}]}],"pos":[702,1402],"yaml":true,"extradata":"MT"}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle\n  commentId: T:Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle\n  id: SafeMemoryMappedViewHandle\n  children:\n  - Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle.ReleaseHandle\n  langs:\n  - csharp\n  name: SafeMemoryMappedViewHandle\n  nameWithType: SafeMemoryMappedViewHandle\n  fullName: Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle\n  type: Class\n  assemblies:\n  - System.IO.MemoryMappedFiles\n  - System.Core\n  - netstandard\n  namespace: Microsoft.Win32.SafeHandles\n  summary: Provides a safe handle that represents a view of a block of unmanaged memory for random access.\n  remarks: \"Use the <xref:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.SafeMemoryMappedViewHandle%2A?displayProperty=fullName> property to obtain the safe handle.  \\n  \\n> [!IMPORTANT]\\n>  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \\\"Using an Object that Implements IDisposable\\\" section in the <xref:System.IDisposable> interface topic.\"\n  syntax:\n    content: 'public sealed class SafeMemoryMappedViewHandle : System.Runtime.InteropServices.SafeBuffer'\n  inheritance:\n  - System.Object\n  - System.Runtime.InteropServices.SafeHandle\n  - System.Runtime.InteropServices.SafeBuffer\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)\n  - System.Runtime.InteropServices.SafeBuffer.ByteLength\n  - System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)\n  - System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt64)\n  - System.Runtime.InteropServices.SafeBuffer.Initialize``1(System.UInt32)\n  - System.Runtime.InteropServices.SafeBuffer.IsInvalid\n  - System.Runtime.InteropServices.SafeBuffer.Read``1(System.UInt64)\n  - System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)\n  - System.Runtime.InteropServices.SafeBuffer.ReleasePointer\n  - System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)\n  - System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)\n  - System.Runtime.InteropServices.SafeHandle.Close\n  - System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)\n  - System.Runtime.InteropServices.SafeHandle.DangerousGetHandle\n  - System.Runtime.InteropServices.SafeHandle.DangerousRelease\n  - System.Runtime.InteropServices.SafeHandle.Dispose\n  - System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)\n  - System.Runtime.InteropServices.SafeHandle.handle\n  - System.Runtime.InteropServices.SafeHandle.IsClosed\n  - System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)\n  - System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32.SafeHandles/SafeMemoryMappedViewHandle.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle.ReleaseHandle\n  commentId: M:Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle.ReleaseHandle\n  id: ReleaseHandle\n  parent: Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle\n  langs:\n  - csharp\n  name: ReleaseHandle()\n  nameWithType: SafeMemoryMappedViewHandle.ReleaseHandle()\n  fullName: SafeMemoryMappedViewHandle.ReleaseHandle()\n  type: Method\n  assemblies:\n  - System.IO.MemoryMappedFiles\n  - System.Core\n  - netstandard\n  namespace: Microsoft.Win32.SafeHandles\n  syntax:\n    content: protected override bool ReleaseHandle ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: ''\n  overload: Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle.ReleaseHandle*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32.SafeHandles/SafeMemoryMappedViewHandle.xml\nreferences:\n- uid: System.Runtime.InteropServices.SafeBuffer\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: SafeBuffer\n  nameWithType: SafeBuffer\n  fullName: System.Runtime.InteropServices.SafeBuffer\n- uid: Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle.ReleaseHandle\n  parent: Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle\n  isExternal: false\n  name: ReleaseHandle()\n  nameWithType: SafeMemoryMappedViewHandle.ReleaseHandle()\n  fullName: SafeMemoryMappedViewHandle.ReleaseHandle()\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle.ReleaseHandle*\n  parent: Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle\n  isExternal: false\n  name: ReleaseHandle\n  nameWithType: SafeMemoryMappedViewHandle.ReleaseHandle\n  fullName: SafeMemoryMappedViewHandle.ReleaseHandle\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32.SafeHandles/SafeMemoryMappedViewHandle.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Runtime.InteropServices.SafeHandle.Close\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: Close()\n  nameWithType: SafeHandle.Close()\n  fullName: SafeHandle.Close()\n- uid: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: DangerousAddRef(Boolean)\n  nameWithType: SafeHandle.DangerousAddRef(Boolean)\n  fullName: SafeHandle.DangerousAddRef(Boolean)\n- uid: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: DangerousGetHandle()\n  nameWithType: SafeHandle.DangerousGetHandle()\n  fullName: SafeHandle.DangerousGetHandle()\n- uid: System.Runtime.InteropServices.SafeHandle.DangerousRelease\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: DangerousRelease()\n  nameWithType: SafeHandle.DangerousRelease()\n  fullName: SafeHandle.DangerousRelease()\n- uid: System.Runtime.InteropServices.SafeHandle.Dispose\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: Dispose()\n  nameWithType: SafeHandle.Dispose()\n  fullName: SafeHandle.Dispose()\n- uid: System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: SafeHandle.Dispose(Boolean)\n  fullName: SafeHandle.Dispose(Boolean)\n- uid: System.Runtime.InteropServices.SafeHandle.handle\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: handle\n  nameWithType: SafeHandle.handle\n  fullName: SafeHandle.handle\n- uid: System.Runtime.InteropServices.SafeHandle.IsClosed\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: IsClosed\n  nameWithType: SafeHandle.IsClosed\n  fullName: SafeHandle.IsClosed\n- uid: System.Runtime.InteropServices.SafeBuffer.IsInvalid\n  parent: System.Runtime.InteropServices.SafeBuffer\n  isExternal: false\n  name: IsInvalid\n  nameWithType: SafeBuffer.IsInvalid\n  fullName: SafeBuffer.IsInvalid\n- uid: System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: SetHandle(IntPtr)\n  nameWithType: SafeHandle.SetHandle(IntPtr)\n  fullName: SafeHandle.SetHandle(IntPtr)\n- uid: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: SetHandleAsInvalid()\n  nameWithType: SafeHandle.SetHandleAsInvalid()\n  fullName: SafeHandle.SetHandleAsInvalid()\n- uid: System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)\n  parent: System.Runtime.InteropServices.SafeBuffer\n  isExternal: false\n  name: AcquirePointer(Byte*)\n  nameWithType: SafeBuffer.AcquirePointer(Byte*)\n  fullName: SafeBuffer.AcquirePointer(Byte*)\n- uid: System.Runtime.InteropServices.SafeBuffer.ByteLength\n  parent: System.Runtime.InteropServices.SafeBuffer\n  isExternal: false\n  name: ByteLength\n  nameWithType: SafeBuffer.ByteLength\n  fullName: SafeBuffer.ByteLength\n- uid: System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt64)\n  parent: System.Runtime.InteropServices.SafeBuffer\n  isExternal: false\n  name: Initialize(UInt64)\n  nameWithType: SafeBuffer.Initialize(UInt64)\n  fullName: SafeBuffer.Initialize(UInt64)\n- uid: System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)\n  parent: System.Runtime.InteropServices.SafeBuffer\n  isExternal: false\n  name: Initialize(UInt32, UInt32)\n  nameWithType: SafeBuffer.Initialize(UInt32, UInt32)\n  fullName: SafeBuffer.Initialize(UInt32, UInt32)\n- uid: System.Runtime.InteropServices.SafeBuffer.Initialize``1(System.UInt32)\n  parent: System.Runtime.InteropServices.SafeBuffer\n  isExternal: false\n  name: Initialize<T>(UInt32)\n  nameWithType: SafeBuffer.Initialize<T>(UInt32)\n  fullName: SafeBuffer.Initialize<T>(UInt32)\n- uid: System.Runtime.InteropServices.SafeBuffer.Read``1(System.UInt64)\n  parent: System.Runtime.InteropServices.SafeBuffer\n  isExternal: false\n  name: Read<T>(UInt64)\n  nameWithType: SafeBuffer.Read<T>(UInt64)\n  fullName: SafeBuffer.Read<T>(UInt64)\n- uid: System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)\n  parent: System.Runtime.InteropServices.SafeBuffer\n  isExternal: false\n  name: ReadArray<T>(UInt64, T[], Int32, Int32)\n  nameWithType: SafeBuffer.ReadArray<T>(UInt64, T[], Int32, Int32)\n  fullName: SafeBuffer.ReadArray<T>(UInt64, T[], Int32, Int32)\n- uid: System.Runtime.InteropServices.SafeBuffer.ReleasePointer\n  parent: System.Runtime.InteropServices.SafeBuffer\n  isExternal: false\n  name: ReleasePointer()\n  nameWithType: SafeBuffer.ReleasePointer()\n  fullName: SafeBuffer.ReleasePointer()\n- uid: System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)\n  parent: System.Runtime.InteropServices.SafeBuffer\n  isExternal: false\n  name: Write<T>(UInt64, T)\n  nameWithType: SafeBuffer.Write<T>(UInt64, T)\n  fullName: SafeBuffer.Write<T>(UInt64, T)\n- uid: System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)\n  parent: System.Runtime.InteropServices.SafeBuffer\n  isExternal: false\n  name: WriteArray<T>(UInt64, T[], Int32, Int32)\n  nameWithType: SafeBuffer.WriteArray<T>(UInt64, T[], Int32, Int32)\n  fullName: SafeBuffer.WriteArray<T>(UInt64, T[], Int32, Int32)\n"}