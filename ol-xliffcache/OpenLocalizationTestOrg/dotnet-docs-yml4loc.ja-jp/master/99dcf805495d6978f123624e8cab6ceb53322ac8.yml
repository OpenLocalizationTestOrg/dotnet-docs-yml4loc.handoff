### YamlMime:ManagedReference
items:
- uid: System.Xml.Linq.XContainer
  commentId: T:System.Xml.Linq.XContainer
  id: XContainer
  children:
  - System.Xml.Linq.XContainer.Add(System.Object)
  - System.Xml.Linq.XContainer.Add(System.Object[])
  - System.Xml.Linq.XContainer.AddFirst(System.Object)
  - System.Xml.Linq.XContainer.AddFirst(System.Object[])
  - System.Xml.Linq.XContainer.CreateWriter
  - System.Xml.Linq.XContainer.DescendantNodes
  - System.Xml.Linq.XContainer.Descendants
  - System.Xml.Linq.XContainer.Descendants(System.Xml.Linq.XName)
  - System.Xml.Linq.XContainer.Element(System.Xml.Linq.XName)
  - System.Xml.Linq.XContainer.Elements
  - System.Xml.Linq.XContainer.Elements(System.Xml.Linq.XName)
  - System.Xml.Linq.XContainer.FirstNode
  - System.Xml.Linq.XContainer.LastNode
  - System.Xml.Linq.XContainer.Nodes
  - System.Xml.Linq.XContainer.RemoveNodes
  - System.Xml.Linq.XContainer.ReplaceNodes(System.Object)
  - System.Xml.Linq.XContainer.ReplaceNodes(System.Object[])
  langs:
  - csharp
  name: XContainer
  nameWithType: XContainer
  fullName: System.Xml.Linq.XContainer
  type: Class
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Represents a node that can contain other nodes.
  remarks: "This class provides functionality such as finding the next or previous sibling node, or enumerating the direct children of a node.  \n  \n The two classes that derive from <xref:System.Xml.Linq.XContainer> are <xref:System.Xml.Linq.XDocument> and <xref:System.Xml.Linq.XElement>."
  syntax:
    content: 'public abstract class XContainer : System.Xml.Linq.XNode'
  inheritance:
  - System.Object
  - System.Xml.Linq.XObject
  - System.Xml.Linq.XNode
  derivedClasses:
  - System.Xml.Linq.XDocument
  - System.Xml.Linq.XElement
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Xml.Linq.XNode.AddAfterSelf(System.Object)
  - System.Xml.Linq.XNode.AddAfterSelf(System.Object[])
  - System.Xml.Linq.XNode.AddBeforeSelf(System.Object)
  - System.Xml.Linq.XNode.AddBeforeSelf(System.Object[])
  - System.Xml.Linq.XNode.Ancestors
  - System.Xml.Linq.XNode.Ancestors(System.Xml.Linq.XName)
  - System.Xml.Linq.XNode.CompareDocumentOrder(System.Xml.Linq.XNode,System.Xml.Linq.XNode)
  - System.Xml.Linq.XNode.CreateReader
  - System.Xml.Linq.XNode.CreateReader(System.Xml.Linq.ReaderOptions)
  - System.Xml.Linq.XNode.DeepEquals(System.Xml.Linq.XNode,System.Xml.Linq.XNode)
  - System.Xml.Linq.XNode.DocumentOrderComparer
  - System.Xml.Linq.XNode.ElementsAfterSelf
  - System.Xml.Linq.XNode.ElementsAfterSelf(System.Xml.Linq.XName)
  - System.Xml.Linq.XNode.ElementsBeforeSelf
  - System.Xml.Linq.XNode.ElementsBeforeSelf(System.Xml.Linq.XName)
  - System.Xml.Linq.XNode.EqualityComparer
  - System.Xml.Linq.XNode.IsAfter(System.Xml.Linq.XNode)
  - System.Xml.Linq.XNode.IsBefore(System.Xml.Linq.XNode)
  - System.Xml.Linq.XNode.NextNode
  - System.Xml.Linq.XNode.NodesAfterSelf
  - System.Xml.Linq.XNode.NodesBeforeSelf
  - System.Xml.Linq.XNode.PreviousNode
  - System.Xml.Linq.XNode.ReadFrom(System.Xml.XmlReader)
  - System.Xml.Linq.XNode.ReadFromAsync(System.Xml.XmlReader,System.Threading.CancellationToken)
  - System.Xml.Linq.XNode.Remove
  - System.Xml.Linq.XNode.ReplaceWith(System.Object)
  - System.Xml.Linq.XNode.ReplaceWith(System.Object[])
  - System.Xml.Linq.XNode.ToString
  - System.Xml.Linq.XNode.ToString(System.Xml.Linq.SaveOptions)
  - System.Xml.Linq.XNode.WriteTo(System.Xml.XmlWriter)
  - System.Xml.Linq.XNode.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)
  - System.Xml.Linq.XObject.AddAnnotation(System.Object)
  - System.Xml.Linq.XObject.Annotation(System.Type)
  - System.Xml.Linq.XObject.Annotation``1
  - System.Xml.Linq.XObject.Annotations(System.Type)
  - System.Xml.Linq.XObject.Annotations``1
  - System.Xml.Linq.XObject.BaseUri
  - System.Xml.Linq.XObject.Changed
  - System.Xml.Linq.XObject.Changing
  - System.Xml.Linq.XObject.Document
  - System.Xml.Linq.XObject.NodeType
  - System.Xml.Linq.XObject.Parent
  - System.Xml.Linq.XObject.RemoveAnnotations(System.Type)
  - System.Xml.Linq.XObject.RemoveAnnotations``1
  - System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#HasLineInfo
  - System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LineNumber
  - System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LinePosition
  extensionMethods:
  - System.Xml.XPath.Extensions.CreateNavigator(System.Xml.Linq.XNode)
  - System.Xml.XPath.Extensions.CreateNavigator(System.Xml.Linq.XNode,System.Xml.XmlNameTable)
  - System.Xml.XPath.Extensions.XPathEvaluate(System.Xml.Linq.XNode,System.String)
  - System.Xml.XPath.Extensions.XPathEvaluate(System.Xml.Linq.XNode,System.String,System.Xml.IXmlNamespaceResolver)
  - System.Xml.XPath.Extensions.XPathSelectElement(System.Xml.Linq.XNode,System.String)
  - System.Xml.XPath.Extensions.XPathSelectElement(System.Xml.Linq.XNode,System.String,System.Xml.IXmlNamespaceResolver)
  - System.Xml.XPath.Extensions.XPathSelectElements(System.Xml.Linq.XNode,System.String)
  - System.Xml.XPath.Extensions.XPathSelectElements(System.Xml.Linq.XNode,System.String,System.Xml.IXmlNamespaceResolver)
  - System.Xml.XPath.XDocumentExtensions.ToXPathNavigable(System.Xml.Linq.XNode)
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XContainer.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XContainer.Add(System.Object)
  commentId: M:System.Xml.Linq.XContainer.Add(System.Object)
  id: Add(System.Object)
  parent: System.Xml.Linq.XContainer
  langs:
  - csharp
  name: Add(Object)
  nameWithType: XContainer.Add(Object)
  fullName: XContainer.Add(Object)
  type: Method
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Adds the specified content as children of this <xref href="System.Xml.Linq.XContainer"></xref>.
  remarks: "This method adds the new content after the existing content of the <xref:System.Xml.Linq.XContainer>.  \n  \n For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).  \n  \n This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events."
  example:
  - "The following example creates two XML trees, and then uses this method to add an <xref:System.Xml.Linq.XElement> object to one of them. It also adds the results of a [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] query to the XML tree.  \n  \n```csharp  \n  \n                XElement srcTree = new XElement(\"Root\",  \n    new XElement(\"Element1\", 1),  \n    new XElement(\"Element2\", 2),  \n    new XElement(\"Element3\", 3),  \n    new XElement(\"Element4\", 4),  \n    new XElement(\"Element5\", 5)  \n);  \nXElement xmlTree = new XElement(\"Root\",  \n    new XElement(\"Child1\", 1),  \n    new XElement(\"Child2\", 2),  \n    new XElement(\"Child3\", 3),  \n    new XElement(\"Child4\", 4),  \n    new XElement(\"Child5\", 5)  \n);  \nxmlTree.Add(new XElement(\"NewChild\", \"new content\"));  \nxmlTree.Add(  \n    from el in srcTree.Elements()  \n    where (int)el > 3  \n    select el  \n);  \n// Even though Child9 does not exist in srcTree, the following statement will not  \n// throw an exception, and nothing will be added to xmlTree.  \nxmlTree.Add(srcTree.Element(\"Child9\"));  \nConsole.WriteLine(xmlTree);  \n```  \n  \n```vb  \n  \n                Dim srcTree As XElement = _   \n        <Root>  \n            <Element1>1</Element1>  \n            <Element2>2</Element2>  \n            <Element3>3</Element3>  \n            <Element4>4</Element4>  \n            <Element5>5</Element5>  \n        </Root>  \n  \nDim xmlTree As XElement = _   \n        <Root>  \n            <Child1>1</Child1>  \n            <Child2>2</Child2>  \n            <Child3>3</Child3>  \n            <Child4>4</Child4>  \n            <Child5>5</Child5>  \n        </Root>  \n  \nxmlTree.Add(New XElement(\"NewChild\", \"new content\"))  \nxmlTree.Add( _  \n    From el In srcTree.Elements() _  \n    Where CInt(el) > 3 _  \n    Select el _  \n)  \n' Even though Child9 does not exist in srcTree, the following statement will not  \n' throw an exception, and nothing will be added to xmlTree.  \nxmlTree.Add(srcTree.<Child9>)  \nConsole.WriteLine(xmlTree)  \n  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n  \n                <Root>  \n  <Child1>1</Child1>  \n  <Child2>2</Child2>  \n  <Child3>3</Child3>  \n  <Child4>4</Child4>  \n  <Child5>5</Child5>  \n  <NewChild>new content</NewChild>  \n  <Element4>4</Element4>  \n  <Element5>5</Element5>  \n</Root>  \n```"
  syntax:
    content: public void Add (object content);
    parameters:
    - id: content
      type: System.Object
      description: A content object containing simple content or a collection of content objects to be added.
  overload: System.Xml.Linq.XContainer.Add*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XContainer.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XContainer.Add(System.Object[])
  commentId: M:System.Xml.Linq.XContainer.Add(System.Object[])
  id: Add(System.Object[])
  parent: System.Xml.Linq.XContainer
  langs:
  - csharp
  name: Add(Object[])
  nameWithType: XContainer.Add(Object[])
  fullName: XContainer.Add(Object[])
  type: Method
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Adds the specified content as children of this <xref href="System.Xml.Linq.XContainer"></xref>.
  remarks: "This method adds the new content after the existing content of the <xref:System.Xml.Linq.XContainer>.  \n  \n For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).  \n  \n This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events."
  example:
  - "The following example creates two XML trees, uses this method to add an <xref:System.Xml.Linq.XElement> object to one of them. It also adds the results of a [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] query to the XML tree.  \n  \n```csharp  \n  \n                XElement srcTree = new XElement(\"Root\",  \n    new XElement(\"Element1\", 1),  \n    new XElement(\"Element2\", 2),  \n    new XElement(\"Element3\", 3),  \n    new XElement(\"Element4\", 4),  \n    new XElement(\"Element5\", 5)  \n);  \nXElement xmlTree = new XElement(\"Root\",  \n    new XElement(\"Child1\", 1),  \n    new XElement(\"Child2\", 2),  \n    new XElement(\"Child3\", 3),  \n    new XElement(\"Child4\", 4),  \n    new XElement(\"Child5\", 5)  \n);  \nxmlTree.Add(new XElement(\"NewChild\", \"new content\"));  \nxmlTree.Add(  \n    from el in srcTree.Elements()  \n    where (int)el > 3  \n    select el  \n);  \n// Even though Child9 does not exist in srcTree, the following statement will not  \n// throw an exception, and nothing will be added to xmlTree  \nxmlTree.Add(srcTree.Element(\"Child9\"));  \nConsole.WriteLine(xmlTree);  \n```  \n  \n```vb  \n  \n                Dim srcTree As XElement = _   \n        <Root>  \n            <Element1>1</Element1>  \n            <Element2>2</Element2>  \n            <Element3>3</Element3>  \n            <Element4>4</Element4>  \n            <Element5>5</Element5>  \n        </Root>  \n  \nDim xmlTree As XElement = _  \n        <Root>  \n            <Child1>1</Child1>  \n            <Child2>2</Child2>  \n            <Child3>3</Child3>  \n            <Child4>4</Child4>  \n            <Child5>5</Child5>  \n        </Root>  \n  \nxmlTree.Add(New XElement(\"NewChild\", \"new content\"))  \nxmlTree.Add( _  \n    From el In srcTree.Elements() _  \n    Where CInt(el) > 3 _  \n    Select el _  \n)  \n' Even though Child9 does not exist in srcTree, the following statement will not  \n' throw an exception, and nothing will be added to xmlTree  \nxmlTree.Add(srcTree.<Child9>)  \nConsole.WriteLine(xmlTree)  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n  \n                <Root>  \n  <Child1>1</Child1>  \n  <Child2>2</Child2>  \n  <Child3>3</Child3>  \n  <Child4>4</Child4>  \n  <Child5>5</Child5>  \n  <NewChild>new content</NewChild>  \n  <Element4>4</Element4>  \n  <Element5>5</Element5>  \n</Root>  \n```"
  syntax:
    content: public void Add (object[] content);
    parameters:
    - id: content
      type: System.Object[]
      description: A parameter list of content objects.
  overload: System.Xml.Linq.XContainer.Add*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XContainer.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XContainer.AddFirst(System.Object)
  commentId: M:System.Xml.Linq.XContainer.AddFirst(System.Object)
  id: AddFirst(System.Object)
  parent: System.Xml.Linq.XContainer
  langs:
  - csharp
  name: AddFirst(Object)
  nameWithType: XContainer.AddFirst(Object)
  fullName: XContainer.AddFirst(Object)
  type: Method
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Adds the specified content as the first children of this document or element.
  remarks: "This method adds the new content before the existing content of the <xref:System.Xml.Linq.XContainer>.  \n  \n For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).  \n  \n This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events."
  example:
  - "The following example creates two XML trees, uses this method to add an <xref:System.Xml.Linq.XElement> object as the first element to one of them. It also adds the results of a [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] query to the XML tree.  \n  \n```csharp  \n  \n                XElement srcTree = new XElement(\"Root\",  \n    new XElement(\"Element1\", 1),  \n    new XElement(\"Element2\", 2),  \n    new XElement(\"Element3\", 3),  \n    new XElement(\"Element4\", 4),  \n    new XElement(\"Element5\", 5)  \n);  \nXElement xmlTree = new XElement(\"Root\",  \n    new XElement(\"Child1\", 1),  \n    new XElement(\"Child2\", 2),  \n    new XElement(\"Child3\", 3),  \n    new XElement(\"Child4\", 4),  \n    new XElement(\"Child5\", 5)  \n);  \nxmlTree.AddFirst(new XElement(\"NewChild\", \"new content\"));  \nxmlTree.AddFirst(  \n    from el in srcTree.Elements()  \n    where (int)el > 3  \n    select el  \n);  \n// Even though Child9 does not exist in srcTree, the following statement will not  \n// throw an exception, and nothing will be added to xmlTree  \nxmlTree.AddFirst(srcTree.Element(\"Child9\"));  \nConsole.WriteLine(xmlTree);  \n```  \n  \n```vb  \n  \n                Dim srcTree As XElement = _   \n        <Root>  \n            <Element1>1</Element1>  \n            <Element2>2</Element2>  \n            <Element3>3</Element3>  \n            <Element4>4</Element4>  \n            <Element5>5</Element5>  \n        </Root>  \n  \nDim xmlTree As XElement = _   \n        <Root>  \n            <Child1>1</Child1>  \n            <Child2>2</Child2>  \n            <Child3>3</Child3>  \n            <Child4>4</Child4>  \n            <Child5>5</Child5>  \n        </Root>  \n  \nxmlTree.AddFirst(New XElement(\"NewChild\", \"new content\"))  \nxmlTree.AddFirst( _  \n    From el In srcTree.Elements() _  \n    Where CInt(el) > 3 _  \n    Select el _  \n)  \n' Even though Child9 does not exist in srcTree, the following statement will not  \n' throw an exception, and nothing will be added to xmlTree  \nxmlTree.AddFirst(srcTree.<Child9>)  \nConsole.WriteLine(xmlTree)  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n  \n                <Root>  \n  <Element4>4</Element4>  \n  <Element5>5</Element5>  \n  <NewChild>new content</NewChild>  \n  <Child1>1</Child1>  \n  <Child2>2</Child2>  \n  <Child3>3</Child3>  \n  <Child4>4</Child4>  \n  <Child5>5</Child5>  \n</Root>  \n```"
  syntax:
    content: public void AddFirst (object content);
    parameters:
    - id: content
      type: System.Object
      description: A content object containing simple content or a collection of content objects to be added.
  overload: System.Xml.Linq.XContainer.AddFirst*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XContainer.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XContainer.AddFirst(System.Object[])
  commentId: M:System.Xml.Linq.XContainer.AddFirst(System.Object[])
  id: AddFirst(System.Object[])
  parent: System.Xml.Linq.XContainer
  langs:
  - csharp
  name: AddFirst(Object[])
  nameWithType: XContainer.AddFirst(Object[])
  fullName: XContainer.AddFirst(Object[])
  type: Method
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Adds the specified content as the first children of this document or element.
  remarks: "This method adds the new content before the existing content of the <xref:System.Xml.Linq.XContainer>.  \n  \n For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).  \n  \n This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events."
  example:
  - "The following example creates two XML trees, and uses this method to add an <xref:System.Xml.Linq.XElement> object as the first element to one of them. It also adds the results of a [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] query to the XML tree.  \n  \n```csharp  \n  \n                XElement srcTree = new XElement(\"Root\",  \n    new XElement(\"Element1\", 1),  \n    new XElement(\"Element2\", 2),  \n    new XElement(\"Element3\", 3),  \n    new XElement(\"Element4\", 4),  \n    new XElement(\"Element5\", 5)  \n);  \nXElement xmlTree = new XElement(\"Root\",  \n    new XElement(\"Child1\", 1),  \n    new XElement(\"Child2\", 2),  \n    new XElement(\"Child3\", 3),  \n    new XElement(\"Child4\", 4),  \n    new XElement(\"Child5\", 5)  \n);  \nxmlTree.AddFirst(new XElement(\"NewChild\", \"new content\"));  \nxmlTree.AddFirst(  \n    from el in srcTree.Elements()  \n    where (int)el > 3  \n    select el  \n);  \n// Even though Child9 does not exist in srcTree, the following statement will not  \n// throw an exception, and nothing will be added to xmlTree.  \nxmlTree.AddFirst(srcTree.Element(\"Child9\"));  \nConsole.WriteLine(xmlTree);  \n```  \n  \n```vb  \n  \n                Dim srcTree As XElement = _   \n        <Root>  \n            <Element1>1</Element1>  \n            <Element2>2</Element2>  \n            <Element3>3</Element3>  \n            <Element4>4</Element4>  \n            <Element5>5</Element5>  \n        </Root>  \n  \nDim xmlTree As XElement = _   \n        <Root>  \n            <Child1>1</Child1>  \n            <Child2>2</Child2>  \n            <Child3>3</Child3>  \n            <Child4>4</Child4>  \n            <Child5>5</Child5>  \n        </Root>  \n  \nxmlTree.AddFirst(New XElement(\"NewChild\", \"new content\"))  \nxmlTree.AddFirst( _  \n    From el In srcTree.Elements() _  \n    Where CInt(el) > 3 _  \n    Select el _  \n)  \n' Even though Child9 does not exist in srcTree, the following statement will not  \n' throw an exception, and nothing will be added to xmlTree.  \nxmlTree.AddFirst(srcTree.<Child9>)  \nConsole.WriteLine(xmlTree)  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n  \n                <Root>  \n  <Element4>4</Element4>  \n  <Element5>5</Element5>  \n  <NewChild>new content</NewChild>  \n  <Child1>1</Child1>  \n  <Child2>2</Child2>  \n  <Child3>3</Child3>  \n  <Child4>4</Child4>  \n  <Child5>5</Child5>  \n</Root>  \n```"
  syntax:
    content: public void AddFirst (object[] content);
    parameters:
    - id: content
      type: System.Object[]
      description: A parameter list of content objects.
  overload: System.Xml.Linq.XContainer.AddFirst*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The parent is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XContainer.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XContainer.CreateWriter
  commentId: M:System.Xml.Linq.XContainer.CreateWriter
  id: CreateWriter
  parent: System.Xml.Linq.XContainer
  langs:
  - csharp
  name: CreateWriter()
  nameWithType: XContainer.CreateWriter()
  fullName: XContainer.CreateWriter()
  type: Method
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Creates an <xref href="System.Xml.XmlWriter"></xref> that can be used to add nodes to the <xref href="System.Xml.Linq.XContainer"></xref>.
  remarks: "While serializing, namespace prefixes are inferred from the namespace attributes in the XML tree.  \n  \n For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)."
  example:
  - "You can use this method to perform an XSLT transformation. You can create an XML tree, create an <xref:System.Xml.XmlReader> from the XML tree, create a new document, and create a <xref:System.Xml.XmlWriter> that will write into the new document. Then, you can invoke the XSLT transformation, passing the <xref:System.Xml.XmlReader> and <xref:System.Xml.XmlWriter> to the transform. After the transformation successfully completes, the new XML tree is populated with the results of the transformation.  \n  \n```csharp  \n  \n                string xslMarkup = @\"<?xml version='1.0'?>  \n<xsl:stylesheet xmlns:xsl='http://www.w3.org/1999/XSL/Transform' version='1.0'>  \n    <xsl:template match='/Parent'>  \n        <Root>  \n            <C1><xsl:value-of select='Child1'/></C1>  \n            <C2><xsl:value-of select='Child2'/></C2>  \n        </Root>  \n    </xsl:template>  \n</xsl:stylesheet>\";  \n  \nXDocument xmlTree = new XDocument(  \n    new XElement(\"Parent\",  \n        new XElement(\"Child1\", \"Child1 data\"),  \n        new XElement(\"Child2\", \"Child2 data\")  \n    )  \n);  \n  \nXDocument newTree = new XDocument();  \nusing (XmlWriter writer = newTree.CreateWriter()) {  \n    // Load the style sheet.  \n    XslCompiledTransform xslt = new XslCompiledTransform();  \n    xslt.Load(XmlReader.Create(new StringReader(xslMarkup)));  \n  \n    // Execute the transform and output the results to a writer.  \n    xslt.Transform(xmlTree.CreateReader(), writer);  \n}  \n  \nConsole.WriteLine(newTree);  \n```  \n  \n```vb  \n  \n                Dim xslMarkup As XDocument = _   \n    <?xml version='1.0'?>  \n    <xsl:stylesheet xmlns:xsl='http://www.w3.org/1999/XSL/Transform' version='1.0'>  \n        <xsl:template match='/Parent'>  \n            <Root>  \n                <C1><xsl:value-of select='Child1'/></C1>  \n                <C2><xsl:value-of select='Child2'/></C2>  \n            </Root>  \n        </xsl:template>  \n    </xsl:stylesheet>  \n  \nDim xmlTree As XElement = _   \n    <Parent>  \n        <Child1>Child1 data</Child1>  \n        <Child2>Child2 data</Child2>  \n    </Parent>  \n  \nDim newTree As XDocument = New XDocument()  \n  \nUsing writer As XmlWriter = newTree.CreateWriter()  \n    ' Load the style sheet.  \n    Dim xslt As XslCompiledTransform = _  \n        New XslCompiledTransform()  \n    xslt.Load(xslMarkup.CreateReader())  \n  \n    ' Execute the transform and output the results to a writer.  \n    xslt.Transform(xmlTree.CreateReader(), writer)  \nEnd Using  \n  \nConsole.WriteLine(newTree)  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n  \n                <Root>  \n  <C1>Child1 data</C1>  \n  <C2>Child2 data</C2>  \n</Root>  \n```"
  syntax:
    content: public System.Xml.XmlWriter CreateWriter ();
    parameters: []
    return:
      type: System.Xml.XmlWriter
      description: An <xref href="System.Xml.XmlWriter"></xref> that is ready to have content written to it.
  overload: System.Xml.Linq.XContainer.CreateWriter*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XContainer.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XContainer.DescendantNodes
  commentId: M:System.Xml.Linq.XContainer.DescendantNodes
  id: DescendantNodes
  parent: System.Xml.Linq.XContainer
  langs:
  - csharp
  name: DescendantNodes()
  nameWithType: XContainer.DescendantNodes()
  fullName: XContainer.DescendantNodes()
  type: Method
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Returns a collection of the descendant nodes for this document or element, in document order.
  remarks: "Note that attributes are not considered to be nodes in [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)], so they will not be part of the collection that is returned by this method.  \n  \n This method uses deferred execution."
  example:
  - "The following example creates an XML tree, and then iterates through the <xref:System.Xml.Linq.XContainer.DescendantNodes%2A> axis.  \n  \n```csharp  \n  \n                XElement xmlTree = new XElement(\"Root\",  \n    // Attributes are not nodes, so will not be returned by DescendantNodes.  \n    new XAttribute(\"Att1\", \"AttributeContent\"),  \n    new XElement(\"Child\",  \n        new XElement(\"GrandChild\", \"element content\")  \n    )  \n);  \nIEnumerable<XNode> dnas =  \n    from node in xmlTree.DescendantNodes()  \n    select node;  \nforeach (XNode node in dnas)  \n{  \n    if (node is XElement)  \n        Console.WriteLine((node as XElement).Name);  \n    else  \n        Console.WriteLine(node);  \n}  \n```  \n  \n```vb  \n  \n                ' Attributes are not nodes, so will not be returned by DescendantNodes.  \nDim xmlTree As XElement = _   \n    <Root Att1=\"AttributeContent\">  \n        <Child>  \n            <GrandChild>element content</GrandChild>  \n        </Child>  \n    </Root>  \n  \nDim dnas = From node In xmlTree.DescendantNodes _  \n           Select node  \n  \nFor Each node In dnas  \n    If TypeOf node Is XElement Then  \n        Console.WriteLine(DirectCast(node, XElement).Name)  \n    Else  \n        Console.WriteLine(node)  \n    End If  \nNext  \n```  \n  \n This example produces the following output:  \n  \n```  \nChild  \nGrandChild  \nelement content  \n```"
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.Xml.Linq.XNode> DescendantNodes ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XNode}
      description: An <xref href="System.Collections.Generic.IEnumerable`1"></xref> of <xref href="System.Xml.Linq.XNode"></xref> containing the descendant nodes of the <xref href="System.Xml.Linq.XContainer"></xref>, in document order.
  overload: System.Xml.Linq.XContainer.DescendantNodes*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XContainer.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XContainer.Descendants
  commentId: M:System.Xml.Linq.XContainer.Descendants
  id: Descendants
  parent: System.Xml.Linq.XContainer
  langs:
  - csharp
  name: Descendants()
  nameWithType: XContainer.Descendants()
  fullName: XContainer.Descendants()
  type: Method
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Returns a collection of the descendant elements for this document or element, in document order.
  remarks: "Note that this method will not return itself in the resulting <xref:System.Collections.Generic.IEnumerable%601>. See <xref:System.Xml.Linq.XElement.DescendantsAndSelf%2A> if you need to include the current <xref:System.Xml.Linq.XElement> in the results.  \n  \n This method uses deferred execution."
  example:
  - "The following example creates an XML tree, and then uses this axis method to retrieve the descendants.  \n  \n```csharp  \n  \n                XElement xmlTree = new XElement(\"Root\",  \n    new XAttribute(\"Att1\", \"AttributeContent\"),  \n    new XElement(\"Child\",  \n        new XText(\"Some text\"),  \n        new XElement(\"GrandChild\", \"element content\")  \n    )  \n);  \nIEnumerable<XElement> de =  \n    from el in xmlTree.Descendants()  \n    select el;  \nforeach (XElement el in de)  \n    Console.WriteLine(el.Name);  \n```  \n  \n```vb  \n' Attributes are not nodes, so will not be returned by DescendantNodes.  \nDim xmlTree As XElement = _  \n    <Root Att1=\"AttributeContent\">  \n        <Child>Some text  \n            <GrandChild>element content</GrandChild>  \n        </Child>  \n    </Root>  \nDim de = From el In xmlTree.Descendants _  \n         Select el  \n  \nFor Each el In de  \n    Console.WriteLine(el.Name)  \nNext  \n```  \n  \n This example produces the following output:  \n  \n```  \nChild  \nGrandChild  \n```"
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> Descendants ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}
      description: An <xref href="System.Collections.Generic.IEnumerable`1"></xref> of <xref href="System.Xml.Linq.XElement"></xref> containing the descendant elements of the <xref href="System.Xml.Linq.XContainer"></xref>.
  overload: System.Xml.Linq.XContainer.Descendants*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XContainer.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XContainer.Descendants(System.Xml.Linq.XName)
  commentId: M:System.Xml.Linq.XContainer.Descendants(System.Xml.Linq.XName)
  id: Descendants(System.Xml.Linq.XName)
  parent: System.Xml.Linq.XContainer
  langs:
  - csharp
  name: Descendants(XName)
  nameWithType: XContainer.Descendants(XName)
  fullName: XContainer.Descendants(XName)
  type: Method
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Returns a filtered collection of the descendant elements for this document or element, in document order. Only elements that have a matching <xref href="System.Xml.Linq.XName"></xref> are included in the collection.
  remarks: This method uses deferred execution.
  example:
  - "The following example prints all descendants of an element.  \n  \n```csharp  \n// Attributes are not nodes, so will not be returned by DescendantNodes.  \nXElement xmlTree = new XElement(\"Root\",  \n    new XAttribute(\"Att1\", \"AttributeContent\"),  \n    new XElement(\"Child\",  \n        new XText(\"Some text\"),  \n        new XElement(\"GrandChild\", \"element content\")  \n    )  \n);  \nIEnumerable<XElement> de =  \n    from el in xmlTree.Descendants(\"Child\")  \n    select el;  \nforeach (XElement el in de)  \n    Console.WriteLine(el.Name);  \n```  \n  \n```vb  \n  \n                ' Attributes are not nodes, so will not be returned by the descendants axis.  \nDim xmlTree As XElement = _   \n    <Root Att1=\"AttributeContent\">  \n         <Child>Some text  \n             <GrandChild>element content</GrandChild>  \n         </Child>  \n     </Root>  \n  \nDim de = From el In xmlTree...<Child> _  \n         Select el  \n  \nFor Each el In de  \n    Console.WriteLine(el.Name)  \nNext  \n```  \n  \n This example produces the following output:  \n  \n```  \nChild  \n```  \n  \n The following is the same example, but in this case the XML is in a namespace. For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).  \n  \n```csharp  \n  \n                // Attributes are not nodes, so will not be returned by DescendantNodes.  \nXNamespace aw = \"http://www.adventure-works.com\";  \nXElement xmlTree = new XElement(aw + \"Root\",  \n    new XAttribute(aw + \"Att1\", \"AttributeContent\"),  \n    new XElement(aw + \"Child\",  \n        new XText(\"Some text\"),  \n        new XElement(aw + \"GrandChild\", \"element content\")  \n    )  \n);  \nIEnumerable<XElement> de =  \n    from el in xmlTree.Descendants(aw + \"Child\")  \n    select el;  \nforeach (XElement el in de)  \n    Console.WriteLine(el.Name);  \n```  \n  \n```vb  \n  \n                Imports <xmlns:aw = \"http://www.adventure-works.com\">  \n  \nModule Module1  \n    Sub Main()  \n        ' Attributes are not nodes, so will not be returned by the descendants axis.  \n        Dim xmlTree As XElement = _   \n            <aw:Root aw:Att1=\"AttributeContent\">  \n                 <aw:Child>Some text  \n                     <aw:GrandChild>element content</aw:GrandChild>  \n                 </aw:Child>  \n             </aw:Root>  \n  \n        Dim de = From el In xmlTree...<aw:Child> _  \n                 Select el  \n  \n        For Each el In de  \n            Console.WriteLine(el.Name)  \n        Next  \n    End Sub  \nEnd Module  \n```  \n  \n This example produces the following output:  \n  \n```  \n{http://www.adventure-works.com}Child  \n```"
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> Descendants (System.Xml.Linq.XName name);
    parameters:
    - id: name
      type: System.Xml.Linq.XName
      description: The <xref href="System.Xml.Linq.XName"></xref> to match.
    return:
      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}
      description: An <xref href="System.Collections.Generic.IEnumerable`1"></xref> of <xref href="System.Xml.Linq.XElement"></xref> containing the descendant elements of the <xref href="System.Xml.Linq.XContainer"></xref> that match the specified <xref href="System.Xml.Linq.XName"></xref>.
  overload: System.Xml.Linq.XContainer.Descendants*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XContainer.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XContainer.Element(System.Xml.Linq.XName)
  commentId: M:System.Xml.Linq.XContainer.Element(System.Xml.Linq.XName)
  id: Element(System.Xml.Linq.XName)
  parent: System.Xml.Linq.XContainer
  langs:
  - csharp
  name: Element(XName)
  nameWithType: XContainer.Element(XName)
  fullName: XContainer.Element(XName)
  type: Method
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Gets the first (in document order) child element with the specified <xref href="System.Xml.Linq.XName"></xref>.
  remarks: "Returns `null` if there is no element with the specified name.  \n  \n Some axis methods return collections of elements or attributes. This method returns only a single element.  \n  \n This method returns `null` if the element with the specified name is not found. All of the methods that allow you to construct elements (the constructor of <xref:System.Xml.Linq.XElement>, <xref:System.Xml.Linq.XContainer.Add%2A>, and so on) accept `null` as a valid argument. This allows you to use a convenient idiom: you can call this method as part of functional construction, and the element is added to the XML tree being constructed if and only if the element exists in the source tree. The following example shows this idiom.  \n  \n In contrast to <xref:System.Xml.Linq.XContainer.Elements%2A>, this method is not an axis method. It does not use deferred execution; it simply returns an element when called."
  example:
  - "The following example shows two uses of this method. In one case, the method finds the element in `srcTree`. In the second case, the method does not find the element in the source tree, no element is added to `xmlTree`, and no exception is thrown.  \n  \n Note that the Visual Basic example uses the child XML property. It is also allowable to use the <xref:System.Xml.Linq.XContainer.Element%2A> method directly in Visual Basic.  \n  \n```csharp  \n  \n                XElement srcTree = new XElement(\"Root\",  \n    new XElement(\"Element1\", 1),  \n    new XElement(\"Element2\", 2),  \n    new XElement(\"Element3\", 3),  \n    new XElement(\"Element4\", 4),  \n    new XElement(\"Element5\", 5)  \n);  \nXElement xmlTree = new XElement(\"Root\",  \n    new XElement(\"Child1\", 1),  \n    new XElement(\"Child2\", 2),  \n    new XElement(\"Child3\", 3),  \n    new XElement(\"Child4\", 4),  \n    new XElement(\"Child5\", 5),  \n    srcTree.Element(\"Element3\"),  \n    // Even though Element9 does not exist in srcTree, the following line  \n    // will not throw an exception.  \n    srcTree.Element(\"Element9\")  \n);  \nConsole.WriteLine(xmlTree);  \n```  \n  \n```vb  \n  \n                Dim srcTree As XElement = _   \n        <Root>  \n            <Element1>1</Element1>  \n            <Element2>2</Element2>  \n            <Element3>3</Element3>  \n            <Element4>4</Element4>  \n            <Element5>5</Element5>  \n        </Root>  \n  \nDim xmlTree As XElement = _  \n        <Root>  \n            <Child1>1</Child1>  \n            <Child2>2</Child2>  \n            <Child3>3</Child3>  \n            <Child4>4</Child4>  \n            <Child5>5</Child5>  \n            <%= srcTree.<Element3> %>  \n            <%= srcTree.<Element9> %>  \n        </Root>  \n  \n' Even though Element9 does not exist in srcTree, adding it to the tree  \n' will not throw an exception.  \n  \nConsole.WriteLine(xmlTree)  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n  \n                <Root>  \n  <Child1>1</Child1>  \n  <Child2>2</Child2>  \n  <Child3>3</Child3>  \n  <Child4>4</Child4>  \n  <Child5>5</Child5>  \n  <Element3>3</Element3>  \n</Root>  \n```  \n  \n The following is the same example, but in this case the XML is in a namespace. For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).  \n  \n```csharp  \n  \n                XNamespace aw = \"http://www.adventure-works.com\";  \nXElement srcTree = new XElement(aw + \"Root\",  \n    new XAttribute(XNamespace.Xmlns + \"aw\", \"http://www.adventure-works.com\"),  \n    new XElement(aw + \"Element1\", 1),  \n    new XElement(aw + \"Element2\", 2),  \n    new XElement(aw + \"Element3\", 3),  \n    new XElement(aw + \"Element4\", 4),  \n    new XElement(aw + \"Element5\", 5)  \n);  \nXElement xmlTree = new XElement(aw + \"Root\",  \n    new XAttribute(XNamespace.Xmlns + \"aw\", \"http://www.adventure-works.com\"),  \n    new XElement(aw + \"Child1\", 1),  \n    new XElement(aw + \"Child2\", 2),  \n    new XElement(aw + \"Child3\", 3),  \n    new XElement(aw + \"Child4\", 4),  \n    new XElement(aw + \"Child5\", 5),  \n    srcTree.Element(aw + \"Element3\"),  \n    // Even though Element9 does not exist in srcTree, the following line  \n    // will not throw an exception.  \n    srcTree.Element(aw + \"Element9\")  \n);  \nConsole.WriteLine(xmlTree);  \n```  \n  \n```vb  \n  \n                Imports <xmlns:aw=\"http://www.adventure-works.com\">  \n  \nModule Module1  \n    Sub Main()  \n        Dim srcTree As XElement = _   \n            <aw:Root>  \n                <aw:Element1>1</aw:Element1>  \n                <aw:Element2>2</aw:Element2>  \n                <aw:Element3>3</aw:Element3>  \n                <aw:Element4>4</aw:Element4>  \n                <aw:Element5>5</aw:Element5>  \n            </aw:Root>  \n  \n        Dim xmlTree As XElement = _  \n            <aw:Root>  \n                <aw:Child1>1</aw:Child1>  \n                <aw:Child2>2</aw:Child2>  \n                <aw:Child3>3</aw:Child3>  \n                <aw:Child4>4</aw:Child4>  \n                <aw:Child5>5</aw:Child5>  \n                <%= srcTree.<aw:Element3> %>  \n                <%= srcTree.<aw:Element9> %>  \n            </aw:Root>  \n  \n        ' Even though Element9 does not exist in srcTree, adding it to the tree  \n        ' will not throw an exception.  \n  \n        Console.WriteLine(xmlTree)  \n    End Sub  \nEnd Module  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n  \n                <aw:Root xmlns:aw=\"http://www.adventure-works.com\">  \n  <aw:Child1>1</aw:Child1>  \n  <aw:Child2>2</aw:Child2>  \n  <aw:Child3>3</aw:Child3>  \n  <aw:Child4>4</aw:Child4>  \n  <aw:Child5>5</aw:Child5>  \n  <aw:Element3>3</aw:Element3>  \n</aw:Root>  \n```"
  syntax:
    content: public System.Xml.Linq.XElement Element (System.Xml.Linq.XName name);
    parameters:
    - id: name
      type: System.Xml.Linq.XName
      description: The <xref href="System.Xml.Linq.XName"></xref> to match.
    return:
      type: System.Xml.Linq.XElement
      description: A <xref href="System.Xml.Linq.XElement"></xref> that matches the specified <xref href="System.Xml.Linq.XName"></xref>, or `null`.
  overload: System.Xml.Linq.XContainer.Element*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XContainer.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XContainer.Elements
  commentId: M:System.Xml.Linq.XContainer.Elements
  id: Elements
  parent: System.Xml.Linq.XContainer
  langs:
  - csharp
  name: Elements()
  nameWithType: XContainer.Elements()
  fullName: XContainer.Elements()
  type: Method
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Returns a collection of the child elements of this element or document, in document order.
  remarks: This method uses deferred execution.
  example:
  - "The following example creates an XML tree, and then selects some elements using this axis method.  \n  \n```csharp  \n  \n                XElement xmlTree = new XElement(\"Root\",  \n    new XElement(\"Child1\", 1),  \n    new XElement(\"Child2\", 2),  \n    new XElement(\"Child3\", 3),  \n    new XElement(\"Child4\", 4),  \n    new XElement(\"Child5\", 5)  \n);  \nIEnumerable<XElement> elements =  \n    from el in xmlTree.Elements()  \n    where (int)el <= 3  \n    select el;  \nforeach (XElement el in elements)  \n    Console.WriteLine(el);  \n```  \n  \n```vb  \n  \n                Dim xmlTree As XElement = _  \n        <Root>  \n            <Child1>1</Child1>  \n            <Child2>2</Child2>  \n            <Child3>3</Child3>  \n            <Child4>4</Child4>  \n            <Child5>5</Child5>  \n        </Root>  \n  \nDim elements = From el In xmlTree.Elements _  \n               Where el.Value <= 3 _  \n               Select el  \n  \nFor Each el In elements  \n    Console.WriteLine(el)  \nNext  \n```  \n  \n This example produces the following output:  \n  \n```  \n<Child1>1</Child1>  \n<Child2>2</Child2>  \n<Child3>3</Child3>  \n```  \n  \n The following is the same example, but in this case the XML is in a namespace. For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).  \n  \n```csharp  \n  \n                XNamespace aw = \"http://www.adventure-works.com\";  \nXElement xmlTree = new XElement(aw + \"Root\",  \n    new XAttribute(XNamespace.Xmlns + \"aw\", \"http://www.adventure-works.com\"),  \n    new XElement(aw + \"Child1\", 1),  \n    new XElement(aw + \"Child2\", 2),  \n    new XElement(aw + \"Child3\", 3),  \n    new XElement(aw + \"Child4\", 4),  \n    new XElement(aw + \"Child5\", 5)  \n);  \nIEnumerable<XElement> elements =  \n    from el in xmlTree.Elements()  \n    where (int)el <= 3  \n    select el;  \nforeach (XElement el in elements)  \n    Console.WriteLine(el);  \n```  \n  \n```vb  \n  \n                Imports <xmlns:aw=\"http://www.adventure-works.com\">  \n  \nModule Module1  \n    Sub Main()  \n        Dim xmlTree As XElement = _  \n            <aw:Root>  \n                <aw:Child1>1</aw:Child1>  \n                <aw:Child2>2</aw:Child2>  \n                <aw:Child3>3</aw:Child3>  \n                <aw:Child4>4</aw:Child4>  \n                <aw:Child5>5</aw:Child5>  \n            </aw:Root>  \n  \n        Dim elements = From el In xmlTree.Elements _  \n                       Where el.Value <= 3 _  \n                       Select el  \n  \n        For Each el In elements  \n            Console.WriteLine(el)  \n        Next  \n    End Sub  \nEnd Module  \n```  \n  \n This example produces the following output:  \n  \n```  \n<aw:Child1 xmlns:aw=\"http://www.adventure-works.com\">1</aw:Child1>  \n<aw:Child2 xmlns:aw=\"http://www.adventure-works.com\">2</aw:Child2>  \n<aw:Child3 xmlns:aw=\"http://www.adventure-works.com\">3</aw:Child3>  \n```"
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> Elements ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}
      description: An <xref href="System.Collections.Generic.IEnumerable`1"></xref> of <xref href="System.Xml.Linq.XElement"></xref> containing the child elements of this <xref href="System.Xml.Linq.XContainer"></xref>, in document order.
  overload: System.Xml.Linq.XContainer.Elements*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XContainer.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XContainer.Elements(System.Xml.Linq.XName)
  commentId: M:System.Xml.Linq.XContainer.Elements(System.Xml.Linq.XName)
  id: Elements(System.Xml.Linq.XName)
  parent: System.Xml.Linq.XContainer
  langs:
  - csharp
  name: Elements(XName)
  nameWithType: XContainer.Elements(XName)
  fullName: XContainer.Elements(XName)
  type: Method
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Returns a filtered collection of the child elements of this element or document, in document order. Only elements that have a matching <xref href="System.Xml.Linq.XName"></xref> are included in the collection.
  remarks: This method uses deferred execution.
  example:
  - "The following example creates an XML tree, and then selects several child elements using this axis method.  \n  \n```csharp  \n  \n                XElement xmlTree = new XElement(\"Root\",  \n    new XElement(\"Type1\", 1),  \n    new XElement(\"Type1\", 2),  \n    new XElement(\"Type2\", 3),  \n    new XElement(\"Type2\", 4),  \n    new XElement(\"Type2\", 5)  \n);  \nIEnumerable<XElement> elements =  \n    from el in xmlTree.Elements(\"Type2\")  \n    select el;  \nforeach (XElement el in elements)  \n    Console.WriteLine(el);  \n```  \n  \n```vb  \n  \n                Dim xmlTree As XElement = _   \n        <Root>  \n            <Type1>1</Type1>  \n            <Type1>2</Type1>  \n            <Type2>3</Type2>  \n            <Type2>4</Type2>  \n            <Type2>5</Type2>  \n        </Root>  \n  \nDim elements = From el In xmlTree.<Type2> _  \n               Select el  \n  \nFor Each el In elements  \n    Console.WriteLine(el)  \nNext  \n```  \n  \n This example produces the following output:  \n  \n```  \n<Type2>3</Type2>  \n<Type2>4</Type2>  \n<Type2>5</Type2>  \n```  \n  \n The following is the same example, but in this case the XML is in a namespace. For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).  \n  \n```csharp  \n  \n                XNamespace aw = \"http://www.adventure-works.com\";  \nXElement xmlTree = new XElement(aw + \"Root\",  \n    new XAttribute(XNamespace.Xmlns + \"aw\", \"http://www.adventure-works.com\"),  \n    new XElement(aw + \"Type1\", 1),  \n    new XElement(aw + \"Type1\", 2),  \n    new XElement(aw + \"Type2\", 3),  \n    new XElement(aw + \"Type2\", 4),  \n    new XElement(aw + \"Type2\", 5)  \n);  \nIEnumerable<XElement> elements =  \n    from el in xmlTree.Elements(aw + \"Type2\")  \n    select el;  \nforeach (XElement el in elements)  \n    Console.WriteLine(el);  \n```  \n  \n```vb  \n  \n                Imports <xmlns:aw=\"http://www.adventure-works.com\">  \n  \nModule Module1  \n    Sub Main()  \n        Dim xmlTree As XElement = _   \n            <aw:Root>  \n                <aw:Type1>1</aw:Type1>  \n                <aw:Type1>2</aw:Type1>  \n                <aw:Type2>3</aw:Type2>  \n                <aw:Type2>4</aw:Type2>  \n                <aw:Type2>5</aw:Type2>  \n            </aw:Root>  \n  \n        Dim elements = From el In xmlTree.<aw:Type2> _  \n                       Select el  \n  \n        For Each el In elements  \n            Console.WriteLine(el)  \n        Next  \n    End Sub  \nEnd Module  \n```  \n  \n This example produces the following output:  \n  \n```  \n<aw:Type2 xmlns:aw=\"http://www.adventure-works.com\">3</aw:Type2>  \n<aw:Type2 xmlns:aw=\"http://www.adventure-works.com\">4</aw:Type2>  \n<aw:Type2 xmlns:aw=\"http://www.adventure-works.com\">5</aw:Type2>  \n```"
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> Elements (System.Xml.Linq.XName name);
    parameters:
    - id: name
      type: System.Xml.Linq.XName
      description: The <xref href="System.Xml.Linq.XName"></xref> to match.
    return:
      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}
      description: An <xref href="System.Collections.Generic.IEnumerable`1"></xref> of <xref href="System.Xml.Linq.XElement"></xref> containing the children of the <xref href="System.Xml.Linq.XContainer"></xref> that have a matching <xref href="System.Xml.Linq.XName"></xref>, in document order.
  overload: System.Xml.Linq.XContainer.Elements*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XContainer.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XContainer.FirstNode
  commentId: P:System.Xml.Linq.XContainer.FirstNode
  id: FirstNode
  parent: System.Xml.Linq.XContainer
  langs:
  - csharp
  name: FirstNode
  nameWithType: XContainer.FirstNode
  fullName: XContainer.FirstNode
  type: Property
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Get the first child node of this node.
  remarks: ''
  example:
  - "The following example creates an element that contains child elements. It then gets the first child node of the parent element.  \n  \n```csharp  \n  \n                XElement xmlTree = new XElement(\"Root\",  \n    new XElement(\"Child1\", 1),  \n    new XElement(\"Child2\", 2),  \n    new XElement(\"Child3\", 3),  \n    new XElement(\"Child4\", 4),  \n    new XElement(\"Child5\", 5)  \n);  \nXNode firstNode = xmlTree.FirstNode;  \nConsole.WriteLine(firstNode);  \n```  \n  \n```vb  \n  \n                Dim xmlTree As XElement = _   \n        <Root>  \n            <Child1>1</Child1>  \n            <Child2>2</Child2>  \n            <Child3>3</Child3>  \n            <Child4>4</Child4>  \n            <Child5>5</Child5>  \n        </Root>  \n  \nDim firstNode As XNode = xmlTree.FirstNode  \nConsole.WriteLine(firstNode)  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n  \n<Child1>1</Child1>  \n```"
  syntax:
    content: public System.Xml.Linq.XNode FirstNode { get; }
    return:
      type: System.Xml.Linq.XNode
      description: An <xref href="System.Xml.Linq.XNode"></xref> containing the first child node of the <xref href="System.Xml.Linq.XContainer"></xref>.
  overload: System.Xml.Linq.XContainer.FirstNode*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XContainer.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XContainer.LastNode
  commentId: P:System.Xml.Linq.XContainer.LastNode
  id: LastNode
  parent: System.Xml.Linq.XContainer
  langs:
  - csharp
  name: LastNode
  nameWithType: XContainer.LastNode
  fullName: XContainer.LastNode
  type: Property
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Get the last child node of this node.
  remarks: ''
  example:
  - "The following example creates an element that contains child elements. It then gets the last child node of the parent element.  \n  \n```csharp  \n  \n                XElement xmlTree = new XElement(\"Root\",  \n    new XElement(\"Child1\", 1),  \n    new XElement(\"Child2\", 2),  \n    new XElement(\"Child3\", 3),  \n    new XElement(\"Child4\", 4),  \n    new XElement(\"Child5\", 5)  \n);  \nXNode lastNode = xmlTree.LastNode;  \nConsole.WriteLine(lastNode);  \n```  \n  \n```vb  \n  \n                Dim xmlTree As XElement = _   \n        <Root>  \n            <Child1>1</Child1>  \n            <Child2>2</Child2>  \n            <Child3>3</Child3>  \n            <Child4>4</Child4>  \n            <Child5>5</Child5>  \n        </Root>  \n  \nDim lastNode As XNode = xmlTree.LastNode  \nConsole.WriteLine(lastNode)  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n  \n<Child5>5</Child5>  \n```"
  syntax:
    content: public System.Xml.Linq.XNode LastNode { get; }
    return:
      type: System.Xml.Linq.XNode
      description: An <xref href="System.Xml.Linq.XNode"></xref> containing the last child node of the <xref href="System.Xml.Linq.XContainer"></xref>.
  overload: System.Xml.Linq.XContainer.LastNode*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XContainer.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XContainer.Nodes
  commentId: M:System.Xml.Linq.XContainer.Nodes
  id: Nodes
  parent: System.Xml.Linq.XContainer
  langs:
  - csharp
  name: Nodes()
  nameWithType: XContainer.Nodes()
  fullName: XContainer.Nodes()
  type: Method
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Returns a collection of the child nodes of this element or document, in document order.
  remarks: "Note that the content does not include attributes. In [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)], attributes are not considered to be nodes of the tree. They are name/value pairs associated with an element.  \n  \n This method uses deferred execution."
  example:
  - "The following example creates an XML tree with a variety of types of nodes. It then queries this axis method to enumerate and print the nodes.  \n  \n```csharp  \n  \n                XElement xmlTree = new XElement(\"Root\",  \n    new XElement(\"Child1\", 1),  \n    new XElement(\"Child2\", 2),  \n    new XComment(\"a comment\"),  \n    new XElement(\"Child3\", 3),  \n    new XElement(\"Child4\", 4),  \n    new XText(\"mixed content\"),  \n    new XElement(\"Child5\", 5)  \n);  \nIEnumerable<XNode> nodes =  \n    from nd in xmlTree.Nodes()  \n    select nd;  \nforeach (XNode node in nodes)  \n    Console.WriteLine(node);  \n```  \n  \n```vb  \n  \n                Dim xmlTree As XElement = _   \n        <Root>  \n            <Child1>1</Child1>  \n            <Child2>2</Child2>  \n            <!--a comment-->  \n            <Child3>3</Child3>  \n            <Child4>4</Child4>mixed content<Child5>5</Child5>  \n            </Root>  \n  \nDim nodes = From nd In xmlTree.Nodes() _  \n            Select nd  \n  \nFor Each node In nodes  \n    Console.WriteLine(node)  \nNext  \n```  \n  \n This example produces the following output:  \n  \n```  \n<Child1>1</Child1>  \n<Child2>2</Child2>  \n<!--a comment-->  \n<Child3>3</Child3>  \n<Child4>4</Child4>  \nmixed content  \n<Child5>5</Child5>  \n```  \n  \n The following example creates an XML tree that contains a variety of types of nodes. It then enumerates through portions of the tree, printing the node types.  \n  \n```csharp  \n  \n                XDocument xmlTree = new XDocument(  \n    new XComment(\"a comment\"),  \n    new XProcessingInstruction(\"xml-stylesheet\", \"type=\\\"text/xsl\\\" href=\\\"hello.xsl\\\"\"),  \n    new XElement(\"Root\",  \n        new XAttribute(\"Att\", \"attContent\"),  \n        new XElement(\"Child1\",  \n            new XCData(\"CDATA content\")  \n        ),  \n        new XElement(\"Child2\",  \n            new XText(\"Text content\")  \n        )  \n    )  \n);  \n  \nforeach (XNode node in xmlTree.Nodes())  \n{  \n    Console.WriteLine(node.NodeType);  \n    if (node.NodeType == XmlNodeType.Element)  \n    {  \n        foreach (XAttribute att in ((XElement)node).Attributes())  \n            Console.WriteLine(att.NodeType);  \n        foreach (XNode node2 in ((XElement)node).Nodes())  \n        {  \n            Console.WriteLine(node2.NodeType);  \n            if (node2.NodeType == XmlNodeType.Element)  \n                foreach (XNode node3 in ((XElement)node2).Nodes())  \n                    Console.WriteLine(node3.NodeType);  \n        }  \n    }  \n}  \n```  \n  \n```vb  \n  \n                Dim xmlTree As XDocument = _   \n    <?xml version=\"1.0\" encoding=\"utf-8\"?>  \n    <!--a comment-->  \n    <?xml-stylesheet type='text/xsl' href='hello.xsl'?>  \n    <Root Att=\"attContent\">  \n        <Child1><![CDATA[CDATA content]]></Child1>  \n        <Child2>Text content</Child2>  \n    </Root>  \n  \n' Note that XNode uses XmlNodeType, which is in the System.Xml namespace  \nFor Each node In xmlTree.Nodes  \n    Console.WriteLine(node.NodeType.ToString())  \n    If node.NodeType = XmlNodeType.Element Then  \n        For Each att In DirectCast(node, XElement).Attributes  \n            Console.WriteLine(att.NodeType.ToString())  \n        Next  \n        For Each node2 In DirectCast (node, XElement).Nodes()  \n            Console.WriteLine(node2.NodeType.ToString())  \n            If node2.NodeType = XmlNodeType.Element Then  \n                For Each node3 In DirectCast (node2, XElement).Nodes  \n                    Console.WriteLine(node3.NodeType.ToString())  \n                Next  \n            End If  \n        Next  \n    End If  \nNext  \n```  \n  \n This example produces the following output:  \n  \n```  \nComment  \nProcessingInstruction  \nElement  \nAttribute  \nElement  \nCDATA  \nElement  \nText  \n```"
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.Xml.Linq.XNode> Nodes ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XNode}
      description: An <xref href="System.Collections.Generic.IEnumerable`1"></xref> of <xref href="System.Xml.Linq.XNode"></xref> containing the contents of this <xref href="System.Xml.Linq.XContainer"></xref>, in document order.
  overload: System.Xml.Linq.XContainer.Nodes*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XContainer.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XContainer.RemoveNodes
  commentId: M:System.Xml.Linq.XContainer.RemoveNodes
  id: RemoveNodes
  parent: System.Xml.Linq.XContainer
  langs:
  - csharp
  name: RemoveNodes()
  nameWithType: XContainer.RemoveNodes()
  fullName: XContainer.RemoveNodes()
  type: Method
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Removes the child nodes from this document or element.
  remarks: "If you call this method on an element that contains attributes, this method will not remove the attributes. To remove the attributes of an element, use <xref:System.Xml.Linq.XElement.RemoveAttributes%2A>.  \n  \n The <xref:System.Xml.Linq.Extensions.Remove%2A> method has related functionality. It removes the child nodes of every node in a collection.  \n  \n This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events."
  example:
  - "The following example creates an XML tree that contains some child nodes. It then calls this method to remove the child nodes.  \n  \n```csharp  \n  \n                XElement xmlTree = new XElement(\"Root\",  \n    new XElement(\"Child1\", 1),  \n    new XElement(\"Child2\", 2),  \n    new XComment(\"a comment\"),  \n    new XElement(\"Child3\", 3),  \n    new XElement(\"Child4\", 4),  \n    new XText(\"mixed content\"),  \n    new XElement(\"Child5\", 5)  \n);  \nxmlTree.RemoveNodes();  \nConsole.WriteLine(xmlTree);  \n```  \n  \n```vb  \n  \n                Dim xmltree As XElement = _   \n    <Root>  \n        <Child1>1</Child1>  \n        <Child2>2</Child2>  \n        <!--a comment-->  \n        <Child3>3</Child3>  \n        <Child4>4</Child4>mixed content<Child5>5</Child5>  \n    </Root>  \n  \nxmltree.RemoveNodes()  \nConsole.WriteLine(xmltree)  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n  \n<Root />  \n```"
  syntax:
    content: public void RemoveNodes ();
    parameters: []
  overload: System.Xml.Linq.XContainer.RemoveNodes*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XContainer.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XContainer.ReplaceNodes(System.Object)
  commentId: M:System.Xml.Linq.XContainer.ReplaceNodes(System.Object)
  id: ReplaceNodes(System.Object)
  parent: System.Xml.Linq.XContainer
  langs:
  - csharp
  name: ReplaceNodes(Object)
  nameWithType: XContainer.ReplaceNodes(Object)
  fullName: XContainer.ReplaceNodes(Object)
  type: Method
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Replaces the children nodes of this document or element with the specified content.
  remarks: "For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).  \n  \n This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.  \n  \n This method has snapshot semantics. It first creates a copy of the new content. It then removes all children nodes of this node. Finally, it adds the new content as children nodes. This means that you can replace children nodes using a query on the children nodes themselves."
  example:
  - "The following example creates an XML tree that contains children nodes. It then replaces all of the children nodes with a single element.  \n  \n To see an example of replacing the children nodes with the results of a [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] query, see <xref:System.Xml.Linq.XContainer.ReplaceNodes%2A>.  \n  \n```csharp  \n  \n                XElement root = new XElement(\"Root\",  \n    new XElement(\"Child\", 1),  \n    new XElement(\"Child\", 2),  \n    new XElement(\"Child\", 3),  \n    new XElement(\"Child\", 4),  \n    new XElement(\"Child\", 5)  \n);  \nroot.ReplaceNodes(  \n    from el in root.Elements()  \n    where (int)el >= 3  \n    select el  \n);  \nConsole.WriteLine(root);  \n```  \n  \n```vb  \n  \n                Dim root As XElement = _   \n    <Root>  \n        <Child>1</Child>  \n        <Child>2</Child>  \n        <Child>3</Child>  \n        <Child>4</Child>  \n        <Child>5</Child>  \n    </Root>  \nroot.ReplaceNodes( _  \n    From el In root.Elements _  \n    Where el.Value >= 3 _  \n    Select el)  \nConsole.WriteLine(root)  \n  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n  \n                <Root>  \n  <Child>3</Child>  \n  <Child>4</Child>  \n  <Child>5</Child>  \n</Root>  \n```"
  syntax:
    content: public void ReplaceNodes (object content);
    parameters:
    - id: content
      type: System.Object
      description: A content object containing simple content or a collection of content objects that replace the children nodes.
  overload: System.Xml.Linq.XContainer.ReplaceNodes*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XContainer.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Xml.Linq.XContainer.ReplaceNodes(System.Object[])
  commentId: M:System.Xml.Linq.XContainer.ReplaceNodes(System.Object[])
  id: ReplaceNodes(System.Object[])
  parent: System.Xml.Linq.XContainer
  langs:
  - csharp
  name: ReplaceNodes(Object[])
  nameWithType: XContainer.ReplaceNodes(Object[])
  fullName: XContainer.ReplaceNodes(Object[])
  type: Method
  assemblies:
  - System.Xml.XDocument
  - System.Xml.Linq
  - netstandard
  namespace: System.Xml.Linq
  summary: Replaces the children nodes of this document or element with the specified content.
  remarks: "For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).  \n  \n This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.  \n  \n This method has snapshot semantics. It first creates a copy of the new content. It then removes all children nodes of this node. Finally, it adds the new content as children nodes. This means that you can replace children nodes using a query on the children nodes themselves."
  example:
  - "The following example creates a dictionary and an XML tree. It then queries the dictionary, projects the results to an <xref:System.Collections.Generic.IEnumerable%601> of <xref:System.Xml.Linq.XElement>, and replaces the contents of the XML tree with the results of the query.  \n  \n```csharp  \n  \n                XElement root = new XElement(\"Root\",  \n    new XElement(\"Child\", 1),  \n    new XElement(\"Child\", 2),  \n    new XElement(\"Child\", 3),  \n    new XElement(\"Child\", 4),  \n    new XElement(\"Child\", 5)  \n);  \nroot.ReplaceNodes(  \n    from el in root.Elements()  \n    where (int)el >= 3  \n    select el  \n);  \nConsole.WriteLine(root);  \n```  \n  \n```vb  \n  \n                Dim root As XElement = _   \n    <Root>  \n        <Child>1</Child>  \n        <Child>2</Child>  \n        <Child>3</Child>  \n        <Child>4</Child>  \n        <Child>5</Child>  \n    </Root>  \nroot.ReplaceNodes( _  \n    From el In root.Elements _  \n    Where el.Value >= 3 _  \n    Select el)  \nConsole.WriteLine(root)  \n  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n  \n                <Root>  \n  <Child>3</Child>  \n  <Child>4</Child>  \n  <Child>5</Child>  \n</Root>  \n```"
  syntax:
    content: public void ReplaceNodes (object[] content);
    parameters:
    - id: content
      type: System.Object[]
      description: A parameter list of content objects.
  overload: System.Xml.Linq.XContainer.ReplaceNodes*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XContainer.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
references:
- uid: System.Xml.Linq.XNode
  parent: System.Xml.Linq
  isExternal: false
  name: XNode
  nameWithType: XNode
  fullName: System.Xml.Linq.XNode
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.Xml.Linq.XContainer.Add(System.Object)
  parent: System.Xml.Linq.XContainer
  isExternal: false
  name: Add(Object)
  nameWithType: XContainer.Add(Object)
  fullName: XContainer.Add(Object)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Xml.Linq.XContainer.Add(System.Object[])
  parent: System.Xml.Linq.XContainer
  isExternal: false
  name: Add(Object[])
  nameWithType: XContainer.Add(Object[])
  fullName: XContainer.Add(Object[])
- uid: System.Object[]
  parent: System
  isExternal: false
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Xml.Linq.XContainer.AddFirst(System.Object)
  parent: System.Xml.Linq.XContainer
  isExternal: false
  name: AddFirst(Object)
  nameWithType: XContainer.AddFirst(Object)
  fullName: XContainer.AddFirst(Object)
- uid: System.Xml.Linq.XContainer.AddFirst(System.Object[])
  parent: System.Xml.Linq.XContainer
  isExternal: false
  name: AddFirst(Object[])
  nameWithType: XContainer.AddFirst(Object[])
  fullName: XContainer.AddFirst(Object[])
- uid: System.Xml.Linq.XContainer.CreateWriter
  parent: System.Xml.Linq.XContainer
  isExternal: false
  name: CreateWriter()
  nameWithType: XContainer.CreateWriter()
  fullName: XContainer.CreateWriter()
- uid: System.Xml.XmlWriter
  parent: System.Xml
  isExternal: false
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Xml.Linq.XContainer.DescendantNodes
  parent: System.Xml.Linq.XContainer
  isExternal: false
  name: DescendantNodes()
  nameWithType: XContainer.DescendantNodes()
  fullName: XContainer.DescendantNodes()
- uid: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
- uid: System.Collections.Generic.IEnumerable{System.Xml.Linq.XNode}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<XNode>
  nameWithType: IEnumerable<XNode>
  fullName: System.Collections.Generic.IEnumerable<System.Xml.Linq.XNode>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Xml.Linq.XNode
    name: XNode
    nameWithType: XNode
    fullName: System.Xml.Linq.XNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xml.Linq.XContainer.Descendants
  parent: System.Xml.Linq.XContainer
  isExternal: false
  name: Descendants()
  nameWithType: XContainer.Descendants()
  fullName: XContainer.Descendants()
- uid: System.Xml.Linq.XElement
  name: XElement
  nameWithType: XElement
  fullName: System.Xml.Linq.XElement
- uid: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<XElement>
  nameWithType: IEnumerable<XElement>
  fullName: System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Xml.Linq.XElement
    name: XElement
    nameWithType: XElement
    fullName: System.Xml.Linq.XElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xml.Linq.XContainer.Descendants(System.Xml.Linq.XName)
  parent: System.Xml.Linq.XContainer
  isExternal: false
  name: Descendants(XName)
  nameWithType: XContainer.Descendants(XName)
  fullName: XContainer.Descendants(XName)
- uid: System.Xml.Linq.XName
  parent: System.Xml.Linq
  isExternal: false
  name: XName
  nameWithType: XName
  fullName: System.Xml.Linq.XName
- uid: System.Xml.Linq.XContainer.Element(System.Xml.Linq.XName)
  parent: System.Xml.Linq.XContainer
  isExternal: false
  name: Element(XName)
  nameWithType: XContainer.Element(XName)
  fullName: XContainer.Element(XName)
- uid: System.Xml.Linq.XContainer.Elements
  parent: System.Xml.Linq.XContainer
  isExternal: false
  name: Elements()
  nameWithType: XContainer.Elements()
  fullName: XContainer.Elements()
- uid: System.Xml.Linq.XContainer.Elements(System.Xml.Linq.XName)
  parent: System.Xml.Linq.XContainer
  isExternal: false
  name: Elements(XName)
  nameWithType: XContainer.Elements(XName)
  fullName: XContainer.Elements(XName)
- uid: System.Xml.Linq.XContainer.FirstNode
  parent: System.Xml.Linq.XContainer
  isExternal: false
  name: FirstNode
  nameWithType: XContainer.FirstNode
  fullName: XContainer.FirstNode
- uid: System.Xml.Linq.XContainer.LastNode
  parent: System.Xml.Linq.XContainer
  isExternal: false
  name: LastNode
  nameWithType: XContainer.LastNode
  fullName: XContainer.LastNode
- uid: System.Xml.Linq.XContainer.Nodes
  parent: System.Xml.Linq.XContainer
  isExternal: false
  name: Nodes()
  nameWithType: XContainer.Nodes()
  fullName: XContainer.Nodes()
- uid: System.Xml.Linq.XContainer.RemoveNodes
  parent: System.Xml.Linq.XContainer
  isExternal: false
  name: RemoveNodes()
  nameWithType: XContainer.RemoveNodes()
  fullName: XContainer.RemoveNodes()
- uid: System.Xml.Linq.XContainer.ReplaceNodes(System.Object)
  parent: System.Xml.Linq.XContainer
  isExternal: false
  name: ReplaceNodes(Object)
  nameWithType: XContainer.ReplaceNodes(Object)
  fullName: XContainer.ReplaceNodes(Object)
- uid: System.Xml.Linq.XContainer.ReplaceNodes(System.Object[])
  parent: System.Xml.Linq.XContainer
  isExternal: false
  name: ReplaceNodes(Object[])
  nameWithType: XContainer.ReplaceNodes(Object[])
  fullName: XContainer.ReplaceNodes(Object[])
- uid: System.Xml.Linq.XContainer.Add*
  parent: System.Xml.Linq.XContainer
  isExternal: false
  name: Add
  nameWithType: XContainer.Add
  fullName: XContainer.Add
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XContainer.xml
- uid: System.Xml.Linq.XContainer.AddFirst*
  parent: System.Xml.Linq.XContainer
  isExternal: false
  name: AddFirst
  nameWithType: XContainer.AddFirst
  fullName: XContainer.AddFirst
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XContainer.xml
- uid: System.Xml.Linq.XContainer.Descendants*
  parent: System.Xml.Linq.XContainer
  isExternal: false
  name: Descendants
  nameWithType: XContainer.Descendants
  fullName: XContainer.Descendants
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XContainer.xml
- uid: System.Xml.Linq.XContainer.Elements*
  parent: System.Xml.Linq.XContainer
  isExternal: false
  name: Elements
  nameWithType: XContainer.Elements
  fullName: XContainer.Elements
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XContainer.xml
- uid: System.Xml.Linq.XContainer.ReplaceNodes*
  parent: System.Xml.Linq.XContainer
  isExternal: false
  name: ReplaceNodes
  nameWithType: XContainer.ReplaceNodes
  fullName: XContainer.ReplaceNodes
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XContainer.xml
- uid: System.Xml.Linq.XContainer.CreateWriter*
  parent: System.Xml.Linq.XContainer
  isExternal: false
  name: CreateWriter
  nameWithType: XContainer.CreateWriter
  fullName: XContainer.CreateWriter
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XContainer.xml
- uid: System.Xml.Linq.XContainer.DescendantNodes*
  parent: System.Xml.Linq.XContainer
  isExternal: false
  name: DescendantNodes
  nameWithType: XContainer.DescendantNodes
  fullName: XContainer.DescendantNodes
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XContainer.xml
- uid: System.Xml.Linq.XContainer.Element*
  parent: System.Xml.Linq.XContainer
  isExternal: false
  name: Element
  nameWithType: XContainer.Element
  fullName: XContainer.Element
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XContainer.xml
- uid: System.Xml.Linq.XContainer.FirstNode*
  parent: System.Xml.Linq.XContainer
  isExternal: false
  name: FirstNode
  nameWithType: XContainer.FirstNode
  fullName: XContainer.FirstNode
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XContainer.xml
- uid: System.Xml.Linq.XContainer.LastNode*
  parent: System.Xml.Linq.XContainer
  isExternal: false
  name: LastNode
  nameWithType: XContainer.LastNode
  fullName: XContainer.LastNode
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XContainer.xml
- uid: System.Xml.Linq.XContainer.Nodes*
  parent: System.Xml.Linq.XContainer
  isExternal: false
  name: Nodes
  nameWithType: XContainer.Nodes
  fullName: XContainer.Nodes
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XContainer.xml
- uid: System.Xml.Linq.XContainer.RemoveNodes*
  parent: System.Xml.Linq.XContainer
  isExternal: false
  name: RemoveNodes
  nameWithType: XContainer.RemoveNodes
  fullName: XContainer.RemoveNodes
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XContainer.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Xml.Linq.XNode.ToString
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: ToString()
  nameWithType: XNode.ToString()
  fullName: XNode.ToString()
- uid: System.Xml.Linq.XObject.AddAnnotation(System.Object)
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: AddAnnotation(Object)
  nameWithType: XObject.AddAnnotation(Object)
  fullName: XObject.AddAnnotation(Object)
- uid: System.Xml.Linq.XObject.Annotation(System.Type)
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: Annotation(Type)
  nameWithType: XObject.Annotation(Type)
  fullName: XObject.Annotation(Type)
- uid: System.Xml.Linq.XObject.Annotation``1
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: Annotation<T>()
  nameWithType: XObject.Annotation<T>()
  fullName: XObject.Annotation<T>()
- uid: System.Xml.Linq.XObject.Annotations(System.Type)
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: Annotations(Type)
  nameWithType: XObject.Annotations(Type)
  fullName: XObject.Annotations(Type)
- uid: System.Xml.Linq.XObject.Annotations``1
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: Annotations<T>()
  nameWithType: XObject.Annotations<T>()
  fullName: XObject.Annotations<T>()
- uid: System.Xml.Linq.XObject.BaseUri
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: BaseUri
  nameWithType: XObject.BaseUri
  fullName: XObject.BaseUri
- uid: System.Xml.Linq.XObject.Changed
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: Changed
  nameWithType: XObject.Changed
  fullName: XObject.Changed
- uid: System.Xml.Linq.XObject.Changing
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: Changing
  nameWithType: XObject.Changing
  fullName: XObject.Changing
- uid: System.Xml.Linq.XObject.Document
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: Document
  nameWithType: XObject.Document
  fullName: XObject.Document
- uid: System.Xml.Linq.XObject.NodeType
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: NodeType
  nameWithType: XObject.NodeType
  fullName: XObject.NodeType
- uid: System.Xml.Linq.XObject.Parent
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: Parent
  nameWithType: XObject.Parent
  fullName: XObject.Parent
- uid: System.Xml.Linq.XObject.RemoveAnnotations(System.Type)
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: RemoveAnnotations(Type)
  nameWithType: XObject.RemoveAnnotations(Type)
  fullName: XObject.RemoveAnnotations(Type)
- uid: System.Xml.Linq.XObject.RemoveAnnotations``1
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: RemoveAnnotations<T>()
  nameWithType: XObject.RemoveAnnotations<T>()
  fullName: XObject.RemoveAnnotations<T>()
- uid: System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#HasLineInfo
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: IXmlLineInfo.HasLineInfo()
  nameWithType: XObject.IXmlLineInfo.HasLineInfo()
  fullName: XObject.IXmlLineInfo.HasLineInfo()
- uid: System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LineNumber
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: IXmlLineInfo.LineNumber
  nameWithType: XObject.IXmlLineInfo.LineNumber
  fullName: XObject.IXmlLineInfo.LineNumber
- uid: System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LinePosition
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: IXmlLineInfo.LinePosition
  nameWithType: XObject.IXmlLineInfo.LinePosition
  fullName: XObject.IXmlLineInfo.LinePosition
- uid: System.Xml.Linq.XNode.AddAfterSelf(System.Object)
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: AddAfterSelf(Object)
  nameWithType: XNode.AddAfterSelf(Object)
  fullName: XNode.AddAfterSelf(Object)
- uid: System.Xml.Linq.XNode.AddAfterSelf(System.Object[])
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: AddAfterSelf(Object[])
  nameWithType: XNode.AddAfterSelf(Object[])
  fullName: XNode.AddAfterSelf(Object[])
- uid: System.Xml.Linq.XNode.AddBeforeSelf(System.Object)
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: AddBeforeSelf(Object)
  nameWithType: XNode.AddBeforeSelf(Object)
  fullName: XNode.AddBeforeSelf(Object)
- uid: System.Xml.Linq.XNode.AddBeforeSelf(System.Object[])
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: AddBeforeSelf(Object[])
  nameWithType: XNode.AddBeforeSelf(Object[])
  fullName: XNode.AddBeforeSelf(Object[])
- uid: System.Xml.Linq.XNode.Ancestors
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: Ancestors()
  nameWithType: XNode.Ancestors()
  fullName: XNode.Ancestors()
- uid: System.Xml.Linq.XNode.Ancestors(System.Xml.Linq.XName)
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: Ancestors(XName)
  nameWithType: XNode.Ancestors(XName)
  fullName: XNode.Ancestors(XName)
- uid: System.Xml.Linq.XNode.CompareDocumentOrder(System.Xml.Linq.XNode,System.Xml.Linq.XNode)
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: CompareDocumentOrder(XNode, XNode)
  nameWithType: XNode.CompareDocumentOrder(XNode, XNode)
  fullName: XNode.CompareDocumentOrder(XNode, XNode)
- uid: System.Xml.Linq.XNode.CreateReader
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: CreateReader()
  nameWithType: XNode.CreateReader()
  fullName: XNode.CreateReader()
- uid: System.Xml.Linq.XNode.CreateReader(System.Xml.Linq.ReaderOptions)
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: CreateReader(ReaderOptions)
  nameWithType: XNode.CreateReader(ReaderOptions)
  fullName: XNode.CreateReader(ReaderOptions)
- uid: System.Xml.Linq.XNode.DeepEquals(System.Xml.Linq.XNode,System.Xml.Linq.XNode)
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: DeepEquals(XNode, XNode)
  nameWithType: XNode.DeepEquals(XNode, XNode)
  fullName: XNode.DeepEquals(XNode, XNode)
- uid: System.Xml.Linq.XNode.DocumentOrderComparer
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: DocumentOrderComparer
  nameWithType: XNode.DocumentOrderComparer
  fullName: XNode.DocumentOrderComparer
- uid: System.Xml.Linq.XNode.ElementsAfterSelf
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: ElementsAfterSelf()
  nameWithType: XNode.ElementsAfterSelf()
  fullName: XNode.ElementsAfterSelf()
- uid: System.Xml.Linq.XNode.ElementsAfterSelf(System.Xml.Linq.XName)
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: ElementsAfterSelf(XName)
  nameWithType: XNode.ElementsAfterSelf(XName)
  fullName: XNode.ElementsAfterSelf(XName)
- uid: System.Xml.Linq.XNode.ElementsBeforeSelf
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: ElementsBeforeSelf()
  nameWithType: XNode.ElementsBeforeSelf()
  fullName: XNode.ElementsBeforeSelf()
- uid: System.Xml.Linq.XNode.ElementsBeforeSelf(System.Xml.Linq.XName)
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: ElementsBeforeSelf(XName)
  nameWithType: XNode.ElementsBeforeSelf(XName)
  fullName: XNode.ElementsBeforeSelf(XName)
- uid: System.Xml.Linq.XNode.EqualityComparer
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: EqualityComparer
  nameWithType: XNode.EqualityComparer
  fullName: XNode.EqualityComparer
- uid: System.Xml.Linq.XNode.IsAfter(System.Xml.Linq.XNode)
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: IsAfter(XNode)
  nameWithType: XNode.IsAfter(XNode)
  fullName: XNode.IsAfter(XNode)
- uid: System.Xml.Linq.XNode.IsBefore(System.Xml.Linq.XNode)
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: IsBefore(XNode)
  nameWithType: XNode.IsBefore(XNode)
  fullName: XNode.IsBefore(XNode)
- uid: System.Xml.Linq.XNode.NextNode
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: NextNode
  nameWithType: XNode.NextNode
  fullName: XNode.NextNode
- uid: System.Xml.Linq.XNode.NodesAfterSelf
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: NodesAfterSelf()
  nameWithType: XNode.NodesAfterSelf()
  fullName: XNode.NodesAfterSelf()
- uid: System.Xml.Linq.XNode.NodesBeforeSelf
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: NodesBeforeSelf()
  nameWithType: XNode.NodesBeforeSelf()
  fullName: XNode.NodesBeforeSelf()
- uid: System.Xml.Linq.XNode.PreviousNode
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: PreviousNode
  nameWithType: XNode.PreviousNode
  fullName: XNode.PreviousNode
- uid: System.Xml.Linq.XNode.ReadFrom(System.Xml.XmlReader)
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: ReadFrom(XmlReader)
  nameWithType: XNode.ReadFrom(XmlReader)
  fullName: XNode.ReadFrom(XmlReader)
- uid: System.Xml.Linq.XNode.ReadFromAsync(System.Xml.XmlReader,System.Threading.CancellationToken)
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: ReadFromAsync(XmlReader, CancellationToken)
  nameWithType: XNode.ReadFromAsync(XmlReader, CancellationToken)
  fullName: XNode.ReadFromAsync(XmlReader, CancellationToken)
- uid: System.Xml.Linq.XNode.Remove
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: Remove()
  nameWithType: XNode.Remove()
  fullName: XNode.Remove()
- uid: System.Xml.Linq.XNode.ReplaceWith(System.Object)
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: ReplaceWith(Object)
  nameWithType: XNode.ReplaceWith(Object)
  fullName: XNode.ReplaceWith(Object)
- uid: System.Xml.Linq.XNode.ReplaceWith(System.Object[])
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: ReplaceWith(Object[])
  nameWithType: XNode.ReplaceWith(Object[])
  fullName: XNode.ReplaceWith(Object[])
- uid: System.Xml.Linq.XNode.ToString(System.Xml.Linq.SaveOptions)
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: ToString(SaveOptions)
  nameWithType: XNode.ToString(SaveOptions)
  fullName: XNode.ToString(SaveOptions)
- uid: System.Xml.Linq.XNode.WriteTo(System.Xml.XmlWriter)
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: WriteTo(XmlWriter)
  nameWithType: XNode.WriteTo(XmlWriter)
  fullName: XNode.WriteTo(XmlWriter)
- uid: System.Xml.Linq.XNode.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)
  parent: System.Xml.Linq.XNode
  isExternal: false
  name: WriteToAsync(XmlWriter, CancellationToken)
  nameWithType: XNode.WriteToAsync(XmlWriter, CancellationToken)
  fullName: XNode.WriteToAsync(XmlWriter, CancellationToken)
- uid: System.Xml.XPath.Extensions.CreateNavigator(System.Xml.Linq.XNode)
  parent: System.Xml.XPath.Extensions
  isExternal: false
  name: CreateNavigator(XNode)
  nameWithType: Extensions.CreateNavigator(XNode)
  fullName: Extensions.CreateNavigator(XNode)
- uid: System.Xml.XPath.Extensions.CreateNavigator(System.Xml.Linq.XNode,System.Xml.XmlNameTable)
  parent: System.Xml.XPath.Extensions
  isExternal: false
  name: CreateNavigator(XNode, XmlNameTable)
  nameWithType: Extensions.CreateNavigator(XNode, XmlNameTable)
  fullName: Extensions.CreateNavigator(XNode, XmlNameTable)
- uid: System.Xml.XPath.Extensions.XPathEvaluate(System.Xml.Linq.XNode,System.String)
  parent: System.Xml.XPath.Extensions
  isExternal: false
  name: XPathEvaluate(XNode, String)
  nameWithType: Extensions.XPathEvaluate(XNode, String)
  fullName: Extensions.XPathEvaluate(XNode, String)
- uid: System.Xml.XPath.Extensions.XPathEvaluate(System.Xml.Linq.XNode,System.String,System.Xml.IXmlNamespaceResolver)
  parent: System.Xml.XPath.Extensions
  isExternal: false
  name: XPathEvaluate(XNode, String, IXmlNamespaceResolver)
  nameWithType: Extensions.XPathEvaluate(XNode, String, IXmlNamespaceResolver)
  fullName: Extensions.XPathEvaluate(XNode, String, IXmlNamespaceResolver)
- uid: System.Xml.XPath.Extensions.XPathSelectElement(System.Xml.Linq.XNode,System.String)
  parent: System.Xml.XPath.Extensions
  isExternal: false
  name: XPathSelectElement(XNode, String)
  nameWithType: Extensions.XPathSelectElement(XNode, String)
  fullName: Extensions.XPathSelectElement(XNode, String)
- uid: System.Xml.XPath.Extensions.XPathSelectElement(System.Xml.Linq.XNode,System.String,System.Xml.IXmlNamespaceResolver)
  parent: System.Xml.XPath.Extensions
  isExternal: false
  name: XPathSelectElement(XNode, String, IXmlNamespaceResolver)
  nameWithType: Extensions.XPathSelectElement(XNode, String, IXmlNamespaceResolver)
  fullName: Extensions.XPathSelectElement(XNode, String, IXmlNamespaceResolver)
- uid: System.Xml.XPath.Extensions.XPathSelectElements(System.Xml.Linq.XNode,System.String)
  parent: System.Xml.XPath.Extensions
  isExternal: false
  name: XPathSelectElements(XNode, String)
  nameWithType: Extensions.XPathSelectElements(XNode, String)
  fullName: Extensions.XPathSelectElements(XNode, String)
- uid: System.Xml.XPath.Extensions.XPathSelectElements(System.Xml.Linq.XNode,System.String,System.Xml.IXmlNamespaceResolver)
  parent: System.Xml.XPath.Extensions
  isExternal: false
  name: XPathSelectElements(XNode, String, IXmlNamespaceResolver)
  nameWithType: Extensions.XPathSelectElements(XNode, String, IXmlNamespaceResolver)
  fullName: Extensions.XPathSelectElements(XNode, String, IXmlNamespaceResolver)
- uid: System.Xml.XPath.XDocumentExtensions.ToXPathNavigable(System.Xml.Linq.XNode)
  parent: System.Xml.XPath.XDocumentExtensions
  isExternal: false
  name: ToXPathNavigable(XNode)
  nameWithType: XDocumentExtensions.ToXPathNavigable(XNode)
  fullName: XDocumentExtensions.ToXPathNavigable(XNode)
