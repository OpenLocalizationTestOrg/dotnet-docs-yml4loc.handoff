{"nodes":[{"content":"Represents a reader that can read a sequential series of characters.","nodes":[{"pos":[0,68],"content":"Represents a reader that can read a sequential series of characters.","nodes":[{"content":"Represents a reader that can read a sequential series of characters.","pos":[0,68]}]}],"pos":[1109,1178],"yaml":true},{"content":"<xref:System.IO.TextReader> is the abstract base class of <xref:System.IO.StreamReader> and <xref:System.IO.StringReader>, which read characters from streams and strings, respectively. Use these derived classes to open a text file for reading a specified range of characters, or to create a reader based on an existing stream.  \n  \n> [!IMPORTANT]\n>  This type implements the <xref:System.IDisposable> interface. When you have finished using any type that derives from this type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IO.TextReader.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see Dispose and the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.","nodes":[{"pos":[0,326],"content":"<xref:System.IO.TextReader> is the abstract base class of <xref:System.IO.StreamReader> and <xref:System.IO.StringReader>, which read characters from streams and strings, respectively. Use these derived classes to open a text file for reading a specified range of characters, or to create a reader based on an existing stream.","nodes":[{"content":"<xref:System.IO.TextReader> is the abstract base class of <xref:System.IO.StreamReader> and <xref:System.IO.StringReader>, which read characters from streams and strings, respectively. Use these derived classes to open a text file for reading a specified range of characters, or to create a reader based on an existing stream.","pos":[0,326],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.IO.TextReader&gt;</ph> is the abstract base class of <ph id=\"ph2\">&lt;xref:System.IO.StreamReader&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.IO.StringReader&gt;</ph>, which read characters from streams and strings, respectively.","pos":[0,184],"source":"<xref:System.IO.TextReader> is the abstract base class of <xref:System.IO.StreamReader> and <xref:System.IO.StringReader>, which read characters from streams and strings, respectively."},{"content":"Use these derived classes to open a text file for reading a specified range of characters, or to create a reader based on an existing stream.","pos":[185,326]}]}]},{"pos":[334,902],"content":"[!IMPORTANT]\n This type implements the <xref:System.IDisposable> interface. When you have finished using any type that derives from this type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IO.TextReader.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see Dispose and the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.","leadings":["","> "],"nodes":[{"content":" This type implements the <xref:System.IDisposable> interface. When you have finished using any type that derives from this type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IO.TextReader.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see Dispose and the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.","pos":[13,566],"nodes":[{"content":"This type implements the <ph id=\"ph1\">&lt;xref:System.IDisposable&gt;</ph> interface.","pos":[1,62],"source":" This type implements the <xref:System.IDisposable> interface."},{"content":"When you have finished using any type that derives from this type, you should dispose of it either directly or indirectly.","pos":[63,185]},{"content":"To dispose of the type directly, call its <ph id=\"ph1\">&lt;xref:System.IO.TextReader.Dispose%2A&gt;</ph> method in a <ph id=\"ph2\">`try`</ph><ph id=\"ph3\">/</ph><ph id=\"ph4\">`catch`</ph> block.","pos":[186,299],"source":" To dispose of the type directly, call its <xref:System.IO.TextReader.Dispose%2A> method in a `try`/`catch` block."},{"content":"To dispose of it indirectly, use a language construct such as <ph id=\"ph1\">`using`</ph> (in C#) or <ph id=\"ph2\">`Using`</ph> (in Visual Basic).","pos":[300,407],"source":" To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic)."},{"content":"For more information, see Dispose and the \"Using an Object that Implements IDisposable\" section in the <ph id=\"ph1\">&lt;xref:System.IDisposable&gt;</ph> interface topic.","pos":[408,553],"source":" For more information, see Dispose and the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic."}]}]}],"pos":[1189,2099],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.IO.TextReader\"></xref> class.","nodes":[{"pos":[0,82],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IO.TextReader\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.IO.TextReader\"></xref> class."}],"pos":[5128,5211],"yaml":true},{"content":"Use this constructor for derived classes.","nodes":[{"pos":[0,41],"content":"Use this constructor for derived classes.","nodes":[{"content":"Use this constructor for derived classes.","pos":[0,41]}]}],"pos":[5222,5264],"yaml":true,"extradata":"MT"},{"content":"Closes the <xref href=\"System.IO.TextReader\"></xref> and releases any system resources associated with the `TextReader`.","nodes":[{"pos":[0,120],"content":"Closes the <ph id=\"ph1\">&lt;xref href=\"System.IO.TextReader\"&gt;&lt;/xref&gt;</ph> and releases any system resources associated with the <ph id=\"ph2\">`TextReader`</ph>.","source":"Closes the <xref href=\"System.IO.TextReader\"></xref> and releases any system resources associated with the `TextReader`."}],"pos":[6789,6910],"yaml":true},{"content":"This implementation of `Close` calls the <xref:System.IO.StringReader.Dispose%28System.Boolean%29?displayProperty=fullName> method and passes it a `true` value.  \n  \n Flushing the text reader will not flush its underlying encoder unless you explicitly call `Close`. Setting the <xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=fullName> property to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can be encoded only after the encoder receives the adjacent character or characters.  \n  \n> [!NOTE]\n>  In derived classes, do not override the <xref:System.IO.TextReader.Close%2A> method. Instead, override the <xref:System.IO.TextReader.Dispose%28System.Boolean%29?displayProperty=fullName> method to add code for releasing resources.","nodes":[{"pos":[0,160],"content":"This implementation of <ph id=\"ph1\">`Close`</ph> calls the <ph id=\"ph2\">&lt;xref:System.IO.StringReader.Dispose%28System.Boolean%29?displayProperty=fullName&gt;</ph> method and passes it a <ph id=\"ph3\">`true`</ph> value.","source":"This implementation of `Close` calls the <xref:System.IO.StringReader.Dispose%28System.Boolean%29?displayProperty=fullName> method and passes it a `true` value."},{"pos":[167,741],"content":"Flushing the text reader will not flush its underlying encoder unless you explicitly call `Close`. Setting the <xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=fullName> property to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can be encoded only after the encoder receives the adjacent character or characters.","nodes":[{"content":"Flushing the text reader will not flush its underlying encoder unless you explicitly call <ph id=\"ph1\">`Close`</ph>.","pos":[0,98],"source":"Flushing the text reader will not flush its underlying encoder unless you explicitly call `Close`."},{"content":"Setting the <ph id=\"ph1\">&lt;xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=fullName&gt;</ph> property to <ph id=\"ph2\">`true`</ph> means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.","pos":[99,303],"source":" Setting the <xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=fullName> property to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed."},{"content":"This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.","pos":[304,428]},{"content":"This scenario affects UTF8 and UTF7 where certain characters can be encoded only after the encoder receives the adjacent character or characters.","pos":[429,574]}]},{"pos":[749,991],"content":"[!NOTE]\n In derived classes, do not override the <xref:System.IO.TextReader.Close%2A> method. Instead, override the <xref:System.IO.TextReader.Dispose%28System.Boolean%29?displayProperty=fullName> method to add code for releasing resources.","leadings":["","> "],"nodes":[{"content":" In derived classes, do not override the <xref:System.IO.TextReader.Close%2A> method. Instead, override the <xref:System.IO.TextReader.Dispose%28System.Boolean%29?displayProperty=fullName> method to add code for releasing resources.","pos":[8,240],"nodes":[{"content":"In derived classes, do not override the <ph id=\"ph1\">&lt;xref:System.IO.TextReader.Close%2A&gt;</ph> method.","pos":[1,85],"source":" In derived classes, do not override the <xref:System.IO.TextReader.Close%2A> method."},{"content":"Instead, override the <ph id=\"ph1\">&lt;xref:System.IO.TextReader.Dispose%28System.Boolean%29?displayProperty=fullName&gt;</ph> method to add code for releasing resources.","pos":[86,232],"source":" Instead, override the <xref:System.IO.TextReader.Dispose%28System.Boolean%29?displayProperty=fullName> method to add code for releasing resources."}]}]}],"pos":[6921,7920],"yaml":true,"extradata":"MT"},{"content":"Releases all resources used by the <xref href=\"System.IO.TextReader\"></xref> object.","nodes":[{"pos":[0,84],"content":"Releases all resources used by the <ph id=\"ph1\">&lt;xref href=\"System.IO.TextReader\"&gt;&lt;/xref&gt;</ph> object.","source":"Releases all resources used by the <xref href=\"System.IO.TextReader\"></xref> object."}],"pos":[9132,9217],"yaml":true},{"content":"Call <xref:System.IO.TextReader.Dispose%2A> when you are finished using the <xref:System.IO.TextReader>. The <xref:System.IO.TextReader.Dispose%2A> method leaves the <xref:System.IO.TextReader> in an unusable state. After calling <xref:System.IO.TextReader.Dispose%2A>, you must release all references to the <xref:System.IO.TextReader> so the garbage collector can reclaim the memory that the <xref:System.IO.TextReader> was occupying.  \n  \n For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  \n  \n> [!NOTE]\n>  Always call <xref:System.IO.TextReader.Dispose%2A> before you release your last reference to the <xref:System.IO.TextReader>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.IO.TextReader> object's <xref:System.Object.Finalize%2A> method.","nodes":[{"pos":[0,436],"content":"Call <xref:System.IO.TextReader.Dispose%2A> when you are finished using the <xref:System.IO.TextReader>. The <xref:System.IO.TextReader.Dispose%2A> method leaves the <xref:System.IO.TextReader> in an unusable state. After calling <xref:System.IO.TextReader.Dispose%2A>, you must release all references to the <xref:System.IO.TextReader> so the garbage collector can reclaim the memory that the <xref:System.IO.TextReader> was occupying.","nodes":[{"content":"Call <xref:System.IO.TextReader.Dispose%2A> when you are finished using the <xref:System.IO.TextReader>. The <xref:System.IO.TextReader.Dispose%2A> method leaves the <xref:System.IO.TextReader> in an unusable state. After calling <xref:System.IO.TextReader.Dispose%2A>, you must release all references to the <xref:System.IO.TextReader> so the garbage collector can reclaim the memory that the <xref:System.IO.TextReader> was occupying.","pos":[0,436],"nodes":[{"content":"Call <ph id=\"ph1\">&lt;xref:System.IO.TextReader.Dispose%2A&gt;</ph> when you are finished using the <ph id=\"ph2\">&lt;xref:System.IO.TextReader&gt;</ph>.","pos":[0,104],"source":"Call <xref:System.IO.TextReader.Dispose%2A> when you are finished using the <xref:System.IO.TextReader>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.TextReader.Dispose%2A&gt;</ph> method leaves the <ph id=\"ph2\">&lt;xref:System.IO.TextReader&gt;</ph> in an unusable state.","pos":[105,215],"source":" The <xref:System.IO.TextReader.Dispose%2A> method leaves the <xref:System.IO.TextReader> in an unusable state."},{"content":"After calling <ph id=\"ph1\">&lt;xref:System.IO.TextReader.Dispose%2A&gt;</ph>, you must release all references to the <ph id=\"ph2\">&lt;xref:System.IO.TextReader&gt;</ph> so the garbage collector can reclaim the memory that the <ph id=\"ph3\">&lt;xref:System.IO.TextReader&gt;</ph> was occupying.","pos":[216,436],"source":" After calling <xref:System.IO.TextReader.Dispose%2A>, you must release all references to the <xref:System.IO.TextReader> so the garbage collector can reclaim the memory that the <xref:System.IO.TextReader> was occupying."}]}]},{"pos":[443,648],"content":"For more information, see <bpt id=\"p1\">[</bpt>Cleaning Up Unmanaged Resources<ept id=\"p1\">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id=\"p2\">[</bpt>Implementing a Dispose Method<ept id=\"p2\">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.","source":"For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md)."},{"pos":[656,963],"content":"[!NOTE]\n Always call <xref:System.IO.TextReader.Dispose%2A> before you release your last reference to the <xref:System.IO.TextReader>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.IO.TextReader> object's <xref:System.Object.Finalize%2A> method.","leadings":["","> "],"nodes":[{"content":" Always call <xref:System.IO.TextReader.Dispose%2A> before you release your last reference to the <xref:System.IO.TextReader>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.IO.TextReader> object's <xref:System.Object.Finalize%2A> method.","pos":[8,305],"nodes":[{"content":"Always call <ph id=\"ph1\">&lt;xref:System.IO.TextReader.Dispose%2A&gt;</ph> before you release your last reference to the <ph id=\"ph2\">&lt;xref:System.IO.TextReader&gt;</ph>.","pos":[1,126],"source":" Always call <xref:System.IO.TextReader.Dispose%2A> before you release your last reference to the <xref:System.IO.TextReader>."},{"content":"Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id=\"ph1\">&lt;xref:System.IO.TextReader&gt;</ph> object's <ph id=\"ph2\">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.","pos":[127,297],"source":" Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.IO.TextReader> object's <xref:System.Object.Finalize%2A> method."}]}]}],"pos":[9228,10199],"yaml":true,"extradata":"MT"},{"content":"Releases the unmanaged resources used by the <xref href=\"System.IO.TextReader\"></xref> and optionally releases the managed resources.","nodes":[{"pos":[0,133],"content":"Releases the unmanaged resources used by the <ph id=\"ph1\">&lt;xref href=\"System.IO.TextReader\"&gt;&lt;/xref&gt;</ph> and optionally releases the managed resources.","source":"Releases the unmanaged resources used by the <xref href=\"System.IO.TextReader\"></xref> and optionally releases the managed resources."}],"pos":[11820,11954],"yaml":true},{"content":"This method is called by the public `Dispose` method and the <xref:System.Object.Finalize%2A> method. By default, this method specifies the `disposing` parameter as `true`. <xref:System.Object.Finalize%2A> specifies the `disposing` parameter as `false`.  \n  \n When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.IO.TextReader> references. This method invokes the `Dispose` method of each referenced object.","nodes":[{"pos":[0,253],"content":"This method is called by the public `Dispose` method and the <xref:System.Object.Finalize%2A> method. By default, this method specifies the `disposing` parameter as `true`. <xref:System.Object.Finalize%2A> specifies the `disposing` parameter as `false`.","nodes":[{"content":"This method is called by the public <ph id=\"ph1\">`Dispose`</ph> method and the <ph id=\"ph2\">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.","pos":[0,101],"source":"This method is called by the public `Dispose` method and the <xref:System.Object.Finalize%2A> method."},{"content":"By default, this method specifies the <ph id=\"ph1\">`disposing`</ph> parameter as <ph id=\"ph2\">`true`</ph>.","pos":[102,172],"source":" By default, this method specifies the `disposing` parameter as `true`."},{"content":"<ph id=\"ph1\">&lt;xref:System.Object.Finalize%2A&gt;</ph> specifies the <ph id=\"ph2\">`disposing`</ph> parameter as <ph id=\"ph3\">`false`</ph>.","pos":[173,253],"source":" <xref:System.Object.Finalize%2A> specifies the `disposing` parameter as `false`."}]},{"pos":[260,482],"content":"When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.IO.TextReader> references. This method invokes the `Dispose` method of each referenced object.","nodes":[{"content":"When the <ph id=\"ph1\">`disposing`</ph> parameter is <ph id=\"ph2\">`true`</ph>, this method releases all resources held by any managed objects that this <ph id=\"ph3\">&lt;xref:System.IO.TextReader&gt;</ph> references.","pos":[0,154],"source":"When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.IO.TextReader> references."},{"content":"This method invokes the <ph id=\"ph1\">`Dispose`</ph> method of each referenced object.","pos":[155,222],"source":" This method invokes the `Dispose` method of each referenced object."}]}],"pos":[11965,12452],"yaml":true,"extradata":"MT"},{"content":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.","nodes":[{"pos":[0,100],"content":"<ph id=\"ph1\">`true`</ph> to release both managed and unmanaged resources; <ph id=\"ph2\">`false`</ph> to release only unmanaged resources.","source":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources."}],"pos":[12606,12709],"yaml":true},{"content":"Provides a `TextReader` with no data to read from.","nodes":[{"pos":[0,50],"content":"Provides a <ph id=\"ph1\">`TextReader`</ph> with no data to read from.","source":"Provides a `TextReader` with no data to read from."}],"pos":[14174,14225],"yaml":true},{"content":"Reading from the <xref:System.IO.TextReader.Null> text reader is similar to reading from the end of a stream:  \n  \n-   The <xref:System.IO.TextReader.Read%2A> and <xref:System.IO.TextReader.Peek%2A> methods return -1.  \n  \n-   The <xref:System.IO.TextReader.ReadBlock%2A> method returns zero.  \n  \n-   The <xref:System.IO.TextReader.ReadLine%2A> method returns `null`.  \n  \n-   The <xref:System.IO.TextReader.ReadToEnd%2A> method returns an empty string.","nodes":[{"pos":[0,109],"content":"Reading from the <xref:System.IO.TextReader.Null> text reader is similar to reading from the end of a stream:","nodes":[{"content":"Reading from the <ph id=\"ph1\">&lt;xref:System.IO.TextReader.Null&gt;</ph> text reader is similar to reading from the end of a stream:","pos":[0,109],"source":"Reading from the <xref:System.IO.TextReader.Null> text reader is similar to reading from the end of a stream:"}]},{"pos":[119,217],"content":"The <xref:System.IO.TextReader.Read%2A> and <xref:System.IO.TextReader.Peek%2A> methods return -1.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.TextReader.Read%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IO.TextReader.Peek%2A&gt;</ph> methods return -1.","pos":[0,98],"source":"The <xref:System.IO.TextReader.Read%2A> and <xref:System.IO.TextReader.Peek%2A> methods return -1."}]},{"pos":[227,292],"content":"The <xref:System.IO.TextReader.ReadBlock%2A> method returns zero.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.TextReader.ReadBlock%2A&gt;</ph> method returns zero.","pos":[0,65],"source":"The <xref:System.IO.TextReader.ReadBlock%2A> method returns zero."}]},{"pos":[302,368],"content":"The <ph id=\"ph1\">&lt;xref:System.IO.TextReader.ReadLine%2A&gt;</ph> method returns <ph id=\"ph2\">`null`</ph>.","source":"The <xref:System.IO.TextReader.ReadLine%2A> method returns `null`."},{"pos":[378,454],"content":"The <xref:System.IO.TextReader.ReadToEnd%2A> method returns an empty string.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.TextReader.ReadToEnd%2A&gt;</ph> method returns an empty string.","pos":[0,76],"source":"The <xref:System.IO.TextReader.ReadToEnd%2A> method returns an empty string."}]}],"pos":[14236,14701],"yaml":true,"extradata":"MT"},{"content":"Reads the next character without changing the state of the reader or the character source. Returns the next available character without actually reading it from the reader.","nodes":[{"pos":[0,172],"content":"Reads the next character without changing the state of the reader or the character source. Returns the next available character without actually reading it from the reader.","nodes":[{"content":"Reads the next character without changing the state of the reader or the character source. Returns the next available character without actually reading it from the reader.","pos":[0,172],"nodes":[{"content":"Reads the next character without changing the state of the reader or the character source.","pos":[0,90]},{"content":"Returns the next available character without actually reading it from the reader.","pos":[91,172]}]}]}],"pos":[16267,16440],"yaml":true},{"content":"The <xref:System.IO.TextReader.Peek%2A> method returns an integer value in order to determine whether the end of the file, or another error has occurred. This allows a user to first check if the returned value is -1 before casting it to a <xref:System.Char> type.  \n  \n The current position of the <xref:System.IO.TextReader> is not changed by this operation. The returned value is -1 if no more characters are available. The default implementation returns -1.  \n  \n The <xref:System.IO.TextReader> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref:System.IO.TextReader.Peek%2A> method, see the <xref:System.IO.StreamReader.Peek%2A?displayProperty=fullName> method.","nodes":[{"pos":[0,263],"content":"The <xref:System.IO.TextReader.Peek%2A> method returns an integer value in order to determine whether the end of the file, or another error has occurred. This allows a user to first check if the returned value is -1 before casting it to a <xref:System.Char> type.","nodes":[{"content":"The <xref:System.IO.TextReader.Peek%2A> method returns an integer value in order to determine whether the end of the file, or another error has occurred. This allows a user to first check if the returned value is -1 before casting it to a <xref:System.Char> type.","pos":[0,263],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.TextReader.Peek%2A&gt;</ph> method returns an integer value in order to determine whether the end of the file, or another error has occurred.","pos":[0,153],"source":"The <xref:System.IO.TextReader.Peek%2A> method returns an integer value in order to determine whether the end of the file, or another error has occurred."},{"content":"This allows a user to first check if the returned value is -1 before casting it to a <ph id=\"ph1\">&lt;xref:System.Char&gt;</ph> type.","pos":[154,263],"source":" This allows a user to first check if the returned value is -1 before casting it to a <xref:System.Char> type."}]}]},{"pos":[270,460],"content":"The current position of the <xref:System.IO.TextReader> is not changed by this operation. The returned value is -1 if no more characters are available. The default implementation returns -1.","nodes":[{"content":"The current position of the <xref:System.IO.TextReader> is not changed by this operation. The returned value is -1 if no more characters are available. The default implementation returns -1.","pos":[0,190],"nodes":[{"content":"The current position of the <ph id=\"ph1\">&lt;xref:System.IO.TextReader&gt;</ph> is not changed by this operation.","pos":[0,89],"source":"The current position of the <xref:System.IO.TextReader> is not changed by this operation."},{"content":"The returned value is -1 if no more characters are available.","pos":[90,151]},{"content":"The default implementation returns -1.","pos":[152,190]}]}]},{"pos":[467,728],"content":"The <xref:System.IO.TextReader> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref:System.IO.TextReader.Peek%2A> method, see the <xref:System.IO.StreamReader.Peek%2A?displayProperty=fullName> method.","nodes":[{"content":"The <xref:System.IO.TextReader> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref:System.IO.TextReader.Peek%2A> method, see the <xref:System.IO.StreamReader.Peek%2A?displayProperty=fullName> method.","pos":[0,261],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.TextReader&gt;</ph> class is an abstract class.","pos":[0,59],"source":"The <xref:System.IO.TextReader> class is an abstract class."},{"content":"Therefore, you do not instantiate it in your code.","pos":[60,110]},{"content":"For an example of using the <ph id=\"ph1\">&lt;xref:System.IO.TextReader.Peek%2A&gt;</ph> method, see the <ph id=\"ph2\">&lt;xref:System.IO.StreamReader.Peek%2A?displayProperty=fullName&gt;</ph> method.","pos":[111,261],"source":" For an example of using the <xref:System.IO.TextReader.Peek%2A> method, see the <xref:System.IO.StreamReader.Peek%2A?displayProperty=fullName> method."}]}]}],"pos":[16451,17186],"yaml":true,"extradata":"MT"},{"content":"An integer representing the next character to be read, or -1 if no more characters are available or the reader does not support seeking.","nodes":[{"pos":[0,136],"content":"An integer representing the next character to be read, or -1 if no more characters are available or the reader does not support seeking.","nodes":[{"content":"An integer representing the next character to be read, or -1 if no more characters are available or the reader does not support seeking.","pos":[0,136]}]}],"pos":[17312,17449],"yaml":true},{"content":"The <xref href=\"System.IO.TextReader\"></xref> is closed.","nodes":[{"pos":[0,56],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.TextReader\"&gt;&lt;/xref&gt;</ph> is closed.","source":"The <xref href=\"System.IO.TextReader\"></xref> is closed."}],"pos":[17608,17665],"yaml":true},{"content":"An I/O error occurs.","nodes":[{"pos":[0,20],"content":"An I/O error occurs.","nodes":[{"content":"An I/O error occurs.","pos":[0,20]}]}],"pos":[17753,17774],"yaml":true},{"content":"Reads the next character from the text reader and advances the character position by one character.","nodes":[{"pos":[0,99],"content":"Reads the next character from the text reader and advances the character position by one character.","nodes":[{"content":"Reads the next character from the text reader and advances the character position by one character.","pos":[0,99]}]}],"pos":[19183,19283],"yaml":true},{"content":"The <xref:System.IO.TextReader> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref:System.IO.TextReader.Read%2A> method, see the <xref:System.IO.StreamReader.Read%2A?displayProperty=fullName> method.","nodes":[{"pos":[0,261],"content":"The <xref:System.IO.TextReader> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref:System.IO.TextReader.Read%2A> method, see the <xref:System.IO.StreamReader.Read%2A?displayProperty=fullName> method.","nodes":[{"content":"The <xref:System.IO.TextReader> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref:System.IO.TextReader.Read%2A> method, see the <xref:System.IO.StreamReader.Read%2A?displayProperty=fullName> method.","pos":[0,261],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.TextReader&gt;</ph> class is an abstract class.","pos":[0,59],"source":"The <xref:System.IO.TextReader> class is an abstract class."},{"content":"Therefore, you do not instantiate it in your code.","pos":[60,110]},{"content":"For an example of using the <ph id=\"ph1\">&lt;xref:System.IO.TextReader.Read%2A&gt;</ph> method, see the <ph id=\"ph2\">&lt;xref:System.IO.StreamReader.Read%2A?displayProperty=fullName&gt;</ph> method.","pos":[111,261],"source":" For an example of using the <xref:System.IO.TextReader.Read%2A> method, see the <xref:System.IO.StreamReader.Read%2A?displayProperty=fullName> method."}]}]}],"pos":[19294,19556],"yaml":true,"extradata":"MT"},{"content":"The next character from the text reader, or -1 if no more characters are available. The default implementation returns -1.","nodes":[{"pos":[0,122],"content":"The next character from the text reader, or -1 if no more characters are available. The default implementation returns -1.","nodes":[{"content":"The next character from the text reader, or -1 if no more characters are available. The default implementation returns -1.","pos":[0,122],"nodes":[{"content":"The next character from the text reader, or -1 if no more characters are available.","pos":[0,83]},{"content":"The default implementation returns -1.","pos":[84,122]}]}]}],"pos":[19682,19805],"yaml":true},{"content":"The <xref href=\"System.IO.TextReader\"></xref> is closed.","nodes":[{"pos":[0,56],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.TextReader\"&gt;&lt;/xref&gt;</ph> is closed.","source":"The <xref href=\"System.IO.TextReader\"></xref> is closed."}],"pos":[19964,20021],"yaml":true},{"content":"An I/O error occurs.","nodes":[{"pos":[0,20],"content":"An I/O error occurs.","nodes":[{"content":"An I/O error occurs.","pos":[0,20]}]}],"pos":[20109,20130],"yaml":true},{"content":"Reads a specified maximum number of characters from the current reader and writes the data to a buffer, beginning at the specified index.","nodes":[{"pos":[0,137],"content":"Reads a specified maximum number of characters from the current reader and writes the data to a buffer, beginning at the specified index.","nodes":[{"content":"Reads a specified maximum number of characters from the current reader and writes the data to a buffer, beginning at the specified index.","pos":[0,137]}]}],"pos":[21722,21860],"yaml":true},{"content":"This method returns after either `count` characters are read or the end of the file is reached. <xref:System.IO.TextReader.ReadBlock%2A> is a blocking version of this method.  \n  \n The <xref:System.IO.TextReader> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref:System.IO.TextReader.Read%2A> method, see the <xref:System.IO.StreamReader.Read%2A?displayProperty=fullName> method.","nodes":[{"pos":[0,174],"content":"This method returns after either `count` characters are read or the end of the file is reached. <xref:System.IO.TextReader.ReadBlock%2A> is a blocking version of this method.","nodes":[{"content":"This method returns after either <ph id=\"ph1\">`count`</ph> characters are read or the end of the file is reached.","pos":[0,95],"source":"This method returns after either `count` characters are read or the end of the file is reached."},{"content":"<ph id=\"ph1\">&lt;xref:System.IO.TextReader.ReadBlock%2A&gt;</ph> is a blocking version of this method.","pos":[96,174],"source":" <xref:System.IO.TextReader.ReadBlock%2A> is a blocking version of this method."}]},{"pos":[181,442],"content":"The <xref:System.IO.TextReader> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref:System.IO.TextReader.Read%2A> method, see the <xref:System.IO.StreamReader.Read%2A?displayProperty=fullName> method.","nodes":[{"content":"The <xref:System.IO.TextReader> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref:System.IO.TextReader.Read%2A> method, see the <xref:System.IO.StreamReader.Read%2A?displayProperty=fullName> method.","pos":[0,261],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.TextReader&gt;</ph> class is an abstract class.","pos":[0,59],"source":"The <xref:System.IO.TextReader> class is an abstract class."},{"content":"Therefore, you do not instantiate it in your code.","pos":[60,110]},{"content":"For an example of using the <ph id=\"ph1\">&lt;xref:System.IO.TextReader.Read%2A&gt;</ph> method, see the <ph id=\"ph2\">&lt;xref:System.IO.StreamReader.Read%2A?displayProperty=fullName&gt;</ph> method.","pos":[111,261],"source":" For an example of using the <xref:System.IO.TextReader.Read%2A> method, see the <xref:System.IO.StreamReader.Read%2A?displayProperty=fullName> method."}]}]}],"pos":[21871,22318],"yaml":true,"extradata":"MT"},{"content":"When this method returns, contains the specified character array with the values between <code>index</code> and (<code>index</code> + <code>count</code> - 1) replaced by the characters read from the current source.","nodes":[{"pos":[0,214],"content":"When this method returns, contains the specified character array with the values between <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept> and (<bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">index</ph><ept id=\"p2\">&lt;/code&gt;</ept><ph id=\"ph3\"> + </ph><bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">count</ph><ept id=\"p3\">&lt;/code&gt;</ept> - 1) replaced by the characters read from the current source.","source":"When this method returns, contains the specified character array with the values between <code>index</code> and (<code>index</code> + <code>count</code> - 1) replaced by the characters read from the current source."}],"pos":[22482,22697],"yaml":true},{"content":"The position in <code>buffer</code> at which to begin writing.","nodes":[{"pos":[0,62],"content":"The position in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> at which to begin writing.","source":"The position in <code>buffer</code> at which to begin writing."}],"pos":[22757,22820],"yaml":true},{"content":"The maximum number of characters to read. If the end of the reader is reached before the specified number of characters is read into the buffer, the method returns.","nodes":[{"pos":[0,164],"content":"The maximum number of characters to read. If the end of the reader is reached before the specified number of characters is read into the buffer, the method returns.","nodes":[{"content":"The maximum number of characters to read. If the end of the reader is reached before the specified number of characters is read into the buffer, the method returns.","pos":[0,164],"nodes":[{"content":"The maximum number of characters to read.","pos":[0,41]},{"content":"If the end of the reader is reached before the specified number of characters is read into the buffer, the method returns.","pos":[42,164]}]}]}],"pos":[22880,23045],"yaml":true},{"content":"The number of characters that have been read. The number will be less than or equal to <code>count</code>, depending on whether the data is available within the reader. This method returns 0 (zero) if it is called when no more characters are left to read.","nodes":[{"pos":[0,255],"content":"The number of characters that have been read. The number will be less than or equal to <code>count</code>, depending on whether the data is available within the reader. This method returns 0 (zero) if it is called when no more characters are left to read.","nodes":[{"content":"The number of characters that have been read.","pos":[0,45]},{"content":"The number will be less than or equal to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">count</ph><ept id=\"p1\">&lt;/code&gt;</ept>, depending on whether the data is available within the reader.","pos":[46,168],"source":" The number will be less than or equal to <code>count</code>, depending on whether the data is available within the reader."},{"content":"This method returns 0 (zero) if it is called when no more characters are left to read.","pos":[169,255]}]}],"pos":[23101,23357],"yaml":true},{"content":"<code>buffer</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>buffer</code> is `null`."}],"pos":[23512,23543],"yaml":true},{"content":"The buffer length minus <code>index</code> is less than <code>count</code>.","nodes":[{"pos":[0,75],"content":"The buffer length minus <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept> is less than <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">count</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The buffer length minus <code>index</code> is less than <code>count</code>."}],"pos":[23637,23713],"yaml":true},{"content":"<code>index</code> or <code>count</code> is negative.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is negative.","source":"<code>index</code> or <code>count</code> is negative."}],"pos":[23827,23881],"yaml":true},{"content":"The <xref href=\"System.IO.TextReader\"></xref> is closed.","nodes":[{"pos":[0,56],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.TextReader\"&gt;&lt;/xref&gt;</ph> is closed.","source":"The <xref href=\"System.IO.TextReader\"></xref> is closed."}],"pos":[23987,24044],"yaml":true},{"content":"An I/O error occurs.","nodes":[{"pos":[0,20],"content":"An I/O error occurs.","nodes":[{"content":"An I/O error occurs.","pos":[0,20]}]}],"pos":[24132,24153],"yaml":true},{"content":"Reads a specified maximum number of characters from the current text reader asynchronously and writes the data to a buffer, beginning at the specified index.","nodes":[{"pos":[0,157],"content":"Reads a specified maximum number of characters from the current text reader asynchronously and writes the data to a buffer, beginning at the specified index.","nodes":[{"content":"Reads a specified maximum number of characters from the current text reader asynchronously and writes the data to a buffer, beginning at the specified index.","pos":[0,157]}]}],"pos":[25775,25933],"yaml":true},{"content":"The task completes after either the number of characters specified by the `count` parameter are read or the end of the file is reached.  \n  \n The <xref:System.IO.TextReader> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref:System.IO.TextReader.ReadAsync%2A> method, see the <xref:System.IO.StreamReader.ReadAsync%2A?displayProperty=fullName> method.","nodes":[{"pos":[0,135],"content":"The task completes after either the number of characters specified by the <ph id=\"ph1\">`count`</ph> parameter are read or the end of the file is reached.","source":"The task completes after either the number of characters specified by the `count` parameter are read or the end of the file is reached."},{"pos":[142,413],"content":"The <xref:System.IO.TextReader> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref:System.IO.TextReader.ReadAsync%2A> method, see the <xref:System.IO.StreamReader.ReadAsync%2A?displayProperty=fullName> method.","nodes":[{"content":"The <xref:System.IO.TextReader> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref:System.IO.TextReader.ReadAsync%2A> method, see the <xref:System.IO.StreamReader.ReadAsync%2A?displayProperty=fullName> method.","pos":[0,271],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.TextReader&gt;</ph> class is an abstract class.","pos":[0,59],"source":"The <xref:System.IO.TextReader> class is an abstract class."},{"content":"Therefore, you do not instantiate it in your code.","pos":[60,110]},{"content":"For an example of using the <ph id=\"ph1\">&lt;xref:System.IO.TextReader.ReadAsync%2A&gt;</ph> method, see the <ph id=\"ph2\">&lt;xref:System.IO.StreamReader.ReadAsync%2A?displayProperty=fullName&gt;</ph> method.","pos":[111,271],"source":" For an example of using the <xref:System.IO.TextReader.ReadAsync%2A> method, see the <xref:System.IO.StreamReader.ReadAsync%2A?displayProperty=fullName> method."}]}]}],"pos":[25944,26362],"yaml":true,"extradata":"MT"},{"content":"When this method returns, contains the specified character array with the values between <code>index</code> and (<code>index</code> + <code>count</code> - 1) replaced by the characters read from the current source.","nodes":[{"pos":[0,214],"content":"When this method returns, contains the specified character array with the values between <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept> and (<bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">index</ph><ept id=\"p2\">&lt;/code&gt;</ept><ph id=\"ph3\"> + </ph><bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">count</ph><ept id=\"p3\">&lt;/code&gt;</ept> - 1) replaced by the characters read from the current source.","source":"When this method returns, contains the specified character array with the values between <code>index</code> and (<code>index</code> + <code>count</code> - 1) replaced by the characters read from the current source."}],"pos":[26627,26842],"yaml":true},{"content":"The position in <code>buffer</code> at which to begin writing.","nodes":[{"pos":[0,62],"content":"The position in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> at which to begin writing.","source":"The position in <code>buffer</code> at which to begin writing."}],"pos":[26902,26965],"yaml":true},{"content":"The maximum number of characters to read. If the end of the text is reached before the specified number of characters is read into the buffer, the current method returns.","nodes":[{"pos":[0,170],"content":"The maximum number of characters to read. If the end of the text is reached before the specified number of characters is read into the buffer, the current method returns.","nodes":[{"content":"The maximum number of characters to read. If the end of the text is reached before the specified number of characters is read into the buffer, the current method returns.","pos":[0,170],"nodes":[{"content":"The maximum number of characters to read.","pos":[0,41]},{"content":"If the end of the text is reached before the specified number of characters is read into the buffer, the current method returns.","pos":[42,170]}]}]}],"pos":[27025,27196],"yaml":true},{"content":"A task that represents the asynchronous read operation. The value of the <code>TResult</code> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the text has been reached.","nodes":[{"pos":[0,365],"content":"A task that represents the asynchronous read operation. The value of the <code>TResult</code> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the text has been reached.","nodes":[{"content":"A task that represents the asynchronous read operation.","pos":[0,55]},{"content":"The value of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">TResult</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter contains the total number of bytes read into the buffer.","pos":[56,160],"source":" The value of the <code>TResult</code> parameter contains the total number of bytes read into the buffer."},{"content":"The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the text has been reached.","pos":[161,365]}]}],"pos":[27281,27647],"yaml":true},{"content":"<code>buffer</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>buffer</code> is `null`."}],"pos":[27807,27838],"yaml":true},{"content":"<code>index</code> or <code>count</code> is negative.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is negative.","source":"<code>index</code> or <code>count</code> is negative."}],"pos":[27952,28006],"yaml":true},{"content":"The sum of <code>index</code> and <code>count</code> is larger than the buffer length.","nodes":[{"pos":[0,86],"content":"The sum of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">count</ph><ept id=\"p2\">&lt;/code&gt;</ept> is larger than the buffer length.","source":"The sum of <code>index</code> and <code>count</code> is larger than the buffer length."}],"pos":[28100,28187],"yaml":true},{"content":"The text reader has been disposed.","nodes":[{"pos":[0,34],"content":"The text reader has been disposed.","nodes":[{"content":"The text reader has been disposed.","pos":[0,34]}]}],"pos":[28293,28328],"yaml":true},{"content":"The reader is currently in use by a previous read operation.","nodes":[{"pos":[0,60],"content":"The reader is currently in use by a previous read operation.","nodes":[{"content":"The reader is currently in use by a previous read operation.","pos":[0,60]}]}],"pos":[28438,28499],"yaml":true},{"content":"Reads a specified maximum number of characters from the current text reader and writes the data to a buffer, beginning at the specified index.","nodes":[{"pos":[0,142],"content":"Reads a specified maximum number of characters from the current text reader and writes the data to a buffer, beginning at the specified index.","nodes":[{"content":"Reads a specified maximum number of characters from the current text reader and writes the data to a buffer, beginning at the specified index.","pos":[0,142]}]}],"pos":[30196,30339],"yaml":true},{"content":"The position of the underlying text reader is advanced by the number of characters that were read into `buffer`.  \n  \n The method blocks until either `count` characters are read, or all characters have been read. This is a blocking version of <xref:System.IO.TextReader.Read%2A>.","nodes":[{"pos":[0,112],"content":"The position of the underlying text reader is advanced by the number of characters that were read into <ph id=\"ph1\">`buffer`</ph>.","source":"The position of the underlying text reader is advanced by the number of characters that were read into `buffer`."},{"pos":[119,279],"content":"The method blocks until either `count` characters are read, or all characters have been read. This is a blocking version of <xref:System.IO.TextReader.Read%2A>.","nodes":[{"content":"The method blocks until either <ph id=\"ph1\">`count`</ph> characters are read, or all characters have been read.","pos":[0,93],"source":"The method blocks until either `count` characters are read, or all characters have been read."},{"content":"This is a blocking version of <ph id=\"ph1\">&lt;xref:System.IO.TextReader.Read%2A&gt;</ph>.","pos":[94,160],"source":" This is a blocking version of <xref:System.IO.TextReader.Read%2A>."}]}],"pos":[30350,30634],"yaml":true,"extradata":"MT"},{"content":"When this method returns, this parameter contains the specified character array with the values between <code>index</code> and (<code>index</code> + <code>count</code> -1) replaced by the characters read from the current source.","nodes":[{"pos":[0,228],"content":"When this method returns, this parameter contains the specified character array with the values between <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept> and (<bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">index</ph><ept id=\"p2\">&lt;/code&gt;</ept><ph id=\"ph3\"> + </ph><bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">count</ph><ept id=\"p3\">&lt;/code&gt;</ept> -1) replaced by the characters read from the current source.","source":"When this method returns, this parameter contains the specified character array with the values between <code>index</code> and (<code>index</code> + <code>count</code> -1) replaced by the characters read from the current source."}],"pos":[30803,31032],"yaml":true},{"content":"The position in <code>buffer</code> at which to begin writing.","nodes":[{"pos":[0,62],"content":"The position in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> at which to begin writing.","source":"The position in <code>buffer</code> at which to begin writing."}],"pos":[31092,31155],"yaml":true},{"content":"The maximum number of characters to read.","nodes":[{"pos":[0,41],"content":"The maximum number of characters to read.","nodes":[{"content":"The maximum number of characters to read.","pos":[0,41]}]}],"pos":[31215,31257],"yaml":true},{"content":"The number of characters that have been read. The number will be less than or equal to <code>count</code>, depending on whether all input characters have been read.","nodes":[{"pos":[0,164],"content":"The number of characters that have been read. The number will be less than or equal to <code>count</code>, depending on whether all input characters have been read.","nodes":[{"content":"The number of characters that have been read.","pos":[0,45]},{"content":"The number will be less than or equal to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">count</ph><ept id=\"p1\">&lt;/code&gt;</ept>, depending on whether all input characters have been read.","pos":[46,164],"source":" The number will be less than or equal to <code>count</code>, depending on whether all input characters have been read."}]}],"pos":[31313,31478],"yaml":true},{"content":"<code>buffer</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>buffer</code> is `null`."}],"pos":[31638,31669],"yaml":true},{"content":"The buffer length minus <code>index</code> is less than <code>count</code>.","nodes":[{"pos":[0,75],"content":"The buffer length minus <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept> is less than <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">count</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The buffer length minus <code>index</code> is less than <code>count</code>."}],"pos":[31763,31839],"yaml":true},{"content":"<code>index</code> or <code>count</code> is negative.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is negative.","source":"<code>index</code> or <code>count</code> is negative."}],"pos":[31953,32007],"yaml":true},{"content":"The <xref href=\"System.IO.TextReader\"></xref> is closed.","nodes":[{"pos":[0,56],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.TextReader\"&gt;&lt;/xref&gt;</ph> is closed.","source":"The <xref href=\"System.IO.TextReader\"></xref> is closed."}],"pos":[32113,32170],"yaml":true},{"content":"An I/O error occurs.","nodes":[{"pos":[0,20],"content":"An I/O error occurs.","nodes":[{"content":"An I/O error occurs.","pos":[0,20]}]}],"pos":[32258,32279],"yaml":true},{"content":"Reads a specified maximum number of characters from the current text reader asynchronously and writes the data to a buffer, beginning at the specified index.","nodes":[{"pos":[0,157],"content":"Reads a specified maximum number of characters from the current text reader asynchronously and writes the data to a buffer, beginning at the specified index.","nodes":[{"content":"Reads a specified maximum number of characters from the current text reader asynchronously and writes the data to a buffer, beginning at the specified index.","pos":[0,157]}]}],"pos":[33931,34089],"yaml":true},{"content":"The task does not complete until either the number of characters specified by the `count` parameter are read, or the end of the text has been reached.","nodes":[{"pos":[0,150],"content":"The task does not complete until either the number of characters specified by the <ph id=\"ph1\">`count`</ph> parameter are read, or the end of the text has been reached.","source":"The task does not complete until either the number of characters specified by the `count` parameter are read, or the end of the text has been reached."}],"pos":[34100,34251],"yaml":true,"extradata":"MT"},{"content":"When this method returns, contains the specified character array with the values between <code>index</code> and (<code>index</code> + <code>count</code> - 1) replaced by the characters read from the current source.","nodes":[{"pos":[0,214],"content":"When this method returns, contains the specified character array with the values between <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept> and (<bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">index</ph><ept id=\"p2\">&lt;/code&gt;</ept><ph id=\"ph3\"> + </ph><bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">count</ph><ept id=\"p3\">&lt;/code&gt;</ept> - 1) replaced by the characters read from the current source.","source":"When this method returns, contains the specified character array with the values between <code>index</code> and (<code>index</code> + <code>count</code> - 1) replaced by the characters read from the current source."}],"pos":[34521,34736],"yaml":true},{"content":"The position in <code>buffer</code> at which to begin writing.","nodes":[{"pos":[0,62],"content":"The position in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> at which to begin writing.","source":"The position in <code>buffer</code> at which to begin writing."}],"pos":[34796,34859],"yaml":true},{"content":"The maximum number of characters to read. If the end of the text is reached before the specified number of characters is read into the buffer, the current method returns.","nodes":[{"pos":[0,170],"content":"The maximum number of characters to read. If the end of the text is reached before the specified number of characters is read into the buffer, the current method returns.","nodes":[{"content":"The maximum number of characters to read. If the end of the text is reached before the specified number of characters is read into the buffer, the current method returns.","pos":[0,170],"nodes":[{"content":"The maximum number of characters to read.","pos":[0,41]},{"content":"If the end of the text is reached before the specified number of characters is read into the buffer, the current method returns.","pos":[42,170]}]}]}],"pos":[34919,35090],"yaml":true},{"content":"A task that represents the asynchronous read operation. The value of the <code>TResult</code> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the text has been reached.","nodes":[{"pos":[0,365],"content":"A task that represents the asynchronous read operation. The value of the <code>TResult</code> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the text has been reached.","nodes":[{"content":"A task that represents the asynchronous read operation.","pos":[0,55]},{"content":"The value of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">TResult</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter contains the total number of bytes read into the buffer.","pos":[56,160],"source":" The value of the <code>TResult</code> parameter contains the total number of bytes read into the buffer."},{"content":"The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the text has been reached.","pos":[161,365]}]}],"pos":[35175,35541],"yaml":true},{"content":"<code>buffer</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>buffer</code> is `null`."}],"pos":[35706,35737],"yaml":true},{"content":"<code>index</code> or <code>count</code> is negative.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is negative.","source":"<code>index</code> or <code>count</code> is negative."}],"pos":[35851,35905],"yaml":true},{"content":"The sum of <code>index</code> and <code>count</code> is larger than the buffer length.","nodes":[{"pos":[0,86],"content":"The sum of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">count</ph><ept id=\"p2\">&lt;/code&gt;</ept> is larger than the buffer length.","source":"The sum of <code>index</code> and <code>count</code> is larger than the buffer length."}],"pos":[35999,36086],"yaml":true},{"content":"The text reader has been disposed.","nodes":[{"pos":[0,34],"content":"The text reader has been disposed.","nodes":[{"content":"The text reader has been disposed.","pos":[0,34]}]}],"pos":[36192,36227],"yaml":true},{"content":"The reader is currently in use by a previous read operation.","nodes":[{"pos":[0,60],"content":"The reader is currently in use by a previous read operation.","nodes":[{"content":"The reader is currently in use by a previous read operation.","pos":[0,60]}]}],"pos":[36337,36398],"yaml":true},{"content":"Reads a line of characters from the text reader and returns the data as a string.","nodes":[{"pos":[0,81],"content":"Reads a line of characters from the text reader and returns the data as a string.","nodes":[{"content":"Reads a line of characters from the text reader and returns the data as a string.","pos":[0,81]}]}],"pos":[37906,37988],"yaml":true},{"content":"A line is defined as a sequence of characters followed by a carriage return (0x000d), a line feed (0x000a), a carriage return followed by a line feed, <xref:System.Environment.NewLine%2A?displayProperty=fullName>, or the end-of-stream marker. The string that is returned does not contain the terminating carriage return or line feed. The return value is `null` if the end of the input stream has been reached.  \n  \n If the method throws an <xref:System.OutOfMemoryException> exception, the reader's position in the underlying <xref:System.IO.Stream> is advanced by the number of characters the method was able to read, but the characters that were already read into the internal <xref:System.IO.TextReader.ReadLine%2A> buffer are discarded. Because the position of the reader in the stream cannot be changed, the characters that were already read are unrecoverable and can be accessed only by reinitializing the <xref:System.IO.TextReader> object. If the initial position within the stream is unknown or the stream does not support seeking, the underlying <xref:System.IO.Stream> also needs to be reinitialized.  \n  \n To avoid such a situation and produce robust code you should use the <xref:System.IO.TextReader.Read%2A> method and store the read characters in a preallocated buffer.  \n  \n The <xref:System.IO.TextReader> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref:System.IO.TextReader.ReadLine%2A> method, see the <xref:System.IO.StreamReader.ReadLine%2A?displayProperty=fullName> method.","nodes":[{"pos":[0,409],"content":"A line is defined as a sequence of characters followed by a carriage return (0x000d), a line feed (0x000a), a carriage return followed by a line feed, <xref:System.Environment.NewLine%2A?displayProperty=fullName>, or the end-of-stream marker. The string that is returned does not contain the terminating carriage return or line feed. The return value is `null` if the end of the input stream has been reached.","nodes":[{"content":"A line is defined as a sequence of characters followed by a carriage return (0x000d), a line feed (0x000a), a carriage return followed by a line feed, <ph id=\"ph1\">&lt;xref:System.Environment.NewLine%2A?displayProperty=fullName&gt;</ph>, or the end-of-stream marker.","pos":[0,242],"source":"A line is defined as a sequence of characters followed by a carriage return (0x000d), a line feed (0x000a), a carriage return followed by a line feed, <xref:System.Environment.NewLine%2A?displayProperty=fullName>, or the end-of-stream marker."},{"content":"The string that is returned does not contain the terminating carriage return or line feed.","pos":[243,333]},{"content":"The return value is <ph id=\"ph1\">`null`</ph> if the end of the input stream has been reached.","pos":[334,409],"source":" The return value is `null` if the end of the input stream has been reached."}]},{"pos":[416,1111],"content":"If the method throws an <xref:System.OutOfMemoryException> exception, the reader's position in the underlying <xref:System.IO.Stream> is advanced by the number of characters the method was able to read, but the characters that were already read into the internal <xref:System.IO.TextReader.ReadLine%2A> buffer are discarded. Because the position of the reader in the stream cannot be changed, the characters that were already read are unrecoverable and can be accessed only by reinitializing the <xref:System.IO.TextReader> object. If the initial position within the stream is unknown or the stream does not support seeking, the underlying <xref:System.IO.Stream> also needs to be reinitialized.","nodes":[{"content":"If the method throws an <xref:System.OutOfMemoryException> exception, the reader's position in the underlying <xref:System.IO.Stream> is advanced by the number of characters the method was able to read, but the characters that were already read into the internal <xref:System.IO.TextReader.ReadLine%2A> buffer are discarded. Because the position of the reader in the stream cannot be changed, the characters that were already read are unrecoverable and can be accessed only by reinitializing the <xref:System.IO.TextReader> object. If the initial position within the stream is unknown or the stream does not support seeking, the underlying <xref:System.IO.Stream> also needs to be reinitialized.","pos":[0,695],"nodes":[{"content":"If the method throws an <ph id=\"ph1\">&lt;xref:System.OutOfMemoryException&gt;</ph> exception, the reader's position in the underlying <ph id=\"ph2\">&lt;xref:System.IO.Stream&gt;</ph> is advanced by the number of characters the method was able to read, but the characters that were already read into the internal <ph id=\"ph3\">&lt;xref:System.IO.TextReader.ReadLine%2A&gt;</ph> buffer are discarded.","pos":[0,324],"source":"If the method throws an <xref:System.OutOfMemoryException> exception, the reader's position in the underlying <xref:System.IO.Stream> is advanced by the number of characters the method was able to read, but the characters that were already read into the internal <xref:System.IO.TextReader.ReadLine%2A> buffer are discarded."},{"content":"Because the position of the reader in the stream cannot be changed, the characters that were already read are unrecoverable and can be accessed only by reinitializing the <ph id=\"ph1\">&lt;xref:System.IO.TextReader&gt;</ph> object.","pos":[325,531],"source":" Because the position of the reader in the stream cannot be changed, the characters that were already read are unrecoverable and can be accessed only by reinitializing the <xref:System.IO.TextReader> object."},{"content":"If the initial position within the stream is unknown or the stream does not support seeking, the underlying <ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph> also needs to be reinitialized.","pos":[532,695],"source":" If the initial position within the stream is unknown or the stream does not support seeking, the underlying <xref:System.IO.Stream> also needs to be reinitialized."}]}]},{"pos":[1118,1285],"content":"To avoid such a situation and produce robust code you should use the <xref:System.IO.TextReader.Read%2A> method and store the read characters in a preallocated buffer.","nodes":[{"content":"To avoid such a situation and produce robust code you should use the <ph id=\"ph1\">&lt;xref:System.IO.TextReader.Read%2A&gt;</ph> method and store the read characters in a preallocated buffer.","pos":[0,167],"source":"To avoid such a situation and produce robust code you should use the <xref:System.IO.TextReader.Read%2A> method and store the read characters in a preallocated buffer."}]},{"pos":[1292,1561],"content":"The <xref:System.IO.TextReader> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref:System.IO.TextReader.ReadLine%2A> method, see the <xref:System.IO.StreamReader.ReadLine%2A?displayProperty=fullName> method.","nodes":[{"content":"The <xref:System.IO.TextReader> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref:System.IO.TextReader.ReadLine%2A> method, see the <xref:System.IO.StreamReader.ReadLine%2A?displayProperty=fullName> method.","pos":[0,269],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.TextReader&gt;</ph> class is an abstract class.","pos":[0,59],"source":"The <xref:System.IO.TextReader> class is an abstract class."},{"content":"Therefore, you do not instantiate it in your code.","pos":[60,110]},{"content":"For an example of using the <ph id=\"ph1\">&lt;xref:System.IO.TextReader.ReadLine%2A&gt;</ph> method, see the <ph id=\"ph2\">&lt;xref:System.IO.StreamReader.ReadLine%2A?displayProperty=fullName&gt;</ph> method.","pos":[111,269],"source":" For an example of using the <xref:System.IO.TextReader.ReadLine%2A> method, see the <xref:System.IO.StreamReader.ReadLine%2A?displayProperty=fullName> method."}]}]}],"pos":[37999,39569],"yaml":true,"extradata":"MT"},{"content":"The next line from the reader, or `null` if all characters have been read.","nodes":[{"pos":[0,74],"content":"The next line from the reader, or <ph id=\"ph1\">`null`</ph> if all characters have been read.","source":"The next line from the reader, or `null` if all characters have been read."}],"pos":[39703,39778],"yaml":true},{"content":"An I/O error occurs.","nodes":[{"pos":[0,20],"content":"An I/O error occurs.","nodes":[{"content":"An I/O error occurs.","pos":[0,20]}]}],"pos":[39923,39944],"yaml":true},{"content":"There is insufficient memory to allocate a buffer for the returned string.","nodes":[{"pos":[0,74],"content":"There is insufficient memory to allocate a buffer for the returned string.","nodes":[{"content":"There is insufficient memory to allocate a buffer for the returned string.","pos":[0,74]}]}],"pos":[40044,40119],"yaml":true},{"content":"The <xref href=\"System.IO.TextReader\"></xref> is closed.","nodes":[{"pos":[0,56],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.TextReader\"&gt;&lt;/xref&gt;</ph> is closed.","source":"The <xref href=\"System.IO.TextReader\"></xref> is closed."}],"pos":[40225,40282],"yaml":true},{"content":"The number of characters in the next line is larger than <xref href=\"System.Int32.MaxValue\"></xref>","nodes":[{"pos":[0,99],"content":"The number of characters in the next line is larger than <ph id=\"ph1\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>","source":"The number of characters in the next line is larger than <xref href=\"System.Int32.MaxValue\"></xref>"}],"pos":[40396,40496],"yaml":true},{"content":"Reads a line of characters asynchronously and returns the data as a string.","nodes":[{"pos":[0,75],"content":"Reads a line of characters asynchronously and returns the data as a string.","nodes":[{"content":"Reads a line of characters asynchronously and returns the data as a string.","pos":[0,75]}]}],"pos":[41959,42035],"yaml":true},{"content":"The <xref:System.IO.TextReader> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref:System.IO.TextReader.ReadLineAsync%2A> method, see the <xref:System.IO.StreamReader.ReadLineAsync%2A?displayProperty=fullName> method.  \n  \n If the current <xref:System.IO.TextReader> represents the standard input stream returned by the <xref:System.Console.In%2A?displayProperty=fullName> property, the <xref:System.IO.TextReader.ReadLineAsync%2A> method executes synchronously rather than asynchronously.","nodes":[{"pos":[0,279],"content":"The <xref:System.IO.TextReader> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref:System.IO.TextReader.ReadLineAsync%2A> method, see the <xref:System.IO.StreamReader.ReadLineAsync%2A?displayProperty=fullName> method.","nodes":[{"content":"The <xref:System.IO.TextReader> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref:System.IO.TextReader.ReadLineAsync%2A> method, see the <xref:System.IO.StreamReader.ReadLineAsync%2A?displayProperty=fullName> method.","pos":[0,279],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.TextReader&gt;</ph> class is an abstract class.","pos":[0,59],"source":"The <xref:System.IO.TextReader> class is an abstract class."},{"content":"Therefore, you do not instantiate it in your code.","pos":[60,110]},{"content":"For an example of using the <ph id=\"ph1\">&lt;xref:System.IO.TextReader.ReadLineAsync%2A&gt;</ph> method, see the <ph id=\"ph2\">&lt;xref:System.IO.StreamReader.ReadLineAsync%2A?displayProperty=fullName&gt;</ph> method.","pos":[111,279],"source":" For an example of using the <xref:System.IO.TextReader.ReadLineAsync%2A> method, see the <xref:System.IO.StreamReader.ReadLineAsync%2A?displayProperty=fullName> method."}]}]},{"pos":[286,551],"content":"If the current <xref:System.IO.TextReader> represents the standard input stream returned by the <xref:System.Console.In%2A?displayProperty=fullName> property, the <xref:System.IO.TextReader.ReadLineAsync%2A> method executes synchronously rather than asynchronously.","nodes":[{"content":"If the current <ph id=\"ph1\">&lt;xref:System.IO.TextReader&gt;</ph> represents the standard input stream returned by the <ph id=\"ph2\">&lt;xref:System.Console.In%2A?displayProperty=fullName&gt;</ph> property, the <ph id=\"ph3\">&lt;xref:System.IO.TextReader.ReadLineAsync%2A&gt;</ph> method executes synchronously rather than asynchronously.","pos":[0,265],"source":"If the current <xref:System.IO.TextReader> represents the standard input stream returned by the <xref:System.Console.In%2A?displayProperty=fullName> property, the <xref:System.IO.TextReader.ReadLineAsync%2A> method executes synchronously rather than asynchronously."}]}],"pos":[42046,42602],"yaml":true,"extradata":"MT"},{"content":"A task that represents the asynchronous read operation. The value of the <code>TResult</code> parameter contains the next line from the text reader, or is `null` if all of the characters have been read.","nodes":[{"pos":[0,202],"content":"A task that represents the asynchronous read operation. The value of the <code>TResult</code> parameter contains the next line from the text reader, or is `null` if all of the characters have been read.","nodes":[{"content":"A task that represents the asynchronous read operation.","pos":[0,55]},{"content":"The value of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">TResult</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter contains the next line from the text reader, or is <ph id=\"ph2\">`null`</ph> if all of the characters have been read.","pos":[56,202],"source":" The value of the <code>TResult</code> parameter contains the next line from the text reader, or is `null` if all of the characters have been read."}]}],"pos":[42866,43069],"yaml":true},{"content":"The number of characters in the next line is larger than <xref href=\"System.Int32.MaxValue\"></xref>.","nodes":[{"pos":[0,100],"content":"The number of characters in the next line is larger than <ph id=\"ph1\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"The number of characters in the next line is larger than <xref href=\"System.Int32.MaxValue\"></xref>."}],"pos":[43245,43346],"yaml":true},{"content":"The text reader has been disposed.","nodes":[{"pos":[0,34],"content":"The text reader has been disposed.","nodes":[{"content":"The text reader has been disposed.","pos":[0,34]}]}],"pos":[43452,43487],"yaml":true},{"content":"The reader is currently in use by a previous read operation.","nodes":[{"pos":[0,60],"content":"The reader is currently in use by a previous read operation.","nodes":[{"content":"The reader is currently in use by a previous read operation.","pos":[0,60]}]}],"pos":[43597,43658],"yaml":true},{"content":"Reads all characters from the current position to the end of the text reader and returns them as one string.","nodes":[{"pos":[0,108],"content":"Reads all characters from the current position to the end of the text reader and returns them as one string.","nodes":[{"content":"Reads all characters from the current position to the end of the text reader and returns them as one string.","pos":[0,108]}]}],"pos":[45172,45281],"yaml":true},{"content":"If the method throws an <xref:System.OutOfMemoryException> exception, the reader's position in the underlying <xref:System.IO.Stream> is advanced by the number of characters the method was able to read, but the characters that were already read into the internal <xref:System.IO.TextReader.ReadToEnd%2A> buffer are discarded. Because the position of the reader in the stream cannot be changed, the characters that were already read are unrecoverable and can be accessed only by reinitializing the <xref:System.IO.TextReader>. If the initial position within the stream is unknown or the stream does not support seeking, the underlying <xref:System.IO.Stream> also needs to be reinitialized.  \n  \n To avoid such a situation and produce robust code you should use the <xref:System.IO.TextReader.Read%2A> method and store the read characters in a preallocated buffer.  \n  \n The <xref:System.IO.TextReader> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref:System.IO.TextReader.ReadToEnd%2A> method, see the <xref:System.IO.StreamReader.ReadToEnd%2A?displayProperty=fullName> method.","nodes":[{"pos":[0,689],"content":"If the method throws an <xref:System.OutOfMemoryException> exception, the reader's position in the underlying <xref:System.IO.Stream> is advanced by the number of characters the method was able to read, but the characters that were already read into the internal <xref:System.IO.TextReader.ReadToEnd%2A> buffer are discarded. Because the position of the reader in the stream cannot be changed, the characters that were already read are unrecoverable and can be accessed only by reinitializing the <xref:System.IO.TextReader>. If the initial position within the stream is unknown or the stream does not support seeking, the underlying <xref:System.IO.Stream> also needs to be reinitialized.","nodes":[{"content":"If the method throws an <xref:System.OutOfMemoryException> exception, the reader's position in the underlying <xref:System.IO.Stream> is advanced by the number of characters the method was able to read, but the characters that were already read into the internal <xref:System.IO.TextReader.ReadToEnd%2A> buffer are discarded. Because the position of the reader in the stream cannot be changed, the characters that were already read are unrecoverable and can be accessed only by reinitializing the <xref:System.IO.TextReader>. If the initial position within the stream is unknown or the stream does not support seeking, the underlying <xref:System.IO.Stream> also needs to be reinitialized.","pos":[0,689],"nodes":[{"content":"If the method throws an <ph id=\"ph1\">&lt;xref:System.OutOfMemoryException&gt;</ph> exception, the reader's position in the underlying <ph id=\"ph2\">&lt;xref:System.IO.Stream&gt;</ph> is advanced by the number of characters the method was able to read, but the characters that were already read into the internal <ph id=\"ph3\">&lt;xref:System.IO.TextReader.ReadToEnd%2A&gt;</ph> buffer are discarded.","pos":[0,325],"source":"If the method throws an <xref:System.OutOfMemoryException> exception, the reader's position in the underlying <xref:System.IO.Stream> is advanced by the number of characters the method was able to read, but the characters that were already read into the internal <xref:System.IO.TextReader.ReadToEnd%2A> buffer are discarded."},{"content":"Because the position of the reader in the stream cannot be changed, the characters that were already read are unrecoverable and can be accessed only by reinitializing the <ph id=\"ph1\">&lt;xref:System.IO.TextReader&gt;</ph>.","pos":[326,525],"source":" Because the position of the reader in the stream cannot be changed, the characters that were already read are unrecoverable and can be accessed only by reinitializing the <xref:System.IO.TextReader>."},{"content":"If the initial position within the stream is unknown or the stream does not support seeking, the underlying <ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph> also needs to be reinitialized.","pos":[526,689],"source":" If the initial position within the stream is unknown or the stream does not support seeking, the underlying <xref:System.IO.Stream> also needs to be reinitialized."}]}]},{"pos":[696,863],"content":"To avoid such a situation and produce robust code you should use the <xref:System.IO.TextReader.Read%2A> method and store the read characters in a preallocated buffer.","nodes":[{"content":"To avoid such a situation and produce robust code you should use the <ph id=\"ph1\">&lt;xref:System.IO.TextReader.Read%2A&gt;</ph> method and store the read characters in a preallocated buffer.","pos":[0,167],"source":"To avoid such a situation and produce robust code you should use the <xref:System.IO.TextReader.Read%2A> method and store the read characters in a preallocated buffer."}]},{"pos":[870,1141],"content":"The <xref:System.IO.TextReader> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref:System.IO.TextReader.ReadToEnd%2A> method, see the <xref:System.IO.StreamReader.ReadToEnd%2A?displayProperty=fullName> method.","nodes":[{"content":"The <xref:System.IO.TextReader> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref:System.IO.TextReader.ReadToEnd%2A> method, see the <xref:System.IO.StreamReader.ReadToEnd%2A?displayProperty=fullName> method.","pos":[0,271],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.TextReader&gt;</ph> class is an abstract class.","pos":[0,59],"source":"The <xref:System.IO.TextReader> class is an abstract class."},{"content":"Therefore, you do not instantiate it in your code.","pos":[60,110]},{"content":"For an example of using the <ph id=\"ph1\">&lt;xref:System.IO.TextReader.ReadToEnd%2A&gt;</ph> method, see the <ph id=\"ph2\">&lt;xref:System.IO.StreamReader.ReadToEnd%2A?displayProperty=fullName&gt;</ph> method.","pos":[111,271],"source":" For an example of using the <xref:System.IO.TextReader.ReadToEnd%2A> method, see the <xref:System.IO.StreamReader.ReadToEnd%2A?displayProperty=fullName> method."}]}]}],"pos":[45292,46440],"yaml":true,"extradata":"MT"},{"content":"A string that contains all characters from the current position to the end of the text reader.","nodes":[{"pos":[0,94],"content":"A string that contains all characters from the current position to the end of the text reader.","nodes":[{"content":"A string that contains all characters from the current position to the end of the text reader.","pos":[0,94]}]}],"pos":[46575,46670],"yaml":true},{"content":"An I/O error occurs.","nodes":[{"pos":[0,20],"content":"An I/O error occurs.","nodes":[{"content":"An I/O error occurs.","pos":[0,20]}]}],"pos":[46816,46837],"yaml":true},{"content":"The <xref href=\"System.IO.TextReader\"></xref> is closed.","nodes":[{"pos":[0,56],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.TextReader\"&gt;&lt;/xref&gt;</ph> is closed.","source":"The <xref href=\"System.IO.TextReader\"></xref> is closed."}],"pos":[46943,47000],"yaml":true},{"content":"There is insufficient memory to allocate a buffer for the returned string.","nodes":[{"pos":[0,74],"content":"There is insufficient memory to allocate a buffer for the returned string.","nodes":[{"content":"There is insufficient memory to allocate a buffer for the returned string.","pos":[0,74]}]}],"pos":[47100,47175],"yaml":true},{"content":"The number of characters in the next line is larger than <xref href=\"System.Int32.MaxValue\"></xref>","nodes":[{"pos":[0,99],"content":"The number of characters in the next line is larger than <ph id=\"ph1\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>","source":"The number of characters in the next line is larger than <xref href=\"System.Int32.MaxValue\"></xref>"}],"pos":[47289,47389],"yaml":true},{"content":"Reads all characters from the current position to the end of the text reader asynchronously and returns them as one string.","nodes":[{"pos":[0,123],"content":"Reads all characters from the current position to the end of the text reader asynchronously and returns them as one string.","nodes":[{"content":"Reads all characters from the current position to the end of the text reader asynchronously and returns them as one string.","pos":[0,123]}]}],"pos":[48858,48982],"yaml":true},{"content":"The <xref:System.IO.TextReader> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref:System.IO.TextReader.ReadToEndAsync%2A> method, see the <xref:System.IO.StreamReader.ReadToEndAsync%2A?displayProperty=fullName> method.","nodes":[{"pos":[0,281],"content":"The <xref:System.IO.TextReader> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref:System.IO.TextReader.ReadToEndAsync%2A> method, see the <xref:System.IO.StreamReader.ReadToEndAsync%2A?displayProperty=fullName> method.","nodes":[{"content":"The <xref:System.IO.TextReader> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref:System.IO.TextReader.ReadToEndAsync%2A> method, see the <xref:System.IO.StreamReader.ReadToEndAsync%2A?displayProperty=fullName> method.","pos":[0,281],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.TextReader&gt;</ph> class is an abstract class.","pos":[0,59],"source":"The <xref:System.IO.TextReader> class is an abstract class."},{"content":"Therefore, you do not instantiate it in your code.","pos":[60,110]},{"content":"For an example of using the <ph id=\"ph1\">&lt;xref:System.IO.TextReader.ReadToEndAsync%2A&gt;</ph> method, see the <ph id=\"ph2\">&lt;xref:System.IO.StreamReader.ReadToEndAsync%2A?displayProperty=fullName&gt;</ph> method.","pos":[111,281],"source":" For an example of using the <xref:System.IO.TextReader.ReadToEndAsync%2A> method, see the <xref:System.IO.StreamReader.ReadToEndAsync%2A?displayProperty=fullName> method."}]}]}],"pos":[48993,49275],"yaml":true,"extradata":"MT"},{"content":"A task that represents the asynchronous read operation. The value of the <code>TResult</code> parameter contains a string with the characters from the current position to the end of the text reader.","nodes":[{"pos":[0,198],"content":"A task that represents the asynchronous read operation. The value of the <code>TResult</code> parameter contains a string with the characters from the current position to the end of the text reader.","nodes":[{"content":"A task that represents the asynchronous read operation.","pos":[0,55]},{"content":"The value of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">TResult</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter contains a string with the characters from the current position to the end of the text reader.","pos":[56,198],"source":" The value of the <code>TResult</code> parameter contains a string with the characters from the current position to the end of the text reader."}]}],"pos":[49540,49739],"yaml":true},{"content":"The number of characters is larger than <xref href=\"System.Int32.MaxValue\"></xref>.","nodes":[{"pos":[0,83],"content":"The number of characters is larger than <ph id=\"ph1\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"The number of characters is larger than <xref href=\"System.Int32.MaxValue\"></xref>."}],"pos":[49916,50000],"yaml":true},{"content":"The text reader has been disposed.","nodes":[{"pos":[0,34],"content":"The text reader has been disposed.","nodes":[{"content":"The text reader has been disposed.","pos":[0,34]}]}],"pos":[50106,50141],"yaml":true},{"content":"The reader is currently in use by a previous read operation.","nodes":[{"pos":[0,60],"content":"The reader is currently in use by a previous read operation.","nodes":[{"content":"The reader is currently in use by a previous read operation.","pos":[0,60]}]}],"pos":[50251,50312],"yaml":true},{"content":"Creates a thread-safe wrapper around the specified `TextReader`.","nodes":[{"pos":[0,64],"content":"Creates a thread-safe wrapper around the specified <ph id=\"ph1\">`TextReader`</ph>.","source":"Creates a thread-safe wrapper around the specified `TextReader`."}],"pos":[51926,51991],"yaml":true},{"content":"The current method returns a class that wraps around the specified <xref:System.IO.TextReader> instance and restricts access to it by multiple threads. All reads from the returned wrapper will be thread safe.","nodes":[{"pos":[0,208],"content":"The current method returns a class that wraps around the specified <xref:System.IO.TextReader> instance and restricts access to it by multiple threads. All reads from the returned wrapper will be thread safe.","nodes":[{"content":"The current method returns a class that wraps around the specified <xref:System.IO.TextReader> instance and restricts access to it by multiple threads. All reads from the returned wrapper will be thread safe.","pos":[0,208],"nodes":[{"content":"The current method returns a class that wraps around the specified <ph id=\"ph1\">&lt;xref:System.IO.TextReader&gt;</ph> instance and restricts access to it by multiple threads.","pos":[0,151],"source":"The current method returns a class that wraps around the specified <xref:System.IO.TextReader> instance and restricts access to it by multiple threads."},{"content":"All reads from the returned wrapper will be thread safe.","pos":[152,208]}]}]}],"pos":[52002,52211],"yaml":true,"extradata":"MT"},{"content":"The `TextReader` to synchronize.","nodes":[{"pos":[0,32],"content":"The <ph id=\"ph1\">`TextReader`</ph> to synchronize.","source":"The `TextReader` to synchronize."}],"pos":[52398,52431],"yaml":true},{"content":"A thread-safe <xref href=\"System.IO.TextReader\"></xref>.","nodes":[{"pos":[0,56],"content":"A thread-safe <ph id=\"ph1\">&lt;xref href=\"System.IO.TextReader\"&gt;&lt;/xref&gt;</ph>.","source":"A thread-safe <xref href=\"System.IO.TextReader\"></xref>."}],"pos":[52495,52552],"yaml":true},{"content":"<code>reader</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;reader&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>reader</code> is `null`."}],"pos":[52715,52746],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.IO.TextReader\n  commentId: T:System.IO.TextReader\n  id: TextReader\n  children:\n  - System.IO.TextReader.#ctor\n  - System.IO.TextReader.Close\n  - System.IO.TextReader.Dispose\n  - System.IO.TextReader.Dispose(System.Boolean)\n  - System.IO.TextReader.Null\n  - System.IO.TextReader.Peek\n  - System.IO.TextReader.Read\n  - System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)\n  - System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)\n  - System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)\n  - System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)\n  - System.IO.TextReader.ReadLine\n  - System.IO.TextReader.ReadLineAsync\n  - System.IO.TextReader.ReadToEnd\n  - System.IO.TextReader.ReadToEndAsync\n  - System.IO.TextReader.Synchronized(System.IO.TextReader)\n  langs:\n  - csharp\n  name: TextReader\n  nameWithType: TextReader\n  fullName: System.IO.TextReader\n  type: Class\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Represents a reader that can read a sequential series of characters.\n  remarks: \"<xref:System.IO.TextReader> is the abstract base class of <xref:System.IO.StreamReader> and <xref:System.IO.StringReader>, which read characters from streams and strings, respectively. Use these derived classes to open a text file for reading a specified range of characters, or to create a reader based on an existing stream.  \\n  \\n> [!IMPORTANT]\\n>  This type implements the <xref:System.IDisposable> interface. When you have finished using any type that derives from this type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IO.TextReader.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see Dispose and the \\\"Using an Object that Implements IDisposable\\\" section in the <xref:System.IDisposable> interface topic.\"\n  example:\n  - \"The <xref:System.IO.TextReader> class is an abstract class. Therefore, you do not instantiate it in your code. The <xref:System.IO.StreamReader> class derives from <xref:System.IO.TextReader> and provides implementations of the members for reading from a stream. The following example shows how to read all the characters in a file by using the <xref:System.IO.StreamReader.ReadAsync%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=fullName> method. It checks whether each character is a letter, digit, or white space before adding the character to an instance of the <xref:System.Text.StringBuilder> class.  \\n  \\n [!code-csharp[System.IO.StreamReader#42](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.StreamReader/CS/example42.cs#42)]\\n [!code-vb[System.IO.StreamReader#42](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.StreamReader/VB/example42.vb#42)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public abstract class TextReader : MarshalByRefObject, IDisposable\n  inheritance:\n  - System.Object\n  derivedClasses:\n  - System.IO.StreamReader\n  - System.IO.StringReader\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextReader.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextReader.#ctor\n  commentId: M:System.IO.TextReader.#ctor\n  id: '#ctor'\n  parent: System.IO.TextReader\n  langs:\n  - csharp\n  name: TextReader()\n  nameWithType: TextReader.TextReader()\n  fullName: TextReader.TextReader()\n  type: Constructor\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Initializes a new instance of the <xref href=\"System.IO.TextReader\"></xref> class.\n  remarks: Use this constructor for derived classes.\n  syntax:\n    content: protected TextReader ();\n    parameters: []\n  overload: System.IO.TextReader.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextReader.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextReader.Close\n  commentId: M:System.IO.TextReader.Close\n  id: Close\n  parent: System.IO.TextReader\n  langs:\n  - csharp\n  name: Close()\n  nameWithType: TextReader.Close()\n  fullName: TextReader.Close()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Closes the <xref href=\"System.IO.TextReader\"></xref> and releases any system resources associated with the `TextReader`.\n  remarks: \"This implementation of `Close` calls the <xref:System.IO.StringReader.Dispose%28System.Boolean%29?displayProperty=fullName> method and passes it a `true` value.  \\n  \\n Flushing the text reader will not flush its underlying encoder unless you explicitly call `Close`. Setting the <xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=fullName> property to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can be encoded only after the encoder receives the adjacent character or characters.  \\n  \\n> [!NOTE]\\n>  In derived classes, do not override the <xref:System.IO.TextReader.Close%2A> method. Instead, override the <xref:System.IO.TextReader.Dispose%28System.Boolean%29?displayProperty=fullName> method to add code for releasing resources.\"\n  syntax:\n    content: public virtual void Close ();\n    parameters: []\n  overload: System.IO.TextReader.Close*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextReader.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextReader.Dispose\n  commentId: M:System.IO.TextReader.Dispose\n  id: Dispose\n  parent: System.IO.TextReader\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: TextReader.Dispose()\n  fullName: TextReader.Dispose()\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Releases all resources used by the <xref href=\"System.IO.TextReader\"></xref> object.\n  remarks: \"Call <xref:System.IO.TextReader.Dispose%2A> when you are finished using the <xref:System.IO.TextReader>. The <xref:System.IO.TextReader.Dispose%2A> method leaves the <xref:System.IO.TextReader> in an unusable state. After calling <xref:System.IO.TextReader.Dispose%2A>, you must release all references to the <xref:System.IO.TextReader> so the garbage collector can reclaim the memory that the <xref:System.IO.TextReader> was occupying.  \\n  \\n For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  \\n  \\n> [!NOTE]\\n>  Always call <xref:System.IO.TextReader.Dispose%2A> before you release your last reference to the <xref:System.IO.TextReader>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.IO.TextReader> object's <xref:System.Object.Finalize%2A> method.\"\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.IO.TextReader.Dispose*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextReader.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextReader.Dispose(System.Boolean)\n  commentId: M:System.IO.TextReader.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.IO.TextReader\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: TextReader.Dispose(Boolean)\n  fullName: TextReader.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Releases the unmanaged resources used by the <xref href=\"System.IO.TextReader\"></xref> and optionally releases the managed resources.\n  remarks: \"This method is called by the public `Dispose` method and the <xref:System.Object.Finalize%2A> method. By default, this method specifies the `disposing` parameter as `true`. <xref:System.Object.Finalize%2A> specifies the `disposing` parameter as `false`.  \\n  \\n When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.IO.TextReader> references. This method invokes the `Dispose` method of each referenced object.\"\n  syntax:\n    content: protected virtual void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: '`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.'\n  overload: System.IO.TextReader.Dispose*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextReader.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextReader.Null\n  commentId: F:System.IO.TextReader.Null\n  id: \"Null\"\n  parent: System.IO.TextReader\n  langs:\n  - csharp\n  name: \"Null\"\n  nameWithType: TextReader.Null\n  fullName: TextReader.Null\n  type: Field\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Provides a `TextReader` with no data to read from.\n  remarks: \"Reading from the <xref:System.IO.TextReader.Null> text reader is similar to reading from the end of a stream:  \\n  \\n-   The <xref:System.IO.TextReader.Read%2A> and <xref:System.IO.TextReader.Peek%2A> methods return -1.  \\n  \\n-   The <xref:System.IO.TextReader.ReadBlock%2A> method returns zero.  \\n  \\n-   The <xref:System.IO.TextReader.ReadLine%2A> method returns `null`.  \\n  \\n-   The <xref:System.IO.TextReader.ReadToEnd%2A> method returns an empty string.\"\n  syntax:\n    content: public static readonly System.IO.TextReader Null;\n    return:\n      type: System.IO.TextReader\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextReader.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextReader.Peek\n  commentId: M:System.IO.TextReader.Peek\n  id: Peek\n  parent: System.IO.TextReader\n  langs:\n  - csharp\n  name: Peek()\n  nameWithType: TextReader.Peek()\n  fullName: TextReader.Peek()\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Reads the next character without changing the state of the reader or the character source. Returns the next available character without actually reading it from the reader.\n  remarks: \"The <xref:System.IO.TextReader.Peek%2A> method returns an integer value in order to determine whether the end of the file, or another error has occurred. This allows a user to first check if the returned value is -1 before casting it to a <xref:System.Char> type.  \\n  \\n The current position of the <xref:System.IO.TextReader> is not changed by this operation. The returned value is -1 if no more characters are available. The default implementation returns -1.  \\n  \\n The <xref:System.IO.TextReader> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref:System.IO.TextReader.Peek%2A> method, see the <xref:System.IO.StreamReader.Peek%2A?displayProperty=fullName> method.\"\n  syntax:\n    content: public virtual int Peek ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: An integer representing the next character to be read, or -1 if no more characters are available or the reader does not support seeking.\n  overload: System.IO.TextReader.Peek*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.IO.TextReader\"></xref> is closed.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurs.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextReader.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextReader.Read\n  commentId: M:System.IO.TextReader.Read\n  id: Read\n  parent: System.IO.TextReader\n  langs:\n  - csharp\n  name: Read()\n  nameWithType: TextReader.Read()\n  fullName: TextReader.Read()\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Reads the next character from the text reader and advances the character position by one character.\n  remarks: The <xref:System.IO.TextReader> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref:System.IO.TextReader.Read%2A> method, see the <xref:System.IO.StreamReader.Read%2A?displayProperty=fullName> method.\n  syntax:\n    content: public virtual int Read ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: The next character from the text reader, or -1 if no more characters are available. The default implementation returns -1.\n  overload: System.IO.TextReader.Read*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.IO.TextReader\"></xref> is closed.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurs.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextReader.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)\n  id: Read(System.Char[],System.Int32,System.Int32)\n  parent: System.IO.TextReader\n  langs:\n  - csharp\n  name: Read(Char[], Int32, Int32)\n  nameWithType: TextReader.Read(Char[], Int32, Int32)\n  fullName: TextReader.Read(Char[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Reads a specified maximum number of characters from the current reader and writes the data to a buffer, beginning at the specified index.\n  remarks: \"This method returns after either `count` characters are read or the end of the file is reached. <xref:System.IO.TextReader.ReadBlock%2A> is a blocking version of this method.  \\n  \\n The <xref:System.IO.TextReader> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref:System.IO.TextReader.Read%2A> method, see the <xref:System.IO.StreamReader.Read%2A?displayProperty=fullName> method.\"\n  syntax:\n    content: public virtual int Read (char[] buffer, int index, int count);\n    parameters:\n    - id: buffer\n      type: System.Char[]\n      description: When this method returns, contains the specified character array with the values between <code>index</code> and (<code>index</code> + <code>count</code> - 1) replaced by the characters read from the current source.\n    - id: index\n      type: System.Int32\n      description: The position in <code>buffer</code> at which to begin writing.\n    - id: count\n      type: System.Int32\n      description: The maximum number of characters to read. If the end of the reader is reached before the specified number of characters is read into the buffer, the method returns.\n    return:\n      type: System.Int32\n      description: The number of characters that have been read. The number will be less than or equal to <code>count</code>, depending on whether the data is available within the reader. This method returns 0 (zero) if it is called when no more characters are left to read.\n  overload: System.IO.TextReader.Read*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>buffer</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The buffer length minus <code>index</code> is less than <code>count</code>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> or <code>count</code> is negative.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.IO.TextReader\"></xref> is closed.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurs.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextReader.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)\n  id: ReadAsync(System.Char[],System.Int32,System.Int32)\n  parent: System.IO.TextReader\n  langs:\n  - csharp\n  name: ReadAsync(Char[], Int32, Int32)\n  nameWithType: TextReader.ReadAsync(Char[], Int32, Int32)\n  fullName: TextReader.ReadAsync(Char[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Reads a specified maximum number of characters from the current text reader asynchronously and writes the data to a buffer, beginning at the specified index.\n  remarks: \"The task completes after either the number of characters specified by the `count` parameter are read or the end of the file is reached.  \\n  \\n The <xref:System.IO.TextReader> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref:System.IO.TextReader.ReadAsync%2A> method, see the <xref:System.IO.StreamReader.ReadAsync%2A?displayProperty=fullName> method.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public virtual System.Threading.Tasks.Task<int> ReadAsync (char[] buffer, int index, int count);\n    parameters:\n    - id: buffer\n      type: System.Char[]\n      description: When this method returns, contains the specified character array with the values between <code>index</code> and (<code>index</code> + <code>count</code> - 1) replaced by the characters read from the current source.\n    - id: index\n      type: System.Int32\n      description: The position in <code>buffer</code> at which to begin writing.\n    - id: count\n      type: System.Int32\n      description: The maximum number of characters to read. If the end of the text is reached before the specified number of characters is read into the buffer, the current method returns.\n    return:\n      type: System.Threading.Tasks.Task{System.Int32}\n      description: A task that represents the asynchronous read operation. The value of the <code>TResult</code> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the text has been reached.\n  overload: System.IO.TextReader.ReadAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>buffer</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> or <code>count</code> is negative.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The sum of <code>index</code> and <code>count</code> is larger than the buffer length.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The text reader has been disposed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The reader is currently in use by a previous read operation.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextReader.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)\n  id: ReadBlock(System.Char[],System.Int32,System.Int32)\n  parent: System.IO.TextReader\n  langs:\n  - csharp\n  name: ReadBlock(Char[], Int32, Int32)\n  nameWithType: TextReader.ReadBlock(Char[], Int32, Int32)\n  fullName: TextReader.ReadBlock(Char[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Reads a specified maximum number of characters from the current text reader and writes the data to a buffer, beginning at the specified index.\n  remarks: \"The position of the underlying text reader is advanced by the number of characters that were read into `buffer`.  \\n  \\n The method blocks until either `count` characters are read, or all characters have been read. This is a blocking version of <xref:System.IO.TextReader.Read%2A>.\"\n  syntax:\n    content: public virtual int ReadBlock (char[] buffer, int index, int count);\n    parameters:\n    - id: buffer\n      type: System.Char[]\n      description: When this method returns, this parameter contains the specified character array with the values between <code>index</code> and (<code>index</code> + <code>count</code> -1) replaced by the characters read from the current source.\n    - id: index\n      type: System.Int32\n      description: The position in <code>buffer</code> at which to begin writing.\n    - id: count\n      type: System.Int32\n      description: The maximum number of characters to read.\n    return:\n      type: System.Int32\n      description: The number of characters that have been read. The number will be less than or equal to <code>count</code>, depending on whether all input characters have been read.\n  overload: System.IO.TextReader.ReadBlock*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>buffer</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The buffer length minus <code>index</code> is less than <code>count</code>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> or <code>count</code> is negative.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.IO.TextReader\"></xref> is closed.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurs.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextReader.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)\n  id: ReadBlockAsync(System.Char[],System.Int32,System.Int32)\n  parent: System.IO.TextReader\n  langs:\n  - csharp\n  name: ReadBlockAsync(Char[], Int32, Int32)\n  nameWithType: TextReader.ReadBlockAsync(Char[], Int32, Int32)\n  fullName: TextReader.ReadBlockAsync(Char[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Reads a specified maximum number of characters from the current text reader asynchronously and writes the data to a buffer, beginning at the specified index.\n  remarks: The task does not complete until either the number of characters specified by the `count` parameter are read, or the end of the text has been reached.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public virtual System.Threading.Tasks.Task<int> ReadBlockAsync (char[] buffer, int index, int count);\n    parameters:\n    - id: buffer\n      type: System.Char[]\n      description: When this method returns, contains the specified character array with the values between <code>index</code> and (<code>index</code> + <code>count</code> - 1) replaced by the characters read from the current source.\n    - id: index\n      type: System.Int32\n      description: The position in <code>buffer</code> at which to begin writing.\n    - id: count\n      type: System.Int32\n      description: The maximum number of characters to read. If the end of the text is reached before the specified number of characters is read into the buffer, the current method returns.\n    return:\n      type: System.Threading.Tasks.Task{System.Int32}\n      description: A task that represents the asynchronous read operation. The value of the <code>TResult</code> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the text has been reached.\n  overload: System.IO.TextReader.ReadBlockAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>buffer</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> or <code>count</code> is negative.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The sum of <code>index</code> and <code>count</code> is larger than the buffer length.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The text reader has been disposed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The reader is currently in use by a previous read operation.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextReader.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextReader.ReadLine\n  commentId: M:System.IO.TextReader.ReadLine\n  id: ReadLine\n  parent: System.IO.TextReader\n  langs:\n  - csharp\n  name: ReadLine()\n  nameWithType: TextReader.ReadLine()\n  fullName: TextReader.ReadLine()\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Reads a line of characters from the text reader and returns the data as a string.\n  remarks: \"A line is defined as a sequence of characters followed by a carriage return (0x000d), a line feed (0x000a), a carriage return followed by a line feed, <xref:System.Environment.NewLine%2A?displayProperty=fullName>, or the end-of-stream marker. The string that is returned does not contain the terminating carriage return or line feed. The return value is `null` if the end of the input stream has been reached.  \\n  \\n If the method throws an <xref:System.OutOfMemoryException> exception, the reader's position in the underlying <xref:System.IO.Stream> is advanced by the number of characters the method was able to read, but the characters that were already read into the internal <xref:System.IO.TextReader.ReadLine%2A> buffer are discarded. Because the position of the reader in the stream cannot be changed, the characters that were already read are unrecoverable and can be accessed only by reinitializing the <xref:System.IO.TextReader> object. If the initial position within the stream is unknown or the stream does not support seeking, the underlying <xref:System.IO.Stream> also needs to be reinitialized.  \\n  \\n To avoid such a situation and produce robust code you should use the <xref:System.IO.TextReader.Read%2A> method and store the read characters in a preallocated buffer.  \\n  \\n The <xref:System.IO.TextReader> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref:System.IO.TextReader.ReadLine%2A> method, see the <xref:System.IO.StreamReader.ReadLine%2A?displayProperty=fullName> method.\"\n  syntax:\n    content: public virtual string ReadLine ();\n    parameters: []\n    return:\n      type: System.String\n      description: The next line from the reader, or `null` if all characters have been read.\n  overload: System.IO.TextReader.ReadLine*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurs.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is insufficient memory to allocate a buffer for the returned string.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.IO.TextReader\"></xref> is closed.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The number of characters in the next line is larger than <xref href=\"System.Int32.MaxValue\"></xref>\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextReader.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextReader.ReadLineAsync\n  commentId: M:System.IO.TextReader.ReadLineAsync\n  id: ReadLineAsync\n  parent: System.IO.TextReader\n  langs:\n  - csharp\n  name: ReadLineAsync()\n  nameWithType: TextReader.ReadLineAsync()\n  fullName: TextReader.ReadLineAsync()\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Reads a line of characters asynchronously and returns the data as a string.\n  remarks: \"The <xref:System.IO.TextReader> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref:System.IO.TextReader.ReadLineAsync%2A> method, see the <xref:System.IO.StreamReader.ReadLineAsync%2A?displayProperty=fullName> method.  \\n  \\n If the current <xref:System.IO.TextReader> represents the standard input stream returned by the <xref:System.Console.In%2A?displayProperty=fullName> property, the <xref:System.IO.TextReader.ReadLineAsync%2A> method executes synchronously rather than asynchronously.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public virtual System.Threading.Tasks.Task<string> ReadLineAsync ();\n    parameters: []\n    return:\n      type: System.Threading.Tasks.Task{System.String}\n      description: A task that represents the asynchronous read operation. The value of the <code>TResult</code> parameter contains the next line from the text reader, or is `null` if all of the characters have been read.\n  overload: System.IO.TextReader.ReadLineAsync*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The number of characters in the next line is larger than <xref href=\"System.Int32.MaxValue\"></xref>.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The text reader has been disposed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The reader is currently in use by a previous read operation.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextReader.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextReader.ReadToEnd\n  commentId: M:System.IO.TextReader.ReadToEnd\n  id: ReadToEnd\n  parent: System.IO.TextReader\n  langs:\n  - csharp\n  name: ReadToEnd()\n  nameWithType: TextReader.ReadToEnd()\n  fullName: TextReader.ReadToEnd()\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Reads all characters from the current position to the end of the text reader and returns them as one string.\n  remarks: \"If the method throws an <xref:System.OutOfMemoryException> exception, the reader's position in the underlying <xref:System.IO.Stream> is advanced by the number of characters the method was able to read, but the characters that were already read into the internal <xref:System.IO.TextReader.ReadToEnd%2A> buffer are discarded. Because the position of the reader in the stream cannot be changed, the characters that were already read are unrecoverable and can be accessed only by reinitializing the <xref:System.IO.TextReader>. If the initial position within the stream is unknown or the stream does not support seeking, the underlying <xref:System.IO.Stream> also needs to be reinitialized.  \\n  \\n To avoid such a situation and produce robust code you should use the <xref:System.IO.TextReader.Read%2A> method and store the read characters in a preallocated buffer.  \\n  \\n The <xref:System.IO.TextReader> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref:System.IO.TextReader.ReadToEnd%2A> method, see the <xref:System.IO.StreamReader.ReadToEnd%2A?displayProperty=fullName> method.\"\n  syntax:\n    content: public virtual string ReadToEnd ();\n    parameters: []\n    return:\n      type: System.String\n      description: A string that contains all characters from the current position to the end of the text reader.\n  overload: System.IO.TextReader.ReadToEnd*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurs.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.IO.TextReader\"></xref> is closed.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is insufficient memory to allocate a buffer for the returned string.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The number of characters in the next line is larger than <xref href=\"System.Int32.MaxValue\"></xref>\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextReader.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextReader.ReadToEndAsync\n  commentId: M:System.IO.TextReader.ReadToEndAsync\n  id: ReadToEndAsync\n  parent: System.IO.TextReader\n  langs:\n  - csharp\n  name: ReadToEndAsync()\n  nameWithType: TextReader.ReadToEndAsync()\n  fullName: TextReader.ReadToEndAsync()\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Reads all characters from the current position to the end of the text reader asynchronously and returns them as one string.\n  remarks: The <xref:System.IO.TextReader> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref:System.IO.TextReader.ReadToEndAsync%2A> method, see the <xref:System.IO.StreamReader.ReadToEndAsync%2A?displayProperty=fullName> method.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public virtual System.Threading.Tasks.Task<string> ReadToEndAsync ();\n    parameters: []\n    return:\n      type: System.Threading.Tasks.Task{System.String}\n      description: A task that represents the asynchronous read operation. The value of the <code>TResult</code> parameter contains a string with the characters from the current position to the end of the text reader.\n  overload: System.IO.TextReader.ReadToEndAsync*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The number of characters is larger than <xref href=\"System.Int32.MaxValue\"></xref>.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The text reader has been disposed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The reader is currently in use by a previous read operation.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextReader.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.TextReader.Synchronized(System.IO.TextReader)\n  commentId: M:System.IO.TextReader.Synchronized(System.IO.TextReader)\n  id: Synchronized(System.IO.TextReader)\n  parent: System.IO.TextReader\n  langs:\n  - csharp\n  name: Synchronized(TextReader)\n  nameWithType: TextReader.Synchronized(TextReader)\n  fullName: TextReader.Synchronized(TextReader)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Creates a thread-safe wrapper around the specified `TextReader`.\n  remarks: The current method returns a class that wraps around the specified <xref:System.IO.TextReader> instance and restricts access to it by multiple threads. All reads from the returned wrapper will be thread safe.\n  syntax:\n    content: public static System.IO.TextReader Synchronized (System.IO.TextReader reader);\n    parameters:\n    - id: reader\n      type: System.IO.TextReader\n      description: The `TextReader` to synchronize.\n    return:\n      type: System.IO.TextReader\n      description: A thread-safe <xref href=\"System.IO.TextReader\"></xref>.\n  overload: System.IO.TextReader.Synchronized*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>reader</code> is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextReader.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ObjectDisposedException\n  parent: System\n  isExternal: false\n  name: ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n- uid: System.IO.IOException\n  parent: System.IO\n  isExternal: false\n  name: IOException\n  nameWithType: IOException\n  fullName: System.IO.IOException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.OutOfMemoryException\n  parent: System\n  isExternal: false\n  name: OutOfMemoryException\n  nameWithType: OutOfMemoryException\n  fullName: System.OutOfMemoryException\n- uid: System.IO.TextReader.#ctor\n  parent: System.IO.TextReader\n  isExternal: false\n  name: TextReader()\n  nameWithType: TextReader.TextReader()\n  fullName: TextReader.TextReader()\n- uid: System.IO.TextReader.Close\n  parent: System.IO.TextReader\n  isExternal: false\n  name: Close()\n  nameWithType: TextReader.Close()\n  fullName: TextReader.Close()\n- uid: System.IO.TextReader.Dispose\n  parent: System.IO.TextReader\n  isExternal: false\n  name: Dispose()\n  nameWithType: TextReader.Dispose()\n  fullName: TextReader.Dispose()\n- uid: System.IO.TextReader.Dispose(System.Boolean)\n  parent: System.IO.TextReader\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: TextReader.Dispose(Boolean)\n  fullName: TextReader.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.IO.TextReader.Null\n  parent: System.IO.TextReader\n  isExternal: false\n  name: \"Null\"\n  nameWithType: TextReader.Null\n  fullName: TextReader.Null\n- uid: System.IO.TextReader\n  parent: System.IO\n  isExternal: false\n  name: TextReader\n  nameWithType: TextReader\n  fullName: System.IO.TextReader\n- uid: System.IO.TextReader.Peek\n  parent: System.IO.TextReader\n  isExternal: false\n  name: Peek()\n  nameWithType: TextReader.Peek()\n  fullName: TextReader.Peek()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.IO.TextReader.Read\n  parent: System.IO.TextReader\n  isExternal: false\n  name: Read()\n  nameWithType: TextReader.Read()\n  fullName: TextReader.Read()\n- uid: System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)\n  parent: System.IO.TextReader\n  isExternal: false\n  name: Read(Char[], Int32, Int32)\n  nameWithType: TextReader.Read(Char[], Int32, Int32)\n  fullName: TextReader.Read(Char[], Int32, Int32)\n- uid: System.Char\n  name: Char\n  nameWithType: Char\n  fullName: System.Char\n- uid: System.Char[]\n  parent: System\n  isExternal: false\n  name: Char[]\n  nameWithType: Char[]\n  fullName: System.Char[]\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    nameWithType: Char\n    fullName: System.Char\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)\n  parent: System.IO.TextReader\n  isExternal: false\n  name: ReadAsync(Char[], Int32, Int32)\n  nameWithType: TextReader.ReadAsync(Char[], Int32, Int32)\n  fullName: TextReader.ReadAsync(Char[], Int32, Int32)\n- uid: System.Threading.Tasks.Task`1\n  name: Task<TResult>\n  nameWithType: Task<TResult>\n  fullName: System.Threading.Tasks.Task<TResult>\n- uid: System.Threading.Tasks.Task{System.Int32}\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task<Int32>\n  nameWithType: Task<Int32>\n  fullName: System.Threading.Tasks.Task<System.Int32>\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)\n  parent: System.IO.TextReader\n  isExternal: false\n  name: ReadBlock(Char[], Int32, Int32)\n  nameWithType: TextReader.ReadBlock(Char[], Int32, Int32)\n  fullName: TextReader.ReadBlock(Char[], Int32, Int32)\n- uid: System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)\n  parent: System.IO.TextReader\n  isExternal: false\n  name: ReadBlockAsync(Char[], Int32, Int32)\n  nameWithType: TextReader.ReadBlockAsync(Char[], Int32, Int32)\n  fullName: TextReader.ReadBlockAsync(Char[], Int32, Int32)\n- uid: System.IO.TextReader.ReadLine\n  parent: System.IO.TextReader\n  isExternal: false\n  name: ReadLine()\n  nameWithType: TextReader.ReadLine()\n  fullName: TextReader.ReadLine()\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.IO.TextReader.ReadLineAsync\n  parent: System.IO.TextReader\n  isExternal: false\n  name: ReadLineAsync()\n  nameWithType: TextReader.ReadLineAsync()\n  fullName: TextReader.ReadLineAsync()\n- uid: System.Threading.Tasks.Task{System.String}\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task<String>\n  nameWithType: Task<String>\n  fullName: System.Threading.Tasks.Task<System.String>\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: System.String\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.IO.TextReader.ReadToEnd\n  parent: System.IO.TextReader\n  isExternal: false\n  name: ReadToEnd()\n  nameWithType: TextReader.ReadToEnd()\n  fullName: TextReader.ReadToEnd()\n- uid: System.IO.TextReader.ReadToEndAsync\n  parent: System.IO.TextReader\n  isExternal: false\n  name: ReadToEndAsync()\n  nameWithType: TextReader.ReadToEndAsync()\n  fullName: TextReader.ReadToEndAsync()\n- uid: System.IO.TextReader.Synchronized(System.IO.TextReader)\n  parent: System.IO.TextReader\n  isExternal: false\n  name: Synchronized(TextReader)\n  nameWithType: TextReader.Synchronized(TextReader)\n  fullName: TextReader.Synchronized(TextReader)\n- uid: System.IO.TextReader.#ctor*\n  parent: System.IO.TextReader\n  isExternal: false\n  name: TextReader\n  nameWithType: TextReader.TextReader\n  fullName: TextReader.TextReader\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextReader.xml\n- uid: System.IO.TextReader.Close*\n  parent: System.IO.TextReader\n  isExternal: false\n  name: Close\n  nameWithType: TextReader.Close\n  fullName: TextReader.Close\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextReader.xml\n- uid: System.IO.TextReader.Dispose*\n  parent: System.IO.TextReader\n  isExternal: false\n  name: Dispose\n  nameWithType: TextReader.Dispose\n  fullName: TextReader.Dispose\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextReader.xml\n- uid: System.IO.TextReader.Peek*\n  parent: System.IO.TextReader\n  isExternal: false\n  name: Peek\n  nameWithType: TextReader.Peek\n  fullName: TextReader.Peek\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextReader.xml\n- uid: System.IO.TextReader.Read*\n  parent: System.IO.TextReader\n  isExternal: false\n  name: Read\n  nameWithType: TextReader.Read\n  fullName: TextReader.Read\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextReader.xml\n- uid: System.IO.TextReader.ReadAsync*\n  parent: System.IO.TextReader\n  isExternal: false\n  name: ReadAsync\n  nameWithType: TextReader.ReadAsync\n  fullName: TextReader.ReadAsync\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextReader.xml\n- uid: System.IO.TextReader.ReadBlock*\n  parent: System.IO.TextReader\n  isExternal: false\n  name: ReadBlock\n  nameWithType: TextReader.ReadBlock\n  fullName: TextReader.ReadBlock\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextReader.xml\n- uid: System.IO.TextReader.ReadBlockAsync*\n  parent: System.IO.TextReader\n  isExternal: false\n  name: ReadBlockAsync\n  nameWithType: TextReader.ReadBlockAsync\n  fullName: TextReader.ReadBlockAsync\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextReader.xml\n- uid: System.IO.TextReader.ReadLine*\n  parent: System.IO.TextReader\n  isExternal: false\n  name: ReadLine\n  nameWithType: TextReader.ReadLine\n  fullName: TextReader.ReadLine\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextReader.xml\n- uid: System.IO.TextReader.ReadLineAsync*\n  parent: System.IO.TextReader\n  isExternal: false\n  name: ReadLineAsync\n  nameWithType: TextReader.ReadLineAsync\n  fullName: TextReader.ReadLineAsync\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextReader.xml\n- uid: System.IO.TextReader.ReadToEnd*\n  parent: System.IO.TextReader\n  isExternal: false\n  name: ReadToEnd\n  nameWithType: TextReader.ReadToEnd\n  fullName: TextReader.ReadToEnd\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextReader.xml\n- uid: System.IO.TextReader.ReadToEndAsync*\n  parent: System.IO.TextReader\n  isExternal: false\n  name: ReadToEndAsync\n  nameWithType: TextReader.ReadToEndAsync\n  fullName: TextReader.ReadToEndAsync\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextReader.xml\n- uid: System.IO.TextReader.Synchronized*\n  parent: System.IO.TextReader\n  isExternal: false\n  name: Synchronized\n  nameWithType: TextReader.Synchronized\n  fullName: TextReader.Synchronized\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/TextReader.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  nameWithType: IDisposable\n  fullName: System.IDisposable\n"}