{"nodes":[{"content":"Represents text that should be kept confidential, such as by deleting it from computer memory when no longer needed. This class cannot be inherited.","nodes":[{"pos":[0,148],"content":"Represents text that should be kept confidential, such as by deleting it from computer memory when no longer needed. This class cannot be inherited.","nodes":[{"content":"Represents text that should be kept confidential, such as by deleting it from computer memory when no longer needed. This class cannot be inherited.","pos":[0,148],"nodes":[{"content":"Represents text that should be kept confidential, such as by deleting it from computer memory when no longer needed.","pos":[0,116]},{"content":"This class cannot be inherited.","pos":[117,148]}]}]}],"pos":[1022,1171],"yaml":true},{"content":"<xref:System.Security.SecureString> is a string type that provides a measure of security. It tries to avoid storing potentially sensitive strings in process memory as plain text.  (For limitations, however, see the [How secure is SecureString?](#HowSecure) section.) The value of an instance of <xref:System.Security.SecureString> is automatically protected using a mechanism supported by the underlying platform when the instance is initialized or when the value is modified. Your application can render the instance immutable and prevent further modification by invoking the <xref:System.Security.SecureString.MakeReadOnly%2A> method.  \n  \n The maximum length of a <xref:System.Security.SecureString> instance is 65,536 characters.  \n  \n> [!IMPORTANT]\n>  This type implements the <xref:System.IDisposable> interface. When you have finished using an instance of the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.  \n  \n The <xref:System.Security.SecureString> class and its members are not visible to COM. For more information, see <xref:System.Runtime.InteropServices.ComVisibleAttribute>.  \n  \n In this section:  \n  \n [String vs. SecureString](#vsString)   \n [SecureString operations](#Ops)   \n [SecureString and interop](#interop)   \n [How secure is  SecureString?](#HowSecure)  \n  \n<a name=\"vsString\"></a>   \n## String versus SecureString  \n An instance of the <xref:System.String?displayProperty=fullName> class is both immutable and, when no longer needed, cannot be programmatically scheduled for garbage collection; that is, the instance is read-only after it is created, and it is not possible to predict when the instance will be deleted from computer memory. Because <xref:System.String?displayProperty=fullName> instances are immutable, operations that appear to modify an existing instance  actually create a copy of it to manipulate. Consequently, if a <xref:System.String> object contains sensitive information such as a password, credit card number, or personal data, there is a risk the information could be revealed after it is used because your application cannot delete the data from computer memory.  \n  \n A <xref:System.Security.SecureString> object is similar to a <xref:System.String> object in that it has a text value. However, the value of a <xref:System.Security.SecureString> object is pinned in memory, may use a protection mechanism, such as encryption, provided by the underlying operating system, can be modified until your application marks it as read-only, and can be deleted from computer memory either by your application calling the <xref:System.Security.SecureString.Dispose%2A> method  or by the .NET Framework garbage collector.  \n  \n For a discussion of the limitations of the <xref:System.Security.SecureString> class, see the [How secure is  SecureString?](#HowSecure) section.  \n  \n [Back to top](#top)  \n  \n<a name=\"Ops\"></a>   \n## SecureString operations  \n The <xref:System.Security.SecureString> class includes members that allow you to do the following:  \n  \n Instantiate a <xref:System.Security.SecureString> object  \n You instantiate a <xref:System.Security.SecureString> object by calling its parameterless constructor.  \n  \n Add characters to a <xref:System.Security.SecureString> object  \n You can add a single character at a time to a <xref:System.Security.SecureString> object  by calling its <xref:System.Security.SecureString.AppendChar%2A> or <xref:System.Security.SecureString.InsertAt%2A> method.  \n  \n> [!IMPORTANT]\n>  A <xref:System.Security.SecureString> object should never be constructed from a <xref:System.String>, because the sensitive data is already subject to the memory persistence consequences of the immutable <xref:System.String> class. The best way to construct a <xref:System.Security.SecureString> object is from a character-at-a-time unmanaged source, such as the <xref:System.Console.ReadKey%2A?displayProperty=fullName> method.  \n  \n Remove characters from a <xref:System.Security.SecureString> object  \n You can replace an individual character by calling the <xref:System.Security.SecureString.SetAt%2A> method, remove an individual character by calling the <xref:System.Security.SecureString.RemoveAt%2A> method, or remove all characters from the <xref:System.Security.SecureString> instance by calling the  <xref:System.Security.SecureString.Clear%2A> method.  \n  \n Make the <xref:System.Security.SecureString> object read-only  \n Once you have defined the string that the <xref:System.Security.SecureString> object represents, you call its  <xref:System.Security.SecureString.MakeReadOnly%2A> method to make the string read-only.  \n  \n Get information about the <xref:System.Security.SecureString> object  \n The <xref:System.Security.SecureString> class has only two members that provide information about the string: its <xref:System.Security.SecureString.Length%2A> property, which indicates the number of UTF16-encoded code units in the string; and the <xref:System.Security.SecureString.IsReadOnly%2A>, method, which indicates whether the instance is read-only.  \n  \n Release the memory allocated to the <xref:System.Security.SecureString> instance  \n Because <xref:System.Security.SecureString> implements the <xref:System.IDisposable> interface, you release its memory by calling the <xref:System.Security.SecureString.Dispose%2A> method.  \n  \n The <xref:System.Security.SecureString> class has no members that inspect, compare, or convert the value of a <xref:System.Security.SecureString>. The absence of such members helps protect the value of the instance from accidental or malicious exposure. Use appropriate members of the <xref:System.Runtime.InteropServices.Marshal?displayProperty=fullName> class, such as the <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A> method, to manipulate the value of a <xref:System.Security.SecureString> object.  \n  \n The .NET Framework Class Library commonly uses <xref:System.Security.SecureString> instances in the following ways:  \n  \n-   To provide password information to a process by using the <xref:System.Diagnostics.ProcessStartInfo> structure or by calling an overload of the <xref:System.Diagnostics.Process.Start%2A?displayProperty=fullName> method that has a parameter of type <xref:System.Security.SecureString>.  \n  \n-   To provide network password information by calling a <xref:System.Net.NetworkCredential> class constructor that has a parameter of type <xref:System.Security.SecureString> or by using the <xref:System.Net.NetworkCredential.SecurePassword%2A?displayProperty=fullName> property.  \n  \n-   To provide password information for SQL Server Authentication by calling the <xref:System.Data.SqlClient.SqlCredential.%23ctor%2A?displayProperty=fullName> constructor or retrieving the value of the <xref:System.Data.SqlClient.SqlCredential.Password%2A?displayProperty=fullName> property.  \n  \n-   To pass a string to unmanaged code. For more information, see the [SecureString and interop](#interop) section.  \n  \n [Back to top](#top)  \n  \n<a name=\"interop\"></a>   \n## SecureString and interop  \n Because the operating system does not  directly support <xref:System.Security.SecureString>, you must convert the value of the <xref:System.Security.SecureString> object to the required string type before passing the string to a native method.  The <xref:System.Runtime.InteropServices.Marshal> class has five methods that do this:  \n  \n-   <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName>, which converts the <xref:System.Security.SecureString> string value to a binary string (BSTR) recognized by COM.  \n  \n-   <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName> and <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName>, which copy the <xref:System.Security.SecureString> string value to an ANSI string in unmanaged memory.  \n  \n-   <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName> and <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName>, which copy the <xref:System.Security.SecureString> string value to a Unicode string in unmanaged memory.  \n  \n Each of these methods creates a clear-text string in unmanaged memory. It is the responsibility of the developer to zero out and free that memory as soon as it is no longer needed. Each of the string conversion and memory allocation methods has a corresponding method to zero out and free the allocated memory:  \n  \n|Allocation and conversion method|Zero and free method|  \n|--------------------------------------|--------------------------|  \n|<xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A?displayProperty=fullName>|  \n|<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A?displayProperty=fullName>|  \n|<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A?displayProperty=fullName>|  \n|<xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A?displayProperty=fullName>|  \n|<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A?displayProperty=fullName>|  \n  \n [Back to top](#top)  \n  \n<a name=\"HowSecure\"></a>   \n## How secure is SecureString?  \n When created properly, a <xref:System.Security.SecureString> instance provides more data protection than a <xref:System.String>. When creating a string from a character-at-a-time source, <xref:System.String> creates multiple intermediate in memory, whereas  <xref:System.Security.SecureString> creates just a single instance.  Garbage collection of <xref:System.String> objects  is non-deterministic. In addition, because its memory is not pinned, the garbage collector will make additional copies of <xref:System.String> values when moving and compacting memory. In contrast, the memory allocated to a <xref:System.Security.SecureString> object is pinned,  and that memory can be freed by calling the <xref:System.Security.SecureString.Dispose%2A> method.  \n  \n Although data stored in a <xref:System.Security.SecureString> instance is more secure than data stored in a <xref:System.String> instance, there are significant limitations on how secure a <xref:System.Security.SecureString> instance is. These include:  \n  \n Platform  \n On the Windows operating system, the contents of a <xref:System.Security.SecureString> instance's internal character array is encrypted. However, whether because of missing APIs or key management issues,  encryption is not available on all platforms. Because of this, <xref:System.Security.SecureString> is available on Desktop (Windows only), and not on .NET Core.  \n  \n Duration  \n Even if the <xref:System.Security.SecureString> implementation is able to take advantage of encryption, the plain text assigned to the <xref:System.Security.SecureString> instance may be exposed at various times:  \n  \n-   Because Windows doesn't offer a secure string implementation at the operating system level, the .NET Framework still has to convert the secure string value to its plain text representation in order to use it.  \n  \n-   Whenever the value of the secure string is modified by methods such as <xref:System.Security.SecureString.AppendChar%2A> or <xref:System.Security.SecureString.RemoveAt%2A>, it must be decrypted (i.e., converted back to plain text), modified, and then encrypted again.  \n  \n-   If the secure string is used in an interop call, it must be converted to an ANSI string, a Unicode string, or a binary string (BSTR). For more information, see the [SecureString and interop](#interop) section.  \n  \n The time interval for which the <xref:System.Security.SecureString> instance's value is exposed  is merely shortened in comparison to the <xref:System.String> class.  \n  \n Storage versus usage  \n More generally, the <xref:System.Security.SecureString> class defines a storage mechanism for string values that should be protected or kept confidential. However, outside of the .NET Framework itself, no usage mechanism supports <xref:System.Security.SecureString>. This means that the secure string must be converted to a usable form (typically a clear text form) that can be recognized by its target, and     that decryption and conversion must occur in user space.  \n  \n Overall, <xref:System.Security.SecureString> is more secure than <xref:System.String> because it limits the exposure of sensitive string data. However, those strings may still be exposed to any process or operation that has access to raw memory, such as a malicious process running on the host computer, a process dump, or a user-viewable swap file. Instead of using <xref:System.Security.SecureString> to protect passwords, the recommended alternative is to use an opaque handle to credentials that are stored outside of the process.  \n  \n [Back to top](#top)","nodes":[{"pos":[0,636],"content":"<xref:System.Security.SecureString> is a string type that provides a measure of security. It tries to avoid storing potentially sensitive strings in process memory as plain text.  (For limitations, however, see the [How secure is SecureString?](#HowSecure) section.) The value of an instance of <xref:System.Security.SecureString> is automatically protected using a mechanism supported by the underlying platform when the instance is initialized or when the value is modified. Your application can render the instance immutable and prevent further modification by invoking the <xref:System.Security.SecureString.MakeReadOnly%2A> method.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Security.SecureString&gt;</ph> is a string type that provides a measure of security.","pos":[0,89],"source":"<xref:System.Security.SecureString> is a string type that provides a measure of security."},{"content":"It tries to avoid storing potentially sensitive strings in process memory as plain text.","pos":[90,178]},{"content":"(For limitations, however, see the <bpt id=\"p1\">[</bpt>How secure is SecureString?<ept id=\"p1\">](#HowSecure)</ept> section.) The value of an instance of <ph id=\"ph1\">&lt;xref:System.Security.SecureString&gt;</ph> is automatically protected using a mechanism supported by the underlying platform when the instance is initialized or when the value is modified.","pos":[180,476],"source":"  (For limitations, however, see the [How secure is SecureString?](#HowSecure) section.) The value of an instance of <xref:System.Security.SecureString> is automatically protected using a mechanism supported by the underlying platform when the instance is initialized or when the value is modified."},{"content":"Your application can render the instance immutable and prevent further modification by invoking the <ph id=\"ph1\">&lt;xref:System.Security.SecureString.MakeReadOnly%2A&gt;</ph> method.","pos":[477,636],"source":" Your application can render the instance immutable and prevent further modification by invoking the <xref:System.Security.SecureString.MakeReadOnly%2A> method."}]},{"pos":[643,733],"content":"The maximum length of a <xref:System.Security.SecureString> instance is 65,536 characters.","nodes":[{"content":"The maximum length of a <ph id=\"ph1\">&lt;xref:System.Security.SecureString&gt;</ph> instance is 65,536 characters.","pos":[0,90],"source":"The maximum length of a <xref:System.Security.SecureString> instance is 65,536 characters."}]},{"pos":[741,1282],"content":"[!IMPORTANT]\n This type implements the <xref:System.IDisposable> interface. When you have finished using an instance of the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.","leadings":["","> "],"nodes":[{"content":" This type implements the <xref:System.IDisposable> interface. When you have finished using an instance of the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.","pos":[13,539],"nodes":[{"content":"This type implements the <ph id=\"ph1\">&lt;xref:System.IDisposable&gt;</ph> interface.","pos":[1,62],"source":" This type implements the <xref:System.IDisposable> interface."},{"content":"When you have finished using an instance of the type, you should dispose of it either directly or indirectly.","pos":[63,172]},{"content":"To dispose of the type directly, call its <ph id=\"ph1\">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id=\"ph2\">`try`</ph><ph id=\"ph3\">/</ph><ph id=\"ph4\">`catch`</ph> block.","pos":[173,284],"source":" To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block."},{"content":"To dispose of it indirectly, use a language construct such as <ph id=\"ph1\">`using`</ph> (in C#) or <ph id=\"ph2\">`Using`</ph> (in Visual Basic).","pos":[285,392],"source":" To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic)."},{"content":"For more information, see the \"Using an Object that Implements IDisposable\" section in the <ph id=\"ph1\">&lt;xref:System.IDisposable&gt;</ph> interface topic.","pos":[393,526],"source":" For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic."}]}]},{"pos":[1289,1459],"content":"The <xref:System.Security.SecureString> class and its members are not visible to COM. For more information, see <xref:System.Runtime.InteropServices.ComVisibleAttribute>.","nodes":[{"content":"The <xref:System.Security.SecureString> class and its members are not visible to COM. For more information, see <xref:System.Runtime.InteropServices.ComVisibleAttribute>.","pos":[0,170],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.SecureString&gt;</ph> class and its members are not visible to COM.","pos":[0,85],"source":"The <xref:System.Security.SecureString> class and its members are not visible to COM."},{"content":"For more information, see <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.ComVisibleAttribute&gt;</ph>.","pos":[86,170],"source":" For more information, see <xref:System.Runtime.InteropServices.ComVisibleAttribute>."}]}]},{"pos":[1466,1482],"content":"In this section:","nodes":[{"content":"In this section:","pos":[0,16]}]},{"pos":[1489,1649],"content":"[String vs. SecureString](#vsString)   \n [SecureString operations](#Ops)   \n [SecureString and interop](#interop)   \n [How secure is  SecureString?](#HowSecure)","nodes":[{"content":"<bpt id=\"p1\">[</bpt>String vs. SecureString<ept id=\"p1\">](#vsString)</ept><ph id=\"ph1\"> </ph>","pos":[0,37],"source":"[String vs. SecureString](#vsString) "},{"content":"<bpt id=\"p1\"> [</bpt>SecureString operations<ept id=\"p1\">](#Ops)</ept><ph id=\"ph1\"> </ph>","pos":[40,73],"source":" [SecureString operations](#Ops) "},{"content":"<bpt id=\"p1\"> [</bpt>SecureString and interop<ept id=\"p1\">](#interop)</ept><ph id=\"ph1\"> </ph>","pos":[76,114],"source":" [SecureString and interop](#interop) "},{"content":"<bpt id=\"p1\"> [</bpt>How secure is  SecureString?<ept id=\"p1\">](#HowSecure)</ept>","pos":[117,160],"source":" [How secure is  SecureString?](#HowSecure)"}]},{"pos":[1685,1711],"content":"String versus SecureString","linkify":"String versus SecureString","nodes":[{"content":"String versus SecureString","pos":[0,26]}]},{"pos":[1715,2489],"content":"An instance of the <xref:System.String?displayProperty=fullName> class is both immutable and, when no longer needed, cannot be programmatically scheduled for garbage collection; that is, the instance is read-only after it is created, and it is not possible to predict when the instance will be deleted from computer memory. Because <xref:System.String?displayProperty=fullName> instances are immutable, operations that appear to modify an existing instance  actually create a copy of it to manipulate. Consequently, if a <xref:System.String> object contains sensitive information such as a password, credit card number, or personal data, there is a risk the information could be revealed after it is used because your application cannot delete the data from computer memory.","nodes":[{"content":"An instance of the <xref:System.String?displayProperty=fullName> class is both immutable and, when no longer needed, cannot be programmatically scheduled for garbage collection; that is, the instance is read-only after it is created, and it is not possible to predict when the instance will be deleted from computer memory. Because <xref:System.String?displayProperty=fullName> instances are immutable, operations that appear to modify an existing instance  actually create a copy of it to manipulate. Consequently, if a <xref:System.String> object contains sensitive information such as a password, credit card number, or personal data, there is a risk the information could be revealed after it is used because your application cannot delete the data from computer memory.","pos":[0,774],"nodes":[{"content":"An instance of the <ph id=\"ph1\">&lt;xref:System.String?displayProperty=fullName&gt;</ph> class is both immutable and, when no longer needed, cannot be programmatically scheduled for garbage collection; that is, the instance is read-only after it is created, and it is not possible to predict when the instance will be deleted from computer memory.","pos":[0,323],"source":"An instance of the <xref:System.String?displayProperty=fullName> class is both immutable and, when no longer needed, cannot be programmatically scheduled for garbage collection; that is, the instance is read-only after it is created, and it is not possible to predict when the instance will be deleted from computer memory."},{"content":"Because <ph id=\"ph1\">&lt;xref:System.String?displayProperty=fullName&gt;</ph> instances are immutable, operations that appear to modify an existing instance  actually create a copy of it to manipulate.","pos":[324,501],"source":" Because <xref:System.String?displayProperty=fullName> instances are immutable, operations that appear to modify an existing instance  actually create a copy of it to manipulate."},{"content":"Consequently, if a <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> object contains sensitive information such as a password, credit card number, or personal data, there is a risk the information could be revealed after it is used because your application cannot delete the data from computer memory.","pos":[502,774],"source":" Consequently, if a <xref:System.String> object contains sensitive information such as a password, credit card number, or personal data, there is a risk the information could be revealed after it is used because your application cannot delete the data from computer memory."}]}]},{"pos":[2496,3038],"content":"A <xref:System.Security.SecureString> object is similar to a <xref:System.String> object in that it has a text value. However, the value of a <xref:System.Security.SecureString> object is pinned in memory, may use a protection mechanism, such as encryption, provided by the underlying operating system, can be modified until your application marks it as read-only, and can be deleted from computer memory either by your application calling the <xref:System.Security.SecureString.Dispose%2A> method  or by the .NET Framework garbage collector.","nodes":[{"content":"A <xref:System.Security.SecureString> object is similar to a <xref:System.String> object in that it has a text value. However, the value of a <xref:System.Security.SecureString> object is pinned in memory, may use a protection mechanism, such as encryption, provided by the underlying operating system, can be modified until your application marks it as read-only, and can be deleted from computer memory either by your application calling the <xref:System.Security.SecureString.Dispose%2A> method  or by the .NET Framework garbage collector.","pos":[0,542],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Security.SecureString&gt;</ph> object is similar to a <ph id=\"ph2\">&lt;xref:System.String&gt;</ph> object in that it has a text value.","pos":[0,117],"source":"A <xref:System.Security.SecureString> object is similar to a <xref:System.String> object in that it has a text value."},{"content":"However, the value of a <ph id=\"ph1\">&lt;xref:System.Security.SecureString&gt;</ph> object is pinned in memory, may use a protection mechanism, such as encryption, provided by the underlying operating system, can be modified until your application marks it as read-only, and can be deleted from computer memory either by your application calling the <ph id=\"ph2\">&lt;xref:System.Security.SecureString.Dispose%2A&gt;</ph> method  or by the .NET Framework garbage collector.","pos":[118,542],"source":" However, the value of a <xref:System.Security.SecureString> object is pinned in memory, may use a protection mechanism, such as encryption, provided by the underlying operating system, can be modified until your application marks it as read-only, and can be deleted from computer memory either by your application calling the <xref:System.Security.SecureString.Dispose%2A> method  or by the .NET Framework garbage collector."}]}]},{"pos":[3045,3190],"content":"For a discussion of the limitations of the <ph id=\"ph1\">&lt;xref:System.Security.SecureString&gt;</ph> class, see the <bpt id=\"p1\">[</bpt>How secure is  SecureString?<ept id=\"p1\">](#HowSecure)</ept> section.","source":"For a discussion of the limitations of the <xref:System.Security.SecureString> class, see the [How secure is  SecureString?](#HowSecure) section."},{"pos":[3197,3216],"content":"<bpt id=\"p1\">[</bpt>Back to top<ept id=\"p1\">](#top)</ept>","source":"[Back to top](#top)"},{"pos":[3247,3270],"content":"SecureString operations","linkify":"SecureString operations","nodes":[{"content":"SecureString operations","pos":[0,23]}]},{"pos":[3274,3372],"content":"The <xref:System.Security.SecureString> class includes members that allow you to do the following:","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.SecureString&gt;</ph> class includes members that allow you to do the following:","pos":[0,98],"source":"The <xref:System.Security.SecureString> class includes members that allow you to do the following:"}]},{"pos":[3379,3541],"content":"Instantiate a <xref:System.Security.SecureString> object  \n You instantiate a <xref:System.Security.SecureString> object by calling its parameterless constructor.","nodes":[{"content":"Instantiate a <ph id=\"ph1\">&lt;xref:System.Security.SecureString&gt;</ph> object","pos":[0,56],"source":"Instantiate a <xref:System.Security.SecureString> object"},{"content":"You instantiate a <ph id=\"ph1\">&lt;xref:System.Security.SecureString&gt;</ph> object by calling its parameterless constructor.","pos":[60,162],"source":"You instantiate a <xref:System.Security.SecureString> object by calling its parameterless constructor."}]},{"pos":[3548,3827],"content":"Add characters to a <xref:System.Security.SecureString> object  \n You can add a single character at a time to a <xref:System.Security.SecureString> object  by calling its <xref:System.Security.SecureString.AppendChar%2A> or <xref:System.Security.SecureString.InsertAt%2A> method.","nodes":[{"content":"Add characters to a <ph id=\"ph1\">&lt;xref:System.Security.SecureString&gt;</ph> object","pos":[0,62],"source":"Add characters to a <xref:System.Security.SecureString> object"},{"content":"You can add a single character at a time to a <ph id=\"ph1\">&lt;xref:System.Security.SecureString&gt;</ph> object  by calling its <ph id=\"ph2\">&lt;xref:System.Security.SecureString.AppendChar%2A&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Security.SecureString.InsertAt%2A&gt;</ph> method.","pos":[66,279],"source":"You can add a single character at a time to a <xref:System.Security.SecureString> object  by calling its <xref:System.Security.SecureString.AppendChar%2A> or <xref:System.Security.SecureString.InsertAt%2A> method."}]},{"pos":[3835,4279],"content":"[!IMPORTANT]\n A <xref:System.Security.SecureString> object should never be constructed from a <xref:System.String>, because the sensitive data is already subject to the memory persistence consequences of the immutable <xref:System.String> class. The best way to construct a <xref:System.Security.SecureString> object is from a character-at-a-time unmanaged source, such as the <xref:System.Console.ReadKey%2A?displayProperty=fullName> method.","leadings":["","> "],"nodes":[{"content":" A <xref:System.Security.SecureString> object should never be constructed from a <xref:System.String>, because the sensitive data is already subject to the memory persistence consequences of the immutable <xref:System.String> class. The best way to construct a <xref:System.Security.SecureString> object is from a character-at-a-time unmanaged source, such as the <xref:System.Console.ReadKey%2A?displayProperty=fullName> method.","pos":[13,442],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Security.SecureString&gt;</ph> object should never be constructed from a <ph id=\"ph2\">&lt;xref:System.String&gt;</ph>, because the sensitive data is already subject to the memory persistence consequences of the immutable <ph id=\"ph3\">&lt;xref:System.String&gt;</ph> class.","pos":[1,232],"source":" A <xref:System.Security.SecureString> object should never be constructed from a <xref:System.String>, because the sensitive data is already subject to the memory persistence consequences of the immutable <xref:System.String> class."},{"content":"The best way to construct a <ph id=\"ph1\">&lt;xref:System.Security.SecureString&gt;</ph> object is from a character-at-a-time unmanaged source, such as the <ph id=\"ph2\">&lt;xref:System.Console.ReadKey%2A?displayProperty=fullName&gt;</ph> method.","pos":[233,429],"source":" The best way to construct a <xref:System.Security.SecureString> object is from a character-at-a-time unmanaged source, such as the <xref:System.Console.ReadKey%2A?displayProperty=fullName> method."}]}]},{"pos":[4286,4714],"content":"Remove characters from a <xref:System.Security.SecureString> object  \n You can replace an individual character by calling the <xref:System.Security.SecureString.SetAt%2A> method, remove an individual character by calling the <xref:System.Security.SecureString.RemoveAt%2A> method, or remove all characters from the <xref:System.Security.SecureString> instance by calling the  <xref:System.Security.SecureString.Clear%2A> method.","nodes":[{"content":"Remove characters from a <ph id=\"ph1\">&lt;xref:System.Security.SecureString&gt;</ph> object","pos":[0,67],"source":"Remove characters from a <xref:System.Security.SecureString> object"},{"content":"You can replace an individual character by calling the <ph id=\"ph1\">&lt;xref:System.Security.SecureString.SetAt%2A&gt;</ph> method, remove an individual character by calling the <ph id=\"ph2\">&lt;xref:System.Security.SecureString.RemoveAt%2A&gt;</ph> method, or remove all characters from the <ph id=\"ph3\">&lt;xref:System.Security.SecureString&gt;</ph> instance by calling the  <ph id=\"ph4\">&lt;xref:System.Security.SecureString.Clear%2A&gt;</ph> method.","pos":[71,428],"source":"You can replace an individual character by calling the <xref:System.Security.SecureString.SetAt%2A> method, remove an individual character by calling the <xref:System.Security.SecureString.RemoveAt%2A> method, or remove all characters from the <xref:System.Security.SecureString> instance by calling the  <xref:System.Security.SecureString.Clear%2A> method."}]},{"pos":[4721,4985],"content":"Make the <xref:System.Security.SecureString> object read-only  \n Once you have defined the string that the <xref:System.Security.SecureString> object represents, you call its  <xref:System.Security.SecureString.MakeReadOnly%2A> method to make the string read-only.","nodes":[{"content":"Make the <ph id=\"ph1\">&lt;xref:System.Security.SecureString&gt;</ph> object read-only","pos":[0,61],"source":"Make the <xref:System.Security.SecureString> object read-only"},{"content":"Once you have defined the string that the <ph id=\"ph1\">&lt;xref:System.Security.SecureString&gt;</ph> object represents, you call its  <ph id=\"ph2\">&lt;xref:System.Security.SecureString.MakeReadOnly%2A&gt;</ph> method to make the string read-only.","pos":[65,264],"source":"Once you have defined the string that the <xref:System.Security.SecureString> object represents, you call its  <xref:System.Security.SecureString.MakeReadOnly%2A> method to make the string read-only."}]},{"pos":[4992,5421],"content":"Get information about the <xref:System.Security.SecureString> object  \n The <xref:System.Security.SecureString> class has only two members that provide information about the string: its <xref:System.Security.SecureString.Length%2A> property, which indicates the number of UTF16-encoded code units in the string; and the <xref:System.Security.SecureString.IsReadOnly%2A>, method, which indicates whether the instance is read-only.","nodes":[{"content":"Get information about the <ph id=\"ph1\">&lt;xref:System.Security.SecureString&gt;</ph> object","pos":[0,68],"source":"Get information about the <xref:System.Security.SecureString> object"},{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.SecureString&gt;</ph> class has only two members that provide information about the string: its <ph id=\"ph2\">&lt;xref:System.Security.SecureString.Length%2A&gt;</ph> property, which indicates the number of UTF16-encoded code units in the string; and the <ph id=\"ph3\">&lt;xref:System.Security.SecureString.IsReadOnly%2A&gt;</ph>, method, which indicates whether the instance is read-only.","pos":[72,429],"source":"The <xref:System.Security.SecureString> class has only two members that provide information about the string: its <xref:System.Security.SecureString.Length%2A> property, which indicates the number of UTF16-encoded code units in the string; and the <xref:System.Security.SecureString.IsReadOnly%2A>, method, which indicates whether the instance is read-only."}]},{"pos":[5428,5700],"content":"Release the memory allocated to the <xref:System.Security.SecureString> instance  \n Because <xref:System.Security.SecureString> implements the <xref:System.IDisposable> interface, you release its memory by calling the <xref:System.Security.SecureString.Dispose%2A> method.","nodes":[{"content":"Release the memory allocated to the <ph id=\"ph1\">&lt;xref:System.Security.SecureString&gt;</ph> instance","pos":[0,80],"source":"Release the memory allocated to the <xref:System.Security.SecureString> instance"},{"content":"Because <ph id=\"ph1\">&lt;xref:System.Security.SecureString&gt;</ph> implements the <ph id=\"ph2\">&lt;xref:System.IDisposable&gt;</ph> interface, you release its memory by calling the <ph id=\"ph3\">&lt;xref:System.Security.SecureString.Dispose%2A&gt;</ph> method.","pos":[84,272],"source":"Because <xref:System.Security.SecureString> implements the <xref:System.IDisposable> interface, you release its memory by calling the <xref:System.Security.SecureString.Dispose%2A> method."}]},{"pos":[5707,6230],"content":"The <xref:System.Security.SecureString> class has no members that inspect, compare, or convert the value of a <xref:System.Security.SecureString>. The absence of such members helps protect the value of the instance from accidental or malicious exposure. Use appropriate members of the <xref:System.Runtime.InteropServices.Marshal?displayProperty=fullName> class, such as the <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A> method, to manipulate the value of a <xref:System.Security.SecureString> object.","nodes":[{"content":"The <xref:System.Security.SecureString> class has no members that inspect, compare, or convert the value of a <xref:System.Security.SecureString>. The absence of such members helps protect the value of the instance from accidental or malicious exposure. Use appropriate members of the <xref:System.Runtime.InteropServices.Marshal?displayProperty=fullName> class, such as the <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A> method, to manipulate the value of a <xref:System.Security.SecureString> object.","pos":[0,523],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.SecureString&gt;</ph> class has no members that inspect, compare, or convert the value of a <ph id=\"ph2\">&lt;xref:System.Security.SecureString&gt;</ph>.","pos":[0,146],"source":"The <xref:System.Security.SecureString> class has no members that inspect, compare, or convert the value of a <xref:System.Security.SecureString>."},{"content":"The absence of such members helps protect the value of the instance from accidental or malicious exposure.","pos":[147,253]},{"content":"Use appropriate members of the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal?displayProperty=fullName&gt;</ph> class, such as the <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A&gt;</ph> method, to manipulate the value of a <ph id=\"ph3\">&lt;xref:System.Security.SecureString&gt;</ph> object.","pos":[254,523],"source":" Use appropriate members of the <xref:System.Runtime.InteropServices.Marshal?displayProperty=fullName> class, such as the <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A> method, to manipulate the value of a <xref:System.Security.SecureString> object."}]}]},{"pos":[6237,6352],"content":"The .NET Framework Class Library commonly uses <xref:System.Security.SecureString> instances in the following ways:","nodes":[{"content":"The .NET Framework Class Library commonly uses <ph id=\"ph1\">&lt;xref:System.Security.SecureString&gt;</ph> instances in the following ways:","pos":[0,115],"source":"The .NET Framework Class Library commonly uses <xref:System.Security.SecureString> instances in the following ways:"}]},{"pos":[6362,6646],"content":"To provide password information to a process by using the <xref:System.Diagnostics.ProcessStartInfo> structure or by calling an overload of the <xref:System.Diagnostics.Process.Start%2A?displayProperty=fullName> method that has a parameter of type <xref:System.Security.SecureString>.","nodes":[{"content":"To provide password information to a process by using the <ph id=\"ph1\">&lt;xref:System.Diagnostics.ProcessStartInfo&gt;</ph> structure or by calling an overload of the <ph id=\"ph2\">&lt;xref:System.Diagnostics.Process.Start%2A?displayProperty=fullName&gt;</ph> method that has a parameter of type <ph id=\"ph3\">&lt;xref:System.Security.SecureString&gt;</ph>.","pos":[0,284],"source":"To provide password information to a process by using the <xref:System.Diagnostics.ProcessStartInfo> structure or by calling an overload of the <xref:System.Diagnostics.Process.Start%2A?displayProperty=fullName> method that has a parameter of type <xref:System.Security.SecureString>."}]},{"pos":[6656,6932],"content":"To provide network password information by calling a <xref:System.Net.NetworkCredential> class constructor that has a parameter of type <xref:System.Security.SecureString> or by using the <xref:System.Net.NetworkCredential.SecurePassword%2A?displayProperty=fullName> property.","nodes":[{"content":"To provide network password information by calling a <ph id=\"ph1\">&lt;xref:System.Net.NetworkCredential&gt;</ph> class constructor that has a parameter of type <ph id=\"ph2\">&lt;xref:System.Security.SecureString&gt;</ph> or by using the <ph id=\"ph3\">&lt;xref:System.Net.NetworkCredential.SecurePassword%2A?displayProperty=fullName&gt;</ph> property.","pos":[0,276],"source":"To provide network password information by calling a <xref:System.Net.NetworkCredential> class constructor that has a parameter of type <xref:System.Security.SecureString> or by using the <xref:System.Net.NetworkCredential.SecurePassword%2A?displayProperty=fullName> property."}]},{"pos":[6942,7230],"content":"To provide password information for SQL Server Authentication by calling the <xref:System.Data.SqlClient.SqlCredential.%23ctor%2A?displayProperty=fullName> constructor or retrieving the value of the <xref:System.Data.SqlClient.SqlCredential.Password%2A?displayProperty=fullName> property.","nodes":[{"content":"To provide password information for SQL Server Authentication by calling the <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlCredential.%23ctor%2A?displayProperty=fullName&gt;</ph> constructor or retrieving the value of the <ph id=\"ph2\">&lt;xref:System.Data.SqlClient.SqlCredential.Password%2A?displayProperty=fullName&gt;</ph> property.","pos":[0,288],"source":"To provide password information for SQL Server Authentication by calling the <xref:System.Data.SqlClient.SqlCredential.%23ctor%2A?displayProperty=fullName> constructor or retrieving the value of the <xref:System.Data.SqlClient.SqlCredential.Password%2A?displayProperty=fullName> property."}]},{"pos":[7240,7351],"content":"To pass a string to unmanaged code. For more information, see the [SecureString and interop](#interop) section.","nodes":[{"content":"To pass a string to unmanaged code.","pos":[0,35]},{"content":"For more information, see the <bpt id=\"p1\">[</bpt>SecureString and interop<ept id=\"p1\">](#interop)</ept> section.","pos":[36,111],"source":" For more information, see the [SecureString and interop](#interop) section."}]},{"pos":[7358,7377],"content":"<bpt id=\"p1\">[</bpt>Back to top<ept id=\"p1\">](#top)</ept>","source":"[Back to top](#top)"},{"pos":[7412,7436],"content":"SecureString and interop","linkify":"SecureString and interop","nodes":[{"content":"SecureString and interop","pos":[0,24]}]},{"pos":[7440,7771],"content":"Because the operating system does not  directly support <xref:System.Security.SecureString>, you must convert the value of the <xref:System.Security.SecureString> object to the required string type before passing the string to a native method.  The <xref:System.Runtime.InteropServices.Marshal> class has five methods that do this:","nodes":[{"content":"Because the operating system does not  directly support <xref:System.Security.SecureString>, you must convert the value of the <xref:System.Security.SecureString> object to the required string type before passing the string to a native method.  The <xref:System.Runtime.InteropServices.Marshal> class has five methods that do this:","pos":[0,331],"nodes":[{"content":"Because the operating system does not  directly support <ph id=\"ph1\">&lt;xref:System.Security.SecureString&gt;</ph>, you must convert the value of the <ph id=\"ph2\">&lt;xref:System.Security.SecureString&gt;</ph> object to the required string type before passing the string to a native method.","pos":[0,243],"source":"Because the operating system does not  directly support <xref:System.Security.SecureString>, you must convert the value of the <xref:System.Security.SecureString> object to the required string type before passing the string to a native method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> class has five methods that do this:","pos":[245,331],"source":"  The <xref:System.Runtime.InteropServices.Marshal> class has five methods that do this:"}]}]},{"pos":[7781,7987],"content":"<xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName>, which converts the <xref:System.Security.SecureString> string value to a binary string (BSTR) recognized by COM.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName&gt;</ph>, which converts the <ph id=\"ph2\">&lt;xref:System.Security.SecureString&gt;</ph> string value to a binary string (BSTR) recognized by COM.","pos":[0,206],"source":"<xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName>, which converts the <xref:System.Security.SecureString> string value to a binary string (BSTR) recognized by COM."}]},{"pos":[7997,8310],"content":"<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName> and <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName>, which copy the <xref:System.Security.SecureString> string value to an ANSI string in unmanaged memory.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName&gt;</ph>, which copy the <ph id=\"ph3\">&lt;xref:System.Security.SecureString&gt;</ph> string value to an ANSI string in unmanaged memory.","pos":[0,313],"source":"<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName> and <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName>, which copy the <xref:System.Security.SecureString> string value to an ANSI string in unmanaged memory."}]},{"pos":[8320,8639],"content":"<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName> and <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName>, which copy the <xref:System.Security.SecureString> string value to a Unicode string in unmanaged memory.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName&gt;</ph>, which copy the <ph id=\"ph3\">&lt;xref:System.Security.SecureString&gt;</ph> string value to a Unicode string in unmanaged memory.","pos":[0,319],"source":"<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName> and <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName>, which copy the <xref:System.Security.SecureString> string value to a Unicode string in unmanaged memory."}]},{"pos":[8646,8956],"content":"Each of these methods creates a clear-text string in unmanaged memory. It is the responsibility of the developer to zero out and free that memory as soon as it is no longer needed. Each of the string conversion and memory allocation methods has a corresponding method to zero out and free the allocated memory:","nodes":[{"content":"Each of these methods creates a clear-text string in unmanaged memory. It is the responsibility of the developer to zero out and free that memory as soon as it is no longer needed. Each of the string conversion and memory allocation methods has a corresponding method to zero out and free the allocated memory:","pos":[0,310],"nodes":[{"content":"Each of these methods creates a clear-text string in unmanaged memory.","pos":[0,70]},{"content":"It is the responsibility of the developer to zero out and free that memory as soon as it is no longer needed.","pos":[71,180]},{"content":"Each of the string conversion and memory allocation methods has a corresponding method to zero out and free the allocated memory:","pos":[181,310]}]}]},{"pos":[8963,8995],"content":"Allocation and conversion method","nodes":[{"content":"Allocation and conversion method","pos":[0,32]}]},{"pos":[8996,9016],"content":"Zero and free method","nodes":[{"content":"Zero and free method","pos":[0,20]}]},{"pos":[9091,9183],"content":"<xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName>","nodes":[]},{"pos":[9184,9270],"content":"<xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A?displayProperty=fullName>","nodes":[]},{"pos":[9275,9376],"content":"<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName>","nodes":[]},{"pos":[9377,9472],"content":"<xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A?displayProperty=fullName>","nodes":[]},{"pos":[9477,9581],"content":"<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName>","nodes":[]},{"pos":[9582,9680],"content":"<xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A?displayProperty=fullName>","nodes":[]},{"pos":[9685,9788],"content":"<xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName>","nodes":[]},{"pos":[9789,9886],"content":"<xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A?displayProperty=fullName>","nodes":[]},{"pos":[9891,9995],"content":"<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName>","nodes":[]},{"pos":[9996,10096],"content":"<xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A?displayProperty=fullName>","nodes":[]},{"pos":[10104,10123],"content":"<bpt id=\"p1\">[</bpt>Back to top<ept id=\"p1\">](#top)</ept>","source":"[Back to top](#top)"},{"pos":[10160,10187],"content":"How secure is SecureString?","linkify":"How secure is SecureString?","nodes":[{"content":"How secure is SecureString?","pos":[0,27]}]},{"pos":[10191,10947],"content":"When created properly, a <xref:System.Security.SecureString> instance provides more data protection than a <xref:System.String>. When creating a string from a character-at-a-time source, <xref:System.String> creates multiple intermediate in memory, whereas  <xref:System.Security.SecureString> creates just a single instance.  Garbage collection of <xref:System.String> objects  is non-deterministic. In addition, because its memory is not pinned, the garbage collector will make additional copies of <xref:System.String> values when moving and compacting memory. In contrast, the memory allocated to a <xref:System.Security.SecureString> object is pinned,  and that memory can be freed by calling the <xref:System.Security.SecureString.Dispose%2A> method.","nodes":[{"content":"When created properly, a <xref:System.Security.SecureString> instance provides more data protection than a <xref:System.String>. When creating a string from a character-at-a-time source, <xref:System.String> creates multiple intermediate in memory, whereas  <xref:System.Security.SecureString> creates just a single instance.  Garbage collection of <xref:System.String> objects  is non-deterministic. In addition, because its memory is not pinned, the garbage collector will make additional copies of <xref:System.String> values when moving and compacting memory. In contrast, the memory allocated to a <xref:System.Security.SecureString> object is pinned,  and that memory can be freed by calling the <xref:System.Security.SecureString.Dispose%2A> method.","pos":[0,756],"nodes":[{"content":"When created properly, a <ph id=\"ph1\">&lt;xref:System.Security.SecureString&gt;</ph> instance provides more data protection than a <ph id=\"ph2\">&lt;xref:System.String&gt;</ph>.","pos":[0,128],"source":"When created properly, a <xref:System.Security.SecureString> instance provides more data protection than a <xref:System.String>."},{"content":"When creating a string from a character-at-a-time source, <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> creates multiple intermediate in memory, whereas  <ph id=\"ph2\">&lt;xref:System.Security.SecureString&gt;</ph> creates just a single instance.","pos":[129,325],"source":" When creating a string from a character-at-a-time source, <xref:System.String> creates multiple intermediate in memory, whereas  <xref:System.Security.SecureString> creates just a single instance."},{"content":"Garbage collection of <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> objects  is non-deterministic.","pos":[327,400],"source":"  Garbage collection of <xref:System.String> objects  is non-deterministic."},{"content":"In addition, because its memory is not pinned, the garbage collector will make additional copies of <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> values when moving and compacting memory.","pos":[401,563],"source":" In addition, because its memory is not pinned, the garbage collector will make additional copies of <xref:System.String> values when moving and compacting memory."},{"content":"In contrast, the memory allocated to a <ph id=\"ph1\">&lt;xref:System.Security.SecureString&gt;</ph> object is pinned,  and that memory can be freed by calling the <ph id=\"ph2\">&lt;xref:System.Security.SecureString.Dispose%2A&gt;</ph> method.","pos":[564,756],"source":" In contrast, the memory allocated to a <xref:System.Security.SecureString> object is pinned,  and that memory can be freed by calling the <xref:System.Security.SecureString.Dispose%2A> method."}]}]},{"pos":[10954,11206],"content":"Although data stored in a <xref:System.Security.SecureString> instance is more secure than data stored in a <xref:System.String> instance, there are significant limitations on how secure a <xref:System.Security.SecureString> instance is. These include:","nodes":[{"content":"Although data stored in a <xref:System.Security.SecureString> instance is more secure than data stored in a <xref:System.String> instance, there are significant limitations on how secure a <xref:System.Security.SecureString> instance is. These include:","pos":[0,252],"nodes":[{"content":"Although data stored in a <ph id=\"ph1\">&lt;xref:System.Security.SecureString&gt;</ph> instance is more secure than data stored in a <ph id=\"ph2\">&lt;xref:System.String&gt;</ph> instance, there are significant limitations on how secure a <ph id=\"ph3\">&lt;xref:System.Security.SecureString&gt;</ph> instance is.","pos":[0,237],"source":"Although data stored in a <xref:System.Security.SecureString> instance is more secure than data stored in a <xref:System.String> instance, there are significant limitations on how secure a <xref:System.Security.SecureString> instance is."},{"content":"These include:","pos":[238,252]}]}]},{"pos":[11213,11590],"content":"Platform  \n On the Windows operating system, the contents of a <xref:System.Security.SecureString> instance's internal character array is encrypted. However, whether because of missing APIs or key management issues,  encryption is not available on all platforms. Because of this, <xref:System.Security.SecureString> is available on Desktop (Windows only), and not on .NET Core.","nodes":[{"content":"Platform","pos":[0,8]},{"content":"On the Windows operating system, the contents of a <xref:System.Security.SecureString> instance's internal character array is encrypted. However, whether because of missing APIs or key management issues,  encryption is not available on all platforms. Because of this, <xref:System.Security.SecureString> is available on Desktop (Windows only), and not on .NET Core.","pos":[12,377],"nodes":[{"content":"On the Windows operating system, the contents of a <ph id=\"ph1\">&lt;xref:System.Security.SecureString&gt;</ph> instance's internal character array is encrypted.","pos":[0,136],"source":"On the Windows operating system, the contents of a <xref:System.Security.SecureString> instance's internal character array is encrypted."},{"content":"However, whether because of missing APIs or key management issues,  encryption is not available on all platforms.","pos":[137,250]},{"content":"Because of this, <ph id=\"ph1\">&lt;xref:System.Security.SecureString&gt;</ph> is available on Desktop (Windows only), and not on .NET Core.","pos":[251,365],"source":" Because of this, <xref:System.Security.SecureString> is available on Desktop (Windows only), and not on .NET Core."}]}]},{"pos":[11597,11821],"content":"Duration  \n Even if the <xref:System.Security.SecureString> implementation is able to take advantage of encryption, the plain text assigned to the <xref:System.Security.SecureString> instance may be exposed at various times:","nodes":[{"content":"Duration","pos":[0,8]},{"content":"Even if the <ph id=\"ph1\">&lt;xref:System.Security.SecureString&gt;</ph> implementation is able to take advantage of encryption, the plain text assigned to the <ph id=\"ph2\">&lt;xref:System.Security.SecureString&gt;</ph> instance may be exposed at various times:","pos":[12,224],"source":"Even if the <xref:System.Security.SecureString> implementation is able to take advantage of encryption, the plain text assigned to the <xref:System.Security.SecureString> instance may be exposed at various times:"}]},{"pos":[11831,12039],"content":"Because Windows doesn't offer a secure string implementation at the operating system level, the .NET Framework still has to convert the secure string value to its plain text representation in order to use it.","nodes":[{"content":"Because Windows doesn't offer a secure string implementation at the operating system level, the .NET Framework still has to convert the secure string value to its plain text representation in order to use it.","pos":[0,208]}]},{"pos":[12049,12316],"content":"Whenever the value of the secure string is modified by methods such as <xref:System.Security.SecureString.AppendChar%2A> or <xref:System.Security.SecureString.RemoveAt%2A>, it must be decrypted (i.e., converted back to plain text), modified, and then encrypted again.","nodes":[{"content":"Whenever the value of the secure string is modified by methods such as <ph id=\"ph1\">&lt;xref:System.Security.SecureString.AppendChar%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Security.SecureString.RemoveAt%2A&gt;</ph>, it must be decrypted (i.e., converted back to plain text), modified, and then encrypted again.","pos":[0,267],"source":"Whenever the value of the secure string is modified by methods such as <xref:System.Security.SecureString.AppendChar%2A> or <xref:System.Security.SecureString.RemoveAt%2A>, it must be decrypted (i.e., converted back to plain text), modified, and then encrypted again."}]},{"pos":[12326,12535],"content":"If the secure string is used in an interop call, it must be converted to an ANSI string, a Unicode string, or a binary string (BSTR). For more information, see the [SecureString and interop](#interop) section.","nodes":[{"content":"If the secure string is used in an interop call, it must be converted to an ANSI string, a Unicode string, or a binary string (BSTR).","pos":[0,133]},{"content":"For more information, see the <bpt id=\"p1\">[</bpt>SecureString and interop<ept id=\"p1\">](#interop)</ept> section.","pos":[134,209],"source":" For more information, see the [SecureString and interop](#interop) section."}]},{"pos":[12542,12707],"content":"The time interval for which the <xref:System.Security.SecureString> instance's value is exposed  is merely shortened in comparison to the <xref:System.String> class.","nodes":[{"content":"The time interval for which the <ph id=\"ph1\">&lt;xref:System.Security.SecureString&gt;</ph> instance's value is exposed  is merely shortened in comparison to the <ph id=\"ph2\">&lt;xref:System.String&gt;</ph> class.","pos":[0,165],"source":"The time interval for which the <xref:System.Security.SecureString> instance's value is exposed  is merely shortened in comparison to the <xref:System.String> class."}]},{"pos":[12714,13206],"content":"Storage versus usage  \nMore generally, the <xref:System.Security.SecureString> class defines a storage mechanism for string values that should be protected or kept confidential. However, outside of the .NET Framework itself, no usage mechanism supports <xref:System.Security.SecureString>. This means that the secure string must be converted to a usable form (typically a clear text form) that can be recognized by its target, and     that decryption and conversion must occur in user space.","leadings":[""," "],"nodes":[{"content":"Storage versus usage","pos":[0,20]},{"content":"More generally, the <xref:System.Security.SecureString> class defines a storage mechanism for string values that should be protected or kept confidential. However, outside of the .NET Framework itself, no usage mechanism supports <xref:System.Security.SecureString>. This means that the secure string must be converted to a usable form (typically a clear text form) that can be recognized by its target, and     that decryption and conversion must occur in user space.","pos":[23,491],"nodes":[{"content":"More generally, the <ph id=\"ph1\">&lt;xref:System.Security.SecureString&gt;</ph> class defines a storage mechanism for string values that should be protected or kept confidential.","pos":[0,154],"source":"More generally, the <xref:System.Security.SecureString> class defines a storage mechanism for string values that should be protected or kept confidential."},{"content":"However, outside of the .NET Framework itself, no usage mechanism supports <ph id=\"ph1\">&lt;xref:System.Security.SecureString&gt;</ph>.","pos":[155,266],"source":" However, outside of the .NET Framework itself, no usage mechanism supports <xref:System.Security.SecureString>."},{"content":"This means that the secure string must be converted to a usable form (typically a clear text form) that can be recognized by its target, and     that decryption and conversion must occur in user space.","pos":[267,468]}]}]},{"pos":[13213,13747],"content":"Overall, <xref:System.Security.SecureString> is more secure than <xref:System.String> because it limits the exposure of sensitive string data. However, those strings may still be exposed to any process or operation that has access to raw memory, such as a malicious process running on the host computer, a process dump, or a user-viewable swap file. Instead of using <xref:System.Security.SecureString> to protect passwords, the recommended alternative is to use an opaque handle to credentials that are stored outside of the process.","nodes":[{"content":"Overall, <xref:System.Security.SecureString> is more secure than <xref:System.String> because it limits the exposure of sensitive string data. However, those strings may still be exposed to any process or operation that has access to raw memory, such as a malicious process running on the host computer, a process dump, or a user-viewable swap file. Instead of using <xref:System.Security.SecureString> to protect passwords, the recommended alternative is to use an opaque handle to credentials that are stored outside of the process.","pos":[0,534],"nodes":[{"content":"Overall, <ph id=\"ph1\">&lt;xref:System.Security.SecureString&gt;</ph> is more secure than <ph id=\"ph2\">&lt;xref:System.String&gt;</ph> because it limits the exposure of sensitive string data.","pos":[0,142],"source":"Overall, <xref:System.Security.SecureString> is more secure than <xref:System.String> because it limits the exposure of sensitive string data."},{"content":"However, those strings may still be exposed to any process or operation that has access to raw memory, such as a malicious process running on the host computer, a process dump, or a user-viewable swap file.","pos":[143,349]},{"content":"Instead of using <ph id=\"ph1\">&lt;xref:System.Security.SecureString&gt;</ph> to protect passwords, the recommended alternative is to use an opaque handle to credentials that are stored outside of the process.","pos":[350,534],"source":" Instead of using <xref:System.Security.SecureString> to protect passwords, the recommended alternative is to use an opaque handle to credentials that are stored outside of the process."}]}]},{"pos":[13754,13773],"content":"<bpt id=\"p1\">[</bpt>Back to top<ept id=\"p1\">](#top)</ept>","source":"[Back to top](#top)"}],"pos":[1182,15080],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Security.SecureString\"></xref> class.","nodes":[{"pos":[0,90],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.SecureString\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Security.SecureString\"></xref> class."}],"pos":[17236,17327],"yaml":true},{"content":"An error occurred while protecting or unprotecting the value of this instance.","nodes":[{"pos":[0,78],"content":"An error occurred while protecting or unprotecting the value of this instance.","nodes":[{"content":"An error occurred while protecting or unprotecting the value of this instance.","pos":[0,78]}]}],"pos":[18931,19010],"yaml":true},{"content":"This operation is not supported on this platform.","nodes":[{"pos":[0,49],"content":"This operation is not supported on this platform.","nodes":[{"content":"This operation is not supported on this platform.","pos":[0,49]}]}],"pos":[19112,19162],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Security.SecureString\"></xref> class from a subarray of <xref href=\"System.Char\"></xref> objects.  \n  \n This constructor is not CLS-compliant. The CLS-compliant alternative is <xref href=\"System.Security.SecureString.#ctor\"></xref>.","nodes":[{"pos":[0,150],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.SecureString\"&gt;&lt;/xref&gt;</ph> class from a subarray of <ph id=\"ph2\">&lt;xref href=\"System.Char\"&gt;&lt;/xref&gt;</ph> objects.","source":"Initializes a new instance of the <xref href=\"System.Security.SecureString\"></xref> class from a subarray of <xref href=\"System.Char\"></xref> objects."},{"pos":[157,285],"content":"This constructor is not CLS-compliant. The CLS-compliant alternative is <xref href=\"System.Security.SecureString.#ctor\"></xref>.","nodes":[{"content":"This constructor is not CLS-compliant.","pos":[0,38]},{"content":"The CLS-compliant alternative is <ph id=\"ph1\">&lt;xref href=\"System.Security.SecureString.#ctor\"&gt;&lt;/xref&gt;</ph>.","pos":[39,128],"source":" The CLS-compliant alternative is <xref href=\"System.Security.SecureString.#ctor\"></xref>."}]}],"pos":[20511,20807],"yaml":true},{"content":"This constructor initializes the new <xref:System.Security.SecureString> object to the number of characters in `value` specified by `length`; the value of the instance is then encrypted.  \n  \n In C#, this constructor is defined only in the context of unsafe code.","nodes":[{"pos":[0,186],"content":"This constructor initializes the new <ph id=\"ph1\">&lt;xref:System.Security.SecureString&gt;</ph> object to the number of characters in <ph id=\"ph2\">`value`</ph> specified by <ph id=\"ph3\">`length`</ph>; the value of the instance is then encrypted.","source":"This constructor initializes the new <xref:System.Security.SecureString> object to the number of characters in `value` specified by `length`; the value of the instance is then encrypted."},{"pos":[193,263],"content":"In C#, this constructor is defined only in the context of unsafe code.","nodes":[{"content":"In C#, this constructor is defined only in the context of unsafe code.","pos":[0,70]}]}],"pos":[20818,21086],"yaml":true,"extradata":"MT"},{"content":"A pointer to an array of <xref href=\"System.Char\"></xref> objects.","nodes":[{"pos":[0,66],"content":"A pointer to an array of <ph id=\"ph1\">&lt;xref href=\"System.Char\"&gt;&lt;/xref&gt;</ph> objects.","source":"A pointer to an array of <xref href=\"System.Char\"></xref> objects."}],"pos":[21747,21814],"yaml":true},{"content":"The number of elements of <code>value</code> to include in the new instance.","nodes":[{"pos":[0,76],"content":"The number of elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> to include in the new instance.","source":"The number of elements of <code>value</code> to include in the new instance."}],"pos":[21875,21952],"yaml":true},{"content":"<code>value</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[22116,22146],"yaml":true},{"content":"<code>length</code> is less than zero or greater than 65,536.","nodes":[{"pos":[0,61],"content":"<ph id=\"ph1\">&lt;code&gt;length&lt;/code&gt;</ph> is less than zero or greater than 65,536.","source":"<code>length</code> is less than zero or greater than 65,536."}],"pos":[22260,22322],"yaml":true},{"content":"An error occurred while protecting or unprotecting the value of this secure string.","nodes":[{"pos":[0,83],"content":"An error occurred while protecting or unprotecting the value of this secure string.","nodes":[{"content":"An error occurred while protecting or unprotecting the value of this secure string.","pos":[0,83]}]}],"pos":[22470,22554],"yaml":true},{"content":"This operation is not supported on this platform.","nodes":[{"pos":[0,49],"content":"This operation is not supported on this platform.","nodes":[{"content":"This operation is not supported on this platform.","pos":[0,49]}]}],"pos":[22656,22706],"yaml":true},{"content":"Appends a character to the end of the current secure string.","nodes":[{"pos":[0,60],"content":"Appends a character to the end of the current secure string.","nodes":[{"content":"Appends a character to the end of the current secure string.","pos":[0,60]}]}],"pos":[24044,24105],"yaml":true},{"content":"If the implementation uses a protection mechanism, such as encryption, the value of this secure string, if any, is unprotected; `c` is appended; then the new value of the secure string is re-protected.","nodes":[{"pos":[0,201],"content":"If the implementation uses a protection mechanism, such as encryption, the value of this secure string, if any, is unprotected; <ph id=\"ph1\">`c`</ph> is appended; then the new value of the secure string is re-protected.","source":"If the implementation uses a protection mechanism, such as encryption, the value of this secure string, if any, is unprotected; `c` is appended; then the new value of the secure string is re-protected."}],"pos":[24116,24318],"yaml":true,"extradata":"MT"},{"content":"A character to append to this secure string.","nodes":[{"pos":[0,44],"content":"A character to append to this secure string.","nodes":[{"content":"A character to append to this secure string.","pos":[0,44]}]}],"pos":[25830,25875],"yaml":true},{"content":"This secure string has already been disposed.","nodes":[{"pos":[0,45],"content":"This secure string has already been disposed.","nodes":[{"content":"This secure string has already been disposed.","pos":[0,45]}]}],"pos":[26048,26094],"yaml":true},{"content":"This secure string is read-only.","nodes":[{"pos":[0,32],"content":"This secure string is read-only.","nodes":[{"content":"This secure string is read-only.","pos":[0,32]}]}],"pos":[26204,26237],"yaml":true},{"content":"Performing this operation would make the length of this secure string greater than 65,536 characters.","nodes":[{"pos":[0,101],"content":"Performing this operation would make the length of this secure string greater than 65,536 characters.","nodes":[{"content":"Performing this operation would make the length of this secure string greater than 65,536 characters.","pos":[0,101]}]}],"pos":[26351,26453],"yaml":true},{"content":"An error occurred while protecting or unprotecting the value of this secure string.","nodes":[{"pos":[0,83],"content":"An error occurred while protecting or unprotecting the value of this secure string.","nodes":[{"content":"An error occurred while protecting or unprotecting the value of this secure string.","pos":[0,83]}]}],"pos":[26601,26685],"yaml":true},{"content":"Deletes the value of the current secure string.","nodes":[{"pos":[0,47],"content":"Deletes the value of the current secure string.","nodes":[{"content":"Deletes the value of the current secure string.","pos":[0,47]}]}],"pos":[27993,28041],"yaml":true},{"content":"The computer memory that contains the value of this secure string is zeroed, then the length of the value of this secure string is set to zero.","nodes":[{"pos":[0,143],"content":"The computer memory that contains the value of this secure string is zeroed, then the length of the value of this secure string is set to zero.","nodes":[{"content":"The computer memory that contains the value of this secure string is zeroed, then the length of the value of this secure string is set to zero.","pos":[0,143]}]}],"pos":[28052,28196],"yaml":true,"extradata":"MT"},{"content":"This secure string has already been disposed.","nodes":[{"pos":[0,45],"content":"This secure string has already been disposed.","nodes":[{"content":"This secure string has already been disposed.","pos":[0,45]}]}],"pos":[29149,29195],"yaml":true},{"content":"This secure string is read-only.","nodes":[{"pos":[0,32],"content":"This secure string is read-only.","nodes":[{"content":"This secure string is read-only.","pos":[0,32]}]}],"pos":[29305,29338],"yaml":true},{"content":"Creates a copy of the current secure string.","nodes":[{"pos":[0,44],"content":"Creates a copy of the current secure string.","nodes":[{"content":"Creates a copy of the current secure string.","pos":[0,44]}]}],"pos":[30536,30581],"yaml":true},{"content":"If an instance of a <xref:System.Security.SecureString> is marked read-only, the copy of that instance will not be read-only.","nodes":[{"pos":[0,125],"content":"If an instance of a <xref:System.Security.SecureString> is marked read-only, the copy of that instance will not be read-only.","nodes":[{"content":"If an instance of a <ph id=\"ph1\">&lt;xref:System.Security.SecureString&gt;</ph> is marked read-only, the copy of that instance will not be read-only.","pos":[0,125],"source":"If an instance of a <xref:System.Security.SecureString> is marked read-only, the copy of that instance will not be read-only."}]}],"pos":[30592,30718],"yaml":true,"extradata":"MT"},{"content":"A duplicate of this secure string.","nodes":[{"pos":[0,34],"content":"A duplicate of this secure string.","nodes":[{"content":"A duplicate of this secure string.","pos":[0,34]}]}],"pos":[30877,30912],"yaml":true},{"content":"This secure string has already been disposed.","nodes":[{"pos":[0,45],"content":"This secure string has already been disposed.","nodes":[{"content":"This secure string has already been disposed.","pos":[0,45]}]}],"pos":[31079,31125],"yaml":true},{"content":"An error occurred while protecting or unprotecting the value of this secure string.","nodes":[{"pos":[0,83],"content":"An error occurred while protecting or unprotecting the value of this secure string.","nodes":[{"content":"An error occurred while protecting or unprotecting the value of this secure string.","pos":[0,83]}]}],"pos":[31273,31357],"yaml":true},{"content":"Releases all resources used by the current <xref href=\"System.Security.SecureString\"></xref> object.","nodes":[{"pos":[0,100],"content":"Releases all resources used by the current <ph id=\"ph1\">&lt;xref href=\"System.Security.SecureString\"&gt;&lt;/xref&gt;</ph> object.","source":"Releases all resources used by the current <xref href=\"System.Security.SecureString\"></xref> object."}],"pos":[32573,32674],"yaml":true},{"content":"The <xref:System.Security.SecureString.Dispose%2A> method writes binary zeroes to the allocated memory that contains the value of this <xref:System.Security.SecureString> object, then frees the allocated memory.  \n  \n For more information, see [Garbage Collection](http://msdn.microsoft.com/library/22b6cb97-0c80-4eeb-a2cf-5ed7655e37f9).","nodes":[{"pos":[0,211],"content":"The <xref:System.Security.SecureString.Dispose%2A> method writes binary zeroes to the allocated memory that contains the value of this <xref:System.Security.SecureString> object, then frees the allocated memory.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.SecureString.Dispose%2A&gt;</ph> method writes binary zeroes to the allocated memory that contains the value of this <ph id=\"ph2\">&lt;xref:System.Security.SecureString&gt;</ph> object, then frees the allocated memory.","pos":[0,211],"source":"The <xref:System.Security.SecureString.Dispose%2A> method writes binary zeroes to the allocated memory that contains the value of this <xref:System.Security.SecureString> object, then frees the allocated memory."}]},{"pos":[218,337],"content":"For more information, see <bpt id=\"p1\">[</bpt>Garbage Collection<ept id=\"p1\">](http://msdn.microsoft.com/library/22b6cb97-0c80-4eeb-a2cf-5ed7655e37f9)</ept>.","source":"For more information, see [Garbage Collection](http://msdn.microsoft.com/library/22b6cb97-0c80-4eeb-a2cf-5ed7655e37f9)."}],"pos":[32685,33027],"yaml":true,"extradata":"MT"},{"content":"Inserts a character in this secure string at the specified index position.","nodes":[{"pos":[0,74],"content":"Inserts a character in this secure string at the specified index position.","nodes":[{"content":"Inserts a character in this secure string at the specified index position.","pos":[0,74]}]}],"pos":[34493,34568],"yaml":true},{"content":"The index is zero-based; the first character in this secure string is at index position zero.  \n  \n If the implementation uses a protection mechanism, such as encryption, the value of the secure string, if any, is unprotected; `c` is inserted at the specified index position; then the new value is re-protected. The <xref:System.Security.SecureString.InsertAt%2A> method yields the same results as the <xref:System.Security.SecureString.AppendChar%2A> method, which inserts a character at the end of a secure string, if the `index` parameter of <xref:System.Security.SecureString.InsertAt%2A> is set to the length of this instance.","nodes":[{"pos":[0,93],"content":"The index is zero-based; the first character in this secure string is at index position zero.","nodes":[{"content":"The index is zero-based; the first character in this secure string is at index position zero.","pos":[0,93]}]},{"pos":[100,631],"content":"If the implementation uses a protection mechanism, such as encryption, the value of the secure string, if any, is unprotected; `c` is inserted at the specified index position; then the new value is re-protected. The <xref:System.Security.SecureString.InsertAt%2A> method yields the same results as the <xref:System.Security.SecureString.AppendChar%2A> method, which inserts a character at the end of a secure string, if the `index` parameter of <xref:System.Security.SecureString.InsertAt%2A> is set to the length of this instance.","nodes":[{"content":"If the implementation uses a protection mechanism, such as encryption, the value of the secure string, if any, is unprotected; <ph id=\"ph1\">`c`</ph> is inserted at the specified index position; then the new value is re-protected.","pos":[0,211],"source":"If the implementation uses a protection mechanism, such as encryption, the value of the secure string, if any, is unprotected; `c` is inserted at the specified index position; then the new value is re-protected."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.SecureString.InsertAt%2A&gt;</ph> method yields the same results as the <ph id=\"ph2\">&lt;xref:System.Security.SecureString.AppendChar%2A&gt;</ph> method, which inserts a character at the end of a secure string, if the <ph id=\"ph3\">`index`</ph> parameter of <ph id=\"ph4\">&lt;xref:System.Security.SecureString.InsertAt%2A&gt;</ph> is set to the length of this instance.","pos":[212,531],"source":" The <xref:System.Security.SecureString.InsertAt%2A> method yields the same results as the <xref:System.Security.SecureString.AppendChar%2A> method, which inserts a character at the end of a secure string, if the `index` parameter of <xref:System.Security.SecureString.InsertAt%2A> is set to the length of this instance."}]}],"pos":[34579,35215],"yaml":true,"extradata":"MT"},{"content":"The index position where parameter <code>c</code> is inserted.","nodes":[{"pos":[0,62],"content":"The index position where parameter <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">c</ph><ept id=\"p1\">&lt;/code&gt;</ept> is inserted.","source":"The index position where parameter <code>c</code> is inserted."}],"pos":[36166,36229],"yaml":true},{"content":"The character to insert.","nodes":[{"pos":[0,24],"content":"The character to insert.","nodes":[{"content":"The character to insert.","pos":[0,24]}]}],"pos":[36284,36309],"yaml":true},{"content":"This secure string has already been disposed.","nodes":[{"pos":[0,45],"content":"This secure string has already been disposed.","nodes":[{"content":"This secure string has already been disposed.","pos":[0,45]}]}],"pos":[36480,36526],"yaml":true},{"content":"This secure string is read-only.","nodes":[{"pos":[0,32],"content":"This secure string is read-only.","nodes":[{"content":"This secure string is read-only.","pos":[0,32]}]}],"pos":[36636,36669],"yaml":true},{"content":"<code>index</code> is less than zero, or greater than the length of this secure string.  \n  \n -or-  \n  \n Performing this operation would make the length of this secure string greater than 65,536 characters.","nodes":[{"pos":[0,87],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero, or greater than the length of this secure string.","source":"<code>index</code> is less than zero, or greater than the length of this secure string."},{"pos":[94,98],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[105,206],"content":"Performing this operation would make the length of this secure string greater than 65,536 characters.","nodes":[{"content":"Performing this operation would make the length of this secure string greater than 65,536 characters.","pos":[0,101]}]}],"pos":[36783,36996],"yaml":true},{"content":"An error occurred while protecting or unprotecting the value of this secure string.","nodes":[{"pos":[0,83],"content":"An error occurred while protecting or unprotecting the value of this secure string.","nodes":[{"content":"An error occurred while protecting or unprotecting the value of this secure string.","pos":[0,83]}]}],"pos":[37144,37228],"yaml":true},{"content":"Indicates whether this secure string is marked read-only.","nodes":[{"pos":[0,57],"content":"Indicates whether this secure string is marked read-only.","nodes":[{"content":"Indicates whether this secure string is marked read-only.","pos":[0,57]}]}],"pos":[38566,38624],"yaml":true},{"content":"After an instance of <xref:System.Security.SecureString> is marked read-only by the <xref:System.Security.SecureString.MakeReadOnly%2A> method, any attempt to modify the value of the instance throws an <xref:System.InvalidOperationException>. Use the <xref:System.Security.SecureString.IsReadOnly%2A> method to test whether a <xref:System.Security.SecureString> is read-only before attempting to modify it.","nodes":[{"pos":[0,406],"content":"After an instance of <xref:System.Security.SecureString> is marked read-only by the <xref:System.Security.SecureString.MakeReadOnly%2A> method, any attempt to modify the value of the instance throws an <xref:System.InvalidOperationException>. Use the <xref:System.Security.SecureString.IsReadOnly%2A> method to test whether a <xref:System.Security.SecureString> is read-only before attempting to modify it.","nodes":[{"content":"After an instance of <xref:System.Security.SecureString> is marked read-only by the <xref:System.Security.SecureString.MakeReadOnly%2A> method, any attempt to modify the value of the instance throws an <xref:System.InvalidOperationException>. Use the <xref:System.Security.SecureString.IsReadOnly%2A> method to test whether a <xref:System.Security.SecureString> is read-only before attempting to modify it.","pos":[0,406],"nodes":[{"content":"After an instance of <ph id=\"ph1\">&lt;xref:System.Security.SecureString&gt;</ph> is marked read-only by the <ph id=\"ph2\">&lt;xref:System.Security.SecureString.MakeReadOnly%2A&gt;</ph> method, any attempt to modify the value of the instance throws an <ph id=\"ph3\">&lt;xref:System.InvalidOperationException&gt;</ph>.","pos":[0,242],"source":"After an instance of <xref:System.Security.SecureString> is marked read-only by the <xref:System.Security.SecureString.MakeReadOnly%2A> method, any attempt to modify the value of the instance throws an <xref:System.InvalidOperationException>."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Security.SecureString.IsReadOnly%2A&gt;</ph> method to test whether a <ph id=\"ph2\">&lt;xref:System.Security.SecureString&gt;</ph> is read-only before attempting to modify it.","pos":[243,406],"source":" Use the <xref:System.Security.SecureString.IsReadOnly%2A> method to test whether a <xref:System.Security.SecureString> is read-only before attempting to modify it."}]}]}],"pos":[38635,39042],"yaml":true,"extradata":"MT"},{"content":"`true` if this secure string is marked read-only; otherwise, `false`.","nodes":[{"pos":[0,69],"content":"<ph id=\"ph1\">`true`</ph> if this secure string is marked read-only; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if this secure string is marked read-only; otherwise, `false`."}],"pos":[39169,39241],"yaml":true},{"content":"This secure string has already been disposed.","nodes":[{"pos":[0,45],"content":"This secure string has already been disposed.","nodes":[{"content":"This secure string has already been disposed.","pos":[0,45]}]}],"pos":[39414,39460],"yaml":true},{"content":"Gets the number of characters in the current secure string.","nodes":[{"pos":[0,59],"content":"Gets the number of characters in the current secure string.","nodes":[{"content":"Gets the number of characters in the current secure string.","pos":[0,59]}]}],"pos":[40666,40726],"yaml":true},{"content":"The <xref:System.Security.SecureString.Length%2A> property returns the number of <xref:System.Char> objects in this instance, not the number of Unicode characters. A Unicode character might be represented by more than one <xref:System.Char> object.  \n  \n The maximum length of a <xref:System.Security.SecureString> instance is 65,536 characters.","nodes":[{"pos":[0,248],"content":"The <xref:System.Security.SecureString.Length%2A> property returns the number of <xref:System.Char> objects in this instance, not the number of Unicode characters. A Unicode character might be represented by more than one <xref:System.Char> object.","nodes":[{"content":"The <xref:System.Security.SecureString.Length%2A> property returns the number of <xref:System.Char> objects in this instance, not the number of Unicode characters. A Unicode character might be represented by more than one <xref:System.Char> object.","pos":[0,248],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.SecureString.Length%2A&gt;</ph> property returns the number of <ph id=\"ph2\">&lt;xref:System.Char&gt;</ph> objects in this instance, not the number of Unicode characters.","pos":[0,163],"source":"The <xref:System.Security.SecureString.Length%2A> property returns the number of <xref:System.Char> objects in this instance, not the number of Unicode characters."},{"content":"A Unicode character might be represented by more than one <ph id=\"ph1\">&lt;xref:System.Char&gt;</ph> object.","pos":[164,248],"source":" A Unicode character might be represented by more than one <xref:System.Char> object."}]}]},{"pos":[255,345],"content":"The maximum length of a <xref:System.Security.SecureString> instance is 65,536 characters.","nodes":[{"content":"The maximum length of a <ph id=\"ph1\">&lt;xref:System.Security.SecureString&gt;</ph> instance is 65,536 characters.","pos":[0,90],"source":"The maximum length of a <xref:System.Security.SecureString> instance is 65,536 characters."}]}],"pos":[40737,41087],"yaml":true,"extradata":"MT"},{"content":"The number of <xref href=\"System.Char\"></xref> objects in this secure string.","nodes":[{"pos":[0,77],"content":"The number of <ph id=\"ph1\">&lt;xref href=\"System.Char\"&gt;&lt;/xref&gt;</ph> objects in this secure string.","source":"The number of <xref href=\"System.Char\"></xref> objects in this secure string."}],"pos":[41193,41271],"yaml":true},{"content":"This secure string has already been disposed.","nodes":[{"pos":[0,45],"content":"This secure string has already been disposed.","nodes":[{"content":"This secure string has already been disposed.","pos":[0,45]}]}],"pos":[41440,41486],"yaml":true},{"content":"Makes the text value of this secure string read-only.","nodes":[{"pos":[0,53],"content":"Makes the text value of this secure string read-only.","nodes":[{"content":"Makes the text value of this secure string read-only.","pos":[0,53]}]}],"pos":[42732,42786],"yaml":true},{"content":"Initialize the text value of an instance of the <xref:System.Security.SecureString> class with the <xref:System.Security.SecureString.%23ctor%2A> constructors, and modify the value with the <xref:System.Security.SecureString.Clear%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, <xref:System.Security.SecureString.InsertAt%2A>, and <xref:System.Security.SecureString.AppendChar%2A> methods.  \n  \n After you have made your final modifications, use the <xref:System.Security.SecureString.MakeReadOnly%2A> method to make the value of the instance immutable (read-only). After the value is marked as read-only, any further attempt to modify it throws an <xref:System.InvalidOperationException>.  \n  \n The effect of invoking <xref:System.Security.SecureString.MakeReadOnly%2A> is permanent because the <xref:System.Security.SecureString> class provides no means to make the secure string modifiable again. Use the <xref:System.Security.SecureString.IsReadOnly%2A> method to test whether an instance of <xref:System.Security.SecureString> is read-only.","nodes":[{"pos":[0,442],"content":"Initialize the text value of an instance of the <xref:System.Security.SecureString> class with the <xref:System.Security.SecureString.%23ctor%2A> constructors, and modify the value with the <xref:System.Security.SecureString.Clear%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, <xref:System.Security.SecureString.InsertAt%2A>, and <xref:System.Security.SecureString.AppendChar%2A> methods.","nodes":[{"content":"Initialize the text value of an instance of the <ph id=\"ph1\">&lt;xref:System.Security.SecureString&gt;</ph> class with the <ph id=\"ph2\">&lt;xref:System.Security.SecureString.%23ctor%2A&gt;</ph> constructors, and modify the value with the <ph id=\"ph3\">&lt;xref:System.Security.SecureString.Clear%2A&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Security.SecureString.RemoveAt%2A&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.Security.SecureString.SetAt%2A&gt;</ph>, <ph id=\"ph6\">&lt;xref:System.Security.SecureString.InsertAt%2A&gt;</ph>, and <ph id=\"ph7\">&lt;xref:System.Security.SecureString.AppendChar%2A&gt;</ph> methods.","pos":[0,442],"source":"Initialize the text value of an instance of the <xref:System.Security.SecureString> class with the <xref:System.Security.SecureString.%23ctor%2A> constructors, and modify the value with the <xref:System.Security.SecureString.Clear%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, <xref:System.Security.SecureString.InsertAt%2A>, and <xref:System.Security.SecureString.AppendChar%2A> methods."}]},{"pos":[449,742],"content":"After you have made your final modifications, use the <xref:System.Security.SecureString.MakeReadOnly%2A> method to make the value of the instance immutable (read-only). After the value is marked as read-only, any further attempt to modify it throws an <xref:System.InvalidOperationException>.","nodes":[{"content":"After you have made your final modifications, use the <xref:System.Security.SecureString.MakeReadOnly%2A> method to make the value of the instance immutable (read-only). After the value is marked as read-only, any further attempt to modify it throws an <xref:System.InvalidOperationException>.","pos":[0,293],"nodes":[{"content":"After you have made your final modifications, use the <ph id=\"ph1\">&lt;xref:System.Security.SecureString.MakeReadOnly%2A&gt;</ph> method to make the value of the instance immutable (read-only).","pos":[0,169],"source":"After you have made your final modifications, use the <xref:System.Security.SecureString.MakeReadOnly%2A> method to make the value of the instance immutable (read-only)."},{"content":"After the value is marked as read-only, any further attempt to modify it throws an <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph>.","pos":[170,293],"source":" After the value is marked as read-only, any further attempt to modify it throws an <xref:System.InvalidOperationException>."}]}]},{"pos":[749,1098],"content":"The effect of invoking <xref:System.Security.SecureString.MakeReadOnly%2A> is permanent because the <xref:System.Security.SecureString> class provides no means to make the secure string modifiable again. Use the <xref:System.Security.SecureString.IsReadOnly%2A> method to test whether an instance of <xref:System.Security.SecureString> is read-only.","nodes":[{"content":"The effect of invoking <xref:System.Security.SecureString.MakeReadOnly%2A> is permanent because the <xref:System.Security.SecureString> class provides no means to make the secure string modifiable again. Use the <xref:System.Security.SecureString.IsReadOnly%2A> method to test whether an instance of <xref:System.Security.SecureString> is read-only.","pos":[0,349],"nodes":[{"content":"The effect of invoking <ph id=\"ph1\">&lt;xref:System.Security.SecureString.MakeReadOnly%2A&gt;</ph> is permanent because the <ph id=\"ph2\">&lt;xref:System.Security.SecureString&gt;</ph> class provides no means to make the secure string modifiable again.","pos":[0,203],"source":"The effect of invoking <xref:System.Security.SecureString.MakeReadOnly%2A> is permanent because the <xref:System.Security.SecureString> class provides no means to make the secure string modifiable again."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Security.SecureString.IsReadOnly%2A&gt;</ph> method to test whether an instance of <ph id=\"ph2\">&lt;xref:System.Security.SecureString&gt;</ph> is read-only.","pos":[204,349],"source":" Use the <xref:System.Security.SecureString.IsReadOnly%2A> method to test whether an instance of <xref:System.Security.SecureString> is read-only."}]}]}],"pos":[42797,43902],"yaml":true,"extradata":"MT"},{"content":"This secure string has already been disposed.","nodes":[{"pos":[0,45],"content":"This secure string has already been disposed.","nodes":[{"content":"This secure string has already been disposed.","pos":[0,45]}]}],"pos":[44787,44833],"yaml":true},{"content":"Removes the character at the specified index position from this secure string.","nodes":[{"pos":[0,78],"content":"Removes the character at the specified index position from this secure string.","nodes":[{"content":"Removes the character at the specified index position from this secure string.","pos":[0,78]}]}],"pos":[46112,46191],"yaml":true},{"content":"The index is zero-based; the first character in this instance is at index position zero.  \n  \n If the implementation uses a protection mechanism, such as encryption, the value of this secure string, if any, is unprotected; the character at the specified index position is removed; then the new value is re-protected.","nodes":[{"pos":[0,88],"content":"The index is zero-based; the first character in this instance is at index position zero.","nodes":[{"content":"The index is zero-based; the first character in this instance is at index position zero.","pos":[0,88]}]},{"pos":[95,316],"content":"If the implementation uses a protection mechanism, such as encryption, the value of this secure string, if any, is unprotected; the character at the specified index position is removed; then the new value is re-protected.","nodes":[{"content":"If the implementation uses a protection mechanism, such as encryption, the value of this secure string, if any, is unprotected; the character at the specified index position is removed; then the new value is re-protected.","pos":[0,221]}]}],"pos":[46202,46523],"yaml":true,"extradata":"MT"},{"content":"The index position of a character in this secure string.","nodes":[{"pos":[0,56],"content":"The index position of a character in this secure string.","nodes":[{"content":"The index position of a character in this secure string.","pos":[0,56]}]}],"pos":[48041,48098],"yaml":true},{"content":"This secure string has already been disposed.","nodes":[{"pos":[0,45],"content":"This secure string has already been disposed.","nodes":[{"content":"This secure string has already been disposed.","pos":[0,45]}]}],"pos":[48269,48315],"yaml":true},{"content":"This secure string is read-only.","nodes":[{"pos":[0,32],"content":"This secure string is read-only.","nodes":[{"content":"This secure string is read-only.","pos":[0,32]}]}],"pos":[48425,48458],"yaml":true},{"content":"<code>index</code> is less than zero, or greater than or equal to the length of this secure string.","nodes":[{"pos":[0,99],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero, or greater than or equal to the length of this secure string.","source":"<code>index</code> is less than zero, or greater than or equal to the length of this secure string."}],"pos":[48572,48672],"yaml":true},{"content":"An error occurred while protecting or unprotecting the value of this secure string.","nodes":[{"pos":[0,83],"content":"An error occurred while protecting or unprotecting the value of this secure string.","nodes":[{"content":"An error occurred while protecting or unprotecting the value of this secure string.","pos":[0,83]}]}],"pos":[48820,48904],"yaml":true},{"content":"Replaces the existing character at the specified index position with another character.","nodes":[{"pos":[0,87],"content":"Replaces the existing character at the specified index position with another character.","nodes":[{"content":"Replaces the existing character at the specified index position with another character.","pos":[0,87]}]}],"pos":[50323,50411],"yaml":true},{"content":"The index is zero-based; the first character in this instance is at index position zero.  \n  \n If the implementation uses a protection mechanism, such as encryption, the value of the secure string, if any, is unprotected; `c` is assigned to the specified index position; then the new value is re-protected.","nodes":[{"pos":[0,88],"content":"The index is zero-based; the first character in this instance is at index position zero.","nodes":[{"content":"The index is zero-based; the first character in this instance is at index position zero.","pos":[0,88]}]},{"pos":[95,306],"content":"If the implementation uses a protection mechanism, such as encryption, the value of the secure string, if any, is unprotected; <ph id=\"ph1\">`c`</ph> is assigned to the specified index position; then the new value is re-protected.","source":"If the implementation uses a protection mechanism, such as encryption, the value of the secure string, if any, is unprotected; `c` is assigned to the specified index position; then the new value is re-protected."}],"pos":[50422,50733],"yaml":true,"extradata":"MT"},{"content":"The index position of an existing character in this secure string","nodes":[{"pos":[0,65],"content":"The index position of an existing character in this secure string","nodes":[{"content":"The index position of an existing character in this secure string","pos":[0,65]}]}],"pos":[51681,51747],"yaml":true},{"content":"A character that replaces the existing character.","nodes":[{"pos":[0,49],"content":"A character that replaces the existing character.","nodes":[{"content":"A character that replaces the existing character.","pos":[0,49]}]}],"pos":[51802,51852],"yaml":true},{"content":"This secure string has already been disposed.","nodes":[{"pos":[0,45],"content":"This secure string has already been disposed.","nodes":[{"content":"This secure string has already been disposed.","pos":[0,45]}]}],"pos":[52020,52066],"yaml":true},{"content":"This secure string is read-only.","nodes":[{"pos":[0,32],"content":"This secure string is read-only.","nodes":[{"content":"This secure string is read-only.","pos":[0,32]}]}],"pos":[52176,52209],"yaml":true},{"content":"<code>index</code> is less than zero, or greater than or equal to the length of this secure string.","nodes":[{"pos":[0,99],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero, or greater than or equal to the length of this secure string.","source":"<code>index</code> is less than zero, or greater than or equal to the length of this secure string."}],"pos":[52323,52423],"yaml":true},{"content":"An error occurred while protecting or unprotecting the value of this secure string.","nodes":[{"pos":[0,83],"content":"An error occurred while protecting or unprotecting the value of this secure string.","nodes":[{"content":"An error occurred while protecting or unprotecting the value of this secure string.","pos":[0,83]}]}],"pos":[52571,52655],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.SecureString\n  commentId: T:System.Security.SecureString\n  id: SecureString\n  children:\n  - System.Security.SecureString.#ctor\n  - System.Security.SecureString.#ctor(System.Char*,System.Int32)\n  - System.Security.SecureString.AppendChar(System.Char)\n  - System.Security.SecureString.Clear\n  - System.Security.SecureString.Copy\n  - System.Security.SecureString.Dispose\n  - System.Security.SecureString.InsertAt(System.Int32,System.Char)\n  - System.Security.SecureString.IsReadOnly\n  - System.Security.SecureString.Length\n  - System.Security.SecureString.MakeReadOnly\n  - System.Security.SecureString.RemoveAt(System.Int32)\n  - System.Security.SecureString.SetAt(System.Int32,System.Char)\n  langs:\n  - csharp\n  name: SecureString\n  nameWithType: SecureString\n  fullName: System.Security.SecureString\n  type: Class\n  assemblies:\n  - System.Security.SecureString\n  - mscorlib\n  - netstandard\n  - System.Runtime.InteropServices\n  namespace: System.Security\n  summary: Represents text that should be kept confidential, such as by deleting it from computer memory when no longer needed. This class cannot be inherited.\n  remarks: \"<xref:System.Security.SecureString> is a string type that provides a measure of security. It tries to avoid storing potentially sensitive strings in process memory as plain text.  (For limitations, however, see the [How secure is SecureString?](#HowSecure) section.) The value of an instance of <xref:System.Security.SecureString> is automatically protected using a mechanism supported by the underlying platform when the instance is initialized or when the value is modified. Your application can render the instance immutable and prevent further modification by invoking the <xref:System.Security.SecureString.MakeReadOnly%2A> method.  \\n  \\n The maximum length of a <xref:System.Security.SecureString> instance is 65,536 characters.  \\n  \\n> [!IMPORTANT]\\n>  This type implements the <xref:System.IDisposable> interface. When you have finished using an instance of the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \\\"Using an Object that Implements IDisposable\\\" section in the <xref:System.IDisposable> interface topic.  \\n  \\n The <xref:System.Security.SecureString> class and its members are not visible to COM. For more information, see <xref:System.Runtime.InteropServices.ComVisibleAttribute>.  \\n  \\n In this section:  \\n  \\n [String vs. SecureString](#vsString)   \\n [SecureString operations](#Ops)   \\n [SecureString and interop](#interop)   \\n [How secure is  SecureString?](#HowSecure)  \\n  \\n<a name=\\\"vsString\\\"></a>   \\n## String versus SecureString  \\n An instance of the <xref:System.String?displayProperty=fullName> class is both immutable and, when no longer needed, cannot be programmatically scheduled for garbage collection; that is, the instance is read-only after it is created, and it is not possible to predict when the instance will be deleted from computer memory. Because <xref:System.String?displayProperty=fullName> instances are immutable, operations that appear to modify an existing instance  actually create a copy of it to manipulate. Consequently, if a <xref:System.String> object contains sensitive information such as a password, credit card number, or personal data, there is a risk the information could be revealed after it is used because your application cannot delete the data from computer memory.  \\n  \\n A <xref:System.Security.SecureString> object is similar to a <xref:System.String> object in that it has a text value. However, the value of a <xref:System.Security.SecureString> object is pinned in memory, may use a protection mechanism, such as encryption, provided by the underlying operating system, can be modified until your application marks it as read-only, and can be deleted from computer memory either by your application calling the <xref:System.Security.SecureString.Dispose%2A> method  or by the .NET Framework garbage collector.  \\n  \\n For a discussion of the limitations of the <xref:System.Security.SecureString> class, see the [How secure is  SecureString?](#HowSecure) section.  \\n  \\n [Back to top](#top)  \\n  \\n<a name=\\\"Ops\\\"></a>   \\n## SecureString operations  \\n The <xref:System.Security.SecureString> class includes members that allow you to do the following:  \\n  \\n Instantiate a <xref:System.Security.SecureString> object  \\n You instantiate a <xref:System.Security.SecureString> object by calling its parameterless constructor.  \\n  \\n Add characters to a <xref:System.Security.SecureString> object  \\n You can add a single character at a time to a <xref:System.Security.SecureString> object  by calling its <xref:System.Security.SecureString.AppendChar%2A> or <xref:System.Security.SecureString.InsertAt%2A> method.  \\n  \\n> [!IMPORTANT]\\n>  A <xref:System.Security.SecureString> object should never be constructed from a <xref:System.String>, because the sensitive data is already subject to the memory persistence consequences of the immutable <xref:System.String> class. The best way to construct a <xref:System.Security.SecureString> object is from a character-at-a-time unmanaged source, such as the <xref:System.Console.ReadKey%2A?displayProperty=fullName> method.  \\n  \\n Remove characters from a <xref:System.Security.SecureString> object  \\n You can replace an individual character by calling the <xref:System.Security.SecureString.SetAt%2A> method, remove an individual character by calling the <xref:System.Security.SecureString.RemoveAt%2A> method, or remove all characters from the <xref:System.Security.SecureString> instance by calling the  <xref:System.Security.SecureString.Clear%2A> method.  \\n  \\n Make the <xref:System.Security.SecureString> object read-only  \\n Once you have defined the string that the <xref:System.Security.SecureString> object represents, you call its  <xref:System.Security.SecureString.MakeReadOnly%2A> method to make the string read-only.  \\n  \\n Get information about the <xref:System.Security.SecureString> object  \\n The <xref:System.Security.SecureString> class has only two members that provide information about the string: its <xref:System.Security.SecureString.Length%2A> property, which indicates the number of UTF16-encoded code units in the string; and the <xref:System.Security.SecureString.IsReadOnly%2A>, method, which indicates whether the instance is read-only.  \\n  \\n Release the memory allocated to the <xref:System.Security.SecureString> instance  \\n Because <xref:System.Security.SecureString> implements the <xref:System.IDisposable> interface, you release its memory by calling the <xref:System.Security.SecureString.Dispose%2A> method.  \\n  \\n The <xref:System.Security.SecureString> class has no members that inspect, compare, or convert the value of a <xref:System.Security.SecureString>. The absence of such members helps protect the value of the instance from accidental or malicious exposure. Use appropriate members of the <xref:System.Runtime.InteropServices.Marshal?displayProperty=fullName> class, such as the <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A> method, to manipulate the value of a <xref:System.Security.SecureString> object.  \\n  \\n The .NET Framework Class Library commonly uses <xref:System.Security.SecureString> instances in the following ways:  \\n  \\n-   To provide password information to a process by using the <xref:System.Diagnostics.ProcessStartInfo> structure or by calling an overload of the <xref:System.Diagnostics.Process.Start%2A?displayProperty=fullName> method that has a parameter of type <xref:System.Security.SecureString>.  \\n  \\n-   To provide network password information by calling a <xref:System.Net.NetworkCredential> class constructor that has a parameter of type <xref:System.Security.SecureString> or by using the <xref:System.Net.NetworkCredential.SecurePassword%2A?displayProperty=fullName> property.  \\n  \\n-   To provide password information for SQL Server Authentication by calling the <xref:System.Data.SqlClient.SqlCredential.%23ctor%2A?displayProperty=fullName> constructor or retrieving the value of the <xref:System.Data.SqlClient.SqlCredential.Password%2A?displayProperty=fullName> property.  \\n  \\n-   To pass a string to unmanaged code. For more information, see the [SecureString and interop](#interop) section.  \\n  \\n [Back to top](#top)  \\n  \\n<a name=\\\"interop\\\"></a>   \\n## SecureString and interop  \\n Because the operating system does not  directly support <xref:System.Security.SecureString>, you must convert the value of the <xref:System.Security.SecureString> object to the required string type before passing the string to a native method.  The <xref:System.Runtime.InteropServices.Marshal> class has five methods that do this:  \\n  \\n-   <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName>, which converts the <xref:System.Security.SecureString> string value to a binary string (BSTR) recognized by COM.  \\n  \\n-   <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName> and <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName>, which copy the <xref:System.Security.SecureString> string value to an ANSI string in unmanaged memory.  \\n  \\n-   <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName> and <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName>, which copy the <xref:System.Security.SecureString> string value to a Unicode string in unmanaged memory.  \\n  \\n Each of these methods creates a clear-text string in unmanaged memory. It is the responsibility of the developer to zero out and free that memory as soon as it is no longer needed. Each of the string conversion and memory allocation methods has a corresponding method to zero out and free the allocated memory:  \\n  \\n|Allocation and conversion method|Zero and free method|  \\n|--------------------------------------|--------------------------|  \\n|<xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A?displayProperty=fullName>|  \\n|<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A?displayProperty=fullName>|  \\n|<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A?displayProperty=fullName>|  \\n|<xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A?displayProperty=fullName>|  \\n|<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A?displayProperty=fullName>|  \\n  \\n [Back to top](#top)  \\n  \\n<a name=\\\"HowSecure\\\"></a>   \\n## How secure is SecureString?  \\n When created properly, a <xref:System.Security.SecureString> instance provides more data protection than a <xref:System.String>. When creating a string from a character-at-a-time source, <xref:System.String> creates multiple intermediate in memory, whereas  <xref:System.Security.SecureString> creates just a single instance.  Garbage collection of <xref:System.String> objects  is non-deterministic. In addition, because its memory is not pinned, the garbage collector will make additional copies of <xref:System.String> values when moving and compacting memory. In contrast, the memory allocated to a <xref:System.Security.SecureString> object is pinned,  and that memory can be freed by calling the <xref:System.Security.SecureString.Dispose%2A> method.  \\n  \\n Although data stored in a <xref:System.Security.SecureString> instance is more secure than data stored in a <xref:System.String> instance, there are significant limitations on how secure a <xref:System.Security.SecureString> instance is. These include:  \\n  \\n Platform  \\n On the Windows operating system, the contents of a <xref:System.Security.SecureString> instance's internal character array is encrypted. However, whether because of missing APIs or key management issues,  encryption is not available on all platforms. Because of this, <xref:System.Security.SecureString> is available on Desktop (Windows only), and not on .NET Core.  \\n  \\n Duration  \\n Even if the <xref:System.Security.SecureString> implementation is able to take advantage of encryption, the plain text assigned to the <xref:System.Security.SecureString> instance may be exposed at various times:  \\n  \\n-   Because Windows doesn't offer a secure string implementation at the operating system level, the .NET Framework still has to convert the secure string value to its plain text representation in order to use it.  \\n  \\n-   Whenever the value of the secure string is modified by methods such as <xref:System.Security.SecureString.AppendChar%2A> or <xref:System.Security.SecureString.RemoveAt%2A>, it must be decrypted (i.e., converted back to plain text), modified, and then encrypted again.  \\n  \\n-   If the secure string is used in an interop call, it must be converted to an ANSI string, a Unicode string, or a binary string (BSTR). For more information, see the [SecureString and interop](#interop) section.  \\n  \\n The time interval for which the <xref:System.Security.SecureString> instance's value is exposed  is merely shortened in comparison to the <xref:System.String> class.  \\n  \\n Storage versus usage  \\n More generally, the <xref:System.Security.SecureString> class defines a storage mechanism for string values that should be protected or kept confidential. However, outside of the .NET Framework itself, no usage mechanism supports <xref:System.Security.SecureString>. This means that the secure string must be converted to a usable form (typically a clear text form) that can be recognized by its target, and     that decryption and conversion must occur in user space.  \\n  \\n Overall, <xref:System.Security.SecureString> is more secure than <xref:System.String> because it limits the exposure of sensitive string data. However, those strings may still be exposed to any process or operation that has access to raw memory, such as a malicious process running on the host computer, a process dump, or a user-viewable swap file. Instead of using <xref:System.Security.SecureString> to protect passwords, the recommended alternative is to use an opaque handle to credentials that are stored outside of the process.  \\n  \\n [Back to top](#top)\"\n  example:\n  - \"The following example demonstrates how to use a <xref:System.Security.SecureString> to secure a user’s password for use as a credential to start a new process.  \\n  \\n [!code-csharp[System.Security.SecureString.Ctor#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cs/ctor4.cs#4)]\\n [!code-vb[System.Security.SecureString.Ctor#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/vb/ctor4.vb#4)]\"\n  syntax:\n    content: 'public sealed class SecureString : IDisposable'\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/SecureString.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Security.SecureString.#ctor\n  commentId: M:System.Security.SecureString.#ctor\n  id: '#ctor'\n  parent: System.Security.SecureString\n  langs:\n  - csharp\n  name: SecureString()\n  nameWithType: SecureString.SecureString()\n  fullName: SecureString.SecureString()\n  type: Constructor\n  assemblies:\n  - System.Security.SecureString\n  - mscorlib\n  - netstandard\n  - System.Runtime.InteropServices\n  namespace: System.Security\n  summary: Initializes a new instance of the <xref href=\"System.Security.SecureString\"></xref> class.\n  remarks: ''\n  example:\n  - \"The following example uses the default (or parameterless) constructor to instantiate a new <xref:System.Security.SecureString> object. It then calls the <xref:System.Security.SecureString.AppendChar%2A> method to add an array of characters to it.  \\n  \\n [!code-cpp[System.Security.SecureString.Ctor#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cpp/Ctor2.cpp#2)]\\n [!code-csharp[System.Security.SecureString.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cs/Ctor2.cs#2)]\\n [!code-vb[System.Security.SecureString.Ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/vb/ctor2.vb#2)]  \\n  \\n The following example creates a <xref:System.Security.SecureString> object from the value of a <xref:System.String> object.  \\n  \\n [!code-cpp[System.Security.SecureString.Ctor#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cpp/Ctor3.cpp#3)]\\n [!code-csharp[System.Security.SecureString.Ctor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cs/Ctor3.cs#3)]\\n [!code-vb[System.Security.SecureString.Ctor#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/vb/Ctor3.vb#3)]\"\n  syntax:\n    content: public SecureString ();\n    parameters: []\n  overload: System.Security.SecureString.#ctor*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: An error occurred while protecting or unprotecting the value of this instance.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This operation is not supported on this platform.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/SecureString.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Security.SecureString.#ctor(System.Char*,System.Int32)\n  commentId: M:System.Security.SecureString.#ctor(System.Char*,System.Int32)\n  id: '#ctor(System.Char*,System.Int32)'\n  parent: System.Security.SecureString\n  langs:\n  - csharp\n  name: SecureString(Char*, Int32)\n  nameWithType: SecureString.SecureString(Char*, Int32)\n  fullName: SecureString.SecureString(Char*, Int32)\n  type: Constructor\n  assemblies:\n  - System.Security.SecureString\n  - mscorlib\n  - netstandard\n  - System.Runtime.InteropServices\n  namespace: System.Security\n  summary: \"Initializes a new instance of the <xref href=\\\"System.Security.SecureString\\\"></xref> class from a subarray of <xref href=\\\"System.Char\\\"></xref> objects.  \\n  \\n This constructor is not CLS-compliant. The CLS-compliant alternative is <xref href=\\\"System.Security.SecureString.#ctor\\\"></xref>.\"\n  remarks: \"This constructor initializes the new <xref:System.Security.SecureString> object to the number of characters in `value` specified by `length`; the value of the instance is then encrypted.  \\n  \\n In C#, this constructor is defined only in the context of unsafe code.\"\n  example:\n  - \"The following example instantiates a new <xref:System.Security.SecureString> object by passing its constructor a pointer to a character array.  \\n  \\n [!code-cpp[System.Security.SecureString.Ctor2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.security.securestring.ctor2/cpp/ctor1.cpp#1)]\\n [!code-csharp[System.Security.SecureString.Ctor2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.security.securestring.ctor2/cs/ctor1.cs#1)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public SecureString (char* value, int length);\n    parameters:\n    - id: value\n      type: System.Char*\n      description: A pointer to an array of <xref href=\"System.Char\"></xref> objects.\n    - id: length\n      type: System.Int32\n      description: The number of elements of <code>value</code> to include in the new instance.\n  overload: System.Security.SecureString.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>length</code> is less than zero or greater than 65,536.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: An error occurred while protecting or unprotecting the value of this secure string.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This operation is not supported on this platform.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/SecureString.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Security.SecureString.AppendChar(System.Char)\n  commentId: M:System.Security.SecureString.AppendChar(System.Char)\n  id: AppendChar(System.Char)\n  parent: System.Security.SecureString\n  langs:\n  - csharp\n  name: AppendChar(Char)\n  nameWithType: SecureString.AppendChar(Char)\n  fullName: SecureString.AppendChar(Char)\n  type: Method\n  assemblies:\n  - System.Security.SecureString\n  - mscorlib\n  - netstandard\n  - System.Runtime.InteropServices\n  namespace: System.Security\n  summary: Appends a character to the end of the current secure string.\n  remarks: If the implementation uses a protection mechanism, such as encryption, the value of this secure string, if any, is unprotected; `c` is appended; then the new value of the secure string is re-protected.\n  example:\n  - \"The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.  \\n  \\n [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]\\n [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]\\n [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  \\n  \\n The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A> and <xref:System.Security.SecureString.RemoveAt%2A> methods can be used to collect the characters in a password.  \\n  \\n [!code-cpp[SecureString.xChar#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xChar/CPP/SecureString.xChar.cpp#1)]\\n [!code-csharp[SecureString.xChar#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xChar/CS/xchar.cs#1)]\\n [!code-vb[SecureString.xChar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xChar/VB/xchar.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions]\n\n      public void AppendChar (char c);\n    parameters:\n    - id: c\n      type: System.Char\n      description: A character to append to this secure string.\n  overload: System.Security.SecureString.AppendChar*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This secure string has already been disposed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: This secure string is read-only.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: Performing this operation would make the length of this secure string greater than 65,536 characters.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: An error occurred while protecting or unprotecting the value of this secure string.\n  attributes:\n  - type: System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/SecureString.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Security.SecureString.Clear\n  commentId: M:System.Security.SecureString.Clear\n  id: Clear\n  parent: System.Security.SecureString\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: SecureString.Clear()\n  fullName: SecureString.Clear()\n  type: Method\n  assemblies:\n  - System.Security.SecureString\n  - mscorlib\n  - netstandard\n  - System.Runtime.InteropServices\n  namespace: System.Security\n  summary: Deletes the value of the current secure string.\n  remarks: The computer memory that contains the value of this secure string is zeroed, then the length of the value of this secure string is set to zero.\n  example:\n  - \"The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.  \\n  \\n [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]\\n [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]\\n [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]\"\n  syntax:\n    content: public void Clear ();\n    parameters: []\n  overload: System.Security.SecureString.Clear*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This secure string has already been disposed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: This secure string is read-only.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/SecureString.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Security.SecureString.Copy\n  commentId: M:System.Security.SecureString.Copy\n  id: Copy\n  parent: System.Security.SecureString\n  langs:\n  - csharp\n  name: Copy()\n  nameWithType: SecureString.Copy()\n  fullName: SecureString.Copy()\n  type: Method\n  assemblies:\n  - System.Security.SecureString\n  - mscorlib\n  - netstandard\n  - System.Runtime.InteropServices\n  namespace: System.Security\n  summary: Creates a copy of the current secure string.\n  remarks: If an instance of a <xref:System.Security.SecureString> is marked read-only, the copy of that instance will not be read-only.\n  syntax:\n    content: public System.Security.SecureString Copy ();\n    parameters: []\n    return:\n      type: System.Security.SecureString\n      description: A duplicate of this secure string.\n  overload: System.Security.SecureString.Copy*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This secure string has already been disposed.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: An error occurred while protecting or unprotecting the value of this secure string.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/SecureString.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Security.SecureString.Dispose\n  commentId: M:System.Security.SecureString.Dispose\n  id: Dispose\n  parent: System.Security.SecureString\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: SecureString.Dispose()\n  fullName: SecureString.Dispose()\n  type: Method\n  assemblies:\n  - System.Security.SecureString\n  - mscorlib\n  - netstandard\n  - System.Runtime.InteropServices\n  namespace: System.Security\n  summary: Releases all resources used by the current <xref href=\"System.Security.SecureString\"></xref> object.\n  remarks: \"The <xref:System.Security.SecureString.Dispose%2A> method writes binary zeroes to the allocated memory that contains the value of this <xref:System.Security.SecureString> object, then frees the allocated memory.  \\n  \\n For more information, see [Garbage Collection](http://msdn.microsoft.com/library/22b6cb97-0c80-4eeb-a2cf-5ed7655e37f9).\"\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Security.SecureString.Dispose*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/SecureString.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Security.SecureString.InsertAt(System.Int32,System.Char)\n  commentId: M:System.Security.SecureString.InsertAt(System.Int32,System.Char)\n  id: InsertAt(System.Int32,System.Char)\n  parent: System.Security.SecureString\n  langs:\n  - csharp\n  name: InsertAt(Int32, Char)\n  nameWithType: SecureString.InsertAt(Int32, Char)\n  fullName: SecureString.InsertAt(Int32, Char)\n  type: Method\n  assemblies:\n  - System.Security.SecureString\n  - mscorlib\n  - netstandard\n  - System.Runtime.InteropServices\n  namespace: System.Security\n  summary: Inserts a character in this secure string at the specified index position.\n  remarks: \"The index is zero-based; the first character in this secure string is at index position zero.  \\n  \\n If the implementation uses a protection mechanism, such as encryption, the value of the secure string, if any, is unprotected; `c` is inserted at the specified index position; then the new value is re-protected. The <xref:System.Security.SecureString.InsertAt%2A> method yields the same results as the <xref:System.Security.SecureString.AppendChar%2A> method, which inserts a character at the end of a secure string, if the `index` parameter of <xref:System.Security.SecureString.InsertAt%2A> is set to the length of this instance.\"\n  example:\n  - \"The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.  \\n  \\n [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]\\n [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]\\n [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions]\n\n      public void InsertAt (int index, char c);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The index position where parameter <code>c</code> is inserted.\n    - id: c\n      type: System.Char\n      description: The character to insert.\n  overload: System.Security.SecureString.InsertAt*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This secure string has already been disposed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: This secure string is read-only.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> is less than zero, or greater than the length of this secure string.  \\n  \\n -or-  \\n  \\n Performing this operation would make the length of this secure string greater than 65,536 characters.\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: An error occurred while protecting or unprotecting the value of this secure string.\n  attributes:\n  - type: System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/SecureString.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Security.SecureString.IsReadOnly\n  commentId: M:System.Security.SecureString.IsReadOnly\n  id: IsReadOnly\n  parent: System.Security.SecureString\n  langs:\n  - csharp\n  name: IsReadOnly()\n  nameWithType: SecureString.IsReadOnly()\n  fullName: SecureString.IsReadOnly()\n  type: Method\n  assemblies:\n  - System.Security.SecureString\n  - mscorlib\n  - netstandard\n  - System.Runtime.InteropServices\n  namespace: System.Security\n  summary: Indicates whether this secure string is marked read-only.\n  remarks: After an instance of <xref:System.Security.SecureString> is marked read-only by the <xref:System.Security.SecureString.MakeReadOnly%2A> method, any attempt to modify the value of the instance throws an <xref:System.InvalidOperationException>. Use the <xref:System.Security.SecureString.IsReadOnly%2A> method to test whether a <xref:System.Security.SecureString> is read-only before attempting to modify it.\n  syntax:\n    content: public bool IsReadOnly ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`true` if this secure string is marked read-only; otherwise, `false`.'\n  overload: System.Security.SecureString.IsReadOnly*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This secure string has already been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/SecureString.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Security.SecureString.Length\n  commentId: P:System.Security.SecureString.Length\n  id: Length\n  parent: System.Security.SecureString\n  langs:\n  - csharp\n  name: Length\n  nameWithType: SecureString.Length\n  fullName: SecureString.Length\n  type: Property\n  assemblies:\n  - System.Security.SecureString\n  - mscorlib\n  - netstandard\n  - System.Runtime.InteropServices\n  namespace: System.Security\n  summary: Gets the number of characters in the current secure string.\n  remarks: \"The <xref:System.Security.SecureString.Length%2A> property returns the number of <xref:System.Char> objects in this instance, not the number of Unicode characters. A Unicode character might be represented by more than one <xref:System.Char> object.  \\n  \\n The maximum length of a <xref:System.Security.SecureString> instance is 65,536 characters.\"\n  syntax:\n    content: public int Length { get; }\n    return:\n      type: System.Int32\n      description: The number of <xref href=\"System.Char\"></xref> objects in this secure string.\n  overload: System.Security.SecureString.Length*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This secure string has already been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/SecureString.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Security.SecureString.MakeReadOnly\n  commentId: M:System.Security.SecureString.MakeReadOnly\n  id: MakeReadOnly\n  parent: System.Security.SecureString\n  langs:\n  - csharp\n  name: MakeReadOnly()\n  nameWithType: SecureString.MakeReadOnly()\n  fullName: SecureString.MakeReadOnly()\n  type: Method\n  assemblies:\n  - System.Security.SecureString\n  - mscorlib\n  - netstandard\n  - System.Runtime.InteropServices\n  namespace: System.Security\n  summary: Makes the text value of this secure string read-only.\n  remarks: \"Initialize the text value of an instance of the <xref:System.Security.SecureString> class with the <xref:System.Security.SecureString.%23ctor%2A> constructors, and modify the value with the <xref:System.Security.SecureString.Clear%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, <xref:System.Security.SecureString.InsertAt%2A>, and <xref:System.Security.SecureString.AppendChar%2A> methods.  \\n  \\n After you have made your final modifications, use the <xref:System.Security.SecureString.MakeReadOnly%2A> method to make the value of the instance immutable (read-only). After the value is marked as read-only, any further attempt to modify it throws an <xref:System.InvalidOperationException>.  \\n  \\n The effect of invoking <xref:System.Security.SecureString.MakeReadOnly%2A> is permanent because the <xref:System.Security.SecureString> class provides no means to make the secure string modifiable again. Use the <xref:System.Security.SecureString.IsReadOnly%2A> method to test whether an instance of <xref:System.Security.SecureString> is read-only.\"\n  example:\n  - \"The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A> and <xref:System.Security.SecureString.RemoveAt%2A> methods can be used to collect the characters in a password. After the password is collected, it is made read-only.  \\n  \\n [!code-cpp[SecureString.xChar#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xChar/CPP/SecureString.xChar.cpp#1)]\\n [!code-csharp[SecureString.xChar#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xChar/CS/xchar.cs#1)]\\n [!code-vb[SecureString.xChar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xChar/VB/xchar.vb#1)]\"\n  syntax:\n    content: public void MakeReadOnly ();\n    parameters: []\n  overload: System.Security.SecureString.MakeReadOnly*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This secure string has already been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/SecureString.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Security.SecureString.RemoveAt(System.Int32)\n  commentId: M:System.Security.SecureString.RemoveAt(System.Int32)\n  id: RemoveAt(System.Int32)\n  parent: System.Security.SecureString\n  langs:\n  - csharp\n  name: RemoveAt(Int32)\n  nameWithType: SecureString.RemoveAt(Int32)\n  fullName: SecureString.RemoveAt(Int32)\n  type: Method\n  assemblies:\n  - System.Security.SecureString\n  - mscorlib\n  - netstandard\n  - System.Runtime.InteropServices\n  namespace: System.Security\n  summary: Removes the character at the specified index position from this secure string.\n  remarks: \"The index is zero-based; the first character in this instance is at index position zero.  \\n  \\n If the implementation uses a protection mechanism, such as encryption, the value of this secure string, if any, is unprotected; the character at the specified index position is removed; then the new value is re-protected.\"\n  example:\n  - \"The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.  \\n  \\n [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]\\n [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]\\n [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  \\n  \\n The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A> and <xref:System.Security.SecureString.RemoveAt%2A> methods can be used to collect the characters in a password.  \\n  \\n [!code-cpp[SecureString.xChar#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xChar/CPP/SecureString.xChar.cpp#1)]\\n [!code-csharp[SecureString.xChar#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xChar/CS/xchar.cs#1)]\\n [!code-vb[SecureString.xChar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xChar/VB/xchar.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions]\n\n      public void RemoveAt (int index);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The index position of a character in this secure string.\n  overload: System.Security.SecureString.RemoveAt*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This secure string has already been disposed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: This secure string is read-only.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> is less than zero, or greater than or equal to the length of this secure string.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: An error occurred while protecting or unprotecting the value of this secure string.\n  attributes:\n  - type: System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/SecureString.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Security.SecureString.SetAt(System.Int32,System.Char)\n  commentId: M:System.Security.SecureString.SetAt(System.Int32,System.Char)\n  id: SetAt(System.Int32,System.Char)\n  parent: System.Security.SecureString\n  langs:\n  - csharp\n  name: SetAt(Int32, Char)\n  nameWithType: SecureString.SetAt(Int32, Char)\n  fullName: SecureString.SetAt(Int32, Char)\n  type: Method\n  assemblies:\n  - System.Security.SecureString\n  - mscorlib\n  - netstandard\n  - System.Runtime.InteropServices\n  namespace: System.Security\n  summary: Replaces the existing character at the specified index position with another character.\n  remarks: \"The index is zero-based; the first character in this instance is at index position zero.  \\n  \\n If the implementation uses a protection mechanism, such as encryption, the value of the secure string, if any, is unprotected; `c` is assigned to the specified index position; then the new value is re-protected.\"\n  example:\n  - \"The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.  \\n  \\n [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]\\n [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]\\n [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions]\n\n      public void SetAt (int index, char c);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The index position of an existing character in this secure string\n    - id: c\n      type: System.Char\n      description: A character that replaces the existing character.\n  overload: System.Security.SecureString.SetAt*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This secure string has already been disposed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: This secure string is read-only.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> is less than zero, or greater than or equal to the length of this secure string.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: An error occurred while protecting or unprotecting the value of this secure string.\n  attributes:\n  - type: System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/SecureString.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Security.Cryptography.CryptographicException\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CryptographicException\n  nameWithType: CryptographicException\n  fullName: System.Security.Cryptography.CryptographicException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  nameWithType: NotSupportedException\n  fullName: System.NotSupportedException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.ObjectDisposedException\n  parent: System\n  isExternal: false\n  name: ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.Security.SecureString.#ctor\n  parent: System.Security.SecureString\n  isExternal: false\n  name: SecureString()\n  nameWithType: SecureString.SecureString()\n  fullName: SecureString.SecureString()\n- uid: System.Security.SecureString.#ctor(System.Char*,System.Int32)\n  parent: System.Security.SecureString\n  isExternal: false\n  name: SecureString(Char*, Int32)\n  nameWithType: SecureString.SecureString(Char*, Int32)\n  fullName: SecureString.SecureString(Char*, Int32)\n- uid: System.Char\n  name: Char\n  nameWithType: Char\n  fullName: System.Char\n- uid: System.Char*\n  parent: System\n  isExternal: false\n  name: Char*\n  nameWithType: Char*\n  fullName: System.Char*\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    nameWithType: Char\n    fullName: System.Char\n  - name: '*'\n    nameWithType: '*'\n    fullName: '*'\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.SecureString.AppendChar(System.Char)\n  parent: System.Security.SecureString\n  isExternal: false\n  name: AppendChar(Char)\n  nameWithType: SecureString.AppendChar(Char)\n  fullName: SecureString.AppendChar(Char)\n- uid: System.Security.SecureString.Clear\n  parent: System.Security.SecureString\n  isExternal: false\n  name: Clear()\n  nameWithType: SecureString.Clear()\n  fullName: SecureString.Clear()\n- uid: System.Security.SecureString.Copy\n  parent: System.Security.SecureString\n  isExternal: false\n  name: Copy()\n  nameWithType: SecureString.Copy()\n  fullName: SecureString.Copy()\n- uid: System.Security.SecureString\n  parent: System.Security\n  isExternal: false\n  name: SecureString\n  nameWithType: SecureString\n  fullName: System.Security.SecureString\n- uid: System.Security.SecureString.Dispose\n  parent: System.Security.SecureString\n  isExternal: false\n  name: Dispose()\n  nameWithType: SecureString.Dispose()\n  fullName: SecureString.Dispose()\n- uid: System.Security.SecureString.InsertAt(System.Int32,System.Char)\n  parent: System.Security.SecureString\n  isExternal: false\n  name: InsertAt(Int32, Char)\n  nameWithType: SecureString.InsertAt(Int32, Char)\n  fullName: SecureString.InsertAt(Int32, Char)\n- uid: System.Security.SecureString.IsReadOnly\n  parent: System.Security.SecureString\n  isExternal: false\n  name: IsReadOnly()\n  nameWithType: SecureString.IsReadOnly()\n  fullName: SecureString.IsReadOnly()\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.SecureString.Length\n  parent: System.Security.SecureString\n  isExternal: false\n  name: Length\n  nameWithType: SecureString.Length\n  fullName: SecureString.Length\n- uid: System.Security.SecureString.MakeReadOnly\n  parent: System.Security.SecureString\n  isExternal: false\n  name: MakeReadOnly()\n  nameWithType: SecureString.MakeReadOnly()\n  fullName: SecureString.MakeReadOnly()\n- uid: System.Security.SecureString.RemoveAt(System.Int32)\n  parent: System.Security.SecureString\n  isExternal: false\n  name: RemoveAt(Int32)\n  nameWithType: SecureString.RemoveAt(Int32)\n  fullName: SecureString.RemoveAt(Int32)\n- uid: System.Security.SecureString.SetAt(System.Int32,System.Char)\n  parent: System.Security.SecureString\n  isExternal: false\n  name: SetAt(Int32, Char)\n  nameWithType: SecureString.SetAt(Int32, Char)\n  fullName: SecureString.SetAt(Int32, Char)\n- uid: System.Security.SecureString.#ctor*\n  parent: System.Security.SecureString\n  isExternal: false\n  name: SecureString\n  nameWithType: SecureString.SecureString\n  fullName: SecureString.SecureString\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/SecureString.xml\n- uid: System.Security.SecureString.AppendChar*\n  parent: System.Security.SecureString\n  isExternal: false\n  name: AppendChar\n  nameWithType: SecureString.AppendChar\n  fullName: SecureString.AppendChar\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/SecureString.xml\n- uid: System.Security.SecureString.Clear*\n  parent: System.Security.SecureString\n  isExternal: false\n  name: Clear\n  nameWithType: SecureString.Clear\n  fullName: SecureString.Clear\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/SecureString.xml\n- uid: System.Security.SecureString.Copy*\n  parent: System.Security.SecureString\n  isExternal: false\n  name: Copy\n  nameWithType: SecureString.Copy\n  fullName: SecureString.Copy\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/SecureString.xml\n- uid: System.Security.SecureString.Dispose*\n  parent: System.Security.SecureString\n  isExternal: false\n  name: Dispose\n  nameWithType: SecureString.Dispose\n  fullName: SecureString.Dispose\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/SecureString.xml\n- uid: System.Security.SecureString.InsertAt*\n  parent: System.Security.SecureString\n  isExternal: false\n  name: InsertAt\n  nameWithType: SecureString.InsertAt\n  fullName: SecureString.InsertAt\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/SecureString.xml\n- uid: System.Security.SecureString.IsReadOnly*\n  parent: System.Security.SecureString\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: SecureString.IsReadOnly\n  fullName: SecureString.IsReadOnly\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/SecureString.xml\n- uid: System.Security.SecureString.Length*\n  parent: System.Security.SecureString\n  isExternal: false\n  name: Length\n  nameWithType: SecureString.Length\n  fullName: SecureString.Length\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/SecureString.xml\n- uid: System.Security.SecureString.MakeReadOnly*\n  parent: System.Security.SecureString\n  isExternal: false\n  name: MakeReadOnly\n  nameWithType: SecureString.MakeReadOnly\n  fullName: SecureString.MakeReadOnly\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/SecureString.xml\n- uid: System.Security.SecureString.RemoveAt*\n  parent: System.Security.SecureString\n  isExternal: false\n  name: RemoveAt\n  nameWithType: SecureString.RemoveAt\n  fullName: SecureString.RemoveAt\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/SecureString.xml\n- uid: System.Security.SecureString.SetAt*\n  parent: System.Security.SecureString\n  isExternal: false\n  name: SetAt\n  nameWithType: SecureString.SetAt\n  fullName: SecureString.SetAt\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/SecureString.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  nameWithType: IDisposable\n  fullName: System.IDisposable\n"}